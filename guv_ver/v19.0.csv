,func_oldfunccode,func_newfunccode,func_newdoc,func_newJdoc,func_olddoc,func_oldJdoc,func_addlines,func_addcode,func_dellines,func_delcode,func_path,func_pathinproj,func_methodsig,doc_oldfunccode,doc_newfunccode,doc_newdoc,doc_newJdoc,doc_olddoc,doc_oldJdoc,doc_addlines,doc_addcode,doc_dellines,doc_delcode,doc_path,doc_pathinproj,doc_methodsig,id,flag,commit
1,a70f009926809b9a37ebbc16ebbc9cf71030be11/Codes/Match_oldfunccode_a70f009926809b9a37ebbc16ebbc9cf71030be11_1.txt,a70f009926809b9a37ebbc16ebbc9cf71030be11/Codes/Match_newfunccode_a70f009926809b9a37ebbc16ebbc9cf71030be11_1.txt,,,,,"[160, 545, 547, 132, 549, 134, 550, 106, 650, 396, 398, 558, 400, 560, 94, 158]","['    setBackingMap(new LinkedHashMap<E, Count>());\n', '    expectedValuesPerKey = DEFAULT_VALUES_PER_KEY;\n', '    Map<K, Collection<V>> map = Maps.newHashMap();\n', '    setBackingMap(Maps.<E, Count>newHashMap());\n', '      ImmutableList.Builder<Object> valuesBuilder = ImmutableList.builder();\n', '        valuesBuilder.add(stream.readObject());\n', '      builder.put(key, valuesBuilder.build());\n', '    init(16);\n', '    valueSetCapacity = DEFAULT_VALUE_SET_CAPACITY;\n', '    Map<K, Collection<V>> map = new LinkedHashMap<K, Collection<V>>();\n', '      ImmutableSet.Builder<Object> valuesBuilder = valuesBuilder(valueComparator);\n', '        valuesBuilder.add(stream.readObject());\n', '      ImmutableSet<Object> valueSet = valuesBuilder.build();\n', '      if (valueSet.size() != valueCount) {\n', '    expectedValuesPerKey = DEFAULT_VALUES_PER_KEY;\n', '    Map<K, Collection<V>> map = Maps.newHashMap();\n']","[544, 161, 133, 135, 106, 107, 651, 396, 398, 559, 400, 561, 562, 539, 541, 94, 95, 543, 159]","['    setBackingMap(new LinkedHashMap<E, Count>(\n', '        Maps.capacity(distinctElements)));\n', '    expectedValuesPerKey = stream.readInt();\n', '    Map<K, Collection<V>> map = Maps.newHashMapWithExpectedSize(distinctKeys);\n', '    setBackingMap(\n', '        Maps.<E, Count>newHashMapWithExpectedSize(distinctElements));\n', '      Object[] array = new Object[valueCount];\n', '        array[j] = stream.readObject();\n', '      builder.put(key, ImmutableList.copyOf(array));\n', '    init(size);\n', '    valueSetCapacity = stream.readInt();\n', '    Map<K, Collection<V>> map =\n', '        new LinkedHashMap<K, Collection<V>>(Maps.capacity(distinctKeys));\n', '      Object[] array = new Object[valueCount];\n', '        array[j] = stream.readObject();\n', '      ImmutableSet<Object> valueSet = valueSet(valueComparator, asList(array));\n', '      if (valueSet.size() != array.length) {\n', '    expectedValuesPerKey = stream.readInt();\n', '    Map<K, Collection<V>> map = Maps.newHashMapWithExpectedSize(distinctKeys);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/a70f009926809b9a37ebbc16ebbc9cf71030be11/LinkedHashMultiset,guava/src/com/google/common/collect/LinkedHashMultiset.java,"private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException",a70f009926809b9a37ebbc16ebbc9cf71030be11/Codes/Match_olddocfunccode_a70f009926809b9a37ebbc16ebbc9cf71030be11_1.txt,a70f009926809b9a37ebbc16ebbc9cf71030be11/Codes/Match_newdocfunccode_a70f009926809b9a37ebbc16ebbc9cf71030be11_1.txt,,a70f009926809b9a37ebbc16ebbc9cf71030be11/Codes/Match_newdocnewJdoc_a70f009926809b9a37ebbc16ebbc9cf71030be11_1.txt,,a70f009926809b9a37ebbc16ebbc9cf71030be11/Codes/Match_olddocJdoc_a70f009926809b9a37ebbc16ebbc9cf71030be11_1.txt,[],[],"[45, 46, 47]","['    setBackingMap(new LinkedHashMap<E, Count>(\n', '        Maps.capacity(distinctElements)));\n', '    expectedValuesPerKey = stream.readInt();\n', '    Map<K, Collection<V>> map = Maps.newHashMapWithExpectedSize(distinctKeys);\n', '    setBackingMap(\n', '        Maps.<E, Count>newHashMapWithExpectedSize(distinctElements));\n', '      Object[] array = new Object[valueCount];\n', '        array[j] = stream.readObject();\n', '      builder.put(key, ImmutableList.copyOf(array));\n', '    init(size);\n', '    valueSetCapacity = stream.readInt();\n', '    Map<K, Collection<V>> map =\n', '        new LinkedHashMap<K, Collection<V>>(Maps.capacity(distinctKeys));\n', '      Object[] array = new Object[valueCount];\n', '        array[j] = stream.readObject();\n', '      ImmutableSet<Object> valueSet = valueSet(valueComparator, asList(array));\n', '      if (valueSet.size() != array.length) {\n', '    expectedValuesPerKey = stream.readInt();\n', '    Map<K, Collection<V>> map = Maps.newHashMapWithExpectedSize(distinctKeys);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/a70f009926809b9a37ebbc16ebbc9cf71030be11/Serialization,guava/src/com/google/common/collect/Serialization.java, static int readCount(ObjectInputStream stream) throws IOException,3,1,a70f009926809b9a37ebbc16ebbc9cf71030be11
2,,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newfunccode_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_1.txt,,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newfuncnewJdoc_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_1.txt,,,"[298, 299, 300, 301]","['  public static <T> BloomFilter<T> create(\n', '      Funnel<? super T> funnel, int expectedInsertions, double fpp) {\n', '    return create(funnel, (long) expectedInsertions, fpp);\n', '  }\n']",[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/BloomFilter,guava/src/com/google/common/hash/BloomFilter.java,"public static BloomFilter<T> create(Funnel<? super T> funnel, int expectedInsertions, double fpp)",76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_olddocfunccode_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_1.txt,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newdocfunccode_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_1.txt," FYI, for 3%, we always get 5 hash functions
",76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newdocnewJdoc_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_1.txt," FYI, for 3%, we always get 5 hash functions
",76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_olddocJdoc_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_1.txt,"[384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 403]","['  /**\n', '   * Creates a {@link BloomFilter BloomFilter<T>} with the expected number of\n', '   * insertions and a default expected false positive probability of 3%.\n', '   *\n', '   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements\n', '   * than specified, will result in its saturation, and a sharp deterioration of its\n', '   * false positive probability.\n', '   *\n', '   * <p>The constructed {@code BloomFilter<T>} will be serializable if the provided\n', '   * {@code Funnel<T>} is.\n', '   *\n', '   * <p>It is recommended that the funnel be implemented as a Java enum. This has the\n', '   * benefit of ensuring proper serialization and deserialization, which is important\n', '   * since {@link #equals} also relies on object identity of funnels.\n', '   *\n', '   * @since 19.0\n']",[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/BloomFilter,guava/src/com/google/common/hash/BloomFilter.java,"public static BloomFilter<T> create(Funnel<? super T> funnel, long expectedInsertions)",5,1,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef
3,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_oldfunccode_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_2.txt,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newfunccode_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_2.txt,,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newfuncnewJdoc_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_2.txt,,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_oldfuncoldJdoc_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_2.txt,[325],['  @CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/BloomFilter,guava/src/com/google/common/hash/BloomFilter.java,"public static BloomFilter<T> create(Funnel<? super T> funnel, long expectedInsertions, double fpp)",76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_olddocfunccode_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_2.txt,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newdocfunccode_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_2.txt," FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
",76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newdocnewJdoc_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_2.txt," FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
",76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_olddocJdoc_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_2.txt,"[384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 403]","['  /**\n', '   * Creates a {@link BloomFilter BloomFilter<T>} with the expected number of\n', '   * insertions and a default expected false positive probability of 3%.\n', '   *\n', '   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements\n', '   * than specified, will result in its saturation, and a sharp deterioration of its\n', '   * false positive probability.\n', '   *\n', '   * <p>The constructed {@code BloomFilter<T>} will be serializable if the provided\n', '   * {@code Funnel<T>} is.\n', '   *\n', '   * <p>It is recommended that the funnel be implemented as a Java enum. This has the\n', '   * benefit of ensuring proper serialization and deserialization, which is important\n', '   * since {@link #equals} also relies on object identity of funnels.\n', '   *\n', '   * @since 19.0\n']",[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/BloomFilter,guava/src/com/google/common/hash/BloomFilter.java,"public static BloomFilter<T> create(Funnel<? super T> funnel, long expectedInsertions)",5,1,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef
4,,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newfunccode_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_3.txt,,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newfuncnewJdoc_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_3.txt,,,"[379, 380, 381, 382]","['  @CheckReturnValue\n', '  public static <T> BloomFilter<T> create(Funnel<? super T> funnel, int expectedInsertions) {\n', '    return create(funnel, (long) expectedInsertions);\n', '  }\n']",[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/BloomFilter,guava/src/com/google/common/hash/BloomFilter.java,"public static BloomFilter<T> create(Funnel<? super T> funnel, int expectedInsertions)",76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_olddocfunccode_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_3.txt,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newdocfunccode_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_3.txt," FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
",76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newdocnewJdoc_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_3.txt," FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
",76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_olddocJdoc_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_3.txt,"[384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 403]","['  /**\n', '   * Creates a {@link BloomFilter BloomFilter<T>} with the expected number of\n', '   * insertions and a default expected false positive probability of 3%.\n', '   *\n', '   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements\n', '   * than specified, will result in its saturation, and a sharp deterioration of its\n', '   * false positive probability.\n', '   *\n', '   * <p>The constructed {@code BloomFilter<T>} will be serializable if the provided\n', '   * {@code Funnel<T>} is.\n', '   *\n', '   * <p>It is recommended that the funnel be implemented as a Java enum. This has the\n', '   * benefit of ensuring proper serialization and deserialization, which is important\n', '   * since {@link #equals} also relies on object identity of funnels.\n', '   *\n', '   * @since 19.0\n']",[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/BloomFilter,guava/src/com/google/common/hash/BloomFilter.java,"public static BloomFilter<T> create(Funnel<? super T> funnel, long expectedInsertions)",5,1,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef
5,,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newfunccode_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_4.txt,,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newfuncnewJdoc_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_4.txt,,,"[298, 299, 300, 301]","['  public static <T> BloomFilter<T> create(\n', '      Funnel<? super T> funnel, int expectedInsertions, double fpp) {\n', '    return create(funnel, (long) expectedInsertions, fpp);\n', '  }\n']",[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/BloomFilter,guava/src/com/google/common/hash/BloomFilter.java,"public static BloomFilter<T> create(Funnel<? super T> funnel, int expectedInsertions, double fpp)",76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_olddocfunccode_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_4.txt,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newdocfunccode_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_4.txt," FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
",76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newdocnewJdoc_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_4.txt," FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
",76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_olddocJdoc_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_4.txt,"[384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 403]","['  /**\n', '   * Creates a {@link BloomFilter BloomFilter<T>} with the expected number of\n', '   * insertions and a default expected false positive probability of 3%.\n', '   *\n', '   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements\n', '   * than specified, will result in its saturation, and a sharp deterioration of its\n', '   * false positive probability.\n', '   *\n', '   * <p>The constructed {@code BloomFilter<T>} will be serializable if the provided\n', '   * {@code Funnel<T>} is.\n', '   *\n', '   * <p>It is recommended that the funnel be implemented as a Java enum. This has the\n', '   * benefit of ensuring proper serialization and deserialization, which is important\n', '   * since {@link #equals} also relies on object identity of funnels.\n', '   *\n', '   * @since 19.0\n']",[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/BloomFilter,guava/src/com/google/common/hash/BloomFilter.java,"public static BloomFilter<T> create(Funnel<? super T> funnel, long expectedInsertions)",3,1,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef
6,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_oldfunccode_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_5.txt,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newfunccode_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_5.txt,,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newfuncnewJdoc_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_5.txt,,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_oldfuncoldJdoc_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_5.txt,[325],['  @CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/BloomFilter,guava/src/com/google/common/hash/BloomFilter.java,"public static BloomFilter<T> create(Funnel<? super T> funnel, long expectedInsertions, double fpp)",76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_olddocfunccode_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_5.txt,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newdocfunccode_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_5.txt," FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
",76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newdocnewJdoc_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_5.txt," FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
",76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_olddocJdoc_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_5.txt,"[384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 403]","['  /**\n', '   * Creates a {@link BloomFilter BloomFilter<T>} with the expected number of\n', '   * insertions and a default expected false positive probability of 3%.\n', '   *\n', '   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements\n', '   * than specified, will result in its saturation, and a sharp deterioration of its\n', '   * false positive probability.\n', '   *\n', '   * <p>The constructed {@code BloomFilter<T>} will be serializable if the provided\n', '   * {@code Funnel<T>} is.\n', '   *\n', '   * <p>It is recommended that the funnel be implemented as a Java enum. This has the\n', '   * benefit of ensuring proper serialization and deserialization, which is important\n', '   * since {@link #equals} also relies on object identity of funnels.\n', '   *\n', '   * @since 19.0\n']",[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/BloomFilter,guava/src/com/google/common/hash/BloomFilter.java,"public static BloomFilter<T> create(Funnel<? super T> funnel, long expectedInsertions)",3,1,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef
7,,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newfunccode_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_6.txt,,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newfuncnewJdoc_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_6.txt,,,"[379, 380, 381, 382]","['  @CheckReturnValue\n', '  public static <T> BloomFilter<T> create(Funnel<? super T> funnel, int expectedInsertions) {\n', '    return create(funnel, (long) expectedInsertions);\n', '  }\n']",[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/BloomFilter,guava/src/com/google/common/hash/BloomFilter.java,"public static BloomFilter<T> create(Funnel<? super T> funnel, int expectedInsertions)",76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_olddocfunccode_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_6.txt,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newdocfunccode_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_6.txt," FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
",76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_newdocnewJdoc_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_6.txt," FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
 FYI, for 3%, we always get 5 hash functions
",76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/Codes/Match_olddocJdoc_76b76a8491d7e1cfe1f69ee00c796d907be3e8ef_6.txt,"[384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 403]","['  /**\n', '   * Creates a {@link BloomFilter BloomFilter<T>} with the expected number of\n', '   * insertions and a default expected false positive probability of 3%.\n', '   *\n', '   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements\n', '   * than specified, will result in its saturation, and a sharp deterioration of its\n', '   * false positive probability.\n', '   *\n', '   * <p>The constructed {@code BloomFilter<T>} will be serializable if the provided\n', '   * {@code Funnel<T>} is.\n', '   *\n', '   * <p>It is recommended that the funnel be implemented as a Java enum. This has the\n', '   * benefit of ensuring proper serialization and deserialization, which is important\n', '   * since {@link #equals} also relies on object identity of funnels.\n', '   *\n', '   * @since 19.0\n']",[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/76b76a8491d7e1cfe1f69ee00c796d907be3e8ef/BloomFilter,guava/src/com/google/common/hash/BloomFilter.java,"public static BloomFilter<T> create(Funnel<? super T> funnel, long expectedInsertions)",3,1,76b76a8491d7e1cfe1f69ee00c796d907be3e8ef
8,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_oldfunccode_ac25c5019e61dae7a993562235b8de4fdada0394_1.txt,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_newfunccode_ac25c5019e61dae7a993562235b8de4fdada0394_1.txt,,,,,[1078],"['  private void await(Guard guard, boolean signalBeforeWaiting)\n']",[983],"['    private void await(Guard guard, boolean signalBeforeWaiting)\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/ac25c5019e61dae7a993562235b8de4fdada0394/Monitor,guava/src/com/google/common/util/concurrent/Monitor.java,"private void await(Guard guard, boolean signalBeforeWaiting) throws InterruptedException",ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_olddocfunccode_ac25c5019e61dae7a993562235b8de4fdada0394_1.txt,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_newdocfunccode_ac25c5019e61dae7a993562235b8de4fdada0394_1.txt,,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_newdocnewJdoc_ac25c5019e61dae7a993562235b8de4fdada0394_1.txt,,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_olddocJdoc_ac25c5019e61dae7a993562235b8de4fdada0394_1.txt,"[434, 435]","['   *\n', '   * @throws InterruptedException if interrupted while waiting\n']",[],"['    private void await(Guard guard, boolean signalBeforeWaiting)\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/ac25c5019e61dae7a993562235b8de4fdada0394/Monitor,guava/src/com/google/common/util/concurrent/Monitor.java,public void enterWhen(Guard guard) throws InterruptedException,5,1,ac25c5019e61dae7a993562235b8de4fdada0394
9,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_oldfunccode_ac25c5019e61dae7a993562235b8de4fdada0394_2.txt,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_newfunccode_ac25c5019e61dae7a993562235b8de4fdada0394_2.txt,,,,,[1078],"['  private void await(Guard guard, boolean signalBeforeWaiting)\n']",[983],"['    private void await(Guard guard, boolean signalBeforeWaiting)\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/ac25c5019e61dae7a993562235b8de4fdada0394/Monitor,guava/src/com/google/common/util/concurrent/Monitor.java,"private void await(Guard guard, boolean signalBeforeWaiting) throws InterruptedException",ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_olddocfunccode_ac25c5019e61dae7a993562235b8de4fdada0394_2.txt,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_newdocfunccode_ac25c5019e61dae7a993562235b8de4fdada0394_2.txt,,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_newdocnewJdoc_ac25c5019e61dae7a993562235b8de4fdada0394_2.txt,,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_olddocJdoc_ac25c5019e61dae7a993562235b8de4fdada0394_2.txt,[634],['   * @throws InterruptedException if interrupted while waiting\n'],[],"['    private void await(Guard guard, boolean signalBeforeWaiting)\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/ac25c5019e61dae7a993562235b8de4fdada0394/Monitor,guava/src/com/google/common/util/concurrent/Monitor.java,public boolean enterIfInterruptibly(Guard guard) throws InterruptedException,5,1,ac25c5019e61dae7a993562235b8de4fdada0394
10,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_oldfunccode_ac25c5019e61dae7a993562235b8de4fdada0394_3.txt,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_newfunccode_ac25c5019e61dae7a993562235b8de4fdada0394_3.txt,,,,,[1078],"['  private void await(Guard guard, boolean signalBeforeWaiting)\n']",[983],"['    private void await(Guard guard, boolean signalBeforeWaiting)\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/ac25c5019e61dae7a993562235b8de4fdada0394/Monitor,guava/src/com/google/common/util/concurrent/Monitor.java,"private void await(Guard guard, boolean signalBeforeWaiting) throws InterruptedException",ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_olddocfunccode_ac25c5019e61dae7a993562235b8de4fdada0394_3.txt,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_newdocfunccode_ac25c5019e61dae7a993562235b8de4fdada0394_3.txt,,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_newdocnewJdoc_ac25c5019e61dae7a993562235b8de4fdada0394_3.txt,,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_olddocJdoc_ac25c5019e61dae7a993562235b8de4fdada0394_3.txt,"[733, 734]","['   *\n', '   * @throws InterruptedException if interrupted while waiting\n']",[],"['    private void await(Guard guard, boolean signalBeforeWaiting)\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/ac25c5019e61dae7a993562235b8de4fdada0394/Monitor,guava/src/com/google/common/util/concurrent/Monitor.java,public void waitFor(Guard guard) throws InterruptedException,5,1,ac25c5019e61dae7a993562235b8de4fdada0394
11,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_oldfunccode_ac25c5019e61dae7a993562235b8de4fdada0394_4.txt,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_newfunccode_ac25c5019e61dae7a993562235b8de4fdada0394_4.txt,,,,,[1078],"['  private void await(Guard guard, boolean signalBeforeWaiting)\n']",[983],"['    private void await(Guard guard, boolean signalBeforeWaiting)\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/ac25c5019e61dae7a993562235b8de4fdada0394/Monitor,guava/src/com/google/common/util/concurrent/Monitor.java,"private void await(Guard guard, boolean signalBeforeWaiting) throws InterruptedException",ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_olddocfunccode_ac25c5019e61dae7a993562235b8de4fdada0394_4.txt,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_newdocfunccode_ac25c5019e61dae7a993562235b8de4fdada0394_4.txt,,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_newdocnewJdoc_ac25c5019e61dae7a993562235b8de4fdada0394_4.txt,,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_olddocJdoc_ac25c5019e61dae7a993562235b8de4fdada0394_4.txt,[415],['   * @throws InterruptedException if interrupted while waiting\n'],[],"['    private void await(Guard guard, boolean signalBeforeWaiting)\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/ac25c5019e61dae7a993562235b8de4fdada0394/Monitor,guava/src/com/google/common/util/concurrent/Monitor.java,"public boolean enterInterruptibly(long time, TimeUnit unit) throws InterruptedException",5,1,ac25c5019e61dae7a993562235b8de4fdada0394
12,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_oldfunccode_ac25c5019e61dae7a993562235b8de4fdada0394_5.txt,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_newfunccode_ac25c5019e61dae7a993562235b8de4fdada0394_5.txt,,,,,[1078],"['  private void await(Guard guard, boolean signalBeforeWaiting)\n']",[983],"['    private void await(Guard guard, boolean signalBeforeWaiting)\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/ac25c5019e61dae7a993562235b8de4fdada0394/Monitor,guava/src/com/google/common/util/concurrent/Monitor.java,"private void await(Guard guard, boolean signalBeforeWaiting) throws InterruptedException",ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_olddocfunccode_ac25c5019e61dae7a993562235b8de4fdada0394_5.txt,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_newdocfunccode_ac25c5019e61dae7a993562235b8de4fdada0394_5.txt,,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_newdocnewJdoc_ac25c5019e61dae7a993562235b8de4fdada0394_5.txt,,ac25c5019e61dae7a993562235b8de4fdada0394/Codes/Match_olddocJdoc_ac25c5019e61dae7a993562235b8de4fdada0394_5.txt,"[375, 376]","['   *\n', '   * @throws InterruptedException if interrupted while waiting\n']",[],"['    private void await(Guard guard, boolean signalBeforeWaiting)\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/ac25c5019e61dae7a993562235b8de4fdada0394/Monitor,guava/src/com/google/common/util/concurrent/Monitor.java,public void enterInterruptibly() throws InterruptedException,5,1,ac25c5019e61dae7a993562235b8de4fdada0394
13,269d98573f4e6eed051a8ae2cdb392a7b606e939/Codes/Match_oldfunccode_269d98573f4e6eed051a8ae2cdb392a7b606e939_1.txt,269d98573f4e6eed051a8ae2cdb392a7b606e939/Codes/Match_newfunccode_269d98573f4e6eed051a8ae2cdb392a7b606e939_1.txt," if ""from"" is wildcard, it's assignable to ""to"" if any of its ""extends""
 if ""from"" is type variable, it's assignable if any of its ""extends""
 if ""to"" is <? super Foo>, ""from"" can be:
 Foo, SubFoo, <? extends Foo>.
 if ""to"" is <? extends Foo>, nothing assignable.
 bounds is assignable to ""to"".
 <? super Base> is of no use in checking 'from' being a subtype of 'to'.
 bounds is assignable to ""to"".
 Proceed to regular Type assignability check
 to instanceof TypeVariable
",," if ""from"" is type variable, it's assignable if any of its ""extends""
 if ""from"" is wildcard, it'a assignable to ""to"" if any of its ""extends""
 bounds is assignable to ""to"".
 bounds is assignable to ""to"".
 Proceed to regular Type assignability check
 to instanceof TypeVariable
",,"[761, 762, 763, 764, 751]",[],"[755, 756, 757, 747, 748, 749, 751]",[],/home/pritish/Documents/IP work/guava_commits/269d98573f4e6eed051a8ae2cdb392a7b606e939/TypeToken,guava/src/com/google/common/reflect/TypeToken.java,"private static boolean isAssignable(Type from, Type to)",269d98573f4e6eed051a8ae2cdb392a7b606e939/Codes/Match_olddocfunccode_269d98573f4e6eed051a8ae2cdb392a7b606e939_1.txt,269d98573f4e6eed051a8ae2cdb392a7b606e939/Codes/Match_newdocfunccode_269d98573f4e6eed051a8ae2cdb392a7b606e939_1.txt,,269d98573f4e6eed051a8ae2cdb392a7b606e939/Codes/Match_newdocnewJdoc_269d98573f4e6eed051a8ae2cdb392a7b606e939_1.txt,,,[780],[],[],[],/home/pritish/Documents/IP work/guava_commits/269d98573f4e6eed051a8ae2cdb392a7b606e939/TypeToken,guava/src/com/google/common/reflect/TypeToken.java,"private static boolean isAssignableFromAny(Type[] fromTypes, Type to)",5,1,269d98573f4e6eed051a8ae2cdb392a7b606e939
14,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_1.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_1.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfuncnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_1.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfuncoldJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_1.txt,[195],['  @CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,public final String join(Iterator<?> parts),9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_1.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_1.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_1.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_1.txt,[213],['  //@CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public final String join(@Nullable Object first, @Nullable Object second, Object... rest)",5,1,9cd3ea9cedd399648488142f7e1eefd0f5a63866
15,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_2.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_2.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfuncnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_2.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfuncoldJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_2.txt,[335],['    @CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public String join(Map<?, ?> map)",9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_2.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_2.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_2.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_2.txt,[213],['  //@CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public final String join(@Nullable Object first, @Nullable Object second, Object... rest)",5,1,9cd3ea9cedd399648488142f7e1eefd0f5a63866
16,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_3.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_3.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfuncnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_3.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfuncoldJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_3.txt,[204],['  @CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,public final String join(Object[] parts),9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_3.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_3.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_3.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_3.txt,[213],['  //@CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public final String join(@Nullable Object first, @Nullable Object second, Object... rest)",5,1,9cd3ea9cedd399648488142f7e1eefd0f5a63866
17,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_4.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_4.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfuncnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_4.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfuncoldJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_4.txt,[426],['    @CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public String join(Iterator<? extends Entry<?, ?>> entries)",9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_4.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_4.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_4.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_4.txt,[213],['  //@CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public final String join(@Nullable Object first, @Nullable Object second, Object... rest)",5,1,9cd3ea9cedd399648488142f7e1eefd0f5a63866
18,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_5.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_5.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfuncnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_5.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfuncoldJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_5.txt,[184],['  @CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,public final String join(Iterable<?> parts),9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_5.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_5.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_5.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_5.txt,[213],['  //@CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public final String join(@Nullable Object first, @Nullable Object second, Object... rest)",5,1,9cd3ea9cedd399648488142f7e1eefd0f5a63866
19,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_6.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_6.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfuncnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_6.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfuncoldJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_6.txt,[414],['    @CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public String join(Iterable<? extends Entry<?, ?>> entries)",9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_6.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_6.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_6.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_6.txt,[213],['  //@CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public final String join(@Nullable Object first, @Nullable Object second, Object... rest)",5,1,9cd3ea9cedd399648488142f7e1eefd0f5a63866
20,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_7.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_7.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfuncnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_7.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfuncoldJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_7.txt,[195],['  @CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,public final String join(Iterator<?> parts),9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_7.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_7.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_7.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_7.txt,[213],['  //@CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public final String join(@Nullable Object first, @Nullable Object second, Object... rest)",3,1,9cd3ea9cedd399648488142f7e1eefd0f5a63866
21,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_8.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_8.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfuncnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_8.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfuncoldJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_8.txt,[111],['  @CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/MoreObjects,guava/src/com/google/common/base/MoreObjects.java,public static ToStringHelper toStringHelper(Class<?> clazz),9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_8.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_8.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_8.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_8.txt,[213],['  //@CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public final String join(@Nullable Object first, @Nullable Object second, Object... rest)",3,1,9cd3ea9cedd399648488142f7e1eefd0f5a63866
22,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_9.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_9.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfuncnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_9.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfuncoldJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_9.txt,[],[],[47],['  @CheckReturnValue\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Strings,guava/src/com/google/common/base/Strings.java,public static String nullToEmpty(@Nullable String string),9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_9.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_9.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_9.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_9.txt,[213],['  //@CheckReturnValue\n'],[],['  @CheckReturnValue\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public final String join(@Nullable Object first, @Nullable Object second, Object... rest)",3,1,9cd3ea9cedd399648488142f7e1eefd0f5a63866
23,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_10.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_10.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfuncnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_10.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfuncoldJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_10.txt,[335],['    @CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public String join(Map<?, ?> map)",9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_10.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_10.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_10.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_10.txt,[213],['  //@CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public final String join(@Nullable Object first, @Nullable Object second, Object... rest)",3,1,9cd3ea9cedd399648488142f7e1eefd0f5a63866
24,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_11.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_11.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfuncnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_11.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfuncoldJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_11.txt,[124],['  @CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/MoreObjects,guava/src/com/google/common/base/MoreObjects.java,public static ToStringHelper toStringHelper(String className),9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_11.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_11.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_11.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_11.txt,[213],['  //@CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public final String join(@Nullable Object first, @Nullable Object second, Object... rest)",3,1,9cd3ea9cedd399648488142f7e1eefd0f5a63866
25,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_12.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_12.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfuncnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_12.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfuncoldJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_12.txt,[78],['  @CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,public static Joiner on(char separator),9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_12.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_12.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_12.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_12.txt,[213],['  //@CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public final String join(@Nullable Object first, @Nullable Object second, Object... rest)",3,1,9cd3ea9cedd399648488142f7e1eefd0f5a63866
26,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_13.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_13.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfuncnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_13.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfuncoldJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_13.txt,[96],['  @CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/MoreObjects,guava/src/com/google/common/base/MoreObjects.java,public static ToStringHelper toStringHelper(Object self),9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_13.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_13.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_13.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_13.txt,[213],['  //@CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public final String join(@Nullable Object first, @Nullable Object second, Object... rest)",3,1,9cd3ea9cedd399648488142f7e1eefd0f5a63866
27,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_14.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_14.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfuncnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_14.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfuncoldJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_14.txt,[204],['  @CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,public final String join(Object[] parts),9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_14.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_14.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_14.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_14.txt,[213],['  //@CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public final String join(@Nullable Object first, @Nullable Object second, Object... rest)",3,1,9cd3ea9cedd399648488142f7e1eefd0f5a63866
28,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_15.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_15.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfuncnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_15.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfuncoldJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_15.txt,[426],['    @CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public String join(Iterator<? extends Entry<?, ?>> entries)",9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_15.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_15.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_15.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_15.txt,[213],['  //@CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public final String join(@Nullable Object first, @Nullable Object second, Object... rest)",3,1,9cd3ea9cedd399648488142f7e1eefd0f5a63866
29,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_16.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_16.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfuncnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_16.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfuncoldJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_16.txt,[52],['  @CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/MoreObjects,guava/src/com/google/common/base/MoreObjects.java,"public static T firstNonNull(@Nullable T first, @Nullable T second)",9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_16.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_16.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_16.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_16.txt,[213],['  //@CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public final String join(@Nullable Object first, @Nullable Object second, Object... rest)",3,1,9cd3ea9cedd399648488142f7e1eefd0f5a63866
30,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_17.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_17.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfuncnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_17.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfuncoldJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_17.txt,[70],['  @CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,public static Joiner on(String separator),9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_17.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_17.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_17.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_17.txt,[213],['  //@CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public final String join(@Nullable Object first, @Nullable Object second, Object... rest)",3,1,9cd3ea9cedd399648488142f7e1eefd0f5a63866
31,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_18.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_18.txt," create a copy to keep it consistent in case value changes
",9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfuncnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_18.txt," create a copy to keep it consistent in case value changes
",9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfuncoldJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_18.txt,[322],['    @CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/MoreObjects,guava/src/com/google/common/base/MoreObjects.java,public String toString(),9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_18.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_18.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_18.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_18.txt,[213],['  //@CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public final String join(@Nullable Object first, @Nullable Object second, Object... rest)",3,1,9cd3ea9cedd399648488142f7e1eefd0f5a63866
32,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_19.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_19.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfuncnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_19.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfuncoldJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_19.txt,[184],['  @CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,public final String join(Iterable<?> parts),9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_19.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_19.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_19.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_19.txt,[213],['  //@CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public final String join(@Nullable Object first, @Nullable Object second, Object... rest)",3,1,9cd3ea9cedd399648488142f7e1eefd0f5a63866
33,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_20.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_20.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newfuncnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_20.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_oldfuncoldJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_20.txt,[414],['    @CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public String join(Iterable<? extends Entry<?, ?>> entries)",9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_20.txt,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocfunccode_9cd3ea9cedd399648488142f7e1eefd0f5a63866_20.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_newdocnewJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_20.txt,,9cd3ea9cedd399648488142f7e1eefd0f5a63866/Codes/Match_olddocJdoc_9cd3ea9cedd399648488142f7e1eefd0f5a63866_20.txt,[213],['  //@CheckReturnValue\n'],[],[],/home/pritish/Documents/IP work/guv_ver/v19.0/9cd3ea9cedd399648488142f7e1eefd0f5a63866/Joiner,guava/src/com/google/common/base/Joiner.java,"public final String join(@Nullable Object first, @Nullable Object second, Object... rest)",3,1,9cd3ea9cedd399648488142f7e1eefd0f5a63866
34,4b96d280b8e4a8279025fb704fbcaac015bcca8b/Codes/Match_oldfunccode_4b96d280b8e4a8279025fb704fbcaac015bcca8b_1.txt,4b96d280b8e4a8279025fb704fbcaac015bcca8b/Codes/Match_newfunccode_4b96d280b8e4a8279025fb704fbcaac015bcca8b_1.txt,,4b96d280b8e4a8279025fb704fbcaac015bcca8b/Codes/Match_newfuncnewJdoc_4b96d280b8e4a8279025fb704fbcaac015bcca8b_1.txt,,4b96d280b8e4a8279025fb704fbcaac015bcca8b/Codes/Match_oldfuncoldJdoc_4b96d280b8e4a8279025fb704fbcaac015bcca8b_1.txt,[],[],"[1082, 906]","['  @Beta\n', '  @Beta\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/4b96d280b8e4a8279025fb704fbcaac015bcca8b/Maps_2,guava/src/com/google/common/collect/Maps.java,"public static ImmutableMap<K, V> toMap(Iterable<K> keys, Function<? super K, V> valueFunction)",4b96d280b8e4a8279025fb704fbcaac015bcca8b/Codes/Match_olddocfunccode_4b96d280b8e4a8279025fb704fbcaac015bcca8b_1.txt,4b96d280b8e4a8279025fb704fbcaac015bcca8b/Codes/Match_newdocfunccode_4b96d280b8e4a8279025fb704fbcaac015bcca8b_1.txt,,4b96d280b8e4a8279025fb704fbcaac015bcca8b/Codes/Match_newdocnewJdoc_4b96d280b8e4a8279025fb704fbcaac015bcca8b_1.txt,,4b96d280b8e4a8279025fb704fbcaac015bcca8b/Codes/Match_olddocJdoc_4b96d280b8e4a8279025fb704fbcaac015bcca8b_1.txt,"[416, 417, 418, 419, 420, 402, 403, 404, 405, 406, 407, 408, 414, 415]","['   * Returns an immutable map whose keys are the distinct elements of this {@code FluentIterable}\n', ""   * and whose value for each key was computed by {@code valueFunction}. The map's iteration order\n"", '   * is the order of the first appearance of each key in this iterable.\n', '   *\n', '   * <p>When there are multiple instances of a key in this iterable, it is unspecified whether\n', '   * {@code valueFunction} will be applied to more than one instance of that key and, if it is,\n', '   * which result will be mapped to that key in the returned map.\n', '   * Returns an immutable map whose keys are the distinct elements of this {@code FluentIterable}\n', ""   * and whose value for each key was computed by {@code valueFunction}. The map's iteration order\n"", '   * is the order of the first appearance of each key in this iterable.\n', '   *\n', '   * <p>When there are multiple instances of a key in this iterable, it is unspecified whether\n', '   * {@code valueFunction} will be applied to more than one instance of that key and, if it is,\n', '   * which result will be mapped to that key in the returned map.\n']","[416, 417, 402, 403, 404, 405, 414, 415]","['  @Beta\n', '  @Beta\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/4b96d280b8e4a8279025fb704fbcaac015bcca8b/FluentIterable_2,guava/src/com/google/common/collect/FluentIterable.java,"public final ImmutableMap<E, V> toMap(Function<? super E, V> valueFunction)",5,1,4b96d280b8e4a8279025fb704fbcaac015bcca8b
35,4b96d280b8e4a8279025fb704fbcaac015bcca8b/Codes/Match_oldfunccode_4b96d280b8e4a8279025fb704fbcaac015bcca8b_2.txt,4b96d280b8e4a8279025fb704fbcaac015bcca8b/Codes/Match_newfunccode_4b96d280b8e4a8279025fb704fbcaac015bcca8b_2.txt," Using LHM instead of a builder so as not to fail on duplicate keys
",4b96d280b8e4a8279025fb704fbcaac015bcca8b/Codes/Match_newfuncnewJdoc_4b96d280b8e4a8279025fb704fbcaac015bcca8b_2.txt," Using LHM instead of a builder so as not to fail on duplicate keys
",4b96d280b8e4a8279025fb704fbcaac015bcca8b/Codes/Match_oldfuncoldJdoc_4b96d280b8e4a8279025fb704fbcaac015bcca8b_2.txt,[],[],"[1099, 923]","['  @Beta\n', '  @Beta\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/4b96d280b8e4a8279025fb704fbcaac015bcca8b/Maps_2,guava/src/com/google/common/collect/Maps.java,"public static ImmutableMap<K, V> toMap(Iterator<K> keys, Function<? super K, V> valueFunction)",4b96d280b8e4a8279025fb704fbcaac015bcca8b/Codes/Match_olddocfunccode_4b96d280b8e4a8279025fb704fbcaac015bcca8b_2.txt,4b96d280b8e4a8279025fb704fbcaac015bcca8b/Codes/Match_newdocfunccode_4b96d280b8e4a8279025fb704fbcaac015bcca8b_2.txt,,4b96d280b8e4a8279025fb704fbcaac015bcca8b/Codes/Match_newdocnewJdoc_4b96d280b8e4a8279025fb704fbcaac015bcca8b_2.txt,,4b96d280b8e4a8279025fb704fbcaac015bcca8b/Codes/Match_olddocJdoc_4b96d280b8e4a8279025fb704fbcaac015bcca8b_2.txt,"[416, 417, 418, 419, 420, 402, 403, 404, 405, 406, 407, 408, 414, 415]","['   * Returns an immutable map whose keys are the distinct elements of this {@code FluentIterable}\n', ""   * and whose value for each key was computed by {@code valueFunction}. The map's iteration order\n"", '   * is the order of the first appearance of each key in this iterable.\n', '   *\n', '   * <p>When there are multiple instances of a key in this iterable, it is unspecified whether\n', '   * {@code valueFunction} will be applied to more than one instance of that key and, if it is,\n', '   * which result will be mapped to that key in the returned map.\n', '   * Returns an immutable map whose keys are the distinct elements of this {@code FluentIterable}\n', ""   * and whose value for each key was computed by {@code valueFunction}. The map's iteration order\n"", '   * is the order of the first appearance of each key in this iterable.\n', '   *\n', '   * <p>When there are multiple instances of a key in this iterable, it is unspecified whether\n', '   * {@code valueFunction} will be applied to more than one instance of that key and, if it is,\n', '   * which result will be mapped to that key in the returned map.\n']","[416, 417, 402, 403, 404, 405, 414, 415]","['  @Beta\n', '  @Beta\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/4b96d280b8e4a8279025fb704fbcaac015bcca8b/FluentIterable_2,guava/src/com/google/common/collect/FluentIterable.java,"public final ImmutableMap<E, V> toMap(Function<? super E, V> valueFunction)",5,1,4b96d280b8e4a8279025fb704fbcaac015bcca8b
36,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_1.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_1.txt,,,,,"[96, 97, 98, 99, 165, 166, 360, 361, 269, 270, 463, 464, 117, 86, 118, 87]","['    @Override\n', '    public String toString() {\n', '  @Override\n', '  public String toString() {\n', '  @Override\n', '  public String toString() {\n', '        @Override\n', '        public String toString() {\n', '          return AbstractExecutionThreadService.this.toString();\n', '        }\n', '  @Override\n', '  public String toString() {\n', '    @Override\n', '    public String toString() {\n', '  @Override\n', '  public String toString() {\n']","[113, 259, 83, 343, 89, 90, 91, 157, 446]","['    @Override public String toString() {\n', '  @Override public String toString() {\n', '  @Override public String toString() {\n', '    @Override public String toString() {\n', '      return AbstractExecutionThreadService.this.toString();\n', '    }\n', '  @Override public String toString() {\n', '    @Override public String toString() {\n', '  @Override public String toString() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService,guava/src/com/google/common/util/concurrent/AbstractScheduledService.java,public String toString(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_1.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_1.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_1.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_1.txt,"[86, 87, 88, 90, 91, 93, 94]","[""   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that method's standard\n"", '   * exceptions (excluding {@link TimeoutException}, which is propagated) to instances of type\n', '   * {@code X} using {@link #mapException}.\n', '   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this implementation will\n', ""   * set the current thread's interrupt status before calling {@code mapException}.\n"", '   * @throws X if {@link #get()} throws an {@link InterruptedException}, {@link\n', '   *     CancellationException}, or {@link ExecutionException}\n']","[96, 97, 98, 100, 101, 102, 92, 93, 94]","['    @Override public String toString() {\n', '  @Override public String toString() {\n', '  @Override public String toString() {\n', '    @Override public String toString() {\n', '      return AbstractExecutionThreadService.this.toString();\n', '    }\n', '  @Override public String toString() {\n', '    @Override public String toString() {\n', '  @Override public String toString() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractCheckedFuture,guava/src/com/google/common/util/concurrent/AbstractCheckedFuture.java,"public V checkedGet(long timeout, TimeUnit unit) throws TimeoutException, X",5,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
37,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_2.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_2.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_2.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_2.txt,"[309, 310, 633, 634]","['  public static <I, O> ListenableFuture<O> transform(\n', '      ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function) {\n', '  public static <I, O> ListenableFuture<O> transform(\n', '      ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function) {\n']","[333, 653, 334, 654]","['  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n', '      AsyncFunction<? super I, ? extends O> function) {\n', '  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n', '      AsyncFunction<? super I, ? extends O> function) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures,guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java,"public static ListenableFuture<O> transform(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_2.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_2.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_2.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_2.txt,"[86, 87, 88, 90, 91, 93, 94]","[""   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that method's standard\n"", '   * exceptions (excluding {@link TimeoutException}, which is propagated) to instances of type\n', '   * {@code X} using {@link #mapException}.\n', '   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this implementation will\n', ""   * set the current thread's interrupt status before calling {@code mapException}.\n"", '   * @throws X if {@link #get()} throws an {@link InterruptedException}, {@link\n', '   *     CancellationException}, or {@link ExecutionException}\n']","[96, 97, 98, 100, 101, 102, 92, 93, 94]","['  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n', '      AsyncFunction<? super I, ? extends O> function) {\n', '  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n', '      AsyncFunction<? super I, ? extends O> function) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractCheckedFuture,guava/src/com/google/common/util/concurrent/AbstractCheckedFuture.java,"public V checkedGet(long timeout, TimeUnit unit) throws TimeoutException, X",5,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
38,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_3.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_3.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_3.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_3.txt,"[355, 356, 679, 680]","['  public static <I, O> ListenableFuture<O> transform(\n', '      ListenableFuture<I> input,\n', '  public static <I, O> ListenableFuture<O> transform(\n', '      ListenableFuture<I> input,\n']","[383, 703]","['  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n', '  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures,guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java,"public static ListenableFuture<O> transform(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_3.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_3.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_3.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_3.txt,"[86, 87, 88, 90, 91, 93, 94]","[""   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that method's standard\n"", '   * exceptions (excluding {@link TimeoutException}, which is propagated) to instances of type\n', '   * {@code X} using {@link #mapException}.\n', '   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this implementation will\n', ""   * set the current thread's interrupt status before calling {@code mapException}.\n"", '   * @throws X if {@link #get()} throws an {@link InterruptedException}, {@link\n', '   *     CancellationException}, or {@link ExecutionException}\n']","[96, 97, 98, 100, 101, 102, 92, 93, 94]","['  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n', '  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractCheckedFuture,guava/src/com/google/common/util/concurrent/AbstractCheckedFuture.java,"public V checkedGet(long timeout, TimeUnit unit) throws TimeoutException, X",5,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
39,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_4.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_4.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_4.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_4.txt,[62],"['  public static <V> ListenableFutureTask<V> create(Runnable runnable, @Nullable V result) {\n']","[68, 69]","['  public static <V> ListenableFutureTask<V> create(\n', '      Runnable runnable, @Nullable V result) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFutureTask,guava/src/com/google/common/util/concurrent/ListenableFutureTask.java,"public static ListenableFutureTask<V> create(Runnable runnable, @Nullable V result)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_4.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_4.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_4.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_4.txt,"[86, 87, 88, 90, 91, 93, 94]","[""   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that method's standard\n"", '   * exceptions (excluding {@link TimeoutException}, which is propagated) to instances of type\n', '   * {@code X} using {@link #mapException}.\n', '   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this implementation will\n', ""   * set the current thread's interrupt status before calling {@code mapException}.\n"", '   * @throws X if {@link #get()} throws an {@link InterruptedException}, {@link\n', '   *     CancellationException}, or {@link ExecutionException}\n']","[96, 97, 98, 100, 101, 102, 92, 93, 94]","['  public static <V> ListenableFutureTask<V> create(\n', '      Runnable runnable, @Nullable V result) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractCheckedFuture,guava/src/com/google/common/util/concurrent/AbstractCheckedFuture.java,"public V checkedGet(long timeout, TimeUnit unit) throws TimeoutException, X",5,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
40,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_5.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_5.txt," When a listener is first added, we run a task that will wait for the delegate to finish,
 and when it is done will run the listeners.
 If the delegate is already done, run the execution list immediately on the current
 thread.
 TODO(lukes): handle RejectedExecutionException

                   * Threads from our private pool are never interrupted. Threads from a
                   * user-supplied executor might be, but... what can we do? This is another reason
                   * to return a proper ListenableFuture instead of using listenInPoolThread.
                   
 ExecutionException / CancellationException / RuntimeException / Error
 The task is presumably done, run the listeners.
",," When a listener is first added, we run a task that will wait for
 the delegate to finish, and when it is done will run the listeners.
 If the delegate is already done, run the execution list
 immediately on the current thread.
 TODO(lukes): handle RejectedExecutionException

               * Threads from our private pool are never interrupted. Threads
               * from a user-supplied executor might be, but... what can we do?
               * This is another reason to return a proper ListenableFuture
               * instead of using listenInPoolThread.
               
 ExecutionException / CancellationException / RuntimeException / Error
 The task is presumably done, run the listeners.
",,"[161, 162, 147, 163, 148, 164, 149, 150, 151, 157, 158]","['        adapterExecutor.execute(\n', '            new Runnable() {\n', '              @Override\n', '              public void run() {\n', '                try {\n', '                  getUninterruptibly(delegate);\n', '                } catch (Throwable e) {\n', '                }\n', '                executionList.execute();\n', '              }\n', '            });\n']","[176, 161, 177, 162, 178, 163, 164, 171, 172, 175]","['        adapterExecutor.execute(new Runnable() {\n', '          @Override\n', '          public void run() {\n', '            try {\n', '              getUninterruptibly(delegate);\n', '            } catch (Throwable e) {\n', '            }\n', '            executionList.execute();\n', '          }\n', '        });\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/JdkFutureAdapters,guava/src/com/google/common/util/concurrent/JdkFutureAdapters.java,"public void addListener(Runnable listener, Executor exec)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_5.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_5.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_5.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_5.txt,"[86, 87, 88, 90, 91, 93, 94]","[""   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that method's standard\n"", '   * exceptions (excluding {@link TimeoutException}, which is propagated) to instances of type\n', '   * {@code X} using {@link #mapException}.\n', '   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this implementation will\n', ""   * set the current thread's interrupt status before calling {@code mapException}.\n"", '   * @throws X if {@link #get()} throws an {@link InterruptedException}, {@link\n', '   *     CancellationException}, or {@link ExecutionException}\n']","[96, 97, 98, 100, 101, 102, 92, 93, 94]","['        adapterExecutor.execute(new Runnable() {\n', '          @Override\n', '          public void run() {\n', '            try {\n', '              getUninterruptibly(delegate);\n', '            } catch (Throwable e) {\n', '            }\n', '            executionList.execute();\n', '          }\n', '        });\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractCheckedFuture,guava/src/com/google/common/util/concurrent/AbstractCheckedFuture.java,"public V checkedGet(long timeout, TimeUnit unit) throws TimeoutException, X",5,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
41,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_6.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_6.txt,,,,,"[97, 98]","['    @Override\n', '    public final void addListener(Runnable listener, Executor executor) {\n']",[95],"['    @Override public final void addListener(Runnable listener, Executor executor) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture,guava/src/com/google/common/util/concurrent/AbstractFuture.java,"public final void addListener(Runnable listener, Executor executor)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_6.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_6.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_6.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_6.txt,"[86, 87, 88, 90, 91, 93, 94]","[""   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that method's standard\n"", '   * exceptions (excluding {@link TimeoutException}, which is propagated) to instances of type\n', '   * {@code X} using {@link #mapException}.\n', '   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this implementation will\n', ""   * set the current thread's interrupt status before calling {@code mapException}.\n"", '   * @throws X if {@link #get()} throws an {@link InterruptedException}, {@link\n', '   *     CancellationException}, or {@link ExecutionException}\n']","[96, 97, 98, 100, 101, 102, 92, 93, 94]","['    @Override public final void addListener(Runnable listener, Executor executor) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractCheckedFuture,guava/src/com/google/common/util/concurrent/AbstractCheckedFuture.java,"public V checkedGet(long timeout, TimeUnit unit) throws TimeoutException, X",5,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
42,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_7.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_7.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_7.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_7.txt,"[183, 135, 184, 136, 378, 379]","['  @Override\n', '  public final void addListener(Listener listener, Executor executor) {\n', '  @Override\n', '  public final void addListener(Listener listener, Executor executor) {\n', '  @Override\n', '  public final void addListener(Listener listener, Executor executor) {\n']","[128, 358, 172]","['  @Override public final void addListener(Listener listener, Executor executor) {\n', '  @Override public final void addListener(Listener listener, Executor executor) {\n', '  @Override public final void addListener(Listener listener, Executor executor) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService,guava/src/com/google/common/util/concurrent/AbstractScheduledService.java,"public final void addListener(Listener listener, Executor executor)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_7.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_7.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_7.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_7.txt,"[86, 87, 88, 90, 91, 93, 94]","[""   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that method's standard\n"", '   * exceptions (excluding {@link TimeoutException}, which is propagated) to instances of type\n', '   * {@code X} using {@link #mapException}.\n', '   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this implementation will\n', ""   * set the current thread's interrupt status before calling {@code mapException}.\n"", '   * @throws X if {@link #get()} throws an {@link InterruptedException}, {@link\n', '   *     CancellationException}, or {@link ExecutionException}\n']","[96, 97, 98, 100, 101, 102, 92, 93, 94]","['  @Override public final void addListener(Listener listener, Executor executor) {\n', '  @Override public final void addListener(Listener listener, Executor executor) {\n', '  @Override public final void addListener(Listener listener, Executor executor) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractCheckedFuture,guava/src/com/google/common/util/concurrent/AbstractCheckedFuture.java,"public V checkedGet(long timeout, TimeUnit unit) throws TimeoutException, X",5,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
43,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_8.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_8.txt,,,,,[1076],"['  private void await(Guard guard, boolean signalBeforeWaiting) throws InterruptedException {\n']","[1079, 1080]","['  private void await(Guard guard, boolean signalBeforeWaiting)\n', '      throws InterruptedException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Monitor,guava/src/com/google/common/util/concurrent/Monitor.java,"private void await(Guard guard, boolean signalBeforeWaiting) throws InterruptedException",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_8.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_8.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_8.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_8.txt,"[86, 87, 88, 90, 91, 93, 94]","[""   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that method's standard\n"", '   * exceptions (excluding {@link TimeoutException}, which is propagated) to instances of type\n', '   * {@code X} using {@link #mapException}.\n', '   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this implementation will\n', ""   * set the current thread's interrupt status before calling {@code mapException}.\n"", '   * @throws X if {@link #get()} throws an {@link InterruptedException}, {@link\n', '   *     CancellationException}, or {@link ExecutionException}\n']","[96, 97, 98, 100, 101, 102, 92, 93, 94]","['  private void await(Guard guard, boolean signalBeforeWaiting)\n', '      throws InterruptedException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractCheckedFuture,guava/src/com/google/common/util/concurrent/AbstractCheckedFuture.java,"public V checkedGet(long timeout, TimeUnit unit) throws TimeoutException, X",5,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
44,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_9.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_9.txt,,,,,"[96, 97, 98, 99, 165, 166, 360, 361, 269, 270, 463, 464, 117, 86, 118, 87]","['    @Override\n', '    public String toString() {\n', '  @Override\n', '  public String toString() {\n', '  @Override\n', '  public String toString() {\n', '        @Override\n', '        public String toString() {\n', '          return AbstractExecutionThreadService.this.toString();\n', '        }\n', '  @Override\n', '  public String toString() {\n', '    @Override\n', '    public String toString() {\n', '  @Override\n', '  public String toString() {\n']","[113, 259, 83, 343, 89, 90, 91, 157, 446]","['    @Override public String toString() {\n', '  @Override public String toString() {\n', '  @Override public String toString() {\n', '    @Override public String toString() {\n', '      return AbstractExecutionThreadService.this.toString();\n', '    }\n', '  @Override public String toString() {\n', '    @Override public String toString() {\n', '  @Override public String toString() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService,guava/src/com/google/common/util/concurrent/AbstractScheduledService.java,public String toString(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_9.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_9.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_9.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_9.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    @Override public String toString() {\n', '  @Override public String toString() {\n', '  @Override public String toString() {\n', '    @Override public String toString() {\n', '      return AbstractExecutionThreadService.this.toString();\n', '    }\n', '  @Override public String toString() {\n', '    @Override public String toString() {\n', '  @Override public String toString() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",5,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
45,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_10.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_10.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_10.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_10.txt,"[309, 310, 633, 634]","['  public static <I, O> ListenableFuture<O> transform(\n', '      ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function) {\n', '  public static <I, O> ListenableFuture<O> transform(\n', '      ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function) {\n']","[333, 653, 334, 654]","['  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n', '      AsyncFunction<? super I, ? extends O> function) {\n', '  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n', '      AsyncFunction<? super I, ? extends O> function) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures,guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java,"public static ListenableFuture<O> transform(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_10.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_10.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_10.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_10.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n', '      AsyncFunction<? super I, ? extends O> function) {\n', '  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n', '      AsyncFunction<? super I, ? extends O> function) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",5,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
46,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_11.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_11.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_11.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_11.txt,"[355, 356, 679, 680]","['  public static <I, O> ListenableFuture<O> transform(\n', '      ListenableFuture<I> input,\n', '  public static <I, O> ListenableFuture<O> transform(\n', '      ListenableFuture<I> input,\n']","[383, 703]","['  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n', '  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures,guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java,"public static ListenableFuture<O> transform(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_11.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_11.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_11.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_11.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n', '  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",5,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
47,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_12.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_12.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_12.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_12.txt,[62],"['  public static <V> ListenableFutureTask<V> create(Runnable runnable, @Nullable V result) {\n']","[68, 69]","['  public static <V> ListenableFutureTask<V> create(\n', '      Runnable runnable, @Nullable V result) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFutureTask,guava/src/com/google/common/util/concurrent/ListenableFutureTask.java,"public static ListenableFutureTask<V> create(Runnable runnable, @Nullable V result)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_12.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_12.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_12.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_12.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  public static <V> ListenableFutureTask<V> create(\n', '      Runnable runnable, @Nullable V result) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",5,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
48,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_13.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_13.txt," When a listener is first added, we run a task that will wait for the delegate to finish,
 and when it is done will run the listeners.
 If the delegate is already done, run the execution list immediately on the current
 thread.
 TODO(lukes): handle RejectedExecutionException

                   * Threads from our private pool are never interrupted. Threads from a
                   * user-supplied executor might be, but... what can we do? This is another reason
                   * to return a proper ListenableFuture instead of using listenInPoolThread.
                   
 ExecutionException / CancellationException / RuntimeException / Error
 The task is presumably done, run the listeners.
 When a listener is first added, we run a task that will wait for the delegate to finish,
 and when it is done will run the listeners.
 If the delegate is already done, run the execution list immediately on the current
 thread.
 TODO(lukes): handle RejectedExecutionException

                   * Threads from our private pool are never interrupted. Threads from a
                   * user-supplied executor might be, but... what can we do? This is another reason
                   * to return a proper ListenableFuture instead of using listenInPoolThread.
                   
 ExecutionException / CancellationException / RuntimeException / Error
 The task is presumably done, run the listeners.
",," When a listener is first added, we run a task that will wait for
 the delegate to finish, and when it is done will run the listeners.
 If the delegate is already done, run the execution list
 immediately on the current thread.
 TODO(lukes): handle RejectedExecutionException

               * Threads from our private pool are never interrupted. Threads
               * from a user-supplied executor might be, but... what can we do?
               * This is another reason to return a proper ListenableFuture
               * instead of using listenInPoolThread.
               
 ExecutionException / CancellationException / RuntimeException / Error
 The task is presumably done, run the listeners.
 When a listener is first added, we run a task that will wait for
 the delegate to finish, and when it is done will run the listeners.
 If the delegate is already done, run the execution list
 immediately on the current thread.
 TODO(lukes): handle RejectedExecutionException

               * Threads from our private pool are never interrupted. Threads
               * from a user-supplied executor might be, but... what can we do?
               * This is another reason to return a proper ListenableFuture
               * instead of using listenInPoolThread.
               
 ExecutionException / CancellationException / RuntimeException / Error
 The task is presumably done, run the listeners.
",,"[161, 162, 147, 163, 148, 164, 149, 150, 151, 157, 158]","['        adapterExecutor.execute(\n', '            new Runnable() {\n', '              @Override\n', '              public void run() {\n', '                try {\n', '                  getUninterruptibly(delegate);\n', '                } catch (Throwable e) {\n', '                }\n', '                executionList.execute();\n', '              }\n', '            });\n']","[176, 161, 177, 162, 178, 163, 164, 171, 172, 175]","['        adapterExecutor.execute(new Runnable() {\n', '          @Override\n', '          public void run() {\n', '            try {\n', '              getUninterruptibly(delegate);\n', '            } catch (Throwable e) {\n', '            }\n', '            executionList.execute();\n', '          }\n', '        });\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/JdkFutureAdapters,guava/src/com/google/common/util/concurrent/JdkFutureAdapters.java,"public void addListener(Runnable listener, Executor exec)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_13.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_13.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_13.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_13.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['        adapterExecutor.execute(new Runnable() {\n', '          @Override\n', '          public void run() {\n', '            try {\n', '              getUninterruptibly(delegate);\n', '            } catch (Throwable e) {\n', '            }\n', '            executionList.execute();\n', '          }\n', '        });\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",5,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
49,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_14.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_14.txt,,,,,"[97, 98]","['    @Override\n', '    public final void addListener(Runnable listener, Executor executor) {\n']",[95],"['    @Override public final void addListener(Runnable listener, Executor executor) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture,guava/src/com/google/common/util/concurrent/AbstractFuture.java,"public final void addListener(Runnable listener, Executor executor)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_14.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_14.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_14.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_14.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    @Override public final void addListener(Runnable listener, Executor executor) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",5,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
50,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_15.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_15.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_15.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_15.txt,"[183, 135, 184, 136, 378, 379]","['  @Override\n', '  public final void addListener(Listener listener, Executor executor) {\n', '  @Override\n', '  public final void addListener(Listener listener, Executor executor) {\n', '  @Override\n', '  public final void addListener(Listener listener, Executor executor) {\n']","[128, 358, 172]","['  @Override public final void addListener(Listener listener, Executor executor) {\n', '  @Override public final void addListener(Listener listener, Executor executor) {\n', '  @Override public final void addListener(Listener listener, Executor executor) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService,guava/src/com/google/common/util/concurrent/AbstractScheduledService.java,"public final void addListener(Listener listener, Executor executor)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_15.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_15.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_15.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_15.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  @Override public final void addListener(Listener listener, Executor executor) {\n', '  @Override public final void addListener(Listener listener, Executor executor) {\n', '  @Override public final void addListener(Listener listener, Executor executor) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",5,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
51,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_16.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_16.txt,,,,,[1076],"['  private void await(Guard guard, boolean signalBeforeWaiting) throws InterruptedException {\n']","[1079, 1080]","['  private void await(Guard guard, boolean signalBeforeWaiting)\n', '      throws InterruptedException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Monitor,guava/src/com/google/common/util/concurrent/Monitor.java,"private void await(Guard guard, boolean signalBeforeWaiting) throws InterruptedException",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_16.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_16.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_16.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_16.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  private void await(Guard guard, boolean signalBeforeWaiting)\n', '      throws InterruptedException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",5,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
52,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_17.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_17.txt," TODO(kak): @CheckReturnValue
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_17.txt," TODO(kak): @CheckReturnValue
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_17.txt,"[483, 484]","['      ListenableFuture<? extends V> input,\n', '      Class<X> exceptionType,\n']",[506],"['      ListenableFuture<? extends V> input, Class<X> exceptionType,\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2,guava/src/com/google/common/util/concurrent/Futures.java,"public static ListenableFuture<V> catchingAsync(ListenableFuture<? extends V> input, Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_17.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_17.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_17.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_17.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['      ListenableFuture<? extends V> input, Class<X> exceptionType,\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
53,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_18.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_18.txt," The only cases in which this Future should already be done are (a) if it was cancelled or
 (b) if an input failed and we propagated that immediately because of allMustSucceed.
 this.cancel propagates the cancellation to children; we use super.cancel to set our
 own state but let the input futures keep running as some of them may be used
 elsewhere.
 We always get the result so that we can have fail-fast, even if we don't collect
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_18.txt," The only cases in which this Future should already be done are (a) if
 it was cancelled or (b) if an input failed and we propagated that
 immediately because of allMustSucceed.
 this.cancel propagates the cancellation to children; we use super.cancel
 to set our own state but let the input futures keep running
 as some of them may be used elsewhere.
 We always get the result so that we can have fail-fast, even if we don't collect
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_18.txt,"[211, 212, 216]","['      checkState(\n', '          allMustSucceed || !isDone() || isCancelled(),\n', '        checkState(future.isDone(), ""Tried to set value from future which is not done"");\n']","[209, 213, 214]","['      checkState(allMustSucceed || !isDone() || isCancelled(),\n', '        checkState(future.isDone(),\n', '            ""Tried to set value from future which is not done"");\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AggregateFuture,guava/src/com/google/common/util/concurrent/AggregateFuture.java,"private void handleOneInputDone(int index, Future<? extends InputT> future)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_18.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_18.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_18.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_18.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['      checkState(allMustSucceed || !isDone() || isCancelled(),\n', '        checkState(future.isDone(),\n', '            ""Tried to set value from future which is not done"");\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
54,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_19.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_19.txt," Handle this specially so that we can include the failureCause, if there is one.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_19.txt," Handle this specially so that we can include the failureCause, if there is one.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_19.txt,"[325, 326, 327, 329, 330]","['        throw new IllegalStateException(\n', '            ""Expected the service to be "" + expected + "", but the service has FAILED"",\n', '            failureCause());\n', '      throw new IllegalStateException(\n', '          ""Expected the service to be "" + expected + "", but was "" + actual);\n']","[310, 311, 313, 314]","['        throw new IllegalStateException(""Expected the service to be "" + expected \n', '            + "", but the service has FAILED"", failureCause());\n', '      throw new IllegalStateException(""Expected the service to be "" + expected + "", but was "" \n', '          + actual);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractService,guava/src/com/google/common/util/concurrent/AbstractService.java,private void checkCurrentState(State expected),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_19.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_19.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_19.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_19.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['        throw new IllegalStateException(""Expected the service to be "" + expected \n', '            + "", but the service has FAILED"", failureCause());\n', '      throw new IllegalStateException(""Expected the service to be "" + expected + "", but was "" \n', '          + actual);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
55,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_20.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_20.txt," atomic is now non-null; fall through
 value changed
 don't compareAndSet a zero
 atomic replaced
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_20.txt," atomic is now non-null; fall through
 value changed
 don't compareAndSet a zero
 atomic replaced
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_20.txt,"[115, 104, 105]","['    outer:\n', '    while (true) {\n', '      while (true) {\n']","[116, 106]","['    outer: for (;;) {\n', '      for (;;) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AtomicLongMap,guava/src/com/google/common/util/concurrent/AtomicLongMap.java,"public long addAndGet(K key, long delta)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_20.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_20.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_20.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_20.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    outer: for (;;) {\n', '      for (;;) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
56,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_21.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_21.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_21.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_21.txt,"[41, 42]","['  @Override\n', '  protected final <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value) {\n']",[43],"['  @Override protected final <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractListeningExecutorService,guava/src/com/google/common/util/concurrent/AbstractListeningExecutorService.java,"protected final RunnableFuture<T> newTaskFor(Runnable runnable, T value)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_21.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_21.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_21.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_21.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  @Override protected final <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
57,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_22.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_22.txt,,,,,"[64, 63]","['  @Override\n', '  public void put(E e) throws InterruptedException {\n']",[63],['  @Override public void put(E e) throws InterruptedException {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingBlockingQueue,guava/src/com/google/common/util/concurrent/ForwardingBlockingQueue.java,public void put(E e) throws InterruptedException,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_22.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_22.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_22.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_22.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['  @Override public void put(E e) throws InterruptedException {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
58,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_23.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_23.txt," This means that the state has changed since we were scheduled.  This implies
 that an execution of runOneIteration has thrown an exception and we have
 transitioned to a failed state, also this means that shutDown has already
 been called, so we do not want to call it again.
",," This means that the state has changed since we were scheduled.  This implies that
 an execution of runOneIteration has thrown an exception and we have transitioned
 to a failed state, also this means that shutDown has already been called, so we
 do not want to call it again.
",,"[256, 257, 258, 259, 260, 261, 69, 262, 70, 263, 72, 73, 266, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 255]","['    @Override\n', '    protected final void doStop() {\n', '      executorService.execute(\n', '          new Runnable() {\n', '            @Override\n', '            public void run() {\n', '              try {\n', '                lock.lock();\n', '                try {\n', '                  if (state() != State.STOPPING) {\n', '                    return;\n', '                  }\n', '                  shutDown();\n', '                } finally {\n', '                  lock.unlock();\n', '                }\n', '                notifyStopped();\n', '              } catch (Throwable t) {\n', '                notifyFailed(t);\n', '          });\n', '    @Override\n', '    protected final void doStop() {\n', '          .execute(\n', '              new Runnable() {\n', '                @Override\n', '                public void run() {\n', '                  try {\n', '                    shutDown();\n', '                    notifyStopped();\n', '                  } catch (Throwable t) {\n', '                    notifyFailed(t);\n', '                  }\n', '                }\n', '              });\n']","[256, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 233, 235, 236, 237, 238, 239, 240, 245, 247, 248, 249, 251, 252, 253, 254, 255]","['    @Override protected final void doStop() {\n', '      executorService.execute(new Runnable() {\n', '        @Override public void run() {\n', '          try {\n', '            lock.lock();\n', '            try {\n', '              if (state() != State.STOPPING) {\n', '                return;\n', '              shutDown();\n', '            } finally {\n', '              lock.unlock();\n', '            notifyStopped();\n', '          } catch (Throwable t) {\n', '            notifyFailed(t);\n', '          }\n', '        }\n', '      });\n', '    @Override protected final void doStop() {\n', '          .execute(new Runnable() {\n', '            @Override public void run() {\n', '              try {\n', '                shutDown();\n', '                notifyStopped();\n', '              } catch (Throwable t) {\n', '                notifyFailed(t);\n', '              }\n', '            }\n', '          });\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService,guava/src/com/google/common/util/concurrent/AbstractScheduledService.java,protected final void doStop(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_23.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_23.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_23.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_23.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    @Override protected final void doStop() {\n', '      executorService.execute(new Runnable() {\n', '        @Override public void run() {\n', '          try {\n', '            lock.lock();\n', '            try {\n', '              if (state() != State.STOPPING) {\n', '                return;\n', '              shutDown();\n', '            } finally {\n', '              lock.unlock();\n', '            notifyStopped();\n', '          } catch (Throwable t) {\n', '            notifyFailed(t);\n', '          }\n', '        }\n', '      });\n', '    @Override protected final void doStop() {\n', '          .execute(new Runnable() {\n', '            @Override public void run() {\n', '              try {\n', '                shutDown();\n', '                notifyStopped();\n', '              } catch (Throwable t) {\n', '                notifyFailed(t);\n', '              }\n', '            }\n', '          });\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
59,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_24.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_24.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_24.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_24.txt,"[64, 65, 59, 60]","['  static <T> Callable<T> threadRenaming(\n', '      final Callable<T> callable, final Supplier<String> nameSupplier) {\n', '      @Override\n', '      public T call() throws Exception {\n']","[66, 61, 62]","['  static <T> Callable<T> threadRenaming(final Callable<T> callable,\n', '      final Supplier<String> nameSupplier) {\n', '      @Override public T call() throws Exception {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Callables_2,guava/src/com/google/common/util/concurrent/Callables.java," static Callable<T> threadRenaming(final Callable<T> callable, final Supplier<String> nameSupplier)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_24.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_24.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_24.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_24.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  static <T> Callable<T> threadRenaming(final Callable<T> callable,\n', '      final Supplier<String> nameSupplier) {\n', '      @Override public T call() throws Exception {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
60,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_25.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_25.txt," atomic is now non-null; fall through
 don't compareAndSet a zero
 atomic replaced
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_25.txt," atomic is now non-null; fall through
 don't compareAndSet a zero
 atomic replaced
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_25.txt,[371],['    while (true) {\n'],[368],['    for (;;) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AtomicLongMap,guava/src/com/google/common/util/concurrent/AtomicLongMap.java," long putIfAbsent(K key, long newValue)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_25.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_25.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_25.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_25.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['    for (;;) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
61,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_26.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_26.txt," Check interrupt status to get behavior consistent with fair case.
 Don't need to signal if timed out, but do if interrupted
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_26.txt," Check interrupt status to get behavior consistent with fair case.
 Don't need to signal if timed out, but do if interrupted
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_26.txt,"[496, 497, 516, 517, 518, 519, 520, 521]","['    locked:\n', '    {\n', '      satisfied =\n', '          guard.isSatisfied()\n', '              || awaitNanos(\n', '                  guard,\n', '                  (startTime == 0L) ? timeoutNanos : remainingNanos(startTime, timeoutNanos),\n', '                  reentrant);\n']","[500, 519, 520, 521, 522, 523, 524]","[' locked: {\n', '      satisfied = guard.isSatisfied()\n', '          || awaitNanos(guard,\n', '                        (startTime == 0L)\n', '                            ? timeoutNanos\n', '                            : remainingNanos(startTime, timeoutNanos),\n', '                        reentrant);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Monitor,guava/src/com/google/common/util/concurrent/Monitor.java,"public boolean enterWhen(Guard guard, long time, TimeUnit unit) throws InterruptedException",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_26.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_26.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_26.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_26.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","[' locked: {\n', '      satisfied = guard.isSatisfied()\n', '          || awaitNanos(guard,\n', '                        (startTime == 0L)\n', '                            ? timeoutNanos\n', '                            : remainingNanos(startTime, timeoutNanos),\n', '                        reentrant);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
62,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_27.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_27.txt," re-read value, if we get here then we must have observed a TOMBSTONE while trying to add a
 we are on the stack, now wait for completion.
 Otherwise re-read and check doneness.  If we loop then it must have been a spurious
 Check interruption first, if we woke up due to interruption we need to honor that.
 wakeup
 re-read and loop.
 waiter.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_27.txt," re-read value, if we get here then we must have observed a TOMBSTONE while trying to add a
 we are on the stack, now wait for completion.
 Otherwise re-read and check doneness.  If we loop then it must have been a spurious
 Check interruption first, if we woke up due to interruption we need to honor that.
 wakeup
 re-read and loop.
 waiter.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_27.txt,"[442, 443]","['  @Override\n', '  public V get() throws InterruptedException, ExecutionException {\n']",[431],"['  @Override public V get() throws InterruptedException, ExecutionException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture,guava/src/com/google/common/util/concurrent/AbstractFuture.java,"public V get() throws InterruptedException, ExecutionException",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_27.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_27.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_27.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_27.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  @Override public V get() throws InterruptedException, ExecutionException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
63,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_28.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_28.txt," We have to examine the internal state of the snapshot here to properly handle the stop
 while starting case.
 We don't call listeners here because we already did that when we set the
 shutdownWhenStartupFinishes flag.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_28.txt," We have to examine the internal state of the snapshot here to properly handle the stop 
 while starting case.
 We don't call listeners here because we already did that when we set the 
 shutdownWhenStartupFinishes flag.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_28.txt,"[346, 347, 348]","['        IllegalStateException failure =\n', '            new IllegalStateException(\n', '                ""Cannot notifyStarted() when the service is "" + snapshot.state);\n']","[330, 331]","['        IllegalStateException failure = new IllegalStateException(\n', '            ""Cannot notifyStarted() when the service is "" + snapshot.state);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractService,guava/src/com/google/common/util/concurrent/AbstractService.java,protected final void notifyStarted(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_28.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_28.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_28.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_28.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['        IllegalStateException failure = new IllegalStateException(\n', '            ""Cannot notifyStarted() when the service is "" + snapshot.state);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
64,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_29.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_29.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_29.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_29.txt,"[208, 160, 209, 161, 403, 404, 222, 223]","['  @Override\n', '  public final Service stopAsync() {\n', '  @Override\n', '  public final Service stopAsync() {\n', '  @Override\n', '  public final Service stopAsync() {\n', '  @Override\n', '  public final Service stopAsync() {\n']","[194, 150, 216, 380]","['  @Override public final Service stopAsync() {\n', '  @Override public final Service stopAsync() {\n', '  @Override public final Service stopAsync() {\n', '  @Override public final Service stopAsync() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService,guava/src/com/google/common/util/concurrent/AbstractScheduledService.java,public final Service stopAsync(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_29.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_29.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_29.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_29.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  @Override public final Service stopAsync() {\n', '  @Override public final Service stopAsync() {\n', '  @Override public final Service stopAsync() {\n', '  @Override public final Service stopAsync() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
65,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_30.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_30.txt,,,,,[69],"['  public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)\n']","[73, 74]","['  public <T> T invokeAny(\n', '      Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingExecutorService,guava/src/com/google/common/util/concurrent/ForwardingExecutorService.java,"public T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_30.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_30.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_30.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_30.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  public <T> T invokeAny(\n', '      Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
66,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_31.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_31.txt," Must get a reference to the futures before we cancel, as they'll be cleared out.
 Cancel all the component futures.
 & is faster than the branch required for &&
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_31.txt," Must get a reference to the futures before we cancel, as they'll be cleared out.
 Cancel all the component futures.
 & is faster than the branch required for &&
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_31.txt,"[56, 57]","['  @Override\n', '  public final boolean cancel(boolean mayInterruptIfRunning) {\n']",[58],['  @Override public final boolean cancel(boolean mayInterruptIfRunning) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AggregateFuture,guava/src/com/google/common/util/concurrent/AggregateFuture.java,public final boolean cancel(boolean mayInterruptIfRunning),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_31.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_31.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_31.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_31.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['  @Override public final boolean cancel(boolean mayInterruptIfRunning) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
67,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_32.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_32.txt,,,,,"[295, 296, 297, 298, 299, 300, 301, 302]","['        Maps.transformValues(\n', '            map,\n', '            new Function<AtomicLong, Long>() {\n', '              @Override\n', '              public Long apply(AtomicLong atomic) {\n', '                return atomic.get();\n', '              }\n', '            }));\n']","[294, 295, 296, 297, 298, 299]","['        Maps.transformValues(map, new Function<AtomicLong, Long>() {\n', '          @Override\n', '          public Long apply(AtomicLong atomic) {\n', '            return atomic.get();\n', '          }\n', '        }));\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AtomicLongMap,guava/src/com/google/common/util/concurrent/AtomicLongMap.java,"private Map<K, Long> createAsMap()",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_32.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_32.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_32.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_32.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['        Maps.transformValues(map, new Function<AtomicLong, Long>() {\n', '          @Override\n', '          public Long apply(AtomicLong atomic) {\n', '            return atomic.get();\n', '          }\n', '        }));\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
68,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_33.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_33.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_33.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_33.txt,[1407],"['      Future<V> future, Class<X> exceptionClass, long timeout, TimeUnit unit) throws X {\n']","[1474, 1475]","['      Future<V> future, Class<X> exceptionClass, long timeout, TimeUnit unit)\n', '      throws X {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2,guava/src/com/google/common/util/concurrent/Futures.java,"public static V getChecked(Future<V> future, Class<X> exceptionClass, long timeout, TimeUnit unit) throws X",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_33.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_33.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_33.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_33.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['      Future<V> future, Class<X> exceptionClass, long timeout, TimeUnit unit)\n', '      throws X {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
69,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_34.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_34.txt," ha ha
",," ha ha
",,"[36, 37]","['  public <T> T newProxy(\n', '      T target, Class<T> interfaceType, long timeoutDuration, TimeUnit timeoutUnit) {\n']","[39, 40]","['  public <T> T newProxy(T target, Class<T> interfaceType, long timeoutDuration,\n', '      TimeUnit timeoutUnit) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/FakeTimeLimiter,guava/src/com/google/common/util/concurrent/FakeTimeLimiter.java,"public T newProxy(T target, Class<T> interfaceType, long timeoutDuration, TimeUnit timeoutUnit)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_34.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_34.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_34.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_34.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  public <T> T newProxy(T target, Class<T> interfaceType, long timeoutDuration,\n', '      TimeUnit timeoutUnit) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
70,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_35.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_35.txt," Let go of the memory held by the running state
",," Let go of the memory held by the running state
",,"[48, 47]","['  @Override\n', '  final void done() {\n']",[50],['  @Override final void done() {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AggregateFuture,guava/src/com/google/common/util/concurrent/AggregateFuture.java, final void done(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_35.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_35.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_35.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_35.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['  @Override final void done() {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
71,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_36.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_36.txt,,,,,"[73, 74]","['  @Override\n', '  public E take() throws InterruptedException {\n']",[71],['  @Override public E take() throws InterruptedException {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingBlockingQueue,guava/src/com/google/common/util/concurrent/ForwardingBlockingQueue.java,public E take() throws InterruptedException,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_36.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_36.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_36.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_36.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['  @Override public E take() throws InterruptedException {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
72,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_37.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_37.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_37.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_37.txt,"[48, 47]","['  @Override\n', '  protected final <T> RunnableFuture<T> newTaskFor(Callable<T> callable) {\n']",[48],['  @Override protected final <T> RunnableFuture<T> newTaskFor(Callable<T> callable) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractListeningExecutorService,guava/src/com/google/common/util/concurrent/AbstractListeningExecutorService.java,protected final RunnableFuture<T> newTaskFor(Callable<T> callable),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_37.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_37.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_37.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_37.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['  @Override protected final <T> RunnableFuture<T> newTaskFor(Callable<T> callable) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
73,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_38.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_38.txt," unlink guard from activeGuards
 help GC
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_38.txt," unlink guard from activeGuards
 help GC
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_38.txt,[1055],"['      for (Guard p = activeGuards, pred = null; ; pred = p, p = p.next) {\n']",[1058],"['      for (Guard p = activeGuards, pred = null;; pred = p, p = p.next) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Monitor,guava/src/com/google/common/util/concurrent/Monitor.java,private void endWaitingFor(Guard guard),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_38.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_38.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_38.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_38.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['      for (Guard p = activeGuards, pred = null;; pred = p, p = p.next) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
74,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_39.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_39.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_39.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_39.txt,"[592, 593, 590, 591]","['      checkState(\n', '          state == FAILED,\n', '          ""failureCause() is only valid if the service has failed, service is %s"",\n', '          state);\n']","[568, 569]","['      checkState(state == FAILED, \n', '          ""failureCause() is only valid if the service has failed, service is %s"", state);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractService,guava/src/com/google/common/util/concurrent/AbstractService.java, Throwable failureCause(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_39.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_39.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_39.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_39.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['      checkState(state == FAILED, \n', '          ""failureCause() is only valid if the service has failed, service is %s"", state);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
75,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_40.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_40.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_40.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_40.txt,"[585, 586, 587, 588, 589]","['  public static <V> ListenableFuture<V> withTimeout(\n', '      ListenableFuture<V> delegate,\n', '      long time,\n', '      TimeUnit unit,\n', '      ScheduledExecutorService scheduledExecutor) {\n']","[604, 605]","['  public static <V> ListenableFuture<V> withTimeout(ListenableFuture<V> delegate,\n', '      long time, TimeUnit unit, ScheduledExecutorService scheduledExecutor) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2,guava/src/com/google/common/util/concurrent/Futures.java,"public static ListenableFuture<V> withTimeout(ListenableFuture<V> delegate, long time, TimeUnit unit, ScheduledExecutorService scheduledExecutor)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_40.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_40.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_40.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_40.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  public static <V> ListenableFuture<V> withTimeout(ListenableFuture<V> delegate,\n', '      long time, TimeUnit unit, ScheduledExecutorService scheduledExecutor) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
76,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_41.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_41.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_41.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_41.txt,[78],"['  public static <V> ListenableFuture<V> listenInPoolThread(Future<V> future, Executor executor) {\n']","[90, 91]","['  public static <V> ListenableFuture<V> listenInPoolThread(\n', '      Future<V> future, Executor executor) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/JdkFutureAdapters,guava/src/com/google/common/util/concurrent/JdkFutureAdapters.java,"public static ListenableFuture<V> listenInPoolThread(Future<V> future, Executor executor)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_41.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_41.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_41.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_41.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  public static <V> ListenableFuture<V> listenInPoolThread(\n', '      Future<V> future, Executor executor) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
77,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_42.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_42.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_42.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_42.txt,"[161, 162]","['  public static <V, X extends Exception> CheckedFuture<V, X> immediateCheckedFuture(\n', '      @Nullable V value) {\n']","[166, 167]","['  public static <V, X extends Exception> CheckedFuture<V, X>\n', '      immediateCheckedFuture(@Nullable V value) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2,guava/src/com/google/common/util/concurrent/Futures.java,"public static CheckedFuture<V, X> immediateCheckedFuture(@Nullable V value)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_42.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_42.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_42.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_42.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  public static <V, X extends Exception> CheckedFuture<V, X>\n', '      immediateCheckedFuture(@Nullable V value) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
78,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_43.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_43.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_43.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_43.txt,"[371, 372]","['      ListenableFuture<? extends V> input,\n', '      Class<X> exceptionType,\n']",[397],"['      ListenableFuture<? extends V> input, Class<X> exceptionType,\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2,guava/src/com/google/common/util/concurrent/Futures.java,"public static ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_43.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_43.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_43.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_43.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['      ListenableFuture<? extends V> input, Class<X> exceptionType,\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
79,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_44.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_44.txt," only remove after setting to zero, to avoid concurrent updates
 succeed even if the remove fails, since the value was already adjusted
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_44.txt," only remove after setting to zero, to avoid concurrent updates
 succeed even if the remove fails, since the value was already adjusted
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_44.txt,[242],['    while (true) {\n'],[241],['    for (;;) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AtomicLongMap,guava/src/com/google/common/util/concurrent/AtomicLongMap.java,public long remove(K key),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_44.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_44.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_44.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_44.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['    for (;;) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
80,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_45.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_45.txt,,,,,"[97, 98]","['    @Override\n', '    public final void addListener(Runnable listener, Executor executor) {\n']",[95],"['    @Override public final void addListener(Runnable listener, Executor executor) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture,guava/src/com/google/common/util/concurrent/AbstractFuture.java,"public final void addListener(Runnable listener, Executor executor)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_45.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_45.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_45.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_45.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    @Override public final void addListener(Runnable listener, Executor executor) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
81,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_46.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_46.txt," atomic is now non-null; fall through
 value changed
 don't compareAndSet a zero
 atomic replaced
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_46.txt," atomic is now non-null; fall through
 value changed
 don't compareAndSet a zero
 atomic replaced
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_46.txt,"[201, 190, 191]","['    outer:\n', '    while (true) {\n', '      while (true) {\n']","[200, 190]","['    outer: for (;;) {\n', '      for (;;) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AtomicLongMap,guava/src/com/google/common/util/concurrent/AtomicLongMap.java,"public long put(K key, long newValue)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_46.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_46.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_46.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_46.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    outer: for (;;) {\n', '      for (;;) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
82,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_47.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_47.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_47.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_47.txt,[393],['      for (long remainingNanos = timeoutNanos; ; ) {\n'],[397],['      for (long remainingNanos = timeoutNanos;;) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Monitor,guava/src/com/google/common/util/concurrent/Monitor.java,"public boolean enter(long time, TimeUnit unit)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_47.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_47.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_47.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_47.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['      for (long remainingNanos = timeoutNanos;;) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
83,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_48.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_48.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_48.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_48.txt,[42],"['  <V> ListenableScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit);\n']","[45, 46]","['  <V> ListenableScheduledFuture<V> schedule(\n', '      Callable<V> callable, long delay, TimeUnit unit);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListeningScheduledExecutorService,guava/src/com/google/common/util/concurrent/ListeningScheduledExecutorService.java," ListenableScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_48.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_48.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_48.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_48.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  <V> ListenableScheduledFuture<V> schedule(\n', '      Callable<V> callable, long delay, TimeUnit unit);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
84,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_49.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_49.txt,,,,,"[48, 49]","['  @Override\n', '  public int drainTo(Collection<? super E> c) {\n']",[49],['  @Override public int drainTo(Collection<? super E> c) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingBlockingQueue,guava/src/com/google/common/util/concurrent/ForwardingBlockingQueue.java,public int drainTo(Collection<? super E> c),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_49.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_49.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_49.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_49.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['  @Override public int drainTo(Collection<? super E> c) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
85,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_50.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_50.txt,,,,,"[39, 40]","['  @Override\n', '  protected abstract Future<V> delegate();\n']",[44],['  @Override protected abstract Future<V> delegate();\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingFuture,guava/src/com/google/common/util/concurrent/ForwardingFuture.java,protected abstract Future<V> delegate(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_50.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_50.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_50.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_50.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['  @Override protected abstract Future<V> delegate();\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
86,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_51.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_51.txt," Create a LockGraphNode for each enum value.
 Pre-populate all allowedPriorLocks with nodes of smaller ordinal.
 Pre-populate all disallowedPriorLocks with nodes of larger ordinal.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_51.txt," Create a LockGraphNode for each enum value.
 Pre-populate all allowedPriorLocks with nodes of smaller ordinal.
 Pre-populate all disallowedPriorLocks with nodes of larger ordinal.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_51.txt,"[337, 324]","['    ArrayList<LockGraphNode> nodes = Lists.newArrayListWithCapacity(numKeys);\n', '      nodes.get(i).checkAcquiredLocks(Policies.DISABLED, nodes.subList(i + 1, numKeys));\n']","[344, 345, 330, 331]","['    ArrayList<LockGraphNode> nodes =\n', '        Lists.newArrayListWithCapacity(numKeys);\n', '      nodes.get(i).checkAcquiredLocks(\n', '          Policies.DISABLED, nodes.subList(i + 1, numKeys));\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory,guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java," static Map<E, LockGraphNode> createNodes(Class<E> clazz)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_51.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_51.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_51.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_51.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    ArrayList<LockGraphNode> nodes =\n', '        Lists.newArrayListWithCapacity(numKeys);\n', '      nodes.get(i).checkAcquiredLocks(\n', '          Policies.DISABLED, nodes.subList(i + 1, numKeys));\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
87,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_52.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_52.txt,,,,,"[96, 97, 98, 99, 165, 166, 360, 361, 269, 270, 463, 464, 117, 86, 118, 87]","['    @Override\n', '    public String toString() {\n', '  @Override\n', '  public String toString() {\n', '  @Override\n', '  public String toString() {\n', '        @Override\n', '        public String toString() {\n', '          return AbstractExecutionThreadService.this.toString();\n', '        }\n', '  @Override\n', '  public String toString() {\n', '    @Override\n', '    public String toString() {\n', '  @Override\n', '  public String toString() {\n']","[113, 259, 83, 343, 89, 90, 91, 157, 446]","['    @Override public String toString() {\n', '  @Override public String toString() {\n', '  @Override public String toString() {\n', '    @Override public String toString() {\n', '      return AbstractExecutionThreadService.this.toString();\n', '    }\n', '  @Override public String toString() {\n', '    @Override public String toString() {\n', '  @Override public String toString() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService,guava/src/com/google/common/util/concurrent/AbstractScheduledService.java,public String toString(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_52.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_52.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_52.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_52.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    @Override public String toString() {\n', '  @Override public String toString() {\n', '  @Override public String toString() {\n', '    @Override public String toString() {\n', '      return AbstractExecutionThreadService.this.toString();\n', '    }\n', '  @Override public String toString() {\n', '    @Override public String toString() {\n', '  @Override public String toString() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
88,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_53.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_53.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_53.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_53.txt,"[94, 95]","['      @Override\n', '      public void run() {\n']",[95],['      @Override public void run() {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Callables_2,guava/src/com/google/common/util/concurrent/Callables.java," static Runnable threadRenaming(final Runnable task, final Supplier<String> nameSupplier)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_53.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_53.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_53.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_53.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['      @Override public void run() {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
89,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_54.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_54.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_54.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_54.txt,"[110, 111]","['      @Override\n', '      public void execute(Runnable command) {\n']",[107],['      @Override public void execute(Runnable command) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractIdleService,guava/src/com/google/common/util/concurrent/AbstractIdleService.java,protected Executor executor(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_54.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_54.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_54.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_54.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['      @Override public void execute(Runnable command) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
90,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_55.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_55.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_55.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_55.txt,"[262, 263, 264]","['    return policy == Policies.DISABLED\n', '        ? new ReentrantLock(fair)\n', '        : new CycleDetectingReentrantLock(new LockGraphNode(lockName), fair);\n']","[263, 264, 265]","['    return policy == Policies.DISABLED ? new ReentrantLock(fair)\n', '        : new CycleDetectingReentrantLock(\n', '            new LockGraphNode(lockName), fair);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory,guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java,"public ReentrantLock newReentrantLock(String lockName, boolean fair)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_55.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_55.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_55.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_55.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    return policy == Policies.DISABLED ? new ReentrantLock(fair)\n', '        : new CycleDetectingReentrantLock(\n', '            new LockGraphNode(lockName), fair);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
91,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_56.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_56.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_56.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_56.txt,[1261],"['  public static <V, X extends Exception> V get(Future<V> future, Class<X> exceptionClass) throws X {\n']","[1307, 1308]","['  public static <V, X extends Exception> V get(\n', '      Future<V> future, Class<X> exceptionClass) throws X {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2,guava/src/com/google/common/util/concurrent/Futures.java,"public static V get(Future<V> future, Class<X> exceptionClass) throws X",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_56.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_56.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_56.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_56.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  public static <V, X extends Exception> V get(\n', '      Future<V> future, Class<X> exceptionClass) throws X {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
92,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_57.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_57.txt,,,,,"[43, 44]","['  @Override\n', '  public int drainTo(Collection<? super E> c, int maxElements) {\n']","[44, 45]","['  @Override public int drainTo(\n', '      Collection<? super E> c, int maxElements) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingBlockingQueue,guava/src/com/google/common/util/concurrent/ForwardingBlockingQueue.java,"public int drainTo(Collection<? super E> c, int maxElements)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_57.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_57.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_57.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_57.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  @Override public int drainTo(\n', '      Collection<? super E> c, int maxElements) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
93,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_58.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_58.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_58.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_58.txt,"[1358, 1359]","['  public static <V, X extends Exception> V getChecked(Future<V> future, Class<X> exceptionClass)\n', '      throws X {\n']","[1419, 1420]","['  public static <V, X extends Exception> V getChecked(\n', '      Future<V> future, Class<X> exceptionClass) throws X {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2,guava/src/com/google/common/util/concurrent/Futures.java,"public static V getChecked(Future<V> future, Class<X> exceptionClass) throws X",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_58.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_58.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_58.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_58.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  public static <V, X extends Exception> V getChecked(\n', '      Future<V> future, Class<X> exceptionClass) throws X {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
94,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_59.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_59.txt," Log it and keep going, bad runnable and/or executor.  Don't punish the other runnables if
 we're given a bad one.  We only catch RuntimeException because we want Errors to propagate
 up.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_59.txt," Log it and keep going, bad runnable and/or executor.  Don't punish the other runnables if
 we're given a bad one.  We only catch RuntimeException because we want Errors to propagate
 up.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_59.txt,"[147, 148, 149, 150, 827, 828, 829, 830]","['      log.log(\n', '          Level.SEVERE,\n', '          ""RuntimeException while executing runnable "" + runnable + "" with executor "" + executor,\n', '          e);\n', '      log.log(\n', '          Level.SEVERE,\n', '          ""RuntimeException while executing runnable "" + runnable + "" with executor "" + executor,\n', '          e);\n']","[816, 148, 149, 815]","['      log.log(Level.SEVERE, ""RuntimeException while executing runnable ""\n', '          + runnable + "" with executor "" + executor, e);\n', '      log.log(Level.SEVERE, ""RuntimeException while executing runnable ""\n', '          + runnable + "" with executor "" + executor, e);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ExecutionList,guava/src/com/google/common/util/concurrent/ExecutionList.java,"private static void executeListener(Runnable runnable, Executor executor)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_59.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_59.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_59.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_59.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['      log.log(Level.SEVERE, ""RuntimeException while executing runnable ""\n', '          + runnable + "" with executor "" + executor, e);\n', '      log.log(Level.SEVERE, ""RuntimeException while executing runnable ""\n', '          + runnable + "" with executor "" + executor, e);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
95,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_60.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_60.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_60.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_60.txt,"[154, 155]","['    abstract Future<?> schedule(\n', '        AbstractService service, ScheduledExecutorService executor, Runnable runnable);\n']","[157, 158]","['    abstract Future<?> schedule(AbstractService service, ScheduledExecutorService executor, \n', '        Runnable runnable);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService,guava/src/com/google/common/util/concurrent/AbstractScheduledService.java," abstract Future<?> schedule(AbstractService service, ScheduledExecutorService executor, Runnable runnable)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_60.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_60.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_60.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_60.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    abstract Future<?> schedule(AbstractService service, ScheduledExecutorService executor, \n', '        Runnable runnable);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
96,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_61.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_61.txt,,,,,"[81, 82]","['    @Override\n', '    public final V get(long timeout, TimeUnit unit)\n']",[82],"['    @Override public final V get(long timeout, TimeUnit unit)\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture,guava/src/com/google/common/util/concurrent/AbstractFuture.java,"public final V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_61.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_61.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_61.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_61.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    @Override public final V get(long timeout, TimeUnit unit)\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
97,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_62.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_62.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_62.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_62.txt,"[259, 260, 217, 169, 218, 170, 412, 413]","['  @Override\n', '  public final void awaitRunning() {\n', '  @Override\n', '  public final void awaitRunning() {\n', '  @Override\n', '  public final void awaitRunning() {\n', '  @Override\n', '  public final void awaitRunning() {\n']","[388, 202, 252, 158]","['  @Override public final void awaitRunning() {\n', '  @Override public final void awaitRunning() {\n', '  @Override public final void awaitRunning() {\n', '  @Override public final void awaitRunning() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService,guava/src/com/google/common/util/concurrent/AbstractScheduledService.java,public final void awaitRunning(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_62.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_62.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_62.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_62.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  @Override public final void awaitRunning() {\n', '  @Override public final void awaitRunning() {\n', '  @Override public final void awaitRunning() {\n', '  @Override public final void awaitRunning() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
98,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_63.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_63.txt,,,,,"[825, 987]","['    public boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException {\n', '    public boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException {\n']","[1014, 1015, 845, 846]","['    public boolean tryLock(long timeout, TimeUnit unit)\n', '        throws InterruptedException {\n', '    public boolean tryLock(long timeout, TimeUnit unit)\n', '        throws InterruptedException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory,guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java,"public boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_63.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_63.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_63.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_63.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    public boolean tryLock(long timeout, TimeUnit unit)\n', '        throws InterruptedException {\n', '    public boolean tryLock(long timeout, TimeUnit unit)\n', '        throws InterruptedException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
99,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_64.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_64.txt,,,,,"[176, 128, 370, 371, 175, 127]","['  @Override\n', '  public final State state() {\n', '  @Override\n', '  public final State state() {\n', '  @Override\n', '  public final State state() {\n']","[165, 121, 351]","['  @Override public final State state() {\n', '  @Override public final State state() {\n', '  @Override public final State state() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService,guava/src/com/google/common/util/concurrent/AbstractScheduledService.java,public final State state(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_64.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_64.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_64.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_64.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  @Override public final State state() {\n', '  @Override public final State state() {\n', '  @Override public final State state() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
100,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_65.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_65.txt," Already traversed this node.
 Found a path ending at the node!
 Recurse the edges.
 One of this node's allowedPriorLocks found a path. Prepend an
 ExampleStackTrace(preAcquiredLock, this) to the returned chain of
 ExampleStackTraces.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_65.txt," Already traversed this node.
 Found a path ending at the node!
 Recurse the edges.
 One of this node's allowedPriorLocks found a path. Prepend an
 ExampleStackTrace(preAcquiredLock, this) to the returned chain of
 ExampleStackTraces.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_65.txt,"[720, 711, 727]","['    private ExampleStackTrace findPathTo(LockGraphNode node, Set<LockGraphNode> seen) {\n', '      for (Map.Entry<LockGraphNode, ExampleStackTrace> entry : allowedPriorLocks.entrySet()) {\n', '          ExampleStackTrace path = new ExampleStackTrace(preAcquiredLock, this);\n']","[736, 737, 726, 727, 744, 745]","['    private ExampleStackTrace findPathTo(\n', '        LockGraphNode node, Set<LockGraphNode> seen) {\n', '      for (Map.Entry<LockGraphNode, ExampleStackTrace> entry :\n', '               allowedPriorLocks.entrySet()) {\n', '          ExampleStackTrace path =\n', '              new ExampleStackTrace(preAcquiredLock, this);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory,guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java,"private ExampleStackTrace findPathTo(LockGraphNode node, Set<LockGraphNode> seen)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_65.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_65.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_65.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_65.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    private ExampleStackTrace findPathTo(\n', '        LockGraphNode node, Set<LockGraphNode> seen) {\n', '      for (Map.Entry<LockGraphNode, ExampleStackTrace> entry :\n', '               allowedPriorLocks.entrySet()) {\n', '          ExampleStackTrace path =\n', '              new ExampleStackTrace(preAcquiredLock, this);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
101,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_66.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_66.txt,,,,,"[57, 58]","['  @Override\n', '  public <T> ListenableFuture<T> submit(Runnable task, @Nullable T result) {\n']",[56],"['  @Override public <T> ListenableFuture<T> submit(Runnable task, @Nullable T result) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractListeningExecutorService,guava/src/com/google/common/util/concurrent/AbstractListeningExecutorService.java,"public ListenableFuture<T> submit(Runnable task, @Nullable T result)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_66.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_66.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_66.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_66.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  @Override public <T> ListenableFuture<T> submit(Runnable task, @Nullable T result) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
102,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_67.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_67.txt,,,,,"[304, 303]","['  private static Map<? extends Enum, LockGraphNode> getOrCreateNodes(Class<? extends Enum> clazz) {\n', '    Map<? extends Enum, LockGraphNode> existing = lockGraphNodesPerType.get(clazz);\n']","[307, 308, 309, 310]","['  private static Map<? extends Enum, LockGraphNode> getOrCreateNodes(\n', '      Class<? extends Enum> clazz) {\n', '    Map<? extends Enum, LockGraphNode> existing =\n', '        lockGraphNodesPerType.get(clazz);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory,guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java,"private static Map<? extends Enum, LockGraphNode> getOrCreateNodes(Class<? extends Enum> clazz)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_67.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_67.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_67.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_67.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  private static Map<? extends Enum, LockGraphNode> getOrCreateNodes(\n', '      Class<? extends Enum> clazz) {\n', '    Map<? extends Enum, LockGraphNode> existing =\n', '        lockGraphNodesPerType.get(clazz);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
103,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_68.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_68.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_68.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_68.txt,"[201, 202]","['  public static <V, X extends Exception> CheckedFuture<V, X> immediateFailedCheckedFuture(\n', '      X exception) {\n']","[211, 212]","['  public static <V, X extends Exception> CheckedFuture<V, X>\n', '      immediateFailedCheckedFuture(X exception) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2,guava/src/com/google/common/util/concurrent/Futures.java,"public static CheckedFuture<V, X> immediateFailedCheckedFuture(X exception)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_68.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_68.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_68.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_68.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  public static <V, X extends Exception> CheckedFuture<V, X>\n', '      immediateFailedCheckedFuture(X exception) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
104,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_69.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_69.txt,,,,,"[50, 51]","['  public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)\n', '      throws InterruptedException {\n']","[54, 55]","['  public <T> List<Future<T>> invokeAll(\n', '      Collection<? extends Callable<T>> tasks) throws InterruptedException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingExecutorService,guava/src/com/google/common/util/concurrent/ForwardingExecutorService.java,public List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) throws InterruptedException,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_69.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_69.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_69.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_69.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  public <T> List<Future<T>> invokeAll(\n', '      Collection<? extends Callable<T>> tasks) throws InterruptedException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
105,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_70.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_70.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_70.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_70.txt,"[146, 147, 140, 141]","['    public static Scheduler newFixedRateSchedule(\n', '        final long initialDelay, final long period, final TimeUnit unit) {\n', '        public Future<?> schedule(\n', '            AbstractService service, ScheduledExecutorService executor, Runnable task) {\n']","[144, 149, 150, 143]","['    public static Scheduler newFixedRateSchedule(final long initialDelay, final long period, \n', '        final TimeUnit unit) {\n', '        public Future<?> schedule(AbstractService service, ScheduledExecutorService executor,\n', '            Runnable task) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService,guava/src/com/google/common/util/concurrent/AbstractScheduledService.java,"public static Scheduler newFixedRateSchedule(final long initialDelay, final long period, final TimeUnit unit)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_70.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_70.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_70.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_70.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    public static Scheduler newFixedRateSchedule(final long initialDelay, final long period, \n', '        final TimeUnit unit) {\n', '        public Future<?> schedule(AbstractService service, ScheduledExecutorService executor,\n', '            Runnable task) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
106,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_71.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_71.txt,,,,,"[170, 122, 171, 123, 365, 366]","['  @Override\n', '  public final boolean isRunning() {\n', '  @Override\n', '  public final boolean isRunning() {\n', '  @Override\n', '  public final boolean isRunning() {\n']","[161, 117, 347]","['  @Override public final boolean isRunning() {\n', '  @Override public final boolean isRunning() {\n', '  @Override public final boolean isRunning() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService,guava/src/com/google/common/util/concurrent/AbstractScheduledService.java,public final boolean isRunning(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_71.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_71.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_71.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_71.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  @Override public final boolean isRunning() {\n', '  @Override public final boolean isRunning() {\n', '  @Override public final boolean isRunning() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
107,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_72.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_72.txt," NOTE: If we ever want to use a custom executor here, have a look at CombinedFuture as we'll
 need to handle RejectedExecutionException
 Corner case: List is empty.
 We need fail fast, so we have to keep track of which future failed so we can propagate
 the exception immediately
 Register a listener on each Future in the list to update the state of this future.
 Note that if all the futures on the list are done prior to completing this loop, the last
 call to addListener() will callback to setOneValue(), transitively call our cleanup
 listener, and set this.futures to null.
 This is not actually a problem, since the foreach only needs this.futures to be non-null
 at the beginning of the loop.
 We'll only call the callback when all futures complete, regardless of whether some failed
 Hold off on calling setOneValue until all complete, so we can share the same listener
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_72.txt," NOTE: If we ever want to use a custom executor here, have a look at
 CombinedFuture as we'll need to handle RejectedExecutionException
 Corner case: List is empty.
 We need fail fast, so we have to keep track of which future failed so we can propagate
 the exception immediately
 Register a listener on each Future in the list to update
 the state of this future.
 Note that if all the futures on the list are done prior to completing
 this loop, the last call to addListener() will callback to
 setOneValue(), transitively call our cleanup listener, and set
 this.futures to null.
 This is not actually a problem, since the foreach only needs
 this.futures to be non-null at the beginning of the loop.
 We'll only call the callback when all futures complete, regardless of whether some failed
 Hold off on calling setOneValue until all complete, so we can share the same listener
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_72.txt,"[144, 145, 146, 147, 148, 149, 150, 151, 152, 141, 142, 143]","['          listenable.addListener(\n', '              new Runnable() {\n', '                @Override\n', '                public void run() {\n', '                  try {\n', '                    handleOneInputDone(index, listenable);\n', '                  } finally {\n', '                    decrementCountAndMaybeComplete();\n', '                  }\n', '                }\n', '              },\n', '              directExecutor());\n']","[144, 145, 146, 147, 148, 149, 140, 141, 142, 143]","['          listenable.addListener(new Runnable() {\n', '            @Override\n', '            public void run() {\n', '              try {\n', '                handleOneInputDone(index, listenable);\n', '              } finally {\n', '                decrementCountAndMaybeComplete();\n', '              }\n', '            }\n', '          }, directExecutor());\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AggregateFuture,guava/src/com/google/common/util/concurrent/AggregateFuture.java,private void init(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_72.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_72.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_72.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_72.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['          listenable.addListener(new Runnable() {\n', '            @Override\n', '            public void run() {\n', '              try {\n', '                handleOneInputDone(index, listenable);\n', '              } finally {\n', '                decrementCountAndMaybeComplete();\n', '              }\n', '            }\n', '          }, directExecutor());\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
108,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_73.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_73.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_73.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_73.txt,"[183, 135, 184, 136, 378, 379]","['  @Override\n', '  public final void addListener(Listener listener, Executor executor) {\n', '  @Override\n', '  public final void addListener(Listener listener, Executor executor) {\n', '  @Override\n', '  public final void addListener(Listener listener, Executor executor) {\n']","[128, 358, 172]","['  @Override public final void addListener(Listener listener, Executor executor) {\n', '  @Override public final void addListener(Listener listener, Executor executor) {\n', '  @Override public final void addListener(Listener listener, Executor executor) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService,guava/src/com/google/common/util/concurrent/AbstractScheduledService.java,"public final void addListener(Listener listener, Executor executor)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_73.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_73.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_73.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_73.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  @Override public final void addListener(Listener listener, Executor executor) {\n', '  @Override public final void addListener(Listener listener, Executor executor) {\n', '  @Override public final void addListener(Listener listener, Executor executor) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
109,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_74.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_74.txt," We check the internal state of the snapshot instead of state() directly so we don't allow
 notifyStopped() to be called while STARTING, even if stop() has already been called.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_74.txt," We check the internal state of the snapshot instead of state() directly so we don't allow
 notifyStopped() to be called while STARTING, even if stop() has already been called.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_74.txt,"[382, 383]","['        IllegalStateException failure =\n', '            new IllegalStateException(""Cannot notifyStopped() when the service is "" + previous);\n']","[365, 366]","['        IllegalStateException failure = new IllegalStateException(\n', '            ""Cannot notifyStopped() when the service is "" + previous);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractService,guava/src/com/google/common/util/concurrent/AbstractService.java,protected final void notifyStopped(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_74.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_74.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_74.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_74.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['        IllegalStateException failure = new IllegalStateException(\n', '            ""Cannot notifyStopped() when the service is "" + previous);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
110,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_75.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_75.txt,,,,,"[76, 77]","['    @Override\n', '    public final V get() throws InterruptedException, ExecutionException {\n']",[78],"['    @Override public final V get() throws InterruptedException, ExecutionException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture,guava/src/com/google/common/util/concurrent/AbstractFuture.java,"public final V get() throws InterruptedException, ExecutionException",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_75.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_75.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_75.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_75.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    @Override public final V get() throws InterruptedException, ExecutionException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
111,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_76.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_76.txt," No need to signal if timed out
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_76.txt," No need to signal if timed out
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_76.txt,[556],['        for (long remainingNanos = timeoutNanos; ; ) {\n'],[559],['        for (long remainingNanos = timeoutNanos;;) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Monitor,guava/src/com/google/common/util/concurrent/Monitor.java,"public boolean enterWhenUninterruptibly(Guard guard, long time, TimeUnit unit)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_76.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_76.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_76.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_76.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['        for (long remainingNanos = timeoutNanos;;) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
112,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_77.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_77.txt," TODO(kak): @CheckReturnValue
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_77.txt," TODO(kak): @CheckReturnValue
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_77.txt,"[549, 550, 551, 552]","['      ListenableFuture<? extends V> input,\n', '      Class<X> exceptionType,\n', '      AsyncFunction<? super X, ? extends V> fallback,\n', '      Executor executor) {\n']","[571, 572]","['      ListenableFuture<? extends V> input, Class<X> exceptionType,\n', '      AsyncFunction<? super X, ? extends V> fallback, Executor executor) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2,guava/src/com/google/common/util/concurrent/Futures.java,"public static ListenableFuture<V> catchingAsync(ListenableFuture<? extends V> input, Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_77.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_77.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_77.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_77.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['      ListenableFuture<? extends V> input, Class<X> exceptionType,\n', '      AsyncFunction<? super X, ? extends V> fallback, Executor executor) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
113,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_78.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_78.txt,,,,,"[976, 975]","['    @Override\n', '    void putNext(Waiter waiter, Waiter next) {\n']",[958],"['    @Override void putNext(Waiter waiter, Waiter next) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture,guava/src/com/google/common/util/concurrent/AbstractFuture.java," void putNext(Waiter waiter, Waiter next)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_78.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_78.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_78.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_78.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    @Override void putNext(Waiter waiter, Waiter next) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
114,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_79.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_79.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_79.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_79.txt,"[192, 144, 386, 387, 191, 143]","['  @Override\n', '  public final Throwable failureCause() {\n', '  @Override\n', '  public final Throwable failureCause() {\n', '  @Override\n', '  public final Throwable failureCause() {\n']","[179, 135, 365]","['  @Override public final Throwable failureCause() {\n', '  @Override public final Throwable failureCause() {\n', '  @Override public final Throwable failureCause() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService,guava/src/com/google/common/util/concurrent/AbstractScheduledService.java,public final Throwable failureCause(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_79.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_79.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_79.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_79.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  @Override public final Throwable failureCause() {\n', '  @Override public final Throwable failureCause() {\n', '  @Override public final Throwable failureCause() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
115,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_80.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_80.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_80.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_80.txt,"[417, 418, 419, 420]","['      ListenableFuture<? extends V> input,\n', '      Class<X> exceptionType,\n', '      Function<? super X, ? extends V> fallback,\n', '      Executor executor) {\n']","[442, 443]","['      ListenableFuture<? extends V> input, Class<X> exceptionType,\n', '      Function<? super X, ? extends V> fallback, Executor executor) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2,guava/src/com/google/common/util/concurrent/Futures.java,"public static ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_80.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_80.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_80.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_80.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['      ListenableFuture<? extends V> input, Class<X> exceptionType,\n', '      Function<? super X, ? extends V> fallback, Executor executor) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
116,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_81.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_81.txt,,,,,"[970, 971]","['    @Override\n', '    void putThread(Waiter waiter, Thread thread) {\n']",[954],"['    @Override void putThread(Waiter waiter, Thread thread) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture,guava/src/com/google/common/util/concurrent/AbstractFuture.java," void putThread(Waiter waiter, Thread thread)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_81.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_81.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_81.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_81.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    @Override void putThread(Waiter waiter, Thread thread) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
117,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_82.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_82.txt,,,,,"[53, 54]","['  @Override\n', '  public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException {\n']","[53, 54]","['  @Override public boolean offer(E e, long timeout, TimeUnit unit)\n', '      throws InterruptedException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingBlockingQueue,guava/src/com/google/common/util/concurrent/ForwardingBlockingQueue.java,"public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_82.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_82.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_82.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_82.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  @Override public boolean offer(E e, long timeout, TimeUnit unit)\n', '      throws InterruptedException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
118,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_83.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_83.txt," The future has already been set to something.  If it is cancellation we should cancel the
 the listener is responsible for calling completeWithFuture, directExecutor is appropriate
 since all we are doing is unpacking a completed future which should be fast.
 addListener has thrown an exception!  SetFuture.run can't throw any exceptions so this
 must have been caused by addListener itself.  The most likely explanation is a
 misconfigured mock.  Try to switch to Failure.
 Note: The only way this CAS could fail is if cancel() has raced with us. That is ok.
 we lost the cas, fall through and maybe cancel
 incoming future.
 we don't care if it fails, this is best-effort.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_83.txt," The future has already been set to something.  If it is cancellation we should cancel the
 the listener is responsible for calling completeWithFuture, directExecutor is appropriate
 since all we are doing is unpacking a completed future which should be fast.
 addListener has thrown an exception!  SetFuture.run can't throw any exceptions so this
 must have been caused by addListener itself.  The most likely explanation is a
 misconfigured mock.  Try to switch to Failure.
 Note: The only way this CAS could fail is if cancel() has raced with us. That is ok.
 we lost the cas, fall through and maybe cancel
 incoming future.
 we don't care if it fails, this is best-effort.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_83.txt,"[665, 666]","['  @Beta\n', '  protected boolean setFuture(ListenableFuture<? extends V> future) {\n']",[654],['  @Beta protected boolean setFuture(ListenableFuture<? extends V> future) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture,guava/src/com/google/common/util/concurrent/AbstractFuture.java,protected boolean setFuture(ListenableFuture<? extends V> future),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_83.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_83.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_83.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_83.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['  @Beta protected boolean setFuture(ListenableFuture<? extends V> future) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
119,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_84.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_84.txt," A CLQ may be overkill here.  We could save some pointers/memory by synchronizing on an
 Using SerializingExecutor here will ensure that each CompletionOrderListener executes
 atomically and therefore that each returned future is guaranteed to be in completion order.
 N.B. there are some cases where the use of this executor could have possibly surprising
 effects when input futures finish at approximately the same time _and_ the output futures
 have directExecutor listeners. In this situation, the listeners may end up running on a
 different thread than if they were attached to the corresponding input future.  We believe
 this to be a negligible cost since:
 1. Using the directExecutor implies that your callback is safe to run on any thread.
 2. This would likely only be noticeable if you were doing something expensive or blocking on
 ArrayDeque
    a directExecutor listener on one of the output futures which is an antipattern anyway.
 Must make sure to add the delegate to the queue first in case the future is already done
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_84.txt," A CLQ may be overkill here.  We could save some pointers/memory by synchronizing on an
 Using SerializingExecutor here will ensure that each CompletionOrderListener executes
 atomically and therefore that each returned future is guaranteed to be in completion order.
 N.B. there are some cases where the use of this executor could have possibly surprising
 effects when input futures finish at approximately the same time _and_ the output futures
 have directExecutor listeners. In this situation, the listeners may end up running on a
 different thread than if they were attached to the corresponding input future.  We believe
 this to be a negligible cost since:
 1. Using the directExecutor implies that your callback is safe to run on any thread.
 2. This would likely only be noticeable if you were doing something expensive or blocking on
 ArrayDeque
    a directExecutor listener on one of the output futures which is an antipattern anyway.
 Must make sure to add the delegate to the queue first in case the future is already done
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_84.txt,"[1104, 1105, 1106, 1107, 1108, 1109, 1110, 1086, 1103]","['    final ConcurrentLinkedQueue<SettableFuture<T>> delegates = Queues.newConcurrentLinkedQueue();\n', '      future.addListener(\n', '          new Runnable() {\n', '            @Override\n', '            public void run() {\n', '              delegates.remove().setFuture(future);\n', '            }\n', '          },\n', '          executor);\n']","[1127, 1128, 1145, 1146, 1147, 1148, 1149]","['    final ConcurrentLinkedQueue<SettableFuture<T>> delegates =\n', '        Queues.newConcurrentLinkedQueue();\n', '      future.addListener(new Runnable() {\n', '        @Override public void run() {\n', '          delegates.remove().setFuture(future);\n', '        }\n', '      }, executor);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2,guava/src/com/google/common/util/concurrent/Futures.java,public static ImmutableList<ListenableFuture<T>> inCompletionOrder(Iterable<? extends ListenableFuture<? extends T>> futures),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_84.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_84.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_84.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_84.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    final ConcurrentLinkedQueue<SettableFuture<T>> delegates =\n', '        Queues.newConcurrentLinkedQueue();\n', '      future.addListener(new Runnable() {\n', '        @Override public void run() {\n', '          delegates.remove().setFuture(future);\n', '        }\n', '      }, executor);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
120,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_85.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_85.txt,,,,,"[52, 53]","['  @Override\n', '  public ListenableFuture<?> submit(Runnable task) {\n']",[52],['  @Override public ListenableFuture<?> submit(Runnable task) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractListeningExecutorService,guava/src/com/google/common/util/concurrent/AbstractListeningExecutorService.java,public ListenableFuture<?> submit(Runnable task),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_85.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_85.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_85.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_85.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['  @Override public ListenableFuture<?> submit(Runnable task) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
121,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_86.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_86.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_86.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_86.txt,"[925, 926, 927]","['    return (timeoutNanos <= 0L)\n', '        ? 0L\n', '        : (timeoutNanos > (Long.MAX_VALUE / 4) * 3) ? (Long.MAX_VALUE / 4) * 3 : timeoutNanos;\n']","[928, 929, 930]","['    return (timeoutNanos <= 0L) ? 0L\n', '        : (timeoutNanos > (Long.MAX_VALUE / 4) * 3) ? (Long.MAX_VALUE / 4) * 3\n', '        : timeoutNanos;\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Monitor,guava/src/com/google/common/util/concurrent/Monitor.java,"private static long toSafeNanos(long time, TimeUnit unit)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_86.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_86.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_86.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_86.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    return (timeoutNanos <= 0L) ? 0L\n', '        : (timeoutNanos > (Long.MAX_VALUE / 4) * 3) ? (Long.MAX_VALUE / 4) * 3\n', '        : timeoutNanos;\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
122,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_87.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_87.txt," fooled you
",," fooled you
",,"[45, 46, 47]","['  public <T> T callWithTimeout(\n', '      Callable<T> callable, long timeoutDuration, TimeUnit timeoutUnit, boolean amInterruptible)\n', '      throws Exception {\n']","[48, 49]","['  public <T> T callWithTimeout(Callable<T> callable, long timeoutDuration,\n', '      TimeUnit timeoutUnit, boolean amInterruptible) throws Exception {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/FakeTimeLimiter,guava/src/com/google/common/util/concurrent/FakeTimeLimiter.java,"public T callWithTimeout(Callable<T> callable, long timeoutDuration, TimeUnit timeoutUnit, boolean amInterruptible) throws Exception",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_87.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_87.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_87.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_87.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  public <T> T callWithTimeout(Callable<T> callable, long timeoutDuration,\n', '      TimeUnit timeoutUnit, boolean amInterruptible) throws Exception {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
123,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_88.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_88.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_88.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_88.txt,"[233, 185, 234, 186, 428, 429, 286, 287]","['  @Override\n', '  public final void awaitTerminated() {\n', '  @Override\n', '  public final void awaitTerminated() {\n', '  @Override\n', '  public final void awaitTerminated() {\n', '  @Override\n', '  public final void awaitTerminated() {\n']","[402, 277, 216, 172]","['  @Override public final void awaitTerminated() {\n', '  @Override public final void awaitTerminated() {\n', '  @Override public final void awaitTerminated() {\n', '  @Override public final void awaitTerminated() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService,guava/src/com/google/common/util/concurrent/AbstractScheduledService.java,public final void awaitTerminated(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_88.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_88.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_88.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_88.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  @Override public final void awaitTerminated() {\n', '  @Override public final void awaitTerminated() {\n', '  @Override public final void awaitTerminated() {\n', '  @Override public final void awaitTerminated() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
124,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_89.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_89.txt,,,,,[1076],"['  private void await(Guard guard, boolean signalBeforeWaiting) throws InterruptedException {\n']","[1079, 1080]","['  private void await(Guard guard, boolean signalBeforeWaiting)\n', '      throws InterruptedException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Monitor,guava/src/com/google/common/util/concurrent/Monitor.java,"private void await(Guard guard, boolean signalBeforeWaiting) throws InterruptedException",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_89.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_89.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_89.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_89.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  private void await(Guard guard, boolean signalBeforeWaiting)\n', '      throws InterruptedException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
125,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_90.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_90.txt,,,,,[504],['    switch (from) {\n'],[486],['    switch(from) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractService,guava/src/com/google/common/util/concurrent/AbstractService.java,private void terminated(final State from),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_90.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_90.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_90.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_90.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['    switch(from) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
126,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_91.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_91.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_91.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_91.txt,[564],['  protected void interruptTask() {}\n'],"[552, 553]","['  protected void interruptTask() {\n', '  }\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture,guava/src/com/google/common/util/concurrent/AbstractFuture.java,protected void interruptTask(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_91.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_91.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_91.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_91.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  protected void interruptTask() {\n', '  }\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
127,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_92.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_92.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_92.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_92.txt,[62],"['  public static <V> ListenableFutureTask<V> create(Runnable runnable, @Nullable V result) {\n']","[68, 69]","['  public static <V> ListenableFutureTask<V> create(\n', '      Runnable runnable, @Nullable V result) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFutureTask,guava/src/com/google/common/util/concurrent/ListenableFutureTask.java,"public static ListenableFutureTask<V> create(Runnable runnable, @Nullable V result)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_92.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_92.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_92.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_92.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  public static <V> ListenableFutureTask<V> create(\n', '      Runnable runnable, @Nullable V result) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
128,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_93.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_93.txt,,,,,"[40, 41]","['  @Override\n', '  protected abstract BlockingQueue<E> delegate();\n']",[42],['  @Override protected abstract BlockingQueue<E> delegate();\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingBlockingQueue,guava/src/com/google/common/util/concurrent/ForwardingBlockingQueue.java,protected abstract BlockingQueue<E> delegate(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_93.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_93.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_93.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_93.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['  @Override protected abstract BlockingQueue<E> delegate();\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
129,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_94.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_94.txt," Try to delay allocating the exception.  At this point we may still lose the CAS, but it is
 certainly less likely.
 TODO(lukes): this exception actually makes cancellation significantly more expensive :(
 I wonder if we should consider removing it or providing a mechanism to not do it.
 obj cannot be null at this point, because value can only change from null to non-null. So
 if value changed (and it did since we lost the CAS), then it cannot be null.
 We call interuptTask before calling complete(), first which is consistent with
 FutureTask
 propagate cancellation to the future set in setfuture, this is racy, and we don't
 care if we are successful or not.
 obj changed, reread
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_94.txt," Try to delay allocating the exception.  At this point we may still lose the CAS, but it is
 certainly less likely.
 TODO(lukes): this exception actually makes cancellation significantly more expensive :(
 I wonder if we should consider removing it or providing a mechanism to not do it.
 obj cannot be null at this point, because value can only change from null to non-null. So
 if value changed (and it did since we lost the CAS), then it cannot be null.
 We call interuptTask before calling complete(), first which is consistent with
 FutureTask
 propagate cancellation to the future set in setfuture, this is racy, and we don't
 care if we are successful or not.
 obj changed, reread
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_94.txt,"[528, 529, 530, 527]","['      Throwable cause =\n', '          GENERATE_CANCELLATION_CAUSES\n', '              ? new CancellationException(""Future.cancel() was called."")\n', '              : null;\n']","[515, 516, 517]","['      Throwable cause = GENERATE_CANCELLATION_CAUSES\n', '          ? new CancellationException(""Future.cancel() was called."")\n', '          : null;\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture,guava/src/com/google/common/util/concurrent/AbstractFuture.java,public boolean cancel(boolean mayInterruptIfRunning),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_94.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_94.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_94.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_94.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['      Throwable cause = GENERATE_CANCELLATION_CAUSES\n', '          ? new CancellationException(""Future.cancel() was called."")\n', '          : null;\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
130,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_95.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_95.txt," Some other future failed or has been cancelled, causing this one to also be cancelled or
 have an exception set. This should only happen if allMustSucceed is true or if the output
 itself has been cancelled.
",," Some other future failed or has been cancelled, causing this one to
 also be cancelled or have an exception set. This should only happen
 if allMustSucceed is true or if the output itself has been
 cancelled.
",,"[68, 69]","['        checkState(\n', '            allMustSucceed || isCancelled(), ""Future was done before all dependencies completed"");\n', '        checkState(\n', '            allMustSucceed || isCancelled(), ""Future was done before all dependencies completed"");\n']","[69, 70]","['        checkState(allMustSucceed || isCancelled(),\n', '            ""Future was done before all dependencies completed"");\n', '        checkState(allMustSucceed || isCancelled(),\n', '            ""Future was done before all dependencies completed"");\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CollectionFuture_2,guava/src/com/google/common/util/concurrent/CollectionFuture.java," final void collectOneValue(boolean allMustSucceed, int index, @Nullable V returnValue)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_95.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_95.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_95.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_95.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['        checkState(allMustSucceed || isCancelled(),\n', '            ""Future was done before all dependencies completed"");\n', '        checkState(allMustSucceed || isCancelled(),\n', '            ""Future was done before all dependencies completed"");\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
131,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_96.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_96.txt,,,,,"[566, 567]","['    final Future<?> schedule(\n', '        AbstractService service, ScheduledExecutorService executor, Runnable runnable) {\n']","[538, 539]","['    final Future<?> schedule(AbstractService service, ScheduledExecutorService executor, \n', '        Runnable runnable) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService,guava/src/com/google/common/util/concurrent/AbstractScheduledService.java," final Future<?> schedule(AbstractService service, ScheduledExecutorService executor, Runnable runnable)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_96.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_96.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_96.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_96.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    final Future<?> schedule(AbstractService service, ScheduledExecutorService executor, \n', '        Runnable runnable) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
132,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_97.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_97.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_97.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_97.txt,[795],['      for (long remainingNanos = timeoutNanos; ; ) {\n'],[798],['      for (long remainingNanos = timeoutNanos;;) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Monitor,guava/src/com/google/common/util/concurrent/Monitor.java,"public boolean waitForUninterruptibly(Guard guard, long time, TimeUnit unit)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_97.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_97.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_97.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_97.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['      for (long remainingNanos = timeoutNanos;;) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
133,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_98.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_98.txt,,,,,"[980, 981]","['    @Override\n', '    boolean casWaiters(AbstractFuture future, Waiter curr, Waiter next) {\n']",[962],"['    @Override boolean casWaiters(AbstractFuture future, Waiter curr, Waiter next) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture,guava/src/com/google/common/util/concurrent/AbstractFuture.java," boolean casWaiters(AbstractFuture future, Waiter curr, Waiter next)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_98.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_98.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_98.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_98.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    @Override boolean casWaiters(AbstractFuture future, Waiter curr, Waiter next) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
134,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_99.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_99.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_99.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_99.txt,"[193, 194, 296, 297, 241, 242, 436, 437, 309, 310, 311, 312, 313, 314]","['  @Override\n', '  public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n', '  @Override\n', '  public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n', '      throw new TimeoutException(\n', '          ""Timed out waiting for ""\n', '              + this\n', '              + "" to reach a terminal state. ""\n', '              + ""Current state: ""\n', '              + state());\n', '  @Override\n', '  public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n', '  @Override\n', '  public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n']","[179, 409, 298, 299, 286, 223]","['  @Override public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n', '  @Override public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n', '      throw new TimeoutException(""Timed out waiting for "" + this + "" to reach a terminal state. ""\n', '          + ""Current state: "" + state());\n', '  @Override public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n', '  @Override public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService,guava/src/com/google/common/util/concurrent/AbstractScheduledService.java,"public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_99.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_99.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_99.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_99.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  @Override public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n', '  @Override public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n', '      throw new TimeoutException(""Timed out waiting for "" + this + "" to reach a terminal state. ""\n', '          + ""Current state: "" + state());\n', '  @Override public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n', '  @Override public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
135,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_100.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_100.txt," someone else has run or is running.
 We were interrupted, it is possible that the interrupted bit hasn't been set yet.  Wait
 for the interrupting thread to set 'doneInterrupting' to true. See interruptTask().
 We want to wait so that we don't interrupt the _next_ thing run on the thread.
 Note. We don't reset the interrupted bit, just wait for it to be set.
 If this is a thread pool thread, the thread pool will reset it for us.  Otherwise, the
 interrupted bit may have been intended for something else, so don't clear it.
",," someone else has run or is running.
 We were interrupted, it is possible that the interrupted bit hasn't been set yet.  Wait
 for the interrupting thread to set 'doneInterrupting' to true. See interruptTask().
 We want to wait so that we don't interrupt the _next_ thing run on the thread.
 Note. We don't reset the interrupted bit, just wait for it to be set.
 If this is a thread pool thread, the thread pool will reset it for us.  Otherwise, the
 interrupted bit may have been intended for something else, so don't clear it.
",,"[34, 35, 107, 108]","['  @Override\n', '  public final void run() {\n', '    @Override\n', '    public final void run() {\n']","[36, 105]","['  @Override public final void run() {\n', '    @Override public final void run() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/InterruptibleTask,guava/src/com/google/common/util/concurrent/InterruptibleTask.java,public final void run(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_100.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_100.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_100.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_100.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  @Override public final void run() {\n', '    @Override public final void run() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
136,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_101.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_101.txt,,,,,"[990, 991]","['    @Override\n', '    boolean casValue(AbstractFuture future, Object expected, Object v) {\n']",[970],"['    @Override boolean casValue(AbstractFuture future, Object expected, Object v) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture,guava/src/com/google/common/util/concurrent/AbstractFuture.java," boolean casValue(AbstractFuture future, Object expected, Object v)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_101.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_101.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_101.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_101.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    @Override boolean casValue(AbstractFuture future, Object expected, Object v) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
137,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_102.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_102.txt,,,,,"[68, 69]","['  @Override\n', '  public int remainingCapacity() {\n']",[67],['  @Override public int remainingCapacity() {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingBlockingQueue,guava/src/com/google/common/util/concurrent/ForwardingBlockingQueue.java,public int remainingCapacity(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_102.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_102.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_102.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_102.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['  @Override public int remainingCapacity() {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
138,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_103.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_103.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_103.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_103.txt,"[464, 465, 462, 463]","['    public ReentrantReadWriteLock newReentrantReadWriteLock(E rank, boolean fair) {\n', '      return policy == Policies.DISABLED\n', '          ? new ReentrantReadWriteLock(fair)\n', '          : new CycleDetectingReentrantReadWriteLock(lockGraphNodes.get(rank), fair);\n']","[470, 471, 472, 473, 474]","['    public ReentrantReadWriteLock newReentrantReadWriteLock(\n', '        E rank, boolean fair) {\n', '      return policy == Policies.DISABLED ? new ReentrantReadWriteLock(fair)\n', '          : new CycleDetectingReentrantReadWriteLock(\n', '              lockGraphNodes.get(rank), fair);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory,guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java,"public ReentrantReadWriteLock newReentrantReadWriteLock(E rank, boolean fair)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_103.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_103.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_103.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_103.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    public ReentrantReadWriteLock newReentrantReadWriteLock(\n', '        E rank, boolean fair) {\n', '      return policy == Policies.DISABLED ? new ReentrantReadWriteLock(fair)\n', '          : new CycleDetectingReentrantReadWriteLock(\n', '              lockGraphNodes.get(rank), fair);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
139,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_104.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_104.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_104.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_104.txt,"[199, 151, 200, 152, 394, 395, 203, 204]","['  @Override\n', '  public final Service startAsync() {\n', '  @Override\n', '  public final Service startAsync() {\n', '  @Override\n', '  public final Service startAsync() {\n', '  @Override\n', '  public final Service startAsync() {\n']","[372, 198, 186, 142]","['  @Override public final Service startAsync() {\n', '  @Override public final Service startAsync() {\n', '  @Override public final Service startAsync() {\n', '  @Override public final Service startAsync() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService,guava/src/com/google/common/util/concurrent/AbstractScheduledService.java,public final Service startAsync(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_104.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_104.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_104.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_104.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  @Override public final Service startAsync() {\n', '  @Override public final Service startAsync() {\n', '  @Override public final Service startAsync() {\n', '  @Override public final Service startAsync() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
140,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_105.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_105.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_105.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_105.txt,"[279, 280, 281, 282]","['  public ReentrantReadWriteLock newReentrantReadWriteLock(String lockName, boolean fair) {\n', '    return policy == Policies.DISABLED\n', '        ? new ReentrantReadWriteLock(fair)\n', '        : new CycleDetectingReentrantReadWriteLock(new LockGraphNode(lockName), fair);\n']","[280, 281, 282, 283, 284]","['  public ReentrantReadWriteLock newReentrantReadWriteLock(\n', '      String lockName, boolean fair) {\n', '    return policy == Policies.DISABLED ? new ReentrantReadWriteLock(fair)\n', '        : new CycleDetectingReentrantReadWriteLock(\n', '            new LockGraphNode(lockName), fair);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory,guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java,"public ReentrantReadWriteLock newReentrantReadWriteLock(String lockName, boolean fair)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_105.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_105.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_105.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_105.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  public ReentrantReadWriteLock newReentrantReadWriteLock(\n', '      String lockName, boolean fair) {\n', '    return policy == Policies.DISABLED ? new ReentrantReadWriteLock(fair)\n', '        : new CycleDetectingReentrantReadWriteLock(\n', '            new LockGraphNode(lockName), fair);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
141,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_106.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_106.txt,,,,,[632],"['    void checkAcquiredLocks(Policy policy, List<LockGraphNode> acquiredLocks) {\n']","[646, 647]","['    void checkAcquiredLocks(\n', '        Policy policy, List<LockGraphNode> acquiredLocks) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory,guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java," void checkAcquiredLocks(Policy policy, List<LockGraphNode> acquiredLocks)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_106.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_106.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_106.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_106.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    void checkAcquiredLocks(\n', '        Policy policy, List<LockGraphNode> acquiredLocks) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
142,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_107.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_107.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_107.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_107.txt,"[872, 873]","['  public static <I, O> Future<O> lazyTransform(\n', '      final Future<I> input, final Function<? super I, ? extends O> function) {\n']","[903, 904]","['  public static <I, O> Future<O> lazyTransform(final Future<I> input,\n', '      final Function<? super I, ? extends O> function) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2,guava/src/com/google/common/util/concurrent/Futures.java,"public static Future<O> lazyTransform(final Future<I> input, final Function<? super I, ? extends O> function)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_107.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_107.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_107.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_107.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  public static <I, O> Future<O> lazyTransform(final Future<I> input,\n', '      final Function<? super I, ? extends O> function) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
143,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_108.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_108.txt," prevent the task from running if possible
",," prevent the task from running if possible
",,"[43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 207, 79, 208, 80, 209, 81, 210, 82, 211, 83, 212, 84, 213, 85, 214, 86, 215, 216, 88, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237]","['    @Override\n', '    protected final void doStart() {\n', '      executorService =\n', '          MoreExecutors.renamingDecorator(\n', '              executor(),\n', '              new Supplier<String>() {\n', '                @Override\n', '                public String get() {\n', '                  return serviceName() + "" "" + state();\n', '                }\n', '              });\n', '      executorService.execute(\n', '          new Runnable() {\n', '            @Override\n', '            public void run() {\n', '              lock.lock();\n', '              try {\n', '                startUp();\n', '                runningTask = scheduler().schedule(delegate, executorService, task);\n', '                notifyStarted();\n', '              } catch (Throwable t) {\n', '                notifyFailed(t);\n', '                if (runningTask != null) {\n', '                  runningTask.cancel(false);\n', '                }\n', '              } finally {\n', '                lock.unlock();\n', '              }\n', '          });\n', '        protected final void doStart() {\n', '          Executor executor =\n', '              MoreExecutors.renamingDecorator(\n', '                  executor(),\n', '                  new Supplier<String>() {\n', '                    @Override\n', '                    public String get() {\n', '                      return serviceName();\n', '                    }\n', '                  });\n', '          executor.execute(\n', '              new Runnable() {\n', '                @Override\n', '                public void run() {\n', '                  try {\n', '                    startUp();\n', '                    notifyStarted();\n', '                    if (isRunning()) {\n', '                      try {\n', '                        AbstractExecutionThreadService.this.run();\n', '                      } catch (Throwable t) {\n', '                        try {\n', '                          shutDown();\n', '                        } catch (Exception ignored) {\n', '                          logger.log(\n', '                              Level.WARNING,\n', '                              ""Error while attempting to shut down the service"" + "" after failure."",\n', '                              ignored);\n', '                        }\n', '                        notifyFailed(t);\n', '                        return;\n', '                      }\n', '                    }\n', '\n', '                    shutDown();\n', '                    notifyStopped();\n', '                  } catch (Throwable t) {\n', '                    notifyFailed(t);\n', '                  }\n', '              });\n', '    @Override\n', '    protected final void doStart() {\n', '          .execute(\n', '              new Runnable() {\n', '                @Override\n', '                public void run() {\n', '                  try {\n', '                    startUp();\n', '                    notifyStarted();\n', '                  } catch (Throwable t) {\n', '                    notifyFailed(t);\n', '                  }\n', '                }\n', '              });\n']","[44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 207, 79, 208, 80, 209, 210, 82, 211, 83, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 226, 227, 228, 229, 230]","['    @Override protected final void doStart() {\n', '      executorService = MoreExecutors.renamingDecorator(executor(), new Supplier<String>() {\n', '        @Override public String get() {\n', '          return serviceName() + "" "" + state();\n', '        }\n', '      });\n', '      executorService.execute(new Runnable() {\n', '        @Override public void run() {\n', '          lock.lock();\n', '          try {\n', '            startUp();\n', '            runningTask = scheduler().schedule(delegate, executorService, task);\n', '            notifyStarted();\n', '          } catch (Throwable t) {\n', '            notifyFailed(t);\n', '            if (runningTask != null) {\n', '              runningTask.cancel(false);\n', '          } finally {\n', '            lock.unlock();\n', '          }\n', '        }\n', '      });\n', '    @Override protected final void doStart() {\n', '      Executor executor = MoreExecutors.renamingDecorator(executor(), new Supplier<String>() {\n', '        @Override public String get() {\n', '          return serviceName();\n', '        }\n', '      });\n', '      executor.execute(new Runnable() {\n', '        public void run() {\n', '          try {\n', '            startUp();\n', '            notifyStarted();\n', '            if (isRunning()) {\n', '              try {\n', '                AbstractExecutionThreadService.this.run();\n', '              } catch (Throwable t) {\n', '                try {\n', '                  shutDown();\n', '                } catch (Exception ignored) {\n', '                  logger.log(Level.WARNING, \n', '                      ""Error while attempting to shut down the service""\n', '                      + "" after failure."", ignored);\n', '                notifyFailed(t);\n', '                return;\n', '              }\n', '            }\n', '\n', '            shutDown();\n', '            notifyStopped();\n', '          } catch (Throwable t) {\n', '            notifyFailed(t);\n', '          }\n', '      });\n', '    }\n', '    @Override protected final void doStart() {\n', '          .execute(new Runnable() {\n', '            @Override public void run() {\n', '              try {\n', '                startUp();\n', '                notifyStarted();\n', '              } catch (Throwable t) {\n', '                notifyFailed(t);\n', '              }\n', '            }\n', '          });\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService,guava/src/com/google/common/util/concurrent/AbstractScheduledService.java,protected final void doStart(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_108.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_108.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_108.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_108.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    @Override protected final void doStart() {\n', '      executorService = MoreExecutors.renamingDecorator(executor(), new Supplier<String>() {\n', '        @Override public String get() {\n', '          return serviceName() + "" "" + state();\n', '        }\n', '      });\n', '      executorService.execute(new Runnable() {\n', '        @Override public void run() {\n', '          lock.lock();\n', '          try {\n', '            startUp();\n', '            runningTask = scheduler().schedule(delegate, executorService, task);\n', '            notifyStarted();\n', '          } catch (Throwable t) {\n', '            notifyFailed(t);\n', '            if (runningTask != null) {\n', '              runningTask.cancel(false);\n', '          } finally {\n', '            lock.unlock();\n', '          }\n', '        }\n', '      });\n', '    @Override protected final void doStart() {\n', '      Executor executor = MoreExecutors.renamingDecorator(executor(), new Supplier<String>() {\n', '        @Override public String get() {\n', '          return serviceName();\n', '        }\n', '      });\n', '      executor.execute(new Runnable() {\n', '        public void run() {\n', '          try {\n', '            startUp();\n', '            notifyStarted();\n', '            if (isRunning()) {\n', '              try {\n', '                AbstractExecutionThreadService.this.run();\n', '              } catch (Throwable t) {\n', '                try {\n', '                  shutDown();\n', '                } catch (Exception ignored) {\n', '                  logger.log(Level.WARNING, \n', '                      ""Error while attempting to shut down the service""\n', '                      + "" after failure."", ignored);\n', '                notifyFailed(t);\n', '                return;\n', '              }\n', '            }\n', '\n', '            shutDown();\n', '            notifyStopped();\n', '          } catch (Throwable t) {\n', '            notifyFailed(t);\n', '          }\n', '      });\n', '    }\n', '    @Override protected final void doStart() {\n', '          .execute(new Runnable() {\n', '            @Override public void run() {\n', '              try {\n', '                startUp();\n', '                notifyStarted();\n', '              } catch (Throwable t) {\n', '                notifyFailed(t);\n', '              }\n', '            }\n', '          });\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
144,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_109.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_109.txt," checkAcquiredLock() should never be invoked by a lock that has already
 been acquired. For unordered locks, aboutToAcquire() ensures this by
 checking isAcquiredByCurrentThread(). For ordered locks, however, this
 can happen because multiple locks may share the same LockGraphNode. In
 this situation, throw an IllegalStateException as defined by contract
 Otherwise, it's the first time seeing this lock relationship. Look for
 described in the documentation of WithExplicitOrdering.
 The acquisition ordering from ""acquiredLock"" to ""this"" has already
 been verified as safe. In a properly written application, this is
 the common case.
 Previously determined to be an unsafe lock acquisition.
 Create a new PotentialDeadlockException with the same causal chain
 (the example cycle) as that of the cached exception.
 a path from the acquiredLock to this.
 this can be safely acquired after the acquiredLock.

 Note that there is a race condition here which can result in missing
 a cyclic edge: it's possible for two threads to simultaneous find
 ""safe"" edges which together form a cycle. Preventing this race
 condition efficiently without _introducing_ deadlock is probably
 tricky. For now, just accept the race condition---missing a warning
 now and then is still better than having no deadlock detection.
 Unsafe acquisition order detected. Create and cache a
 PotentialDeadlockException.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_109.txt," checkAcquiredLock() should never be invoked by a lock that has already
 been acquired. For unordered locks, aboutToAcquire() ensures this by
 checking isAcquiredByCurrentThread(). For ordered locks, however, this
 can happen because multiple locks may share the same LockGraphNode. In
 this situation, throw an IllegalStateException as defined by contract
 Otherwise, it's the first time seeing this lock relationship. Look for
 described in the documentation of WithExplicitOrdering.
 The acquisition ordering from ""acquiredLock"" to ""this"" has already
 been verified as safe. In a properly written application, this is
 the common case.
 Previously determined to be an unsafe lock acquisition.
 Create a new PotentialDeadlockException with the same causal chain
 (the example cycle) as that of the cached exception.
 a path from the acquiredLock to this.
 this can be safely acquired after the acquiredLock.

 Note that there is a race condition here which can result in missing
 a cyclic edge: it's possible for two threads to simultaneous find
 ""safe"" edges which together form a cycle. Preventing this race
 condition efficiently without _introducing_ deadlock is probably
 tricky. For now, just accept the race condition---missing a warning
 now and then is still better than having no deadlock detection.
 Unsafe acquisition order detected. Create and cache a
 PotentialDeadlockException.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_109.txt,"[656, 672, 657, 690, 665, 654, 670, 655, 671]","['      Preconditions.checkState(\n', '          this != acquiredLock,\n', '          ""Attempted to acquire multiple locks with the same rank %s"",\n', '          acquiredLock.getLockName());\n', '      PotentialDeadlockException previousDeadlockException = disallowedPriorLocks.get(acquiredLock);\n', '        PotentialDeadlockException exception =\n', '            new PotentialDeadlockException(\n', '                acquiredLock, this, previousDeadlockException.getConflictingStackTrace());\n', '        allowedPriorLocks.put(acquiredLock, new ExampleStackTrace(acquiredLock, this));\n']","[704, 705, 678, 679, 684, 669, 685, 670, 686]","['      Preconditions.checkState(this != acquiredLock,\n', '          ""Attempted to acquire multiple locks with the same rank %s"", acquiredLock.getLockName());\n', '      PotentialDeadlockException previousDeadlockException =\n', '          disallowedPriorLocks.get(acquiredLock);\n', '        PotentialDeadlockException exception = new PotentialDeadlockException(\n', '            acquiredLock, this,\n', '            previousDeadlockException.getConflictingStackTrace());\n', '        allowedPriorLocks.put(\n', '            acquiredLock, new ExampleStackTrace(acquiredLock, this));\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory,guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java," void checkAcquiredLock(Policy policy, LockGraphNode acquiredLock)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_109.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_109.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_109.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_109.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['      Preconditions.checkState(this != acquiredLock,\n', '          ""Attempted to acquire multiple locks with the same rank %s"", acquiredLock.getLockName());\n', '      PotentialDeadlockException previousDeadlockException =\n', '          disallowedPriorLocks.get(acquiredLock);\n', '        PotentialDeadlockException exception = new PotentialDeadlockException(\n', '            acquiredLock, this,\n', '            previousDeadlockException.getConflictingStackTrace());\n', '        allowedPriorLocks.put(\n', '            acquiredLock, new ExampleStackTrace(acquiredLock, this));\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
145,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_110.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_110.txt,,,,,[45],"['  public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException {\n']","[48, 49]","['  public boolean awaitTermination(long timeout, TimeUnit unit)\n', '      throws InterruptedException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingExecutorService,guava/src/com/google/common/util/concurrent/ForwardingExecutorService.java,"public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_110.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_110.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_110.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_110.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  public boolean awaitTermination(long timeout, TimeUnit unit)\n', '      throws InterruptedException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
146,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_111.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_111.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_111.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_111.txt,[1312],"['      Future<V> future, long timeout, TimeUnit unit, Class<X> exceptionClass) throws X {\n']","[1366, 1367]","['      Future<V> future, long timeout, TimeUnit unit, Class<X> exceptionClass)\n', '      throws X {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2,guava/src/com/google/common/util/concurrent/Futures.java,"public static V get(Future<V> future, long timeout, TimeUnit unit, Class<X> exceptionClass) throws X",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_111.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_111.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_111.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_111.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['      Future<V> future, long timeout, TimeUnit unit, Class<X> exceptionClass)\n', '      throws X {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
147,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_112.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_112.txt," createNodes maps each enumClass to a Map with the corresponding enum key
 type.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_112.txt," createNodes maps each enumClass to a Map with the corresponding enum key
 type.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_112.txt,"[292, 293, 299]","['  public static <E extends Enum<E>> WithExplicitOrdering<E> newInstanceWithExplicitOrdering(\n', '      Class<E> enumClass, Policy policy) {\n', '    Map<E, LockGraphNode> lockGraphNodes = (Map<E, LockGraphNode>) getOrCreateNodes(enumClass);\n']","[295, 296, 302, 303]","['  public static <E extends Enum<E>> WithExplicitOrdering<E>\n', '      newInstanceWithExplicitOrdering(Class<E> enumClass, Policy policy) {\n', '    Map<E, LockGraphNode> lockGraphNodes =\n', '        (Map<E, LockGraphNode>) getOrCreateNodes(enumClass);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory,guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java,"public static WithExplicitOrdering<E> newInstanceWithExplicitOrdering(Class<E> enumClass, Policy policy)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_112.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_112.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_112.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_112.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  public static <E extends Enum<E>> WithExplicitOrdering<E>\n', '      newInstanceWithExplicitOrdering(Class<E> enumClass, Policy policy) {\n', '    Map<E, LockGraphNode> lockGraphNodes =\n', '        (Map<E, LockGraphNode>) getOrCreateNodes(enumClass);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
148,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_113.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_113.txt,,,,,"[62, 63]","['  @Override\n', '  public <T> ListenableFuture<T> submit(Callable<T> task) {\n']",[60],['  @Override public <T> ListenableFuture<T> submit(Callable<T> task) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractListeningExecutorService,guava/src/com/google/common/util/concurrent/AbstractListeningExecutorService.java,public ListenableFuture<T> submit(Callable<T> task),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_113.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_113.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_113.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_113.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['  @Override public <T> ListenableFuture<T> submit(Callable<T> task) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
149,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_114.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_114.txt," reset state in case of an error so that later calls to execute will actually do something
 Log it and keep going.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_114.txt," reset state in case of an error so that later calls to execute will actually do something
 Log it and keep going.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_114.txt,"[94, 95]","['        logger.log(\n', '            Level.SEVERE,\n']",[93],"['        logger.log(Level.SEVERE,\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenerCallQueue,guava/src/com/google/common/util/concurrent/ListenerCallQueue.java, void execute(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_114.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_114.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_114.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_114.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['        logger.log(Level.SEVERE,\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
150,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_115.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_115.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_115.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_115.txt,[38],"['  ListenableScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit);\n']","[40, 41]","['  ListenableScheduledFuture<?> schedule(\n', '      Runnable command, long delay, TimeUnit unit);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListeningScheduledExecutorService,guava/src/com/google/common/util/concurrent/ListeningScheduledExecutorService.java," ListenableScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_115.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_115.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_115.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_115.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  ListenableScheduledFuture<?> schedule(\n', '      Runnable command, long delay, TimeUnit unit);\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
151,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_116.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_116.txt,,,,,"[58, 59]","['  @Override\n', '  public E poll(long timeout, TimeUnit unit) throws InterruptedException {\n']","[58, 59]","['  @Override public E poll(long timeout, TimeUnit unit)\n', '      throws InterruptedException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingBlockingQueue,guava/src/com/google/common/util/concurrent/ForwardingBlockingQueue.java,"public E poll(long timeout, TimeUnit unit) throws InterruptedException",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_116.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_116.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_116.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_116.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  @Override public E poll(long timeout, TimeUnit unit)\n', '      throws InterruptedException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
152,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_117.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_117.txt,,,,,"[151, 152, 137, 138, 123, 124, 109, 110]","['    @Override\n', '    public boolean isSatisfied() {\n', '    @Override\n', '    public boolean isSatisfied() {\n', '    @Override\n', '    public boolean isSatisfied() {\n', '    @Override\n', '    public boolean isSatisfied() {\n']","[147, 134, 121, 108]","['    @Override public boolean isSatisfied() {\n', '    @Override public boolean isSatisfied() {\n', '    @Override public boolean isSatisfied() {\n', '    @Override public boolean isSatisfied() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractService,guava/src/com/google/common/util/concurrent/AbstractService.java,public boolean isSatisfied(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_117.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_117.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_117.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_117.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    @Override public boolean isSatisfied() {\n', '    @Override public boolean isSatisfied() {\n', '    @Override public boolean isSatisfied() {\n', '    @Override public boolean isSatisfied() {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
153,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_118.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_118.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_118.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_118.txt,"[225, 177, 226, 178, 420, 421, 269, 270]","['  @Override\n', '  public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n', '  @Override\n', '  public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n', '  @Override\n', '  public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n', '  @Override\n', '  public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n']","[209, 261, 165, 395]","['  @Override public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n', '  @Override public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n', '  @Override public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n', '  @Override public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService,guava/src/com/google/common/util/concurrent/AbstractScheduledService.java,"public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_118.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_118.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_118.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_118.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  @Override public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n', '  @Override public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n', '  @Override public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n', '  @Override public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
154,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_119.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_119.txt,,,,,"[87, 88]","['    @Override\n', '    public final boolean isDone() {\n']",[87],['    @Override public final boolean isDone() {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture,guava/src/com/google/common/util/concurrent/AbstractFuture.java,public final boolean isDone(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_119.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_119.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_119.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_119.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['    @Override public final boolean isDone() {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
155,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_120.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_120.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_120.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_120.txt,[51],['  public static <V> ListenableFuture<V> listenInPoolThread(Future<V> future) {\n'],"[58, 59]","['  public static <V> ListenableFuture<V> listenInPoolThread(\n', '      Future<V> future) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/JdkFutureAdapters,guava/src/com/google/common/util/concurrent/JdkFutureAdapters.java,public static ListenableFuture<V> listenInPoolThread(Future<V> future),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_120.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_120.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_120.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_120.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  public static <V> ListenableFuture<V> listenInPoolThread(\n', '      Future<V> future) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
156,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_121.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_121.txt," Add a listener to shutdown the executor after the service is stopped.  This ensures that the
 JVM shutdown will not be prevented from exiting after this service has stopped or failed.
 Technically this listener is added after start() was called so it is a little gross, but it
 is called within doStart() so we know that the service cannot terminate or fail concurrently
 with adding this listener so it is impossible to miss an event that we are interested in.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_121.txt," Add a listener to shutdown the executor after the service is stopped.  This ensures that the
 JVM shutdown will not be prevented from exiting after this service has stopped or failed.
 Technically this listener is added after start() was called so it is a little gross, but it
 is called within doStart() so we know that the service cannot terminate or fail concurrently
 with adding this listener so it is impossible to miss an event that we are interested in.
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_121.txt,"[320, 321, 322, 323, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346]","['    @WeakOuter\n', '    class ThreadFactoryImpl implements ThreadFactory {\n', '      @Override\n', '      public Thread newThread(Runnable runnable) {\n', '    addListener(\n', '        new Listener() {\n', '          @Override\n', '          public void terminated(State from) {\n', '            executor.shutdown();\n', '          }\n', '\n', '          @Override\n', '          public void failed(State from, Throwable failure) {\n', '            executor.shutdown();\n', '          }\n', '        },\n', '        directExecutor());\n']","[322, 323, 324, 325, 310, 326, 311, 327, 328, 329]","['    @WeakOuter class ThreadFactoryImpl implements ThreadFactory {\n', '      @Override public Thread newThread(Runnable runnable) {\n', '    addListener(new Listener() {\n', '      @Override public void terminated(State from) {\n', '        executor.shutdown();\n', '      }\n', '      @Override public void failed(State from, Throwable failure) {\n', '        executor.shutdown();\n', '      }\n', '    }, directExecutor());\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService,guava/src/com/google/common/util/concurrent/AbstractScheduledService.java,protected ScheduledExecutorService executor(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_121.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_121.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_121.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_121.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    @WeakOuter class ThreadFactoryImpl implements ThreadFactory {\n', '      @Override public Thread newThread(Runnable runnable) {\n', '    addListener(new Listener() {\n', '      @Override public void terminated(State from) {\n', '        executor.shutdown();\n', '      }\n', '      @Override public void failed(State from, Throwable failure) {\n', '        executor.shutdown();\n', '      }\n', '    }, directExecutor());\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
157,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_122.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_122.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_122.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_122.txt,[1001],['  public static <V> ListenableFuture<V> nonCancellationPropagating(ListenableFuture<V> future) {\n'],"[1040, 1041]","['  public static <V> ListenableFuture<V> nonCancellationPropagating(\n', '      ListenableFuture<V> future) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2,guava/src/com/google/common/util/concurrent/Futures.java,public static ListenableFuture<V> nonCancellationPropagating(ListenableFuture<V> future),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_122.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_122.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_122.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_122.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['  public static <V> ListenableFuture<V> nonCancellationPropagating(\n', '      ListenableFuture<V> future) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
158,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_123.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_123.txt,,,,,"[74, 75]","['  @Override\n', '  protected final void interruptTask() {\n']",[75],['  @Override protected final void interruptTask() {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AggregateFuture,guava/src/com/google/common/util/concurrent/AggregateFuture.java,protected final void interruptTask(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_123.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_123.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_123.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_123.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['  @Override protected final void interruptTask() {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
159,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_124.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_124.txt,,,,,"[985, 986]","['    @Override\n', '    boolean casListeners(AbstractFuture future, Listener curr, Listener next) {\n']",[966],"['    @Override boolean casListeners(AbstractFuture future, Listener curr, Listener next) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture,guava/src/com/google/common/util/concurrent/AbstractFuture.java," boolean casListeners(AbstractFuture future, Listener curr, Listener next)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_124.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_124.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_124.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_124.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    @Override boolean casListeners(AbstractFuture future, Listener curr, Listener next) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
160,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_125.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_125.txt,,,,,"[92, 93]","['    @Override\n', '    public final boolean isCancelled() {\n']",[91],['    @Override public final boolean isCancelled() {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture,guava/src/com/google/common/util/concurrent/AbstractFuture.java,public final boolean isCancelled(),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_125.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_125.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_125.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_125.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['    @Override public final boolean isCancelled() {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
161,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_126.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_126.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_126.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_126.txt,"[441, 442]","['      return policy == Policies.DISABLED\n', '          ? new ReentrantLock(fair)\n']",[450],['      return policy == Policies.DISABLED ? new ReentrantLock(fair)\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory,guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java,"public ReentrantLock newReentrantLock(E rank, boolean fair)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_126.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_126.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_126.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_126.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['      return policy == Policies.DISABLED ? new ReentrantLock(fair)\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
162,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_127.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_127.txt," atomic is now non-null; fall through
 value changed
 don't compareAndSet a zero
 atomic replaced
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_127.txt," atomic is now non-null; fall through
 value changed
 don't compareAndSet a zero
 atomic replaced
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_127.txt,"[165, 154, 155]","['    outer:\n', '    while (true) {\n', '      while (true) {\n']","[165, 155]","['    outer: for (;;) {\n', '      for (;;) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AtomicLongMap,guava/src/com/google/common/util/concurrent/AtomicLongMap.java,"public long getAndAdd(K key, long delta)",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_127.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_127.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_127.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_127.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]","['    outer: for (;;) {\n', '      for (;;) {\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
163,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_128.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_128.txt," mark as 'deleted'
 give up if someone is calling complete
 we aren't unlinking this node, update pred.
 We are unlinking this node and it has a predecessor.
 We raced with another node that unlinked pred. Restart.
 We are unlinking head
 We raced with an add or complete
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_128.txt," mark as 'deleted'
 give up if someone is calling complete
 we aren't unlinking this node, update pred.
 We are unlinking this node and it has a predecessor.
 We raced with another node that unlinked pred. Restart.
 We are unlinking head
 We raced with an add or complete
",69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_128.txt,"[198, 199]","['    restart:\n', '    while (true) {\n']",[193],['    restart: while (true) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture,guava/src/com/google/common/util/concurrent/AbstractFuture.java,private void removeWaiter(Waiter node),69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_128.txt,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_128.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_128.txt,,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_128.txt,"[80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 117, 118]","['   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n', ""   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n"", '   * complete} or, if the computation is already complete, immediately.\n', '   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n', '   * this method is guaranteed to be called once the computation is complete.\n', '   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n', '   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n', '   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n', '   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n', '   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n', '   * listeners can cause problems, and these problems can be difficult to reproduce because they\n', '   * depend on timing. For example:\n', '   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n', '   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n', '   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n', '   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n', '   * progress of the whole system. It may even cause a deadlock.\n', '   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n', '   * directExecutor} listeners.\n', '   * <p>This is the most general listener interface. For common operations performed using\n', '   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n', '   * Futures#addCallback addCallback()}.\n', '   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n', '   * href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"">\n', '   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n', '   *     executor rejected it.\n']","[129, 130, 135, 136, 137, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127]",['    restart: while (true) {\n'],/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture,guava/src/com/google/common/util/concurrent/ListenableFuture.java," void addListener(Runnable listener, Executor executor)",3,1,69a75be1f1f8b15a03fe8aaf985aceadc7a10f41
164,64164e46013f0939a0e6539620c33588ced0e6cf/Codes/Match_oldfunccode_64164e46013f0939a0e6539620c33588ced0e6cf_1.txt,64164e46013f0939a0e6539620c33588ced0e6cf/Codes/Match_newfunccode_64164e46013f0939a0e6539620c33588ced0e6cf_1.txt,,64164e46013f0939a0e6539620c33588ced0e6cf/Codes/Match_newfuncnewJdoc_64164e46013f0939a0e6539620c33588ced0e6cf_1.txt,,64164e46013f0939a0e6539620c33588ced0e6cf/Codes/Match_oldfuncoldJdoc_64164e46013f0939a0e6539620c33588ced0e6cf_1.txt,"[1206, 1207, 1031, 1208, 1032, 1209, 1033, 1210, 1034, 1211, 1035, 1036]","['    try {\n', '      return builder.build();\n', '    } catch (IllegalArgumentException duplicateKeys) {\n', '      throw new IllegalArgumentException(duplicateKeys.getMessage()\n', '          + "". To index multiple values under a key, use Multimaps.index."");\n', '    }\n', '    try {\n', '      return builder.build();\n', '    } catch (IllegalArgumentException duplicateKeys) {\n', '      throw new IllegalArgumentException(duplicateKeys.getMessage()\n', '          + "". To index multiple values under a key, use Multimaps.index."");\n', '    }\n']","[1180, 1005]","['    return builder.build();\n', '    return builder.build();\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/64164e46013f0939a0e6539620c33588ced0e6cf/Maps_2,guava/src/com/google/common/collect/Maps.java,"public static ImmutableMap<K, V> uniqueIndex(Iterator<V> values, Function<? super V, K> keyFunction)",64164e46013f0939a0e6539620c33588ced0e6cf/Codes/Match_olddocfunccode_64164e46013f0939a0e6539620c33588ced0e6cf_1.txt,64164e46013f0939a0e6539620c33588ced0e6cf/Codes/Match_newdocfunccode_64164e46013f0939a0e6539620c33588ced0e6cf_1.txt," TODO(user): consider presizing the builder if values is a Collection
",64164e46013f0939a0e6539620c33588ced0e6cf/Codes/Match_newdocnewJdoc_64164e46013f0939a0e6539620c33588ced0e6cf_1.txt," TODO(user): consider presizing the builder if values is a Collection
",64164e46013f0939a0e6539620c33588ced0e6cf/Codes/Match_olddocJdoc_64164e46013f0939a0e6539620c33588ced0e6cf_1.txt,"[1152, 1153, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151]","['   * Returns a map with the given {@code values}, indexed by keys derived from\n', '   * those values. In other words, each input value produces an entry in the map\n', '   * whose key is the result of applying {@code keyFunction} to that value.\n', '   * These entries appear in the same order as the input values. Example usage:\n', '   * <pre>   {@code\n', '   *\n', '   *   Color red = new Color(""red"", 255, 0, 0);\n', '   *   ...\n', '   *   ImmutableSet<Color> allColors = ImmutableSet.of(red, green, blue);\n', '   *\n', '   *   Map<String, Color> colorForName =\n', '   *       uniqueIndex(allColors, toStringFunction());\n', '   *   assertThat(colorForName).containsEntry(""red"", red);}</pre>\n', '   *\n', '   * <p>If your index may associate multiple values with each key, use {@link\n', '   * Multimaps#index(Iterable, Function) Multimaps.index}.\n', '   * Returns a map with the given {@code values}, indexed by keys derived from\n', '   * those values. In other words, each input value produces an entry in the map\n', '   * whose key is the result of applying {@code keyFunction} to that value.\n', '   * These entries appear in the same order as the input values. Example usage:\n', '   * <pre>   {@code\n', '   *\n', '   *   Color red = new Color(""red"", 255, 0, 0);\n', '   *   ...\n', '   *   ImmutableSet<Color> allColors = ImmutableSet.of(red, green, blue);\n', '   *\n', '   *   Map<String, Color> colorForName =\n', '   *       uniqueIndex(allColors, toStringFunction());\n', '   *   assertThat(colorForName).containsEntry(""red"", red);}</pre>\n', '   *\n', '   * <p>If your index may associate multiple values with each key, use {@link\n', '   * Multimaps#index(Iterable, Function) Multimaps.index}.\n']","[1138, 1139, 963, 1140, 964, 965]","['    return builder.build();\n', '    return builder.build();\n']",/home/pritish/Documents/IP work/guv_ver/v19.0/64164e46013f0939a0e6539620c33588ced0e6cf/Maps_2,guava/src/com/google/common/collect/Maps.java,"public static ImmutableMap<K, V> uniqueIndex(Iterable<V> values, Function<? super V, K> keyFunction)",5,1,64164e46013f0939a0e6539620c33588ced0e6cf
