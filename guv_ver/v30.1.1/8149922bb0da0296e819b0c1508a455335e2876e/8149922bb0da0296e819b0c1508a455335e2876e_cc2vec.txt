{"id": "8149922bb0da0296e819b0c1508a455335e2876e", "code": [{"0": "android/guava/src/com/google/common/reflect/AbstractInvocationHandler.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["// TODO(cpovirk): after adding @Nullable below\n", "@ElementTypesAreNonnullByDefault\n"], "3": ["  @CheckForNull\n", "  public final Object invoke(Object proxy, Method method, @CheckForNull @Nullable Object[] args)\n"], "4": ["  @CheckForNull\n", "  protected abstract Object handleInvocation(\n", "      Object proxy, Method method, /* TODO(cpovirk): @Nullable */ Object[] args) throws Throwable;\n"], "5": ["  public boolean equals(@CheckForNull Object obj) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "3": ["  public final Object invoke(Object proxy, Method method, @NullableDecl Object[] args)\n"], "4": ["  protected abstract Object handleInvocation(Object proxy, Method method, Object[] args)\n", "      throws Throwable;\n"], "5": ["  public boolean equals(Object obj) {\n"]}, "added_lines": {"1": [22, 23], "2": [43, 44], "3": [65, 66], "4": [101, 102, 103], "5": [117]}, "removed_lines": {"1": [22], "3": [62], "4": [97, 98], "5": [112]}}, {"1": "android/guava/src/com/google/common/reflect/ClassPath.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["    public boolean equals(@CheckForNull Object obj) {\n"], "4": ["     * <p>Behaves similarly to {@code class.getPackage().}{@link Package#getName() getName()} but\n", "     * does not require the class (or package) to be loaded.\n", "     *\n", "     * <p>But note that this method may behave differently for a class in the default package: For\n", "     * such classes, this method always returns an empty string. But under some version of Java,\n", "     * {@code class.getPackage().getName()} produces a {@code NullPointerException} because {@code\n", "     * class.getPackage()} returns {@code null}.\n"], "5": ["     * <p>Behaves similarly to {@link Class#getSimpleName()} but does not require the class to be\n", "     *\n", "     * <p>But note that this class uses heuristics to identify the simple name. See a related\n", "     * discussion in <a href=\"https://github.com/google/guava/issues/3349\">issue 3349</a>.\n"], "6": ["    public boolean equals(@CheckForNull Object obj) {\n"], "7": ["      File jarFile, @CheckForNull Manifest manifest) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "3": ["    public boolean equals(Object obj) {\n"], "4": ["     * <p>Behaves identically to {@link Package#getName()} but does not require the class (or\n", "     * package) to be loaded.\n"], "5": ["     * <p>Behaves identically to {@link Class#getSimpleName()} but does not require the class to be\n"], "6": ["    public boolean equals(Object obj) {\n"], "7": ["      File jarFile, @NullableDecl Manifest manifest) {\n"]}, "added_lines": {"1": [54], "2": [75], "3": [269], "4": [301, 302, 303, 304, 305, 306, 307], "5": [316, 318, 319, 320], "6": [543], "7": [571]}, "removed_lines": {"1": [54], "3": [268], "4": [300, 301], "5": [310], "6": [534], "7": [562]}}, {"2": "android/guava/src/com/google/common/reflect/Element.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  @CheckForNull\n"], "4": ["  public boolean equals(@CheckForNull Object obj) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "4": ["  public boolean equals(@NullableDecl Object obj) {\n"]}, "added_lines": {"1": [26], "2": [34], "3": [56], "4": [163]}, "removed_lines": {"1": [26], "4": [161]}}, {"3": "android/guava/src/com/google/common/reflect/ElementTypesAreNonnullByDefault.java", "added": {"1": ["/*\n", " * Copyright (C) 2021 The Guava Authors\n", " *\n", " * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package com.google.common.reflect;\n", "\n", "import static java.lang.annotation.ElementType.FIELD;\n", "import static java.lang.annotation.ElementType.METHOD;\n", "import static java.lang.annotation.ElementType.PARAMETER;\n", "import static java.lang.annotation.ElementType.TYPE;\n", "import static java.lang.annotation.RetentionPolicy.RUNTIME;\n", "\n", "import com.google.common.annotations.GwtCompatible;\n", "import java.lang.annotation.Retention;\n", "import java.lang.annotation.Target;\n", "import javax.annotation.Nonnull;\n", "import javax.annotation.meta.TypeQualifierDefault;\n", "\n", "/**\n", " * Marks all \"top-level\" types as non-null in a way that is recognized by Kotlin. Note that this\n", " * unfortunately includes type-variable usages, so we also provide {@link ParametricNullness} to\n", " * \"undo\" it as best we can.\n", " */\n", "@GwtCompatible\n", "@Retention(RUNTIME)\n", "@Target(TYPE)\n", "@TypeQualifierDefault({FIELD, METHOD, PARAMETER})\n", "@Nonnull\n", "@interface ElementTypesAreNonnullByDefault {}\n"]}, "removed": {}, "added_lines": {"1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]}, "removed_lines": {}}, {"4": "android/guava/src/com/google/common/reflect/Invokable.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  // All subclasses are owned by us and we'll make sure to get the R type right, including nullness.\n", "  @SuppressWarnings({\"unchecked\", \"nullness\"})\n", "  @CheckForNull\n", "  public final R invoke(@CheckForNull T receiver, @Nullable Object... args)\n"], "4": ["  @CheckForNull\n", "  abstract Object invokeInternal(@CheckForNull Object receiver, @Nullable Object[] args)\n"], "5": ["    @CheckForNull\n", "    final Object invokeInternal(@CheckForNull Object receiver, @Nullable Object[] args)\n"], "6": ["    final Object invokeInternal(@CheckForNull Object receiver, @Nullable Object[] args)\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "3": ["  // All subclasses are owned by us and we'll make sure to get the R type right.\n", "  @SuppressWarnings(\"unchecked\")\n", "  public final R invoke(@NullableDecl T receiver, Object... args)\n"], "4": ["  abstract Object invokeInternal(@NullableDecl Object receiver, Object[] args)\n"], "5": ["    final Object invokeInternal(@NullableDecl Object receiver, Object[] args)\n"], "6": ["    final Object invokeInternal(@NullableDecl Object receiver, Object[] args)\n"]}, "added_lines": {"1": [33, 34], "2": [59], "3": [98, 99, 101, 102], "4": [179, 180], "5": [202, 203], "6": [257]}, "removed_lines": {"1": [33], "3": [96, 97, 99], "4": [176], "5": [198], "6": [252]}}, {"5": "android/guava/src/com/google/common/reflect/Parameter.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  @CheckForNull\n"], "4": ["  @CheckForNull\n"], "5": ["  public boolean equals(@CheckForNull Object obj) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "3": ["  @NullableDecl\n"], "4": ["  @NullableDecl\n"], "5": ["  public boolean equals(@NullableDecl Object obj) {\n"]}, "added_lines": {"1": [24], "2": [33], "3": [65], "4": [96], "5": [109]}, "removed_lines": {"1": [24], "3": [64], "4": [95], "5": [108]}}, {"6": "android/guava/src/com/google/common/reflect/ParametricNullness.java", "added": {"1": ["/*\n", " * Copyright (C) 2021 The Guava Authors\n", " *\n", " * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package com.google.common.reflect;\n", "\n", "import static java.lang.annotation.ElementType.FIELD;\n", "import static java.lang.annotation.ElementType.METHOD;\n", "import static java.lang.annotation.ElementType.PARAMETER;\n", "import static java.lang.annotation.RetentionPolicy.RUNTIME;\n", "import static javax.annotation.meta.When.UNKNOWN;\n", "\n", "import com.google.common.annotations.GwtCompatible;\n", "import java.lang.annotation.Retention;\n", "import java.lang.annotation.Target;\n", "import javax.annotation.Nonnull;\n", "import javax.annotation.meta.TypeQualifierNickname;\n", "\n", "/**\n", " * Marks a \"top-level\" type-variable usage as (a) a Kotlin platform type when the type argument is\n", " * non-nullable and (b) nullable when the type argument is nullable. This is the closest we can get\n", " * to \"non-nullable when non-nullable; nullable when nullable\" (like the Android <a\n", " * href=\"https://android.googlesource.com/platform/libcore/+/master/luni/src/main/java/libcore/util/NullFromTypeParam.java\">{@code\n", " * NullFromTypeParam}</a>). We use this to \"undo\" {@link ElementTypesAreNonnullByDefault}.\n", " */\n", "@GwtCompatible\n", "@Retention(RUNTIME)\n", "@Target({FIELD, METHOD, PARAMETER})\n", "@TypeQualifierNickname\n", "@Nonnull(when = UNKNOWN)\n", "@interface ParametricNullness {}\n"]}, "removed": {}, "added_lines": {"1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43]}, "removed_lines": {}}, {"7": "android/guava/src/com/google/common/reflect/Reflection.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [30]}, "removed_lines": {}}, {"8": "android/guava/src/com/google/common/reflect/TypeCapture.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [27]}, "removed_lines": {}}, {"9": "android/guava/src/com/google/common/reflect/TypeParameter.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "/*\n", " * A nullable bound would let users create a TypeParameter instance for a parameter with a nullable\n", " * bound. However, it would also let them create `new TypeParameter<@Nullable T>() {}`, which\n", " * wouldn't behave as users might expect. Additionally, it's not clear how the TypeToken API could\n", " * support even a \"normal\" `TypeParameter<T>` when `<T>` has a nullable bound. (See the discussion\n", " * on TypeToken.where.) So, in the interest of failing fast and encouraging the user to switch to a\n", " * non-null bound if possible, let's require a non-null bound here.\n", " *\n", " * TODO(cpovirk): Elaborate on \"wouldn't behave as users might expect.\"\n", " */\n"], "3": ["  public final boolean equals(@CheckForNull Object o) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "3": ["  public final boolean equals(@NullableDecl Object o) {\n"]}, "added_lines": {"1": [22], "2": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "3": [65]}, "removed_lines": {"1": [22], "3": [54]}}, {"10": "android/guava/src/com/google/common/reflect/TypeResolver.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["    @CheckForNull\n", "    private Type captureNullable(@CheckForNull Type type) {\n"], "4": ["    public boolean equals(@CheckForNull Object obj) {\n"], "5": ["    @CheckForNull\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "3": ["    private Type captureNullable(@NullableDecl Type type) {\n"], "4": ["    public boolean equals(Object obj) {\n"]}, "added_lines": {"1": [38], "2": [55], "3": [531, 532], "4": [566], "5": [581]}, "removed_lines": {"1": [38], "3": [530], "4": [564]}}, {"11": "android/guava/src/com/google/common/reflect/TypeToken.java", "added": {"1": ["import static java.util.Objects.requireNonNull;\n"], "2": ["import javax.annotation.CheckForNull;\n"], "3": ["@ElementTypesAreNonnullByDefault\n", "  @CheckForNull private transient TypeResolver invariantTypeResolver;\n", "  @CheckForNull private transient TypeResolver covariantTypeResolver;\n"], "4": ["  /*\n", "   * TODO(cpovirk): Is there any way for us to support TypeParameter instances for type parameters\n", "   * that have nullable bounds? Unfortunately, if we change the parameter to TypeParameter<? extends\n", "   * @Nullable X>, then users might pass a TypeParameter<Y>, where Y is a subtype of X, while still\n", "   * passing a TypeToken<X>. This would be invalid. Maybe we could accept a TypeParameter<@PolyNull\n", "   * X> if we support such a thing? It would be weird or misleading for users to be able to pass\n", "   * `new TypeParameter<@Nullable T>() {}` and have it act as a plain `TypeParameter<T>`, but\n", "   * hopefully no one would do that, anyway. See also the comment on TypeParameter itself.\n", "   *\n", "   * TODO(cpovirk): Elaborate on this / merge with other comment?\n", "   */\n"], "5": ["  /*\n", "   * TODO(cpovirk): Is there any way for us to support TypeParameter instances for type parameters\n", "   * that have nullable bounds? See discussion on the other overload of this method.\n", "   */\n"], "6": ["  @CheckForNull\n"], "7": ["  @CheckForNull\n"], "8": ["  @CheckForNull\n"], "9": ["    @CheckForNull private transient ImmutableSet<TypeToken<? super T>> types;\n"], "10": ["    @CheckForNull private transient ImmutableSet<TypeToken<? super T>> interfaces;\n"], "11": ["    @CheckForNull private transient ImmutableSet<TypeToken<? super T>> classes;\n"], "12": ["  public boolean equals(@CheckForNull Object o) {\n"], "13": ["  @CheckForNull\n"], "14": ["    TypeToken componentType = getComponentType();\n", "    // TODO(cpovirk): checkArgument?\n", "    if (componentType == null) {\n", "      throw new IllegalArgumentException(supertype + \" isn't a super type of \" + this);\n", "    }\n", "    /*\n", "     * requireNonNull is safe because we call getArraySupertype only after checking\n", "     * supertype.isArray().\n", "     */\n", "    TypeToken<?> componentSupertype =\n", "        componentType.getSupertype(requireNonNull(supertype.getComponentType()));\n"], "15": ["    Class<?> subclassComponentType = subclass.getComponentType();\n", "    if (subclassComponentType == null) {\n", "      throw new IllegalArgumentException(subclass + \" does not appear to be a subtype of \" + this);\n", "    }\n", "    // requireNonNull is safe because we call getArraySubtype only when isArray().\n", "    TypeToken<?> componentSubtype =\n", "        requireNonNull(getComponentType()).getSubtype(subclassComponentType);\n"], "16": ["          @CheckForNull\n"], "17": ["          @CheckForNull\n"], "18": ["              // requireNonNull is safe because we are passing keys in the map.\n", "              return valueComparator.compare(\n", "                  requireNonNull(map.get(left)), requireNonNull(map.get(right)));\n"], "19": ["    @CheckForNull\n"], "20": ["      @CheckForNull\n"]}, "removed": {"2": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "3": ["  @NullableDecl private transient TypeResolver invariantTypeResolver;\n", "  @NullableDecl private transient TypeResolver covariantTypeResolver;\n"], "6": ["  @NullableDecl\n"], "7": ["  @NullableDecl\n"], "8": ["  @NullableDecl\n"], "9": ["    @NullableDecl private transient ImmutableSet<TypeToken<? super T>> types;\n"], "10": ["    @NullableDecl private transient ImmutableSet<TypeToken<? super T>> interfaces;\n"], "11": ["    @NullableDecl private transient ImmutableSet<TypeToken<? super T>> classes;\n"], "12": ["  public boolean equals(@NullableDecl Object o) {\n"], "13": ["  @NullableDecl\n"], "14": ["    TypeToken componentType =\n", "        checkNotNull(getComponentType(), \"%s isn't a super type of %s\", supertype, this);\n", "    TypeToken<?> componentSupertype = componentType.getSupertype(supertype.getComponentType());\n"], "15": ["    TypeToken<?> componentSubtype = getComponentType().getSubtype(subclass.getComponentType());\n"], "16": ["          @NullableDecl\n"], "17": ["          @NullableDecl\n"], "18": ["              return valueComparator.compare(map.get(left), map.get(right));\n"], "19": ["    @NullableDecl\n"]}, "added_lines": {"1": [20], "2": [50], "3": [102, 108, 111], "4": [225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235], "5": [264, 265, 266, 267], "6": [308], "7": [327], "8": [580], "9": [675], "10": [721], "11": [774], "12": [839], "13": [1153], "14": [1243, 1244, 1245, 1246, 1247, 1250, 1251, 1252, 1253, 1254, 1255], "15": [1265, 1266, 1267, 1268, 1270, 1271, 1272], "16": [1345], "17": [1364], "18": [1436, 1437, 1438], "19": [1448], "20": [1470]}, "removed_lines": {"2": [49], "3": [106, 109], "6": [291], "7": [310], "8": [563], "9": [658], "10": [704], "11": [757], "12": [822], "13": [1136], "14": [1226, 1227, 1230], "15": [1241], "16": [1314], "17": [1333], "18": [1405], "19": [1415]}}, {"12": "android/guava/src/com/google/common/reflect/TypeVisitor.java", "added": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  public final void visit(@Nullable Type... types) {\n"]}, "removed": {"3": ["  public final void visit(Type... types) {\n"]}, "added_lines": {"1": [24], "2": [57], "3": [66]}, "removed_lines": {"3": [64]}}, {"13": "android/guava/src/com/google/common/reflect/Types.java", "added": {"1": ["import static java.util.Objects.requireNonNull;\n"], "2": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n", "@ElementTypesAreNonnullByDefault\n"], "3": ["      @CheckForNull Type ownerType, Class<?> rawType, Type... arguments) {\n"], "4": ["      @CheckForNull\n", "      @CheckForNull\n"], "5": ["    @CheckForNull\n"], "6": ["      // requireNonNull is safe because we're examining a type that's known to have a superclass.\n", "      ParameterizedType parameterizedType =\n", "          requireNonNull((ParameterizedType) subclass.getGenericSuperclass());\n"], "7": ["  @CheckForNull\n", "    final AtomicReference<@Nullable Type> result = new AtomicReference<>();\n"], "8": ["  @CheckForNull\n"], "9": ["    public boolean equals(@CheckForNull Object obj) {\n"], "10": ["    @CheckForNull private final Type ownerType;\n", "    ParameterizedTypeImpl(@CheckForNull Type ownerType, Class<?> rawType, Type[] typeArguments) {\n"], "11": ["    @CheckForNull\n"], "12": ["    public boolean equals(@CheckForNull Object other) {\n"], "13": ["    @CheckForNull\n", "    public Object invoke(Object proxy, Method method, @CheckForNull @Nullable Object[] args)\n", "        throws Throwable {\n"], "14": ["    public boolean equals(@CheckForNull Object obj) {\n"], "15": ["    public boolean equals(@CheckForNull Object obj) {\n"]}, "removed": {"2": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "3": ["      @NullableDecl Type ownerType, Class<?> rawType, Type... arguments) {\n"], "4": ["      @NullableDecl\n", "      @NullableDecl\n"], "5": ["    @NullableDecl\n"], "6": ["      ParameterizedType parameterizedType = (ParameterizedType) subclass.getGenericSuperclass();\n"], "7": ["  @NullableDecl\n", "    final AtomicReference<Type> result = new AtomicReference<>();\n"], "8": ["  @NullableDecl\n"], "9": ["    public boolean equals(Object obj) {\n"], "10": ["    @NullableDecl private final Type ownerType;\n", "    ParameterizedTypeImpl(@NullableDecl Type ownerType, Class<?> rawType, Type[] typeArguments) {\n"], "12": ["    public boolean equals(Object other) {\n"], "13": ["    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n"], "14": ["    public boolean equals(Object obj) {\n"], "15": ["    public boolean equals(Object obj) {\n"]}, "added_lines": {"1": [20], "2": [48, 49, 56], "3": [92], "4": [112, 119], "5": [129], "6": [137, 138, 139], "7": [180, 183], "8": [212], "9": [255], "10": [268, 272], "11": [292], "12": [319], "13": [395, 396, 397], "14": [452], "15": [501]}, "removed_lines": {"2": [47], "3": [89], "4": [109, 116], "5": [126], "6": [134], "7": [175, 178], "8": [207], "9": [250], "10": [263, 267], "12": [313], "13": [389], "14": [444], "15": [493]}}, {"14": "guava/src/com/google/common/reflect/AbstractInvocationHandler.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["// TODO(cpovirk): after adding @Nullable below\n", "@ElementTypesAreNonnullByDefault\n"], "3": ["  @CheckForNull\n", "  public final Object invoke(Object proxy, Method method, @CheckForNull @Nullable Object[] args)\n"], "4": ["  @CheckForNull\n", "  protected abstract Object handleInvocation(\n", "      Object proxy, Method method, /* TODO(cpovirk): @Nullable */ Object[] args) throws Throwable;\n"], "5": ["  public boolean equals(@CheckForNull Object obj) {\n"]}, "removed": {"3": ["  public final Object invoke(Object proxy, Method method, Object @Nullable [] args)\n"], "4": ["  protected abstract Object handleInvocation(Object proxy, Method method, Object[] args)\n", "      throws Throwable;\n"], "5": ["  public boolean equals(Object obj) {\n"]}, "added_lines": {"1": [22], "2": [43, 44], "3": [65, 66], "4": [101, 102, 103], "5": [117]}, "removed_lines": {"3": [62], "4": [97, 98], "5": [112]}}, {"15": "guava/src/com/google/common/reflect/ClassPath.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["    public boolean equals(@CheckForNull Object obj) {\n"], "4": ["     * <p>Behaves similarly to {@code class.getPackage().}{@link Package#getName() getName()} but\n", "     * does not require the class (or package) to be loaded.\n", "     *\n", "     * <p>But note that this method may behave differently for a class in the default package: For\n", "     * such classes, this method always returns an empty string. But under some version of Java,\n", "     * {@code class.getPackage().getName()} produces a {@code NullPointerException} because {@code\n", "     * class.getPackage()} returns {@code null}.\n"], "5": ["     * <p>Behaves similarly to {@link Class#getSimpleName()} but does not require the class to be\n", "     *\n", "     * <p>But note that this class uses heuristics to identify the simple name. See a related\n", "     * discussion in <a href=\"https://github.com/google/guava/issues/3349\">issue 3349</a>.\n"], "6": ["    public boolean equals(@CheckForNull Object obj) {\n"], "7": ["  static ImmutableSet<File> getClassPathFromManifest(\n", "      File jarFile, @CheckForNull Manifest manifest) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "3": ["    public boolean equals(Object obj) {\n"], "4": ["     * <p>Behaves identically to {@link Package#getName()} but does not require the class (or\n", "     * package) to be loaded.\n"], "5": ["     * <p>Behaves identically to {@link Class#getSimpleName()} but does not require the class to be\n"], "6": ["    public boolean equals(Object obj) {\n"], "7": ["  static ImmutableSet<File> getClassPathFromManifest(File jarFile, @Nullable Manifest manifest) {\n"]}, "added_lines": {"1": [54], "2": [75], "3": [269], "4": [301, 302, 303, 304, 305, 306, 307], "5": [316, 318, 319, 320], "6": [543], "7": [570, 571]}, "removed_lines": {"1": [54], "3": [268], "4": [300, 301], "5": [310], "6": [534], "7": [561]}}, {"16": "guava/src/com/google/common/reflect/Element.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  @CheckForNull\n"], "4": ["  public boolean equals(@CheckForNull Object obj) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "4": ["  public boolean equals(@Nullable Object obj) {\n"]}, "added_lines": {"1": [26], "2": [34], "3": [56], "4": [163]}, "removed_lines": {"1": [26], "4": [161]}}, {"17": "guava/src/com/google/common/reflect/ElementTypesAreNonnullByDefault.java", "added": {"1": ["/*\n", " * Copyright (C) 2021 The Guava Authors\n", " *\n", " * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package com.google.common.reflect;\n", "\n", "import static java.lang.annotation.ElementType.FIELD;\n", "import static java.lang.annotation.ElementType.METHOD;\n", "import static java.lang.annotation.ElementType.PARAMETER;\n", "import static java.lang.annotation.ElementType.TYPE;\n", "import static java.lang.annotation.RetentionPolicy.RUNTIME;\n", "\n", "import com.google.common.annotations.GwtCompatible;\n", "import java.lang.annotation.Retention;\n", "import java.lang.annotation.Target;\n", "import javax.annotation.Nonnull;\n", "import javax.annotation.meta.TypeQualifierDefault;\n", "\n", "/**\n", " * Marks all \"top-level\" types as non-null in a way that is recognized by Kotlin. Note that this\n", " * unfortunately includes type-variable usages, so we also provide {@link ParametricNullness} to\n", " * \"undo\" it as best we can.\n", " */\n", "@GwtCompatible\n", "@Retention(RUNTIME)\n", "@Target(TYPE)\n", "@TypeQualifierDefault({FIELD, METHOD, PARAMETER})\n", "@Nonnull\n", "@interface ElementTypesAreNonnullByDefault {}\n"]}, "removed": {}, "added_lines": {"1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]}, "removed_lines": {}}, {"18": "guava/src/com/google/common/reflect/Invokable.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  // All subclasses are owned by us and we'll make sure to get the R type right, including nullness.\n", "  @SuppressWarnings({\"unchecked\", \"nullness\"})\n", "  @CheckForNull\n", "  public final R invoke(@CheckForNull T receiver, @Nullable Object... args)\n"], "4": ["  @CheckForNull\n", "  abstract Object invokeInternal(@CheckForNull Object receiver, @Nullable Object[] args)\n"], "5": ["    @CheckForNull\n", "    final Object invokeInternal(@CheckForNull Object receiver, @Nullable Object[] args)\n"], "6": ["    final Object invokeInternal(@CheckForNull Object receiver, @Nullable Object[] args)\n"]}, "removed": {"3": ["  // All subclasses are owned by us and we'll make sure to get the R type right.\n", "  @SuppressWarnings(\"unchecked\")\n", "  public final R invoke(@Nullable T receiver, Object... args)\n"], "4": ["  abstract Object invokeInternal(@Nullable Object receiver, Object[] args)\n"], "5": ["    final Object invokeInternal(@Nullable Object receiver, Object[] args)\n"], "6": ["    final Object invokeInternal(@Nullable Object receiver, Object[] args)\n"]}, "added_lines": {"1": [34], "2": [60], "3": [99, 100, 102, 103], "4": [183, 184], "5": [210, 211], "6": [275]}, "removed_lines": {"3": [97, 98, 100], "4": [180], "5": [206], "6": [270]}}, {"19": "guava/src/com/google/common/reflect/Parameter.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  @CheckForNull\n", "  public <A extends Annotation> A getAnnotation(Class<A> annotationType) {\n"], "4": ["  @CheckForNull\n", "  public <A extends Annotation> A getDeclaredAnnotation(Class<A> annotationType) {\n"], "5": ["  public boolean equals(@CheckForNull Object obj) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "3": ["  public <A extends Annotation> @Nullable A getAnnotation(Class<A> annotationType) {\n"], "4": ["  public <A extends Annotation> @Nullable A getDeclaredAnnotation(Class<A> annotationType) {\n"], "5": ["  public boolean equals(@Nullable Object obj) {\n"]}, "added_lines": {"1": [25], "2": [34], "3": [72, 73], "4": [105, 106], "5": [125]}, "removed_lines": {"1": [25], "3": [71], "4": [103], "5": [122]}}, {"20": "guava/src/com/google/common/reflect/ParametricNullness.java", "added": {"1": ["/*\n", " * Copyright (C) 2021 The Guava Authors\n", " *\n", " * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package com.google.common.reflect;\n", "\n", "import static java.lang.annotation.ElementType.FIELD;\n", "import static java.lang.annotation.ElementType.METHOD;\n", "import static java.lang.annotation.ElementType.PARAMETER;\n", "import static java.lang.annotation.RetentionPolicy.RUNTIME;\n", "import static javax.annotation.meta.When.UNKNOWN;\n", "\n", "import com.google.common.annotations.GwtCompatible;\n", "import java.lang.annotation.Retention;\n", "import java.lang.annotation.Target;\n", "import javax.annotation.Nonnull;\n", "import javax.annotation.meta.TypeQualifierNickname;\n", "\n", "/**\n", " * Marks a \"top-level\" type-variable usage as (a) a Kotlin platform type when the type argument is\n", " * non-nullable and (b) nullable when the type argument is nullable. This is the closest we can get\n", " * to \"non-nullable when non-nullable; nullable when nullable\" (like the Android <a\n", " * href=\"https://android.googlesource.com/platform/libcore/+/master/luni/src/main/java/libcore/util/NullFromTypeParam.java\">{@code\n", " * NullFromTypeParam}</a>). We use this to \"undo\" {@link ElementTypesAreNonnullByDefault}.\n", " */\n", "@GwtCompatible\n", "@Retention(RUNTIME)\n", "@Target({FIELD, METHOD, PARAMETER})\n", "@TypeQualifierNickname\n", "@Nonnull(when = UNKNOWN)\n", "@interface ParametricNullness {}\n"]}, "removed": {}, "added_lines": {"1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43]}, "removed_lines": {}}, {"21": "guava/src/com/google/common/reflect/Reflection.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [30]}, "removed_lines": {}}, {"22": "guava/src/com/google/common/reflect/TypeCapture.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [27]}, "removed_lines": {}}, {"23": "guava/src/com/google/common/reflect/TypeParameter.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "/*\n", " * A nullable bound would let users create a TypeParameter instance for a parameter with a nullable\n", " * bound. However, it would also let them create `new TypeParameter<@Nullable T>() {}`, which\n", " * wouldn't behave as users might expect. Additionally, it's not clear how the TypeToken API could\n", " * support even a \"normal\" `TypeParameter<T>` when `<T>` has a nullable bound. (See the discussion\n", " * on TypeToken.where.) So, in the interest of failing fast and encouraging the user to switch to a\n", " * non-null bound if possible, let's require a non-null bound here.\n", " *\n", " * TODO(cpovirk): Elaborate on \"wouldn't behave as users might expect.\"\n", " */\n"], "3": ["  public final boolean equals(@CheckForNull Object o) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "3": ["  public final boolean equals(@Nullable Object o) {\n"]}, "added_lines": {"1": [22], "2": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "3": [65]}, "removed_lines": {"1": [22], "3": [54]}}, {"24": "guava/src/com/google/common/reflect/TypeResolver.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["    @CheckForNull\n", "    private Type captureNullable(@CheckForNull Type type) {\n"], "4": ["    public boolean equals(@CheckForNull Object obj) {\n"], "5": ["    @CheckForNull\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "3": ["    private Type captureNullable(@Nullable Type type) {\n"], "4": ["    public boolean equals(Object obj) {\n"]}, "added_lines": {"1": [38], "2": [55], "3": [531, 532], "4": [566], "5": [581]}, "removed_lines": {"1": [38], "3": [530], "4": [564]}}, {"25": "guava/src/com/google/common/reflect/TypeToken.java", "added": {"1": ["import static java.util.Objects.requireNonNull;\n"], "2": ["import javax.annotation.CheckForNull;\n"], "3": ["@ElementTypesAreNonnullByDefault\n", "  @CheckForNull private transient TypeResolver invariantTypeResolver;\n", "  @CheckForNull private transient TypeResolver covariantTypeResolver;\n"], "4": ["  /*\n", "   * TODO(cpovirk): Is there any way for us to support TypeParameter instances for type parameters\n", "   * that have nullable bounds? Unfortunately, if we change the parameter to TypeParameter<? extends\n", "   * @Nullable X>, then users might pass a TypeParameter<Y>, where Y is a subtype of X, while still\n", "   * passing a TypeToken<X>. This would be invalid. Maybe we could accept a TypeParameter<@PolyNull\n", "   * X> if we support such a thing? It would be weird or misleading for users to be able to pass\n", "   * `new TypeParameter<@Nullable T>() {}` and have it act as a plain `TypeParameter<T>`, but\n", "   * hopefully no one would do that, anyway. See also the comment on TypeParameter itself.\n", "   *\n", "   * TODO(cpovirk): Elaborate on this / merge with other comment?\n", "   */\n"], "5": ["  /*\n", "   * TODO(cpovirk): Is there any way for us to support TypeParameter instances for type parameters\n", "   * that have nullable bounds? See discussion on the other overload of this method.\n", "   */\n"], "6": ["  @CheckForNull\n", "  final TypeToken<? super T> getGenericSuperclass() {\n"], "7": ["  @CheckForNull\n", "  private TypeToken<? super T> boundAsSuperclass(Type bound) {\n"], "8": ["  @CheckForNull\n", "  public final TypeToken<?> getComponentType() {\n"], "9": ["    @CheckForNull private transient ImmutableSet<TypeToken<? super T>> types;\n"], "10": ["    @CheckForNull private transient ImmutableSet<TypeToken<? super T>> interfaces;\n"], "11": ["    @CheckForNull private transient ImmutableSet<TypeToken<? super T>> classes;\n"], "12": ["  public boolean equals(@CheckForNull Object o) {\n"], "13": ["  @CheckForNull\n", "  private Type getOwnerTypeIfPresent() {\n"], "14": ["    TypeToken componentType = getComponentType();\n", "    // TODO(cpovirk): checkArgument?\n", "    if (componentType == null) {\n", "      throw new IllegalArgumentException(supertype + \" isn't a super type of \" + this);\n", "    }\n", "    /*\n", "     * requireNonNull is safe because we call getArraySupertype only after checking\n", "     * supertype.isArray().\n", "     */\n", "    TypeToken<?> componentSupertype =\n", "        componentType.getSupertype(requireNonNull(supertype.getComponentType()));\n"], "15": ["    Class<?> subclassComponentType = subclass.getComponentType();\n", "    if (subclassComponentType == null) {\n", "      throw new IllegalArgumentException(subclass + \" does not appear to be a subtype of \" + this);\n", "    }\n", "    // requireNonNull is safe because we call getArraySubtype only when isArray().\n", "    TypeToken<?> componentSubtype =\n", "        requireNonNull(getComponentType()).getSubtype(subclassComponentType);\n"], "16": ["          @CheckForNull\n"], "17": ["          @CheckForNull\n"], "18": ["              // requireNonNull is safe because we are passing keys in the map.\n", "              return valueComparator.compare(\n", "                  requireNonNull(map.get(left)), requireNonNull(map.get(right)));\n"], "19": ["    @CheckForNull\n", "    abstract K getSuperclass(K type);\n"], "20": ["      @CheckForNull\n"]}, "removed": {"2": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "3": ["  private transient @Nullable TypeResolver invariantTypeResolver;\n", "  private transient @Nullable TypeResolver covariantTypeResolver;\n"], "6": ["  final @Nullable TypeToken<? super T> getGenericSuperclass() {\n"], "7": ["  private @Nullable TypeToken<? super T> boundAsSuperclass(Type bound) {\n"], "8": ["  public final @Nullable TypeToken<?> getComponentType() {\n"], "9": ["    private transient @Nullable ImmutableSet<TypeToken<? super T>> types;\n"], "10": ["    private transient @Nullable ImmutableSet<TypeToken<? super T>> interfaces;\n"], "11": ["    private transient @Nullable ImmutableSet<TypeToken<? super T>> classes;\n"], "12": ["  public boolean equals(@Nullable Object o) {\n"], "13": ["  private @Nullable Type getOwnerTypeIfPresent() {\n"], "14": ["    TypeToken componentType =\n", "        checkNotNull(getComponentType(), \"%s isn't a super type of %s\", supertype, this);\n", "    TypeToken<?> componentSupertype = componentType.getSupertype(supertype.getComponentType());\n"], "15": ["    TypeToken<?> componentSubtype = getComponentType().getSubtype(subclass.getComponentType());\n"], "16": ["          @Nullable\n"], "17": ["          @Nullable\n"], "18": ["              return valueComparator.compare(map.get(left), map.get(right));\n"], "19": ["    abstract @Nullable K getSuperclass(K type);\n"]}, "added_lines": {"1": [20], "2": [50], "3": [102, 108, 111], "4": [225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235], "5": [264, 265, 266, 267], "6": [308, 309], "7": [327, 328], "8": [580, 581], "9": [675], "10": [721], "11": [774], "12": [839], "13": [1153, 1154], "14": [1243, 1244, 1245, 1246, 1247, 1250, 1251, 1252, 1253, 1254, 1255], "15": [1265, 1266, 1267, 1268, 1270, 1271, 1272], "16": [1345], "17": [1364], "18": [1436, 1437, 1438], "19": [1448, 1449], "20": [1470]}, "removed_lines": {"2": [49], "3": [106, 109], "6": [291], "7": [309], "8": [561], "9": [655], "10": [701], "11": [754], "12": [819], "13": [1133], "14": [1222, 1223, 1226], "15": [1237], "16": [1310], "17": [1329], "18": [1401], "19": [1411]}}, {"26": "guava/src/com/google/common/reflect/TypeVisitor.java", "added": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  public final void visit(@Nullable Type... types) {\n"]}, "removed": {"3": ["  public final void visit(Type... types) {\n"]}, "added_lines": {"1": [24], "2": [57], "3": [66]}, "removed_lines": {"3": [64]}}, {"27": "guava/src/com/google/common/reflect/Types.java", "added": {"1": ["import static java.util.Objects.requireNonNull;\n"], "2": ["import javax.annotation.CheckForNull;\n"], "3": ["@ElementTypesAreNonnullByDefault\n"], "4": ["      @CheckForNull Type ownerType, Class<?> rawType, Type... arguments) {\n"], "5": ["      @CheckForNull\n", "      @CheckForNull\n"], "6": ["    @CheckForNull\n", "    abstract Class<?> getOwnerType(Class<?> rawType);\n", "      // requireNonNull is safe because we're examining a type that's known to have a superclass.\n", "      ParameterizedType parameterizedType =\n", "          requireNonNull((ParameterizedType) subclass.getGenericSuperclass());\n"], "7": ["  @CheckForNull\n", "  static Type getComponentType(Type type) {\n", "    final AtomicReference<@Nullable Type> result = new AtomicReference<>();\n"], "8": ["  @CheckForNull\n", "  private static Type subtypeOfComponentType(Type[] bounds) {\n"], "9": ["    public boolean equals(@CheckForNull Object obj) {\n"], "10": ["    @CheckForNull private final Type ownerType;\n", "    ParameterizedTypeImpl(@CheckForNull Type ownerType, Class<?> rawType, Type[] typeArguments) {\n"], "11": ["    @CheckForNull\n"], "12": ["    public boolean equals(@CheckForNull Object other) {\n"], "13": ["    @CheckForNull\n", "    public Object invoke(Object proxy, Method method, @CheckForNull @Nullable Object[] args)\n", "        throws Throwable {\n"], "14": ["    public boolean equals(@CheckForNull Object obj) {\n"], "15": ["    public boolean equals(@CheckForNull Object obj) {\n"]}, "removed": {"4": ["      @Nullable Type ownerType, Class<?> rawType, Type... arguments) {\n"], "5": ["      @Nullable\n", "      @Nullable\n"], "6": ["    abstract @Nullable Class<?> getOwnerType(Class<?> rawType);\n", "      ParameterizedType parameterizedType = (ParameterizedType) subclass.getGenericSuperclass();\n"], "7": ["  static @Nullable Type getComponentType(Type type) {\n", "    final AtomicReference<Type> result = new AtomicReference<>();\n"], "8": ["  private static @Nullable Type subtypeOfComponentType(Type[] bounds) {\n"], "9": ["    public boolean equals(Object obj) {\n"], "10": ["    private final @Nullable Type ownerType;\n", "    ParameterizedTypeImpl(@Nullable Type ownerType, Class<?> rawType, Type[] typeArguments) {\n"], "12": ["    public boolean equals(Object other) {\n"], "13": ["    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n"], "14": ["    public boolean equals(Object obj) {\n"], "15": ["    public boolean equals(Object obj) {\n"]}, "added_lines": {"1": [20], "2": [48], "3": [56], "4": [92], "5": [112, 119], "6": [129, 130, 137, 138, 139], "7": [180, 181, 183], "8": [212, 213], "9": [255], "10": [268, 272], "11": [292], "12": [319], "13": [395, 396, 397], "14": [452], "15": [501]}, "removed_lines": {"4": [89], "5": [109, 116], "6": [126, 133], "7": [174, 176], "8": [205], "9": [247], "10": [260, 264], "12": [310], "13": [386], "14": [441], "15": [490]}}]}
