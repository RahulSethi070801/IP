[{"func":{"oldfunccode":"","newfunccode":"8149922bb0da0296e819b0c1508a455335e2876e/Codes_neg/Match_newfunccode_8149922bb0da0296e819b0c1508a455335e2876e_1.txt","newdoc":"","newJdoc":"8149922bb0da0296e819b0c1508a455335e2876e/Codes_neg/Match_newfuncnewJdoc_8149922bb0da0296e819b0c1508a455335e2876e_1.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v30.1.1/8149922bb0da0296e819b0c1508a455335e2876e/AbstractInvocationHandler_2","pathinproj":"guava/src/com/google/common/reflect/AbstractInvocationHandler.java","addlines":[65,66],"dellines":[],"addcode":["  @CheckForNull\n","  public final Object invoke(Object proxy, Method method, @CheckForNull @Nullable Object[] args)\n","  @CheckForNull\n","  public final Object invoke(Object proxy, Method method, @CheckForNull @Nullable Object[] args)\n"],"delcode":[],"methodSig":"public final Object invoke(Object proxy, Method method, @CheckForNull @Nullable Object[] args) throws Throwable"},"doc":{"oldfunccode":"8149922bb0da0296e819b0c1508a455335e2876e/Codes_neg/Match_olddocfunccode_8149922bb0da0296e819b0c1508a455335e2876e_1.txt","newfunccode":"8149922bb0da0296e819b0c1508a455335e2876e/Codes_neg/Match_newdocfunccode_8149922bb0da0296e819b0c1508a455335e2876e_1.txt","newdoc":" If there's any type error, we'd report now rather than later.\n","newJdoc":"8149922bb0da0296e819b0c1508a455335e2876e/Codes_neg/Match_newdocnewJdoc_8149922bb0da0296e819b0c1508a455335e2876e_1.txt","olddoc":" If there's any type error, we'd report now rather than later.\n","oldJdoc":"8149922bb0da0296e819b0c1508a455335e2876e/Codes_neg/Match_olddocJdoc_8149922bb0da0296e819b0c1508a455335e2876e_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v30.1.1/8149922bb0da0296e819b0c1508a455335e2876e/TypeToken","pathinproj":"android/guava/src/com/google/common/reflect/TypeToken.java","addlines":[225,226,227,228,229,230,231,232,233,234,235],"dellines":[],"addcode":["  /*\n","   * TODO(cpovirk): Is there any way for us to support TypeParameter instances for type parameters\n","   * that have nullable bounds? Unfortunately, if we change the parameter to TypeParameter<? extends\n","   * @Nullable X>, then users might pass a TypeParameter<Y>, where Y is a subtype of X, while still\n","   * passing a TypeToken<X>. This would be invalid. Maybe we could accept a TypeParameter<@PolyNull\n","   * X> if we support such a thing? It would be weird or misleading for users to be able to pass\n","   * `new TypeParameter<@Nullable T>() {}` and have it act as a plain `TypeParameter<T>`, but\n","   * hopefully no one would do that, anyway. See also the comment on TypeParameter itself.\n","   *\n","   * TODO(cpovirk): Elaborate on this / merge with other comment?\n","   */\n","  /*\n","   * TODO(cpovirk): Is there any way for us to support TypeParameter instances for type parameters\n","   * that have nullable bounds? Unfortunately, if we change the parameter to TypeParameter<? extends\n","   * @Nullable X>, then users might pass a TypeParameter<Y>, where Y is a subtype of X, while still\n","   * passing a TypeToken<X>. This would be invalid. Maybe we could accept a TypeParameter<@PolyNull\n","   * X> if we support such a thing? It would be weird or misleading for users to be able to pass\n","   * `new TypeParameter<@Nullable T>() {}` and have it act as a plain `TypeParameter<T>`, but\n","   * hopefully no one would do that, anyway. See also the comment on TypeParameter itself.\n","   *\n","   * TODO(cpovirk): Elaborate on this / merge with other comment?\n","   */\n"],"delcode":[],"methodSig":"public final TypeToken<T> where(TypeParameter<X> typeParam, TypeToken<X> typeArg)"},"id":1,"flag":1,"commit":"8149922bb0da0296e819b0c1508a455335e2876e"},{"func":{"oldfunccode":"8149922bb0da0296e819b0c1508a455335e2876e/Codes_neg/Match_oldfunccode_8149922bb0da0296e819b0c1508a455335e2876e_2.txt","newfunccode":"8149922bb0da0296e819b0c1508a455335e2876e/Codes_neg/Match_newfunccode_8149922bb0da0296e819b0c1508a455335e2876e_2.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v30.1.1/8149922bb0da0296e819b0c1508a455335e2876e/Types_2","pathinproj":"guava/src/com/google/common/reflect/Types.java","addlines":[112,119],"dellines":[116,109],"addcode":["      @CheckForNull\n","      @CheckForNull\n","      @CheckForNull\n","      @CheckForNull\n"],"delcode":["      @Nullable\n","      @Nullable\n","      @NullableDecl\n","      @NullableDecl\n"],"methodSig":" Class<?> getOwnerType(Class<?> rawType)"},"doc":{"oldfunccode":"8149922bb0da0296e819b0c1508a455335e2876e/Codes_neg/Match_olddocfunccode_8149922bb0da0296e819b0c1508a455335e2876e_2.txt","newfunccode":"8149922bb0da0296e819b0c1508a455335e2876e/Codes_neg/Match_newdocfunccode_8149922bb0da0296e819b0c1508a455335e2876e_2.txt","newdoc":" local and anonymous classes are prefixed with number (1,2,3...), anonymous classes are\n entirely numeric whereas local classes have the user supplied name as a suffix\n Since this is a top level class, its simple name is always the part after package name.\n","newJdoc":"8149922bb0da0296e819b0c1508a455335e2876e/Codes_neg/Match_newdocnewJdoc_8149922bb0da0296e819b0c1508a455335e2876e_2.txt","olddoc":" local and anonymous classes are prefixed with number (1,2,3...), anonymous classes are\n entirely numeric whereas local classes have the user supplied name as a suffix\n Since this is a top level class, its simple name is always the part after package name.\n","oldJdoc":"8149922bb0da0296e819b0c1508a455335e2876e/Codes_neg/Match_olddocJdoc_8149922bb0da0296e819b0c1508a455335e2876e_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v30.1.1/8149922bb0da0296e819b0c1508a455335e2876e/ClassPath_2","pathinproj":"guava/src/com/google/common/reflect/ClassPath.java","addlines":[320,316,318,319],"dellines":[310],"addcode":["     * <p>Behaves similarly to {@link Class#getSimpleName()} but does not require the class to be\n","     *\n","     * <p>But note that this class uses heuristics to identify the simple name. See a related\n","     * discussion in <a href=\"https://github.com/google/guava/issues/3349\">issue 3349</a>.\n","     * <p>Behaves similarly to {@link Class#getSimpleName()} but does not require the class to be\n","     *\n","     * <p>But note that this class uses heuristics to identify the simple name. See a related\n","     * discussion in <a href=\"https://github.com/google/guava/issues/3349\">issue 3349</a>.\n"],"delcode":["     * <p>Behaves identically to {@link Class#getSimpleName()} but does not require the class to be\n","     * <p>Behaves identically to {@link Class#getSimpleName()} but does not require the class to be\n"],"methodSig":"public String getSimpleName()"},"id":1,"flag":1,"commit":"8149922bb0da0296e819b0c1508a455335e2876e"}]