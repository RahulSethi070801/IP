com.google.common.collect.TreeRangeMap
remove
public void remove(Range range)
Range
void
com.google.common.collect.TreeRangeMap
getEntry
public Entry<Range<K>, V> getEntry(K key)
K
Entry
com.google.common.collect.RangeMap
merge
void merge(Range<K> range, @Nullable V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)
Range,V,BiFunction
void
com.google.common.collect.TreeRangeMap
putAll
public void putAll(RangeMap rangeMap)
RangeMap
void
com.google.common.collect.TreeRangeMap
remove
public boolean remove(@Nullable Object o)
Object
boolean
com.google.common.collect.ImmutableRangeMap
merge
public final void merge(Range<K> range, @Nullable V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)
Range,V,BiFunction
void
com.google.common.collect.TreeRangeMap
emptySubRangeMap
private RangeMap<K, V> emptySubRangeMap()
empty
RangeMap
com.google.common.collect.TreeRangeMap
get
public Object get(Comparable key)
Comparable
Object
com.google.common.collect.TreeRangeMap
computeNext
protected Entry<Range<K>, V> computeNext()
empty
Entry
com.google.common.collect.TreeRangeMap
putAll
public void putAll(RangeMap<Comparable<?>, Object> rangeMap)
RangeMap
void
com.google.common.collect.RangeMap
merge
void merge(Range<K> range, @CheckForNull V value, BiFunction<? super V, ? super @Nullable V, ? extends @Nullable V> remappingFunction)
Range,V,BiFunction
void
com.google.common.collect.TreeRangeMap
putCoalescing
public void putCoalescing(Range<Comparable<?>> range, Object value)
Range,Object
void
com.google.common.collect.TreeRangeMap$AsMapOfRanges
containsKey
public boolean containsKey(@CheckForNull Object key)
Object
boolean
com.google.common.collect.TreeRangeMap
merge
public void merge(Range<K> range, @Nullable V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)
Range,V,BiFunction
void
com.google.common.collect.ImmutableRangeMap
merge
public final void merge(Range<K> range, @CheckForNull V value, BiFunction<? super V, ? super @Nullable V, ? extends @Nullable V> remappingFunction)
Range,V,BiFunction
void
com.google.common.collect.TreeRangeMap
merge
public void merge(Range range, @Nullable Object value, BiFunction remappingFunction)
Range,Object,BiFunction
void
com.google.common.collect.TreeRangeMap
asDescendingMapOfRanges
public Map<Range<Comparable<?>>, Object> asDescendingMapOfRanges()
empty
Map
com.google.common.collect.TreeRangeMap
remove
public boolean remove(@CheckForNull Object o)
Object
boolean
com.google.common.collect.TreeRangeMap
span
public Range<Comparable<?>> span()
empty
Range
com.google.common.collect.ImmutableRangeMap
equals
public boolean equals(@CheckForNull Object o)
Object
boolean
com.google.common.collect.TreeRangeMap
subRangeMap
public RangeMap<Comparable<?>, Object> subRangeMap(Range<Comparable<?>> range)
Range
RangeMap
com.google.common.collect.TreeRangeMap$SubRangeMapAsMap
get
public V get(Object key)
Object
V
com.google.common.collect.TreeRangeMap
subRangeMap
public RangeMap subRangeMap(Range range)
Range
RangeMap
com.google.common.collect.RangeMap
getEntry
Entry<Range<K>, V> getEntry(K key)
K
Entry
com.google.common.collect.ImmutableRangeMap
toImmutableRangeMap
public static Collector<T, ?, ImmutableRangeMap<K, V>> toImmutableRangeMap(Function<? super T, Range<K>> keyFunction, Function<? super T, ? extends V> valueFunction)
Function,Function
Collector
com.google.common.collect.RangeMap
get
V get(K key)
K
V
com.google.common.collect.TreeRangeMap$AsMapOfRanges
containsKey
public boolean containsKey(@Nullable Object key)
Object
boolean
com.google.common.collect.TreeRangeMap
span
public Range span()
empty
Range
com.google.common.collect.TreeRangeMap$SubRangeMapAsMap
containsKey
public boolean containsKey(Object key)
Object
boolean
com.google.common.collect.TreeRangeMap
get
public Object get(Comparable<?> key)
Comparable
Object
com.google.common.collect.TreeRangeMap
put
public void put(Range<Comparable<?>> range, Object value)
Range,Object
void
com.google.common.collect.RangeMap
equals
boolean equals(@Nullable Object o)
Object
boolean
com.google.common.collect.TreeRangeMap$AsMapOfRanges
get
public V get(@CheckForNull Object key)
Object
V
com.google.common.collect.TreeRangeMap$SubRangeMapAsMap
remove
public V remove(@CheckForNull Object key)
Object
V
com.google.common.collect.TreeRangeMap
putCoalescing
public void putCoalescing(Range range, Object value)
Range,Object
void
com.google.common.collect.TreeRangeMap
span
public Range<K> span()
empty
Range
com.google.common.collect.TreeRangeMap
asMapOfRanges
public Map<Range<Comparable<?>>, Object> asMapOfRanges()
empty
Map
com.google.common.collect.TreeRangeMap
remove
public void remove(Range<Comparable<?>> range)
Range
void
com.google.common.collect.TreeRangeMap
merge
public void merge(Range<Comparable<?>> range, @CheckForNull Object value, BiFunction<? super Object, ? super Object, ? extends Object> remappingFunction)
Range,Object,BiFunction
void
com.google.common.collect.TreeRangeMap$AsMapOfRanges
get
public V get(@Nullable Object key)
Object
V
com.google.common.collect.TreeRangeMap
asDescendingMapOfRanges
public Map<Range, Object> asDescendingMapOfRanges()
empty
Map
com.google.common.collect.TreeRangeMap
getEntry
public Entry<Range<Comparable<?>>, Object> getEntry(Comparable<?> key)
Comparable
Entry
com.google.common.collect.RangeMap
equals
boolean equals(@CheckForNull Object o)
Object
boolean
com.google.common.collect.TreeRangeMap
put
public void put(Range range, Object value)
Range,Object
void
com.google.common.collect.TreeRangeMap$SubRangeMapAsMap
remove
public V remove(Object key)
Object
V
com.google.common.collect.TreeRangeMap
getEntry
public Entry<Range, Object> getEntry(Comparable key)
Comparable
Entry
com.google.common.collect.TreeRangeMap
coalesce
private static Range<K> coalesce(Range<K> range, V value, @CheckForNull Entry<Cut<K>, RangeMapEntry<K, V>> entry)
Range,V,Entry
Range
com.google.common.collect.TreeRangeMap
coalesce
private static Range<K> coalesce(Range<K> range, V value, @Nullable Entry<Cut<K>, RangeMapEntry<K, V>> entry)
Range,V,Entry
Range
com.google.common.collect.TreeRangeMap
asMapOfRanges
public Map<Range, Object> asMapOfRanges()
empty
Map
com.google.common.collect.TreeRangeMap
get
public V get(K key)
K
V
com.google.common.collect.TreeRangeMap
merge
public void merge(Range<K> range, @CheckForNull V value, BiFunction<? super V, ? super @Nullable V, ? extends @Nullable V> remappingFunction)
Range,V,BiFunction
void
com.google.common.collect.ImmutableRangeMap
equals
public boolean equals(@Nullable Object o)
Object
boolean
com.google.common.collect.ContiguousSet
create
public static ContiguousSet<C> create(Range<C> range, DiscreteDomain<C> domain)
Range,DiscreteDomain
ContiguousSet
