{
    "addition": {
        "27": "import javax.annotation.CheckForNull;\n",
        "43": "@ElementTypesAreNonnullByDefault\n",
        "45": "  /*\n",
        "46": "   * TODO(cpovirk): These docs sometimes say \"map\" and sometimes say \"range map.\" Pick one, or at\n",
        "47": "   * least decide on a policy for when to use which.\n",
        "48": "   */\n",
        "49": "\n",
        "56": "  @CheckForNull\n",
        "63": "  @CheckForNull\n",
        "121": "   * Merges a value into a part of the map by applying a remapping function.\n",
        "123": "   * <p>If any parts of the range are already present in this map, those parts are mapped to new\n",
        "124": "   * values by applying the remapping function. The remapping function accepts the map's existing\n",
        "125": "   * value for that part of the range and the given value. It returns the value to be associated\n",
        "126": "   * with that part of the map, or it returns {@code null} to clear that part of the map.\n",
        "128": "   * <p>Any parts of the range not already present in this map are mapped to the specified value,\n",
        "129": "   * unless the value is {@code null}.\n",
        "131": "   * <p>Any existing entry spanning either range boundary may be split at the boundary, even if the\n",
        "132": "   * merge does not affect its value. For example, if {@code rangeMap} had one entry {@code [1, 5]\n",
        "133": "   * => 3} then {@code rangeMap.merge(Range.closed(0,2), 3, Math::max)} could yield a map with the\n",
        "134": "   * entries {@code [0, 1) => 3, [1, 2] => 3, (2, 5] => 3}.\n",
        "140": "      @CheckForNull V value,\n",
        "141": "      BiFunction<? super V, ? super @Nullable V, ? extends @Nullable V> remappingFunction);\n",
        "180": "  // TODO(cpovirk): Consider documenting that IAE on the various methods that can throw it.\n",
        "188": "  boolean equals(@CheckForNull Object o);\n"
    },
    "removed": {
        "49": "  @Nullable\n",
        "56": "  @Nullable\n",
        "114": "   * Merges a value into the map over a range by applying a remapping function.\n",
        "116": "   * <p>If any parts of the range are already present in this range map, those parts are mapped to\n",
        "117": "   * new values by applying the remapping function. Any parts of the range not already present in\n",
        "118": "   * this range map are mapped to the specified value, unless the value is {@code null}.\n",
        "120": "   * <p>Any existing map entry spanning either range boundary may be split at the boundary, even if\n",
        "121": "   * the merge does not affect its value.\n",
        "123": "   * <p>For example, if {@code rangeMap} had one entry {@code [1, 5] => 3} then {@code\n",
        "124": "   * rangeMap.merge(Range.closed(0,2), 3, Math::max)} could yield a range map with the entries\n",
        "125": "   * {@code [0, 1) => 3, [1, 2] => 3, (2, 5] => 3}.\n",
        "131": "      @Nullable V value,\n",
        "132": "      BiFunction<? super V, ? super V, ? extends V> remappingFunction);\n",
        "178": "  boolean equals(@Nullable Object o);\n"
    }
}