{
    "addition": {
        "24": "import static java.util.Objects.requireNonNull;\n",
        "41": "import javax.annotation.CheckForNull;\n",
        "54": "@ElementTypesAreNonnullByDefault\n",
        "105": "  @CheckForNull\n",
        "112": "  @CheckForNull\n",
        "160": "      Range<K> range, V value, @CheckForNull Entry<Cut<K>, RangeMapEntry<K, V>> entry) {\n",
        "185": "    // Either both are null or neither is, but we check both to satisfy the nullness checker.\n",
        "186": "    if (firstEntry == null || lastEntry == null) {\n",
        "267": "    public boolean containsKey(@CheckForNull Object key) {\n",
        "272": "    @CheckForNull\n",
        "273": "    public V get(@CheckForNull Object key) {\n",
        "306": "    return (RangeMap<K, V>) (RangeMap<?, ?>) EMPTY_SUB_RANGE_MAP;\n",
        "309": "  @SuppressWarnings(\"ConstantCaseForConstants\") // This RangeMap is immutable.\n",
        "310": "  private static final RangeMap<Comparable<?>, Object> EMPTY_SUB_RANGE_MAP =\n",
        "311": "      new RangeMap<Comparable<?>, Object>() {\n",
        "313": "        @CheckForNull\n",
        "314": "        public Object get(Comparable<?> key) {\n",
        "319": "        @CheckForNull\n",
        "320": "        public Entry<Range<Comparable<?>>, Object> getEntry(Comparable<?> key) {\n",
        "325": "        public Range<Comparable<?>> span() {\n",
        "330": "        public void put(Range<Comparable<?>> range, Object value) {\n",
        "337": "        public void putCoalescing(Range<Comparable<?>> range, Object value) {\n",
        "344": "        public void putAll(RangeMap<Comparable<?>, Object> rangeMap) {\n",
        "355": "        public void remove(Range<Comparable<?>> range) {\n",
        "360": "        public Map<Range<Comparable<?>>, Object> asMapOfRanges() {\n",
        "365": "        public Map<Range<Comparable<?>>, Object> asDescendingMapOfRanges() {\n",
        "370": "        public RangeMap<Comparable<?>, Object> subRangeMap(Range<Comparable<?>> range) {\n",
        "385": "    @CheckForNull\n",
        "391": "    @CheckForNull\n",
        "507": "            @CheckForNull\n",
        "524": "    public boolean equals(@CheckForNull Object o) {\n",
        "545": "      public boolean containsKey(@CheckForNull Object key) {\n",
        "550": "      @CheckForNull\n",
        "551": "      public V get(@CheckForNull Object key) {\n",
        "584": "      @CheckForNull\n",
        "585": "      public V remove(@CheckForNull Object key) {\n",
        "588": "          // it's definitely in the map, so the cast and requireNonNull are safe\n",
        "589": "          @SuppressWarnings(\"unchecked\")\n",
        "590": "          Range<K> range = (Range<K>) requireNonNull(key);\n",
        "619": "          public boolean remove(@CheckForNull Object o) {\n",
        "672": "          @CheckForNull\n",
        "706": "  public boolean equals(@CheckForNull Object o) {\n"
    },
    "removed": {
        "40": "import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n",
        "103": "  @NullableDecl\n",
        "110": "  @NullableDecl\n",
        "158": "      Range<K> range, V value, @NullableDecl Entry<Cut<K>, RangeMapEntry<K, V>> entry) {\n",
        "183": "    if (firstEntry == null) {\n",
        "264": "    public boolean containsKey(@NullableDecl Object key) {\n",
        "269": "    public V get(@NullableDecl Object key) {\n",
        "302": "    return EMPTY_SUB_RANGE_MAP;\n",
        "305": "  private static final RangeMap EMPTY_SUB_RANGE_MAP =\n",
        "306": "      new RangeMap() {\n",
        "308": "        @NullableDecl\n",
        "309": "        public Object get(Comparable key) {\n",
        "314": "        @NullableDecl\n",
        "315": "        public Entry<Range, Object> getEntry(Comparable key) {\n",
        "320": "        public Range span() {\n",
        "325": "        public void put(Range range, Object value) {\n",
        "332": "        public void putCoalescing(Range range, Object value) {\n",
        "339": "        public void putAll(RangeMap rangeMap) {\n",
        "350": "        public void remove(Range range) {\n",
        "355": "        public Map<Range, Object> asMapOfRanges() {\n",
        "360": "        public Map<Range, Object> asDescendingMapOfRanges() {\n",
        "365": "        public RangeMap subRangeMap(Range range) {\n",
        "380": "    @NullableDecl\n",
        "386": "    @NullableDecl\n",
        "518": "    public boolean equals(@NullableDecl Object o) {\n",
        "539": "      public boolean containsKey(Object key) {\n",
        "544": "      public V get(Object key) {\n",
        "577": "      public V remove(Object key) {\n",
        "580": "          @SuppressWarnings(\"unchecked\") // it's definitely in the map, so safe\n",
        "581": "          Range<K> range = (Range<K>) key;\n",
        "610": "          public boolean remove(@NullableDecl Object o) {\n",
        "696": "  public boolean equals(@NullableDecl Object o) {\n"
    }
}