{
    "addition": {
        "24": "import static java.util.Objects.requireNonNull;\n",
        "42": "import javax.annotation.CheckForNull;\n",
        "56": "@ElementTypesAreNonnullByDefault\n",
        "107": "  @CheckForNull\n",
        "108": "  public V get(K key) {\n",
        "114": "  @CheckForNull\n",
        "115": "  public Entry<Range<K>, V> getEntry(K key) {\n",
        "162": "      Range<K> range, V value, @CheckForNull Entry<Cut<K>, RangeMapEntry<K, V>> entry) {\n",
        "187": "    // Either both are null or neither is, but we check both to satisfy the nullness checker.\n",
        "188": "    if (firstEntry == null || lastEntry == null) {\n",
        "271": "      @CheckForNull V value,\n",
        "272": "      BiFunction<? super V, ? super @Nullable V, ? extends @Nullable V> remappingFunction) {\n",
        "343": "    public boolean containsKey(@CheckForNull Object key) {\n",
        "348": "    @CheckForNull\n",
        "349": "    public V get(@CheckForNull Object key) {\n",
        "382": "    return (RangeMap<K, V>) (RangeMap<?, ?>) EMPTY_SUB_RANGE_MAP;\n",
        "385": "  @SuppressWarnings(\"ConstantCaseForConstants\") // This RangeMap is immutable.\n",
        "386": "  private static final RangeMap<Comparable<?>, Object> EMPTY_SUB_RANGE_MAP =\n",
        "387": "      new RangeMap<Comparable<?>, Object>() {\n",
        "389": "        @CheckForNull\n",
        "390": "        public Object get(Comparable<?> key) {\n",
        "395": "        @CheckForNull\n",
        "396": "        public Entry<Range<Comparable<?>>, Object> getEntry(Comparable<?> key) {\n",
        "401": "        public Range<Comparable<?>> span() {\n",
        "406": "        public void put(Range<Comparable<?>> range, Object value) {\n",
        "413": "        public void putCoalescing(Range<Comparable<?>> range, Object value) {\n",
        "420": "        public void putAll(RangeMap<Comparable<?>, Object> rangeMap) {\n",
        "431": "        public void remove(Range<Comparable<?>> range) {\n",
        "436": "        public void merge(\n",
        "437": "            Range<Comparable<?>> range,\n",
        "438": "            @CheckForNull Object value,\n",
        "439": "            BiFunction<? super Object, ? super Object, ? extends Object> remappingFunction) {\n",
        "446": "        public Map<Range<Comparable<?>>, Object> asMapOfRanges() {\n",
        "451": "        public Map<Range<Comparable<?>>, Object> asDescendingMapOfRanges() {\n",
        "456": "        public RangeMap<Comparable<?>, Object> subRangeMap(Range<Comparable<?>> range) {\n",
        "471": "    @CheckForNull\n",
        "472": "    public V get(K key) {\n",
        "477": "    @CheckForNull\n",
        "478": "    public Entry<Range<K>, V> getEntry(K key) {\n",
        "564": "        @CheckForNull V value,\n",
        "565": "        BiFunction<? super V, ? super @Nullable V, ? extends @Nullable V> remappingFunction) {\n",
        "606": "            @CheckForNull\n",
        "623": "    public boolean equals(@CheckForNull Object o) {\n",
        "644": "      public boolean containsKey(@CheckForNull Object key) {\n",
        "649": "      @CheckForNull\n",
        "650": "      public V get(@CheckForNull Object key) {\n",
        "683": "      @CheckForNull\n",
        "684": "      public V remove(@CheckForNull Object key) {\n",
        "687": "          // it's definitely in the map, so the cast and requireNonNull are safe\n",
        "688": "          @SuppressWarnings(\"unchecked\")\n",
        "689": "          Range<K> range = (Range<K>) requireNonNull(key);\n",
        "718": "          public boolean remove(@CheckForNull Object o) {\n",
        "771": "          @CheckForNull\n",
        "805": "  public boolean equals(@CheckForNull Object o) {\n"
    },
    "removed": {
        "104": "  public @Nullable V get(K key) {\n",
        "110": "  public @Nullable Entry<Range<K>, V> getEntry(K key) {\n",
        "157": "      Range<K> range, V value, @Nullable Entry<Cut<K>, RangeMapEntry<K, V>> entry) {\n",
        "182": "    if (firstEntry == null) {\n",
        "265": "      @Nullable V value,\n",
        "266": "      BiFunction<? super V, ? super V, ? extends V> remappingFunction) {\n",
        "337": "    public boolean containsKey(@Nullable Object key) {\n",
        "342": "    public V get(@Nullable Object key) {\n",
        "375": "    return EMPTY_SUB_RANGE_MAP;\n",
        "378": "  private static final RangeMap EMPTY_SUB_RANGE_MAP =\n",
        "379": "      new RangeMap() {\n",
        "381": "        public @Nullable Object get(Comparable key) {\n",
        "386": "        public @Nullable Entry<Range, Object> getEntry(Comparable key) {\n",
        "391": "        public Range span() {\n",
        "396": "        public void put(Range range, Object value) {\n",
        "403": "        public void putCoalescing(Range range, Object value) {\n",
        "410": "        public void putAll(RangeMap rangeMap) {\n",
        "421": "        public void remove(Range range) {\n",
        "426": "        @SuppressWarnings(\"rawtypes\") // necessary for static EMPTY_SUB_RANGE_MAP instance\n",
        "427": "        public void merge(Range range, @Nullable Object value, BiFunction remappingFunction) {\n",
        "434": "        public Map<Range, Object> asMapOfRanges() {\n",
        "439": "        public Map<Range, Object> asDescendingMapOfRanges() {\n",
        "444": "        public RangeMap subRangeMap(Range range) {\n",
        "459": "    public @Nullable V get(K key) {\n",
        "464": "    public @Nullable Entry<Range<K>, V> getEntry(K key) {\n",
        "550": "        @Nullable V value,\n",
        "551": "        BiFunction<? super V, ? super V, ? extends V> remappingFunction) {\n",
        "608": "    public boolean equals(@Nullable Object o) {\n",
        "629": "      public boolean containsKey(Object key) {\n",
        "634": "      public V get(Object key) {\n",
        "667": "      public V remove(Object key) {\n",
        "670": "          @SuppressWarnings(\"unchecked\") // it's definitely in the map, so safe\n",
        "671": "          Range<K> range = (Range<K>) key;\n",
        "700": "          public boolean remove(@Nullable Object o) {\n",
        "786": "  public boolean equals(@Nullable Object o) {\n"
    }
}