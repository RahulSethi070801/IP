{
    "addition": {
        "22": "import static com.google.common.collect.NullnessCasts.uncheckedCastNullableTToT;\n",
        "23": "import static java.util.Objects.requireNonNull;\n",
        "38": "import javax.annotation.CheckForNull;\n",
        "39": "import org.checkerframework.checker.nullness.qual.Nullable;\n",
        "60": "@ElementTypesAreNonnullByDefault\n",
        "61": "public final class TreeMultiset<E extends @Nullable Object> extends AbstractSortedMultiset<E>\n",
        "62": "    implements Serializable {\n",
        "92": "  public static <E extends @Nullable Object> TreeMultiset<E> create(\n",
        "93": "      @CheckForNull Comparator<? super E> comparator) {\n",
        "128": "    this.header = new AvlNode<>();\n",
        "142": "      long treeAggregate(@CheckForNull AvlNode<?> root) {\n",
        "153": "      long treeAggregate(@CheckForNull AvlNode<?> root) {\n",
        "160": "    abstract long treeAggregate(@CheckForNull AvlNode<?> root);\n",
        "175": "  private long aggregateBelowRange(Aggregate aggr, @CheckForNull AvlNode<E> node) {\n",
        "179": "    // The cast is safe because we call this method only if hasLowerBound().\n",
        "180": "    int cmp =\n",
        "181": "        comparator()\n",
        "182": "            .compare(uncheckedCastNullableTToT(range.getLowerEndpoint()), node.getElement());\n",
        "201": "  private long aggregateAboveRange(Aggregate aggr, @CheckForNull AvlNode<E> node) {\n",
        "205": "    // The cast is safe because we call this method only if hasUpperBound().\n",
        "206": "    int cmp =\n",
        "207": "        comparator()\n",
        "208": "            .compare(uncheckedCastNullableTToT(range.getUpperEndpoint()), node.getElement());\n",
        "237": "  static int distinctElements(@CheckForNull AvlNode<?> node) {\n",
        "242": "  public int count(@CheckForNull Object element) {\n",
        "258": "  public int add(@ParametricNullness E element, int occurrences) {\n",
        "280": "  public int remove(@CheckForNull Object element, int occurrences) {\n",
        "304": "  public int setCount(@ParametricNullness E element, int count) {\n",
        "326": "  public boolean setCount(@ParametricNullness E element, int oldCount, int newCount) {\n",
        "352": "      for (AvlNode<E> current = header.succ(); current != header; ) {\n",
        "353": "        AvlNode<E> next = current.succ();\n",
        "375": "      @ParametricNullness\n",
        "393": "  @CheckForNull\n",
        "401": "      // The cast is safe because of the hasLowerBound check.\n",
        "402": "      E endpoint = uncheckedCastNullableTToT(range.getLowerEndpoint());\n",
        "403": "      node = root.ceiling(comparator(), endpoint);\n",
        "409": "        node = node.succ();\n",
        "412": "      node = header.succ();\n",
        "417": "  @CheckForNull\n",
        "425": "      // The cast is safe because of the hasUpperBound check.\n",
        "426": "      E endpoint = uncheckedCastNullableTToT(range.getUpperEndpoint());\n",
        "427": "      node = root.floor(comparator(), endpoint);\n",
        "433": "        node = node.pred();\n",
        "436": "      node = header.pred();\n",
        "449": "      @CheckForNull AvlNode<E> current = firstNode();\n",
        "450": "      @CheckForNull Entry<E> prevEntry;\n",
        "469": "        // requireNonNull is safe because current is only nulled out after iteration is complete.\n",
        "470": "        Entry<E> result = wrapEntry(requireNonNull(current));\n",
        "472": "        if (current.succ() == header) {\n",
        "475": "          current = current.succ();\n",
        "482": "        checkState(prevEntry != null, \"no calls to next() since the last call to remove()\");\n",
        "492": "      @CheckForNull AvlNode<E> current = lastNode();\n",
        "493": "      @CheckForNull Entry<E> prevEntry = null;\n",
        "512": "        // requireNonNull is safe because current is only nulled out after iteration is complete.\n",
        "513": "        requireNonNull(current);\n",
        "516": "        if (current.pred() == header) {\n",
        "519": "          current = current.pred();\n",
        "526": "        checkState(prevEntry != null, \"no calls to next() since the last call to remove()\");\n",
        "539": "  public SortedMultiset<E> headMultiset(@ParametricNullness E upperBound, BoundType boundType) {\n",
        "547": "  public SortedMultiset<E> tailMultiset(@ParametricNullness E lowerBound, BoundType boundType) {\n",
        "555": "    @CheckForNull private T value;\n",
        "557": "    @CheckForNull\n",
        "562": "    public void checkAndSet(@CheckForNull T expected, @CheckForNull T newValue) {\n",
        "574": "  private static final class AvlNode<E extends @Nullable Object> {\n",
        "575": "    /*\n",
        "576": "     * For \"normal\" nodes, the type of this field is `E`, not `@Nullable E` (though note that E is a\n",
        "577": "     * type that can include null, as in a TreeMultiset<@Nullable String>).\n",
        "578": "     *\n",
        "579": "     * For the header node, though, this field contains `null`, regardless of the type of the\n",
        "580": "     * multiset.\n",
        "581": "     *\n",
        "582": "     * Most code that operates on an AvlNode never operates on the header node. Such code can access\n",
        "583": "     * the elem field without a null check by calling getElement().\n",
        "584": "     */\n",
        "585": "    @CheckForNull private final E elem;\n",
        "593": "    @CheckForNull private AvlNode<E> left;\n",
        "594": "    @CheckForNull private AvlNode<E> right;\n",
        "595": "    /*\n",
        "596": "     * pred and succ are nullable after construction, but we always call successor() to initialize\n",
        "597": "     * them immediately thereafter.\n",
        "598": "     *\n",
        "599": "     * They may be subsequently nulled out by TreeMultiset.clear(). I think that the only place that\n",
        "600": "     * we can reference a node whose fields have been cleared is inside the iterator (and presumably\n",
        "601": "     * only under concurrent modification).\n",
        "602": "     *\n",
        "603": "     * To access these fields when you know that they are not null, call the pred() and succ()\n",
        "604": "     * methods, which perform null checks before returning the fields.\n",
        "605": "     */\n",
        "606": "    @CheckForNull private AvlNode<E> pred;\n",
        "607": "    @CheckForNull private AvlNode<E> succ;\n",
        "608": "\n",
        "609": "    AvlNode(@ParametricNullness E elem, int elemCount) {\n",
        "620": "    /** Constructor for the header node. */\n",
        "621": "    AvlNode() {\n",
        "622": "      this.elem = null;\n",
        "623": "      this.elemCount = 1;\n",
        "624": "    }\n",
        "625": "\n",
        "626": "    // For discussion of pred() and succ(), see the comment on the pred and succ fields.\n",
        "627": "\n",
        "628": "    private AvlNode<E> pred() {\n",
        "629": "      return requireNonNull(pred);\n",
        "630": "    }\n",
        "631": "\n",
        "632": "    private AvlNode<E> succ() {\n",
        "633": "      return requireNonNull(succ);\n",
        "634": "    }\n",
        "635": "\n",
        "636": "    int count(Comparator<? super E> comparator, @ParametricNullness E e) {\n",
        "637": "      int cmp = comparator.compare(e, getElement());\n",
        "647": "    private AvlNode<E> addRightChild(@ParametricNullness E e, int count) {\n",
        "649": "      successor(this, right, succ());\n",
        "656": "    private AvlNode<E> addLeftChild(@ParametricNullness E e, int count) {\n",
        "658": "      successor(pred(), left, this);\n",
        "665": "    AvlNode<E> add(\n",
        "666": "        Comparator<? super E> comparator, @ParametricNullness E e, int count, int[] result) {\n",
        "671": "      int cmp = comparator.compare(e, getElement());\n",
        "711": "    @CheckForNull\n",
        "713": "        Comparator<? super E> comparator, @ParametricNullness E e, int count, int[] result) {\n",
        "714": "      int cmp = comparator.compare(e, getElement());\n",
        "764": "    @CheckForNull\n",
        "766": "        Comparator<? super E> comparator, @ParametricNullness E e, int count, int[] result) {\n",
        "767": "      int cmp = comparator.compare(e, getElement());\n",
        "814": "    @CheckForNull\n",
        "817": "        @ParametricNullness E e,\n",
        "821": "      int cmp = comparator.compare(e, getElement());\n",
        "878": "    @CheckForNull\n",
        "882": "      successor(pred(), succ());\n",
        "888": "        AvlNode<E> newTop = pred();\n",
        "896": "        AvlNode<E> newTop = succ();\n",
        "906": "    @CheckForNull\n",
        "919": "    @CheckForNull\n",
        "949": "          // requireNonNull is safe because right must exist in order to get a negative factor.\n",
        "950": "          requireNonNull(right);\n",
        "956": "          // requireNonNull is safe because left must exist in order to get a positive factor.\n",
        "957": "          requireNonNull(left);\n",
        "996": "    private static long totalCount(@CheckForNull AvlNode<?> node) {\n",
        "1000": "    private static int height(@CheckForNull AvlNode<?> node) {\n",
        "1004": "    @CheckForNull\n",
        "1005": "    private AvlNode<E> ceiling(Comparator<? super E> comparator, @ParametricNullness E e) {\n",
        "1006": "      int cmp = comparator.compare(e, getElement());\n",
        "1016": "    @CheckForNull\n",
        "1017": "    private AvlNode<E> floor(Comparator<? super E> comparator, @ParametricNullness E e) {\n",
        "1018": "      int cmp = comparator.compare(e, getElement());\n",
        "1028": "    @ParametricNullness\n",
        "1030": "      // For discussion of this cast, see the comment on the elem field.\n",
        "1031": "      return uncheckedCastNullableTToT(elem);\n",
        "1044": "  private static <T extends @Nullable Object> void successor(AvlNode<T> a, AvlNode<T> b) {\n",
        "1049": "  private static <T extends @Nullable Object> void successor(\n",
        "1050": "      AvlNode<T> a, AvlNode<T> b, AvlNode<T> c) {\n",
        "1083": "    AvlNode<E> header = new AvlNode<>();\n"
    },
    "removed": {
        "22": "import static com.google.common.collect.CollectPreconditions.checkRemove;\n",
        "37": "import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n",
        "58": "public final class TreeMultiset<E> extends AbstractSortedMultiset<E> implements Serializable {\n",
        "88": "  public static <E> TreeMultiset<E> create(@NullableDecl Comparator<? super E> comparator) {\n",
        "123": "    this.header = new AvlNode<E>(null, 1);\n",
        "137": "      long treeAggregate(@NullableDecl AvlNode<?> root) {\n",
        "148": "      long treeAggregate(@NullableDecl AvlNode<?> root) {\n",
        "155": "    abstract long treeAggregate(@NullableDecl AvlNode<?> root);\n",
        "170": "  private long aggregateBelowRange(Aggregate aggr, @NullableDecl AvlNode<E> node) {\n",
        "174": "    int cmp = comparator().compare(range.getLowerEndpoint(), node.elem);\n",
        "193": "  private long aggregateAboveRange(Aggregate aggr, @NullableDecl AvlNode<E> node) {\n",
        "197": "    int cmp = comparator().compare(range.getUpperEndpoint(), node.elem);\n",
        "226": "  static int distinctElements(@NullableDecl AvlNode<?> node) {\n",
        "231": "  public int count(@NullableDecl Object element) {\n",
        "247": "  public int add(@NullableDecl E element, int occurrences) {\n",
        "269": "  public int remove(@NullableDecl Object element, int occurrences) {\n",
        "293": "  public int setCount(@NullableDecl E element, int count) {\n",
        "315": "  public boolean setCount(@NullableDecl E element, int oldCount, int newCount) {\n",
        "341": "      for (AvlNode<E> current = header.succ; current != header; ) {\n",
        "342": "        AvlNode<E> next = current.succ;\n",
        "381": "  @NullableDecl\n",
        "389": "      E endpoint = range.getLowerEndpoint();\n",
        "390": "      node = rootReference.get().ceiling(comparator(), endpoint);\n",
        "396": "        node = node.succ;\n",
        "399": "      node = header.succ;\n",
        "404": "  @NullableDecl\n",
        "412": "      E endpoint = range.getUpperEndpoint();\n",
        "413": "      node = rootReference.get().floor(comparator(), endpoint);\n",
        "419": "        node = node.pred;\n",
        "422": "      node = header.pred;\n",
        "435": "      AvlNode<E> current = firstNode();\n",
        "436": "      @NullableDecl Entry<E> prevEntry;\n",
        "455": "        Entry<E> result = wrapEntry(current);\n",
        "457": "        if (current.succ == header) {\n",
        "460": "          current = current.succ;\n",
        "467": "        checkRemove(prevEntry != null);\n",
        "477": "      AvlNode<E> current = lastNode();\n",
        "478": "      Entry<E> prevEntry = null;\n",
        "499": "        if (current.pred == header) {\n",
        "502": "          current = current.pred;\n",
        "509": "        checkRemove(prevEntry != null);\n",
        "522": "  public SortedMultiset<E> headMultiset(@NullableDecl E upperBound, BoundType boundType) {\n",
        "530": "  public SortedMultiset<E> tailMultiset(@NullableDecl E lowerBound, BoundType boundType) {\n",
        "538": "    @NullableDecl private T value;\n",
        "540": "    @NullableDecl\n",
        "545": "    public void checkAndSet(@NullableDecl T expected, T newValue) {\n",
        "557": "  private static final class AvlNode<E> {\n",
        "558": "    @NullableDecl private final E elem;\n",
        "566": "    @NullableDecl private AvlNode<E> left;\n",
        "567": "    @NullableDecl private AvlNode<E> right;\n",
        "568": "    @NullableDecl private AvlNode<E> pred;\n",
        "569": "    @NullableDecl private AvlNode<E> succ;\n",
        "570": "\n",
        "571": "    AvlNode(@NullableDecl E elem, int elemCount) {\n",
        "582": "    public int count(Comparator<? super E> comparator, E e) {\n",
        "583": "      int cmp = comparator.compare(e, elem);\n",
        "593": "    private AvlNode<E> addRightChild(E e, int count) {\n",
        "595": "      successor(this, right, succ);\n",
        "602": "    private AvlNode<E> addLeftChild(E e, int count) {\n",
        "604": "      successor(pred, left, this);\n",
        "611": "    AvlNode<E> add(Comparator<? super E> comparator, @NullableDecl E e, int count, int[] result) {\n",
        "616": "      int cmp = comparator.compare(e, elem);\n",
        "657": "        Comparator<? super E> comparator, @NullableDecl E e, int count, int[] result) {\n",
        "658": "      int cmp = comparator.compare(e, elem);\n",
        "709": "        Comparator<? super E> comparator, @NullableDecl E e, int count, int[] result) {\n",
        "710": "      int cmp = comparator.compare(e, elem);\n",
        "759": "        @NullableDecl E e,\n",
        "763": "      int cmp = comparator.compare(e, elem);\n",
        "823": "      successor(pred, succ);\n",
        "829": "        AvlNode<E> newTop = pred;\n",
        "837": "        AvlNode<E> newTop = succ;\n",
        "931": "    private static long totalCount(@NullableDecl AvlNode<?> node) {\n",
        "935": "    private static int height(@NullableDecl AvlNode<?> node) {\n",
        "939": "    @NullableDecl\n",
        "940": "    private AvlNode<E> ceiling(Comparator<? super E> comparator, E e) {\n",
        "941": "      int cmp = comparator.compare(e, elem);\n",
        "951": "    @NullableDecl\n",
        "952": "    private AvlNode<E> floor(Comparator<? super E> comparator, E e) {\n",
        "953": "      int cmp = comparator.compare(e, elem);\n",
        "964": "      return elem;\n",
        "977": "  private static <T> void successor(AvlNode<T> a, AvlNode<T> b) {\n",
        "982": "  private static <T> void successor(AvlNode<T> a, AvlNode<T> b, AvlNode<T> c) {\n",
        "1015": "    AvlNode<E> header = new AvlNode<E>(null, 1);\n"
    }
}