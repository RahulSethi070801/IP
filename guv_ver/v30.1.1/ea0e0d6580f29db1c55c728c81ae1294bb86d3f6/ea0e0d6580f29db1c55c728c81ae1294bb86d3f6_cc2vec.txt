{"id": "ea0e0d6580f29db1c55c728c81ae1294bb86d3f6", "code": [{"0": "android/guava/src/com/google/common/collect/AbstractMapBasedMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n", " * ObjectCountHashMap<E>}.\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "abstract class AbstractMapBasedMultiset<E extends @Nullable Object> extends AbstractMultiset<E>\n", "    implements Serializable {\n", "    backingMap = newBackingMap(distinctElements);\n", "  abstract ObjectCountHashMap<E> newBackingMap(int distinctElements);\n", "  public final int count(@CheckForNull Object element) {\n"], "3": ["  public final int add(@ParametricNullness E element, int occurrences) {\n"], "4": ["  public final int remove(@CheckForNull Object element, int occurrences) {\n"], "5": ["  public final int setCount(@ParametricNullness E element, int count) {\n"], "6": ["  public final boolean setCount(@ParametricNullness E element, int oldCount, int newCount) {\n"], "7": ["  abstract class Itr<T extends @Nullable Object> implements Iterator<T> {\n", "    @ParametricNullness\n"], "8": ["    @ParametricNullness\n"], "9": ["      @ParametricNullness\n"], "10": ["    backingMap = newBackingMap(ObjectCountHashMap.DEFAULT_SIZE);\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n", " * AbstractObjectCountMap<E>}.\n"], "2": ["abstract class AbstractMapBasedMultiset<E> extends AbstractMultiset<E> implements Serializable {\n", "    init(distinctElements);\n", "  abstract void init(int distinctElements);\n", "  public final int count(@NullableDecl Object element) {\n"], "3": ["  public final int add(@NullableDecl E element, int occurrences) {\n"], "4": ["  public final int remove(@NullableDecl Object element, int occurrences) {\n"], "5": ["  public final int setCount(@NullableDecl E element, int count) {\n"], "6": ["  public final boolean setCount(@NullableDecl E element, int oldCount, int newCount) {\n"], "7": ["  abstract class Itr<T> implements Iterator<T> {\n"], "10": ["    init(ObjectCountHashMap.DEFAULT_SIZE);\n"]}, "added_lines": {"1": [34, 35, 39], "2": [47, 48, 49, 55, 58, 61], "3": [75], "4": [96], "5": [120], "6": [128], "7": [166, 171], "8": [187], "9": [213], "10": [267]}, "removed_lines": {"1": [34, 38], "2": [46, 52, 55, 58], "3": [72], "4": [93], "5": [117], "6": [125], "7": [163], "10": [261]}}, {"1": "android/guava/src/com/google/common/collect/AbstractMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "abstract class AbstractMultiset<E extends @Nullable Object> extends AbstractCollection<E>\n", "    implements Multiset<E> {\n"], "3": ["  public boolean contains(@CheckForNull Object element) {\n", "  public final boolean add(@ParametricNullness E element) {\n", "  public int add(@ParametricNullness E element, int occurrences) {\n", "  public final boolean remove(@CheckForNull Object element) {\n", "  public int remove(@CheckForNull Object element, int occurrences) {\n", "  public int setCount(@ParametricNullness E element, int count) {\n", "  public boolean setCount(@ParametricNullness E element, int oldCount, int newCount) {\n"], "4": ["  @LazyInit @CheckForNull private transient Set<E> elementSet;\n"], "5": ["  @LazyInit @CheckForNull private transient Set<Entry<E>> entrySet;\n"], "6": ["  public final boolean equals(@CheckForNull Object object) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "2": ["abstract class AbstractMultiset<E> extends AbstractCollection<E> implements Multiset<E> {\n"], "3": ["  public boolean contains(@NullableDecl Object element) {\n", "  public final boolean add(@NullableDecl E element) {\n", "  public int add(@NullableDecl E element, int occurrences) {\n", "  public final boolean remove(@NullableDecl Object element) {\n", "  public int remove(@NullableDecl Object element, int occurrences) {\n", "  public int setCount(@NullableDecl E element, int count) {\n", "  public boolean setCount(@NullableDecl E element, int oldCount, int newCount) {\n"], "4": ["  @LazyInit @NullableDecl private transient Set<E> elementSet;\n"], "5": ["  @LazyInit @NullableDecl private transient Set<Entry<E>> entrySet;\n"], "6": ["  public final boolean equals(@NullableDecl Object object) {\n"]}, "added_lines": {"1": [29, 30], "2": [46, 47, 48], "3": [57, 64, 71, 77, 83, 89, 95], "4": [130], "5": [164], "6": [210]}, "removed_lines": {"1": [29], "2": [45], "3": [54, 61, 68, 74, 80, 86, 92], "4": [127], "5": [161], "6": [207]}}, {"2": "android/guava/src/com/google/common/collect/AbstractSortedMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "abstract class AbstractSortedMultiset<E extends @Nullable Object> extends AbstractMultiset<E>\n", "    implements SortedMultiset<E> {\n"], "3": ["  @CheckForNull\n", "  @CheckForNull\n", "  @CheckForNull\n"], "4": ["  @CheckForNull\n"], "5": ["      @ParametricNullness E fromElement,\n", "      @ParametricNullness E toElement,\n"], "6": ["  @CheckForNull private transient SortedMultiset<E> descendingMultiset;\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "2": ["abstract class AbstractSortedMultiset<E> extends AbstractMultiset<E> implements SortedMultiset<E> {\n"], "5": ["      @NullableDecl E fromElement,\n", "      @NullableDecl E toElement,\n"], "6": ["  @NullableDecl private transient SortedMultiset<E> descendingMultiset;\n"]}, "added_lines": {"1": [24, 25], "2": [37, 38, 39], "3": [68, 75, 82], "4": [95], "5": [109, 111], "6": [125]}, "removed_lines": {"1": [24], "2": [36], "5": [102, 104], "6": [118]}}, {"3": "android/guava/src/com/google/common/collect/ConcurrentHashMultiset.java", "added": {"1": ["import static com.google.common.base.Preconditions.checkState;\n"], "2": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "3": ["@ElementTypesAreNonnullByDefault\n"], "4": ["  public int count(@CheckForNull Object element) {\n"], "5": ["  /*\n", "   * Our checker says \"found: T[]; required: T[].\" That sounds bogus. I discuss a possible reason\n", "   * for this error in https://github.com/jspecify/checker-framework/issues/10.\n", "   */\n", "  @SuppressWarnings(\"nullness\")\n", "  public <T extends @Nullable Object> T[] toArray(T[] array) {\n"], "6": ["   * parameter must be misleadingly annotated as @Nullable. I suspect that\n", "   * we'll want to remove @Nullable, add an eager checkNotNull, and loosen up\n", "  public int remove(@CheckForNull Object element, int occurrences) {\n"], "7": ["  public boolean removeExactly(@CheckForNull Object element, int occurrences) {\n"], "8": ["      public boolean contains(@CheckForNull Object object) {\n"], "9": ["      public boolean remove(@CheckForNull Object object) {\n"], "10": ["      @CheckForNull private Entry<E> last;\n"], "11": ["        checkState(last != null, \"no calls to next() since the last call to remove()\");\n"], "12": ["    /*\n", "     * Our checker says \"found: T[]; required: T[].\" That sounds bogus. I discuss a possible reason\n", "     * for this error in https://github.com/jspecify/checker-framework/issues/10.\n", "     */\n", "    @SuppressWarnings(\"nullness\")\n", "    public <T extends @Nullable Object> T[] toArray(T[] array) {\n"]}, "removed": {"1": ["import static com.google.common.collect.CollectPreconditions.checkRemove;\n"], "2": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "4": ["  public int count(@NullableDecl Object element) {\n"], "5": ["  public <T> T[] toArray(T[] array) {\n"], "6": ["   * parameter must be misleadingly annotated as @NullableDecl. I suspect that\n", "   * we'll want to remove @NullableDecl, add an eager checkNotNull, and loosen up\n", "  public int remove(@NullableDecl Object element, int occurrences) {\n"], "7": ["  public boolean removeExactly(@NullableDecl Object element, int occurrences) {\n"], "8": ["      public boolean contains(@NullableDecl Object object) {\n"], "9": ["      public boolean remove(Object object) {\n"], "10": ["      @NullableDecl private Entry<E> last;\n"], "11": ["        checkRemove(last != null);\n"], "12": ["    public <T> T[] toArray(T[] array) {\n"]}, "added_lines": {"1": [21], "2": [44, 45], "3": [60], "4": [142], "5": [173, 174, 175, 176, 177, 178], "6": [271, 272, 277], "7": [318], "8": [464], "9": [474], "10": [532], "11": [547], "12": [582, 583, 584, 585, 586, 587]}, "removed_lines": {"1": [22], "2": [44], "4": [140], "5": [171], "6": [264, 265, 270], "7": [311], "8": [457], "9": [467], "10": [525], "11": [540], "12": [575]}}, {"4": "android/guava/src/com/google/common/collect/DescendingImmutableSortedMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  public int count(@CheckForNull Object element) {\n", "  @CheckForNull\n", "  @CheckForNull\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "3": ["  public int count(@NullableDecl Object element) {\n"]}, "added_lines": {"1": [18], "2": [27], "3": [36, 41, 47]}, "removed_lines": {"1": [18], "3": [35]}}, {"5": "android/guava/src/com/google/common/collect/DescendingMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "abstract class DescendingMultiset<E extends @Nullable Object> extends ForwardingMultiset<E>\n", "    implements SortedMultiset<E> {\n", "  @CheckForNull private transient Comparator<? super E> comparator;\n"], "3": ["  @CheckForNull private transient NavigableSet<E> elementSet;\n"], "4": ["  @CheckForNull\n", "  @CheckForNull\n", "  public SortedMultiset<E> headMultiset(@ParametricNullness E toElement, BoundType boundType) {\n", "      @ParametricNullness E fromElement,\n", "      BoundType fromBoundType,\n", "      @ParametricNullness E toElement,\n", "      BoundType toBoundType) {\n", "  public SortedMultiset<E> tailMultiset(@ParametricNullness E fromElement, BoundType boundType) {\n"], "5": ["  @CheckForNull\n", "  @CheckForNull\n", "  @CheckForNull private transient Set<Entry<E>> entrySet;\n"], "6": ["  public @Nullable Object[] toArray() {\n", "  /*\n", "   * Our checker says \"found: T[]; required: T[].\" That sounds bogus. I discuss a possible reason\n", "   * for this error in https://github.com/jspecify/checker-framework/issues/10.\n", "   */\n", "  @SuppressWarnings(\"nullness\")\n", "  public <T extends @Nullable Object> T[] toArray(T[] array) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "2": ["abstract class DescendingMultiset<E> extends ForwardingMultiset<E> implements SortedMultiset<E> {\n", "  @NullableDecl private transient Comparator<? super E> comparator;\n"], "3": ["  @NullableDecl private transient NavigableSet<E> elementSet;\n"], "4": ["  public SortedMultiset<E> headMultiset(E toElement, BoundType boundType) {\n", "      E fromElement, BoundType fromBoundType, E toElement, BoundType toBoundType) {\n", "  public SortedMultiset<E> tailMultiset(E fromElement, BoundType boundType) {\n"], "5": ["  @NullableDecl private transient Set<Entry<E>> entrySet;\n"], "6": ["  public Object[] toArray() {\n", "  public <T> T[] toArray(T[] array) {\n"]}, "added_lines": {"1": [25, 26], "2": [35, 36, 37, 40], "3": [51], "4": [63, 69, 75, 81, 82, 83, 84, 91], "5": [106, 112, 119], "6": [154, 159, 160, 161, 162, 163, 164]}, "removed_lines": {"1": [25], "2": [34, 37], "3": [48], "4": [70, 76, 83], "5": [109], "6": [144, 149]}}, {"6": "android/guava/src/com/google/common/collect/EnumMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  private boolean isActuallyE(@CheckForNull Object o) {\n"], "4": ["  private void checkIsE(Object element) {\n"], "5": ["  public int count(@CheckForNull Object element) {\n", "    // isActuallyE checks for null, but we check explicitly to help nullness checkers.\n", "    if (element == null || !isActuallyE(element)) {\n"], "6": ["  public int remove(@CheckForNull Object element, int occurrences) {\n", "    // isActuallyE checks for null, but we check explicitly to help nullness checkers.\n", "    if (element == null || !isActuallyE(element)) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "3": ["  private boolean isActuallyE(@NullableDecl Object o) {\n"], "4": ["  void checkIsE(@NullableDecl Object element) {\n"], "5": ["  public int count(@NullableDecl Object element) {\n", "    if (!isActuallyE(element)) {\n"], "6": ["  public int remove(@NullableDecl Object element, int occurrences) {\n", "    if (!isActuallyE(element)) {\n"]}, "added_lines": {"1": [33], "2": [47], "3": [97], "4": [110], "5": [128, 129, 130], "6": [161, 162, 163]}, "removed_lines": {"1": [33], "3": [96], "4": [109], "5": [127, 128], "6": [159, 160]}}, {"7": "android/guava/src/com/google/common/collect/ForwardingMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "public abstract class ForwardingMultiset<E extends @Nullable Object> extends ForwardingCollection<E>\n", "    implements Multiset<E> {\n"], "3": ["  public int count(@CheckForNull Object element) {\n", "  public int add(@ParametricNullness E element, int occurrences) {\n", "  public int remove(@CheckForNull Object element, int occurrences) {\n"], "4": ["  public boolean equals(@CheckForNull Object object) {\n"], "5": ["  public int setCount(@ParametricNullness E element, int count) {\n", "  public boolean setCount(@ParametricNullness E element, int oldCount, int newCount) {\n"], "6": ["  protected boolean standardContains(@CheckForNull Object object) {\n"], "7": ["  protected int standardCount(@CheckForNull Object object) {\n"], "8": ["  protected boolean standardAdd(@ParametricNullness E element) {\n"], "9": ["  protected boolean standardRemove(@CheckForNull Object element) {\n"], "10": ["  protected int standardSetCount(@ParametricNullness E element, int count) {\n"], "11": ["  protected boolean standardSetCount(@ParametricNullness E element, int oldCount, int newCount) {\n"], "12": ["  protected boolean standardEquals(@CheckForNull Object object) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "2": ["public abstract class ForwardingMultiset<E> extends ForwardingCollection<E> implements Multiset<E> {\n"], "3": ["  public int count(Object element) {\n", "  public int add(E element, int occurrences) {\n", "  public int remove(Object element, int occurrences) {\n"], "4": ["  public boolean equals(@NullableDecl Object object) {\n"], "5": ["  public int setCount(E element, int count) {\n", "  public boolean setCount(E element, int oldCount, int newCount) {\n"], "6": ["  protected boolean standardContains(@NullableDecl Object object) {\n"], "7": ["  protected int standardCount(@NullableDecl Object object) {\n"], "8": ["  protected boolean standardAdd(E element) {\n"], "9": ["  protected boolean standardRemove(Object element) {\n"], "10": ["  protected int standardSetCount(E element, int count) {\n"], "11": ["  protected boolean standardSetCount(E element, int oldCount, int newCount) {\n"], "12": ["  protected boolean standardEquals(@NullableDecl Object object) {\n"]}, "added_lines": {"1": [26, 27], "2": [52, 53, 54], "3": [63, 69, 75], "4": [90], "5": [101, 107], "6": [118], "7": [142], "8": [158], "9": [184], "10": [220], "11": [231], "12": [291]}, "removed_lines": {"1": [26], "2": [51], "3": [60, 66, 72], "4": [87], "5": [98, 104], "6": [115], "7": [139], "8": [155], "9": [181], "10": [217], "11": [228], "12": [288]}}, {"8": "android/guava/src/com/google/common/collect/ForwardingSortedMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "public abstract class ForwardingSortedMultiset<E extends @Nullable Object>\n", "    extends ForwardingMultiset<E> implements SortedMultiset<E> {\n"], "3": ["  @CheckForNull\n"], "4": ["  @CheckForNull\n"], "5": ["  @CheckForNull\n"], "6": ["  @CheckForNull\n"], "7": ["  @CheckForNull\n"], "8": ["  @CheckForNull\n"], "9": ["  @CheckForNull\n"], "10": ["  @CheckForNull\n"], "11": ["  public SortedMultiset<E> headMultiset(@ParametricNullness E upperBound, BoundType boundType) {\n", "      @ParametricNullness E lowerBound,\n", "      BoundType lowerBoundType,\n", "      @ParametricNullness E upperBound,\n", "      BoundType upperBoundType) {\n"], "12": ["      @ParametricNullness E lowerBound,\n", "      BoundType lowerBoundType,\n", "      @ParametricNullness E upperBound,\n", "      BoundType upperBoundType) {\n", "  public SortedMultiset<E> tailMultiset(@ParametricNullness E lowerBound, BoundType boundType) {\n"]}, "removed": {"2": ["public abstract class ForwardingSortedMultiset<E> extends ForwardingMultiset<E>\n", "    implements SortedMultiset<E> {\n"], "11": ["  public SortedMultiset<E> headMultiset(E upperBound, BoundType boundType) {\n", "      E lowerBound, BoundType lowerBoundType, E upperBound, BoundType upperBoundType) {\n"], "12": ["      E lowerBound, BoundType lowerBoundType, E upperBound, BoundType upperBoundType) {\n", "  public SortedMultiset<E> tailMultiset(E lowerBound, BoundType boundType) {\n"]}, "added_lines": {"1": [22, 23], "2": [49, 50, 51], "3": [116], "4": [127], "5": [138], "6": [150], "7": [161], "8": [172], "9": [185], "10": [197], "11": [210, 216, 217, 218, 219], "12": [232, 233, 234, 235, 240]}, "removed_lines": {"2": [47, 48], "11": [199, 205], "12": [218, 223]}}, {"9": "android/guava/src/com/google/common/collect/GeneralRange.java", "added": {"1": ["import static com.google.common.collect.NullnessCasts.uncheckedCastNullableTToT;\n", "import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "final class GeneralRange<T extends @Nullable Object> implements Serializable {\n", "    T lowerEndpoint = range.hasLowerBound() ? range.lowerEndpoint() : null;\n", "    T upperEndpoint = range.hasUpperBound() ? range.upperEndpoint() : null;\n"], "3": ["  static <T extends @Nullable Object> GeneralRange<T> all(Comparator<? super T> comparator) {\n"], "4": ["  static <T extends @Nullable Object> GeneralRange<T> downTo(\n", "      Comparator<? super T> comparator, @ParametricNullness T endpoint, BoundType boundType) {\n"], "5": ["  static <T extends @Nullable Object> GeneralRange<T> upTo(\n", "      Comparator<? super T> comparator, @ParametricNullness T endpoint, BoundType boundType) {\n"], "6": ["  static <T extends @Nullable Object> GeneralRange<T> range(\n", "      @ParametricNullness T lower,\n", "      @ParametricNullness T upper,\n", "  @CheckForNull private final T lowerEndpoint;\n", "  @CheckForNull private final T upperEndpoint;\n", "      @CheckForNull T lowerEndpoint,\n", "      @CheckForNull T upperEndpoint,\n"], "7": ["    // Trigger any exception that the comparator would throw for the endpoints.\n", "    /*\n", "     * uncheckedCastNullableTToT is safe as long as the callers are careful to pass a \"real\" T\n", "     * whenever they pass `true` for the matching `has*Bound` parameter.\n", "     */\n", "      comparator.compare(\n", "          uncheckedCastNullableTToT(lowerEndpoint), uncheckedCastNullableTToT(lowerEndpoint));\n", "      comparator.compare(\n", "          uncheckedCastNullableTToT(upperEndpoint), uncheckedCastNullableTToT(upperEndpoint));\n", "\n", "      int cmp =\n", "          comparator.compare(\n", "              uncheckedCastNullableTToT(lowerEndpoint), uncheckedCastNullableTToT(upperEndpoint));\n"], "8": ["    // The casts are safe because of the has*Bound() checks.\n", "    return (hasUpperBound() && tooLow(uncheckedCastNullableTToT(getUpperEndpoint())))\n", "        || (hasLowerBound() && tooHigh(uncheckedCastNullableTToT(getLowerEndpoint())));\n", "  boolean tooLow(@ParametricNullness T t) {\n", "    // The cast is safe because of the hasLowerBound() check.\n", "    T lbound = uncheckedCastNullableTToT(getLowerEndpoint());\n", "  boolean tooHigh(@ParametricNullness T t) {\n", "    // The cast is safe because of the hasUpperBound() check.\n", "    T ubound = uncheckedCastNullableTToT(getUpperEndpoint());\n", "  boolean contains(@ParametricNullness T t) {\n", "  @SuppressWarnings(\"nullness\") // TODO(cpovirk): Add casts as needed. Will be noisy and annoying...\n", "    T lowEnd = getLowerEndpoint();\n"], "9": ["    T upEnd = getUpperEndpoint();\n"], "10": ["  public boolean equals(@CheckForNull Object obj) {\n"], "11": ["  @CheckForNull private transient GeneralRange<T> reverse;\n"], "12": ["  @CheckForNull\n"], "13": ["  @CheckForNull\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "2": ["final class GeneralRange<T> implements Serializable {\n", "    @NullableDecl T lowerEndpoint = range.hasLowerBound() ? range.lowerEndpoint() : null;\n", "    @NullableDecl T upperEndpoint = range.hasUpperBound() ? range.upperEndpoint() : null;\n"], "3": ["  static <T> GeneralRange<T> all(Comparator<? super T> comparator) {\n"], "4": ["  static <T> GeneralRange<T> downTo(\n", "      Comparator<? super T> comparator, @NullableDecl T endpoint, BoundType boundType) {\n"], "5": ["  static <T> GeneralRange<T> upTo(\n", "      Comparator<? super T> comparator, @NullableDecl T endpoint, BoundType boundType) {\n"], "6": ["  static <T> GeneralRange<T> range(\n", "      @NullableDecl T lower,\n", "      @NullableDecl T upper,\n", "  @NullableDecl private final T lowerEndpoint;\n", "  @NullableDecl private final T upperEndpoint;\n", "      @NullableDecl T lowerEndpoint,\n", "      @NullableDecl T upperEndpoint,\n"], "7": ["      comparator.compare(lowerEndpoint, lowerEndpoint);\n", "      comparator.compare(upperEndpoint, upperEndpoint);\n", "      int cmp = comparator.compare(lowerEndpoint, upperEndpoint);\n"], "8": ["    return (hasUpperBound() && tooLow(getUpperEndpoint()))\n", "        || (hasLowerBound() && tooHigh(getLowerEndpoint()));\n", "  boolean tooLow(@NullableDecl T t) {\n", "    T lbound = getLowerEndpoint();\n", "  boolean tooHigh(@NullableDecl T t) {\n", "    T ubound = getUpperEndpoint();\n", "  boolean contains(@NullableDecl T t) {\n", "    @NullableDecl T lowEnd = getLowerEndpoint();\n"], "9": ["    @NullableDecl T upEnd = getUpperEndpoint();\n"], "10": ["  public boolean equals(@NullableDecl Object obj) {\n"], "11": ["  @NullableDecl private transient GeneralRange<T> reverse;\n"]}, "added_lines": {"1": [21, 27, 28], "2": [40, 41, 44, 47], "3": [60], "4": [68, 69], "5": [77, 78], "6": [86, 88, 90, 97, 100, 106, 109], "7": [119, 120, 121, 122, 123, 125, 126, 129, 130, 132, 134, 135, 136], "8": [159, 160, 161, 164, 168, 169, 174, 178, 179, 184, 191, 197], "9": [212], "10": [240], "11": [264], "12": [296], "13": [305]}, "removed_lines": {"1": [26], "2": [38, 41, 44], "3": [57], "4": [65, 66], "5": [74, 75], "6": [83, 85, 87, 94, 97, 103, 106], "7": [117, 120, 123], "8": [146, 147, 150, 154, 159, 163, 168, 180], "9": [195], "10": [223], "11": [247]}}, {"10": "android/guava/src/com/google/common/collect/HashMultiset.java", "added": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "public final class HashMultiset<E extends @Nullable Object> extends AbstractMapBasedMultiset<E> {\n", "  public static <E extends @Nullable Object> HashMultiset<E> create() {\n"], "3": ["  public static <E extends @Nullable Object> HashMultiset<E> create(int distinctElements) {\n"], "4": ["  public static <E extends @Nullable Object> HashMultiset<E> create(\n", "      Iterable<? extends E> elements) {\n"], "5": ["  ObjectCountHashMap<E> newBackingMap(int distinctElements) {\n", "    return new ObjectCountHashMap<>(distinctElements);\n"]}, "removed": {"2": ["public class HashMultiset<E> extends AbstractMapBasedMultiset<E> {\n", "  public static <E> HashMultiset<E> create() {\n"], "3": ["  public static <E> HashMultiset<E> create(int distinctElements) {\n"], "4": ["  public static <E> HashMultiset<E> create(Iterable<? extends E> elements) {\n"], "5": ["  void init(int distinctElements) {\n", "    backingMap = new ObjectCountHashMap<>(distinctElements);\n"]}, "added_lines": {"1": [21], "2": [31, 32, 35], "3": [46], "4": [57, 58], "5": [69, 70]}, "removed_lines": {"2": [30, 33], "3": [44], "4": [55], "5": [66, 67]}}, {"11": "android/guava/src/com/google/common/collect/ImmutableMultiset.java", "added": {"1": ["import static java.util.Objects.requireNonNull;\n"], "2": ["import javax.annotation.CheckForNull;\n"], "3": ["@ElementTypesAreNonnullByDefault\n"], "10": ["      @CheckForNull E element;\n"], "11": ["        /*\n", "         * requireNonNull is safe because `remaining` starts at 0, forcing us to initialize\n", "         * `element` above. After that, we never clear it.\n", "         */\n", "        return requireNonNull(element);\n", "  @LazyInit @CheckForNull private transient ImmutableList<E> asList;\n"], "12": ["  public boolean contains(@CheckForNull Object object) {\n"], "13": ["  public final int remove(@CheckForNull Object element, int occurrences) {\n"], "14": ["  public boolean equals(@CheckForNull Object object) {\n"], "15": ["  @LazyInit @CheckForNull private transient ImmutableSet<Entry<E>> entrySet;\n"], "16": ["    public boolean contains(@CheckForNull Object o) {\n"], "17": ["    /*\n", "     * `contents` is null only for instances of the subclass, ImmutableSortedMultiset.Builder. That\n", "     * subclass overrides all the methods that access it here. Thus, all the methods here can safely\n", "     * assume that this field is non-null.\n", "     */\n", "    @CheckForNull ObjectCountHashMap<E> contents;\n"], "18": ["      requireNonNull(contents); // see the comment on the field\n"], "19": ["      requireNonNull(contents); // see the comment on the field\n"], "20": ["      requireNonNull(contents); // see the comment on the field\n"], "21": ["    @CheckForNull\n"], "22": ["      requireNonNull(contents); // see the comment on the field\n"]}, "removed": {"2": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "4": ["  @SuppressWarnings(\"unchecked\") // generic array created but never written\n"], "5": ["  @SuppressWarnings(\"unchecked\") //\n"], "6": ["  @SuppressWarnings(\"unchecked\") //\n"], "7": ["  @SuppressWarnings(\"unchecked\") //\n"], "8": ["  @SuppressWarnings(\"unchecked\") //\n"], "9": ["  @SuppressWarnings(\"unchecked\") //\n"], "10": ["      @NullableDecl E element;\n"], "11": ["        return element;\n", "  @LazyInit private transient ImmutableList<E> asList;\n"], "12": ["  public boolean contains(@NullableDecl Object object) {\n"], "13": ["  public final int remove(Object element, int occurrences) {\n"], "14": ["  public boolean equals(@NullableDecl Object object) {\n"], "15": ["  @LazyInit private transient ImmutableSet<Entry<E>> entrySet;\n"], "16": ["    public boolean contains(Object o) {\n"], "17": ["    ObjectCountHashMap<E> contents;\n"], "21": ["    @NullableDecl\n"]}, "added_lines": {"1": [20], "2": [33], "3": [52], "10": [190], "11": [205, 206, 207, 208, 209, 214], "12": [223], "13": [251], "14": [294], "15": [312], "16": [344], "17": [415, 416, 417, 418, 419, 420], "18": [491], "19": [517], "20": [547], "21": [588], "22": [605]}, "removed_lines": {"2": [32], "4": [69], "5": [80], "6": [92], "7": [104], "8": [116], "9": [128], "10": [194], "11": [209, 214], "12": [223], "13": [251], "14": [294], "15": [312], "16": [344], "17": [415], "21": [580]}}, {"12": "android/guava/src/com/google/common/collect/ImmutableMultisetGwtSerializationDependencies.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [40]}, "removed_lines": {}}, {"13": "android/guava/src/com/google/common/collect/ImmutableSortedMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "8": ["  @LazyInit @CheckForNull transient ImmutableSortedMultiset<E> descendingMultiset;\n"], "9": ["  @CheckForNull\n"], "10": ["  @CheckForNull\n"]}, "removed": {"3": ["  @SuppressWarnings(\"unchecked\")\n"], "4": ["  @SuppressWarnings(\"unchecked\")\n"], "5": ["  @SuppressWarnings(\"unchecked\")\n"], "6": ["  @SuppressWarnings(\"unchecked\")\n"], "7": ["  @SuppressWarnings(\"unchecked\")\n"], "8": ["  @LazyInit transient ImmutableSortedMultiset<E> descendingMultiset;\n"]}, "added_lines": {"1": [33], "2": [52], "8": [286], "9": [312], "10": [329]}, "removed_lines": {"3": [79], "4": [90], "5": [101], "6": [113], "7": [125], "8": [289]}}, {"14": "android/guava/src/com/google/common/collect/ImmutableSortedMultisetFauxverideShim.java", "added": {"1": ["import com.google.errorprone.annotations.DoNotCall;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  @DoNotCall(\"Use naturalOrder.\")\n"], "4": ["  @DoNotCall(\"Elements must be Comparable. (Or, pass a Comparator to orderedBy or copyOf.)\")\n"], "5": ["  @DoNotCall(\"Elements must be Comparable. (Or, pass a Comparator to orderedBy or copyOf.)\")\n"], "6": ["  @DoNotCall(\"Elements must be Comparable. (Or, pass a Comparator to orderedBy or copyOf.)\")\n"], "7": ["  @DoNotCall(\"Elements must be Comparable. (Or, pass a Comparator to orderedBy or copyOf.)\")\n"], "8": ["  @DoNotCall(\"Elements must be Comparable. (Or, pass a Comparator to orderedBy or copyOf.)\")\n"], "9": ["  @DoNotCall(\"Elements must be Comparable. (Or, pass a Comparator to orderedBy or copyOf.)\")\n"], "10": ["  @DoNotCall(\"Elements must be Comparable. (Or, pass a Comparator to orderedBy or copyOf.)\")\n"]}, "removed": {}, "added_lines": {"1": [18], "2": [38], "3": [48], "4": [63], "5": [78], "6": [93], "7": [108], "8": [124], "9": [140], "10": [156]}, "removed_lines": {}}, {"15": "android/guava/src/com/google/common/collect/LinkedHashMultiset.java", "added": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "public final class LinkedHashMultiset<E extends @Nullable Object>\n", "    extends AbstractMapBasedMultiset<E> {\n", "  public static <E extends @Nullable Object> LinkedHashMultiset<E> create() {\n"], "3": ["  public static <E extends @Nullable Object> LinkedHashMultiset<E> create(int distinctElements) {\n"], "4": ["  public static <E extends @Nullable Object> LinkedHashMultiset<E> create(\n", "      Iterable<? extends E> elements) {\n"], "5": ["  ObjectCountHashMap<E> newBackingMap(int distinctElements) {\n", "    return new ObjectCountLinkedHashMap<>(distinctElements);\n"]}, "removed": {"2": ["public final class LinkedHashMultiset<E> extends AbstractMapBasedMultiset<E> {\n", "  public static <E> LinkedHashMultiset<E> create() {\n"], "3": ["  public static <E> LinkedHashMultiset<E> create(int distinctElements) {\n"], "4": ["  public static <E> LinkedHashMultiset<E> create(Iterable<? extends E> elements) {\n"], "5": ["  void init(int distinctElements) {\n", "    backingMap = new ObjectCountLinkedHashMap<>(distinctElements);\n"]}, "added_lines": {"1": [20], "2": [38, 39, 40, 43], "3": [54], "4": [65, 66], "5": [77, 78]}, "removed_lines": {"2": [37, 40], "3": [51], "4": [62], "5": [73, 74]}}, {"16": "android/guava/src/com/google/common/collect/Multiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "public interface Multiset<E extends @Nullable Object> extends Collection<E> {\n"], "3": ["  int count(@CompatibleWith(\"E\") @CheckForNull Object element);\n"], "4": ["  int add(@ParametricNullness E element, int occurrences);\n"], "5": ["  boolean add(@ParametricNullness E element);\n"], "6": ["  int remove(@CompatibleWith(\"E\") @CheckForNull Object element, int occurrences);\n"], "7": ["  boolean remove(@CheckForNull Object element);\n"], "8": ["  int setCount(@ParametricNullness E element, int count);\n"], "9": ["  boolean setCount(@ParametricNullness E element, int oldCount, int newCount);\n"], "10": ["  interface Entry<E extends @Nullable Object> {\n"], "11": ["    @ParametricNullness\n"], "12": ["    boolean equals(@CheckForNull Object o);\n"], "13": ["  boolean equals(@CheckForNull Object object);\n"], "14": ["  boolean contains(@CheckForNull Object element);\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "2": ["public interface Multiset<E> extends Collection<E> {\n"], "3": ["  int count(@NullableDecl @CompatibleWith(\"E\") Object element);\n"], "4": ["  int add(@NullableDecl E element, int occurrences);\n"], "5": ["  boolean add(E element);\n"], "6": ["  int remove(@NullableDecl @CompatibleWith(\"E\") Object element, int occurrences);\n"], "7": ["  boolean remove(@NullableDecl Object element);\n"], "8": ["  int setCount(E element, int count);\n"], "9": ["  boolean setCount(E element, int oldCount, int newCount);\n"], "10": ["  interface Entry<E> {\n"], "12": ["    boolean equals(Object o);\n"], "13": ["  boolean equals(@NullableDecl Object object);\n"], "14": ["  boolean contains(@NullableDecl Object element);\n"]}, "added_lines": {"1": [27, 28], "2": [84, 85], "3": [110], "4": [133], "5": [156], "6": [171], "7": [187], "8": [203], "9": [222], "10": [268], "11": [276], "12": [304], "13": [338], "14": [384]}, "removed_lines": {"1": [27], "2": [83], "3": [108], "4": [131], "5": [154], "6": [169], "7": [185], "8": [201], "9": [220], "10": [266], "12": [301], "13": [335], "14": [381]}}, {"17": "android/guava/src/com/google/common/collect/Multisets.java", "added": {"1": ["import static java.util.Objects.requireNonNull;\n"], "2": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "3": ["@ElementTypesAreNonnullByDefault\n"], "4": ["  public static <E extends @Nullable Object> Multiset<E> unmodifiableMultiset(\n", "      Multiset<? extends E> multiset) {\n"], "5": ["  static class UnmodifiableMultiset<E extends @Nullable Object> extends ForwardingMultiset<E>\n", "      implements Serializable {\n"], "6": ["    @CheckForNull transient Set<E> elementSet;\n"], "7": ["    @CheckForNull transient Set<Multiset.Entry<E>> entrySet;\n"], "8": ["    public boolean add(@ParametricNullness E element) {\n", "    public int add(@ParametricNullness E element, int occurences) {\n"], "9": ["    public boolean remove(@CheckForNull Object element) {\n", "    public int remove(@CheckForNull Object element, int occurrences) {\n"], "10": ["    public int setCount(@ParametricNullness E element, int count) {\n", "    public boolean setCount(@ParametricNullness E element, int oldCount, int newCount) {\n"], "11": ["  public static <E extends @Nullable Object> SortedMultiset<E> unmodifiableSortedMultiset(\n", "      SortedMultiset<E> sortedMultiset) {\n"], "12": ["  public static <E extends @Nullable Object> Multiset.Entry<E> immutableEntry(\n", "      @ParametricNullness E e, int n) {\n", "  static class ImmutableEntry<E extends @Nullable Object> extends AbstractEntry<E>\n", "      implements Serializable {\n", "    @ParametricNullness private final E element;\n", "    ImmutableEntry(@ParametricNullness E element, int count) {\n", "    @ParametricNullness\n"], "13": ["    @CheckForNull\n"], "14": ["  public static <E extends @Nullable Object> Multiset<E> filter(\n", "      Multiset<E> unfiltered, Predicate<? super E> predicate) {\n"], "15": ["  private static final class FilteredMultiset<E extends @Nullable Object> extends ViewMultiset<E> {\n"], "16": ["    public int count(@CheckForNull Object element) {\n"], "17": ["    public int add(@ParametricNullness E element, int occurrences) {\n", "    public int remove(@CheckForNull Object element, int occurrences) {\n"], "18": ["  public static <E extends @Nullable Object> Multiset<E> union(\n", "      public boolean contains(@CheckForNull Object element) {\n"], "19": ["      public int count(@CheckForNull Object element) {\n"], "20": ["          @CheckForNull\n"], "21": ["  public static <E extends @Nullable Object> Multiset<E> intersection(\n", "      public int count(@CheckForNull Object element) {\n"], "22": ["  public static <E extends @Nullable Object> Multiset<E> sum(\n"], "23": ["      public boolean contains(@CheckForNull Object element) {\n"], "24": ["      public int count(@CheckForNull Object element) {\n"], "25": ["  public static <E extends @Nullable Object> Multiset<E> difference(\n"], "26": ["      public int count(@CheckForNull Object element) {\n"], "27": ["          @ParametricNullness\n"], "28": ["  private static <E extends @Nullable Object> boolean retainOccurrencesImpl(\n"], "29": ["  abstract static class AbstractEntry<E extends @Nullable Object> implements Multiset.Entry<E> {\n", "    public boolean equals(@CheckForNull Object object) {\n"], "30": ["  static boolean equalsImpl(Multiset<?> multiset, @CheckForNull Object object) {\n"], "31": ["  static <E extends @Nullable Object> boolean addAllImpl(\n", "      Multiset<E> self, Collection<? extends E> elements) {\n"], "32": ["  private static <E extends @Nullable Object> boolean addAllImpl(\n", "      Multiset<E> self, Multiset<? extends E> elements) {\n"], "33": ["  private static <E extends @Nullable Object> boolean addAllImpl(\n"], "34": ["  static <E extends @Nullable Object> int setCountImpl(\n", "      Multiset<E> self, @ParametricNullness E element, int count) {\n"], "35": ["  static <E extends @Nullable Object> boolean setCountImpl(\n", "      Multiset<E> self, @ParametricNullness E element, int oldCount, int newCount) {\n"], "36": ["  static <E extends @Nullable Object> Iterator<E> elementIterator(\n", "      Iterator<Entry<E>> entryIterator) {\n", "      @ParametricNullness\n", "  abstract static class ElementSet<E extends @Nullable Object> extends Sets.ImprovedAbstractSet<E> {\n"], "37": ["    public boolean contains(@CheckForNull Object o) {\n"], "38": ["    public boolean remove(@CheckForNull Object o) {\n"], "39": ["  abstract static class EntrySet<E extends @Nullable Object>\n", "      extends Sets.ImprovedAbstractSet<Entry<E>> {\n", "    public boolean contains(@CheckForNull Object o) {\n"], "40": ["    public boolean remove(@CheckForNull Object object) {\n", "          // (Presumably it can still throw CCE/NPE but only if the underlying Multiset does.)\n", "          @SuppressWarnings({\"unchecked\", \"nullness\"})\n", "          Multiset<@Nullable Object> multiset = (Multiset<@Nullable Object>) multiset();\n"], "41": ["  static <E extends @Nullable Object> Iterator<E> iteratorImpl(Multiset<E> multiset) {\n", "  static final class MultisetIteratorImpl<E extends @Nullable Object> implements Iterator<E> {\n", "    @CheckForNull private Entry<E> currentEntry;\n"], "42": ["    @ParametricNullness\n"], "43": ["      /*\n", "       * requireNonNull is safe because laterCount starts at 0, forcing us to initialize\n", "       * currentEntry above. After that, we never clear it.\n", "       */\n", "      return requireNonNull(currentEntry).getElement();\n"], "44": ["        /*\n", "         * requireNonNull is safe because canRemove is set to true only after we initialize\n", "         * currentEntry (which we never subsequently clear).\n", "         */\n", "        multiset.remove(requireNonNull(currentEntry).getElement());\n"], "45": ["  static <T extends @Nullable Object> Multiset<T> cast(Iterable<T> iterable) {\n"], "46": ["  private abstract static class ViewMultiset<E extends @Nullable Object>\n", "      extends AbstractMultiset<E> {\n"]}, "removed": {"2": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "4": ["  public static <E> Multiset<E> unmodifiableMultiset(Multiset<? extends E> multiset) {\n"], "5": ["  static class UnmodifiableMultiset<E> extends ForwardingMultiset<E> implements Serializable {\n"], "6": ["    @NullableDecl transient Set<E> elementSet;\n"], "7": ["    @NullableDecl transient Set<Multiset.Entry<E>> entrySet;\n"], "8": ["    public boolean add(E element) {\n", "    public int add(E element, int occurences) {\n"], "9": ["    public boolean remove(Object element) {\n", "    public int remove(Object element, int occurrences) {\n"], "10": ["    public int setCount(E element, int count) {\n", "    public boolean setCount(E element, int oldCount, int newCount) {\n"], "11": ["  public static <E> SortedMultiset<E> unmodifiableSortedMultiset(SortedMultiset<E> sortedMultiset) {\n"], "12": ["  public static <E> Multiset.Entry<E> immutableEntry(@NullableDecl E e, int n) {\n", "  static class ImmutableEntry<E> extends AbstractEntry<E> implements Serializable {\n", "    @NullableDecl private final E element;\n", "    ImmutableEntry(@NullableDecl E element, int count) {\n", "    @NullableDecl\n"], "14": ["  public static <E> Multiset<E> filter(Multiset<E> unfiltered, Predicate<? super E> predicate) {\n"], "15": ["  private static final class FilteredMultiset<E> extends ViewMultiset<E> {\n"], "16": ["    public int count(@NullableDecl Object element) {\n"], "17": ["    public int add(@NullableDecl E element, int occurrences) {\n", "    public int remove(@NullableDecl Object element, int occurrences) {\n"], "18": ["  public static <E> Multiset<E> union(\n", "      public boolean contains(@NullableDecl Object element) {\n"], "19": ["      public int count(Object element) {\n"], "21": ["  public static <E> Multiset<E> intersection(\n", "      public int count(Object element) {\n"], "22": ["  public static <E> Multiset<E> sum(\n"], "23": ["      public boolean contains(@NullableDecl Object element) {\n"], "24": ["      public int count(Object element) {\n"], "25": ["  public static <E> Multiset<E> difference(\n"], "26": ["      public int count(@NullableDecl Object element) {\n"], "28": ["  private static <E> boolean retainOccurrencesImpl(\n"], "29": ["  abstract static class AbstractEntry<E> implements Multiset.Entry<E> {\n", "    public boolean equals(@NullableDecl Object object) {\n"], "30": ["  static boolean equalsImpl(Multiset<?> multiset, @NullableDecl Object object) {\n"], "31": ["  static <E> boolean addAllImpl(Multiset<E> self, Collection<? extends E> elements) {\n"], "32": ["  private static <E> boolean addAllImpl(Multiset<E> self, Multiset<? extends E> elements) {\n"], "33": ["  private static <E> boolean addAllImpl(\n"], "34": ["  static <E> int setCountImpl(Multiset<E> self, E element, int count) {\n"], "35": ["  static <E> boolean setCountImpl(Multiset<E> self, E element, int oldCount, int newCount) {\n"], "36": ["  static <E> Iterator<E> elementIterator(Iterator<Entry<E>> entryIterator) {\n", "  abstract static class ElementSet<E> extends Sets.ImprovedAbstractSet<E> {\n"], "37": ["    public boolean contains(Object o) {\n"], "38": ["    public boolean remove(Object o) {\n"], "39": ["  abstract static class EntrySet<E> extends Sets.ImprovedAbstractSet<Entry<E>> {\n", "    public boolean contains(@NullableDecl Object o) {\n"], "40": ["    public boolean remove(Object object) {\n", "          @SuppressWarnings(\"unchecked\")\n", "          Multiset<Object> multiset = (Multiset<Object>) multiset();\n"], "41": ["  static <E> Iterator<E> iteratorImpl(Multiset<E> multiset) {\n", "  static final class MultisetIteratorImpl<E> implements Iterator<E> {\n", "    @NullableDecl private Entry<E> currentEntry;\n"], "43": ["      return currentEntry.getElement();\n"], "44": ["        multiset.remove(currentEntry.getElement());\n"], "45": ["  static <T> Multiset<T> cast(Iterable<T> iterable) {\n"], "46": ["  private abstract static class ViewMultiset<E> extends AbstractMultiset<E> {\n"]}, "added_lines": {"1": [23], "2": [42, 43], "3": [58], "4": [72, 73], "5": [93, 94], "6": [108], "7": [120], "8": [139, 144], "9": [154, 159], "10": [179, 184], "11": [203, 204], "12": [217, 218, 222, 223, 224, 227, 234], "13": [244], "14": [278, 279], "15": [290], "16": [332], "17": [343, 350], "18": [385, 392], "19": [402], "20": [423], "21": [457, 464], "22": [514], "23": [522], "24": [537], "25": [591], "26": [599], "27": [614], "28": [696], "29": [804, 810], "30": [844], "31": [870, 871], "32": [884, 885], "33": [904], "34": [935, 936], "35": [952, 953], "36": [965, 966, 969, 976], "37": [985], "38": [1003], "39": [1013, 1014, 1018], "40": [1037, 1044, 1045, 1046], "41": [1060, 1064, 1067], "42": [1088], "43": [1099, 1100, 1101, 1102, 1103], "44": [1112, 1113, 1114, 1115, 1116], "45": [1133], "46": [1163, 1164]}, "removed_lines": {"2": [41], "4": [69], "5": [89], "6": [103], "7": [115], "8": [134, 139], "9": [149, 154], "10": [174, 179], "11": [198], "12": [211, 215, 216, 219, 226], "14": [269], "15": [280], "16": [322], "17": [333, 340], "18": [375, 382], "19": [392], "21": [446, 453], "22": [503], "23": [511], "24": [526], "25": [580], "26": [588], "28": [684], "29": [792, 798], "30": [832], "31": [858], "32": [871], "33": [890], "34": [921], "35": [937], "36": [949, 958], "37": [967], "38": [985], "39": [995, 999], "40": [1018, 1025, 1026], "41": [1040, 1044, 1047], "43": [1078], "44": [1087], "45": [1104], "46": [1134]}}, {"18": "android/guava/src/com/google/common/collect/ObjectCountHashMap.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n", " * {@code ObjectCountHashMap} uses arrays to store key objects and count values. Comparing to using\n", " * a traditional {@code HashMap} implementation which stores keys and count values as map entries,\n", " * {@code ObjectCountHashMap} minimizes object allocation and reduces memory footprint.\n", "@ElementTypesAreNonnullByDefault\n", "class ObjectCountHashMap<K extends @Nullable Object> {\n", "  static <K extends @Nullable Object> ObjectCountHashMap<K> create() {\n"], "2": ["  static <K extends @Nullable Object> ObjectCountHashMap<K> createWithExpectedSize(\n", "      int expectedSize) {\n"], "3": ["  /*\n", "   * The array fields below are not initialized directly in the constructor, but they're initialized\n", "   * by init(), which the constructor calls.\n", "   */\n", "\n", "  transient @Nullable Object[] keys;\n"], "4": ["    this.keys = new @Nullable Object[expectedSize];\n"], "5": ["  @ParametricNullness\n"], "6": ["    @ParametricNullness final K key;\n"], "7": ["    @ParametricNullness\n"], "8": ["  public int put(@ParametricNullness K key, int value) {\n", "    @Nullable Object[] keys = this.keys;\n"], "9": ["  void insertEntry(int entryIndex, @ParametricNullness K key, int value, int hash) {\n"], "10": ["  int indexOf(@CheckForNull Object key) {\n"], "11": ["  public boolean containsKey(@CheckForNull Object key) {\n", "  public int get(@CheckForNull Object key) {\n", "  public int remove(@CheckForNull Object key) {\n", "  private int remove(@CheckForNull Object key, int hash) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n", " * ObjectCountHashMap is an implementation of {@code AbstractObjectCountMap} that uses arrays to\n", " * store key objects and count values. Comparing to using a traditional {@code HashMap}\n", " * implementation which stores keys and count values as map entries, {@code ObjectCountHashMap}\n", " * minimizes object allocation and reduces memory footprint.\n", "class ObjectCountHashMap<K> {\n", "  public static <K> ObjectCountHashMap<K> create() {\n"], "2": ["  public static <K> ObjectCountHashMap<K> createWithExpectedSize(int expectedSize) {\n"], "3": ["  transient Object[] keys;\n"], "4": ["    this.keys = new Object[expectedSize];\n"], "6": ["    @NullableDecl final K key;\n"], "8": ["  public int put(@NullableDecl K key, int value) {\n", "    Object[] keys = this.keys;\n"], "9": ["  void insertEntry(int entryIndex, @NullableDecl K key, int value, int hash) {\n"], "10": ["  int indexOf(@NullableDecl Object key) {\n"], "11": ["  public boolean containsKey(@NullableDecl Object key) {\n", "  public int get(@NullableDecl Object key) {\n", "  public int remove(@NullableDecl Object key) {\n", "  private int remove(@NullableDecl Object key, int hash) {\n"]}, "added_lines": {"1": [31, 32, 35, 36, 37, 42, 43, 46], "2": [59, 60], "3": [79, 80, 81, 82, 83, 85], "4": [150], "5": [190], "6": [212], "7": [223], "8": [283, 286], "9": [328], "10": [389], "11": [402, 406, 412, 416]}, "removed_lines": {"1": [31, 34, 35, 36, 37, 42, 45], "2": [58], "3": [78], "4": [143], "6": [204], "8": [274, 277], "9": [319], "10": [380], "11": [393, 397, 403, 407]}}, {"19": "android/guava/src/com/google/common/collect/ObjectCountLinkedHashMap.java", "added": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n", " * {@code ObjectCountLinkedHashMap} is a subclass of {@code ObjectCountHashMap} with insertion\n", "@ElementTypesAreNonnullByDefault\n", "class ObjectCountLinkedHashMap<K extends @Nullable Object> extends ObjectCountHashMap<K> {\n", "  static <K extends @Nullable Object> ObjectCountLinkedHashMap<K> create() {\n"], "2": ["  static <K extends @Nullable Object> ObjectCountLinkedHashMap<K> createWithExpectedSize(\n", "      int expectedSize) {\n", "  /*\n", "   * The links field is not initialized directly in the constructor, but it's initialized by init(),\n", "   * which the superconstructor calls.\n", "   */\n", "\n"], "3": ["  void insertEntry(int entryIndex, @ParametricNullness K key, int value, int hash) {\n"]}, "removed": {"1": [" * ObjectCountLinkedHashMap is an implementation of {@code AbstractObjectCountMap} with insertion\n", "class ObjectCountLinkedHashMap<K> extends ObjectCountHashMap<K> {\n", "  public static <K> ObjectCountLinkedHashMap<K> create() {\n"], "2": ["  public static <K> ObjectCountLinkedHashMap<K> createWithExpectedSize(int expectedSize) {\n"], "3": ["  void insertEntry(int entryIndex, K key, int value, int hash) {\n"]}, "added_lines": {"1": [21, 24, 31, 32, 34], "2": [47, 48, 54, 55, 56, 57, 58], "3": [152]}, "removed_lines": {"1": [23, 30, 32], "2": [45], "3": [144]}}, {"20": "android/guava/src/com/google/common/collect/RegularImmutableMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  @LazyInit @CheckForNull private transient ImmutableSet<E> elementSet;\n"], "4": ["  public int count(@CheckForNull Object element) {\n"], "5": ["    public boolean contains(@CheckForNull Object object) {\n"], "6": ["    // \"extends Object\" works around https://github.com/typetools/checker-framework/issues/3013\n", "    SerializedForm(Multiset<? extends Object> multiset) {\n", "      for (Entry<? extends Object> entry : multiset.entrySet()) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "3": ["  @LazyInit private transient ImmutableSet<E> elementSet;\n"], "4": ["  public int count(@NullableDecl Object element) {\n"], "5": ["    public boolean contains(@NullableDecl Object object) {\n"], "6": ["    SerializedForm(Multiset<?> multiset) {\n", "      for (Entry<?> entry : multiset.entrySet()) {\n"]}, "added_lines": {"1": [24], "2": [34], "3": [42], "4": [59], "5": [83], "6": [108, 109, 114]}, "removed_lines": {"1": [24], "3": [41], "4": [58], "5": [82], "6": [107, 112]}}, {"21": "android/guava/src/com/google/common/collect/RegularImmutableSortedMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  @CheckForNull\n", "  @CheckForNull\n", "  public int count(@CheckForNull Object element) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "3": ["  public int count(@NullableDecl Object element) {\n"]}, "added_lines": {"1": [25], "2": [34], "3": [71, 77, 83]}, "removed_lines": {"1": [25], "3": [80]}}, {"22": "android/guava/src/com/google/common/collect/SortedMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["// TODO(cpovirk): // TODO(cpovirk): @ElementTypesAreNonnullByDefault\n", "public interface SortedMultiset<E extends @Nullable Object>\n", "    extends SortedMultisetBridge<E>, SortedIterable<E> {\n"], "3": ["  // TODO(cpovirk): @CheckForNull\n", "  // TODO(cpovirk): @CheckForNull\n", "  @CheckForNull\n", "  @CheckForNull\n"], "4": ["  SortedMultiset<E> headMultiset(@ParametricNullness E upperBound, BoundType boundType);\n"], "5": ["      @ParametricNullness E lowerBound,\n", "      BoundType lowerBoundType,\n", "      @ParametricNullness E upperBound,\n", "      BoundType upperBoundType);\n"], "6": ["  SortedMultiset<E> tailMultiset(@ParametricNullness E lowerBound, BoundType boundType);\n"]}, "removed": {"2": ["public interface SortedMultiset<E> extends SortedMultisetBridge<E>, SortedIterable<E> {\n"], "4": ["  SortedMultiset<E> headMultiset(E upperBound, BoundType boundType);\n"], "5": ["      E lowerBound, BoundType lowerBoundType, E upperBound, BoundType upperBoundType);\n"], "6": ["  SortedMultiset<E> tailMultiset(E lowerBound, BoundType boundType);\n"]}, "added_lines": {"1": [25, 26], "2": [47, 48, 49], "3": [61, 68, 75, 82], "4": [126], "5": [141, 142, 143, 144], "6": [155]}, "removed_lines": {"2": [45], "4": [118], "5": [133], "6": [144]}}, {"23": "android/guava/src/com/google/common/collect/SortedMultisetBridge.java", "added": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "interface SortedMultisetBridge<E extends @Nullable Object> extends Multiset<E> {\n"]}, "removed": {"2": ["interface SortedMultisetBridge<E> extends Multiset<E> {\n"]}, "added_lines": {"1": [21], "2": [31, 32]}, "removed_lines": {"2": [30]}}, {"24": "android/guava/src/com/google/common/collect/SortedMultisets.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "  @SuppressWarnings(\"JdkObsolete\") // TODO(b/6160855): Switch GWT emulations to NavigableSet.\n", "  static class ElementSet<E extends @Nullable Object> extends Multisets.ElementSet<E>\n", "      implements SortedSet<E> {\n"], "3": ["    public SortedSet<E> subSet(@ParametricNullness E fromElement, @ParametricNullness E toElement) {\n", "    public SortedSet<E> headSet(@ParametricNullness E toElement) {\n", "    public SortedSet<E> tailSet(@ParametricNullness E fromElement) {\n", "    @ParametricNullness\n", "    @ParametricNullness\n"], "4": ["  static class NavigableElementSet<E extends @Nullable Object> extends ElementSet<E>\n", "      implements NavigableSet<E> {\n", "    @CheckForNull\n", "    public E lower(@ParametricNullness E e) {\n", "    @CheckForNull\n", "    public E floor(@ParametricNullness E e) {\n", "    @CheckForNull\n", "    public E ceiling(@ParametricNullness E e) {\n", "    @CheckForNull\n", "    public E higher(@ParametricNullness E e) {\n"], "5": ["    @CheckForNull\n", "    @CheckForNull\n", "        @ParametricNullness E fromElement,\n", "        boolean fromInclusive,\n", "        @ParametricNullness E toElement,\n", "        boolean toInclusive) {\n"], "6": ["    public NavigableSet<E> headSet(@ParametricNullness E toElement, boolean inclusive) {\n", "    public NavigableSet<E> tailSet(@ParametricNullness E fromElement, boolean inclusive) {\n", "  private static <E extends @Nullable Object> E getElementOrThrow(@CheckForNull Entry<E> entry) {\n", "  @CheckForNull\n", "  private static <E extends @Nullable Object> E getElementOrNull(@CheckForNull Entry<E> entry) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "2": ["  static class ElementSet<E> extends Multisets.ElementSet<E> implements SortedSet<E> {\n"], "3": ["    public SortedSet<E> subSet(E fromElement, E toElement) {\n", "    public SortedSet<E> headSet(E toElement) {\n", "    public SortedSet<E> tailSet(E fromElement) {\n"], "4": ["  static class NavigableElementSet<E> extends ElementSet<E> implements NavigableSet<E> {\n", "    public E lower(E e) {\n", "    public E floor(E e) {\n", "    public E ceiling(E e) {\n", "    public E higher(E e) {\n"], "5": ["        E fromElement, boolean fromInclusive, E toElement, boolean toInclusive) {\n"], "6": ["    public NavigableSet<E> headSet(E toElement, boolean inclusive) {\n", "    public NavigableSet<E> tailSet(E fromElement, boolean inclusive) {\n", "  private static <E> E getElementOrThrow(Entry<E> entry) {\n", "  private static <E> E getElementOrNull(@NullableDecl Entry<E> entry) {\n"]}, "added_lines": {"1": [31, 32], "2": [40, 45, 46, 47], "3": [70, 75, 80, 85, 91], "4": [99, 100, 106, 107, 112, 113, 118, 119, 124, 125], "5": [140, 146, 153, 154, 155, 156], "6": [165, 171, 177, 184, 185]}, "removed_lines": {"1": [31], "2": [43], "3": [66, 71, 76], "4": [93, 99, 104, 109, 114], "5": [140], "6": [149, 155, 161, 168]}}, {"25": "android/guava/src/com/google/common/collect/TreeMultiset.java", "added": {"1": ["import static com.google.common.collect.NullnessCasts.uncheckedCastNullableTToT;\n", "import static java.util.Objects.requireNonNull;\n"], "2": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "3": ["@ElementTypesAreNonnullByDefault\n", "public final class TreeMultiset<E extends @Nullable Object> extends AbstractSortedMultiset<E>\n", "    implements Serializable {\n"], "4": ["  public static <E extends @Nullable Object> TreeMultiset<E> create(\n", "      @CheckForNull Comparator<? super E> comparator) {\n"], "5": ["    this.header = new AvlNode<>();\n"], "6": ["      long treeAggregate(@CheckForNull AvlNode<?> root) {\n"], "7": ["      long treeAggregate(@CheckForNull AvlNode<?> root) {\n", "    abstract long treeAggregate(@CheckForNull AvlNode<?> root);\n"], "8": ["  private long aggregateBelowRange(Aggregate aggr, @CheckForNull AvlNode<E> node) {\n", "    // The cast is safe because we call this method only if hasLowerBound().\n", "    int cmp =\n", "        comparator()\n", "            .compare(uncheckedCastNullableTToT(range.getLowerEndpoint()), node.getElement());\n"], "9": ["  private long aggregateAboveRange(Aggregate aggr, @CheckForNull AvlNode<E> node) {\n", "    // The cast is safe because we call this method only if hasUpperBound().\n", "    int cmp =\n", "        comparator()\n", "            .compare(uncheckedCastNullableTToT(range.getUpperEndpoint()), node.getElement());\n"], "10": ["  static int distinctElements(@CheckForNull AvlNode<?> node) {\n", "  public int count(@CheckForNull Object element) {\n"], "11": ["  public int add(@ParametricNullness E element, int occurrences) {\n"], "12": ["  public int remove(@CheckForNull Object element, int occurrences) {\n"], "13": ["  public int setCount(@ParametricNullness E element, int count) {\n"], "14": ["  public boolean setCount(@ParametricNullness E element, int oldCount, int newCount) {\n"], "15": ["      for (AvlNode<E> current = header.succ(); current != header; ) {\n", "        AvlNode<E> next = current.succ();\n"], "16": ["      @ParametricNullness\n"], "17": ["  @CheckForNull\n"], "18": ["      // The cast is safe because of the hasLowerBound check.\n", "      E endpoint = uncheckedCastNullableTToT(range.getLowerEndpoint());\n", "      node = root.ceiling(comparator(), endpoint);\n", "        node = node.succ();\n", "      node = header.succ();\n", "  @CheckForNull\n"], "19": ["      // The cast is safe because of the hasUpperBound check.\n", "      E endpoint = uncheckedCastNullableTToT(range.getUpperEndpoint());\n", "      node = root.floor(comparator(), endpoint);\n", "        node = node.pred();\n", "      node = header.pred();\n"], "20": ["      @CheckForNull AvlNode<E> current = firstNode();\n", "      @CheckForNull Entry<E> prevEntry;\n"], "21": ["        // requireNonNull is safe because current is only nulled out after iteration is complete.\n", "        Entry<E> result = wrapEntry(requireNonNull(current));\n", "        if (current.succ() == header) {\n", "          current = current.succ();\n", "        checkState(prevEntry != null, \"no calls to next() since the last call to remove()\");\n"], "22": ["      @CheckForNull AvlNode<E> current = lastNode();\n", "      @CheckForNull Entry<E> prevEntry = null;\n"], "23": ["        // requireNonNull is safe because current is only nulled out after iteration is complete.\n", "        requireNonNull(current);\n", "        if (current.pred() == header) {\n", "          current = current.pred();\n", "        checkState(prevEntry != null, \"no calls to next() since the last call to remove()\");\n"], "24": ["  public SortedMultiset<E> headMultiset(@ParametricNullness E upperBound, BoundType boundType) {\n"], "25": ["  public SortedMultiset<E> tailMultiset(@ParametricNullness E lowerBound, BoundType boundType) {\n"], "26": ["    @CheckForNull private T value;\n", "    @CheckForNull\n", "    public void checkAndSet(@CheckForNull T expected, @CheckForNull T newValue) {\n"], "27": ["  private static final class AvlNode<E extends @Nullable Object> {\n", "    /*\n", "     * For \"normal\" nodes, the type of this field is `E`, not `@Nullable E` (though note that E is a\n", "     * type that can include null, as in a TreeMultiset<@Nullable String>).\n", "     *\n", "     * For the header node, though, this field contains `null`, regardless of the type of the\n", "     * multiset.\n", "     *\n", "     * Most code that operates on an AvlNode never operates on the header node. Such code can access\n", "     * the elem field without a null check by calling getElement().\n", "     */\n", "    @CheckForNull private final E elem;\n"], "28": ["    @CheckForNull private AvlNode<E> left;\n", "    @CheckForNull private AvlNode<E> right;\n", "    /*\n", "     * pred and succ are nullable after construction, but we always call successor() to initialize\n", "     * them immediately thereafter.\n", "     *\n", "     * They may be subsequently nulled out by TreeMultiset.clear(). I think that the only place that\n", "     * we can reference a node whose fields have been cleared is inside the iterator (and presumably\n", "     * only under concurrent modification).\n", "     *\n", "     * To access these fields when you know that they are not null, call the pred() and succ()\n", "     * methods, which perform null checks before returning the fields.\n", "     */\n", "    @CheckForNull private AvlNode<E> pred;\n", "    @CheckForNull private AvlNode<E> succ;\n", "\n", "    AvlNode(@ParametricNullness E elem, int elemCount) {\n"], "29": ["    /** Constructor for the header node. */\n", "    AvlNode() {\n", "      this.elem = null;\n", "      this.elemCount = 1;\n", "    }\n", "\n", "    // For discussion of pred() and succ(), see the comment on the pred and succ fields.\n", "\n", "    private AvlNode<E> pred() {\n", "      return requireNonNull(pred);\n", "    }\n", "\n", "    private AvlNode<E> succ() {\n", "      return requireNonNull(succ);\n", "    }\n", "\n", "    int count(Comparator<? super E> comparator, @ParametricNullness E e) {\n", "      int cmp = comparator.compare(e, getElement());\n"], "30": ["    private AvlNode<E> addRightChild(@ParametricNullness E e, int count) {\n", "      successor(this, right, succ());\n", "    private AvlNode<E> addLeftChild(@ParametricNullness E e, int count) {\n", "      successor(pred(), left, this);\n", "    AvlNode<E> add(\n", "        Comparator<? super E> comparator, @ParametricNullness E e, int count, int[] result) {\n", "      int cmp = comparator.compare(e, getElement());\n"], "31": ["    @CheckForNull\n", "        Comparator<? super E> comparator, @ParametricNullness E e, int count, int[] result) {\n", "      int cmp = comparator.compare(e, getElement());\n"], "32": ["    @CheckForNull\n", "        Comparator<? super E> comparator, @ParametricNullness E e, int count, int[] result) {\n", "      int cmp = comparator.compare(e, getElement());\n"], "33": ["    @CheckForNull\n", "        @ParametricNullness E e,\n", "      int cmp = comparator.compare(e, getElement());\n"], "34": ["    @CheckForNull\n", "      successor(pred(), succ());\n", "        AvlNode<E> newTop = pred();\n"], "35": ["        AvlNode<E> newTop = succ();\n"], "36": ["    @CheckForNull\n"], "37": ["    @CheckForNull\n"], "38": ["          // requireNonNull is safe because right must exist in order to get a negative factor.\n", "          requireNonNull(right);\n", "          // requireNonNull is safe because left must exist in order to get a positive factor.\n", "          requireNonNull(left);\n"], "39": ["    private static long totalCount(@CheckForNull AvlNode<?> node) {\n", "    private static int height(@CheckForNull AvlNode<?> node) {\n", "    @CheckForNull\n", "    private AvlNode<E> ceiling(Comparator<? super E> comparator, @ParametricNullness E e) {\n", "      int cmp = comparator.compare(e, getElement());\n"], "40": ["    @CheckForNull\n", "    private AvlNode<E> floor(Comparator<? super E> comparator, @ParametricNullness E e) {\n", "      int cmp = comparator.compare(e, getElement());\n"], "41": ["    @ParametricNullness\n", "      // For discussion of this cast, see the comment on the elem field.\n", "      return uncheckedCastNullableTToT(elem);\n"], "42": ["  private static <T extends @Nullable Object> void successor(AvlNode<T> a, AvlNode<T> b) {\n", "  private static <T extends @Nullable Object> void successor(\n", "      AvlNode<T> a, AvlNode<T> b, AvlNode<T> c) {\n"], "43": ["    AvlNode<E> header = new AvlNode<>();\n"]}, "removed": {"1": ["import static com.google.common.collect.CollectPreconditions.checkRemove;\n"], "2": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "3": ["public final class TreeMultiset<E> extends AbstractSortedMultiset<E> implements Serializable {\n"], "4": ["  public static <E> TreeMultiset<E> create(@NullableDecl Comparator<? super E> comparator) {\n"], "5": ["    this.header = new AvlNode<E>(null, 1);\n"], "6": ["      long treeAggregate(@NullableDecl AvlNode<?> root) {\n"], "7": ["      long treeAggregate(@NullableDecl AvlNode<?> root) {\n", "    abstract long treeAggregate(@NullableDecl AvlNode<?> root);\n"], "8": ["  private long aggregateBelowRange(Aggregate aggr, @NullableDecl AvlNode<E> node) {\n", "    int cmp = comparator().compare(range.getLowerEndpoint(), node.elem);\n"], "9": ["  private long aggregateAboveRange(Aggregate aggr, @NullableDecl AvlNode<E> node) {\n", "    int cmp = comparator().compare(range.getUpperEndpoint(), node.elem);\n"], "10": ["  static int distinctElements(@NullableDecl AvlNode<?> node) {\n", "  public int count(@NullableDecl Object element) {\n"], "11": ["  public int add(@NullableDecl E element, int occurrences) {\n"], "12": ["  public int remove(@NullableDecl Object element, int occurrences) {\n"], "13": ["  public int setCount(@NullableDecl E element, int count) {\n"], "14": ["  public boolean setCount(@NullableDecl E element, int oldCount, int newCount) {\n"], "15": ["      for (AvlNode<E> current = header.succ; current != header; ) {\n", "        AvlNode<E> next = current.succ;\n"], "17": ["  @NullableDecl\n"], "18": ["      E endpoint = range.getLowerEndpoint();\n", "      node = rootReference.get().ceiling(comparator(), endpoint);\n", "        node = node.succ;\n", "      node = header.succ;\n", "  @NullableDecl\n"], "19": ["      E endpoint = range.getUpperEndpoint();\n", "      node = rootReference.get().floor(comparator(), endpoint);\n", "        node = node.pred;\n", "      node = header.pred;\n"], "20": ["      AvlNode<E> current = firstNode();\n", "      @NullableDecl Entry<E> prevEntry;\n"], "21": ["        Entry<E> result = wrapEntry(current);\n", "        if (current.succ == header) {\n", "          current = current.succ;\n", "        checkRemove(prevEntry != null);\n"], "22": ["      AvlNode<E> current = lastNode();\n", "      Entry<E> prevEntry = null;\n"], "23": ["        if (current.pred == header) {\n", "          current = current.pred;\n", "        checkRemove(prevEntry != null);\n"], "24": ["  public SortedMultiset<E> headMultiset(@NullableDecl E upperBound, BoundType boundType) {\n"], "25": ["  public SortedMultiset<E> tailMultiset(@NullableDecl E lowerBound, BoundType boundType) {\n"], "26": ["    @NullableDecl private T value;\n", "    @NullableDecl\n", "    public void checkAndSet(@NullableDecl T expected, T newValue) {\n"], "27": ["  private static final class AvlNode<E> {\n", "    @NullableDecl private final E elem;\n"], "28": ["    @NullableDecl private AvlNode<E> left;\n", "    @NullableDecl private AvlNode<E> right;\n", "    @NullableDecl private AvlNode<E> pred;\n", "    @NullableDecl private AvlNode<E> succ;\n", "\n", "    AvlNode(@NullableDecl E elem, int elemCount) {\n"], "29": ["    public int count(Comparator<? super E> comparator, E e) {\n", "      int cmp = comparator.compare(e, elem);\n"], "30": ["    private AvlNode<E> addRightChild(E e, int count) {\n", "      successor(this, right, succ);\n", "    private AvlNode<E> addLeftChild(E e, int count) {\n", "      successor(pred, left, this);\n", "    AvlNode<E> add(Comparator<? super E> comparator, @NullableDecl E e, int count, int[] result) {\n", "      int cmp = comparator.compare(e, elem);\n"], "31": ["        Comparator<? super E> comparator, @NullableDecl E e, int count, int[] result) {\n", "      int cmp = comparator.compare(e, elem);\n"], "32": ["        Comparator<? super E> comparator, @NullableDecl E e, int count, int[] result) {\n", "      int cmp = comparator.compare(e, elem);\n"], "33": ["        @NullableDecl E e,\n", "      int cmp = comparator.compare(e, elem);\n"], "34": ["      successor(pred, succ);\n", "        AvlNode<E> newTop = pred;\n"], "35": ["        AvlNode<E> newTop = succ;\n"], "39": ["    private static long totalCount(@NullableDecl AvlNode<?> node) {\n", "    private static int height(@NullableDecl AvlNode<?> node) {\n", "    @NullableDecl\n", "    private AvlNode<E> ceiling(Comparator<? super E> comparator, E e) {\n", "      int cmp = comparator.compare(e, elem);\n"], "40": ["    @NullableDecl\n", "    private AvlNode<E> floor(Comparator<? super E> comparator, E e) {\n", "      int cmp = comparator.compare(e, elem);\n"], "41": ["      return elem;\n"], "42": ["  private static <T> void successor(AvlNode<T> a, AvlNode<T> b) {\n", "  private static <T> void successor(AvlNode<T> a, AvlNode<T> b, AvlNode<T> c) {\n"], "43": ["    AvlNode<E> header = new AvlNode<E>(null, 1);\n"]}, "added_lines": {"1": [22, 23], "2": [38, 39], "3": [60, 61, 62], "4": [92, 93], "5": [128], "6": [142], "7": [153, 160], "8": [175, 179, 180, 181, 182], "9": [201, 205, 206, 207, 208], "10": [237, 242], "11": [258], "12": [280], "13": [304], "14": [326], "15": [352, 353], "16": [375], "17": [393], "18": [401, 402, 403, 409, 412, 417], "19": [425, 426, 427, 433, 436], "20": [449, 450], "21": [469, 470, 472, 475, 482], "22": [492, 493], "23": [512, 513, 516, 519, 526], "24": [539], "25": [547], "26": [555, 557, 562], "27": [574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585], "28": [593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609], "29": [620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637], "30": [647, 649, 656, 658, 665, 666, 671], "31": [711, 713, 714], "32": [764, 766, 767], "33": [814, 817, 821], "34": [878, 882, 888], "35": [896], "36": [906], "37": [919], "38": [949, 950, 956, 957], "39": [996, 1000, 1004, 1005, 1006], "40": [1016, 1017, 1018], "41": [1028, 1030, 1031], "42": [1044, 1049, 1050], "43": [1083]}, "removed_lines": {"1": [22], "2": [37], "3": [58], "4": [88], "5": [123], "6": [137], "7": [148, 155], "8": [170, 174], "9": [193, 197], "10": [226, 231], "11": [247], "12": [269], "13": [293], "14": [315], "15": [341, 342], "17": [381], "18": [389, 390, 396, 399, 404], "19": [412, 413, 419, 422], "20": [435, 436], "21": [455, 457, 460, 467], "22": [477, 478], "23": [499, 502, 509], "24": [522], "25": [530], "26": [538, 540, 545], "27": [557, 558], "28": [566, 567, 568, 569, 570, 571], "29": [582, 583], "30": [593, 595, 602, 604, 611, 616], "31": [657, 658], "32": [709, 710], "33": [759, 763], "34": [823, 829], "35": [837], "39": [931, 935, 939, 940, 941], "40": [951, 952, 953], "41": [964], "42": [977, 982], "43": [1015]}}, {"26": "android/guava/src/com/google/common/collect/UnmodifiableSortedMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "final class UnmodifiableSortedMultiset<E extends @Nullable Object> extends UnmodifiableMultiset<E>\n"], "3": ["  @CheckForNull private transient UnmodifiableSortedMultiset<E> descendingMultiset;\n"], "4": ["  @CheckForNull\n", "  @CheckForNull\n", "  @CheckForNull\n", "  @CheckForNull\n", "  public SortedMultiset<E> headMultiset(@ParametricNullness E upperBound, BoundType boundType) {\n", "      @ParametricNullness E lowerBound,\n", "      BoundType lowerBoundType,\n", "      @ParametricNullness E upperBound,\n", "      BoundType upperBoundType) {\n", "  public SortedMultiset<E> tailMultiset(@ParametricNullness E lowerBound, BoundType boundType) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "2": ["final class UnmodifiableSortedMultiset<E> extends UnmodifiableMultiset<E>\n"], "3": ["  @NullableDecl private transient UnmodifiableSortedMultiset<E> descendingMultiset;\n"], "4": ["  public SortedMultiset<E> headMultiset(E upperBound, BoundType boundType) {\n", "      E lowerBound, BoundType lowerBoundType, E upperBound, BoundType upperBoundType) {\n", "  public SortedMultiset<E> tailMultiset(E lowerBound, BoundType boundType) {\n"]}, "added_lines": {"1": [23, 24], "2": [34, 35], "3": [61], "4": [75, 81, 87, 93, 99, 105, 106, 107, 108, 114]}, "removed_lines": {"1": [23], "2": [33], "3": [59], "4": [93, 99, 105]}}, {"27": "guava/src/com/google/common/collect/AbstractMapBasedMultiset.java", "added": {"1": ["import static com.google.common.base.Preconditions.checkState;\n", "import static java.util.Objects.requireNonNull;\n"], "2": ["import javax.annotation.CheckForNull;\n"], "3": ["@ElementTypesAreNonnullByDefault\n", "abstract class AbstractMapBasedMultiset<E extends @Nullable Object> extends AbstractMultiset<E>\n", "    implements Serializable {\n"], "4": ["      @CheckForNull Map.Entry<E, Count> toRemove;\n"], "5": ["      @ParametricNullness\n"], "6": ["        checkState(toRemove != null, \"no calls to next() since the last call to remove()\");\n"], "7": ["      @CheckForNull Map.Entry<E, Count> toRemove;\n"], "8": ["          @ParametricNullness\n"], "9": ["        checkState(toRemove != null, \"no calls to next() since the last call to remove()\");\n"], "10": ["    @CheckForNull Map.Entry<E, Count> currentEntry;\n"], "11": ["    @ParametricNullness\n"], "12": ["      /*\n", "       * requireNonNull is safe because occurrencesLeft starts at 0, forcing us to initialize\n", "       * currentEntry above. After that, we never clear it.\n", "       */\n", "      return requireNonNull(currentEntry).getKey();\n", "      /*\n", "       * requireNonNull is safe because canRemove is set to true only after we initialize\n", "       * currentEntry (which we never subsequently clear).\n", "       */\n", "      int frequency = requireNonNull(currentEntry).getValue().get();\n"], "13": ["  public int count(@CheckForNull Object element) {\n"], "14": ["  public int add(@ParametricNullness E element, int occurrences) {\n"], "15": ["  public int remove(@CheckForNull Object element, int occurrences) {\n"], "16": ["  public int setCount(@ParametricNullness E element, int count) {\n"], "17": ["  private static int getAndSet(@CheckForNull Count i, int count) {\n"]}, "removed": {"3": ["abstract class AbstractMapBasedMultiset<E> extends AbstractMultiset<E> implements Serializable {\n"], "4": ["      Map.@Nullable Entry<E, Count> toRemove;\n"], "6": ["        checkRemove(toRemove != null);\n"], "7": ["      Map.@Nullable Entry<E, Count> toRemove;\n"], "9": ["        checkRemove(toRemove != null);\n"], "10": ["    Map.@Nullable Entry<E, Count> currentEntry;\n"], "12": ["      return currentEntry.getKey();\n", "      int frequency = currentEntry.getValue().get();\n"], "13": ["  public int count(@Nullable Object element) {\n"], "14": ["  public int add(@Nullable E element, int occurrences) {\n"], "15": ["  public int remove(@Nullable Object element, int occurrences) {\n"], "16": ["  public int setCount(@Nullable E element, int count) {\n"], "17": ["  private static int getAndSet(@Nullable Count i, int count) {\n"]}, "added_lines": {"1": [21, 24], "2": [38], "3": [50, 51, 52], "4": [92], "5": [100], "6": [109], "7": [121], "8": [134], "9": [155], "10": [202], "11": [216], "12": [224, 225, 226, 227, 228, 234, 235, 236, 237, 238], "13": [251], "14": [266], "15": [288], "16": [316], "17": [337]}, "removed_lines": {"3": [47], "4": [87], "6": [103], "7": [115], "9": [148], "10": [195], "12": [216, 222], "13": [235], "14": [250], "15": [272], "16": [300], "17": [321]}}, {"28": "guava/src/com/google/common/collect/AbstractMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "abstract class AbstractMultiset<E extends @Nullable Object> extends AbstractCollection<E>\n", "    implements Multiset<E> {\n"], "3": ["  public boolean contains(@CheckForNull Object element) {\n", "  public final boolean add(@ParametricNullness E element) {\n", "  public int add(@ParametricNullness E element, int occurrences) {\n", "  public final boolean remove(@CheckForNull Object element) {\n", "  public int remove(@CheckForNull Object element, int occurrences) {\n", "  public int setCount(@ParametricNullness E element, int count) {\n", "  public boolean setCount(@ParametricNullness E element, int oldCount, int newCount) {\n"], "4": ["  @LazyInit @CheckForNull private transient Set<E> elementSet;\n"], "5": ["  @LazyInit @CheckForNull private transient Set<Entry<E>> entrySet;\n"], "6": ["  public final boolean equals(@CheckForNull Object object) {\n"]}, "removed": {"2": ["abstract class AbstractMultiset<E> extends AbstractCollection<E> implements Multiset<E> {\n"], "3": ["  public boolean contains(@Nullable Object element) {\n", "  public final boolean add(@Nullable E element) {\n", "  public int add(@Nullable E element, int occurrences) {\n", "  public final boolean remove(@Nullable Object element) {\n", "  public int remove(@Nullable Object element, int occurrences) {\n", "  public int setCount(@Nullable E element, int count) {\n", "  public boolean setCount(@Nullable E element, int oldCount, int newCount) {\n"], "4": ["  @LazyInit private transient @Nullable Set<E> elementSet;\n"], "5": ["  @LazyInit private transient @Nullable Set<Entry<E>> entrySet;\n"], "6": ["  public final boolean equals(@Nullable Object object) {\n"]}, "added_lines": {"1": [29], "2": [46, 47, 48], "3": [57, 64, 71, 77, 83, 89, 95], "4": [130], "5": [164], "6": [210]}, "removed_lines": {"2": [45], "3": [54, 61, 68, 74, 80, 86, 92], "4": [127], "5": [161], "6": [207]}}, {"29": "guava/src/com/google/common/collect/AbstractSortedMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "abstract class AbstractSortedMultiset<E extends @Nullable Object> extends AbstractMultiset<E>\n", "    implements SortedMultiset<E> {\n"], "3": ["  @CheckForNull\n", "  @CheckForNull\n", "  @CheckForNull\n"], "4": ["  @CheckForNull\n"], "5": ["      @ParametricNullness E fromElement,\n", "      @ParametricNullness E toElement,\n"], "6": ["  @CheckForNull private transient SortedMultiset<E> descendingMultiset;\n"]}, "removed": {"2": ["abstract class AbstractSortedMultiset<E> extends AbstractMultiset<E> implements SortedMultiset<E> {\n"], "5": ["      @Nullable E fromElement,\n", "      @Nullable E toElement,\n"], "6": ["  private transient @Nullable SortedMultiset<E> descendingMultiset;\n"]}, "added_lines": {"1": [24], "2": [37, 38, 39], "3": [68, 75, 82], "4": [95], "5": [109, 111], "6": [125]}, "removed_lines": {"2": [36], "5": [102, 104], "6": [118]}}, {"30": "guava/src/com/google/common/collect/ConcurrentHashMultiset.java", "added": {"1": ["import static com.google.common.base.Preconditions.checkState;\n"], "2": ["import javax.annotation.CheckForNull;\n"], "3": ["@ElementTypesAreNonnullByDefault\n"], "4": ["  public int count(@CheckForNull Object element) {\n"], "5": ["  /*\n", "   * Our checker says \"found: T[]; required: T[].\" That sounds bogus. I discuss a possible reason\n", "   * for this error in https://github.com/jspecify/checker-framework/issues/10.\n", "   */\n", "  @SuppressWarnings(\"nullness\")\n", "  public <T extends @Nullable Object> T[] toArray(T[] array) {\n"], "6": ["  public int remove(@CheckForNull Object element, int occurrences) {\n"], "7": ["  public boolean removeExactly(@CheckForNull Object element, int occurrences) {\n"], "8": ["      public boolean contains(@CheckForNull Object object) {\n"], "9": ["      public boolean remove(@CheckForNull Object object) {\n"], "10": ["      @CheckForNull private Entry<E> last;\n"], "11": ["        checkState(last != null, \"no calls to next() since the last call to remove()\");\n"], "12": ["    /*\n", "     * Our checker says \"found: T[]; required: T[].\" That sounds bogus. I discuss a possible reason\n", "     * for this error in https://github.com/jspecify/checker-framework/issues/10.\n", "     */\n", "    @SuppressWarnings(\"nullness\")\n", "    public <T extends @Nullable Object> T[] toArray(T[] array) {\n"]}, "removed": {"1": ["import static com.google.common.collect.CollectPreconditions.checkRemove;\n"], "4": ["  public int count(@Nullable Object element) {\n"], "5": ["  public <T> T[] toArray(T[] array) {\n"], "6": ["  public int remove(@Nullable Object element, int occurrences) {\n"], "7": ["  public boolean removeExactly(@Nullable Object element, int occurrences) {\n"], "8": ["      public boolean contains(@Nullable Object object) {\n"], "9": ["      public boolean remove(Object object) {\n"], "10": ["      private @Nullable Entry<E> last;\n"], "11": ["        checkRemove(last != null);\n"], "12": ["    public <T> T[] toArray(T[] array) {\n"]}, "added_lines": {"1": [21], "2": [44], "3": [60], "4": [142], "5": [173, 174, 175, 176, 177, 178], "6": [277], "7": [318], "8": [464], "9": [474], "10": [532], "11": [547], "12": [582, 583, 584, 585, 586, 587]}, "removed_lines": {"1": [22], "4": [140], "5": [171], "6": [270], "7": [311], "8": [457], "9": [467], "10": [525], "11": [540], "12": [575]}}, {"31": "guava/src/com/google/common/collect/DescendingImmutableSortedMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  public int count(@CheckForNull Object element) {\n", "  @CheckForNull\n", "  @CheckForNull\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "3": ["  public int count(@Nullable Object element) {\n"]}, "added_lines": {"1": [18], "2": [27], "3": [36, 41, 47]}, "removed_lines": {"1": [18], "3": [35]}}, {"32": "guava/src/com/google/common/collect/DescendingMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "abstract class DescendingMultiset<E extends @Nullable Object> extends ForwardingMultiset<E>\n", "    implements SortedMultiset<E> {\n", "  @CheckForNull private transient Comparator<? super E> comparator;\n"], "3": ["  @CheckForNull private transient NavigableSet<E> elementSet;\n"], "4": ["  @CheckForNull\n", "  @CheckForNull\n", "  public SortedMultiset<E> headMultiset(@ParametricNullness E toElement, BoundType boundType) {\n", "      @ParametricNullness E fromElement,\n", "      BoundType fromBoundType,\n", "      @ParametricNullness E toElement,\n", "      BoundType toBoundType) {\n", "  public SortedMultiset<E> tailMultiset(@ParametricNullness E fromElement, BoundType boundType) {\n"], "5": ["  @CheckForNull\n", "  @CheckForNull\n", "  @CheckForNull private transient Set<Entry<E>> entrySet;\n"], "6": ["  public @Nullable Object[] toArray() {\n", "  /*\n", "   * Our checker says \"found: T[]; required: T[].\" That sounds bogus. I discuss a possible reason\n", "   * for this error in https://github.com/jspecify/checker-framework/issues/10.\n", "   */\n", "  @SuppressWarnings(\"nullness\")\n", "  public <T extends @Nullable Object> T[] toArray(T[] array) {\n"]}, "removed": {"2": ["abstract class DescendingMultiset<E> extends ForwardingMultiset<E> implements SortedMultiset<E> {\n", "  private transient @Nullable Comparator<? super E> comparator;\n"], "3": ["  private transient @Nullable NavigableSet<E> elementSet;\n"], "4": ["  public SortedMultiset<E> headMultiset(E toElement, BoundType boundType) {\n", "      E fromElement, BoundType fromBoundType, E toElement, BoundType toBoundType) {\n", "  public SortedMultiset<E> tailMultiset(E fromElement, BoundType boundType) {\n"], "5": ["  private transient @Nullable Set<Entry<E>> entrySet;\n"], "6": ["  public Object[] toArray() {\n", "  public <T> T[] toArray(T[] array) {\n"]}, "added_lines": {"1": [25], "2": [35, 36, 37, 40], "3": [51], "4": [63, 69, 75, 81, 82, 83, 84, 91], "5": [106, 112, 119], "6": [154, 159, 160, 161, 162, 163, 164]}, "removed_lines": {"2": [34, 37], "3": [48], "4": [70, 76, 83], "5": [109], "6": [144, 149]}}, {"33": "guava/src/com/google/common/collect/EnumMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  private boolean isActuallyE(@CheckForNull Object o) {\n"], "4": ["  private void checkIsE(Object element) {\n"], "5": ["  public int count(@CheckForNull Object element) {\n", "    // isActuallyE checks for null, but we check explicitly to help nullness checkers.\n", "    if (element == null || !isActuallyE(element)) {\n"], "6": ["  public int remove(@CheckForNull Object element, int occurrences) {\n", "    // isActuallyE checks for null, but we check explicitly to help nullness checkers.\n", "    if (element == null || !isActuallyE(element)) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "3": ["  private boolean isActuallyE(@Nullable Object o) {\n"], "4": ["  void checkIsE(@Nullable Object element) {\n"], "5": ["  public int count(@Nullable Object element) {\n", "    if (!isActuallyE(element)) {\n"], "6": ["  public int remove(@Nullable Object element, int occurrences) {\n", "    if (!isActuallyE(element)) {\n"]}, "added_lines": {"1": [34], "2": [48], "3": [98], "4": [111], "5": [129, 130, 131], "6": [162, 163, 164]}, "removed_lines": {"1": [34], "3": [97], "4": [110], "5": [128, 129], "6": [160, 161]}}, {"34": "guava/src/com/google/common/collect/ForwardingMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "public abstract class ForwardingMultiset<E extends @Nullable Object> extends ForwardingCollection<E>\n", "    implements Multiset<E> {\n"], "3": ["  public int count(@CheckForNull Object element) {\n", "  public int add(@ParametricNullness E element, int occurrences) {\n", "  public int remove(@CheckForNull Object element, int occurrences) {\n"], "4": ["  public boolean equals(@CheckForNull Object object) {\n"], "5": ["  public int setCount(@ParametricNullness E element, int count) {\n", "  public boolean setCount(@ParametricNullness E element, int oldCount, int newCount) {\n"], "6": ["  protected boolean standardContains(@CheckForNull Object object) {\n"], "7": ["  protected int standardCount(@CheckForNull Object object) {\n"], "8": ["  protected boolean standardAdd(@ParametricNullness E element) {\n"], "9": ["  protected boolean standardRemove(@CheckForNull Object element) {\n"], "10": ["  protected int standardSetCount(@ParametricNullness E element, int count) {\n"], "11": ["  protected boolean standardSetCount(@ParametricNullness E element, int oldCount, int newCount) {\n"], "12": ["  protected boolean standardEquals(@CheckForNull Object object) {\n"]}, "removed": {"2": ["public abstract class ForwardingMultiset<E> extends ForwardingCollection<E> implements Multiset<E> {\n"], "3": ["  public int count(Object element) {\n", "  public int add(E element, int occurrences) {\n", "  public int remove(Object element, int occurrences) {\n"], "4": ["  public boolean equals(@Nullable Object object) {\n"], "5": ["  public int setCount(E element, int count) {\n", "  public boolean setCount(E element, int oldCount, int newCount) {\n"], "6": ["  protected boolean standardContains(@Nullable Object object) {\n"], "7": ["  protected int standardCount(@Nullable Object object) {\n"], "8": ["  protected boolean standardAdd(E element) {\n"], "9": ["  protected boolean standardRemove(Object element) {\n"], "10": ["  protected int standardSetCount(E element, int count) {\n"], "11": ["  protected boolean standardSetCount(E element, int oldCount, int newCount) {\n"], "12": ["  protected boolean standardEquals(@Nullable Object object) {\n"]}, "added_lines": {"1": [26], "2": [52, 53, 54], "3": [63, 69, 75], "4": [90], "5": [101, 107], "6": [118], "7": [142], "8": [158], "9": [184], "10": [220], "11": [231], "12": [291]}, "removed_lines": {"2": [51], "3": [60, 66, 72], "4": [87], "5": [98, 104], "6": [115], "7": [139], "8": [155], "9": [181], "10": [217], "11": [228], "12": [288]}}, {"35": "guava/src/com/google/common/collect/ForwardingSortedMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "public abstract class ForwardingSortedMultiset<E extends @Nullable Object>\n", "    extends ForwardingMultiset<E> implements SortedMultiset<E> {\n"], "3": ["  @CheckForNull\n"], "4": ["  @CheckForNull\n"], "5": ["  @CheckForNull\n"], "6": ["  @CheckForNull\n"], "7": ["  @CheckForNull\n"], "8": ["  @CheckForNull\n"], "9": ["  @CheckForNull\n"], "10": ["  @CheckForNull\n"], "11": ["  public SortedMultiset<E> headMultiset(@ParametricNullness E upperBound, BoundType boundType) {\n", "      @ParametricNullness E lowerBound,\n", "      BoundType lowerBoundType,\n", "      @ParametricNullness E upperBound,\n", "      BoundType upperBoundType) {\n"], "12": ["      @ParametricNullness E lowerBound,\n", "      BoundType lowerBoundType,\n", "      @ParametricNullness E upperBound,\n", "      BoundType upperBoundType) {\n", "  public SortedMultiset<E> tailMultiset(@ParametricNullness E lowerBound, BoundType boundType) {\n"]}, "removed": {"2": ["public abstract class ForwardingSortedMultiset<E> extends ForwardingMultiset<E>\n", "    implements SortedMultiset<E> {\n"], "11": ["  public SortedMultiset<E> headMultiset(E upperBound, BoundType boundType) {\n", "      E lowerBound, BoundType lowerBoundType, E upperBound, BoundType upperBoundType) {\n"], "12": ["      E lowerBound, BoundType lowerBoundType, E upperBound, BoundType upperBoundType) {\n", "  public SortedMultiset<E> tailMultiset(E lowerBound, BoundType boundType) {\n"]}, "added_lines": {"1": [22, 23], "2": [49, 50, 51], "3": [116], "4": [127], "5": [138], "6": [150], "7": [161], "8": [172], "9": [185], "10": [197], "11": [210, 216, 217, 218, 219], "12": [232, 233, 234, 235, 240]}, "removed_lines": {"2": [47, 48], "11": [199, 205], "12": [218, 223]}}, {"36": "guava/src/com/google/common/collect/GeneralRange.java", "added": {"1": ["import static com.google.common.collect.NullnessCasts.uncheckedCastNullableTToT;\n", "import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "final class GeneralRange<T extends @Nullable Object> implements Serializable {\n", "    T lowerEndpoint = range.hasLowerBound() ? range.lowerEndpoint() : null;\n", "    T upperEndpoint = range.hasUpperBound() ? range.upperEndpoint() : null;\n"], "3": ["  static <T extends @Nullable Object> GeneralRange<T> all(Comparator<? super T> comparator) {\n"], "4": ["  static <T extends @Nullable Object> GeneralRange<T> downTo(\n", "      Comparator<? super T> comparator, @ParametricNullness T endpoint, BoundType boundType) {\n"], "5": ["  static <T extends @Nullable Object> GeneralRange<T> upTo(\n", "      Comparator<? super T> comparator, @ParametricNullness T endpoint, BoundType boundType) {\n"], "6": ["  static <T extends @Nullable Object> GeneralRange<T> range(\n", "      @ParametricNullness T lower,\n", "      @ParametricNullness T upper,\n", "  @CheckForNull private final T lowerEndpoint;\n", "  @CheckForNull private final T upperEndpoint;\n", "      @CheckForNull T lowerEndpoint,\n", "      @CheckForNull T upperEndpoint,\n"], "7": ["    // Trigger any exception that the comparator would throw for the endpoints.\n", "    /*\n", "     * uncheckedCastNullableTToT is safe as long as the callers are careful to pass a \"real\" T\n", "     * whenever they pass `true` for the matching `has*Bound` parameter.\n", "     */\n", "      comparator.compare(\n", "          uncheckedCastNullableTToT(lowerEndpoint), uncheckedCastNullableTToT(lowerEndpoint));\n", "      comparator.compare(\n", "          uncheckedCastNullableTToT(upperEndpoint), uncheckedCastNullableTToT(upperEndpoint));\n", "\n", "      int cmp =\n", "          comparator.compare(\n", "              uncheckedCastNullableTToT(lowerEndpoint), uncheckedCastNullableTToT(upperEndpoint));\n"], "8": ["    // The casts are safe because of the has*Bound() checks.\n", "    return (hasUpperBound() && tooLow(uncheckedCastNullableTToT(getUpperEndpoint())))\n", "        || (hasLowerBound() && tooHigh(uncheckedCastNullableTToT(getLowerEndpoint())));\n", "  boolean tooLow(@ParametricNullness T t) {\n", "    // The cast is safe because of the hasLowerBound() check.\n", "    T lbound = uncheckedCastNullableTToT(getLowerEndpoint());\n", "  boolean tooHigh(@ParametricNullness T t) {\n", "    // The cast is safe because of the hasUpperBound() check.\n", "    T ubound = uncheckedCastNullableTToT(getUpperEndpoint());\n", "  boolean contains(@ParametricNullness T t) {\n", "  @SuppressWarnings(\"nullness\") // TODO(cpovirk): Add casts as needed. Will be noisy and annoying...\n", "    T lowEnd = getLowerEndpoint();\n"], "9": ["    T upEnd = getUpperEndpoint();\n"], "10": ["  public boolean equals(@CheckForNull Object obj) {\n"], "11": ["  @CheckForNull private transient GeneralRange<T> reverse;\n"], "12": ["  @CheckForNull\n"], "13": ["  @CheckForNull\n"]}, "removed": {"2": ["final class GeneralRange<T> implements Serializable {\n", "    @Nullable T lowerEndpoint = range.hasLowerBound() ? range.lowerEndpoint() : null;\n", "    @Nullable T upperEndpoint = range.hasUpperBound() ? range.upperEndpoint() : null;\n"], "3": ["  static <T> GeneralRange<T> all(Comparator<? super T> comparator) {\n"], "4": ["  static <T> GeneralRange<T> downTo(\n", "      Comparator<? super T> comparator, @Nullable T endpoint, BoundType boundType) {\n"], "5": ["  static <T> GeneralRange<T> upTo(\n", "      Comparator<? super T> comparator, @Nullable T endpoint, BoundType boundType) {\n"], "6": ["  static <T> GeneralRange<T> range(\n", "      @Nullable T lower,\n", "      @Nullable T upper,\n", "  private final @Nullable T lowerEndpoint;\n", "  private final @Nullable T upperEndpoint;\n", "      @Nullable T lowerEndpoint,\n", "      @Nullable T upperEndpoint,\n"], "7": ["      comparator.compare(lowerEndpoint, lowerEndpoint);\n", "      comparator.compare(upperEndpoint, upperEndpoint);\n", "      int cmp = comparator.compare(lowerEndpoint, upperEndpoint);\n"], "8": ["    return (hasUpperBound() && tooLow(getUpperEndpoint()))\n", "        || (hasLowerBound() && tooHigh(getLowerEndpoint()));\n", "  boolean tooLow(@Nullable T t) {\n", "    T lbound = getLowerEndpoint();\n", "  boolean tooHigh(@Nullable T t) {\n", "    T ubound = getUpperEndpoint();\n", "  boolean contains(@Nullable T t) {\n", "    @Nullable T lowEnd = getLowerEndpoint();\n"], "9": ["    @Nullable T upEnd = getUpperEndpoint();\n"], "10": ["  public boolean equals(@Nullable Object obj) {\n"], "11": ["  private transient @Nullable GeneralRange<T> reverse;\n"]}, "added_lines": {"1": [21, 27], "2": [40, 41, 44, 47], "3": [60], "4": [68, 69], "5": [77, 78], "6": [86, 88, 90, 97, 100, 106, 109], "7": [119, 120, 121, 122, 123, 125, 126, 129, 130, 132, 134, 135, 136], "8": [159, 160, 161, 164, 168, 169, 174, 178, 179, 184, 191, 197], "9": [212], "10": [240], "11": [264], "12": [296], "13": [305]}, "removed_lines": {"2": [38, 41, 44], "3": [57], "4": [65, 66], "5": [74, 75], "6": [83, 85, 87, 94, 97, 103, 106], "7": [117, 120, 123], "8": [146, 147, 150, 154, 159, 163, 168, 180], "9": [195], "10": [223], "11": [247]}}, {"37": "guava/src/com/google/common/collect/HashMultiset.java", "added": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "public final class HashMultiset<E extends @Nullable Object> extends AbstractMapBasedMultiset<E> {\n", "  public static <E extends @Nullable Object> HashMultiset<E> create() {\n"], "3": ["  public static <E extends @Nullable Object> HashMultiset<E> create(int distinctElements) {\n"], "4": ["  public static <E extends @Nullable Object> HashMultiset<E> create(\n", "      Iterable<? extends E> elements) {\n"]}, "removed": {"2": ["public final class HashMultiset<E> extends AbstractMapBasedMultiset<E> {\n", "  public static <E> HashMultiset<E> create() {\n"], "3": ["  public static <E> HashMultiset<E> create(int distinctElements) {\n"], "4": ["  public static <E> HashMultiset<E> create(Iterable<? extends E> elements) {\n"]}, "added_lines": {"1": [25], "2": [35, 36, 39], "3": [50], "4": [61, 62]}, "removed_lines": {"2": [34, 37], "3": [48], "4": [59]}}, {"38": "guava/src/com/google/common/collect/ImmutableMultiset.java", "added": {"1": ["import static java.util.Objects.requireNonNull;\n"], "2": ["import javax.annotation.CheckForNull;\n"], "3": ["@ElementTypesAreNonnullByDefault\n"], "4": ["  public static <T extends @Nullable Object, E>\n", "      Collector<T, ?, ImmutableMultiset<E>> toImmutableMultiset(\n", "          Function<? super T, ? extends E> elementFunction,\n", "          ToIntFunction<? super T> countFunction) {\n"], "11": ["      @CheckForNull E element;\n"], "12": ["        /*\n", "         * requireNonNull is safe because `remaining` starts at 0, forcing us to initialize\n", "         * `element` above. After that, we never clear it.\n", "         */\n", "        return requireNonNull(element);\n", "  @LazyInit @CheckForNull private transient ImmutableList<E> asList;\n"], "13": ["  public boolean contains(@CheckForNull Object object) {\n"], "14": ["  public final int remove(@CheckForNull Object element, int occurrences) {\n"], "15": ["  public boolean equals(@CheckForNull Object object) {\n"], "16": ["  @LazyInit @CheckForNull private transient ImmutableSet<Entry<E>> entrySet;\n"], "17": ["    public boolean contains(@CheckForNull Object o) {\n"], "18": ["    public boolean contains(@CheckForNull Object object) {\n"], "19": ["    // \"extends Object\" works around https://github.com/typetools/checker-framework/issues/3013\n", "    SerializedForm(Multiset<? extends Object> multiset) {\n", "      for (Entry<? extends Object> entry : multiset.entrySet()) {\n"]}, "removed": {"4": ["  public static <T, E> Collector<T, ?, ImmutableMultiset<E>> toImmutableMultiset(\n", "      Function<? super T, ? extends E> elementFunction, ToIntFunction<? super T> countFunction) {\n"], "5": ["  @SuppressWarnings(\"unchecked\") // generic array created but never written\n"], "6": ["  @SuppressWarnings(\"unchecked\") //\n"], "7": ["  @SuppressWarnings(\"unchecked\") //\n"], "8": ["  @SuppressWarnings(\"unchecked\") //\n"], "9": ["  @SuppressWarnings(\"unchecked\") //\n"], "10": ["  @SuppressWarnings(\"unchecked\") //\n"], "11": ["      @Nullable E element;\n"], "12": ["        return element;\n", "  @LazyInit private transient ImmutableList<E> asList;\n"], "13": ["  public boolean contains(@Nullable Object object) {\n"], "14": ["  public final int remove(Object element, int occurrences) {\n"], "15": ["  public boolean equals(@Nullable Object object) {\n"], "16": ["  @LazyInit private transient ImmutableSet<Entry<E>> entrySet;\n"], "17": ["    public boolean contains(Object o) {\n"], "18": ["    public boolean contains(@Nullable Object object) {\n"], "19": ["    SerializedForm(Multiset<?> multiset) {\n", "      for (Entry<?> entry : multiset.entrySet()) {\n"]}, "added_lines": {"1": [20], "2": [38], "3": [58], "4": [84, 85, 86, 87], "11": [233], "12": [248, 249, 250, 251, 252, 257], "13": [266], "14": [294], "15": [337], "16": [355], "17": [387], "18": [602], "19": [621, 622, 627]}, "removed_lines": {"4": [81, 82], "5": [102], "6": [113], "7": [125], "8": [137], "9": [149], "10": [161], "11": [234], "12": [249, 254], "13": [263], "14": [291], "15": [334], "16": [352], "17": [384], "18": [599], "19": [618, 623]}}, {"39": "guava/src/com/google/common/collect/ImmutableMultisetGwtSerializationDependencies.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [40]}, "removed_lines": {}}, {"40": "guava/src/com/google/common/collect/ImmutableSortedMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  public static <T extends @Nullable Object, E>\n", "      Collector<T, ?, ImmutableSortedMultiset<E>> toImmutableSortedMultiset(\n", "          Comparator<? super E> comparator,\n", "          Function<? super T, ? extends E> elementFunction,\n", "          ToIntFunction<? super T> countFunction) {\n"], "9": ["  @LazyInit @CheckForNull transient ImmutableSortedMultiset<E> descendingMultiset;\n"], "10": ["  @CheckForNull\n"], "11": ["  @CheckForNull\n"]}, "removed": {"3": ["  public static <T, E> Collector<T, ?, ImmutableSortedMultiset<E>> toImmutableSortedMultiset(\n", "      Comparator<? super E> comparator,\n", "      Function<? super T, ? extends E> elementFunction,\n", "      ToIntFunction<? super T> countFunction) {\n"], "4": ["  @SuppressWarnings(\"unchecked\")\n"], "5": ["  @SuppressWarnings(\"unchecked\")\n"], "6": ["  @SuppressWarnings(\"unchecked\")\n"], "7": ["  @SuppressWarnings(\"unchecked\")\n"], "8": ["  @SuppressWarnings(\"unchecked\")\n"], "9": ["  @LazyInit transient ImmutableSortedMultiset<E> descendingMultiset;\n"]}, "added_lines": {"1": [34, 35], "2": [54], "3": [84, 85, 86, 87, 88], "9": [334], "10": [360], "11": [377]}, "removed_lines": {"3": [81, 82, 83, 84], "4": [123], "5": [134], "6": [145], "7": [157], "8": [169], "9": [335]}}, {"41": "guava/src/com/google/common/collect/ImmutableSortedMultisetFauxverideShim.java", "added": {"1": ["import com.google.errorprone.annotations.DoNotCall;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  @DoNotCall(\"Use toImmutableSortedMultiset.\")\n"], "4": ["  @DoNotCall(\"Use toImmutableSortedMultiset.\")\n", "  public static <T extends @Nullable Object, E>\n", "      Collector<T, ?, ImmutableMultiset<E>> toImmutableMultiset(\n", "          Function<? super T, ? extends E> elementFunction,\n", "          ToIntFunction<? super T> countFunction) {\n"], "5": ["  @DoNotCall(\"Use naturalOrder.\")\n"], "6": ["  @DoNotCall(\"Elements must be Comparable. (Or, pass a Comparator to orderedBy or copyOf.)\")\n"], "7": ["  @DoNotCall(\"Elements must be Comparable. (Or, pass a Comparator to orderedBy or copyOf.)\")\n"], "8": ["  @DoNotCall(\"Elements must be Comparable. (Or, pass a Comparator to orderedBy or copyOf.)\")\n"], "9": ["  @DoNotCall(\"Elements must be Comparable. (Or, pass a Comparator to orderedBy or copyOf.)\")\n"], "10": ["  @DoNotCall(\"Elements must be Comparable. (Or, pass a Comparator to orderedBy or copyOf.)\")\n"], "11": ["  @DoNotCall(\"Elements must be Comparable. (Or, pass a Comparator to orderedBy or copyOf.)\")\n"], "12": ["  @DoNotCall(\"Elements must be Comparable. (Or, pass a Comparator to orderedBy or copyOf.)\")\n"]}, "removed": {"4": ["  public static <T, E> Collector<T, ?, ImmutableMultiset<E>> toImmutableMultiset(\n", "      Function<? super T, ? extends E> elementFunction, ToIntFunction<? super T> countFunction) {\n"]}, "added_lines": {"1": [18, 22], "2": [42], "3": [53], "4": [68, 70, 71, 72, 73], "5": [85], "6": [100], "7": [115], "8": [130], "9": [145], "10": [161], "11": [177], "12": [193]}, "removed_lines": {"4": [65, 66]}}, {"42": "guava/src/com/google/common/collect/JdkBackedImmutableMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  public int count(@CheckForNull Object element) {\n", "  @CheckForNull private transient ImmutableSet<E> elementSet;\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "3": ["  public int count(@Nullable Object element) {\n", "  private transient ImmutableSet<E> elementSet;\n"]}, "added_lines": {"1": [23], "2": [32], "3": [65, 69]}, "removed_lines": {"1": [23], "3": [64, 68]}}, {"43": "guava/src/com/google/common/collect/LinkedHashMultiset.java", "added": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "public final class LinkedHashMultiset<E extends @Nullable Object>\n", "    extends AbstractMapBasedMultiset<E> {\n", "  public static <E extends @Nullable Object> LinkedHashMultiset<E> create() {\n"], "3": ["  public static <E extends @Nullable Object> LinkedHashMultiset<E> create(int distinctElements) {\n"], "4": ["  public static <E extends @Nullable Object> LinkedHashMultiset<E> create(\n", "      Iterable<? extends E> elements) {\n"]}, "removed": {"2": ["public final class LinkedHashMultiset<E> extends AbstractMapBasedMultiset<E> {\n", "  public static <E> LinkedHashMultiset<E> create() {\n"], "3": ["  public static <E> LinkedHashMultiset<E> create(int distinctElements) {\n"], "4": ["  public static <E> LinkedHashMultiset<E> create(Iterable<? extends E> elements) {\n"]}, "added_lines": {"1": [25], "2": [43, 44, 45, 48], "3": [59], "4": [70, 71]}, "removed_lines": {"2": [42, 45], "3": [56], "4": [67]}}, {"44": "guava/src/com/google/common/collect/Multiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "public interface Multiset<E extends @Nullable Object> extends Collection<E> {\n"], "3": ["  int count(@CompatibleWith(\"E\") @CheckForNull Object element);\n"], "4": ["  int add(@ParametricNullness E element, int occurrences);\n"], "5": ["  boolean add(@ParametricNullness E element);\n"], "6": ["  int remove(@CompatibleWith(\"E\") @CheckForNull Object element, int occurrences);\n"], "7": ["  boolean remove(@CheckForNull Object element);\n"], "8": ["  int setCount(@ParametricNullness E element, int count);\n"], "9": ["  boolean setCount(@ParametricNullness E element, int oldCount, int newCount);\n"], "10": ["  interface Entry<E extends @Nullable Object> {\n"], "11": ["    @ParametricNullness\n"], "12": ["    boolean equals(@CheckForNull Object o);\n"], "13": ["  boolean equals(@CheckForNull Object object);\n"], "14": ["  boolean contains(@CheckForNull Object element);\n"]}, "removed": {"2": ["public interface Multiset<E> extends Collection<E> {\n"], "3": ["  int count(@Nullable @CompatibleWith(\"E\") Object element);\n"], "4": ["  int add(@Nullable E element, int occurrences);\n"], "5": ["  boolean add(E element);\n"], "6": ["  int remove(@Nullable @CompatibleWith(\"E\") Object element, int occurrences);\n"], "7": ["  boolean remove(@Nullable Object element);\n"], "8": ["  int setCount(E element, int count);\n"], "9": ["  boolean setCount(E element, int oldCount, int newCount);\n"], "10": ["  interface Entry<E> {\n"], "12": ["    boolean equals(Object o);\n"], "13": ["  boolean equals(@Nullable Object object);\n"], "14": ["  boolean contains(@Nullable Object element);\n"]}, "added_lines": {"1": [33], "2": [90, 91], "3": [116], "4": [139], "5": [162], "6": [177], "7": [193], "8": [209], "9": [228], "10": [274], "11": [282], "12": [310], "13": [358], "14": [404]}, "removed_lines": {"2": [89], "3": [114], "4": [137], "5": [160], "6": [175], "7": [191], "8": [207], "9": [226], "10": [272], "12": [307], "13": [355], "14": [401]}}, {"45": "guava/src/com/google/common/collect/Multisets.java", "added": {"1": ["import static java.util.Objects.requireNonNull;\n"], "2": ["import java.util.function.Function;\n", "import java.util.function.Supplier;\n", "import java.util.function.ToIntFunction;\n", "import javax.annotation.CheckForNull;\n"], "3": ["@ElementTypesAreNonnullByDefault\n"], "4": ["  public static <T extends @Nullable Object, E extends @Nullable Object, M extends Multiset<E>>\n", "      Collector<T, ?, M> toMultiset(\n", "          Function<? super T, E> elementFunction,\n", "          ToIntFunction<? super T> countFunction,\n", "          Supplier<M> multisetSupplier) {\n"], "5": ["  public static <E extends @Nullable Object> Multiset<E> unmodifiableMultiset(\n", "      Multiset<? extends E> multiset) {\n"], "6": ["  static class UnmodifiableMultiset<E extends @Nullable Object> extends ForwardingMultiset<E>\n", "      implements Serializable {\n"], "7": ["    @CheckForNull transient Set<E> elementSet;\n"], "8": ["    @CheckForNull transient Set<Multiset.Entry<E>> entrySet;\n"], "9": ["    public boolean add(@ParametricNullness E element) {\n", "    public int add(@ParametricNullness E element, int occurences) {\n"], "10": ["    public boolean remove(@CheckForNull Object element) {\n", "    public int remove(@CheckForNull Object element, int occurrences) {\n"], "11": ["    public int setCount(@ParametricNullness E element, int count) {\n", "    public boolean setCount(@ParametricNullness E element, int oldCount, int newCount) {\n"], "12": ["  public static <E extends @Nullable Object> SortedMultiset<E> unmodifiableSortedMultiset(\n", "      SortedMultiset<E> sortedMultiset) {\n"], "13": ["  public static <E extends @Nullable Object> Multiset.Entry<E> immutableEntry(\n", "      @ParametricNullness E e, int n) {\n", "  static class ImmutableEntry<E extends @Nullable Object> extends AbstractEntry<E>\n", "      implements Serializable {\n", "    @ParametricNullness private final E element;\n", "    ImmutableEntry(@ParametricNullness E element, int count) {\n", "    @ParametricNullness\n", "    public final E getElement() {\n"], "14": ["    @CheckForNull\n"], "15": ["  public static <E extends @Nullable Object> Multiset<E> filter(\n", "      Multiset<E> unfiltered, Predicate<? super E> predicate) {\n"], "16": ["  private static final class FilteredMultiset<E extends @Nullable Object> extends ViewMultiset<E> {\n"], "17": ["    public int count(@CheckForNull Object element) {\n"], "18": ["    public int add(@ParametricNullness E element, int occurrences) {\n", "    public int remove(@CheckForNull Object element, int occurrences) {\n"], "19": ["  public static <E extends @Nullable Object> Multiset<E> union(\n", "      public boolean contains(@CheckForNull Object element) {\n"], "20": ["      public int count(@CheckForNull Object element) {\n"], "21": ["          @CheckForNull\n"], "22": ["  public static <E extends @Nullable Object> Multiset<E> intersection(\n", "      public int count(@CheckForNull Object element) {\n"], "23": ["  public static <E extends @Nullable Object> Multiset<E> sum(\n"], "24": ["      public boolean contains(@CheckForNull Object element) {\n"], "25": ["      public int count(@CheckForNull Object element) {\n"], "26": ["  public static <E extends @Nullable Object> Multiset<E> difference(\n"], "27": ["      public int count(@CheckForNull Object element) {\n"], "28": ["          @ParametricNullness\n"], "29": ["  private static <E extends @Nullable Object> boolean retainOccurrencesImpl(\n"], "30": ["  abstract static class AbstractEntry<E extends @Nullable Object> implements Multiset.Entry<E> {\n", "    public boolean equals(@CheckForNull Object object) {\n"], "31": ["  static boolean equalsImpl(Multiset<?> multiset, @CheckForNull Object object) {\n"], "32": ["  static <E extends @Nullable Object> boolean addAllImpl(\n", "      Multiset<E> self, Collection<? extends E> elements) {\n"], "33": ["  private static <E extends @Nullable Object> boolean addAllImpl(\n", "      Multiset<E> self, Multiset<? extends E> elements) {\n"], "34": ["  static <E extends @Nullable Object> int setCountImpl(\n", "      Multiset<E> self, @ParametricNullness E element, int count) {\n"], "35": ["  static <E extends @Nullable Object> boolean setCountImpl(\n", "      Multiset<E> self, @ParametricNullness E element, int oldCount, int newCount) {\n"], "36": ["  static <E extends @Nullable Object> Iterator<E> elementIterator(\n", "      Iterator<Entry<E>> entryIterator) {\n", "      @ParametricNullness\n", "  abstract static class ElementSet<E extends @Nullable Object> extends Sets.ImprovedAbstractSet<E> {\n"], "37": ["    public boolean contains(@CheckForNull Object o) {\n"], "38": ["    public boolean remove(@CheckForNull Object o) {\n"], "39": ["  abstract static class EntrySet<E extends @Nullable Object>\n", "      extends Sets.ImprovedAbstractSet<Entry<E>> {\n", "    public boolean contains(@CheckForNull Object o) {\n"], "40": ["    public boolean remove(@CheckForNull Object object) {\n", "          // (Presumably it can still throw CCE/NPE but only if the underlying Multiset does.)\n", "          @SuppressWarnings({\"unchecked\", \"nullness\"})\n", "          Multiset<@Nullable Object> multiset = (Multiset<@Nullable Object>) multiset();\n"], "41": ["  static <E extends @Nullable Object> Iterator<E> iteratorImpl(Multiset<E> multiset) {\n", "  static final class MultisetIteratorImpl<E extends @Nullable Object> implements Iterator<E> {\n", "    @CheckForNull private Entry<E> currentEntry;\n"], "42": ["    @ParametricNullness\n"], "43": ["      /*\n", "       * requireNonNull is safe because laterCount starts at 0, forcing us to initialize\n", "       * currentEntry above. After that, we never clear it.\n", "       */\n", "      return requireNonNull(currentEntry).getElement();\n"], "44": ["        /*\n", "         * requireNonNull is safe because canRemove is set to true only after we initialize\n", "         * currentEntry (which we never subsequently clear).\n", "         */\n", "        multiset.remove(requireNonNull(currentEntry).getElement());\n", "  static <E extends @Nullable Object> Spliterator<E> spliteratorImpl(Multiset<E> multiset) {\n"], "45": ["  static <T extends @Nullable Object> Multiset<T> cast(Iterable<T> iterable) {\n"], "46": ["  private abstract static class ViewMultiset<E extends @Nullable Object>\n", "      extends AbstractMultiset<E> {\n"]}, "removed": {"4": ["  public static <T, E, M extends Multiset<E>> Collector<T, ?, M> toMultiset(\n", "      java.util.function.Function<? super T, E> elementFunction,\n", "      java.util.function.ToIntFunction<? super T> countFunction,\n", "      java.util.function.Supplier<M> multisetSupplier) {\n"], "5": ["  public static <E> Multiset<E> unmodifiableMultiset(Multiset<? extends E> multiset) {\n"], "6": ["  static class UnmodifiableMultiset<E> extends ForwardingMultiset<E> implements Serializable {\n"], "7": ["    transient @Nullable Set<E> elementSet;\n"], "8": ["    transient @Nullable Set<Multiset.Entry<E>> entrySet;\n"], "9": ["    public boolean add(E element) {\n", "    public int add(E element, int occurences) {\n"], "10": ["    public boolean remove(Object element) {\n", "    public int remove(Object element, int occurrences) {\n"], "11": ["    public int setCount(E element, int count) {\n", "    public boolean setCount(E element, int oldCount, int newCount) {\n"], "12": ["  public static <E> SortedMultiset<E> unmodifiableSortedMultiset(SortedMultiset<E> sortedMultiset) {\n"], "13": ["  public static <E> Multiset.Entry<E> immutableEntry(@Nullable E e, int n) {\n", "  static class ImmutableEntry<E> extends AbstractEntry<E> implements Serializable {\n", "    private final @Nullable E element;\n", "    ImmutableEntry(@Nullable E element, int count) {\n", "    public final @Nullable E getElement() {\n"], "15": ["  public static <E> Multiset<E> filter(Multiset<E> unfiltered, Predicate<? super E> predicate) {\n"], "16": ["  private static final class FilteredMultiset<E> extends ViewMultiset<E> {\n"], "17": ["    public int count(@Nullable Object element) {\n"], "18": ["    public int add(@Nullable E element, int occurrences) {\n", "    public int remove(@Nullable Object element, int occurrences) {\n"], "19": ["  public static <E> Multiset<E> union(\n", "      public boolean contains(@Nullable Object element) {\n"], "20": ["      public int count(Object element) {\n"], "22": ["  public static <E> Multiset<E> intersection(\n", "      public int count(Object element) {\n"], "23": ["  public static <E> Multiset<E> sum(\n"], "24": ["      public boolean contains(@Nullable Object element) {\n"], "25": ["      public int count(Object element) {\n"], "26": ["  public static <E> Multiset<E> difference(\n"], "27": ["      public int count(@Nullable Object element) {\n"], "29": ["  private static <E> boolean retainOccurrencesImpl(\n"], "30": ["  abstract static class AbstractEntry<E> implements Multiset.Entry<E> {\n", "    public boolean equals(@Nullable Object object) {\n"], "31": ["  static boolean equalsImpl(Multiset<?> multiset, @Nullable Object object) {\n"], "32": ["  static <E> boolean addAllImpl(Multiset<E> self, Collection<? extends E> elements) {\n"], "33": ["  private static <E> boolean addAllImpl(Multiset<E> self, Multiset<? extends E> elements) {\n"], "34": ["  static <E> int setCountImpl(Multiset<E> self, E element, int count) {\n"], "35": ["  static <E> boolean setCountImpl(Multiset<E> self, E element, int oldCount, int newCount) {\n"], "36": ["  static <E> Iterator<E> elementIterator(Iterator<Entry<E>> entryIterator) {\n", "  abstract static class ElementSet<E> extends Sets.ImprovedAbstractSet<E> {\n"], "37": ["    public boolean contains(Object o) {\n"], "38": ["    public boolean remove(Object o) {\n"], "39": ["  abstract static class EntrySet<E> extends Sets.ImprovedAbstractSet<Entry<E>> {\n", "    public boolean contains(@Nullable Object o) {\n"], "40": ["    public boolean remove(Object object) {\n", "          @SuppressWarnings(\"unchecked\")\n", "          Multiset<Object> multiset = (Multiset<Object>) multiset();\n"], "41": ["  static <E> Iterator<E> iteratorImpl(Multiset<E> multiset) {\n", "  static final class MultisetIteratorImpl<E> implements Iterator<E> {\n", "    private @Nullable Entry<E> currentEntry;\n"], "43": ["      return currentEntry.getElement();\n"], "44": ["        multiset.remove(currentEntry.getElement());\n", "  static <E> Spliterator<E> spliteratorImpl(Multiset<E> multiset) {\n"], "45": ["  static <T> Multiset<T> cast(Iterable<T> iterable) {\n"], "46": ["  private abstract static class ViewMultiset<E> extends AbstractMultiset<E> {\n"]}, "added_lines": {"1": [23], "2": [43, 44, 45, 47], "3": [63], "4": [84, 85, 86, 87, 88], "5": [102, 103], "6": [123, 124], "7": [138], "8": [150], "9": [169, 174], "10": [184, 189], "11": [209, 214], "12": [233, 234], "13": [247, 248, 252, 253, 254, 257, 264, 265], "14": [274], "15": [308, 309], "16": [320], "17": [362], "18": [373, 380], "19": [415, 422], "20": [432], "21": [453], "22": [487, 494], "23": [544], "24": [552], "25": [567], "26": [621], "27": [629], "28": [644], "29": [726], "30": [834, 840], "31": [874], "32": [900, 901], "33": [914, 915], "34": [945, 946], "35": [962, 963], "36": [975, 976, 979, 986], "37": [995], "38": [1013], "39": [1023, 1024, 1028], "40": [1047, 1054, 1055, 1056], "41": [1070, 1074, 1077], "42": [1098], "43": [1109, 1110, 1111, 1112, 1113], "44": [1122, 1123, 1124, 1125, 1126, 1133], "45": [1154], "46": [1184, 1185]}, "removed_lines": {"4": [78, 79, 80, 81], "5": [95], "6": [115], "7": [129], "8": [141], "9": [160, 165], "10": [175, 180], "11": [200, 205], "12": [224], "13": [237, 241, 242, 245, 252], "15": [294], "16": [305], "17": [347], "18": [358, 365], "19": [400, 407], "20": [417], "22": [471, 478], "23": [528], "24": [536], "25": [551], "26": [605], "27": [613], "29": [709], "30": [817, 823], "31": [857], "32": [883], "33": [896], "34": [926], "35": [942], "36": [954, 963], "37": [972], "38": [990], "39": [1000, 1004], "40": [1023, 1030, 1031], "41": [1045, 1049, 1052], "43": [1083], "44": [1092, 1099], "45": [1120], "46": [1150]}}, {"46": "guava/src/com/google/common/collect/RegularImmutableMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "  private static final ImmutableEntry<?>[] EMPTY_ARRAY = new ImmutableEntry<?>[0];\n", "    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n", "    ImmutableEntry<E>[] entryArray = new ImmutableEntry[distinct];\n", "      return new RegularImmutableMultiset<>(entryArray, EMPTY_ARRAY, 0, 0, ImmutableSet.of());\n", "    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n", "    @Nullable\n", "    ImmutableEntry<E>[] hashTable = new @Nullable ImmutableEntry[tableSize];\n", "    for (Entry<? extends E> entryWithWildcard : entries) {\n", "      @SuppressWarnings(\"unchecked\") // safe because we only read from it\n", "      Entry<E> entry = (Entry<E>) entryWithWildcard;\n", "      ImmutableEntry<E> bucketHead = hashTable[bucket];\n", "      ImmutableEntry<E> newEntry;\n", "            entry instanceof ImmutableEntry && !(entry instanceof NonTerminalEntry);\n", "            canReuseEntry ? (ImmutableEntry<E>) entry : new ImmutableEntry<E>(element, count);\n"], "3": ["  private static boolean hashFloodingDetected(@Nullable ImmutableEntry<?>[] hashTable) {\n", "      for (ImmutableEntry<?> entry = hashTable[i]; entry != null; entry = entry.nextInBucket()) {\n"], "4": ["  private final transient ImmutableEntry<E>[] entries;\n", "  private final transient @Nullable ImmutableEntry<?>[] hashTable;\n", "  @LazyInit @CheckForNull private transient ImmutableSet<E> elementSet;\n", "      @Nullable ImmutableEntry<?>[] hashTable,\n", "      @CheckForNull ImmutableSet<E> elementSet) {\n"], "5": ["  private static final class NonTerminalEntry<E> extends ImmutableEntry<E> {\n", "    private final ImmutableEntry<E> nextInBucket;\n"], "6": ["  public int count(@CheckForNull Object element) {\n", "    @Nullable ImmutableEntry<?>[] hashTable = this.hashTable;\n", "    if (element == null || hashTable.length == 0) {\n", "    for (ImmutableEntry<?> entry = hashTable[hash & mask];\n"]}, "removed": {"2": ["    @SuppressWarnings(\"unchecked\")\n", "    Multisets.ImmutableEntry<E>[] entryArray = new Multisets.ImmutableEntry[distinct];\n", "      return new RegularImmutableMultiset<>(entryArray, null, 0, 0, ImmutableSet.of());\n", "    @SuppressWarnings(\"unchecked\")\n", "    Multisets.ImmutableEntry<E>[] hashTable = new Multisets.ImmutableEntry[tableSize];\n", "    for (Entry<? extends E> entry : entries) {\n", "      Multisets.ImmutableEntry<E> bucketHead = hashTable[bucket];\n", "      Multisets.ImmutableEntry<E> newEntry;\n", "            entry instanceof Multisets.ImmutableEntry && !(entry instanceof NonTerminalEntry);\n", "            canReuseEntry\n", "                ? (Multisets.ImmutableEntry<E>) entry\n", "                : new Multisets.ImmutableEntry<E>(element, count);\n"], "3": ["  private static boolean hashFloodingDetected(Multisets.ImmutableEntry<?>[] hashTable) {\n", "      for (Multisets.ImmutableEntry<?> entry = hashTable[i];\n", "          entry != null;\n", "          entry = entry.nextInBucket()) {\n"], "4": ["  private final transient Multisets.ImmutableEntry<E>[] entries;\n", "  private final transient Multisets.ImmutableEntry<E> @Nullable [] hashTable;\n", "  @LazyInit private transient ImmutableSet<E> elementSet;\n", "      ImmutableEntry<E>[] hashTable,\n", "      ImmutableSet<E> elementSet) {\n"], "5": ["  private static final class NonTerminalEntry<E> extends Multisets.ImmutableEntry<E> {\n", "    private final Multisets.ImmutableEntry<E> nextInBucket;\n"], "6": ["  public int count(@Nullable Object element) {\n", "    Multisets.ImmutableEntry<E>[] hashTable = this.hashTable;\n", "    if (element == null || hashTable == null) {\n", "    for (Multisets.ImmutableEntry<E> entry = hashTable[hash & mask];\n"]}, "added_lines": {"1": [27], "2": [38, 40, 45, 46, 48, 52, 53, 54, 59, 60, 61, 66, 67, 70, 72], "3": [88, 91], "4": [120, 121, 125, 129, 132], "5": [140, 141], "6": [160, 161, 162, 167]}, "removed_lines": {"2": [42, 43, 45, 49, 50, 55, 60, 61, 64, 66, 67, 68], "3": [84, 87, 88, 89], "4": [118, 119, 123, 127, 130], "5": [138, 139], "6": [158, 159, 160, 165]}}, {"47": "guava/src/com/google/common/collect/RegularImmutableSortedMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  @CheckForNull\n", "  @CheckForNull\n", "  public int count(@CheckForNull Object element) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "3": ["  public int count(@Nullable Object element) {\n"]}, "added_lines": {"1": [26], "2": [35], "3": [80, 86, 92]}, "removed_lines": {"1": [26], "3": [89]}}, {"48": "guava/src/com/google/common/collect/SortedMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["// TODO(cpovirk): // TODO(cpovirk): @ElementTypesAreNonnullByDefault\n", "public interface SortedMultiset<E extends @Nullable Object>\n", "    extends SortedMultisetBridge<E>, SortedIterable<E> {\n"], "3": ["  // TODO(cpovirk): @CheckForNull\n", "  // TODO(cpovirk): @CheckForNull\n", "  @CheckForNull\n", "  @CheckForNull\n"], "4": ["  SortedMultiset<E> headMultiset(@ParametricNullness E upperBound, BoundType boundType);\n"], "5": ["      @ParametricNullness E lowerBound,\n", "      BoundType lowerBoundType,\n", "      @ParametricNullness E upperBound,\n", "      BoundType upperBoundType);\n"], "6": ["  SortedMultiset<E> tailMultiset(@ParametricNullness E lowerBound, BoundType boundType);\n"]}, "removed": {"2": ["public interface SortedMultiset<E> extends SortedMultisetBridge<E>, SortedIterable<E> {\n"], "4": ["  SortedMultiset<E> headMultiset(E upperBound, BoundType boundType);\n"], "5": ["      E lowerBound, BoundType lowerBoundType, E upperBound, BoundType upperBoundType);\n"], "6": ["  SortedMultiset<E> tailMultiset(E lowerBound, BoundType boundType);\n"]}, "added_lines": {"1": [25, 26], "2": [47, 48, 49], "3": [61, 68, 75, 82], "4": [126], "5": [141, 142, 143, 144], "6": [155]}, "removed_lines": {"2": [45], "4": [118], "5": [133], "6": [144]}}, {"49": "guava/src/com/google/common/collect/SortedMultisetBridge.java", "added": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "interface SortedMultisetBridge<E extends @Nullable Object> extends Multiset<E> {\n"]}, "removed": {"2": ["interface SortedMultisetBridge<E> extends Multiset<E> {\n"]}, "added_lines": {"1": [21], "2": [31, 32]}, "removed_lines": {"2": [30]}}, {"50": "guava/src/com/google/common/collect/SortedMultisets.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "  @SuppressWarnings(\"JdkObsolete\") // TODO(b/6160855): Switch GWT emulations to NavigableSet.\n", "  static class ElementSet<E extends @Nullable Object> extends Multisets.ElementSet<E>\n", "      implements SortedSet<E> {\n"], "3": ["    public SortedSet<E> subSet(@ParametricNullness E fromElement, @ParametricNullness E toElement) {\n", "    public SortedSet<E> headSet(@ParametricNullness E toElement) {\n", "    public SortedSet<E> tailSet(@ParametricNullness E fromElement) {\n", "    @ParametricNullness\n", "    @ParametricNullness\n"], "4": ["  static class NavigableElementSet<E extends @Nullable Object> extends ElementSet<E>\n", "      implements NavigableSet<E> {\n", "    @CheckForNull\n", "    public E lower(@ParametricNullness E e) {\n", "    @CheckForNull\n", "    public E floor(@ParametricNullness E e) {\n", "    @CheckForNull\n", "    public E ceiling(@ParametricNullness E e) {\n", "    @CheckForNull\n", "    public E higher(@ParametricNullness E e) {\n"], "5": ["    @CheckForNull\n", "    @CheckForNull\n", "        @ParametricNullness E fromElement,\n", "        boolean fromInclusive,\n", "        @ParametricNullness E toElement,\n", "        boolean toInclusive) {\n"], "6": ["    public NavigableSet<E> headSet(@ParametricNullness E toElement, boolean inclusive) {\n", "    public NavigableSet<E> tailSet(@ParametricNullness E fromElement, boolean inclusive) {\n", "  private static <E extends @Nullable Object> E getElementOrThrow(@CheckForNull Entry<E> entry) {\n", "  @CheckForNull\n", "  private static <E extends @Nullable Object> E getElementOrNull(@CheckForNull Entry<E> entry) {\n"]}, "removed": {"2": ["  static class ElementSet<E> extends Multisets.ElementSet<E> implements SortedSet<E> {\n"], "3": ["    public SortedSet<E> subSet(E fromElement, E toElement) {\n", "    public SortedSet<E> headSet(E toElement) {\n", "    public SortedSet<E> tailSet(E fromElement) {\n"], "4": ["  static class NavigableElementSet<E> extends ElementSet<E> implements NavigableSet<E> {\n", "    public E lower(E e) {\n", "    public E floor(E e) {\n", "    public E ceiling(E e) {\n", "    public E higher(E e) {\n"], "5": ["        E fromElement, boolean fromInclusive, E toElement, boolean toInclusive) {\n"], "6": ["    public NavigableSet<E> headSet(E toElement, boolean inclusive) {\n", "    public NavigableSet<E> tailSet(E fromElement, boolean inclusive) {\n", "  private static <E> E getElementOrThrow(Entry<E> entry) {\n", "  private static <E> E getElementOrNull(@Nullable Entry<E> entry) {\n"]}, "added_lines": {"1": [31], "2": [40, 45, 46, 47], "3": [70, 75, 80, 85, 91], "4": [99, 100, 106, 107, 112, 113, 118, 119, 124, 125], "5": [140, 146, 153, 154, 155, 156], "6": [165, 171, 177, 184, 185]}, "removed_lines": {"2": [43], "3": [66, 71, 76], "4": [93, 99, 104, 109, 114], "5": [140], "6": [149, 155, 161, 168]}}, {"51": "guava/src/com/google/common/collect/TreeMultiset.java", "added": {"1": ["import static com.google.common.collect.NullnessCasts.uncheckedCastNullableTToT;\n", "import static java.util.Objects.requireNonNull;\n"], "2": ["import javax.annotation.CheckForNull;\n"], "3": ["@ElementTypesAreNonnullByDefault\n", "public final class TreeMultiset<E extends @Nullable Object> extends AbstractSortedMultiset<E>\n", "    implements Serializable {\n"], "4": ["  public static <E extends @Nullable Object> TreeMultiset<E> create(\n", "      @CheckForNull Comparator<? super E> comparator) {\n"], "5": ["    this.header = new AvlNode<>();\n"], "6": ["      long treeAggregate(@CheckForNull AvlNode<?> root) {\n"], "7": ["      long treeAggregate(@CheckForNull AvlNode<?> root) {\n", "    abstract long treeAggregate(@CheckForNull AvlNode<?> root);\n"], "8": ["  private long aggregateBelowRange(Aggregate aggr, @CheckForNull AvlNode<E> node) {\n", "    // The cast is safe because we call this method only if hasLowerBound().\n", "    int cmp =\n", "        comparator()\n", "            .compare(uncheckedCastNullableTToT(range.getLowerEndpoint()), node.getElement());\n"], "9": ["  private long aggregateAboveRange(Aggregate aggr, @CheckForNull AvlNode<E> node) {\n", "    // The cast is safe because we call this method only if hasUpperBound().\n", "    int cmp =\n", "        comparator()\n", "            .compare(uncheckedCastNullableTToT(range.getUpperEndpoint()), node.getElement());\n"], "10": ["  static int distinctElements(@CheckForNull AvlNode<?> node) {\n", "  public int count(@CheckForNull Object element) {\n"], "11": ["  public int add(@ParametricNullness E element, int occurrences) {\n"], "12": ["  public int remove(@CheckForNull Object element, int occurrences) {\n"], "13": ["  public int setCount(@ParametricNullness E element, int count) {\n"], "14": ["  public boolean setCount(@ParametricNullness E element, int oldCount, int newCount) {\n"], "15": ["      for (AvlNode<E> current = header.succ(); current != header; ) {\n", "        AvlNode<E> next = current.succ();\n"], "16": ["      @ParametricNullness\n"], "17": ["  @CheckForNull\n", "  private AvlNode<E> firstNode() {\n", "      // The cast is safe because of the hasLowerBound check.\n", "      E endpoint = uncheckedCastNullableTToT(range.getLowerEndpoint());\n", "      node = root.ceiling(comparator(), endpoint);\n", "        node = node.succ();\n", "      node = header.succ();\n", "  @CheckForNull\n", "  private AvlNode<E> lastNode() {\n", "      // The cast is safe because of the hasUpperBound check.\n", "      E endpoint = uncheckedCastNullableTToT(range.getUpperEndpoint());\n", "      node = root.floor(comparator(), endpoint);\n", "        node = node.pred();\n", "      node = header.pred();\n"], "18": ["      @CheckForNull AvlNode<E> current = firstNode();\n", "      @CheckForNull Entry<E> prevEntry;\n"], "19": ["        // requireNonNull is safe because current is only nulled out after iteration is complete.\n", "        Entry<E> result = wrapEntry(requireNonNull(current));\n", "        if (current.succ() == header) {\n", "          current = current.succ();\n", "        checkState(prevEntry != null, \"no calls to next() since the last call to remove()\");\n"], "20": ["      @CheckForNull AvlNode<E> current = lastNode();\n", "      @CheckForNull Entry<E> prevEntry = null;\n"], "21": ["        // requireNonNull is safe because current is only nulled out after iteration is complete.\n", "        requireNonNull(current);\n", "        if (current.pred() == header) {\n", "          current = current.pred();\n", "        checkState(prevEntry != null, \"no calls to next() since the last call to remove()\");\n"], "22": ["        node = node.succ()) {\n"], "23": ["  public SortedMultiset<E> headMultiset(@ParametricNullness E upperBound, BoundType boundType) {\n"], "24": ["  public SortedMultiset<E> tailMultiset(@ParametricNullness E lowerBound, BoundType boundType) {\n"], "25": ["    @CheckForNull private T value;\n", "    @CheckForNull\n", "    public T get() {\n", "    public void checkAndSet(@CheckForNull T expected, @CheckForNull T newValue) {\n"], "26": ["  private static final class AvlNode<E extends @Nullable Object> {\n", "    /*\n", "     * For \"normal\" nodes, the type of this field is `E`, not `@Nullable E` (though note that E is a\n", "     * type that can include null, as in a TreeMultiset<@Nullable String>).\n", "     *\n", "     * For the header node, though, this field contains `null`, regardless of the type of the\n", "     * multiset.\n", "     *\n", "     * Most code that operates on an AvlNode never operates on the header node. Such code can access\n", "     * the elem field without a null check by calling getElement().\n", "     */\n", "    @CheckForNull private final E elem;\n"], "27": ["    @CheckForNull private AvlNode<E> left;\n", "    @CheckForNull private AvlNode<E> right;\n", "    /*\n", "     * pred and succ are nullable after construction, but we always call successor() to initialize\n", "     * them immediately thereafter.\n", "     *\n", "     * They may be subsequently nulled out by TreeMultiset.clear(). I think that the only place that\n", "     * we can reference a node whose fields have been cleared is inside the iterator (and presumably\n", "     * only under concurrent modification).\n", "     *\n", "     * To access these fields when you know that they are not null, call the pred() and succ()\n", "     * methods, which perform null checks before returning the fields.\n", "     */\n", "    @CheckForNull private AvlNode<E> pred;\n", "    @CheckForNull private AvlNode<E> succ;\n", "\n", "    AvlNode(@ParametricNullness E elem, int elemCount) {\n"], "28": ["    /** Constructor for the header node. */\n", "    AvlNode() {\n", "      this.elem = null;\n", "      this.elemCount = 1;\n", "    }\n", "\n", "    // For discussion of pred() and succ(), see the comment on the pred and succ fields.\n", "\n", "    private AvlNode<E> pred() {\n", "      return requireNonNull(pred);\n", "    }\n", "\n", "    private AvlNode<E> succ() {\n", "      return requireNonNull(succ);\n", "    }\n", "\n", "    int count(Comparator<? super E> comparator, @ParametricNullness E e) {\n", "      int cmp = comparator.compare(e, getElement());\n"], "29": ["    private AvlNode<E> addRightChild(@ParametricNullness E e, int count) {\n", "      successor(this, right, succ());\n", "    private AvlNode<E> addLeftChild(@ParametricNullness E e, int count) {\n", "      successor(pred(), left, this);\n", "    AvlNode<E> add(\n", "        Comparator<? super E> comparator, @ParametricNullness E e, int count, int[] result) {\n", "      int cmp = comparator.compare(e, getElement());\n"], "30": ["    @CheckForNull\n", "    AvlNode<E> remove(\n", "        Comparator<? super E> comparator, @ParametricNullness E e, int count, int[] result) {\n", "      int cmp = comparator.compare(e, getElement());\n"], "31": ["    @CheckForNull\n", "    AvlNode<E> setCount(\n", "        Comparator<? super E> comparator, @ParametricNullness E e, int count, int[] result) {\n", "      int cmp = comparator.compare(e, getElement());\n"], "32": ["    @CheckForNull\n", "        @ParametricNullness E e,\n", "      int cmp = comparator.compare(e, getElement());\n"], "33": ["    @CheckForNull\n", "      successor(pred(), succ());\n", "        AvlNode<E> newTop = pred();\n"], "34": ["        AvlNode<E> newTop = succ();\n"], "35": ["    @CheckForNull\n"], "36": ["    @CheckForNull\n"], "37": ["          // requireNonNull is safe because right must exist in order to get a negative factor.\n", "          requireNonNull(right);\n", "          // requireNonNull is safe because left must exist in order to get a positive factor.\n", "          requireNonNull(left);\n"], "38": ["    private static long totalCount(@CheckForNull AvlNode<?> node) {\n", "    private static int height(@CheckForNull AvlNode<?> node) {\n", "    @CheckForNull\n", "    private AvlNode<E> ceiling(Comparator<? super E> comparator, @ParametricNullness E e) {\n", "      int cmp = comparator.compare(e, getElement());\n"], "39": ["    @CheckForNull\n", "    private AvlNode<E> floor(Comparator<? super E> comparator, @ParametricNullness E e) {\n", "      int cmp = comparator.compare(e, getElement());\n"], "40": ["    @ParametricNullness\n", "      // For discussion of this cast, see the comment on the elem field.\n", "      return uncheckedCastNullableTToT(elem);\n"], "41": ["  private static <T extends @Nullable Object> void successor(AvlNode<T> a, AvlNode<T> b) {\n", "  private static <T extends @Nullable Object> void successor(\n", "      AvlNode<T> a, AvlNode<T> b, AvlNode<T> c) {\n"], "42": ["    AvlNode<E> header = new AvlNode<>();\n"]}, "removed": {"1": ["import static com.google.common.collect.CollectPreconditions.checkRemove;\n"], "3": ["public final class TreeMultiset<E> extends AbstractSortedMultiset<E> implements Serializable {\n"], "4": ["  public static <E> TreeMultiset<E> create(@Nullable Comparator<? super E> comparator) {\n"], "5": ["    this.header = new AvlNode<E>(null, 1);\n"], "6": ["      long treeAggregate(@Nullable AvlNode<?> root) {\n"], "7": ["      long treeAggregate(@Nullable AvlNode<?> root) {\n", "    abstract long treeAggregate(@Nullable AvlNode<?> root);\n"], "8": ["  private long aggregateBelowRange(Aggregate aggr, @Nullable AvlNode<E> node) {\n", "    int cmp = comparator().compare(range.getLowerEndpoint(), node.elem);\n"], "9": ["  private long aggregateAboveRange(Aggregate aggr, @Nullable AvlNode<E> node) {\n", "    int cmp = comparator().compare(range.getUpperEndpoint(), node.elem);\n"], "10": ["  static int distinctElements(@Nullable AvlNode<?> node) {\n", "  public int count(@Nullable Object element) {\n"], "11": ["  public int add(@Nullable E element, int occurrences) {\n"], "12": ["  public int remove(@Nullable Object element, int occurrences) {\n"], "13": ["  public int setCount(@Nullable E element, int count) {\n"], "14": ["  public boolean setCount(@Nullable E element, int oldCount, int newCount) {\n"], "15": ["      for (AvlNode<E> current = header.succ; current != header; ) {\n", "        AvlNode<E> next = current.succ;\n"], "17": ["  private @Nullable AvlNode<E> firstNode() {\n", "      E endpoint = range.getLowerEndpoint();\n", "      node = rootReference.get().ceiling(comparator(), endpoint);\n", "        node = node.succ;\n", "      node = header.succ;\n", "  private @Nullable AvlNode<E> lastNode() {\n", "      E endpoint = range.getUpperEndpoint();\n", "      node = rootReference.get().floor(comparator(), endpoint);\n", "        node = node.pred;\n", "      node = header.pred;\n"], "18": ["      AvlNode<E> current = firstNode();\n", "      @Nullable Entry<E> prevEntry;\n"], "19": ["        Entry<E> result = wrapEntry(current);\n", "        if (current.succ == header) {\n", "          current = current.succ;\n", "        checkRemove(prevEntry != null);\n"], "20": ["      AvlNode<E> current = lastNode();\n", "      Entry<E> prevEntry = null;\n"], "21": ["        if (current.pred == header) {\n", "          current = current.pred;\n", "        checkRemove(prevEntry != null);\n"], "22": ["        node = node.succ) {\n"], "23": ["  public SortedMultiset<E> headMultiset(@Nullable E upperBound, BoundType boundType) {\n"], "24": ["  public SortedMultiset<E> tailMultiset(@Nullable E lowerBound, BoundType boundType) {\n"], "25": ["    private @Nullable T value;\n", "    public @Nullable T get() {\n", "    public void checkAndSet(@Nullable T expected, T newValue) {\n"], "26": ["  private static final class AvlNode<E> {\n", "    private final @Nullable E elem;\n"], "27": ["    private @Nullable AvlNode<E> left;\n", "    private @Nullable AvlNode<E> right;\n", "    private @Nullable AvlNode<E> pred;\n", "    private @Nullable AvlNode<E> succ;\n", "\n", "    AvlNode(@Nullable E elem, int elemCount) {\n"], "28": ["    public int count(Comparator<? super E> comparator, E e) {\n", "      int cmp = comparator.compare(e, elem);\n"], "29": ["    private AvlNode<E> addRightChild(E e, int count) {\n", "      successor(this, right, succ);\n", "    private AvlNode<E> addLeftChild(E e, int count) {\n", "      successor(pred, left, this);\n", "    AvlNode<E> add(Comparator<? super E> comparator, @Nullable E e, int count, int[] result) {\n", "      int cmp = comparator.compare(e, elem);\n"], "30": ["    AvlNode<E> remove(Comparator<? super E> comparator, @Nullable E e, int count, int[] result) {\n", "      int cmp = comparator.compare(e, elem);\n"], "31": ["    AvlNode<E> setCount(Comparator<? super E> comparator, @Nullable E e, int count, int[] result) {\n", "      int cmp = comparator.compare(e, elem);\n"], "32": ["        @Nullable E e,\n", "      int cmp = comparator.compare(e, elem);\n"], "33": ["      successor(pred, succ);\n", "        AvlNode<E> newTop = pred;\n"], "34": ["        AvlNode<E> newTop = succ;\n"], "38": ["    private static long totalCount(@Nullable AvlNode<?> node) {\n", "    private static int height(@Nullable AvlNode<?> node) {\n", "    private @Nullable AvlNode<E> ceiling(Comparator<? super E> comparator, E e) {\n", "      int cmp = comparator.compare(e, elem);\n"], "39": ["    private @Nullable AvlNode<E> floor(Comparator<? super E> comparator, E e) {\n", "      int cmp = comparator.compare(e, elem);\n"], "40": ["      return elem;\n"], "41": ["  private static <T> void successor(AvlNode<T> a, AvlNode<T> b) {\n", "  private static <T> void successor(AvlNode<T> a, AvlNode<T> b, AvlNode<T> c) {\n"], "42": ["    AvlNode<E> header = new AvlNode<E>(null, 1);\n"]}, "added_lines": {"1": [23, 24], "2": [40], "3": [62, 63, 64], "4": [94, 95], "5": [130], "6": [144], "7": [155, 162], "8": [177, 181, 182, 183, 184], "9": [203, 207, 208, 209, 210], "10": [239, 244], "11": [260], "12": [282], "13": [306], "14": [328], "15": [354, 355], "16": [377], "17": [395, 396, 403, 404, 405, 411, 414, 419, 420, 427, 428, 429, 435, 438], "18": [451, 452], "19": [471, 472, 474, 477, 484], "20": [494, 495], "21": [514, 515, 518, 521, 528], "22": [540], "23": [551], "24": [559], "25": [567, 569, 570, 574], "26": [586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597], "27": [605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621], "28": [632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649], "29": [659, 661, 668, 670, 677, 678, 683], "30": [723, 724, 725, 726], "31": [776, 777, 778, 779], "32": [826, 829, 833], "33": [890, 894, 900], "34": [908], "35": [918], "36": [931], "37": [961, 962, 968, 969], "38": [1008, 1012, 1016, 1017, 1018], "39": [1028, 1029, 1030], "40": [1040, 1042, 1043], "41": [1056, 1061, 1062], "42": [1095]}, "removed_lines": {"1": [23], "3": [60], "4": [90], "5": [125], "6": [139], "7": [150, 157], "8": [172, 176], "9": [195, 199], "10": [228, 233], "11": [249], "12": [271], "13": [295], "14": [317], "15": [343, 344], "17": [383, 390, 391, 397, 400, 405, 412, 413, 419, 422], "18": [435, 436], "19": [455, 457, 460, 467], "20": [477, 478], "21": [499, 502, 509], "22": [521], "23": [532], "24": [540], "25": [548, 550, 554], "26": [566, 567], "27": [575, 576, 577, 578, 579, 580], "28": [591, 592], "29": [602, 604, 611, 613, 620, 625], "30": [665, 666], "31": [716, 717], "32": [766, 770], "33": [830, 836], "34": [844], "38": [938, 942, 946, 947], "39": [957, 958], "40": [969], "41": [982, 987], "42": [1020]}}, {"52": "guava/src/com/google/common/collect/UnmodifiableSortedMultiset.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "final class UnmodifiableSortedMultiset<E extends @Nullable Object> extends UnmodifiableMultiset<E>\n"], "3": ["  @CheckForNull private transient UnmodifiableSortedMultiset<E> descendingMultiset;\n"], "4": ["  @CheckForNull\n", "  @CheckForNull\n", "  @CheckForNull\n", "  @CheckForNull\n", "  public SortedMultiset<E> headMultiset(@ParametricNullness E upperBound, BoundType boundType) {\n", "      @ParametricNullness E lowerBound,\n", "      BoundType lowerBoundType,\n", "      @ParametricNullness E upperBound,\n", "      BoundType upperBoundType) {\n", "  public SortedMultiset<E> tailMultiset(@ParametricNullness E lowerBound, BoundType boundType) {\n"]}, "removed": {"2": ["final class UnmodifiableSortedMultiset<E> extends UnmodifiableMultiset<E>\n"], "3": ["  private transient @Nullable UnmodifiableSortedMultiset<E> descendingMultiset;\n"], "4": ["  public SortedMultiset<E> headMultiset(E upperBound, BoundType boundType) {\n", "      E lowerBound, BoundType lowerBoundType, E upperBound, BoundType upperBoundType) {\n", "  public SortedMultiset<E> tailMultiset(E lowerBound, BoundType boundType) {\n"]}, "added_lines": {"1": [23], "2": [34, 35], "3": [61], "4": [75, 81, 87, 93, 99, 105, 106, 107, 108, 114]}, "removed_lines": {"2": [33], "3": [59], "4": [93, 99, 105]}}]}
