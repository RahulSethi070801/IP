{
    "addition": {
        "27": "import javax.annotation.CheckForNull;\n",
        "38": "@ElementTypesAreNonnullByDefault\n",
        "40": "  private static final ImmutableEntry<?>[] EMPTY_ARRAY = new ImmutableEntry<?>[0];\n",
        "45": "    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n",
        "46": "    ImmutableEntry<E>[] entryArray = new ImmutableEntry[distinct];\n",
        "48": "      return new RegularImmutableMultiset<>(entryArray, EMPTY_ARRAY, 0, 0, ImmutableSet.of());\n",
        "52": "    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n",
        "53": "    @Nullable\n",
        "54": "    ImmutableEntry<E>[] hashTable = new @Nullable ImmutableEntry[tableSize];\n",
        "59": "    for (Entry<? extends E> entryWithWildcard : entries) {\n",
        "60": "      @SuppressWarnings(\"unchecked\") // safe because we only read from it\n",
        "61": "      Entry<E> entry = (Entry<E>) entryWithWildcard;\n",
        "66": "      ImmutableEntry<E> bucketHead = hashTable[bucket];\n",
        "67": "      ImmutableEntry<E> newEntry;\n",
        "70": "            entry instanceof ImmutableEntry && !(entry instanceof NonTerminalEntry);\n",
        "72": "            canReuseEntry ? (ImmutableEntry<E>) entry : new ImmutableEntry<E>(element, count);\n",
        "88": "  private static boolean hashFloodingDetected(@Nullable ImmutableEntry<?>[] hashTable) {\n",
        "91": "      for (ImmutableEntry<?> entry = hashTable[i]; entry != null; entry = entry.nextInBucket()) {\n",
        "120": "  private final transient ImmutableEntry<E>[] entries;\n",
        "121": "  private final transient @Nullable ImmutableEntry<?>[] hashTable;\n",
        "125": "  @LazyInit @CheckForNull private transient ImmutableSet<E> elementSet;\n",
        "129": "      @Nullable ImmutableEntry<?>[] hashTable,\n",
        "132": "      @CheckForNull ImmutableSet<E> elementSet) {\n",
        "140": "  private static final class NonTerminalEntry<E> extends ImmutableEntry<E> {\n",
        "141": "    private final ImmutableEntry<E> nextInBucket;\n",
        "160": "  public int count(@CheckForNull Object element) {\n",
        "161": "    @Nullable ImmutableEntry<?>[] hashTable = this.hashTable;\n",
        "162": "    if (element == null || hashTable.length == 0) {\n",
        "167": "    for (ImmutableEntry<?> entry = hashTable[hash & mask];\n"
    },
    "removed": {
        "42": "    @SuppressWarnings(\"unchecked\")\n",
        "43": "    Multisets.ImmutableEntry<E>[] entryArray = new Multisets.ImmutableEntry[distinct];\n",
        "45": "      return new RegularImmutableMultiset<>(entryArray, null, 0, 0, ImmutableSet.of());\n",
        "49": "    @SuppressWarnings(\"unchecked\")\n",
        "50": "    Multisets.ImmutableEntry<E>[] hashTable = new Multisets.ImmutableEntry[tableSize];\n",
        "55": "    for (Entry<? extends E> entry : entries) {\n",
        "60": "      Multisets.ImmutableEntry<E> bucketHead = hashTable[bucket];\n",
        "61": "      Multisets.ImmutableEntry<E> newEntry;\n",
        "64": "            entry instanceof Multisets.ImmutableEntry && !(entry instanceof NonTerminalEntry);\n",
        "66": "            canReuseEntry\n",
        "67": "                ? (Multisets.ImmutableEntry<E>) entry\n",
        "68": "                : new Multisets.ImmutableEntry<E>(element, count);\n",
        "84": "  private static boolean hashFloodingDetected(Multisets.ImmutableEntry<?>[] hashTable) {\n",
        "87": "      for (Multisets.ImmutableEntry<?> entry = hashTable[i];\n",
        "88": "          entry != null;\n",
        "89": "          entry = entry.nextInBucket()) {\n",
        "118": "  private final transient Multisets.ImmutableEntry<E>[] entries;\n",
        "119": "  private final transient Multisets.ImmutableEntry<E> @Nullable [] hashTable;\n",
        "123": "  @LazyInit private transient ImmutableSet<E> elementSet;\n",
        "127": "      ImmutableEntry<E>[] hashTable,\n",
        "130": "      ImmutableSet<E> elementSet) {\n",
        "138": "  private static final class NonTerminalEntry<E> extends Multisets.ImmutableEntry<E> {\n",
        "139": "    private final Multisets.ImmutableEntry<E> nextInBucket;\n",
        "158": "  public int count(@Nullable Object element) {\n",
        "159": "    Multisets.ImmutableEntry<E>[] hashTable = this.hashTable;\n",
        "160": "    if (element == null || hashTable == null) {\n",
        "165": "    for (Multisets.ImmutableEntry<E> entry = hashTable[hash & mask];\n"
    }
}