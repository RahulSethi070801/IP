{
    "addition": {
        "23": "import static java.util.Objects.requireNonNull;\n",
        "43": "import java.util.function.Function;\n",
        "44": "import java.util.function.Supplier;\n",
        "45": "import java.util.function.ToIntFunction;\n",
        "47": "import javax.annotation.CheckForNull;\n",
        "63": "@ElementTypesAreNonnullByDefault\n",
        "84": "  public static <T extends @Nullable Object, E extends @Nullable Object, M extends Multiset<E>>\n",
        "85": "      Collector<T, ?, M> toMultiset(\n",
        "86": "          Function<? super T, E> elementFunction,\n",
        "87": "          ToIntFunction<? super T> countFunction,\n",
        "88": "          Supplier<M> multisetSupplier) {\n",
        "102": "  public static <E extends @Nullable Object> Multiset<E> unmodifiableMultiset(\n",
        "103": "      Multiset<? extends E> multiset) {\n",
        "123": "  static class UnmodifiableMultiset<E extends @Nullable Object> extends ForwardingMultiset<E>\n",
        "124": "      implements Serializable {\n",
        "138": "    @CheckForNull transient Set<E> elementSet;\n",
        "150": "    @CheckForNull transient Set<Multiset.Entry<E>> entrySet;\n",
        "169": "    public boolean add(@ParametricNullness E element) {\n",
        "174": "    public int add(@ParametricNullness E element, int occurences) {\n",
        "184": "    public boolean remove(@CheckForNull Object element) {\n",
        "189": "    public int remove(@CheckForNull Object element, int occurrences) {\n",
        "209": "    public int setCount(@ParametricNullness E element, int count) {\n",
        "214": "    public boolean setCount(@ParametricNullness E element, int oldCount, int newCount) {\n",
        "233": "  public static <E extends @Nullable Object> SortedMultiset<E> unmodifiableSortedMultiset(\n",
        "234": "      SortedMultiset<E> sortedMultiset) {\n",
        "247": "  public static <E extends @Nullable Object> Multiset.Entry<E> immutableEntry(\n",
        "248": "      @ParametricNullness E e, int n) {\n",
        "252": "  static class ImmutableEntry<E extends @Nullable Object> extends AbstractEntry<E>\n",
        "253": "      implements Serializable {\n",
        "254": "    @ParametricNullness private final E element;\n",
        "257": "    ImmutableEntry(@ParametricNullness E element, int count) {\n",
        "264": "    @ParametricNullness\n",
        "265": "    public final E getElement() {\n",
        "274": "    @CheckForNull\n",
        "308": "  public static <E extends @Nullable Object> Multiset<E> filter(\n",
        "309": "      Multiset<E> unfiltered, Predicate<? super E> predicate) {\n",
        "320": "  private static final class FilteredMultiset<E extends @Nullable Object> extends ViewMultiset<E> {\n",
        "362": "    public int count(@CheckForNull Object element) {\n",
        "373": "    public int add(@ParametricNullness E element, int occurrences) {\n",
        "380": "    public int remove(@CheckForNull Object element, int occurrences) {\n",
        "415": "  public static <E extends @Nullable Object> Multiset<E> union(\n",
        "422": "      public boolean contains(@CheckForNull Object element) {\n",
        "432": "      public int count(@CheckForNull Object element) {\n",
        "453": "          @CheckForNull\n",
        "487": "  public static <E extends @Nullable Object> Multiset<E> intersection(\n",
        "494": "      public int count(@CheckForNull Object element) {\n",
        "544": "  public static <E extends @Nullable Object> Multiset<E> sum(\n",
        "552": "      public boolean contains(@CheckForNull Object element) {\n",
        "567": "      public int count(@CheckForNull Object element) {\n",
        "621": "  public static <E extends @Nullable Object> Multiset<E> difference(\n",
        "629": "      public int count(@CheckForNull Object element) {\n",
        "644": "          @ParametricNullness\n",
        "726": "  private static <E extends @Nullable Object> boolean retainOccurrencesImpl(\n",
        "834": "  abstract static class AbstractEntry<E extends @Nullable Object> implements Multiset.Entry<E> {\n",
        "840": "    public boolean equals(@CheckForNull Object object) {\n",
        "874": "  static boolean equalsImpl(Multiset<?> multiset, @CheckForNull Object object) {\n",
        "900": "  static <E extends @Nullable Object> boolean addAllImpl(\n",
        "901": "      Multiset<E> self, Collection<? extends E> elements) {\n",
        "914": "  private static <E extends @Nullable Object> boolean addAllImpl(\n",
        "915": "      Multiset<E> self, Multiset<? extends E> elements) {\n",
        "945": "  static <E extends @Nullable Object> int setCountImpl(\n",
        "946": "      Multiset<E> self, @ParametricNullness E element, int count) {\n",
        "962": "  static <E extends @Nullable Object> boolean setCountImpl(\n",
        "963": "      Multiset<E> self, @ParametricNullness E element, int oldCount, int newCount) {\n",
        "975": "  static <E extends @Nullable Object> Iterator<E> elementIterator(\n",
        "976": "      Iterator<Entry<E>> entryIterator) {\n",
        "979": "      @ParametricNullness\n",
        "986": "  abstract static class ElementSet<E extends @Nullable Object> extends Sets.ImprovedAbstractSet<E> {\n",
        "995": "    public boolean contains(@CheckForNull Object o) {\n",
        "1013": "    public boolean remove(@CheckForNull Object o) {\n",
        "1023": "  abstract static class EntrySet<E extends @Nullable Object>\n",
        "1024": "      extends Sets.ImprovedAbstractSet<Entry<E>> {\n",
        "1028": "    public boolean contains(@CheckForNull Object o) {\n",
        "1047": "    public boolean remove(@CheckForNull Object object) {\n",
        "1054": "          // (Presumably it can still throw CCE/NPE but only if the underlying Multiset does.)\n",
        "1055": "          @SuppressWarnings({\"unchecked\", \"nullness\"})\n",
        "1056": "          Multiset<@Nullable Object> multiset = (Multiset<@Nullable Object>) multiset();\n",
        "1070": "  static <E extends @Nullable Object> Iterator<E> iteratorImpl(Multiset<E> multiset) {\n",
        "1074": "  static final class MultisetIteratorImpl<E extends @Nullable Object> implements Iterator<E> {\n",
        "1077": "    @CheckForNull private Entry<E> currentEntry;\n",
        "1098": "    @ParametricNullness\n",
        "1109": "      /*\n",
        "1110": "       * requireNonNull is safe because laterCount starts at 0, forcing us to initialize\n",
        "1111": "       * currentEntry above. After that, we never clear it.\n",
        "1112": "       */\n",
        "1113": "      return requireNonNull(currentEntry).getElement();\n",
        "1122": "        /*\n",
        "1123": "         * requireNonNull is safe because canRemove is set to true only after we initialize\n",
        "1124": "         * currentEntry (which we never subsequently clear).\n",
        "1125": "         */\n",
        "1126": "        multiset.remove(requireNonNull(currentEntry).getElement());\n",
        "1133": "  static <E extends @Nullable Object> Spliterator<E> spliteratorImpl(Multiset<E> multiset) {\n",
        "1154": "  static <T extends @Nullable Object> Multiset<T> cast(Iterable<T> iterable) {\n",
        "1184": "  private abstract static class ViewMultiset<E extends @Nullable Object>\n",
        "1185": "      extends AbstractMultiset<E> {\n"
    },
    "removed": {
        "78": "  public static <T, E, M extends Multiset<E>> Collector<T, ?, M> toMultiset(\n",
        "79": "      java.util.function.Function<? super T, E> elementFunction,\n",
        "80": "      java.util.function.ToIntFunction<? super T> countFunction,\n",
        "81": "      java.util.function.Supplier<M> multisetSupplier) {\n",
        "95": "  public static <E> Multiset<E> unmodifiableMultiset(Multiset<? extends E> multiset) {\n",
        "115": "  static class UnmodifiableMultiset<E> extends ForwardingMultiset<E> implements Serializable {\n",
        "129": "    transient @Nullable Set<E> elementSet;\n",
        "141": "    transient @Nullable Set<Multiset.Entry<E>> entrySet;\n",
        "160": "    public boolean add(E element) {\n",
        "165": "    public int add(E element, int occurences) {\n",
        "175": "    public boolean remove(Object element) {\n",
        "180": "    public int remove(Object element, int occurrences) {\n",
        "200": "    public int setCount(E element, int count) {\n",
        "205": "    public boolean setCount(E element, int oldCount, int newCount) {\n",
        "224": "  public static <E> SortedMultiset<E> unmodifiableSortedMultiset(SortedMultiset<E> sortedMultiset) {\n",
        "237": "  public static <E> Multiset.Entry<E> immutableEntry(@Nullable E e, int n) {\n",
        "241": "  static class ImmutableEntry<E> extends AbstractEntry<E> implements Serializable {\n",
        "242": "    private final @Nullable E element;\n",
        "245": "    ImmutableEntry(@Nullable E element, int count) {\n",
        "252": "    public final @Nullable E getElement() {\n",
        "294": "  public static <E> Multiset<E> filter(Multiset<E> unfiltered, Predicate<? super E> predicate) {\n",
        "305": "  private static final class FilteredMultiset<E> extends ViewMultiset<E> {\n",
        "347": "    public int count(@Nullable Object element) {\n",
        "358": "    public int add(@Nullable E element, int occurrences) {\n",
        "365": "    public int remove(@Nullable Object element, int occurrences) {\n",
        "400": "  public static <E> Multiset<E> union(\n",
        "407": "      public boolean contains(@Nullable Object element) {\n",
        "417": "      public int count(Object element) {\n",
        "471": "  public static <E> Multiset<E> intersection(\n",
        "478": "      public int count(Object element) {\n",
        "528": "  public static <E> Multiset<E> sum(\n",
        "536": "      public boolean contains(@Nullable Object element) {\n",
        "551": "      public int count(Object element) {\n",
        "605": "  public static <E> Multiset<E> difference(\n",
        "613": "      public int count(@Nullable Object element) {\n",
        "709": "  private static <E> boolean retainOccurrencesImpl(\n",
        "817": "  abstract static class AbstractEntry<E> implements Multiset.Entry<E> {\n",
        "823": "    public boolean equals(@Nullable Object object) {\n",
        "857": "  static boolean equalsImpl(Multiset<?> multiset, @Nullable Object object) {\n",
        "883": "  static <E> boolean addAllImpl(Multiset<E> self, Collection<? extends E> elements) {\n",
        "896": "  private static <E> boolean addAllImpl(Multiset<E> self, Multiset<? extends E> elements) {\n",
        "926": "  static <E> int setCountImpl(Multiset<E> self, E element, int count) {\n",
        "942": "  static <E> boolean setCountImpl(Multiset<E> self, E element, int oldCount, int newCount) {\n",
        "954": "  static <E> Iterator<E> elementIterator(Iterator<Entry<E>> entryIterator) {\n",
        "963": "  abstract static class ElementSet<E> extends Sets.ImprovedAbstractSet<E> {\n",
        "972": "    public boolean contains(Object o) {\n",
        "990": "    public boolean remove(Object o) {\n",
        "1000": "  abstract static class EntrySet<E> extends Sets.ImprovedAbstractSet<Entry<E>> {\n",
        "1004": "    public boolean contains(@Nullable Object o) {\n",
        "1023": "    public boolean remove(Object object) {\n",
        "1030": "          @SuppressWarnings(\"unchecked\")\n",
        "1031": "          Multiset<Object> multiset = (Multiset<Object>) multiset();\n",
        "1045": "  static <E> Iterator<E> iteratorImpl(Multiset<E> multiset) {\n",
        "1049": "  static final class MultisetIteratorImpl<E> implements Iterator<E> {\n",
        "1052": "    private @Nullable Entry<E> currentEntry;\n",
        "1083": "      return currentEntry.getElement();\n",
        "1092": "        multiset.remove(currentEntry.getElement());\n",
        "1099": "  static <E> Spliterator<E> spliteratorImpl(Multiset<E> multiset) {\n",
        "1120": "  static <T> Multiset<T> cast(Iterable<T> iterable) {\n",
        "1150": "  private abstract static class ViewMultiset<E> extends AbstractMultiset<E> {\n"
    }
}