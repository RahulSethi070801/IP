{
    "addition": {
        "31": "import javax.annotation.CheckForNull;\n",
        "32": "import org.checkerframework.checker.nullness.qual.Nullable;\n",
        "35": " * {@code ObjectCountHashMap} uses arrays to store key objects and count values. Comparing to using\n",
        "36": " * a traditional {@code HashMap} implementation which stores keys and count values as map entries,\n",
        "37": " * {@code ObjectCountHashMap} minimizes object allocation and reduces memory footprint.\n",
        "42": "@ElementTypesAreNonnullByDefault\n",
        "43": "class ObjectCountHashMap<K extends @Nullable Object> {\n",
        "46": "  static <K extends @Nullable Object> ObjectCountHashMap<K> create() {\n",
        "59": "  static <K extends @Nullable Object> ObjectCountHashMap<K> createWithExpectedSize(\n",
        "60": "      int expectedSize) {\n",
        "79": "  /*\n",
        "80": "   * The array fields below are not initialized directly in the constructor, but they're initialized\n",
        "81": "   * by init(), which the constructor calls.\n",
        "82": "   */\n",
        "83": "\n",
        "85": "  transient @Nullable Object[] keys;\n",
        "150": "    this.keys = new @Nullable Object[expectedSize];\n",
        "190": "  @ParametricNullness\n",
        "212": "    @ParametricNullness final K key;\n",
        "223": "    @ParametricNullness\n",
        "283": "  public int put(@ParametricNullness K key, int value) {\n",
        "286": "    @Nullable Object[] keys = this.keys;\n",
        "328": "  void insertEntry(int entryIndex, @ParametricNullness K key, int value, int hash) {\n",
        "389": "  int indexOf(@CheckForNull Object key) {\n",
        "402": "  public boolean containsKey(@CheckForNull Object key) {\n",
        "406": "  public int get(@CheckForNull Object key) {\n",
        "412": "  public int remove(@CheckForNull Object key) {\n",
        "416": "  private int remove(@CheckForNull Object key, int hash) {\n"
    },
    "removed": {
        "31": "import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n",
        "34": " * ObjectCountHashMap is an implementation of {@code AbstractObjectCountMap} that uses arrays to\n",
        "35": " * store key objects and count values. Comparing to using a traditional {@code HashMap}\n",
        "36": " * implementation which stores keys and count values as map entries, {@code ObjectCountHashMap}\n",
        "37": " * minimizes object allocation and reduces memory footprint.\n",
        "42": "class ObjectCountHashMap<K> {\n",
        "45": "  public static <K> ObjectCountHashMap<K> create() {\n",
        "58": "  public static <K> ObjectCountHashMap<K> createWithExpectedSize(int expectedSize) {\n",
        "78": "  transient Object[] keys;\n",
        "143": "    this.keys = new Object[expectedSize];\n",
        "204": "    @NullableDecl final K key;\n",
        "274": "  public int put(@NullableDecl K key, int value) {\n",
        "277": "    Object[] keys = this.keys;\n",
        "319": "  void insertEntry(int entryIndex, @NullableDecl K key, int value, int hash) {\n",
        "380": "  int indexOf(@NullableDecl Object key) {\n",
        "393": "  public boolean containsKey(@NullableDecl Object key) {\n",
        "397": "  public int get(@NullableDecl Object key) {\n",
        "403": "  public int remove(@NullableDecl Object key) {\n",
        "407": "  private int remove(@NullableDecl Object key, int hash) {\n"
    }
}