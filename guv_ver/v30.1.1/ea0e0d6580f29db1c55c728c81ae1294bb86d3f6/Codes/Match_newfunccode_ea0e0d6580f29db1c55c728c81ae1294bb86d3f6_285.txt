@Override
Iterator<Entry<E>> entryIterator() {
    final Iterator<Map.Entry<E, Count>> backingEntries = backingMap.entrySet().iterator();
    return new Iterator<Multiset.Entry<E>>() {

        @CheckForNull
        Map.Entry<E, Count> toRemove;

        @Override
        public boolean hasNext() {
            return backingEntries.hasNext();
        }

        @Override
        public Multiset.Entry<E> next() {
            final Map.Entry<E, Count> mapEntry = backingEntries.next();
            toRemove = mapEntry;
            return new Multisets.AbstractEntry<E>() {

                @Override
                @ParametricNullness
                public E getElement() {
                    return mapEntry.getKey();
                }

                @Override
                public int getCount() {
                    Count count = mapEntry.getValue();
                    if (count == null || count.get() == 0) {
                        Count frequency = backingMap.get(getElement());
                        if (frequency != null) {
                            return frequency.get();
                        }
                    }
                    return (count == null) ? 0 : count.get();
                }
            };
        }

        @Override
        public void remove() {
            checkState(toRemove != null, "no calls to next() since the last call to remove()");
            size -= toRemove.getValue().getAndSet(0);
            backingEntries.remove();
            toRemove = null;
        }
    };
}