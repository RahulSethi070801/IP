{
    "addition": {
        "23": "import static java.util.Objects.requireNonNull;\n",
        "42": "import javax.annotation.CheckForNull;\n",
        "43": "import org.checkerframework.checker.nullness.qual.Nullable;\n",
        "58": "@ElementTypesAreNonnullByDefault\n",
        "72": "  public static <E extends @Nullable Object> Multiset<E> unmodifiableMultiset(\n",
        "73": "      Multiset<? extends E> multiset) {\n",
        "93": "  static class UnmodifiableMultiset<E extends @Nullable Object> extends ForwardingMultiset<E>\n",
        "94": "      implements Serializable {\n",
        "108": "    @CheckForNull transient Set<E> elementSet;\n",
        "120": "    @CheckForNull transient Set<Multiset.Entry<E>> entrySet;\n",
        "139": "    public boolean add(@ParametricNullness E element) {\n",
        "144": "    public int add(@ParametricNullness E element, int occurences) {\n",
        "154": "    public boolean remove(@CheckForNull Object element) {\n",
        "159": "    public int remove(@CheckForNull Object element, int occurrences) {\n",
        "179": "    public int setCount(@ParametricNullness E element, int count) {\n",
        "184": "    public boolean setCount(@ParametricNullness E element, int oldCount, int newCount) {\n",
        "203": "  public static <E extends @Nullable Object> SortedMultiset<E> unmodifiableSortedMultiset(\n",
        "204": "      SortedMultiset<E> sortedMultiset) {\n",
        "217": "  public static <E extends @Nullable Object> Multiset.Entry<E> immutableEntry(\n",
        "218": "      @ParametricNullness E e, int n) {\n",
        "222": "  static class ImmutableEntry<E extends @Nullable Object> extends AbstractEntry<E>\n",
        "223": "      implements Serializable {\n",
        "224": "    @ParametricNullness private final E element;\n",
        "227": "    ImmutableEntry(@ParametricNullness E element, int count) {\n",
        "234": "    @ParametricNullness\n",
        "244": "    @CheckForNull\n",
        "278": "  public static <E extends @Nullable Object> Multiset<E> filter(\n",
        "279": "      Multiset<E> unfiltered, Predicate<? super E> predicate) {\n",
        "290": "  private static final class FilteredMultiset<E extends @Nullable Object> extends ViewMultiset<E> {\n",
        "332": "    public int count(@CheckForNull Object element) {\n",
        "343": "    public int add(@ParametricNullness E element, int occurrences) {\n",
        "350": "    public int remove(@CheckForNull Object element, int occurrences) {\n",
        "385": "  public static <E extends @Nullable Object> Multiset<E> union(\n",
        "392": "      public boolean contains(@CheckForNull Object element) {\n",
        "402": "      public int count(@CheckForNull Object element) {\n",
        "423": "          @CheckForNull\n",
        "457": "  public static <E extends @Nullable Object> Multiset<E> intersection(\n",
        "464": "      public int count(@CheckForNull Object element) {\n",
        "514": "  public static <E extends @Nullable Object> Multiset<E> sum(\n",
        "522": "      public boolean contains(@CheckForNull Object element) {\n",
        "537": "      public int count(@CheckForNull Object element) {\n",
        "591": "  public static <E extends @Nullable Object> Multiset<E> difference(\n",
        "599": "      public int count(@CheckForNull Object element) {\n",
        "614": "          @ParametricNullness\n",
        "696": "  private static <E extends @Nullable Object> boolean retainOccurrencesImpl(\n",
        "804": "  abstract static class AbstractEntry<E extends @Nullable Object> implements Multiset.Entry<E> {\n",
        "810": "    public boolean equals(@CheckForNull Object object) {\n",
        "844": "  static boolean equalsImpl(Multiset<?> multiset, @CheckForNull Object object) {\n",
        "870": "  static <E extends @Nullable Object> boolean addAllImpl(\n",
        "871": "      Multiset<E> self, Collection<? extends E> elements) {\n",
        "884": "  private static <E extends @Nullable Object> boolean addAllImpl(\n",
        "885": "      Multiset<E> self, Multiset<? extends E> elements) {\n",
        "904": "  private static <E extends @Nullable Object> boolean addAllImpl(\n",
        "935": "  static <E extends @Nullable Object> int setCountImpl(\n",
        "936": "      Multiset<E> self, @ParametricNullness E element, int count) {\n",
        "952": "  static <E extends @Nullable Object> boolean setCountImpl(\n",
        "953": "      Multiset<E> self, @ParametricNullness E element, int oldCount, int newCount) {\n",
        "965": "  static <E extends @Nullable Object> Iterator<E> elementIterator(\n",
        "966": "      Iterator<Entry<E>> entryIterator) {\n",
        "969": "      @ParametricNullness\n",
        "976": "  abstract static class ElementSet<E extends @Nullable Object> extends Sets.ImprovedAbstractSet<E> {\n",
        "985": "    public boolean contains(@CheckForNull Object o) {\n",
        "1003": "    public boolean remove(@CheckForNull Object o) {\n",
        "1013": "  abstract static class EntrySet<E extends @Nullable Object>\n",
        "1014": "      extends Sets.ImprovedAbstractSet<Entry<E>> {\n",
        "1018": "    public boolean contains(@CheckForNull Object o) {\n",
        "1037": "    public boolean remove(@CheckForNull Object object) {\n",
        "1044": "          // (Presumably it can still throw CCE/NPE but only if the underlying Multiset does.)\n",
        "1045": "          @SuppressWarnings({\"unchecked\", \"nullness\"})\n",
        "1046": "          Multiset<@Nullable Object> multiset = (Multiset<@Nullable Object>) multiset();\n",
        "1060": "  static <E extends @Nullable Object> Iterator<E> iteratorImpl(Multiset<E> multiset) {\n",
        "1064": "  static final class MultisetIteratorImpl<E extends @Nullable Object> implements Iterator<E> {\n",
        "1067": "    @CheckForNull private Entry<E> currentEntry;\n",
        "1088": "    @ParametricNullness\n",
        "1099": "      /*\n",
        "1100": "       * requireNonNull is safe because laterCount starts at 0, forcing us to initialize\n",
        "1101": "       * currentEntry above. After that, we never clear it.\n",
        "1102": "       */\n",
        "1103": "      return requireNonNull(currentEntry).getElement();\n",
        "1112": "        /*\n",
        "1113": "         * requireNonNull is safe because canRemove is set to true only after we initialize\n",
        "1114": "         * currentEntry (which we never subsequently clear).\n",
        "1115": "         */\n",
        "1116": "        multiset.remove(requireNonNull(currentEntry).getElement());\n",
        "1133": "  static <T extends @Nullable Object> Multiset<T> cast(Iterable<T> iterable) {\n",
        "1163": "  private abstract static class ViewMultiset<E extends @Nullable Object>\n",
        "1164": "      extends AbstractMultiset<E> {\n"
    },
    "removed": {
        "41": "import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n",
        "69": "  public static <E> Multiset<E> unmodifiableMultiset(Multiset<? extends E> multiset) {\n",
        "89": "  static class UnmodifiableMultiset<E> extends ForwardingMultiset<E> implements Serializable {\n",
        "103": "    @NullableDecl transient Set<E> elementSet;\n",
        "115": "    @NullableDecl transient Set<Multiset.Entry<E>> entrySet;\n",
        "134": "    public boolean add(E element) {\n",
        "139": "    public int add(E element, int occurences) {\n",
        "149": "    public boolean remove(Object element) {\n",
        "154": "    public int remove(Object element, int occurrences) {\n",
        "174": "    public int setCount(E element, int count) {\n",
        "179": "    public boolean setCount(E element, int oldCount, int newCount) {\n",
        "198": "  public static <E> SortedMultiset<E> unmodifiableSortedMultiset(SortedMultiset<E> sortedMultiset) {\n",
        "211": "  public static <E> Multiset.Entry<E> immutableEntry(@NullableDecl E e, int n) {\n",
        "215": "  static class ImmutableEntry<E> extends AbstractEntry<E> implements Serializable {\n",
        "216": "    @NullableDecl private final E element;\n",
        "219": "    ImmutableEntry(@NullableDecl E element, int count) {\n",
        "226": "    @NullableDecl\n",
        "269": "  public static <E> Multiset<E> filter(Multiset<E> unfiltered, Predicate<? super E> predicate) {\n",
        "280": "  private static final class FilteredMultiset<E> extends ViewMultiset<E> {\n",
        "322": "    public int count(@NullableDecl Object element) {\n",
        "333": "    public int add(@NullableDecl E element, int occurrences) {\n",
        "340": "    public int remove(@NullableDecl Object element, int occurrences) {\n",
        "375": "  public static <E> Multiset<E> union(\n",
        "382": "      public boolean contains(@NullableDecl Object element) {\n",
        "392": "      public int count(Object element) {\n",
        "446": "  public static <E> Multiset<E> intersection(\n",
        "453": "      public int count(Object element) {\n",
        "503": "  public static <E> Multiset<E> sum(\n",
        "511": "      public boolean contains(@NullableDecl Object element) {\n",
        "526": "      public int count(Object element) {\n",
        "580": "  public static <E> Multiset<E> difference(\n",
        "588": "      public int count(@NullableDecl Object element) {\n",
        "684": "  private static <E> boolean retainOccurrencesImpl(\n",
        "792": "  abstract static class AbstractEntry<E> implements Multiset.Entry<E> {\n",
        "798": "    public boolean equals(@NullableDecl Object object) {\n",
        "832": "  static boolean equalsImpl(Multiset<?> multiset, @NullableDecl Object object) {\n",
        "858": "  static <E> boolean addAllImpl(Multiset<E> self, Collection<? extends E> elements) {\n",
        "871": "  private static <E> boolean addAllImpl(Multiset<E> self, Multiset<? extends E> elements) {\n",
        "890": "  private static <E> boolean addAllImpl(\n",
        "921": "  static <E> int setCountImpl(Multiset<E> self, E element, int count) {\n",
        "937": "  static <E> boolean setCountImpl(Multiset<E> self, E element, int oldCount, int newCount) {\n",
        "949": "  static <E> Iterator<E> elementIterator(Iterator<Entry<E>> entryIterator) {\n",
        "958": "  abstract static class ElementSet<E> extends Sets.ImprovedAbstractSet<E> {\n",
        "967": "    public boolean contains(Object o) {\n",
        "985": "    public boolean remove(Object o) {\n",
        "995": "  abstract static class EntrySet<E> extends Sets.ImprovedAbstractSet<Entry<E>> {\n",
        "999": "    public boolean contains(@NullableDecl Object o) {\n",
        "1018": "    public boolean remove(Object object) {\n",
        "1025": "          @SuppressWarnings(\"unchecked\")\n",
        "1026": "          Multiset<Object> multiset = (Multiset<Object>) multiset();\n",
        "1040": "  static <E> Iterator<E> iteratorImpl(Multiset<E> multiset) {\n",
        "1044": "  static final class MultisetIteratorImpl<E> implements Iterator<E> {\n",
        "1047": "    @NullableDecl private Entry<E> currentEntry;\n",
        "1078": "      return currentEntry.getElement();\n",
        "1087": "        multiset.remove(currentEntry.getElement());\n",
        "1104": "  static <T> Multiset<T> cast(Iterable<T> iterable) {\n",
        "1134": "  private abstract static class ViewMultiset<E> extends AbstractMultiset<E> {\n"
    }
}