{
    "addition": {
        "23": "import static java.util.Objects.requireNonNull;\n",
        "44": "import org.checkerframework.checker.nullness.qual.Nullable;\n",
        "60": "@ElementTypesAreNonnullByDefault\n",
        "220": "    @CheckForNull Comparator<? super V> valueComparator;\n",
        "221": "    @Nullable Object[] alternatingKeysAndValues;\n",
        "233": "    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n",
        "235": "      this.alternatingKeysAndValues = new @Nullable Object[2 * initialCapacity];\n",
        "371": "          // requireNonNull is safe because the first `2*size` elements have been filled in.\n",
        "374": "                  (K) requireNonNull(alternatingKeysAndValues[2 * i]),\n",
        "375": "                  (V) requireNonNull(alternatingKeysAndValues[2 * i + 1]));\n",
        "474": "  @CheckForNull\n",
        "488": "  @CheckForNull\n",
        "489": "  public final V remove(@CheckForNull Object o) {\n",
        "525": "  public boolean containsKey(@CheckForNull Object key) {\n",
        "530": "  public boolean containsValue(@CheckForNull Object value) {\n",
        "537": "  public abstract V get(@CheckForNull Object key);\n",
        "551": "  @CheckForNull\n",
        "552": "  public final V getOrDefault(@CheckForNull Object key, @CheckForNull V defaultValue) {\n",
        "554": "    // TODO(b/192579700): Use a ternary once it no longer confuses our nullness checker.\n",
        "555": "    if (result != null) {\n",
        "556": "      return result;\n",
        "557": "    } else {\n",
        "558": "      return defaultValue;\n",
        "559": "    }\n",
        "562": "  @LazyInit @RetainedWith @CheckForNull private transient ImmutableSet<Entry<K, V>> entrySet;\n",
        "576": "  @LazyInit @RetainedWith @CheckForNull private transient ImmutableSet<K> keySet;\n",
        "610": "  @LazyInit @RetainedWith @CheckForNull private transient ImmutableCollection<V> values;\n",
        "630": "  @LazyInit @CheckForNull private transient ImmutableSetMultimap<K, V> multimapView;\n",
        "663": "    public boolean containsKey(@CheckForNull Object key) {\n",
        "668": "    @CheckForNull\n",
        "669": "    public ImmutableSet<V> get(@CheckForNull Object key) {\n",
        "719": "  public boolean equals(@CheckForNull Object object) {\n",
        "760": "        // \"extends Object\" works around https://github.com/typetools/checker-framework/issues/3013\n",
        "761": "        for (Entry<? extends Object, ? extends Object> entry : map.entrySet()) {\n"
    },
    "removed": {
        "43": "import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n",
        "218": "    @NullableDecl Comparator<? super V> valueComparator;\n",
        "219": "    Object[] alternatingKeysAndValues;\n",
        "231": "    @SuppressWarnings(\"unchecked\")\n",
        "233": "      this.alternatingKeysAndValues = new Object[2 * initialCapacity];\n",
        "371": "                  (K) alternatingKeysAndValues[2 * i], (V) alternatingKeysAndValues[2 * i + 1]);\n",
        "483": "  public final V remove(Object o) {\n",
        "519": "  public boolean containsKey(@NullableDecl Object key) {\n",
        "524": "  public boolean containsValue(@NullableDecl Object value) {\n",
        "531": "  public abstract V get(@NullableDecl Object key);\n",
        "545": "  public final V getOrDefault(@NullableDecl Object key, @NullableDecl V defaultValue) {\n",
        "547": "    return (result != null) ? result : defaultValue;\n",
        "550": "  @LazyInit @RetainedWith private transient ImmutableSet<Entry<K, V>> entrySet;\n",
        "564": "  @LazyInit @RetainedWith private transient ImmutableSet<K> keySet;\n",
        "598": "  @LazyInit @RetainedWith private transient ImmutableCollection<V> values;\n",
        "618": "  @LazyInit private transient ImmutableSetMultimap<K, V> multimapView;\n",
        "651": "    public boolean containsKey(@NullableDecl Object key) {\n",
        "656": "    public ImmutableSet<V> get(@NullableDecl Object key) {\n",
        "706": "  public boolean equals(@NullableDecl Object object) {\n",
        "747": "        for (Entry<?, ?> entry : map.entrySet()) {\n"
    }
}