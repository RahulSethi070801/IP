{
    "addition": {
        "23": "import static java.util.Objects.requireNonNull;\n",
        "32": "import javax.annotation.CheckForNull;\n",
        "43": "@ElementTypesAreNonnullByDefault\n",
        "71": "  @CheckForNull private final transient @Nullable ImmutableMapEntry<K, V>[] table;\n",
        "84": "  static <K, V> ImmutableMap<K, V> fromEntryArray(int n, @Nullable Entry<K, V>[] entryArray) {\n",
        "89": "    /*\n",
        "90": "     * The cast is safe: n==entryArray.length means that we have filled the whole array with Entry\n",
        "91": "     * instances, in which case it is safe to cast it from an array of nullable entries to an array\n",
        "92": "     * of non-null entries.\n",
        "93": "     */\n",
        "94": "    @SuppressWarnings(\"nullness\")\n",
        "95": "    Entry<K, V>[] entries =\n",
        "96": "        (n == entryArray.length) ? (Entry<K, V>[]) entryArray : createEntryArray(n);\n",
        "98": "    @Nullable ImmutableMapEntry<K, V>[] table = createEntryArray(tableSize);\n",
        "101": "      // requireNonNull is safe because the first `n` elements have been filled in.\n",
        "102": "      Entry<K, V> entry = requireNonNull(entryArray[entryIndex]);\n",
        "107": "      ImmutableMapEntry<K, V> existing = table[tableIndex];\n",
        "137": "  private RegularImmutableMap(\n",
        "138": "      Entry<K, V>[] entries, @CheckForNull @Nullable ImmutableMapEntry<K, V>[] table, int mask) {\n",
        "150": "      Object key, Entry<?, ?> entry, @CheckForNull ImmutableMapEntry<?, ?> keyBucketHead) {\n",
        "160": "  @CheckForNull\n",
        "161": "  public V get(@CheckForNull Object key) {\n",
        "165": "  @CheckForNull\n",
        "166": "  static <V> V get(\n",
        "167": "      @CheckForNull Object key,\n",
        "168": "      @CheckForNull @Nullable ImmutableMapEntry<?, V>[] keyTable,\n",
        "169": "      int mask) {\n",
        "234": "    public boolean contains(@CheckForNull Object object) {\n"
    },
    "removed": {
        "68": "  private final transient ImmutableMapEntry<K, V>[] table;\n",
        "81": "  static <K, V> ImmutableMap<K, V> fromEntryArray(int n, Entry<K, V>[] entryArray) {\n",
        "86": "    Entry<K, V>[] entries;\n",
        "87": "    if (n == entryArray.length) {\n",
        "88": "      entries = entryArray;\n",
        "89": "    } else {\n",
        "90": "      entries = createEntryArray(n);\n",
        "91": "    }\n",
        "93": "    ImmutableMapEntry<K, V>[] table = createEntryArray(tableSize);\n",
        "96": "      Entry<K, V> entry = entryArray[entryIndex];\n",
        "101": "      @Nullable ImmutableMapEntry<K, V> existing = table[tableIndex];\n",
        "131": "  private RegularImmutableMap(Entry<K, V>[] entries, ImmutableMapEntry<K, V>[] table, int mask) {\n",
        "143": "      Object key, Entry<?, ?> entry, @Nullable ImmutableMapEntry<?, ?> keyBucketHead) {\n",
        "153": "  public V get(@Nullable Object key) {\n",
        "157": "  static <V> @Nullable V get(\n",
        "158": "      @Nullable Object key, ImmutableMapEntry<?, V> @Nullable [] keyTable, int mask) {\n",
        "223": "    public boolean contains(Object object) {\n"
    }
}