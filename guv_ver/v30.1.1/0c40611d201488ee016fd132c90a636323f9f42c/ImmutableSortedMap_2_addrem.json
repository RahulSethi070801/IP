{
    "addition": {
        "23": "import static java.util.Objects.requireNonNull;\n",
        "351": "      @Nullable Entry<K, V>[] entryArray,\n",
        "357": "        // requireNonNull is safe because the first `size` elements have been filled in.\n",
        "358": "        Entry<K, V> onlyEntry = requireNonNull(entryArray[0]);\n",
        "359": "        return of(comparator, onlyEntry.getKey(), onlyEntry.getValue());\n",
        "366": "            // requireNonNull is safe because the first `size` elements have been filled in.\n",
        "367": "            Entry<K, V> entry = requireNonNull(entryArray[i]);\n",
        "368": "            Object key = entry.getKey();\n",
        "369": "            Object value = entry.getValue();\n",
        "382": "              new Comparator<@Nullable Entry<K, V>>() {\n",
        "384": "                public int compare(@CheckForNull Entry<K, V> e1, @CheckForNull Entry<K, V> e2) {\n",
        "385": "                  // requireNonNull is safe because the first `size` elements have been filled in.\n",
        "386": "                  requireNonNull(e1);\n",
        "387": "                  requireNonNull(e2);\n",
        "391": "          // requireNonNull is safe because the first `size` elements have been filled in.\n",
        "392": "          Entry<K, V> firstEntry = requireNonNull(entryArray[0]);\n",
        "393": "          K prevKey = firstEntry.getKey();\n",
        "395": "          values[0] = firstEntry.getValue();\n",
        "398": "            // requireNonNull is safe because the first `size` elements have been filled in.\n",
        "399": "            Entry<K, V> prevEntry = requireNonNull(entryArray[i - 1]);\n",
        "400": "            Entry<K, V> entry = requireNonNull(entryArray[i]);\n",
        "401": "            K key = entry.getKey();\n",
        "402": "            V value = entry.getValue();\n",
        "406": "            checkNoConflict(comparator.compare(prevKey, key) != 0, \"key\", prevEntry, entry);\n",
        "566": "          // requireNonNull is safe because the first `size` elements have been filled in.\n",
        "567": "          Entry<K, V> onlyEntry = requireNonNull(entries[0]);\n",
        "568": "          return of(comparator, onlyEntry.getKey(), onlyEntry.getValue());\n"
    },
    "removed": {
        "350": "      Entry<K, V>[] entryArray,\n",
        "356": "        return ImmutableSortedMap.<K, V>of(\n",
        "357": "            comparator, entryArray[0].getKey(), entryArray[0].getValue());\n",
        "364": "            Object key = entryArray[i].getKey();\n",
        "365": "            Object value = entryArray[i].getValue();\n",
        "378": "              new Comparator<Entry<K, V>>() {\n",
        "380": "                public int compare(Entry<K, V> e1, Entry<K, V> e2) {\n",
        "384": "          K prevKey = entryArray[0].getKey();\n",
        "386": "          values[0] = entryArray[0].getValue();\n",
        "389": "            K key = entryArray[i].getKey();\n",
        "390": "            V value = entryArray[i].getValue();\n",
        "394": "            checkNoConflict(\n",
        "395": "                comparator.compare(prevKey, key) != 0, \"key\", entryArray[i - 1], entryArray[i]);\n",
        "555": "          return of(comparator, entries[0].getKey(), entries[0].getValue());\n"
    }
}