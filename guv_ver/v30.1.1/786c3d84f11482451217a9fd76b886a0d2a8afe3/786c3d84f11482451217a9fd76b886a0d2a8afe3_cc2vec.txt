{"id": "786c3d84f11482451217a9fd76b886a0d2a8afe3", "code": [{"0": "android/guava-tests/test/com/google/common/math/QuantilesTest.java", "added": {"1": ["  public void testScale_indexes_varargs_compute_indexOrderIsMaintained() {\n", "    assertThat(Quantiles.scale(10).indexes(0, 10, 5, 1, 8, 1).compute(SIXTEEN_SQUARES_INTEGERS))\n", "        .comparingValuesUsing(QUANTILE_CORRESPONDENCE)\n", "        .containsExactly(\n", "            0, SIXTEEN_SQUARES_MIN,\n", "            10, SIXTEEN_SQUARES_MAX,\n", "            5, SIXTEEN_SQUARES_MEDIAN,\n", "            1, SIXTEEN_SQUARES_DECILE_1,\n", "            8, SIXTEEN_SQUARES_DECILE_8)\n", "        .inOrder();\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304]}, "removed_lines": {}}, {"1": "android/guava/src/com/google/common/math/Quantiles.java", "added": {"1": ["import java.util.LinkedHashMap;\n"], "2": ["     * @return an unmodifiable, ordered map of results: the keys will be the specified quantile\n", "     *     indexes, and the values the corresponding quantile values. When iterating, entries in the\n", "     *     map are ordered by quantile index in the same order they were passed to the {@code\n", "     *     indexes} method.\n"], "3": ["     * @return an unmodifiable, ordered map of results: the keys will be the specified quantile\n", "     *     indexes, and the values the corresponding quantile values. When iterating, entries in the\n", "     *     map are ordered by quantile index in the same order they were passed to the {@code\n", "     *     indexes} method.\n"], "4": ["     * @return an unmodifiable, ordered map of results: the keys will be the specified quantile\n", "     *     indexes, and the values the corresponding quantile values. When iterating, entries in the\n", "     *     map are ordered by quantile index in the same order they were passed to the {@code\n", "     *     indexes} method.\n"], "5": ["     * @return an unmodifiable, ordered map of results: the keys will be the specified quantile\n", "     *     indexes, and the values the corresponding quantile values. When iterating, entries in the\n", "     *     map are ordered by quantile index in the same order they were passed to the {@code\n", "     *     indexes} method.\n"], "6": ["     * @return an unmodifiable, ordered map of results: the keys will be the specified quantile\n", "     *     indexes, and the values the corresponding quantile values. When iterating, entries in the\n", "     *     map are ordered by quantile index in the same order that the indexes were passed to the\n", "     *     {@code indexes} method.\n", "        Map<Integer, Double> nanMap = new LinkedHashMap<>();\n"], "7": ["      Map<Integer, Double> ret = new LinkedHashMap<>();\n"]}, "removed": {"1": ["import java.util.HashMap;\n"], "2": ["     * @return an unmodifiable map of results: the keys will be the specified quantile indexes, and\n", "     *     the values the corresponding quantile values\n"], "3": ["     * @return an unmodifiable map of results: the keys will be the specified quantile indexes, and\n", "     *     the values the corresponding quantile values\n"], "4": ["     * @return an unmodifiable map of results: the keys will be the specified quantile indexes, and\n", "     *     the values the corresponding quantile values\n"], "5": ["     * @return an unmodifiable map of results: the keys will be the specified quantile indexes, and\n", "     *     the values the corresponding quantile values\n"], "6": ["     * @return an unmodifiable map of results: the keys will be the specified quantile indexes, and\n", "     *     the values the corresponding quantile values\n", "        Map<Integer, Double> nanMap = new HashMap<>();\n"], "7": ["      Map<Integer, Double> ret = new HashMap<>();\n"]}, "added_lines": {"1": [30], "2": [334, 335, 336, 337], "3": [348, 349, 350, 351], "4": [363, 364, 365, 366], "5": [377, 378, 379, 380], "6": [391, 392, 393, 394, 399], "7": [438]}, "removed_lines": {"1": [30], "2": [334, 335], "3": [346, 347], "4": [359, 360], "5": [371, 372], "6": [383, 384, 389], "7": [428]}}, {"2": "guava-tests/test/com/google/common/math/QuantilesTest.java", "added": {"1": ["  public void testScale_indexes_varargs_compute_indexOrderIsMaintained() {\n", "    assertThat(Quantiles.scale(10).indexes(0, 10, 5, 1, 8, 1).compute(SIXTEEN_SQUARES_INTEGERS))\n", "        .comparingValuesUsing(QUANTILE_CORRESPONDENCE)\n", "        .containsExactly(\n", "            0, SIXTEEN_SQUARES_MIN,\n", "            10, SIXTEEN_SQUARES_MAX,\n", "            5, SIXTEEN_SQUARES_MEDIAN,\n", "            1, SIXTEEN_SQUARES_DECILE_1,\n", "            8, SIXTEEN_SQUARES_DECILE_8)\n", "        .inOrder();\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304]}, "removed_lines": {}}, {"3": "guava/src/com/google/common/math/Quantiles.java", "added": {"1": ["import java.util.LinkedHashMap;\n"], "2": ["     * @return an unmodifiable, ordered map of results: the keys will be the specified quantile\n", "     *     indexes, and the values the corresponding quantile values. When iterating, entries in the\n", "     *     map are ordered by quantile index in the same order they were passed to the {@code\n", "     *     indexes} method.\n"], "3": ["     * @return an unmodifiable, ordered map of results: the keys will be the specified quantile\n", "     *     indexes, and the values the corresponding quantile values. When iterating, entries in the\n", "     *     map are ordered by quantile index in the same order they were passed to the {@code\n", "     *     indexes} method.\n"], "4": ["     * @return an unmodifiable, ordered map of results: the keys will be the specified quantile\n", "     *     indexes, and the values the corresponding quantile values. When iterating, entries in the\n", "     *     map are ordered by quantile index in the same order they were passed to the {@code\n", "     *     indexes} method.\n"], "5": ["     * @return an unmodifiable, ordered map of results: the keys will be the specified quantile\n", "     *     indexes, and the values the corresponding quantile values. When iterating, entries in the\n", "     *     map are ordered by quantile index in the same order they were passed to the {@code\n", "     *     indexes} method.\n"], "6": ["     * @return an unmodifiable, ordered map of results: the keys will be the specified quantile\n", "     *     indexes, and the values the corresponding quantile values. When iterating, entries in the\n", "     *     map are ordered by quantile index in the same order that the indexes were passed to the\n", "     *     {@code indexes} method.\n", "        Map<Integer, Double> nanMap = new LinkedHashMap<>();\n"], "7": ["      Map<Integer, Double> ret = new LinkedHashMap<>();\n"]}, "removed": {"1": ["import java.util.HashMap;\n"], "2": ["     * @return an unmodifiable map of results: the keys will be the specified quantile indexes, and\n", "     *     the values the corresponding quantile values\n"], "3": ["     * @return an unmodifiable map of results: the keys will be the specified quantile indexes, and\n", "     *     the values the corresponding quantile values\n"], "4": ["     * @return an unmodifiable map of results: the keys will be the specified quantile indexes, and\n", "     *     the values the corresponding quantile values\n"], "5": ["     * @return an unmodifiable map of results: the keys will be the specified quantile indexes, and\n", "     *     the values the corresponding quantile values\n"], "6": ["     * @return an unmodifiable map of results: the keys will be the specified quantile indexes, and\n", "     *     the values the corresponding quantile values\n", "        Map<Integer, Double> nanMap = new HashMap<>();\n"], "7": ["      Map<Integer, Double> ret = new HashMap<>();\n"]}, "added_lines": {"1": [30], "2": [334, 335, 336, 337], "3": [348, 349, 350, 351], "4": [363, 364, 365, 366], "5": [377, 378, 379, 380], "6": [391, 392, 393, 394, 399], "7": [438]}, "removed_lines": {"1": [30], "2": [334, 335], "3": [346, 347], "4": [359, 360], "5": [371, 372], "6": [383, 384, 389], "7": [428]}}]}
