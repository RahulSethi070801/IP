{
    "addition": {
        "148": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)\n",
        "151": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)\n",
        "157": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)\n",
        "160": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)\n",
        "185": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)\n",
        "188": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)\n",
        "191": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)\n",
        "194": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)\n",
        "239": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "242": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "248": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "251": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "286": "        .isWithin(ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "289": "        .isWithin(ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "292": "        .isWithin(ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "295": "        .isWithin(ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "331": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "334": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "337": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "340": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "376": "        .isWithin(ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "379": "        .isWithin(ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "382": "        .isWithin(ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "385": "        .isWithin(ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "400": "    assertThat(ONE_VALUE_STATS.max()).isEqualTo(ONE_VALUE);\n",
        "404": "    assertThat(TWO_VALUES_STATS.max()).isEqualTo(TWO_VALUES_MAX);\n",
        "405": "    assertThat(MANY_VALUES_STATS_VARARGS.max()).isEqualTo(MANY_VALUES_MAX);\n",
        "406": "    assertThat(MANY_VALUES_STATS_ITERABLE.max()).isEqualTo(MANY_VALUES_MAX);\n",
        "416": "        assertWithMessage(\"max of \" + values).that(max).isEqualTo(MANY_VALUES_MAX);\n",
        "419": "    assertThat(MANY_VALUES_STATS_SNAPSHOT.max()).isEqualTo(MANY_VALUES_MAX);\n",
        "420": "    assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.max()).isEqualTo(INTEGER_MANY_VALUES_MAX);\n",
        "421": "    assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.max()).isEqualTo(INTEGER_MANY_VALUES_MAX);\n",
        "422": "    assertThat(LONG_MANY_VALUES_STATS_ITERATOR.max()).isEqualTo(LONG_MANY_VALUES_MAX);\n",
        "423": "    assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.max()).isEqualTo(LONG_MANY_VALUES_MAX);\n",
        "437": "    assertThat(ONE_VALUE_STATS.min()).isEqualTo(ONE_VALUE);\n",
        "441": "    assertThat(TWO_VALUES_STATS.min()).isEqualTo(TWO_VALUES_MIN);\n",
        "442": "    assertThat(MANY_VALUES_STATS_VARARGS.min()).isEqualTo(MANY_VALUES_MIN);\n",
        "443": "    assertThat(MANY_VALUES_STATS_ITERABLE.min()).isEqualTo(MANY_VALUES_MIN);\n",
        "444": "    assertThat(MANY_VALUES_STATS_ITERATOR.min()).isEqualTo(MANY_VALUES_MIN);\n",
        "456": "        assertWithMessage(\"min of \" + values).that(min).isEqualTo(MANY_VALUES_MIN);\n",
        "459": "    assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.min()).isEqualTo(INTEGER_MANY_VALUES_MIN);\n",
        "460": "    assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.min()).isEqualTo(INTEGER_MANY_VALUES_MIN);\n",
        "461": "    assertThat(LONG_MANY_VALUES_STATS_ITERATOR.min()).isEqualTo(LONG_MANY_VALUES_MIN);\n",
        "462": "    assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.min()).isEqualTo(LONG_MANY_VALUES_MIN);\n",
        "545": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)\n",
        "548": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)\n",
        "550": "    assertThat(Stats.meanOf(LONG_MANY_VALUES))\n",
        "551": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)\n",
        "552": "        .of(LONG_MANY_VALUES_MEAN);\n",
        "554": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)\n"
    },
    "removed": {
        "148": "        .isWithin(ALLOWED_ERROR)\n",
        "151": "        .isWithin(ALLOWED_ERROR)\n",
        "157": "        .isWithin(ALLOWED_ERROR)\n",
        "160": "        .isWithin(ALLOWED_ERROR)\n",
        "185": "        .isWithin(ALLOWED_ERROR)\n",
        "188": "        .isWithin(ALLOWED_ERROR)\n",
        "191": "        .isWithin(ALLOWED_ERROR)\n",
        "194": "        .isWithin(ALLOWED_ERROR)\n",
        "239": "        .isWithin(ALLOWED_ERROR)\n",
        "242": "        .isWithin(ALLOWED_ERROR)\n",
        "248": "        .isWithin(ALLOWED_ERROR)\n",
        "251": "        .isWithin(ALLOWED_ERROR)\n",
        "286": "        .isWithin(ALLOWED_ERROR)\n",
        "289": "        .isWithin(ALLOWED_ERROR)\n",
        "292": "        .isWithin(ALLOWED_ERROR)\n",
        "295": "        .isWithin(ALLOWED_ERROR)\n",
        "331": "        .isWithin(ALLOWED_ERROR)\n",
        "334": "        .isWithin(ALLOWED_ERROR)\n",
        "337": "        .isWithin(ALLOWED_ERROR)\n",
        "340": "        .isWithin(ALLOWED_ERROR)\n",
        "376": "        .isWithin(ALLOWED_ERROR)\n",
        "379": "        .isWithin(ALLOWED_ERROR)\n",
        "382": "        .isWithin(ALLOWED_ERROR)\n",
        "385": "        .isWithin(ALLOWED_ERROR)\n",
        "400": "    assertThat(ONE_VALUE_STATS.max()).isWithin(ALLOWED_ERROR).of(ONE_VALUE);\n",
        "404": "    assertThat(TWO_VALUES_STATS.max()).isWithin(ALLOWED_ERROR).of(TWO_VALUES_MAX);\n",
        "405": "    assertThat(MANY_VALUES_STATS_VARARGS.max()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MAX);\n",
        "406": "    assertThat(MANY_VALUES_STATS_ITERABLE.max()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MAX);\n",
        "416": "        assertWithMessage(\"max of \" + values).that(max).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MAX);\n",
        "419": "    assertThat(MANY_VALUES_STATS_SNAPSHOT.max()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MAX);\n",
        "420": "    assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.max())\n",
        "421": "        .isWithin(ALLOWED_ERROR)\n",
        "422": "        .of(INTEGER_MANY_VALUES_MAX);\n",
        "423": "    assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.max())\n",
        "424": "        .isWithin(ALLOWED_ERROR)\n",
        "425": "        .of(INTEGER_MANY_VALUES_MAX);\n",
        "426": "    assertThat(LONG_MANY_VALUES_STATS_ITERATOR.max())\n",
        "427": "        .isWithin(ALLOWED_ERROR)\n",
        "428": "        .of(LONG_MANY_VALUES_MAX);\n",
        "429": "    assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.max())\n",
        "430": "        .isWithin(ALLOWED_ERROR)\n",
        "431": "        .of(LONG_MANY_VALUES_MAX);\n",
        "445": "    assertThat(ONE_VALUE_STATS.min()).isWithin(ALLOWED_ERROR).of(ONE_VALUE);\n",
        "449": "    assertThat(TWO_VALUES_STATS.min()).isWithin(ALLOWED_ERROR).of(TWO_VALUES_MIN);\n",
        "450": "    assertThat(MANY_VALUES_STATS_VARARGS.min()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MIN);\n",
        "451": "    assertThat(MANY_VALUES_STATS_ITERABLE.min()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MIN);\n",
        "452": "    assertThat(MANY_VALUES_STATS_ITERATOR.min()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MIN);\n",
        "464": "        assertWithMessage(\"min of \" + values).that(min).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MIN);\n",
        "467": "    assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.min())\n",
        "468": "        .isWithin(ALLOWED_ERROR)\n",
        "469": "        .of(INTEGER_MANY_VALUES_MIN);\n",
        "470": "    assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.min())\n",
        "471": "        .isWithin(ALLOWED_ERROR)\n",
        "472": "        .of(INTEGER_MANY_VALUES_MIN);\n",
        "473": "    assertThat(LONG_MANY_VALUES_STATS_ITERATOR.min())\n",
        "474": "        .isWithin(ALLOWED_ERROR)\n",
        "475": "        .of(LONG_MANY_VALUES_MIN);\n",
        "476": "    assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.min())\n",
        "477": "        .isWithin(ALLOWED_ERROR)\n",
        "478": "        .of(LONG_MANY_VALUES_MIN);\n",
        "561": "        .isWithin(ALLOWED_ERROR)\n",
        "564": "        .isWithin(ALLOWED_ERROR)\n",
        "566": "    assertThat(Stats.meanOf(LONG_MANY_VALUES)).isWithin(ALLOWED_ERROR).of(LONG_MANY_VALUES_MEAN);\n",
        "568": "        .isWithin(ALLOWED_ERROR)\n"
    }
}