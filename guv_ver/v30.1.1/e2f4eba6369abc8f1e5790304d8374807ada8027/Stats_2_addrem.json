{
    "addition": {
        "35": "import java.util.stream.Collector;\n",
        "36": "import java.util.stream.DoubleStream;\n",
        "37": "import java.util.stream.IntStream;\n",
        "38": "import java.util.stream.LongStream;\n",
        "110": "   * Returns statistics over a dataset containing the given values. The iterator will be completely\n",
        "111": "   * consumed by this method.\n",
        "156": "  /**\n",
        "157": "   * Returns statistics over a dataset containing the given values. The stream will be completely\n",
        "158": "   * consumed by this method.\n",
        "159": "   *\n",
        "160": "   * <p>If you have a {@code Stream<Double>} rather than a {@code DoubleStream}, you should collect\n",
        "161": "   * the values using {@link #toStats()} instead.\n",
        "162": "   *\n",
        "163": "   * @param values a series of values\n",
        "164": "   * @since NEXT\n",
        "165": "   */\n",
        "166": "  public static Stats of(DoubleStream values) {\n",
        "167": "    return values\n",
        "168": "        .collect(StatsAccumulator::new, StatsAccumulator::add, StatsAccumulator::addAll)\n",
        "169": "        .snapshot();\n",
        "170": "  }\n",
        "171": "\n",
        "172": "  /**\n",
        "173": "   * Returns statistics over a dataset containing the given values. The stream will be completely\n",
        "174": "   * consumed by this method.\n",
        "175": "   *\n",
        "176": "   * <p>If you have a {@code Stream<Integer>} rather than an {@code IntStream}, you should collect\n",
        "177": "   * the values using {@link #toStats()} instead.\n",
        "178": "   *\n",
        "179": "   * @param values a series of values\n",
        "180": "   * @since NEXT\n",
        "181": "   */\n",
        "182": "  public static Stats of(IntStream values) {\n",
        "183": "    return values\n",
        "184": "        .collect(StatsAccumulator::new, StatsAccumulator::add, StatsAccumulator::addAll)\n",
        "185": "        .snapshot();\n",
        "186": "  }\n",
        "187": "\n",
        "188": "  /**\n",
        "189": "   * Returns statistics over a dataset containing the given values. The stream will be completely\n",
        "190": "   * consumed by this method.\n",
        "191": "   *\n",
        "192": "   * <p>If you have a {@code Stream<Long>} rather than a {@code LongStream}, you should collect the\n",
        "193": "   * values using {@link #toStats()} instead.\n",
        "194": "   *\n",
        "195": "   * @param values a series of values, which will be converted to {@code double} values (this may\n",
        "196": "   *     cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15))\n",
        "197": "   * @since NEXT\n",
        "198": "   */\n",
        "199": "  public static Stats of(LongStream values) {\n",
        "200": "    return values\n",
        "201": "        .collect(StatsAccumulator::new, StatsAccumulator::add, StatsAccumulator::addAll)\n",
        "202": "        .snapshot();\n",
        "203": "  }\n",
        "204": "\n",
        "205": "  /**\n",
        "206": "   * Returns a {@link Collector} which accumulates statistics from a {@link java.util.stream.Stream}\n",
        "207": "   * of any type of boxed {@link Number} into a {@link Stats}. Use by calling {@code\n",
        "208": "   * boxedNumericStream.collect(toStats())}. The numbers will be converted to {@code double} values\n",
        "209": "   * (which may cause loss of precision).\n",
        "210": "   *\n",
        "211": "   * <p>If you have any of the primitive streams {@code DoubleStream}, {@code IntStream}, or {@code\n",
        "212": "   * LongStream}, you should use the factory method {@link #of} instead.\n",
        "213": "   *\n",
        "214": "   * @since NEXT\n",
        "215": "   */\n",
        "216": "  public static Collector<Number, StatsAccumulator, Stats> toStats() {\n",
        "217": "    return Collector.of(\n",
        "218": "        StatsAccumulator::new,\n",
        "219": "        (a, x) -> a.add(x.doubleValue()),\n",
        "220": "        (l, r) -> {\n",
        "221": "          l.addAll(r);\n",
        "222": "          return l;\n",
        "223": "        },\n",
        "224": "        StatsAccumulator::snapshot,\n",
        "225": "        Collector.Characteristics.UNORDERED);\n",
        "226": "  }\n",
        "227": "\n"
    },
    "removed": {
        "106": "   * Returns statistics over a dataset containing the given values.\n"
    }
}