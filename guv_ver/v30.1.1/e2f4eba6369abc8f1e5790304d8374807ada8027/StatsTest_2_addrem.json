{
    "addition": {
        "19": "import static com.google.common.math.Stats.toStats;\n",
        "59": "import static com.google.common.math.StatsTesting.MEGA_STREAM_COUNT;\n",
        "60": "import static com.google.common.math.StatsTesting.MEGA_STREAM_MAX;\n",
        "61": "import static com.google.common.math.StatsTesting.MEGA_STREAM_MEAN;\n",
        "62": "import static com.google.common.math.StatsTesting.MEGA_STREAM_MIN;\n",
        "63": "import static com.google.common.math.StatsTesting.MEGA_STREAM_POPULATION_VARIANCE;\n",
        "72": "import static com.google.common.math.StatsTesting.megaPrimitiveDoubleStream;\n",
        "87": "import java.math.BigDecimal;\n",
        "158": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)\n",
        "161": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)\n",
        "167": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)\n",
        "170": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)\n",
        "195": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)\n",
        "198": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)\n",
        "201": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)\n",
        "204": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)\n",
        "249": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "252": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "258": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "261": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "296": "        .isWithin(ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "299": "        .isWithin(ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "302": "        .isWithin(ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "305": "        .isWithin(ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "341": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "344": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "347": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "350": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "386": "        .isWithin(ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "389": "        .isWithin(ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "392": "        .isWithin(ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "395": "        .isWithin(ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "410": "    assertThat(ONE_VALUE_STATS.max()).isEqualTo(ONE_VALUE);\n",
        "414": "    assertThat(TWO_VALUES_STATS.max()).isEqualTo(TWO_VALUES_MAX);\n",
        "415": "    assertThat(MANY_VALUES_STATS_VARARGS.max()).isEqualTo(MANY_VALUES_MAX);\n",
        "416": "    assertThat(MANY_VALUES_STATS_ITERABLE.max()).isEqualTo(MANY_VALUES_MAX);\n",
        "426": "        assertWithMessage(\"max of \" + values).that(max).isEqualTo(MANY_VALUES_MAX);\n",
        "429": "    assertThat(MANY_VALUES_STATS_SNAPSHOT.max()).isEqualTo(MANY_VALUES_MAX);\n",
        "430": "    assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.max()).isEqualTo(INTEGER_MANY_VALUES_MAX);\n",
        "431": "    assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.max()).isEqualTo(INTEGER_MANY_VALUES_MAX);\n",
        "432": "    assertThat(LONG_MANY_VALUES_STATS_ITERATOR.max()).isEqualTo(LONG_MANY_VALUES_MAX);\n",
        "433": "    assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.max()).isEqualTo(LONG_MANY_VALUES_MAX);\n",
        "447": "    assertThat(ONE_VALUE_STATS.min()).isEqualTo(ONE_VALUE);\n",
        "451": "    assertThat(TWO_VALUES_STATS.min()).isEqualTo(TWO_VALUES_MIN);\n",
        "452": "    assertThat(MANY_VALUES_STATS_VARARGS.min()).isEqualTo(MANY_VALUES_MIN);\n",
        "453": "    assertThat(MANY_VALUES_STATS_ITERABLE.min()).isEqualTo(MANY_VALUES_MIN);\n",
        "454": "    assertThat(MANY_VALUES_STATS_ITERATOR.min()).isEqualTo(MANY_VALUES_MIN);\n",
        "466": "        assertWithMessage(\"min of \" + values).that(min).isEqualTo(MANY_VALUES_MIN);\n",
        "469": "    assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.min()).isEqualTo(INTEGER_MANY_VALUES_MIN);\n",
        "470": "    assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.min()).isEqualTo(INTEGER_MANY_VALUES_MIN);\n",
        "471": "    assertThat(LONG_MANY_VALUES_STATS_ITERATOR.min()).isEqualTo(LONG_MANY_VALUES_MIN);\n",
        "472": "    assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.min()).isEqualTo(LONG_MANY_VALUES_MIN);\n",
        "473": "  }\n",
        "474": "\n",
        "475": "  public void testOfPrimitiveDoubleStream() {\n",
        "476": "    Stats stats = Stats.of(megaPrimitiveDoubleStream());\n",
        "477": "    assertThat(stats.count()).isEqualTo(MEGA_STREAM_COUNT);\n",
        "478": "    assertThat(stats.mean()).isWithin(ALLOWED_ERROR * MEGA_STREAM_COUNT).of(MEGA_STREAM_MEAN);\n",
        "479": "    assertThat(stats.populationVariance())\n",
        "480": "        .isWithin(ALLOWED_ERROR * MEGA_STREAM_COUNT)\n",
        "481": "        .of(MEGA_STREAM_POPULATION_VARIANCE);\n",
        "482": "    assertThat(stats.min()).isEqualTo(MEGA_STREAM_MIN);\n",
        "483": "    assertThat(stats.max()).isEqualTo(MEGA_STREAM_MAX);\n",
        "484": "  }\n",
        "485": "\n",
        "486": "  public void testOfPrimitiveIntStream() {\n",
        "487": "    Stats stats = Stats.of(megaPrimitiveDoubleStream().mapToInt(x -> (int) x));\n",
        "488": "    assertThat(stats.count()).isEqualTo(MEGA_STREAM_COUNT);\n",
        "489": "    assertThat(stats.mean()).isWithin(ALLOWED_ERROR * MEGA_STREAM_COUNT).of(MEGA_STREAM_MEAN);\n",
        "490": "    assertThat(stats.populationVariance())\n",
        "491": "        .isWithin(ALLOWED_ERROR * MEGA_STREAM_COUNT)\n",
        "492": "        .of(MEGA_STREAM_POPULATION_VARIANCE);\n",
        "493": "    assertThat(stats.min()).isEqualTo(MEGA_STREAM_MIN);\n",
        "494": "    assertThat(stats.max()).isEqualTo(MEGA_STREAM_MAX);\n",
        "495": "  }\n",
        "496": "\n",
        "497": "  public void testOfPrimitiveLongStream() {\n",
        "498": "    Stats stats = Stats.of(megaPrimitiveDoubleStream().mapToLong(x -> (long) x));\n",
        "499": "    assertThat(stats.count()).isEqualTo(MEGA_STREAM_COUNT);\n",
        "500": "    assertThat(stats.mean()).isWithin(ALLOWED_ERROR * MEGA_STREAM_COUNT).of(MEGA_STREAM_MEAN);\n",
        "501": "    assertThat(stats.populationVariance())\n",
        "502": "        .isWithin(ALLOWED_ERROR * MEGA_STREAM_COUNT)\n",
        "503": "        .of(MEGA_STREAM_POPULATION_VARIANCE);\n",
        "504": "    assertThat(stats.min()).isEqualTo(MEGA_STREAM_MIN);\n",
        "505": "    assertThat(stats.max()).isEqualTo(MEGA_STREAM_MAX);\n",
        "506": "  }\n",
        "507": "\n",
        "508": "  public void testBoxedDoubleStreamToStats() {\n",
        "509": "    Stats stats = megaPrimitiveDoubleStream().boxed().collect(toStats());\n",
        "510": "    assertThat(stats.count()).isEqualTo(MEGA_STREAM_COUNT);\n",
        "511": "    assertThat(stats.mean()).isWithin(ALLOWED_ERROR * MEGA_STREAM_COUNT).of(MEGA_STREAM_MEAN);\n",
        "512": "    assertThat(stats.populationVariance())\n",
        "513": "        .isWithin(ALLOWED_ERROR * MEGA_STREAM_COUNT)\n",
        "514": "        .of(MEGA_STREAM_POPULATION_VARIANCE);\n",
        "515": "    assertThat(stats.min()).isEqualTo(MEGA_STREAM_MIN);\n",
        "516": "    assertThat(stats.max()).isEqualTo(MEGA_STREAM_MAX);\n",
        "517": "  }\n",
        "518": "\n",
        "519": "  public void testBoxedBigDecimalStreamToStats() {\n",
        "520": "    Stats stats = megaPrimitiveDoubleStream().mapToObj(BigDecimal::valueOf).collect(toStats());\n",
        "521": "    assertThat(stats.count()).isEqualTo(MEGA_STREAM_COUNT);\n",
        "522": "    assertThat(stats.mean()).isWithin(ALLOWED_ERROR * MEGA_STREAM_COUNT).of(MEGA_STREAM_MEAN);\n",
        "523": "    assertThat(stats.populationVariance())\n",
        "524": "        .isWithin(ALLOWED_ERROR * MEGA_STREAM_COUNT)\n",
        "525": "        .of(MEGA_STREAM_POPULATION_VARIANCE);\n",
        "526": "    assertThat(stats.min()).isEqualTo(MEGA_STREAM_MIN);\n",
        "527": "    assertThat(stats.max()).isEqualTo(MEGA_STREAM_MAX);\n",
        "610": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)\n",
        "613": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)\n",
        "615": "    assertThat(Stats.meanOf(LONG_MANY_VALUES))\n",
        "616": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)\n",
        "617": "        .of(LONG_MANY_VALUES_MEAN);\n",
        "619": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)\n"
    },
    "removed": {
        "150": "        .isWithin(ALLOWED_ERROR)\n",
        "153": "        .isWithin(ALLOWED_ERROR)\n",
        "159": "        .isWithin(ALLOWED_ERROR)\n",
        "162": "        .isWithin(ALLOWED_ERROR)\n",
        "187": "        .isWithin(ALLOWED_ERROR)\n",
        "190": "        .isWithin(ALLOWED_ERROR)\n",
        "193": "        .isWithin(ALLOWED_ERROR)\n",
        "196": "        .isWithin(ALLOWED_ERROR)\n",
        "241": "        .isWithin(ALLOWED_ERROR)\n",
        "244": "        .isWithin(ALLOWED_ERROR)\n",
        "250": "        .isWithin(ALLOWED_ERROR)\n",
        "253": "        .isWithin(ALLOWED_ERROR)\n",
        "288": "        .isWithin(ALLOWED_ERROR)\n",
        "291": "        .isWithin(ALLOWED_ERROR)\n",
        "294": "        .isWithin(ALLOWED_ERROR)\n",
        "297": "        .isWithin(ALLOWED_ERROR)\n",
        "333": "        .isWithin(ALLOWED_ERROR)\n",
        "336": "        .isWithin(ALLOWED_ERROR)\n",
        "339": "        .isWithin(ALLOWED_ERROR)\n",
        "342": "        .isWithin(ALLOWED_ERROR)\n",
        "378": "        .isWithin(ALLOWED_ERROR)\n",
        "381": "        .isWithin(ALLOWED_ERROR)\n",
        "384": "        .isWithin(ALLOWED_ERROR)\n",
        "387": "        .isWithin(ALLOWED_ERROR)\n",
        "402": "    assertThat(ONE_VALUE_STATS.max()).isWithin(ALLOWED_ERROR).of(ONE_VALUE);\n",
        "406": "    assertThat(TWO_VALUES_STATS.max()).isWithin(ALLOWED_ERROR).of(TWO_VALUES_MAX);\n",
        "407": "    assertThat(MANY_VALUES_STATS_VARARGS.max()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MAX);\n",
        "408": "    assertThat(MANY_VALUES_STATS_ITERABLE.max()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MAX);\n",
        "418": "        assertWithMessage(\"max of \" + values).that(max).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MAX);\n",
        "421": "    assertThat(MANY_VALUES_STATS_SNAPSHOT.max()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MAX);\n",
        "422": "    assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.max())\n",
        "423": "        .isWithin(ALLOWED_ERROR)\n",
        "424": "        .of(INTEGER_MANY_VALUES_MAX);\n",
        "425": "    assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.max())\n",
        "426": "        .isWithin(ALLOWED_ERROR)\n",
        "427": "        .of(INTEGER_MANY_VALUES_MAX);\n",
        "428": "    assertThat(LONG_MANY_VALUES_STATS_ITERATOR.max())\n",
        "429": "        .isWithin(ALLOWED_ERROR)\n",
        "430": "        .of(LONG_MANY_VALUES_MAX);\n",
        "431": "    assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.max())\n",
        "432": "        .isWithin(ALLOWED_ERROR)\n",
        "433": "        .of(LONG_MANY_VALUES_MAX);\n",
        "447": "    assertThat(ONE_VALUE_STATS.min()).isWithin(ALLOWED_ERROR).of(ONE_VALUE);\n",
        "451": "    assertThat(TWO_VALUES_STATS.min()).isWithin(ALLOWED_ERROR).of(TWO_VALUES_MIN);\n",
        "452": "    assertThat(MANY_VALUES_STATS_VARARGS.min()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MIN);\n",
        "453": "    assertThat(MANY_VALUES_STATS_ITERABLE.min()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MIN);\n",
        "454": "    assertThat(MANY_VALUES_STATS_ITERATOR.min()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MIN);\n",
        "466": "        assertWithMessage(\"min of \" + values).that(min).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MIN);\n",
        "469": "    assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.min())\n",
        "470": "        .isWithin(ALLOWED_ERROR)\n",
        "471": "        .of(INTEGER_MANY_VALUES_MIN);\n",
        "472": "    assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.min())\n",
        "473": "        .isWithin(ALLOWED_ERROR)\n",
        "474": "        .of(INTEGER_MANY_VALUES_MIN);\n",
        "475": "    assertThat(LONG_MANY_VALUES_STATS_ITERATOR.min())\n",
        "476": "        .isWithin(ALLOWED_ERROR)\n",
        "477": "        .of(LONG_MANY_VALUES_MIN);\n",
        "478": "    assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.min())\n",
        "479": "        .isWithin(ALLOWED_ERROR)\n",
        "480": "        .of(LONG_MANY_VALUES_MIN);\n",
        "563": "        .isWithin(ALLOWED_ERROR)\n",
        "566": "        .isWithin(ALLOWED_ERROR)\n",
        "568": "    assertThat(Stats.meanOf(LONG_MANY_VALUES)).isWithin(ALLOWED_ERROR).of(LONG_MANY_VALUES_MEAN);\n",
        "570": "        .isWithin(ALLOWED_ERROR)\n"
    }
}