{
    "addition": {
        "39": "import static com.google.common.math.StatsTesting.MEGA_STREAM_COUNT;\n",
        "40": "import static com.google.common.math.StatsTesting.MEGA_STREAM_MAX;\n",
        "41": "import static com.google.common.math.StatsTesting.MEGA_STREAM_MEAN;\n",
        "42": "import static com.google.common.math.StatsTesting.MEGA_STREAM_MIN;\n",
        "43": "import static com.google.common.math.StatsTesting.MEGA_STREAM_POPULATION_VARIANCE;\n",
        "51": "import static com.google.common.math.StatsTesting.megaPrimitiveDoubleStreamPart1;\n",
        "52": "import static com.google.common.math.StatsTesting.megaPrimitiveDoubleStreamPart2;\n",
        "86": "  private StatsAccumulator manyValuesAccumulatorByAddAllStatsAccumulator;\n",
        "141": "    manyValuesAccumulatorByAddAllStatsAccumulator = new StatsAccumulator();\n",
        "142": "    manyValuesAccumulatorByAddAllStatsAccumulator.addAll(\n",
        "143": "        statsAccumulatorOf(MANY_VALUES.subList(0, MANY_VALUES.size() / 2)));\n",
        "144": "    manyValuesAccumulatorByAddAllStatsAccumulator.addAll(\n",
        "145": "        statsAccumulatorOf(MANY_VALUES.subList(MANY_VALUES.size() / 2, MANY_VALUES.size())));\n",
        "146": "\n",
        "157": "  private static StatsAccumulator statsAccumulatorOf(Iterable<? extends Number> values) {\n",
        "158": "    StatsAccumulator accumulator = new StatsAccumulator();\n",
        "159": "    accumulator.addAll(values);\n",
        "160": "    return accumulator;\n",
        "161": "  }\n",
        "162": "\n",
        "177": "    assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.count()).isEqualTo(MANY_VALUES_COUNT);\n",
        "237": "    assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.mean())\n",
        "238": "        .isWithin(ALLOWED_ERROR)\n",
        "239": "        .of(MANY_VALUES_MEAN);\n",
        "279": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)\n",
        "282": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)\n",
        "285": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)\n",
        "317": "    assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.sum())\n",
        "319": "        .of(MANY_VALUES_MEAN * MANY_VALUES_COUNT);\n",
        "320": "    assertThat(integerManyValuesAccumulatorByAddAllIterable.sum())\n",
        "321": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)\n",
        "324": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)\n",
        "327": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)\n",
        "373": "    assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.populationVariance())\n",
        "374": "        .isWithin(ALLOWED_ERROR)\n",
        "375": "        .of(MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / MANY_VALUES_COUNT);\n",
        "404": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "407": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "410": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "458": "    assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.populationStandardDeviation())\n",
        "460": "        .of(sqrt(MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / MANY_VALUES_COUNT));\n",
        "461": "    assertThat(integerManyValuesAccumulatorByAddAllIterable.populationStandardDeviation())\n",
        "462": "        .isWithin(ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "465": "        .isWithin(ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "468": "        .isWithin(ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "522": "    assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.sampleVariance())\n",
        "524": "        .of(MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (MANY_VALUES_COUNT - 1));\n",
        "525": "    assertThat(integerManyValuesAccumulatorByAddAllIterable.sampleVariance())\n",
        "526": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "529": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "532": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "586": "    assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.sampleStandardDeviation())\n",
        "588": "        .of(sqrt(MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (MANY_VALUES_COUNT - 1)));\n",
        "589": "    assertThat(integerManyValuesAccumulatorByAddAllIterable.sampleStandardDeviation())\n",
        "590": "        .isWithin(ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "593": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "596": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "616": "    assertThat(oneValueAccumulator.max()).isEqualTo(ONE_VALUE);\n",
        "617": "    assertThat(oneValueAccumulatorByAddAllEmptyStats.max()).isEqualTo(ONE_VALUE);\n",
        "618": "    assertThat(twoValuesAccumulator.max()).isEqualTo(TWO_VALUES_MAX);\n",
        "619": "    assertThat(twoValuesAccumulatorByAddAllStats.max()).isEqualTo(TWO_VALUES_MAX);\n",
        "620": "    assertThat(manyValuesAccumulatorByAddAllIterable.max()).isEqualTo(MANY_VALUES_MAX);\n",
        "621": "    assertThat(manyValuesAccumulatorByAddAllIterator.max()).isEqualTo(MANY_VALUES_MAX);\n",
        "622": "    assertThat(manyValuesAccumulatorByAddAllVarargs.max()).isEqualTo(MANY_VALUES_MAX);\n",
        "623": "    assertThat(manyValuesAccumulatorByRepeatedAdd.max()).isEqualTo(MANY_VALUES_MAX);\n",
        "624": "    assertThat(manyValuesAccumulatorByAddAndAddAll.max()).isEqualTo(MANY_VALUES_MAX);\n",
        "625": "    assertThat(manyValuesAccumulatorByAddAllStats.max()).isEqualTo(MANY_VALUES_MAX);\n",
        "626": "    assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.max()).isEqualTo(MANY_VALUES_MAX);\n",
        "647": "        assertWithMessage(\"max of \" + values).that(max).isEqualTo(MANY_VALUES_MAX);\n",
        "650": "            .isEqualTo(MANY_VALUES_MAX);\n",
        "654": "        .isEqualTo(INTEGER_MANY_VALUES_MAX);\n",
        "655": "    assertThat(longManyValuesAccumulatorByAddAllIterator.max()).isEqualTo(LONG_MANY_VALUES_MAX);\n",
        "656": "    assertThat(longManyValuesAccumulatorByAddAllVarargs.max()).isEqualTo(LONG_MANY_VALUES_MAX);\n",
        "675": "    assertThat(oneValueAccumulator.min()).isEqualTo(ONE_VALUE);\n",
        "676": "    assertThat(oneValueAccumulatorByAddAllEmptyStats.min()).isEqualTo(ONE_VALUE);\n",
        "677": "    assertThat(twoValuesAccumulator.min()).isEqualTo(TWO_VALUES_MIN);\n",
        "678": "    assertThat(twoValuesAccumulatorByAddAllStats.min()).isEqualTo(TWO_VALUES_MIN);\n",
        "679": "    assertThat(manyValuesAccumulatorByAddAllIterable.min()).isEqualTo(MANY_VALUES_MIN);\n",
        "680": "    assertThat(manyValuesAccumulatorByAddAllIterator.min()).isEqualTo(MANY_VALUES_MIN);\n",
        "681": "    assertThat(manyValuesAccumulatorByAddAllVarargs.min()).isEqualTo(MANY_VALUES_MIN);\n",
        "682": "    assertThat(manyValuesAccumulatorByRepeatedAdd.min()).isEqualTo(MANY_VALUES_MIN);\n",
        "683": "    assertThat(manyValuesAccumulatorByAddAndAddAll.min()).isEqualTo(MANY_VALUES_MIN);\n",
        "684": "    assertThat(manyValuesAccumulatorByAddAllStats.min()).isEqualTo(MANY_VALUES_MIN);\n",
        "685": "    assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.min()).isEqualTo(MANY_VALUES_MIN);\n",
        "706": "        assertWithMessage(\"min of \" + values).that(min).isEqualTo(MANY_VALUES_MIN);\n",
        "709": "            .isEqualTo(MANY_VALUES_MIN);\n",
        "713": "        .isEqualTo(INTEGER_MANY_VALUES_MIN);\n",
        "714": "    assertThat(longManyValuesAccumulatorByAddAllIterator.min()).isEqualTo(LONG_MANY_VALUES_MIN);\n",
        "715": "    assertThat(longManyValuesAccumulatorByAddAllVarargs.min()).isEqualTo(LONG_MANY_VALUES_MIN);\n",
        "716": "  }\n",
        "717": "\n",
        "718": "  public void testAddAllPrimitiveDoubleStream() {\n",
        "719": "    StatsAccumulator accumulator = new StatsAccumulator();\n",
        "720": "    accumulator.addAll(megaPrimitiveDoubleStreamPart1());\n",
        "721": "    accumulator.addAll(megaPrimitiveDoubleStreamPart2());\n",
        "722": "    assertThat(accumulator.count()).isEqualTo(MEGA_STREAM_COUNT);\n",
        "723": "    assertThat(accumulator.mean()).isWithin(ALLOWED_ERROR * MEGA_STREAM_COUNT).of(MEGA_STREAM_MEAN);\n",
        "724": "    assertThat(accumulator.populationVariance())\n",
        "725": "        .isWithin(ALLOWED_ERROR * MEGA_STREAM_COUNT)\n",
        "726": "        .of(MEGA_STREAM_POPULATION_VARIANCE);\n",
        "727": "    assertThat(accumulator.min()).isEqualTo(MEGA_STREAM_MIN);\n",
        "728": "    assertThat(accumulator.max()).isEqualTo(MEGA_STREAM_MAX);\n",
        "729": "  }\n",
        "730": "\n",
        "731": "  public void testAddAllPrimitiveIntStream() {\n",
        "732": "    StatsAccumulator accumulator = new StatsAccumulator();\n",
        "733": "    accumulator.addAll(megaPrimitiveDoubleStreamPart1().mapToInt(x -> (int) x));\n",
        "734": "    accumulator.addAll(megaPrimitiveDoubleStreamPart2().mapToInt(x -> (int) x));\n",
        "735": "    assertThat(accumulator.count()).isEqualTo(MEGA_STREAM_COUNT);\n",
        "736": "    assertThat(accumulator.mean()).isWithin(ALLOWED_ERROR * MEGA_STREAM_COUNT).of(MEGA_STREAM_MEAN);\n",
        "737": "    assertThat(accumulator.populationVariance())\n",
        "738": "        .isWithin(ALLOWED_ERROR * MEGA_STREAM_COUNT)\n",
        "739": "        .of(MEGA_STREAM_POPULATION_VARIANCE);\n",
        "740": "    assertThat(accumulator.min()).isEqualTo(MEGA_STREAM_MIN);\n",
        "741": "    assertThat(accumulator.max()).isEqualTo(MEGA_STREAM_MAX);\n",
        "742": "  }\n",
        "743": "\n",
        "744": "  public void testAddAllPrimitiveLongStream() {\n",
        "745": "    StatsAccumulator accumulator = new StatsAccumulator();\n",
        "746": "    accumulator.addAll(megaPrimitiveDoubleStreamPart1().mapToLong(x -> (long) x));\n",
        "747": "    accumulator.addAll(megaPrimitiveDoubleStreamPart2().mapToLong(x -> (long) x));\n",
        "748": "    assertThat(accumulator.count()).isEqualTo(MEGA_STREAM_COUNT);\n",
        "749": "    assertThat(accumulator.mean()).isWithin(ALLOWED_ERROR * MEGA_STREAM_COUNT).of(MEGA_STREAM_MEAN);\n",
        "750": "    assertThat(accumulator.populationVariance())\n",
        "751": "        .isWithin(ALLOWED_ERROR * MEGA_STREAM_COUNT)\n",
        "752": "        .of(MEGA_STREAM_POPULATION_VARIANCE);\n",
        "753": "    assertThat(accumulator.min()).isEqualTo(MEGA_STREAM_MIN);\n",
        "754": "    assertThat(accumulator.max()).isEqualTo(MEGA_STREAM_MAX);\n"
    },
    "removed": {
        "255": "        .isWithin(ALLOWED_ERROR)\n",
        "258": "        .isWithin(ALLOWED_ERROR)\n",
        "261": "        .isWithin(ALLOWED_ERROR)\n",
        "293": "    assertThat(integerManyValuesAccumulatorByAddAllIterable.sum())\n",
        "297": "        .isWithin(ALLOWED_ERROR)\n",
        "300": "        .isWithin(ALLOWED_ERROR)\n",
        "374": "        .isWithin(ALLOWED_ERROR)\n",
        "377": "        .isWithin(ALLOWED_ERROR)\n",
        "380": "        .isWithin(ALLOWED_ERROR)\n",
        "428": "    assertThat(integerManyValuesAccumulatorByAddAllIterable.populationStandardDeviation())\n",
        "432": "        .isWithin(ALLOWED_ERROR)\n",
        "435": "        .isWithin(ALLOWED_ERROR)\n",
        "489": "    assertThat(integerManyValuesAccumulatorByAddAllIterable.sampleVariance())\n",
        "493": "        .isWithin(ALLOWED_ERROR)\n",
        "496": "        .isWithin(ALLOWED_ERROR)\n",
        "550": "    assertThat(integerManyValuesAccumulatorByAddAllIterable.sampleStandardDeviation())\n",
        "554": "        .isWithin(ALLOWED_ERROR)\n",
        "557": "        .isWithin(ALLOWED_ERROR)\n",
        "577": "    assertThat(oneValueAccumulator.max()).isWithin(ALLOWED_ERROR).of(ONE_VALUE);\n",
        "578": "    assertThat(oneValueAccumulatorByAddAllEmptyStats.max()).isWithin(ALLOWED_ERROR).of(ONE_VALUE);\n",
        "579": "    assertThat(twoValuesAccumulator.max()).isWithin(ALLOWED_ERROR).of(TWO_VALUES_MAX);\n",
        "580": "    assertThat(twoValuesAccumulatorByAddAllStats.max()).isWithin(ALLOWED_ERROR).of(TWO_VALUES_MAX);\n",
        "581": "    assertThat(manyValuesAccumulatorByAddAllIterable.max())\n",
        "582": "        .isWithin(ALLOWED_ERROR)\n",
        "583": "        .of(MANY_VALUES_MAX);\n",
        "584": "    assertThat(manyValuesAccumulatorByAddAllIterator.max())\n",
        "585": "        .isWithin(ALLOWED_ERROR)\n",
        "586": "        .of(MANY_VALUES_MAX);\n",
        "587": "    assertThat(manyValuesAccumulatorByAddAllVarargs.max())\n",
        "588": "        .isWithin(ALLOWED_ERROR)\n",
        "589": "        .of(MANY_VALUES_MAX);\n",
        "590": "    assertThat(manyValuesAccumulatorByRepeatedAdd.max())\n",
        "591": "        .isWithin(ALLOWED_ERROR)\n",
        "592": "        .of(MANY_VALUES_MAX);\n",
        "593": "    assertThat(manyValuesAccumulatorByAddAndAddAll.max())\n",
        "594": "        .isWithin(ALLOWED_ERROR)\n",
        "595": "        .of(MANY_VALUES_MAX);\n",
        "596": "    assertThat(manyValuesAccumulatorByAddAllStats.max())\n",
        "597": "        .isWithin(ALLOWED_ERROR)\n",
        "598": "        .of(MANY_VALUES_MAX);\n",
        "619": "        assertWithMessage(\"max of \" + values).that(max).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MAX);\n",
        "622": "            .isWithin(ALLOWED_ERROR)\n",
        "623": "            .of(MANY_VALUES_MAX);\n",
        "627": "        .isWithin(ALLOWED_ERROR)\n",
        "628": "        .of(INTEGER_MANY_VALUES_MAX);\n",
        "629": "    assertThat(longManyValuesAccumulatorByAddAllIterator.max())\n",
        "630": "        .isWithin(ALLOWED_ERROR)\n",
        "631": "        .of(LONG_MANY_VALUES_MAX);\n",
        "632": "    assertThat(longManyValuesAccumulatorByAddAllVarargs.max())\n",
        "633": "        .isWithin(ALLOWED_ERROR)\n",
        "634": "        .of(LONG_MANY_VALUES_MAX);\n",
        "653": "    assertThat(oneValueAccumulator.min()).isWithin(ALLOWED_ERROR).of(ONE_VALUE);\n",
        "654": "    assertThat(oneValueAccumulatorByAddAllEmptyStats.min()).isWithin(ALLOWED_ERROR).of(ONE_VALUE);\n",
        "655": "    assertThat(twoValuesAccumulator.min()).isWithin(ALLOWED_ERROR).of(TWO_VALUES_MIN);\n",
        "656": "    assertThat(twoValuesAccumulatorByAddAllStats.min()).isWithin(ALLOWED_ERROR).of(TWO_VALUES_MIN);\n",
        "657": "    assertThat(manyValuesAccumulatorByAddAllIterable.min())\n",
        "658": "        .isWithin(ALLOWED_ERROR)\n",
        "659": "        .of(MANY_VALUES_MIN);\n",
        "660": "    assertThat(manyValuesAccumulatorByAddAllIterator.min())\n",
        "661": "        .isWithin(ALLOWED_ERROR)\n",
        "662": "        .of(MANY_VALUES_MIN);\n",
        "663": "    assertThat(manyValuesAccumulatorByAddAllVarargs.min())\n",
        "664": "        .isWithin(ALLOWED_ERROR)\n",
        "665": "        .of(MANY_VALUES_MIN);\n",
        "666": "    assertThat(manyValuesAccumulatorByRepeatedAdd.min())\n",
        "667": "        .isWithin(ALLOWED_ERROR)\n",
        "668": "        .of(MANY_VALUES_MIN);\n",
        "669": "    assertThat(manyValuesAccumulatorByAddAndAddAll.min())\n",
        "670": "        .isWithin(ALLOWED_ERROR)\n",
        "671": "        .of(MANY_VALUES_MIN);\n",
        "672": "    assertThat(manyValuesAccumulatorByAddAllStats.min())\n",
        "673": "        .isWithin(ALLOWED_ERROR)\n",
        "674": "        .of(MANY_VALUES_MIN);\n",
        "695": "        assertWithMessage(\"min of \" + values).that(min).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MIN);\n",
        "698": "            .isWithin(ALLOWED_ERROR)\n",
        "699": "            .of(MANY_VALUES_MIN);\n",
        "703": "        .isWithin(ALLOWED_ERROR)\n",
        "704": "        .of(INTEGER_MANY_VALUES_MIN);\n",
        "705": "    assertThat(longManyValuesAccumulatorByAddAllIterator.min())\n",
        "706": "        .isWithin(ALLOWED_ERROR)\n",
        "707": "        .of(LONG_MANY_VALUES_MIN);\n",
        "708": "    assertThat(longManyValuesAccumulatorByAddAllVarargs.min())\n",
        "709": "        .isWithin(ALLOWED_ERROR)\n",
        "710": "        .of(LONG_MANY_VALUES_MIN);\n"
    }
}