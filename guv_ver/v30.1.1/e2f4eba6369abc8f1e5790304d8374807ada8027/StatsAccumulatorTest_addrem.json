{
    "addition": {
        "79": "  private StatsAccumulator manyValuesAccumulatorByAddAllStatsAccumulator;\n",
        "134": "    manyValuesAccumulatorByAddAllStatsAccumulator = new StatsAccumulator();\n",
        "135": "    manyValuesAccumulatorByAddAllStatsAccumulator.addAll(\n",
        "136": "        statsAccumulatorOf(MANY_VALUES.subList(0, MANY_VALUES.size() / 2)));\n",
        "137": "    manyValuesAccumulatorByAddAllStatsAccumulator.addAll(\n",
        "138": "        statsAccumulatorOf(MANY_VALUES.subList(MANY_VALUES.size() / 2, MANY_VALUES.size())));\n",
        "139": "\n",
        "150": "  private static StatsAccumulator statsAccumulatorOf(Iterable<? extends Number> values) {\n",
        "151": "    StatsAccumulator accumulator = new StatsAccumulator();\n",
        "152": "    accumulator.addAll(values);\n",
        "153": "    return accumulator;\n",
        "154": "  }\n",
        "155": "\n",
        "170": "    assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.count()).isEqualTo(MANY_VALUES_COUNT);\n",
        "230": "    assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.mean())\n",
        "231": "        .isWithin(ALLOWED_ERROR)\n",
        "232": "        .of(MANY_VALUES_MEAN);\n",
        "272": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)\n",
        "275": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)\n",
        "278": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)\n",
        "310": "    assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.sum())\n",
        "312": "        .of(MANY_VALUES_MEAN * MANY_VALUES_COUNT);\n",
        "313": "    assertThat(integerManyValuesAccumulatorByAddAllIterable.sum())\n",
        "314": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)\n",
        "317": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)\n",
        "320": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)\n",
        "366": "    assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.populationVariance())\n",
        "367": "        .isWithin(ALLOWED_ERROR)\n",
        "368": "        .of(MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / MANY_VALUES_COUNT);\n",
        "397": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "400": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "403": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "451": "    assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.populationStandardDeviation())\n",
        "453": "        .of(sqrt(MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / MANY_VALUES_COUNT));\n",
        "454": "    assertThat(integerManyValuesAccumulatorByAddAllIterable.populationStandardDeviation())\n",
        "455": "        .isWithin(ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "458": "        .isWithin(ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "461": "        .isWithin(ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "515": "    assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.sampleVariance())\n",
        "517": "        .of(MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (MANY_VALUES_COUNT - 1));\n",
        "518": "    assertThat(integerManyValuesAccumulatorByAddAllIterable.sampleVariance())\n",
        "519": "        .isWithin(ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "522": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "525": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "579": "    assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.sampleStandardDeviation())\n",
        "581": "        .of(sqrt(MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (MANY_VALUES_COUNT - 1)));\n",
        "582": "    assertThat(integerManyValuesAccumulatorByAddAllIterable.sampleStandardDeviation())\n",
        "583": "        .isWithin(ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))\n",
        "586": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "589": "        .isWithin(ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)\n",
        "609": "    assertThat(oneValueAccumulator.max()).isEqualTo(ONE_VALUE);\n",
        "610": "    assertThat(oneValueAccumulatorByAddAllEmptyStats.max()).isEqualTo(ONE_VALUE);\n",
        "611": "    assertThat(twoValuesAccumulator.max()).isEqualTo(TWO_VALUES_MAX);\n",
        "612": "    assertThat(twoValuesAccumulatorByAddAllStats.max()).isEqualTo(TWO_VALUES_MAX);\n",
        "613": "    assertThat(manyValuesAccumulatorByAddAllIterable.max()).isEqualTo(MANY_VALUES_MAX);\n",
        "614": "    assertThat(manyValuesAccumulatorByAddAllIterator.max()).isEqualTo(MANY_VALUES_MAX);\n",
        "615": "    assertThat(manyValuesAccumulatorByAddAllVarargs.max()).isEqualTo(MANY_VALUES_MAX);\n",
        "616": "    assertThat(manyValuesAccumulatorByRepeatedAdd.max()).isEqualTo(MANY_VALUES_MAX);\n",
        "617": "    assertThat(manyValuesAccumulatorByAddAndAddAll.max()).isEqualTo(MANY_VALUES_MAX);\n",
        "618": "    assertThat(manyValuesAccumulatorByAddAllStats.max()).isEqualTo(MANY_VALUES_MAX);\n",
        "619": "    assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.max()).isEqualTo(MANY_VALUES_MAX);\n",
        "640": "        assertWithMessage(\"max of \" + values).that(max).isEqualTo(MANY_VALUES_MAX);\n",
        "643": "            .isEqualTo(MANY_VALUES_MAX);\n",
        "647": "        .isEqualTo(INTEGER_MANY_VALUES_MAX);\n",
        "648": "    assertThat(longManyValuesAccumulatorByAddAllIterator.max()).isEqualTo(LONG_MANY_VALUES_MAX);\n",
        "649": "    assertThat(longManyValuesAccumulatorByAddAllVarargs.max()).isEqualTo(LONG_MANY_VALUES_MAX);\n",
        "668": "    assertThat(oneValueAccumulator.min()).isEqualTo(ONE_VALUE);\n",
        "669": "    assertThat(oneValueAccumulatorByAddAllEmptyStats.min()).isEqualTo(ONE_VALUE);\n",
        "670": "    assertThat(twoValuesAccumulator.min()).isEqualTo(TWO_VALUES_MIN);\n",
        "671": "    assertThat(twoValuesAccumulatorByAddAllStats.min()).isEqualTo(TWO_VALUES_MIN);\n",
        "672": "    assertThat(manyValuesAccumulatorByAddAllIterable.min()).isEqualTo(MANY_VALUES_MIN);\n",
        "673": "    assertThat(manyValuesAccumulatorByAddAllIterator.min()).isEqualTo(MANY_VALUES_MIN);\n",
        "674": "    assertThat(manyValuesAccumulatorByAddAllVarargs.min()).isEqualTo(MANY_VALUES_MIN);\n",
        "675": "    assertThat(manyValuesAccumulatorByRepeatedAdd.min()).isEqualTo(MANY_VALUES_MIN);\n",
        "676": "    assertThat(manyValuesAccumulatorByAddAndAddAll.min()).isEqualTo(MANY_VALUES_MIN);\n",
        "677": "    assertThat(manyValuesAccumulatorByAddAllStats.min()).isEqualTo(MANY_VALUES_MIN);\n",
        "678": "    assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.min()).isEqualTo(MANY_VALUES_MIN);\n",
        "699": "        assertWithMessage(\"min of \" + values).that(min).isEqualTo(MANY_VALUES_MIN);\n",
        "702": "            .isEqualTo(MANY_VALUES_MIN);\n",
        "706": "        .isEqualTo(INTEGER_MANY_VALUES_MIN);\n",
        "707": "    assertThat(longManyValuesAccumulatorByAddAllIterator.min()).isEqualTo(LONG_MANY_VALUES_MIN);\n",
        "708": "    assertThat(longManyValuesAccumulatorByAddAllVarargs.min()).isEqualTo(LONG_MANY_VALUES_MIN);\n"
    },
    "removed": {
        "255": "        .isWithin(ALLOWED_ERROR)\n",
        "258": "        .isWithin(ALLOWED_ERROR)\n",
        "261": "        .isWithin(ALLOWED_ERROR)\n",
        "293": "    assertThat(integerManyValuesAccumulatorByAddAllIterable.sum())\n",
        "297": "        .isWithin(ALLOWED_ERROR)\n",
        "300": "        .isWithin(ALLOWED_ERROR)\n",
        "374": "        .isWithin(ALLOWED_ERROR)\n",
        "377": "        .isWithin(ALLOWED_ERROR)\n",
        "380": "        .isWithin(ALLOWED_ERROR)\n",
        "428": "    assertThat(integerManyValuesAccumulatorByAddAllIterable.populationStandardDeviation())\n",
        "432": "        .isWithin(ALLOWED_ERROR)\n",
        "435": "        .isWithin(ALLOWED_ERROR)\n",
        "489": "    assertThat(integerManyValuesAccumulatorByAddAllIterable.sampleVariance())\n",
        "493": "        .isWithin(ALLOWED_ERROR)\n",
        "496": "        .isWithin(ALLOWED_ERROR)\n",
        "550": "    assertThat(integerManyValuesAccumulatorByAddAllIterable.sampleStandardDeviation())\n",
        "554": "        .isWithin(ALLOWED_ERROR)\n",
        "557": "        .isWithin(ALLOWED_ERROR)\n",
        "577": "    assertThat(oneValueAccumulator.max()).isWithin(ALLOWED_ERROR).of(ONE_VALUE);\n",
        "578": "    assertThat(oneValueAccumulatorByAddAllEmptyStats.max()).isWithin(ALLOWED_ERROR).of(ONE_VALUE);\n",
        "579": "    assertThat(twoValuesAccumulator.max()).isWithin(ALLOWED_ERROR).of(TWO_VALUES_MAX);\n",
        "580": "    assertThat(twoValuesAccumulatorByAddAllStats.max()).isWithin(ALLOWED_ERROR).of(TWO_VALUES_MAX);\n",
        "581": "    assertThat(manyValuesAccumulatorByAddAllIterable.max())\n",
        "582": "        .isWithin(ALLOWED_ERROR)\n",
        "583": "        .of(MANY_VALUES_MAX);\n",
        "584": "    assertThat(manyValuesAccumulatorByAddAllIterator.max())\n",
        "585": "        .isWithin(ALLOWED_ERROR)\n",
        "586": "        .of(MANY_VALUES_MAX);\n",
        "587": "    assertThat(manyValuesAccumulatorByAddAllVarargs.max())\n",
        "588": "        .isWithin(ALLOWED_ERROR)\n",
        "589": "        .of(MANY_VALUES_MAX);\n",
        "590": "    assertThat(manyValuesAccumulatorByRepeatedAdd.max())\n",
        "591": "        .isWithin(ALLOWED_ERROR)\n",
        "592": "        .of(MANY_VALUES_MAX);\n",
        "593": "    assertThat(manyValuesAccumulatorByAddAndAddAll.max())\n",
        "594": "        .isWithin(ALLOWED_ERROR)\n",
        "595": "        .of(MANY_VALUES_MAX);\n",
        "596": "    assertThat(manyValuesAccumulatorByAddAllStats.max())\n",
        "597": "        .isWithin(ALLOWED_ERROR)\n",
        "598": "        .of(MANY_VALUES_MAX);\n",
        "619": "        assertWithMessage(\"max of \" + values).that(max).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MAX);\n",
        "622": "            .isWithin(ALLOWED_ERROR)\n",
        "623": "            .of(MANY_VALUES_MAX);\n",
        "627": "        .isWithin(ALLOWED_ERROR)\n",
        "628": "        .of(INTEGER_MANY_VALUES_MAX);\n",
        "629": "    assertThat(longManyValuesAccumulatorByAddAllIterator.max())\n",
        "630": "        .isWithin(ALLOWED_ERROR)\n",
        "631": "        .of(LONG_MANY_VALUES_MAX);\n",
        "632": "    assertThat(longManyValuesAccumulatorByAddAllVarargs.max())\n",
        "633": "        .isWithin(ALLOWED_ERROR)\n",
        "634": "        .of(LONG_MANY_VALUES_MAX);\n",
        "653": "    assertThat(oneValueAccumulator.min()).isWithin(ALLOWED_ERROR).of(ONE_VALUE);\n",
        "654": "    assertThat(oneValueAccumulatorByAddAllEmptyStats.min()).isWithin(ALLOWED_ERROR).of(ONE_VALUE);\n",
        "655": "    assertThat(twoValuesAccumulator.min()).isWithin(ALLOWED_ERROR).of(TWO_VALUES_MIN);\n",
        "656": "    assertThat(twoValuesAccumulatorByAddAllStats.min()).isWithin(ALLOWED_ERROR).of(TWO_VALUES_MIN);\n",
        "657": "    assertThat(manyValuesAccumulatorByAddAllIterable.min())\n",
        "658": "        .isWithin(ALLOWED_ERROR)\n",
        "659": "        .of(MANY_VALUES_MIN);\n",
        "660": "    assertThat(manyValuesAccumulatorByAddAllIterator.min())\n",
        "661": "        .isWithin(ALLOWED_ERROR)\n",
        "662": "        .of(MANY_VALUES_MIN);\n",
        "663": "    assertThat(manyValuesAccumulatorByAddAllVarargs.min())\n",
        "664": "        .isWithin(ALLOWED_ERROR)\n",
        "665": "        .of(MANY_VALUES_MIN);\n",
        "666": "    assertThat(manyValuesAccumulatorByRepeatedAdd.min())\n",
        "667": "        .isWithin(ALLOWED_ERROR)\n",
        "668": "        .of(MANY_VALUES_MIN);\n",
        "669": "    assertThat(manyValuesAccumulatorByAddAndAddAll.min())\n",
        "670": "        .isWithin(ALLOWED_ERROR)\n",
        "671": "        .of(MANY_VALUES_MIN);\n",
        "672": "    assertThat(manyValuesAccumulatorByAddAllStats.min())\n",
        "673": "        .isWithin(ALLOWED_ERROR)\n",
        "674": "        .of(MANY_VALUES_MIN);\n",
        "695": "        assertWithMessage(\"min of \" + values).that(min).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MIN);\n",
        "698": "            .isWithin(ALLOWED_ERROR)\n",
        "699": "            .of(MANY_VALUES_MIN);\n",
        "703": "        .isWithin(ALLOWED_ERROR)\n",
        "704": "        .of(INTEGER_MANY_VALUES_MIN);\n",
        "705": "    assertThat(longManyValuesAccumulatorByAddAllIterator.min())\n",
        "706": "        .isWithin(ALLOWED_ERROR)\n",
        "707": "        .of(LONG_MANY_VALUES_MIN);\n",
        "708": "    assertThat(longManyValuesAccumulatorByAddAllVarargs.min())\n",
        "709": "        .isWithin(ALLOWED_ERROR)\n",
        "710": "        .of(LONG_MANY_VALUES_MIN);\n"
    }
}