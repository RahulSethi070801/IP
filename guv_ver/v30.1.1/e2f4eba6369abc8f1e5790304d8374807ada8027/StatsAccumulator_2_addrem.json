{
    "addition": {
        "26": "import java.util.stream.DoubleStream;\n",
        "27": "import java.util.stream.IntStream;\n",
        "28": "import java.util.stream.LongStream;\n",
        "134": "  /**\n",
        "135": "   * Adds the given values to the dataset. The stream will be completely consumed by this method.\n",
        "136": "   *\n",
        "137": "   * @param values a series of values\n",
        "138": "   * @since NEXT\n",
        "139": "   */\n",
        "140": "  public void addAll(DoubleStream values) {\n",
        "141": "    addAll(values.collect(StatsAccumulator::new, StatsAccumulator::add, StatsAccumulator::addAll));\n",
        "142": "  }\n",
        "143": "\n",
        "144": "  /**\n",
        "145": "   * Adds the given values to the dataset. The stream will be completely consumed by this method.\n",
        "146": "   *\n",
        "147": "   * @param values a series of values\n",
        "148": "   * @since NEXT\n",
        "149": "   */\n",
        "150": "  public void addAll(IntStream values) {\n",
        "151": "    addAll(values.collect(StatsAccumulator::new, StatsAccumulator::add, StatsAccumulator::addAll));\n",
        "152": "  }\n",
        "153": "\n",
        "154": "  /**\n",
        "155": "   * Adds the given values to the dataset. The stream will be completely consumed by this method.\n",
        "156": "   *\n",
        "157": "   * @param values a series of values, which will be converted to {@code double} values (this may\n",
        "158": "   *     cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15))\n",
        "159": "   * @since NEXT\n",
        "160": "   */\n",
        "161": "  public void addAll(LongStream values) {\n",
        "162": "    addAll(values.collect(StatsAccumulator::new, StatsAccumulator::add, StatsAccumulator::addAll));\n",
        "163": "  }\n",
        "164": "\n",
        "173": "    merge(values.count(), values.mean(), values.sumOfSquaresOfDeltas(), values.min(), values.max());\n",
        "174": "  }\n",
        "175": "\n",
        "176": "  /**\n",
        "177": "   * Adds the given statistics to the dataset, as if the individual values used to compute the\n",
        "178": "   * statistics had been added directly.\n",
        "179": "   *\n",
        "180": "   * @since NEXT\n",
        "181": "   */\n",
        "182": "  public void addAll(StatsAccumulator values) {\n",
        "183": "    if (values.count() == 0) {\n",
        "184": "      return;\n",
        "185": "    }\n",
        "186": "    merge(values.count(), values.mean(), values.sumOfSquaresOfDeltas(), values.min(), values.max());\n",
        "187": "  }\n",
        "189": "  private void merge(\n",
        "190": "      long otherCount,\n",
        "191": "      double otherMean,\n",
        "192": "      double otherSumOfSquaresOfDeltas,\n",
        "193": "      double otherMin,\n",
        "194": "      double otherMax) {\n",
        "196": "      count = otherCount;\n",
        "197": "      mean = otherMean;\n",
        "198": "      sumOfSquaresOfDeltas = otherSumOfSquaresOfDeltas;\n",
        "199": "      min = otherMin;\n",
        "200": "      max = otherMax;\n",
        "202": "      count += otherCount;\n",
        "203": "      if (isFinite(mean) && isFinite(otherMean)) {\n",
        "205": "        double delta = otherMean - mean;\n",
        "206": "        mean += delta * otherCount / count;\n",
        "207": "        sumOfSquaresOfDeltas += otherSumOfSquaresOfDeltas + delta * (otherMean - mean) * otherCount;\n",
        "209": "        mean = calculateNewMeanNonFinite(mean, otherMean);\n",
        "212": "      min = Math.min(min, otherMin);\n",
        "213": "      max = Math.max(max, otherMax);\n"
    },
    "removed": {
        "141": "      count = values.count();\n",
        "142": "      mean = values.mean();\n",
        "143": "      sumOfSquaresOfDeltas = values.sumOfSquaresOfDeltas();\n",
        "144": "      min = values.min();\n",
        "145": "      max = values.max();\n",
        "147": "      count += values.count();\n",
        "148": "      if (isFinite(mean) && isFinite(values.mean())) {\n",
        "150": "        double delta = values.mean() - mean;\n",
        "151": "        mean += delta * values.count() / count;\n",
        "152": "        sumOfSquaresOfDeltas +=\n",
        "153": "            values.sumOfSquaresOfDeltas() + delta * (values.mean() - mean) * values.count();\n",
        "155": "        mean = calculateNewMeanNonFinite(mean, values.mean());\n",
        "158": "      min = Math.min(min, values.min());\n",
        "159": "      max = Math.max(max, values.max());\n"
    }
}