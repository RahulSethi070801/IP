{"id": "36d53edd09f561ec14464a897a03f2b4f26fc0b3", "code": [{"0": "guava-gwt/test/com/google/common/base/SplitterTest_gwt.java", "added": {}, "removed": {"1": ["public void testCharacterSimpleSplitToStream() throws Exception {\n", "  com.google.common.base.SplitterTest testCase = new com.google.common.base.SplitterTest();\n", "  testCase.testCharacterSimpleSplitToStream();\n", "}\n", "\n"]}, "added_lines": {}, "removed_lines": {"1": [31, 32, 33, 34, 35]}}, {"1": "guava-tests/test/com/google/common/base/SplitterTest.java", "added": {}, "removed": {"1": ["import static com.google.common.collect.ImmutableList.toImmutableList;\n"], "2": ["  public void testCharacterSimpleSplitToStream() {\n", "    String simple = \"a,b,c\";\n", "    List<String> letters = COMMA_SPLITTER.splitToStream(simple).collect(toImmutableList());\n", "    assertThat(letters).containsExactly(\"a\", \"b\", \"c\").inOrder();\n", "  }\n", "\n"]}, "added_lines": {}, "removed_lines": {"1": [19], "2": [66, 67, 68, 69, 70, 71]}}, {"2": "guava/src/com/google/common/base/Splitter.java", "added": {"2": ["   * {@link #splitToList(CharSequence)}.\n"]}, "removed": {"1": ["import java.util.stream.Stream;\n", "import java.util.stream.StreamSupport;\n"], "2": ["   * {@link #splitToList(CharSequence)}. Java 8 users may prefer {@link #splitToStream} instead.\n"], "3": ["  /**\n", "   * Splits {@code sequence} into string components and makes them available through an {@link\n", "   * Stream}, which may be lazily evaluated. If you want an eagerly computed {@link List}, use\n", "   * {@link #splitToList(CharSequence)}.\n", "   *\n", "   * @param sequence the sequence of characters to split\n", "   * @return a stream over the segments split from the parameter\n", "   * @since NEXT\n", "   */\n", "  @Beta\n", "  public Stream<String> splitToStream(CharSequence sequence) {\n", "    // Can't use Streams.stream() from base\n", "    return StreamSupport.stream(split(sequence).spliterator(), false);\n", "  }\n", "\n"]}, "added_lines": {"2": [375]}, "removed_lines": {"1": [30, 31], "2": [377], "3": [426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440]}}]}
