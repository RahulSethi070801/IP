{"id": "5137f9983a0f2dee131b5e090228aedd2b7ace44", "code": [{"0": "android/guava-tests/test/com/google/common/io/ByteSourceTest.java", "added": {"1": ["import com.google.common.io.Closer.LoggingSuppressor;\n"], "2": ["    if (Closer.create().suppressor instanceof LoggingSuppressor) {\n"]}, "removed": {"2": ["    if (!Closer.SuppressingSuppressor.isAvailable()) {\n"]}, "added_lines": {"1": [33], "2": [399]}, "removed_lines": {"2": [398]}}, {"1": "android/guava-tests/test/com/google/common/io/CharSourceTest.java", "added": {"1": ["import com.google.common.io.Closer.LoggingSuppressor;\n"], "2": ["    if (Closer.create().suppressor instanceof LoggingSuppressor) {\n"]}, "removed": {"2": ["    if (!Closer.SuppressingSuppressor.isAvailable()) {\n"]}, "added_lines": {"1": [28], "2": [262]}, "removed_lines": {"2": [261]}}, {"2": "android/guava-tests/test/com/google/common/io/CloserTest.java", "added": {"1": ["import com.google.common.io.Closer.LoggingSuppressor;\n"], "2": ["    Closer closer = Closer.create();\n", "    if (closer.suppressor instanceof LoggingSuppressor) {\n"]}, "removed": {"2": ["    if (!Closer.SuppressingSuppressor.isAvailable()) {\n", "    Closer closer = new Closer(new Closer.SuppressingSuppressor());\n", "\n"]}, "added_lines": {"1": [27], "2": [315, 317]}, "removed_lines": {"2": [315, 319, 320]}}, {"3": "android/guava-tests/test/com/google/common/io/PatternFilenameFilterTest.java", "added": {"1": ["import com.google.common.testing.NullPointerTester;\n", "import com.google.common.testing.NullPointerTester.Visibility;\n"], "2": ["\n", "  public void testNulls() throws Exception {\n", "    NullPointerTester tester = new NullPointerTester();\n", "\n", "    tester.testConstructors(PatternFilenameFilter.class, Visibility.PACKAGE);\n", "    tester.testStaticMethods(PatternFilenameFilter.class, Visibility.PACKAGE); // currently none\n", "\n", "    // The reason that we skip this method is discussed in a comment on the method.\n", "    tester.ignore(PatternFilenameFilter.class.getMethod(\"accept\", File.class, String.class));\n", "    tester.testInstanceMethods(new PatternFilenameFilter(\".*\"), Visibility.PACKAGE);\n", "  }\n"]}, "removed": {}, "added_lines": {"1": [19, 20], "2": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61]}, "removed_lines": {}}, {"4": "android/guava/src/com/google/common/io/AppendableWriter.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  public Writer append(@CheckForNull CharSequence charSeq) throws IOException {\n", "  public Writer append(@CheckForNull CharSequence charSeq, int start, int end) throws IOException {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "3": ["  public Writer append(@NullableDecl CharSequence charSeq) throws IOException {\n", "  public Writer append(@NullableDecl CharSequence charSeq, int start, int end) throws IOException {\n"]}, "added_lines": {"1": [24], "2": [35], "3": [110, 117]}, "removed_lines": {"1": [24], "3": [109, 116]}}, {"5": "android/guava/src/com/google/common/io/BaseEncoding.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["    public boolean equals(@CheckForNull Object other) {\n"], "4": ["    @CheckForNull final Character paddingChar;\n", "    StandardBaseEncoding(String name, String alphabetChars, @CheckForNull Character paddingChar) {\n", "    StandardBaseEncoding(Alphabet alphabet, @CheckForNull Character paddingChar) {\n"], "5": ["    @LazyInit @CheckForNull private transient BaseEncoding upperCase;\n", "    @LazyInit @CheckForNull private transient BaseEncoding lowerCase;\n"], "6": ["    BaseEncoding newInstance(Alphabet alphabet, @CheckForNull Character paddingChar) {\n"], "7": ["    public boolean equals(@CheckForNull Object other) {\n"], "8": ["    BaseEncoding newInstance(Alphabet alphabet, @CheckForNull Character paddingChar) {\n", "    Base64Encoding(String name, String alphabetChars, @CheckForNull Character paddingChar) {\n", "    private Base64Encoding(Alphabet alphabet, @CheckForNull Character paddingChar) {\n"], "9": ["    BaseEncoding newInstance(Alphabet alphabet, @CheckForNull Character paddingChar) {\n"], "10": ["      public Appendable append(@CheckForNull CharSequence chars, int off, int len) {\n", "      public Appendable append(@CheckForNull CharSequence chars) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "3": ["    public boolean equals(@NullableDecl Object other) {\n"], "4": ["    @NullableDecl final Character paddingChar;\n", "    StandardBaseEncoding(String name, String alphabetChars, @NullableDecl Character paddingChar) {\n", "    StandardBaseEncoding(Alphabet alphabet, @NullableDecl Character paddingChar) {\n"], "5": ["    @LazyInit @NullableDecl private transient BaseEncoding upperCase;\n", "    @LazyInit @NullableDecl private transient BaseEncoding lowerCase;\n"], "6": ["    BaseEncoding newInstance(Alphabet alphabet, @NullableDecl Character paddingChar) {\n"], "7": ["    public boolean equals(@NullableDecl Object other) {\n"], "8": ["    BaseEncoding newInstance(Alphabet alphabet, @NullableDecl Character paddingChar) {\n", "    Base64Encoding(String name, String alphabetChars, @NullableDecl Character paddingChar) {\n", "    private Base64Encoding(Alphabet alphabet, @NullableDecl Character paddingChar) {\n"], "9": ["    BaseEncoding newInstance(Alphabet alphabet, @NullableDecl Character paddingChar) {\n"], "10": ["      public Appendable append(@NullableDecl CharSequence chars, int off, int len)\n", "          throws IOException {\n", "      public Appendable append(@NullableDecl CharSequence chars) throws IOException {\n"]}, "added_lines": {"1": [38], "2": [125], "3": [551], "4": [569, 571, 575], "5": [833, 834], "6": [856], "7": [875], "8": [932, 938, 942], "9": [989], "10": [1040, 1045]}, "removed_lines": {"1": [38], "3": [550], "4": [568, 570, 574], "5": [832, 833], "6": [855], "7": [874], "8": [931, 937, 941], "9": [988], "10": [1039, 1040, 1045]}}, {"6": "android/guava/src/com/google/common/io/ByteArrayDataInput.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  @CheckForNull\n"]}, "removed": {}, "added_lines": {"1": [21], "2": [36], "3": [91]}, "removed_lines": {}}, {"7": "android/guava/src/com/google/common/io/ByteArrayDataOutput.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [29]}, "removed_lines": {}}, {"8": "android/guava/src/com/google/common/io/ByteProcessor.java", "added": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "public interface ByteProcessor<T extends @Nullable Object> {\n"], "3": ["  @ParametricNullness\n"]}, "removed": {"2": ["public interface ByteProcessor<T> {\n"]}, "added_lines": {"1": [22], "2": [36, 37], "3": [51]}, "removed_lines": {"2": [35]}}, {"9": "android/guava/src/com/google/common/io/ByteSink.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [49]}, "removed_lines": {}}, {"10": "android/guava/src/com/google/common/io/ByteSource.java", "added": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  public <T extends @Nullable Object> T read(ByteProcessor<T> processor) throws IOException {\n"], "4": ["    @ParametricNullness\n", "    public <T extends @Nullable Object> T read(ByteProcessor<T> processor) throws IOException {\n"]}, "removed": {"3": ["  public <T> T read(ByteProcessor<T> processor) throws IOException {\n"], "4": ["    public <T> T read(ByteProcessor<T> processor) throws IOException {\n"]}, "added_lines": {"1": [43], "2": [77], "3": [319], "4": [623, 624]}, "removed_lines": {"3": [317], "4": [621]}}, {"11": "android/guava/src/com/google/common/io/ByteStreams.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["    @CheckForNull\n"], "4": ["  @ParametricNullness\n", "  public static <T extends @Nullable Object> T readBytes(\n", "      InputStream input, ByteProcessor<T> processor) throws IOException {\n"]}, "removed": {"4": ["  public static <T> T readBytes(InputStream input, ByteProcessor<T> processor) throws IOException {\n"]}, "added_lines": {"1": [44, 45], "2": [55], "3": [444], "4": [876, 877, 878]}, "removed_lines": {"4": [872]}}, {"12": "android/guava/src/com/google/common/io/CharSequenceReader.java", "added": {"1": ["import static java.util.Objects.requireNonNull;\n", "import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "  @CheckForNull private CharSequence seq;\n"], "3": ["    requireNonNull(seq); // safe as long as we call this only after checkOpen\n", "  /*\n", "   * To avoid the need to call requireNonNull so much, we could consider more clever approaches,\n", "   * such as:\n", "   *\n", "   * - Make checkOpen return the non-null `seq`. Then callers can assign that to a local variable or\n", "   *   even back to `this.seq`. However, that may suggest that we're defending against concurrent\n", "   *   mutation, which is not an actual risk because we use `synchronized`.\n", "   * - Make `remaining` require a non-null `seq` argument. But this is a bit weird because the\n", "   *   method, while it would avoid the instance field `seq` would still access the instance field\n", "   *   `pos`.\n", "   */\n", "\n", "    requireNonNull(seq); // safe because of checkOpen\n"], "4": ["    requireNonNull(seq); // safe because of checkOpen\n"], "5": ["    requireNonNull(seq); // safe because of checkOpen\n"]}, "removed": {"2": ["  private CharSequence seq;\n"]}, "added_lines": {"1": [20, 26], "2": [36, 39], "3": [59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 79], "4": [93], "5": [101]}, "removed_lines": {"2": [36]}}, {"13": "android/guava/src/com/google/common/io/CharSink.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [51]}, "removed_lines": {}}, {"14": "android/guava/src/com/google/common/io/CharSource.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  @CheckForNull\n"], "4": ["  @ParametricNullness\n", "  public <T extends @Nullable Object> T readLines(LineProcessor<T> processor) throws IOException {\n"], "5": ["    @CheckForNull\n"], "6": ["    @ParametricNullness\n", "    public <T extends @Nullable Object> T readLines(LineProcessor<T> processor) throws IOException {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "3": ["  @NullableDecl\n"], "4": ["  public <T> T readLines(LineProcessor<T> processor) throws IOException {\n"], "6": ["    public <T> T readLines(LineProcessor<T> processor) throws IOException {\n"]}, "added_lines": {"1": [37, 38], "2": [80], "3": [265], "4": [322, 323], "5": [526], "6": [538, 539]}, "removed_lines": {"1": [37], "3": [263], "4": [320], "6": [534]}}, {"15": "android/guava/src/com/google/common/io/CharStreams.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  @ParametricNullness\n", "  public static <T extends @Nullable Object> T readLines(\n", "      Readable readable, LineProcessor<T> processor) throws IOException {\n"], "4": ["    public Writer append(@CheckForNull CharSequence csq) {\n", "    public Writer append(@CheckForNull CharSequence csq, int start, int end) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "3": ["  public static <T> T readLines(Readable readable, LineProcessor<T> processor) throws IOException {\n"], "4": ["    public Writer append(@NullableDecl CharSequence csq) {\n", "    public Writer append(@NullableDecl CharSequence csq, int start, int end) {\n"]}, "added_lines": {"1": [31, 32], "2": [49], "3": [220, 221, 222], "4": [314, 319]}, "removed_lines": {"1": [31], "3": [218], "4": [310, 315]}}, {"16": "android/guava/src/com/google/common/io/Closeables.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  public static void close(@CheckForNull Closeable closeable, boolean swallowIOException)\n"], "4": ["  public static void closeQuietly(@CheckForNull InputStream inputStream) {\n"], "5": ["  public static void closeQuietly(@CheckForNull Reader reader) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "3": ["  public static void close(@NullableDecl Closeable closeable, boolean swallowIOException)\n"], "4": ["  public static void closeQuietly(@NullableDecl InputStream inputStream) {\n"], "5": ["  public static void closeQuietly(@NullableDecl Reader reader) {\n"]}, "added_lines": {"1": [26], "2": [36], "3": [73], "4": [103], "5": [124]}, "removed_lines": {"1": [26], "3": [72], "4": [102], "5": [123]}}, {"17": "android/guava/src/com/google/common/io/Closer.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "  private static final Suppressor SUPPRESSOR;\n", "\n", "  static {\n", "    SuppressingSuppressor suppressingSuppressor = SuppressingSuppressor.tryCreate();\n", "    SUPPRESSOR = suppressingSuppressor == null ? LoggingSuppressor.INSTANCE : suppressingSuppressor;\n", "  }\n"], "3": ["  @CheckForNull private Throwable thrown;\n"], "4": ["  @ParametricNullness\n", "  @SuppressWarnings(\"nullness\") // TODO(cpovirk): Remove with change to @ParametricNullness.\n", "  public <C extends @Nullable Closeable> C register(\n", "      /* TODO(cpovirk): change to @ParametricNullness */ @CheckForNull C closeable) {\n"], "5": ["    @CheckForNull\n", "    static SuppressingSuppressor tryCreate() {\n", "      Method addSuppressed;\n", "        addSuppressed = Throwable.class.getMethod(\"addSuppressed\", Throwable.class);\n", "      return new SuppressingSuppressor(addSuppressed);\n", "    }\n", "\n", "    private final Method addSuppressed;\n", "\n", "    private SuppressingSuppressor(Method addSuppressed) {\n", "      this.addSuppressed = addSuppressed;\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "2": ["  private static final Suppressor SUPPRESSOR =\n", "      SuppressingSuppressor.isAvailable()\n", "          ? SuppressingSuppressor.INSTANCE\n", "          : LoggingSuppressor.INSTANCE;\n"], "3": ["  @NullableDecl private Throwable thrown;\n"], "4": ["  public <C extends Closeable> C register(@NullableDecl C closeable) {\n"], "5": ["\n", "    static final SuppressingSuppressor INSTANCE = new SuppressingSuppressor();\n", "\n", "    static boolean isAvailable() {\n", "      return addSuppressed != null;\n", "    }\n", "\n", "    static final Method addSuppressed = addSuppressedMethodOrNull();\n", "\n", "    private static Method addSuppressedMethodOrNull() {\n", "        return Throwable.class.getMethod(\"addSuppressed\", Throwable.class);\n"]}, "added_lines": {"1": [30, 31], "2": [92, 96, 97, 98, 99, 100, 101], "3": [112], "4": [127, 128, 129, 130], "5": [267, 268, 269, 271, 275, 276, 277, 278, 279, 280, 281]}, "removed_lines": {"1": [30], "2": [94, 95, 96, 97], "3": [108], "4": [123], "5": [260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271]}}, {"18": "android/guava/src/com/google/common/io/CountingInputStream.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [33]}, "removed_lines": {}}, {"19": "android/guava/src/com/google/common/io/CountingOutputStream.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [31]}, "removed_lines": {}}, {"20": "android/guava/src/com/google/common/io/ElementTypesAreNonnullByDefault.java", "added": {"1": ["/*\n", " * Copyright (C) 2021 The Guava Authors\n", " *\n", " * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package com.google.common.io;\n", "\n", "import static java.lang.annotation.ElementType.FIELD;\n", "import static java.lang.annotation.ElementType.METHOD;\n", "import static java.lang.annotation.ElementType.PARAMETER;\n", "import static java.lang.annotation.ElementType.TYPE;\n", "import static java.lang.annotation.RetentionPolicy.RUNTIME;\n", "\n", "import com.google.common.annotations.GwtCompatible;\n", "import java.lang.annotation.Retention;\n", "import java.lang.annotation.Target;\n", "import javax.annotation.Nonnull;\n", "import javax.annotation.meta.TypeQualifierDefault;\n", "\n", "/**\n", " * Marks all \"top-level\" types as non-null in a way that is recognized by Kotlin. Note that this\n", " * unfortunately includes type-variable usages, so we also provide {@link ParametricNullness} to\n", " * \"undo\" it as best we can.\n", " */\n", "@GwtCompatible\n", "@Retention(RUNTIME)\n", "@Target(TYPE)\n", "@TypeQualifierDefault({FIELD, METHOD, PARAMETER})\n", "@Nonnull\n", "@interface ElementTypesAreNonnullByDefault {}\n"]}, "removed": {}, "added_lines": {"1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]}, "removed_lines": {}}, {"21": "android/guava/src/com/google/common/io/FileBackedOutputStream.java", "added": {"1": ["import static java.util.Objects.requireNonNull;\n"], "2": ["import javax.annotation.CheckForNull;\n"], "3": ["@ElementTypesAreNonnullByDefault\n", "  @CheckForNull private final File parentDirectory;\n", "  @CheckForNull\n", "  @CheckForNull\n"], "4": ["  @CheckForNull\n"], "5": ["      int fileThreshold, boolean resetOnFinalize, @CheckForNull File parentDirectory) {\n"], "6": ["      // requireNonNull is safe because we always have either `file` or `memory`.\n", "      requireNonNull(memory);\n"], "7": ["    if (memory != null && (memory.getCount() + len > fileThreshold)) {\n"]}, "removed": {"2": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "3": ["  @NullableDecl private final File parentDirectory;\n", "  @NullableDecl\n"], "5": ["      int fileThreshold, boolean resetOnFinalize, @NullableDecl File parentDirectory) {\n"], "7": ["    if (file == null && (memory.getCount() + len > fileThreshold)) {\n"]}, "added_lines": {"1": [17], "2": [31], "3": [55, 60, 66, 70], "4": [86], "5": [114], "6": [162, 163], "7": [227]}, "removed_lines": {"2": [30], "3": [58, 67], "5": [110], "7": [221]}}, {"22": "android/guava/src/com/google/common/io/FileWriteMode.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [26]}, "removed_lines": {}}, {"23": "android/guava/src/com/google/common/io/Files.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  @CheckForNull\n"], "4": ["  @ParametricNullness\n", "  static <T extends @Nullable Object> T readLines(\n", "      File file, Charset charset, LineProcessor<T> callback) throws IOException {\n"], "5": ["  @ParametricNullness\n", "  static <T extends @Nullable Object> T readBytes(File file, ByteProcessor<T> processor)\n", "      throws IOException {\n"]}, "removed": {"4": ["  static <T> T readLines(File file, Charset charset, LineProcessor<T> callback) throws IOException {\n"], "5": ["  static <T> T readBytes(File file, ByteProcessor<T> processor) throws IOException {\n"]}, "added_lines": {"1": [55, 56], "2": [69], "3": [535], "4": [595, 597, 598], "5": [617, 619, 620]}, "removed_lines": {"4": [592], "5": [612]}}, {"24": "android/guava/src/com/google/common/io/Flushables.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [32]}, "removed_lines": {}}, {"25": "android/guava/src/com/google/common/io/Java8Compatibility.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [25]}, "removed_lines": {}}, {"26": "android/guava/src/com/google/common/io/LineBuffer.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [33]}, "removed_lines": {}}, {"27": "android/guava/src/com/google/common/io/LineProcessor.java", "added": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "public interface LineProcessor<T extends @Nullable Object> {\n"], "3": ["  @ParametricNullness\n"]}, "removed": {"2": ["public interface LineProcessor<T> {\n"]}, "added_lines": {"1": [21], "2": [34, 35], "3": [47]}, "removed_lines": {"2": [33]}}, {"28": "android/guava/src/com/google/common/io/LineReader.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "  @CheckForNull private final Reader reader;\n"], "3": ["  @SuppressWarnings(\"nullness\") // TODO(cpovirk): Remove with change to @CheckForNull.\n", "  // TODO(cpovirk): @CheckForNull\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "2": ["  @NullableDecl private final Reader reader;\n"]}, "added_lines": {"1": [28], "2": [40, 43], "3": [72, 73]}, "removed_lines": {"1": [28], "2": [42]}}, {"29": "android/guava/src/com/google/common/io/LittleEndianDataInputStream.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [44]}, "removed_lines": {}}, {"30": "android/guava/src/com/google/common/io/LittleEndianDataOutputStream.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [40]}, "removed_lines": {}}, {"31": "android/guava/src/com/google/common/io/MultiInputStream.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "  @CheckForNull private InputStream in;\n"], "3": ["  public int read(byte[] b, int off, int len) throws IOException {\n", "    checkNotNull(b);\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "2": ["  @NullableDecl private InputStream in;\n"], "3": ["  public int read(@NullableDecl byte[] b, int off, int len) throws IOException {\n"]}, "added_lines": {"1": [23], "2": [33, 37], "3": [94, 95]}, "removed_lines": {"1": [23], "2": [36], "3": [93]}}, {"32": "android/guava/src/com/google/common/io/MultiReader.java", "added": {"1": ["import static com.google.common.base.Preconditions.checkNotNull;\n", "\n", "import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "  @CheckForNull private Reader current;\n"], "3": ["  public int read(char[] cbuf, int off, int len) throws IOException {\n", "    checkNotNull(cbuf);\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "2": ["  @NullableDecl private Reader current;\n"], "3": ["  public int read(@NullableDecl char[] cbuf, int off, int len) throws IOException {\n"]}, "added_lines": {"1": [17, 18, 24], "2": [33, 36], "3": [52, 53]}, "removed_lines": {"1": [22], "2": [33], "3": [49]}}, {"33": "android/guava/src/com/google/common/io/ParametricNullness.java", "added": {"1": ["/*\n", " * Copyright (C) 2021 The Guava Authors\n", " *\n", " * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package com.google.common.io;\n", "\n", "import static java.lang.annotation.ElementType.FIELD;\n", "import static java.lang.annotation.ElementType.METHOD;\n", "import static java.lang.annotation.ElementType.PARAMETER;\n", "import static java.lang.annotation.RetentionPolicy.RUNTIME;\n", "import static javax.annotation.meta.When.UNKNOWN;\n", "\n", "import com.google.common.annotations.GwtCompatible;\n", "import java.lang.annotation.Retention;\n", "import java.lang.annotation.Target;\n", "import javax.annotation.Nonnull;\n", "import javax.annotation.meta.TypeQualifierNickname;\n", "\n", "/**\n", " * Marks a \"top-level\" type-variable usage as (a) a Kotlin platform type when the type argument is\n", " * non-nullable and (b) nullable when the type argument is nullable. This is the closest we can get\n", " * to \"non-nullable when non-nullable; nullable when nullable\" (like the Android <a\n", " * href=\"https://android.googlesource.com/platform/libcore/+/master/luni/src/main/java/libcore/util/NullFromTypeParam.java\">{@code\n", " * NullFromTypeParam}</a>). We use this to \"undo\" {@link ElementTypesAreNonnullByDefault}.\n", " */\n", "@GwtCompatible\n", "@Retention(RUNTIME)\n", "@Target({FIELD, METHOD, PARAMETER})\n", "@TypeQualifierNickname\n", "@Nonnull(when = UNKNOWN)\n", "@interface ParametricNullness {}\n"]}, "removed": {}, "added_lines": {"1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43]}, "removed_lines": {}}, {"34": "android/guava/src/com/google/common/io/PatternFilenameFilter.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  /*\n", "   * Our implementation works fine with a null `dir`. However, there's nothing in the documentation\n", "   * of the supertype that suggests that implementations are expected to tolerate null. That said, I\n", "   * see calls in Google code that pass a null `dir` to a FilenameFilter.... So let's declare the\n", "   * parameter as non-nullable (since passing null to a FilenameFilter is unsafe in general), but if\n", "   * someone still manages to pass null, let's continue to have the method work.\n", "   *\n", "   * (OK, I haven't done that yet, but I will when I follow through on the TODO below after updating\n", "   * callers.)\n", "   *\n", "   * (PatternFilenameFilter is of course one of those classes that shouldn't be a publicly visible\n", "   * class to begin with but rather something returned from a static factory method whose declared\n", "   * return type is plain FilenameFilter. If we made such a change, then the annotation we choose\n", "   * here would have no significance to end users, who would be forced to conform to the signature\n", "   * used in FilenameFilter.)\n", "   */\n", "  @SuppressWarnings(\"nullness\") // TODO(cpovirk): Remove with removal of @CheckForNull.\n", "  public boolean accept(/* TODO(cpovirk): remove */ @CheckForNull File dir, String fileName) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"], "3": ["  public boolean accept(@NullableDecl File dir, String fileName) {\n"]}, "added_lines": {"1": [24], "2": [35], "3": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77]}, "removed_lines": {"1": [24], "3": [59]}}, {"35": "android/guava/src/com/google/common/io/ReaderInputStream.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [47]}, "removed_lines": {}}, {"36": "android/guava/src/com/google/common/io/Resources.java", "added": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  @ParametricNullness\n", "  public static <T extends @Nullable Object> T readLines(\n", "      URL url, Charset charset, LineProcessor<T> callback) throws IOException {\n"]}, "removed": {"3": ["  public static <T> T readLines(URL url, Charset charset, LineProcessor<T> callback)\n", "      throws IOException {\n"]}, "added_lines": {"1": [32], "2": [48], "3": [126, 127, 128]}, "removed_lines": {"3": [124, 125]}}, {"37": "guava-tests/test/com/google/common/io/ByteSourceTest.java", "added": {"1": ["import com.google.common.io.Closer.LoggingSuppressor;\n"], "2": ["    if (Closer.create().suppressor instanceof LoggingSuppressor) {\n"]}, "removed": {"2": ["    if (!Closer.SuppressingSuppressor.isAvailable()) {\n"]}, "added_lines": {"1": [33], "2": [399]}, "removed_lines": {"2": [398]}}, {"38": "guava-tests/test/com/google/common/io/CharSourceTest.java", "added": {"1": ["import com.google.common.io.Closer.LoggingSuppressor;\n"], "2": ["    if (Closer.create().suppressor instanceof LoggingSuppressor) {\n"]}, "removed": {"2": ["    if (!Closer.SuppressingSuppressor.isAvailable()) {\n"]}, "added_lines": {"1": [29], "2": [292]}, "removed_lines": {"2": [291]}}, {"39": "guava-tests/test/com/google/common/io/CloserTest.java", "added": {"1": ["import com.google.common.io.Closer.LoggingSuppressor;\n"], "2": ["    Closer closer = Closer.create();\n", "    if (closer.suppressor instanceof LoggingSuppressor) {\n"]}, "removed": {"2": ["    if (!Closer.SuppressingSuppressor.isAvailable()) {\n", "    Closer closer = new Closer(new Closer.SuppressingSuppressor());\n", "\n"]}, "added_lines": {"1": [27], "2": [315, 317]}, "removed_lines": {"2": [315, 319, 320]}}, {"40": "guava-tests/test/com/google/common/io/PatternFilenameFilterTest.java", "added": {"1": ["import com.google.common.testing.NullPointerTester;\n", "import com.google.common.testing.NullPointerTester.Visibility;\n"], "2": ["\n", "  public void testNulls() throws Exception {\n", "    NullPointerTester tester = new NullPointerTester();\n", "\n", "    tester.testConstructors(PatternFilenameFilter.class, Visibility.PACKAGE);\n", "    tester.testStaticMethods(PatternFilenameFilter.class, Visibility.PACKAGE); // currently none\n", "\n", "    // The reason that we skip this method is discussed in a comment on the method.\n", "    tester.ignore(PatternFilenameFilter.class.getMethod(\"accept\", File.class, String.class));\n", "    tester.testInstanceMethods(new PatternFilenameFilter(\".*\"), Visibility.PACKAGE);\n", "  }\n"]}, "removed": {}, "added_lines": {"1": [19, 20], "2": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61]}, "removed_lines": {}}, {"41": "guava/src/com/google/common/io/AppendableWriter.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  public Writer append(@CheckForNull CharSequence charSeq) throws IOException {\n", "  public Writer append(@CheckForNull CharSequence charSeq, int start, int end) throws IOException {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "3": ["  public Writer append(@Nullable CharSequence charSeq) throws IOException {\n", "  public Writer append(@Nullable CharSequence charSeq, int start, int end) throws IOException {\n"]}, "added_lines": {"1": [24], "2": [35], "3": [110, 117]}, "removed_lines": {"1": [24], "3": [109, 116]}}, {"42": "guava/src/com/google/common/io/BaseEncoding.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["    public boolean equals(@CheckForNull Object other) {\n"], "4": ["    @CheckForNull final Character paddingChar;\n", "    StandardBaseEncoding(String name, String alphabetChars, @CheckForNull Character paddingChar) {\n", "    StandardBaseEncoding(Alphabet alphabet, @CheckForNull Character paddingChar) {\n"], "5": ["    @LazyInit @CheckForNull private transient BaseEncoding upperCase;\n", "    @LazyInit @CheckForNull private transient BaseEncoding lowerCase;\n"], "6": ["    BaseEncoding newInstance(Alphabet alphabet, @CheckForNull Character paddingChar) {\n"], "7": ["    public boolean equals(@CheckForNull Object other) {\n"], "8": ["    BaseEncoding newInstance(Alphabet alphabet, @CheckForNull Character paddingChar) {\n", "    Base64Encoding(String name, String alphabetChars, @CheckForNull Character paddingChar) {\n", "    private Base64Encoding(Alphabet alphabet, @CheckForNull Character paddingChar) {\n"], "9": ["    BaseEncoding newInstance(Alphabet alphabet, @CheckForNull Character paddingChar) {\n"], "10": ["      public Appendable append(@CheckForNull CharSequence chars, int off, int len) {\n", "      public Appendable append(@CheckForNull CharSequence chars) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "3": ["    public boolean equals(@Nullable Object other) {\n"], "4": ["    final @Nullable Character paddingChar;\n", "    StandardBaseEncoding(String name, String alphabetChars, @Nullable Character paddingChar) {\n", "    StandardBaseEncoding(Alphabet alphabet, @Nullable Character paddingChar) {\n"], "5": ["    @LazyInit private transient @Nullable BaseEncoding upperCase;\n", "    @LazyInit private transient @Nullable BaseEncoding lowerCase;\n"], "6": ["    BaseEncoding newInstance(Alphabet alphabet, @Nullable Character paddingChar) {\n"], "7": ["    public boolean equals(@Nullable Object other) {\n"], "8": ["    BaseEncoding newInstance(Alphabet alphabet, @Nullable Character paddingChar) {\n", "    Base64Encoding(String name, String alphabetChars, @Nullable Character paddingChar) {\n", "    private Base64Encoding(Alphabet alphabet, @Nullable Character paddingChar) {\n"], "9": ["    BaseEncoding newInstance(Alphabet alphabet, @Nullable Character paddingChar) {\n"], "10": ["      public Appendable append(@Nullable CharSequence chars, int off, int len) throws IOException {\n", "      public Appendable append(@Nullable CharSequence chars) throws IOException {\n"]}, "added_lines": {"1": [38], "2": [125], "3": [551], "4": [569, 571, 575], "5": [833, 834], "6": [856], "7": [875], "8": [932, 938, 942], "9": [989], "10": [1040, 1045]}, "removed_lines": {"1": [38], "3": [550], "4": [568, 570, 574], "5": [832, 833], "6": [855], "7": [874], "8": [931, 937, 941], "9": [988], "10": [1039, 1044]}}, {"43": "guava/src/com/google/common/io/ByteArrayDataInput.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  @CheckForNull\n"]}, "removed": {}, "added_lines": {"1": [21], "2": [36], "3": [91]}, "removed_lines": {}}, {"44": "guava/src/com/google/common/io/ByteArrayDataOutput.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [29]}, "removed_lines": {}}, {"45": "guava/src/com/google/common/io/ByteProcessor.java", "added": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "public interface ByteProcessor<T extends @Nullable Object> {\n"], "3": ["  @ParametricNullness\n"]}, "removed": {"2": ["public interface ByteProcessor<T> {\n"]}, "added_lines": {"1": [22], "2": [36, 37], "3": [51]}, "removed_lines": {"2": [35]}}, {"46": "guava/src/com/google/common/io/ByteSink.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [49]}, "removed_lines": {}}, {"47": "guava/src/com/google/common/io/ByteSource.java", "added": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  public <T extends @Nullable Object> T read(ByteProcessor<T> processor) throws IOException {\n"], "4": ["    @ParametricNullness\n", "    public <T extends @Nullable Object> T read(ByteProcessor<T> processor) throws IOException {\n"]}, "removed": {"3": ["  public <T> T read(ByteProcessor<T> processor) throws IOException {\n"], "4": ["    public <T> T read(ByteProcessor<T> processor) throws IOException {\n"]}, "added_lines": {"1": [43], "2": [77], "3": [319], "4": [623, 624]}, "removed_lines": {"3": [317], "4": [621]}}, {"48": "guava/src/com/google/common/io/ByteStreams.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["    @CheckForNull\n"], "4": ["  @ParametricNullness\n", "  public static <T extends @Nullable Object> T readBytes(\n", "      InputStream input, ByteProcessor<T> processor) throws IOException {\n"]}, "removed": {"4": ["  public static <T> T readBytes(InputStream input, ByteProcessor<T> processor) throws IOException {\n"]}, "added_lines": {"1": [44, 45], "2": [55], "3": [444], "4": [876, 877, 878]}, "removed_lines": {"4": [872]}}, {"49": "guava/src/com/google/common/io/CharSequenceReader.java", "added": {"1": ["import static java.util.Objects.requireNonNull;\n", "import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "  @CheckForNull private CharSequence seq;\n"], "3": ["    requireNonNull(seq); // safe as long as we call this only after checkOpen\n", "  /*\n", "   * To avoid the need to call requireNonNull so much, we could consider more clever approaches,\n", "   * such as:\n", "   *\n", "   * - Make checkOpen return the non-null `seq`. Then callers can assign that to a local variable or\n", "   *   even back to `this.seq`. However, that may suggest that we're defending against concurrent\n", "   *   mutation, which is not an actual risk because we use `synchronized`.\n", "   * - Make `remaining` require a non-null `seq` argument. But this is a bit weird because the\n", "   *   method, while it would avoid the instance field `seq` would still access the instance field\n", "   *   `pos`.\n", "   */\n", "\n", "    requireNonNull(seq); // safe because of checkOpen\n"], "4": ["    requireNonNull(seq); // safe because of checkOpen\n"], "5": ["    requireNonNull(seq); // safe because of checkOpen\n"]}, "removed": {"2": ["  private CharSequence seq;\n"]}, "added_lines": {"1": [20, 26], "2": [36, 39], "3": [59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 79], "4": [93], "5": [101]}, "removed_lines": {"2": [36]}}, {"50": "guava/src/com/google/common/io/CharSink.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [54]}, "removed_lines": {}}, {"51": "guava/src/com/google/common/io/CharSource.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  @CheckForNull\n", "  public String readFirstLine() throws IOException {\n"], "4": ["  @ParametricNullness\n", "  public <T extends @Nullable Object> T readLines(LineProcessor<T> processor) throws IOException {\n"], "5": ["    @CheckForNull\n"], "6": ["    @ParametricNullness\n", "    public <T extends @Nullable Object> T readLines(LineProcessor<T> processor) throws IOException {\n"]}, "removed": {"3": ["  public @Nullable String readFirstLine() throws IOException {\n"], "4": ["  public <T> T readLines(LineProcessor<T> processor) throws IOException {\n"], "6": ["    public <T> T readLines(LineProcessor<T> processor) throws IOException {\n"]}, "added_lines": {"1": [42], "2": [85], "3": [312, 313], "4": [369, 370], "5": [601], "6": [613, 614]}, "removed_lines": {"3": [310], "4": [366], "6": [608]}}, {"52": "guava/src/com/google/common/io/CharStreams.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  @ParametricNullness\n", "  public static <T extends @Nullable Object> T readLines(\n", "      Readable readable, LineProcessor<T> processor) throws IOException {\n"], "4": ["    public Writer append(@CheckForNull CharSequence csq) {\n", "    public Writer append(@CheckForNull CharSequence csq, int start, int end) {\n"]}, "removed": {"3": ["  public static <T> T readLines(Readable readable, LineProcessor<T> processor) throws IOException {\n"], "4": ["    public Writer append(@Nullable CharSequence csq) {\n", "    public Writer append(@Nullable CharSequence csq, int start, int end) {\n"]}, "added_lines": {"1": [31], "2": [49], "3": [220, 221, 222], "4": [314, 319]}, "removed_lines": {"3": [218], "4": [310, 315]}}, {"53": "guava/src/com/google/common/io/Closeables.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  public static void close(@CheckForNull Closeable closeable, boolean swallowIOException)\n"], "4": ["  public static void closeQuietly(@CheckForNull InputStream inputStream) {\n"], "5": ["  public static void closeQuietly(@CheckForNull Reader reader) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "3": ["  public static void close(@Nullable Closeable closeable, boolean swallowIOException)\n"], "4": ["  public static void closeQuietly(@Nullable InputStream inputStream) {\n"], "5": ["  public static void closeQuietly(@Nullable Reader reader) {\n"]}, "added_lines": {"1": [26], "2": [36], "3": [73], "4": [103], "5": [124]}, "removed_lines": {"1": [26], "3": [72], "4": [102], "5": [123]}}, {"54": "guava/src/com/google/common/io/Closer.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "  private static final Suppressor SUPPRESSOR;\n", "\n", "  static {\n", "    SuppressingSuppressor suppressingSuppressor = SuppressingSuppressor.tryCreate();\n", "    SUPPRESSOR = suppressingSuppressor == null ? LoggingSuppressor.INSTANCE : suppressingSuppressor;\n", "  }\n"], "3": ["  @CheckForNull private Throwable thrown;\n"], "4": ["  @ParametricNullness\n", "  @SuppressWarnings(\"nullness\") // TODO(cpovirk): Remove with change to @ParametricNullness.\n", "  public <C extends @Nullable Closeable> C register(\n", "      /* TODO(cpovirk): change to @ParametricNullness */ @CheckForNull C closeable) {\n"], "5": ["    @CheckForNull\n", "    static SuppressingSuppressor tryCreate() {\n", "      Method addSuppressed;\n", "        addSuppressed = Throwable.class.getMethod(\"addSuppressed\", Throwable.class);\n", "      return new SuppressingSuppressor(addSuppressed);\n", "    }\n", "\n", "    private final Method addSuppressed;\n", "\n", "    private SuppressingSuppressor(Method addSuppressed) {\n", "      this.addSuppressed = addSuppressed;\n"]}, "removed": {"2": ["  private static final Suppressor SUPPRESSOR =\n", "      SuppressingSuppressor.isAvailable()\n", "          ? SuppressingSuppressor.INSTANCE\n", "          : LoggingSuppressor.INSTANCE;\n"], "3": ["  private @Nullable Throwable thrown;\n"], "4": ["  public <C extends Closeable> C register(@Nullable C closeable) {\n"], "5": ["\n", "    static final SuppressingSuppressor INSTANCE = new SuppressingSuppressor();\n", "\n", "    static boolean isAvailable() {\n", "      return addSuppressed != null;\n", "    }\n", "\n", "    static final Method addSuppressed = addSuppressedMethodOrNull();\n", "\n", "    private static Method addSuppressedMethodOrNull() {\n", "        return Throwable.class.getMethod(\"addSuppressed\", Throwable.class);\n"]}, "added_lines": {"1": [30], "2": [92, 96, 97, 98, 99, 100, 101], "3": [112], "4": [127, 128, 129, 130], "5": [267, 268, 269, 271, 275, 276, 277, 278, 279, 280, 281]}, "removed_lines": {"2": [94, 95, 96, 97], "3": [108], "4": [123], "5": [260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271]}}, {"55": "guava/src/com/google/common/io/CountingInputStream.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [33]}, "removed_lines": {}}, {"56": "guava/src/com/google/common/io/CountingOutputStream.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [31]}, "removed_lines": {}}, {"57": "guava/src/com/google/common/io/ElementTypesAreNonnullByDefault.java", "added": {"1": ["/*\n", " * Copyright (C) 2021 The Guava Authors\n", " *\n", " * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package com.google.common.io;\n", "\n", "import static java.lang.annotation.ElementType.FIELD;\n", "import static java.lang.annotation.ElementType.METHOD;\n", "import static java.lang.annotation.ElementType.PARAMETER;\n", "import static java.lang.annotation.ElementType.TYPE;\n", "import static java.lang.annotation.RetentionPolicy.RUNTIME;\n", "\n", "import com.google.common.annotations.GwtCompatible;\n", "import java.lang.annotation.Retention;\n", "import java.lang.annotation.Target;\n", "import javax.annotation.Nonnull;\n", "import javax.annotation.meta.TypeQualifierDefault;\n", "\n", "/**\n", " * Marks all \"top-level\" types as non-null in a way that is recognized by Kotlin. Note that this\n", " * unfortunately includes type-variable usages, so we also provide {@link ParametricNullness} to\n", " * \"undo\" it as best we can.\n", " */\n", "@GwtCompatible\n", "@Retention(RUNTIME)\n", "@Target(TYPE)\n", "@TypeQualifierDefault({FIELD, METHOD, PARAMETER})\n", "@Nonnull\n", "@interface ElementTypesAreNonnullByDefault {}\n"]}, "removed": {}, "added_lines": {"1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]}, "removed_lines": {}}, {"58": "guava/src/com/google/common/io/FileBackedOutputStream.java", "added": {"1": ["import static java.util.Objects.requireNonNull;\n"], "2": ["import javax.annotation.CheckForNull;\n"], "3": ["@ElementTypesAreNonnullByDefault\n", "  @CheckForNull private final File parentDirectory;\n", "  @CheckForNull\n", "  @CheckForNull\n", "  private File file;\n"], "4": ["  @CheckForNull\n"], "5": ["      int fileThreshold, boolean resetOnFinalize, @CheckForNull File parentDirectory) {\n"], "6": ["      // requireNonNull is safe because we always have either `file` or `memory`.\n", "      requireNonNull(memory);\n"], "7": ["    if (memory != null && (memory.getCount() + len > fileThreshold)) {\n"]}, "removed": {"2": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "3": ["  @Nullable private final File parentDirectory;\n", "  private @Nullable File file;\n"], "5": ["      int fileThreshold, boolean resetOnFinalize, @Nullable File parentDirectory) {\n"], "7": ["    if (file == null && (memory.getCount() + len > fileThreshold)) {\n"]}, "added_lines": {"1": [17], "2": [31], "3": [55, 60, 66, 70, 71], "4": [86], "5": [114], "6": [162, 163], "7": [227]}, "removed_lines": {"2": [30], "3": [58, 67], "5": [109], "7": [220]}}, {"59": "guava/src/com/google/common/io/FileWriteMode.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [26]}, "removed_lines": {}}, {"60": "guava/src/com/google/common/io/Files.java", "added": {"1": ["import javax.annotation.CheckForNull;\n", "import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  @CheckForNull\n"], "4": ["  @ParametricNullness\n", "  static <T extends @Nullable Object> T readLines(\n", "      File file, Charset charset, LineProcessor<T> callback) throws IOException {\n"], "5": ["  @ParametricNullness\n", "  static <T extends @Nullable Object> T readBytes(File file, ByteProcessor<T> processor)\n", "      throws IOException {\n"]}, "removed": {"4": ["  static <T> T readLines(File file, Charset charset, LineProcessor<T> callback) throws IOException {\n"], "5": ["  static <T> T readBytes(File file, ByteProcessor<T> processor) throws IOException {\n"]}, "added_lines": {"1": [55, 56], "2": [69], "3": [535], "4": [595, 597, 598], "5": [617, 619, 620]}, "removed_lines": {"4": [592], "5": [612]}}, {"61": "guava/src/com/google/common/io/Flushables.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [32]}, "removed_lines": {}}, {"62": "guava/src/com/google/common/io/InsecureRecursiveDeleteException.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "  public InsecureRecursiveDeleteException(@CheckForNull String file) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["  public InsecureRecursiveDeleteException(@Nullable String file) {\n"]}, "added_lines": {"1": [24], "2": [41, 44]}, "removed_lines": {"1": [24], "2": [43]}}, {"63": "guava/src/com/google/common/io/Java8Compatibility.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [25]}, "removed_lines": {}}, {"64": "guava/src/com/google/common/io/LineBuffer.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [33]}, "removed_lines": {}}, {"65": "guava/src/com/google/common/io/LineProcessor.java", "added": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "public interface LineProcessor<T extends @Nullable Object> {\n"], "3": ["  @ParametricNullness\n"]}, "removed": {"2": ["public interface LineProcessor<T> {\n"]}, "added_lines": {"1": [21], "2": [34, 35], "3": [47]}, "removed_lines": {"2": [33]}}, {"66": "guava/src/com/google/common/io/LineReader.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "  @CheckForNull private final Reader reader;\n"], "3": ["  @SuppressWarnings(\"nullness\") // TODO(cpovirk): Remove with change to @CheckForNull.\n", "  // TODO(cpovirk): @CheckForNull\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["  private final @Nullable Reader reader;\n"]}, "added_lines": {"1": [28], "2": [40, 43], "3": [72, 73]}, "removed_lines": {"1": [28], "2": [42]}}, {"67": "guava/src/com/google/common/io/LittleEndianDataInputStream.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [44]}, "removed_lines": {}}, {"68": "guava/src/com/google/common/io/LittleEndianDataOutputStream.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [40]}, "removed_lines": {}}, {"69": "guava/src/com/google/common/io/MoreFiles.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  @CheckForNull\n", "  private static Collection<IOException> deleteRecursivelySecure(\n"], "4": ["  @CheckForNull\n", "  private static Collection<IOException> deleteDirectoryContentsSecure(\n"], "5": ["  @CheckForNull\n", "  private static Collection<IOException> deleteRecursivelyInsecure(Path path) {\n"], "6": ["  @CheckForNull\n", "  private static Collection<IOException> deleteDirectoryContentsInsecure(\n"], "7": ["  @CheckForNull\n", "  private static Path getParentPath(Path path) {\n"], "8": ["      @CheckForNull Collection<IOException> exceptions, IOException e) {\n"], "9": ["  @CheckForNull\n", "  private static Collection<IOException> concat(\n", "      @CheckForNull Collection<IOException> exceptions,\n", "      @CheckForNull Collection<IOException> other) {\n"], "10": ["  @CheckForNull\n", "  private static NoSuchFileException pathNotFound(Path path, Collection<IOException> exceptions) {\n"], "11": ["       *   deleteDirectoryContents is when an exception is thrown during the recursive steps. Any\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "3": ["  private static @Nullable Collection<IOException> deleteRecursivelySecure(\n"], "4": ["  private static @Nullable Collection<IOException> deleteDirectoryContentsSecure(\n"], "5": ["  private static @Nullable Collection<IOException> deleteRecursivelyInsecure(Path path) {\n"], "6": ["  private static @Nullable Collection<IOException> deleteDirectoryContentsInsecure(\n"], "7": ["  private static @Nullable Path getParentPath(Path path) {\n"], "8": ["      @Nullable Collection<IOException> exceptions, IOException e) {\n"], "9": ["  private static @Nullable Collection<IOException> concat(\n", "      @Nullable Collection<IOException> exceptions, @Nullable Collection<IOException> other) {\n"], "10": ["  private static @Nullable NoSuchFileException pathNotFound(\n", "      Path path, Collection<IOException> exceptions) {\n"], "11": ["       *   deleteDirectoryContents is when an exception is thrown during the recusive steps. Any\n"]}, "added_lines": {"1": [57], "2": [72], "3": [617, 618], "4": [646, 647], "5": [665, 666], "6": [692, 693], "7": [712, 713], "8": [759], "9": [772, 773, 774, 775], "10": [812, 813], "11": [841]}, "removed_lines": {"1": [57], "3": [616], "4": [644], "5": [662], "6": [688], "7": [707], "8": [753], "9": [766, 767], "10": [804, 805], "11": [833]}}, {"70": "guava/src/com/google/common/io/MultiInputStream.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "  @CheckForNull private InputStream in;\n"], "3": ["  public int read(byte[] b, int off, int len) throws IOException {\n", "    checkNotNull(b);\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["  private @Nullable InputStream in;\n"], "3": ["  public int read(byte @Nullable [] b, int off, int len) throws IOException {\n"]}, "added_lines": {"1": [23], "2": [33, 37], "3": [94, 95]}, "removed_lines": {"1": [23], "2": [36], "3": [93]}}, {"71": "guava/src/com/google/common/io/MultiReader.java", "added": {"1": ["import static com.google.common.base.Preconditions.checkNotNull;\n", "\n", "import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n", "  @CheckForNull private Reader current;\n"], "3": ["  public int read(char[] cbuf, int off, int len) throws IOException {\n", "    checkNotNull(cbuf);\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["  private @Nullable Reader current;\n"], "3": ["  public int read(char @Nullable [] cbuf, int off, int len) throws IOException {\n"]}, "added_lines": {"1": [17, 18, 24], "2": [33, 36], "3": [52, 53]}, "removed_lines": {"1": [22], "2": [33], "3": [49]}}, {"72": "guava/src/com/google/common/io/ParametricNullness.java", "added": {"1": ["/*\n", " * Copyright (C) 2021 The Guava Authors\n", " *\n", " * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package com.google.common.io;\n", "\n", "import static java.lang.annotation.ElementType.FIELD;\n", "import static java.lang.annotation.ElementType.METHOD;\n", "import static java.lang.annotation.ElementType.PARAMETER;\n", "import static java.lang.annotation.RetentionPolicy.RUNTIME;\n", "import static javax.annotation.meta.When.UNKNOWN;\n", "\n", "import com.google.common.annotations.GwtCompatible;\n", "import java.lang.annotation.Retention;\n", "import java.lang.annotation.Target;\n", "import javax.annotation.Nonnull;\n", "import javax.annotation.meta.TypeQualifierNickname;\n", "\n", "/**\n", " * Marks a \"top-level\" type-variable usage as (a) a Kotlin platform type when the type argument is\n", " * non-nullable and (b) nullable when the type argument is nullable. This is the closest we can get\n", " * to \"non-nullable when non-nullable; nullable when nullable\" (like the Android <a\n", " * href=\"https://android.googlesource.com/platform/libcore/+/master/luni/src/main/java/libcore/util/NullFromTypeParam.java\">{@code\n", " * NullFromTypeParam}</a>). We use this to \"undo\" {@link ElementTypesAreNonnullByDefault}.\n", " */\n", "@GwtCompatible\n", "@Retention(RUNTIME)\n", "@Target({FIELD, METHOD, PARAMETER})\n", "@TypeQualifierNickname\n", "@Nonnull(when = UNKNOWN)\n", "@interface ParametricNullness {}\n"]}, "removed": {}, "added_lines": {"1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43]}, "removed_lines": {}}, {"73": "guava/src/com/google/common/io/PatternFilenameFilter.java", "added": {"1": ["import javax.annotation.CheckForNull;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  /*\n", "   * Our implementation works fine with a null `dir`. However, there's nothing in the documentation\n", "   * of the supertype that suggests that implementations are expected to tolerate null. That said, I\n", "   * see calls in Google code that pass a null `dir` to a FilenameFilter.... So let's declare the\n", "   * parameter as non-nullable (since passing null to a FilenameFilter is unsafe in general), but if\n", "   * someone still manages to pass null, let's continue to have the method work.\n", "   *\n", "   * (OK, I haven't done that yet, but I will when I follow through on the TODO below after updating\n", "   * callers.)\n", "   *\n", "   * (PatternFilenameFilter is of course one of those classes that shouldn't be a publicly visible\n", "   * class to begin with but rather something returned from a static factory method whose declared\n", "   * return type is plain FilenameFilter. If we made such a change, then the annotation we choose\n", "   * here would have no significance to end users, who would be forced to conform to the signature\n", "   * used in FilenameFilter.)\n", "   */\n", "  @SuppressWarnings(\"nullness\") // TODO(cpovirk): Remove with removal of @CheckForNull.\n", "  public boolean accept(/* TODO(cpovirk): remove */ @CheckForNull File dir, String fileName) {\n"]}, "removed": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "3": ["  public boolean accept(@Nullable File dir, String fileName) {\n"]}, "added_lines": {"1": [24], "2": [35], "3": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77]}, "removed_lines": {"1": [24], "3": [59]}}, {"74": "guava/src/com/google/common/io/ReaderInputStream.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [47]}, "removed_lines": {}}, {"75": "guava/src/com/google/common/io/RecursiveDeleteOption.java", "added": {"1": ["@ElementTypesAreNonnullByDefault\n"]}, "removed": {}, "added_lines": {"1": [34]}, "removed_lines": {}}, {"76": "guava/src/com/google/common/io/Resources.java", "added": {"1": ["import org.checkerframework.checker.nullness.qual.Nullable;\n"], "2": ["@ElementTypesAreNonnullByDefault\n"], "3": ["  @ParametricNullness\n", "  public static <T extends @Nullable Object> T readLines(\n", "      URL url, Charset charset, LineProcessor<T> callback) throws IOException {\n"]}, "removed": {"3": ["  public static <T> T readLines(URL url, Charset charset, LineProcessor<T> callback)\n", "      throws IOException {\n"]}, "added_lines": {"1": [32], "2": [48], "3": [126, 127, 128]}, "removed_lines": {"3": [124, 125]}}]}
