{
    "addition": {
        "30": "import java.util.Collections;\n",
        "35": "import javax.annotation.CheckForNull;\n",
        "36": "import org.checkerframework.checker.nullness.qual.Nullable;\n",
        "115": "@ElementTypesAreNonnullByDefault\n",
        "116": "public abstract class FluentIterable<E extends @Nullable Object> implements Iterable<E> {\n",
        "120": "  // Optional.of(this). To access the delegate iterable, call #getDelegate(), which converts to\n",
        "130": "    this.iterableDelegate = Optional.of(iterable);\n",
        "144": "  public static <E extends @Nullable Object> FluentIterable<E> from(final Iterable<E> iterable) {\n",
        "166": "  public static <E extends @Nullable Object> FluentIterable<E> from(E[] elements) {\n",
        "182": "  public static <E extends @Nullable Object> FluentIterable<E> from(FluentIterable<E> iterable) {\n",
        "199": "  public static <T extends @Nullable Object> FluentIterable<T> concat(\n",
        "200": "      Iterable<? extends T> a, Iterable<? extends T> b) {\n",
        "218": "  public static <T extends @Nullable Object> FluentIterable<T> concat(\n",
        "238": "  public static <T extends @Nullable Object> FluentIterable<T> concat(\n",
        "262": "  public static <T extends @Nullable Object> FluentIterable<T> concat(\n",
        "263": "      Iterable<? extends T>... inputs) {\n",
        "282": "  public static <T extends @Nullable Object> FluentIterable<T> concat(\n",
        "294": "  private static <T extends @Nullable Object> FluentIterable<T> concatNoDefensiveCopy(\n",
        "322": "  public static <E extends @Nullable Object> FluentIterable<E> of() {\n",
        "323": "    return FluentIterable.from(Collections.<E>emptyList());\n",
        "335": "  public static <E extends @Nullable Object> FluentIterable<E> of(\n",
        "336": "      @ParametricNullness E element, E... elements) {\n",
        "367": "  public final boolean contains(@CheckForNull Object target) {\n",
        "477": "  @SuppressWarnings(\"nullness\") // Unsafe, but we can't do much about it now.\n",
        "492": "  public final <T extends @Nullable Object> FluentIterable<T> transform(\n",
        "493": "      Function<? super E, T> function) {\n",
        "510": "  public <T extends @Nullable Object> FluentIterable<T> transformAndConcat(\n",
        "525": "  @SuppressWarnings(\"nullness\") // Unsafe, but we can't do much about it now.\n",
        "542": "  @SuppressWarnings(\"nullness\") // Unsafe, but we can't do much about it now.\n",
        "632": "  @SuppressWarnings(\"nullness\") // Unsafe, but we can't do much about it now.\n",
        "650": "  @SuppressWarnings(\"nullness\") // Unsafe, but we can't do much about it now.\n",
        "665": "  @SuppressWarnings(\"nullness\") // Unsafe, but we can't do much about it now.\n",
        "684": "  @SuppressWarnings(\"nullness\") // Unsafe, but we can't do much about it now.\n",
        "698": "  @SuppressWarnings(\"nullness\") // Unsafe, but we can't do much about it now.\n",
        "720": "  @SuppressWarnings(\"nullness\") // Unsafe, but we can't do much about it now.\n",
        "743": "  @SuppressWarnings(\"nullness\") // Unsafe, but we can't do much about it now.\n",
        "780": "  @SuppressWarnings(\"nullness\") // Unsafe, but we can't do much about it now.\n",
        "798": "  /*\n",
        "799": "   * Both the declaration of our Class<E> parameter and its usage in a call to Iterables.toArray\n",
        "800": "   * produce a nullness error: E may be a nullable type, and our nullness checker has Class's type\n",
        "801": "   * parameter bounded to non-null types. To avoid that, we'd use Class<@Nonnull E> if we could.\n",
        "802": "   * (Granted, this is only one of many nullness-checking problems that arise from letting\n",
        "803": "   * FluentIterable support null elements, and most of the other produce outright unsoundness.)\n",
        "804": "   */\n",
        "805": "  @SuppressWarnings(\"nullness\")\n",
        "806": "  public final @Nullable E[] toArray(Class<E> type) {\n",
        "862": "  @ParametricNullness\n",
        "868": "  private static class FromIterableFunction<E extends @Nullable Object>\n",
        "869": "      implements Function<Iterable<E>, FluentIterable<E>> {\n"
    },
    "removed": {
        "34": "import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n",
        "113": "public abstract class FluentIterable<E> implements Iterable<E> {\n",
        "117": "  // Optional.of(this). To access the iterator delegate, call #getDelegate(), which converts to\n",
        "127": "    checkNotNull(iterable);\n",
        "128": "    this.iterableDelegate = Optional.fromNullable(this != iterable ? iterable : null);\n",
        "142": "  public static <E> FluentIterable<E> from(final Iterable<E> iterable) {\n",
        "164": "  public static <E> FluentIterable<E> from(E[] elements) {\n",
        "180": "  public static <E> FluentIterable<E> from(FluentIterable<E> iterable) {\n",
        "197": "  public static <T> FluentIterable<T> concat(Iterable<? extends T> a, Iterable<? extends T> b) {\n",
        "215": "  public static <T> FluentIterable<T> concat(\n",
        "235": "  public static <T> FluentIterable<T> concat(\n",
        "259": "  public static <T> FluentIterable<T> concat(Iterable<? extends T>... inputs) {\n",
        "278": "  public static <T> FluentIterable<T> concat(\n",
        "290": "  private static <T> FluentIterable<T> concatNoDefensiveCopy(\n",
        "318": "  public static <E> FluentIterable<E> of() {\n",
        "319": "    return FluentIterable.from(ImmutableList.<E>of());\n",
        "331": "  public static <E> FluentIterable<E> of(@NullableDecl E element, E... elements) {\n",
        "362": "  public final boolean contains(@NullableDecl Object target) {\n",
        "486": "  public final <T> FluentIterable<T> transform(Function<? super E, T> function) {\n",
        "503": "  public <T> FluentIterable<T> transformAndConcat(\n",
        "781": "  public final E[] toArray(Class<E> type) {\n",
        "837": "  // TODO(kevinb): add @NullableDecl?\n",
        "843": "  private static class FromIterableFunction<E> implements Function<Iterable<E>, FluentIterable<E>> {\n"
    }
}