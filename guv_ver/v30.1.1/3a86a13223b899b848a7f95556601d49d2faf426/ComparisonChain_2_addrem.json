{
    "addition": {
        "60": "@ElementTypesAreNonnullByDefault\n",
        "71": "        @SuppressWarnings(\"unchecked\") // unsafe; see discussion on supertype\n",
        "73": "        public ComparisonChain compare(Comparable<?> left, Comparable<?> right) {\n",
        "74": "          return classify(((Comparable<Object>) left).compareTo(right));\n",
        "78": "        public <T extends @Nullable Object> ComparisonChain compare(\n",
        "79": "            @ParametricNullness T left, @ParametricNullness T right, Comparator<T> comparator) {\n",
        "135": "    public ComparisonChain compare(Comparable<?> left, Comparable<?> right) {\n",
        "140": "    public <T extends @Nullable Object> ComparisonChain compare(\n",
        "141": "        @ParametricNullness T left, @ParametricNullness T right, Comparator<T> comparator) {\n",
        "184": "   *\n",
        "185": "   * <p>This method is declared to accept any 2 {@code Comparable} objects, even if they are not <a\n",
        "186": "   * href=\"https://docs.oracle.com/javase/tutorial/collections/interfaces/order.html\">mutually\n",
        "187": "   * comparable</a>. If you pass objects that are not mutually comparable, this method may throw an\n",
        "188": "   * exception. (The reason for this decision is lost to time, but the reason <i>might</i> be that\n",
        "189": "   * we wanted to support legacy classes that implement the raw type {@code Comparable} (instead of\n",
        "190": "   * implementing {@code Comparable<Foo>}) without producing warnings. If so, we would prefer today\n",
        "191": "   * to produce warnings in that case, and we may change this method to do so in the future. Support\n",
        "192": "   * for raw {@code Comparable} types in Guava in general is tracked as <a\n",
        "193": "   * href=\"https://github.com/google/guava/issues/989\">#989</a>.)\n",
        "194": "   *\n",
        "195": "   * @throws ClassCastException if the parameters are not mutually comparable\n",
        "203": "  public abstract <T extends @Nullable Object> ComparisonChain compare(\n",
        "204": "      @ParametricNullness T left, @ParametricNullness T right, Comparator<T> comparator);\n"
    },
    "removed": {
        "70": "        @SuppressWarnings(\"unchecked\")\n",
        "72": "        public ComparisonChain compare(Comparable left, Comparable right) {\n",
        "73": "          return classify(left.compareTo(right));\n",
        "77": "        public <T> ComparisonChain compare(\n",
        "78": "            @Nullable T left, @Nullable T right, Comparator<T> comparator) {\n",
        "134": "    public ComparisonChain compare(@Nullable Comparable left, @Nullable Comparable right) {\n",
        "139": "    public <T> ComparisonChain compare(\n",
        "140": "        @Nullable T left, @Nullable T right, @Nullable Comparator<T> comparator) {\n",
        "190": "  public abstract <T> ComparisonChain compare(\n",
        "191": "      @Nullable T left, @Nullable T right, Comparator<T> comparator);\n"
    }
}