{
    "addition": {
        "24": "import static java.util.Objects.requireNonNull;\n",
        "45": "import javax.annotation.CheckForNull;\n",
        "103": "@ElementTypesAreNonnullByDefault\n",
        "127": "  /*\n",
        "128": "   * TODO(cpovirk): Change to Comparator<? super B> to permit Comparator<@Nullable ...> and\n",
        "129": "   * Comparator<SupertypeOfB>? What we have here matches the immutable collections, but those also\n",
        "130": "   * expose a public Builder constructor that accepts \"? super.\" So maybe we should do *that*\n",
        "131": "   * instead.\n",
        "132": "   */\n",
        "236": "  private @Nullable Object[] queue;\n",
        "304": "  @CheckForNull\n",
        "311": "    /*\n",
        "312": "     * requireNonNull is safe as long as we're careful to call this method only with populated\n",
        "313": "     * indexes.\n",
        "314": "     */\n",
        "315": "    return (E) requireNonNull(queue[index]);\n",
        "319": "  @CheckForNull\n",
        "343": "  @CheckForNull\n",
        "362": "  @CheckForNull\n",
        "372": "  @CheckForNull\n",
        "394": "  @CheckForNull\n",
        "414": "  @CheckForNull\n",
        "450": "  @CheckForNull\n",
        "528": "    @Weak Heap otherHeap; // always initialized immediately after construction\n",
        "542": "    @CheckForNull\n",
        "776": "    @CheckForNull private Queue<E> forgetMeNot;\n",
        "777": "    @CheckForNull private List<E> skipMe;\n",
        "778": "    @CheckForNull private E lastFromForgetMeNot;\n",
        "816": "          // Either both are null or neither is, but we check both to satisfy the nullness checker.\n",
        "817": "          if (forgetMeNot == null || skipMe == null) {\n",
        "831": "        checkState(removeExact(requireNonNull(lastFromForgetMeNot)));\n"
    },
    "removed": {
        "227": "  private Object[] queue;\n",
        "301": "    return (E) queue[index];\n",
        "507": "    @Weak @Nullable Heap otherHeap;\n",
        "754": "    private @Nullable Queue<E> forgetMeNot;\n",
        "755": "    private @Nullable List<E> skipMe;\n",
        "756": "    private @Nullable E lastFromForgetMeNot;\n",
        "794": "          if (forgetMeNot == null) {\n",
        "808": "        checkState(removeExact(lastFromForgetMeNot));\n"
    }
}