[{"func":{"oldfunccode":"53fd1d7612a96053e6e0b68dac86531b0d697497/Codes_neg/Match_oldfunccode_53fd1d7612a96053e6e0b68dac86531b0d697497_1.txt","newfunccode":"53fd1d7612a96053e6e0b68dac86531b0d697497/Codes_neg/Match_newfunccode_53fd1d7612a96053e6e0b68dac86531b0d697497_1.txt","newdoc":" Exactly 1 colon. Split into host:port.\n 0 or 2+ colons. Bare hostname or IPv6 literal.\n Try to parse the whole port string as a number.\n JDK7 accepts leading plus signs. We don't want to.\n","newJdoc":"53fd1d7612a96053e6e0b68dac86531b0d697497/Codes_neg/Match_newfuncnewJdoc_53fd1d7612a96053e6e0b68dac86531b0d697497_1.txt","olddoc":" Exactly 1 colon. Split into host:port.\n 0 or 2+ colons. Bare hostname or IPv6 literal.\n Try to parse the whole port string as a number.\n JDK7 accepts leading plus signs. We don't want to.\n","oldJdoc":"53fd1d7612a96053e6e0b68dac86531b0d697497/Codes_neg/Match_oldfuncoldJdoc_53fd1d7612a96053e6e0b68dac86531b0d697497_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v30.1.1/53fd1d7612a96053e6e0b68dac86531b0d697497/HostAndPort_2","pathinproj":"guava/src/com/google/common/net/HostAndPort.java","addlines":[194,195,196,197],"dellines":[193],"addcode":["      checkArgument(\n","          !portString.startsWith(\"+\") && CharMatcher.ascii().matchesAllOf(portString),\n","          \"Unparseable port number: %s\",\n","          hostPortString);\n","      checkArgument(\n","          !portString.startsWith(\"+\") && CharMatcher.ascii().matchesAllOf(portString),\n","          \"Unparseable port number: %s\",\n","          hostPortString);\n"],"delcode":["      checkArgument(!portString.startsWith(\"+\"), \"Unparseable port number: %s\", hostPortString);\n","      checkArgument(!portString.startsWith(\"+\"), \"Unparseable port number: %s\", hostPortString);\n"],"methodSig":"public static HostAndPort fromString(String hostPortString)"},"doc":{"oldfunccode":"53fd1d7612a96053e6e0b68dac86531b0d697497/Codes_neg/Match_olddocfunccode_53fd1d7612a96053e6e0b68dac86531b0d697497_1.txt","newfunccode":"53fd1d7612a96053e6e0b68dac86531b0d697497/Codes_neg/Match_newdocfunccode_53fd1d7612a96053e6e0b68dac86531b0d697497_1.txt","newdoc":"","newJdoc":"53fd1d7612a96053e6e0b68dac86531b0d697497/Codes_neg/Match_newdocnewJdoc_53fd1d7612a96053e6e0b68dac86531b0d697497_1.txt","olddoc":"","oldJdoc":"53fd1d7612a96053e6e0b68dac86531b0d697497/Codes_neg/Match_olddocJdoc_53fd1d7612a96053e6e0b68dac86531b0d697497_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v30.1.1/53fd1d7612a96053e6e0b68dac86531b0d697497/InetAddresses_2","pathinproj":"guava/src/com/google/common/net/InetAddresses.java","addlines":[162,163,164,165,166],"dellines":[],"addcode":["   * <p>This method accepts non-ASCII digits, for example {@code \"１９２.１６８.０.１\"} (those are fullwidth\n","   * characters). That is consistent with {@link InetAddress}, but not with various RFCs. If you\n","   * want to accept ASCII digits only, you can use something like {@code\n","   * CharMatcher.ascii().matchesAllOf(ipString)}.\n","   *\n","   * <p>This method accepts non-ASCII digits, for example {@code \"１９２.１６８.０.１\"} (those are fullwidth\n","   * characters). That is consistent with {@link InetAddress}, but not with various RFCs. If you\n","   * want to accept ASCII digits only, you can use something like {@code\n","   * CharMatcher.ascii().matchesAllOf(ipString)}.\n","   *\n"],"delcode":[],"methodSig":"public static boolean isInetAddress(String ipString)"},"id":1,"flag":1,"commit":"53fd1d7612a96053e6e0b68dac86531b0d697497"},{"func":{"oldfunccode":"53fd1d7612a96053e6e0b68dac86531b0d697497/Codes_neg/Match_oldfunccode_53fd1d7612a96053e6e0b68dac86531b0d697497_2.txt","newfunccode":"53fd1d7612a96053e6e0b68dac86531b0d697497/Codes_neg/Match_newfunccode_53fd1d7612a96053e6e0b68dac86531b0d697497_2.txt","newdoc":" Exactly 1 colon. Split into host:port.\n 0 or 2+ colons. Bare hostname or IPv6 literal.\n Try to parse the whole port string as a number.\n JDK7 accepts leading plus signs. We don't want to.\n Exactly 1 colon. Split into host:port.\n 0 or 2+ colons. Bare hostname or IPv6 literal.\n Try to parse the whole port string as a number.\n JDK7 accepts leading plus signs. We don't want to.\n","newJdoc":"53fd1d7612a96053e6e0b68dac86531b0d697497/Codes_neg/Match_newfuncnewJdoc_53fd1d7612a96053e6e0b68dac86531b0d697497_2.txt","olddoc":" Exactly 1 colon. Split into host:port.\n 0 or 2+ colons. Bare hostname or IPv6 literal.\n Try to parse the whole port string as a number.\n JDK7 accepts leading plus signs. We don't want to.\n Exactly 1 colon. Split into host:port.\n 0 or 2+ colons. Bare hostname or IPv6 literal.\n Try to parse the whole port string as a number.\n JDK7 accepts leading plus signs. We don't want to.\n","oldJdoc":"53fd1d7612a96053e6e0b68dac86531b0d697497/Codes_neg/Match_oldfuncoldJdoc_53fd1d7612a96053e6e0b68dac86531b0d697497_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v30.1.1/53fd1d7612a96053e6e0b68dac86531b0d697497/HostAndPort_2","pathinproj":"guava/src/com/google/common/net/HostAndPort.java","addlines":[194,195,196,197],"dellines":[193],"addcode":["      checkArgument(\n","          !portString.startsWith(\"+\") && CharMatcher.ascii().matchesAllOf(portString),\n","          \"Unparseable port number: %s\",\n","          hostPortString);\n","      checkArgument(\n","          !portString.startsWith(\"+\") && CharMatcher.ascii().matchesAllOf(portString),\n","          \"Unparseable port number: %s\",\n","          hostPortString);\n"],"delcode":["      checkArgument(!portString.startsWith(\"+\"), \"Unparseable port number: %s\", hostPortString);\n","      checkArgument(!portString.startsWith(\"+\"), \"Unparseable port number: %s\", hostPortString);\n"],"methodSig":"public static HostAndPort fromString(String hostPortString)"},"doc":{"oldfunccode":"53fd1d7612a96053e6e0b68dac86531b0d697497/Codes_neg/Match_olddocfunccode_53fd1d7612a96053e6e0b68dac86531b0d697497_2.txt","newfunccode":"53fd1d7612a96053e6e0b68dac86531b0d697497/Codes_neg/Match_newdocfunccode_53fd1d7612a96053e6e0b68dac86531b0d697497_2.txt","newdoc":" Fixup to avoid some \"illegal\" values. Currently the only potential\n Special cases:\n ::1\n ::0\n Just extract the high 64 bits (assuming the rest is user-modifiable).\n Many strategies for hashing are possible. This might suffice for now.\n Squash into 224/4 Multicast and 240/4 Reserved space (i.e. 224/3).\n illegal value is 255.255.255.255.\n","newJdoc":"53fd1d7612a96053e6e0b68dac86531b0d697497/Codes_neg/Match_newdocnewJdoc_53fd1d7612a96053e6e0b68dac86531b0d697497_2.txt","olddoc":" Fixup to avoid some \"illegal\" values. Currently the only potential\n Special cases:\n ::1\n ::0\n Just extract the high 64 bits (assuming the rest is user-modifiable).\n Many strategies for hashing are possible. This might suffice for now.\n Squash into 224/4 Multicast and 240/4 Reserved space (i.e. 224/3).\n illegal value is 255.255.255.255.\n","oldJdoc":"53fd1d7612a96053e6e0b68dac86531b0d697497/Codes_neg/Match_olddocJdoc_53fd1d7612a96053e6e0b68dac86531b0d697497_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v30.1.1/53fd1d7612a96053e6e0b68dac86531b0d697497/InetAddresses_2","pathinproj":"guava/src/com/google/common/net/InetAddresses.java","addlines":[898,908],"dellines":[884,874],"addcode":["   * This method does so by hashing 64 bits of the IPv6 address into {@code 224.0.0.0/3} (64 bits\n","   * <p>NOTE: This method is failsafe for security purposes: ALL IPv6 addresses (except localhost\n","   * This method does so by hashing 64 bits of the IPv6 address into {@code 224.0.0.0/3} (64 bits\n","   * <p>NOTE: This method is failsafe for security purposes: ALL IPv6 addresses (except localhost\n"],"delcode":["   * This function does so by hashing 64 bits of the IPv6 address into {@code 224.0.0.0/3} (64 bits\n","   * <p>NOTE: This function is failsafe for security purposes: ALL IPv6 addresses (except localhost\n","   * This function does so by hashing 64 bits of the IPv6 address into {@code 224.0.0.0/3} (64 bits\n","   * <p>NOTE: This function is failsafe for security purposes: ALL IPv6 addresses (except localhost\n"],"methodSig":"public static Inet4Address getCoercedIPv4Address(InetAddress ip)"},"id":1,"flag":1,"commit":"53fd1d7612a96053e6e0b68dac86531b0d697497"}]