{"id": "8a7d36a8e5044096919a3512aa6734c95032f38c", "code": [{"0": "android/guava-tests/test/com/google/common/net/InetAddressesTest.java", "added": {"1": ["  // see https://github.com/google/guava/issues/2587\n", "  private static final ImmutableSet<String> SCOPE_IDS =\n", "      ImmutableSet.of(\"eno1\", \"en1\", \"eth0\", \"X\", \"1\", \"2\", \"14\", \"20\");\n", "\n", "  public void testIPv4AddressWithScopeId() {\n", "    ImmutableSet<String> ipStrings = ImmutableSet.of(\"1.2.3.4\", \"192.168.0.1\");\n", "    for (String ipString : ipStrings) {\n", "      for (String scopeId : SCOPE_IDS) {\n", "        String withScopeId = ipString + \"%\" + scopeId;\n", "        assertFalse(\n", "            \"InetAddresses.isInetAddress(\" + withScopeId + \") should be false but was true\",\n", "            InetAddresses.isInetAddress(withScopeId));\n", "      }\n", "    }\n", "  }\n", "\n", "  public void testDottedQuadAddressWithScopeId() {\n", "    ImmutableSet<String> ipStrings =\n", "        ImmutableSet.of(\"7::0.128.0.127\", \"7::0.128.0.128\", \"7::128.128.0.127\", \"7::0.128.128.127\");\n", "    for (String ipString : ipStrings) {\n", "      for (String scopeId : SCOPE_IDS) {\n", "        String withScopeId = ipString + \"%\" + scopeId;\n", "        assertFalse(\n", "            \"InetAddresses.isInetAddress(\" + withScopeId + \") should be false but was true\",\n", "            InetAddresses.isInetAddress(withScopeId));\n", "      }\n", "    }\n", "  }\n", "\n", "  public void testIPv6AddressWithScopeId() {\n", "    ImmutableSet<String> ipStrings =\n", "        ImmutableSet.of(\n", "            \"0:0:0:0:0:0:0:1\",\n", "            \"fe80::a\",\n", "            \"fe80::1\",\n", "            \"fe80::2\",\n", "            \"fe80::42\",\n", "            \"fe80::3dd0:7f8e:57b7:34d5\",\n", "            \"fe80::71a3:2b00:ddd3:753f\",\n", "            \"fe80::8b2:d61e:e5c:b333\",\n", "            \"fe80::b059:65f4:e877:c40\");\n", "    for (String ipString : ipStrings) {\n", "      for (String scopeId : SCOPE_IDS) {\n", "        String withScopeId = ipString + \"%\" + scopeId;\n", "        assertTrue(\n", "            \"InetAddresses.isInetAddress(\" + withScopeId + \") should be true but was false\",\n", "            InetAddresses.isInetAddress(withScopeId));\n", "        assertEquals(InetAddresses.forString(withScopeId), InetAddresses.forString(ipString));\n", "      }\n", "    }\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218]}, "removed_lines": {}}, {"1": "android/guava/src/com/google/common/net/InetAddresses.java", "added": {"1": ["   * <p>Anything after a {@code %} in an IPv6 address is ignored (assumed to be a Scope ID).\n", "   *\n"], "2": ["  /** Returns {@code null} if unable to parse into a {@code byte[]}. */\n", "    int percentIndex = -1;\n"], "3": ["      } else if (c == '%') {\n", "        percentIndex = i;\n", "        break; // everything after a '%' is ignored (it's a Scope ID): http://superuser.com/a/99753\n"], "4": ["      if (percentIndex != -1) {\n", "        ipString = ipString.substring(0, percentIndex);\n", "      }\n"]}, "removed": {}, "added_lines": {"1": [134, 135], "2": [163, 169], "3": [179, 180, 181], "4": [195, 196, 197]}, "removed_lines": {}}, {"2": "guava-tests/test/com/google/common/net/InetAddressesTest.java", "added": {"1": ["  // see https://github.com/google/guava/issues/2587\n", "  private static final ImmutableSet<String> SCOPE_IDS =\n", "      ImmutableSet.of(\"eno1\", \"en1\", \"eth0\", \"X\", \"1\", \"2\", \"14\", \"20\");\n", "\n", "  public void testIPv4AddressWithScopeId() {\n", "    ImmutableSet<String> ipStrings = ImmutableSet.of(\"1.2.3.4\", \"192.168.0.1\");\n", "    for (String ipString : ipStrings) {\n", "      for (String scopeId : SCOPE_IDS) {\n", "        String withScopeId = ipString + \"%\" + scopeId;\n", "        assertFalse(\n", "            \"InetAddresses.isInetAddress(\" + withScopeId + \") should be false but was true\",\n", "            InetAddresses.isInetAddress(withScopeId));\n", "      }\n", "    }\n", "  }\n", "\n", "  public void testDottedQuadAddressWithScopeId() {\n", "    ImmutableSet<String> ipStrings =\n", "        ImmutableSet.of(\"7::0.128.0.127\", \"7::0.128.0.128\", \"7::128.128.0.127\", \"7::0.128.128.127\");\n", "    for (String ipString : ipStrings) {\n", "      for (String scopeId : SCOPE_IDS) {\n", "        String withScopeId = ipString + \"%\" + scopeId;\n", "        assertFalse(\n", "            \"InetAddresses.isInetAddress(\" + withScopeId + \") should be false but was true\",\n", "            InetAddresses.isInetAddress(withScopeId));\n", "      }\n", "    }\n", "  }\n", "\n", "  public void testIPv6AddressWithScopeId() {\n", "    ImmutableSet<String> ipStrings =\n", "        ImmutableSet.of(\n", "            \"0:0:0:0:0:0:0:1\",\n", "            \"fe80::a\",\n", "            \"fe80::1\",\n", "            \"fe80::2\",\n", "            \"fe80::42\",\n", "            \"fe80::3dd0:7f8e:57b7:34d5\",\n", "            \"fe80::71a3:2b00:ddd3:753f\",\n", "            \"fe80::8b2:d61e:e5c:b333\",\n", "            \"fe80::b059:65f4:e877:c40\");\n", "    for (String ipString : ipStrings) {\n", "      for (String scopeId : SCOPE_IDS) {\n", "        String withScopeId = ipString + \"%\" + scopeId;\n", "        assertTrue(\n", "            \"InetAddresses.isInetAddress(\" + withScopeId + \") should be true but was false\",\n", "            InetAddresses.isInetAddress(withScopeId));\n", "        assertEquals(InetAddresses.forString(withScopeId), InetAddresses.forString(ipString));\n", "      }\n", "    }\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218]}, "removed_lines": {}}, {"3": "guava/src/com/google/common/net/InetAddresses.java", "added": {"1": ["   * <p>Anything after a {@code %} in an IPv6 address is ignored (assumed to be a Scope ID).\n", "   *\n"], "2": ["  /** Returns {@code null} if unable to parse into a {@code byte[]}. */\n", "    int percentIndex = -1;\n"], "3": ["      } else if (c == '%') {\n", "        percentIndex = i;\n", "        break; // everything after a '%' is ignored (it's a Scope ID): http://superuser.com/a/99753\n"], "4": ["      if (percentIndex != -1) {\n", "        ipString = ipString.substring(0, percentIndex);\n", "      }\n"]}, "removed": {}, "added_lines": {"1": [134, 135], "2": [163, 168], "3": [178, 179, 180], "4": [194, 195, 196]}, "removed_lines": {}}]}
