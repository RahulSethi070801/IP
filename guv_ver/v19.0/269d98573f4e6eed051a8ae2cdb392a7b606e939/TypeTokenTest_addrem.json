{
    "addition": {
        "112": "  public void testGenericArrayType() {\n",
        "118": "  public void testMultiDimensionalGenericArrayType() {\n",
        "124": "  public <T> void testGenericVariableTypeArrays() {\n",
        "136": "  void testResolveType_fromTypeVariable() {\n",
        "147": "  void testResolveType_fromTypeVariable_onlyDirectBoundsAreUsed() {\n",
        "153": "  public void testResolveType_fromWildcard() {\n",
        "596": "  public void testAssignableWildcardBoundedByArrayToArrayClass() {\n",
        "600": "    assertFalse(TypeToken.of(wildcardType).isAssignableFrom(wildcardType));\n",
        "604": "  public void testAssignableWildcardTypeParameterToClassTypeParameter() {\n",
        "605": "    TypeToken<?> wildcardType = new TypeToken<Iterable<? extends Object[]>>() {};\n",
        "606": "    assertFalse(new TypeToken<Iterable<Object[]>>() {}.isAssignableFrom(wildcardType));\n",
        "607": "    assertFalse(new TypeToken<Iterable<Object>>() {}.isAssignableFrom(wildcardType));\n",
        "608": "    assertTrue(wildcardType.isAssignableFrom(wildcardType));\n",
        "609": "    assertFalse(new TypeToken<Iterable<int[]>>() {}.isAssignableFrom(wildcardType));\n",
        "610": "  }\n",
        "611": "\n",
        "612": "  public void testAssignableArrayClassToBoundedWildcard() {\n",
        "613": "    TypeToken<?> subtypeOfArray = TypeToken.of(Types.subtypeOf(Object[].class));\n",
        "614": "    TypeToken<?> supertypeOfArray = TypeToken.of(Types.supertypeOf(Object[].class));\n",
        "615": "    assertFalse(subtypeOfArray.isAssignableFrom(Object[].class));\n",
        "616": "    assertFalse(subtypeOfArray.isAssignableFrom(Object[][].class));\n",
        "617": "    assertFalse(subtypeOfArray.isAssignableFrom(String[].class));\n",
        "618": "    assertTrue(supertypeOfArray.isAssignableFrom(Object[].class));\n",
        "619": "    assertFalse(supertypeOfArray.isAssignableFrom(Object.class));\n",
        "620": "    assertTrue(supertypeOfArray.isAssignableFrom(Object[][].class));\n",
        "621": "    assertTrue(supertypeOfArray.isAssignableFrom(String[].class));\n",
        "622": "  }\n",
        "623": "\n",
        "624": "  public void testAssignableClassTypeParameterToWildcardTypeParameter() {\n",
        "625": "    TypeToken<?> subtypeOfArray = new TypeToken<Iterable<? extends Object[]>>() {};\n",
        "626": "    TypeToken<?> supertypeOfArray = new TypeToken<Iterable<? super Object[]>>() {};\n",
        "627": "    assertTrue(subtypeOfArray.isAssignableFrom(new TypeToken<Iterable<Object[]>>() {}));\n",
        "628": "    assertTrue(subtypeOfArray.isAssignableFrom(new TypeToken<Iterable<Object[][]>>() {}));\n",
        "629": "    assertTrue(subtypeOfArray.isAssignableFrom(new TypeToken<Iterable<String[]>>() {}));\n",
        "630": "    assertTrue(supertypeOfArray.isAssignableFrom(new TypeToken<Iterable<Object[]>>() {}));\n",
        "631": "    assertTrue(supertypeOfArray.isAssignableFrom(new TypeToken<Iterable<Object>>() {}));\n",
        "632": "    assertFalse(supertypeOfArray.isAssignableFrom(new TypeToken<Iterable<Object[][]>>() {}));\n",
        "633": "    assertFalse(supertypeOfArray.isAssignableFrom(new TypeToken<Iterable<String[]>>() {}));\n",
        "634": "  }\n",
        "635": "\n",
        "636": "  public void testAssignableNonParameterizedClassToWildcard() {\n",
        "637": "    TypeToken<?> supertypeOfString = TypeToken.of(Types.supertypeOf(String.class));\n",
        "638": "    assertFalse(supertypeOfString.isAssignableFrom(supertypeOfString));\n",
        "639": "    assertFalse(supertypeOfString.isAssignableFrom(Object.class));\n",
        "640": "    assertFalse(supertypeOfString.isAssignableFrom(CharSequence.class));\n",
        "641": "    assertTrue(supertypeOfString.isAssignableFrom(String.class));\n",
        "642": "    assertTrue(supertypeOfString.isAssignableFrom(Types.subtypeOf(String.class)));\n",
        "643": "  }\n",
        "644": "\n",
        "645": "  public void testAssignableWildcardBoundedByIntArrayToArrayClass() {\n",
        "649": "    assertFalse(TypeToken.of(wildcardType).isAssignableFrom(wildcardType));\n",
        "653": "  public void testAssignableWildcardTypeParameterBoundedByIntArrayToArrayClassTypeParameter() {\n",
        "654": "    TypeToken<?> wildcardType = new TypeToken<Iterable<? extends int[]>>() {};\n",
        "655": "    assertFalse(new TypeToken<Iterable<int[]>>() {}.isAssignableFrom(wildcardType));\n",
        "656": "    assertFalse(new TypeToken<Iterable<Object>>() {}.isAssignableFrom(wildcardType));\n",
        "657": "    assertTrue(wildcardType.isAssignableFrom(wildcardType));\n",
        "658": "    assertFalse(new TypeToken<Iterable<Object[]>>() {}.isAssignableFrom(wildcardType));\n",
        "659": "  }\n",
        "660": "\n",
        "661": "  public void testAssignableWildcardToWildcard() {\n",
        "662": "    TypeToken<?> subtypeOfArray = TypeToken.of(Types.subtypeOf(Object[].class));\n",
        "663": "    TypeToken<?> supertypeOfArray = TypeToken.of(Types.supertypeOf(Object[].class));\n",
        "664": "    assertTrue(supertypeOfArray.isAssignableFrom(subtypeOfArray));\n",
        "665": "    assertFalse(supertypeOfArray.isAssignableFrom(supertypeOfArray));\n",
        "666": "    assertFalse(subtypeOfArray.isAssignableFrom(subtypeOfArray));\n",
        "667": "    assertFalse(subtypeOfArray.isAssignableFrom(supertypeOfArray));\n",
        "668": "  }\n",
        "669": "\n",
        "670": "  public void testAssignableWildcardTypeParameterToWildcardTypeParameter() {\n",
        "671": "    TypeToken<?> subtypeOfArray = new TypeToken<Iterable<? extends Object[]>>() {};\n",
        "672": "    TypeToken<?> supertypeOfArray = new TypeToken<Iterable<? super Object[]>>() {};\n",
        "673": "    assertFalse(supertypeOfArray.isAssignableFrom(subtypeOfArray));\n",
        "674": "    assertTrue(supertypeOfArray.isAssignableFrom(supertypeOfArray));\n",
        "675": "    assertTrue(subtypeOfArray.isAssignableFrom(subtypeOfArray));\n",
        "676": "    assertFalse(subtypeOfArray.isAssignableFrom(supertypeOfArray));\n",
        "698": "  public void testAssignableArrayToClass() {\n",
        "759": "  public void testGenericArrayTypeToArrayType() {\n",
        "953": "  public void testIsArray_wildcardType() {\n",
        "996": "  public void testGetComponentType_wildcardType() {\n",
        "1483": "  public void testRawTypes() {\n"
    },
    "removed": {
        "112": "  public void testGenericArrayType() throws Exception {\n",
        "118": "  public void testMultiDimensionalGenericArrayType() throws Exception {\n",
        "124": "  public <T> void testGenericVariableTypeArrays() throws Exception {\n",
        "136": "  void testResolveType_fromTypeVariable() throws Exception {\n",
        "147": "  void testResolveType_fromTypeVariable_onlyDirectBoundsAreUsed() throws Exception {\n",
        "153": "  public void testResolveType_fromWildcard() throws Exception {\n",
        "596": "  public void testAssignableWildcardBoundedByArrayToArrayClass() throws Exception {\n",
        "600": "    assertTrue(TypeToken.of(wildcardType).isAssignableFrom(wildcardType));\n",
        "604": "  public void testAssignableArrayClassToBoundedWildcard() throws Exception {\n",
        "605": "    TypeToken<?> upperBounded = TypeToken.of(Types.subtypeOf(Object[].class));\n",
        "606": "    TypeToken<?> lowerBounded = TypeToken.of(Types.supertypeOf(Object[].class));\n",
        "607": "    assertTrue(upperBounded.isAssignableFrom(Object[].class));\n",
        "608": "    assertTrue(upperBounded.isAssignableFrom(Object[][].class));\n",
        "609": "    assertTrue(upperBounded.isAssignableFrom(String[].class));\n",
        "610": "    assertTrue(lowerBounded.isAssignableFrom(Object[].class));\n",
        "611": "    assertTrue(lowerBounded.isAssignableFrom(Object.class));\n",
        "612": "    assertFalse(lowerBounded.isAssignableFrom(Object[][].class));\n",
        "613": "    assertFalse(lowerBounded.isAssignableFrom(String[].class));\n",
        "614": "  }\n",
        "615": "\n",
        "616": "  public void testAssignableWildcardBoundedByIntArrayToArrayClass() throws Exception {\n",
        "620": "    assertTrue(TypeToken.of(wildcardType).isAssignableFrom(wildcardType));\n",
        "624": "  public void testAssignableWildcardToWildcard() throws Exception {\n",
        "625": "    TypeToken<?> upperBounded = TypeToken.of(Types.subtypeOf(Object[].class));\n",
        "626": "    TypeToken<?> lowerBounded = TypeToken.of(Types.supertypeOf(Object[].class));\n",
        "627": "    assertFalse(lowerBounded.isAssignableFrom(upperBounded));\n",
        "628": "    assertTrue(lowerBounded.isAssignableFrom(lowerBounded));\n",
        "629": "    assertTrue(upperBounded.isAssignableFrom(upperBounded));\n",
        "630": "    assertFalse(upperBounded.isAssignableFrom(lowerBounded));\n",
        "652": "  public void testAssignableArrayToClass() throws Exception {\n",
        "713": "  public void testGenericArrayTypeToArrayType() throws Exception {\n",
        "907": "  public void testIsArray_wildcardType() throws Exception {\n",
        "950": "  public void testGetComponentType_wildcardType() throws Exception {\n",
        "1437": "  public void testRawTypes() throws Exception {\n"
    }
}