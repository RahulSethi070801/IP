{
    "addition": {
        "265": "   * <p>This overload, which does not accept an executor, uses {@code\n",
        "266": "   * directExecutor}, a dangerous choice in some cases. See the discussion in\n",
        "267": "   * the {@link ListenableFuture#addListener ListenableFuture.addListener}\n",
        "268": "   * documentation. The documentation's warnings about \"lightweight listeners\"\n",
        "269": "   * refer here to the work done during {@code FutureFallback.create}, not to\n",
        "270": "   * any work done to complete the returned {@code Future}.\n",
        "334": "   * <p>When selecting an executor, note that {@code directExecutor} is\n",
        "335": "   * dangerous in some cases. See the discussion in the {@link\n",
        "336": "   * ListenableFuture#addListener ListenableFuture.addListener} documentation.\n",
        "337": "   * The documentation's warnings about \"lightweight listeners\" refer here to\n",
        "338": "   * the work done during {@code FutureFallback.create}, not to any work done to\n",
        "339": "   * complete the returned {@code Future}.\n",
        "585": "   * <p>This overload, which does not accept an executor, uses {@code\n",
        "586": "   * directExecutor}, a dangerous choice in some cases. See the discussion in\n",
        "587": "   * the {@link ListenableFuture#addListener ListenableFuture.addListener}\n",
        "588": "   * documentation. The documentation's warnings about \"lightweight listeners\"\n",
        "589": "   * refer here to the work done during {@code AsyncFunction.apply}, not to any\n",
        "590": "   * work done to complete the returned {@code Future}.\n",
        "634": "   * <p>When selecting an executor, note that {@code directExecutor} is\n",
        "635": "   * dangerous in some cases. See the discussion in the {@link\n",
        "636": "   * ListenableFuture#addListener ListenableFuture.addListener} documentation.\n",
        "637": "   * The documentation's warnings about \"lightweight listeners\" refer here to\n",
        "638": "   * the work done during {@code AsyncFunction.apply}, not to any work done to\n",
        "639": "   * complete the returned {@code Future}.\n",
        "640": "   *\n",
        "684": "   * <p>This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous\n",
        "685": "   * choice in some cases. See the discussion in the {@link ListenableFuture#addListener\n",
        "686": "   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n",
        "687": "   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n",
        "688": "   * to complete the returned {@code Future}.\n",
        "727": "   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n",
        "728": "   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}\n",
        "729": "   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n",
        "730": "   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n",
        "731": "   * {@code Future}.\n",
        "732": "   *\n",
        "806": "   * <p>This overload, which does not accept an executor, uses {@code\n",
        "807": "   * directExecutor}, a dangerous choice in some cases. See the discussion in\n",
        "808": "   * the {@link ListenableFuture#addListener ListenableFuture.addListener}\n",
        "809": "   * documentation. The documentation's warnings about \"lightweight listeners\"\n",
        "810": "   * refer here to the work done during {@code Function.apply}.\n",
        "852": "   * <p>When selecting an executor, note that {@code directExecutor} is\n",
        "853": "   * dangerous in some cases. See the discussion in the {@link\n",
        "854": "   * ListenableFuture#addListener ListenableFuture.addListener} documentation.\n",
        "855": "   * The documentation's warnings about \"lightweight listeners\" refer here to\n",
        "856": "   * the work done during {@code Function.apply}.\n",
        "857": "   *\n",
        "1150": "   * <p>This overload, which does not accept an executor, uses {@code\n",
        "1151": "   * directExecutor}, a dangerous choice in some cases. See the discussion in\n",
        "1152": "   * the {@link ListenableFuture#addListener ListenableFuture.addListener}\n",
        "1153": "   * documentation.\n",
        "1190": "   * <p>When selecting an executor, note that {@code directExecutor} is\n",
        "1191": "   * dangerous in some cases. See the discussion in the {@link\n",
        "1192": "   * ListenableFuture#addListener ListenableFuture.addListener} documentation.\n"
    },
    "removed": {
        "265": "   * <p>Note: If the derived {@code Future} is slow or heavyweight to create\n",
        "266": "   * (whether the {@code Future} itself is slow or heavyweight to complete is\n",
        "267": "   * irrelevant), consider {@linkplain #withFallback(ListenableFuture,\n",
        "268": "   * FutureFallback, Executor) supplying an executor}. If you do not supply an\n",
        "269": "   * executor, {@code withFallback} will use a\n",
        "270": "   * {@linkplain MoreExecutors#directExecutor direct executor}, which carries\n",
        "271": "   * some caveats for heavier operations. For example, the call to {@code\n",
        "272": "   * fallback.create} may run on an unpredictable or undesirable thread:\n",
        "273": "   *\n",
        "274": "   * <ul>\n",
        "275": "   * <li>If the input {@code Future} is done at the time {@code withFallback}\n",
        "276": "   * is called, {@code withFallback} will call {@code fallback.create} inline.\n",
        "277": "   * <li>If the input {@code Future} is not yet done, {@code withFallback} will\n",
        "278": "   * schedule {@code fallback.create} to be run by the thread that completes\n",
        "279": "   * the input {@code Future}, which may be an internal system thread such as\n",
        "280": "   * an RPC network thread.\n",
        "281": "   * </ul>\n",
        "282": "   *\n",
        "283": "   * <p>Also note that, regardless of which thread executes {@code\n",
        "284": "   * fallback.create}, all other registered but unexecuted listeners are\n",
        "285": "   * prevented from running during its execution, even if those listeners are\n",
        "286": "   * to run in other executors.\n",
        "350": "   * <p>When the execution of {@code fallback.create} is fast and lightweight\n",
        "351": "   * (though the {@code Future} it returns need not meet these criteria),\n",
        "352": "   * consider {@linkplain #withFallback(ListenableFuture, FutureFallback)\n",
        "353": "   * omitting the executor} or explicitly specifying {@code\n",
        "354": "   * directExecutor}. However, be aware of the caveats documented in the\n",
        "355": "   * link above.\n",
        "601": "   * <p>Note: If the derived {@code Future} is slow or heavyweight to create\n",
        "602": "   * (whether the {@code Future} itself is slow or heavyweight to complete is\n",
        "603": "   * irrelevant), consider {@linkplain #transform(ListenableFuture,\n",
        "604": "   * AsyncFunction, Executor) supplying an executor}. If you do not supply an\n",
        "605": "   * executor, {@code transform} will use a\n",
        "606": "   * {@linkplain MoreExecutors#directExecutor direct executor}, which carries\n",
        "607": "   * some caveats for heavier operations. For example, the call to {@code\n",
        "608": "   * function.apply} may run on an unpredictable or undesirable thread:\n",
        "609": "   *\n",
        "610": "   * <ul>\n",
        "611": "   * <li>If the input {@code Future} is done at the time {@code transform} is\n",
        "612": "   * called, {@code transform} will call {@code function.apply} inline.\n",
        "613": "   * <li>If the input {@code Future} is not yet done, {@code transform} will\n",
        "614": "   * schedule {@code function.apply} to be run by the thread that completes the\n",
        "615": "   * input {@code Future}, which may be an internal system thread such as an\n",
        "616": "   * RPC network thread.\n",
        "617": "   * </ul>\n",
        "618": "   *\n",
        "619": "   * <p>Also note that, regardless of which thread executes {@code\n",
        "620": "   * function.apply}, all other registered but unexecuted listeners are\n",
        "621": "   * prevented from running during its execution, even if those listeners are\n",
        "622": "   * to run in other executors.\n",
        "673": "   * <p>When the execution of {@code function.apply} is fast and lightweight\n",
        "674": "   * (though the {@code Future} it returns need not meet these criteria),\n",
        "675": "   * consider {@linkplain #transform(ListenableFuture, AsyncFunction) omitting\n",
        "676": "   * the executor} or explicitly specifying {@code directExecutor}.\n",
        "677": "   * However, be aware of the caveats documented in the link above.\n",
        "678": "   *\n",
        "715": "   * <p>Note: If the derived {@code Future} is slow or heavyweight to create (whether the {@code\n",
        "716": "   * Future} itself is slow or heavyweight to complete is irrelevant), consider {@linkplain\n",
        "717": "   * #transformAsync(ListenableFuture, AsyncFunction, Executor) supplying an executor}. If you do\n",
        "718": "   * not supply an executor, {@code transformAsync} will use a {@linkplain\n",
        "719": "   * MoreExecutors#directExecutor direct executor}, which carries some caveats for heavier\n",
        "720": "   * operations. For example, the call to {@code function.apply} may run on an unpredictable or\n",
        "721": "   * undesirable thread:\n",
        "722": "   *\n",
        "723": "   * <ul>\n",
        "724": "   * <li>If the input {@code Future} is done at the time {@code transformAsync} is called, {@code\n",
        "725": "   * transformAsync} will call {@code function.apply} inline.\n",
        "726": "   * <li>If the input {@code Future} is not yet done, {@code transformAsync} will schedule {@code\n",
        "727": "   * function.apply} to be run by the thread that completes the input {@code Future}, which may be\n",
        "728": "   * an internal system thread such as an RPC network thread.\n",
        "729": "   * </ul>\n",
        "730": "   *\n",
        "731": "   * <p>Also note that, regardless of which thread executes {@code function.apply}, all other\n",
        "732": "   * registered but unexecuted listeners are prevented from running during its execution, even if\n",
        "733": "   * those listeners are to run in other executors.\n",
        "778": "   * <p>When the execution of {@code function.apply} is fast and lightweight (though the {@code\n",
        "779": "   * Future} it returns need not meet these criteria), consider {@linkplain\n",
        "780": "   * #transformAsync(ListenableFuture, AsyncFunction) omitting the executor} or explicitly\n",
        "781": "   * specifying {@code directExecutor}. However, be aware of the caveats documented in the link\n",
        "782": "   * above.\n",
        "783": "   *\n",
        "851": "   * <p>Note: If the transformation is slow or heavyweight, consider {@linkplain\n",
        "852": "   * #transform(ListenableFuture, Function, Executor) supplying an executor}.\n",
        "853": "   * If you do not supply an executor, {@code transform} will use an inline\n",
        "854": "   * executor, which carries some caveats for heavier operations.  For example,\n",
        "855": "   * the call to {@code function.apply} may run on an unpredictable or\n",
        "856": "   * undesirable thread:\n",
        "857": "   *\n",
        "858": "   * <ul>\n",
        "859": "   * <li>If the input {@code Future} is done at the time {@code transform} is\n",
        "860": "   * called, {@code transform} will call {@code function.apply} inline.\n",
        "861": "   * <li>If the input {@code Future} is not yet done, {@code transform} will\n",
        "862": "   * schedule {@code function.apply} to be run by the thread that completes the\n",
        "863": "   * input {@code Future}, which may be an internal system thread such as an\n",
        "864": "   * RPC network thread.\n",
        "865": "   * </ul>\n",
        "866": "   *\n",
        "867": "   * <p>Also note that, regardless of which thread executes {@code\n",
        "868": "   * function.apply}, all other registered but unexecuted listeners are\n",
        "869": "   * prevented from running during its execution, even if those listeners are\n",
        "870": "   * to run in other executors.\n",
        "921": "   * <p>When the transformation is fast and lightweight, consider {@linkplain\n",
        "922": "   * #transform(ListenableFuture, Function) omitting the executor} or\n",
        "923": "   * explicitly specifying {@code directExecutor}. However, be aware of the\n",
        "924": "   * caveats documented in the link above.\n",
        "925": "   *\n",
        "1209": "   * <p>Note: If the callback is slow or heavyweight, consider {@linkplain\n",
        "1210": "   * #addCallback(ListenableFuture, FutureCallback, Executor) supplying an\n",
        "1211": "   * executor}. If you do not supply an executor, {@code addCallback} will use\n",
        "1212": "   * a {@linkplain MoreExecutors#directExecutor direct executor}, which carries\n",
        "1213": "   * some caveats for heavier operations. For example, the callback may run on\n",
        "1214": "   * an unpredictable or undesirable thread:\n",
        "1215": "   *\n",
        "1216": "   * <ul>\n",
        "1217": "   * <li>If the input {@code Future} is done at the time {@code addCallback} is\n",
        "1218": "   * called, {@code addCallback} will execute the callback inline.\n",
        "1219": "   * <li>If the input {@code Future} is not yet done, {@code addCallback} will\n",
        "1220": "   * schedule the callback to be run by the thread that completes the input\n",
        "1221": "   * {@code Future}, which may be an internal system thread such as an RPC\n",
        "1222": "   * network thread.\n",
        "1223": "   * </ul>\n",
        "1224": "   *\n",
        "1225": "   * <p>Also note that, regardless of which thread executes the callback, all\n",
        "1226": "   * other registered but unexecuted listeners are prevented from running\n",
        "1227": "   * during its execution, even if those listeners are to run in other\n",
        "1228": "   * executors.\n",
        "1265": "   * <p>When the callback is fast and lightweight, consider {@linkplain\n",
        "1266": "   * #addCallback(ListenableFuture, FutureCallback) omitting the executor} or\n",
        "1267": "   * explicitly specifying {@code directExecutor}. However, be aware of the\n",
        "1268": "   * caveats documented in the link above.\n"
    }
}