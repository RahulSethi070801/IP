{"id": "05e283065ac6a51f16a432d87be869c5d21db8cc", "code": [{"0": "guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java", "added": {"1": ["   * <p>This overload, which does not accept an executor, uses {@code\n", "   * directExecutor}, a dangerous choice in some cases. See the discussion in\n", "   * the {@link ListenableFuture#addListener ListenableFuture.addListener}\n", "   * documentation. The documentation's warnings about \"lightweight listeners\"\n", "   * refer here to the work done during {@code FutureFallback.create}, not to\n", "   * any work done to complete the returned {@code Future}.\n"], "2": ["   * <p>When selecting an executor, note that {@code directExecutor} is\n", "   * dangerous in some cases. See the discussion in the {@link\n", "   * ListenableFuture#addListener ListenableFuture.addListener} documentation.\n", "   * The documentation's warnings about \"lightweight listeners\" refer here to\n", "   * the work done during {@code FutureFallback.create}, not to any work done to\n", "   * complete the returned {@code Future}.\n"], "3": ["   * <p>This overload, which does not accept an executor, uses {@code\n", "   * directExecutor}, a dangerous choice in some cases. See the discussion in\n", "   * the {@link ListenableFuture#addListener ListenableFuture.addListener}\n", "   * documentation. The documentation's warnings about \"lightweight listeners\"\n", "   * refer here to the work done during {@code AsyncFunction.apply}, not to any\n", "   * work done to complete the returned {@code Future}.\n"], "4": ["   * <p>When selecting an executor, note that {@code directExecutor} is\n", "   * dangerous in some cases. See the discussion in the {@link\n", "   * ListenableFuture#addListener ListenableFuture.addListener} documentation.\n", "   * The documentation's warnings about \"lightweight listeners\" refer here to\n", "   * the work done during {@code AsyncFunction.apply}, not to any work done to\n", "   * complete the returned {@code Future}.\n", "   *\n"], "6": ["   * <p>This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous\n", "   * choice in some cases. See the discussion in the {@link ListenableFuture#addListener\n", "   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n", "   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n", "   * to complete the returned {@code Future}.\n"], "7": ["   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n", "   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}\n", "   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n", "   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n", "   * {@code Future}.\n", "   *\n"], "8": ["   * <p>This overload, which does not accept an executor, uses {@code\n", "   * directExecutor}, a dangerous choice in some cases. See the discussion in\n", "   * the {@link ListenableFuture#addListener ListenableFuture.addListener}\n", "   * documentation. The documentation's warnings about \"lightweight listeners\"\n", "   * refer here to the work done during {@code Function.apply}.\n"], "9": ["   * <p>When selecting an executor, note that {@code directExecutor} is\n", "   * dangerous in some cases. See the discussion in the {@link\n", "   * ListenableFuture#addListener ListenableFuture.addListener} documentation.\n", "   * The documentation's warnings about \"lightweight listeners\" refer here to\n", "   * the work done during {@code Function.apply}.\n", "   *\n"], "11": ["   * <p>This overload, which does not accept an executor, uses {@code\n", "   * directExecutor}, a dangerous choice in some cases. See the discussion in\n", "   * the {@link ListenableFuture#addListener ListenableFuture.addListener}\n", "   * documentation.\n"], "12": ["   * <p>When selecting an executor, note that {@code directExecutor} is\n", "   * dangerous in some cases. See the discussion in the {@link\n", "   * ListenableFuture#addListener ListenableFuture.addListener} documentation.\n"]}, "removed": {"1": ["   * <p>Note: If the derived {@code Future} is slow or heavyweight to create\n", "   * (whether the {@code Future} itself is slow or heavyweight to complete is\n", "   * irrelevant), consider {@linkplain #withFallback(ListenableFuture,\n", "   * FutureFallback, Executor) supplying an executor}. If you do not supply an\n", "   * executor, {@code withFallback} will use a\n", "   * {@linkplain MoreExecutors#directExecutor direct executor}, which carries\n", "   * some caveats for heavier operations. For example, the call to {@code\n", "   * fallback.create} may run on an unpredictable or undesirable thread:\n", "   *\n", "   * <ul>\n", "   * <li>If the input {@code Future} is done at the time {@code withFallback}\n", "   * is called, {@code withFallback} will call {@code fallback.create} inline.\n", "   * <li>If the input {@code Future} is not yet done, {@code withFallback} will\n", "   * schedule {@code fallback.create} to be run by the thread that completes\n", "   * the input {@code Future}, which may be an internal system thread such as\n", "   * an RPC network thread.\n", "   * </ul>\n", "   *\n", "   * <p>Also note that, regardless of which thread executes {@code\n", "   * fallback.create}, all other registered but unexecuted listeners are\n", "   * prevented from running during its execution, even if those listeners are\n", "   * to run in other executors.\n"], "2": ["   * <p>When the execution of {@code fallback.create} is fast and lightweight\n", "   * (though the {@code Future} it returns need not meet these criteria),\n", "   * consider {@linkplain #withFallback(ListenableFuture, FutureFallback)\n", "   * omitting the executor} or explicitly specifying {@code\n", "   * directExecutor}. However, be aware of the caveats documented in the\n", "   * link above.\n"], "3": ["   * <p>Note: If the derived {@code Future} is slow or heavyweight to create\n", "   * (whether the {@code Future} itself is slow or heavyweight to complete is\n", "   * irrelevant), consider {@linkplain #transform(ListenableFuture,\n", "   * AsyncFunction, Executor) supplying an executor}. If you do not supply an\n", "   * executor, {@code transform} will use a\n", "   * {@linkplain MoreExecutors#directExecutor direct executor}, which carries\n", "   * some caveats for heavier operations. For example, the call to {@code\n", "   * function.apply} may run on an unpredictable or undesirable thread:\n", "   *\n", "   * <ul>\n", "   * <li>If the input {@code Future} is done at the time {@code transform} is\n", "   * called, {@code transform} will call {@code function.apply} inline.\n", "   * <li>If the input {@code Future} is not yet done, {@code transform} will\n", "   * schedule {@code function.apply} to be run by the thread that completes the\n", "   * input {@code Future}, which may be an internal system thread such as an\n", "   * RPC network thread.\n", "   * </ul>\n", "   *\n", "   * <p>Also note that, regardless of which thread executes {@code\n", "   * function.apply}, all other registered but unexecuted listeners are\n", "   * prevented from running during its execution, even if those listeners are\n", "   * to run in other executors.\n"], "5": ["   * <p>When the execution of {@code function.apply} is fast and lightweight\n", "   * (though the {@code Future} it returns need not meet these criteria),\n", "   * consider {@linkplain #transform(ListenableFuture, AsyncFunction) omitting\n", "   * the executor} or explicitly specifying {@code directExecutor}.\n", "   * However, be aware of the caveats documented in the link above.\n", "   *\n"], "6": ["   * <p>Note: If the derived {@code Future} is slow or heavyweight to create (whether the {@code\n", "   * Future} itself is slow or heavyweight to complete is irrelevant), consider {@linkplain\n", "   * #transformAsync(ListenableFuture, AsyncFunction, Executor) supplying an executor}. If you do\n", "   * not supply an executor, {@code transformAsync} will use a {@linkplain\n", "   * MoreExecutors#directExecutor direct executor}, which carries some caveats for heavier\n", "   * operations. For example, the call to {@code function.apply} may run on an unpredictable or\n", "   * undesirable thread:\n", "   *\n", "   * <ul>\n", "   * <li>If the input {@code Future} is done at the time {@code transformAsync} is called, {@code\n", "   * transformAsync} will call {@code function.apply} inline.\n", "   * <li>If the input {@code Future} is not yet done, {@code transformAsync} will schedule {@code\n", "   * function.apply} to be run by the thread that completes the input {@code Future}, which may be\n", "   * an internal system thread such as an RPC network thread.\n", "   * </ul>\n", "   *\n", "   * <p>Also note that, regardless of which thread executes {@code function.apply}, all other\n", "   * registered but unexecuted listeners are prevented from running during its execution, even if\n", "   * those listeners are to run in other executors.\n"], "7": ["   * <p>When the execution of {@code function.apply} is fast and lightweight (though the {@code\n", "   * Future} it returns need not meet these criteria), consider {@linkplain\n", "   * #transformAsync(ListenableFuture, AsyncFunction) omitting the executor} or explicitly\n", "   * specifying {@code directExecutor}. However, be aware of the caveats documented in the link\n", "   * above.\n", "   *\n"], "8": ["   * <p>Note: If the transformation is slow or heavyweight, consider {@linkplain\n", "   * #transform(ListenableFuture, Function, Executor) supplying an executor}.\n", "   * If you do not supply an executor, {@code transform} will use an inline\n", "   * executor, which carries some caveats for heavier operations.  For example,\n", "   * the call to {@code function.apply} may run on an unpredictable or\n", "   * undesirable thread:\n", "   *\n", "   * <ul>\n", "   * <li>If the input {@code Future} is done at the time {@code transform} is\n", "   * called, {@code transform} will call {@code function.apply} inline.\n", "   * <li>If the input {@code Future} is not yet done, {@code transform} will\n", "   * schedule {@code function.apply} to be run by the thread that completes the\n", "   * input {@code Future}, which may be an internal system thread such as an\n", "   * RPC network thread.\n", "   * </ul>\n", "   *\n", "   * <p>Also note that, regardless of which thread executes {@code\n", "   * function.apply}, all other registered but unexecuted listeners are\n", "   * prevented from running during its execution, even if those listeners are\n", "   * to run in other executors.\n"], "10": ["   * <p>When the transformation is fast and lightweight, consider {@linkplain\n", "   * #transform(ListenableFuture, Function) omitting the executor} or\n", "   * explicitly specifying {@code directExecutor}. However, be aware of the\n", "   * caveats documented in the link above.\n", "   *\n"], "11": ["   * <p>Note: If the callback is slow or heavyweight, consider {@linkplain\n", "   * #addCallback(ListenableFuture, FutureCallback, Executor) supplying an\n", "   * executor}. If you do not supply an executor, {@code addCallback} will use\n", "   * a {@linkplain MoreExecutors#directExecutor direct executor}, which carries\n", "   * some caveats for heavier operations. For example, the callback may run on\n", "   * an unpredictable or undesirable thread:\n", "   *\n", "   * <ul>\n", "   * <li>If the input {@code Future} is done at the time {@code addCallback} is\n", "   * called, {@code addCallback} will execute the callback inline.\n", "   * <li>If the input {@code Future} is not yet done, {@code addCallback} will\n", "   * schedule the callback to be run by the thread that completes the input\n", "   * {@code Future}, which may be an internal system thread such as an RPC\n", "   * network thread.\n", "   * </ul>\n", "   *\n", "   * <p>Also note that, regardless of which thread executes the callback, all\n", "   * other registered but unexecuted listeners are prevented from running\n", "   * during its execution, even if those listeners are to run in other\n", "   * executors.\n"], "12": ["   * <p>When the callback is fast and lightweight, consider {@linkplain\n", "   * #addCallback(ListenableFuture, FutureCallback) omitting the executor} or\n", "   * explicitly specifying {@code directExecutor}. However, be aware of the\n", "   * caveats documented in the link above.\n"]}, "added_lines": {"1": [265, 266, 267, 268, 269, 270], "2": [334, 335, 336, 337, 338, 339], "3": [585, 586, 587, 588, 589, 590], "4": [634, 635, 636, 637, 638, 639, 640], "6": [684, 685, 686, 687, 688], "7": [727, 728, 729, 730, 731, 732], "8": [806, 807, 808, 809, 810], "9": [852, 853, 854, 855, 856, 857], "11": [1150, 1151, 1152, 1153], "12": [1190, 1191, 1192]}, "removed_lines": {"1": [265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286], "2": [350, 351, 352, 353, 354, 355], "3": [601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622], "5": [673, 674, 675, 676, 677, 678], "6": [715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733], "7": [778, 779, 780, 781, 782, 783], "8": [851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870], "10": [921, 922, 923, 924, 925], "11": [1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228], "12": [1265, 1266, 1267, 1268]}}, {"1": "guava/src/com/google/common/util/concurrent/ExecutionList.java", "added": {"1": ["import static com.google.common.base.Preconditions.checkNotNull;\n", "\n"], "2": [" * A support class for {@code ListenableFuture} implementations to manage their listeners. An\n", " * instance contains a list of listeners, each with an associated {@code Executor}, and guarantees\n", " * that every {@code Runnable} that is {@linkplain #add added} will be executed after {@link\n", " * #execute()} is called. Any {@code Runnable} added after the call to {@code execute} is still\n", " * guaranteed to execute. There is no guarantee, however, that listeners will be executed in the\n", " * order that they are added.\n", " * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n", " * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n", " * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and logged.\n"], "3": ["   * The runnable, executor pairs to execute.  This acts as a stack threaded through the {@link\n", "   * RunnableExecutorPair#next} field.\n"], "4": ["   * Adds the {@code Runnable} and accompanying {@code Executor} to the list of listeners to\n", "   * execute. If execution has already begun, the listener is executed immediately.\n", "   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n", "   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}\n", "   * documentation.\n", "    // Fail fast on a null.  We throw NPE here because the contract of Executor states that it\n", "    // throws NPE on null listener, so we propagate that contract up into the add method as well.\n", "    checkNotNull(runnable, \"Runnable was null.\");\n", "    checkNotNull(executor, \"Executor was null.\");\n", "    // Lock while we check state.  We must maintain the lock while adding the new pair so that\n", "    // another thread can't run the list out from under us. We only add to the list if we have not\n", "    // yet started execution.\n", "    // Execute the runnable immediately. Because of scheduling this may end up getting called before\n", "    // some of the previously added runnables, but we're OK with that.  If we want to change the\n", "    // contract to guarantee ordering among runnables we'd have to modify the logic here to allow\n", "    // it.\n", "   * Runs this execution list, executing all existing pairs in the order they were added. However,\n", "   * note that listeners added after this point may be executed before those previously added, and\n", "   * note that the execution order of all listeners is ultimately chosen by the implementations of\n", "   * the supplied executors.\n", "   * <p>This method is idempotent. Calling it several times in parallel is semantically equivalent\n", "   * to calling it exactly once.\n", "    // Lock while we update our state so the add method above will finish adding any listeners\n", "    // before we start to run them.\n"], "5": ["   * Submits the given runnable to the given {@link Executor} catching and logging all {@linkplain\n", "   * RuntimeException runtime exceptions} thrown by the executor.\n", "      // Log it and keep going, bad runnable and/or executor.  Don't punish the other runnables if\n", "      // we're given a bad one.  We only catch RuntimeException because we want Errors to propagate\n", "      // up.\n"]}, "removed": {"1": ["import com.google.common.base.Preconditions;\n"], "2": [" * <p>A list of listeners, each with an associated {@code Executor}, that\n", " * guarantees that every {@code Runnable} that is {@linkplain #add added} will\n", " * be executed after {@link #execute()} is called. Any {@code Runnable} added\n", " * after the call to {@code execute} is still guaranteed to execute. There is no\n", " * guarantee, however, that listeners will be executed in the order that they\n", " * are added.\n", " * <p>Exceptions thrown by a listener will be propagated up to the executor.\n", " * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n", " * RejectedExecutionException} or an exception thrown by {@linkplain\n", " * MoreExecutors#directExecutor direct execution}) will be caught and\n", " * logged.\n"], "3": ["   * The runnable, executor pairs to execute.  This acts as a stack threaded through the \n", "   * {@link RunnableExecutorPair#next} field.\n"], "4": ["   * Adds the {@code Runnable} and accompanying {@code Executor} to the list of\n", "   * listeners to execute. If execution has already begun, the listener is\n", "   * executed immediately.\n", "   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n", "   * any thread, consider {@link MoreExecutors#directExecutor}. For heavier\n", "   * listeners, {@code directExecutor()} carries some caveats: First, the\n", "   * thread that the listener runs in depends on whether the {@code\n", "   * ExecutionList} has been executed at the time it is added. In particular,\n", "   * listeners may run in the thread that calls {@code add}. Second, the thread\n", "   * that calls {@link #execute} may be an internal implementation thread, such\n", "   * as an RPC network thread, and {@code directExecutor()} listeners may\n", "   * run in this thread. Finally, during the execution of a {@code\n", "   * directExecutor} listener, all other registered but unexecuted\n", "   * listeners are prevented from running, even if those listeners are to run\n", "   * in other executors.\n", "    // Fail fast on a null.  We throw NPE here because the contract of\n", "    // Executor states that it throws NPE on null listener, so we propagate\n", "    // that contract up into the add method as well.\n", "    Preconditions.checkNotNull(runnable, \"Runnable was null.\");\n", "    Preconditions.checkNotNull(executor, \"Executor was null.\");\n", "    // Lock while we check state.  We must maintain the lock while adding the\n", "    // new pair so that another thread can't run the list out from under us.\n", "    // We only add to the list if we have not yet started execution.\n", "    // Execute the runnable immediately. Because of scheduling this may end up\n", "    // getting called before some of the previously added runnables, but we're\n", "    // OK with that.  If we want to change the contract to guarantee ordering\n", "    // among runnables we'd have to modify the logic here to allow it.\n", "   * Runs this execution list, executing all existing pairs in the order they\n", "   * were added. However, note that listeners added after this point may be\n", "   * executed before those previously added, and note that the execution order\n", "   * of all listeners is ultimately chosen by the implementations of the\n", "   * supplied executors.\n", "   * <p>This method is idempotent. Calling it several times in parallel is\n", "   * semantically equivalent to calling it exactly once.\n", "    // Lock while we update our state so the add method above will finish adding\n", "    // any listeners before we start to run them.\n"], "5": ["   * Submits the given runnable to the given {@link Executor} catching and logging all \n", "   * {@linkplain RuntimeException runtime exceptions} thrown by the executor.\n", "      // Log it and keep going, bad runnable and/or executor.  Don't\n", "      // punish the other runnables if we're given a bad one.  We only\n", "      // catch RuntimeException because we want Errors to propagate up.\n"]}, "added_lines": {"1": [19, 20], "2": [31, 32, 33, 34, 35, 36, 38, 39, 40], "3": [51, 52], "4": [63, 64, 66, 67, 68, 71, 72, 73, 74, 76, 77, 78, 85, 86, 87, 88, 93, 94, 95, 96, 98, 99, 104, 105], "5": [138, 139, 145, 146, 147]}, "removed_lines": {"1": [20], "2": [30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41], "3": [52, 53], "4": [64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 88, 89, 90, 97, 98, 99, 100, 105, 106, 107, 108, 109, 111, 112, 117, 118], "5": [151, 152, 158, 159, 160]}}, {"2": "guava/src/com/google/common/util/concurrent/Futures.java", "added": {"1": ["   * <p>This overload, which does not accept an executor, uses {@code\n", "   * directExecutor}, a dangerous choice in some cases. See the discussion in\n", "   * the {@link ListenableFuture#addListener ListenableFuture.addListener}\n", "   * documentation. The documentation's warnings about \"lightweight listeners\"\n", "   * refer here to the work done during {@code FutureFallback.create}, not to\n", "   * any work done to complete the returned {@code Future}.\n"], "2": ["   * <p>When selecting an executor, note that {@code directExecutor} is\n", "   * dangerous in some cases. See the discussion in the {@link\n", "   * ListenableFuture#addListener ListenableFuture.addListener} documentation.\n", "   * The documentation's warnings about \"lightweight listeners\" refer here to\n", "   * the work done during {@code FutureFallback.create}, not to any work done to\n", "   * complete the returned {@code Future}.\n"], "3": ["   * <p>This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous\n", "   * choice in some cases. See the discussion in the {@link ListenableFuture#addListener\n", "   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n", "   * listeners\" refer here to the work done during {@code Function.apply}.\n"], "4": ["   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n", "   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}\n", "   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n", "   * work done during {@code Function.apply}.\n"], "5": ["   * <p>This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous\n", "   * choice in some cases. See the discussion in the {@link ListenableFuture#addListener\n", "   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n", "   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n", "   * to complete the returned {@code Future}.\n"], "6": ["   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n", "   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}\n", "   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n", "   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n", "   * {@code Future}.\n"], "7": ["   * <p>This overload, which does not accept an executor, uses {@code\n", "   * directExecutor}, a dangerous choice in some cases. See the discussion in\n", "   * the {@link ListenableFuture#addListener ListenableFuture.addListener}\n", "   * documentation. The documentation's warnings about \"lightweight listeners\"\n", "   * refer here to the work done during {@code AsyncFunction.apply}, not to any\n", "   * work done to complete the returned {@code Future}.\n"], "8": ["   * <p>When selecting an executor, note that {@code directExecutor} is\n", "   * dangerous in some cases. See the discussion in the {@link\n", "   * ListenableFuture#addListener ListenableFuture.addListener} documentation.\n", "   * The documentation's warnings about \"lightweight listeners\" refer here to\n", "   * the work done during {@code AsyncFunction.apply}, not to any work done to\n", "   * complete the returned {@code Future}.\n", "   *\n"], "10": ["   * <p>This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous\n", "   * choice in some cases. See the discussion in the {@link ListenableFuture#addListener\n", "   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n", "   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n", "   * to complete the returned {@code Future}.\n"], "11": ["   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n", "   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}\n", "   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n", "   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n", "   * {@code Future}.\n", "   *\n"], "12": ["   * <p>This overload, which does not accept an executor, uses {@code\n", "   * directExecutor}, a dangerous choice in some cases. See the discussion in\n", "   * the {@link ListenableFuture#addListener ListenableFuture.addListener}\n", "   * documentation. The documentation's warnings about \"lightweight listeners\"\n", "   * refer here to the work done during {@code Function.apply}.\n"], "13": ["   * <p>When selecting an executor, note that {@code directExecutor} is\n", "   * dangerous in some cases. See the discussion in the {@link\n", "   * ListenableFuture#addListener ListenableFuture.addListener} documentation.\n", "   * The documentation's warnings about \"lightweight listeners\" refer here to\n", "   * the work done during {@code Function.apply}.\n", "   *\n"], "15": ["   * <p>This overload, which does not accept an executor, uses {@code\n", "   * directExecutor}, a dangerous choice in some cases. See the discussion in\n", "   * the {@link ListenableFuture#addListener ListenableFuture.addListener}\n", "   * documentation.\n"], "16": ["   * <p>When selecting an executor, note that {@code directExecutor} is\n", "   * dangerous in some cases. See the discussion in the {@link\n", "   * ListenableFuture#addListener ListenableFuture.addListener} documentation.\n"]}, "removed": {"1": ["   * <p>Note: If the derived {@code Future} is slow or heavyweight to create\n", "   * (whether the {@code Future} itself is slow or heavyweight to complete is\n", "   * irrelevant), consider {@linkplain #withFallback(ListenableFuture,\n", "   * FutureFallback, Executor) supplying an executor}. If you do not supply an\n", "   * executor, {@code withFallback} will use a\n", "   * {@linkplain MoreExecutors#directExecutor direct executor}, which carries\n", "   * some caveats for heavier operations. For example, the call to {@code\n", "   * fallback.create} may run on an unpredictable or undesirable thread:\n", "   *\n", "   * <ul>\n", "   * <li>If the input {@code Future} is done at the time {@code withFallback}\n", "   * is called, {@code withFallback} will call {@code fallback.create} inline.\n", "   * <li>If the input {@code Future} is not yet done, {@code withFallback} will\n", "   * schedule {@code fallback.create} to be run by the thread that completes\n", "   * the input {@code Future}, which may be an internal system thread such as\n", "   * an RPC network thread.\n", "   * </ul>\n", "   *\n", "   * <p>Also note that, regardless of which thread executes {@code\n", "   * fallback.create}, all other registered but unexecuted listeners are\n", "   * prevented from running during its execution, even if those listeners are\n", "   * to run in other executors.\n"], "2": ["   * <p>When the execution of {@code fallback.create} is fast and lightweight\n", "   * (though the {@code Future} it returns need not meet these criteria),\n", "   * consider {@linkplain #withFallback(ListenableFuture, FutureFallback)\n", "   * omitting the executor} or explicitly specifying {@code\n", "   * directExecutor}. However, be aware of the caveats documented in the\n", "   * link above.\n"], "3": ["   * <p>Note: If the derived {@code fallback} is slow or heavyweight, consider {@linkplain\n", "   * #catching(ListenableFuture, Class, Function, Executor) supplying an executor}. If you do not\n", "   * supply an executor, {@code catching} will use a {@linkplain MoreExecutors#directExecutor direct\n", "   * executor}, which carries some caveats for heavier operations. For example, the call to {@code\n", "   * fallback.apply} may run on an unpredictable or undesirable thread:\n", "   *\n", "   * <ul>\n", "   * <li>If the input {@code Future} is done at the time {@code catching} is called, {@code\n", "   * catching} will call {@code fallback.apply} inline.\n", "   * <li>If the input {@code Future} is not yet done, {@code catching} will schedule {@code\n", "   * fallback.apply} to be run by the thread that completes the input {@code Future}, which may be\n", "   * an internal system thread such as an RPC network thread.\n", "   * </ul>\n", "   *\n", "   * <p>Also note that, regardless of which thread executes {@code fallback.apply}, all other\n", "   * registered but unexecuted listeners are prevented from running during its execution, even if\n", "   * those listeners are to run in other executors.\n"], "4": ["   * <p>When the execution of {@code fallback.apply} is fast and lightweight, consider {@linkplain\n", "   * #catching(ListenableFuture, Class, Function) omitting the executor} or explicitly specifying\n", "   * {@link MoreExecutors#directExecutor() directExecutor()}. However, be aware of the caveats\n", "   * documented in the link above.\n"], "5": ["   * <p>Note: If the derived {@code fallback} is slow or heavyweight in <i>creating</i> its {@code\n", "   * Future} (whether that derived {@code Future} itself is slow or heavyweight in <i>completing</i>\n", "   * is irrelevant), consider {@linkplain #catchingAsync(ListenableFuture, Class, AsyncFunction,\n", "   * Executor) supplying an executor}. If you do not supply an executor, {@code catchingAsync} will\n", "   * use a {@linkplain MoreExecutors#directExecutor direct executor}, which carries some caveats for\n", "   * heavier operations. For example, the call to {@code fallback.apply} may run on an unpredictable\n", "   * or undesirable thread:\n", "   *\n", "   * <ul>\n", "   * <li>If the input {@code Future} is done at the time {@code catchingAsync} is called, {@code\n", "   * catchingAsync} will call {@code fallback.apply} inline.\n", "   * <li>If the input {@code Future} is not yet done, {@code catchingAsync} will schedule {@code\n", "   * fallback.apply} to be run by the thread that completes the input {@code Future}, which may be\n", "   * an internal system thread such as an RPC network thread.\n", "   * </ul>\n", "   *\n", "   * <p>Also note that, regardless of which thread executes {@code fallback.apply}, all other\n", "   * registered but unexecuted listeners are prevented from running during its execution, even if\n", "   * those listeners are to run in other executors.\n"], "6": ["   * <p>When the execution of {@code fallback.apply} is fast and lightweight (though the {@code\n", "   * Future} it returns need not meet these criteria), consider {@linkplain\n", "   * #catchingAsync(ListenableFuture, Class, AsyncFunction) omitting the executor} or explicitly\n", "   * specifying {@link MoreExecutors#directExecutor() directExecutor()}. However, be aware of the\n", "   * caveats documented in the link above.\n"], "7": ["   * <p>Note: If the derived {@code Future} is slow or heavyweight to create\n", "   * (whether the {@code Future} itself is slow or heavyweight to complete is\n", "   * irrelevant), consider {@linkplain #transform(ListenableFuture,\n", "   * AsyncFunction, Executor) supplying an executor}. If you do not supply an\n", "   * executor, {@code transform} will use a\n", "   * {@linkplain MoreExecutors#directExecutor direct executor}, which carries\n", "   * some caveats for heavier operations. For example, the call to {@code\n", "   * function.apply} may run on an unpredictable or undesirable thread:\n", "   *\n", "   * <ul>\n", "   * <li>If the input {@code Future} is done at the time {@code transform} is\n", "   * called, {@code transform} will call {@code function.apply} inline.\n", "   * <li>If the input {@code Future} is not yet done, {@code transform} will\n", "   * schedule {@code function.apply} to be run by the thread that completes the\n", "   * input {@code Future}, which may be an internal system thread such as an\n", "   * RPC network thread.\n", "   * </ul>\n", "   *\n", "   * <p>Also note that, regardless of which thread executes {@code\n", "   * function.apply}, all other registered but unexecuted listeners are\n", "   * prevented from running during its execution, even if those listeners are\n", "   * to run in other executors.\n"], "9": ["   * <p>When the execution of {@code function.apply} is fast and lightweight\n", "   * (though the {@code Future} it returns need not meet these criteria),\n", "   * consider {@linkplain #transform(ListenableFuture, AsyncFunction) omitting\n", "   * the executor} or explicitly specifying {@code directExecutor}.\n", "   * However, be aware of the caveats documented in the link above.\n", "   *\n"], "10": ["   * <p>Note: If the derived {@code Future} is slow or heavyweight to create (whether the {@code\n", "   * Future} itself is slow or heavyweight to complete is irrelevant), consider {@linkplain\n", "   * #transformAsync(ListenableFuture, AsyncFunction, Executor) supplying an executor}. If you do\n", "   * not supply an executor, {@code transformAsync} will use a {@linkplain\n", "   * MoreExecutors#directExecutor direct executor}, which carries some caveats for heavier\n", "   * operations. For example, the call to {@code function.apply} may run on an unpredictable or\n", "   * undesirable thread:\n", "   *\n", "   * <ul>\n", "   * <li>If the input {@code Future} is done at the time {@code transformAsync} is called, {@code\n", "   * transformAsync} will call {@code function.apply} inline.\n", "   * <li>If the input {@code Future} is not yet done, {@code transformAsync} will schedule {@code\n", "   * function.apply} to be run by the thread that completes the input {@code Future}, which may be\n", "   * an internal system thread such as an RPC network thread.\n", "   * </ul>\n", "   *\n", "   * <p>Also note that, regardless of which thread executes {@code function.apply}, all other\n", "   * registered but unexecuted listeners are prevented from running during its execution, even if\n", "   * those listeners are to run in other executors.\n"], "11": ["   * <p>When the execution of {@code function.apply} is fast and lightweight (though the {@code\n", "   * Future} it returns need not meet these criteria), consider {@linkplain\n", "   * #transformAsync(ListenableFuture, AsyncFunction) omitting the executor} or explicitly\n", "   * specifying {@code directExecutor}. However, be aware of the caveats documented in the link\n", "   * above.\n", "   *\n"], "12": ["   * <p>Note: If the transformation is slow or heavyweight, consider {@linkplain\n", "   * #transform(ListenableFuture, Function, Executor) supplying an executor}.\n", "   * If you do not supply an executor, {@code transform} will use an inline\n", "   * executor, which carries some caveats for heavier operations.  For example,\n", "   * the call to {@code function.apply} may run on an unpredictable or\n", "   * undesirable thread:\n", "   *\n", "   * <ul>\n", "   * <li>If the input {@code Future} is done at the time {@code transform} is\n", "   * called, {@code transform} will call {@code function.apply} inline.\n", "   * <li>If the input {@code Future} is not yet done, {@code transform} will\n", "   * schedule {@code function.apply} to be run by the thread that completes the\n", "   * input {@code Future}, which may be an internal system thread such as an\n", "   * RPC network thread.\n", "   * </ul>\n", "   *\n", "   * <p>Also note that, regardless of which thread executes {@code\n", "   * function.apply}, all other registered but unexecuted listeners are\n", "   * prevented from running during its execution, even if those listeners are\n", "   * to run in other executors.\n"], "14": ["   * <p>When the transformation is fast and lightweight, consider {@linkplain\n", "   * #transform(ListenableFuture, Function) omitting the executor} or\n", "   * explicitly specifying {@code directExecutor}. However, be aware of the\n", "   * caveats documented in the link above.\n", "   *\n"], "15": ["   * <p>Note: If the callback is slow or heavyweight, consider {@linkplain\n", "   * #addCallback(ListenableFuture, FutureCallback, Executor) supplying an\n", "   * executor}. If you do not supply an executor, {@code addCallback} will use\n", "   * a {@linkplain MoreExecutors#directExecutor direct executor}, which carries\n", "   * some caveats for heavier operations. For example, the callback may run on\n", "   * an unpredictable or undesirable thread:\n", "   *\n", "   * <ul>\n", "   * <li>If the input {@code Future} is done at the time {@code addCallback} is\n", "   * called, {@code addCallback} will execute the callback inline.\n", "   * <li>If the input {@code Future} is not yet done, {@code addCallback} will\n", "   * schedule the callback to be run by the thread that completes the input\n", "   * {@code Future}, which may be an internal system thread such as an RPC\n", "   * network thread.\n", "   * </ul>\n", "   *\n", "   * <p>Also note that, regardless of which thread executes the callback, all\n", "   * other registered but unexecuted listeners are prevented from running\n", "   * during its execution, even if those listeners are to run in other\n", "   * executors.\n"], "16": ["   * <p>When the callback is fast and lightweight, consider {@linkplain\n", "   * #addCallback(ListenableFuture, FutureCallback) omitting the executor} or\n", "   * explicitly specifying {@code directExecutor}. However, be aware of the\n", "   * caveats documented in the link above.\n"]}, "added_lines": {"1": [415, 416, 417, 418, 419, 420], "2": [484, 485, 486, 487, 488, 489], "3": [535, 536, 537, 538], "4": [581, 582, 583, 584], "5": [647, 648, 649, 650, 651], "6": [714, 715, 716, 717, 718], "7": [988, 989, 990, 991, 992, 993], "8": [1037, 1038, 1039, 1040, 1041, 1042, 1043], "10": [1087, 1088, 1089, 1090, 1091], "11": [1130, 1131, 1132, 1133, 1134, 1135], "12": [1209, 1210, 1211, 1212, 1213], "13": [1255, 1256, 1257, 1258, 1259, 1260], "15": [1700, 1701, 1702, 1703], "16": [1740, 1741, 1742]}, "removed_lines": {"1": [415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436], "2": [500, 501, 502, 503, 504, 505], "3": [551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "4": [610, 611, 612, 613], "5": [676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694], "6": [757, 758, 759, 760, 761], "7": [1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "9": [1103, 1104, 1105, 1106, 1107, 1108], "10": [1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163], "11": [1208, 1209, 1210, 1211, 1212, 1213], "12": [1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300], "14": [1351, 1352, 1353, 1354, 1355], "15": [1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805], "16": [1842, 1843, 1844, 1845]}}]}
