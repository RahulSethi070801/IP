{
    "addition": {
        "415": "   * <p>This overload, which does not accept an executor, uses {@code\n",
        "416": "   * directExecutor}, a dangerous choice in some cases. See the discussion in\n",
        "417": "   * the {@link ListenableFuture#addListener ListenableFuture.addListener}\n",
        "418": "   * documentation. The documentation's warnings about \"lightweight listeners\"\n",
        "419": "   * refer here to the work done during {@code FutureFallback.create}, not to\n",
        "420": "   * any work done to complete the returned {@code Future}.\n",
        "484": "   * <p>When selecting an executor, note that {@code directExecutor} is\n",
        "485": "   * dangerous in some cases. See the discussion in the {@link\n",
        "486": "   * ListenableFuture#addListener ListenableFuture.addListener} documentation.\n",
        "487": "   * The documentation's warnings about \"lightweight listeners\" refer here to\n",
        "488": "   * the work done during {@code FutureFallback.create}, not to any work done to\n",
        "489": "   * complete the returned {@code Future}.\n",
        "535": "   * <p>This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous\n",
        "536": "   * choice in some cases. See the discussion in the {@link ListenableFuture#addListener\n",
        "537": "   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n",
        "538": "   * listeners\" refer here to the work done during {@code Function.apply}.\n",
        "581": "   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n",
        "582": "   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}\n",
        "583": "   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n",
        "584": "   * work done during {@code Function.apply}.\n",
        "647": "   * <p>This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous\n",
        "648": "   * choice in some cases. See the discussion in the {@link ListenableFuture#addListener\n",
        "649": "   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n",
        "650": "   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n",
        "651": "   * to complete the returned {@code Future}.\n",
        "714": "   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n",
        "715": "   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}\n",
        "716": "   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n",
        "717": "   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n",
        "718": "   * {@code Future}.\n",
        "988": "   * <p>This overload, which does not accept an executor, uses {@code\n",
        "989": "   * directExecutor}, a dangerous choice in some cases. See the discussion in\n",
        "990": "   * the {@link ListenableFuture#addListener ListenableFuture.addListener}\n",
        "991": "   * documentation. The documentation's warnings about \"lightweight listeners\"\n",
        "992": "   * refer here to the work done during {@code AsyncFunction.apply}, not to any\n",
        "993": "   * work done to complete the returned {@code Future}.\n",
        "1037": "   * <p>When selecting an executor, note that {@code directExecutor} is\n",
        "1038": "   * dangerous in some cases. See the discussion in the {@link\n",
        "1039": "   * ListenableFuture#addListener ListenableFuture.addListener} documentation.\n",
        "1040": "   * The documentation's warnings about \"lightweight listeners\" refer here to\n",
        "1041": "   * the work done during {@code AsyncFunction.apply}, not to any work done to\n",
        "1042": "   * complete the returned {@code Future}.\n",
        "1043": "   *\n",
        "1087": "   * <p>This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous\n",
        "1088": "   * choice in some cases. See the discussion in the {@link ListenableFuture#addListener\n",
        "1089": "   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n",
        "1090": "   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n",
        "1091": "   * to complete the returned {@code Future}.\n",
        "1130": "   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n",
        "1131": "   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}\n",
        "1132": "   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n",
        "1133": "   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n",
        "1134": "   * {@code Future}.\n",
        "1135": "   *\n",
        "1209": "   * <p>This overload, which does not accept an executor, uses {@code\n",
        "1210": "   * directExecutor}, a dangerous choice in some cases. See the discussion in\n",
        "1211": "   * the {@link ListenableFuture#addListener ListenableFuture.addListener}\n",
        "1212": "   * documentation. The documentation's warnings about \"lightweight listeners\"\n",
        "1213": "   * refer here to the work done during {@code Function.apply}.\n",
        "1255": "   * <p>When selecting an executor, note that {@code directExecutor} is\n",
        "1256": "   * dangerous in some cases. See the discussion in the {@link\n",
        "1257": "   * ListenableFuture#addListener ListenableFuture.addListener} documentation.\n",
        "1258": "   * The documentation's warnings about \"lightweight listeners\" refer here to\n",
        "1259": "   * the work done during {@code Function.apply}.\n",
        "1260": "   *\n",
        "1700": "   * <p>This overload, which does not accept an executor, uses {@code\n",
        "1701": "   * directExecutor}, a dangerous choice in some cases. See the discussion in\n",
        "1702": "   * the {@link ListenableFuture#addListener ListenableFuture.addListener}\n",
        "1703": "   * documentation.\n",
        "1740": "   * <p>When selecting an executor, note that {@code directExecutor} is\n",
        "1741": "   * dangerous in some cases. See the discussion in the {@link\n",
        "1742": "   * ListenableFuture#addListener ListenableFuture.addListener} documentation.\n"
    },
    "removed": {
        "415": "   * <p>Note: If the derived {@code Future} is slow or heavyweight to create\n",
        "416": "   * (whether the {@code Future} itself is slow or heavyweight to complete is\n",
        "417": "   * irrelevant), consider {@linkplain #withFallback(ListenableFuture,\n",
        "418": "   * FutureFallback, Executor) supplying an executor}. If you do not supply an\n",
        "419": "   * executor, {@code withFallback} will use a\n",
        "420": "   * {@linkplain MoreExecutors#directExecutor direct executor}, which carries\n",
        "421": "   * some caveats for heavier operations. For example, the call to {@code\n",
        "422": "   * fallback.create} may run on an unpredictable or undesirable thread:\n",
        "423": "   *\n",
        "424": "   * <ul>\n",
        "425": "   * <li>If the input {@code Future} is done at the time {@code withFallback}\n",
        "426": "   * is called, {@code withFallback} will call {@code fallback.create} inline.\n",
        "427": "   * <li>If the input {@code Future} is not yet done, {@code withFallback} will\n",
        "428": "   * schedule {@code fallback.create} to be run by the thread that completes\n",
        "429": "   * the input {@code Future}, which may be an internal system thread such as\n",
        "430": "   * an RPC network thread.\n",
        "431": "   * </ul>\n",
        "432": "   *\n",
        "433": "   * <p>Also note that, regardless of which thread executes {@code\n",
        "434": "   * fallback.create}, all other registered but unexecuted listeners are\n",
        "435": "   * prevented from running during its execution, even if those listeners are\n",
        "436": "   * to run in other executors.\n",
        "500": "   * <p>When the execution of {@code fallback.create} is fast and lightweight\n",
        "501": "   * (though the {@code Future} it returns need not meet these criteria),\n",
        "502": "   * consider {@linkplain #withFallback(ListenableFuture, FutureFallback)\n",
        "503": "   * omitting the executor} or explicitly specifying {@code\n",
        "504": "   * directExecutor}. However, be aware of the caveats documented in the\n",
        "505": "   * link above.\n",
        "551": "   * <p>Note: If the derived {@code fallback} is slow or heavyweight, consider {@linkplain\n",
        "552": "   * #catching(ListenableFuture, Class, Function, Executor) supplying an executor}. If you do not\n",
        "553": "   * supply an executor, {@code catching} will use a {@linkplain MoreExecutors#directExecutor direct\n",
        "554": "   * executor}, which carries some caveats for heavier operations. For example, the call to {@code\n",
        "555": "   * fallback.apply} may run on an unpredictable or undesirable thread:\n",
        "556": "   *\n",
        "557": "   * <ul>\n",
        "558": "   * <li>If the input {@code Future} is done at the time {@code catching} is called, {@code\n",
        "559": "   * catching} will call {@code fallback.apply} inline.\n",
        "560": "   * <li>If the input {@code Future} is not yet done, {@code catching} will schedule {@code\n",
        "561": "   * fallback.apply} to be run by the thread that completes the input {@code Future}, which may be\n",
        "562": "   * an internal system thread such as an RPC network thread.\n",
        "563": "   * </ul>\n",
        "564": "   *\n",
        "565": "   * <p>Also note that, regardless of which thread executes {@code fallback.apply}, all other\n",
        "566": "   * registered but unexecuted listeners are prevented from running during its execution, even if\n",
        "567": "   * those listeners are to run in other executors.\n",
        "610": "   * <p>When the execution of {@code fallback.apply} is fast and lightweight, consider {@linkplain\n",
        "611": "   * #catching(ListenableFuture, Class, Function) omitting the executor} or explicitly specifying\n",
        "612": "   * {@link MoreExecutors#directExecutor() directExecutor()}. However, be aware of the caveats\n",
        "613": "   * documented in the link above.\n",
        "676": "   * <p>Note: If the derived {@code fallback} is slow or heavyweight in <i>creating</i> its {@code\n",
        "677": "   * Future} (whether that derived {@code Future} itself is slow or heavyweight in <i>completing</i>\n",
        "678": "   * is irrelevant), consider {@linkplain #catchingAsync(ListenableFuture, Class, AsyncFunction,\n",
        "679": "   * Executor) supplying an executor}. If you do not supply an executor, {@code catchingAsync} will\n",
        "680": "   * use a {@linkplain MoreExecutors#directExecutor direct executor}, which carries some caveats for\n",
        "681": "   * heavier operations. For example, the call to {@code fallback.apply} may run on an unpredictable\n",
        "682": "   * or undesirable thread:\n",
        "683": "   *\n",
        "684": "   * <ul>\n",
        "685": "   * <li>If the input {@code Future} is done at the time {@code catchingAsync} is called, {@code\n",
        "686": "   * catchingAsync} will call {@code fallback.apply} inline.\n",
        "687": "   * <li>If the input {@code Future} is not yet done, {@code catchingAsync} will schedule {@code\n",
        "688": "   * fallback.apply} to be run by the thread that completes the input {@code Future}, which may be\n",
        "689": "   * an internal system thread such as an RPC network thread.\n",
        "690": "   * </ul>\n",
        "691": "   *\n",
        "692": "   * <p>Also note that, regardless of which thread executes {@code fallback.apply}, all other\n",
        "693": "   * registered but unexecuted listeners are prevented from running during its execution, even if\n",
        "694": "   * those listeners are to run in other executors.\n",
        "757": "   * <p>When the execution of {@code fallback.apply} is fast and lightweight (though the {@code\n",
        "758": "   * Future} it returns need not meet these criteria), consider {@linkplain\n",
        "759": "   * #catchingAsync(ListenableFuture, Class, AsyncFunction) omitting the executor} or explicitly\n",
        "760": "   * specifying {@link MoreExecutors#directExecutor() directExecutor()}. However, be aware of the\n",
        "761": "   * caveats documented in the link above.\n",
        "1031": "   * <p>Note: If the derived {@code Future} is slow or heavyweight to create\n",
        "1032": "   * (whether the {@code Future} itself is slow or heavyweight to complete is\n",
        "1033": "   * irrelevant), consider {@linkplain #transform(ListenableFuture,\n",
        "1034": "   * AsyncFunction, Executor) supplying an executor}. If you do not supply an\n",
        "1035": "   * executor, {@code transform} will use a\n",
        "1036": "   * {@linkplain MoreExecutors#directExecutor direct executor}, which carries\n",
        "1037": "   * some caveats for heavier operations. For example, the call to {@code\n",
        "1038": "   * function.apply} may run on an unpredictable or undesirable thread:\n",
        "1039": "   *\n",
        "1040": "   * <ul>\n",
        "1041": "   * <li>If the input {@code Future} is done at the time {@code transform} is\n",
        "1042": "   * called, {@code transform} will call {@code function.apply} inline.\n",
        "1043": "   * <li>If the input {@code Future} is not yet done, {@code transform} will\n",
        "1044": "   * schedule {@code function.apply} to be run by the thread that completes the\n",
        "1045": "   * input {@code Future}, which may be an internal system thread such as an\n",
        "1046": "   * RPC network thread.\n",
        "1047": "   * </ul>\n",
        "1048": "   *\n",
        "1049": "   * <p>Also note that, regardless of which thread executes {@code\n",
        "1050": "   * function.apply}, all other registered but unexecuted listeners are\n",
        "1051": "   * prevented from running during its execution, even if those listeners are\n",
        "1052": "   * to run in other executors.\n",
        "1103": "   * <p>When the execution of {@code function.apply} is fast and lightweight\n",
        "1104": "   * (though the {@code Future} it returns need not meet these criteria),\n",
        "1105": "   * consider {@linkplain #transform(ListenableFuture, AsyncFunction) omitting\n",
        "1106": "   * the executor} or explicitly specifying {@code directExecutor}.\n",
        "1107": "   * However, be aware of the caveats documented in the link above.\n",
        "1108": "   *\n",
        "1145": "   * <p>Note: If the derived {@code Future} is slow or heavyweight to create (whether the {@code\n",
        "1146": "   * Future} itself is slow or heavyweight to complete is irrelevant), consider {@linkplain\n",
        "1147": "   * #transformAsync(ListenableFuture, AsyncFunction, Executor) supplying an executor}. If you do\n",
        "1148": "   * not supply an executor, {@code transformAsync} will use a {@linkplain\n",
        "1149": "   * MoreExecutors#directExecutor direct executor}, which carries some caveats for heavier\n",
        "1150": "   * operations. For example, the call to {@code function.apply} may run on an unpredictable or\n",
        "1151": "   * undesirable thread:\n",
        "1152": "   *\n",
        "1153": "   * <ul>\n",
        "1154": "   * <li>If the input {@code Future} is done at the time {@code transformAsync} is called, {@code\n",
        "1155": "   * transformAsync} will call {@code function.apply} inline.\n",
        "1156": "   * <li>If the input {@code Future} is not yet done, {@code transformAsync} will schedule {@code\n",
        "1157": "   * function.apply} to be run by the thread that completes the input {@code Future}, which may be\n",
        "1158": "   * an internal system thread such as an RPC network thread.\n",
        "1159": "   * </ul>\n",
        "1160": "   *\n",
        "1161": "   * <p>Also note that, regardless of which thread executes {@code function.apply}, all other\n",
        "1162": "   * registered but unexecuted listeners are prevented from running during its execution, even if\n",
        "1163": "   * those listeners are to run in other executors.\n",
        "1208": "   * <p>When the execution of {@code function.apply} is fast and lightweight (though the {@code\n",
        "1209": "   * Future} it returns need not meet these criteria), consider {@linkplain\n",
        "1210": "   * #transformAsync(ListenableFuture, AsyncFunction) omitting the executor} or explicitly\n",
        "1211": "   * specifying {@code directExecutor}. However, be aware of the caveats documented in the link\n",
        "1212": "   * above.\n",
        "1213": "   *\n",
        "1281": "   * <p>Note: If the transformation is slow or heavyweight, consider {@linkplain\n",
        "1282": "   * #transform(ListenableFuture, Function, Executor) supplying an executor}.\n",
        "1283": "   * If you do not supply an executor, {@code transform} will use an inline\n",
        "1284": "   * executor, which carries some caveats for heavier operations.  For example,\n",
        "1285": "   * the call to {@code function.apply} may run on an unpredictable or\n",
        "1286": "   * undesirable thread:\n",
        "1287": "   *\n",
        "1288": "   * <ul>\n",
        "1289": "   * <li>If the input {@code Future} is done at the time {@code transform} is\n",
        "1290": "   * called, {@code transform} will call {@code function.apply} inline.\n",
        "1291": "   * <li>If the input {@code Future} is not yet done, {@code transform} will\n",
        "1292": "   * schedule {@code function.apply} to be run by the thread that completes the\n",
        "1293": "   * input {@code Future}, which may be an internal system thread such as an\n",
        "1294": "   * RPC network thread.\n",
        "1295": "   * </ul>\n",
        "1296": "   *\n",
        "1297": "   * <p>Also note that, regardless of which thread executes {@code\n",
        "1298": "   * function.apply}, all other registered but unexecuted listeners are\n",
        "1299": "   * prevented from running during its execution, even if those listeners are\n",
        "1300": "   * to run in other executors.\n",
        "1351": "   * <p>When the transformation is fast and lightweight, consider {@linkplain\n",
        "1352": "   * #transform(ListenableFuture, Function) omitting the executor} or\n",
        "1353": "   * explicitly specifying {@code directExecutor}. However, be aware of the\n",
        "1354": "   * caveats documented in the link above.\n",
        "1355": "   *\n",
        "1786": "   * <p>Note: If the callback is slow or heavyweight, consider {@linkplain\n",
        "1787": "   * #addCallback(ListenableFuture, FutureCallback, Executor) supplying an\n",
        "1788": "   * executor}. If you do not supply an executor, {@code addCallback} will use\n",
        "1789": "   * a {@linkplain MoreExecutors#directExecutor direct executor}, which carries\n",
        "1790": "   * some caveats for heavier operations. For example, the callback may run on\n",
        "1791": "   * an unpredictable or undesirable thread:\n",
        "1792": "   *\n",
        "1793": "   * <ul>\n",
        "1794": "   * <li>If the input {@code Future} is done at the time {@code addCallback} is\n",
        "1795": "   * called, {@code addCallback} will execute the callback inline.\n",
        "1796": "   * <li>If the input {@code Future} is not yet done, {@code addCallback} will\n",
        "1797": "   * schedule the callback to be run by the thread that completes the input\n",
        "1798": "   * {@code Future}, which may be an internal system thread such as an RPC\n",
        "1799": "   * network thread.\n",
        "1800": "   * </ul>\n",
        "1801": "   *\n",
        "1802": "   * <p>Also note that, regardless of which thread executes the callback, all\n",
        "1803": "   * other registered but unexecuted listeners are prevented from running\n",
        "1804": "   * during its execution, even if those listeners are to run in other\n",
        "1805": "   * executors.\n",
        "1842": "   * <p>When the callback is fast and lightweight, consider {@linkplain\n",
        "1843": "   * #addCallback(ListenableFuture, FutureCallback) omitting the executor} or\n",
        "1844": "   * explicitly specifying {@code directExecutor}. However, be aware of the\n",
        "1845": "   * caveats documented in the link above.\n"
    }
}