{
    "addition": {
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "31": " * A support class for {@code ListenableFuture} implementations to manage their listeners. An\n",
        "32": " * instance contains a list of listeners, each with an associated {@code Executor}, and guarantees\n",
        "33": " * that every {@code Runnable} that is {@linkplain #add added} will be executed after {@link\n",
        "34": " * #execute()} is called. Any {@code Runnable} added after the call to {@code execute} is still\n",
        "35": " * guaranteed to execute. There is no guarantee, however, that listeners will be executed in the\n",
        "36": " * order that they are added.\n",
        "38": " * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n",
        "39": " * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n",
        "40": " * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and logged.\n",
        "51": "   * The runnable, executor pairs to execute.  This acts as a stack threaded through the {@link\n",
        "52": "   * RunnableExecutorPair#next} field.\n",
        "63": "   * Adds the {@code Runnable} and accompanying {@code Executor} to the list of listeners to\n",
        "64": "   * execute. If execution has already begun, the listener is executed immediately.\n",
        "66": "   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n",
        "67": "   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}\n",
        "68": "   * documentation.\n",
        "71": "    // Fail fast on a null.  We throw NPE here because the contract of Executor states that it\n",
        "72": "    // throws NPE on null listener, so we propagate that contract up into the add method as well.\n",
        "73": "    checkNotNull(runnable, \"Runnable was null.\");\n",
        "74": "    checkNotNull(executor, \"Executor was null.\");\n",
        "76": "    // Lock while we check state.  We must maintain the lock while adding the new pair so that\n",
        "77": "    // another thread can't run the list out from under us. We only add to the list if we have not\n",
        "78": "    // yet started execution.\n",
        "85": "    // Execute the runnable immediately. Because of scheduling this may end up getting called before\n",
        "86": "    // some of the previously added runnables, but we're OK with that.  If we want to change the\n",
        "87": "    // contract to guarantee ordering among runnables we'd have to modify the logic here to allow\n",
        "88": "    // it.\n",
        "93": "   * Runs this execution list, executing all existing pairs in the order they were added. However,\n",
        "94": "   * note that listeners added after this point may be executed before those previously added, and\n",
        "95": "   * note that the execution order of all listeners is ultimately chosen by the implementations of\n",
        "96": "   * the supplied executors.\n",
        "98": "   * <p>This method is idempotent. Calling it several times in parallel is semantically equivalent\n",
        "99": "   * to calling it exactly once.\n",
        "104": "    // Lock while we update our state so the add method above will finish adding any listeners\n",
        "105": "    // before we start to run them.\n",
        "138": "   * Submits the given runnable to the given {@link Executor} catching and logging all {@linkplain\n",
        "139": "   * RuntimeException runtime exceptions} thrown by the executor.\n",
        "145": "      // Log it and keep going, bad runnable and/or executor.  Don't punish the other runnables if\n",
        "146": "      // we're given a bad one.  We only catch RuntimeException because we want Errors to propagate\n",
        "147": "      // up.\n"
    },
    "removed": {
        "20": "import com.google.common.base.Preconditions;\n",
        "30": " * <p>A list of listeners, each with an associated {@code Executor}, that\n",
        "31": " * guarantees that every {@code Runnable} that is {@linkplain #add added} will\n",
        "32": " * be executed after {@link #execute()} is called. Any {@code Runnable} added\n",
        "33": " * after the call to {@code execute} is still guaranteed to execute. There is no\n",
        "34": " * guarantee, however, that listeners will be executed in the order that they\n",
        "35": " * are added.\n",
        "37": " * <p>Exceptions thrown by a listener will be propagated up to the executor.\n",
        "38": " * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n",
        "39": " * RejectedExecutionException} or an exception thrown by {@linkplain\n",
        "40": " * MoreExecutors#directExecutor direct execution}) will be caught and\n",
        "41": " * logged.\n",
        "52": "   * The runnable, executor pairs to execute.  This acts as a stack threaded through the \n",
        "53": "   * {@link RunnableExecutorPair#next} field.\n",
        "64": "   * Adds the {@code Runnable} and accompanying {@code Executor} to the list of\n",
        "65": "   * listeners to execute. If execution has already begun, the listener is\n",
        "66": "   * executed immediately.\n",
        "68": "   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n",
        "69": "   * any thread, consider {@link MoreExecutors#directExecutor}. For heavier\n",
        "70": "   * listeners, {@code directExecutor()} carries some caveats: First, the\n",
        "71": "   * thread that the listener runs in depends on whether the {@code\n",
        "72": "   * ExecutionList} has been executed at the time it is added. In particular,\n",
        "73": "   * listeners may run in the thread that calls {@code add}. Second, the thread\n",
        "74": "   * that calls {@link #execute} may be an internal implementation thread, such\n",
        "75": "   * as an RPC network thread, and {@code directExecutor()} listeners may\n",
        "76": "   * run in this thread. Finally, during the execution of a {@code\n",
        "77": "   * directExecutor} listener, all other registered but unexecuted\n",
        "78": "   * listeners are prevented from running, even if those listeners are to run\n",
        "79": "   * in other executors.\n",
        "82": "    // Fail fast on a null.  We throw NPE here because the contract of\n",
        "83": "    // Executor states that it throws NPE on null listener, so we propagate\n",
        "84": "    // that contract up into the add method as well.\n",
        "85": "    Preconditions.checkNotNull(runnable, \"Runnable was null.\");\n",
        "86": "    Preconditions.checkNotNull(executor, \"Executor was null.\");\n",
        "88": "    // Lock while we check state.  We must maintain the lock while adding the\n",
        "89": "    // new pair so that another thread can't run the list out from under us.\n",
        "90": "    // We only add to the list if we have not yet started execution.\n",
        "97": "    // Execute the runnable immediately. Because of scheduling this may end up\n",
        "98": "    // getting called before some of the previously added runnables, but we're\n",
        "99": "    // OK with that.  If we want to change the contract to guarantee ordering\n",
        "100": "    // among runnables we'd have to modify the logic here to allow it.\n",
        "105": "   * Runs this execution list, executing all existing pairs in the order they\n",
        "106": "   * were added. However, note that listeners added after this point may be\n",
        "107": "   * executed before those previously added, and note that the execution order\n",
        "108": "   * of all listeners is ultimately chosen by the implementations of the\n",
        "109": "   * supplied executors.\n",
        "111": "   * <p>This method is idempotent. Calling it several times in parallel is\n",
        "112": "   * semantically equivalent to calling it exactly once.\n",
        "117": "    // Lock while we update our state so the add method above will finish adding\n",
        "118": "    // any listeners before we start to run them.\n",
        "151": "   * Submits the given runnable to the given {@link Executor} catching and logging all \n",
        "152": "   * {@linkplain RuntimeException runtime exceptions} thrown by the executor.\n",
        "158": "      // Log it and keep going, bad runnable and/or executor.  Don't\n",
        "159": "      // punish the other runnables if we're given a bad one.  We only\n",
        "160": "      // catch RuntimeException because we want Errors to propagate up.\n"
    }
}