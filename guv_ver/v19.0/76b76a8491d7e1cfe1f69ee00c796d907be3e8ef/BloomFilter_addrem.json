{
    "addition": {
        "298": "  public static <T> BloomFilter<T> create(\n",
        "299": "      Funnel<? super T> funnel, int expectedInsertions, double fpp) {\n",
        "300": "    return create(funnel, (long) expectedInsertions, fpp);\n",
        "301": "  }\n",
        "302": "\n",
        "303": "  /**\n",
        "304": "   * Creates a {@link BloomFilter BloomFilter<T>} with the expected number of\n",
        "305": "   * insertions and expected false positive probability.\n",
        "306": "   *\n",
        "307": "   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements\n",
        "308": "   * than specified, will result in its saturation, and a sharp deterioration of its\n",
        "309": "   * false positive probability.\n",
        "310": "   *\n",
        "311": "   * <p>The constructed {@code BloomFilter<T>} will be serializable if the provided\n",
        "312": "   * {@code Funnel<T>} is.\n",
        "313": "   *\n",
        "314": "   * <p>It is recommended that the funnel be implemented as a Java enum. This has the\n",
        "315": "   * benefit of ensuring proper serialization and deserialization, which is important\n",
        "316": "   * since {@link #equals} also relies on object identity of funnels.\n",
        "317": "   *\n",
        "318": "   * @param funnel the funnel of T's that the constructed {@code BloomFilter<T>} will use\n",
        "319": "   * @param expectedInsertions the number of expected insertions to the constructed\n",
        "320": "   *     {@code BloomFilter<T>}; must be positive\n",
        "321": "   * @param fpp the desired false positive probability (must be positive and less than 1.0)\n",
        "322": "   * @return a {@code BloomFilter}\n",
        "323": "   * @since 19.0\n",
        "324": "   */\n",
        "325": "  @CheckReturnValue\n",
        "370": "   * <p>It is recommended that the funnel be implemented as a Java enum. This has the\n",
        "371": "   * benefit of ensuring proper serialization and deserialization, which is important\n",
        "372": "   * since {@link #equals} also relies on object identity of funnels.\n",
        "373": "   *\n",
        "374": "   * @param funnel the funnel of T's that the constructed {@code BloomFilter<T>} will use\n",
        "375": "   * @param expectedInsertions the number of expected insertions to the constructed\n",
        "376": "   *     {@code BloomFilter<T>}; must be positive\n",
        "377": "   * @return a {@code BloomFilter}\n",
        "378": "   */\n",
        "379": "  @CheckReturnValue\n",
        "380": "  public static <T> BloomFilter<T> create(Funnel<? super T> funnel, int expectedInsertions) {\n",
        "381": "    return create(funnel, (long) expectedInsertions);\n",
        "382": "  }\n",
        "383": "\n",
        "384": "  /**\n",
        "385": "   * Creates a {@link BloomFilter BloomFilter<T>} with the expected number of\n",
        "386": "   * insertions and a default expected false positive probability of 3%.\n",
        "387": "   *\n",
        "388": "   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements\n",
        "389": "   * than specified, will result in its saturation, and a sharp deterioration of its\n",
        "390": "   * false positive probability.\n",
        "391": "   *\n",
        "392": "   * <p>The constructed {@code BloomFilter<T>} will be serializable if the provided\n",
        "393": "   * {@code Funnel<T>} is.\n",
        "394": "   *\n",
        "395": "   * <p>It is recommended that the funnel be implemented as a Java enum. This has the\n",
        "396": "   * benefit of ensuring proper serialization and deserialization, which is important\n",
        "397": "   * since {@link #equals} also relies on object identity of funnels.\n",
        "398": "   *\n",
        "403": "   * @since 19.0\n"
    },
    "removed": {}
}