{"id": "76b76a8491d7e1cfe1f69ee00c796d907be3e8ef", "code": [{"0": "guava/src/com/google/common/hash/BloomFilter.java", "added": {"1": ["  public static <T> BloomFilter<T> create(\n", "      Funnel<? super T> funnel, int expectedInsertions, double fpp) {\n", "    return create(funnel, (long) expectedInsertions, fpp);\n", "  }\n", "\n", "  /**\n", "   * Creates a {@link BloomFilter BloomFilter<T>} with the expected number of\n", "   * insertions and expected false positive probability.\n", "   *\n", "   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements\n", "   * than specified, will result in its saturation, and a sharp deterioration of its\n", "   * false positive probability.\n", "   *\n", "   * <p>The constructed {@code BloomFilter<T>} will be serializable if the provided\n", "   * {@code Funnel<T>} is.\n", "   *\n", "   * <p>It is recommended that the funnel be implemented as a Java enum. This has the\n", "   * benefit of ensuring proper serialization and deserialization, which is important\n", "   * since {@link #equals} also relies on object identity of funnels.\n", "   *\n", "   * @param funnel the funnel of T's that the constructed {@code BloomFilter<T>} will use\n", "   * @param expectedInsertions the number of expected insertions to the constructed\n", "   *     {@code BloomFilter<T>}; must be positive\n", "   * @param fpp the desired false positive probability (must be positive and less than 1.0)\n", "   * @return a {@code BloomFilter}\n", "   * @since 19.0\n", "   */\n", "  @CheckReturnValue\n"], "2": ["   * <p>It is recommended that the funnel be implemented as a Java enum. This has the\n", "   * benefit of ensuring proper serialization and deserialization, which is important\n", "   * since {@link #equals} also relies on object identity of funnels.\n", "   *\n", "   * @param funnel the funnel of T's that the constructed {@code BloomFilter<T>} will use\n", "   * @param expectedInsertions the number of expected insertions to the constructed\n", "   *     {@code BloomFilter<T>}; must be positive\n", "   * @return a {@code BloomFilter}\n", "   */\n", "  @CheckReturnValue\n", "  public static <T> BloomFilter<T> create(Funnel<? super T> funnel, int expectedInsertions) {\n", "    return create(funnel, (long) expectedInsertions);\n", "  }\n", "\n", "  /**\n", "   * Creates a {@link BloomFilter BloomFilter<T>} with the expected number of\n", "   * insertions and a default expected false positive probability of 3%.\n", "   *\n", "   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements\n", "   * than specified, will result in its saturation, and a sharp deterioration of its\n", "   * false positive probability.\n", "   *\n", "   * <p>The constructed {@code BloomFilter<T>} will be serializable if the provided\n", "   * {@code Funnel<T>} is.\n", "   *\n", "   * <p>It is recommended that the funnel be implemented as a Java enum. This has the\n", "   * benefit of ensuring proper serialization and deserialization, which is important\n", "   * since {@link #equals} also relies on object identity of funnels.\n", "   *\n", "   * @since 19.0\n"]}, "removed": {}, "added_lines": {"1": [298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], "2": [370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 403]}, "removed_lines": {}}]}
