{"id": "ac25c5019e61dae7a993562235b8de4fdada0394", "code": [{"0": "guava-tests/test/com/google/common/util/concurrent/GeneratedMonitorTest.java", "added": {"1": ["/*\n", " * Copyright (C) 2014 The Guava Authors\n", " *\n", " * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package com.google.common.util.concurrent;\n", "\n", "import static com.google.common.util.concurrent.Uninterruptibles.awaitUninterruptibly;\n", "\n", "import com.google.common.base.CaseFormat;\n", "import com.google.common.collect.ImmutableList;\n", "import com.google.common.primitives.Ints;\n", "import junit.framework.TestCase;\n", "import junit.framework.TestSuite;\n", "\n", "import java.lang.reflect.InvocationTargetException;\n", "import java.lang.reflect.Method;\n", "import java.util.Arrays;\n", "import java.util.Comparator;\n", "import java.util.concurrent.CountDownLatch;\n", "import java.util.concurrent.FutureTask;\n", "import java.util.concurrent.TimeUnit;\n", "\n", "/**\n", " * Generated tests for {@link Monitor}.\n", " *\n", " * <p>This test class generates all of its own test cases in the {@link #suite()} method. Every\n", " * {@code enterXxx}, {@code tryEnterXxx}, and {@code waitForXxx} method of the {@code Monitor} class\n", " * is analyzed reflectively to determine appropriate test cases based on its signature. Additional\n", " * ad hoc test cases can be found in {@link SupplementalMonitorTest}.\n", " *\n", " * @author Justin T. Sampson\n", " */\n", "\n", "public class GeneratedMonitorTest extends TestCase {\n", "\n", "  public static TestSuite suite() {\n", "    TestSuite suite = new TestSuite();\n", "\n", "    Method[] methods = Monitor.class.getMethods();\n", "    sortMethods(methods);\n", "    for (Method method : methods) {\n", "      if (isAnyEnter(method) || isWaitFor(method)) {\n", "        validateMethod(method);\n", "        addTests(suite, method);\n", "      }\n", "    }\n", "\n", "    assertEquals(548, suite.testCount());\n", "\n", "    return suite;\n", "  }\n", "\n", "  /**\n", "   * A typical timeout value we'll use in the tests.\n", "   */\n", "  private static final long SMALL_TIMEOUT_MILLIS = 10;\n", "\n", "  /**\n", "   * How long to wait when determining that a thread is blocked if we expect it to be blocked.\n", "   */\n", "  private static final long EXPECTED_HANG_DELAY_MILLIS = 75;\n", "\n", "  /**\n", "   * How long to wait when determining that a thread is blocked if we DON'T expect it to be blocked.\n", "   */\n", "  private static final long UNEXPECTED_HANG_DELAY_MILLIS = 10000;\n", "\n", "  /**\n", "   * Various scenarios to be generated for each method under test. The actual scenario generation\n", "   * (determining which scenarios are applicable to which methods and what the outcome should be)\n", "   * takes place in {@link #addTests(TestSuite, Method)}.\n", "   */\n", "  private enum Scenario {\n", "\n", "    SATISFIED_AND_UNOCCUPIED_BEFORE_ENTERING,\n", "    UNSATISFIED_AND_UNOCCUPIED_BEFORE_ENTERING,\n", "    SATISFIED_AND_OCCUPIED_BEFORE_ENTERING,\n", "    SATISFIED_UNOCCUPIED_AND_INTERRUPTED_BEFORE_ENTERING,\n", "\n", "    SATISFIED_BEFORE_WAITING,\n", "    SATISFIED_WHILE_WAITING,\n", "    SATISFIED_AND_INTERRUPTED_BEFORE_WAITING,\n", "    UNSATISFIED_BEFORE_AND_WHILE_WAITING,\n", "    UNSATISFIED_AND_INTERRUPTED_BEFORE_WAITING;\n", "\n", "    @Override\n", "    public String toString() {\n", "      return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, name());\n", "    }\n", "\n", "  }\n", "\n", "  /**\n", "   * Timeout values to combine with each {@link Scenario}.\n", "   */\n", "  private enum Timeout {\n", "\n", "    MIN(Long.MIN_VALUE, \"-oo\"),\n", "    MINUS_SMALL(-SMALL_TIMEOUT_MILLIS, \"-\" + SMALL_TIMEOUT_MILLIS + \"ms\"),\n", "    ZERO(0L, \"0ms\"),\n", "    SMALL(SMALL_TIMEOUT_MILLIS, SMALL_TIMEOUT_MILLIS + \"ms\"),\n", "    LARGE(UNEXPECTED_HANG_DELAY_MILLIS * 2, (2 * UNEXPECTED_HANG_DELAY_MILLIS) + \"ms\"),\n", "    MAX(Long.MAX_VALUE, \"+oo\");\n", "\n", "    final long millis;\n", "    final String label;\n", "\n", "    private Timeout(long millis, String label) {\n", "      this.millis = millis;\n", "      this.label = label;\n", "    }\n", "\n", "    @Override\n", "    public String toString() {\n", "      return label;\n", "    }\n", "\n", "  }\n", "\n", "  /**\n", "   * Convenient subsets of the {@link Timeout} enumeration for specifying scenario outcomes.\n", "   */\n", "  private enum TimeoutsToUse {\n", "\n", "    ANY(Timeout.values()),\n", "    PAST(Timeout.MIN, Timeout.MINUS_SMALL, Timeout.ZERO),\n", "    FUTURE(Timeout.SMALL, Timeout.MAX),\n", "    SMALL(Timeout.SMALL),\n", "    FINITE(Timeout.MIN, Timeout.MINUS_SMALL, Timeout.ZERO, Timeout.SMALL),\n", "    INFINITE(Timeout.LARGE, Timeout.MAX);\n", "\n", "    final ImmutableList<Timeout> timeouts;\n", "\n", "    private TimeoutsToUse(Timeout... timeouts) {\n", "      this.timeouts = ImmutableList.copyOf(timeouts);\n", "    }\n", "\n", "  }\n", "\n", "  /**\n", "   * Possible outcomes of calling any of the methods under test.\n", "   */\n", "  private enum Outcome {\n", "\n", "    /**\n", "     * The method returned normally and is either void or returned true.\n", "     */\n", "    SUCCESS,\n", "\n", "    /**\n", "     * The method returned false.\n", "     */\n", "    FAILURE,\n", "\n", "    /**\n", "     * The method threw an InterruptedException.\n", "     */\n", "    INTERRUPT,\n", "\n", "    /**\n", "     * The method did not return or throw anything.\n", "     */\n", "    HANG;\n", "\n", "    @Override\n", "    public String toString() {\n", "      return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, name());\n", "    }\n", "\n", "  }\n", "\n", "  /**\n", "   * Identifies all enterXxx and tryEnterXxx methods.\n", "   */\n", "  private static boolean isAnyEnter(Method method) {\n", "    return method.getName().startsWith(\"enter\") || method.getName().startsWith(\"tryEnter\");\n", "  }\n", "\n", "  /**\n", "   * Identifies just tryEnterXxx methods (a subset of {@link #isAnyEnter}), which never block.\n", "   */\n", "  private static boolean isTryEnter(Method method) {\n", "    return method.getName().startsWith(\"tryEnter\");\n", "  }\n", "\n", "  /**\n", "   * Identifies just enterIfXxx methods (a subset of {@link #isAnyEnter}), which are mostly like the\n", "   * enterXxx methods but behave like tryEnterXxx in some scenarios.\n", "   */\n", "  private static boolean isEnterIf(Method method) {\n", "    return method.getName().startsWith(\"enterIf\");\n", "  }\n", "\n", "  /**\n", "   * Identifies all waitForXxx methods, which must be called while occupying the monitor.\n", "   */\n", "  private static boolean isWaitFor(Method method) {\n", "    return method.getName().startsWith(\"waitFor\");\n", "  }\n", "\n", "  /**\n", "   * Determines whether the given method takes a Guard as its first parameter.\n", "   */\n", "  private static boolean isGuarded(Method method) {\n", "    Class<?>[] parameterTypes = method.getParameterTypes();\n", "    return parameterTypes.length >= 1 && parameterTypes[0] == Monitor.Guard.class;\n", "  }\n", "\n", "  /**\n", "   * Determines whether the given method takes a time and unit as its last two parameters.\n", "   */\n", "  private static boolean isTimed(Method method) {\n", "    Class<?>[] parameterTypes = method.getParameterTypes();\n", "    return parameterTypes.length >= 2\n", "        && parameterTypes[parameterTypes.length - 2] == long.class\n", "        && parameterTypes[parameterTypes.length - 1] == TimeUnit.class;\n", "  }\n", "\n", "  /**\n", "   * Determines whether the given method returns a boolean value.\n", "   */\n", "  private static boolean isBoolean(Method method) {\n", "    return method.getReturnType() == boolean.class;\n", "  }\n", "\n", "  /**\n", "   * Determines whether the given method can throw InterruptedException.\n", "   */\n", "  private static boolean isInterruptible(Method method) {\n", "    return Arrays.asList(method.getExceptionTypes()).contains(InterruptedException.class);\n", "  }\n", "\n", "  /**\n", "   * Sorts the given methods primarily by name and secondarily by number of parameters.\n", "   */\n", "  private static void sortMethods(Method[] methods) {\n", "    Arrays.sort(methods, new Comparator<Method>() {\n", "      @Override public int compare(Method m1, Method m2) {\n", "        int nameComparison = m1.getName().compareTo(m2.getName());\n", "        if (nameComparison != 0) {\n", "          return nameComparison;\n", "        } else {\n", "          return Ints.compare(m1.getParameterTypes().length, m2.getParameterTypes().length);\n", "        }\n", "      }\n", "    });\n", "  }\n", "\n", "  /**\n", "   * Validates that the given method's signature meets all of our assumptions.\n", "   */\n", "  private static void validateMethod(Method method) {\n", "    String desc = method.toString();\n", "\n", "    assertTrue(desc, isAnyEnter(method) || isWaitFor(method));\n", "\n", "    switch (method.getParameterTypes().length) {\n", "      case 0:\n", "        assertFalse(desc, isGuarded(method));\n", "        assertFalse(desc, isTimed(method));\n", "        break;\n", "      case 1:\n", "        assertTrue(desc, isGuarded(method));\n", "        assertFalse(desc, isTimed(method));\n", "        break;\n", "      case 2:\n", "        assertFalse(desc, isGuarded(method));\n", "        assertTrue(desc, isTimed(method));\n", "        break;\n", "      case 3:\n", "        assertTrue(desc, isGuarded(method));\n", "        assertTrue(desc, isTimed(method));\n", "        break;\n", "      default:\n", "        fail(desc);\n", "    }\n", "\n", "    if (method.getReturnType() == void.class) {\n", "      assertFalse(desc, isBoolean(method));\n", "    } else {\n", "      assertTrue(desc, isBoolean(method));\n", "    }\n", "\n", "    switch (method.getExceptionTypes().length) {\n", "      case 0:\n", "        assertFalse(desc, isInterruptible(method));\n", "        break;\n", "      case 1:\n", "        assertTrue(desc, isInterruptible(method));\n", "        break;\n", "      default:\n", "        fail(desc);\n", "    }\n", "\n", "    if (isEnterIf(method)) {\n", "      assertTrue(desc, isGuarded(method));\n", "      assertTrue(desc, isBoolean(method));\n", "    } else if (isTryEnter(method)) {\n", "      assertFalse(desc, isTimed(method));\n", "      assertTrue(desc, isBoolean(method));\n", "      assertFalse(desc, isInterruptible(method));\n", "    } else if (isWaitFor(method)) {\n", "      assertTrue(desc, isGuarded(method));\n", "      assertEquals(desc, isTimed(method), isBoolean(method));\n", "    } else { // any other enterXxx method\n", "      assertEquals(desc, isTimed(method), isBoolean(method));\n", "    }\n", "  }\n", "\n", "  /**\n", "   * Generates all test cases appropriate for the given method.\n", "   */\n", "  private static void addTests(TestSuite suite, Method method) {\n", "    if (isGuarded(method)) {\n", "      for (boolean fair1 : new boolean[] { true, false }) {\n", "        for (boolean fair2 : new boolean[] { true, false }) {\n", "          suite.addTest(generateGuardWithWrongMonitorTestCase(method, fair1, fair2));\n", "        }\n", "      }\n", "    }\n", "    if (isAnyEnter(method)) {\n", "      addTests(suite, method,\n", "          Scenario.SATISFIED_AND_UNOCCUPIED_BEFORE_ENTERING,\n", "          TimeoutsToUse.ANY,\n", "          Outcome.SUCCESS);\n", "      addTests(suite, method,\n", "          Scenario.UNSATISFIED_AND_UNOCCUPIED_BEFORE_ENTERING,\n", "          TimeoutsToUse.FINITE,\n", "          isGuarded(method)\n", "              ? (isBoolean(method) ? Outcome.FAILURE : Outcome.HANG)\n", "              : Outcome.SUCCESS);\n", "      addTests(suite, method,\n", "          Scenario.UNSATISFIED_AND_UNOCCUPIED_BEFORE_ENTERING,\n", "          TimeoutsToUse.INFINITE,\n", "          isGuarded(method)\n", "              ? (isTryEnter(method) || isEnterIf(method) ? Outcome.FAILURE : Outcome.HANG)\n", "              : Outcome.SUCCESS);\n", "      addTests(suite, method,\n", "          Scenario.SATISFIED_AND_OCCUPIED_BEFORE_ENTERING,\n", "          TimeoutsToUse.FINITE,\n", "          isBoolean(method) ? Outcome.FAILURE : Outcome.HANG);\n", "      addTests(suite, method,\n", "          Scenario.SATISFIED_AND_OCCUPIED_BEFORE_ENTERING,\n", "          TimeoutsToUse.INFINITE,\n", "          isGuarded(method)\n", "              ? Outcome.HANG\n", "              : (isTryEnter(method) ? Outcome.FAILURE : Outcome.HANG));\n", "      addTests(suite, method,\n", "          Scenario.SATISFIED_UNOCCUPIED_AND_INTERRUPTED_BEFORE_ENTERING,\n", "          TimeoutsToUse.ANY,\n", "          isInterruptible(method) ? Outcome.INTERRUPT : Outcome.SUCCESS);\n", "    } else { // any waitForXxx method\n", "      suite.addTest(generateWaitForWhenNotOccupyingTestCase(method, true));\n", "      suite.addTest(generateWaitForWhenNotOccupyingTestCase(method, false));\n", "      addTests(suite, method,\n", "          Scenario.SATISFIED_BEFORE_WAITING,\n", "          TimeoutsToUse.ANY,\n", "          Outcome.SUCCESS);\n", "      addTests(suite, method,\n", "          Scenario.SATISFIED_WHILE_WAITING,\n", "          TimeoutsToUse.INFINITE,\n", "          Outcome.SUCCESS);\n", "      addTests(suite, method,\n", "          Scenario.SATISFIED_WHILE_WAITING,\n", "          TimeoutsToUse.PAST,\n", "          Outcome.FAILURE);\n", "      addTests(suite, method,\n", "          Scenario.SATISFIED_AND_INTERRUPTED_BEFORE_WAITING,\n", "          TimeoutsToUse.ANY,\n", "          Outcome.SUCCESS);\n", "      addTests(suite, method,\n", "          Scenario.UNSATISFIED_BEFORE_AND_WHILE_WAITING,\n", "          TimeoutsToUse.FINITE,\n", "          Outcome.FAILURE);\n", "      addTests(suite, method,\n", "          Scenario.UNSATISFIED_BEFORE_AND_WHILE_WAITING,\n", "          TimeoutsToUse.INFINITE,\n", "          Outcome.HANG);\n", "      addTests(suite, method,\n", "          Scenario.UNSATISFIED_AND_INTERRUPTED_BEFORE_WAITING,\n", "          TimeoutsToUse.PAST,\n", "          // prefer responding to interrupt over timing out\n", "          isInterruptible(method) ? Outcome.INTERRUPT : Outcome.FAILURE);\n", "      addTests(suite, method,\n", "          Scenario.UNSATISFIED_AND_INTERRUPTED_BEFORE_WAITING,\n", "          TimeoutsToUse.SMALL,\n", "          isInterruptible(method) ? Outcome.INTERRUPT : Outcome.FAILURE);\n", "      addTests(suite, method,\n", "          Scenario.UNSATISFIED_AND_INTERRUPTED_BEFORE_WAITING,\n", "          TimeoutsToUse.INFINITE,\n", "          isInterruptible(method) ? Outcome.INTERRUPT : Outcome.HANG);\n", "    }\n", "  }\n", "\n", "  /**\n", "   * Generates test cases for the given combination of scenario and timeouts. For methods that take\n", "   * an explicit timeout value, all of the given timeoutsToUse result in individual test cases. For\n", "   * methods that do not take an explicit timeout value, a single test case is generated only if the\n", "   * implicit timeout of that method matches the given timeoutsToUse. For example, enter() is\n", "   * treated like enter(MAX, MILLIS) and tryEnter() is treated like enter(0, MILLIS).\n", "   */\n", "  private static void addTests(TestSuite suite, Method method, Scenario scenario,\n", "      TimeoutsToUse timeoutsToUse, Outcome expectedOutcome) {\n", "    for (boolean fair : new boolean[] { true, false }) {\n", "      if (isTimed(method)) {\n", "        for (Timeout timeout : timeoutsToUse.timeouts) {\n", "          suite.addTest(new GeneratedMonitorTest(method, scenario, fair, timeout, expectedOutcome));\n", "        }\n", "      } else {\n", "        Timeout implicitTimeout = (isTryEnter(method) ? Timeout.ZERO : Timeout.MAX);\n", "        if (timeoutsToUse.timeouts.contains(implicitTimeout)) {\n", "          suite.addTest(new GeneratedMonitorTest(method, scenario, fair, null, expectedOutcome));\n", "        }\n", "      }\n", "    }\n", "  }\n", "\n", "  /**\n", "   * A guard that encapsulates a simple, mutable boolean flag.\n", "   */\n", "  static class FlagGuard extends Monitor.Guard {\n", "\n", "    private boolean satisfied;\n", "\n", "    protected FlagGuard(Monitor monitor) {\n", "      super(monitor);\n", "    }\n", "\n", "    @Override\n", "    public boolean isSatisfied() {\n", "      return satisfied;\n", "    }\n", "\n", "    public void setSatisfied(boolean satisfied) {\n", "      this.satisfied = satisfied;\n", "    }\n", "\n", "  }\n", "\n", "  private final Method method;\n", "  private final Scenario scenario;\n", "  private final Timeout timeout;\n", "  private final Outcome expectedOutcome;\n", "  private final Monitor monitor;\n", "  private final FlagGuard guard;\n", "  private final CountDownLatch tearDownLatch;\n", "  private final CountDownLatch doingCallLatch;\n", "  private final CountDownLatch callCompletedLatch;\n", "\n", "  private GeneratedMonitorTest(\n", "      Method method, Scenario scenario, boolean fair, Timeout timeout, Outcome expectedOutcome) {\n", "    super(nameFor(method, scenario, fair, timeout, expectedOutcome));\n", "    this.method = method;\n", "    this.scenario = scenario;\n", "    this.timeout = timeout;\n", "    this.expectedOutcome = expectedOutcome;\n", "    this.monitor = new Monitor(fair);\n", "    this.guard = new FlagGuard(monitor);\n", "    this.tearDownLatch = new CountDownLatch(1);\n", "    this.doingCallLatch = new CountDownLatch(1);\n", "    this.callCompletedLatch = new CountDownLatch(1);\n", "  }\n", "\n", "  private static String nameFor(\n", "      Method method, Scenario scenario, boolean fair, Timeout timeout, Outcome expectedOutcome) {\n", "    return String.format(\"%s%s(%s)/%s->%s\",\n", "                         method.getName(),\n", "                         fair ? \"(fair)\" : \"(nonfair)\",\n", "                         (timeout == null) ? \"untimed\" : timeout,\n", "                         scenario,\n", "                         expectedOutcome);\n", "  }\n", "\n", "  @Override\n", "  protected void runTest() throws Throwable {\n", "    final Runnable runChosenTest = new Runnable() {\n", "      @Override public void run() { runChosenTest(); }\n", "    };\n", "    final FutureTask<Void> task = new FutureTask<Void>(runChosenTest, null);\n", "    startThread(new Runnable() {\n", "        @Override public void run() { task.run(); }\n", "      });\n", "    awaitUninterruptibly(doingCallLatch);\n", "    long hangDelayMillis = (expectedOutcome == Outcome.HANG)\n", "        ? EXPECTED_HANG_DELAY_MILLIS\n", "        : UNEXPECTED_HANG_DELAY_MILLIS;\n", "    boolean hung = !awaitUninterruptibly(\n", "        callCompletedLatch, hangDelayMillis, TimeUnit.MILLISECONDS);\n", "    if (hung) {\n", "      assertEquals(expectedOutcome, Outcome.HANG);\n", "    } else {\n", "      assertNull(task.get(UNEXPECTED_HANG_DELAY_MILLIS, TimeUnit.MILLISECONDS));\n", "    }\n", "  }\n", "\n", "  @Override\n", "  protected void tearDown() throws Exception {\n", "    // We don't want to leave stray threads running after each test. At this point, every thread\n", "    // launched by this test is either:\n", "    //\n", "    // (a) Blocked attempting to enter the monitor.\n", "    // (b) Waiting for the single guard to become satisfied.\n", "    // (c) Occupying the monitor and awaiting the tearDownLatch.\n", "    //\n", "    // Except for (c), every thread should occupy the monitor very briefly, and every thread leaves\n", "    // the monitor with the guard satisfied. Therefore as soon as tearDownLatch is triggered, we\n", "    // should be able to enter the monitor, and then we set the guard to satisfied for the benefit\n", "    // of any remaining waiting threads.\n", "\n", "    tearDownLatch.countDown();\n", "    assertTrue(\"Monitor still occupied in tearDown()\",\n", "        monitor.enter(UNEXPECTED_HANG_DELAY_MILLIS, TimeUnit.MILLISECONDS));\n", "    try {\n", "      guard.setSatisfied(true);\n", "    } finally {\n", "      monitor.leave();\n", "    }\n", "  }\n", "\n", "  private void runChosenTest() {\n", "    if (isAnyEnter(method)) {\n", "      runEnterTest();\n", "    } else {\n", "      runWaitTest();\n", "    }\n", "  }\n", "\n", "  private void runEnterTest() {\n", "    assertFalse(Thread.currentThread().isInterrupted());\n", "    assertFalse(monitor.isOccupiedByCurrentThread());\n", "\n", "    doEnterScenarioSetUp();\n", "\n", "    boolean interruptedBeforeCall = Thread.currentThread().isInterrupted();\n", "    Outcome actualOutcome = doCall();\n", "    boolean occupiedAfterCall = monitor.isOccupiedByCurrentThread();\n", "    boolean interruptedAfterCall = Thread.currentThread().isInterrupted();\n", "\n", "    if (occupiedAfterCall) {\n", "      guard.setSatisfied(true);\n", "      monitor.leave();\n", "      assertFalse(monitor.isOccupiedByCurrentThread());\n", "    }\n", "\n", "    assertEquals(expectedOutcome, actualOutcome);\n", "    assertEquals(expectedOutcome == Outcome.SUCCESS, occupiedAfterCall);\n", "    assertEquals(interruptedBeforeCall && expectedOutcome != Outcome.INTERRUPT,\n", "        interruptedAfterCall);\n", "  }\n", "\n", "  private void doEnterScenarioSetUp() {\n", "    switch (scenario) {\n", "      case SATISFIED_AND_UNOCCUPIED_BEFORE_ENTERING:\n", "        enterSatisfyGuardAndLeaveInCurrentThread();\n", "        break;\n", "      case UNSATISFIED_AND_UNOCCUPIED_BEFORE_ENTERING:\n", "        break;\n", "      case SATISFIED_AND_OCCUPIED_BEFORE_ENTERING:\n", "        enterSatisfyGuardAndLeaveInCurrentThread();\n", "        enterAndRemainOccupyingInAnotherThread();\n", "        break;\n", "      case SATISFIED_UNOCCUPIED_AND_INTERRUPTED_BEFORE_ENTERING:\n", "        enterSatisfyGuardAndLeaveInCurrentThread();\n", "        Thread.currentThread().interrupt();\n", "        break;\n", "      default:\n", "        throw new AssertionError(\"unsupported scenario: \" + scenario);\n", "    }\n", "  }\n", "\n", "  private void runWaitTest() {\n", "    assertFalse(Thread.currentThread().isInterrupted());\n", "    assertFalse(monitor.isOccupiedByCurrentThread());\n", "    monitor.enter();\n", "    try {\n", "      assertTrue(monitor.isOccupiedByCurrentThread());\n", "\n", "      doWaitScenarioSetUp();\n", "\n", "      boolean interruptedBeforeCall = Thread.currentThread().isInterrupted();\n", "      Outcome actualOutcome = doCall();\n", "      boolean occupiedAfterCall = monitor.isOccupiedByCurrentThread();\n", "      boolean interruptedAfterCall = Thread.currentThread().isInterrupted();\n", "\n", "      assertEquals(expectedOutcome, actualOutcome);\n", "      assertTrue(occupiedAfterCall);\n", "      assertEquals(interruptedBeforeCall && expectedOutcome != Outcome.INTERRUPT,\n", "          interruptedAfterCall);\n", "    } finally {\n", "      guard.setSatisfied(true);\n", "      monitor.leave();\n", "      assertFalse(monitor.isOccupiedByCurrentThread());\n", "    }\n", "  }\n", "\n", "  private void doWaitScenarioSetUp() {\n", "    switch (scenario) {\n", "      case SATISFIED_BEFORE_WAITING:\n", "        guard.setSatisfied(true);\n", "        break;\n", "      case SATISFIED_WHILE_WAITING:\n", "        guard.setSatisfied(false);\n", "        enterSatisfyGuardAndLeaveInAnotherThread(); // enter blocks until we call waitFor\n", "        break;\n", "      case UNSATISFIED_BEFORE_AND_WHILE_WAITING:\n", "        guard.setSatisfied(false);\n", "        break;\n", "      case SATISFIED_AND_INTERRUPTED_BEFORE_WAITING:\n", "        guard.setSatisfied(true);\n", "        Thread.currentThread().interrupt();\n", "        break;\n", "      case UNSATISFIED_AND_INTERRUPTED_BEFORE_WAITING:\n", "        guard.setSatisfied(false);\n", "        Thread.currentThread().interrupt();\n", "        break;\n", "      default:\n", "        throw new AssertionError(\"unsupported scenario: \" + scenario);\n", "    }\n", "  }\n", "\n", "  private Outcome doCall() {\n", "    boolean guarded = isGuarded(method);\n", "    boolean timed = isTimed(method);\n", "    Object[] arguments = new Object[(guarded ? 1 : 0) + (timed ? 2 : 0)];\n", "    if (guarded) {\n", "      arguments[0] = guard;\n", "    }\n", "    if (timed) {\n", "      arguments[arguments.length - 2] = timeout.millis;\n", "      arguments[arguments.length - 1] = TimeUnit.MILLISECONDS;\n", "    }\n", "    try {\n", "      Object result;\n", "      doingCallLatch.countDown();\n", "      try {\n", "        result = method.invoke(monitor, arguments);\n", "      } finally {\n", "        callCompletedLatch.countDown();\n", "      }\n", "      if (result == null) {\n", "        return Outcome.SUCCESS;\n", "      } else if ((Boolean) result) {\n", "        return Outcome.SUCCESS;\n", "      } else {\n", "        return Outcome.FAILURE;\n", "      }\n", "    } catch (InvocationTargetException targetException) {\n", "      Throwable actualException = targetException.getTargetException();\n", "      if (actualException instanceof InterruptedException) {\n", "        return Outcome.INTERRUPT;\n", "      } else {\n", "        throw new AssertionError(\"unexpected exception\", targetException);\n", "      }\n", "    } catch (IllegalAccessException e) {\n", "      throw new AssertionError(\"unexpected exception\", e);\n", "    }\n", "  }\n", "\n", "  private void enterSatisfyGuardAndLeaveInCurrentThread() {\n", "    monitor.enter();\n", "    try {\n", "      guard.setSatisfied(true);\n", "    } finally {\n", "      monitor.leave();\n", "    }\n", "  }\n", "\n", "  private void enterSatisfyGuardAndLeaveInAnotherThread() {\n", "    final CountDownLatch startedLatch = new CountDownLatch(1);\n", "    startThread(new Runnable() {\n", "      @Override public void run() {\n", "        startedLatch.countDown();\n", "        enterSatisfyGuardAndLeaveInCurrentThread();\n", "      }\n", "    });\n", "    awaitUninterruptibly(startedLatch);\n", "  }\n", "\n", "  private void enterAndRemainOccupyingInAnotherThread() {\n", "    final CountDownLatch enteredLatch = new CountDownLatch(1);\n", "    startThread(new Runnable() {\n", "      @Override public void run() {\n", "        monitor.enter();\n", "        try {\n", "          enteredLatch.countDown();\n", "          awaitUninterruptibly(tearDownLatch);\n", "          guard.setSatisfied(true);\n", "        } finally {\n", "          monitor.leave();\n", "        }\n", "      }\n", "    });\n", "    awaitUninterruptibly(enteredLatch);\n", "  }\n", "\n", "  static Thread startThread(Runnable runnable) {\n", "    Thread thread = new Thread(runnable);\n", "    thread.setDaemon(true);\n", "    thread.start();\n", "    return thread;\n", "  }\n", "\n", "  /**\n", "   * Generates a test case verifying that calling any enterXxx, tryEnterXxx, or waitForXxx method\n", "   * with a guard that doesn't match the monitor produces an IllegalMonitorStateException.\n", "   */\n", "  private static TestCase generateGuardWithWrongMonitorTestCase(final Method method,\n", "                                                                final boolean fair1,\n", "                                                                final boolean fair2) {\n", "    final boolean timed = isTimed(method); // Not going to bother with all timeouts, just 0ms.\n", "    return new TestCase(method.getName() + (timed ? \"(0ms)\" : \"()\") + \"/WrongMonitor->IMSE\") {\n", "      @Override protected void runTest() throws Throwable {\n", "        Monitor monitor1 = new Monitor(fair1);\n", "        Monitor monitor2 = new Monitor(fair2);\n", "        FlagGuard guard = new FlagGuard(monitor2);\n", "        Object[] arguments =\n", "            (timed ? new Object[] {guard, 0L, TimeUnit.MILLISECONDS} : new Object[] {guard});\n", "        boolean occupyMonitor = isWaitFor(method);\n", "        if (occupyMonitor) {\n", "          // If we don't already occupy the monitor, we'll get an IMSE regardless of the guard (see\n", "          // generateWaitForWhenNotOccupyingTestCase).\n", "          monitor1.enter();\n", "        }\n", "        try {\n", "          method.invoke(monitor1, arguments);\n", "          fail(\"expected IllegalMonitorStateException\");\n", "        } catch (InvocationTargetException e) {\n", "          assertEquals(IllegalMonitorStateException.class, e.getTargetException().getClass());\n", "        } finally {\n", "          if (occupyMonitor) {\n", "            monitor1.leave();\n", "          }\n", "        }\n", "      }\n", "    };\n", "  }\n", "\n", "  /**\n", "   * Generates a test case verifying that calling any waitForXxx method when not occupying the\n", "   * monitor produces an IllegalMonitorStateException.\n", "   */\n", "  private static TestCase generateWaitForWhenNotOccupyingTestCase(final Method method,\n", "                                                                  final boolean fair) {\n", "    final boolean timed = isTimed(method); // Not going to bother with all timeouts, just 0ms.\n", "    String testName = method.getName()\n", "        + (fair ? \"(fair)\" : \"(nonfair)\")\n", "        + (timed ? \"(0ms)\" : \"()\")\n", "        + \"/NotOccupying->IMSE\";\n", "    return new TestCase(testName) {\n", "      @Override protected void runTest() throws Throwable {\n", "        Monitor monitor = new Monitor(fair);\n", "        FlagGuard guard = new FlagGuard(monitor);\n", "        Object[] arguments =\n", "            (timed ? new Object[] {guard, 0L, TimeUnit.MILLISECONDS} : new Object[] {guard});\n", "        try {\n", "          method.invoke(monitor, arguments);\n", "          fail(\"expected IllegalMonitorStateException\");\n", "        } catch (InvocationTargetException e) {\n", "          assertEquals(IllegalMonitorStateException.class, e.getTargetException().getClass());\n", "        }\n", "      }\n", "    };\n", "  }\n", "\n", "}\n"]}, "removed": {}, "added_lines": {"1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777]}, "removed_lines": {}}, {"1": "guava-tests/test/com/google/common/util/concurrent/SupplementalMonitorTest.java", "added": {"1": ["/*\n", " * Copyright (C) 2014 The Guava Authors\n", " *\n", " * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package com.google.common.util.concurrent;\n", "\n", "import static com.google.common.util.concurrent.GeneratedMonitorTest.startThread;\n", "import static com.google.common.util.concurrent.Uninterruptibles.joinUninterruptibly;\n", "\n", "import com.google.common.util.concurrent.GeneratedMonitorTest.FlagGuard;\n", "\n", "import junit.framework.TestCase;\n", "\n", "import java.util.concurrent.atomic.AtomicBoolean;\n", "import java.util.concurrent.atomic.AtomicInteger;\n", "import java.util.concurrent.atomic.AtomicReference;\n", "\n", "/**\n", " * Supplemental tests for {@link Monitor}.\n", " *\n", " * <p>This test class contains various test cases that don't fit into the test case generation in\n", " * {@link GeneratedMonitorTest}.\n", " *\n", " * @author Justin T. Sampson\n", " */\n", "\n", "public class SupplementalMonitorTest extends TestCase {\n", "\n", "  public void testLeaveWithoutEnterThrowsIMSE() {\n", "    Monitor monitor = new Monitor();\n", "    try {\n", "      monitor.leave();\n", "      fail(\"expected IllegalMonitorStateException\");\n", "    } catch (IllegalMonitorStateException e) {\n", "      // expected\n", "    }\n", "  }\n", "\n", "  public void testGetWaitQueueLengthWithWrongMonitorThrowsIMSE() {\n", "    Monitor monitor1 = new Monitor();\n", "    Monitor monitor2 = new Monitor();\n", "    FlagGuard guard = new FlagGuard(monitor2);\n", "    try {\n", "      monitor1.getWaitQueueLength(guard);\n", "      fail(\"expected IllegalMonitorStateException\");\n", "    } catch (IllegalMonitorStateException e) {\n", "      // expected\n", "    }\n", "  }\n", "\n", "  public void testHasWaitersWithWrongMonitorThrowsIMSE() {\n", "    Monitor monitor1 = new Monitor();\n", "    Monitor monitor2 = new Monitor();\n", "    FlagGuard guard = new FlagGuard(monitor2);\n", "    try {\n", "      monitor1.hasWaiters(guard);\n", "      fail(\"expected IllegalMonitorStateException\");\n", "    } catch (IllegalMonitorStateException e) {\n", "      // expected\n", "    }\n", "  }\n", "\n", "  public void testNullMonitorInGuardConstructorThrowsNPE() {\n", "    try {\n", "      new FlagGuard(null);\n", "      fail(\"expected NullPointerException\");\n", "    } catch (NullPointerException e) {\n", "      // expected\n", "    }\n", "  }\n", "\n", "  public void testIsFair() {\n", "    assertTrue(new Monitor(true).isFair());\n", "    assertFalse(new Monitor(false).isFair());\n", "  }\n", "\n", "  public void testOccupiedMethods() {\n", "    Monitor monitor = new Monitor();\n", "    verifyOccupiedMethodsInCurrentThread(monitor, false, false, 0);\n", "    verifyOccupiedMethodsInAnotherThread(monitor, false, false, 0);\n", "    monitor.enter();\n", "    try {\n", "      verifyOccupiedMethodsInCurrentThread(monitor, true, true, 1);\n", "      verifyOccupiedMethodsInAnotherThread(monitor, true, false, 0);\n", "      monitor.enter();\n", "      try {\n", "        verifyOccupiedMethodsInCurrentThread(monitor, true, true, 2);\n", "        verifyOccupiedMethodsInAnotherThread(monitor, true, false, 0);\n", "      } finally {\n", "        monitor.leave();\n", "      }\n", "      verifyOccupiedMethodsInCurrentThread(monitor, true, true, 1);\n", "      verifyOccupiedMethodsInAnotherThread(monitor, true, false, 0);\n", "    } finally {\n", "      monitor.leave();\n", "    }\n", "    verifyOccupiedMethodsInCurrentThread(monitor, false, false, 0);\n", "    verifyOccupiedMethodsInAnotherThread(monitor, false, false, 0);\n", "  }\n", "\n", "  private static void verifyOccupiedMethodsInCurrentThread(Monitor monitor,\n", "      boolean expectedIsOccupied, boolean expectedIsOccupiedByCurrentThread,\n", "      int expectedOccupiedDepth) {\n", "    assertEquals(expectedIsOccupied, monitor.isOccupied());\n", "    assertEquals(expectedIsOccupiedByCurrentThread, monitor.isOccupiedByCurrentThread());\n", "    assertEquals(expectedOccupiedDepth, monitor.getOccupiedDepth());\n", "  }\n", "\n", "  private static void verifyOccupiedMethodsInAnotherThread(final Monitor monitor,\n", "      boolean expectedIsOccupied, boolean expectedIsOccupiedByCurrentThread,\n", "      int expectedOccupiedDepth) {\n", "    final AtomicBoolean actualIsOccupied = new AtomicBoolean();\n", "    final AtomicBoolean actualIsOccupiedByCurrentThread = new AtomicBoolean();\n", "    final AtomicInteger actualOccupiedDepth = new AtomicInteger();\n", "    final AtomicReference<Throwable> thrown = new AtomicReference<Throwable>();\n", "    joinUninterruptibly(startThread(new Runnable() {\n", "      @Override public void run() {\n", "        try {\n", "          actualIsOccupied.set(monitor.isOccupied());\n", "          actualIsOccupiedByCurrentThread.set(monitor.isOccupiedByCurrentThread());\n", "          actualOccupiedDepth.set(monitor.getOccupiedDepth());\n", "        } catch (Throwable t) {\n", "          thrown.set(t);\n", "        }\n", "      }\n", "    }));\n", "    assertNull(thrown.get());\n", "    assertEquals(expectedIsOccupied, actualIsOccupied.get());\n", "    assertEquals(expectedIsOccupiedByCurrentThread, actualIsOccupiedByCurrentThread.get());\n", "    assertEquals(expectedOccupiedDepth, actualOccupiedDepth.get());\n", "  }\n", "\n", "}\n"]}, "removed": {}, "added_lines": {"1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145]}, "removed_lines": {}}, {"2": "guava/src/com/google/common/util/concurrent/Monitor.java", "added": {"1": ["  /*\n", "   * Timeout handling is intricate, especially given our ambitious goals:\n", "   * - Avoid underflow and overflow of timeout values when specified timeouts are close to\n", "   *   Long.MIN_VALUE or Long.MAX_VALUE.\n", "   * - Favor responding to interrupts over timeouts.\n", "   * - System.nanoTime() is expensive enough that we want to call it the minimum required number of\n", "   *   times, typically once before invoking a blocking method.  This often requires keeping track\n", "   *   of the first time in a method that nanoTime() has been invoked, for which the special value\n", "   *   0L is reserved to mean \"uninitialized\".  If timeout is non-positive, then nanoTime need\n", "   *   never be called.\n", "   * - Keep behavior of fair and non-fair instances consistent.\n", "   */\n", "\n"], "2": ["   *\n", "   * @throws InterruptedException if interrupted while waiting\n"], "3": ["    final long timeoutNanos = toSafeNanos(time, unit);\n", "      final long startTime = System.nanoTime();\n", "      for (long remainingNanos = timeoutNanos;;) {\n", "          return lock.tryLock(remainingNanos, TimeUnit.NANOSECONDS);\n", "          remainingNanos = remainingNanos(startTime, timeoutNanos);\n"], "4": ["   * @throws InterruptedException if interrupted while waiting\n"], "5": ["   *\n", "   * @throws InterruptedException if interrupted while waiting\n"], "6": ["   * @throws InterruptedException if interrupted while waiting\n", "    final long timeoutNanos = toSafeNanos(time, unit);\n", "    long startTime = 0L;\n", "\n", " locked: {\n", "      if (!fair) {\n", "        // Check interrupt status to get behavior consistent with fair case.\n", "        if (Thread.interrupted()) {\n", "          throw new InterruptedException();\n", "        }\n", "        if (lock.tryLock()) {\n", "          break locked;\n", "        }\n", "      }\n", "      startTime = initNanoTime(timeoutNanos);\n", "      satisfied = guard.isSatisfied()\n", "          || awaitNanos(guard,\n", "                        (startTime == 0L)\n", "                            ? timeoutNanos\n", "                            : remainingNanos(startTime, timeoutNanos),\n", "                        reentrant);\n"], "7": ["    final long timeoutNanos = toSafeNanos(time, unit);\n", "    long startTime = 0L;\n", "        startTime = initNanoTime(timeoutNanos);\n", "        for (long remainingNanos = timeoutNanos;;) {\n", "            if (lock.tryLock(remainingNanos, TimeUnit.NANOSECONDS)) {\n", "              break;\n", "            } else {\n", "            remainingNanos = remainingNanos(startTime, timeoutNanos);\n", "        }\n", "            if (guard.isSatisfied()) {\n", "              satisfied = true;\n", "            } else {\n", "              final long remainingNanos;\n", "              if (startTime == 0L) {\n", "                startTime = initNanoTime(timeoutNanos);\n", "                remainingNanos = timeoutNanos;\n", "              } else {\n", "                remainingNanos = remainingNanos(startTime, timeoutNanos);\n", "              }\n", "              satisfied = awaitNanos(guard, remainingNanos, signalBeforeWaiting);\n", "            }\n", "            return satisfied;\n"], "8": ["   * @throws InterruptedException if interrupted while waiting\n"], "9": ["   *\n", "   * @throws InterruptedException if interrupted while waiting\n"], "10": ["   * @throws InterruptedException if interrupted while waiting\n", "    final long timeoutNanos = toSafeNanos(time, unit);\n", "    if (guard.isSatisfied()) {\n", "      return true;\n", "    }\n", "    if (Thread.interrupted()) {\n", "      throw new InterruptedException();\n", "    }\n", "    return awaitNanos(guard, timeoutNanos, true);\n"], "11": ["    final long timeoutNanos = toSafeNanos(time, unit);\n"], "12": ["    final long startTime = initNanoTime(timeoutNanos);\n", "      for (long remainingNanos = timeoutNanos;;) {\n", "          return awaitNanos(guard, remainingNanos, signalBeforeWaiting);\n", "          remainingNanos = remainingNanos(startTime, timeoutNanos);\n"], "13": ["  /**\n", "   * Returns unit.toNanos(time), additionally ensuring the returned value is not at risk of\n", "   * overflowing or underflowing, by bounding the value between 0 and (Long.MAX_VALUE / 4) * 3.\n", "   * Actually waiting for more than 219 years is not supported!\n", "   */\n", "  private static long toSafeNanos(long time, TimeUnit unit) {\n", "    long timeoutNanos = unit.toNanos(time);\n", "    return (timeoutNanos <= 0L) ? 0L\n", "        : (timeoutNanos > (Long.MAX_VALUE / 4) * 3) ? (Long.MAX_VALUE / 4) * 3\n", "        : timeoutNanos;\n", "  }\n", "\n", "  /**\n", "   * Returns System.nanoTime() unless the timeout has already elapsed.\n", "   * Returns 0L if and only if the timeout has already elapsed.\n", "   */\n", "  private static long initNanoTime(long timeoutNanos) {\n", "    if (timeoutNanos <= 0L) {\n", "      return 0L;\n", "    } else {\n", "      long startTime = System.nanoTime();\n", "      return (startTime == 0L) ? 1L : startTime;\n", "    }\n", "  }\n", "\n", "  /**\n", "   * Returns the remaining nanos until the given timeout, or 0L if the timeout has already elapsed.\n", "   * Caller must have previously sanitized timeoutNanos using toSafeNanos.\n", "   */\n", "  private static long remainingNanos(long startTime, long timeoutNanos) {\n", "    // assert timeoutNanos == 0L || startTime != 0L;\n", "\n", "    // TODO : NOT CORRECT, BUT TESTS PASS ANYWAYS!\n", "    // if (true) return timeoutNanos;\n", "    // ONLY 2 TESTS FAIL IF WE DO:\n", "    // if (true) return 0;\n", "\n", "    return (timeoutNanos <= 0L) ? 0L : timeoutNanos - (System.nanoTime() - startTime);\n", "  }\n", "\n"], "14": ["  private void await(Guard guard, boolean signalBeforeWaiting)\n"], "15": ["  /**\n", "   * Caller should check before calling that guard is not satisfied.\n", "   */\n", "    boolean firstTime = true;\n", "        if (nanos <= 0L) {\n", "        if (firstTime) {\n", "          if (signalBeforeWaiting) {\n", "            signalNextWaiter();\n", "          }\n", "          beginWaitingFor(guard);\n", "          firstTime = false;\n", "        }\n", "      if (!firstTime) {\n", "        endWaitingFor(guard);\n", "      }\n"]}, "removed": {"3": ["    long timeoutNanos = unit.toNanos(time);\n", "    long deadline = System.nanoTime() + timeoutNanos;\n", "      while (true) {\n", "          return lock.tryLock(timeoutNanos, TimeUnit.NANOSECONDS);\n", "          timeoutNanos = deadline - System.nanoTime();\n"], "6": ["    long timeoutNanos = unit.toNanos(time);\n", "    if (fair || !lock.tryLock()) {\n", "      long deadline = System.nanoTime() + timeoutNanos;\n", "      timeoutNanos = deadline - System.nanoTime();\n", "      satisfied = guard.isSatisfied() || awaitNanos(guard, timeoutNanos, reentrant);\n"], "7": ["    long timeoutNanos = unit.toNanos(time);\n", "    long deadline = System.nanoTime() + timeoutNanos;\n", "        boolean locked = false;\n", "        do {\n", "            locked = lock.tryLock(timeoutNanos, TimeUnit.NANOSECONDS);\n", "            if (!locked) {\n", "          timeoutNanos = deadline - System.nanoTime();\n", "        } while (!locked);\n", "            return satisfied = guard.isSatisfied()\n", "                || awaitNanos(guard, timeoutNanos, signalBeforeWaiting);\n", "            timeoutNanos = deadline - System.nanoTime();\n"], "10": ["    long timeoutNanos = unit.toNanos(time);\n", "    return guard.isSatisfied() || awaitNanos(guard, timeoutNanos, true);\n"], "11": ["    long timeoutNanos = unit.toNanos(time);\n"], "12": ["    long deadline = System.nanoTime() + timeoutNanos;\n", "      while (true) {\n", "          return awaitNanos(guard, timeoutNanos, signalBeforeWaiting);\n", "          timeoutNanos = deadline - System.nanoTime();\n"], "14": ["    private void await(Guard guard, boolean signalBeforeWaiting)\n"], "15": ["    if (signalBeforeWaiting) {\n", "      signalNextWaiter();\n", "    }\n", "    beginWaitingFor(guard);\n", "        if (nanos < 0L) {\n", "      endWaitingFor(guard);\n"]}, "added_lines": {"1": [279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], "2": [375, 376], "3": [388, 395, 396, 398, 401], "4": [415], "5": [434, 435], "6": [488, 491, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 518, 519, 520, 521, 522, 523], "7": [547, 552, 557, 558, 560, 561, 562, 567, 569, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588], "8": [634], "9": [733, 734], "10": [763, 766, 770, 771, 772, 773, 774, 775, 776], "11": [786], "12": [794, 797, 799, 806], "13": [920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959], "14": [1078], "15": [1108, 1109, 1110, 1114, 1117, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1131, 1132, 1133]}, "removed_lines": {"3": [373, 378, 381, 383, 386], "6": [472, 478, 479, 483, 489], "7": [513, 518, 523, 524, 526, 527, 533, 534, 541, 542, 546], "10": [717, 721], "11": [731], "12": [739, 742, 744, 751], "14": [983], "15": [1016, 1017, 1018, 1019, 1022, 1029]}}]}
