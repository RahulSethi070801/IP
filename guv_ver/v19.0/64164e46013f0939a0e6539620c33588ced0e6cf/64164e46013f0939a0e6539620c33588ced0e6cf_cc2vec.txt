{"id": "64164e46013f0939a0e6539620c33588ced0e6cf", "code": [{"0": "guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java", "added": {"1": ["    return new TransformedIterator<K, Entry<K, V>>(set.iterator()) {\n"], "2": ["   * Returns a map with the given {@code values}, indexed by keys derived from\n", "   * those values. In other words, each input value produces an entry in the map\n", "   * whose key is the result of applying {@code keyFunction} to that value.\n", "   * These entries appear in the same order as the input values. Example usage:\n", "   * <pre>   {@code\n", "   *\n", "   *   Color red = new Color(\"red\", 255, 0, 0);\n", "   *   ...\n", "   *   ImmutableSet<Color> allColors = ImmutableSet.of(red, green, blue);\n", "   *\n", "   *   Map<String, Color> colorForName =\n", "   *       uniqueIndex(allColors, toStringFunction());\n", "   *   assertThat(colorForName).containsEntry(\"red\", red);}</pre>\n", "   *\n", "   * <p>If your index may associate multiple values with each key, use {@link\n", "   * Multimaps#index(Iterable, Function) Multimaps.index}.\n"], "3": ["   * Returns a map with the given {@code values}, indexed by keys derived from\n", "   * those values. In other words, each input value produces an entry in the map\n", "   * whose key is the result of applying {@code keyFunction} to that value.\n", "   * These entries appear in the same order as the input values. Example usage:\n", "   * <pre>   {@code\n", "   *\n", "   *   Color red = new Color(\"red\", 255, 0, 0);\n", "   *   ...\n", "   *   Iterator<Color> allColors = ImmutableSet.of(red, green, blue).iterator();\n", "   *\n", "   *   Map<String, Color> colorForName =\n", "   *       uniqueIndex(allColors, toStringFunction());\n", "   *   assertThat(colorForName).containsEntry(\"red\", red);}</pre>\n", "   *\n", "   * <p>If your index may associate multiple values with each key, use {@link\n", "   * Multimaps#index(Iterator, Function) Multimaps.index}.\n"], "4": ["    try {\n", "      return builder.build();\n", "    } catch (IllegalArgumentException duplicateKeys) {\n", "      throw new IllegalArgumentException(duplicateKeys.getMessage()\n", "          + \". To index multiple values under a key, use Multimaps.index.\");\n", "    }\n"]}, "removed": {"1": ["    return new TransformedIterator<K, Entry<K,V>>(set.iterator()) {\n"], "2": ["   * Returns an immutable map for which the {@link Map#values} are the given\n", "   * elements in the given order, and each key is the product of invoking a\n", "   * supplied function on its corresponding value.\n"], "3": ["   * Returns an immutable map for which the {@link Map#values} are the given\n", "   * elements in the given order, and each key is the product of invoking a\n", "   * supplied function on its corresponding value.\n"], "4": ["    return builder.build();\n"]}, "added_lines": {"1": [801], "2": [963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978], "3": [996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "4": [1031, 1032, 1033, 1034, 1035, 1036]}, "removed_lines": {"1": [801], "2": [963, 964, 965], "3": [983, 984, 985], "4": [1005]}}, {"1": "guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/MapsTest.java", "added": {"1": ["    } catch (IllegalArgumentException expected) {\n"], "2": ["      assertThat(expected.getMessage()).contains(\"Multimaps.index\");\n"]}, "removed": {"1": ["    } catch (IllegalArgumentException ex) {\n"]}, "added_lines": {"1": [97], "2": [790]}, "removed_lines": {"1": [97]}}, {"2": "guava-tests/test/com/google/common/collect/MapsTest.java", "added": {"1": ["    } catch (IllegalArgumentException expected) {\n"], "2": ["      assertThat(expected.getMessage()).contains(\"Multimaps.index\");\n"]}, "removed": {"1": ["    } catch (IllegalArgumentException ex) {\n"]}, "added_lines": {"1": [109], "2": [1036]}, "removed_lines": {"1": [109]}}, {"3": "guava/src/com/google/common/collect/Maps.java", "added": {"1": ["    return new TransformedIterator<K, Entry<K, V>>(set.iterator()) {\n"], "2": ["   * Returns a map with the given {@code values}, indexed by keys derived from\n", "   * those values. In other words, each input value produces an entry in the map\n", "   * whose key is the result of applying {@code keyFunction} to that value.\n", "   * These entries appear in the same order as the input values. Example usage:\n", "   * <pre>   {@code\n", "   *\n", "   *   Color red = new Color(\"red\", 255, 0, 0);\n", "   *   ...\n", "   *   ImmutableSet<Color> allColors = ImmutableSet.of(red, green, blue);\n", "   *\n", "   *   Map<String, Color> colorForName =\n", "   *       uniqueIndex(allColors, toStringFunction());\n", "   *   assertThat(colorForName).containsEntry(\"red\", red);}</pre>\n", "   *\n", "   * <p>If your index may associate multiple values with each key, use {@link\n", "   * Multimaps#index(Iterable, Function) Multimaps.index}.\n"], "3": ["   * Returns a map with the given {@code values}, indexed by keys derived from\n", "   * those values. In other words, each input value produces an entry in the map\n", "   * whose key is the result of applying {@code keyFunction} to that value.\n", "   * These entries appear in the same order as the input values. Example usage:\n", "   * <pre>   {@code\n", "   *\n", "   *   Color red = new Color(\"red\", 255, 0, 0);\n", "   *   ...\n", "   *   Iterator<Color> allColors = ImmutableSet.of(red, green, blue).iterator();\n", "   *\n", "   *   Map<String, Color> colorForName =\n", "   *       uniqueIndex(allColors, toStringFunction());\n", "   *   assertThat(colorForName).containsEntry(\"red\", red);}</pre>\n", "   *\n", "   * <p>If your index may associate multiple values with each key, use {@link\n", "   * Multimaps#index(Iterator, Function) Multimaps.index}.\n"], "4": ["    try {\n", "      return builder.build();\n", "    } catch (IllegalArgumentException duplicateKeys) {\n", "      throw new IllegalArgumentException(duplicateKeys.getMessage()\n", "          + \". To index multiple values under a key, use Multimaps.index.\");\n", "    }\n"]}, "removed": {"1": ["    return new TransformedIterator<K, Entry<K,V>>(set.iterator()) {\n"], "2": ["   * Returns an immutable map for which the {@link Map#values} are the given\n", "   * elements in the given order, and each key is the product of invoking a\n", "   * supplied function on its corresponding value.\n"], "3": ["   * Returns an immutable map for which the {@link Map#values} are the given\n", "   * elements in the given order, and each key is the product of invoking a\n", "   * supplied function on its corresponding value.\n"], "4": ["    return builder.build();\n"]}, "added_lines": {"1": [838], "2": [1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153], "3": [1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186], "4": [1206, 1207, 1208, 1209, 1210, 1211]}, "removed_lines": {"1": [838], "2": [1138, 1139, 1140], "3": [1158, 1159, 1160], "4": [1180]}}]}
