{"id": "a34e7053d0b1db281893e0ec430f0d27ffa8e85e", "code": [{"0": "guava/src/com/google/common/util/concurrent/AbstractFuture.java", "added": {"2": ["      helper = UnsafeAtomicHelperFactory.values()[0].tryCreateUnsafeAtomicHelper();\n"], "4": ["  /**\n", "   * Temporary hack to hide the reference to {@link UnsafeAtomicHelper} from Android. The caller of\n", "   * this code will execute {@link #tryCreateUnsafeAtomicHelper} on the <b>first</b> enum value\n", "   * present. On the server, this will try to create {@link UnsafeAtomicHelper}. On Android, it will\n", "   * just return {@code null}.\n", "   */\n", "  private enum UnsafeAtomicHelperFactory {\n", "    @SuppressUnderAndroid // temporarily while we make Proguard tolerate Unsafe\n", "    REALLY_TRY_TO_CREATE {\n", "      @Override\n", "      AtomicHelper tryCreateUnsafeAtomicHelper() {\n", "        return new UnsafeAtomicHelper();\n", "      }\n", "    },\n", "\n", "    DONT_EVEN_TRY_TO_CREATE {\n", "      @Override\n", "      AtomicHelper tryCreateUnsafeAtomicHelper() {\n", "        return null;\n", "      }\n", "    },\n", "\n", "  ;\n", "\n", "    abstract AtomicHelper tryCreateUnsafeAtomicHelper();\n", "  }\n", "\n", "  @SuppressUnderAndroid // temporarily while we make Proguard tolerate Unsafe\n"], "5": ["    @Override\n", "    void putThread(Waiter waiter, Thread thread) {\n", "    @Override\n", "    void putNext(Waiter waiter, Waiter next) {\n", "    @Override\n", "    boolean casWaiters(AbstractFuture future, Waiter curr, Waiter next) {\n", "    @Override\n", "    boolean casListeners(AbstractFuture future, Listener curr, Listener next) {\n", "    @Override\n", "    boolean casValue(AbstractFuture future, Object expected, Object v) {\n"]}, "removed": {"1": ["import com.google.errorprone.annotations.ForOverride;\n"], "2": ["      helper = new UnsafeAtomicHelper();\n"], "3": ["  // TODO(cpovirk): @ForOverride if https://github.com/google/error-prone/issues/342 permits\n"], "5": ["    @Override void putThread(Waiter waiter, Thread thread) {\n", "    @Override void putNext(Waiter waiter, Waiter next) {\n", "    @Override boolean casWaiters(AbstractFuture future, Waiter curr, Waiter next) {\n", "    @Override boolean casListeners(AbstractFuture future, Listener curr, Listener next) {\n", "    @Override boolean casValue(AbstractFuture future, Object expected, Object v) {\n"]}, "added_lines": {"2": [112], "4": [849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 882], "5": [928, 929, 933, 934, 939, 940, 945, 946, 951, 952]}, "removed_lines": {"1": [26], "2": [113], "3": [767], "5": [902, 906, 911, 916, 921]}}, {"1": "guava/src/com/google/common/util/concurrent/FuturesGetChecked.java", "added": {"1": ["  @SuppressUnderAndroid // ClassValue\n"], "2": ["    @SuppressUnderAndroid // ClassValue\n"]}, "removed": {}, "added_lines": {"1": [103], "2": [124]}, "removed_lines": {}}, {"2": "guava/src/com/google/common/util/concurrent/SuppressUnderAndroid.java", "added": {"1": [" * Signifies that a member should be stripped from the internal Android flavor of Guava. This\n", " * annotation is respected only by our Google-internal build system. Note that that system also\n", " * strips any test annotated with MediumTest or LargeTest.\n", " *\n", " * TODO(cpovirk): Replicate this revised description to other copies of the annotation, or better\n", " * yet, eliminate the need to use it in prod code, revert the description, and move it back to the\n", " * test directory.\n"]}, "removed": {"1": [" * Signifies that a test should not be run under Android. This annotation is respected only by our\n", " * Google-internal Android suite generators. Note that those generators also suppress any test\n", " * annotated with MediumTest or LargeTest.\n"]}, "added_lines": {"1": [32, 33, 34, 35, 36, 37, 38]}, "removed_lines": {"1": [32, 33, 34]}}]}
