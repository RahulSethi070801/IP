{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2009 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.base;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "20": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.Beta;\n",
        "23": "import com.google.common.annotations.GwtCompatible;\n",
        "24": "\n",
        "25": "import java.util.ArrayList;\n",
        "26": "import java.util.Collections;\n",
        "27": "import java.util.Iterator;\n",
        "28": "import java.util.LinkedHashMap;\n",
        "29": "import java.util.List;\n",
        "30": "import java.util.Map;\n",
        "31": "\n",
        "32": "import javax.annotation.CheckReturnValue;\n",
        "33": "\n",
        "34": "/**\n",
        "35": " * Extracts non-overlapping substrings from an input string, typically by\n",
        "36": " * recognizing appearances of a <i>separator</i> sequence. This separator can be\n",
        "37": " * specified as a single {@linkplain #on(char) character}, fixed {@linkplain\n",
        "38": " * #on(String) string}, {@linkplain #onPattern regular expression} or {@link\n",
        "39": " * #on(CharMatcher) CharMatcher} instance. Or, instead of using a separator at\n",
        "40": " * all, a splitter can extract adjacent substrings of a given {@linkplain\n",
        "41": " * #fixedLength fixed length}.\n",
        "42": " *\n",
        "43": " * <p>For example, this expression: <pre>   {@code\n",
        "44": " *\n",
        "45": " *   Splitter.on(',').split(\"foo,bar,qux\")}</pre>\n",
        "46": " *\n",
        "47": " * ... produces an {@code Iterable} containing {@code \"foo\"}, {@code \"bar\"} and\n",
        "48": " * {@code \"qux\"}, in that order.\n",
        "49": " *\n",
        "50": " * <p>By default, {@code Splitter}'s behavior is simplistic and unassuming. The\n",
        "51": " * following expression: <pre>   {@code\n",
        "52": " *\n",
        "53": " *   Splitter.on(',').split(\" foo,,,  bar ,\")}</pre>\n",
        "54": " *\n",
        "55": " * ... yields the substrings {@code [\" foo\", \"\", \"\", \"  bar \", \"\"]}. If this\n",
        "56": " * is not the desired behavior, use configuration methods to obtain a <i>new</i>\n",
        "57": " * splitter instance with modified behavior: <pre>   {@code\n",
        "58": " *\n",
        "59": " *   private static final Splitter MY_SPLITTER = Splitter.on(',')\n",
        "60": " *       .trimResults()\n",
        "61": " *       .omitEmptyStrings();}</pre>\n",
        "62": " *\n",
        "63": " * <p>Now {@code MY_SPLITTER.split(\"foo,,,  bar ,\")} returns just {@code [\"foo\",\n",
        "64": " * \"bar\"]}. Note that the order in which these configuration methods are called\n",
        "65": " * is never significant.\n",
        "66": " *\n",
        "67": " * <p><b>Warning:</b> Splitter instances are immutable. Invoking a configuration\n",
        "68": " * method has no effect on the receiving instance; you must store and use the\n",
        "69": " * new splitter instance it returns instead. <pre>   {@code\n",
        "70": " *\n",
        "71": " *   // Do NOT do this\n",
        "72": " *   Splitter splitter = Splitter.on('/');\n",
        "73": " *   splitter.trimResults(); // does nothing!\n",
        "74": " *   return splitter.split(\"wrong / wrong / wrong\");}</pre>\n",
        "75": " *\n",
        "76": " * <p>For separator-based splitters that do not use {@code omitEmptyStrings}, an\n",
        "77": " * input string containing {@code n} occurrences of the separator naturally\n",
        "78": " * yields an iterable of size {@code n + 1}. So if the separator does not occur\n",
        "79": " * anywhere in the input, a single substring is returned containing the entire\n",
        "80": " * input. Consequently, all splitters split the empty string to {@code [\"\"]}\n",
        "81": " * (note: even fixed-length splitters).\n",
        "82": " *\n",
        "83": " * <p>Splitter instances are thread-safe immutable, and are therefore safe to\n",
        "84": " * store as {@code static final} constants.\n",
        "85": " *\n",
        "86": " * <p>The {@link Joiner} class provides the inverse operation to splitting, but\n",
        "87": " * note that a round-trip between the two should be assumed to be lossy.\n",
        "88": " *\n",
        "89": " * <p>See the Guava User Guide article on <a href=\n",
        "90": " * \"https://github.com/google/guava/wiki/StringsExplained#splitter\">\n",
        "91": " * {@code Splitter}</a>.\n",
        "92": " *\n",
        "93": " * @author Julien Silland\n",
        "94": " * @author Jesse Wilson\n",
        "95": " * @author Kevin Bourrillion\n",
        "96": " * @author Louis Wasserman\n",
        "97": " * @since 1.0\n",
        "98": " */\n",
        "99": "@GwtCompatible(emulated = true)\n",
        "100": "public final class Splitter {\n",
        "101": "  private final CharMatcher trimmer;\n",
        "102": "  private final boolean omitEmptyStrings;\n",
        "103": "  private final Strategy strategy;\n",
        "104": "  private final int limit;\n",
        "105": "\n",
        "106": "  private Splitter(Strategy strategy) {\n",
        "107": "    this(strategy, false, CharMatcher.NONE, Integer.MAX_VALUE);\n",
        "108": "  }\n",
        "109": "\n",
        "110": "  private Splitter(Strategy strategy, boolean omitEmptyStrings, CharMatcher trimmer, int limit) {\n",
        "111": "    this.strategy = strategy;\n",
        "112": "    this.omitEmptyStrings = omitEmptyStrings;\n",
        "113": "    this.trimmer = trimmer;\n",
        "114": "    this.limit = limit;\n",
        "115": "  }\n",
        "116": "\n",
        "117": "  /**\n",
        "118": "   * Returns a splitter that uses the given single-character separator. For\n",
        "119": "   * example, {@code Splitter.on(',').split(\"foo,,bar\")} returns an iterable\n",
        "120": "   * containing {@code [\"foo\", \"\", \"bar\"]}.\n",
        "121": "   *\n",
        "122": "   * @param separator the character to recognize as a separator\n",
        "123": "   * @return a splitter, with default settings, that recognizes that separator\n",
        "124": "   */\n",
        "125": "  @CheckReturnValue\n",
        "126": "  public static Splitter on(char separator) {\n",
        "127": "    return on(CharMatcher.is(separator));\n",
        "128": "  }\n",
        "129": "\n",
        "130": "  /**\n",
        "131": "   * Returns a splitter that considers any single character matched by the\n",
        "132": "   * given {@code CharMatcher} to be a separator. For example, {@code\n",
        "133": "   * Splitter.on(CharMatcher.anyOf(\";,\")).split(\"foo,;bar,quux\")} returns an\n",
        "134": "   * iterable containing {@code [\"foo\", \"\", \"bar\", \"quux\"]}.\n",
        "135": "   *\n",
        "136": "   * @param separatorMatcher a {@link CharMatcher} that determines whether a\n",
        "137": "   *     character is a separator\n",
        "138": "   * @return a splitter, with default settings, that uses this matcher\n",
        "139": "   */\n",
        "140": "  @CheckReturnValue\n",
        "141": "  public static Splitter on(final CharMatcher separatorMatcher) {\n",
        "142": "    checkNotNull(separatorMatcher);\n",
        "143": "\n",
        "144": "    return new Splitter(\n",
        "145": "        new Strategy() {\n",
        "146": "          @Override\n",
        "147": "          public SplittingIterator iterator(Splitter splitter, final CharSequence toSplit) {\n",
        "148": "            return new SplittingIterator(splitter, toSplit) {\n",
        "149": "              @Override\n",
        "150": "              int separatorStart(int start) {\n",
        "151": "                return separatorMatcher.indexIn(toSplit, start);\n",
        "152": "              }\n",
        "153": "\n",
        "154": "              @Override\n",
        "155": "              int separatorEnd(int separatorPosition) {\n",
        "156": "                return separatorPosition + 1;\n",
        "157": "              }\n",
        "158": "            };\n",
        "159": "          }\n",
        "160": "        });\n",
        "161": "  }\n",
        "162": "\n",
        "163": "  /**\n",
        "164": "   * Returns a splitter that uses the given fixed string as a separator. For\n",
        "165": "   * example, {@code Splitter.on(\", \").split(\"foo, bar,baz\")} returns an\n",
        "166": "   * iterable containing {@code [\"foo\", \"bar,baz\"]}.\n",
        "167": "   *\n",
        "168": "   * @param separator the literal, nonempty string to recognize as a separator\n",
        "169": "   * @return a splitter, with default settings, that recognizes that separator\n",
        "170": "   */\n",
        "171": "  @CheckReturnValue\n",
        "172": "  public static Splitter on(final String separator) {\n",
        "173": "    checkArgument(separator.length() != 0, \"The separator may not be the empty string.\");\n",
        "174": "    if (separator.length() == 1) {\n",
        "175": "      return Splitter.on(separator.charAt(0));\n",
        "176": "    }\n",
        "177": "    return new Splitter(\n",
        "178": "        new Strategy() {\n",
        "179": "          @Override\n",
        "180": "          public SplittingIterator iterator(Splitter splitter, CharSequence toSplit) {\n",
        "181": "            return new SplittingIterator(splitter, toSplit) {\n",
        "182": "              @Override\n",
        "183": "              public int separatorStart(int start) {\n",
        "184": "                int separatorLength = separator.length();\n",
        "185": "\n",
        "186": "                positions:\n",
        "187": "                for (int p = start, last = toSplit.length() - separatorLength; p <= last; p++) {\n",
        "188": "                  for (int i = 0; i < separatorLength; i++) {\n",
        "189": "                    if (toSplit.charAt(i + p) != separator.charAt(i)) {\n",
        "190": "                      continue positions;\n",
        "191": "                    }\n",
        "192": "                  }\n",
        "193": "                  return p;\n",
        "194": "                }\n",
        "195": "                return -1;\n",
        "196": "              }\n",
        "197": "\n",
        "198": "              @Override\n",
        "199": "              public int separatorEnd(int separatorPosition) {\n",
        "200": "                return separatorPosition + separator.length();\n",
        "201": "              }\n",
        "202": "            };\n",
        "203": "          }\n",
        "204": "        });\n",
        "205": "  }\n",
        "206": "\n",
        "207": "  /**\n",
        "208": "   * Returns a splitter that divides strings into pieces of the given length.\n",
        "209": "   * For example, {@code Splitter.fixedLength(2).split(\"abcde\")} returns an\n",
        "210": "   * iterable containing {@code [\"ab\", \"cd\", \"e\"]}. The last piece can be\n",
        "211": "   * smaller than {@code length} but will never be empty.\n",
        "212": "   *\n",
        "213": "   * <p><b>Exception:</b> for consistency with separator-based splitters, {@code\n",
        "214": "   * split(\"\")} does not yield an empty iterable, but an iterable containing\n",
        "215": "   * {@code \"\"}. This is the only case in which {@code\n",
        "216": "   * Iterables.size(split(input))} does not equal {@code\n",
        "217": "   * IntMath.divide(input.length(), length, CEILING)}. To avoid this behavior,\n",
        "218": "   * use {@code omitEmptyStrings}.\n",
        "219": "   *\n",
        "220": "   * @param length the desired length of pieces after splitting, a positive\n",
        "221": "   *     integer\n",
        "222": "   * @return a splitter, with default settings, that can split into fixed sized\n",
        "223": "   *     pieces\n",
        "224": "   * @throws IllegalArgumentException if {@code length} is zero or negative\n",
        "225": "   */\n",
        "226": "  @CheckReturnValue\n",
        "227": "  public static Splitter fixedLength(final int length) {\n",
        "228": "    checkArgument(length > 0, \"The length may not be less than 1\");\n",
        "229": "\n",
        "230": "    return new Splitter(\n",
        "231": "        new Strategy() {\n",
        "232": "          @Override\n",
        "233": "          public SplittingIterator iterator(final Splitter splitter, CharSequence toSplit) {\n",
        "234": "            return new SplittingIterator(splitter, toSplit) {\n",
        "235": "              @Override\n",
        "236": "              public int separatorStart(int start) {\n",
        "237": "                int nextChunkStart = start + length;\n",
        "238": "                return (nextChunkStart < toSplit.length() ? nextChunkStart : -1);\n",
        "239": "              }\n",
        "240": "\n",
        "241": "              @Override\n",
        "242": "              public int separatorEnd(int separatorPosition) {\n",
        "243": "                return separatorPosition;\n",
        "244": "              }\n",
        "245": "            };\n",
        "246": "          }\n",
        "247": "        });\n",
        "248": "  }\n",
        "249": "\n",
        "250": "  /**\n",
        "251": "   * Returns a splitter that behaves equivalently to {@code this} splitter, but\n",
        "252": "   * automatically omits empty strings from the results. For example, {@code\n",
        "253": "   * Splitter.on(',').omitEmptyStrings().split(\",a,,,b,c,,\")} returns an\n",
        "254": "   * iterable containing only {@code [\"a\", \"b\", \"c\"]}.\n",
        "255": "   *\n",
        "256": "   * <p>If either {@code trimResults} option is also specified when creating a\n",
        "257": "   * splitter, that splitter always trims results first before checking for\n",
        "258": "   * emptiness. So, for example, {@code\n",
        "259": "   * Splitter.on(':').omitEmptyStrings().trimResults().split(\": : : \")} returns\n",
        "260": "   * an empty iterable.\n",
        "261": "   *\n",
        "262": "   * <p>Note that it is ordinarily not possible for {@link #split(CharSequence)}\n",
        "263": "   * to return an empty iterable, but when using this option, it can (if the\n",
        "264": "   * input sequence consists of nothing but separators).\n",
        "265": "   *\n",
        "266": "   * @return a splitter with the desired configuration\n",
        "267": "   */\n",
        "268": "  @CheckReturnValue\n",
        "269": "  public Splitter omitEmptyStrings() {\n",
        "270": "    return new Splitter(strategy, true, trimmer, limit);\n",
        "271": "  }\n",
        "272": "\n",
        "273": "  /**\n",
        "274": "   * Returns a splitter that behaves equivalently to {@code this} splitter but\n",
        "275": "   * stops splitting after it reaches the limit.\n",
        "276": "   * The limit defines the maximum number of items returned by the iterator, or\n",
        "277": "   * the maximum size of the list returned by {@link #splitToList}.\n",
        "278": "   *\n",
        "279": "   * <p>For example,\n",
        "280": "   * {@code Splitter.on(',').limit(3).split(\"a,b,c,d\")} returns an iterable\n",
        "281": "   * containing {@code [\"a\", \"b\", \"c,d\"]}.  When omitting empty strings, the\n",
        "282": "   * omitted strings do no count.  Hence,\n",
        "283": "   * {@code Splitter.on(',').limit(3).omitEmptyStrings().split(\"a,,,b,,,c,d\")}\n",
        "284": "   * returns an iterable containing {@code [\"a\", \"b\", \"c,d\"}.\n",
        "285": "   * When trim is requested, all entries, including the last are trimmed.  Hence\n",
        "286": "   * {@code Splitter.on(',').limit(3).trimResults().split(\" a , b , c , d \")}\n",
        "287": "   * results in {@code [\"a\", \"b\", \"c , d\"]}.\n",
        "288": "   *\n",
        "289": "   * @param limit the maximum number of items returned\n",
        "290": "   * @return a splitter with the desired configuration\n",
        "291": "   * @since 9.0\n",
        "292": "   */\n",
        "293": "  @CheckReturnValue\n",
        "294": "  public Splitter limit(int limit) {\n",
        "295": "    checkArgument(limit > 0, \"must be greater than zero: %s\", limit);\n",
        "296": "    return new Splitter(strategy, omitEmptyStrings, trimmer, limit);\n",
        "297": "  }\n",
        "298": "\n",
        "299": "  /**\n",
        "300": "   * Returns a splitter that behaves equivalently to {@code this} splitter, but\n",
        "301": "   * automatically removes leading and trailing {@linkplain\n",
        "302": "   * CharMatcher#WHITESPACE whitespace} from each returned substring; equivalent\n",
        "303": "   * to {@code trimResults(CharMatcher.WHITESPACE)}. For example, {@code\n",
        "304": "   * Splitter.on(',').trimResults().split(\" a, b ,c \")} returns an iterable\n",
        "305": "   * containing {@code [\"a\", \"b\", \"c\"]}.\n",
        "306": "   *\n",
        "307": "   * @return a splitter with the desired configuration\n",
        "308": "   */\n",
        "309": "  @CheckReturnValue\n",
        "310": "  public Splitter trimResults() {\n",
        "311": "    return trimResults(CharMatcher.WHITESPACE);\n",
        "312": "  }\n",
        "313": "\n",
        "314": "  /**\n",
        "315": "   * Returns a splitter that behaves equivalently to {@code this} splitter, but\n",
        "316": "   * removes all leading or trailing characters matching the given {@code\n",
        "317": "   * CharMatcher} from each returned substring. For example, {@code\n",
        "318": "   * Splitter.on(',').trimResults(CharMatcher.is('_')).split(\"_a ,_b_ ,c__\")}\n",
        "319": "   * returns an iterable containing {@code [\"a \", \"b_ \", \"c\"]}.\n",
        "320": "   *\n",
        "321": "   * @param trimmer a {@link CharMatcher} that determines whether a character\n",
        "322": "   *     should be removed from the beginning/end of a subsequence\n",
        "323": "   * @return a splitter with the desired configuration\n",
        "324": "   */\n",
        "325": "  // TODO(kevinb): throw if a trimmer was already specified!\n",
        "326": "  @CheckReturnValue\n",
        "327": "  public Splitter trimResults(CharMatcher trimmer) {\n",
        "328": "    checkNotNull(trimmer);\n",
        "329": "    return new Splitter(strategy, omitEmptyStrings, trimmer, limit);\n",
        "330": "  }\n",
        "331": "\n",
        "332": "  /**\n",
        "333": "   * Splits {@code sequence} into string components and makes them available\n",
        "334": "   * through an {@link Iterator}, which may be lazily evaluated. If you want\n",
        "335": "   * an eagerly computed {@link List}, use {@link #splitToList(CharSequence)}.\n",
        "336": "   *\n",
        "337": "   * @param sequence the sequence of characters to split\n",
        "338": "   * @return an iteration over the segments split from the parameter.\n",
        "339": "   */\n",
        "340": "  @CheckReturnValue\n",
        "341": "  public Iterable<String> split(final CharSequence sequence) {\n",
        "342": "    checkNotNull(sequence);\n",
        "343": "\n",
        "344": "    return new Iterable<String>() {\n",
        "345": "      @Override\n",
        "346": "      public Iterator<String> iterator() {\n",
        "347": "        return splittingIterator(sequence);\n",
        "348": "      }\n",
        "349": "\n",
        "350": "      @Override\n",
        "351": "      public String toString() {\n",
        "352": "        return Joiner.on(\", \")\n",
        "353": "            .appendTo(new StringBuilder().append('['), this)\n",
        "354": "            .append(']')\n",
        "355": "            .toString();\n",
        "356": "      }\n",
        "357": "    };\n",
        "358": "  }\n",
        "359": "\n",
        "360": "  private Iterator<String> splittingIterator(CharSequence sequence) {\n",
        "361": "    return strategy.iterator(this, sequence);\n",
        "362": "  }\n",
        "363": "\n",
        "364": "  /**\n",
        "365": "   * Splits {@code sequence} into string components and returns them as\n",
        "366": "   * an immutable list. If you want an {@link Iterable} which may be lazily\n",
        "367": "   * evaluated, use {@link #split(CharSequence)}.\n",
        "368": "   *\n",
        "369": "   * @param sequence the sequence of characters to split\n",
        "370": "   * @return an immutable list of the segments split from the parameter\n",
        "371": "   * @since 15.0\n",
        "372": "   */\n",
        "373": "  @CheckReturnValue\n",
        "374": "  @Beta\n",
        "375": "  public List<String> splitToList(CharSequence sequence) {\n",
        "376": "    checkNotNull(sequence);\n",
        "377": "\n",
        "378": "    Iterator<String> iterator = splittingIterator(sequence);\n",
        "379": "    List<String> result = new ArrayList<String>();\n",
        "380": "\n",
        "381": "    while (iterator.hasNext()) {\n",
        "382": "      result.add(iterator.next());\n",
        "383": "    }\n",
        "384": "\n",
        "385": "    return Collections.unmodifiableList(result);\n",
        "386": "  }\n",
        "387": "\n",
        "388": "  /**\n",
        "389": "   * Returns a {@code MapSplitter} which splits entries based on this splitter,\n",
        "390": "   * and splits entries into keys and values using the specified separator.\n",
        "391": "   *\n",
        "392": "   * @since 10.0\n",
        "393": "   */\n",
        "394": "  @CheckReturnValue\n",
        "395": "  @Beta\n",
        "396": "  public MapSplitter withKeyValueSeparator(String separator) {\n",
        "397": "    return withKeyValueSeparator(on(separator));\n",
        "398": "  }\n",
        "399": "\n",
        "400": "  /**\n",
        "401": "   * Returns a {@code MapSplitter} which splits entries based on this splitter,\n",
        "402": "   * and splits entries into keys and values using the specified separator.\n",
        "403": "   *\n",
        "404": "   * @since 14.0\n",
        "405": "   */\n",
        "406": "  @CheckReturnValue\n",
        "407": "  @Beta\n",
        "408": "  public MapSplitter withKeyValueSeparator(char separator) {\n",
        "409": "    return withKeyValueSeparator(on(separator));\n",
        "410": "  }\n",
        "411": "\n",
        "412": "  /**\n",
        "413": "   * Returns a {@code MapSplitter} which splits entries based on this splitter,\n",
        "414": "   * and splits entries into keys and values using the specified key-value\n",
        "415": "   * splitter.\n",
        "416": "   *\n",
        "417": "   * @since 10.0\n",
        "418": "   */\n",
        "419": "  @CheckReturnValue\n",
        "420": "  @Beta\n",
        "421": "  public MapSplitter withKeyValueSeparator(Splitter keyValueSplitter) {\n",
        "422": "    return new MapSplitter(this, keyValueSplitter);\n",
        "423": "  }\n",
        "424": "\n",
        "425": "  /**\n",
        "426": "   * An object that splits strings into maps as {@code Splitter} splits\n",
        "427": "   * iterables and lists. Like {@code Splitter}, it is thread-safe and\n",
        "428": "   * immutable.\n",
        "429": "   *\n",
        "430": "   * @since 10.0\n",
        "431": "   */\n",
        "432": "  @Beta\n",
        "433": "  public static final class MapSplitter {\n",
        "434": "    private static final String INVALID_ENTRY_MESSAGE = \"Chunk [%s] is not a valid entry\";\n",
        "435": "    private final Splitter outerSplitter;\n",
        "436": "    private final Splitter entrySplitter;\n",
        "437": "\n",
        "438": "    private MapSplitter(Splitter outerSplitter, Splitter entrySplitter) {\n",
        "439": "      this.outerSplitter = outerSplitter; // only \"this\" is passed\n",
        "440": "      this.entrySplitter = checkNotNull(entrySplitter);\n",
        "441": "    }\n",
        "442": "\n",
        "443": "    /**\n",
        "444": "     * Splits {@code sequence} into substrings, splits each substring into\n",
        "445": "     * an entry, and returns an unmodifiable map with each of the entries. For\n",
        "446": "     * example, <code>\n",
        "447": "     * Splitter.on(';').trimResults().withKeyValueSeparator(\"=>\")\n",
        "448": "     * .split(\"a=>b ; c=>b\")\n",
        "449": "     * </code> will return a mapping from {@code \"a\"} to {@code \"b\"} and\n",
        "450": "     * {@code \"c\"} to {@code b}.\n",
        "451": "     *\n",
        "452": "     * <p>The returned map preserves the order of the entries from\n",
        "453": "     * {@code sequence}.\n",
        "454": "     *\n",
        "455": "     * @throws IllegalArgumentException if the specified sequence does not split\n",
        "456": "     *         into valid map entries, or if there are duplicate keys\n",
        "457": "     */\n",
        "458": "    @CheckReturnValue\n",
        "459": "    public Map<String, String> split(CharSequence sequence) {\n",
        "460": "      Map<String, String> map = new LinkedHashMap<String, String>();\n",
        "461": "      for (String entry : outerSplitter.split(sequence)) {\n",
        "462": "        Iterator<String> entryFields = entrySplitter.splittingIterator(entry);\n",
        "463": "\n",
        "464": "        checkArgument(entryFields.hasNext(), INVALID_ENTRY_MESSAGE, entry);\n",
        "465": "        String key = entryFields.next();\n",
        "466": "        checkArgument(!map.containsKey(key), \"Duplicate key [%s] found.\", key);\n",
        "467": "\n",
        "468": "        checkArgument(entryFields.hasNext(), INVALID_ENTRY_MESSAGE, entry);\n",
        "469": "        String value = entryFields.next();\n",
        "470": "        map.put(key, value);\n",
        "471": "\n",
        "472": "        checkArgument(!entryFields.hasNext(), INVALID_ENTRY_MESSAGE, entry);\n",
        "473": "      }\n",
        "474": "      return Collections.unmodifiableMap(map);\n",
        "475": "    }\n",
        "476": "  }\n",
        "477": "\n",
        "478": "  private interface Strategy {\n",
        "479": "    Iterator<String> iterator(Splitter splitter, CharSequence toSplit);\n",
        "480": "  }\n",
        "481": "\n",
        "482": "  private abstract static class SplittingIterator extends AbstractIterator<String> {\n",
        "483": "    final CharSequence toSplit;\n",
        "484": "    final CharMatcher trimmer;\n",
        "485": "    final boolean omitEmptyStrings;\n",
        "486": "\n",
        "487": "    /**\n",
        "488": "     * Returns the first index in {@code toSplit} at or after {@code start}\n",
        "489": "     * that contains the separator.\n",
        "490": "     */\n",
        "491": "    abstract int separatorStart(int start);\n",
        "492": "\n",
        "493": "    /**\n",
        "494": "     * Returns the first index in {@code toSplit} after {@code\n",
        "495": "     * separatorPosition} that does not contain a separator. This method is only\n",
        "496": "     * invoked after a call to {@code separatorStart}.\n",
        "497": "     */\n",
        "498": "    abstract int separatorEnd(int separatorPosition);\n",
        "499": "\n",
        "500": "    int offset = 0;\n",
        "501": "    int limit;\n",
        "502": "\n",
        "503": "    protected SplittingIterator(Splitter splitter, CharSequence toSplit) {\n",
        "504": "      this.trimmer = splitter.trimmer;\n",
        "505": "      this.omitEmptyStrings = splitter.omitEmptyStrings;\n",
        "506": "      this.limit = splitter.limit;\n",
        "507": "      this.toSplit = toSplit;\n",
        "508": "    }\n",
        "509": "\n",
        "510": "    @Override\n",
        "511": "    protected String computeNext() {\n",
        "512": "      /*\n",
        "513": "       * The returned string will be from the end of the last match to the\n",
        "514": "       * beginning of the next one. nextStart is the start position of the\n",
        "515": "       * returned substring, while offset is the place to start looking for a\n",
        "516": "       * separator.\n",
        "517": "       */\n",
        "518": "      int nextStart = offset;\n",
        "519": "      while (offset != -1) {\n",
        "520": "        int start = nextStart;\n",
        "521": "        int end;\n",
        "522": "\n",
        "523": "        int separatorPosition = separatorStart(offset);\n",
        "524": "        if (separatorPosition == -1) {\n",
        "525": "          end = toSplit.length();\n",
        "526": "          offset = -1;\n",
        "527": "        } else {\n",
        "528": "          end = separatorPosition;\n",
        "529": "          offset = separatorEnd(separatorPosition);\n",
        "530": "        }\n",
        "531": "        if (offset == nextStart) {\n",
        "532": "          /*\n",
        "533": "           * This occurs when some pattern has an empty match, even if it\n",
        "534": "           * doesn't match the empty string -- for example, if it requires\n",
        "535": "           * lookahead or the like. The offset must be increased to look for\n",
        "536": "           * separators beyond this point, without changing the start position\n",
        "537": "           * of the next returned substring -- so nextStart stays the same.\n",
        "538": "           */\n",
        "539": "          offset++;\n",
        "540": "          if (offset >= toSplit.length()) {\n",
        "541": "            offset = -1;\n",
        "542": "          }\n",
        "543": "          continue;\n",
        "544": "        }\n",
        "545": "\n",
        "546": "        while (start < end && trimmer.matches(toSplit.charAt(start))) {\n",
        "547": "          start++;\n",
        "548": "        }\n",
        "549": "        while (end > start && trimmer.matches(toSplit.charAt(end - 1))) {\n",
        "550": "          end--;\n",
        "551": "        }\n",
        "552": "\n",
        "553": "        if (omitEmptyStrings && start == end) {\n",
        "554": "          // Don't include the (unused) separator in next split string.\n",
        "555": "          nextStart = offset;\n",
        "556": "          continue;\n",
        "557": "        }\n",
        "558": "\n",
        "559": "        if (limit == 1) {\n",
        "560": "          // The limit has been reached, return the rest of the string as the\n",
        "561": "          // final item.  This is tested after empty string removal so that\n",
        "562": "          // empty strings do not count towards the limit.\n",
        "563": "          end = toSplit.length();\n",
        "564": "          offset = -1;\n",
        "565": "          // Since we may have changed the end, we need to trim it again.\n",
        "566": "          while (end > start && trimmer.matches(toSplit.charAt(end - 1))) {\n",
        "567": "            end--;\n",
        "568": "          }\n",
        "569": "        } else {\n",
        "570": "          limit--;\n",
        "571": "        }\n",
        "572": "\n",
        "573": "        return toSplit.subSequence(start, end).toString();\n",
        "574": "      }\n",
        "575": "      return endOfData();\n",
        "576": "    }\n",
        "577": "  }\n",
        "578": "}\n",
        "579": "\n"
    }
}