{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.primitives;\n",
        "18": "\n",
        "19": "import static java.lang.Long.MAX_VALUE;\n",
        "20": "import static java.lang.Long.MIN_VALUE;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import com.google.common.base.Converter;\n",
        "24": "import com.google.common.collect.testing.Helpers;\n",
        "25": "\n",
        "26": "import junit.framework.TestCase;\n",
        "27": "\n",
        "28": "import java.math.BigInteger;\n",
        "29": "import java.util.Arrays;\n",
        "30": "import java.util.Collection;\n",
        "31": "import java.util.Collections;\n",
        "32": "import java.util.Comparator;\n",
        "33": "import java.util.List;\n",
        "34": "import java.util.Random;\n",
        "35": "\n",
        "36": "/**\n",
        "37": " * Unit test for {@link Longs}.\n",
        "38": " *\n",
        "39": " * @author Kevin Bourrillion\n",
        "40": " */\n",
        "41": "@GwtCompatible(emulated = true)\n",
        "42": "@SuppressWarnings(\"cast\") // redundant casts are intentional and harmless\n",
        "43": "public class LongsTest extends TestCase {\n",
        "44": "  private static final long[] EMPTY = {};\n",
        "45": "  private static final long[] ARRAY1 = {(long) 1};\n",
        "46": "  private static final long[] ARRAY234\n",
        "47": "      = {(long) 2, (long) 3, (long) 4};\n",
        "48": "\n",
        "49": "  private static final long[] VALUES =\n",
        "50": "      { MIN_VALUE, (long) -1, (long) 0, (long) 1, MAX_VALUE };\n",
        "51": "\n",
        "52": "  public void testCompare() {\n",
        "53": "    for (long x : VALUES) {\n",
        "54": "      for (long y : VALUES) {\n",
        "55": "        // note: spec requires only that the sign is the same\n",
        "56": "        assertEquals(x + \", \" + y,\n",
        "57": "                     Long.valueOf(x).compareTo(y),\n",
        "58": "                     Longs.compare(x, y));\n",
        "59": "      }\n",
        "60": "    }\n",
        "61": "  }\n",
        "62": "\n",
        "63": "  public void testContains() {\n",
        "64": "    assertFalse(Longs.contains(EMPTY, (long) 1));\n",
        "65": "    assertFalse(Longs.contains(ARRAY1, (long) 2));\n",
        "66": "    assertFalse(Longs.contains(ARRAY234, (long) 1));\n",
        "67": "    assertTrue(Longs.contains(new long[] {(long) -1}, (long) -1));\n",
        "68": "    assertTrue(Longs.contains(ARRAY234, (long) 2));\n",
        "69": "    assertTrue(Longs.contains(ARRAY234, (long) 3));\n",
        "70": "    assertTrue(Longs.contains(ARRAY234, (long) 4));\n",
        "71": "  }\n",
        "72": "\n",
        "73": "  public void testIndexOf() {\n",
        "74": "    assertEquals(-1, Longs.indexOf(EMPTY, (long) 1));\n",
        "75": "    assertEquals(-1, Longs.indexOf(ARRAY1, (long) 2));\n",
        "76": "    assertEquals(-1, Longs.indexOf(ARRAY234, (long) 1));\n",
        "77": "    assertEquals(0, Longs.indexOf(\n",
        "78": "        new long[] {(long) -1}, (long) -1));\n",
        "79": "    assertEquals(0, Longs.indexOf(ARRAY234, (long) 2));\n",
        "80": "    assertEquals(1, Longs.indexOf(ARRAY234, (long) 3));\n",
        "81": "    assertEquals(2, Longs.indexOf(ARRAY234, (long) 4));\n",
        "82": "    assertEquals(1, Longs.indexOf(\n",
        "83": "        new long[] { (long) 2, (long) 3, (long) 2, (long) 3 },\n",
        "84": "        (long) 3));\n",
        "85": "  }\n",
        "86": "\n",
        "87": "  public void testIndexOf_arrayTarget() {\n",
        "88": "    assertEquals(0, Longs.indexOf(EMPTY, EMPTY));\n",
        "89": "    assertEquals(0, Longs.indexOf(ARRAY234, EMPTY));\n",
        "90": "    assertEquals(-1, Longs.indexOf(EMPTY, ARRAY234));\n",
        "91": "    assertEquals(-1, Longs.indexOf(ARRAY234, ARRAY1));\n",
        "92": "    assertEquals(-1, Longs.indexOf(ARRAY1, ARRAY234));\n",
        "93": "    assertEquals(0, Longs.indexOf(ARRAY1, ARRAY1));\n",
        "94": "    assertEquals(0, Longs.indexOf(ARRAY234, ARRAY234));\n",
        "95": "    assertEquals(0, Longs.indexOf(\n",
        "96": "        ARRAY234, new long[] { (long) 2, (long) 3 }));\n",
        "97": "    assertEquals(1, Longs.indexOf(\n",
        "98": "        ARRAY234, new long[] { (long) 3, (long) 4 }));\n",
        "99": "    assertEquals(1, Longs.indexOf(ARRAY234, new long[] { (long) 3 }));\n",
        "100": "    assertEquals(2, Longs.indexOf(ARRAY234, new long[] { (long) 4 }));\n",
        "101": "    assertEquals(1, Longs.indexOf(new long[] { (long) 2, (long) 3,\n",
        "102": "        (long) 3, (long) 3, (long) 3 },\n",
        "103": "        new long[] { (long) 3 }\n",
        "104": "    ));\n",
        "105": "    assertEquals(2, Longs.indexOf(\n",
        "106": "        new long[] { (long) 2, (long) 3, (long) 2,\n",
        "107": "            (long) 3, (long) 4, (long) 2, (long) 3},\n",
        "108": "        new long[] { (long) 2, (long) 3, (long) 4}\n",
        "109": "    ));\n",
        "110": "    assertEquals(1, Longs.indexOf(\n",
        "111": "        new long[] { (long) 2, (long) 2, (long) 3,\n",
        "112": "            (long) 4, (long) 2, (long) 3, (long) 4},\n",
        "113": "        new long[] { (long) 2, (long) 3, (long) 4}\n",
        "114": "    ));\n",
        "115": "    assertEquals(-1, Longs.indexOf(\n",
        "116": "        new long[] { (long) 4, (long) 3, (long) 2},\n",
        "117": "        new long[] { (long) 2, (long) 3, (long) 4}\n",
        "118": "    ));\n",
        "119": "  }\n",
        "120": "\n",
        "121": "  public void testLastIndexOf() {\n",
        "122": "    assertEquals(-1, Longs.lastIndexOf(EMPTY, (long) 1));\n",
        "123": "    assertEquals(-1, Longs.lastIndexOf(ARRAY1, (long) 2));\n",
        "124": "    assertEquals(-1, Longs.lastIndexOf(ARRAY234, (long) 1));\n",
        "125": "    assertEquals(0, Longs.lastIndexOf(\n",
        "126": "        new long[] {(long) -1}, (long) -1));\n",
        "127": "    assertEquals(0, Longs.lastIndexOf(ARRAY234, (long) 2));\n",
        "128": "    assertEquals(1, Longs.lastIndexOf(ARRAY234, (long) 3));\n",
        "129": "    assertEquals(2, Longs.lastIndexOf(ARRAY234, (long) 4));\n",
        "130": "    assertEquals(3, Longs.lastIndexOf(\n",
        "131": "        new long[] { (long) 2, (long) 3, (long) 2, (long) 3 },\n",
        "132": "        (long) 3));\n",
        "133": "  }\n",
        "134": "\n",
        "135": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "136": "  public void testMax_noArgs() {\n",
        "137": "    try {\n",
        "138": "      Longs.max();\n",
        "139": "      fail();\n",
        "140": "    } catch (IllegalArgumentException expected) {\n",
        "141": "    }\n",
        "142": "  }\n",
        "143": "\n",
        "144": "  public void testMax() {\n",
        "145": "    assertEquals(MIN_VALUE, Longs.max(MIN_VALUE));\n",
        "146": "    assertEquals(MAX_VALUE, Longs.max(MAX_VALUE));\n",
        "147": "    assertEquals((long) 9, Longs.max(\n",
        "148": "        (long) 8, (long) 6, (long) 7,\n",
        "149": "        (long) 5, (long) 3, (long) 0, (long) 9));\n",
        "150": "  }\n",
        "151": "\n",
        "152": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "153": "  public void testMin_noArgs() {\n",
        "154": "    try {\n",
        "155": "      Longs.min();\n",
        "156": "      fail();\n",
        "157": "    } catch (IllegalArgumentException expected) {\n",
        "158": "    }\n",
        "159": "  }\n",
        "160": "\n",
        "161": "  public void testMin() {\n",
        "162": "    assertEquals(MIN_VALUE, Longs.min(MIN_VALUE));\n",
        "163": "    assertEquals(MAX_VALUE, Longs.min(MAX_VALUE));\n",
        "164": "    assertEquals((long) 0, Longs.min(\n",
        "165": "        (long) 8, (long) 6, (long) 7,\n",
        "166": "        (long) 5, (long) 3, (long) 0, (long) 9));\n",
        "167": "  }\n",
        "168": "\n",
        "169": "  public void testConcat() {\n",
        "170": "    assertTrue(Arrays.equals(EMPTY, Longs.concat()));\n",
        "171": "    assertTrue(Arrays.equals(EMPTY, Longs.concat(EMPTY)));\n",
        "172": "    assertTrue(Arrays.equals(EMPTY, Longs.concat(EMPTY, EMPTY, EMPTY)));\n",
        "173": "    assertTrue(Arrays.equals(ARRAY1, Longs.concat(ARRAY1)));\n",
        "174": "    assertNotSame(ARRAY1, Longs.concat(ARRAY1));\n",
        "175": "    assertTrue(Arrays.equals(ARRAY1, Longs.concat(EMPTY, ARRAY1, EMPTY)));\n",
        "176": "    assertTrue(Arrays.equals(\n",
        "177": "        new long[] {(long) 1, (long) 1, (long) 1},\n",
        "178": "        Longs.concat(ARRAY1, ARRAY1, ARRAY1)));\n",
        "179": "    assertTrue(Arrays.equals(\n",
        "180": "        new long[] {(long) 1, (long) 2, (long) 3, (long) 4},\n",
        "181": "        Longs.concat(ARRAY1, ARRAY234)));\n",
        "182": "  }\n",
        "183": "\n",
        "184": "  private static void assertByteArrayEquals(byte[] expected, byte[] actual) {\n",
        "185": "    assertTrue(\n",
        "186": "        \"Expected: \" + Arrays.toString(expected) + \", but got: \" + Arrays.toString(actual),\n",
        "187": "        Arrays.equals(expected, actual));\n",
        "188": "  }\n",
        "189": "\n",
        "190": "  public void testToByteArray() {\n",
        "191": "    assertByteArrayEquals(\n",
        "192": "        new byte[] {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19},\n",
        "193": "        Longs.toByteArray(0x1213141516171819L));\n",
        "194": "    assertByteArrayEquals(\n",
        "195": "        new byte[] {\n",
        "196": "            (byte) 0xFF, (byte) 0xEE, (byte) 0xDD, (byte) 0xCC,\n",
        "197": "            (byte) 0xBB, (byte) 0xAA, (byte) 0x99, (byte) 0x88},\n",
        "198": "        Longs.toByteArray(0xFFEEDDCCBBAA9988L));\n",
        "199": "  }\n",
        "200": "\n",
        "201": "  public void testFromByteArray() {\n",
        "202": "    assertEquals(0x1213141516171819L, Longs.fromByteArray(\n",
        "203": "        new byte[] {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x33}));\n",
        "204": "    assertEquals(0xFFEEDDCCBBAA9988L, Longs.fromByteArray(\n",
        "205": "        new byte[] {\n",
        "206": "            (byte) 0xFF, (byte) 0xEE, (byte) 0xDD, (byte) 0xCC,\n",
        "207": "            (byte) 0xBB, (byte) 0xAA, (byte) 0x99, (byte) 0x88}));\n",
        "208": "  }\n",
        "209": "\n",
        "210": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "211": "  public void testFromByteArrayFails() {\n",
        "212": "    try {\n",
        "213": "      Longs.fromByteArray(new byte[Longs.BYTES - 1]);\n",
        "214": "      fail();\n",
        "215": "    } catch (IllegalArgumentException expected) {\n",
        "216": "    }\n",
        "217": "  }\n",
        "218": "\n",
        "219": "  public void testFromBytes() {\n",
        "220": "    assertEquals(0x1213141516171819L, Longs.fromBytes(\n",
        "221": "        (byte) 0x12, (byte) 0x13, (byte) 0x14, (byte) 0x15,\n",
        "222": "        (byte) 0x16, (byte) 0x17, (byte) 0x18, (byte) 0x19));\n",
        "223": "    assertEquals(0xFFEEDDCCBBAA9988L, Longs.fromBytes(\n",
        "224": "        (byte) 0xFF, (byte) 0xEE, (byte) 0xDD, (byte) 0xCC,\n",
        "225": "        (byte) 0xBB, (byte) 0xAA, (byte) 0x99, (byte) 0x88));\n",
        "226": "  }\n",
        "227": "\n",
        "228": "  public void testByteArrayRoundTrips() {\n",
        "229": "    Random r = new Random(5);\n",
        "230": "    byte[] b = new byte[Longs.BYTES];\n",
        "231": "\n",
        "232": "    // total overkill, but, it takes 0.1 sec so why not...\n",
        "233": "    for (int i = 0; i < 10000; i++) {\n",
        "234": "      long num = r.nextLong();\n",
        "235": "      assertEquals(num, Longs.fromByteArray(Longs.toByteArray(num)));\n",
        "236": "\n",
        "237": "      r.nextBytes(b);\n",
        "238": "      long value = Longs.fromByteArray(b);\n",
        "239": "      assertTrue(\"\" + value, Arrays.equals(b, Longs.toByteArray(value)));\n",
        "240": "    }\n",
        "241": "  }\n",
        "242": "\n",
        "243": "  public void testEnsureCapacity() {\n",
        "244": "    assertSame(EMPTY, Longs.ensureCapacity(EMPTY, 0, 1));\n",
        "245": "    assertSame(ARRAY1, Longs.ensureCapacity(ARRAY1, 0, 1));\n",
        "246": "    assertSame(ARRAY1, Longs.ensureCapacity(ARRAY1, 1, 1));\n",
        "247": "    assertTrue(Arrays.equals(\n",
        "248": "        new long[] {(long) 1, (long) 0, (long) 0},\n",
        "249": "        Longs.ensureCapacity(ARRAY1, 2, 1)));\n",
        "250": "  }\n",
        "251": "\n",
        "252": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "253": "  public void testEnsureCapacity_fail() {\n",
        "254": "    try {\n",
        "255": "      Longs.ensureCapacity(ARRAY1, -1, 1);\n",
        "256": "      fail();\n",
        "257": "    } catch (IllegalArgumentException expected) {\n",
        "258": "    }\n",
        "259": "    try {\n",
        "260": "      // notice that this should even fail when no growth was needed\n",
        "261": "      Longs.ensureCapacity(ARRAY1, 1, -1);\n",
        "262": "      fail();\n",
        "263": "    } catch (IllegalArgumentException expected) {\n",
        "264": "    }\n",
        "265": "  }\n",
        "266": "\n",
        "267": "  public void testJoin() {\n",
        "268": "    assertEquals(\"\", Longs.join(\",\", EMPTY));\n",
        "269": "    assertEquals(\"1\", Longs.join(\",\", ARRAY1));\n",
        "270": "    assertEquals(\"1,2\", Longs.join(\",\", (long) 1, (long) 2));\n",
        "271": "    assertEquals(\"123\",\n",
        "272": "        Longs.join(\"\", (long) 1, (long) 2, (long) 3));\n",
        "273": "  }\n",
        "274": "\n",
        "275": "  public void testLexicographicalComparator() {\n",
        "276": "    List<long[]> ordered = Arrays.asList(\n",
        "277": "        new long[] {},\n",
        "278": "        new long[] {MIN_VALUE},\n",
        "279": "        new long[] {MIN_VALUE, MIN_VALUE},\n",
        "280": "        new long[] {MIN_VALUE, (long) 1},\n",
        "281": "        new long[] {(long) 1},\n",
        "282": "        new long[] {(long) 1, MIN_VALUE},\n",
        "283": "        new long[] {MAX_VALUE, MAX_VALUE - (long) 1},\n",
        "284": "        new long[] {MAX_VALUE, MAX_VALUE},\n",
        "285": "        new long[] {MAX_VALUE, MAX_VALUE, MAX_VALUE});\n",
        "286": "\n",
        "287": "    Comparator<long[]> comparator = Longs.lexicographicalComparator();\n",
        "288": "    Helpers.testComparator(comparator, ordered);\n",
        "289": "  }\n",
        "290": "\n",
        "291": "  public void testToArray() {\n",
        "292": "    // need explicit type parameter to avoid javac warning!?\n",
        "293": "    List<Long> none = Arrays.<Long>asList();\n",
        "294": "    assertTrue(Arrays.equals(EMPTY, Longs.toArray(none)));\n",
        "295": "\n",
        "296": "    List<Long> one = Arrays.asList((long) 1);\n",
        "297": "    assertTrue(Arrays.equals(ARRAY1, Longs.toArray(one)));\n",
        "298": "\n",
        "299": "    long[] array = {(long) 0, (long) 1, 0x0FF1C1AL};\n",
        "300": "\n",
        "301": "    List<Long> three = Arrays.asList((long) 0, (long) 1, 0x0FF1C1AL);\n",
        "302": "    assertTrue(Arrays.equals(array, Longs.toArray(three)));\n",
        "303": "\n",
        "304": "    assertTrue(Arrays.equals(array, Longs.toArray(Longs.asList(array))));\n",
        "305": "  }\n",
        "306": "\n",
        "307": "  public void testToArray_threadSafe() {\n",
        "308": "    for (int delta : new int[] { +1, 0, -1 }) {\n",
        "309": "      for (int i = 0; i < VALUES.length; i++) {\n",
        "310": "        List<Long> list = Longs.asList(VALUES).subList(0, i);\n",
        "311": "        Collection<Long> misleadingSize =\n",
        "312": "            Helpers.misleadingSizeCollection(delta);\n",
        "313": "        misleadingSize.addAll(list);\n",
        "314": "        long[] arr = Longs.toArray(misleadingSize);\n",
        "315": "        assertEquals(i, arr.length);\n",
        "316": "        for (int j = 0; j < i; j++) {\n",
        "317": "          assertEquals(VALUES[j], arr[j]);\n",
        "318": "        }\n",
        "319": "      }\n",
        "320": "    }\n",
        "321": "  }\n",
        "322": "\n",
        "323": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "324": "  public void testToArray_withNull() {\n",
        "325": "    List<Long> list = Arrays.asList((long) 0, (long) 1, null);\n",
        "326": "    try {\n",
        "327": "      Longs.toArray(list);\n",
        "328": "      fail();\n",
        "329": "    } catch (NullPointerException expected) {\n",
        "330": "    }\n",
        "331": "  }\n",
        "332": "\n",
        "333": "  public void testToArray_withConversion() {\n",
        "334": "    long[] array = {(long) 0, (long) 1, (long) 2};\n",
        "335": "\n",
        "336": "    List<Byte> bytes = Arrays.asList((byte) 0, (byte) 1, (byte) 2);\n",
        "337": "    List<Short> shorts = Arrays.asList((short) 0, (short) 1, (short) 2);\n",
        "338": "    List<Integer> ints = Arrays.asList(0, 1, 2);\n",
        "339": "    List<Float> floats = Arrays.asList((float) 0, (float) 1, (float) 2);\n",
        "340": "    List<Long> longs = Arrays.asList((long) 0, (long) 1, (long) 2);\n",
        "341": "    List<Double> doubles = Arrays.asList((double) 0, (double) 1, (double) 2);\n",
        "342": "\n",
        "343": "    assertTrue(Arrays.equals(array, Longs.toArray(bytes)));\n",
        "344": "    assertTrue(Arrays.equals(array, Longs.toArray(shorts)));\n",
        "345": "    assertTrue(Arrays.equals(array, Longs.toArray(ints)));\n",
        "346": "    assertTrue(Arrays.equals(array, Longs.toArray(floats)));\n",
        "347": "    assertTrue(Arrays.equals(array, Longs.toArray(longs)));\n",
        "348": "    assertTrue(Arrays.equals(array, Longs.toArray(doubles)));\n",
        "349": "  }\n",
        "350": "\n",
        "351": "  public void testAsList_isAView() {\n",
        "352": "    long[] array = {(long) 0, (long) 1};\n",
        "353": "    List<Long> list = Longs.asList(array);\n",
        "354": "    list.set(0, (long) 2);\n",
        "355": "    assertTrue(Arrays.equals(new long[] {(long) 2, (long) 1}, array));\n",
        "356": "    array[1] = (long) 3;\n",
        "357": "    assertEquals(Arrays.asList((long) 2, (long) 3), list);\n",
        "358": "  }\n",
        "359": "\n",
        "360": "  public void testAsList_toArray_roundTrip() {\n",
        "361": "    long[] array = { (long) 0, (long) 1, (long) 2 };\n",
        "362": "    List<Long> list = Longs.asList(array);\n",
        "363": "    long[] newArray = Longs.toArray(list);\n",
        "364": "\n",
        "365": "    // Make sure it returned a copy\n",
        "366": "    list.set(0, (long) 4);\n",
        "367": "    assertTrue(Arrays.equals(\n",
        "368": "        new long[] { (long) 0, (long) 1, (long) 2 }, newArray));\n",
        "369": "    newArray[1] = (long) 5;\n",
        "370": "    assertEquals((long) 1, (long) list.get(1));\n",
        "371": "  }\n",
        "372": "\n",
        "373": "  // This test stems from a real bug found by andrewk\n",
        "374": "  public void testAsList_subList_toArray_roundTrip() {\n",
        "375": "    long[] array = { (long) 0, (long) 1, (long) 2, (long) 3 };\n",
        "376": "    List<Long> list = Longs.asList(array);\n",
        "377": "    assertTrue(Arrays.equals(new long[] { (long) 1, (long) 2 },\n",
        "378": "        Longs.toArray(list.subList(1, 3))));\n",
        "379": "    assertTrue(Arrays.equals(new long[] {},\n",
        "380": "        Longs.toArray(list.subList(2, 2))));\n",
        "381": "  }\n",
        "382": "\n",
        "383": "  public void testAsListEmpty() {\n",
        "384": "    assertSame(Collections.emptyList(), Longs.asList(EMPTY));\n",
        "385": "  }\n",
        "386": "\n",
        "387": "  public void testStringConverter_convert() {\n",
        "388": "    Converter<String, Long> converter = Longs.stringConverter();\n",
        "389": "    assertEquals((Long) 1L, converter.convert(\"1\"));\n",
        "390": "    assertEquals((Long) 0L, converter.convert(\"0\"));\n",
        "391": "    assertEquals((Long) (-1L), converter.convert(\"-1\"));\n",
        "392": "    assertEquals((Long) 255L, converter.convert(\"0xff\"));\n",
        "393": "    assertEquals((Long) 255L, converter.convert(\"0xFF\"));\n",
        "394": "    assertEquals((Long) (-255L), converter.convert(\"-0xFF\"));\n",
        "395": "    assertEquals((Long) 255L, converter.convert(\"#0000FF\"));\n",
        "396": "    assertEquals((Long) 438L, converter.convert(\"0666\"));\n",
        "397": "  }\n",
        "398": "\n",
        "399": "  public void testStringConverter_convertError() {\n",
        "400": "    try {\n",
        "401": "      Longs.stringConverter().convert(\"notanumber\");\n",
        "402": "      fail();\n",
        "403": "    } catch (NumberFormatException expected) {\n",
        "404": "    }\n",
        "405": "  }\n",
        "406": "\n",
        "407": "  public void testStringConverter_nullConversions() {\n",
        "408": "    assertNull(Longs.stringConverter().convert(null));\n",
        "409": "    assertNull(Longs.stringConverter().reverse().convert(null));\n",
        "410": "  }\n",
        "411": "\n",
        "412": "  public void testStringConverter_reverse() {\n",
        "413": "    Converter<String, Long> converter = Longs.stringConverter();\n",
        "414": "    assertEquals(\"1\", converter.reverse().convert(1L));\n",
        "415": "    assertEquals(\"0\", converter.reverse().convert(0L));\n",
        "416": "    assertEquals(\"-1\", converter.reverse().convert(-1L));\n",
        "417": "    assertEquals(\"255\", converter.reverse().convert(0xffL));\n",
        "418": "    assertEquals(\"255\", converter.reverse().convert(0xFFL));\n",
        "419": "    assertEquals(\"-255\", converter.reverse().convert(-0xFFL));\n",
        "420": "    assertEquals(\"438\", converter.reverse().convert(0666L));\n",
        "421": "  }\n",
        "422": "\n",
        "423": "  public void testTryParse() {\n",
        "424": "    tryParseAndAssertEquals(0L, \"0\");\n",
        "425": "    tryParseAndAssertEquals(0L, \"-0\");\n",
        "426": "    tryParseAndAssertEquals(1L, \"1\");\n",
        "427": "    tryParseAndAssertEquals(-1L, \"-1\");\n",
        "428": "    tryParseAndAssertEquals(8900L, \"8900\");\n",
        "429": "    tryParseAndAssertEquals(-8900L, \"-8900\");\n",
        "430": "    tryParseAndAssertEquals(MAX_VALUE, Long.toString(MAX_VALUE));\n",
        "431": "    tryParseAndAssertEquals(MIN_VALUE, Long.toString(MIN_VALUE));\n",
        "432": "    assertNull(Longs.tryParse(\"\"));\n",
        "433": "    assertNull(Longs.tryParse(\"-\"));\n",
        "434": "    assertNull(Longs.tryParse(\"+1\"));\n",
        "435": "    assertNull(Longs.tryParse(\"999999999999999999999999\"));\n",
        "436": "    assertNull(\"Max long + 1\",\n",
        "437": "        Longs.tryParse(BigInteger.valueOf(MAX_VALUE).add(BigInteger.ONE).toString()));\n",
        "438": "    assertNull(\"Max long * 10\",\n",
        "439": "        Longs.tryParse(BigInteger.valueOf(MAX_VALUE).multiply(BigInteger.TEN).toString()));\n",
        "440": "    assertNull(\"Min long - 1\",\n",
        "441": "        Longs.tryParse(BigInteger.valueOf(MIN_VALUE).subtract(BigInteger.ONE).toString()));\n",
        "442": "    assertNull(\"Min long * 10\",\n",
        "443": "        Longs.tryParse(BigInteger.valueOf(MIN_VALUE).multiply(BigInteger.TEN).toString()));\n",
        "444": "    assertNull(Longs.tryParse(\"\\u0662\\u06f3\"));\n",
        "445": "  }\n",
        "446": "\n",
        "447": "  /**\n",
        "448": "   * Applies {@link Longs#tryParse(String)} to the given string and asserts that\n",
        "449": "   * the result is as expected.\n",
        "450": "   */\n",
        "451": "  private static void tryParseAndAssertEquals(Long expected, String value) {\n",
        "452": "    assertEquals(expected, Longs.tryParse(value));\n",
        "453": "  }\n",
        "454": "\n",
        "455": "  public void testTryParse_radix() {\n",
        "456": "    for (int radix = Character.MIN_RADIX;\n",
        "457": "        radix <= Character.MAX_RADIX; radix++) {\n",
        "458": "      radixEncodeParseAndAssertEquals((long) 0, radix);\n",
        "459": "      radixEncodeParseAndAssertEquals((long) 8000, radix);\n",
        "460": "      radixEncodeParseAndAssertEquals((long) -8000, radix);\n",
        "461": "      radixEncodeParseAndAssertEquals(MAX_VALUE, radix);\n",
        "462": "      radixEncodeParseAndAssertEquals(MIN_VALUE, radix);\n",
        "463": "      assertNull(\"Radix: \" + radix, Longs.tryParse(\"999999999999999999999999\", radix));\n",
        "464": "      assertNull(\"Radix: \" + radix,\n",
        "465": "          Longs.tryParse(BigInteger.valueOf(MAX_VALUE).add(BigInteger.ONE).toString(), radix));\n",
        "466": "      assertNull(\"Radix: \" + radix,\n",
        "467": "          Longs.tryParse(BigInteger.valueOf(MIN_VALUE).subtract(BigInteger.ONE).toString(), radix));\n",
        "468": "    }\n",
        "469": "    assertNull(\"Hex string and dec parm\", Longs.tryParse(\"FFFF\", 10));\n",
        "470": "    assertEquals(\"Mixed hex case\", 65535, Longs.tryParse(\"ffFF\", 16).longValue());\n",
        "471": "  }\n",
        "472": "\n",
        "473": "  /**\n",
        "474": "   * Encodes the long as a string with given radix, then uses\n",
        "475": "   * {@link Longs#tryParse(String, int)} to parse the result. Asserts the result\n",
        "476": "   * is the same as what we started with.\n",
        "477": "   */\n",
        "478": "  private static void radixEncodeParseAndAssertEquals(Long value, int radix) {\n",
        "479": "    assertEquals(\"Radix: \" + radix, value,\n",
        "480": "        Longs.tryParse(Long.toString(value, radix), radix));\n",
        "481": "  }\n",
        "482": "\n",
        "483": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "484": "  public void testTryParse_radixTooBig() {\n",
        "485": "    try {\n",
        "486": "      Longs.tryParse(\"0\", Character.MAX_RADIX + 1);\n",
        "487": "      fail();\n",
        "488": "    } catch (IllegalArgumentException expected) {\n",
        "489": "    }\n",
        "490": "  }\n",
        "491": "\n",
        "492": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "493": "  public void testTryParse_radixTooSmall() {\n",
        "494": "    try {\n",
        "495": "      Longs.tryParse(\"0\", Character.MIN_RADIX - 1);\n",
        "496": "      fail();\n",
        "497": "    } catch (IllegalArgumentException expected) {\n",
        "498": "    }\n",
        "499": "  }\n",
        "500": "}\n",
        "501": "\n"
    }
}