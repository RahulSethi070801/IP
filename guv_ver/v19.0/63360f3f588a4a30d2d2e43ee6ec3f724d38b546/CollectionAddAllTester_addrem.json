{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.testers;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionFeature.ALLOWS_NULL_VALUES;\n",
        "20": "import static com.google.common.collect.testing.features.CollectionFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION;\n",
        "21": "import static com.google.common.collect.testing.features.CollectionFeature.RESTRICTS_ELEMENTS;\n",
        "22": "import static com.google.common.collect.testing.features.CollectionFeature.SUPPORTS_ADD;\n",
        "23": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "24": "import static java.util.Collections.singletonList;\n",
        "25": "\n",
        "26": "import com.google.common.annotations.GwtCompatible;\n",
        "27": "import com.google.common.collect.testing.AbstractCollectionTester;\n",
        "28": "import com.google.common.collect.testing.MinimalCollection;\n",
        "29": "import com.google.common.collect.testing.features.CollectionFeature;\n",
        "30": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "31": "\n",
        "32": "import java.util.ConcurrentModificationException;\n",
        "33": "import java.util.Iterator;\n",
        "34": "import java.util.List;\n",
        "35": "\n",
        "36": "/**\n",
        "37": " * A generic JUnit test which tests addAll operations on a collection. Can't be\n",
        "38": " * invoked directly; please see\n",
        "39": " * {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.\n",
        "40": " *\n",
        "41": " * @author Chris Povirk\n",
        "42": " * @author Kevin Bourrillion\n",
        "43": " */\n",
        "44": "@SuppressWarnings(\"unchecked\") // too many \"unchecked generic array creations\"\n",
        "45": "@GwtCompatible(emulated = true)\n",
        "46": "public class CollectionAddAllTester<E> extends AbstractCollectionTester<E> {\n",
        "47": "  @CollectionFeature.Require(SUPPORTS_ADD)\n",
        "48": "  public void testAddAll_supportedNothing() {\n",
        "49": "    assertFalse(\"addAll(nothing) should return false\",\n",
        "50": "        collection.addAll(emptyCollection()));\n",
        "51": "    expectUnchanged();\n",
        "52": "  }\n",
        "53": "\n",
        "54": "  @CollectionFeature.Require(absent = SUPPORTS_ADD)\n",
        "55": "  public void testAddAll_unsupportedNothing() {\n",
        "56": "    try {\n",
        "57": "      assertFalse(\"addAll(nothing) should return false or throw\",\n",
        "58": "          collection.addAll(emptyCollection()));\n",
        "59": "    } catch (UnsupportedOperationException tolerated) {\n",
        "60": "    }\n",
        "61": "    expectUnchanged();\n",
        "62": "  }\n",
        "63": "\n",
        "64": "  @CollectionFeature.Require(SUPPORTS_ADD)\n",
        "65": "  public void testAddAll_supportedNonePresent() {\n",
        "66": "    assertTrue(\"addAll(nonePresent) should return true\",\n",
        "67": "        collection.addAll(createDisjointCollection()));\n",
        "68": "    expectAdded(e3(), e4());\n",
        "69": "  }\n",
        "70": "\n",
        "71": "  @CollectionFeature.Require(absent = SUPPORTS_ADD)\n",
        "72": "  public void testAddAll_unsupportedNonePresent() {\n",
        "73": "    try {\n",
        "74": "      collection.addAll(createDisjointCollection());\n",
        "75": "      fail(\"addAll(nonePresent) should throw\");\n",
        "76": "    } catch (UnsupportedOperationException expected) {\n",
        "77": "    }\n",
        "78": "    expectUnchanged();\n",
        "79": "    expectMissing(e3(), e4());\n",
        "80": "  }\n",
        "81": "\n",
        "82": "  @CollectionFeature.Require(SUPPORTS_ADD)\n",
        "83": "  @CollectionSize.Require(absent = ZERO)\n",
        "84": "  public void testAddAll_supportedSomePresent() {\n",
        "85": "    assertTrue(\"addAll(somePresent) should return true\",\n",
        "86": "        collection.addAll(MinimalCollection.of(e3(), e0())));\n",
        "87": "    assertTrue(\"should contain \" + e3(), collection.contains(e3()));\n",
        "88": "    assertTrue(\"should contain \" + e0(), collection.contains(e0()));\n",
        "89": "  }\n",
        "90": "\n",
        "91": "  @CollectionFeature.Require(absent = SUPPORTS_ADD)\n",
        "92": "  @CollectionSize.Require(absent = ZERO)\n",
        "93": "  public void testAddAll_unsupportedSomePresent() {\n",
        "94": "    try {\n",
        "95": "      collection.addAll(MinimalCollection.of(e3(), e0()));\n",
        "96": "      fail(\"addAll(somePresent) should throw\");\n",
        "97": "    } catch (UnsupportedOperationException expected) {\n",
        "98": "    }\n",
        "99": "    expectUnchanged();\n",
        "100": "  }\n",
        "101": "\n",
        "102": "  @CollectionFeature.Require({SUPPORTS_ADD,\n",
        "103": "      FAILS_FAST_ON_CONCURRENT_MODIFICATION})\n",
        "104": "  @CollectionSize.Require(absent = ZERO)\n",
        "105": "  public void testAddAllConcurrentWithIteration() {\n",
        "106": "    try {\n",
        "107": "      Iterator<E> iterator = collection.iterator();\n",
        "108": "      assertTrue(collection.addAll(MinimalCollection.of(e3(), e0())));\n",
        "109": "      iterator.next();\n",
        "110": "      fail(\"Expected ConcurrentModificationException\");\n",
        "111": "    } catch (ConcurrentModificationException expected) {\n",
        "112": "      // success\n",
        "113": "    }\n",
        "114": "  }\n",
        "115": "\n",
        "116": "  @CollectionFeature.Require(absent = SUPPORTS_ADD)\n",
        "117": "  @CollectionSize.Require(absent = ZERO)\n",
        "118": "  public void testAddAll_unsupportedAllPresent() {\n",
        "119": "    try {\n",
        "120": "      assertFalse(\"addAll(allPresent) should return false or throw\",\n",
        "121": "          collection.addAll(MinimalCollection.of(e0())));\n",
        "122": "    } catch (UnsupportedOperationException tolerated) {\n",
        "123": "    }\n",
        "124": "    expectUnchanged();\n",
        "125": "  }\n",
        "126": "\n",
        "127": "  @CollectionFeature.Require(value = {SUPPORTS_ADD,\n",
        "128": "      ALLOWS_NULL_VALUES}, absent = RESTRICTS_ELEMENTS)\n",
        "129": "  public void testAddAll_nullSupported() {\n",
        "130": "    List<E> containsNull = singletonList(null);\n",
        "131": "    assertTrue(\"addAll(containsNull) should return true\", collection\n",
        "132": "        .addAll(containsNull));\n",
        "133": "    /*\n",
        "134": "     * We need (E) to force interpretation of null as the single element of a\n",
        "135": "     * varargs array, not the array itself\n",
        "136": "     */\n",
        "137": "    expectAdded((E) null);\n",
        "138": "  }\n",
        "139": "\n",
        "140": "  @CollectionFeature.Require(value = SUPPORTS_ADD,\n",
        "141": "      absent = ALLOWS_NULL_VALUES)\n",
        "142": "  public void testAddAll_nullUnsupported() {\n",
        "143": "    List<E> containsNull = singletonList(null);\n",
        "144": "    try {\n",
        "145": "      collection.addAll(containsNull);\n",
        "146": "      fail(\"addAll(containsNull) should throw\");\n",
        "147": "    } catch (NullPointerException expected) {\n",
        "148": "    }\n",
        "149": "    expectUnchanged();\n",
        "150": "    expectNullMissingWhenNullUnsupported(\n",
        "151": "        \"Should not contain null after unsupported addAll(containsNull)\");\n",
        "152": "  }\n",
        "153": "\n",
        "154": "  @CollectionFeature.Require(SUPPORTS_ADD)\n",
        "155": "  public void testAddAll_nullCollectionReference() {\n",
        "156": "    try {\n",
        "157": "      collection.addAll(null);\n",
        "158": "      fail(\"addAll(null) should throw NullPointerException\");\n",
        "159": "    } catch (NullPointerException expected) {\n",
        "160": "    }\n",
        "161": "  }\n",
        "162": "}\n",
        "163": "\n"
    }
}