{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.testers;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionFeature.ALLOWS_NULL_VALUES;\n",
        "20": "import static com.google.common.collect.testing.features.CollectionFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION;\n",
        "21": "import static com.google.common.collect.testing.features.CollectionSize.ONE;\n",
        "22": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "23": "import static com.google.common.collect.testing.features.ListFeature.SUPPORTS_ADD_WITH_INDEX;\n",
        "24": "\n",
        "25": "import com.google.common.annotations.GwtCompatible;\n",
        "26": "import com.google.common.collect.testing.features.CollectionFeature;\n",
        "27": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "28": "import com.google.common.collect.testing.features.ListFeature;\n",
        "29": "\n",
        "30": "import java.util.ConcurrentModificationException;\n",
        "31": "import java.util.Iterator;\n",
        "32": "\n",
        "33": "/**\n",
        "34": " * A generic JUnit test which tests {@code add(int, Object)} operations on a\n",
        "35": " * list. Can't be invoked directly; please see\n",
        "36": " * {@link com.google.common.collect.testing.ListTestSuiteBuilder}.\n",
        "37": " *\n",
        "38": " * @author Chris Povirk\n",
        "39": " */\n",
        "40": "@SuppressWarnings(\"unchecked\") // too many \"unchecked generic array creations\"\n",
        "41": "@GwtCompatible(emulated = true)\n",
        "42": "public class ListAddAtIndexTester<E> extends AbstractListTester<E> {\n",
        "43": "  @ListFeature.Require(SUPPORTS_ADD_WITH_INDEX)\n",
        "44": "  @CollectionSize.Require(absent = ZERO)\n",
        "45": "  public void testAddAtIndex_supportedPresent() {\n",
        "46": "    getList().add(0, e0());\n",
        "47": "    expectAdded(0, e0());\n",
        "48": "  }\n",
        "49": "\n",
        "50": "  @ListFeature.Require(absent = SUPPORTS_ADD_WITH_INDEX)\n",
        "51": "  @CollectionSize.Require(absent = ZERO)\n",
        "52": "  /*\n",
        "53": "   * absent = ZERO isn't required, since unmodList.add() must\n",
        "54": "   * throw regardless, but it keeps the method name accurate.\n",
        "55": "   */\n",
        "56": "  public void testAddAtIndex_unsupportedPresent() {\n",
        "57": "    try {\n",
        "58": "      getList().add(0, e0());\n",
        "59": "      fail(\"add(n, present) should throw\");\n",
        "60": "    } catch (UnsupportedOperationException expected) {\n",
        "61": "    }\n",
        "62": "    expectUnchanged();\n",
        "63": "  }\n",
        "64": "\n",
        "65": "  @ListFeature.Require(SUPPORTS_ADD_WITH_INDEX)\n",
        "66": "  public void testAddAtIndex_supportedNotPresent() {\n",
        "67": "    getList().add(0, e3());\n",
        "68": "    expectAdded(0, e3());\n",
        "69": "  }\n",
        "70": "\n",
        "71": "  @CollectionFeature.Require(FAILS_FAST_ON_CONCURRENT_MODIFICATION)\n",
        "72": "  @ListFeature.Require(SUPPORTS_ADD_WITH_INDEX)\n",
        "73": "  public void testAddAtIndexConcurrentWithIteration() {\n",
        "74": "    try {\n",
        "75": "      Iterator<E> iterator = collection.iterator();\n",
        "76": "      getList().add(0, e3());\n",
        "77": "      iterator.next();\n",
        "78": "      fail(\"Expected ConcurrentModificationException\");\n",
        "79": "    } catch (ConcurrentModificationException expected) {\n",
        "80": "      // success\n",
        "81": "    }\n",
        "82": "  }\n",
        "83": "\n",
        "84": "  @ListFeature.Require(absent = SUPPORTS_ADD_WITH_INDEX)\n",
        "85": "  public void testAddAtIndex_unsupportedNotPresent() {\n",
        "86": "    try {\n",
        "87": "      getList().add(0, e3());\n",
        "88": "      fail(\"add(n, notPresent) should throw\");\n",
        "89": "    } catch (UnsupportedOperationException expected) {\n",
        "90": "    }\n",
        "91": "    expectUnchanged();\n",
        "92": "    expectMissing(e3());\n",
        "93": "  }\n",
        "94": "\n",
        "95": "  @ListFeature.Require(SUPPORTS_ADD_WITH_INDEX)\n",
        "96": "  @CollectionSize.Require(absent = {ZERO, ONE})\n",
        "97": "  public void testAddAtIndex_middle() {\n",
        "98": "    getList().add(getNumElements() / 2, e3());\n",
        "99": "    expectAdded(getNumElements() / 2, e3());\n",
        "100": "  }\n",
        "101": "\n",
        "102": "  @ListFeature.Require(SUPPORTS_ADD_WITH_INDEX)\n",
        "103": "  @CollectionSize.Require(absent = ZERO)\n",
        "104": "  public void testAddAtIndex_end() {\n",
        "105": "    getList().add(getNumElements(), e3());\n",
        "106": "    expectAdded(getNumElements(), e3());\n",
        "107": "  }\n",
        "108": "\n",
        "109": "  @ListFeature.Require(SUPPORTS_ADD_WITH_INDEX)\n",
        "110": "  @CollectionFeature.Require(ALLOWS_NULL_VALUES)\n",
        "111": "  public void testAddAtIndex_nullSupported() {\n",
        "112": "    getList().add(0, null);\n",
        "113": "    expectAdded(0, (E) null);\n",
        "114": "  }\n",
        "115": "\n",
        "116": "  @ListFeature.Require(SUPPORTS_ADD_WITH_INDEX)\n",
        "117": "  @CollectionFeature.Require(absent = ALLOWS_NULL_VALUES)\n",
        "118": "  public void testAddAtIndex_nullUnsupported() {\n",
        "119": "    try {\n",
        "120": "      getList().add(0, null);\n",
        "121": "      fail(\"add(n, null) should throw\");\n",
        "122": "    } catch (NullPointerException expected) {\n",
        "123": "    }\n",
        "124": "    expectUnchanged();\n",
        "125": "    expectNullMissingWhenNullUnsupported(\n",
        "126": "        \"Should not contain null after unsupported add(n, null)\");\n",
        "127": "  }\n",
        "128": "\n",
        "129": "  @ListFeature.Require(SUPPORTS_ADD_WITH_INDEX)\n",
        "130": "  public void testAddAtIndex_negative() {\n",
        "131": "    try {\n",
        "132": "      getList().add(-1, e3());\n",
        "133": "      fail(\"add(-1, e) should throw\");\n",
        "134": "    } catch (IndexOutOfBoundsException expected) {\n",
        "135": "    }\n",
        "136": "    expectUnchanged();\n",
        "137": "    expectMissing(e3());\n",
        "138": "  }\n",
        "139": "\n",
        "140": "  @ListFeature.Require(SUPPORTS_ADD_WITH_INDEX)\n",
        "141": "  public void testAddAtIndex_tooLarge() {\n",
        "142": "    try {\n",
        "143": "      getList().add(getNumElements() + 1, e3());\n",
        "144": "      fail(\"add(size + 1, e) should throw\");\n",
        "145": "    } catch (IndexOutOfBoundsException expected) {\n",
        "146": "    }\n",
        "147": "    expectUnchanged();\n",
        "148": "    expectMissing(e3());\n",
        "149": "  }\n",
        "150": "}\n",
        "151": "\n"
    }
}