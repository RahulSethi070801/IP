{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "20": "import static com.google.common.base.Preconditions.checkState;\n",
        "21": "import static com.google.common.collect.CollectPreconditions.checkRemove;\n",
        "22": "\n",
        "23": "import com.google.common.annotations.GwtCompatible;\n",
        "24": "import com.google.common.base.Objects;\n",
        "25": "import com.google.j2objc.annotations.WeakOuter;\n",
        "26": "\n",
        "27": "import java.io.Serializable;\n",
        "28": "import java.util.Collection;\n",
        "29": "import java.util.Iterator;\n",
        "30": "import java.util.Map;\n",
        "31": "import java.util.Set;\n",
        "32": "\n",
        "33": "import javax.annotation.Nullable;\n",
        "34": "\n",
        "35": "/**\n",
        "36": " * A general-purpose bimap implementation using any two backing {@code Map}\n",
        "37": " * instances.\n",
        "38": " *\n",
        "39": " * <p>Note that this class contains {@code equals()} calls that keep it from\n",
        "40": " * supporting {@code IdentityHashMap} backing maps.\n",
        "41": " *\n",
        "42": " * @author Kevin Bourrillion\n",
        "43": " * @author Mike Bostock\n",
        "44": " */\n",
        "45": "@GwtCompatible(emulated = true)\n",
        "46": "abstract class AbstractBiMap<K, V> extends ForwardingMap<K, V>\n",
        "47": "    implements BiMap<K, V>, Serializable {\n",
        "48": "\n",
        "49": "  private transient Map<K, V> delegate;\n",
        "50": "  transient AbstractBiMap<V, K> inverse;\n",
        "51": "\n",
        "52": "  /** Package-private constructor for creating a map-backed bimap. */\n",
        "53": "  AbstractBiMap(Map<K, V> forward, Map<V, K> backward) {\n",
        "54": "    setDelegates(forward, backward);\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  /** Private constructor for inverse bimap. */\n",
        "58": "  private AbstractBiMap(Map<K, V> backward, AbstractBiMap<V, K> forward) {\n",
        "59": "    delegate = backward;\n",
        "60": "    inverse = forward;\n",
        "61": "  }\n",
        "62": "\n",
        "63": "  @Override\n",
        "64": "  protected Map<K, V> delegate() {\n",
        "65": "    return delegate;\n",
        "66": "  }\n",
        "67": "\n",
        "68": "  /**\n",
        "69": "   * Returns its input, or throws an exception if this is not a valid key.\n",
        "70": "   */\n",
        "71": "  K checkKey(@Nullable K key) {\n",
        "72": "    return key;\n",
        "73": "  }\n",
        "74": "\n",
        "75": "  /**\n",
        "76": "   * Returns its input, or throws an exception if this is not a valid value.\n",
        "77": "   */\n",
        "78": "  V checkValue(@Nullable V value) {\n",
        "79": "    return value;\n",
        "80": "  }\n",
        "81": "\n",
        "82": "  /**\n",
        "83": "   * Specifies the delegate maps going in each direction. Called by the\n",
        "84": "   * constructor and by subclasses during deserialization.\n",
        "85": "   */\n",
        "86": "  void setDelegates(Map<K, V> forward, Map<V, K> backward) {\n",
        "87": "    checkState(delegate == null);\n",
        "88": "    checkState(inverse == null);\n",
        "89": "    checkArgument(forward.isEmpty());\n",
        "90": "    checkArgument(backward.isEmpty());\n",
        "91": "    checkArgument(forward != backward);\n",
        "92": "    delegate = forward;\n",
        "93": "    inverse = new Inverse<V, K>(backward, this);\n",
        "94": "  }\n",
        "95": "\n",
        "96": "  void setInverse(AbstractBiMap<V, K> inverse) {\n",
        "97": "    this.inverse = inverse;\n",
        "98": "  }\n",
        "99": "\n",
        "100": "  // Query Operations (optimizations)\n",
        "101": "\n",
        "102": "  @Override\n",
        "103": "  public boolean containsValue(@Nullable Object value) {\n",
        "104": "    return inverse.containsKey(value);\n",
        "105": "  }\n",
        "106": "\n",
        "107": "  // Modification Operations\n",
        "108": "\n",
        "109": "  @Override\n",
        "110": "  public V put(@Nullable K key, @Nullable V value) {\n",
        "111": "    return putInBothMaps(key, value, false);\n",
        "112": "  }\n",
        "113": "\n",
        "114": "  @Override\n",
        "115": "  public V forcePut(@Nullable K key, @Nullable V value) {\n",
        "116": "    return putInBothMaps(key, value, true);\n",
        "117": "  }\n",
        "118": "\n",
        "119": "  private V putInBothMaps(@Nullable K key, @Nullable V value, boolean force) {\n",
        "120": "    checkKey(key);\n",
        "121": "    checkValue(value);\n",
        "122": "    boolean containedKey = containsKey(key);\n",
        "123": "    if (containedKey && Objects.equal(value, get(key))) {\n",
        "124": "      return value;\n",
        "125": "    }\n",
        "126": "    if (force) {\n",
        "127": "      inverse().remove(value);\n",
        "128": "    } else {\n",
        "129": "      checkArgument(!containsValue(value), \"value already present: %s\", value);\n",
        "130": "    }\n",
        "131": "    V oldValue = delegate.put(key, value);\n",
        "132": "    updateInverseMap(key, containedKey, oldValue, value);\n",
        "133": "    return oldValue;\n",
        "134": "  }\n",
        "135": "\n",
        "136": "  private void updateInverseMap(K key, boolean containedKey, V oldValue, V newValue) {\n",
        "137": "    if (containedKey) {\n",
        "138": "      removeFromInverseMap(oldValue);\n",
        "139": "    }\n",
        "140": "    inverse.delegate.put(newValue, key);\n",
        "141": "  }\n",
        "142": "\n",
        "143": "  @Override\n",
        "144": "  public V remove(@Nullable Object key) {\n",
        "145": "    return containsKey(key) ? removeFromBothMaps(key) : null;\n",
        "146": "  }\n",
        "147": "\n",
        "148": "  private V removeFromBothMaps(Object key) {\n",
        "149": "    V oldValue = delegate.remove(key);\n",
        "150": "    removeFromInverseMap(oldValue);\n",
        "151": "    return oldValue;\n",
        "152": "  }\n",
        "153": "\n",
        "154": "  private void removeFromInverseMap(V oldValue) {\n",
        "155": "    inverse.delegate.remove(oldValue);\n",
        "156": "  }\n",
        "157": "\n",
        "158": "  // Bulk Operations\n",
        "159": "\n",
        "160": "  @Override\n",
        "161": "  public void putAll(Map<? extends K, ? extends V> map) {\n",
        "162": "    for (Entry<? extends K, ? extends V> entry : map.entrySet()) {\n",
        "163": "      put(entry.getKey(), entry.getValue());\n",
        "164": "    }\n",
        "165": "  }\n",
        "166": "\n",
        "167": "  @Override\n",
        "168": "  public void clear() {\n",
        "169": "    delegate.clear();\n",
        "170": "    inverse.delegate.clear();\n",
        "171": "  }\n",
        "172": "\n",
        "173": "  // Views\n",
        "174": "\n",
        "175": "  @Override\n",
        "176": "  public BiMap<V, K> inverse() {\n",
        "177": "    return inverse;\n",
        "178": "  }\n",
        "179": "\n",
        "180": "  private transient Set<K> keySet;\n",
        "181": "\n",
        "182": "  @Override\n",
        "183": "  public Set<K> keySet() {\n",
        "184": "    Set<K> result = keySet;\n",
        "185": "    return (result == null) ? keySet = new KeySet() : result;\n",
        "186": "  }\n",
        "187": "\n",
        "188": "  @WeakOuter\n",
        "189": "  private class KeySet extends ForwardingSet<K> {\n",
        "190": "    @Override\n",
        "191": "    protected Set<K> delegate() {\n",
        "192": "      return delegate.keySet();\n",
        "193": "    }\n",
        "194": "\n",
        "195": "    @Override\n",
        "196": "    public void clear() {\n",
        "197": "      AbstractBiMap.this.clear();\n",
        "198": "    }\n",
        "199": "\n",
        "200": "    @Override\n",
        "201": "    public boolean remove(Object key) {\n",
        "202": "      if (!contains(key)) {\n",
        "203": "        return false;\n",
        "204": "      }\n",
        "205": "      removeFromBothMaps(key);\n",
        "206": "      return true;\n",
        "207": "    }\n",
        "208": "\n",
        "209": "    @Override\n",
        "210": "    public boolean removeAll(Collection<?> keysToRemove) {\n",
        "211": "      return standardRemoveAll(keysToRemove);\n",
        "212": "    }\n",
        "213": "\n",
        "214": "    @Override\n",
        "215": "    public boolean retainAll(Collection<?> keysToRetain) {\n",
        "216": "      return standardRetainAll(keysToRetain);\n",
        "217": "    }\n",
        "218": "\n",
        "219": "    @Override\n",
        "220": "    public Iterator<K> iterator() {\n",
        "221": "      return Maps.keyIterator(entrySet().iterator());\n",
        "222": "    }\n",
        "223": "  }\n",
        "224": "\n",
        "225": "  private transient Set<V> valueSet;\n",
        "226": "\n",
        "227": "  @Override\n",
        "228": "  public Set<V> values() {\n",
        "229": "    /*\n",
        "230": "     * We can almost reuse the inverse's keySet, except we have to fix the\n",
        "231": "     * iteration order so that it is consistent with the forward map.\n",
        "232": "     */\n",
        "233": "    Set<V> result = valueSet;\n",
        "234": "    return (result == null) ? valueSet = new ValueSet() : result;\n",
        "235": "  }\n",
        "236": "\n",
        "237": "  @WeakOuter\n",
        "238": "  private class ValueSet extends ForwardingSet<V> {\n",
        "239": "    final Set<V> valuesDelegate = inverse.keySet();\n",
        "240": "\n",
        "241": "    @Override\n",
        "242": "    protected Set<V> delegate() {\n",
        "243": "      return valuesDelegate;\n",
        "244": "    }\n",
        "245": "\n",
        "246": "    @Override\n",
        "247": "    public Iterator<V> iterator() {\n",
        "248": "      return Maps.valueIterator(entrySet().iterator());\n",
        "249": "    }\n",
        "250": "\n",
        "251": "    @Override\n",
        "252": "    public Object[] toArray() {\n",
        "253": "      return standardToArray();\n",
        "254": "    }\n",
        "255": "\n",
        "256": "    @Override\n",
        "257": "    public <T> T[] toArray(T[] array) {\n",
        "258": "      return standardToArray(array);\n",
        "259": "    }\n",
        "260": "\n",
        "261": "    @Override\n",
        "262": "    public String toString() {\n",
        "263": "      return standardToString();\n",
        "264": "    }\n",
        "265": "  }\n",
        "266": "\n",
        "267": "  private transient Set<Entry<K, V>> entrySet;\n",
        "268": "\n",
        "269": "  @Override\n",
        "270": "  public Set<Entry<K, V>> entrySet() {\n",
        "271": "    Set<Entry<K, V>> result = entrySet;\n",
        "272": "    return (result == null) ? entrySet = new EntrySet() : result;\n",
        "273": "  }\n",
        "274": "\n",
        "275": "  @WeakOuter\n",
        "276": "  private class EntrySet extends ForwardingSet<Entry<K, V>> {\n",
        "277": "    final Set<Entry<K, V>> esDelegate = delegate.entrySet();\n",
        "278": "\n",
        "279": "    @Override\n",
        "280": "    protected Set<Entry<K, V>> delegate() {\n",
        "281": "      return esDelegate;\n",
        "282": "    }\n",
        "283": "\n",
        "284": "    @Override\n",
        "285": "    public void clear() {\n",
        "286": "      AbstractBiMap.this.clear();\n",
        "287": "    }\n",
        "288": "\n",
        "289": "    @Override\n",
        "290": "    public boolean remove(Object object) {\n",
        "291": "      if (!esDelegate.contains(object)) {\n",
        "292": "        return false;\n",
        "293": "      }\n",
        "294": "\n",
        "295": "      // safe because esDelgate.contains(object).\n",
        "296": "      Entry<?, ?> entry = (Entry<?, ?>) object;\n",
        "297": "      inverse.delegate.remove(entry.getValue());\n",
        "298": "      /*\n",
        "299": "       * Remove the mapping in inverse before removing from esDelegate because\n",
        "300": "       * if entry is part of esDelegate, entry might be invalidated after the\n",
        "301": "       * mapping is removed from esDelegate.\n",
        "302": "       */\n",
        "303": "      esDelegate.remove(entry);\n",
        "304": "      return true;\n",
        "305": "    }\n",
        "306": "\n",
        "307": "    @Override\n",
        "308": "    public Iterator<Entry<K, V>> iterator() {\n",
        "309": "      final Iterator<Entry<K, V>> iterator = esDelegate.iterator();\n",
        "310": "      return new Iterator<Entry<K, V>>() {\n",
        "311": "        Entry<K, V> entry;\n",
        "312": "\n",
        "313": "        @Override\n",
        "314": "        public boolean hasNext() {\n",
        "315": "          return iterator.hasNext();\n",
        "316": "        }\n",
        "317": "\n",
        "318": "        @Override\n",
        "319": "        public Entry<K, V> next() {\n",
        "320": "          entry = iterator.next();\n",
        "321": "          final Entry<K, V> finalEntry = entry;\n",
        "322": "\n",
        "323": "          return new ForwardingMapEntry<K, V>() {\n",
        "324": "            @Override\n",
        "325": "            protected Entry<K, V> delegate() {\n",
        "326": "              return finalEntry;\n",
        "327": "            }\n",
        "328": "\n",
        "329": "            @Override\n",
        "330": "            public V setValue(V value) {\n",
        "331": "              // Preconditions keep the map and inverse consistent.\n",
        "332": "              checkState(contains(this), \"entry no longer in map\");\n",
        "333": "              // similar to putInBothMaps, but set via entry\n",
        "334": "              if (Objects.equal(value, getValue())) {\n",
        "335": "                return value;\n",
        "336": "              }\n",
        "337": "              checkArgument(!containsValue(value), \"value already present: %s\", value);\n",
        "338": "              V oldValue = finalEntry.setValue(value);\n",
        "339": "              checkState(Objects.equal(value, get(getKey())), \"entry no longer in map\");\n",
        "340": "              updateInverseMap(getKey(), true, oldValue, value);\n",
        "341": "              return oldValue;\n",
        "342": "            }\n",
        "343": "          };\n",
        "344": "        }\n",
        "345": "\n",
        "346": "        @Override\n",
        "347": "        public void remove() {\n",
        "348": "          checkRemove(entry != null);\n",
        "349": "          V value = entry.getValue();\n",
        "350": "          iterator.remove();\n",
        "351": "          removeFromInverseMap(value);\n",
        "352": "        }\n",
        "353": "      };\n",
        "354": "    }\n",
        "355": "\n",
        "356": "    // See java.util.Collections.CheckedEntrySet for details on attacks.\n",
        "357": "\n",
        "358": "    @Override\n",
        "359": "    public Object[] toArray() {\n",
        "360": "      return standardToArray();\n",
        "361": "    }\n",
        "362": "\n",
        "363": "    @Override\n",
        "364": "    public <T> T[] toArray(T[] array) {\n",
        "365": "      return standardToArray(array);\n",
        "366": "    }\n",
        "367": "\n",
        "368": "    @Override\n",
        "369": "    public boolean contains(Object o) {\n",
        "370": "      return Maps.containsEntryImpl(delegate(), o);\n",
        "371": "    }\n",
        "372": "\n",
        "373": "    @Override\n",
        "374": "    public boolean containsAll(Collection<?> c) {\n",
        "375": "      return standardContainsAll(c);\n",
        "376": "    }\n",
        "377": "\n",
        "378": "    @Override\n",
        "379": "    public boolean removeAll(Collection<?> c) {\n",
        "380": "      return standardRemoveAll(c);\n",
        "381": "    }\n",
        "382": "\n",
        "383": "    @Override\n",
        "384": "    public boolean retainAll(Collection<?> c) {\n",
        "385": "      return standardRetainAll(c);\n",
        "386": "    }\n",
        "387": "  }\n",
        "388": "\n",
        "389": "  /** The inverse of any other {@code AbstractBiMap} subclass. */\n",
        "390": "  private static class Inverse<K, V> extends AbstractBiMap<K, V> {\n",
        "391": "    private Inverse(Map<K, V> backward, AbstractBiMap<V, K> forward) {\n",
        "392": "      super(backward, forward);\n",
        "393": "    }\n",
        "394": "\n",
        "395": "    /*\n",
        "396": "     * Serialization stores the forward bimap, the inverse of this inverse.\n",
        "397": "     * Deserialization calls inverse() on the forward bimap and returns that\n",
        "398": "     * inverse.\n",
        "399": "     *\n",
        "400": "     * If a bimap and its inverse are serialized together, the deserialized\n",
        "401": "     * instances have inverse() methods that return the other.\n",
        "402": "     */\n",
        "403": "\n",
        "404": "    @Override\n",
        "405": "    K checkKey(K key) {\n",
        "406": "      return inverse.checkValue(key);\n",
        "407": "    }\n",
        "408": "\n",
        "409": "    @Override\n",
        "410": "    V checkValue(V value) {\n",
        "411": "      return inverse.checkKey(value);\n",
        "412": "    }\n",
        "413": "  }\n",
        "414": "}\n",
        "415": "\n"
    }
}