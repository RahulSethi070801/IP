{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.primitives;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.collect.testing.Helpers;\n",
        "21": "\n",
        "22": "import junit.framework.TestCase;\n",
        "23": "\n",
        "24": "import java.util.Arrays;\n",
        "25": "import java.util.Collection;\n",
        "26": "import java.util.Collections;\n",
        "27": "import java.util.Comparator;\n",
        "28": "import java.util.List;\n",
        "29": "\n",
        "30": "/**\n",
        "31": " * Unit test for {@link Chars}.\n",
        "32": " *\n",
        "33": " * @author Kevin Bourrillion\n",
        "34": " */\n",
        "35": "@GwtCompatible(emulated = true)\n",
        "36": "@SuppressWarnings(\"cast\") // redundant casts are intentional and harmless\n",
        "37": "public class CharsTest extends TestCase {\n",
        "38": "  private static final char[] EMPTY = {};\n",
        "39": "  private static final char[] ARRAY1 = {(char) 1};\n",
        "40": "  private static final char[] ARRAY234\n",
        "41": "      = {(char) 2, (char) 3, (char) 4};\n",
        "42": "\n",
        "43": "  private static final char LEAST = Character.MIN_VALUE;\n",
        "44": "  private static final char GREATEST = Character.MAX_VALUE;\n",
        "45": "\n",
        "46": "  private static final char[] VALUES =\n",
        "47": "      {LEAST, 'a', '\\u00e0', '\\udcaa', GREATEST};\n",
        "48": "\n",
        "49": "  public void testHashCode() {\n",
        "50": "    for (char value : VALUES) {\n",
        "51": "      assertEquals(((Character) value).hashCode(), Chars.hashCode(value));\n",
        "52": "    }\n",
        "53": "  }\n",
        "54": "\n",
        "55": "  public void testCheckedCast() {\n",
        "56": "    for (char value : VALUES) {\n",
        "57": "      assertEquals(value, Chars.checkedCast((long) value));\n",
        "58": "    }\n",
        "59": "    assertCastFails(GREATEST + 1L);\n",
        "60": "    assertCastFails(LEAST - 1L);\n",
        "61": "    assertCastFails(Long.MAX_VALUE);\n",
        "62": "    assertCastFails(Long.MIN_VALUE);\n",
        "63": "  }\n",
        "64": "\n",
        "65": "  public void testSaturatedCast() {\n",
        "66": "    for (char value : VALUES) {\n",
        "67": "      assertEquals(value, Chars.saturatedCast((long) value));\n",
        "68": "    }\n",
        "69": "    assertEquals(GREATEST, Chars.saturatedCast(GREATEST + 1L));\n",
        "70": "    assertEquals(LEAST, Chars.saturatedCast(LEAST - 1L));\n",
        "71": "    assertEquals(GREATEST, Chars.saturatedCast(Long.MAX_VALUE));\n",
        "72": "    assertEquals(LEAST, Chars.saturatedCast(Long.MIN_VALUE));\n",
        "73": "  }\n",
        "74": "\n",
        "75": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "76": "  private void assertCastFails(long value) {\n",
        "77": "    try {\n",
        "78": "      Chars.checkedCast(value);\n",
        "79": "      fail(\"Cast to char should have failed: \" + value);\n",
        "80": "    } catch (IllegalArgumentException ex) {\n",
        "81": "      assertTrue(value + \" not found in exception text: \" + ex.getMessage(),\n",
        "82": "          ex.getMessage().contains(String.valueOf(value)));\n",
        "83": "    }\n",
        "84": "  }\n",
        "85": "\n",
        "86": "  public void testCompare() {\n",
        "87": "    for (char x : VALUES) {\n",
        "88": "      for (char y : VALUES) {\n",
        "89": "        // note: spec requires only that the sign is the same\n",
        "90": "        assertEquals(x + \", \" + y,\n",
        "91": "                     Character.valueOf(x).compareTo(y),\n",
        "92": "                     Chars.compare(x, y));\n",
        "93": "      }\n",
        "94": "    }\n",
        "95": "  }\n",
        "96": "\n",
        "97": "  public void testContains() {\n",
        "98": "    assertFalse(Chars.contains(EMPTY, (char) 1));\n",
        "99": "    assertFalse(Chars.contains(ARRAY1, (char) 2));\n",
        "100": "    assertFalse(Chars.contains(ARRAY234, (char) 1));\n",
        "101": "    assertTrue(Chars.contains(new char[] {(char) -1}, (char) -1));\n",
        "102": "    assertTrue(Chars.contains(ARRAY234, (char) 2));\n",
        "103": "    assertTrue(Chars.contains(ARRAY234, (char) 3));\n",
        "104": "    assertTrue(Chars.contains(ARRAY234, (char) 4));\n",
        "105": "  }\n",
        "106": "\n",
        "107": "  public void testIndexOf() {\n",
        "108": "    assertEquals(-1, Chars.indexOf(EMPTY, (char) 1));\n",
        "109": "    assertEquals(-1, Chars.indexOf(ARRAY1, (char) 2));\n",
        "110": "    assertEquals(-1, Chars.indexOf(ARRAY234, (char) 1));\n",
        "111": "    assertEquals(0, Chars.indexOf(\n",
        "112": "        new char[] {(char) -1}, (char) -1));\n",
        "113": "    assertEquals(0, Chars.indexOf(ARRAY234, (char) 2));\n",
        "114": "    assertEquals(1, Chars.indexOf(ARRAY234, (char) 3));\n",
        "115": "    assertEquals(2, Chars.indexOf(ARRAY234, (char) 4));\n",
        "116": "    assertEquals(1, Chars.indexOf(\n",
        "117": "        new char[] { (char) 2, (char) 3, (char) 2, (char) 3 },\n",
        "118": "        (char) 3));\n",
        "119": "  }\n",
        "120": "\n",
        "121": "  public void testIndexOf_arrayTarget() {\n",
        "122": "    assertEquals(0, Chars.indexOf(EMPTY, EMPTY));\n",
        "123": "    assertEquals(0, Chars.indexOf(ARRAY234, EMPTY));\n",
        "124": "    assertEquals(-1, Chars.indexOf(EMPTY, ARRAY234));\n",
        "125": "    assertEquals(-1, Chars.indexOf(ARRAY234, ARRAY1));\n",
        "126": "    assertEquals(-1, Chars.indexOf(ARRAY1, ARRAY234));\n",
        "127": "    assertEquals(0, Chars.indexOf(ARRAY1, ARRAY1));\n",
        "128": "    assertEquals(0, Chars.indexOf(ARRAY234, ARRAY234));\n",
        "129": "    assertEquals(0, Chars.indexOf(\n",
        "130": "        ARRAY234, new char[] { (char) 2, (char) 3 }));\n",
        "131": "    assertEquals(1, Chars.indexOf(\n",
        "132": "        ARRAY234, new char[] { (char) 3, (char) 4 }));\n",
        "133": "    assertEquals(1, Chars.indexOf(ARRAY234, new char[] { (char) 3 }));\n",
        "134": "    assertEquals(2, Chars.indexOf(ARRAY234, new char[] { (char) 4 }));\n",
        "135": "    assertEquals(1, Chars.indexOf(new char[] { (char) 2, (char) 3,\n",
        "136": "        (char) 3, (char) 3, (char) 3 },\n",
        "137": "        new char[] { (char) 3 }\n",
        "138": "    ));\n",
        "139": "    assertEquals(2, Chars.indexOf(\n",
        "140": "        new char[] { (char) 2, (char) 3, (char) 2,\n",
        "141": "            (char) 3, (char) 4, (char) 2, (char) 3},\n",
        "142": "        new char[] { (char) 2, (char) 3, (char) 4}\n",
        "143": "    ));\n",
        "144": "    assertEquals(1, Chars.indexOf(\n",
        "145": "        new char[] { (char) 2, (char) 2, (char) 3,\n",
        "146": "            (char) 4, (char) 2, (char) 3, (char) 4},\n",
        "147": "        new char[] { (char) 2, (char) 3, (char) 4}\n",
        "148": "    ));\n",
        "149": "    assertEquals(-1, Chars.indexOf(\n",
        "150": "        new char[] { (char) 4, (char) 3, (char) 2},\n",
        "151": "        new char[] { (char) 2, (char) 3, (char) 4}\n",
        "152": "    ));\n",
        "153": "  }\n",
        "154": "\n",
        "155": "  public void testLastIndexOf() {\n",
        "156": "    assertEquals(-1, Chars.lastIndexOf(EMPTY, (char) 1));\n",
        "157": "    assertEquals(-1, Chars.lastIndexOf(ARRAY1, (char) 2));\n",
        "158": "    assertEquals(-1, Chars.lastIndexOf(ARRAY234, (char) 1));\n",
        "159": "    assertEquals(0, Chars.lastIndexOf(\n",
        "160": "        new char[] {(char) -1}, (char) -1));\n",
        "161": "    assertEquals(0, Chars.lastIndexOf(ARRAY234, (char) 2));\n",
        "162": "    assertEquals(1, Chars.lastIndexOf(ARRAY234, (char) 3));\n",
        "163": "    assertEquals(2, Chars.lastIndexOf(ARRAY234, (char) 4));\n",
        "164": "    assertEquals(3, Chars.lastIndexOf(\n",
        "165": "        new char[] { (char) 2, (char) 3, (char) 2, (char) 3 },\n",
        "166": "        (char) 3));\n",
        "167": "  }\n",
        "168": "\n",
        "169": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "170": "  public void testMax_noArgs() {\n",
        "171": "    try {\n",
        "172": "      Chars.max();\n",
        "173": "      fail();\n",
        "174": "    } catch (IllegalArgumentException expected) {\n",
        "175": "    }\n",
        "176": "  }\n",
        "177": "\n",
        "178": "  public void testMax() {\n",
        "179": "    assertEquals(LEAST, Chars.max(LEAST));\n",
        "180": "    assertEquals(GREATEST, Chars.max(GREATEST));\n",
        "181": "    assertEquals((char) 9, Chars.max(\n",
        "182": "        (char) 8, (char) 6, (char) 7,\n",
        "183": "        (char) 5, (char) 3, (char) 0, (char) 9));\n",
        "184": "  }\n",
        "185": "\n",
        "186": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "187": "  public void testMin_noArgs() {\n",
        "188": "    try {\n",
        "189": "      Chars.min();\n",
        "190": "      fail();\n",
        "191": "    } catch (IllegalArgumentException expected) {\n",
        "192": "    }\n",
        "193": "  }\n",
        "194": "\n",
        "195": "  public void testMin() {\n",
        "196": "    assertEquals(LEAST, Chars.min(LEAST));\n",
        "197": "    assertEquals(GREATEST, Chars.min(GREATEST));\n",
        "198": "    assertEquals((char) 0, Chars.min(\n",
        "199": "        (char) 8, (char) 6, (char) 7,\n",
        "200": "        (char) 5, (char) 3, (char) 0, (char) 9));\n",
        "201": "  }\n",
        "202": "\n",
        "203": "  public void testConcat() {\n",
        "204": "    assertTrue(Arrays.equals(EMPTY, Chars.concat()));\n",
        "205": "    assertTrue(Arrays.equals(EMPTY, Chars.concat(EMPTY)));\n",
        "206": "    assertTrue(Arrays.equals(EMPTY, Chars.concat(EMPTY, EMPTY, EMPTY)));\n",
        "207": "    assertTrue(Arrays.equals(ARRAY1, Chars.concat(ARRAY1)));\n",
        "208": "    assertNotSame(ARRAY1, Chars.concat(ARRAY1));\n",
        "209": "    assertTrue(Arrays.equals(ARRAY1, Chars.concat(EMPTY, ARRAY1, EMPTY)));\n",
        "210": "    assertTrue(Arrays.equals(\n",
        "211": "        new char[] {(char) 1, (char) 1, (char) 1},\n",
        "212": "        Chars.concat(ARRAY1, ARRAY1, ARRAY1)));\n",
        "213": "    assertTrue(Arrays.equals(\n",
        "214": "        new char[] {(char) 1, (char) 2, (char) 3, (char) 4},\n",
        "215": "        Chars.concat(ARRAY1, ARRAY234)));\n",
        "216": "  }\n",
        "217": "\n",
        "218": "  public void testEnsureCapacity() {\n",
        "219": "    assertSame(EMPTY, Chars.ensureCapacity(EMPTY, 0, 1));\n",
        "220": "    assertSame(ARRAY1, Chars.ensureCapacity(ARRAY1, 0, 1));\n",
        "221": "    assertSame(ARRAY1, Chars.ensureCapacity(ARRAY1, 1, 1));\n",
        "222": "    assertTrue(Arrays.equals(\n",
        "223": "        new char[] {(char) 1, (char) 0, (char) 0},\n",
        "224": "        Chars.ensureCapacity(ARRAY1, 2, 1)));\n",
        "225": "  }\n",
        "226": "\n",
        "227": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "228": "  public void testEnsureCapacity_fail() {\n",
        "229": "    try {\n",
        "230": "      Chars.ensureCapacity(ARRAY1, -1, 1);\n",
        "231": "      fail();\n",
        "232": "    } catch (IllegalArgumentException expected) {\n",
        "233": "    }\n",
        "234": "    try {\n",
        "235": "      // notice that this should even fail when no growth was needed\n",
        "236": "      Chars.ensureCapacity(ARRAY1, 1, -1);\n",
        "237": "      fail();\n",
        "238": "    } catch (IllegalArgumentException expected) {\n",
        "239": "    }\n",
        "240": "  }\n",
        "241": "\n",
        "242": "  public void testJoin() {\n",
        "243": "    assertEquals(\"\", Chars.join(\",\", EMPTY));\n",
        "244": "    assertEquals(\"1\", Chars.join(\",\", '1'));\n",
        "245": "    assertEquals(\"1,2\", Chars.join(\",\", '1', '2'));\n",
        "246": "    assertEquals(\"123\", Chars.join(\"\", '1', '2', '3'));\n",
        "247": "  }\n",
        "248": "\n",
        "249": "  public void testLexicographicalComparator() {\n",
        "250": "    List<char[]> ordered = Arrays.asList(\n",
        "251": "        new char[] {},\n",
        "252": "        new char[] {LEAST},\n",
        "253": "        new char[] {LEAST, LEAST},\n",
        "254": "        new char[] {LEAST, (char) 1},\n",
        "255": "        new char[] {(char) 1},\n",
        "256": "        new char[] {(char) 1, LEAST},\n",
        "257": "        new char[] {GREATEST, GREATEST - (char) 1},\n",
        "258": "        new char[] {GREATEST, GREATEST},\n",
        "259": "        new char[] {GREATEST, GREATEST, GREATEST});\n",
        "260": "\n",
        "261": "    Comparator<char[]> comparator = Chars.lexicographicalComparator();\n",
        "262": "    Helpers.testComparator(comparator, ordered);\n",
        "263": "  }\n",
        "264": "\n",
        "265": "  public void testToArray() {\n",
        "266": "    // need explicit type parameter to avoid javac warning!?\n",
        "267": "    List<Character> none = Arrays.<Character>asList();\n",
        "268": "    assertTrue(Arrays.equals(EMPTY, Chars.toArray(none)));\n",
        "269": "\n",
        "270": "    List<Character> one = Arrays.asList((char) 1);\n",
        "271": "    assertTrue(Arrays.equals(ARRAY1, Chars.toArray(one)));\n",
        "272": "\n",
        "273": "    char[] array = {(char) 0, (char) 1, 'A'};\n",
        "274": "\n",
        "275": "    List<Character> three = Arrays.asList((char) 0, (char) 1, 'A');\n",
        "276": "    assertTrue(Arrays.equals(array, Chars.toArray(three)));\n",
        "277": "\n",
        "278": "    assertTrue(Arrays.equals(array, Chars.toArray(Chars.asList(array))));\n",
        "279": "  }\n",
        "280": "\n",
        "281": "  public void testToArray_threadSafe() {\n",
        "282": "    for (int delta : new int[] { +1, 0, -1 }) {\n",
        "283": "      for (int i = 0; i < VALUES.length; i++) {\n",
        "284": "        List<Character> list = Chars.asList(VALUES).subList(0, i);\n",
        "285": "        Collection<Character> misleadingSize =\n",
        "286": "            Helpers.misleadingSizeCollection(delta);\n",
        "287": "        misleadingSize.addAll(list);\n",
        "288": "        char[] arr = Chars.toArray(misleadingSize);\n",
        "289": "        assertEquals(i, arr.length);\n",
        "290": "        for (int j = 0; j < i; j++) {\n",
        "291": "          assertEquals(VALUES[j], arr[j]);\n",
        "292": "        }\n",
        "293": "      }\n",
        "294": "    }\n",
        "295": "  }\n",
        "296": "\n",
        "297": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "298": "  public void testToArray_withNull() {\n",
        "299": "    List<Character> list = Arrays.asList((char) 0, (char) 1, null);\n",
        "300": "    try {\n",
        "301": "      Chars.toArray(list);\n",
        "302": "      fail();\n",
        "303": "    } catch (NullPointerException expected) {\n",
        "304": "    }\n",
        "305": "  }\n",
        "306": "\n",
        "307": "  public void testAsList_isAView() {\n",
        "308": "    char[] array = {(char) 0, (char) 1};\n",
        "309": "    List<Character> list = Chars.asList(array);\n",
        "310": "    list.set(0, (char) 2);\n",
        "311": "    assertTrue(Arrays.equals(new char[] {(char) 2, (char) 1}, array));\n",
        "312": "    array[1] = (char) 3;\n",
        "313": "    assertEquals(Arrays.asList((char) 2, (char) 3), list);\n",
        "314": "  }\n",
        "315": "\n",
        "316": "  public void testAsList_toArray_roundTrip() {\n",
        "317": "    char[] array = { (char) 0, (char) 1, (char) 2 };\n",
        "318": "    List<Character> list = Chars.asList(array);\n",
        "319": "    char[] newArray = Chars.toArray(list);\n",
        "320": "\n",
        "321": "    // Make sure it returned a copy\n",
        "322": "    list.set(0, (char) 4);\n",
        "323": "    assertTrue(Arrays.equals(\n",
        "324": "        new char[] { (char) 0, (char) 1, (char) 2 }, newArray));\n",
        "325": "    newArray[1] = (char) 5;\n",
        "326": "    assertEquals((char) 1, (char) list.get(1));\n",
        "327": "  }\n",
        "328": "\n",
        "329": "  // This test stems from a real bug found by andrewk\n",
        "330": "  public void testAsList_subList_toArray_roundTrip() {\n",
        "331": "    char[] array = { (char) 0, (char) 1, (char) 2, (char) 3 };\n",
        "332": "    List<Character> list = Chars.asList(array);\n",
        "333": "    assertTrue(Arrays.equals(new char[] { (char) 1, (char) 2 },\n",
        "334": "        Chars.toArray(list.subList(1, 3))));\n",
        "335": "    assertTrue(Arrays.equals(new char[] {},\n",
        "336": "        Chars.toArray(list.subList(2, 2))));\n",
        "337": "  }\n",
        "338": "\n",
        "339": "  public void testAsListEmpty() {\n",
        "340": "    assertSame(Collections.emptyList(), Chars.asList(EMPTY));\n",
        "341": "  }\n",
        "342": "}\n",
        "343": "\n"
    }
}