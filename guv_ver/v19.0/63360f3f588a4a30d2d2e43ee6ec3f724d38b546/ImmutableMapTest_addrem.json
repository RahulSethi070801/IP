{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.base.Joiner;\n",
        "21": "import com.google.common.collect.ImmutableMap.Builder;\n",
        "22": "import com.google.common.collect.testing.AnEnum;\n",
        "23": "import com.google.common.collect.testing.MapInterfaceTest;\n",
        "24": "import com.google.common.collect.testing.MinimalSet;\n",
        "25": "import com.google.common.collect.testing.SampleElements.Colliders;\n",
        "26": "import com.google.common.testing.EqualsTester;\n",
        "27": "\n",
        "28": "import junit.framework.TestCase;\n",
        "29": "\n",
        "30": "import java.io.Serializable;\n",
        "31": "import java.util.Collections;\n",
        "32": "import java.util.EnumMap;\n",
        "33": "import java.util.LinkedHashMap;\n",
        "34": "import java.util.Map;\n",
        "35": "import java.util.Map.Entry;\n",
        "36": "\n",
        "37": "/**\n",
        "38": " * Tests for {@link ImmutableMap}.\n",
        "39": " *\n",
        "40": " * @author Kevin Bourrillion\n",
        "41": " * @author Jesse Wilson\n",
        "42": " */\n",
        "43": "@GwtCompatible(emulated = true)\n",
        "44": "public class ImmutableMapTest extends TestCase {\n",
        "45": "\n",
        "46": "  public abstract static class AbstractMapTests<K, V>\n",
        "47": "      extends MapInterfaceTest<K, V> {\n",
        "48": "    public AbstractMapTests() {\n",
        "49": "      super(false, false, false, false, false);\n",
        "50": "    }\n",
        "51": "\n",
        "52": "    @Override protected Map<K, V> makeEmptyMap() {\n",
        "53": "      throw new UnsupportedOperationException();\n",
        "54": "    }\n",
        "55": "\n",
        "56": "    private static final Joiner joiner = Joiner.on(\", \");\n",
        "57": "\n",
        "58": "    @Override protected void assertMoreInvariants(Map<K, V> map) {\n",
        "59": "      // TODO: can these be moved to MapInterfaceTest?\n",
        "60": "      for (Entry<K, V> entry : map.entrySet()) {\n",
        "61": "        assertEquals(entry.getKey() + \"=\" + entry.getValue(),\n",
        "62": "            entry.toString());\n",
        "63": "      }\n",
        "64": "\n",
        "65": "      assertEquals(\"{\" + joiner.join(map.entrySet()) + \"}\",\n",
        "66": "          map.toString());\n",
        "67": "      assertEquals(\"[\" + joiner.join(map.entrySet()) + \"]\",\n",
        "68": "          map.entrySet().toString());\n",
        "69": "      assertEquals(\"[\" + joiner.join(map.keySet()) + \"]\",\n",
        "70": "          map.keySet().toString());\n",
        "71": "      assertEquals(\"[\" + joiner.join(map.values()) + \"]\",\n",
        "72": "          map.values().toString());\n",
        "73": "\n",
        "74": "      assertEquals(MinimalSet.from(map.entrySet()), map.entrySet());\n",
        "75": "      assertEquals(Sets.newHashSet(map.keySet()), map.keySet());\n",
        "76": "    }\n",
        "77": "  }\n",
        "78": "\n",
        "79": "  public static class MapTests extends AbstractMapTests<String, Integer> {\n",
        "80": "    @Override protected Map<String, Integer> makeEmptyMap() {\n",
        "81": "      return ImmutableMap.of();\n",
        "82": "    }\n",
        "83": "\n",
        "84": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "85": "      return ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3);\n",
        "86": "    }\n",
        "87": "\n",
        "88": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "89": "      return \"minus one\";\n",
        "90": "    }\n",
        "91": "\n",
        "92": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "93": "      return -1;\n",
        "94": "    }\n",
        "95": "  }\n",
        "96": "\n",
        "97": "  public static class SingletonMapTests\n",
        "98": "      extends AbstractMapTests<String, Integer> {\n",
        "99": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "100": "      return ImmutableMap.of(\"one\", 1);\n",
        "101": "    }\n",
        "102": "\n",
        "103": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "104": "      return \"minus one\";\n",
        "105": "    }\n",
        "106": "\n",
        "107": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "108": "      return -1;\n",
        "109": "    }\n",
        "110": "  }\n",
        "111": "\n",
        "112": "  public static class MapTestsWithBadHashes\n",
        "113": "      extends AbstractMapTests<Object, Integer> {\n",
        "114": "\n",
        "115": "    @Override protected Map<Object, Integer> makeEmptyMap() {\n",
        "116": "      throw new UnsupportedOperationException();\n",
        "117": "    }\n",
        "118": "\n",
        "119": "    @Override protected Map<Object, Integer> makePopulatedMap() {\n",
        "120": "      Colliders colliders = new Colliders();\n",
        "121": "      return ImmutableMap.of(\n",
        "122": "          colliders.e0(), 0,\n",
        "123": "          colliders.e1(), 1,\n",
        "124": "          colliders.e2(), 2,\n",
        "125": "          colliders.e3(), 3);\n",
        "126": "    }\n",
        "127": "\n",
        "128": "    @Override protected Object getKeyNotInPopulatedMap() {\n",
        "129": "      return new Colliders().e4();\n",
        "130": "    }\n",
        "131": "\n",
        "132": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "133": "      return 4;\n",
        "134": "    }\n",
        "135": "  }\n",
        "136": "\n",
        "137": "  public static class CreationTests extends TestCase {\n",
        "138": "    public void testEmptyBuilder() {\n",
        "139": "      ImmutableMap<String, Integer> map\n",
        "140": "          = new Builder<String, Integer>().build();\n",
        "141": "      assertEquals(Collections.<String, Integer>emptyMap(), map);\n",
        "142": "    }\n",
        "143": "\n",
        "144": "    public void testSingletonBuilder() {\n",
        "145": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>()\n",
        "146": "          .put(\"one\", 1)\n",
        "147": "          .build();\n",
        "148": "      assertMapEquals(map, \"one\", 1);\n",
        "149": "    }\n",
        "150": "\n",
        "151": "    public void testBuilder() {\n",
        "152": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>()\n",
        "153": "          .put(\"one\", 1)\n",
        "154": "          .put(\"two\", 2)\n",
        "155": "          .put(\"three\", 3)\n",
        "156": "          .put(\"four\", 4)\n",
        "157": "          .put(\"five\", 5)\n",
        "158": "          .build();\n",
        "159": "      assertMapEquals(map,\n",
        "160": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "161": "    }\n",
        "162": "    \n",
        "163": "    public void testBuilder_orderEntriesByValue() {\n",
        "164": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>()\n",
        "165": "          .orderEntriesByValue(Ordering.natural())\n",
        "166": "          .put(\"three\", 3)\n",
        "167": "          .put(\"one\", 1)\n",
        "168": "          .put(\"five\", 5)\n",
        "169": "          .put(\"four\", 4)\n",
        "170": "          .put(\"two\", 2)\n",
        "171": "          .build();\n",
        "172": "      assertMapEquals(map,\n",
        "173": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "174": "    }\n",
        "175": "    \n",
        "176": "    public void testBuilder_orderEntriesByValueAfterExactSizeBuild() {\n",
        "177": "      Builder<String, Integer> builder = new Builder<String, Integer>(2)\n",
        "178": "          .put(\"four\", 4)\n",
        "179": "          .put(\"one\", 1);\n",
        "180": "      ImmutableMap<String, Integer> keyOrdered = builder.build();\n",
        "181": "      ImmutableMap<String, Integer> valueOrdered =\n",
        "182": "          builder.orderEntriesByValue(Ordering.natural()).build();\n",
        "183": "      assertMapEquals(keyOrdered, \"four\", 4, \"one\", 1);\n",
        "184": "      assertMapEquals(valueOrdered, \"one\", 1, \"four\", 4);\n",
        "185": "    }\n",
        "186": "    \n",
        "187": "    public void testBuilder_orderEntriesByValue_usedTwiceFails() {\n",
        "188": "      ImmutableMap.Builder<String, Integer> builder = new Builder<String, Integer>()\n",
        "189": "          .orderEntriesByValue(Ordering.natural());\n",
        "190": "      try {\n",
        "191": "        builder.orderEntriesByValue(Ordering.natural());\n",
        "192": "        fail(\"Expected IllegalStateException\");\n",
        "193": "      } catch (IllegalStateException expected) {}\n",
        "194": "    }\n",
        "195": "\n",
        "196": "    public void testBuilder_withImmutableEntry() {\n",
        "197": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>()\n",
        "198": "          .put(Maps.immutableEntry(\"one\", 1))\n",
        "199": "          .build();\n",
        "200": "      assertMapEquals(map, \"one\", 1);\n",
        "201": "    }\n",
        "202": "\n",
        "203": "    public void testBuilder_withImmutableEntryAndNullContents() {\n",
        "204": "      Builder<String, Integer> builder = new Builder<String, Integer>();\n",
        "205": "      try {\n",
        "206": "        builder.put(Maps.immutableEntry(\"one\", (Integer) null));\n",
        "207": "        fail();\n",
        "208": "      } catch (NullPointerException expected) {\n",
        "209": "      }\n",
        "210": "      try {\n",
        "211": "        builder.put(Maps.immutableEntry((String) null, 1));\n",
        "212": "        fail();\n",
        "213": "      } catch (NullPointerException expected) {\n",
        "214": "      }\n",
        "215": "    }\n",
        "216": "\n",
        "217": "    private static class StringHolder {\n",
        "218": "      String string;\n",
        "219": "    }\n",
        "220": "\n",
        "221": "    public void testBuilder_withMutableEntry() {\n",
        "222": "      ImmutableMap.Builder<String, Integer> builder =\n",
        "223": "          new Builder<String, Integer>();\n",
        "224": "      final StringHolder holder = new StringHolder();\n",
        "225": "      holder.string = \"one\";\n",
        "226": "      Entry<String, Integer> entry = new AbstractMapEntry<String, Integer>() {\n",
        "227": "        @Override public String getKey() {\n",
        "228": "          return holder.string;\n",
        "229": "        }\n",
        "230": "        @Override public Integer getValue() {\n",
        "231": "          return 1;\n",
        "232": "        }\n",
        "233": "      };\n",
        "234": "\n",
        "235": "      builder.put(entry);\n",
        "236": "      holder.string = \"two\";\n",
        "237": "      assertMapEquals(builder.build(), \"one\", 1);\n",
        "238": "    }\n",
        "239": "\n",
        "240": "    public void testBuilderPutAllWithEmptyMap() {\n",
        "241": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>()\n",
        "242": "          .putAll(Collections.<String, Integer>emptyMap())\n",
        "243": "          .build();\n",
        "244": "      assertEquals(Collections.<String, Integer>emptyMap(), map);\n",
        "245": "    }\n",
        "246": "\n",
        "247": "    public void testBuilderPutAll() {\n",
        "248": "      Map<String, Integer> toPut = new LinkedHashMap<String, Integer>();\n",
        "249": "      toPut.put(\"one\", 1);\n",
        "250": "      toPut.put(\"two\", 2);\n",
        "251": "      toPut.put(\"three\", 3);\n",
        "252": "      Map<String, Integer> moreToPut = new LinkedHashMap<String, Integer>();\n",
        "253": "      moreToPut.put(\"four\", 4);\n",
        "254": "      moreToPut.put(\"five\", 5);\n",
        "255": "\n",
        "256": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>()\n",
        "257": "          .putAll(toPut)\n",
        "258": "          .putAll(moreToPut)\n",
        "259": "          .build();\n",
        "260": "      assertMapEquals(map,\n",
        "261": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "262": "    }\n",
        "263": "\n",
        "264": "    public void testBuilderReuse() {\n",
        "265": "      Builder<String, Integer> builder = new Builder<String, Integer>();\n",
        "266": "      ImmutableMap<String, Integer> mapOne = builder\n",
        "267": "          .put(\"one\", 1)\n",
        "268": "          .put(\"two\", 2)\n",
        "269": "          .build();\n",
        "270": "      ImmutableMap<String, Integer> mapTwo = builder\n",
        "271": "          .put(\"three\", 3)\n",
        "272": "          .put(\"four\", 4)\n",
        "273": "          .build();\n",
        "274": "\n",
        "275": "      assertMapEquals(mapOne, \"one\", 1, \"two\", 2);\n",
        "276": "      assertMapEquals(mapTwo, \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4);\n",
        "277": "    }\n",
        "278": "    \n",
        "279": "    public void testBuilderPutNullKeyFailsAtomically() {\n",
        "280": "      Builder<String, Integer> builder = new Builder<String, Integer>();\n",
        "281": "      try {\n",
        "282": "        builder.put(null, 1);\n",
        "283": "        fail();\n",
        "284": "      } catch (NullPointerException expected) {}\n",
        "285": "      builder.put(\"foo\", 2);\n",
        "286": "      assertMapEquals(builder.build(), \"foo\", 2);\n",
        "287": "    }\n",
        "288": "    \n",
        "289": "    public void testBuilderPutImmutableEntryWithNullKeyFailsAtomically() {\n",
        "290": "      Builder<String, Integer> builder = new Builder<String, Integer>();\n",
        "291": "      try {\n",
        "292": "        builder.put(Maps.immutableEntry((String) null, 1));\n",
        "293": "        fail();\n",
        "294": "      } catch (NullPointerException expected) {}\n",
        "295": "      builder.put(\"foo\", 2);\n",
        "296": "      assertMapEquals(builder.build(), \"foo\", 2);\n",
        "297": "    }\n",
        "298": "    \n",
        "299": "    // for GWT compatibility\n",
        "300": "    static class SimpleEntry<K, V> extends AbstractMapEntry<K, V> {\n",
        "301": "      public K key;\n",
        "302": "      public V value;\n",
        "303": "      \n",
        "304": "      SimpleEntry(K key, V value) {\n",
        "305": "        this.key = key;\n",
        "306": "        this.value = value;\n",
        "307": "      }\n",
        "308": "\n",
        "309": "      @Override\n",
        "310": "      public K getKey() {\n",
        "311": "        return key;\n",
        "312": "      }\n",
        "313": "\n",
        "314": "      @Override\n",
        "315": "      public V getValue() {\n",
        "316": "        return value;\n",
        "317": "      }\n",
        "318": "    }\n",
        "319": "    \n",
        "320": "    public void testBuilderPutMutableEntryWithNullKeyFailsAtomically() {\n",
        "321": "      Builder<String, Integer> builder = new Builder<String, Integer>();\n",
        "322": "      try {\n",
        "323": "        builder.put(new SimpleEntry<String, Integer>(null, 1));\n",
        "324": "        fail();\n",
        "325": "      } catch (NullPointerException expected) {}\n",
        "326": "      builder.put(\"foo\", 2);\n",
        "327": "      assertMapEquals(builder.build(), \"foo\", 2);\n",
        "328": "    }\n",
        "329": "\n",
        "330": "    public void testBuilderPutNullKey() {\n",
        "331": "      Builder<String, Integer> builder = new Builder<String, Integer>();\n",
        "332": "      try {\n",
        "333": "        builder.put(null, 1);\n",
        "334": "        fail();\n",
        "335": "      } catch (NullPointerException expected) {\n",
        "336": "      }\n",
        "337": "    }\n",
        "338": "\n",
        "339": "    public void testBuilderPutNullValue() {\n",
        "340": "      Builder<String, Integer> builder = new Builder<String, Integer>();\n",
        "341": "      try {\n",
        "342": "        builder.put(\"one\", null);\n",
        "343": "        fail();\n",
        "344": "      } catch (NullPointerException expected) {\n",
        "345": "      }\n",
        "346": "    }\n",
        "347": "\n",
        "348": "    public void testBuilderPutNullKeyViaPutAll() {\n",
        "349": "      Builder<String, Integer> builder = new Builder<String, Integer>();\n",
        "350": "      try {\n",
        "351": "        builder.putAll(Collections.<String, Integer>singletonMap(null, 1));\n",
        "352": "        fail();\n",
        "353": "      } catch (NullPointerException expected) {\n",
        "354": "      }\n",
        "355": "    }\n",
        "356": "\n",
        "357": "    public void testBuilderPutNullValueViaPutAll() {\n",
        "358": "      Builder<String, Integer> builder = new Builder<String, Integer>();\n",
        "359": "      try {\n",
        "360": "        builder.putAll(Collections.<String, Integer>singletonMap(\"one\", null));\n",
        "361": "        fail();\n",
        "362": "      } catch (NullPointerException expected) {\n",
        "363": "      }\n",
        "364": "    }\n",
        "365": "\n",
        "366": "    public void testPuttingTheSameKeyTwiceThrowsOnBuild() {\n",
        "367": "      Builder<String, Integer> builder = new Builder<String, Integer>()\n",
        "368": "          .put(\"one\", 1)\n",
        "369": "          .put(\"one\", 1); // throwing on this line would be even better\n",
        "370": "\n",
        "371": "      try {\n",
        "372": "        builder.build();\n",
        "373": "        fail();\n",
        "374": "      } catch (IllegalArgumentException expected) {\n",
        "375": "      }\n",
        "376": "    }\n",
        "377": "\n",
        "378": "    public void testOf() {\n",
        "379": "      assertMapEquals(\n",
        "380": "          ImmutableMap.of(\"one\", 1),\n",
        "381": "          \"one\", 1);\n",
        "382": "      assertMapEquals(\n",
        "383": "          ImmutableMap.of(\"one\", 1, \"two\", 2),\n",
        "384": "          \"one\", 1, \"two\", 2);\n",
        "385": "      assertMapEquals(\n",
        "386": "          ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3),\n",
        "387": "          \"one\", 1, \"two\", 2, \"three\", 3);\n",
        "388": "      assertMapEquals(\n",
        "389": "          ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4),\n",
        "390": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4);\n",
        "391": "      assertMapEquals(\n",
        "392": "          ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5),\n",
        "393": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "394": "    }\n",
        "395": "\n",
        "396": "    public void testOfNullKey() {\n",
        "397": "      try {\n",
        "398": "        ImmutableMap.of(null, 1);\n",
        "399": "        fail();\n",
        "400": "      } catch (NullPointerException expected) {\n",
        "401": "      }\n",
        "402": "\n",
        "403": "      try {\n",
        "404": "        ImmutableMap.of(\"one\", 1, null, 2);\n",
        "405": "        fail();\n",
        "406": "      } catch (NullPointerException expected) {\n",
        "407": "      }\n",
        "408": "    }\n",
        "409": "\n",
        "410": "    public void testOfNullValue() {\n",
        "411": "      try {\n",
        "412": "        ImmutableMap.of(\"one\", null);\n",
        "413": "        fail();\n",
        "414": "      } catch (NullPointerException expected) {\n",
        "415": "      }\n",
        "416": "\n",
        "417": "      try {\n",
        "418": "        ImmutableMap.of(\"one\", 1, \"two\", null);\n",
        "419": "        fail();\n",
        "420": "      } catch (NullPointerException expected) {\n",
        "421": "      }\n",
        "422": "    }\n",
        "423": "\n",
        "424": "    public void testOfWithDuplicateKey() {\n",
        "425": "      try {\n",
        "426": "        ImmutableMap.of(\"one\", 1, \"one\", 1);\n",
        "427": "        fail();\n",
        "428": "      } catch (IllegalArgumentException expected) {\n",
        "429": "      }\n",
        "430": "    }\n",
        "431": "    \n",
        "432": "    public void testCopyOfEmptyMap() {\n",
        "433": "      ImmutableMap<String, Integer> copy\n",
        "434": "          = ImmutableMap.copyOf(Collections.<String, Integer>emptyMap());\n",
        "435": "      assertEquals(Collections.<String, Integer>emptyMap(), copy);\n",
        "436": "      assertSame(copy, ImmutableMap.copyOf(copy));\n",
        "437": "    }\n",
        "438": "\n",
        "439": "    public void testCopyOfSingletonMap() {\n",
        "440": "      ImmutableMap<String, Integer> copy\n",
        "441": "          = ImmutableMap.copyOf(Collections.singletonMap(\"one\", 1));\n",
        "442": "      assertMapEquals(copy, \"one\", 1);\n",
        "443": "      assertSame(copy, ImmutableMap.copyOf(copy));\n",
        "444": "    }\n",
        "445": "\n",
        "446": "    public void testCopyOf() {\n",
        "447": "      Map<String, Integer> original = new LinkedHashMap<String, Integer>();\n",
        "448": "      original.put(\"one\", 1);\n",
        "449": "      original.put(\"two\", 2);\n",
        "450": "      original.put(\"three\", 3);\n",
        "451": "\n",
        "452": "      ImmutableMap<String, Integer> copy = ImmutableMap.copyOf(original);\n",
        "453": "      assertMapEquals(copy, \"one\", 1, \"two\", 2, \"three\", 3);\n",
        "454": "      assertSame(copy, ImmutableMap.copyOf(copy));\n",
        "455": "    }\n",
        "456": "  }\n",
        "457": "\n",
        "458": "  public void testNullGet() {\n",
        "459": "    ImmutableMap<String, Integer> map = ImmutableMap.of(\"one\", 1);\n",
        "460": "    assertNull(map.get(null));\n",
        "461": "  }\n",
        "462": "\n",
        "463": "  public void testAsMultimap() {\n",
        "464": "    ImmutableMap<String, Integer> map = ImmutableMap.of(\n",
        "465": "        \"one\", 1, \"won\", 1, \"two\", 2, \"too\", 2, \"three\", 3);\n",
        "466": "    ImmutableSetMultimap<String, Integer> expected = ImmutableSetMultimap.of(\n",
        "467": "        \"one\", 1, \"won\", 1, \"two\", 2, \"too\", 2, \"three\", 3);\n",
        "468": "    assertEquals(expected, map.asMultimap());\n",
        "469": "  }\n",
        "470": "\n",
        "471": "  public void testAsMultimapWhenEmpty() {\n",
        "472": "    ImmutableMap<String, Integer> map = ImmutableMap.of();\n",
        "473": "    ImmutableSetMultimap<String, Integer> expected = ImmutableSetMultimap.of();\n",
        "474": "    assertEquals(expected, map.asMultimap());\n",
        "475": "  }\n",
        "476": "\n",
        "477": "  public void testAsMultimapCaches() {\n",
        "478": "    ImmutableMap<String, Integer> map = ImmutableMap.of(\"one\", 1);\n",
        "479": "    ImmutableSetMultimap<String, Integer> multimap1 = map.asMultimap();\n",
        "480": "    ImmutableSetMultimap<String, Integer> multimap2 = map.asMultimap();\n",
        "481": "    assertEquals(1, multimap1.asMap().size());\n",
        "482": "    assertSame(multimap1, multimap2);\n",
        "483": "  }\n",
        "484": "\n",
        "485": "  private static <K, V> void assertMapEquals(Map<K, V> map,\n",
        "486": "      Object... alternatingKeysAndValues) {\n",
        "487": "    assertEquals(map.size(), alternatingKeysAndValues.length / 2);\n",
        "488": "    int i = 0;\n",
        "489": "    for (Entry<K, V> entry : map.entrySet()) {\n",
        "490": "      assertEquals(alternatingKeysAndValues[i++], entry.getKey());\n",
        "491": "      assertEquals(alternatingKeysAndValues[i++], entry.getValue());\n",
        "492": "    }\n",
        "493": "  }\n",
        "494": "\n",
        "495": "  private static class IntHolder implements Serializable {\n",
        "496": "    public int value;\n",
        "497": "\n",
        "498": "    public IntHolder(int value) {\n",
        "499": "      this.value = value;\n",
        "500": "    }\n",
        "501": "\n",
        "502": "    @Override public boolean equals(Object o) {\n",
        "503": "      return (o instanceof IntHolder) && ((IntHolder) o).value == value;\n",
        "504": "    }\n",
        "505": "\n",
        "506": "    @Override public int hashCode() {\n",
        "507": "      return value;\n",
        "508": "    }\n",
        "509": "\n",
        "510": "    private static final long serialVersionUID = 5;\n",
        "511": "  }\n",
        "512": "\n",
        "513": "  public void testMutableValues() {\n",
        "514": "    IntHolder holderA = new IntHolder(1);\n",
        "515": "    IntHolder holderB = new IntHolder(2);\n",
        "516": "    Map<String, IntHolder> map = ImmutableMap.of(\"a\", holderA, \"b\", holderB);\n",
        "517": "    holderA.value = 3;\n",
        "518": "    assertTrue(map.entrySet().contains(\n",
        "519": "        Maps.immutableEntry(\"a\", new IntHolder(3))));\n",
        "520": "    Map<String, Integer> intMap = ImmutableMap.of(\"a\", 3, \"b\", 2);\n",
        "521": "    assertEquals(intMap.hashCode(), map.entrySet().hashCode());\n",
        "522": "    assertEquals(intMap.hashCode(), map.hashCode());\n",
        "523": "  }\n",
        "524": "\n",
        "525": "  public void testCopyOfEnumMap() {\n",
        "526": "    EnumMap<AnEnum, String> map = new EnumMap<AnEnum, String>(AnEnum.class);\n",
        "527": "    map.put(AnEnum.B, \"foo\");\n",
        "528": "    map.put(AnEnum.C, \"bar\");\n",
        "529": "    assertTrue(ImmutableMap.copyOf(map) instanceof ImmutableEnumMap);\n",
        "530": "  }\n",
        "531": "\n",
        "532": "  public void testEquals() {\n",
        "533": "    new EqualsTester()\n",
        "534": "        .addEqualityGroup(ImmutableList.of(), ImmutableList.of())\n",
        "535": "        .addEqualityGroup(ImmutableList.of(1), ImmutableList.of(1))\n",
        "536": "        .addEqualityGroup(ImmutableList.of(1, 2), ImmutableList.of(1, 2))\n",
        "537": "        .addEqualityGroup(ImmutableList.of(1, 2, 3))\n",
        "538": "        .addEqualityGroup(ImmutableList.of(1, 2, 3, 4))\n",
        "539": "        .addEqualityGroup(ImmutableList.of(1, 2, 3, 4, 5))\n",
        "540": "        .addEqualityGroup(ImmutableList.of(1, 2, 3, 4, 5, 6))\n",
        "541": "        .addEqualityGroup(ImmutableList.of(1, 2, 3, 4, 5, 6, 7))\n",
        "542": "        .addEqualityGroup(ImmutableList.of(1, 2, 3, 4, 5, 6, 7, 8))\n",
        "543": "        .addEqualityGroup(ImmutableList.of(1, 2, 3, 4, 5, 6, 7, 8, 9))\n",
        "544": "        .addEqualityGroup(ImmutableList.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n",
        "545": "        .addEqualityGroup(ImmutableList.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n",
        "546": "        .addEqualityGroup(ImmutableList.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n",
        "547": "        .addEqualityGroup(ImmutableList.of(100, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n",
        "548": "        .addEqualityGroup(ImmutableList.of(1, 200, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n",
        "549": "        .addEqualityGroup(ImmutableList.of(1, 2, 300, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n",
        "550": "        .addEqualityGroup(ImmutableList.of(1, 2, 3, 400, 5, 6, 7, 8, 9, 10, 11, 12))\n",
        "551": "        .addEqualityGroup(ImmutableList.of(1, 2, 3, 4, 500, 6, 7, 8, 9, 10, 11, 12))\n",
        "552": "        .addEqualityGroup(ImmutableList.of(1, 2, 3, 4, 5, 600, 7, 8, 9, 10, 11, 12))\n",
        "553": "        .addEqualityGroup(ImmutableList.of(1, 2, 3, 4, 5, 6, 700, 8, 9, 10, 11, 12))\n",
        "554": "        .addEqualityGroup(ImmutableList.of(1, 2, 3, 4, 5, 6, 7, 800, 9, 10, 11, 12))\n",
        "555": "        .addEqualityGroup(ImmutableList.of(1, 2, 3, 4, 5, 6, 7, 8, 900, 10, 11, 12))\n",
        "556": "        .addEqualityGroup(ImmutableList.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 1000, 11, 12))\n",
        "557": "        .addEqualityGroup(ImmutableList.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1100, 12))\n",
        "558": "        .addEqualityGroup(ImmutableList.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1200))\n",
        "559": "        .testEquals();\n",
        "560": "\n",
        "561": "  }\n",
        "562": "}\n",
        "563": "\n"
    }
}