{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.testers;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionFeature.KNOWN_ORDER;\n",
        "20": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import com.google.common.collect.testing.AbstractCollectionTester;\n",
        "24": "import com.google.common.collect.testing.Helpers;\n",
        "25": "import com.google.common.collect.testing.WrongType;\n",
        "26": "import com.google.common.collect.testing.features.CollectionFeature;\n",
        "27": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "28": "\n",
        "29": "import java.util.Arrays;\n",
        "30": "import java.util.List;\n",
        "31": "\n",
        "32": "/**\n",
        "33": " * A generic JUnit test which tests {@code toArray()} operations on a\n",
        "34": " * collection. Can't be invoked directly; please see\n",
        "35": " * {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.\n",
        "36": " *\n",
        "37": " * @author Kevin Bourrillion\n",
        "38": " * @author Chris Povirk\n",
        "39": " */\n",
        "40": "@GwtCompatible(emulated = true)\n",
        "41": "public class CollectionToArrayTester<E> extends AbstractCollectionTester<E> {\n",
        "42": "  public void testToArray_noArgs() {\n",
        "43": "    Object[] array = collection.toArray();\n",
        "44": "    expectArrayContentsAnyOrder(createSamplesArray(), array);\n",
        "45": "  }\n",
        "46": "\n",
        "47": "  /**\n",
        "48": "   * {@link Collection#toArray(Object[])} says: \"Note that\n",
        "49": "   * <tt>toArray(new Object[0])</tt> is identical in function to\n",
        "50": "   * <tt>toArray()</tt>.\"\n",
        "51": "   *\n",
        "52": "   * <p>For maximum effect, the collection under test should be created from an\n",
        "53": "   * element array of a type other than {@code Object[]}.\n",
        "54": "   */\n",
        "55": "  public void testToArray_isPlainObjectArray() {\n",
        "56": "    Object[] array = collection.toArray();\n",
        "57": "    assertEquals(Object[].class, array.getClass());\n",
        "58": "  }\n",
        "59": "\n",
        "60": "  public void testToArray_emptyArray() {\n",
        "61": "    E[] empty = getSubjectGenerator().createArray(0);\n",
        "62": "    E[] array = collection.toArray(empty);\n",
        "63": "    assertEquals(\"toArray(emptyT[]) should return an array of type T\",\n",
        "64": "        empty.getClass(), array.getClass());\n",
        "65": "    assertEquals(\"toArray(emptyT[]).length:\", getNumElements(), array.length);\n",
        "66": "    expectArrayContentsAnyOrder(createSamplesArray(), array);\n",
        "67": "  }\n",
        "68": "\n",
        "69": "  @CollectionFeature.Require(KNOWN_ORDER)\n",
        "70": "  public void testToArray_emptyArray_ordered() {\n",
        "71": "    E[] empty = getSubjectGenerator().createArray(0);\n",
        "72": "    E[] array = collection.toArray(empty);\n",
        "73": "    assertEquals(\"toArray(emptyT[]) should return an array of type T\",\n",
        "74": "        empty.getClass(), array.getClass());\n",
        "75": "    assertEquals(\"toArray(emptyT[]).length:\", getNumElements(), array.length);\n",
        "76": "    expectArrayContentsInOrder(getOrderedElements(), array);\n",
        "77": "  }\n",
        "78": "\n",
        "79": "  public void testToArray_emptyArrayOfObject() {\n",
        "80": "    Object[] in = new Object[0];\n",
        "81": "    Object[] array = collection.toArray(in);\n",
        "82": "    assertEquals(\"toArray(emptyObject[]) should return an array of type Object\",\n",
        "83": "        Object[].class, array.getClass());\n",
        "84": "    assertEquals(\"toArray(emptyObject[]).length\",\n",
        "85": "        getNumElements(), array.length);\n",
        "86": "    expectArrayContentsAnyOrder(createSamplesArray(), array);\n",
        "87": "  }\n",
        "88": "\n",
        "89": "  public void testToArray_rightSizedArray() {\n",
        "90": "    E[] array = getSubjectGenerator().createArray(getNumElements());\n",
        "91": "    assertSame(\"toArray(sameSizeE[]) should return the given array\",\n",
        "92": "        array, collection.toArray(array));\n",
        "93": "    expectArrayContentsAnyOrder(createSamplesArray(), array);\n",
        "94": "  }\n",
        "95": "\n",
        "96": "  @CollectionFeature.Require(KNOWN_ORDER)\n",
        "97": "  public void testToArray_rightSizedArray_ordered() {\n",
        "98": "    E[] array = getSubjectGenerator().createArray(getNumElements());\n",
        "99": "    assertSame(\"toArray(sameSizeE[]) should return the given array\",\n",
        "100": "        array, collection.toArray(array));\n",
        "101": "    expectArrayContentsInOrder(getOrderedElements(), array);\n",
        "102": "  }\n",
        "103": "\n",
        "104": "  public void testToArray_rightSizedArrayOfObject() {\n",
        "105": "    Object[] array = new Object[getNumElements()];\n",
        "106": "    assertSame(\"toArray(sameSizeObject[]) should return the given array\",\n",
        "107": "        array, collection.toArray(array));\n",
        "108": "    expectArrayContentsAnyOrder(createSamplesArray(), array);\n",
        "109": "  }\n",
        "110": "\n",
        "111": "  @CollectionFeature.Require(KNOWN_ORDER)\n",
        "112": "  public void testToArray_rightSizedArrayOfObject_ordered() {\n",
        "113": "    Object[] array = new Object[getNumElements()];\n",
        "114": "    assertSame(\"toArray(sameSizeObject[]) should return the given array\",\n",
        "115": "        array, collection.toArray(array));\n",
        "116": "    expectArrayContentsInOrder(getOrderedElements(), array);\n",
        "117": "  }\n",
        "118": "\n",
        "119": "  public void testToArray_oversizedArray() {\n",
        "120": "    E[] array = getSubjectGenerator().createArray(getNumElements() + 2);\n",
        "121": "    array[getNumElements()] = e3();\n",
        "122": "    array[getNumElements() + 1] = e3();\n",
        "123": "    assertSame(\"toArray(overSizedE[]) should return the given array\",\n",
        "124": "        array, collection.toArray(array));\n",
        "125": "\n",
        "126": "    List<E> subArray = Arrays.asList(array).subList(0, getNumElements());\n",
        "127": "    E[] expectedSubArray = createSamplesArray();\n",
        "128": "    for (int i = 0; i < getNumElements(); i++) {\n",
        "129": "      assertTrue(\n",
        "130": "          \"toArray(overSizedE[]) should contain element \" + expectedSubArray[i],\n",
        "131": "          subArray.contains(expectedSubArray[i]));\n",
        "132": "    }\n",
        "133": "    assertNull(\"The array element \"\n",
        "134": "        + \"immediately following the end of the collection should be nulled\",\n",
        "135": "        array[getNumElements()]);\n",
        "136": "    // array[getNumElements() + 1] might or might not have been nulled\n",
        "137": "  }\n",
        "138": "\n",
        "139": "  @CollectionFeature.Require(KNOWN_ORDER)\n",
        "140": "  public void testToArray_oversizedArray_ordered() {\n",
        "141": "    E[] array = getSubjectGenerator().createArray(getNumElements() + 2);\n",
        "142": "    array[getNumElements()] = e3();\n",
        "143": "    array[getNumElements() + 1] = e3();\n",
        "144": "    assertSame(\"toArray(overSizedE[]) should return the given array\",\n",
        "145": "        array, collection.toArray(array));\n",
        "146": "\n",
        "147": "    List<E> expected = getOrderedElements();\n",
        "148": "    for (int i = 0; i < getNumElements(); i++) {\n",
        "149": "      assertEquals(expected.get(i), array[i]);\n",
        "150": "    }\n",
        "151": "    assertNull(\"The array element \"\n",
        "152": "        + \"immediately following the end of the collection should be nulled\",\n",
        "153": "        array[getNumElements()]);\n",
        "154": "    // array[getNumElements() + 1] might or might not have been nulled\n",
        "155": "  }\n",
        "156": "\n",
        "157": "  @CollectionSize.Require(absent = ZERO)\n",
        "158": "  public void testToArray_emptyArrayOfWrongTypeForNonEmptyCollection() {\n",
        "159": "    try {\n",
        "160": "      WrongType[] array = new WrongType[0];\n",
        "161": "      collection.toArray(array);\n",
        "162": "      fail(\"toArray(notAssignableTo[]) should throw\");\n",
        "163": "    } catch (ArrayStoreException expected) {\n",
        "164": "    }\n",
        "165": "  }\n",
        "166": "\n",
        "167": "  @CollectionSize.Require(ZERO)\n",
        "168": "  public void testToArray_emptyArrayOfWrongTypeForEmptyCollection() {\n",
        "169": "    WrongType[] array = new WrongType[0];\n",
        "170": "    assertSame(\n",
        "171": "        \"toArray(sameSizeNotAssignableTo[]) should return the given array\",\n",
        "172": "        array, collection.toArray(array));\n",
        "173": "  }\n",
        "174": "\n",
        "175": "  private void expectArrayContentsAnyOrder(Object[] expected, Object[] actual) {\n",
        "176": "    Helpers.assertEqualIgnoringOrder(\n",
        "177": "        Arrays.asList(expected), Arrays.asList(actual));\n",
        "178": "  }\n",
        "179": "\n",
        "180": "  private void expectArrayContentsInOrder(List<E> expected, Object[] actual) {\n",
        "181": "    assertEquals(\"toArray() ordered contents: \",\n",
        "182": "        expected, Arrays.asList(actual));\n",
        "183": "  }\n",
        "184": "}\n",
        "185": "\n"
    }
}