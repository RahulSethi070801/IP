{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2009 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "6": " *\n",
        "7": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "8": " *\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the\n",
        "10": " * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n",
        "11": " * express or implied. See the License for the specific language governing permissions and\n",
        "12": " * limitations under the License.\n",
        "13": " */\n",
        "14": "\n",
        "15": "package com.google.common.collect;\n",
        "16": "\n",
        "17": "import com.google.common.annotations.GwtCompatible;\n",
        "18": "\n",
        "19": "import java.util.Comparator;\n",
        "20": "\n",
        "21": "/**\n",
        "22": " * List returned by {@code ImmutableSortedSet.asList()} when the set isn't empty.\n",
        "23": " *\n",
        "24": " * @author Jared Levy\n",
        "25": " * @author Louis Wasserman\n",
        "26": " */\n",
        "27": "@GwtCompatible(emulated = true)\n",
        "28": "@SuppressWarnings(\"serial\")\n",
        "29": "final class ImmutableSortedAsList<E> extends RegularImmutableAsList<E>\n",
        "30": "    implements SortedIterable<E> {\n",
        "31": "  ImmutableSortedAsList(ImmutableSortedSet<E> backingSet, ImmutableList<E> backingList) {\n",
        "32": "    super(backingSet, backingList);\n",
        "33": "  }\n",
        "34": "\n",
        "35": "  @Override\n",
        "36": "  ImmutableSortedSet<E> delegateCollection() {\n",
        "37": "    return (ImmutableSortedSet<E>) super.delegateCollection();\n",
        "38": "  }\n",
        "39": "\n",
        "40": "  @Override\n",
        "41": "  public Comparator<? super E> comparator() {\n",
        "42": "    return delegateCollection().comparator();\n",
        "43": "  }\n",
        "44": "\n",
        "45": "  // Override indexOf() and lastIndexOf() to be O(log N) instead of O(N).\n",
        "46": "\n",
        "47": "  @Override\n",
        "48": "  public boolean contains(Object target) {\n",
        "49": "    // Necessary for ISS's with comparators inconsistent with equals.\n",
        "50": "    return indexOf(target) >= 0;\n",
        "51": "  }\n",
        "52": "}\n",
        "53": "\n"
    }
}