{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2012 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.collect.testing.AnEnum;\n",
        "23": "import com.google.common.collect.testing.Helpers;\n",
        "24": "import com.google.common.collect.testing.TestEnumMapGenerator;\n",
        "25": "\n",
        "26": "import junit.framework.TestCase;\n",
        "27": "\n",
        "28": "import java.util.Map;\n",
        "29": "import java.util.Map.Entry;\n",
        "30": "\n",
        "31": "/**\n",
        "32": " * Tests for {@code ImmutableEnumMap}.\n",
        "33": " *\n",
        "34": " * @author Louis Wasserman\n",
        "35": " */\n",
        "36": "@GwtCompatible(emulated = true)\n",
        "37": "public class ImmutableEnumMapTest extends TestCase {\n",
        "38": "  public static class ImmutableEnumMapGenerator extends TestEnumMapGenerator {\n",
        "39": "    @Override\n",
        "40": "    protected Map<AnEnum, String> create(Entry<AnEnum, String>[] entries) {\n",
        "41": "      Map<AnEnum, String> map = Maps.newHashMap();\n",
        "42": "      for (Entry<AnEnum, String> entry : entries) {\n",
        "43": "        map.put(entry.getKey(), entry.getValue());\n",
        "44": "      }\n",
        "45": "      return Maps.immutableEnumMap(map);\n",
        "46": "    }\n",
        "47": "  }\n",
        "48": "\n",
        "49": "  public void testEmptyImmutableEnumMap() {\n",
        "50": "    ImmutableMap<AnEnum, String> map = Maps.immutableEnumMap(ImmutableMap.<AnEnum, String>of());\n",
        "51": "    assertEquals(ImmutableMap.of(), map);\n",
        "52": "  }\n",
        "53": "\n",
        "54": "  public void testImmutableEnumMapOrdering() {\n",
        "55": "    ImmutableMap<AnEnum, String> map = Maps.immutableEnumMap(\n",
        "56": "        ImmutableMap.of(AnEnum.C, \"c\", AnEnum.A, \"a\", AnEnum.E, \"e\"));\n",
        "57": "\n",
        "58": "    assertThat(map.entrySet()).containsExactly(\n",
        "59": "        Helpers.mapEntry(AnEnum.A, \"a\"),\n",
        "60": "        Helpers.mapEntry(AnEnum.C, \"c\"),\n",
        "61": "        Helpers.mapEntry(AnEnum.E, \"e\")).inOrder();\n",
        "62": "  }\n",
        "63": "}\n",
        "64": "\n"
    }
}