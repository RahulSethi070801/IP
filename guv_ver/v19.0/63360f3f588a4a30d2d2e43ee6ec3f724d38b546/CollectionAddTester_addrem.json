{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.testers;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionFeature.ALLOWS_NULL_VALUES;\n",
        "20": "import static com.google.common.collect.testing.features.CollectionFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION;\n",
        "21": "import static com.google.common.collect.testing.features.CollectionFeature.RESTRICTS_ELEMENTS;\n",
        "22": "import static com.google.common.collect.testing.features.CollectionFeature.SUPPORTS_ADD;\n",
        "23": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "24": "\n",
        "25": "import com.google.common.annotations.GwtCompatible;\n",
        "26": "import com.google.common.collect.testing.AbstractCollectionTester;\n",
        "27": "import com.google.common.collect.testing.features.CollectionFeature;\n",
        "28": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "29": "\n",
        "30": "import java.util.ConcurrentModificationException;\n",
        "31": "import java.util.Iterator;\n",
        "32": "\n",
        "33": "/**\n",
        "34": " * A generic JUnit test which tests {@code add} operations on a collection.\n",
        "35": " * Can't be invoked directly; please see\n",
        "36": " * {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.\n",
        "37": " *\n",
        "38": " * @author Chris Povirk\n",
        "39": " * @author Kevin Bourrillion\n",
        "40": " */\n",
        "41": "@SuppressWarnings(\"unchecked\") // too many \"unchecked generic array creations\"\n",
        "42": "@GwtCompatible(emulated = true)\n",
        "43": "public class CollectionAddTester<E> extends AbstractCollectionTester<E> {\n",
        "44": "  @CollectionFeature.Require(SUPPORTS_ADD)\n",
        "45": "  public void testAdd_supportedNotPresent() {\n",
        "46": "    assertTrue(\"add(notPresent) should return true\",\n",
        "47": "        collection.add(e3()));\n",
        "48": "    expectAdded(e3());\n",
        "49": "  }\n",
        "50": "\n",
        "51": "  @CollectionFeature.Require(absent = SUPPORTS_ADD)\n",
        "52": "  public void testAdd_unsupportedNotPresent() {\n",
        "53": "    try {\n",
        "54": "      collection.add(e3());\n",
        "55": "      fail(\"add(notPresent) should throw\");\n",
        "56": "    } catch (UnsupportedOperationException expected) {\n",
        "57": "    }\n",
        "58": "    expectUnchanged();\n",
        "59": "    expectMissing(e3());\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  @CollectionFeature.Require(absent = SUPPORTS_ADD)\n",
        "63": "  @CollectionSize.Require(absent = ZERO)\n",
        "64": "  public void testAdd_unsupportedPresent() {\n",
        "65": "    try {\n",
        "66": "      assertFalse(\"add(present) should return false or throw\",\n",
        "67": "          collection.add(e0()));\n",
        "68": "    } catch (UnsupportedOperationException tolerated) {\n",
        "69": "    }\n",
        "70": "    expectUnchanged();\n",
        "71": "  }\n",
        "72": "\n",
        "73": "  @CollectionFeature.Require(\n",
        "74": "      value = {SUPPORTS_ADD, ALLOWS_NULL_VALUES},\n",
        "75": "      absent = RESTRICTS_ELEMENTS)\n",
        "76": "  public void testAdd_nullSupported() {\n",
        "77": "    assertTrue(\"add(null) should return true\", collection.add(null));\n",
        "78": "    expectAdded((E) null);\n",
        "79": "  }\n",
        "80": "\n",
        "81": "  @CollectionFeature.Require(value = SUPPORTS_ADD,\n",
        "82": "      absent = ALLOWS_NULL_VALUES)\n",
        "83": "  public void testAdd_nullUnsupported() {\n",
        "84": "    try {\n",
        "85": "      collection.add(null);\n",
        "86": "      fail(\"add(null) should throw\");\n",
        "87": "    } catch (NullPointerException expected) {\n",
        "88": "    }\n",
        "89": "    expectUnchanged();\n",
        "90": "    expectNullMissingWhenNullUnsupported(\n",
        "91": "        \"Should not contain null after unsupported add(null)\");\n",
        "92": "  }\n",
        "93": "\n",
        "94": "  @CollectionFeature.Require({SUPPORTS_ADD,\n",
        "95": "      FAILS_FAST_ON_CONCURRENT_MODIFICATION})\n",
        "96": "  @CollectionSize.Require(absent = ZERO)\n",
        "97": "  public void testAddConcurrentWithIteration() {\n",
        "98": "    try {\n",
        "99": "      Iterator<E> iterator = collection.iterator();\n",
        "100": "      assertTrue(collection.add(e3()));\n",
        "101": "      iterator.next();\n",
        "102": "      fail(\"Expected ConcurrentModificationException\");\n",
        "103": "    } catch (ConcurrentModificationException expected) {\n",
        "104": "      // success\n",
        "105": "    }\n",
        "106": "  }\n",
        "107": "}\n",
        "108": "\n"
    }
}