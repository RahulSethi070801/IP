{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "import static java.util.Arrays.asList;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import com.google.common.collect.testing.MinimalCollection;\n",
        "24": "import com.google.common.collect.testing.MinimalIterable;\n",
        "25": "\n",
        "26": "import junit.framework.TestCase;\n",
        "27": "\n",
        "28": "import java.util.Collection;\n",
        "29": "import java.util.Collections;\n",
        "30": "import java.util.Iterator;\n",
        "31": "import java.util.List;\n",
        "32": "import java.util.Set;\n",
        "33": "\n",
        "34": "/**\n",
        "35": " * Base class for {@link ImmutableSet} and  {@link ImmutableSortedSet} tests.\n",
        "36": " *\n",
        "37": " * @author Kevin Bourrillion\n",
        "38": " * @author Jared Levy\n",
        "39": " */\n",
        "40": "@GwtCompatible(emulated = true)\n",
        "41": "public abstract class AbstractImmutableSetTest extends TestCase {\n",
        "42": "\n",
        "43": "  protected abstract Set<String> of();\n",
        "44": "  protected abstract Set<String> of(String e);\n",
        "45": "  protected abstract Set<String> of(String e1, String e2);\n",
        "46": "  protected abstract Set<String> of(String e1, String e2, String e3);\n",
        "47": "  protected abstract Set<String> of(String e1, String e2, String e3, String e4);\n",
        "48": "  protected abstract Set<String> of(String e1, String e2, String e3, String e4,\n",
        "49": "      String e5);\n",
        "50": "  protected abstract Set<String> of(String e1, String e2, String e3, String e4,\n",
        "51": "      String e5, String e6, String... rest);\n",
        "52": "  protected abstract Set<String> copyOf(String[] elements);\n",
        "53": "  protected abstract Set<String> copyOf(Collection<String> elements);\n",
        "54": "  protected abstract Set<String> copyOf(Iterable<String> elements);\n",
        "55": "  protected abstract Set<String> copyOf(Iterator<String> elements);\n",
        "56": "\n",
        "57": "  public void testCreation_noArgs() {\n",
        "58": "    Set<String> set = of();\n",
        "59": "    assertEquals(Collections.<String>emptySet(), set);\n",
        "60": "    assertSame(of(), set);\n",
        "61": "  }\n",
        "62": "\n",
        "63": "  public void testCreation_oneElement() {\n",
        "64": "    Set<String> set = of(\"a\");\n",
        "65": "    assertEquals(Collections.singleton(\"a\"), set);\n",
        "66": "  }\n",
        "67": "\n",
        "68": "  public void testCreation_twoElements() {\n",
        "69": "    Set<String> set = of(\"a\", \"b\");\n",
        "70": "    assertEquals(Sets.newHashSet(\"a\", \"b\"), set);\n",
        "71": "  }\n",
        "72": "\n",
        "73": "  public void testCreation_threeElements() {\n",
        "74": "    Set<String> set = of(\"a\", \"b\", \"c\");\n",
        "75": "    assertEquals(Sets.newHashSet(\"a\", \"b\", \"c\"), set);\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  public void testCreation_fourElements() {\n",
        "79": "    Set<String> set = of(\"a\", \"b\", \"c\", \"d\");\n",
        "80": "    assertEquals(Sets.newHashSet(\"a\", \"b\", \"c\", \"d\"), set);\n",
        "81": "  }\n",
        "82": "\n",
        "83": "  public void testCreation_fiveElements() {\n",
        "84": "    Set<String> set = of(\"a\", \"b\", \"c\", \"d\", \"e\");\n",
        "85": "    assertEquals(Sets.newHashSet(\"a\", \"b\", \"c\", \"d\", \"e\"), set);\n",
        "86": "  }\n",
        "87": "\n",
        "88": "  public void testCreation_sixElements() {\n",
        "89": "    Set<String> set = of(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\");\n",
        "90": "    assertEquals(Sets.newHashSet(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"), set);\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  public void testCreation_sevenElements() {\n",
        "94": "    Set<String> set = of(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\");\n",
        "95": "    assertEquals(Sets.newHashSet(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"), set);\n",
        "96": "  }\n",
        "97": "\n",
        "98": "  public void testCreation_eightElements() {\n",
        "99": "    Set<String> set = of(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\");\n",
        "100": "    assertEquals(Sets.newHashSet(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"), set);\n",
        "101": "  }\n",
        "102": "\n",
        "103": "  public void testCopyOf_emptyArray() {\n",
        "104": "    String[] array = new String[0];\n",
        "105": "    Set<String> set = copyOf(array);\n",
        "106": "    assertEquals(Collections.<String>emptySet(), set);\n",
        "107": "    assertSame(of(), set);\n",
        "108": "  }\n",
        "109": "\n",
        "110": "  public void testCopyOf_arrayOfOneElement() {\n",
        "111": "    String[] array = new String[] { \"a\" };\n",
        "112": "    Set<String> set = copyOf(array);\n",
        "113": "    assertEquals(Collections.singleton(\"a\"), set);\n",
        "114": "  }\n",
        "115": "\n",
        "116": "  public void testCopyOf_nullArray() {\n",
        "117": "    try {\n",
        "118": "      copyOf((String[]) null);\n",
        "119": "      fail();\n",
        "120": "    } catch (NullPointerException expected) {\n",
        "121": "    }\n",
        "122": "  }\n",
        "123": "\n",
        "124": "  public void testCopyOf_arrayContainingOnlyNull() {\n",
        "125": "    String[] array = new String[] { null };\n",
        "126": "    try {\n",
        "127": "      copyOf(array);\n",
        "128": "      fail();\n",
        "129": "    } catch (NullPointerException expected) {\n",
        "130": "    }\n",
        "131": "  }\n",
        "132": "\n",
        "133": "  public void testCopyOf_collection_empty() {\n",
        "134": "    // \"<String>\" is required to work around a javac 1.5 bug.\n",
        "135": "    Collection<String> c = MinimalCollection.<String>of();\n",
        "136": "    Set<String> set = copyOf(c);\n",
        "137": "    assertEquals(Collections.<String>emptySet(), set);\n",
        "138": "    assertSame(of(), set);\n",
        "139": "  }\n",
        "140": "\n",
        "141": "  public void testCopyOf_collection_oneElement() {\n",
        "142": "    Collection<String> c = MinimalCollection.of(\"a\");\n",
        "143": "    Set<String> set = copyOf(c);\n",
        "144": "    assertEquals(Collections.singleton(\"a\"), set);\n",
        "145": "  }\n",
        "146": "\n",
        "147": "  public void testCopyOf_collection_oneElementRepeated() {\n",
        "148": "    Collection<String> c = MinimalCollection.of(\"a\", \"a\", \"a\");\n",
        "149": "    Set<String> set = copyOf(c);\n",
        "150": "    assertEquals(Collections.singleton(\"a\"), set);\n",
        "151": "  }\n",
        "152": "\n",
        "153": "  public void testCopyOf_collection_general() {\n",
        "154": "    Collection<String> c = MinimalCollection.of(\"a\", \"b\", \"a\");\n",
        "155": "    Set<String> set = copyOf(c);\n",
        "156": "    assertEquals(2, set.size());\n",
        "157": "    assertTrue(set.contains(\"a\"));\n",
        "158": "    assertTrue(set.contains(\"b\"));\n",
        "159": "  }\n",
        "160": "\n",
        "161": "  public void testCopyOf_collectionContainingNull() {\n",
        "162": "    Collection<String> c = MinimalCollection.of(\"a\", null, \"b\");\n",
        "163": "    try {\n",
        "164": "      copyOf(c);\n",
        "165": "      fail();\n",
        "166": "    } catch (NullPointerException expected) {\n",
        "167": "    }\n",
        "168": "  }\n",
        "169": "\n",
        "170": "  public void testCopyOf_iterator_empty() {\n",
        "171": "    Iterator<String> iterator = Iterators.emptyIterator();\n",
        "172": "    Set<String> set = copyOf(iterator);\n",
        "173": "    assertEquals(Collections.<String>emptySet(), set);\n",
        "174": "    assertSame(of(), set);\n",
        "175": "  }\n",
        "176": "\n",
        "177": "  public void testCopyOf_iterator_oneElement() {\n",
        "178": "    Iterator<String> iterator = Iterators.singletonIterator(\"a\");\n",
        "179": "    Set<String> set = copyOf(iterator);\n",
        "180": "    assertEquals(Collections.singleton(\"a\"), set);\n",
        "181": "  }\n",
        "182": "\n",
        "183": "  public void testCopyOf_iterator_oneElementRepeated() {\n",
        "184": "    Iterator<String> iterator = Iterators.forArray(\"a\", \"a\", \"a\");\n",
        "185": "    Set<String> set = copyOf(iterator);\n",
        "186": "    assertEquals(Collections.singleton(\"a\"), set);\n",
        "187": "  }\n",
        "188": "\n",
        "189": "  public void testCopyOf_iterator_general() {\n",
        "190": "    Iterator<String> iterator = Iterators.forArray(\"a\", \"b\", \"a\");\n",
        "191": "    Set<String> set = copyOf(iterator);\n",
        "192": "    assertEquals(2, set.size());\n",
        "193": "    assertTrue(set.contains(\"a\"));\n",
        "194": "    assertTrue(set.contains(\"b\"));\n",
        "195": "  }\n",
        "196": "\n",
        "197": "  public void testCopyOf_iteratorContainingNull() {\n",
        "198": "    Iterator<String> c = Iterators.forArray(\"a\", null, \"b\");\n",
        "199": "    try {\n",
        "200": "      copyOf(c);\n",
        "201": "      fail();\n",
        "202": "    } catch (NullPointerException expected) {\n",
        "203": "    }\n",
        "204": "  }\n",
        "205": "\n",
        "206": "  private static class CountingIterable implements Iterable<String> {\n",
        "207": "    int count = 0;\n",
        "208": "    @Override\n",
        "209": "    public Iterator<String> iterator() {\n",
        "210": "      count++;\n",
        "211": "      return Iterators.forArray(\"a\", \"b\", \"a\");\n",
        "212": "    }\n",
        "213": "  }\n",
        "214": "\n",
        "215": "  public void testCopyOf_plainIterable() {\n",
        "216": "    CountingIterable iterable = new CountingIterable();\n",
        "217": "    Set<String> set = copyOf(iterable);\n",
        "218": "    assertEquals(2, set.size());\n",
        "219": "    assertTrue(set.contains(\"a\"));\n",
        "220": "    assertTrue(set.contains(\"b\"));\n",
        "221": "  }\n",
        "222": "\n",
        "223": "  public void testCopyOf_plainIterable_iteratesOnce() {\n",
        "224": "    CountingIterable iterable = new CountingIterable();\n",
        "225": "    copyOf(iterable);\n",
        "226": "    assertEquals(1, iterable.count);\n",
        "227": "  }\n",
        "228": "\n",
        "229": "  public void testCopyOf_shortcut_empty() {\n",
        "230": "    Collection<String> c = of();\n",
        "231": "    assertEquals(Collections.<String>emptySet(), copyOf(c));\n",
        "232": "    assertSame(c, copyOf(c));\n",
        "233": "  }\n",
        "234": "\n",
        "235": "  public void testCopyOf_shortcut_singleton() {\n",
        "236": "    Collection<String> c = of(\"a\");\n",
        "237": "    assertEquals(Collections.singleton(\"a\"), copyOf(c));\n",
        "238": "    assertSame(c, copyOf(c));\n",
        "239": "  }\n",
        "240": "\n",
        "241": "  public void testCopyOf_shortcut_sameType() {\n",
        "242": "    Collection<String> c = of(\"a\", \"b\", \"c\");\n",
        "243": "    assertSame(c, copyOf(c));\n",
        "244": "  }\n",
        "245": "\n",
        "246": "  public void testToString() {\n",
        "247": "    Set<String> set = of(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\");\n",
        "248": "    assertEquals(\"[a, b, c, d, e, f, g]\", set.toString());\n",
        "249": "  }\n",
        "250": "\n",
        "251": "  public void testContainsAll_sameType() {\n",
        "252": "    Collection<String> c = of(\"a\", \"b\", \"c\");\n",
        "253": "    assertFalse(c.containsAll(of(\"a\", \"b\", \"c\", \"d\")));\n",
        "254": "    assertFalse(c.containsAll(of(\"a\", \"d\")));\n",
        "255": "    assertTrue(c.containsAll(of(\"a\", \"c\")));\n",
        "256": "    assertTrue(c.containsAll(of(\"a\", \"b\", \"c\")));\n",
        "257": "  }\n",
        "258": "\n",
        "259": "  public void testEquals_sameType() {\n",
        "260": "    Collection<String> c = of(\"a\", \"b\", \"c\");\n",
        "261": "    assertTrue(c.equals(of(\"a\", \"b\", \"c\")));\n",
        "262": "    assertFalse(c.equals(of(\"a\", \"b\", \"d\")));\n",
        "263": "  }\n",
        "264": "\n",
        "265": "  abstract <E extends Comparable<E>> ImmutableSet.Builder<E> builder();\n",
        "266": "\n",
        "267": "  public void testBuilderWithNonDuplicateElements() {\n",
        "268": "    ImmutableSet<String> set = this.<String>builder()\n",
        "269": "        .add(\"a\")\n",
        "270": "        .add(\"b\", \"c\")\n",
        "271": "        .add(\"d\", \"e\", \"f\")\n",
        "272": "        .add(\"g\", \"h\", \"i\", \"j\")\n",
        "273": "        .build();\n",
        "274": "    assertThat(set).containsExactly(\n",
        "275": "        \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\").inOrder();\n",
        "276": "  }\n",
        "277": "\n",
        "278": "  public void testReuseBuilderWithNonDuplicateElements() {\n",
        "279": "    ImmutableSet.Builder<String> builder = this.<String>builder()\n",
        "280": "        .add(\"a\")\n",
        "281": "        .add(\"b\");\n",
        "282": "    assertThat(builder.build()).containsExactly(\"a\", \"b\").inOrder();\n",
        "283": "    builder.add(\"c\", \"d\");\n",
        "284": "    assertThat(builder.build()).containsExactly(\"a\", \"b\", \"c\", \"d\").inOrder();\n",
        "285": "  }\n",
        "286": "\n",
        "287": "  public void testBuilderWithDuplicateElements() {\n",
        "288": "    ImmutableSet<String> set = this.<String>builder()\n",
        "289": "        .add(\"a\")\n",
        "290": "        .add(\"a\", \"a\")\n",
        "291": "        .add(\"a\", \"a\", \"a\")\n",
        "292": "        .add(\"a\", \"a\", \"a\", \"a\")\n",
        "293": "        .build();\n",
        "294": "    assertTrue(set.contains(\"a\"));\n",
        "295": "    assertFalse(set.contains(\"b\"));\n",
        "296": "    assertEquals(1, set.size());\n",
        "297": "  }\n",
        "298": "\n",
        "299": "  public void testReuseBuilderWithDuplicateElements() {\n",
        "300": "    ImmutableSet.Builder<String> builder = this.<String>builder()\n",
        "301": "        .add(\"a\")\n",
        "302": "        .add(\"a\", \"a\")\n",
        "303": "        .add(\"b\");\n",
        "304": "    assertThat(builder.build()).containsExactly(\"a\", \"b\").inOrder();\n",
        "305": "    builder.add(\"a\", \"b\", \"c\", \"c\");\n",
        "306": "    assertThat(builder.build()).containsExactly(\"a\", \"b\", \"c\").inOrder();\n",
        "307": "  }\n",
        "308": "\n",
        "309": "  public void testBuilderAddAll() {\n",
        "310": "    List<String> a = asList(\"a\", \"b\", \"c\");\n",
        "311": "    List<String> b = asList(\"c\", \"d\", \"e\");\n",
        "312": "    ImmutableSet<String> set = this.<String>builder()\n",
        "313": "        .addAll(a)\n",
        "314": "        .addAll(b)\n",
        "315": "        .build();\n",
        "316": "    assertThat(set).containsExactly(\"a\", \"b\", \"c\", \"d\", \"e\").inOrder();\n",
        "317": "  }\n",
        "318": "\n",
        "319": "  static final int LAST_COLOR_ADDED = 0x00BFFF;\n",
        "320": "\n",
        "321": "  public void testComplexBuilder() {\n",
        "322": "    List<Integer> colorElem = asList(0x00, 0x33, 0x66, 0x99, 0xCC, 0xFF);\n",
        "323": "    // javac won't compile this without \"this.<Integer>\"\n",
        "324": "    ImmutableSet.Builder<Integer> webSafeColorsBuilder\n",
        "325": "        = this.<Integer>builder();\n",
        "326": "    for (Integer red : colorElem) {\n",
        "327": "      for (Integer green : colorElem) {\n",
        "328": "        for (Integer blue : colorElem) {\n",
        "329": "          webSafeColorsBuilder.add((red << 16) + (green << 8) + blue);\n",
        "330": "        }\n",
        "331": "      }\n",
        "332": "    }\n",
        "333": "    ImmutableSet<Integer> webSafeColors = webSafeColorsBuilder.build();\n",
        "334": "    assertEquals(216, webSafeColors.size());\n",
        "335": "    Integer[] webSafeColorArray =\n",
        "336": "        webSafeColors.toArray(new Integer[webSafeColors.size()]);\n",
        "337": "    assertEquals(0x000000, (int) webSafeColorArray[0]);\n",
        "338": "    assertEquals(0x000033, (int) webSafeColorArray[1]);\n",
        "339": "    assertEquals(0x000066, (int) webSafeColorArray[2]);\n",
        "340": "    assertEquals(0x003300, (int) webSafeColorArray[6]);\n",
        "341": "    assertEquals(0x330000, (int) webSafeColorArray[36]);\n",
        "342": "    ImmutableSet<Integer> addedColor\n",
        "343": "        = webSafeColorsBuilder.add(LAST_COLOR_ADDED).build();\n",
        "344": "    assertEquals(\n",
        "345": "        \"Modifying the builder should not have changed any already built sets\",\n",
        "346": "        216, webSafeColors.size());\n",
        "347": "    assertEquals(\"the new array should be one bigger than webSafeColors\",\n",
        "348": "        217, addedColor.size());\n",
        "349": "    Integer[] appendColorArray =\n",
        "350": "        addedColor.toArray(new Integer[addedColor.size()]);\n",
        "351": "    assertEquals(\n",
        "352": "        getComplexBuilderSetLastElement(), (int) appendColorArray[216]);\n",
        "353": "  }\n",
        "354": "\n",
        "355": "  abstract int getComplexBuilderSetLastElement();\n",
        "356": "\n",
        "357": "  public void testBuilderAddHandlesNullsCorrectly() {\n",
        "358": "    ImmutableSet.Builder<String> builder = this.<String>builder();\n",
        "359": "    try {\n",
        "360": "      builder.add((String) null);\n",
        "361": "      fail(\"expected NullPointerException\");  // COV_NF_LINE\n",
        "362": "    } catch (NullPointerException expected) {\n",
        "363": "    }\n",
        "364": "\n",
        "365": "    builder = this.<String>builder();\n",
        "366": "    try {\n",
        "367": "      builder.add((String[]) null);\n",
        "368": "      fail(\"expected NullPointerException\");  // COV_NF_LINE\n",
        "369": "    } catch (NullPointerException expected) {\n",
        "370": "    }\n",
        "371": "\n",
        "372": "    builder = this.<String>builder();\n",
        "373": "    try {\n",
        "374": "      builder.add(\"a\", (String) null);\n",
        "375": "      fail(\"expected NullPointerException\");  // COV_NF_LINE\n",
        "376": "    } catch (NullPointerException expected) {\n",
        "377": "    }\n",
        "378": "\n",
        "379": "    builder = this.<String>builder();\n",
        "380": "    try {\n",
        "381": "      builder.add(\"a\", \"b\", (String) null);\n",
        "382": "      fail(\"expected NullPointerException\");  // COV_NF_LINE\n",
        "383": "    } catch (NullPointerException expected) {\n",
        "384": "    }\n",
        "385": "\n",
        "386": "    builder = this.<String>builder();\n",
        "387": "    try {\n",
        "388": "      builder.add(\"a\", \"b\", \"c\", null);\n",
        "389": "      fail(\"expected NullPointerException\");  // COV_NF_LINE\n",
        "390": "    } catch (NullPointerException expected) {\n",
        "391": "    }\n",
        "392": "\n",
        "393": "    builder = this.<String>builder();\n",
        "394": "    try {\n",
        "395": "      builder.add(\"a\", \"b\", null, \"c\");\n",
        "396": "      fail(\"expected NullPointerException\");  // COV_NF_LINE\n",
        "397": "    } catch (NullPointerException expected) {\n",
        "398": "    }\n",
        "399": "  }\n",
        "400": "\n",
        "401": "  public void testBuilderAddAllHandlesNullsCorrectly() {\n",
        "402": "    ImmutableSet.Builder<String> builder = this.<String>builder();\n",
        "403": "    try {\n",
        "404": "      builder.addAll((Iterable<String>) null);\n",
        "405": "      fail(\"expected NullPointerException\");  // COV_NF_LINE\n",
        "406": "    } catch (NullPointerException expected) {\n",
        "407": "    }\n",
        "408": "\n",
        "409": "    try {\n",
        "410": "      builder.addAll((Iterator<String>) null);\n",
        "411": "      fail(\"expected NullPointerException\");  // COV_NF_LINE\n",
        "412": "    } catch (NullPointerException expected) {\n",
        "413": "    }\n",
        "414": "\n",
        "415": "    builder = this.<String>builder();\n",
        "416": "    List<String> listWithNulls = asList(\"a\", null, \"b\");\n",
        "417": "    try {\n",
        "418": "      builder.addAll(listWithNulls);\n",
        "419": "      fail(\"expected NullPointerException\");  // COV_NF_LINE\n",
        "420": "    } catch (NullPointerException expected) {\n",
        "421": "    }\n",
        "422": "\n",
        "423": "    Iterable<String> iterableWithNulls = MinimalIterable.of(\"a\", null, \"b\");\n",
        "424": "    try {\n",
        "425": "      builder.addAll(iterableWithNulls);\n",
        "426": "      fail(\"expected NullPointerException\");  // COV_NF_LINE\n",
        "427": "    } catch (NullPointerException expected) {\n",
        "428": "    }\n",
        "429": "  }\n",
        "430": "}\n",
        "431": "\n"
    }
}