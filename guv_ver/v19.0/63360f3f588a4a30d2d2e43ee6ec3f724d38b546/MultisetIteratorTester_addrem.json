{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2011 The Guava Authors\n",
        "3": " * \n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "6": " * \n",
        "7": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "8": " * \n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "13": " */\n",
        "14": "\n",
        "15": "package com.google.common.collect.testing.google;\n",
        "16": "\n",
        "17": "import static com.google.common.collect.testing.IteratorFeature.MODIFIABLE;\n",
        "18": "import static com.google.common.collect.testing.IteratorFeature.UNMODIFIABLE;\n",
        "19": "import static com.google.common.collect.testing.features.CollectionFeature.KNOWN_ORDER;\n",
        "20": "import static com.google.common.collect.testing.features.CollectionFeature.SUPPORTS_ITERATOR_REMOVE;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import com.google.common.collect.testing.IteratorTester;\n",
        "24": "import com.google.common.collect.testing.features.CollectionFeature;\n",
        "25": "\n",
        "26": "import java.util.Arrays;\n",
        "27": "import java.util.Iterator;\n",
        "28": "\n",
        "29": "/**\n",
        "30": " * Tester to make sure the {@code iterator().remove()} implementation of {@code Multiset} works when\n",
        "31": " * there are multiple occurrences of elements.\n",
        "32": " * \n",
        "33": " * @author Louis Wasserman\n",
        "34": " */\n",
        "35": "@GwtCompatible(emulated = true)\n",
        "36": "public class MultisetIteratorTester<E> extends AbstractMultisetTester<E> {\n",
        "37": "  @SuppressWarnings(\"unchecked\")\n",
        "38": "  @CollectionFeature.Require({SUPPORTS_ITERATOR_REMOVE, KNOWN_ORDER})\n",
        "39": "  public void testRemovingIteratorKnownOrder() {\n",
        "40": "    new IteratorTester<E>(4, MODIFIABLE, getSubjectGenerator().order(\n",
        "41": "        Arrays.asList(e0(), e1(), e1(), e2())),\n",
        "42": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "43": "      @Override\n",
        "44": "      protected Iterator<E> newTargetIterator() {\n",
        "45": "        return getSubjectGenerator().create(e0(), e1(), e1(), e2())\n",
        "46": "            .iterator();\n",
        "47": "      }\n",
        "48": "    }.test();\n",
        "49": "  }\n",
        "50": "\n",
        "51": "  @SuppressWarnings(\"unchecked\")\n",
        "52": "  @CollectionFeature.Require(value = SUPPORTS_ITERATOR_REMOVE, absent = KNOWN_ORDER)\n",
        "53": "  public void testRemovingIteratorUnknownOrder() {\n",
        "54": "    new IteratorTester<E>(4, MODIFIABLE, Arrays.asList(e0(), e1(),\n",
        "55": "        e1(), e2()), IteratorTester.KnownOrder.UNKNOWN_ORDER) {\n",
        "56": "      @Override\n",
        "57": "      protected Iterator<E> newTargetIterator() {\n",
        "58": "        return getSubjectGenerator().create(e0(), e1(), e1(), e2())\n",
        "59": "            .iterator();\n",
        "60": "      }\n",
        "61": "    }.test();\n",
        "62": "  }\n",
        "63": "\n",
        "64": "  @SuppressWarnings(\"unchecked\")\n",
        "65": "  @CollectionFeature.Require(value = KNOWN_ORDER, absent = SUPPORTS_ITERATOR_REMOVE)\n",
        "66": "  public void testIteratorKnownOrder() {\n",
        "67": "    new IteratorTester<E>(4, UNMODIFIABLE, getSubjectGenerator().order(\n",
        "68": "        Arrays.asList(e0(), e1(), e1(), e2())),\n",
        "69": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "70": "      @Override\n",
        "71": "      protected Iterator<E> newTargetIterator() {\n",
        "72": "        return getSubjectGenerator().create(e0(), e1(), e1(), e2())\n",
        "73": "            .iterator();\n",
        "74": "      }\n",
        "75": "    }.test();\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  @SuppressWarnings(\"unchecked\")\n",
        "79": "  @CollectionFeature.Require(absent = {SUPPORTS_ITERATOR_REMOVE, KNOWN_ORDER})\n",
        "80": "  public void testIteratorUnknownOrder() {\n",
        "81": "    new IteratorTester<E>(4, UNMODIFIABLE, Arrays.asList(e0(), e1(),\n",
        "82": "        e1(), e2()), IteratorTester.KnownOrder.UNKNOWN_ORDER) {\n",
        "83": "      @Override\n",
        "84": "      protected Iterator<E> newTargetIterator() {\n",
        "85": "        return getSubjectGenerator().create(e0(), e1(), e1(), e2())\n",
        "86": "            .iterator();\n",
        "87": "      }\n",
        "88": "    }.test();\n",
        "89": "  }\n",
        "90": "}\n",
        "91": "\n"
    }
}