{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.Helpers.orderEntriesByKey;\n",
        "20": "import static com.google.common.truth.Truth.assertThat;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import com.google.common.collect.testing.Helpers;\n",
        "24": "import com.google.common.collect.testing.SampleElements;\n",
        "25": "import com.google.common.collect.testing.google.TestBiMapGenerator;\n",
        "26": "import com.google.common.testing.EqualsTester;\n",
        "27": "\n",
        "28": "import junit.framework.TestCase;\n",
        "29": "\n",
        "30": "import java.util.Collections;\n",
        "31": "import java.util.Iterator;\n",
        "32": "import java.util.List;\n",
        "33": "import java.util.Map;\n",
        "34": "import java.util.Map.Entry;\n",
        "35": "import java.util.Set;\n",
        "36": "\n",
        "37": "/**\n",
        "38": " * Tests for {@code EnumBiMap}.\n",
        "39": " *\n",
        "40": " * @author Mike Bostock\n",
        "41": " * @author Jared Levy\n",
        "42": " */\n",
        "43": "@GwtCompatible(emulated = true)\n",
        "44": "public class EnumBiMapTest extends TestCase {\n",
        "45": "  private enum Currency { DOLLAR, FRANC, PESO, POUND, YEN }\n",
        "46": "  private enum Country { CANADA, CHILE, JAPAN, SWITZERLAND, UK }\n",
        "47": "\n",
        "48": "  public static final class EnumBiMapGenerator implements TestBiMapGenerator<Country, Currency> {\n",
        "49": "    @SuppressWarnings(\"unchecked\")\n",
        "50": "    @Override\n",
        "51": "    public BiMap<Country, Currency> create(Object... entries) {\n",
        "52": "      BiMap<Country, Currency> result = EnumBiMap.create(Country.class, Currency.class);\n",
        "53": "      for (Object object : entries) {\n",
        "54": "        Entry<Country, Currency> entry = (Entry<Country, Currency>) object;\n",
        "55": "        result.put(entry.getKey(), entry.getValue());\n",
        "56": "      }\n",
        "57": "      return result;\n",
        "58": "    }\n",
        "59": "\n",
        "60": "    @Override\n",
        "61": "    public SampleElements<Entry<Country, Currency>> samples() {\n",
        "62": "      return new SampleElements<Entry<Country, Currency>>(\n",
        "63": "          Helpers.mapEntry(Country.CANADA, Currency.DOLLAR),\n",
        "64": "          Helpers.mapEntry(Country.CHILE, Currency.PESO),\n",
        "65": "          Helpers.mapEntry(Country.UK, Currency.POUND),\n",
        "66": "          Helpers.mapEntry(Country.JAPAN, Currency.YEN),\n",
        "67": "          Helpers.mapEntry(Country.SWITZERLAND, Currency.FRANC));\n",
        "68": "    }\n",
        "69": "\n",
        "70": "    @SuppressWarnings(\"unchecked\")\n",
        "71": "    @Override\n",
        "72": "    public Entry<Country, Currency>[] createArray(int length) {\n",
        "73": "      return new Entry[length];\n",
        "74": "    }\n",
        "75": "\n",
        "76": "    @Override\n",
        "77": "    public Iterable<Entry<Country, Currency>> order(List<Entry<Country, Currency>> insertionOrder) {\n",
        "78": "      return orderEntriesByKey(insertionOrder);\n",
        "79": "    }\n",
        "80": "\n",
        "81": "    @Override\n",
        "82": "    public Country[] createKeyArray(int length) {\n",
        "83": "      return new Country[length];\n",
        "84": "    }\n",
        "85": "\n",
        "86": "    @Override\n",
        "87": "    public Currency[] createValueArray(int length) {\n",
        "88": "      return new Currency[length];\n",
        "89": "    }\n",
        "90": "  }\n",
        "91": "\n",
        "92": "  public void testCreate() {\n",
        "93": "    EnumBiMap<Currency, Country> bimap =\n",
        "94": "        EnumBiMap.create(Currency.class, Country.class);\n",
        "95": "    assertTrue(bimap.isEmpty());\n",
        "96": "    assertEquals(\"{}\", bimap.toString());\n",
        "97": "    assertEquals(HashBiMap.create(), bimap);\n",
        "98": "    bimap.put(Currency.DOLLAR, Country.CANADA);\n",
        "99": "    assertEquals(Country.CANADA, bimap.get(Currency.DOLLAR));\n",
        "100": "    assertEquals(Currency.DOLLAR, bimap.inverse().get(Country.CANADA));\n",
        "101": "  }\n",
        "102": "\n",
        "103": "  public void testCreateFromMap() {\n",
        "104": "    /* Test with non-empty Map. */\n",
        "105": "    Map<Currency, Country> map = ImmutableMap.of(\n",
        "106": "        Currency.DOLLAR, Country.CANADA,\n",
        "107": "        Currency.PESO, Country.CHILE,\n",
        "108": "        Currency.FRANC, Country.SWITZERLAND);\n",
        "109": "    EnumBiMap<Currency, Country> bimap = EnumBiMap.create(map);\n",
        "110": "    assertEquals(Country.CANADA, bimap.get(Currency.DOLLAR));\n",
        "111": "    assertEquals(Currency.DOLLAR, bimap.inverse().get(Country.CANADA));\n",
        "112": "\n",
        "113": "    /* Map must have at least one entry if not an EnumBiMap. */\n",
        "114": "    try {\n",
        "115": "      EnumBiMap.create(Collections.<Currency, Country>emptyMap());\n",
        "116": "      fail(\"IllegalArgumentException expected\");\n",
        "117": "    } catch (IllegalArgumentException expected) {}\n",
        "118": "    try {\n",
        "119": "      EnumBiMap.create(\n",
        "120": "          EnumHashBiMap.<Currency, Country>create(Currency.class));\n",
        "121": "      fail(\"IllegalArgumentException expected\");\n",
        "122": "    } catch (IllegalArgumentException expected) {}\n",
        "123": "\n",
        "124": "    /* Map can be empty if it's an EnumBiMap. */\n",
        "125": "    Map<Currency, Country> emptyBimap =\n",
        "126": "        EnumBiMap.create(Currency.class, Country.class);\n",
        "127": "    bimap = EnumBiMap.create(emptyBimap);\n",
        "128": "    assertTrue(bimap.isEmpty());\n",
        "129": "  }\n",
        "130": "\n",
        "131": "  public void testEnumBiMapConstructor() {\n",
        "132": "    /* Test that it copies existing entries. */\n",
        "133": "    EnumBiMap<Currency, Country> bimap1 =\n",
        "134": "        EnumBiMap.create(Currency.class, Country.class);\n",
        "135": "    bimap1.put(Currency.DOLLAR, Country.CANADA);\n",
        "136": "    EnumBiMap<Currency, Country> bimap2 =\n",
        "137": "        EnumBiMap.create(bimap1);\n",
        "138": "    assertEquals(Country.CANADA, bimap2.get(Currency.DOLLAR));\n",
        "139": "    assertEquals(bimap1, bimap2);\n",
        "140": "    bimap2.inverse().put(Country.SWITZERLAND, Currency.FRANC);\n",
        "141": "    assertEquals(Country.SWITZERLAND, bimap2.get(Currency.FRANC));\n",
        "142": "    assertNull(bimap1.get(Currency.FRANC));\n",
        "143": "    assertFalse(bimap2.equals(bimap1));\n",
        "144": "\n",
        "145": "    /* Test that it can be empty. */\n",
        "146": "    EnumBiMap<Currency, Country> emptyBimap =\n",
        "147": "        EnumBiMap.create(Currency.class, Country.class);\n",
        "148": "    EnumBiMap<Currency, Country> bimap3 =\n",
        "149": "        EnumBiMap.create(emptyBimap);\n",
        "150": "    assertEquals(bimap3, emptyBimap);\n",
        "151": "  }\n",
        "152": "\n",
        "153": "  public void testKeyType() {\n",
        "154": "    EnumBiMap<Currency, Country> bimap =\n",
        "155": "        EnumBiMap.create(Currency.class, Country.class);\n",
        "156": "    assertEquals(Currency.class, bimap.keyType());\n",
        "157": "  }\n",
        "158": "\n",
        "159": "  public void testValueType() {\n",
        "160": "    EnumBiMap<Currency, Country> bimap =\n",
        "161": "        EnumBiMap.create(Currency.class, Country.class);\n",
        "162": "    assertEquals(Country.class, bimap.valueType());\n",
        "163": "  }\n",
        "164": "\n",
        "165": "  public void testIterationOrder() {\n",
        "166": "    // The enum orderings are alphabetical, leading to the bimap and its inverse\n",
        "167": "    // having inconsistent iteration orderings.\n",
        "168": "    Map<Currency, Country> map = ImmutableMap.of(\n",
        "169": "        Currency.DOLLAR, Country.CANADA,\n",
        "170": "        Currency.PESO, Country.CHILE,\n",
        "171": "        Currency.FRANC, Country.SWITZERLAND);\n",
        "172": "    EnumBiMap<Currency, Country> bimap = EnumBiMap.create(map);\n",
        "173": "\n",
        "174": "    // forward map ordered by currency\n",
        "175": "    assertThat(bimap.keySet())\n",
        "176": "        .containsExactly(Currency.DOLLAR, Currency.FRANC, Currency.PESO).inOrder();\n",
        "177": "    // forward map ordered by currency (even for country values)\n",
        "178": "    assertThat(bimap.values())\n",
        "179": "        .containsExactly(Country.CANADA, Country.SWITZERLAND, Country.CHILE).inOrder();\n",
        "180": "    // backward map ordered by country\n",
        "181": "    assertThat(bimap.inverse().keySet())\n",
        "182": "        .containsExactly(Country.CANADA, Country.CHILE, Country.SWITZERLAND).inOrder();\n",
        "183": "    // backward map ordered by country (even for currency values)\n",
        "184": "    assertThat(bimap.inverse().values())\n",
        "185": "        .containsExactly(Currency.DOLLAR, Currency.PESO, Currency.FRANC).inOrder();\n",
        "186": "  }\n",
        "187": "\n",
        "188": "  public void testKeySetIteratorRemove() {\n",
        "189": "    // The enum orderings are alphabetical, leading to the bimap and its inverse\n",
        "190": "    // having inconsistent iteration orderings.\n",
        "191": "    Map<Currency, Country> map = ImmutableMap.of(\n",
        "192": "        Currency.DOLLAR, Country.CANADA,\n",
        "193": "        Currency.PESO, Country.CHILE,\n",
        "194": "        Currency.FRANC, Country.SWITZERLAND);\n",
        "195": "    EnumBiMap<Currency, Country> bimap = EnumBiMap.create(map);\n",
        "196": "\n",
        "197": "    Iterator<Currency> iter = bimap.keySet().iterator();\n",
        "198": "    assertEquals(Currency.DOLLAR, iter.next());\n",
        "199": "    iter.remove();\n",
        "200": "\n",
        "201": "    // forward map ordered by currency\n",
        "202": "    assertThat(bimap.keySet())\n",
        "203": "        .containsExactly(Currency.FRANC, Currency.PESO).inOrder();\n",
        "204": "    // forward map ordered by currency (even for country values)\n",
        "205": "    assertThat(bimap.values())\n",
        "206": "        .containsExactly(Country.SWITZERLAND, Country.CHILE).inOrder();\n",
        "207": "    // backward map ordered by country\n",
        "208": "    assertThat(bimap.inverse().keySet())\n",
        "209": "        .containsExactly(Country.CHILE, Country.SWITZERLAND).inOrder();\n",
        "210": "    // backward map ordered by country (even for currency values)\n",
        "211": "    assertThat(bimap.inverse().values())\n",
        "212": "        .containsExactly(Currency.PESO, Currency.FRANC).inOrder();\n",
        "213": "  }\n",
        "214": "\n",
        "215": "  public void testValuesIteratorRemove() {\n",
        "216": "    // The enum orderings are alphabetical, leading to the bimap and its inverse\n",
        "217": "    // having inconsistent iteration orderings.\n",
        "218": "    Map<Currency, Country> map = ImmutableMap.of(\n",
        "219": "        Currency.DOLLAR, Country.CANADA,\n",
        "220": "        Currency.PESO, Country.CHILE,\n",
        "221": "        Currency.FRANC, Country.SWITZERLAND);\n",
        "222": "    EnumBiMap<Currency, Country> bimap = EnumBiMap.create(map);\n",
        "223": "\n",
        "224": "    Iterator<Currency> iter = bimap.keySet().iterator();\n",
        "225": "    assertEquals(Currency.DOLLAR, iter.next());\n",
        "226": "    assertEquals(Currency.FRANC, iter.next());\n",
        "227": "    iter.remove();\n",
        "228": "\n",
        "229": "    // forward map ordered by currency\n",
        "230": "    assertThat(bimap.keySet())\n",
        "231": "        .containsExactly(Currency.DOLLAR, Currency.PESO).inOrder();\n",
        "232": "    // forward map ordered by currency (even for country values)\n",
        "233": "    assertThat(bimap.values())\n",
        "234": "        .containsExactly(Country.CANADA, Country.CHILE).inOrder();\n",
        "235": "    // backward map ordered by country\n",
        "236": "    assertThat(bimap.inverse().keySet())\n",
        "237": "        .containsExactly(Country.CANADA, Country.CHILE).inOrder();\n",
        "238": "    // backward map ordered by country (even for currency values)\n",
        "239": "    assertThat(bimap.inverse().values())\n",
        "240": "        .containsExactly(Currency.DOLLAR, Currency.PESO).inOrder();\n",
        "241": "  }\n",
        "242": "\n",
        "243": "  public void testEntrySet() {\n",
        "244": "    // Bug 3168290\n",
        "245": "    Map<Currency, Country> map = ImmutableMap.of(\n",
        "246": "        Currency.DOLLAR, Country.CANADA,\n",
        "247": "        Currency.PESO, Country.CHILE,\n",
        "248": "        Currency.FRANC, Country.SWITZERLAND);\n",
        "249": "    EnumBiMap<Currency, Country> bimap = EnumBiMap.create(map);\n",
        "250": "    Set<Object> uniqueEntries = Sets.newIdentityHashSet();\n",
        "251": "    uniqueEntries.addAll(bimap.entrySet());\n",
        "252": "    assertEquals(3, uniqueEntries.size());\n",
        "253": "  }\n",
        "254": "\n",
        "255": "  public void testEquals() {\n",
        "256": "    new EqualsTester()\n",
        "257": "        .addEqualityGroup(\n",
        "258": "            EnumBiMap.create(ImmutableMap.of(Currency.DOLLAR, Country.CANADA)),\n",
        "259": "            EnumBiMap.create(ImmutableMap.of(Currency.DOLLAR, Country.CANADA)))\n",
        "260": "        .addEqualityGroup(EnumBiMap.create(ImmutableMap.of(Currency.DOLLAR, Country.CHILE)))\n",
        "261": "        .addEqualityGroup(EnumBiMap.create(ImmutableMap.of(Currency.FRANC, Country.CANADA)))\n",
        "262": "        .testEquals();\n",
        "263": "  }\n",
        "264": "\n",
        "265": "  /* Remaining behavior tested by AbstractBiMapTest. */\n",
        "266": "}\n",
        "267": "\n"
    }
}