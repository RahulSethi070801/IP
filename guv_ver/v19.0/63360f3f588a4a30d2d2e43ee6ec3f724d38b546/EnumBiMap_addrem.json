{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "20": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "\n",
        "24": "import java.util.EnumMap;\n",
        "25": "import java.util.Map;\n",
        "26": "\n",
        "27": "/**\n",
        "28": " * A {@code BiMap} backed by two {@code EnumMap} instances. Null keys and values\n",
        "29": " * are not permitted. An {@code EnumBiMap} and its inverse are both\n",
        "30": " * serializable.\n",
        "31": " *\n",
        "32": " * <p>See the Guava User Guide article on <a href=\n",
        "33": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#bimap\">\n",
        "34": " * {@code BiMap}</a>.\n",
        "35": " *\n",
        "36": " * @author Mike Bostock\n",
        "37": " * @since 2.0\n",
        "38": " */\n",
        "39": "@GwtCompatible(emulated = true)\n",
        "40": "public final class EnumBiMap<K extends Enum<K>, V extends Enum<V>> extends AbstractBiMap<K, V> {\n",
        "41": "  private transient Class<K> keyType;\n",
        "42": "  private transient Class<V> valueType;\n",
        "43": "\n",
        "44": "  /**\n",
        "45": "   * Returns a new, empty {@code EnumBiMap} using the specified key and value\n",
        "46": "   * types.\n",
        "47": "   *\n",
        "48": "   * @param keyType the key type\n",
        "49": "   * @param valueType the value type\n",
        "50": "   */\n",
        "51": "  public static <K extends Enum<K>, V extends Enum<V>> EnumBiMap<K, V> create(\n",
        "52": "      Class<K> keyType, Class<V> valueType) {\n",
        "53": "    return new EnumBiMap<K, V>(keyType, valueType);\n",
        "54": "  }\n",
        "55": "\n",
        "56": "  /**\n",
        "57": "   * Returns a new bimap with the same mappings as the specified map. If the\n",
        "58": "   * specified map is an {@code EnumBiMap}, the new bimap has the same types as\n",
        "59": "   * the provided map. Otherwise, the specified map must contain at least one\n",
        "60": "   * mapping, in order to determine the key and value types.\n",
        "61": "   *\n",
        "62": "   * @param map the map whose mappings are to be placed in this map\n",
        "63": "   * @throws IllegalArgumentException if map is not an {@code EnumBiMap}\n",
        "64": "   *     instance and contains no mappings\n",
        "65": "   */\n",
        "66": "  public static <K extends Enum<K>, V extends Enum<V>> EnumBiMap<K, V> create(Map<K, V> map) {\n",
        "67": "    EnumBiMap<K, V> bimap = create(inferKeyType(map), inferValueType(map));\n",
        "68": "    bimap.putAll(map);\n",
        "69": "    return bimap;\n",
        "70": "  }\n",
        "71": "\n",
        "72": "  private EnumBiMap(Class<K> keyType, Class<V> valueType) {\n",
        "73": "    super(\n",
        "74": "        WellBehavedMap.wrap(new EnumMap<K, V>(keyType)),\n",
        "75": "        WellBehavedMap.wrap(new EnumMap<V, K>(valueType)));\n",
        "76": "    this.keyType = keyType;\n",
        "77": "    this.valueType = valueType;\n",
        "78": "  }\n",
        "79": "\n",
        "80": "  static <K extends Enum<K>> Class<K> inferKeyType(Map<K, ?> map) {\n",
        "81": "    if (map instanceof EnumBiMap) {\n",
        "82": "      return ((EnumBiMap<K, ?>) map).keyType();\n",
        "83": "    }\n",
        "84": "    if (map instanceof EnumHashBiMap) {\n",
        "85": "      return ((EnumHashBiMap<K, ?>) map).keyType();\n",
        "86": "    }\n",
        "87": "    checkArgument(!map.isEmpty());\n",
        "88": "    return map\n",
        "89": "        .keySet()\n",
        "90": "        .iterator()\n",
        "91": "        .next()\n",
        "92": "        .getDeclaringClass();\n",
        "93": "  }\n",
        "94": "\n",
        "95": "  private static <V extends Enum<V>> Class<V> inferValueType(Map<?, V> map) {\n",
        "96": "    if (map instanceof EnumBiMap) {\n",
        "97": "      return ((EnumBiMap<?, V>) map).valueType;\n",
        "98": "    }\n",
        "99": "    checkArgument(!map.isEmpty());\n",
        "100": "    return map\n",
        "101": "        .values()\n",
        "102": "        .iterator()\n",
        "103": "        .next()\n",
        "104": "        .getDeclaringClass();\n",
        "105": "  }\n",
        "106": "\n",
        "107": "  /** Returns the associated key type. */\n",
        "108": "  public Class<K> keyType() {\n",
        "109": "    return keyType;\n",
        "110": "  }\n",
        "111": "\n",
        "112": "  /** Returns the associated value type. */\n",
        "113": "  public Class<V> valueType() {\n",
        "114": "    return valueType;\n",
        "115": "  }\n",
        "116": "\n",
        "117": "  @Override\n",
        "118": "  K checkKey(K key) {\n",
        "119": "    return checkNotNull(key);\n",
        "120": "  }\n",
        "121": "\n",
        "122": "  @Override\n",
        "123": "  V checkValue(V value) {\n",
        "124": "    return checkNotNull(value);\n",
        "125": "  }\n",
        "126": "}\n",
        "127": "\n"
    }
}