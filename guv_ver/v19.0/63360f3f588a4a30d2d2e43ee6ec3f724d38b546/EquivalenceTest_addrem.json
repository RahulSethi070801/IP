{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2010 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * diOBJECTibuted under the License is diOBJECTibuted on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.base;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.base.Equivalence.Wrapper;\n",
        "21": "import com.google.common.collect.ImmutableList;\n",
        "22": "import com.google.common.testing.EqualsTester;\n",
        "23": "import com.google.common.testing.EquivalenceTester;\n",
        "24": "\n",
        "25": "import junit.framework.TestCase;\n",
        "26": "\n",
        "27": "/**\n",
        "28": " * Unit test for {@link Equivalence}.\n",
        "29": " *\n",
        "30": " * @author Jige Yu\n",
        "31": " */\n",
        "32": "@GwtCompatible(emulated = true)\n",
        "33": "public class EquivalenceTest extends TestCase {\n",
        "34": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "35": "  public void testPairwiseEquivalent() {\n",
        "36": "    EquivalenceTester.of(Equivalence.equals().<String>pairwise())\n",
        "37": "        .addEquivalenceGroup(ImmutableList.<String>of())\n",
        "38": "        .addEquivalenceGroup(ImmutableList.of(\"a\"))\n",
        "39": "        .addEquivalenceGroup(ImmutableList.of(\"b\"))\n",
        "40": "        .addEquivalenceGroup(ImmutableList.of(\"a\", \"b\"), ImmutableList.of(\"a\", \"b\"))\n",
        "41": "        .test();\n",
        "42": "  }\n",
        "43": "\n",
        "44": "  public void testPairwiseEquivalent_equals() {\n",
        "45": "    new EqualsTester()\n",
        "46": "        .addEqualityGroup(Equivalence.equals().pairwise(), Equivalence.equals().pairwise())\n",
        "47": "        .addEqualityGroup(Equivalence.identity().pairwise())\n",
        "48": "        .testEquals();\n",
        "49": "  }\n",
        "50": "\n",
        "51": "  private enum LengthFunction implements Function<String, Integer> {\n",
        "52": "    INSTANCE;\n",
        "53": "\n",
        "54": "    @Override public Integer apply(String input) {\n",
        "55": "      return input.length();\n",
        "56": "    }\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  private static final Equivalence<String> LENGTH_EQUIVALENCE = Equivalence.equals()\n",
        "60": "      .onResultOf(LengthFunction.INSTANCE);\n",
        "61": "\n",
        "62": "  public void testWrap() {\n",
        "63": "    new EqualsTester()\n",
        "64": "        .addEqualityGroup(\n",
        "65": "            LENGTH_EQUIVALENCE.wrap(\"hello\"),\n",
        "66": "            LENGTH_EQUIVALENCE.wrap(\"hello\"),\n",
        "67": "            LENGTH_EQUIVALENCE.wrap(\"world\"))\n",
        "68": "        .addEqualityGroup(\n",
        "69": "            LENGTH_EQUIVALENCE.wrap(\"hi\"),\n",
        "70": "            LENGTH_EQUIVALENCE.wrap(\"yo\"))\n",
        "71": "        .addEqualityGroup(\n",
        "72": "            LENGTH_EQUIVALENCE.wrap(null),\n",
        "73": "            LENGTH_EQUIVALENCE.wrap(null))\n",
        "74": "        .addEqualityGroup(Equivalence.equals().wrap(\"hello\"))\n",
        "75": "        .addEqualityGroup(Equivalence.equals().wrap(null))\n",
        "76": "        .testEquals();\n",
        "77": "  }\n",
        "78": "\n",
        "79": "  public void testWrap_get() {\n",
        "80": "    String test = \"test\";\n",
        "81": "    Wrapper<String> wrapper = LENGTH_EQUIVALENCE.wrap(test);\n",
        "82": "    assertSame(test, wrapper.get());\n",
        "83": "  }\n",
        "84": "\n",
        "85": "  private static class IntValue {\n",
        "86": "    private final int value;\n",
        "87": "    \n",
        "88": "    IntValue(int value) {\n",
        "89": "      this.value = value;\n",
        "90": "    }\n",
        "91": "\n",
        "92": "    @Override public String toString() {\n",
        "93": "      return \"value = \" + value;\n",
        "94": "    }\n",
        "95": "  }\n",
        "96": "  \n",
        "97": "  public void testOnResultOf() {\n",
        "98": "    EquivalenceTester.of(Equivalence.equals().onResultOf(Functions.toStringFunction()))\n",
        "99": "        .addEquivalenceGroup(new IntValue(1), new IntValue(1))\n",
        "100": "        .addEquivalenceGroup(new IntValue(2))\n",
        "101": "        .test();\n",
        "102": "  }\n",
        "103": "  \n",
        "104": "  public void testOnResultOf_equals() {\n",
        "105": "    new EqualsTester()\n",
        "106": "        .addEqualityGroup(\n",
        "107": "            Equivalence.identity().onResultOf(Functions.toStringFunction()),\n",
        "108": "            Equivalence.identity().onResultOf(Functions.toStringFunction()))\n",
        "109": "        .addEqualityGroup(Equivalence.equals().onResultOf(Functions.toStringFunction()))\n",
        "110": "        .addEqualityGroup(Equivalence.identity().onResultOf(Functions.identity()))\n",
        "111": "        .testEquals();\n",
        "112": "  }\n",
        "113": "  \n",
        "114": "  public void testEquivalentTo() {\n",
        "115": "    Predicate<Object> equalTo1 = Equivalence.equals().equivalentTo(\"1\");\n",
        "116": "    assertTrue(equalTo1.apply(\"1\"));\n",
        "117": "    assertFalse(equalTo1.apply(\"2\"));\n",
        "118": "    assertFalse(equalTo1.apply(null));\n",
        "119": "    Predicate<Object> isNull = Equivalence.equals().equivalentTo(null);\n",
        "120": "    assertFalse(isNull.apply(\"1\"));\n",
        "121": "    assertFalse(isNull.apply(\"2\"));\n",
        "122": "    assertTrue(isNull.apply(null));\n",
        "123": "    \n",
        "124": "    new EqualsTester()\n",
        "125": "        .addEqualityGroup(equalTo1, Equivalence.equals().equivalentTo(\"1\"))\n",
        "126": "        .addEqualityGroup(isNull)\n",
        "127": "        .addEqualityGroup(Equivalence.identity().equivalentTo(\"1\"))\n",
        "128": "        .testEquals();\n",
        "129": "  }\n",
        "130": "  public void testEqualsEquivalent() {\n",
        "131": "    EquivalenceTester.of(Equivalence.equals())\n",
        "132": "        .addEquivalenceGroup(new Integer(42), 42)\n",
        "133": "        .addEquivalenceGroup(\"a\")\n",
        "134": "        .test();\n",
        "135": "  }\n",
        "136": "\n",
        "137": "  public void testIdentityEquivalent() {\n",
        "138": "    EquivalenceTester.of(Equivalence.identity())\n",
        "139": "        .addEquivalenceGroup(new Integer(42))\n",
        "140": "        .addEquivalenceGroup(new Integer(42))\n",
        "141": "        .addEquivalenceGroup(\"a\")\n",
        "142": "        .test();\n",
        "143": "  }\n",
        "144": "  \n",
        "145": "  public void testEquals() {\n",
        "146": "    new EqualsTester()\n",
        "147": "        .addEqualityGroup(Equivalence.equals(), Equivalence.equals())\n",
        "148": "        .addEqualityGroup(Equivalence.identity(), Equivalence.identity())\n",
        "149": "        .testEquals();\n",
        "150": "  }\n",
        "151": "}\n",
        "152": "\n"
    }
}