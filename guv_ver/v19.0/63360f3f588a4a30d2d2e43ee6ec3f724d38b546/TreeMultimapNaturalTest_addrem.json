{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "\n",
        "23": "import junit.framework.TestCase;\n",
        "24": "\n",
        "25": "import java.util.Arrays;\n",
        "26": "import java.util.Collection;\n",
        "27": "import java.util.Comparator;\n",
        "28": "import java.util.Iterator;\n",
        "29": "import java.util.Map;\n",
        "30": "import java.util.Set;\n",
        "31": "import java.util.SortedMap;\n",
        "32": "\n",
        "33": "/**\n",
        "34": " * Unit tests for {@code TreeMultimap} with natural ordering.\n",
        "35": " *\n",
        "36": " * @author Jared Levy\n",
        "37": " */\n",
        "38": "@GwtCompatible(emulated = true)\n",
        "39": "public class TreeMultimapNaturalTest extends TestCase {\n",
        "40": "\n",
        "41": "  protected SetMultimap<String, Integer> create() {\n",
        "42": "    return TreeMultimap.create();\n",
        "43": "  }\n",
        "44": "\n",
        "45": "  /**\n",
        "46": "   * Create and populate a {@code TreeMultimap} with the natural ordering of\n",
        "47": "   * keys and values.\n",
        "48": "   */\n",
        "49": "  private TreeMultimap<String, Integer> createPopulate() {\n",
        "50": "    TreeMultimap<String, Integer> multimap = TreeMultimap.create();\n",
        "51": "    multimap.put(\"google\", 2);\n",
        "52": "    multimap.put(\"google\", 6);\n",
        "53": "    multimap.put(\"foo\", 3);\n",
        "54": "    multimap.put(\"foo\", 1);\n",
        "55": "    multimap.put(\"foo\", 7);\n",
        "56": "    multimap.put(\"tree\", 4);\n",
        "57": "    multimap.put(\"tree\", 0);\n",
        "58": "    return multimap;\n",
        "59": "  }\n",
        "60": "\n",
        "61": "  public void testToString() {\n",
        "62": "    SetMultimap<String, Integer> multimap = create();\n",
        "63": "    multimap.putAll(\"bar\", Arrays.asList(3, 1, 2));\n",
        "64": "    multimap.putAll(\"foo\", Arrays.asList(2, 3, 1, -1, 4));\n",
        "65": "    assertEquals(\"{bar=[1, 2, 3], foo=[-1, 1, 2, 3, 4]}\",\n",
        "66": "        multimap.toString());\n",
        "67": "  }\n",
        "68": "\n",
        "69": "  public void testOrderedGet() {\n",
        "70": "    TreeMultimap<String, Integer> multimap = createPopulate();\n",
        "71": "    assertThat(multimap.get(\"foo\")).containsExactly(1, 3, 7).inOrder();\n",
        "72": "    assertThat(multimap.get(\"google\")).containsExactly(2, 6).inOrder();\n",
        "73": "    assertThat(multimap.get(\"tree\")).containsExactly(0, 4).inOrder();\n",
        "74": "  }\n",
        "75": "\n",
        "76": "  public void testOrderedKeySet() {\n",
        "77": "    TreeMultimap<String, Integer> multimap = createPopulate();\n",
        "78": "    assertThat(multimap.keySet()).containsExactly(\"foo\", \"google\", \"tree\").inOrder();\n",
        "79": "  }\n",
        "80": "\n",
        "81": "  public void testOrderedAsMapEntries() {\n",
        "82": "    TreeMultimap<String, Integer> multimap = createPopulate();\n",
        "83": "    Iterator<Map.Entry<String, Collection<Integer>>> iterator =\n",
        "84": "        multimap.asMap().entrySet().iterator();\n",
        "85": "    Map.Entry<String, Collection<Integer>> entry = iterator.next();\n",
        "86": "    assertEquals(\"foo\", entry.getKey());\n",
        "87": "    assertThat(entry.getValue()).containsExactly(1, 3, 7);\n",
        "88": "    entry = iterator.next();\n",
        "89": "    assertEquals(\"google\", entry.getKey());\n",
        "90": "    assertThat(entry.getValue()).containsExactly(2, 6);\n",
        "91": "    entry = iterator.next();\n",
        "92": "    assertEquals(\"tree\", entry.getKey());\n",
        "93": "    assertThat(entry.getValue()).containsExactly(0, 4);\n",
        "94": "  }\n",
        "95": "\n",
        "96": "  public void testOrderedEntries() {\n",
        "97": "    TreeMultimap<String, Integer> multimap = createPopulate();\n",
        "98": "    assertThat(multimap.entries()).containsExactly(\n",
        "99": "        Maps.immutableEntry(\"foo\", 1),\n",
        "100": "        Maps.immutableEntry(\"foo\", 3),\n",
        "101": "        Maps.immutableEntry(\"foo\", 7),\n",
        "102": "        Maps.immutableEntry(\"google\", 2),\n",
        "103": "        Maps.immutableEntry(\"google\", 6),\n",
        "104": "        Maps.immutableEntry(\"tree\", 0),\n",
        "105": "        Maps.immutableEntry(\"tree\", 4)).inOrder();\n",
        "106": "  }\n",
        "107": "\n",
        "108": "  public void testOrderedValues() {\n",
        "109": "    TreeMultimap<String, Integer> multimap = createPopulate();\n",
        "110": "    assertThat(multimap.values()).containsExactly(\n",
        "111": "        1, 3, 7, 2, 6, 0, 4).inOrder();\n",
        "112": "  }\n",
        "113": "\n",
        "114": "  public void testMultimapConstructor() {\n",
        "115": "    SetMultimap<String, Integer> multimap = create();\n",
        "116": "    multimap.putAll(\"bar\", Arrays.asList(3, 1, 2));\n",
        "117": "    multimap.putAll(\"foo\", Arrays.asList(2, 3, 1, -1, 4));\n",
        "118": "    TreeMultimap<String, Integer> copy = TreeMultimap.create(multimap);\n",
        "119": "    assertEquals(multimap, copy);\n",
        "120": "  }\n",
        "121": "\n",
        "122": "  private static final Comparator<Double> KEY_COMPARATOR =\n",
        "123": "      Ordering.natural();\n",
        "124": "\n",
        "125": "  private static final Comparator<Double> VALUE_COMPARATOR =\n",
        "126": "      Ordering.natural().reverse().nullsFirst();\n",
        "127": "\n",
        "128": "  /**\n",
        "129": "   * Test that creating one TreeMultimap from another does not copy the\n",
        "130": "   * comparators from the source TreeMultimap.\n",
        "131": "   */\n",
        "132": "  public void testCreateFromTreeMultimap() {\n",
        "133": "    Multimap<Double, Double> tree = TreeMultimap.create(KEY_COMPARATOR, VALUE_COMPARATOR);\n",
        "134": "    tree.put(1.0, 2.0);\n",
        "135": "    tree.put(2.0, 3.0);\n",
        "136": "    tree.put(3.0, 4.0);\n",
        "137": "    tree.put(4.0, 5.0);\n",
        "138": "\n",
        "139": "    TreeMultimap<Double, Double> copyFromTree = TreeMultimap.create(tree);\n",
        "140": "    assertEquals(tree, copyFromTree);\n",
        "141": "    assertSame(Ordering.natural(), copyFromTree.keyComparator());\n",
        "142": "    assertSame(Ordering.natural(), copyFromTree.valueComparator());\n",
        "143": "    assertSame(Ordering.natural(), copyFromTree.get(1.0).comparator());\n",
        "144": "  }\n",
        "145": "\n",
        "146": "  /**\n",
        "147": "   * Test that creating one TreeMultimap from a non-TreeMultimap\n",
        "148": "   * results in natural ordering.\n",
        "149": "   */\n",
        "150": "  public void testCreateFromHashMultimap() {\n",
        "151": "    Multimap<Double, Double> hash = HashMultimap.create();\n",
        "152": "    hash.put(1.0, 2.0);\n",
        "153": "    hash.put(2.0, 3.0);\n",
        "154": "    hash.put(3.0, 4.0);\n",
        "155": "    hash.put(4.0, 5.0);\n",
        "156": "\n",
        "157": "    TreeMultimap<Double, Double> copyFromHash = TreeMultimap.create(hash);\n",
        "158": "    assertEquals(hash, copyFromHash);\n",
        "159": "    assertEquals(Ordering.natural(), copyFromHash.keyComparator());\n",
        "160": "    assertEquals(Ordering.natural(), copyFromHash.valueComparator());\n",
        "161": "  }\n",
        "162": "\n",
        "163": "  /**\n",
        "164": "   * Test that creating one TreeMultimap from a SortedSetMultimap uses natural\n",
        "165": "   * ordering.\n",
        "166": "   */\n",
        "167": "  public void testCreateFromSortedSetMultimap() {\n",
        "168": "    SortedSetMultimap<Double, Double> tree = TreeMultimap.create(KEY_COMPARATOR, VALUE_COMPARATOR);\n",
        "169": "    tree.put(1.0, 2.0);\n",
        "170": "    tree.put(2.0, 3.0);\n",
        "171": "    tree.put(3.0, 4.0);\n",
        "172": "    tree.put(4.0, 5.0);\n",
        "173": "\n",
        "174": "    SortedSetMultimap<Double, Double> sorted = Multimaps.unmodifiableSortedSetMultimap(tree);\n",
        "175": "    TreeMultimap<Double, Double> copyFromSorted = TreeMultimap.create(sorted);\n",
        "176": "    assertEquals(tree, copyFromSorted);\n",
        "177": "    assertSame(Ordering.natural(), copyFromSorted.keyComparator());\n",
        "178": "    assertSame(Ordering.natural(), copyFromSorted.valueComparator());\n",
        "179": "    assertSame(Ordering.natural(), copyFromSorted.get(1.0).comparator());\n",
        "180": "  }\n",
        "181": "\n",
        "182": "  public void testComparators() {\n",
        "183": "    TreeMultimap<String, Integer> multimap = TreeMultimap.create();\n",
        "184": "    assertEquals(Ordering.natural(), multimap.keyComparator());\n",
        "185": "    assertEquals(Ordering.natural(), multimap.valueComparator());\n",
        "186": "  }\n",
        "187": "\n",
        "188": "  public void testTreeMultimapAsMapSorted() {\n",
        "189": "    TreeMultimap<String, Integer> multimap = createPopulate();\n",
        "190": "    SortedMap<String, Collection<Integer>> asMap = multimap.asMap();\n",
        "191": "    assertEquals(Ordering.natural(), asMap.comparator());\n",
        "192": "    assertEquals(\"foo\", asMap.firstKey());\n",
        "193": "    assertEquals(\"tree\", asMap.lastKey());\n",
        "194": "    Set<Integer> fooValues = ImmutableSet.of(1, 3, 7);\n",
        "195": "    Set<Integer> googleValues = ImmutableSet.of(2, 6);\n",
        "196": "    Set<Integer> treeValues = ImmutableSet.of(4, 0);\n",
        "197": "    assertEquals(ImmutableMap.of(\"google\", googleValues, \"tree\", treeValues),\n",
        "198": "        asMap.tailMap(\"g\"));\n",
        "199": "    assertEquals(ImmutableMap.of(\"google\", googleValues, \"foo\", fooValues),\n",
        "200": "        asMap.headMap(\"h\"));\n",
        "201": "    assertEquals(ImmutableMap.of(\"google\", googleValues),\n",
        "202": "        asMap.subMap(\"g\", \"h\"));\n",
        "203": "  }\n",
        "204": "\n",
        "205": "  public void testTailSetClear() {\n",
        "206": "    TreeMultimap<String, Integer> multimap = TreeMultimap.create();\n",
        "207": "    multimap.put(\"a\", 1);\n",
        "208": "    multimap.put(\"a\", 11);\n",
        "209": "    multimap.put(\"b\", 2);\n",
        "210": "    multimap.put(\"c\", 3);\n",
        "211": "    multimap.put(\"d\", 4);\n",
        "212": "    multimap.put(\"e\", 5);\n",
        "213": "    multimap.put(\"e\", 55);\n",
        "214": "\n",
        "215": "    multimap.keySet().tailSet(\"d\").clear();\n",
        "216": "    assertEquals(ImmutableSet.of(\"a\", \"b\", \"c\"), multimap.keySet());\n",
        "217": "    assertEquals(4, multimap.size());\n",
        "218": "    assertEquals(4, multimap.values().size());\n",
        "219": "    assertEquals(4, multimap.keys().size());\n",
        "220": "  }\n",
        "221": "}\n",
        "222": "\n"
    }
}