{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.BoundType.CLOSED;\n",
        "20": "import static com.google.common.truth.Truth.assertThat;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "\n",
        "24": "import junit.framework.TestCase;\n",
        "25": "\n",
        "26": "import java.util.Arrays;\n",
        "27": "import java.util.Collections;\n",
        "28": "import java.util.Comparator;\n",
        "29": "import java.util.SortedSet;\n",
        "30": "\n",
        "31": "/**\n",
        "32": " * Unit test for {@link TreeMultiset}.\n",
        "33": " *\n",
        "34": " * @author Neal Kanodia\n",
        "35": " */\n",
        "36": "@GwtCompatible(emulated = true)\n",
        "37": "public class TreeMultisetTest extends TestCase {\n",
        "38": "\n",
        "39": "  public void testCreate() {\n",
        "40": "    TreeMultiset<String> multiset = TreeMultiset.create();\n",
        "41": "    multiset.add(\"foo\", 2);\n",
        "42": "    multiset.add(\"bar\");\n",
        "43": "    assertEquals(3, multiset.size());\n",
        "44": "    assertEquals(2, multiset.count(\"foo\"));\n",
        "45": "    assertEquals(Ordering.natural(), multiset.comparator());\n",
        "46": "    assertEquals(\"[bar, foo x 2]\", multiset.toString());\n",
        "47": "  }\n",
        "48": "\n",
        "49": "  public void testCreateWithComparator() {\n",
        "50": "    Multiset<String> multiset = TreeMultiset.create(Collections.reverseOrder());\n",
        "51": "    multiset.add(\"foo\", 2);\n",
        "52": "    multiset.add(\"bar\");\n",
        "53": "    assertEquals(3, multiset.size());\n",
        "54": "    assertEquals(2, multiset.count(\"foo\"));\n",
        "55": "    assertEquals(\"[foo x 2, bar]\", multiset.toString());\n",
        "56": "  }\n",
        "57": "\n",
        "58": "  public void testCreateFromIterable() {\n",
        "59": "    Multiset<String> multiset\n",
        "60": "        = TreeMultiset.create(Arrays.asList(\"foo\", \"bar\", \"foo\"));\n",
        "61": "    assertEquals(3, multiset.size());\n",
        "62": "    assertEquals(2, multiset.count(\"foo\"));\n",
        "63": "    assertEquals(\"[bar, foo x 2]\", multiset.toString());\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  public void testToString() {\n",
        "67": "    Multiset<String> ms = TreeMultiset.create();\n",
        "68": "    ms.add(\"a\", 3);\n",
        "69": "    ms.add(\"c\", 1);\n",
        "70": "    ms.add(\"b\", 2);\n",
        "71": "\n",
        "72": "    assertEquals(\"[a x 3, b x 2, c]\", ms.toString());\n",
        "73": "  }\n",
        "74": "\n",
        "75": "  public void testElementSetSortedSetMethods() {\n",
        "76": "    TreeMultiset<String> ms = TreeMultiset.create();\n",
        "77": "    ms.add(\"c\", 1);\n",
        "78": "    ms.add(\"a\", 3);\n",
        "79": "    ms.add(\"b\", 2);\n",
        "80": "    SortedSet<String> elementSet = ms.elementSet();\n",
        "81": "\n",
        "82": "    assertEquals(\"a\", elementSet.first());\n",
        "83": "    assertEquals(\"c\", elementSet.last());\n",
        "84": "    assertEquals(Ordering.natural(), elementSet.comparator());\n",
        "85": "\n",
        "86": "    assertThat(elementSet.headSet(\"b\")).containsExactly(\"a\");\n",
        "87": "    assertThat(elementSet.tailSet(\"b\")).containsExactly(\"b\", \"c\").inOrder();\n",
        "88": "    assertThat(elementSet.subSet(\"a\", \"c\")).containsExactly(\"a\", \"b\").inOrder();\n",
        "89": "  }\n",
        "90": "\n",
        "91": "  public void testElementSetSubsetRemove() {\n",
        "92": "    TreeMultiset<String> ms = TreeMultiset.create();\n",
        "93": "    ms.add(\"a\", 1);\n",
        "94": "    ms.add(\"b\", 3);\n",
        "95": "    ms.add(\"c\", 2);\n",
        "96": "    ms.add(\"d\", 1);\n",
        "97": "    ms.add(\"e\", 3);\n",
        "98": "    ms.add(\"f\", 2);\n",
        "99": "\n",
        "100": "    SortedSet<String> elementSet = ms.elementSet();\n",
        "101": "    assertThat(elementSet).containsExactly(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\").inOrder();\n",
        "102": "    SortedSet<String> subset = elementSet.subSet(\"b\", \"f\");\n",
        "103": "    assertThat(subset).containsExactly(\"b\", \"c\", \"d\", \"e\").inOrder();\n",
        "104": "\n",
        "105": "    assertTrue(subset.remove(\"c\"));\n",
        "106": "    assertThat(elementSet).containsExactly(\"a\", \"b\", \"d\", \"e\", \"f\").inOrder();\n",
        "107": "    assertThat(subset).containsExactly(\"b\", \"d\", \"e\").inOrder();\n",
        "108": "    assertEquals(10, ms.size());\n",
        "109": "\n",
        "110": "    assertFalse(subset.remove(\"a\"));\n",
        "111": "    assertThat(elementSet).containsExactly(\"a\", \"b\", \"d\", \"e\", \"f\").inOrder();\n",
        "112": "    assertThat(subset).containsExactly(\"b\", \"d\", \"e\").inOrder();\n",
        "113": "    assertEquals(10, ms.size());\n",
        "114": "  }\n",
        "115": "\n",
        "116": "  public void testElementSetSubsetRemoveAll() {\n",
        "117": "    TreeMultiset<String> ms = TreeMultiset.create();\n",
        "118": "    ms.add(\"a\", 1);\n",
        "119": "    ms.add(\"b\", 3);\n",
        "120": "    ms.add(\"c\", 2);\n",
        "121": "    ms.add(\"d\", 1);\n",
        "122": "    ms.add(\"e\", 3);\n",
        "123": "    ms.add(\"f\", 2);\n",
        "124": "\n",
        "125": "    SortedSet<String> elementSet = ms.elementSet();\n",
        "126": "    assertThat(elementSet).containsExactly(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\").inOrder();\n",
        "127": "    SortedSet<String> subset = elementSet.subSet(\"b\", \"f\");\n",
        "128": "    assertThat(subset).containsExactly(\"b\", \"c\", \"d\", \"e\").inOrder();\n",
        "129": "\n",
        "130": "    assertTrue(subset.removeAll(Arrays.asList(\"a\", \"c\")));\n",
        "131": "    assertThat(elementSet).containsExactly(\"a\", \"b\", \"d\", \"e\", \"f\").inOrder();\n",
        "132": "    assertThat(subset).containsExactly(\"b\", \"d\", \"e\").inOrder();\n",
        "133": "    assertEquals(10, ms.size());\n",
        "134": "  }\n",
        "135": "\n",
        "136": "  public void testElementSetSubsetRetainAll() {\n",
        "137": "    TreeMultiset<String> ms = TreeMultiset.create();\n",
        "138": "    ms.add(\"a\", 1);\n",
        "139": "    ms.add(\"b\", 3);\n",
        "140": "    ms.add(\"c\", 2);\n",
        "141": "    ms.add(\"d\", 1);\n",
        "142": "    ms.add(\"e\", 3);\n",
        "143": "    ms.add(\"f\", 2);\n",
        "144": "\n",
        "145": "    SortedSet<String> elementSet = ms.elementSet();\n",
        "146": "    assertThat(elementSet).containsExactly(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\").inOrder();\n",
        "147": "    SortedSet<String> subset = elementSet.subSet(\"b\", \"f\");\n",
        "148": "    assertThat(subset).containsExactly(\"b\", \"c\", \"d\", \"e\").inOrder();\n",
        "149": "\n",
        "150": "    assertTrue(subset.retainAll(Arrays.asList(\"a\", \"c\")));\n",
        "151": "    assertThat(elementSet).containsExactly(\"a\", \"c\", \"f\").inOrder();\n",
        "152": "    assertThat(subset).containsExactly(\"c\");\n",
        "153": "    assertEquals(5, ms.size());\n",
        "154": "  }\n",
        "155": "\n",
        "156": "  public void testElementSetSubsetClear() {\n",
        "157": "    TreeMultiset<String> ms = TreeMultiset.create();\n",
        "158": "    ms.add(\"a\", 1);\n",
        "159": "    ms.add(\"b\", 3);\n",
        "160": "    ms.add(\"c\", 2);\n",
        "161": "    ms.add(\"d\", 1);\n",
        "162": "    ms.add(\"e\", 3);\n",
        "163": "    ms.add(\"f\", 2);\n",
        "164": "\n",
        "165": "    SortedSet<String> elementSet = ms.elementSet();\n",
        "166": "    assertThat(elementSet).containsExactly(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\").inOrder();\n",
        "167": "    SortedSet<String> subset = elementSet.subSet(\"b\", \"f\");\n",
        "168": "    assertThat(subset).containsExactly(\"b\", \"c\", \"d\", \"e\").inOrder();\n",
        "169": "\n",
        "170": "    subset.clear();\n",
        "171": "    assertThat(elementSet).containsExactly(\"a\", \"f\").inOrder();\n",
        "172": "    assertThat(subset).isEmpty();\n",
        "173": "    assertEquals(3, ms.size());\n",
        "174": "  }\n",
        "175": "\n",
        "176": "  public void testCustomComparator() throws Exception {\n",
        "177": "    Comparator<String> comparator = new Comparator<String>() {\n",
        "178": "      @Override\n",
        "179": "      public int compare(String o1, String o2) {\n",
        "180": "        return o2.compareTo(o1);\n",
        "181": "      }\n",
        "182": "    };\n",
        "183": "    TreeMultiset<String> ms = TreeMultiset.create(comparator);\n",
        "184": "\n",
        "185": "    ms.add(\"b\");\n",
        "186": "    ms.add(\"c\");\n",
        "187": "    ms.add(\"a\");\n",
        "188": "    ms.add(\"b\");\n",
        "189": "    ms.add(\"d\");\n",
        "190": "\n",
        "191": "    assertThat(ms).containsExactly(\"d\", \"c\", \"b\", \"b\", \"a\").inOrder();\n",
        "192": "\n",
        "193": "    SortedSet<String> elementSet = ms.elementSet();\n",
        "194": "    assertEquals(\"d\", elementSet.first());\n",
        "195": "    assertEquals(\"a\", elementSet.last());\n",
        "196": "    assertEquals(comparator, elementSet.comparator());\n",
        "197": "  }\n",
        "198": "\n",
        "199": "  public void testNullAcceptingComparator() throws Exception {\n",
        "200": "    Comparator<String> comparator = Ordering.<String>natural().nullsFirst();\n",
        "201": "    TreeMultiset<String> ms = TreeMultiset.create(comparator);\n",
        "202": "\n",
        "203": "    ms.add(\"b\");\n",
        "204": "    ms.add(null);\n",
        "205": "    ms.add(\"a\");\n",
        "206": "    ms.add(\"b\");\n",
        "207": "    ms.add(null, 2);\n",
        "208": "\n",
        "209": "    assertThat(ms).containsExactly(null, null, null, \"a\", \"b\", \"b\").inOrder();\n",
        "210": "    assertEquals(3, ms.count(null));\n",
        "211": "\n",
        "212": "    SortedSet<String> elementSet = ms.elementSet();\n",
        "213": "    assertEquals(null, elementSet.first());\n",
        "214": "    assertEquals(\"b\", elementSet.last());\n",
        "215": "    assertEquals(comparator, elementSet.comparator());\n",
        "216": "  }\n",
        "217": "\n",
        "218": "  private static final Comparator<String> DEGENERATE_COMPARATOR =\n",
        "219": "      new Comparator<String>() {\n",
        "220": "        @Override\n",
        "221": "        public int compare(String o1, String o2) {\n",
        "222": "          return o1.length() - o2.length();\n",
        "223": "        }\n",
        "224": "      };\n",
        "225": "\n",
        "226": "  /**\n",
        "227": "   * Test a TreeMultiset with a comparator that can return 0 when comparing\n",
        "228": "   * unequal values.\n",
        "229": "   */\n",
        "230": "  public void testDegenerateComparator() throws Exception {\n",
        "231": "    TreeMultiset<String> ms = TreeMultiset.create(DEGENERATE_COMPARATOR);\n",
        "232": "\n",
        "233": "    ms.add(\"foo\");\n",
        "234": "    ms.add(\"a\");\n",
        "235": "    ms.add(\"bar\");\n",
        "236": "    ms.add(\"b\");\n",
        "237": "    ms.add(\"c\");\n",
        "238": "\n",
        "239": "    assertEquals(2, ms.count(\"bar\"));\n",
        "240": "    assertEquals(3, ms.count(\"b\"));\n",
        "241": "\n",
        "242": "    Multiset<String> ms2 = TreeMultiset.create(DEGENERATE_COMPARATOR);\n",
        "243": "\n",
        "244": "    ms2.add(\"cat\", 2);\n",
        "245": "    ms2.add(\"x\", 3);\n",
        "246": "\n",
        "247": "    assertEquals(ms, ms2);\n",
        "248": "    assertEquals(ms2, ms);\n",
        "249": "\n",
        "250": "    SortedSet<String> elementSet = ms.elementSet();\n",
        "251": "    assertEquals(\"a\", elementSet.first());\n",
        "252": "    assertEquals(\"foo\", elementSet.last());\n",
        "253": "    assertEquals(DEGENERATE_COMPARATOR, elementSet.comparator());\n",
        "254": "  }\n",
        "255": "\n",
        "256": "  public void testSubMultisetSize() {\n",
        "257": "    TreeMultiset<String> ms = TreeMultiset.create();\n",
        "258": "    ms.add(\"a\", Integer.MAX_VALUE);\n",
        "259": "    ms.add(\"b\", Integer.MAX_VALUE);\n",
        "260": "    ms.add(\"c\", 3);\n",
        "261": "\n",
        "262": "    assertEquals(Integer.MAX_VALUE, ms.count(\"a\"));\n",
        "263": "    assertEquals(Integer.MAX_VALUE, ms.count(\"b\"));\n",
        "264": "    assertEquals(3, ms.count(\"c\"));\n",
        "265": "\n",
        "266": "    assertEquals(Integer.MAX_VALUE, ms.headMultiset(\"c\", CLOSED).size());\n",
        "267": "    assertEquals(Integer.MAX_VALUE, ms.headMultiset(\"b\", CLOSED).size());\n",
        "268": "    assertEquals(Integer.MAX_VALUE, ms.headMultiset(\"a\", CLOSED).size());\n",
        "269": "\n",
        "270": "    assertEquals(3, ms.tailMultiset(\"c\", CLOSED).size());\n",
        "271": "    assertEquals(Integer.MAX_VALUE, ms.tailMultiset(\"b\", CLOSED).size());\n",
        "272": "    assertEquals(Integer.MAX_VALUE, ms.tailMultiset(\"a\", CLOSED).size());\n",
        "273": "  }\n",
        "274": "}\n",
        "275": "\n"
    }
}