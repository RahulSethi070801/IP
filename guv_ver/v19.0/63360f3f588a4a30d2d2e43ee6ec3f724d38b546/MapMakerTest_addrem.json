{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2011 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static java.util.concurrent.TimeUnit.HOURS;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.base.Function;\n",
        "23": "\n",
        "24": "import junit.framework.TestCase;\n",
        "25": "\n",
        "26": "import java.util.Map;\n",
        "27": "import java.util.concurrent.ConcurrentHashMap;\n",
        "28": "import java.util.concurrent.ConcurrentMap;\n",
        "29": "\n",
        "30": "/**\n",
        "31": " * @author Charles Fry\n",
        "32": " */\n",
        "33": "@GwtCompatible(emulated = true)\n",
        "34": "public class MapMakerTest extends TestCase {\n",
        "35": "\n",
        "36": "  // \"Basher tests\", where we throw a bunch of stuff at a Cache and check basic invariants.\n",
        "37": "\n",
        "38": "  /*\n",
        "39": "   * TODO(cpovirk): eliminate duplication between these tests and those in LegacyMapMakerTests and\n",
        "40": "   * anywhere else\n",
        "41": "   */\n",
        "42": "\n",
        "43": "  /** Tests for the builder. */\n",
        "44": "  public static class MakerTest extends TestCase {\n",
        "45": "    public void testInitialCapacity_negative() {\n",
        "46": "      MapMaker maker = new MapMaker();\n",
        "47": "      try {\n",
        "48": "        maker.initialCapacity(-1);\n",
        "49": "        fail();\n",
        "50": "      } catch (IllegalArgumentException expected) {\n",
        "51": "      }\n",
        "52": "    }\n",
        "53": "\n",
        "54": "    // TODO(cpovirk): enable when ready\n",
        "55": "    public void xtestInitialCapacity_setTwice() {\n",
        "56": "      MapMaker maker = new MapMaker().initialCapacity(16);\n",
        "57": "      try {\n",
        "58": "        // even to the same value is not allowed\n",
        "59": "        maker.initialCapacity(16);\n",
        "60": "        fail();\n",
        "61": "      } catch (IllegalArgumentException expected) {\n",
        "62": "      }\n",
        "63": "    }\n",
        "64": "\n",
        "65": "    @SuppressWarnings(\"deprecation\") // test of deprecated method\n",
        "66": "    public void testExpiration_setTwice() {\n",
        "67": "      MapMaker maker = new MapMaker().expireAfterWrite(1, HOURS);\n",
        "68": "      try {\n",
        "69": "        // even to the same value is not allowed\n",
        "70": "        maker.expireAfterWrite(1, HOURS);\n",
        "71": "        fail();\n",
        "72": "      } catch (IllegalStateException expected) {\n",
        "73": "      }\n",
        "74": "    }\n",
        "75": "\n",
        "76": "    public void testMaximumSize_setTwice() {\n",
        "77": "      MapMaker maker = new MapMaker().maximumSize(16);\n",
        "78": "      try {\n",
        "79": "        // even to the same value is not allowed\n",
        "80": "        maker.maximumSize(16);\n",
        "81": "        fail();\n",
        "82": "      } catch (IllegalStateException expected) {\n",
        "83": "      }\n",
        "84": "    }\n",
        "85": "\n",
        "86": "    public void testReturnsPlainConcurrentHashMapWhenPossible() {\n",
        "87": "      Map<?, ?> map = new MapMaker()\n",
        "88": "          .initialCapacity(5)\n",
        "89": "          .makeMap();\n",
        "90": "      assertTrue(map instanceof ConcurrentHashMap);\n",
        "91": "    }\n",
        "92": "  }\n",
        "93": "\n",
        "94": "  /** Tests of the built map with maximumSize. */\n",
        "95": "  public static class MaximumSizeTest extends TestCase {\n",
        "96": "    public void testPut_sizeIsZero() {\n",
        "97": "      ConcurrentMap<Object, Object> map =\n",
        "98": "          new MapMaker().maximumSize(0).makeMap();\n",
        "99": "      assertEquals(0, map.size());\n",
        "100": "      map.put(new Object(), new Object());\n",
        "101": "      assertEquals(0, map.size());\n",
        "102": "    }\n",
        "103": "\n",
        "104": "    public void testSizeBasedEviction() {\n",
        "105": "      int numKeys = 10;\n",
        "106": "      int mapSize = 5;\n",
        "107": "      ConcurrentMap<Object, Object> map =\n",
        "108": "          new MapMaker().maximumSize(mapSize).makeMap();\n",
        "109": "      for (int i = 0; i < numKeys; i++) {\n",
        "110": "        map.put(i, i);\n",
        "111": "      }\n",
        "112": "      assertEquals(mapSize, map.size());\n",
        "113": "      for (int i = numKeys - mapSize; i < mapSize; i++) {\n",
        "114": "        assertTrue(map.containsKey(i));\n",
        "115": "      }\n",
        "116": "    }\n",
        "117": "  }\n",
        "118": "\n",
        "119": "  /** Tests for recursive computation. */\n",
        "120": "  public static class RecursiveComputationTest extends TestCase {\n",
        "121": "    Function<Integer, String> recursiveComputer\n",
        "122": "        = new Function<Integer, String>() {\n",
        "123": "      @Override\n",
        "124": "      public String apply(Integer key) {\n",
        "125": "        if (key > 0) {\n",
        "126": "          return key + \", \" + recursiveMap.get(key - 1);\n",
        "127": "        } else {\n",
        "128": "          return \"0\";\n",
        "129": "        }\n",
        "130": "      }\n",
        "131": "    };\n",
        "132": "\n",
        "133": "    ConcurrentMap<Integer, String> recursiveMap = new MapMaker()\n",
        "134": "        .makeComputingMap(recursiveComputer);\n",
        "135": "\n",
        "136": "    public void testRecursiveComputation() {\n",
        "137": "      assertEquals(\"3, 2, 1, 0\", recursiveMap.get(3));\n",
        "138": "    }\n",
        "139": "  }\n",
        "140": "\n",
        "141": "  /**\n",
        "142": "   * Tests for computing functionality.\n",
        "143": "   */\n",
        "144": "  public static class ComputingTest extends TestCase {\n",
        "145": "    public void testComputerThatReturnsNull() {\n",
        "146": "      ConcurrentMap<Integer, String> map = new MapMaker()\n",
        "147": "          .makeComputingMap(new Function<Integer, String>() {\n",
        "148": "            @Override\n",
        "149": "            public String apply(Integer key) {\n",
        "150": "              return null;\n",
        "151": "            }\n",
        "152": "          });\n",
        "153": "      try {\n",
        "154": "        map.get(1);\n",
        "155": "        fail();\n",
        "156": "      } catch (NullPointerException e) { /* expected */ }\n",
        "157": "    }\n",
        "158": "\n",
        "159": "    public void testRuntimeException() {\n",
        "160": "      final RuntimeException e = new RuntimeException();\n",
        "161": "\n",
        "162": "      ConcurrentMap<Object, Object> map = new MapMaker().makeComputingMap(\n",
        "163": "          new Function<Object, Object>() {\n",
        "164": "        @Override\n",
        "165": "        public Object apply(Object from) {\n",
        "166": "          throw e;\n",
        "167": "        }\n",
        "168": "      });\n",
        "169": "\n",
        "170": "      try {\n",
        "171": "        map.get(new Object());\n",
        "172": "        fail();\n",
        "173": "      } catch (ComputationException ce) {\n",
        "174": "        assertSame(e, ce.getCause());\n",
        "175": "      }\n",
        "176": "    }\n",
        "177": "  }\n",
        "178": "}\n",
        "179": "\n"
    }
}