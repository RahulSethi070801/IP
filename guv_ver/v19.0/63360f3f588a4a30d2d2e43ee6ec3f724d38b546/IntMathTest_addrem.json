{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2011 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.math;\n",
        "18": "\n",
        "19": "import static com.google.common.math.MathTesting.ALL_INTEGER_CANDIDATES;\n",
        "20": "import static com.google.common.math.MathTesting.ALL_ROUNDING_MODES;\n",
        "21": "import static com.google.common.math.MathTesting.ALL_SAFE_ROUNDING_MODES;\n",
        "22": "import static com.google.common.math.MathTesting.EXPONENTS;\n",
        "23": "import static com.google.common.math.MathTesting.NEGATIVE_INTEGER_CANDIDATES;\n",
        "24": "import static com.google.common.math.MathTesting.NONZERO_INTEGER_CANDIDATES;\n",
        "25": "import static com.google.common.math.MathTesting.POSITIVE_INTEGER_CANDIDATES;\n",
        "26": "import static com.google.common.math.TestPlatform.intsCanGoOutOfRange;\n",
        "27": "import static java.math.BigInteger.valueOf;\n",
        "28": "import static java.math.RoundingMode.UNNECESSARY;\n",
        "29": "\n",
        "30": "import com.google.common.annotations.GwtCompatible;\n",
        "31": "\n",
        "32": "import junit.framework.TestCase;\n",
        "33": "\n",
        "34": "import java.math.BigDecimal;\n",
        "35": "import java.math.BigInteger;\n",
        "36": "import java.math.RoundingMode;\n",
        "37": "\n",
        "38": "/**\n",
        "39": " * Tests for {@link IntMath}.\n",
        "40": " *\n",
        "41": " * @author Louis Wasserman\n",
        "42": " */\n",
        "43": "@GwtCompatible(emulated = true)\n",
        "44": "public class IntMathTest extends TestCase {\n",
        "45": "  \n",
        "46": "  public void testLessThanBranchFree() {\n",
        "47": "    for (int x : ALL_INTEGER_CANDIDATES) {\n",
        "48": "      for (int y : ALL_INTEGER_CANDIDATES) {\n",
        "49": "        if (LongMath.fitsInInt((long) x - y)) {\n",
        "50": "          int expected = (x < y) ? 1 : 0;\n",
        "51": "          int actual = IntMath.lessThanBranchFree(x, y);\n",
        "52": "          assertEquals(expected, actual);\n",
        "53": "        }\n",
        "54": "      }\n",
        "55": "    }\n",
        "56": "  }\n",
        "57": "\n",
        "58": "  public void testLog2ZeroAlwaysThrows() {\n",
        "59": "    for (RoundingMode mode : ALL_ROUNDING_MODES) {\n",
        "60": "      try {\n",
        "61": "        IntMath.log2(0, mode);\n",
        "62": "        fail(\"Expected IllegalArgumentException\");\n",
        "63": "      } catch (IllegalArgumentException expected) {}\n",
        "64": "    }\n",
        "65": "  }\n",
        "66": "\n",
        "67": "  public void testLog2NegativeAlwaysThrows() {\n",
        "68": "    for (int x : NEGATIVE_INTEGER_CANDIDATES) {\n",
        "69": "      for (RoundingMode mode : ALL_ROUNDING_MODES) {\n",
        "70": "        try {\n",
        "71": "          IntMath.log2(x, mode);\n",
        "72": "          fail(\"Expected IllegalArgumentException\");\n",
        "73": "        } catch (IllegalArgumentException expected) {}\n",
        "74": "      }\n",
        "75": "    }\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  // Relies on the correctness of BigIntegrerMath.log2 for all modes except UNNECESSARY.\n",
        "79": "  public void testLog2MatchesBigInteger() {\n",
        "80": "    for (int x : POSITIVE_INTEGER_CANDIDATES) {\n",
        "81": "      for (RoundingMode mode : ALL_SAFE_ROUNDING_MODES) {\n",
        "82": "        assertEquals(BigIntegerMath.log2(valueOf(x), mode), IntMath.log2(x, mode));\n",
        "83": "      }\n",
        "84": "    }\n",
        "85": "  }\n",
        "86": "\n",
        "87": "  // Relies on the correctness of isPowerOfTwo(int).\n",
        "88": "  public void testLog2Exact() {\n",
        "89": "    for (int x : POSITIVE_INTEGER_CANDIDATES) {\n",
        "90": "      // We only expect an exception if x was not a power of 2.\n",
        "91": "      boolean isPowerOf2 = IntMath.isPowerOfTwo(x);\n",
        "92": "      try {\n",
        "93": "        assertEquals(x, 1 << IntMath.log2(x, UNNECESSARY));\n",
        "94": "        assertTrue(isPowerOf2);\n",
        "95": "      } catch (ArithmeticException e) {\n",
        "96": "        assertFalse(isPowerOf2);\n",
        "97": "      }\n",
        "98": "    }\n",
        "99": "  }\n",
        "100": "\n",
        "101": "  // Relies on the correctness of BigIntegerMath.log10 for all modes except UNNECESSARY.\n",
        "102": "\n",
        "103": "  // Relies on the correctness of log10(int, FLOOR) and of pow(int, int).\n",
        "104": "\n",
        "105": "  // Simple test to cover sqrt(0) for all types and all modes.\n",
        "106": "\n",
        "107": "  /* Relies on the correctness of BigIntegerMath.sqrt for all modes except UNNECESSARY. */\n",
        "108": "\n",
        "109": "  /* Relies on the correctness of sqrt(int, FLOOR). */\n",
        "110": "\n",
        "111": "  public void testDivNonZero() {\n",
        "112": "    for (int p : NONZERO_INTEGER_CANDIDATES) {\n",
        "113": "      for (int q : NONZERO_INTEGER_CANDIDATES) {\n",
        "114": "        for (RoundingMode mode : ALL_SAFE_ROUNDING_MODES) {\n",
        "115": "          // Skip some tests that fail due to GWT's non-compliant int implementation.\n",
        "116": "          // TODO(cpovirk): does this test fail for only some rounding modes or for all?\n",
        "117": "          if (p == -2147483648 && q == -1 && intsCanGoOutOfRange()) {\n",
        "118": "            continue;\n",
        "119": "          }\n",
        "120": "          int expected =\n",
        "121": "              new BigDecimal(valueOf(p)).divide(new BigDecimal(valueOf(q)), 0, mode).intValue();\n",
        "122": "          assertEquals(p + \"/\" + q, force32(expected), IntMath.divide(p, q, mode));\n",
        "123": "        }\n",
        "124": "      }\n",
        "125": "    }\n",
        "126": "  }\n",
        "127": "\n",
        "128": "  public void testDivNonZeroExact() {\n",
        "129": "    for (int p : NONZERO_INTEGER_CANDIDATES) {\n",
        "130": "      for (int q : NONZERO_INTEGER_CANDIDATES) {\n",
        "131": "        // Skip some tests that fail due to GWT's non-compliant int implementation.\n",
        "132": "        if (p == -2147483648 && q == -1 && intsCanGoOutOfRange()) {\n",
        "133": "          continue;\n",
        "134": "        }\n",
        "135": "        boolean dividesEvenly = (p % q) == 0;\n",
        "136": "        try {\n",
        "137": "          assertEquals(p + \"/\" + q, p, IntMath.divide(p, q, UNNECESSARY) * q);\n",
        "138": "          assertTrue(p + \"/\" + q + \" not expected to divide evenly\", dividesEvenly);\n",
        "139": "        } catch (ArithmeticException e) {\n",
        "140": "          assertFalse(p + \"/\" + q + \" expected to divide evenly\", dividesEvenly);\n",
        "141": "        }\n",
        "142": "      }\n",
        "143": "    }\n",
        "144": "  }\n",
        "145": "\n",
        "146": "  public void testZeroDivIsAlwaysZero() {\n",
        "147": "    for (int q : NONZERO_INTEGER_CANDIDATES) {\n",
        "148": "      for (RoundingMode mode : ALL_ROUNDING_MODES) {\n",
        "149": "        assertEquals(0, IntMath.divide(0, q, mode));\n",
        "150": "      }\n",
        "151": "    }\n",
        "152": "  }\n",
        "153": "\n",
        "154": "  public void testDivByZeroAlwaysFails() {\n",
        "155": "    for (int p : ALL_INTEGER_CANDIDATES) {\n",
        "156": "      for (RoundingMode mode : ALL_ROUNDING_MODES) {\n",
        "157": "        try {\n",
        "158": "          IntMath.divide(p, 0, mode);\n",
        "159": "          fail(\"Expected ArithmeticException\");\n",
        "160": "        } catch (ArithmeticException expected) {}\n",
        "161": "      }\n",
        "162": "    }\n",
        "163": "  }\n",
        "164": "\n",
        "165": "  public void testMod() {\n",
        "166": "    for (int x : ALL_INTEGER_CANDIDATES) {\n",
        "167": "      for (int m : POSITIVE_INTEGER_CANDIDATES) {\n",
        "168": "        assertEquals(valueOf(x).mod(valueOf(m)).intValue(), IntMath.mod(x, m));\n",
        "169": "      }\n",
        "170": "    }\n",
        "171": "  }\n",
        "172": "\n",
        "173": "  public void testModNegativeModulusFails() {\n",
        "174": "    for (int x : POSITIVE_INTEGER_CANDIDATES) {\n",
        "175": "      for (int m : NEGATIVE_INTEGER_CANDIDATES) {\n",
        "176": "        try {\n",
        "177": "          IntMath.mod(x, m);\n",
        "178": "          fail(\"Expected ArithmeticException\");\n",
        "179": "        } catch (ArithmeticException expected) {}\n",
        "180": "      }\n",
        "181": "    }\n",
        "182": "  }\n",
        "183": "\n",
        "184": "  public void testModZeroModulusFails() {\n",
        "185": "    for (int x : ALL_INTEGER_CANDIDATES) {\n",
        "186": "      try {\n",
        "187": "        IntMath.mod(x, 0);\n",
        "188": "        fail(\"Expected ArithmeticException\");\n",
        "189": "      } catch (ArithmeticException expected) {}\n",
        "190": "    }\n",
        "191": "  }\n",
        "192": "\n",
        "193": "  public void testGCD() {\n",
        "194": "    for (int a : POSITIVE_INTEGER_CANDIDATES) {\n",
        "195": "      for (int b : POSITIVE_INTEGER_CANDIDATES) {\n",
        "196": "        assertEquals(valueOf(a).gcd(valueOf(b)), valueOf(IntMath.gcd(a, b)));\n",
        "197": "      }\n",
        "198": "    }\n",
        "199": "  }\n",
        "200": "\n",
        "201": "  public void testGCDZero() {\n",
        "202": "    for (int a : POSITIVE_INTEGER_CANDIDATES) {\n",
        "203": "      assertEquals(a, IntMath.gcd(a, 0));\n",
        "204": "      assertEquals(a, IntMath.gcd(0, a));\n",
        "205": "    }\n",
        "206": "    assertEquals(0, IntMath.gcd(0, 0));\n",
        "207": "  }\n",
        "208": "\n",
        "209": "  public void testGCDNegativePositiveThrows() {\n",
        "210": "    for (int a : NEGATIVE_INTEGER_CANDIDATES) {\n",
        "211": "      try {\n",
        "212": "        IntMath.gcd(a, 3);\n",
        "213": "        fail(\"Expected IllegalArgumentException\");\n",
        "214": "      } catch (IllegalArgumentException expected) {}\n",
        "215": "      try {\n",
        "216": "        IntMath.gcd(3, a);\n",
        "217": "        fail(\"Expected IllegalArgumentException\");\n",
        "218": "      } catch (IllegalArgumentException expected) {}\n",
        "219": "    }\n",
        "220": "  }\n",
        "221": "\n",
        "222": "  public void testGCDNegativeZeroThrows() {\n",
        "223": "    for (int a : NEGATIVE_INTEGER_CANDIDATES) {\n",
        "224": "      try {\n",
        "225": "        IntMath.gcd(a, 0);\n",
        "226": "        fail(\"Expected IllegalArgumentException\");\n",
        "227": "      } catch (IllegalArgumentException expected) {}\n",
        "228": "      try {\n",
        "229": "        IntMath.gcd(0, a);\n",
        "230": "        fail(\"Expected IllegalArgumentException\");\n",
        "231": "      } catch (IllegalArgumentException expected) {}\n",
        "232": "    }\n",
        "233": "  }\n",
        "234": "\n",
        "235": "  public void testCheckedAdd() {\n",
        "236": "    for (int a : ALL_INTEGER_CANDIDATES) {\n",
        "237": "      for (int b : ALL_INTEGER_CANDIDATES) {\n",
        "238": "        BigInteger expectedResult = valueOf(a).add(valueOf(b));\n",
        "239": "        boolean expectedSuccess = fitsInInt(expectedResult);\n",
        "240": "        try {\n",
        "241": "          assertEquals(a + b, IntMath.checkedAdd(a, b));\n",
        "242": "          assertTrue(expectedSuccess);\n",
        "243": "        } catch (ArithmeticException e) {\n",
        "244": "          assertFalse(expectedSuccess);\n",
        "245": "        }\n",
        "246": "      }\n",
        "247": "    }\n",
        "248": "  }\n",
        "249": "\n",
        "250": "  public void testCheckedSubtract() {\n",
        "251": "    for (int a : ALL_INTEGER_CANDIDATES) {\n",
        "252": "      for (int b : ALL_INTEGER_CANDIDATES) {\n",
        "253": "        BigInteger expectedResult = valueOf(a).subtract(valueOf(b));\n",
        "254": "        boolean expectedSuccess = fitsInInt(expectedResult);\n",
        "255": "        try {\n",
        "256": "          assertEquals(a - b, IntMath.checkedSubtract(a, b));\n",
        "257": "          assertTrue(expectedSuccess);\n",
        "258": "        } catch (ArithmeticException e) {\n",
        "259": "          assertFalse(expectedSuccess);\n",
        "260": "        }\n",
        "261": "      }\n",
        "262": "    }\n",
        "263": "  }\n",
        "264": "\n",
        "265": "  public void testCheckedMultiply() {\n",
        "266": "    for (int a : ALL_INTEGER_CANDIDATES) {\n",
        "267": "      for (int b : ALL_INTEGER_CANDIDATES) {\n",
        "268": "        BigInteger expectedResult = valueOf(a).multiply(valueOf(b));\n",
        "269": "        boolean expectedSuccess = fitsInInt(expectedResult);\n",
        "270": "        try {\n",
        "271": "          assertEquals(a * b, IntMath.checkedMultiply(a, b));\n",
        "272": "          assertTrue(expectedSuccess);\n",
        "273": "        } catch (ArithmeticException e) {\n",
        "274": "          assertFalse(expectedSuccess);\n",
        "275": "        }\n",
        "276": "      }\n",
        "277": "    }\n",
        "278": "  }\n",
        "279": "\n",
        "280": "  public void testCheckedPow() {\n",
        "281": "    for (int b : ALL_INTEGER_CANDIDATES) {\n",
        "282": "      for (int k : EXPONENTS) {\n",
        "283": "        BigInteger expectedResult = valueOf(b).pow(k);\n",
        "284": "        boolean expectedSuccess = fitsInInt(expectedResult);\n",
        "285": "        try {\n",
        "286": "          assertEquals(b + \"^\" + k, force32(expectedResult.intValue()), IntMath.checkedPow(b, k));\n",
        "287": "          assertTrue(b + \"^\" + k + \" should have succeeded\", expectedSuccess);\n",
        "288": "        } catch (ArithmeticException e) {\n",
        "289": "          assertFalse(b + \"^\" + k + \" should have failed\", expectedSuccess);\n",
        "290": "        }\n",
        "291": "      }\n",
        "292": "    }\n",
        "293": "  }\n",
        "294": "\n",
        "295": "  // Depends on the correctness of BigIntegerMath.factorial.\n",
        "296": "  public void testFactorial() {\n",
        "297": "    for (int n = 0; n <= 50; n++) {\n",
        "298": "      BigInteger expectedBig = BigIntegerMath.factorial(n);\n",
        "299": "      int expectedInt = fitsInInt(expectedBig) ? expectedBig.intValue() : Integer.MAX_VALUE;\n",
        "300": "      assertEquals(expectedInt, IntMath.factorial(n));\n",
        "301": "    }\n",
        "302": "  }\n",
        "303": "\n",
        "304": "  public void testFactorialNegative() {\n",
        "305": "    for (int n : NEGATIVE_INTEGER_CANDIDATES) {\n",
        "306": "      try {\n",
        "307": "        IntMath.factorial(n);\n",
        "308": "        fail(\"Expected IllegalArgumentException\");\n",
        "309": "      } catch (IllegalArgumentException expected) {}\n",
        "310": "    }\n",
        "311": "  }\n",
        "312": "\n",
        "313": "  // Depends on the correctness of BigIntegerMath.binomial.\n",
        "314": "\n",
        "315": "  /**\n",
        "316": "   * Helper method that asserts the arithmetic mean of x and y is equal\n",
        "317": "   * to the expectedMean.\n",
        "318": "   */\n",
        "319": "  private static void assertMean(int expectedMean, int x, int y) {\n",
        "320": "    assertEquals(\"The expectedMean should be the same as computeMeanSafely\",\n",
        "321": "        expectedMean, computeMeanSafely(x, y));\n",
        "322": "    assertMean(x, y);\n",
        "323": "  }\n",
        "324": "\n",
        "325": "  /**\n",
        "326": "   * Helper method that asserts the arithmetic mean of x and y is equal\n",
        "327": "   * to the result of computeMeanSafely.\n",
        "328": "   */\n",
        "329": "  private static void assertMean(int x, int y) {\n",
        "330": "    int expectedMean = computeMeanSafely(x, y);\n",
        "331": "    assertEquals(expectedMean, IntMath.mean(x, y));\n",
        "332": "    assertEquals(\"The mean of x and y should equal the mean of y and x\",\n",
        "333": "        expectedMean, IntMath.mean(y, x));\n",
        "334": "  }\n",
        "335": "\n",
        "336": "  /**\n",
        "337": "   * Computes the mean in a way that is obvious and resilient to\n",
        "338": "   * overflow by using BigInteger arithmetic.\n",
        "339": "   */\n",
        "340": "  private static int computeMeanSafely(int x, int y) {\n",
        "341": "    BigInteger bigX = BigInteger.valueOf(x);\n",
        "342": "    BigInteger bigY = BigInteger.valueOf(y);\n",
        "343": "    BigDecimal bigMean = new BigDecimal(bigX.add(bigY))\n",
        "344": "        .divide(BigDecimal.valueOf(2), BigDecimal.ROUND_FLOOR);\n",
        "345": "    // parseInt blows up on overflow as opposed to intValue() which does not.\n",
        "346": "    return Integer.parseInt(bigMean.toString());\n",
        "347": "  }\n",
        "348": "\n",
        "349": "  private static boolean fitsInInt(BigInteger big) {\n",
        "350": "    return big.bitLength() <= 31;\n",
        "351": "  }\n",
        "352": "\n",
        "353": "  private static int force32(int value) {\n",
        "354": "    // GWT doesn't consistently overflow values to make them 32-bit, so we need to force it.\n",
        "355": "    return value & 0xffffffff;\n",
        "356": "  }\n",
        "357": "}\n",
        "358": "\n"
    }
}