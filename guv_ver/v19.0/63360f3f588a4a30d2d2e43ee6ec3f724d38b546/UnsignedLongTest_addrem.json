{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2011 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "6": " *\n",
        "7": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "8": " *\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the\n",
        "10": " * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n",
        "11": " * express or implied. See the License for the specific language governing permissions and\n",
        "12": " * limitations under the License.\n",
        "13": " */\n",
        "14": "\n",
        "15": "package com.google.common.primitives;\n",
        "16": "\n",
        "17": "import com.google.common.annotations.GwtCompatible;\n",
        "18": "import com.google.common.collect.ImmutableSet;\n",
        "19": "\n",
        "20": "import junit.framework.TestCase;\n",
        "21": "\n",
        "22": "import java.math.BigInteger;\n",
        "23": "\n",
        "24": "/**\n",
        "25": " * Tests for {@code UnsignedLong}.\n",
        "26": " *\n",
        "27": " * @author Louis Wasserman\n",
        "28": " */\n",
        "29": "@GwtCompatible(emulated = true)\n",
        "30": "public class UnsignedLongTest extends TestCase {\n",
        "31": "  private static final ImmutableSet<Long> TEST_LONGS;\n",
        "32": "  private static final ImmutableSet<BigInteger> TEST_BIG_INTEGERS;\n",
        "33": "\n",
        "34": "  static {\n",
        "35": "    ImmutableSet.Builder<Long> testLongsBuilder = ImmutableSet.builder();\n",
        "36": "    ImmutableSet.Builder<BigInteger> testBigIntegersBuilder = ImmutableSet.builder();\n",
        "37": "    for (long i = -3; i <= 3; i++) {\n",
        "38": "      testLongsBuilder\n",
        "39": "          .add(i)\n",
        "40": "          .add(Long.MAX_VALUE + i)\n",
        "41": "          .add(Long.MIN_VALUE + i)\n",
        "42": "          .add(Integer.MIN_VALUE + i)\n",
        "43": "          .add(Integer.MAX_VALUE + i);\n",
        "44": "      BigInteger bigI = BigInteger.valueOf(i);\n",
        "45": "      testBigIntegersBuilder\n",
        "46": "          .add(bigI)\n",
        "47": "          .add(BigInteger.valueOf(Long.MAX_VALUE).add(bigI))\n",
        "48": "          .add(BigInteger.valueOf(Long.MIN_VALUE).add(bigI))\n",
        "49": "          .add(BigInteger.valueOf(Integer.MAX_VALUE).add(bigI))\n",
        "50": "          .add(BigInteger.valueOf(Integer.MIN_VALUE).add(bigI))\n",
        "51": "          .add(BigInteger.ONE.shiftLeft(63).add(bigI))\n",
        "52": "          .add(BigInteger.ONE.shiftLeft(64).add(bigI));\n",
        "53": "    }\n",
        "54": "    TEST_LONGS = testLongsBuilder.build();\n",
        "55": "    TEST_BIG_INTEGERS = testBigIntegersBuilder.build();\n",
        "56": "  }\n",
        "57": "\n",
        "58": "  public void testAsUnsignedAndLongValueAreInverses() {\n",
        "59": "    for (long value : TEST_LONGS) {\n",
        "60": "      assertEquals(\n",
        "61": "          UnsignedLongs.toString(value), value, UnsignedLong.fromLongBits(value).longValue());\n",
        "62": "    }\n",
        "63": "  }\n",
        "64": "\n",
        "65": "  public void testAsUnsignedBigIntegerValue() {\n",
        "66": "    for (long value : TEST_LONGS) {\n",
        "67": "      BigInteger expected = (value >= 0)\n",
        "68": "          ? BigInteger.valueOf(value)\n",
        "69": "          : BigInteger.valueOf(value).add(BigInteger.ZERO.setBit(64));\n",
        "70": "      assertEquals(UnsignedLongs.toString(value), expected,\n",
        "71": "          UnsignedLong.fromLongBits(value).bigIntegerValue());\n",
        "72": "    }\n",
        "73": "  }\n",
        "74": "  \n",
        "75": "  public void testValueOfLong() {\n",
        "76": "    for (long value : TEST_LONGS) {\n",
        "77": "      boolean expectSuccess = value >= 0;\n",
        "78": "      try {\n",
        "79": "        assertEquals(value, UnsignedLong.valueOf(value).longValue());\n",
        "80": "        assertTrue(expectSuccess);\n",
        "81": "      } catch (IllegalArgumentException e) {\n",
        "82": "        assertFalse(expectSuccess);\n",
        "83": "      }\n",
        "84": "    }\n",
        "85": "  }\n",
        "86": "  \n",
        "87": "  public void testValueOfBigInteger() {\n",
        "88": "    BigInteger min = BigInteger.ZERO;\n",
        "89": "    BigInteger max = UnsignedLong.MAX_VALUE.bigIntegerValue();\n",
        "90": "    for (BigInteger big : TEST_BIG_INTEGERS) {\n",
        "91": "      boolean expectSuccess =\n",
        "92": "          big.compareTo(min) >= 0 && big.compareTo(max) <= 0;\n",
        "93": "      try {\n",
        "94": "        assertEquals(big, UnsignedLong.valueOf(big).bigIntegerValue());\n",
        "95": "        assertTrue(expectSuccess);\n",
        "96": "      } catch (IllegalArgumentException e) {\n",
        "97": "        assertFalse(expectSuccess);\n",
        "98": "      }\n",
        "99": "    }\n",
        "100": "  }\n",
        "101": "\n",
        "102": "  public void testToString() {\n",
        "103": "    for (long value : TEST_LONGS) {\n",
        "104": "      UnsignedLong unsignedValue = UnsignedLong.fromLongBits(value);\n",
        "105": "      assertEquals(unsignedValue.bigIntegerValue().toString(), unsignedValue.toString());\n",
        "106": "    }\n",
        "107": "  }\n",
        "108": "\n",
        "109": "  public void testToStringRadixQuick() {\n",
        "110": "    int[] radices = {2, 3, 5, 7, 10, 12, 16, 21, 31, 36};\n",
        "111": "    for (int radix : radices) {\n",
        "112": "      for (long l : TEST_LONGS) {\n",
        "113": "        UnsignedLong value = UnsignedLong.fromLongBits(l);\n",
        "114": "        assertEquals(value.bigIntegerValue().toString(radix), value.toString(radix));\n",
        "115": "      }\n",
        "116": "    }\n",
        "117": "  }\n",
        "118": "\n",
        "119": "  public void testFloatValue() {\n",
        "120": "    for (long value : TEST_LONGS) {\n",
        "121": "      UnsignedLong unsignedValue = UnsignedLong.fromLongBits(value);\n",
        "122": "      assertEquals(unsignedValue.bigIntegerValue().floatValue(), unsignedValue.floatValue());\n",
        "123": "    }\n",
        "124": "  }\n",
        "125": "\n",
        "126": "  public void testDoubleValue() {\n",
        "127": "    for (long value : TEST_LONGS) {\n",
        "128": "      UnsignedLong unsignedValue = UnsignedLong.fromLongBits(value);\n",
        "129": "      assertEquals(unsignedValue.bigIntegerValue().doubleValue(), unsignedValue.doubleValue());\n",
        "130": "    }\n",
        "131": "  }\n",
        "132": "\n",
        "133": "  public void testPlus() {\n",
        "134": "    for (long a : TEST_LONGS) {\n",
        "135": "      for (long b : TEST_LONGS) {\n",
        "136": "        UnsignedLong aUnsigned = UnsignedLong.fromLongBits(a);\n",
        "137": "        UnsignedLong bUnsigned = UnsignedLong.fromLongBits(b);\n",
        "138": "        long expected = aUnsigned\n",
        "139": "            .bigIntegerValue()\n",
        "140": "            .add(bUnsigned.bigIntegerValue())\n",
        "141": "            .longValue();\n",
        "142": "        UnsignedLong unsignedSum = aUnsigned.plus(bUnsigned);\n",
        "143": "        assertEquals(expected, unsignedSum.longValue());\n",
        "144": "      }\n",
        "145": "    }\n",
        "146": "  }\n",
        "147": "\n",
        "148": "  public void testMinus() {\n",
        "149": "    for (long a : TEST_LONGS) {\n",
        "150": "      for (long b : TEST_LONGS) {\n",
        "151": "        UnsignedLong aUnsigned = UnsignedLong.fromLongBits(a);\n",
        "152": "        UnsignedLong bUnsigned = UnsignedLong.fromLongBits(b);\n",
        "153": "        long expected = aUnsigned\n",
        "154": "            .bigIntegerValue()\n",
        "155": "            .subtract(bUnsigned.bigIntegerValue())\n",
        "156": "            .longValue();\n",
        "157": "        UnsignedLong unsignedSub = aUnsigned.minus(bUnsigned);\n",
        "158": "        assertEquals(expected, unsignedSub.longValue());\n",
        "159": "      }\n",
        "160": "    }\n",
        "161": "  }\n",
        "162": "\n",
        "163": "  public void testTimes() {\n",
        "164": "    for (long a : TEST_LONGS) {\n",
        "165": "      for (long b : TEST_LONGS) {\n",
        "166": "        UnsignedLong aUnsigned = UnsignedLong.fromLongBits(a);\n",
        "167": "        UnsignedLong bUnsigned = UnsignedLong.fromLongBits(b);\n",
        "168": "        long expected = aUnsigned\n",
        "169": "            .bigIntegerValue()\n",
        "170": "            .multiply(bUnsigned.bigIntegerValue())\n",
        "171": "            .longValue();\n",
        "172": "        UnsignedLong unsignedMul = aUnsigned.times(bUnsigned);\n",
        "173": "        assertEquals(expected, unsignedMul.longValue());\n",
        "174": "      }\n",
        "175": "    }\n",
        "176": "  }\n",
        "177": "\n",
        "178": "  public void testDividedBy() {\n",
        "179": "    for (long a : TEST_LONGS) {\n",
        "180": "      for (long b : TEST_LONGS) {\n",
        "181": "        if (b != 0) {\n",
        "182": "          UnsignedLong aUnsigned = UnsignedLong.fromLongBits(a);\n",
        "183": "          UnsignedLong bUnsigned = UnsignedLong.fromLongBits(b);\n",
        "184": "          long expected = aUnsigned\n",
        "185": "              .bigIntegerValue()\n",
        "186": "              .divide(bUnsigned.bigIntegerValue())\n",
        "187": "              .longValue();\n",
        "188": "          UnsignedLong unsignedDiv = aUnsigned.dividedBy(bUnsigned);\n",
        "189": "          assertEquals(expected, unsignedDiv.longValue());\n",
        "190": "        }\n",
        "191": "      }\n",
        "192": "    }\n",
        "193": "  }\n",
        "194": "\n",
        "195": "  @SuppressWarnings(\"ReturnValueIgnored\")\n",
        "196": "  public void testDivideByZeroThrows() {\n",
        "197": "    for (long a : TEST_LONGS) {\n",
        "198": "      try {\n",
        "199": "        UnsignedLong.fromLongBits(a).dividedBy(UnsignedLong.ZERO);\n",
        "200": "        fail(\"Expected ArithmeticException\");\n",
        "201": "      } catch (ArithmeticException expected) {}\n",
        "202": "    }\n",
        "203": "  }\n",
        "204": "\n",
        "205": "  public void testMod() {\n",
        "206": "    for (long a : TEST_LONGS) {\n",
        "207": "      for (long b : TEST_LONGS) {\n",
        "208": "        if (b != 0) {\n",
        "209": "          UnsignedLong aUnsigned = UnsignedLong.fromLongBits(a);\n",
        "210": "          UnsignedLong bUnsigned = UnsignedLong.fromLongBits(b);\n",
        "211": "          long expected = aUnsigned\n",
        "212": "              .bigIntegerValue()\n",
        "213": "              .remainder(bUnsigned.bigIntegerValue())\n",
        "214": "              .longValue();\n",
        "215": "          UnsignedLong unsignedRem = aUnsigned.mod(bUnsigned);\n",
        "216": "          assertEquals(expected, unsignedRem.longValue());\n",
        "217": "        }\n",
        "218": "      }\n",
        "219": "    }\n",
        "220": "  }\n",
        "221": "\n",
        "222": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "223": "  public void testModByZero() {\n",
        "224": "    for (long a : TEST_LONGS) {\n",
        "225": "      try {\n",
        "226": "        UnsignedLong.fromLongBits(a).mod(UnsignedLong.ZERO);\n",
        "227": "        fail(\"Expected ArithmeticException\");\n",
        "228": "      } catch (ArithmeticException expected) {}\n",
        "229": "    }\n",
        "230": "  }\n",
        "231": "\n",
        "232": "  public void testCompare() {\n",
        "233": "    for (long a : TEST_LONGS) {\n",
        "234": "      for (long b : TEST_LONGS) {\n",
        "235": "        UnsignedLong aUnsigned = UnsignedLong.fromLongBits(a);\n",
        "236": "        UnsignedLong bUnsigned = UnsignedLong.fromLongBits(b);\n",
        "237": "        assertEquals(aUnsigned.bigIntegerValue().compareTo(bUnsigned.bigIntegerValue()),\n",
        "238": "            aUnsigned.compareTo(bUnsigned));\n",
        "239": "      }\n",
        "240": "    }\n",
        "241": "  }\n",
        "242": "\n",
        "243": "  public void testIntValue() {\n",
        "244": "    for (long a : TEST_LONGS) {\n",
        "245": "      UnsignedLong aUnsigned = UnsignedLong.fromLongBits(a);\n",
        "246": "      int intValue = aUnsigned.bigIntegerValue().intValue();\n",
        "247": "      assertEquals(intValue, aUnsigned.intValue());\n",
        "248": "    }\n",
        "249": "  }\n",
        "250": "}\n",
        "251": "\n"
    }
}