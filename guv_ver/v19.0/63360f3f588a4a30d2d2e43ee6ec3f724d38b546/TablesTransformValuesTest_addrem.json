{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2011 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.base.Function;\n",
        "23": "\n",
        "24": "/**\n",
        "25": " * Test cases for {@link Tables#transformValues}.\n",
        "26": " *\n",
        "27": " * @author Jared Levy\n",
        "28": " */\n",
        "29": "@GwtCompatible(emulated = true)\n",
        "30": "public class TablesTransformValuesTest extends AbstractTableTest {\n",
        "31": "\n",
        "32": "  private static final Function<String, Character> FIRST_CHARACTER\n",
        "33": "    = new Function<String, Character>() {\n",
        "34": "      @Override public Character apply(String input) {\n",
        "35": "        return input == null ? null : input.charAt(0);\n",
        "36": "      }\n",
        "37": "  };\n",
        "38": "\n",
        "39": "  @Override protected Table<String, Integer, Character> create(\n",
        "40": "      Object... data) {\n",
        "41": "    Table<String, Integer, String> table = HashBasedTable.create();\n",
        "42": "    checkArgument(data.length % 3 == 0);\n",
        "43": "    for (int i = 0; i < data.length; i += 3) {\n",
        "44": "      String value =\n",
        "45": "          (data[i + 2] == null) ? null : (data[i + 2] + \"transformed\");\n",
        "46": "      table.put((String) data[i], (Integer) data[i + 1], value);\n",
        "47": "    }\n",
        "48": "    return Tables.transformValues(table, FIRST_CHARACTER);\n",
        "49": "  }\n",
        "50": "\n",
        "51": "  // Null support depends on the underlying table and function.\n",
        "52": "\n",
        "53": "  // put() and putAll() aren't supported.\n",
        "54": "  @Override public void testPut() {\n",
        "55": "    try {\n",
        "56": "      table.put(\"foo\", 1, 'a');\n",
        "57": "      fail(\"Expected UnsupportedOperationException\");\n",
        "58": "    } catch (UnsupportedOperationException expected) {}\n",
        "59": "    assertSize(0);\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  @Override public void testPutAllTable() {\n",
        "63": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "64": "    Table<String, Integer, Character> other = HashBasedTable.create();\n",
        "65": "    other.put(\"foo\", 1, 'd');\n",
        "66": "    other.put(\"bar\", 2, 'e');\n",
        "67": "    other.put(\"cat\", 2, 'f');\n",
        "68": "    try {\n",
        "69": "      table.putAll(other);\n",
        "70": "      fail(\"Expected UnsupportedOperationException\");\n",
        "71": "    } catch (UnsupportedOperationException expected) {}\n",
        "72": "    assertEquals((Character) 'a', table.get(\"foo\", 1));\n",
        "73": "    assertEquals((Character) 'b', table.get(\"bar\", 1));\n",
        "74": "    assertEquals((Character) 'c', table.get(\"foo\", 3));\n",
        "75": "    assertSize(3);\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  @Override public void testPutNull() {}\n",
        "79": "  @Override public void testPutNullReplace() {}\n",
        "80": "  @Override public void testRowClearAndPut() {}\n",
        "81": "}\n",
        "82": "\n"
    }
}