{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2011 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n",
        "5": " * use this file except in compliance with the License. You may obtain a copy of\n",
        "6": " * the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n",
        "12": " * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n",
        "13": " * License for the specific language governing permissions and limitations under\n",
        "14": " * the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.BoundType.CLOSED;\n",
        "20": "import static com.google.common.collect.BoundType.OPEN;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import com.google.common.collect.Multiset.Entry;\n",
        "24": "import com.google.j2objc.annotations.Weak;\n",
        "25": "\n",
        "26": "import java.util.Comparator;\n",
        "27": "import java.util.NoSuchElementException;\n",
        "28": "import java.util.SortedSet;\n",
        "29": "\n",
        "30": "import javax.annotation.Nullable;\n",
        "31": "\n",
        "32": "/**\n",
        "33": " * Provides static utility methods for creating and working with\n",
        "34": " * {@link SortedMultiset} instances.\n",
        "35": " *\n",
        "36": " * @author Louis Wasserman\n",
        "37": " */\n",
        "38": "@GwtCompatible(emulated = true)\n",
        "39": "final class SortedMultisets {\n",
        "40": "  private SortedMultisets() {}\n",
        "41": "\n",
        "42": "  /**\n",
        "43": "   * A skeleton implementation for {@link SortedMultiset#elementSet}.\n",
        "44": "   */\n",
        "45": "  static class ElementSet<E> extends Multisets.ElementSet<E> implements SortedSet<E> {\n",
        "46": "    @Weak private final SortedMultiset<E> multiset;\n",
        "47": "\n",
        "48": "    ElementSet(SortedMultiset<E> multiset) {\n",
        "49": "      this.multiset = multiset;\n",
        "50": "    }\n",
        "51": "\n",
        "52": "    @Override\n",
        "53": "    final SortedMultiset<E> multiset() {\n",
        "54": "      return multiset;\n",
        "55": "    }\n",
        "56": "\n",
        "57": "    @Override\n",
        "58": "    public Comparator<? super E> comparator() {\n",
        "59": "      return multiset().comparator();\n",
        "60": "    }\n",
        "61": "\n",
        "62": "    @Override\n",
        "63": "    public SortedSet<E> subSet(E fromElement, E toElement) {\n",
        "64": "      return multiset().subMultiset(fromElement, CLOSED, toElement, OPEN).elementSet();\n",
        "65": "    }\n",
        "66": "\n",
        "67": "    @Override\n",
        "68": "    public SortedSet<E> headSet(E toElement) {\n",
        "69": "      return multiset().headMultiset(toElement, OPEN).elementSet();\n",
        "70": "    }\n",
        "71": "\n",
        "72": "    @Override\n",
        "73": "    public SortedSet<E> tailSet(E fromElement) {\n",
        "74": "      return multiset().tailMultiset(fromElement, CLOSED).elementSet();\n",
        "75": "    }\n",
        "76": "\n",
        "77": "    @Override\n",
        "78": "    public E first() {\n",
        "79": "      return getElementOrThrow(multiset().firstEntry());\n",
        "80": "    }\n",
        "81": "\n",
        "82": "    @Override\n",
        "83": "    public E last() {\n",
        "84": "      return getElementOrThrow(multiset().lastEntry());\n",
        "85": "    }\n",
        "86": "  }\n",
        "87": "\n",
        "88": "  private static <E> E getElementOrThrow(Entry<E> entry) {\n",
        "89": "    if (entry == null) {\n",
        "90": "      throw new NoSuchElementException();\n",
        "91": "    }\n",
        "92": "    return entry.getElement();\n",
        "93": "  }\n",
        "94": "\n",
        "95": "  private static <E> E getElementOrNull(@Nullable Entry<E> entry) {\n",
        "96": "    return (entry == null) ? null : entry.getElement();\n",
        "97": "  }\n",
        "98": "}\n",
        "99": "\n"
    }
}