{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2011 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.net;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Charsets.UTF_8;\n",
        "20": "import static com.google.common.net.MediaType.ANY_APPLICATION_TYPE;\n",
        "21": "import static com.google.common.net.MediaType.ANY_AUDIO_TYPE;\n",
        "22": "import static com.google.common.net.MediaType.ANY_IMAGE_TYPE;\n",
        "23": "import static com.google.common.net.MediaType.ANY_TEXT_TYPE;\n",
        "24": "import static com.google.common.net.MediaType.ANY_TYPE;\n",
        "25": "import static com.google.common.net.MediaType.ANY_VIDEO_TYPE;\n",
        "26": "import static com.google.common.net.MediaType.HTML_UTF_8;\n",
        "27": "import static com.google.common.net.MediaType.JPEG;\n",
        "28": "import static com.google.common.net.MediaType.PLAIN_TEXT_UTF_8;\n",
        "29": "import static com.google.common.truth.Truth.assertThat;\n",
        "30": "\n",
        "31": "import com.google.common.annotations.GwtCompatible;\n",
        "32": "import com.google.common.collect.ImmutableListMultimap;\n",
        "33": "import com.google.common.collect.ImmutableMultimap;\n",
        "34": "import com.google.common.testing.EqualsTester;\n",
        "35": "\n",
        "36": "import junit.framework.TestCase;\n",
        "37": "\n",
        "38": "import java.nio.charset.IllegalCharsetNameException;\n",
        "39": "import java.nio.charset.UnsupportedCharsetException;\n",
        "40": "\n",
        "41": "/**\n",
        "42": " * Tests for {@link MediaType}.\n",
        "43": " *\n",
        "44": " * @author Gregory Kick\n",
        "45": " */\n",
        "46": "@GwtCompatible(emulated = true)\n",
        "47": "public class MediaTypeTest extends TestCase {\n",
        "48": "\n",
        "49": "  public void testCreate_invalidType() {\n",
        "50": "    try {\n",
        "51": "      MediaType.create(\"te><t\", \"plaintext\");\n",
        "52": "      fail();\n",
        "53": "    } catch (IllegalArgumentException expected) {}\n",
        "54": "  }\n",
        "55": "\n",
        "56": "  public void testCreate_invalidSubtype() {\n",
        "57": "    try {\n",
        "58": "      MediaType.create(\"text\", \"pl@intext\");\n",
        "59": "      fail();\n",
        "60": "    } catch (IllegalArgumentException expected) {}\n",
        "61": "  }\n",
        "62": "\n",
        "63": "  public void testCreate_wildcardTypeDeclaredSubtype() {\n",
        "64": "    try {\n",
        "65": "      MediaType.create(\"*\", \"text\");\n",
        "66": "      fail();\n",
        "67": "    } catch (IllegalArgumentException expected) {}\n",
        "68": "  }\n",
        "69": "\n",
        "70": "  public void testCreateApplicationType() {\n",
        "71": "    MediaType newType = MediaType.createApplicationType(\"yams\");\n",
        "72": "    assertEquals(\"application\", newType.type());\n",
        "73": "    assertEquals(\"yams\", newType.subtype());\n",
        "74": "  }\n",
        "75": "\n",
        "76": "  public void testCreateAudioType() {\n",
        "77": "    MediaType newType = MediaType.createAudioType(\"yams\");\n",
        "78": "    assertEquals(\"audio\", newType.type());\n",
        "79": "    assertEquals(\"yams\", newType.subtype());\n",
        "80": "  }\n",
        "81": "\n",
        "82": "  public void testCreateImageType() {\n",
        "83": "    MediaType newType = MediaType.createImageType(\"yams\");\n",
        "84": "    assertEquals(\"image\", newType.type());\n",
        "85": "    assertEquals(\"yams\", newType.subtype());\n",
        "86": "  }\n",
        "87": "\n",
        "88": "  public void testCreateTextType() {\n",
        "89": "    MediaType newType = MediaType.createTextType(\"yams\");\n",
        "90": "    assertEquals(\"text\", newType.type());\n",
        "91": "    assertEquals(\"yams\", newType.subtype());\n",
        "92": "  }\n",
        "93": "\n",
        "94": "  public void testCreateVideoType() {\n",
        "95": "    MediaType newType = MediaType.createVideoType(\"yams\");\n",
        "96": "    assertEquals(\"video\", newType.type());\n",
        "97": "    assertEquals(\"yams\", newType.subtype());\n",
        "98": "  }\n",
        "99": "\n",
        "100": "  public void testGetType() {\n",
        "101": "    assertEquals(\"text\", MediaType.parse(\"text/plain\").type());\n",
        "102": "    assertEquals(\"application\",\n",
        "103": "        MediaType.parse(\"application/atom+xml; charset=utf-8\").type());\n",
        "104": "  }\n",
        "105": "\n",
        "106": "  public void testGetSubtype() {\n",
        "107": "    assertEquals(\"plain\", MediaType.parse(\"text/plain\").subtype());\n",
        "108": "    assertEquals(\"atom+xml\",\n",
        "109": "        MediaType.parse(\"application/atom+xml; charset=utf-8\").subtype());\n",
        "110": "  }\n",
        "111": "\n",
        "112": "  private static final ImmutableListMultimap<String, String> PARAMETERS =\n",
        "113": "      ImmutableListMultimap.of(\"a\", \"1\", \"a\", \"2\", \"b\", \"3\");\n",
        "114": "\n",
        "115": "  public void testGetParameters() {\n",
        "116": "    assertEquals(ImmutableListMultimap.of(), MediaType.parse(\"text/plain\").parameters());\n",
        "117": "    assertEquals(ImmutableListMultimap.of(\"charset\", \"utf-8\"),\n",
        "118": "        MediaType.parse(\"application/atom+xml; charset=utf-8\").parameters());\n",
        "119": "    assertEquals(PARAMETERS,\n",
        "120": "        MediaType.parse(\"application/atom+xml; a=1; a=2; b=3\").parameters());\n",
        "121": "  }\n",
        "122": "\n",
        "123": "  public void testWithoutParameters() {\n",
        "124": "    assertSame(MediaType.parse(\"image/gif\"),\n",
        "125": "        MediaType.parse(\"image/gif\").withoutParameters());\n",
        "126": "    assertEquals(MediaType.parse(\"image/gif\"),\n",
        "127": "        MediaType.parse(\"image/gif; foo=bar\").withoutParameters());\n",
        "128": "  }\n",
        "129": "\n",
        "130": "  public void testWithParameters() {\n",
        "131": "    assertEquals(MediaType.parse(\"text/plain; a=1; a=2; b=3\"),\n",
        "132": "        MediaType.parse(\"text/plain\").withParameters(PARAMETERS));\n",
        "133": "    assertEquals(MediaType.parse(\"text/plain; a=1; a=2; b=3\"),\n",
        "134": "        MediaType.parse(\"text/plain; a=1; a=2; b=3\").withParameters(PARAMETERS));\n",
        "135": "  }\n",
        "136": "\n",
        "137": "  public void testWithParameters_invalidAttribute() {\n",
        "138": "    MediaType mediaType = MediaType.parse(\"text/plain\");\n",
        "139": "    ImmutableListMultimap<String, String> parameters =\n",
        "140": "        ImmutableListMultimap.of(\"a\", \"1\", \"@\", \"2\", \"b\", \"3\");\n",
        "141": "    try {\n",
        "142": "      mediaType.withParameters(parameters);\n",
        "143": "      fail();\n",
        "144": "    } catch (IllegalArgumentException expected) {}\n",
        "145": "  }\n",
        "146": "\n",
        "147": "  public void testWithParameter() {\n",
        "148": "    assertEquals(MediaType.parse(\"text/plain; a=1\"),\n",
        "149": "        MediaType.parse(\"text/plain\").withParameter(\"a\", \"1\"));\n",
        "150": "    assertEquals(MediaType.parse(\"text/plain; a=1\"),\n",
        "151": "        MediaType.parse(\"text/plain; a=1; a=2\").withParameter(\"a\", \"1\"));\n",
        "152": "    assertEquals(MediaType.parse(\"text/plain; a=3\"),\n",
        "153": "        MediaType.parse(\"text/plain; a=1; a=2\").withParameter(\"a\", \"3\"));\n",
        "154": "    assertEquals(MediaType.parse(\"text/plain; a=1; a=2; b=3\"),\n",
        "155": "        MediaType.parse(\"text/plain; a=1; a=2\").withParameter(\"b\", \"3\"));\n",
        "156": "  }\n",
        "157": "\n",
        "158": "  public void testWithParameter_invalidAttribute() {\n",
        "159": "    MediaType mediaType = MediaType.parse(\"text/plain\");\n",
        "160": "    try {\n",
        "161": "      mediaType.withParameter(\"@\", \"2\");\n",
        "162": "      fail();\n",
        "163": "    } catch (IllegalArgumentException expected) {}\n",
        "164": "  }\n",
        "165": "\n",
        "166": "  public void testWithCharset() {\n",
        "167": "    assertEquals(MediaType.parse(\"text/plain; charset=utf-8\"),\n",
        "168": "        MediaType.parse(\"text/plain\").withCharset(UTF_8));\n",
        "169": "    assertEquals(MediaType.parse(\"text/plain; charset=utf-8\"),\n",
        "170": "        MediaType.parse(\"text/plain; charset=utf-16\").withCharset(UTF_8));\n",
        "171": "  }\n",
        "172": "\n",
        "173": "  public void testHasWildcard() {\n",
        "174": "    assertFalse(PLAIN_TEXT_UTF_8.hasWildcard());\n",
        "175": "    assertFalse(JPEG.hasWildcard());\n",
        "176": "    assertTrue(ANY_TYPE.hasWildcard());\n",
        "177": "    assertTrue(ANY_APPLICATION_TYPE.hasWildcard());\n",
        "178": "    assertTrue(ANY_AUDIO_TYPE.hasWildcard());\n",
        "179": "    assertTrue(ANY_IMAGE_TYPE.hasWildcard());\n",
        "180": "    assertTrue(ANY_TEXT_TYPE.hasWildcard());\n",
        "181": "    assertTrue(ANY_VIDEO_TYPE.hasWildcard());\n",
        "182": "  }\n",
        "183": "\n",
        "184": "  public void testIs() {\n",
        "185": "    assertTrue(PLAIN_TEXT_UTF_8.is(ANY_TYPE));\n",
        "186": "    assertTrue(JPEG.is(ANY_TYPE));\n",
        "187": "    assertTrue(ANY_TEXT_TYPE.is(ANY_TYPE));\n",
        "188": "    assertTrue(PLAIN_TEXT_UTF_8.is(ANY_TEXT_TYPE));\n",
        "189": "    assertTrue(PLAIN_TEXT_UTF_8.withoutParameters().is(ANY_TEXT_TYPE));\n",
        "190": "    assertFalse(JPEG.is(ANY_TEXT_TYPE));\n",
        "191": "    assertTrue(PLAIN_TEXT_UTF_8.is(PLAIN_TEXT_UTF_8));\n",
        "192": "    assertTrue(PLAIN_TEXT_UTF_8.is(PLAIN_TEXT_UTF_8.withoutParameters()));\n",
        "193": "    assertFalse(PLAIN_TEXT_UTF_8.withoutParameters().is(PLAIN_TEXT_UTF_8));\n",
        "194": "    assertFalse(PLAIN_TEXT_UTF_8.is(HTML_UTF_8));\n",
        "195": "    assertFalse(PLAIN_TEXT_UTF_8.withParameter(\"charset\", \"UTF-16\").is(PLAIN_TEXT_UTF_8));\n",
        "196": "    assertFalse(PLAIN_TEXT_UTF_8.is(PLAIN_TEXT_UTF_8.withParameter(\"charset\", \"UTF-16\")));\n",
        "197": "  }\n",
        "198": "\n",
        "199": "  public void testParse_empty() {\n",
        "200": "    try {\n",
        "201": "      MediaType.parse(\"\");\n",
        "202": "      fail();\n",
        "203": "    } catch (IllegalArgumentException expected) {}\n",
        "204": "  }\n",
        "205": "\n",
        "206": "  public void testParse_badInput() {\n",
        "207": "    try {\n",
        "208": "      MediaType.parse(\"/\");\n",
        "209": "      fail();\n",
        "210": "    } catch (IllegalArgumentException expected) {}\n",
        "211": "    try {\n",
        "212": "      MediaType.parse(\"text\");\n",
        "213": "      fail();\n",
        "214": "    } catch (IllegalArgumentException expected) {}\n",
        "215": "    try {\n",
        "216": "      MediaType.parse(\"text/\");\n",
        "217": "      fail();\n",
        "218": "    } catch (IllegalArgumentException expected) {}\n",
        "219": "    try {\n",
        "220": "      MediaType.parse(\"te<t/plain\");\n",
        "221": "      fail();\n",
        "222": "    } catch (IllegalArgumentException expected) {}\n",
        "223": "    try {\n",
        "224": "      MediaType.parse(\"text/pl@in\");\n",
        "225": "      fail();\n",
        "226": "    } catch (IllegalArgumentException expected) {}\n",
        "227": "    try {\n",
        "228": "      MediaType.parse(\"text/plain;\");\n",
        "229": "      fail();\n",
        "230": "    } catch (IllegalArgumentException expected) {}\n",
        "231": "    try {\n",
        "232": "      MediaType.parse(\"text/plain; \");\n",
        "233": "      fail();\n",
        "234": "    } catch (IllegalArgumentException expected) {}\n",
        "235": "    try {\n",
        "236": "      MediaType.parse(\"text/plain; a\");\n",
        "237": "      fail();\n",
        "238": "    } catch (IllegalArgumentException expected) {}\n",
        "239": "    try {\n",
        "240": "      MediaType.parse(\"text/plain; a=\");\n",
        "241": "      fail();\n",
        "242": "    } catch (IllegalArgumentException expected) {}\n",
        "243": "    try {\n",
        "244": "      MediaType.parse(\"text/plain; a=@\");\n",
        "245": "      fail();\n",
        "246": "    } catch (IllegalArgumentException expected) {}\n",
        "247": "    try {\n",
        "248": "      MediaType.parse(\"text/plain; a=\\\"@\");\n",
        "249": "      fail();\n",
        "250": "    } catch (IllegalArgumentException expected) {}\n",
        "251": "    try {\n",
        "252": "      MediaType.parse(\"text/plain; a=1;\");\n",
        "253": "      fail();\n",
        "254": "    } catch (IllegalArgumentException expected) {}\n",
        "255": "    try {\n",
        "256": "      MediaType.parse(\"text/plain; a=1; \");\n",
        "257": "      fail();\n",
        "258": "    } catch (IllegalArgumentException expected) {}\n",
        "259": "    try {\n",
        "260": "      MediaType.parse(\"text/plain; a=1; b\");\n",
        "261": "      fail();\n",
        "262": "    } catch (IllegalArgumentException expected) {}\n",
        "263": "    try {\n",
        "264": "      MediaType.parse(\"text/plain; a=1; b=\");\n",
        "265": "      fail();\n",
        "266": "    } catch (IllegalArgumentException expected) {}\n",
        "267": "    try {\n",
        "268": "      MediaType.parse(\"text/plain; a=\\u2025\");\n",
        "269": "      fail();\n",
        "270": "    } catch (IllegalArgumentException expected) {}\n",
        "271": "  }\n",
        "272": "\n",
        "273": "  public void testGetCharset() {\n",
        "274": "    assertThat(MediaType.parse(\"text/plain\").charset()).isAbsent();\n",
        "275": "    assertThat(MediaType.parse(\"text/plain; charset=utf-8\").charset()).hasValue(UTF_8);\n",
        "276": "  }\n",
        "277": "\n",
        "278": "  public void testGetCharset_tooMany() {\n",
        "279": "    MediaType mediaType = MediaType.parse(\"text/plain; charset=utf-8; charset=utf-16\");\n",
        "280": "    try {\n",
        "281": "      mediaType.charset();\n",
        "282": "      fail();\n",
        "283": "    } catch (IllegalStateException expected) {}\n",
        "284": "  }\n",
        "285": "\n",
        "286": "  public void testGetCharset_illegalCharset() {\n",
        "287": "    MediaType mediaType = MediaType.parse(\n",
        "288": "        \"text/plain; charset=\\\"!@#$%^&*()\\\"\");\n",
        "289": "    try {\n",
        "290": "      mediaType.charset();\n",
        "291": "      fail();\n",
        "292": "    } catch (IllegalCharsetNameException expected) {}\n",
        "293": "  }\n",
        "294": "\n",
        "295": "  public void testGetCharset_unsupportedCharset() {\n",
        "296": "    MediaType mediaType = MediaType.parse(\n",
        "297": "        \"text/plain; charset=utf-wtf\");\n",
        "298": "    try {\n",
        "299": "      mediaType.charset();\n",
        "300": "      fail();\n",
        "301": "    } catch (UnsupportedCharsetException expected) {}\n",
        "302": "  }\n",
        "303": "\n",
        "304": "  public void testEquals() {\n",
        "305": "    new EqualsTester()\n",
        "306": "        .addEqualityGroup(MediaType.create(\"text\", \"plain\"),\n",
        "307": "            MediaType.create(\"TEXT\", \"PLAIN\"),\n",
        "308": "            MediaType.parse(\"text/plain\"),\n",
        "309": "            MediaType.parse(\"TEXT/PLAIN\"),\n",
        "310": "            MediaType.create(\"text\", \"plain\").withParameter(\"a\", \"1\").withoutParameters())\n",
        "311": "        .addEqualityGroup(\n",
        "312": "            MediaType.create(\"text\", \"plain\").withCharset(UTF_8),\n",
        "313": "            MediaType.create(\"text\", \"plain\").withParameter(\"CHARSET\", \"UTF-8\"),\n",
        "314": "            MediaType.create(\"text\", \"plain\").withParameters(\n",
        "315": "                ImmutableMultimap.of(\"charset\", \"utf-8\")),\n",
        "316": "            MediaType.parse(\"text/plain;charset=utf-8\"),\n",
        "317": "            MediaType.parse(\"text/plain; charset=utf-8\"),\n",
        "318": "            MediaType.parse(\"text/plain;  charset=utf-8\"),\n",
        "319": "            MediaType.parse(\"text/plain; \\tcharset=utf-8\"),\n",
        "320": "            MediaType.parse(\"text/plain; \\r\\n\\tcharset=utf-8\"),\n",
        "321": "            MediaType.parse(\"text/plain; CHARSET=utf-8\"),\n",
        "322": "            MediaType.parse(\"text/plain; charset=\\\"utf-8\\\"\"),\n",
        "323": "            MediaType.parse(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\"),\n",
        "324": "            MediaType.parse(\"text/plain; charset=UTF-8\"))\n",
        "325": "        .addEqualityGroup(MediaType.parse(\"text/plain; charset=utf-8; charset=utf-8\"))\n",
        "326": "        .addEqualityGroup(MediaType.create(\"text\", \"plain\").withParameter(\"a\", \"value\"),\n",
        "327": "            MediaType.create(\"text\", \"plain\").withParameter(\"A\", \"value\"))\n",
        "328": "        .addEqualityGroup(MediaType.create(\"text\", \"plain\").withParameter(\"a\", \"VALUE\"),\n",
        "329": "            MediaType.create(\"text\", \"plain\").withParameter(\"A\", \"VALUE\"))\n",
        "330": "        .addEqualityGroup(\n",
        "331": "            MediaType.create(\"text\", \"plain\")\n",
        "332": "                .withParameters(ImmutableListMultimap.of(\"a\", \"1\", \"a\", \"2\")),\n",
        "333": "            MediaType.create(\"text\", \"plain\")\n",
        "334": "                .withParameters(ImmutableListMultimap.of(\"a\", \"2\", \"a\", \"1\")))\n",
        "335": "        .addEqualityGroup(MediaType.create(\"text\", \"csv\"))\n",
        "336": "        .addEqualityGroup(MediaType.create(\"application\", \"atom+xml\"))\n",
        "337": "        .testEquals();\n",
        "338": "  }\n",
        "339": "\n",
        "340": "  public void testToString() {\n",
        "341": "    assertEquals(\"text/plain\", MediaType.create(\"text\", \"plain\").toString());\n",
        "342": "    assertEquals(\"text/plain; something=\\\"cr@zy\\\"; something-else=\\\"crazy with spaces\\\"\",\n",
        "343": "        MediaType.create(\"text\", \"plain\")\n",
        "344": "            .withParameter(\"something\", \"cr@zy\")\n",
        "345": "            .withParameter(\"something-else\", \"crazy with spaces\")\n",
        "346": "            .toString());\n",
        "347": "  }\n",
        "348": "}\n",
        "349": "\n"
    }
}