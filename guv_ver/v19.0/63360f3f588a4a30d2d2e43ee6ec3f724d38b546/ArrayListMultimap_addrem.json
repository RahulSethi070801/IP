{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.CollectPreconditions.checkNonnegative;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.annotations.VisibleForTesting;\n",
        "23": "\n",
        "24": "import java.util.ArrayList;\n",
        "25": "import java.util.Collection;\n",
        "26": "import java.util.HashMap;\n",
        "27": "import java.util.List;\n",
        "28": "\n",
        "29": "/**\n",
        "30": " * Implementation of {@code Multimap} that uses an {@code ArrayList} to store\n",
        "31": " * the values for a given key. A {@link HashMap} associates each key with an\n",
        "32": " * {@link ArrayList} of values.\n",
        "33": " *\n",
        "34": " * <p>When iterating through the collections supplied by this class, the\n",
        "35": " * ordering of values for a given key agrees with the order in which the values\n",
        "36": " * were added.\n",
        "37": " *\n",
        "38": " * <p>This multimap allows duplicate key-value pairs. After adding a new\n",
        "39": " * key-value pair equal to an existing key-value pair, the {@code\n",
        "40": " * ArrayListMultimap} will contain entries for both the new value and the old\n",
        "41": " * value.\n",
        "42": " *\n",
        "43": " * <p>Keys and values may be null. All optional multimap methods are supported,\n",
        "44": " * and all returned views are modifiable.\n",
        "45": " *\n",
        "46": " * <p>The lists returned by {@link #get}, {@link #removeAll}, and {@link\n",
        "47": " * #replaceValues} all implement {@link java.util.RandomAccess}.\n",
        "48": " *\n",
        "49": " * <p>This class is not threadsafe when any concurrent operations update the\n",
        "50": " * multimap. Concurrent read operations will work correctly. To allow concurrent\n",
        "51": " * update operations, wrap your multimap with a call to {@link\n",
        "52": " * Multimaps#synchronizedListMultimap}.\n",
        "53": " *\n",
        "54": " * <p>See the Guava User Guide article on <a href=\n",
        "55": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap\">\n",
        "56": " * {@code Multimap}</a>.\n",
        "57": " *\n",
        "58": " * @author Jared Levy\n",
        "59": " * @since 2.0\n",
        "60": " */\n",
        "61": "@GwtCompatible(serializable = true, emulated = true)\n",
        "62": "public final class ArrayListMultimap<K, V> extends AbstractListMultimap<K, V> {\n",
        "63": "  // Default from ArrayList\n",
        "64": "  private static final int DEFAULT_VALUES_PER_KEY = 3;\n",
        "65": "\n",
        "66": "  @VisibleForTesting transient int expectedValuesPerKey;\n",
        "67": "\n",
        "68": "  /**\n",
        "69": "   * Creates a new, empty {@code ArrayListMultimap} with the default initial\n",
        "70": "   * capacities.\n",
        "71": "   */\n",
        "72": "  public static <K, V> ArrayListMultimap<K, V> create() {\n",
        "73": "    return new ArrayListMultimap<K, V>();\n",
        "74": "  }\n",
        "75": "\n",
        "76": "  /**\n",
        "77": "   * Constructs an empty {@code ArrayListMultimap} with enough capacity to hold\n",
        "78": "   * the specified numbers of keys and values without resizing.\n",
        "79": "   *\n",
        "80": "   * @param expectedKeys the expected number of distinct keys\n",
        "81": "   * @param expectedValuesPerKey the expected average number of values per key\n",
        "82": "   * @throws IllegalArgumentException if {@code expectedKeys} or {@code\n",
        "83": "   *      expectedValuesPerKey} is negative\n",
        "84": "   */\n",
        "85": "  public static <K, V> ArrayListMultimap<K, V> create(int expectedKeys, int expectedValuesPerKey) {\n",
        "86": "    return new ArrayListMultimap<K, V>(expectedKeys, expectedValuesPerKey);\n",
        "87": "  }\n",
        "88": "\n",
        "89": "  /**\n",
        "90": "   * Constructs an {@code ArrayListMultimap} with the same mappings as the\n",
        "91": "   * specified multimap.\n",
        "92": "   *\n",
        "93": "   * @param multimap the multimap whose contents are copied to this multimap\n",
        "94": "   */\n",
        "95": "  public static <K, V> ArrayListMultimap<K, V> create(Multimap<? extends K, ? extends V> multimap) {\n",
        "96": "    return new ArrayListMultimap<K, V>(multimap);\n",
        "97": "  }\n",
        "98": "\n",
        "99": "  private ArrayListMultimap() {\n",
        "100": "    super(new HashMap<K, Collection<V>>());\n",
        "101": "    expectedValuesPerKey = DEFAULT_VALUES_PER_KEY;\n",
        "102": "  }\n",
        "103": "\n",
        "104": "  private ArrayListMultimap(int expectedKeys, int expectedValuesPerKey) {\n",
        "105": "    super(Maps.<K, Collection<V>>newHashMapWithExpectedSize(expectedKeys));\n",
        "106": "    checkNonnegative(expectedValuesPerKey, \"expectedValuesPerKey\");\n",
        "107": "    this.expectedValuesPerKey = expectedValuesPerKey;\n",
        "108": "  }\n",
        "109": "\n",
        "110": "  private ArrayListMultimap(Multimap<? extends K, ? extends V> multimap) {\n",
        "111": "    this(\n",
        "112": "        multimap.keySet().size(),\n",
        "113": "        (multimap instanceof ArrayListMultimap)\n",
        "114": "            ? ((ArrayListMultimap<?, ?>) multimap).expectedValuesPerKey\n",
        "115": "            : DEFAULT_VALUES_PER_KEY);\n",
        "116": "    putAll(multimap);\n",
        "117": "  }\n",
        "118": "\n",
        "119": "  /**\n",
        "120": "   * Creates a new, empty {@code ArrayList} to hold the collection of values for\n",
        "121": "   * an arbitrary key.\n",
        "122": "   */\n",
        "123": "  @Override\n",
        "124": "  List<V> createCollection() {\n",
        "125": "    return new ArrayList<V>(expectedValuesPerKey);\n",
        "126": "  }\n",
        "127": "\n",
        "128": "  /**\n",
        "129": "   * Reduces the memory used by this {@code ArrayListMultimap}, if feasible.\n",
        "130": "   */\n",
        "131": "  public void trimToSize() {\n",
        "132": "    for (Collection<V> collection : backingMap().values()) {\n",
        "133": "      ArrayList<V> arrayList = (ArrayList<V>) collection;\n",
        "134": "      arrayList.trimToSize();\n",
        "135": "    }\n",
        "136": "  }\n",
        "137": "}\n",
        "138": "\n"
    }
}