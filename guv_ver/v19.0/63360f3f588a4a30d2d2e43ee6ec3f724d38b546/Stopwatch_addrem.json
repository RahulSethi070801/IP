{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.base;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "import static com.google.common.base.Preconditions.checkState;\n",
        "21": "import static java.util.concurrent.TimeUnit.DAYS;\n",
        "22": "import static java.util.concurrent.TimeUnit.HOURS;\n",
        "23": "import static java.util.concurrent.TimeUnit.MICROSECONDS;\n",
        "24": "import static java.util.concurrent.TimeUnit.MILLISECONDS;\n",
        "25": "import static java.util.concurrent.TimeUnit.MINUTES;\n",
        "26": "import static java.util.concurrent.TimeUnit.NANOSECONDS;\n",
        "27": "import static java.util.concurrent.TimeUnit.SECONDS;\n",
        "28": "\n",
        "29": "import com.google.common.annotations.GwtCompatible;\n",
        "30": "\n",
        "31": "import java.util.concurrent.TimeUnit;\n",
        "32": "\n",
        "33": "import javax.annotation.CheckReturnValue;\n",
        "34": "\n",
        "35": "/**\n",
        "36": " * An object that measures elapsed time in nanoseconds. It is useful to measure\n",
        "37": " * elapsed time using this class instead of direct calls to {@link\n",
        "38": " * System#nanoTime} for a few reasons:\n",
        "39": " *\n",
        "40": " * <ul>\n",
        "41": " * <li>An alternate time source can be substituted, for testing or performance\n",
        "42": " *     reasons.\n",
        "43": " * <li>As documented by {@code nanoTime}, the value returned has no absolute\n",
        "44": " *     meaning, and can only be interpreted as relative to another timestamp\n",
        "45": " *     returned by {@code nanoTime} at a different time. {@code Stopwatch} is a\n",
        "46": " *     more effective abstraction because it exposes only these relative values,\n",
        "47": " *     not the absolute ones.\n",
        "48": " * </ul>\n",
        "49": " *\n",
        "50": " * <p>Basic usage:\n",
        "51": " * <pre>\n",
        "52": " *   Stopwatch stopwatch = Stopwatch.{@link #createStarted createStarted}();\n",
        "53": " *   doSomething();\n",
        "54": " *   stopwatch.{@link #stop stop}(); // optional\n",
        "55": " *\n",
        "56": " *   long millis = stopwatch.elapsed(MILLISECONDS);\n",
        "57": " *\n",
        "58": " *   log.info(\"time: \" + stopwatch); // formatted string like \"12.3 ms\"</pre>\n",
        "59": " *\n",
        "60": " * <p>Stopwatch methods are not idempotent; it is an error to start or stop a\n",
        "61": " * stopwatch that is already in the desired state.\n",
        "62": " *\n",
        "63": " * <p>When testing code that uses this class, use\n",
        "64": " * {@link #createUnstarted(Ticker)} or {@link #createStarted(Ticker)} to\n",
        "65": " * supply a fake or mock ticker.\n",
        "66": " * <!-- TODO(kevinb): restore the \"such as\" --> This allows you to\n",
        "67": " * simulate any valid behavior of the stopwatch.\n",
        "68": " *\n",
        "69": " * <p><b>Note:</b> This class is not thread-safe.\n",
        "70": " *\n",
        "71": " * @author Kevin Bourrillion\n",
        "72": " * @since 10.0\n",
        "73": " */\n",
        "74": "@GwtCompatible(emulated = true)\n",
        "75": "public final class Stopwatch {\n",
        "76": "  private final Ticker ticker;\n",
        "77": "  private boolean isRunning;\n",
        "78": "  private long elapsedNanos;\n",
        "79": "  private long startTick;\n",
        "80": "\n",
        "81": "  /**\n",
        "82": "   * Creates (but does not start) a new stopwatch using {@link System#nanoTime}\n",
        "83": "   * as its time source.\n",
        "84": "   *\n",
        "85": "   * @since 15.0\n",
        "86": "   */\n",
        "87": "  @CheckReturnValue\n",
        "88": "  public static Stopwatch createUnstarted() {\n",
        "89": "    return new Stopwatch();\n",
        "90": "  }\n",
        "91": "\n",
        "92": "  /**\n",
        "93": "   * Creates (but does not start) a new stopwatch, using the specified time\n",
        "94": "   * source.\n",
        "95": "   *\n",
        "96": "   * @since 15.0\n",
        "97": "   */\n",
        "98": "  @CheckReturnValue\n",
        "99": "  public static Stopwatch createUnstarted(Ticker ticker) {\n",
        "100": "    return new Stopwatch(ticker);\n",
        "101": "  }\n",
        "102": "\n",
        "103": "  /**\n",
        "104": "   * Creates (and starts) a new stopwatch using {@link System#nanoTime}\n",
        "105": "   * as its time source.\n",
        "106": "   *\n",
        "107": "   * @since 15.0\n",
        "108": "   */\n",
        "109": "  @CheckReturnValue\n",
        "110": "  public static Stopwatch createStarted() {\n",
        "111": "    return new Stopwatch().start();\n",
        "112": "  }\n",
        "113": "\n",
        "114": "  /**\n",
        "115": "   * Creates (and starts) a new stopwatch, using the specified time\n",
        "116": "   * source.\n",
        "117": "   *\n",
        "118": "   * @since 15.0\n",
        "119": "   */\n",
        "120": "  @CheckReturnValue\n",
        "121": "  public static Stopwatch createStarted(Ticker ticker) {\n",
        "122": "    return new Stopwatch(ticker).start();\n",
        "123": "  }\n",
        "124": "\n",
        "125": "  Stopwatch() {\n",
        "126": "    this.ticker = Ticker.systemTicker();\n",
        "127": "  }\n",
        "128": "\n",
        "129": "  Stopwatch(Ticker ticker) {\n",
        "130": "    this.ticker = checkNotNull(ticker, \"ticker\");\n",
        "131": "  }\n",
        "132": "\n",
        "133": "  /**\n",
        "134": "   * Returns {@code true} if {@link #start()} has been called on this stopwatch,\n",
        "135": "   * and {@link #stop()} has not been called since the last call to {@code\n",
        "136": "   * start()}.\n",
        "137": "   */\n",
        "138": "  @CheckReturnValue\n",
        "139": "  public boolean isRunning() {\n",
        "140": "    return isRunning;\n",
        "141": "  }\n",
        "142": "\n",
        "143": "  /**\n",
        "144": "   * Starts the stopwatch.\n",
        "145": "   *\n",
        "146": "   * @return this {@code Stopwatch} instance\n",
        "147": "   * @throws IllegalStateException if the stopwatch is already running.\n",
        "148": "   */\n",
        "149": "  public Stopwatch start() {\n",
        "150": "    checkState(!isRunning, \"This stopwatch is already running.\");\n",
        "151": "    isRunning = true;\n",
        "152": "    startTick = ticker.read();\n",
        "153": "    return this;\n",
        "154": "  }\n",
        "155": "\n",
        "156": "  /**\n",
        "157": "   * Stops the stopwatch. Future reads will return the fixed duration that had\n",
        "158": "   * elapsed up to this point.\n",
        "159": "   *\n",
        "160": "   * @return this {@code Stopwatch} instance\n",
        "161": "   * @throws IllegalStateException if the stopwatch is already stopped.\n",
        "162": "   */\n",
        "163": "  public Stopwatch stop() {\n",
        "164": "    long tick = ticker.read();\n",
        "165": "    checkState(isRunning, \"This stopwatch is already stopped.\");\n",
        "166": "    isRunning = false;\n",
        "167": "    elapsedNanos += tick - startTick;\n",
        "168": "    return this;\n",
        "169": "  }\n",
        "170": "\n",
        "171": "  /**\n",
        "172": "   * Sets the elapsed time for this stopwatch to zero,\n",
        "173": "   * and places it in a stopped state.\n",
        "174": "   *\n",
        "175": "   * @return this {@code Stopwatch} instance\n",
        "176": "   */\n",
        "177": "  public Stopwatch reset() {\n",
        "178": "    elapsedNanos = 0;\n",
        "179": "    isRunning = false;\n",
        "180": "    return this;\n",
        "181": "  }\n",
        "182": "\n",
        "183": "  private long elapsedNanos() {\n",
        "184": "    return isRunning ? ticker.read() - startTick + elapsedNanos : elapsedNanos;\n",
        "185": "  }\n",
        "186": "\n",
        "187": "  /**\n",
        "188": "   * Returns the current elapsed time shown on this stopwatch, expressed\n",
        "189": "   * in the desired time unit, with any fraction rounded down.\n",
        "190": "   *\n",
        "191": "   * <p>Note that the overhead of measurement can be more than a microsecond, so\n",
        "192": "   * it is generally not useful to specify {@link TimeUnit#NANOSECONDS}\n",
        "193": "   * precision here.\n",
        "194": "   *\n",
        "195": "   * @since 14.0 (since 10.0 as {@code elapsedTime()})\n",
        "196": "   */\n",
        "197": "  @CheckReturnValue\n",
        "198": "  public long elapsed(TimeUnit desiredUnit) {\n",
        "199": "    return desiredUnit.convert(elapsedNanos(), NANOSECONDS);\n",
        "200": "  }\n",
        "201": "\n",
        "202": "  private static TimeUnit chooseUnit(long nanos) {\n",
        "203": "    if (DAYS.convert(nanos, NANOSECONDS) > 0) {\n",
        "204": "      return DAYS;\n",
        "205": "    }\n",
        "206": "    if (HOURS.convert(nanos, NANOSECONDS) > 0) {\n",
        "207": "      return HOURS;\n",
        "208": "    }\n",
        "209": "    if (MINUTES.convert(nanos, NANOSECONDS) > 0) {\n",
        "210": "      return MINUTES;\n",
        "211": "    }\n",
        "212": "    if (SECONDS.convert(nanos, NANOSECONDS) > 0) {\n",
        "213": "      return SECONDS;\n",
        "214": "    }\n",
        "215": "    if (MILLISECONDS.convert(nanos, NANOSECONDS) > 0) {\n",
        "216": "      return MILLISECONDS;\n",
        "217": "    }\n",
        "218": "    if (MICROSECONDS.convert(nanos, NANOSECONDS) > 0) {\n",
        "219": "      return MICROSECONDS;\n",
        "220": "    }\n",
        "221": "    return NANOSECONDS;\n",
        "222": "  }\n",
        "223": "\n",
        "224": "  private static String abbreviate(TimeUnit unit) {\n",
        "225": "    switch (unit) {\n",
        "226": "      case NANOSECONDS:\n",
        "227": "        return \"ns\";\n",
        "228": "      case MICROSECONDS:\n",
        "229": "        return \"\\u03bcs\"; // \u03bcs\n",
        "230": "      case MILLISECONDS:\n",
        "231": "        return \"ms\";\n",
        "232": "      case SECONDS:\n",
        "233": "        return \"s\";\n",
        "234": "      case MINUTES:\n",
        "235": "        return \"min\";\n",
        "236": "      case HOURS:\n",
        "237": "        return \"h\";\n",
        "238": "      case DAYS:\n",
        "239": "        return \"d\";\n",
        "240": "      default:\n",
        "241": "        throw new AssertionError();\n",
        "242": "    }\n",
        "243": "  }\n",
        "244": "}\n",
        "245": "\n"
    }
}