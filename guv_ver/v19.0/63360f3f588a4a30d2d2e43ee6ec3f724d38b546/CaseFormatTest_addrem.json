{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2006 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.base;\n",
        "18": "\n",
        "19": "import static com.google.common.base.CaseFormat.LOWER_CAMEL;\n",
        "20": "import static com.google.common.base.CaseFormat.LOWER_HYPHEN;\n",
        "21": "import static com.google.common.base.CaseFormat.LOWER_UNDERSCORE;\n",
        "22": "import static com.google.common.base.CaseFormat.UPPER_CAMEL;\n",
        "23": "import static com.google.common.base.CaseFormat.UPPER_UNDERSCORE;\n",
        "24": "\n",
        "25": "import com.google.common.annotations.GwtCompatible;\n",
        "26": "import com.google.common.testing.SerializableTester;\n",
        "27": "\n",
        "28": "import junit.framework.TestCase;\n",
        "29": "\n",
        "30": "/**\n",
        "31": " * Unit test for {@link CaseFormat}.\n",
        "32": " *\n",
        "33": " * @author Mike Bostock\n",
        "34": " */\n",
        "35": "@GwtCompatible(emulated = true)\n",
        "36": "public class CaseFormatTest extends TestCase {\n",
        "37": "\n",
        "38": "  public void testIdentity() {\n",
        "39": "    for (CaseFormat from : CaseFormat.values()) {\n",
        "40": "      assertSame(from + \" to \" + from, \"foo\", from.to(from, \"foo\"));\n",
        "41": "      for (CaseFormat to : CaseFormat.values()) {\n",
        "42": "        assertEquals(from + \" to \" + to, \"\", from.to(to, \"\"));\n",
        "43": "        assertEquals(from + \" to \" + to, \" \", from.to(to, \" \"));\n",
        "44": "      }\n",
        "45": "    }\n",
        "46": "  }\n",
        "47": "\n",
        "48": "  public void testLowerHyphenToLowerHyphen() {\n",
        "49": "    assertEquals(\"foo\", LOWER_HYPHEN.to(LOWER_HYPHEN, \"foo\"));\n",
        "50": "    assertEquals(\"foo-bar\", LOWER_HYPHEN.to(LOWER_HYPHEN, \"foo-bar\"));\n",
        "51": "  }\n",
        "52": "\n",
        "53": "  public void testLowerHyphenToLowerUnderscore() {\n",
        "54": "    assertEquals(\"foo\", LOWER_HYPHEN.to(LOWER_UNDERSCORE, \"foo\"));\n",
        "55": "    assertEquals(\"foo_bar\", LOWER_HYPHEN.to(LOWER_UNDERSCORE, \"foo-bar\"));\n",
        "56": "  }\n",
        "57": "\n",
        "58": "  public void testLowerHyphenToLowerCamel() {\n",
        "59": "    assertEquals(\"foo\", LOWER_HYPHEN.to(LOWER_CAMEL, \"foo\"));\n",
        "60": "    assertEquals(\"fooBar\", LOWER_HYPHEN.to(LOWER_CAMEL, \"foo-bar\"));\n",
        "61": "  }\n",
        "62": "\n",
        "63": "  public void testLowerHyphenToUpperCamel() {\n",
        "64": "    assertEquals(\"Foo\", LOWER_HYPHEN.to(UPPER_CAMEL, \"foo\"));\n",
        "65": "    assertEquals(\"FooBar\", LOWER_HYPHEN.to(UPPER_CAMEL, \"foo-bar\"));\n",
        "66": "  }\n",
        "67": "\n",
        "68": "  public void testLowerHyphenToUpperUnderscore() {\n",
        "69": "    assertEquals(\"FOO\", LOWER_HYPHEN.to(UPPER_UNDERSCORE, \"foo\"));\n",
        "70": "    assertEquals(\"FOO_BAR\", LOWER_HYPHEN.to(UPPER_UNDERSCORE, \"foo-bar\"));\n",
        "71": "  }\n",
        "72": "\n",
        "73": "  public void testLowerUnderscoreToLowerHyphen() {\n",
        "74": "    assertEquals(\"foo\", LOWER_UNDERSCORE.to(LOWER_HYPHEN, \"foo\"));\n",
        "75": "    assertEquals(\"foo-bar\", LOWER_UNDERSCORE.to(LOWER_HYPHEN, \"foo_bar\"));\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  public void testLowerUnderscoreToLowerUnderscore() {\n",
        "79": "    assertEquals(\"foo\", LOWER_UNDERSCORE.to(LOWER_UNDERSCORE, \"foo\"));\n",
        "80": "    assertEquals(\"foo_bar\", LOWER_UNDERSCORE.to(LOWER_UNDERSCORE, \"foo_bar\"));\n",
        "81": "  }\n",
        "82": "\n",
        "83": "  public void testLowerUnderscoreToLowerCamel() {\n",
        "84": "    assertEquals(\"foo\", LOWER_UNDERSCORE.to(LOWER_CAMEL, \"foo\"));\n",
        "85": "    assertEquals(\"fooBar\", LOWER_UNDERSCORE.to(LOWER_CAMEL, \"foo_bar\"));\n",
        "86": "  }\n",
        "87": "\n",
        "88": "  public void testLowerUnderscoreToUpperCamel() {\n",
        "89": "    assertEquals(\"Foo\", LOWER_UNDERSCORE.to(UPPER_CAMEL, \"foo\"));\n",
        "90": "    assertEquals(\"FooBar\", LOWER_UNDERSCORE.to(UPPER_CAMEL, \"foo_bar\"));\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  public void testLowerUnderscoreToUpperUnderscore() {\n",
        "94": "    assertEquals(\"FOO\", LOWER_UNDERSCORE.to(UPPER_UNDERSCORE, \"foo\"));\n",
        "95": "    assertEquals(\"FOO_BAR\", LOWER_UNDERSCORE.to(UPPER_UNDERSCORE, \"foo_bar\"));\n",
        "96": "  }\n",
        "97": "\n",
        "98": "  public void testLowerCamelToLowerHyphen() {\n",
        "99": "    assertEquals(\"foo\", LOWER_CAMEL.to(LOWER_HYPHEN, \"foo\"));\n",
        "100": "    assertEquals(\"foo-bar\", LOWER_CAMEL.to(LOWER_HYPHEN, \"fooBar\"));\n",
        "101": "    assertEquals(\"h-t-t-p\", LOWER_CAMEL.to(LOWER_HYPHEN, \"HTTP\"));\n",
        "102": "  }\n",
        "103": "\n",
        "104": "  public void testLowerCamelToLowerUnderscore() {\n",
        "105": "    assertEquals(\"foo\", LOWER_CAMEL.to(LOWER_UNDERSCORE, \"foo\"));\n",
        "106": "    assertEquals(\"foo_bar\", LOWER_CAMEL.to(LOWER_UNDERSCORE, \"fooBar\"));\n",
        "107": "    assertEquals(\"h_t_t_p\", LOWER_CAMEL.to(LOWER_UNDERSCORE, \"hTTP\"));\n",
        "108": "  }\n",
        "109": "\n",
        "110": "  public void testLowerCamelToLowerCamel() {\n",
        "111": "    assertEquals(\"foo\", LOWER_CAMEL.to(LOWER_CAMEL, \"foo\"));\n",
        "112": "    assertEquals(\"fooBar\", LOWER_CAMEL.to(LOWER_CAMEL, \"fooBar\"));\n",
        "113": "  }\n",
        "114": "\n",
        "115": "  public void testLowerCamelToUpperCamel() {\n",
        "116": "    assertEquals(\"Foo\", LOWER_CAMEL.to(UPPER_CAMEL, \"foo\"));\n",
        "117": "    assertEquals(\"FooBar\", LOWER_CAMEL.to(UPPER_CAMEL, \"fooBar\"));\n",
        "118": "    assertEquals(\"HTTP\", LOWER_CAMEL.to(UPPER_CAMEL, \"hTTP\"));\n",
        "119": "  }\n",
        "120": "\n",
        "121": "  public void testLowerCamelToUpperUnderscore() {\n",
        "122": "    assertEquals(\"FOO\", LOWER_CAMEL.to(UPPER_UNDERSCORE, \"foo\"));\n",
        "123": "    assertEquals(\"FOO_BAR\", LOWER_CAMEL.to(UPPER_UNDERSCORE, \"fooBar\"));\n",
        "124": "  }\n",
        "125": "\n",
        "126": "  public void testUpperCamelToLowerHyphen() {\n",
        "127": "    assertEquals(\"foo\", UPPER_CAMEL.to(LOWER_HYPHEN, \"Foo\"));\n",
        "128": "    assertEquals(\"foo-bar\", UPPER_CAMEL.to(LOWER_HYPHEN, \"FooBar\"));\n",
        "129": "  }\n",
        "130": "\n",
        "131": "  public void testUpperCamelToLowerUnderscore() {\n",
        "132": "    assertEquals(\"foo\", UPPER_CAMEL.to(LOWER_UNDERSCORE, \"Foo\"));\n",
        "133": "    assertEquals(\"foo_bar\", UPPER_CAMEL.to(LOWER_UNDERSCORE, \"FooBar\"));\n",
        "134": "  }\n",
        "135": "\n",
        "136": "  public void testUpperCamelToLowerCamel() {\n",
        "137": "    assertEquals(\"foo\", UPPER_CAMEL.to(LOWER_CAMEL, \"Foo\"));\n",
        "138": "    assertEquals(\"fooBar\", UPPER_CAMEL.to(LOWER_CAMEL, \"FooBar\"));\n",
        "139": "    assertEquals(\"hTTP\", UPPER_CAMEL.to(LOWER_CAMEL, \"HTTP\"));\n",
        "140": "  }\n",
        "141": "\n",
        "142": "  public void testUpperCamelToUpperCamel() {\n",
        "143": "    assertEquals(\"Foo\", UPPER_CAMEL.to(UPPER_CAMEL, \"Foo\"));\n",
        "144": "    assertEquals(\"FooBar\", UPPER_CAMEL.to(UPPER_CAMEL, \"FooBar\"));\n",
        "145": "  }\n",
        "146": "\n",
        "147": "  public void testUpperCamelToUpperUnderscore() {\n",
        "148": "    assertEquals(\"FOO\", UPPER_CAMEL.to(UPPER_UNDERSCORE, \"Foo\"));\n",
        "149": "    assertEquals(\"FOO_BAR\", UPPER_CAMEL.to(UPPER_UNDERSCORE, \"FooBar\"));\n",
        "150": "    assertEquals(\"H_T_T_P\", UPPER_CAMEL.to(UPPER_UNDERSCORE, \"HTTP\"));\n",
        "151": "    assertEquals(\"H__T__T__P\", UPPER_CAMEL.to(UPPER_UNDERSCORE, \"H_T_T_P\"));\n",
        "152": "  }\n",
        "153": "\n",
        "154": "  public void testUpperUnderscoreToLowerHyphen() {\n",
        "155": "    assertEquals(\"foo\", UPPER_UNDERSCORE.to(LOWER_HYPHEN, \"FOO\"));\n",
        "156": "    assertEquals(\"foo-bar\", UPPER_UNDERSCORE.to(LOWER_HYPHEN, \"FOO_BAR\"));\n",
        "157": "  }\n",
        "158": "\n",
        "159": "  public void testUpperUnderscoreToLowerUnderscore() {\n",
        "160": "    assertEquals(\"foo\", UPPER_UNDERSCORE.to(LOWER_UNDERSCORE, \"FOO\"));\n",
        "161": "    assertEquals(\"foo_bar\", UPPER_UNDERSCORE.to(LOWER_UNDERSCORE, \"FOO_BAR\"));\n",
        "162": "  }\n",
        "163": "\n",
        "164": "  public void testUpperUnderscoreToLowerCamel() {\n",
        "165": "    assertEquals(\"foo\", UPPER_UNDERSCORE.to(LOWER_CAMEL, \"FOO\"));\n",
        "166": "    assertEquals(\"fooBar\", UPPER_UNDERSCORE.to(LOWER_CAMEL, \"FOO_BAR\"));\n",
        "167": "  }\n",
        "168": "\n",
        "169": "  public void testUpperUnderscoreToUpperCamel() {\n",
        "170": "    assertEquals(\"Foo\", UPPER_UNDERSCORE.to(UPPER_CAMEL, \"FOO\"));\n",
        "171": "    assertEquals(\"FooBar\", UPPER_UNDERSCORE.to(UPPER_CAMEL, \"FOO_BAR\"));\n",
        "172": "    assertEquals(\"HTTP\", UPPER_UNDERSCORE.to(UPPER_CAMEL, \"H_T_T_P\"));\n",
        "173": "  }\n",
        "174": "\n",
        "175": "  public void testUpperUnderscoreToUpperUnderscore() {\n",
        "176": "    assertEquals(\"FOO\", UPPER_UNDERSCORE.to(UPPER_UNDERSCORE, \"FOO\"));\n",
        "177": "    assertEquals(\"FOO_BAR\", UPPER_UNDERSCORE.to(UPPER_UNDERSCORE, \"FOO_BAR\"));\n",
        "178": "  }\n",
        "179": "\n",
        "180": "  public void testConverterToForward() {\n",
        "181": "    assertEquals(\"FooBar\", UPPER_UNDERSCORE.converterTo(UPPER_CAMEL).convert(\"FOO_BAR\"));\n",
        "182": "    assertEquals(\"fooBar\", UPPER_UNDERSCORE.converterTo(LOWER_CAMEL).convert(\"FOO_BAR\"));\n",
        "183": "    assertEquals(\"FOO_BAR\", UPPER_CAMEL.converterTo(UPPER_UNDERSCORE).convert(\"FooBar\"));\n",
        "184": "    assertEquals(\"FOO_BAR\", LOWER_CAMEL.converterTo(UPPER_UNDERSCORE).convert(\"fooBar\"));\n",
        "185": "  }\n",
        "186": "\n",
        "187": "  public void testConverterToBackward() {\n",
        "188": "    assertEquals(\"FOO_BAR\", UPPER_UNDERSCORE.converterTo(UPPER_CAMEL).reverse().convert(\"FooBar\"));\n",
        "189": "    assertEquals(\"FOO_BAR\", UPPER_UNDERSCORE.converterTo(LOWER_CAMEL).reverse().convert(\"fooBar\"));\n",
        "190": "    assertEquals(\"FooBar\", UPPER_CAMEL.converterTo(UPPER_UNDERSCORE).reverse().convert(\"FOO_BAR\"));\n",
        "191": "    assertEquals(\"fooBar\", LOWER_CAMEL.converterTo(UPPER_UNDERSCORE).reverse().convert(\"FOO_BAR\"));\n",
        "192": "  }\n",
        "193": "\n",
        "194": "  public void testConverter_nullConversions() {\n",
        "195": "    for (CaseFormat outer : CaseFormat.values()) {\n",
        "196": "      for (CaseFormat inner : CaseFormat.values()) {\n",
        "197": "        assertNull(outer.converterTo(inner).convert(null));\n",
        "198": "        assertNull(outer.converterTo(inner).reverse().convert(null));\n",
        "199": "      }\n",
        "200": "    }\n",
        "201": "  }\n",
        "202": "\n",
        "203": "  public void testConverter_toString() {\n",
        "204": "    assertEquals(\n",
        "205": "        \"LOWER_HYPHEN.converterTo(UPPER_CAMEL)\",\n",
        "206": "        LOWER_HYPHEN.converterTo(UPPER_CAMEL).toString());\n",
        "207": "  }\n",
        "208": "\n",
        "209": "  public void testConverter_serialization() {\n",
        "210": "    for (CaseFormat outer : CaseFormat.values()) {\n",
        "211": "      for (CaseFormat inner : CaseFormat.values()) {\n",
        "212": "        SerializableTester.reserializeAndAssert(outer.converterTo(inner));\n",
        "213": "      }\n",
        "214": "    }\n",
        "215": "  }\n",
        "216": "}\n",
        "217": "\n"
    }
}