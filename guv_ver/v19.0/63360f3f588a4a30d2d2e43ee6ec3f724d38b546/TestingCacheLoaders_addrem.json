{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2011 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "6": " *\n",
        "7": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "8": " *\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "13": " */\n",
        "14": "\n",
        "15": "package com.google.common.cache;\n",
        "16": "\n",
        "17": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.collect.Maps;\n",
        "21": "\n",
        "22": "import java.util.Map;\n",
        "23": "import java.util.concurrent.atomic.AtomicInteger;\n",
        "24": "\n",
        "25": "import javax.annotation.Nullable;\n",
        "26": "\n",
        "27": "/**\n",
        "28": " * Utility {@link CacheLoader} implementations intended for use in testing.\n",
        "29": " *\n",
        "30": " * @author mike nonemacher\n",
        "31": " */\n",
        "32": "@GwtCompatible(emulated = true)\n",
        "33": "class TestingCacheLoaders {\n",
        "34": "\n",
        "35": "  /**\n",
        "36": "   * Returns a {@link CacheLoader} that implements a naive {@link CacheLoader#loadAll}, delegating\n",
        "37": "   * {@link CacheLoader#load} calls to {@code loader}.\n",
        "38": "   */\n",
        "39": "  static <K, V> CacheLoader<K, V> bulkLoader(final CacheLoader<K, V> loader) {\n",
        "40": "    checkNotNull(loader);\n",
        "41": "    return new CacheLoader<K, V>() {\n",
        "42": "      @Override\n",
        "43": "      public V load(K key) throws Exception {\n",
        "44": "        return loader.load(key);\n",
        "45": "      }\n",
        "46": "\n",
        "47": "      @Override\n",
        "48": "      public Map<K, V> loadAll(Iterable<? extends K> keys) throws Exception {\n",
        "49": "        Map<K, V> result = Maps.newHashMap(); // allow nulls\n",
        "50": "        for (K key : keys) {\n",
        "51": "          result.put(key, load(key));\n",
        "52": "        }\n",
        "53": "        return result;\n",
        "54": "      }\n",
        "55": "    };\n",
        "56": "  }\n",
        "57": "\n",
        "58": "  /**\n",
        "59": "   * Returns a {@link CacheLoader} that returns the given {@code constant} for every request.\n",
        "60": "   */\n",
        "61": "  static <K, V> ConstantLoader<K, V> constantLoader(@Nullable V constant) {\n",
        "62": "    return new ConstantLoader<K, V>(constant);\n",
        "63": "  }\n",
        "64": "\n",
        "65": "  /**\n",
        "66": "   * Returns a {@link CacheLoader} that returns the given {@code constant} for every request.\n",
        "67": "   */\n",
        "68": "  static IncrementingLoader incrementingLoader() {\n",
        "69": "    return new IncrementingLoader();\n",
        "70": "  }\n",
        "71": "\n",
        "72": "  /**\n",
        "73": "   * Returns a {@link CacheLoader} that throws the given error for every request.\n",
        "74": "   */\n",
        "75": "  static <K, V> CacheLoader<K, V> errorLoader(final Error e) {\n",
        "76": "    checkNotNull(e);\n",
        "77": "    return new CacheLoader<K, V>() {\n",
        "78": "      @Override\n",
        "79": "      public V load(K key) {\n",
        "80": "        throw e;\n",
        "81": "      }\n",
        "82": "    };\n",
        "83": "  }\n",
        "84": "\n",
        "85": "  /**\n",
        "86": "   * Returns a {@link CacheLoader} that throws the given exception for every request.\n",
        "87": "   */\n",
        "88": "  static <K, V> CacheLoader<K, V> exceptionLoader(final Exception e) {\n",
        "89": "    checkNotNull(e);\n",
        "90": "    return new CacheLoader<K, V>() {\n",
        "91": "      @Override\n",
        "92": "      public V load(K key) throws Exception {\n",
        "93": "        throw e;\n",
        "94": "      }\n",
        "95": "    };\n",
        "96": "  }\n",
        "97": "\n",
        "98": "  /**\n",
        "99": "   * Returns a {@link CacheLoader} that returns the key for every request.\n",
        "100": "   */\n",
        "101": "  static <T> IdentityLoader<T> identityLoader() {\n",
        "102": "    return new IdentityLoader<T>();\n",
        "103": "  }\n",
        "104": "\n",
        "105": "  /**\n",
        "106": "   * Returns a {@code new Object()} for every request, and increments a counter for every request.\n",
        "107": "   * The count is accessible via {@link #getCount}.\n",
        "108": "   */\n",
        "109": "  static class CountingLoader extends CacheLoader<Object, Object> {\n",
        "110": "    private final AtomicInteger count = new AtomicInteger();\n",
        "111": "\n",
        "112": "    @Override\n",
        "113": "    public Object load(Object from) {\n",
        "114": "      count.incrementAndGet();\n",
        "115": "      return new Object();\n",
        "116": "    }\n",
        "117": "\n",
        "118": "    public int getCount() {\n",
        "119": "      return count.get();\n",
        "120": "    }\n",
        "121": "  }\n",
        "122": "\n",
        "123": "  static final class ConstantLoader<K, V> extends CacheLoader<K, V> {\n",
        "124": "    private final V constant;\n",
        "125": "\n",
        "126": "    ConstantLoader(V constant) {\n",
        "127": "      this.constant = constant;\n",
        "128": "    }\n",
        "129": "\n",
        "130": "    @Override\n",
        "131": "    public V load(K key) {\n",
        "132": "      return constant;\n",
        "133": "    }\n",
        "134": "  }\n",
        "135": "\n",
        "136": "  /**\n",
        "137": "   * Returns a {@code new Object()} for every request, and increments a counter for every request.\n",
        "138": "   * An {@code Integer} loader that returns the key for {@code load} requests, and increments the\n",
        "139": "   * old value on {@code reload} requests. The load counts are accessible via {@link #getLoadCount}\n",
        "140": "   * and {@link #getReloadCount}.\n",
        "141": "   */\n",
        "142": "  static class IncrementingLoader extends CacheLoader<Integer, Integer> {\n",
        "143": "    private final AtomicInteger countLoad = new AtomicInteger();\n",
        "144": "    private final AtomicInteger countReload = new AtomicInteger();\n",
        "145": "\n",
        "146": "    @Override\n",
        "147": "    public Integer load(Integer key) {\n",
        "148": "      countLoad.incrementAndGet();\n",
        "149": "      return key;\n",
        "150": "    }\n",
        "151": "\n",
        "152": "    public int getLoadCount() {\n",
        "153": "      return countLoad.get();\n",
        "154": "    }\n",
        "155": "\n",
        "156": "    public int getReloadCount() {\n",
        "157": "      return countReload.get();\n",
        "158": "    }\n",
        "159": "  }\n",
        "160": "\n",
        "161": "  static final class IdentityLoader<T> extends CacheLoader<T, T> {\n",
        "162": "    @Override\n",
        "163": "    public T load(T key) {\n",
        "164": "      return key;\n",
        "165": "    }\n",
        "166": "  }\n",
        "167": "}\n",
        "168": "\n"
    }
}