{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2011 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "6": " *\n",
        "7": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "8": " *\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "13": " */\n",
        "14": "\n",
        "15": "package com.google.common.collect;\n",
        "16": "\n",
        "17": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "18": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "19": "import static com.google.common.collect.BoundType.CLOSED;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "\n",
        "23": "import java.util.Collection;\n",
        "24": "\n",
        "25": "import javax.annotation.Nullable;\n",
        "26": "\n",
        "27": "/**\n",
        "28": " * An implementation of {@link ContiguousSet} that contains one or more elements.\n",
        "29": " *\n",
        "30": " * @author Gregory Kick\n",
        "31": " */\n",
        "32": "@GwtCompatible(emulated = true)\n",
        "33": "@SuppressWarnings(\"unchecked\") // allow ungenerified Comparable types\n",
        "34": "final class RegularContiguousSet<C extends Comparable> extends ContiguousSet<C> {\n",
        "35": "  private final Range<C> range;\n",
        "36": "\n",
        "37": "  RegularContiguousSet(Range<C> range, DiscreteDomain<C> domain) {\n",
        "38": "    super(domain);\n",
        "39": "    this.range = range;\n",
        "40": "  }\n",
        "41": "\n",
        "42": "  private ContiguousSet<C> intersectionInCurrentDomain(Range<C> other) {\n",
        "43": "    return (range.isConnected(other))\n",
        "44": "        ? ContiguousSet.create(range.intersection(other), domain)\n",
        "45": "        : new EmptyContiguousSet<C>(domain);\n",
        "46": "  }\n",
        "47": "\n",
        "48": "  @Override\n",
        "49": "  ContiguousSet<C> headSetImpl(C toElement, boolean inclusive) {\n",
        "50": "    return intersectionInCurrentDomain(Range.upTo(toElement, BoundType.forBoolean(inclusive)));\n",
        "51": "  }\n",
        "52": "\n",
        "53": "  @Override\n",
        "54": "  ContiguousSet<C> subSetImpl(\n",
        "55": "      C fromElement, boolean fromInclusive, C toElement, boolean toInclusive) {\n",
        "56": "    if (fromElement.compareTo(toElement) == 0 && !fromInclusive && !toInclusive) {\n",
        "57": "      // Range would reject our attempt to create (x, x).\n",
        "58": "      return new EmptyContiguousSet<C>(domain);\n",
        "59": "    }\n",
        "60": "    return intersectionInCurrentDomain(\n",
        "61": "        Range.range(\n",
        "62": "            fromElement, BoundType.forBoolean(fromInclusive),\n",
        "63": "            toElement, BoundType.forBoolean(toInclusive)));\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  @Override\n",
        "67": "  ContiguousSet<C> tailSetImpl(C fromElement, boolean inclusive) {\n",
        "68": "    return intersectionInCurrentDomain(Range.downTo(fromElement, BoundType.forBoolean(inclusive)));\n",
        "69": "  }\n",
        "70": "\n",
        "71": "  @Override\n",
        "72": "  public UnmodifiableIterator<C> iterator() {\n",
        "73": "    return new AbstractSequentialIterator<C>(first()) {\n",
        "74": "      final C last = last();\n",
        "75": "\n",
        "76": "      @Override\n",
        "77": "      protected C computeNext(C previous) {\n",
        "78": "        return equalsOrThrow(previous, last) ? null : domain.next(previous);\n",
        "79": "      }\n",
        "80": "    };\n",
        "81": "  }\n",
        "82": "\n",
        "83": "  private static boolean equalsOrThrow(Comparable<?> left, @Nullable Comparable<?> right) {\n",
        "84": "    return right != null && Range.compareOrThrow(left, right) == 0;\n",
        "85": "  }\n",
        "86": "\n",
        "87": "  @Override\n",
        "88": "  boolean isPartialView() {\n",
        "89": "    return false;\n",
        "90": "  }\n",
        "91": "\n",
        "92": "  @Override\n",
        "93": "  public C first() {\n",
        "94": "    return range.lowerBound.leastValueAbove(domain);\n",
        "95": "  }\n",
        "96": "\n",
        "97": "  @Override\n",
        "98": "  public C last() {\n",
        "99": "    return range.upperBound.greatestValueBelow(domain);\n",
        "100": "  }\n",
        "101": "\n",
        "102": "  @Override\n",
        "103": "  public int size() {\n",
        "104": "    long distance = domain.distance(first(), last());\n",
        "105": "    return (distance >= Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int) distance + 1;\n",
        "106": "  }\n",
        "107": "\n",
        "108": "  @Override\n",
        "109": "  public boolean contains(@Nullable Object object) {\n",
        "110": "    if (object == null) {\n",
        "111": "      return false;\n",
        "112": "    }\n",
        "113": "    try {\n",
        "114": "      return range.contains((C) object);\n",
        "115": "    } catch (ClassCastException e) {\n",
        "116": "      return false;\n",
        "117": "    }\n",
        "118": "  }\n",
        "119": "\n",
        "120": "  @Override\n",
        "121": "  public boolean containsAll(Collection<?> targets) {\n",
        "122": "    return Collections2.containsAllImpl(this, targets);\n",
        "123": "  }\n",
        "124": "\n",
        "125": "  @Override\n",
        "126": "  public boolean isEmpty() {\n",
        "127": "    return false;\n",
        "128": "  }\n",
        "129": "\n",
        "130": "  @Override\n",
        "131": "  public ContiguousSet<C> intersection(ContiguousSet<C> other) {\n",
        "132": "    checkNotNull(other);\n",
        "133": "    checkArgument(this.domain.equals(other.domain));\n",
        "134": "    if (other.isEmpty()) {\n",
        "135": "      return other;\n",
        "136": "    } else {\n",
        "137": "      C lowerEndpoint = Ordering.natural().max(this.first(), other.first());\n",
        "138": "      C upperEndpoint = Ordering.natural().min(this.last(), other.last());\n",
        "139": "      return (lowerEndpoint.compareTo(upperEndpoint) < 0)\n",
        "140": "          ? ContiguousSet.create(Range.closed(lowerEndpoint, upperEndpoint), domain)\n",
        "141": "          : new EmptyContiguousSet<C>(domain);\n",
        "142": "    }\n",
        "143": "  }\n",
        "144": "\n",
        "145": "  @Override\n",
        "146": "  public Range<C> range() {\n",
        "147": "    return range(CLOSED, CLOSED);\n",
        "148": "  }\n",
        "149": "\n",
        "150": "  @Override\n",
        "151": "  public Range<C> range(BoundType lowerBoundType, BoundType upperBoundType) {\n",
        "152": "    return Range.create(\n",
        "153": "        range.lowerBound.withLowerBoundType(lowerBoundType, domain),\n",
        "154": "        range.upperBound.withUpperBoundType(upperBoundType, domain));\n",
        "155": "  }\n",
        "156": "\n",
        "157": "  @Override\n",
        "158": "  public boolean equals(@Nullable Object object) {\n",
        "159": "    if (object == this) {\n",
        "160": "      return true;\n",
        "161": "    } else if (object instanceof RegularContiguousSet) {\n",
        "162": "      RegularContiguousSet<?> that = (RegularContiguousSet<?>) object;\n",
        "163": "      if (this.domain.equals(that.domain)) {\n",
        "164": "        return this.first().equals(that.first()) && this.last().equals(that.last());\n",
        "165": "      }\n",
        "166": "    }\n",
        "167": "    return super.equals(object);\n",
        "168": "  }\n",
        "169": "\n",
        "170": "  // copied to make sure not to use the GWT-emulated version\n",
        "171": "  @Override\n",
        "172": "  public int hashCode() {\n",
        "173": "    return Sets.hashCodeImpl(this);\n",
        "174": "  }\n",
        "175": "\n",
        "176": "  private static final long serialVersionUID = 0;\n",
        "177": "}\n",
        "178": "\n"
    }
}