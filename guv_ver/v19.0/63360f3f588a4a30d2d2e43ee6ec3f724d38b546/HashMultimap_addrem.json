{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.annotations.VisibleForTesting;\n",
        "21": "import com.google.common.base.Preconditions;\n",
        "22": "\n",
        "23": "import java.util.Collection;\n",
        "24": "import java.util.HashMap;\n",
        "25": "import java.util.Set;\n",
        "26": "\n",
        "27": "/**\n",
        "28": " * Implementation of {@link Multimap} using hash tables.\n",
        "29": " *\n",
        "30": " * <p>The multimap does not store duplicate key-value pairs. Adding a new\n",
        "31": " * key-value pair equal to an existing key-value pair has no effect.\n",
        "32": " *\n",
        "33": " * <p>Keys and values may be null. All optional multimap methods are supported,\n",
        "34": " * and all returned views are modifiable.\n",
        "35": " *\n",
        "36": " * <p>This class is not threadsafe when any concurrent operations update the\n",
        "37": " * multimap. Concurrent read operations will work correctly. To allow concurrent\n",
        "38": " * update operations, wrap your multimap with a call to {@link\n",
        "39": " * Multimaps#synchronizedSetMultimap}.\n",
        "40": " *\n",
        "41": " * @author Jared Levy\n",
        "42": " * @since 2.0\n",
        "43": " */\n",
        "44": "@GwtCompatible(serializable = true, emulated = true)\n",
        "45": "public final class HashMultimap<K, V> extends AbstractSetMultimap<K, V> {\n",
        "46": "  private static final int DEFAULT_VALUES_PER_KEY = 2;\n",
        "47": "\n",
        "48": "  @VisibleForTesting transient int expectedValuesPerKey = DEFAULT_VALUES_PER_KEY;\n",
        "49": "\n",
        "50": "  /**\n",
        "51": "   * Creates a new, empty {@code HashMultimap} with the default initial\n",
        "52": "   * capacities.\n",
        "53": "   */\n",
        "54": "  public static <K, V> HashMultimap<K, V> create() {\n",
        "55": "    return new HashMultimap<K, V>();\n",
        "56": "  }\n",
        "57": "\n",
        "58": "  /**\n",
        "59": "   * Constructs an empty {@code HashMultimap} with enough capacity to hold the\n",
        "60": "   * specified numbers of keys and values without rehashing.\n",
        "61": "   *\n",
        "62": "   * @param expectedKeys the expected number of distinct keys\n",
        "63": "   * @param expectedValuesPerKey the expected average number of values per key\n",
        "64": "   * @throws IllegalArgumentException if {@code expectedKeys} or {@code\n",
        "65": "   *      expectedValuesPerKey} is negative\n",
        "66": "   */\n",
        "67": "  public static <K, V> HashMultimap<K, V> create(int expectedKeys, int expectedValuesPerKey) {\n",
        "68": "    return new HashMultimap<K, V>(expectedKeys, expectedValuesPerKey);\n",
        "69": "  }\n",
        "70": "\n",
        "71": "  /**\n",
        "72": "   * Constructs a {@code HashMultimap} with the same mappings as the specified\n",
        "73": "   * multimap. If a key-value mapping appears multiple times in the input\n",
        "74": "   * multimap, it only appears once in the constructed multimap.\n",
        "75": "   *\n",
        "76": "   * @param multimap the multimap whose contents are copied to this multimap\n",
        "77": "   */\n",
        "78": "  public static <K, V> HashMultimap<K, V> create(Multimap<? extends K, ? extends V> multimap) {\n",
        "79": "    return new HashMultimap<K, V>(multimap);\n",
        "80": "  }\n",
        "81": "\n",
        "82": "  private HashMultimap() {\n",
        "83": "    super(new HashMap<K, Collection<V>>());\n",
        "84": "  }\n",
        "85": "\n",
        "86": "  private HashMultimap(int expectedKeys, int expectedValuesPerKey) {\n",
        "87": "    super(Maps.<K, Collection<V>>newHashMapWithExpectedSize(expectedKeys));\n",
        "88": "    Preconditions.checkArgument(expectedValuesPerKey >= 0);\n",
        "89": "    this.expectedValuesPerKey = expectedValuesPerKey;\n",
        "90": "  }\n",
        "91": "\n",
        "92": "  private HashMultimap(Multimap<? extends K, ? extends V> multimap) {\n",
        "93": "    super(Maps.<K, Collection<V>>newHashMapWithExpectedSize(multimap.keySet().size()));\n",
        "94": "    putAll(multimap);\n",
        "95": "  }\n",
        "96": "\n",
        "97": "  /**\n",
        "98": "   * {@inheritDoc}\n",
        "99": "   *\n",
        "100": "   * <p>Creates an empty {@code HashSet} for a collection of values for one key.\n",
        "101": "   *\n",
        "102": "   * @return a new {@code HashSet} containing a collection of values for one key\n",
        "103": "   */\n",
        "104": "  @Override\n",
        "105": "  Set<V> createCollection() {\n",
        "106": "    return Sets.<V>newHashSetWithExpectedSize(expectedValuesPerKey);\n",
        "107": "  }\n",
        "108": "}\n",
        "109": "\n"
    }
}