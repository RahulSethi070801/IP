{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.primitives;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.collect.testing.Helpers;\n",
        "21": "\n",
        "22": "import junit.framework.TestCase;\n",
        "23": "\n",
        "24": "import java.util.Arrays;\n",
        "25": "import java.util.Comparator;\n",
        "26": "import java.util.List;\n",
        "27": "\n",
        "28": "/**\n",
        "29": " * Unit test for {@link SignedBytes}.\n",
        "30": " *\n",
        "31": " * @author Kevin Bourrillion\n",
        "32": " */\n",
        "33": "@GwtCompatible(emulated = true)\n",
        "34": "@SuppressWarnings(\"cast\") // redundant casts are intentional and harmless\n",
        "35": "public class SignedBytesTest extends TestCase {\n",
        "36": "  private static final byte[] EMPTY = {};\n",
        "37": "  private static final byte[] ARRAY1 = {(byte) 1};\n",
        "38": "\n",
        "39": "  private static final byte LEAST = Byte.MIN_VALUE;\n",
        "40": "  private static final byte GREATEST = Byte.MAX_VALUE;\n",
        "41": "\n",
        "42": "  private static final byte[] VALUES =\n",
        "43": "      {LEAST, -1, 0, 1, GREATEST};\n",
        "44": "\n",
        "45": "  public void testCheckedCast() {\n",
        "46": "    for (byte value : VALUES) {\n",
        "47": "      assertEquals(value, SignedBytes.checkedCast((long) value));\n",
        "48": "    }\n",
        "49": "    assertCastFails(GREATEST + 1L);\n",
        "50": "    assertCastFails(LEAST - 1L);\n",
        "51": "    assertCastFails(Long.MAX_VALUE);\n",
        "52": "    assertCastFails(Long.MIN_VALUE);\n",
        "53": "  }\n",
        "54": "\n",
        "55": "  public void testSaturatedCast() {\n",
        "56": "    for (byte value : VALUES) {\n",
        "57": "      assertEquals(value, SignedBytes.saturatedCast((long) value));\n",
        "58": "    }\n",
        "59": "    assertEquals(GREATEST, SignedBytes.saturatedCast(GREATEST + 1L));\n",
        "60": "    assertEquals(LEAST, SignedBytes.saturatedCast(LEAST - 1L));\n",
        "61": "    assertEquals(GREATEST, SignedBytes.saturatedCast(Long.MAX_VALUE));\n",
        "62": "    assertEquals(LEAST, SignedBytes.saturatedCast(Long.MIN_VALUE));\n",
        "63": "  }\n",
        "64": "\n",
        "65": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "66": "  private static void assertCastFails(long value) {\n",
        "67": "    try {\n",
        "68": "      SignedBytes.checkedCast(value);\n",
        "69": "      fail(\"Cast to byte should have failed: \" + value);\n",
        "70": "    } catch (IllegalArgumentException ex) {\n",
        "71": "      assertTrue(value + \" not found in exception text: \" + ex.getMessage(),\n",
        "72": "          ex.getMessage().contains(String.valueOf(value)));\n",
        "73": "    }\n",
        "74": "  }\n",
        "75": "\n",
        "76": "  public void testCompare() {\n",
        "77": "    for (byte x : VALUES) {\n",
        "78": "      for (byte y : VALUES) {\n",
        "79": "        // Only compare the sign of the result of compareTo().\n",
        "80": "        int expected = Byte.valueOf(x).compareTo(y);\n",
        "81": "        int actual = SignedBytes.compare(x, y);\n",
        "82": "        if (expected == 0) {\n",
        "83": "          assertEquals(x + \", \" + y, expected, actual);\n",
        "84": "        } else if (expected < 0) {\n",
        "85": "          assertTrue(x + \", \" + y + \" (expected: \" + expected + \", actual\" + actual + \")\",\n",
        "86": "              actual < 0);\n",
        "87": "        } else {\n",
        "88": "          assertTrue(x + \", \" + y + \" (expected: \" + expected + \", actual\" + actual + \")\",\n",
        "89": "              actual > 0);\n",
        "90": "        }\n",
        "91": "      }\n",
        "92": "    }\n",
        "93": "  }\n",
        "94": "\n",
        "95": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "96": "  public void testMax_noArgs() {\n",
        "97": "    try {\n",
        "98": "      SignedBytes.max();\n",
        "99": "      fail();\n",
        "100": "    } catch (IllegalArgumentException expected) {\n",
        "101": "    }\n",
        "102": "  }\n",
        "103": "\n",
        "104": "  public void testMax() {\n",
        "105": "    assertEquals(LEAST, SignedBytes.max(LEAST));\n",
        "106": "    assertEquals(GREATEST, SignedBytes.max(GREATEST));\n",
        "107": "    assertEquals((byte) 127, SignedBytes.max(\n",
        "108": "        (byte) 0, (byte) -128, (byte) -1, (byte) 127, (byte) 1));\n",
        "109": "  }\n",
        "110": "\n",
        "111": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "112": "  public void testMin_noArgs() {\n",
        "113": "    try {\n",
        "114": "      SignedBytes.min();\n",
        "115": "      fail();\n",
        "116": "    } catch (IllegalArgumentException expected) {\n",
        "117": "    }\n",
        "118": "  }\n",
        "119": "\n",
        "120": "  public void testMin() {\n",
        "121": "    assertEquals(LEAST, SignedBytes.min(LEAST));\n",
        "122": "    assertEquals(GREATEST, SignedBytes.min(GREATEST));\n",
        "123": "    assertEquals((byte) -128, SignedBytes.min(\n",
        "124": "        (byte) 0, (byte) -128, (byte) -1, (byte) 127, (byte) 1));\n",
        "125": "  }\n",
        "126": "\n",
        "127": "  public void testJoin() {\n",
        "128": "    assertEquals(\"\", SignedBytes.join(\",\", EMPTY));\n",
        "129": "    assertEquals(\"1\", SignedBytes.join(\",\", ARRAY1));\n",
        "130": "    assertEquals(\"1,2\", SignedBytes.join(\",\", (byte) 1, (byte) 2));\n",
        "131": "    assertEquals(\"123\", SignedBytes.join(\"\", (byte) 1, (byte) 2, (byte) 3));\n",
        "132": "    assertEquals(\"-128,-1\", SignedBytes.join(\",\", (byte) -128, (byte) -1));\n",
        "133": "  }\n",
        "134": "\n",
        "135": "  public void testLexicographicalComparator() {\n",
        "136": "    List<byte[]> ordered = Arrays.asList(\n",
        "137": "        new byte[] {},\n",
        "138": "        new byte[] {LEAST},\n",
        "139": "        new byte[] {LEAST, LEAST},\n",
        "140": "        new byte[] {LEAST, (byte) 1},\n",
        "141": "        new byte[] {(byte) 1},\n",
        "142": "        new byte[] {(byte) 1, LEAST},\n",
        "143": "        new byte[] {GREATEST, GREATEST - (byte) 1},\n",
        "144": "        new byte[] {GREATEST, GREATEST},\n",
        "145": "        new byte[] {GREATEST, GREATEST, GREATEST});\n",
        "146": "\n",
        "147": "    Comparator<byte[]> comparator = SignedBytes.lexicographicalComparator();\n",
        "148": "    Helpers.testComparator(comparator, ordered);\n",
        "149": "  }\n",
        "150": "}\n",
        "151": "\n"
    }
}