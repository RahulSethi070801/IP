{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.primitives;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "import static java.lang.Double.NaN;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import com.google.common.base.Converter;\n",
        "24": "import com.google.common.collect.testing.Helpers;\n",
        "25": "\n",
        "26": "import junit.framework.TestCase;\n",
        "27": "\n",
        "28": "import java.util.Arrays;\n",
        "29": "import java.util.Collection;\n",
        "30": "import java.util.Collections;\n",
        "31": "import java.util.Comparator;\n",
        "32": "import java.util.List;\n",
        "33": "\n",
        "34": "/**\n",
        "35": " * Unit test for {@link Doubles}.\n",
        "36": " *\n",
        "37": " * @author Kevin Bourrillion\n",
        "38": " */\n",
        "39": "@GwtCompatible(emulated = true)\n",
        "40": "@SuppressWarnings(\"cast\") // redundant casts are intentional and harmless\n",
        "41": "public class DoublesTest extends TestCase {\n",
        "42": "  private static final double[] EMPTY = {};\n",
        "43": "  private static final double[] ARRAY1 = {(double) 1};\n",
        "44": "  private static final double[] ARRAY234\n",
        "45": "      = {(double) 2, (double) 3, (double) 4};\n",
        "46": "\n",
        "47": "  private static final double LEAST = Double.NEGATIVE_INFINITY;\n",
        "48": "  private static final double GREATEST = Double.POSITIVE_INFINITY;\n",
        "49": "\n",
        "50": "  private static final double[] NUMBERS = new double[] {\n",
        "51": "      LEAST, -Double.MAX_VALUE, -1.0, -0.5, -0.1, -0.0, 0.0, 0.1, 0.5, 1.0,\n",
        "52": "      Double.MAX_VALUE, GREATEST, Double.MIN_NORMAL, -Double.MIN_NORMAL,\n",
        "53": "      Double.MIN_VALUE, -Double.MIN_VALUE, Integer.MIN_VALUE,\n",
        "54": "      Integer.MAX_VALUE, Long.MIN_VALUE, Long.MAX_VALUE\n",
        "55": "  };\n",
        "56": "\n",
        "57": "  private static final double[] VALUES\n",
        "58": "      = Doubles.concat(NUMBERS, new double[] {NaN});\n",
        "59": "\n",
        "60": "  public void testHashCode() {\n",
        "61": "    for (double value : VALUES) {\n",
        "62": "      assertEquals(((Double) value).hashCode(), Doubles.hashCode(value));\n",
        "63": "    }\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  public void testIsFinite() {\n",
        "67": "    for (double value : NUMBERS) {\n",
        "68": "      assertEquals(!(Double.isNaN(value) || Double.isInfinite(value)), Doubles.isFinite(value));\n",
        "69": "    }\n",
        "70": "  }\n",
        "71": "\n",
        "72": "  public void testCompare() {\n",
        "73": "    for (double x : VALUES) {\n",
        "74": "      for (double y : VALUES) {\n",
        "75": "        // note: spec requires only that the sign is the same\n",
        "76": "        assertEquals(x + \", \" + y,\n",
        "77": "                     Double.valueOf(x).compareTo(y),\n",
        "78": "                     Doubles.compare(x, y));\n",
        "79": "      }\n",
        "80": "    }\n",
        "81": "  }\n",
        "82": "\n",
        "83": "  public void testContains() {\n",
        "84": "    assertFalse(Doubles.contains(EMPTY, (double) 1));\n",
        "85": "    assertFalse(Doubles.contains(ARRAY1, (double) 2));\n",
        "86": "    assertFalse(Doubles.contains(ARRAY234, (double) 1));\n",
        "87": "    assertTrue(Doubles.contains(new double[] {(double) -1}, (double) -1));\n",
        "88": "    assertTrue(Doubles.contains(ARRAY234, (double) 2));\n",
        "89": "    assertTrue(Doubles.contains(ARRAY234, (double) 3));\n",
        "90": "    assertTrue(Doubles.contains(ARRAY234, (double) 4));\n",
        "91": "\n",
        "92": "    for (double value : NUMBERS) {\n",
        "93": "      assertTrue(\"\" + value,\n",
        "94": "          Doubles.contains(new double[] {5.0, value}, value));\n",
        "95": "    }\n",
        "96": "    assertFalse(Doubles.contains(new double[] {5.0, NaN}, NaN));\n",
        "97": "  }\n",
        "98": "\n",
        "99": "  public void testIndexOf() {\n",
        "100": "    assertEquals(-1, Doubles.indexOf(EMPTY, (double) 1));\n",
        "101": "    assertEquals(-1, Doubles.indexOf(ARRAY1, (double) 2));\n",
        "102": "    assertEquals(-1, Doubles.indexOf(ARRAY234, (double) 1));\n",
        "103": "    assertEquals(0, Doubles.indexOf(\n",
        "104": "        new double[] {(double) -1}, (double) -1));\n",
        "105": "    assertEquals(0, Doubles.indexOf(ARRAY234, (double) 2));\n",
        "106": "    assertEquals(1, Doubles.indexOf(ARRAY234, (double) 3));\n",
        "107": "    assertEquals(2, Doubles.indexOf(ARRAY234, (double) 4));\n",
        "108": "    assertEquals(1, Doubles.indexOf(\n",
        "109": "        new double[] { (double) 2, (double) 3, (double) 2, (double) 3 },\n",
        "110": "        (double) 3));\n",
        "111": "\n",
        "112": "    for (double value : NUMBERS) {\n",
        "113": "      assertEquals(\"\" + value,\n",
        "114": "          1, Doubles.indexOf(new double[] {5.0, value}, value));\n",
        "115": "    }\n",
        "116": "    assertEquals(-1, Doubles.indexOf(new double[] {5.0, NaN}, NaN));\n",
        "117": "  }\n",
        "118": "\n",
        "119": "  public void testIndexOf_arrayTarget() {\n",
        "120": "    assertEquals(0, Doubles.indexOf(EMPTY, EMPTY));\n",
        "121": "    assertEquals(0, Doubles.indexOf(ARRAY234, EMPTY));\n",
        "122": "    assertEquals(-1, Doubles.indexOf(EMPTY, ARRAY234));\n",
        "123": "    assertEquals(-1, Doubles.indexOf(ARRAY234, ARRAY1));\n",
        "124": "    assertEquals(-1, Doubles.indexOf(ARRAY1, ARRAY234));\n",
        "125": "    assertEquals(0, Doubles.indexOf(ARRAY1, ARRAY1));\n",
        "126": "    assertEquals(0, Doubles.indexOf(ARRAY234, ARRAY234));\n",
        "127": "    assertEquals(0, Doubles.indexOf(\n",
        "128": "        ARRAY234, new double[] { (double) 2, (double) 3 }));\n",
        "129": "    assertEquals(1, Doubles.indexOf(\n",
        "130": "        ARRAY234, new double[] { (double) 3, (double) 4 }));\n",
        "131": "    assertEquals(1, Doubles.indexOf(ARRAY234, new double[] { (double) 3 }));\n",
        "132": "    assertEquals(2, Doubles.indexOf(ARRAY234, new double[] { (double) 4 }));\n",
        "133": "    assertEquals(1, Doubles.indexOf(new double[] { (double) 2, (double) 3,\n",
        "134": "        (double) 3, (double) 3, (double) 3 },\n",
        "135": "        new double[] { (double) 3 }\n",
        "136": "    ));\n",
        "137": "    assertEquals(2, Doubles.indexOf(\n",
        "138": "        new double[] { (double) 2, (double) 3, (double) 2,\n",
        "139": "            (double) 3, (double) 4, (double) 2, (double) 3},\n",
        "140": "        new double[] { (double) 2, (double) 3, (double) 4}\n",
        "141": "    ));\n",
        "142": "    assertEquals(1, Doubles.indexOf(\n",
        "143": "        new double[] { (double) 2, (double) 2, (double) 3,\n",
        "144": "            (double) 4, (double) 2, (double) 3, (double) 4},\n",
        "145": "        new double[] { (double) 2, (double) 3, (double) 4}\n",
        "146": "    ));\n",
        "147": "    assertEquals(-1, Doubles.indexOf(\n",
        "148": "        new double[] { (double) 4, (double) 3, (double) 2},\n",
        "149": "        new double[] { (double) 2, (double) 3, (double) 4}\n",
        "150": "    ));\n",
        "151": "\n",
        "152": "    for (double value : NUMBERS) {\n",
        "153": "      assertEquals(\"\" + value, 1, Doubles.indexOf(\n",
        "154": "          new double[] {5.0, value, value, 5.0}, new double[] {value, value}));\n",
        "155": "    }\n",
        "156": "    assertEquals(-1, Doubles.indexOf(\n",
        "157": "        new double[] {5.0, NaN, NaN, 5.0}, new double[] {NaN, NaN}));\n",
        "158": "  }\n",
        "159": "\n",
        "160": "  public void testLastIndexOf() {\n",
        "161": "    assertEquals(-1, Doubles.lastIndexOf(EMPTY, (double) 1));\n",
        "162": "    assertEquals(-1, Doubles.lastIndexOf(ARRAY1, (double) 2));\n",
        "163": "    assertEquals(-1, Doubles.lastIndexOf(ARRAY234, (double) 1));\n",
        "164": "    assertEquals(0, Doubles.lastIndexOf(\n",
        "165": "        new double[] {(double) -1}, (double) -1));\n",
        "166": "    assertEquals(0, Doubles.lastIndexOf(ARRAY234, (double) 2));\n",
        "167": "    assertEquals(1, Doubles.lastIndexOf(ARRAY234, (double) 3));\n",
        "168": "    assertEquals(2, Doubles.lastIndexOf(ARRAY234, (double) 4));\n",
        "169": "    assertEquals(3, Doubles.lastIndexOf(\n",
        "170": "        new double[] { (double) 2, (double) 3, (double) 2, (double) 3 },\n",
        "171": "        (double) 3));\n",
        "172": "\n",
        "173": "    for (double value : NUMBERS) {\n",
        "174": "      assertEquals(\"\" + value,\n",
        "175": "          0, Doubles.lastIndexOf(new double[] {value, 5.0}, value));\n",
        "176": "    }\n",
        "177": "    assertEquals(-1, Doubles.lastIndexOf(new double[] {NaN, 5.0}, NaN));\n",
        "178": "  }\n",
        "179": "\n",
        "180": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "181": "  public void testMax_noArgs() {\n",
        "182": "    try {\n",
        "183": "      Doubles.max();\n",
        "184": "      fail();\n",
        "185": "    } catch (IllegalArgumentException expected) {\n",
        "186": "    }\n",
        "187": "  }\n",
        "188": "\n",
        "189": "  public void testMax() {\n",
        "190": "    assertEquals(LEAST, Doubles.max(LEAST));\n",
        "191": "    assertEquals(GREATEST, Doubles.max(GREATEST));\n",
        "192": "    assertEquals((double) 9, Doubles.max(\n",
        "193": "        (double) 8, (double) 6, (double) 7,\n",
        "194": "        (double) 5, (double) 3, (double) 0, (double) 9));\n",
        "195": "\n",
        "196": "    assertEquals(0.0, Doubles.max(-0.0, 0.0));\n",
        "197": "    assertEquals(0.0, Doubles.max(0.0, -0.0));\n",
        "198": "    assertEquals(GREATEST, Doubles.max(NUMBERS));\n",
        "199": "    assertTrue(Double.isNaN(Doubles.max(VALUES)));\n",
        "200": "  }\n",
        "201": "\n",
        "202": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "203": "  public void testMin_noArgs() {\n",
        "204": "    try {\n",
        "205": "      Doubles.min();\n",
        "206": "      fail();\n",
        "207": "    } catch (IllegalArgumentException expected) {\n",
        "208": "    }\n",
        "209": "  }\n",
        "210": "\n",
        "211": "  public void testMin() {\n",
        "212": "    assertEquals(LEAST, Doubles.min(LEAST));\n",
        "213": "    assertEquals(GREATEST, Doubles.min(GREATEST));\n",
        "214": "    assertEquals((double) 0, Doubles.min(\n",
        "215": "        (double) 8, (double) 6, (double) 7,\n",
        "216": "        (double) 5, (double) 3, (double) 0, (double) 9));\n",
        "217": "\n",
        "218": "    assertEquals(-0.0, Doubles.min(-0.0, 0.0));\n",
        "219": "    assertEquals(-0.0, Doubles.min(0.0, -0.0));\n",
        "220": "    assertEquals(LEAST, Doubles.min(NUMBERS));\n",
        "221": "    assertTrue(Double.isNaN(Doubles.min(VALUES)));\n",
        "222": "  }\n",
        "223": "\n",
        "224": "  public void testConcat() {\n",
        "225": "    assertTrue(Arrays.equals(EMPTY, Doubles.concat()));\n",
        "226": "    assertTrue(Arrays.equals(EMPTY, Doubles.concat(EMPTY)));\n",
        "227": "    assertTrue(Arrays.equals(EMPTY, Doubles.concat(EMPTY, EMPTY, EMPTY)));\n",
        "228": "    assertTrue(Arrays.equals(ARRAY1, Doubles.concat(ARRAY1)));\n",
        "229": "    assertNotSame(ARRAY1, Doubles.concat(ARRAY1));\n",
        "230": "    assertTrue(Arrays.equals(ARRAY1, Doubles.concat(EMPTY, ARRAY1, EMPTY)));\n",
        "231": "    assertTrue(Arrays.equals(\n",
        "232": "        new double[] {(double) 1, (double) 1, (double) 1},\n",
        "233": "        Doubles.concat(ARRAY1, ARRAY1, ARRAY1)));\n",
        "234": "    assertTrue(Arrays.equals(\n",
        "235": "        new double[] {(double) 1, (double) 2, (double) 3, (double) 4},\n",
        "236": "        Doubles.concat(ARRAY1, ARRAY234)));\n",
        "237": "  }\n",
        "238": "\n",
        "239": "  public void testEnsureCapacity() {\n",
        "240": "    assertSame(EMPTY, Doubles.ensureCapacity(EMPTY, 0, 1));\n",
        "241": "    assertSame(ARRAY1, Doubles.ensureCapacity(ARRAY1, 0, 1));\n",
        "242": "    assertSame(ARRAY1, Doubles.ensureCapacity(ARRAY1, 1, 1));\n",
        "243": "    assertTrue(Arrays.equals(\n",
        "244": "        new double[] {(double) 1, (double) 0, (double) 0},\n",
        "245": "        Doubles.ensureCapacity(ARRAY1, 2, 1)));\n",
        "246": "  }\n",
        "247": "\n",
        "248": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "249": "  public void testEnsureCapacity_fail() {\n",
        "250": "    try {\n",
        "251": "      Doubles.ensureCapacity(ARRAY1, -1, 1);\n",
        "252": "      fail();\n",
        "253": "    } catch (IllegalArgumentException expected) {\n",
        "254": "    }\n",
        "255": "    try {\n",
        "256": "      // notice that this should even fail when no growth was needed\n",
        "257": "      Doubles.ensureCapacity(ARRAY1, 1, -1);\n",
        "258": "      fail();\n",
        "259": "    } catch (IllegalArgumentException expected) {\n",
        "260": "    }\n",
        "261": "  }\n",
        "262": "\n",
        "263": "  public void testJoinNonTrivialDoubles() {\n",
        "264": "    assertEquals(\"\", Doubles.join(\",\", EMPTY));\n",
        "265": "    assertEquals(\"1.2\", Doubles.join(\",\", 1.2));\n",
        "266": "    assertEquals(\"1.3,2.4\", Doubles.join(\",\", 1.3, 2.4));\n",
        "267": "    assertEquals(\"1.42.53.6\", Doubles.join(\"\", 1.4, 2.5, 3.6));\n",
        "268": "  }\n",
        "269": "\n",
        "270": "  public void testLexicographicalComparator() {\n",
        "271": "    List<double[]> ordered = Arrays.asList(\n",
        "272": "        new double[] {},\n",
        "273": "        new double[] {LEAST},\n",
        "274": "        new double[] {LEAST, LEAST},\n",
        "275": "        new double[] {LEAST, (double) 1},\n",
        "276": "        new double[] {(double) 1},\n",
        "277": "        new double[] {(double) 1, LEAST},\n",
        "278": "        new double[] {GREATEST, Double.MAX_VALUE},\n",
        "279": "        new double[] {GREATEST, GREATEST},\n",
        "280": "        new double[] {GREATEST, GREATEST, GREATEST});\n",
        "281": "\n",
        "282": "    Comparator<double[]> comparator = Doubles.lexicographicalComparator();\n",
        "283": "    Helpers.testComparator(comparator, ordered);\n",
        "284": "  }\n",
        "285": "\n",
        "286": "  public void testToArray() {\n",
        "287": "    // need explicit type parameter to avoid javac warning!?\n",
        "288": "    List<Double> none = Arrays.<Double>asList();\n",
        "289": "    assertTrue(Arrays.equals(EMPTY, Doubles.toArray(none)));\n",
        "290": "\n",
        "291": "    List<Double> one = Arrays.asList((double) 1);\n",
        "292": "    assertTrue(Arrays.equals(ARRAY1, Doubles.toArray(one)));\n",
        "293": "\n",
        "294": "    double[] array = {(double) 0, (double) 1, Math.PI};\n",
        "295": "\n",
        "296": "    List<Double> three = Arrays.asList((double) 0, (double) 1, Math.PI);\n",
        "297": "    assertTrue(Arrays.equals(array, Doubles.toArray(three)));\n",
        "298": "\n",
        "299": "    assertTrue(Arrays.equals(array, Doubles.toArray(Doubles.asList(array))));\n",
        "300": "  }\n",
        "301": "\n",
        "302": "  public void testToArray_threadSafe() {\n",
        "303": "    for (int delta : new int[] { +1, 0, -1 }) {\n",
        "304": "      for (int i = 0; i < VALUES.length; i++) {\n",
        "305": "        List<Double> list = Doubles.asList(VALUES).subList(0, i);\n",
        "306": "        Collection<Double> misleadingSize =\n",
        "307": "            Helpers.misleadingSizeCollection(delta);\n",
        "308": "        misleadingSize.addAll(list);\n",
        "309": "        double[] arr = Doubles.toArray(misleadingSize);\n",
        "310": "        assertEquals(i, arr.length);\n",
        "311": "        for (int j = 0; j < i; j++) {\n",
        "312": "          assertEquals(VALUES[j], arr[j]);\n",
        "313": "        }\n",
        "314": "      }\n",
        "315": "    }\n",
        "316": "  }\n",
        "317": "\n",
        "318": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "319": "  public void testToArray_withNull() {\n",
        "320": "    List<Double> list = Arrays.asList((double) 0, (double) 1, null);\n",
        "321": "    try {\n",
        "322": "      Doubles.toArray(list);\n",
        "323": "      fail();\n",
        "324": "    } catch (NullPointerException expected) {\n",
        "325": "    }\n",
        "326": "  }\n",
        "327": "\n",
        "328": "  public void testToArray_withConversion() {\n",
        "329": "    double[] array = {(double) 0, (double) 1, (double) 2};\n",
        "330": "\n",
        "331": "    List<Byte> bytes = Arrays.asList((byte) 0, (byte) 1, (byte) 2);\n",
        "332": "    List<Short> shorts = Arrays.asList((short) 0, (short) 1, (short) 2);\n",
        "333": "    List<Integer> ints = Arrays.asList(0, 1, 2);\n",
        "334": "    List<Float> floats = Arrays.asList((float) 0, (float) 1, (float) 2);\n",
        "335": "    List<Long> longs = Arrays.asList((long) 0, (long) 1, (long) 2);\n",
        "336": "    List<Double> doubles = Arrays.asList((double) 0, (double) 1, (double) 2);\n",
        "337": "\n",
        "338": "    assertTrue(Arrays.equals(array, Doubles.toArray(bytes)));\n",
        "339": "    assertTrue(Arrays.equals(array, Doubles.toArray(shorts)));\n",
        "340": "    assertTrue(Arrays.equals(array, Doubles.toArray(ints)));\n",
        "341": "    assertTrue(Arrays.equals(array, Doubles.toArray(floats)));\n",
        "342": "    assertTrue(Arrays.equals(array, Doubles.toArray(longs)));\n",
        "343": "    assertTrue(Arrays.equals(array, Doubles.toArray(doubles)));\n",
        "344": "  }\n",
        "345": "\n",
        "346": "  public void testAsList_isAView() {\n",
        "347": "    double[] array = {(double) 0, (double) 1};\n",
        "348": "    List<Double> list = Doubles.asList(array);\n",
        "349": "    list.set(0, (double) 2);\n",
        "350": "    assertTrue(Arrays.equals(new double[] {(double) 2, (double) 1}, array));\n",
        "351": "    array[1] = (double) 3;\n",
        "352": "    assertThat(list).containsExactly((double) 2, (double) 3).inOrder();\n",
        "353": "  }\n",
        "354": "\n",
        "355": "  public void testAsList_toArray_roundTrip() {\n",
        "356": "    double[] array = { (double) 0, (double) 1, (double) 2 };\n",
        "357": "    List<Double> list = Doubles.asList(array);\n",
        "358": "    double[] newArray = Doubles.toArray(list);\n",
        "359": "\n",
        "360": "    // Make sure it returned a copy\n",
        "361": "    list.set(0, (double) 4);\n",
        "362": "    assertTrue(Arrays.equals(\n",
        "363": "        new double[] { (double) 0, (double) 1, (double) 2 }, newArray));\n",
        "364": "    newArray[1] = (double) 5;\n",
        "365": "    assertEquals((double) 1, (double) list.get(1));\n",
        "366": "  }\n",
        "367": "\n",
        "368": "  // This test stems from a real bug found by andrewk\n",
        "369": "  public void testAsList_subList_toArray_roundTrip() {\n",
        "370": "    double[] array = { (double) 0, (double) 1, (double) 2, (double) 3 };\n",
        "371": "    List<Double> list = Doubles.asList(array);\n",
        "372": "    assertTrue(Arrays.equals(new double[] { (double) 1, (double) 2 },\n",
        "373": "        Doubles.toArray(list.subList(1, 3))));\n",
        "374": "    assertTrue(Arrays.equals(new double[] {},\n",
        "375": "        Doubles.toArray(list.subList(2, 2))));\n",
        "376": "  }\n",
        "377": "\n",
        "378": "  public void testAsListEmpty() {\n",
        "379": "    assertSame(Collections.emptyList(), Doubles.asList(EMPTY));\n",
        "380": "  }\n",
        "381": "\n",
        "382": "  /**\n",
        "383": "   * A reference implementation for {@code tryParse} that just catches the exception from\n",
        "384": "   * {@link Double#valueOf}.\n",
        "385": "   */\n",
        "386": "  private static Double referenceTryParse(String input) {\n",
        "387": "    if (input.trim().length() < input.length()) {\n",
        "388": "      return null;\n",
        "389": "    }\n",
        "390": "    try {\n",
        "391": "      return Double.valueOf(input);\n",
        "392": "    } catch (NumberFormatException e) {\n",
        "393": "      return null;\n",
        "394": "    }\n",
        "395": "  }\n",
        "396": "\n",
        "397": "  private static final String[] BAD_TRY_PARSE_INPUTS =\n",
        "398": "    { \"\", \"+-\", \"+-0\", \" 5\", \"32 \", \" 55 \", \"infinity\", \"POSITIVE_INFINITY\", \"0x9A\", \"0x9A.bE-5\",\n",
        "399": "      \".\", \".e5\", \"NaNd\", \"InfinityF\" };\n",
        "400": "\n",
        "401": "  public void testStringConverter_convert() {\n",
        "402": "    Converter<String, Double> converter = Doubles.stringConverter();\n",
        "403": "    assertEquals((Double) 1.0, converter.convert(\"1.0\"));\n",
        "404": "    assertEquals((Double) 0.0, converter.convert(\"0.0\"));\n",
        "405": "    assertEquals((Double) (-1.0), converter.convert(\"-1.0\"));\n",
        "406": "    assertEquals((Double) 1.0, converter.convert(\"1\"));\n",
        "407": "    assertEquals((Double) 0.0, converter.convert(\"0\"));\n",
        "408": "    assertEquals((Double) (-1.0), converter.convert(\"-1\"));\n",
        "409": "    assertEquals((Double) 1e6, converter.convert(\"1e6\"));\n",
        "410": "    assertEquals((Double) 1e-6, converter.convert(\"1e-6\"));\n",
        "411": "  }\n",
        "412": "\n",
        "413": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "414": "  public void testStringConverter_convertError() {\n",
        "415": "    try {\n",
        "416": "      Doubles.stringConverter().convert(\"notanumber\");\n",
        "417": "      fail();\n",
        "418": "    } catch (NumberFormatException expected) {\n",
        "419": "    }\n",
        "420": "  }\n",
        "421": "\n",
        "422": "  public void testStringConverter_nullConversions() {\n",
        "423": "    assertNull(Doubles.stringConverter().convert(null));\n",
        "424": "    assertNull(Doubles.stringConverter().reverse().convert(null));\n",
        "425": "  }\n",
        "426": "}\n",
        "427": "\n"
    }
}