{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2009 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.cache;\n",
        "18": "\n",
        "19": "import static com.google.common.cache.TestingCacheLoaders.constantLoader;\n",
        "20": "import static com.google.common.cache.TestingCacheLoaders.identityLoader;\n",
        "21": "import static com.google.common.cache.TestingRemovalListeners.countingRemovalListener;\n",
        "22": "import static com.google.common.cache.TestingRemovalListeners.nullRemovalListener;\n",
        "23": "import static com.google.common.truth.Truth.assertThat;\n",
        "24": "import static java.util.concurrent.TimeUnit.NANOSECONDS;\n",
        "25": "import static java.util.concurrent.TimeUnit.SECONDS;\n",
        "26": "\n",
        "27": "import com.google.common.annotations.GwtCompatible;\n",
        "28": "import com.google.common.base.Ticker;\n",
        "29": "\n",
        "30": "import junit.framework.TestCase;\n",
        "31": "\n",
        "32": "import java.util.Set;\n",
        "33": "\n",
        "34": "/**\n",
        "35": " * Unit tests for CacheBuilder.\n",
        "36": " */\n",
        "37": "@GwtCompatible(emulated = true)\n",
        "38": "public class CacheBuilderTest extends TestCase {\n",
        "39": "\n",
        "40": "  public void testNewBuilder() {\n",
        "41": "    CacheLoader<Object, Integer> loader = constantLoader(1);\n",
        "42": "\n",
        "43": "    LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n",
        "44": "        .removalListener(countingRemovalListener())\n",
        "45": "        .build(loader);\n",
        "46": "\n",
        "47": "    assertEquals(Integer.valueOf(1), cache.getUnchecked(\"one\"));\n",
        "48": "    assertEquals(1, cache.size());\n",
        "49": "  }\n",
        "50": "\n",
        "51": "  public void testInitialCapacity_negative() {\n",
        "52": "    CacheBuilder<Object, Object> builder = new CacheBuilder<Object, Object>();\n",
        "53": "    try {\n",
        "54": "      builder.initialCapacity(-1);\n",
        "55": "      fail();\n",
        "56": "    } catch (IllegalArgumentException expected) {}\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  public void testInitialCapacity_setTwice() {\n",
        "60": "    CacheBuilder<Object, Object> builder = new CacheBuilder<Object, Object>().initialCapacity(16);\n",
        "61": "    try {\n",
        "62": "      // even to the same value is not allowed\n",
        "63": "      builder.initialCapacity(16);\n",
        "64": "      fail();\n",
        "65": "    } catch (IllegalStateException expected) {}\n",
        "66": "  }\n",
        "67": "\n",
        "68": "  public void testInitialCapacity_large() {\n",
        "69": "    CacheBuilder.newBuilder().initialCapacity(Integer.MAX_VALUE);\n",
        "70": "    // that the builder didn't blow up is enough;\n",
        "71": "    // don't actually create this monster!\n",
        "72": "  }\n",
        "73": "\n",
        "74": "  public void testConcurrencyLevel_zero() {\n",
        "75": "    CacheBuilder<Object, Object> builder = new CacheBuilder<Object, Object>();\n",
        "76": "    try {\n",
        "77": "      builder.concurrencyLevel(0);\n",
        "78": "      fail();\n",
        "79": "    } catch (IllegalArgumentException expected) {}\n",
        "80": "  }\n",
        "81": "\n",
        "82": "  public void testConcurrencyLevel_setTwice() {\n",
        "83": "    CacheBuilder<Object, Object> builder = new CacheBuilder<Object, Object>().concurrencyLevel(16);\n",
        "84": "    try {\n",
        "85": "      // even to the same value is not allowed\n",
        "86": "      builder.concurrencyLevel(16);\n",
        "87": "      fail();\n",
        "88": "    } catch (IllegalStateException expected) {}\n",
        "89": "  }\n",
        "90": "\n",
        "91": "  public void testConcurrencyLevel_large() {\n",
        "92": "    CacheBuilder.newBuilder().concurrencyLevel(Integer.MAX_VALUE);\n",
        "93": "    // don't actually build this beast\n",
        "94": "  }\n",
        "95": "\n",
        "96": "  public void testMaximumSize_negative() {\n",
        "97": "    CacheBuilder<Object, Object> builder = new CacheBuilder<Object, Object>();\n",
        "98": "    try {\n",
        "99": "      builder.maximumSize(-1);\n",
        "100": "      fail();\n",
        "101": "    } catch (IllegalArgumentException expected) {}\n",
        "102": "  }\n",
        "103": "\n",
        "104": "  public void testMaximumSize_setTwice() {\n",
        "105": "    CacheBuilder<Object, Object> builder = new CacheBuilder<Object, Object>().maximumSize(16);\n",
        "106": "    try {\n",
        "107": "      // even to the same value is not allowed\n",
        "108": "      builder.maximumSize(16);\n",
        "109": "      fail();\n",
        "110": "    } catch (IllegalStateException expected) {}\n",
        "111": "  }\n",
        "112": "\n",
        "113": "  public void testTimeToLive_negative() {\n",
        "114": "    CacheBuilder<Object, Object> builder = new CacheBuilder<Object, Object>();\n",
        "115": "    try {\n",
        "116": "      builder.expireAfterWrite(-1, SECONDS);\n",
        "117": "      fail();\n",
        "118": "    } catch (IllegalArgumentException expected) {}\n",
        "119": "  }\n",
        "120": "\n",
        "121": "  public void testTimeToLive_small() {\n",
        "122": "    CacheBuilder.newBuilder()\n",
        "123": "        .expireAfterWrite(1, NANOSECONDS)\n",
        "124": "        .build(identityLoader());\n",
        "125": "    // well, it didn't blow up.\n",
        "126": "  }\n",
        "127": "\n",
        "128": "  public void testTimeToLive_setTwice() {\n",
        "129": "    CacheBuilder<Object, Object> builder =\n",
        "130": "        new CacheBuilder<Object, Object>().expireAfterWrite(3600, SECONDS);\n",
        "131": "    try {\n",
        "132": "      // even to the same value is not allowed\n",
        "133": "      builder.expireAfterWrite(3600, SECONDS);\n",
        "134": "      fail();\n",
        "135": "    } catch (IllegalStateException expected) {}\n",
        "136": "  }\n",
        "137": "\n",
        "138": "  public void testTimeToIdle_negative() {\n",
        "139": "    CacheBuilder<Object, Object> builder = new CacheBuilder<Object, Object>();\n",
        "140": "    try {\n",
        "141": "      builder.expireAfterAccess(-1, SECONDS);\n",
        "142": "      fail();\n",
        "143": "    } catch (IllegalArgumentException expected) {}\n",
        "144": "  }\n",
        "145": "\n",
        "146": "  public void testTimeToIdle_small() {\n",
        "147": "    CacheBuilder.newBuilder()\n",
        "148": "        .expireAfterAccess(1, NANOSECONDS)\n",
        "149": "        .build(identityLoader());\n",
        "150": "    // well, it didn't blow up.\n",
        "151": "  }\n",
        "152": "\n",
        "153": "  public void testTimeToIdle_setTwice() {\n",
        "154": "    CacheBuilder<Object, Object> builder =\n",
        "155": "        new CacheBuilder<Object, Object>().expireAfterAccess(3600, SECONDS);\n",
        "156": "    try {\n",
        "157": "      // even to the same value is not allowed\n",
        "158": "      builder.expireAfterAccess(3600, SECONDS);\n",
        "159": "      fail();\n",
        "160": "    } catch (IllegalStateException expected) {}\n",
        "161": "  }\n",
        "162": "\n",
        "163": "  public void testTimeToIdleAndToLive() {\n",
        "164": "    CacheBuilder.newBuilder()\n",
        "165": "        .expireAfterWrite(1, NANOSECONDS)\n",
        "166": "        .expireAfterAccess(1, NANOSECONDS)\n",
        "167": "        .build(identityLoader());\n",
        "168": "    // well, it didn't blow up.\n",
        "169": "  }\n",
        "170": "\n",
        "171": "  public void testTicker_setTwice() {\n",
        "172": "    Ticker testTicker = Ticker.systemTicker();\n",
        "173": "    CacheBuilder<Object, Object> builder =\n",
        "174": "        new CacheBuilder<Object, Object>().ticker(testTicker);\n",
        "175": "    try {\n",
        "176": "      // even to the same instance is not allowed\n",
        "177": "      builder.ticker(testTicker);\n",
        "178": "      fail();\n",
        "179": "    } catch (IllegalStateException expected) {}\n",
        "180": "  }\n",
        "181": "\n",
        "182": "  public void testRemovalListener_setTwice() {\n",
        "183": "    RemovalListener<Object, Object> testListener = nullRemovalListener();\n",
        "184": "    CacheBuilder<Object, Object> builder =\n",
        "185": "        new CacheBuilder<Object, Object>().removalListener(testListener);\n",
        "186": "    try {\n",
        "187": "      // even to the same instance is not allowed\n",
        "188": "      builder = builder.removalListener(testListener);\n",
        "189": "      fail();\n",
        "190": "    } catch (IllegalStateException expected) {}\n",
        "191": "  }\n",
        "192": "\n",
        "193": "  public void testValuesIsNotASet() {\n",
        "194": "    assertThat(new CacheBuilder<Object, Object>().build().asMap().values())\n",
        "195": "        .isNotInstanceOf(Set.class);\n",
        "196": "  }\n",
        "197": "\n",
        "198": "  // \"Basher tests\", where we throw a bunch of stuff at a LoadingCache and check basic invariants.\n",
        "199": "}\n",
        "200": "\n"
    }
}