{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.testers;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionFeature.ALLOWS_NULL_VALUES;\n",
        "20": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "21": "import static com.google.common.collect.testing.features.ListFeature.SUPPORTS_SET;\n",
        "22": "\n",
        "23": "import com.google.common.annotations.GwtCompatible;\n",
        "24": "import com.google.common.collect.testing.features.CollectionFeature;\n",
        "25": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "26": "import com.google.common.collect.testing.features.ListFeature;\n",
        "27": "\n",
        "28": "/**\n",
        "29": " * A generic JUnit test which tests {@code set()} operations on a list. Can't be\n",
        "30": " * invoked directly; please see\n",
        "31": " * {@link com.google.common.collect.testing.ListTestSuiteBuilder}.\n",
        "32": " *\n",
        "33": " * @author George van den Driessche\n",
        "34": " */\n",
        "35": "@GwtCompatible(emulated = true)\n",
        "36": "public class ListSetTester<E> extends AbstractListTester<E> {\n",
        "37": "  @ListFeature.Require(SUPPORTS_SET)\n",
        "38": "  @CollectionSize.Require(absent = ZERO)\n",
        "39": "  public void testSet() {\n",
        "40": "    doTestSet(e3());\n",
        "41": "  }\n",
        "42": "\n",
        "43": "  @CollectionSize.Require(absent = ZERO)\n",
        "44": "  @CollectionFeature.Require(ALLOWS_NULL_VALUES)\n",
        "45": "  @ListFeature.Require(SUPPORTS_SET)\n",
        "46": "  public void testSet_null() {\n",
        "47": "    doTestSet(null);\n",
        "48": "  }\n",
        "49": "\n",
        "50": "  @CollectionSize.Require(absent = ZERO)\n",
        "51": "  @CollectionFeature.Require(ALLOWS_NULL_VALUES)\n",
        "52": "  @ListFeature.Require(SUPPORTS_SET)\n",
        "53": "  public void testSet_replacingNull() {\n",
        "54": "    E[] elements = createSamplesArray();\n",
        "55": "    int i = aValidIndex();\n",
        "56": "    elements[i] = null;\n",
        "57": "    collection = getSubjectGenerator().create(elements);\n",
        "58": "\n",
        "59": "    doTestSet(e3());\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  private void doTestSet(E newValue) {\n",
        "63": "    int index = aValidIndex();\n",
        "64": "    E initialValue = getList().get(index);\n",
        "65": "    assertEquals(\"set(i, x) should return the old element at position i.\",\n",
        "66": "        initialValue, getList().set(index, newValue));\n",
        "67": "    assertEquals(\"After set(i, x), get(i) should return x\",\n",
        "68": "        newValue, getList().get(index));\n",
        "69": "    assertEquals(\"set() should not change the size of a list.\",\n",
        "70": "        getNumElements(), getList().size());\n",
        "71": "  }\n",
        "72": "\n",
        "73": "  @ListFeature.Require(SUPPORTS_SET)\n",
        "74": "  public void testSet_indexTooLow() {\n",
        "75": "    try {\n",
        "76": "      getList().set(-1, e3());\n",
        "77": "      fail(\"set(-1) should throw IndexOutOfBoundsException\");\n",
        "78": "    } catch (IndexOutOfBoundsException expected) {\n",
        "79": "    }\n",
        "80": "    expectUnchanged();\n",
        "81": "  }\n",
        "82": "\n",
        "83": "  @ListFeature.Require(SUPPORTS_SET)\n",
        "84": "  public void testSet_indexTooHigh() {\n",
        "85": "    int index = getNumElements();\n",
        "86": "    try {\n",
        "87": "      getList().set(index, e3());\n",
        "88": "      fail(\"set(size) should throw IndexOutOfBoundsException\");\n",
        "89": "    } catch (IndexOutOfBoundsException expected) {\n",
        "90": "    }\n",
        "91": "    expectUnchanged();\n",
        "92": "  }\n",
        "93": "\n",
        "94": "  @CollectionSize.Require(absent = ZERO)\n",
        "95": "  @ListFeature.Require(absent = SUPPORTS_SET)\n",
        "96": "  public void testSet_unsupported() {\n",
        "97": "    try {\n",
        "98": "      getList().set(aValidIndex(), e3());\n",
        "99": "      fail(\"set() should throw UnsupportedOperationException\");\n",
        "100": "    } catch (UnsupportedOperationException expected) {\n",
        "101": "    }\n",
        "102": "    expectUnchanged();\n",
        "103": "  }\n",
        "104": "\n",
        "105": "  @CollectionSize.Require(ZERO)\n",
        "106": "  @ListFeature.Require(absent = SUPPORTS_SET)\n",
        "107": "  public void testSet_unsupportedByEmptyList() {\n",
        "108": "    try {\n",
        "109": "      getList().set(0, e3());\n",
        "110": "      fail(\"set() should throw UnsupportedOperationException \"\n",
        "111": "          + \"or IndexOutOfBoundsException\");\n",
        "112": "    } catch (UnsupportedOperationException tolerated) {\n",
        "113": "    } catch (IndexOutOfBoundsException tolerated) {\n",
        "114": "    }\n",
        "115": "    expectUnchanged();\n",
        "116": "  }\n",
        "117": "\n",
        "118": "  @CollectionSize.Require(absent = ZERO)\n",
        "119": "  @ListFeature.Require(SUPPORTS_SET)\n",
        "120": "  @CollectionFeature.Require(absent = ALLOWS_NULL_VALUES)\n",
        "121": "  public void testSet_nullUnsupported() {\n",
        "122": "    try {\n",
        "123": "      getList().set(aValidIndex(), null);\n",
        "124": "      fail(\"set(null) should throw NullPointerException\");\n",
        "125": "    } catch (NullPointerException expected) {\n",
        "126": "    }\n",
        "127": "    expectUnchanged();\n",
        "128": "  }\n",
        "129": "\n",
        "130": "  private int aValidIndex() {\n",
        "131": "    return getList().size() / 2;\n",
        "132": "  }\n",
        "133": "}\n",
        "134": "\n"
    }
}