{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.Iterables.skip;\n",
        "20": "import static com.google.common.collect.Lists.newArrayList;\n",
        "21": "import static com.google.common.collect.Sets.newLinkedHashSet;\n",
        "22": "import static com.google.common.collect.testing.IteratorFeature.UNMODIFIABLE;\n",
        "23": "import static com.google.common.truth.Truth.assertThat;\n",
        "24": "import static java.util.Arrays.asList;\n",
        "25": "import static java.util.Collections.emptyList;\n",
        "26": "\n",
        "27": "import com.google.common.annotations.GwtCompatible;\n",
        "28": "import com.google.common.base.Function;\n",
        "29": "import com.google.common.base.Predicate;\n",
        "30": "import com.google.common.base.Predicates;\n",
        "31": "import com.google.common.collect.testing.IteratorTester;\n",
        "32": "\n",
        "33": "import junit.framework.AssertionFailedError;\n",
        "34": "import junit.framework.TestCase;\n",
        "35": "\n",
        "36": "import java.util.ArrayList;\n",
        "37": "import java.util.Collection;\n",
        "38": "import java.util.Collections;\n",
        "39": "import java.util.Iterator;\n",
        "40": "import java.util.List;\n",
        "41": "import java.util.NoSuchElementException;\n",
        "42": "import java.util.Queue;\n",
        "43": "import java.util.RandomAccess;\n",
        "44": "import java.util.Set;\n",
        "45": "import java.util.SortedSet;\n",
        "46": "import java.util.TreeSet;\n",
        "47": "\n",
        "48": "/**\n",
        "49": " * Unit test for {@code Iterables}.\n",
        "50": " *\n",
        "51": " * @author Kevin Bourrillion\n",
        "52": " * @author Jared Levy\n",
        "53": " */\n",
        "54": "@GwtCompatible(emulated = true)\n",
        "55": "public class IterablesTest extends TestCase {\n",
        "56": "\n",
        "57": "  public void testSize0() {\n",
        "58": "    Iterable<String> iterable = Collections.emptySet();\n",
        "59": "    assertEquals(0, Iterables.size(iterable));\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  public void testSize1Collection() {\n",
        "63": "    Iterable<String> iterable = Collections.singleton(\"a\");\n",
        "64": "    assertEquals(1, Iterables.size(iterable));\n",
        "65": "  }\n",
        "66": "\n",
        "67": "  public void testSize2NonCollection() {\n",
        "68": "    Iterable<Integer> iterable = new Iterable<Integer>() {\n",
        "69": "      @Override\n",
        "70": "      public Iterator<Integer> iterator() {\n",
        "71": "        return asList(0, 1).iterator();\n",
        "72": "      }\n",
        "73": "    };\n",
        "74": "    assertEquals(2, Iterables.size(iterable));\n",
        "75": "  }\n",
        "76": "\n",
        "77": "  @SuppressWarnings(\"serial\")\n",
        "78": "  public void testSize_collection_doesntIterate() {\n",
        "79": "    List<Integer> nums = asList(1, 2, 3, 4, 5);\n",
        "80": "    List<Integer> collection = new ArrayList<Integer>(nums) {\n",
        "81": "      @Override public Iterator<Integer> iterator() {\n",
        "82": "        throw new AssertionFailedError(\"Don't iterate me!\");\n",
        "83": "      }\n",
        "84": "    };\n",
        "85": "    assertEquals(5, Iterables.size(collection));\n",
        "86": "  }\n",
        "87": "\n",
        "88": "  private static Iterable<String> iterable(String... elements) {\n",
        "89": "    final List<String> list = asList(elements);\n",
        "90": "    return new Iterable<String>() {\n",
        "91": "      @Override\n",
        "92": "      public Iterator<String> iterator() {\n",
        "93": "        return list.iterator();\n",
        "94": "      }\n",
        "95": "    };\n",
        "96": "  }\n",
        "97": "\n",
        "98": "  public void test_contains_null_set_yes() {\n",
        "99": "    Iterable<String> set = Sets.newHashSet(\"a\", null, \"b\");\n",
        "100": "    assertTrue(Iterables.contains(set, null));\n",
        "101": "  }\n",
        "102": "\n",
        "103": "  public void test_contains_null_set_no() {\n",
        "104": "    Iterable<String> set = Sets.newHashSet(\"a\", \"b\");\n",
        "105": "    assertFalse(Iterables.contains(set, null));\n",
        "106": "  }\n",
        "107": "\n",
        "108": "  public void test_contains_null_iterable_yes() {\n",
        "109": "    Iterable<String> set = iterable(\"a\", null, \"b\");\n",
        "110": "    assertTrue(Iterables.contains(set, null));\n",
        "111": "  }\n",
        "112": "\n",
        "113": "  public void test_contains_null_iterable_no() {\n",
        "114": "    Iterable<String> set = iterable(\"a\", \"b\");\n",
        "115": "    assertFalse(Iterables.contains(set, null));\n",
        "116": "  }\n",
        "117": "\n",
        "118": "  public void test_contains_nonnull_set_yes() {\n",
        "119": "    Iterable<String> set = Sets.newHashSet(\"a\", null, \"b\");\n",
        "120": "    assertTrue(Iterables.contains(set, \"b\"));\n",
        "121": "  }\n",
        "122": "\n",
        "123": "  public void test_contains_nonnull_set_no() {\n",
        "124": "    Iterable<String> set = Sets.newHashSet(\"a\", \"b\");\n",
        "125": "    assertFalse(Iterables.contains(set, \"c\"));\n",
        "126": "  }\n",
        "127": "\n",
        "128": "  public void test_contains_nonnull_iterable_yes() {\n",
        "129": "    Iterable<String> set = iterable(\"a\", null, \"b\");\n",
        "130": "    assertTrue(Iterables.contains(set, \"b\"));\n",
        "131": "  }\n",
        "132": "\n",
        "133": "  public void test_contains_nonnull_iterable_no() {\n",
        "134": "    Iterable<String> set = iterable(\"a\", \"b\");\n",
        "135": "    assertFalse(Iterables.contains(set, \"c\"));\n",
        "136": "  }\n",
        "137": "\n",
        "138": "  public void testGetOnlyElement_noDefault_valid() {\n",
        "139": "    Iterable<String> iterable = Collections.singletonList(\"foo\");\n",
        "140": "    assertEquals(\"foo\", Iterables.getOnlyElement(iterable));\n",
        "141": "  }\n",
        "142": "\n",
        "143": "  public void testGetOnlyElement_noDefault_empty() {\n",
        "144": "    Iterable<String> iterable = Collections.emptyList();\n",
        "145": "    try {\n",
        "146": "      Iterables.getOnlyElement(iterable);\n",
        "147": "      fail();\n",
        "148": "    } catch (NoSuchElementException expected) {\n",
        "149": "    }\n",
        "150": "  }\n",
        "151": "\n",
        "152": "  public void testGetOnlyElement_noDefault_multiple() {\n",
        "153": "    Iterable<String> iterable = asList(\"foo\", \"bar\");\n",
        "154": "    try {\n",
        "155": "      Iterables.getOnlyElement(iterable);\n",
        "156": "      fail();\n",
        "157": "    } catch (IllegalArgumentException expected) {\n",
        "158": "    }\n",
        "159": "  }\n",
        "160": "\n",
        "161": "  public void testGetOnlyElement_withDefault_singleton() {\n",
        "162": "    Iterable<String> iterable = Collections.singletonList(\"foo\");\n",
        "163": "    assertEquals(\"foo\", Iterables.getOnlyElement(iterable, \"bar\"));\n",
        "164": "  }\n",
        "165": "\n",
        "166": "  public void testGetOnlyElement_withDefault_empty() {\n",
        "167": "    Iterable<String> iterable = Collections.emptyList();\n",
        "168": "    assertEquals(\"bar\", Iterables.getOnlyElement(iterable, \"bar\"));\n",
        "169": "  }\n",
        "170": "\n",
        "171": "  public void testGetOnlyElement_withDefault_empty_null() {\n",
        "172": "    Iterable<String> iterable = Collections.emptyList();\n",
        "173": "    assertNull(Iterables.getOnlyElement(iterable, null));\n",
        "174": "  }\n",
        "175": "\n",
        "176": "  public void testGetOnlyElement_withDefault_multiple() {\n",
        "177": "    Iterable<String> iterable = asList(\"foo\", \"bar\");\n",
        "178": "    try {\n",
        "179": "      Iterables.getOnlyElement(iterable, \"x\");\n",
        "180": "      fail();\n",
        "181": "    } catch (IllegalArgumentException expected) {\n",
        "182": "    }\n",
        "183": "  }\n",
        "184": "\n",
        "185": "  public void testAny() {\n",
        "186": "    List<String> list = newArrayList();\n",
        "187": "    Predicate<String> predicate = Predicates.equalTo(\"pants\");\n",
        "188": "\n",
        "189": "    assertFalse(Iterables.any(list, predicate));\n",
        "190": "    list.add(\"cool\");\n",
        "191": "    assertFalse(Iterables.any(list, predicate));\n",
        "192": "    list.add(\"pants\");\n",
        "193": "    assertTrue(Iterables.any(list, predicate));\n",
        "194": "  }\n",
        "195": "\n",
        "196": "  public void testAll() {\n",
        "197": "    List<String> list = newArrayList();\n",
        "198": "    Predicate<String> predicate = Predicates.equalTo(\"cool\");\n",
        "199": "\n",
        "200": "    assertTrue(Iterables.all(list, predicate));\n",
        "201": "    list.add(\"cool\");\n",
        "202": "    assertTrue(Iterables.all(list, predicate));\n",
        "203": "    list.add(\"pants\");\n",
        "204": "    assertFalse(Iterables.all(list, predicate));\n",
        "205": "  }\n",
        "206": "\n",
        "207": "  public void testFind() {\n",
        "208": "    Iterable<String> list = newArrayList(\"cool\", \"pants\");\n",
        "209": "    assertEquals(\"cool\", Iterables.find(list, Predicates.equalTo(\"cool\")));\n",
        "210": "    assertEquals(\"pants\", Iterables.find(list, Predicates.equalTo(\"pants\")));\n",
        "211": "    try {\n",
        "212": "      Iterables.find(list, Predicates.alwaysFalse());\n",
        "213": "      fail();\n",
        "214": "    } catch (NoSuchElementException e) {\n",
        "215": "    }\n",
        "216": "    assertEquals(\"cool\", Iterables.find(list, Predicates.alwaysTrue()));\n",
        "217": "    assertCanIterateAgain(list);\n",
        "218": "  }\n",
        "219": "\n",
        "220": "  public void testFind_withDefault() {\n",
        "221": "    Iterable<String> list = Lists.newArrayList(\"cool\", \"pants\");\n",
        "222": "    assertEquals(\"cool\",\n",
        "223": "        Iterables.find(list, Predicates.equalTo(\"cool\"), \"woot\"));\n",
        "224": "    assertEquals(\"pants\",\n",
        "225": "        Iterables.find(list, Predicates.equalTo(\"pants\"), \"woot\"));\n",
        "226": "    assertEquals(\"woot\", Iterables.find(list,\n",
        "227": "        Predicates.alwaysFalse(), \"woot\"));\n",
        "228": "    assertNull(Iterables.find(list, Predicates.alwaysFalse(), null));\n",
        "229": "    assertEquals(\"cool\",\n",
        "230": "        Iterables.find(list, Predicates.alwaysTrue(), \"woot\"));\n",
        "231": "    assertCanIterateAgain(list);\n",
        "232": "  }\n",
        "233": "\n",
        "234": "  public void testTryFind() {\n",
        "235": "    Iterable<String> list = newArrayList(\"cool\", \"pants\");\n",
        "236": "    assertThat(Iterables.tryFind(list, Predicates.equalTo(\"cool\"))).hasValue(\"cool\");\n",
        "237": "    assertThat(Iterables.tryFind(list, Predicates.equalTo(\"pants\"))).hasValue(\"pants\");\n",
        "238": "    assertThat(Iterables.tryFind(list, Predicates.alwaysTrue())).hasValue(\"cool\");\n",
        "239": "    assertThat(Iterables.tryFind(list, Predicates.alwaysFalse())).isAbsent();\n",
        "240": "    assertCanIterateAgain(list);\n",
        "241": "  }\n",
        "242": "\n",
        "243": "  private static class TypeA {}\n",
        "244": "  private interface TypeB {}\n",
        "245": "  private static class HasBoth extends TypeA implements TypeB {}\n",
        "246": "\n",
        "247": "  public void testTransform() {\n",
        "248": "    List<String> input = asList(\"1\", \"2\", \"3\");\n",
        "249": "    Iterable<Integer> result = Iterables.transform(input,\n",
        "250": "        new Function<String, Integer>() {\n",
        "251": "          @Override\n",
        "252": "          public Integer apply(String from) {\n",
        "253": "            return Integer.valueOf(from);\n",
        "254": "          }\n",
        "255": "        });\n",
        "256": "\n",
        "257": "    List<Integer> actual = newArrayList(result);\n",
        "258": "    List<Integer> expected = asList(1, 2, 3);\n",
        "259": "    assertEquals(expected, actual);\n",
        "260": "    assertCanIterateAgain(result);\n",
        "261": "    assertEquals(\"[1, 2, 3]\", result.toString());\n",
        "262": "  }\n",
        "263": "\n",
        "264": "  public void testPoorlyBehavedTransform() {\n",
        "265": "    List<String> input = asList(\"1\", null, \"3\");\n",
        "266": "    Iterable<Integer> result = Iterables.transform(input,\n",
        "267": "        new Function<String, Integer>() {\n",
        "268": "          @Override\n",
        "269": "          public Integer apply(String from) {\n",
        "270": "            return Integer.valueOf(from);\n",
        "271": "          }\n",
        "272": "        });\n",
        "273": "\n",
        "274": "    Iterator<Integer> resultIterator = result.iterator();\n",
        "275": "    resultIterator.next();\n",
        "276": "\n",
        "277": "    try {\n",
        "278": "      resultIterator.next();\n",
        "279": "      fail(\"Expected NFE\");\n",
        "280": "    } catch (NumberFormatException nfe) {\n",
        "281": "      // Expected to fail.\n",
        "282": "    }\n",
        "283": "  }\n",
        "284": "\n",
        "285": "  public void testNullFriendlyTransform() {\n",
        "286": "    List<Integer> input = asList(1, 2, null, 3);\n",
        "287": "    Iterable<String> result = Iterables.transform(input,\n",
        "288": "        new Function<Integer, String>() {\n",
        "289": "          @Override\n",
        "290": "          public String apply(Integer from) {\n",
        "291": "            return String.valueOf(from);\n",
        "292": "          }\n",
        "293": "        });\n",
        "294": "\n",
        "295": "    List<String> actual = newArrayList(result);\n",
        "296": "    List<String> expected = asList(\"1\", \"2\", \"null\", \"3\");\n",
        "297": "    assertEquals(expected, actual);\n",
        "298": "  }\n",
        "299": "\n",
        "300": "  // Far less exhaustive than the tests in IteratorsTest\n",
        "301": "  public void testCycle() {\n",
        "302": "    Iterable<String> cycle = Iterables.cycle(\"a\", \"b\");\n",
        "303": "\n",
        "304": "    int howManyChecked = 0;\n",
        "305": "    for (String string : cycle) {\n",
        "306": "      String expected = (howManyChecked % 2 == 0) ? \"a\" : \"b\";\n",
        "307": "      assertEquals(expected, string);\n",
        "308": "      if (howManyChecked++ == 5) {\n",
        "309": "        break;\n",
        "310": "      }\n",
        "311": "    }\n",
        "312": "\n",
        "313": "    // We left the last iterator pointing to \"b\". But a new iterator should\n",
        "314": "    // always point to \"a\".\n",
        "315": "    for (String string : cycle) {\n",
        "316": "      assertEquals(\"a\", string);\n",
        "317": "      break;\n",
        "318": "    }\n",
        "319": "\n",
        "320": "    assertEquals(\"[a, b] (cycled)\", cycle.toString());\n",
        "321": "  }\n",
        "322": "\n",
        "323": "  // Again, the exhaustive tests are in IteratorsTest\n",
        "324": "  public void testConcatIterable() {\n",
        "325": "    List<Integer> list1 = newArrayList(1);\n",
        "326": "    List<Integer> list2 = newArrayList(4);\n",
        "327": "\n",
        "328": "    @SuppressWarnings(\"unchecked\")\n",
        "329": "    List<List<Integer>> input = newArrayList(list1, list2);\n",
        "330": "\n",
        "331": "    Iterable<Integer> result = Iterables.concat(input);\n",
        "332": "    assertEquals(asList(1, 4), newArrayList(result));\n",
        "333": "\n",
        "334": "    // Now change the inputs and see result dynamically change as well\n",
        "335": "\n",
        "336": "    list1.add(2);\n",
        "337": "    List<Integer> list3 = newArrayList(3);\n",
        "338": "    input.add(1, list3);\n",
        "339": "\n",
        "340": "    assertEquals(asList(1, 2, 3, 4), newArrayList(result));\n",
        "341": "    assertEquals(\"[1, 2, 3, 4]\", result.toString());\n",
        "342": "  }\n",
        "343": "\n",
        "344": "  public void testConcatVarargs() {\n",
        "345": "    List<Integer> list1 = newArrayList(1);\n",
        "346": "    List<Integer> list2 = newArrayList(4);\n",
        "347": "    List<Integer> list3 = newArrayList(7, 8);\n",
        "348": "    List<Integer> list4 = newArrayList(9);\n",
        "349": "    List<Integer> list5 = newArrayList(10);\n",
        "350": "    @SuppressWarnings(\"unchecked\")\n",
        "351": "    Iterable<Integer> result =\n",
        "352": "        Iterables.concat(list1, list2, list3, list4, list5);\n",
        "353": "    assertEquals(asList(1, 4, 7, 8, 9, 10), newArrayList(result));\n",
        "354": "    assertEquals(\"[1, 4, 7, 8, 9, 10]\", result.toString());\n",
        "355": "  }\n",
        "356": "\n",
        "357": "  public void testConcatNullPointerException() {\n",
        "358": "    List<Integer> list1 = newArrayList(1);\n",
        "359": "    List<Integer> list2 = newArrayList(4);\n",
        "360": "\n",
        "361": "    try {\n",
        "362": "      Iterables.concat(list1, null, list2);\n",
        "363": "      fail();\n",
        "364": "    } catch (NullPointerException expected) {}\n",
        "365": "  }\n",
        "366": "\n",
        "367": "  public void testConcatPeformingFiniteCycle() {\n",
        "368": "    Iterable<Integer> iterable = asList(1, 2, 3);\n",
        "369": "    int n = 4;\n",
        "370": "    Iterable<Integer> repeated\n",
        "371": "        = Iterables.concat(Collections.nCopies(n, iterable));\n",
        "372": "    assertThat(repeated).containsExactly(1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3).inOrder();\n",
        "373": "  }\n",
        "374": "\n",
        "375": "  public void testPartition_badSize() {\n",
        "376": "    Iterable<Integer> source = Collections.singleton(1);\n",
        "377": "    try {\n",
        "378": "      Iterables.partition(source, 0);\n",
        "379": "      fail();\n",
        "380": "    } catch (IllegalArgumentException expected) {\n",
        "381": "    }\n",
        "382": "  }\n",
        "383": "\n",
        "384": "  public void testPartition_empty() {\n",
        "385": "    Iterable<Integer> source = Collections.emptySet();\n",
        "386": "    Iterable<List<Integer>> partitions = Iterables.partition(source, 1);\n",
        "387": "    assertTrue(Iterables.isEmpty(partitions));\n",
        "388": "  }\n",
        "389": "\n",
        "390": "  public void testPartition_singleton1() {\n",
        "391": "    Iterable<Integer> source = Collections.singleton(1);\n",
        "392": "    Iterable<List<Integer>> partitions = Iterables.partition(source, 1);\n",
        "393": "    assertEquals(1, Iterables.size(partitions));\n",
        "394": "    assertEquals(Collections.singletonList(1), partitions.iterator().next());\n",
        "395": "  }\n",
        "396": "\n",
        "397": "  public void testPartition_view() {\n",
        "398": "    List<Integer> list = asList(1, 2);\n",
        "399": "    Iterable<List<Integer>> partitions = Iterables.partition(list, 2);\n",
        "400": "\n",
        "401": "    // Changes before the partition is retrieved are reflected\n",
        "402": "    list.set(0, 3);\n",
        "403": "\n",
        "404": "    Iterator<List<Integer>> iterator = partitions.iterator();\n",
        "405": "\n",
        "406": "    // Changes before the partition is retrieved are reflected\n",
        "407": "    list.set(1, 4);\n",
        "408": "\n",
        "409": "    List<Integer> first = iterator.next();\n",
        "410": "\n",
        "411": "    // Changes after are not\n",
        "412": "    list.set(0, 5);\n",
        "413": "\n",
        "414": "    assertEquals(ImmutableList.of(3, 4), first);\n",
        "415": "  }\n",
        "416": "\n",
        "417": "  public void testPaddedPartition_basic() {\n",
        "418": "    List<Integer> list = asList(1, 2, 3, 4, 5);\n",
        "419": "    Iterable<List<Integer>> partitions = Iterables.paddedPartition(list, 2);\n",
        "420": "    assertEquals(3, Iterables.size(partitions));\n",
        "421": "    assertEquals(asList(5, null), Iterables.getLast(partitions));\n",
        "422": "  }\n",
        "423": "\n",
        "424": "  public void testPaddedPartitionRandomAccessInput() {\n",
        "425": "    Iterable<Integer> source = asList(1, 2, 3);\n",
        "426": "    Iterable<List<Integer>> partitions = Iterables.paddedPartition(source, 2);\n",
        "427": "    Iterator<List<Integer>> iterator = partitions.iterator();\n",
        "428": "    assertTrue(iterator.next() instanceof RandomAccess);\n",
        "429": "    assertTrue(iterator.next() instanceof RandomAccess);\n",
        "430": "  }\n",
        "431": "\n",
        "432": "  public void testPaddedPartitionNonRandomAccessInput() {\n",
        "433": "    Iterable<Integer> source = Lists.newLinkedList(asList(1, 2, 3));\n",
        "434": "    Iterable<List<Integer>> partitions = Iterables.paddedPartition(source, 2);\n",
        "435": "    Iterator<List<Integer>> iterator = partitions.iterator();\n",
        "436": "    // Even though the input list doesn't implement RandomAccess, the output\n",
        "437": "    // lists do.\n",
        "438": "    assertTrue(iterator.next() instanceof RandomAccess);\n",
        "439": "    assertTrue(iterator.next() instanceof RandomAccess);\n",
        "440": "  }\n",
        "441": "\n",
        "442": "  // More tests in IteratorsTest\n",
        "443": "  public void testAddAllToList() {\n",
        "444": "    List<String> alreadyThere = newArrayList(\"already\", \"there\");\n",
        "445": "    List<String> freshlyAdded = newArrayList(\"freshly\", \"added\");\n",
        "446": "\n",
        "447": "    boolean changed = Iterables.addAll(alreadyThere, freshlyAdded);\n",
        "448": "    assertThat(alreadyThere).containsExactly(\n",
        "449": "        \"already\", \"there\", \"freshly\", \"added\").inOrder();\n",
        "450": "    assertTrue(changed);\n",
        "451": "  }\n",
        "452": "\n",
        "453": "  private static void assertCanIterateAgain(Iterable<?> iterable) {\n",
        "454": "    for (@SuppressWarnings(\"unused\") Object obj : iterable) {\n",
        "455": "    }\n",
        "456": "  }\n",
        "457": "\n",
        "458": "  // More exhaustive tests are in IteratorsTest.\n",
        "459": "  public void testElementsEqual() throws Exception {\n",
        "460": "    Iterable<?> a;\n",
        "461": "    Iterable<?> b;\n",
        "462": "\n",
        "463": "    // A few elements.\n",
        "464": "    a = asList(4, 8, 15, 16, 23, 42);\n",
        "465": "    b = asList(4, 8, 15, 16, 23, 42);\n",
        "466": "    assertTrue(Iterables.elementsEqual(a, b));\n",
        "467": "\n",
        "468": "    // An element differs.\n",
        "469": "    a = asList(4, 8, 15, 12, 23, 42);\n",
        "470": "    b = asList(4, 8, 15, 16, 23, 42);\n",
        "471": "    assertFalse(Iterables.elementsEqual(a, b));\n",
        "472": "\n",
        "473": "    // null versus non-null.\n",
        "474": "    a = asList(4, 8, 15, null, 23, 42);\n",
        "475": "    b = asList(4, 8, 15, 16, 23, 42);\n",
        "476": "    assertFalse(Iterables.elementsEqual(a, b));\n",
        "477": "    assertFalse(Iterables.elementsEqual(b, a));\n",
        "478": "\n",
        "479": "    // Different lengths.\n",
        "480": "    a = asList(4, 8, 15, 16, 23);\n",
        "481": "    b = asList(4, 8, 15, 16, 23, 42);\n",
        "482": "    assertFalse(Iterables.elementsEqual(a, b));\n",
        "483": "    assertFalse(Iterables.elementsEqual(b, a));\n",
        "484": "  }\n",
        "485": "\n",
        "486": "  public void testToString() {\n",
        "487": "    List<String> list = Collections.emptyList();\n",
        "488": "    assertEquals(\"[]\", Iterables.toString(list));\n",
        "489": "\n",
        "490": "    list = newArrayList(\"yam\", \"bam\", \"jam\", \"ham\");\n",
        "491": "    assertEquals(\"[yam, bam, jam, ham]\", Iterables.toString(list));\n",
        "492": "  }\n",
        "493": "\n",
        "494": "  public void testLimit() {\n",
        "495": "    Iterable<String> iterable = newArrayList(\"foo\", \"bar\", \"baz\");\n",
        "496": "    Iterable<String> limited = Iterables.limit(iterable, 2);\n",
        "497": "\n",
        "498": "    List<String> expected = ImmutableList.of(\"foo\", \"bar\");\n",
        "499": "    List<String> actual = newArrayList(limited);\n",
        "500": "    assertEquals(expected, actual);\n",
        "501": "    assertCanIterateAgain(limited);\n",
        "502": "    assertEquals(\"[foo, bar]\", limited.toString());\n",
        "503": "  }\n",
        "504": "\n",
        "505": "  public void testLimit_illegalArgument() {\n",
        "506": "    List<String> list = newArrayList(\"a\", \"b\", \"c\");\n",
        "507": "    try {\n",
        "508": "      Iterables.limit(list, -1);\n",
        "509": "      fail();\n",
        "510": "    } catch (IllegalArgumentException expected) {}\n",
        "511": "  }\n",
        "512": "\n",
        "513": "  public void testIsEmpty() {\n",
        "514": "    Iterable<String> emptyList = Collections.emptyList();\n",
        "515": "    assertTrue(Iterables.isEmpty(emptyList));\n",
        "516": "\n",
        "517": "    Iterable<String> singletonList = Collections.singletonList(\"foo\");\n",
        "518": "    assertFalse(Iterables.isEmpty(singletonList));\n",
        "519": "  }\n",
        "520": "\n",
        "521": "  public void testSkip_simple() {\n",
        "522": "    Collection<String> set = ImmutableSet.of(\"a\", \"b\", \"c\", \"d\", \"e\");\n",
        "523": "    assertEquals(newArrayList(\"c\", \"d\", \"e\"), newArrayList(skip(set, 2)));\n",
        "524": "    assertEquals(\"[c, d, e]\", skip(set, 2).toString());\n",
        "525": "  }\n",
        "526": "\n",
        "527": "  public void testSkip_simpleList() {\n",
        "528": "    Collection<String> list = newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\");\n",
        "529": "    assertEquals(newArrayList(\"c\", \"d\", \"e\"), newArrayList(skip(list, 2)));\n",
        "530": "    assertEquals(\"[c, d, e]\", skip(list, 2).toString());\n",
        "531": "  }\n",
        "532": "\n",
        "533": "  public void testSkip_pastEnd() {\n",
        "534": "    Collection<String> set = ImmutableSet.of(\"a\", \"b\");\n",
        "535": "    assertEquals(emptyList(), newArrayList(skip(set, 20)));\n",
        "536": "  }\n",
        "537": "\n",
        "538": "  public void testSkip_pastEndList() {\n",
        "539": "    Collection<String> list = newArrayList(\"a\", \"b\");\n",
        "540": "    assertEquals(emptyList(), newArrayList(skip(list, 20)));\n",
        "541": "  }\n",
        "542": "\n",
        "543": "  public void testSkip_skipNone() {\n",
        "544": "    Collection<String> set = ImmutableSet.of(\"a\", \"b\");\n",
        "545": "    assertEquals(newArrayList(\"a\", \"b\"), newArrayList(skip(set, 0)));\n",
        "546": "  }\n",
        "547": "\n",
        "548": "  public void testSkip_skipNoneList() {\n",
        "549": "    Collection<String> list = newArrayList(\"a\", \"b\");\n",
        "550": "    assertEquals(newArrayList(\"a\", \"b\"), newArrayList(skip(list, 0)));\n",
        "551": "  }\n",
        "552": "\n",
        "553": "  public void testSkip_removal() {\n",
        "554": "    Collection<String> set = Sets.newHashSet(\"a\", \"b\");\n",
        "555": "    Iterator<String> iterator = skip(set, 2).iterator();\n",
        "556": "    try {\n",
        "557": "      iterator.next();\n",
        "558": "    } catch (NoSuchElementException suppressed) {\n",
        "559": "      // We want remove() to fail even after a failed call to next().\n",
        "560": "    }\n",
        "561": "    try {\n",
        "562": "      iterator.remove();\n",
        "563": "      fail(\"Expected IllegalStateException\");\n",
        "564": "    } catch (IllegalStateException expected) {}\n",
        "565": "  }\n",
        "566": "\n",
        "567": "  public void testSkip_allOfMutableList_modifiable() {\n",
        "568": "    List<String> list = newArrayList(\"a\", \"b\");\n",
        "569": "    Iterator<String> iterator = skip(list, 2).iterator();\n",
        "570": "    try {\n",
        "571": "      iterator.remove();\n",
        "572": "      fail(\"Expected IllegalStateException\");\n",
        "573": "    } catch (IllegalStateException expected) {}\n",
        "574": "  }\n",
        "575": "\n",
        "576": "  public void testSkip_allOfImmutableList_modifiable() {\n",
        "577": "    List<String> list = ImmutableList.of(\"a\", \"b\");\n",
        "578": "    Iterator<String> iterator = skip(list, 2).iterator();\n",
        "579": "    try {\n",
        "580": "      iterator.remove();\n",
        "581": "      fail(\"Expected UnsupportedOperationException\");\n",
        "582": "    } catch (UnsupportedOperationException expected) {}\n",
        "583": "  }\n",
        "584": "\n",
        "585": "  public void testSkip_nonStructurallyModifiedList() throws Exception {\n",
        "586": "    List<String> list = newArrayList(\"a\", \"b\", \"c\");\n",
        "587": "    Iterable<String> tail = skip(list, 1);\n",
        "588": "    Iterator<String> tailIterator = tail.iterator();\n",
        "589": "    list.set(2, \"C\");\n",
        "590": "    assertEquals(\"b\", tailIterator.next());\n",
        "591": "    assertEquals(\"C\", tailIterator.next());\n",
        "592": "    assertFalse(tailIterator.hasNext());\n",
        "593": "  }\n",
        "594": "\n",
        "595": "  public void testSkip_structurallyModifiedSkipSome() throws Exception {\n",
        "596": "    Collection<String> set = newLinkedHashSet(asList(\"a\", \"b\", \"c\"));\n",
        "597": "    Iterable<String> tail = skip(set, 1);\n",
        "598": "    set.remove(\"b\");\n",
        "599": "    set.addAll(newArrayList(\"A\", \"B\", \"C\"));\n",
        "600": "    assertThat(tail).containsExactly(\"c\", \"A\", \"B\", \"C\").inOrder();\n",
        "601": "  }\n",
        "602": "\n",
        "603": "  public void testSkip_structurallyModifiedSkipSomeList() throws Exception {\n",
        "604": "    List<String> list = newArrayList(\"a\", \"b\", \"c\");\n",
        "605": "    Iterable<String> tail = skip(list, 1);\n",
        "606": "    list.subList(1, 3).clear();\n",
        "607": "    list.addAll(0, newArrayList(\"A\", \"B\", \"C\"));\n",
        "608": "    assertThat(tail).containsExactly(\"B\", \"C\", \"a\").inOrder();\n",
        "609": "  }\n",
        "610": "\n",
        "611": "  public void testSkip_structurallyModifiedSkipAll() throws Exception {\n",
        "612": "    Collection<String> set = newLinkedHashSet(asList(\"a\", \"b\", \"c\"));\n",
        "613": "    Iterable<String> tail = skip(set, 2);\n",
        "614": "    set.remove(\"a\");\n",
        "615": "    set.remove(\"b\");\n",
        "616": "    assertFalse(tail.iterator().hasNext());\n",
        "617": "  }\n",
        "618": "\n",
        "619": "  public void testSkip_structurallyModifiedSkipAllList() throws Exception {\n",
        "620": "    List<String> list = newArrayList(\"a\", \"b\", \"c\");\n",
        "621": "    Iterable<String> tail = skip(list, 2);\n",
        "622": "    list.subList(0, 2).clear();\n",
        "623": "    assertTrue(Iterables.isEmpty(tail));\n",
        "624": "  }\n",
        "625": "\n",
        "626": "  public void testSkip_illegalArgument() {\n",
        "627": "    List<String> list = newArrayList(\"a\", \"b\", \"c\");\n",
        "628": "    try {\n",
        "629": "      skip(list, -1);\n",
        "630": "      fail();\n",
        "631": "    } catch (IllegalArgumentException expected) {}\n",
        "632": "  }\n",
        "633": "\n",
        "634": "  private void testGetOnAbc(Iterable<String> iterable) {\n",
        "635": "    try {\n",
        "636": "      Iterables.get(iterable, -1);\n",
        "637": "      fail();\n",
        "638": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "639": "    assertEquals(\"a\", Iterables.get(iterable, 0));\n",
        "640": "    assertEquals(\"b\", Iterables.get(iterable, 1));\n",
        "641": "    assertEquals(\"c\", Iterables.get(iterable, 2));\n",
        "642": "    try {\n",
        "643": "      Iterables.get(iterable, 3);\n",
        "644": "      fail();\n",
        "645": "    } catch (IndexOutOfBoundsException nsee) {}\n",
        "646": "    try {\n",
        "647": "      Iterables.get(iterable, 4);\n",
        "648": "      fail();\n",
        "649": "    } catch (IndexOutOfBoundsException nsee) {}\n",
        "650": "  }\n",
        "651": "\n",
        "652": "  private void testGetOnEmpty(Iterable<String> iterable) {\n",
        "653": "    try {\n",
        "654": "      Iterables.get(iterable, 0);\n",
        "655": "      fail();\n",
        "656": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "657": "  }\n",
        "658": "\n",
        "659": "  public void testGet_list() {\n",
        "660": "    testGetOnAbc(newArrayList(\"a\", \"b\", \"c\"));\n",
        "661": "  }\n",
        "662": "\n",
        "663": "  public void testGet_emptyList() {\n",
        "664": "    testGetOnEmpty(Collections.<String>emptyList());\n",
        "665": "  }\n",
        "666": "\n",
        "667": "  public void testGet_sortedSet() {\n",
        "668": "    testGetOnAbc(ImmutableSortedSet.of(\"b\", \"c\", \"a\"));\n",
        "669": "  }\n",
        "670": "\n",
        "671": "  public void testGet_emptySortedSet() {\n",
        "672": "    testGetOnEmpty(ImmutableSortedSet.<String>of());\n",
        "673": "  }\n",
        "674": "\n",
        "675": "  public void testGet_iterable() {\n",
        "676": "    testGetOnAbc(ImmutableSet.of(\"a\", \"b\", \"c\"));\n",
        "677": "  }\n",
        "678": "\n",
        "679": "  public void testGet_emptyIterable() {\n",
        "680": "    testGetOnEmpty(Sets.<String>newHashSet());\n",
        "681": "  }\n",
        "682": "\n",
        "683": "  public void testGet_withDefault_negativePosition() {\n",
        "684": "    try {\n",
        "685": "      Iterables.get(newArrayList(\"a\", \"b\", \"c\"), -1, \"d\");\n",
        "686": "      fail();\n",
        "687": "    } catch (IndexOutOfBoundsException expected) {\n",
        "688": "      // pass\n",
        "689": "    }\n",
        "690": "  }\n",
        "691": "\n",
        "692": "  public void testGet_withDefault_simple() {\n",
        "693": "    ArrayList<String> list = newArrayList(\"a\", \"b\", \"c\");\n",
        "694": "    assertEquals(\"b\", Iterables.get(list, 1, \"d\"));\n",
        "695": "  }\n",
        "696": "\n",
        "697": "  public void testGet_withDefault_iterable() {\n",
        "698": "    Set<String> set = ImmutableSet.of(\"a\", \"b\", \"c\");\n",
        "699": "    assertEquals(\"b\", Iterables.get(set, 1, \"d\"));\n",
        "700": "  }\n",
        "701": "\n",
        "702": "  public void testGet_withDefault_last() {\n",
        "703": "    ArrayList<String> list = newArrayList(\"a\", \"b\", \"c\");\n",
        "704": "    assertEquals(\"c\", Iterables.get(list, 2, \"d\"));\n",
        "705": "  }\n",
        "706": "\n",
        "707": "  public void testGet_withDefault_lastPlusOne() {\n",
        "708": "    ArrayList<String> list = newArrayList(\"a\", \"b\", \"c\");\n",
        "709": "    assertEquals(\"d\", Iterables.get(list, 3, \"d\"));\n",
        "710": "  }\n",
        "711": "\n",
        "712": "  public void testGet_withDefault_doesntIterate() {\n",
        "713": "    List<String> list = new DiesOnIteratorArrayList();\n",
        "714": "    list.add(\"a\");\n",
        "715": "    assertEquals(\"a\", Iterables.get(list, 0, \"b\"));\n",
        "716": "  }\n",
        "717": "\n",
        "718": "  public void testGetFirst_withDefault_singleton() {\n",
        "719": "    Iterable<String> iterable = Collections.singletonList(\"foo\");\n",
        "720": "    assertEquals(\"foo\", Iterables.getFirst(iterable, \"bar\"));\n",
        "721": "  }\n",
        "722": "\n",
        "723": "  public void testGetFirst_withDefault_empty() {\n",
        "724": "    Iterable<String> iterable = Collections.emptyList();\n",
        "725": "    assertEquals(\"bar\", Iterables.getFirst(iterable, \"bar\"));\n",
        "726": "  }\n",
        "727": "\n",
        "728": "  public void testGetFirst_withDefault_empty_null() {\n",
        "729": "    Iterable<String> iterable = Collections.emptyList();\n",
        "730": "    assertNull(Iterables.getFirst(iterable, null));\n",
        "731": "  }\n",
        "732": "\n",
        "733": "  public void testGetFirst_withDefault_multiple() {\n",
        "734": "    Iterable<String> iterable = asList(\"foo\", \"bar\");\n",
        "735": "    assertEquals(\"foo\", Iterables.getFirst(iterable, \"qux\"));\n",
        "736": "  }\n",
        "737": "\n",
        "738": "  public void testGetLast_list() {\n",
        "739": "    List<String> list = newArrayList(\"a\", \"b\", \"c\");\n",
        "740": "    assertEquals(\"c\", Iterables.getLast(list));\n",
        "741": "  }\n",
        "742": "\n",
        "743": "  public void testGetLast_emptyList() {\n",
        "744": "    List<String> list = Collections.emptyList();\n",
        "745": "    try {\n",
        "746": "      Iterables.getLast(list);\n",
        "747": "      fail();\n",
        "748": "    } catch (NoSuchElementException e) {}\n",
        "749": "  }\n",
        "750": "\n",
        "751": "  public void testGetLast_sortedSet() {\n",
        "752": "    SortedSet<String> sortedSet = ImmutableSortedSet.of(\"b\", \"c\", \"a\");\n",
        "753": "    assertEquals(\"c\", Iterables.getLast(sortedSet));\n",
        "754": "  }\n",
        "755": "\n",
        "756": "  public void testGetLast_withDefault_singleton() {\n",
        "757": "    Iterable<String> iterable = Collections.singletonList(\"foo\");\n",
        "758": "    assertEquals(\"foo\", Iterables.getLast(iterable, \"bar\"));\n",
        "759": "  }\n",
        "760": "\n",
        "761": "  public void testGetLast_withDefault_empty() {\n",
        "762": "    Iterable<String> iterable = Collections.emptyList();\n",
        "763": "    assertEquals(\"bar\", Iterables.getLast(iterable, \"bar\"));\n",
        "764": "  }\n",
        "765": "\n",
        "766": "  public void testGetLast_withDefault_empty_null() {\n",
        "767": "    Iterable<String> iterable = Collections.emptyList();\n",
        "768": "    assertNull(Iterables.getLast(iterable, null));\n",
        "769": "  }\n",
        "770": "\n",
        "771": "  public void testGetLast_withDefault_multiple() {\n",
        "772": "    Iterable<String> iterable = asList(\"foo\", \"bar\");\n",
        "773": "    assertEquals(\"bar\", Iterables.getLast(iterable, \"qux\"));\n",
        "774": "  }\n",
        "775": "\n",
        "776": "  /**\n",
        "777": "   * {@link ArrayList} extension that forbids the use of\n",
        "778": "   * {@link Collection#iterator} for tests that need to prove that it isn't\n",
        "779": "   * called.\n",
        "780": "   */\n",
        "781": "  private static class DiesOnIteratorArrayList extends ArrayList<String> {\n",
        "782": "    /**\n",
        "783": "     * @throws UnsupportedOperationException all the time\n",
        "784": "     */\n",
        "785": "    @Override\n",
        "786": "    public Iterator<String> iterator() {\n",
        "787": "      throw new UnsupportedOperationException();\n",
        "788": "    }\n",
        "789": "  }\n",
        "790": "\n",
        "791": "  public void testGetLast_withDefault_not_empty_list() {\n",
        "792": "    // TODO: verify that this is the best testing strategy.\n",
        "793": "    List<String> diesOnIteratorList = new DiesOnIteratorArrayList();\n",
        "794": "    diesOnIteratorList.add(\"bar\");\n",
        "795": "\n",
        "796": "    assertEquals(\"bar\", Iterables.getLast(diesOnIteratorList, \"qux\"));\n",
        "797": "  }\n",
        "798": "\n",
        "799": "  /**\n",
        "800": "   * {@link TreeSet} extension that forbids the use of\n",
        "801": "   * {@link Collection#iterator} for tests that need to prove that it isn't\n",
        "802": "   * called.\n",
        "803": "   */\n",
        "804": "  private static final class DiesOnIteratorTreeSet extends TreeSet<String> {\n",
        "805": "    /**\n",
        "806": "     * @throws UnsupportedOperationException all the time\n",
        "807": "     */\n",
        "808": "    @Override\n",
        "809": "    public Iterator<String> iterator() {\n",
        "810": "      throw new UnsupportedOperationException();\n",
        "811": "    }\n",
        "812": "  }\n",
        "813": "\n",
        "814": "  public void testGetLast_emptySortedSet() {\n",
        "815": "    SortedSet<String> sortedSet = ImmutableSortedSet.of();\n",
        "816": "    try {\n",
        "817": "      Iterables.getLast(sortedSet);\n",
        "818": "      fail();\n",
        "819": "    } catch (NoSuchElementException e) {}\n",
        "820": "  }\n",
        "821": "\n",
        "822": "  public void testGetLast_iterable() {\n",
        "823": "    Set<String> set = ImmutableSet.of(\"a\", \"b\", \"c\");\n",
        "824": "    assertEquals(\"c\", Iterables.getLast(set));\n",
        "825": "  }\n",
        "826": "\n",
        "827": "  public void testGetLast_emptyIterable() {\n",
        "828": "    Set<String> set = Sets.newHashSet();\n",
        "829": "    try {\n",
        "830": "      Iterables.getLast(set);\n",
        "831": "      fail();\n",
        "832": "    } catch (NoSuchElementException e) {}\n",
        "833": "  }\n",
        "834": "\n",
        "835": "  public void testUnmodifiableIterable() {\n",
        "836": "    List<String> list = newArrayList(\"a\", \"b\", \"c\");\n",
        "837": "    Iterable<String> iterable = Iterables.unmodifiableIterable(list);\n",
        "838": "    Iterator<String> iterator = iterable.iterator();\n",
        "839": "    iterator.next();\n",
        "840": "    try {\n",
        "841": "      iterator.remove();\n",
        "842": "      fail();\n",
        "843": "    } catch (UnsupportedOperationException expected) {}\n",
        "844": "    assertEquals(\"[a, b, c]\", iterable.toString());\n",
        "845": "  }\n",
        "846": "\n",
        "847": "  @SuppressWarnings(\"deprecation\") // test of deprecated method\n",
        "848": "  public void testUnmodifiableIterableShortCircuit() {\n",
        "849": "    List<String> list = newArrayList(\"a\", \"b\", \"c\");\n",
        "850": "    Iterable<String> iterable = Iterables.unmodifiableIterable(list);\n",
        "851": "    Iterable<String> iterable2 = Iterables.unmodifiableIterable(iterable);\n",
        "852": "    assertSame(iterable, iterable2);\n",
        "853": "    ImmutableList<String> immutableList = ImmutableList.of(\"a\", \"b\", \"c\");\n",
        "854": "    assertSame(immutableList, Iterables.unmodifiableIterable(immutableList));\n",
        "855": "    assertSame(immutableList,\n",
        "856": "        Iterables.unmodifiableIterable((List<String>) immutableList));\n",
        "857": "  }\n",
        "858": "\n",
        "859": "  public void testFrequency_multiset() {\n",
        "860": "    Multiset<String> multiset\n",
        "861": "        = ImmutableMultiset.of(\"a\", \"b\", \"a\", \"c\", \"b\", \"a\");\n",
        "862": "    assertEquals(3, Iterables.frequency(multiset, \"a\"));\n",
        "863": "    assertEquals(2, Iterables.frequency(multiset, \"b\"));\n",
        "864": "    assertEquals(1, Iterables.frequency(multiset, \"c\"));\n",
        "865": "    assertEquals(0, Iterables.frequency(multiset, \"d\"));\n",
        "866": "    assertEquals(0, Iterables.frequency(multiset, 4.2));\n",
        "867": "    assertEquals(0, Iterables.frequency(multiset, null));\n",
        "868": "  }\n",
        "869": "\n",
        "870": "  public void testFrequency_set() {\n",
        "871": "    Set<String> set = Sets.newHashSet(\"a\", \"b\", \"c\");\n",
        "872": "    assertEquals(1, Iterables.frequency(set, \"a\"));\n",
        "873": "    assertEquals(1, Iterables.frequency(set, \"b\"));\n",
        "874": "    assertEquals(1, Iterables.frequency(set, \"c\"));\n",
        "875": "    assertEquals(0, Iterables.frequency(set, \"d\"));\n",
        "876": "    assertEquals(0, Iterables.frequency(set, 4.2));\n",
        "877": "    assertEquals(0, Iterables.frequency(set, null));\n",
        "878": "  }\n",
        "879": "\n",
        "880": "  public void testFrequency_list() {\n",
        "881": "    List<String> list = newArrayList(\"a\", \"b\", \"a\", \"c\", \"b\", \"a\");\n",
        "882": "    assertEquals(3, Iterables.frequency(list, \"a\"));\n",
        "883": "    assertEquals(2, Iterables.frequency(list, \"b\"));\n",
        "884": "    assertEquals(1, Iterables.frequency(list, \"c\"));\n",
        "885": "    assertEquals(0, Iterables.frequency(list, \"d\"));\n",
        "886": "    assertEquals(0, Iterables.frequency(list, 4.2));\n",
        "887": "    assertEquals(0, Iterables.frequency(list, null));\n",
        "888": "  }\n",
        "889": "\n",
        "890": "  public void testRemoveAll_collection() {\n",
        "891": "    List<String> list = newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\");\n",
        "892": "    assertTrue(Iterables.removeAll(list, newArrayList(\"b\", \"d\", \"f\")));\n",
        "893": "    assertEquals(newArrayList(\"a\", \"c\", \"e\"), list);\n",
        "894": "    assertFalse(Iterables.removeAll(list, newArrayList(\"x\", \"y\", \"z\")));\n",
        "895": "    assertEquals(newArrayList(\"a\", \"c\", \"e\"), list);\n",
        "896": "  }\n",
        "897": "\n",
        "898": "  public void testRemoveAll_iterable() {\n",
        "899": "    final List<String> list = newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\");\n",
        "900": "    Iterable<String> iterable = new Iterable<String>() {\n",
        "901": "      @Override\n",
        "902": "      public Iterator<String> iterator() {\n",
        "903": "        return list.iterator();\n",
        "904": "      }\n",
        "905": "    };\n",
        "906": "    assertTrue(Iterables.removeAll(iterable, newArrayList(\"b\", \"d\", \"f\")));\n",
        "907": "    assertEquals(newArrayList(\"a\", \"c\", \"e\"), list);\n",
        "908": "    assertFalse(Iterables.removeAll(iterable, newArrayList(\"x\", \"y\", \"z\")));\n",
        "909": "    assertEquals(newArrayList(\"a\", \"c\", \"e\"), list);\n",
        "910": "  }\n",
        "911": "\n",
        "912": "  public void testRetainAll_collection() {\n",
        "913": "    List<String> list = newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\");\n",
        "914": "    assertTrue(Iterables.retainAll(list, newArrayList(\"b\", \"d\", \"f\")));\n",
        "915": "    assertEquals(newArrayList(\"b\", \"d\"), list);\n",
        "916": "    assertFalse(Iterables.retainAll(list, newArrayList(\"b\", \"e\", \"d\")));\n",
        "917": "    assertEquals(newArrayList(\"b\", \"d\"), list);\n",
        "918": "  }\n",
        "919": "\n",
        "920": "  public void testRetainAll_iterable() {\n",
        "921": "    final List<String> list = newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\");\n",
        "922": "    Iterable<String> iterable = new Iterable<String>() {\n",
        "923": "      @Override\n",
        "924": "      public Iterator<String> iterator() {\n",
        "925": "        return list.iterator();\n",
        "926": "      }\n",
        "927": "    };\n",
        "928": "    assertTrue(Iterables.retainAll(iterable, newArrayList(\"b\", \"d\", \"f\")));\n",
        "929": "    assertEquals(newArrayList(\"b\", \"d\"), list);\n",
        "930": "    assertFalse(Iterables.retainAll(iterable, newArrayList(\"b\", \"e\", \"d\")));\n",
        "931": "    assertEquals(newArrayList(\"b\", \"d\"), list);\n",
        "932": "  }\n",
        "933": "\n",
        "934": "  public void testRemoveIf_randomAccess() {\n",
        "935": "    List<String> list = newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\");\n",
        "936": "    assertTrue(Iterables.removeIf(list,\n",
        "937": "        new Predicate<String>() {\n",
        "938": "          @Override\n",
        "939": "          public boolean apply(String s) {\n",
        "940": "            return s.equals(\"b\") || s.equals(\"d\") || s.equals(\"f\");\n",
        "941": "          }\n",
        "942": "        }));\n",
        "943": "    assertEquals(newArrayList(\"a\", \"c\", \"e\"), list);\n",
        "944": "    assertFalse(Iterables.removeIf(list,\n",
        "945": "        new Predicate<String>() {\n",
        "946": "          @Override\n",
        "947": "          public boolean apply(String s) {\n",
        "948": "            return s.equals(\"x\") || s.equals(\"y\") || s.equals(\"z\");\n",
        "949": "          }\n",
        "950": "        }));\n",
        "951": "    assertEquals(newArrayList(\"a\", \"c\", \"e\"), list);\n",
        "952": "  }\n",
        "953": "\n",
        "954": "  public void testRemoveIf_transformedList() {\n",
        "955": "    List<String> list = newArrayList(\"1\", \"2\", \"3\", \"4\", \"5\");\n",
        "956": "    List<Integer> transformed = Lists.transform(list,\n",
        "957": "        new Function<String, Integer>() {\n",
        "958": "          @Override\n",
        "959": "          public Integer apply(String s) {\n",
        "960": "            return Integer.valueOf(s);\n",
        "961": "          }\n",
        "962": "        });\n",
        "963": "    assertTrue(Iterables.removeIf(transformed,\n",
        "964": "        new Predicate<Integer>() {\n",
        "965": "          @Override\n",
        "966": "          public boolean apply(Integer n) {\n",
        "967": "            return (n & 1) == 0;  // isEven()\n",
        "968": "          }\n",
        "969": "        }));\n",
        "970": "    assertEquals(newArrayList(\"1\", \"3\", \"5\"), list);\n",
        "971": "    assertFalse(Iterables.removeIf(transformed,\n",
        "972": "        new Predicate<Integer>() {\n",
        "973": "          @Override\n",
        "974": "          public boolean apply(Integer n) {\n",
        "975": "            return (n & 1) == 0;  // isEven()\n",
        "976": "          }\n",
        "977": "        }));\n",
        "978": "    assertEquals(newArrayList(\"1\", \"3\", \"5\"), list);\n",
        "979": "  }\n",
        "980": "\n",
        "981": "  public void testRemoveIf_noRandomAccess() {\n",
        "982": "    List<String> list = Lists.newLinkedList(asList(\"a\", \"b\", \"c\", \"d\", \"e\"));\n",
        "983": "    assertTrue(Iterables.removeIf(list,\n",
        "984": "        new Predicate<String>() {\n",
        "985": "          @Override\n",
        "986": "          public boolean apply(String s) {\n",
        "987": "            return s.equals(\"b\") || s.equals(\"d\") || s.equals(\"f\");\n",
        "988": "          }\n",
        "989": "        }));\n",
        "990": "    assertEquals(newArrayList(\"a\", \"c\", \"e\"), list);\n",
        "991": "    assertFalse(Iterables.removeIf(list,\n",
        "992": "        new Predicate<String>() {\n",
        "993": "          @Override\n",
        "994": "          public boolean apply(String s) {\n",
        "995": "            return s.equals(\"x\") || s.equals(\"y\") || s.equals(\"z\");\n",
        "996": "          }\n",
        "997": "        }));\n",
        "998": "    assertEquals(newArrayList(\"a\", \"c\", \"e\"), list);\n",
        "999": "  }\n",
        "1000": "\n",
        "1001": "  // The Maps returned by Maps.filterEntries(), Maps.filterKeys(), and\n",
        "1002": "  // Maps.filterValues() are not tested with removeIf() since Maps are not\n",
        "1003": "  // Iterable.  Those returned by Iterators.filter() and Iterables.filter()\n",
        "1004": "  // are not tested because they are unmodifiable.\n",
        "1005": "\n",
        "1006": "  public void testIterableWithToString() {\n",
        "1007": "    assertEquals(\"[]\", create().toString());\n",
        "1008": "    assertEquals(\"[a]\", create(\"a\").toString());\n",
        "1009": "    assertEquals(\"[a, b, c]\", create(\"a\", \"b\", \"c\").toString());\n",
        "1010": "    assertEquals(\"[c, a, a]\", create(\"c\", \"a\", \"a\").toString());\n",
        "1011": "  }\n",
        "1012": "\n",
        "1013": "  public void testIterableWithToStringNull() {\n",
        "1014": "    assertEquals(\"[null]\", create((String) null).toString());\n",
        "1015": "    assertEquals(\"[null, null]\", create(null, null).toString());\n",
        "1016": "    assertEquals(\"[, null, a]\", create(\"\", null, \"a\").toString());\n",
        "1017": "  }\n",
        "1018": "\n",
        "1019": "  /** Returns a new iterable over the specified strings. */\n",
        "1020": "  private static Iterable<String> create(String... strings) {\n",
        "1021": "    final List<String> list = asList(strings);\n",
        "1022": "    return new FluentIterable<String>() {\n",
        "1023": "      @Override\n",
        "1024": "      public Iterator<String> iterator() {\n",
        "1025": "        return list.iterator();\n",
        "1026": "      }\n",
        "1027": "    };\n",
        "1028": "  }\n",
        "1029": "\n",
        "1030": "  public void testConsumingIterable() {\n",
        "1031": "    // Test data\n",
        "1032": "    List<String> list = Lists.newArrayList(asList(\"a\", \"b\"));\n",
        "1033": "\n",
        "1034": "    // Test & Verify\n",
        "1035": "    Iterable<String> consumingIterable = Iterables.consumingIterable(list);\n",
        "1036": "    assertEquals(\"Iterables.consumingIterable(...)\", consumingIterable.toString());\n",
        "1037": "    Iterator<String> consumingIterator = consumingIterable.iterator();\n",
        "1038": "\n",
        "1039": "    assertThat(list).containsExactly(\"a\", \"b\").inOrder();\n",
        "1040": "\n",
        "1041": "    assertTrue(consumingIterator.hasNext());\n",
        "1042": "    assertThat(list).containsExactly(\"a\", \"b\").inOrder();\n",
        "1043": "    assertEquals(\"a\", consumingIterator.next());\n",
        "1044": "    assertThat(list).contains(\"b\");\n",
        "1045": "\n",
        "1046": "    assertTrue(consumingIterator.hasNext());\n",
        "1047": "    assertEquals(\"b\", consumingIterator.next());\n",
        "1048": "    assertThat(list).isEmpty();\n",
        "1049": "\n",
        "1050": "    assertFalse(consumingIterator.hasNext());\n",
        "1051": "  }\n",
        "1052": "\n",
        "1053": "  public void testConsumingIterable_queue_iterator() {\n",
        "1054": "    final List<Integer> items = ImmutableList.of(4, 8, 15, 16, 23, 42);\n",
        "1055": "    new IteratorTester<Integer>(\n",
        "1056": "        3,\n",
        "1057": "        UNMODIFIABLE,\n",
        "1058": "        items,\n",
        "1059": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "1060": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "1061": "        return Iterables.consumingIterable(Lists.newLinkedList(items))\n",
        "1062": "            .iterator();\n",
        "1063": "      }\n",
        "1064": "    }.test();\n",
        "1065": "  }\n",
        "1066": "\n",
        "1067": "  public void testConsumingIterable_queue_removesFromQueue() {\n",
        "1068": "    Queue<Integer> queue = Lists.newLinkedList(asList(5, 14));\n",
        "1069": "\n",
        "1070": "    Iterator<Integer> consumingIterator =\n",
        "1071": "        Iterables.consumingIterable(queue).iterator();\n",
        "1072": "\n",
        "1073": "    assertEquals(5, queue.peek().intValue());\n",
        "1074": "    assertEquals(5, consumingIterator.next().intValue());\n",
        "1075": "\n",
        "1076": "    assertEquals(14, queue.peek().intValue());\n",
        "1077": "    assertTrue(consumingIterator.hasNext());\n",
        "1078": "    assertTrue(queue.isEmpty());\n",
        "1079": "  }\n",
        "1080": "\n",
        "1081": "  public void testConsumingIterable_noIteratorCall() {\n",
        "1082": "    Queue<Integer> queue =\n",
        "1083": "        new UnIterableQueue<Integer>(Lists.newLinkedList(asList(5, 14)));\n",
        "1084": "\n",
        "1085": "    Iterator<Integer> consumingIterator =\n",
        "1086": "        Iterables.consumingIterable(queue).iterator();\n",
        "1087": "    /*\n",
        "1088": "     * Make sure that we can get an element off without calling\n",
        "1089": "     * UnIterableQueue.iterator().\n",
        "1090": "     */\n",
        "1091": "    assertEquals(5, consumingIterator.next().intValue());\n",
        "1092": "  }\n",
        "1093": "\n",
        "1094": "  private static class UnIterableQueue<T> extends ForwardingQueue<T> {\n",
        "1095": "    private Queue<T> queue;\n",
        "1096": "\n",
        "1097": "    UnIterableQueue(Queue<T> queue) {\n",
        "1098": "      this.queue = queue;\n",
        "1099": "    }\n",
        "1100": "\n",
        "1101": "    @Override public Iterator<T> iterator() {\n",
        "1102": "      throw new UnsupportedOperationException();\n",
        "1103": "    }\n",
        "1104": "\n",
        "1105": "    @Override protected Queue<T> delegate() {\n",
        "1106": "      return queue;\n",
        "1107": "    }\n",
        "1108": "  }\n",
        "1109": "\n",
        "1110": "  public void testIndexOf_empty() {\n",
        "1111": "    List<String> list = new ArrayList<String>();\n",
        "1112": "    assertEquals(-1, Iterables.indexOf(list, Predicates.equalTo(\"\")));\n",
        "1113": "  }\n",
        "1114": "\n",
        "1115": "  public void testIndexOf_oneElement() {\n",
        "1116": "    List<String> list = Lists.newArrayList(\"bob\");\n",
        "1117": "    assertEquals(0, Iterables.indexOf(list, Predicates.equalTo(\"bob\")));\n",
        "1118": "    assertEquals(-1, Iterables.indexOf(list, Predicates.equalTo(\"jack\")));\n",
        "1119": "  }\n",
        "1120": "\n",
        "1121": "  public void testIndexOf_twoElements() {\n",
        "1122": "    List<String> list = Lists.newArrayList(\"mary\", \"bob\");\n",
        "1123": "    assertEquals(0, Iterables.indexOf(list, Predicates.equalTo(\"mary\")));\n",
        "1124": "    assertEquals(1, Iterables.indexOf(list, Predicates.equalTo(\"bob\")));\n",
        "1125": "    assertEquals(-1, Iterables.indexOf(list, Predicates.equalTo(\"jack\")));\n",
        "1126": "  }\n",
        "1127": "\n",
        "1128": "  public void testIndexOf_withDuplicates() {\n",
        "1129": "    List<String> list =\n",
        "1130": "        Lists.newArrayList(\"mary\", \"bob\", \"bob\", \"bob\", \"sam\");\n",
        "1131": "    assertEquals(0, Iterables.indexOf(list, Predicates.equalTo(\"mary\")));\n",
        "1132": "    assertEquals(1, Iterables.indexOf(list, Predicates.equalTo(\"bob\")));\n",
        "1133": "    assertEquals(4, Iterables.indexOf(list, Predicates.equalTo(\"sam\")));\n",
        "1134": "    assertEquals(-1, Iterables.indexOf(list, Predicates.equalTo(\"jack\")));\n",
        "1135": "  }\n",
        "1136": "\n",
        "1137": "  private static final Predicate<CharSequence> STARTSWITH_A =\n",
        "1138": "      new Predicate<CharSequence>() {\n",
        "1139": "        @Override public boolean apply(CharSequence input) {\n",
        "1140": "          return (input.length() > 0) && (input.charAt(0) == 'a');\n",
        "1141": "        }\n",
        "1142": "      };\n",
        "1143": "\n",
        "1144": "  public void testIndexOf_genericPredicate() {\n",
        "1145": "    List<CharSequence> sequences = Lists.newArrayList();\n",
        "1146": "    sequences.add(\"bob\");\n",
        "1147": "    sequences.add(new StringBuilder(\"charlie\"));\n",
        "1148": "    sequences.add(new StringBuffer(\"henry\"));\n",
        "1149": "    sequences.add(new StringBuilder(\"apple\"));\n",
        "1150": "    sequences.add(\"lemon\");\n",
        "1151": "\n",
        "1152": "    assertEquals(3, Iterables.indexOf(sequences, STARTSWITH_A));\n",
        "1153": "  }\n",
        "1154": "\n",
        "1155": "  public void testIndexOf_genericPredicate2() {\n",
        "1156": "    List<String> sequences =\n",
        "1157": "        Lists.newArrayList(\"bob\", \"charlie\", \"henry\", \"apple\", \"lemon\");\n",
        "1158": "    assertEquals(3, Iterables.indexOf(sequences, STARTSWITH_A));\n",
        "1159": "  }\n",
        "1160": "\n",
        "1161": "  public void testMergeSorted_empty() {\n",
        "1162": "    // Setup\n",
        "1163": "    Iterable<Iterable<Integer>> elements = ImmutableList.of();\n",
        "1164": "\n",
        "1165": "    // Test\n",
        "1166": "    Iterable<Integer> iterable =\n",
        "1167": "        Iterables.mergeSorted(elements, Ordering.natural());\n",
        "1168": "\n",
        "1169": "    // Verify\n",
        "1170": "    Iterator<Integer> iterator = iterable.iterator();\n",
        "1171": "    assertFalse(iterator.hasNext());\n",
        "1172": "    try {\n",
        "1173": "      iterator.next();\n",
        "1174": "      fail(\"next() on empty iterator should throw NoSuchElementException\");\n",
        "1175": "    } catch (NoSuchElementException e) {\n",
        "1176": "      // Huzzah!\n",
        "1177": "    }\n",
        "1178": "  }\n",
        "1179": "\n",
        "1180": "  public void testMergeSorted_single_empty() {\n",
        "1181": "    // Setup\n",
        "1182": "    Iterable<Integer> iterable0 = ImmutableList.of();\n",
        "1183": "    Iterable<Iterable<Integer>> iterables = ImmutableList.of(iterable0);\n",
        "1184": "\n",
        "1185": "    // Test & Verify\n",
        "1186": "    verifyMergeSorted(iterables, ImmutableList.<Integer>of());\n",
        "1187": "  }\n",
        "1188": "\n",
        "1189": "  public void testMergeSorted_single() {\n",
        "1190": "    // Setup\n",
        "1191": "    Iterable<Integer> iterable0 = ImmutableList.of(1, 2, 3);\n",
        "1192": "    Iterable<Iterable<Integer>> iterables = ImmutableList.of(iterable0);\n",
        "1193": "\n",
        "1194": "    // Test & Verify\n",
        "1195": "    verifyMergeSorted(iterables, iterable0);\n",
        "1196": "  }\n",
        "1197": "\n",
        "1198": "  public void testMergeSorted_pyramid() {\n",
        "1199": "    List<Iterable<Integer>> iterables = Lists.newLinkedList();\n",
        "1200": "    List<Integer> allIntegers = Lists.newArrayList();\n",
        "1201": "\n",
        "1202": "    // Creates iterators like: {{}, {0}, {0, 1}, {0, 1, 2}, ...}\n",
        "1203": "    for (int i = 0; i < 10; i++) {\n",
        "1204": "      List<Integer> list = Lists.newLinkedList();\n",
        "1205": "      for (int j = 0; j < i; j++) {\n",
        "1206": "        list.add(j);\n",
        "1207": "        allIntegers.add(j);\n",
        "1208": "      }\n",
        "1209": "      iterables.add(Ordering.natural().sortedCopy(list));\n",
        "1210": "    }\n",
        "1211": "\n",
        "1212": "    verifyMergeSorted(iterables, allIntegers);\n",
        "1213": "  }\n",
        "1214": "\n",
        "1215": "  // Like the pyramid, but creates more unique values, along with repeated ones.\n",
        "1216": "  public void testMergeSorted_skipping_pyramid() {\n",
        "1217": "    List<Iterable<Integer>> iterables = Lists.newLinkedList();\n",
        "1218": "    List<Integer> allIntegers = Lists.newArrayList();\n",
        "1219": "\n",
        "1220": "    for (int i = 0; i < 20; i++) {\n",
        "1221": "      List<Integer> list = Lists.newLinkedList();\n",
        "1222": "      for (int j = 0; j < i; j++) {\n",
        "1223": "        list.add(j * i);\n",
        "1224": "        allIntegers.add(j * i);\n",
        "1225": "      }\n",
        "1226": "      iterables.add(Ordering.natural().sortedCopy(list));\n",
        "1227": "    }\n",
        "1228": "\n",
        "1229": "    verifyMergeSorted(iterables, allIntegers);\n",
        "1230": "  }\n",
        "1231": "\n",
        "1232": "  private static void verifyMergeSorted(Iterable<Iterable<Integer>> iterables,\n",
        "1233": "      Iterable<Integer> unsortedExpected) {\n",
        "1234": "    Iterable<Integer> expected =\n",
        "1235": "        Ordering.natural().sortedCopy(unsortedExpected);\n",
        "1236": "\n",
        "1237": "    Iterable<Integer> mergedIterator =\n",
        "1238": "        Iterables.mergeSorted(iterables, Ordering.natural());\n",
        "1239": "\n",
        "1240": "    assertEquals(Lists.newLinkedList(expected),\n",
        "1241": "        Lists.newLinkedList(mergedIterator));\n",
        "1242": "  }\n",
        "1243": "}\n"
    }
}