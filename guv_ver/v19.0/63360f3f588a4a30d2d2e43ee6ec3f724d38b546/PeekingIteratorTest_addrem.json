{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.Iterators.peekingIterator;\n",
        "20": "import static com.google.common.collect.testing.IteratorFeature.MODIFIABLE;\n",
        "21": "import static com.google.common.collect.testing.IteratorFeature.UNMODIFIABLE;\n",
        "22": "import static java.util.Collections.emptyList;\n",
        "23": "\n",
        "24": "import com.google.common.annotations.GwtCompatible;\n",
        "25": "import com.google.common.collect.testing.IteratorTester;\n",
        "26": "\n",
        "27": "import junit.framework.TestCase;\n",
        "28": "\n",
        "29": "import java.util.Collection;\n",
        "30": "import java.util.Collections;\n",
        "31": "import java.util.Iterator;\n",
        "32": "import java.util.List;\n",
        "33": "import java.util.NoSuchElementException;\n",
        "34": "\n",
        "35": "/**\n",
        "36": "  * Unit test for {@link PeekingIterator}.\n",
        "37": "  *\n",
        "38": "  * @author Mick Killianey\n",
        "39": "  */\n",
        "40": "@SuppressWarnings(\"serial\") // No serialization is used in this test\n",
        "41": "@GwtCompatible(emulated = true)\n",
        "42": "public class PeekingIteratorTest extends TestCase {\n",
        "43": "\n",
        "44": "  /**\n",
        "45": "   * Version of {@link IteratorTester} that compares an iterator over\n",
        "46": "   * a given collection of elements (used as the reference iterator)\n",
        "47": "   * against a {@code PeekingIterator} that *wraps* such an iterator\n",
        "48": "   * (used as the target iterator).\n",
        "49": "   *\n",
        "50": "   * <p>This IteratorTester makes copies of the master so that it can\n",
        "51": "   * later verify that {@link PeekingIterator#remove()} removes the\n",
        "52": "   * same elements as the reference's iterator {@code #remove()}.\n",
        "53": "   */\n",
        "54": "  private static class PeekingIteratorTester<T> extends IteratorTester<T> {\n",
        "55": "    private Iterable<T> master;\n",
        "56": "    private List<T> targetList;\n",
        "57": "\n",
        "58": "    public PeekingIteratorTester(Collection<T> master) {\n",
        "59": "      super(master.size() + 3, MODIFIABLE, master,\n",
        "60": "          IteratorTester.KnownOrder.KNOWN_ORDER);\n",
        "61": "      this.master = master;\n",
        "62": "    }\n",
        "63": "    @Override protected Iterator<T> newTargetIterator() {\n",
        "64": "      // make copy from master to verify later\n",
        "65": "      targetList = Lists.newArrayList(master);\n",
        "66": "      Iterator<T> iterator = targetList.iterator();\n",
        "67": "      return Iterators.peekingIterator(iterator);\n",
        "68": "    }\n",
        "69": "    @Override protected void verify(List<T> elements) {\n",
        "70": "      // verify same objects were removed from reference and target\n",
        "71": "      assertEquals(elements, targetList);\n",
        "72": "    }\n",
        "73": "  }\n",
        "74": "\n",
        "75": "  private <T> void actsLikeIteratorHelper(final List<T> list) {\n",
        "76": "    // Check with modifiable copies of the list\n",
        "77": "    new PeekingIteratorTester<T>(list).test();\n",
        "78": "\n",
        "79": "    // Check with unmodifiable lists\n",
        "80": "    new IteratorTester<T>(list.size() * 2 + 2, UNMODIFIABLE, list,\n",
        "81": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "82": "      @Override protected Iterator<T> newTargetIterator() {\n",
        "83": "        Iterator<T> iterator = Collections.unmodifiableList(list).iterator();\n",
        "84": "        return Iterators.peekingIterator(iterator);\n",
        "85": "      }\n",
        "86": "    }.test();\n",
        "87": "  }\n",
        "88": "\n",
        "89": "  public void testPeekingIteratorBehavesLikeIteratorOnEmptyIterable() {\n",
        "90": "    actsLikeIteratorHelper(Collections.emptyList());\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  public void testPeekingIteratorBehavesLikeIteratorOnSingletonIterable() {\n",
        "94": "    actsLikeIteratorHelper(Collections.singletonList(new Object()));\n",
        "95": "  }\n",
        "96": "\n",
        "97": "  // TODO(cpovirk): instead of skipping, use a smaller number of steps\n",
        "98": "\n",
        "99": "  public void testPeekOnEmptyList() {\n",
        "100": "    List<?> list = Collections.emptyList();\n",
        "101": "    Iterator<?> iterator = list.iterator();\n",
        "102": "    PeekingIterator<?> peekingIterator = Iterators.peekingIterator(iterator);\n",
        "103": "\n",
        "104": "    try {\n",
        "105": "      peekingIterator.peek();\n",
        "106": "      fail(\"Should throw NoSuchElementException if nothing to peek()\");\n",
        "107": "    } catch (NoSuchElementException e) { /* expected */ }\n",
        "108": "  }\n",
        "109": "\n",
        "110": "  public void testPeekDoesntChangeIteration() {\n",
        "111": "    List<?> list = Lists.newArrayList(\"A\", \"B\", \"C\");\n",
        "112": "    Iterator<?> iterator = list.iterator();\n",
        "113": "    PeekingIterator<?> peekingIterator =\n",
        "114": "        Iterators.peekingIterator(iterator);\n",
        "115": "\n",
        "116": "    assertEquals(\"Should be able to peek() at first element\",\n",
        "117": "        \"A\", peekingIterator.peek());\n",
        "118": "    assertEquals(\"Should be able to peek() first element multiple times\",\n",
        "119": "        \"A\", peekingIterator.peek());\n",
        "120": "    assertEquals(\"next() should still return first element after peeking\",\n",
        "121": "        \"A\", peekingIterator.next());\n",
        "122": "\n",
        "123": "    assertEquals(\"Should be able to peek() at middle element\",\n",
        "124": "        \"B\", peekingIterator.peek());\n",
        "125": "    assertEquals(\"Should be able to peek() middle element multiple times\",\n",
        "126": "        \"B\", peekingIterator.peek());\n",
        "127": "    assertEquals(\"next() should still return middle element after peeking\",\n",
        "128": "        \"B\", peekingIterator.next());\n",
        "129": "\n",
        "130": "    assertEquals(\"Should be able to peek() at last element\",\n",
        "131": "        \"C\", peekingIterator.peek());\n",
        "132": "    assertEquals(\"Should be able to peek() last element multiple times\",\n",
        "133": "        \"C\", peekingIterator.peek());\n",
        "134": "    assertEquals(\"next() should still return last element after peeking\",\n",
        "135": "        \"C\", peekingIterator.next());\n",
        "136": "\n",
        "137": "    try {\n",
        "138": "      peekingIterator.peek();\n",
        "139": "      fail(\"Should throw exception if no next to peek()\");\n",
        "140": "    } catch (NoSuchElementException e) { /* expected */ }\n",
        "141": "    try {\n",
        "142": "      peekingIterator.peek();\n",
        "143": "      fail(\"Should continue to throw exception if no next to peek()\");\n",
        "144": "    } catch (NoSuchElementException e) { /* expected */ }\n",
        "145": "    try {\n",
        "146": "      peekingIterator.next();\n",
        "147": "      fail(\"next() should still throw exception after the end of iteration\");\n",
        "148": "    } catch (NoSuchElementException e) { /* expected */ }\n",
        "149": "  }\n",
        "150": "\n",
        "151": "  public void testCantRemoveAfterPeek() {\n",
        "152": "    List<String> list = Lists.newArrayList(\"A\", \"B\", \"C\");\n",
        "153": "    Iterator<String> iterator = list.iterator();\n",
        "154": "    PeekingIterator<?> peekingIterator = Iterators.peekingIterator(iterator);\n",
        "155": "\n",
        "156": "    assertEquals(\"A\", peekingIterator.next());\n",
        "157": "    assertEquals(\"B\", peekingIterator.peek());\n",
        "158": "\n",
        "159": "    /* Should complain on attempt to remove() after peek(). */\n",
        "160": "    try {\n",
        "161": "      peekingIterator.remove();\n",
        "162": "      fail(\"remove() should throw IllegalStateException after a peek()\");\n",
        "163": "    } catch (IllegalStateException e) { /* expected */ }\n",
        "164": "\n",
        "165": "    assertEquals(\"After remove() throws exception, peek should still be ok\",\n",
        "166": "        \"B\", peekingIterator.peek());\n",
        "167": "\n",
        "168": "    /* Should recover to be able to remove() after next(). */\n",
        "169": "    assertEquals(\"B\", peekingIterator.next());\n",
        "170": "    peekingIterator.remove();\n",
        "171": "    assertEquals(\"Should have removed an element\", 2, list.size());\n",
        "172": "    assertFalse(\"Second element should be gone\", list.contains(\"B\"));\n",
        "173": "  }\n",
        "174": "\n",
        "175": "  static class ThrowsAtEndException extends RuntimeException { /* nothing */ }\n",
        "176": "\n",
        "177": "  /**\n",
        "178": "    * This Iterator claims to have more elements than the underlying\n",
        "179": "    * iterable, but when you try to fetch the extra elements, it throws\n",
        "180": "    * an unchecked exception.\n",
        "181": "    */\n",
        "182": "  static class ThrowsAtEndIterator<E> implements Iterator<E> {\n",
        "183": "    Iterator<E> iterator;\n",
        "184": "    public ThrowsAtEndIterator(Iterable<E> iterable) {\n",
        "185": "      this.iterator = iterable.iterator();\n",
        "186": "    }\n",
        "187": "    @Override\n",
        "188": "    public boolean hasNext() {\n",
        "189": "      return true;  // pretend that you have more...\n",
        "190": "    }\n",
        "191": "    @Override\n",
        "192": "    public E next() {\n",
        "193": "      // ...but throw an unchecked exception when you ask for it.\n",
        "194": "      if (!iterator.hasNext()) {\n",
        "195": "        throw new ThrowsAtEndException();\n",
        "196": "      }\n",
        "197": "      return iterator.next();\n",
        "198": "    }\n",
        "199": "    @Override\n",
        "200": "    public void remove() {\n",
        "201": "      iterator.remove();\n",
        "202": "    }\n",
        "203": "  }\n",
        "204": "\n",
        "205": "  public void testPeekingIteratorDoesntAdvancePrematurely() throws Exception {\n",
        "206": "    /*\n",
        "207": "     * This test will catch problems where the underlying iterator\n",
        "208": "     * throws a RuntimeException when retrieving the nth element.\n",
        "209": "     *\n",
        "210": "     * If the PeekingIterator is caching elements too aggressively,\n",
        "211": "     * it may throw the exception on the (n-1)th element (oops!).\n",
        "212": "     */\n",
        "213": "\n",
        "214": "    /* Checks the case where the first element throws an exception. */\n",
        "215": "\n",
        "216": "    List<Integer> list = emptyList();\n",
        "217": "    Iterator<Integer> iterator =\n",
        "218": "        peekingIterator(new ThrowsAtEndIterator<Integer>(list));\n",
        "219": "    assertNextThrows(iterator);\n",
        "220": "\n",
        "221": "    /* Checks the case where a later element throws an exception. */\n",
        "222": "\n",
        "223": "    list = Lists.newArrayList(1, 2);\n",
        "224": "    iterator = peekingIterator(new ThrowsAtEndIterator<Integer>(list));\n",
        "225": "    assertTrue(iterator.hasNext());\n",
        "226": "    iterator.next();\n",
        "227": "    assertTrue(iterator.hasNext());\n",
        "228": "    iterator.next();\n",
        "229": "    assertNextThrows(iterator);\n",
        "230": "  }\n",
        "231": "\n",
        "232": "  private void assertNextThrows(Iterator<?> iterator) {\n",
        "233": "    try {\n",
        "234": "      iterator.next();\n",
        "235": "      fail();\n",
        "236": "    } catch (ThrowsAtEndException expected) {\n",
        "237": "    }\n",
        "238": "  }\n",
        "239": "}\n",
        "240": "\n"
    }
}