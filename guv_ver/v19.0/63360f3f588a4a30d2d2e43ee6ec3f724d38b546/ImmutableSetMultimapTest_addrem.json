{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2009 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.collect.ImmutableSetMultimap.Builder;\n",
        "23": "import com.google.common.collect.testing.google.TestStringSetMultimapGenerator;\n",
        "24": "import com.google.common.collect.testing.google.UnmodifiableCollectionTests;\n",
        "25": "import com.google.common.testing.EqualsTester;\n",
        "26": "\n",
        "27": "import junit.framework.TestCase;\n",
        "28": "\n",
        "29": "import java.util.Arrays;\n",
        "30": "import java.util.Collections;\n",
        "31": "import java.util.Map.Entry;\n",
        "32": "\n",
        "33": "/**\n",
        "34": " * Tests for {@link ImmutableSetMultimap}.\n",
        "35": " *\n",
        "36": " * @author Mike Ward\n",
        "37": " */\n",
        "38": "@GwtCompatible(emulated = true)\n",
        "39": "public class ImmutableSetMultimapTest extends TestCase {\n",
        "40": "  private static final class ImmutableSetMultimapGenerator extends\n",
        "41": "      TestStringSetMultimapGenerator {\n",
        "42": "    @Override\n",
        "43": "    protected SetMultimap<String, String> create(Entry<String, String>[] entries) {\n",
        "44": "      ImmutableSetMultimap.Builder<String, String> builder = ImmutableSetMultimap.builder();\n",
        "45": "      for (Entry<String, String> entry : entries) {\n",
        "46": "        builder.put(entry.getKey(), entry.getValue());\n",
        "47": "      }\n",
        "48": "      return builder.build();\n",
        "49": "    }\n",
        "50": "  }\n",
        "51": "  \n",
        "52": "  private static final class ImmutableSetMultimapCopyOfEntriesGenerator extends\n",
        "53": "      TestStringSetMultimapGenerator {\n",
        "54": "    @Override\n",
        "55": "    protected SetMultimap<String, String> create(Entry<String, String>[] entries) {\n",
        "56": "      return ImmutableSetMultimap.copyOf(Arrays.asList(entries));\n",
        "57": "    }\n",
        "58": "  }\n",
        "59": "\n",
        "60": "  public void testBuilder_withImmutableEntry() {\n",
        "61": "    ImmutableSetMultimap<String, Integer> multimap = new Builder<String, Integer>()\n",
        "62": "        .put(Maps.immutableEntry(\"one\", 1))\n",
        "63": "        .build();\n",
        "64": "    assertEquals(ImmutableSet.of(1), multimap.get(\"one\"));\n",
        "65": "  }\n",
        "66": "\n",
        "67": "  public void testBuilder_withImmutableEntryAndNullContents() {\n",
        "68": "    Builder<String, Integer> builder = new Builder<String, Integer>();\n",
        "69": "    try {\n",
        "70": "      builder.put(Maps.immutableEntry(\"one\", (Integer) null));\n",
        "71": "      fail();\n",
        "72": "    } catch (NullPointerException expected) {\n",
        "73": "    }\n",
        "74": "    try {\n",
        "75": "      builder.put(Maps.immutableEntry((String) null, 1));\n",
        "76": "      fail();\n",
        "77": "    } catch (NullPointerException expected) {\n",
        "78": "    }\n",
        "79": "  }\n",
        "80": "\n",
        "81": "  private static class StringHolder {\n",
        "82": "    String string;\n",
        "83": "  }\n",
        "84": "\n",
        "85": "  public void testBuilder_withMutableEntry() {\n",
        "86": "    ImmutableSetMultimap.Builder<String, Integer> builder =\n",
        "87": "        new Builder<String, Integer>();\n",
        "88": "    final StringHolder holder = new StringHolder();\n",
        "89": "    holder.string = \"one\";\n",
        "90": "    Entry<String, Integer> entry = new AbstractMapEntry<String, Integer>() {\n",
        "91": "      @Override public String getKey() {\n",
        "92": "        return holder.string;\n",
        "93": "      }\n",
        "94": "      @Override public Integer getValue() {\n",
        "95": "        return 1;\n",
        "96": "      }\n",
        "97": "    };\n",
        "98": "\n",
        "99": "    builder.put(entry);\n",
        "100": "    holder.string = \"two\";\n",
        "101": "    assertEquals(ImmutableSet.of(1), builder.build().get(\"one\"));\n",
        "102": "  }\n",
        "103": "\n",
        "104": "  public void testBuilderPutAllIterable() {\n",
        "105": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "106": "        = ImmutableSetMultimap.builder();\n",
        "107": "    builder.putAll(\"foo\", Arrays.asList(1, 2, 3));\n",
        "108": "    builder.putAll(\"bar\", Arrays.asList(4, 5));\n",
        "109": "    builder.putAll(\"foo\", Arrays.asList(6, 7));\n",
        "110": "    Multimap<String, Integer> multimap = builder.build();\n",
        "111": "    assertEquals(ImmutableSet.of(1, 2, 3, 6, 7), multimap.get(\"foo\"));\n",
        "112": "    assertEquals(ImmutableSet.of(4, 5), multimap.get(\"bar\"));\n",
        "113": "    assertEquals(7, multimap.size());\n",
        "114": "  }\n",
        "115": "\n",
        "116": "  public void testBuilderPutAllVarargs() {\n",
        "117": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "118": "        = ImmutableSetMultimap.builder();\n",
        "119": "    builder.putAll(\"foo\", 1, 2, 3);\n",
        "120": "    builder.putAll(\"bar\", 4, 5);\n",
        "121": "    builder.putAll(\"foo\", 6, 7);\n",
        "122": "    Multimap<String, Integer> multimap = builder.build();\n",
        "123": "    assertEquals(ImmutableSet.of(1, 2, 3, 6, 7), multimap.get(\"foo\"));\n",
        "124": "    assertEquals(ImmutableSet.of(4, 5), multimap.get(\"bar\"));\n",
        "125": "    assertEquals(7, multimap.size());\n",
        "126": "  }\n",
        "127": "\n",
        "128": "  public void testBuilderPutAllMultimap() {\n",
        "129": "    Multimap<String, Integer> toPut = LinkedListMultimap.create();\n",
        "130": "    toPut.put(\"foo\", 1);\n",
        "131": "    toPut.put(\"bar\", 4);\n",
        "132": "    toPut.put(\"foo\", 2);\n",
        "133": "    toPut.put(\"foo\", 3);\n",
        "134": "    Multimap<String, Integer> moreToPut = LinkedListMultimap.create();\n",
        "135": "    moreToPut.put(\"foo\", 6);\n",
        "136": "    moreToPut.put(\"bar\", 5);\n",
        "137": "    moreToPut.put(\"foo\", 7);\n",
        "138": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "139": "        = ImmutableSetMultimap.builder();\n",
        "140": "    builder.putAll(toPut);\n",
        "141": "    builder.putAll(moreToPut);\n",
        "142": "    Multimap<String, Integer> multimap = builder.build();\n",
        "143": "    assertEquals(ImmutableSet.of(1, 2, 3, 6, 7), multimap.get(\"foo\"));\n",
        "144": "    assertEquals(ImmutableSet.of(4, 5), multimap.get(\"bar\"));\n",
        "145": "    assertEquals(7, multimap.size());\n",
        "146": "  }\n",
        "147": "\n",
        "148": "  public void testBuilderPutAllWithDuplicates() {\n",
        "149": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "150": "        = ImmutableSetMultimap.builder();\n",
        "151": "    builder.putAll(\"foo\", 1, 2, 3);\n",
        "152": "    builder.putAll(\"bar\", 4, 5);\n",
        "153": "    builder.putAll(\"foo\", 1, 6, 7);\n",
        "154": "    ImmutableSetMultimap<String, Integer> multimap = builder.build();\n",
        "155": "    assertEquals(7, multimap.size());\n",
        "156": "  }\n",
        "157": "\n",
        "158": "  public void testBuilderPutWithDuplicates() {\n",
        "159": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "160": "        = ImmutableSetMultimap.builder();\n",
        "161": "    builder.putAll(\"foo\", 1, 2, 3);\n",
        "162": "    builder.putAll(\"bar\", 4, 5);\n",
        "163": "    builder.put(\"foo\", 1);\n",
        "164": "    ImmutableSetMultimap<String, Integer> multimap = builder.build();\n",
        "165": "    assertEquals(5, multimap.size());\n",
        "166": "  }\n",
        "167": "\n",
        "168": "  public void testBuilderPutAllMultimapWithDuplicates() {\n",
        "169": "    Multimap<String, Integer> toPut = LinkedListMultimap.create();\n",
        "170": "    toPut.put(\"foo\", 1);\n",
        "171": "    toPut.put(\"bar\", 4);\n",
        "172": "    toPut.put(\"foo\", 2);\n",
        "173": "    toPut.put(\"foo\", 1);\n",
        "174": "    toPut.put(\"bar\", 5);\n",
        "175": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "176": "        = ImmutableSetMultimap.builder();\n",
        "177": "    builder.putAll(toPut);\n",
        "178": "    ImmutableSetMultimap<String, Integer> multimap = builder.build();\n",
        "179": "    assertEquals(4, multimap.size());\n",
        "180": "  }\n",
        "181": "\n",
        "182": "  public void testBuilderPutNullKey() {\n",
        "183": "    Multimap<String, Integer> toPut = LinkedListMultimap.create();\n",
        "184": "    toPut.put(\"foo\", null);\n",
        "185": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "186": "        = ImmutableSetMultimap.builder();\n",
        "187": "    try {\n",
        "188": "      builder.put(null, 1);\n",
        "189": "      fail();\n",
        "190": "    } catch (NullPointerException expected) {}\n",
        "191": "    try {\n",
        "192": "      builder.putAll(null, Arrays.asList(1, 2, 3));\n",
        "193": "      fail();\n",
        "194": "    } catch (NullPointerException expected) {}\n",
        "195": "    try {\n",
        "196": "      builder.putAll(null, 1, 2, 3);\n",
        "197": "      fail();\n",
        "198": "    } catch (NullPointerException expected) {}\n",
        "199": "    try {\n",
        "200": "      builder.putAll(toPut);\n",
        "201": "      fail();\n",
        "202": "    } catch (NullPointerException expected) {}\n",
        "203": "  }\n",
        "204": "\n",
        "205": "  public void testBuilderPutNullValue() {\n",
        "206": "    Multimap<String, Integer> toPut = LinkedListMultimap.create();\n",
        "207": "    toPut.put(null, 1);\n",
        "208": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "209": "        = ImmutableSetMultimap.builder();\n",
        "210": "    try {\n",
        "211": "      builder.put(\"foo\", null);\n",
        "212": "      fail();\n",
        "213": "    } catch (NullPointerException expected) {}\n",
        "214": "    try {\n",
        "215": "      builder.putAll(\"foo\", Arrays.asList(1, null, 3));\n",
        "216": "      fail();\n",
        "217": "    } catch (NullPointerException expected) {}\n",
        "218": "    try {\n",
        "219": "      builder.putAll(\"foo\", 4, null, 6);\n",
        "220": "      fail();\n",
        "221": "    } catch (NullPointerException expected) {}\n",
        "222": "    try {\n",
        "223": "      builder.putAll(toPut);\n",
        "224": "      fail();\n",
        "225": "    } catch (NullPointerException expected) {}\n",
        "226": "  }\n",
        "227": "\n",
        "228": "  public void testBuilderOrderKeysBy() {\n",
        "229": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "230": "        = ImmutableSetMultimap.builder();\n",
        "231": "    builder.put(\"b\", 3);\n",
        "232": "    builder.put(\"d\", 2);\n",
        "233": "    builder.put(\"a\", 5);\n",
        "234": "    builder.orderKeysBy(Collections.reverseOrder());\n",
        "235": "    builder.put(\"c\", 4);\n",
        "236": "    builder.put(\"a\", 2);\n",
        "237": "    builder.put(\"b\", 6);\n",
        "238": "    ImmutableSetMultimap<String, Integer> multimap = builder.build();\n",
        "239": "    assertThat(multimap.keySet()).containsExactly(\"d\", \"c\", \"b\", \"a\").inOrder();\n",
        "240": "    assertThat(multimap.values()).containsExactly(2, 4, 3, 6, 5, 2).inOrder();\n",
        "241": "    assertThat(multimap.get(\"a\")).containsExactly(5, 2).inOrder();\n",
        "242": "    assertThat(multimap.get(\"b\")).containsExactly(3, 6).inOrder();\n",
        "243": "    assertThat(multimap.get(\"a\")).isNotInstanceOf(ImmutableSortedSet.class);\n",
        "244": "    assertThat(multimap.get(\"x\")).isNotInstanceOf(ImmutableSortedSet.class);\n",
        "245": "    assertThat(multimap.asMap().get(\"a\")).isNotInstanceOf(ImmutableSortedSet.class);\n",
        "246": "  }\n",
        "247": "\n",
        "248": "  public void testBuilderOrderKeysByDuplicates() {\n",
        "249": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "250": "        = ImmutableSetMultimap.builder();\n",
        "251": "    builder.put(\"bb\", 3);\n",
        "252": "    builder.put(\"d\", 2);\n",
        "253": "    builder.put(\"a\", 5);\n",
        "254": "    builder.orderKeysBy(new Ordering<String>() {\n",
        "255": "      @Override\n",
        "256": "      public int compare(String left, String right) {\n",
        "257": "        return left.length() - right.length();\n",
        "258": "      }\n",
        "259": "    });\n",
        "260": "    builder.put(\"cc\", 4);\n",
        "261": "    builder.put(\"a\", 2);\n",
        "262": "    builder.put(\"bb\", 6);\n",
        "263": "    ImmutableSetMultimap<String, Integer> multimap = builder.build();\n",
        "264": "    assertThat(multimap.keySet()).containsExactly(\"d\", \"a\", \"bb\", \"cc\").inOrder();\n",
        "265": "    assertThat(multimap.values()).containsExactly(2, 5, 2, 3, 6, 4).inOrder();\n",
        "266": "    assertThat(multimap.get(\"a\")).containsExactly(5, 2).inOrder();\n",
        "267": "    assertThat(multimap.get(\"bb\")).containsExactly(3, 6).inOrder();\n",
        "268": "    assertThat(multimap.get(\"a\")).isNotInstanceOf(ImmutableSortedSet.class);\n",
        "269": "    assertThat(multimap.get(\"x\")).isNotInstanceOf(ImmutableSortedSet.class);\n",
        "270": "    assertThat(multimap.asMap().get(\"a\")).isNotInstanceOf(ImmutableSortedSet.class);\n",
        "271": "  }\n",
        "272": "\n",
        "273": "  public void testBuilderOrderValuesBy() {\n",
        "274": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "275": "        = ImmutableSetMultimap.builder();\n",
        "276": "    builder.put(\"b\", 3);\n",
        "277": "    builder.put(\"d\", 2);\n",
        "278": "    builder.put(\"a\", 5);\n",
        "279": "    builder.orderValuesBy(Collections.reverseOrder());\n",
        "280": "    builder.put(\"c\", 4);\n",
        "281": "    builder.put(\"a\", 2);\n",
        "282": "    builder.put(\"b\", 6);\n",
        "283": "    ImmutableSetMultimap<String, Integer> multimap = builder.build();\n",
        "284": "    assertThat(multimap.keySet()).containsExactly(\"b\", \"d\", \"a\", \"c\").inOrder();\n",
        "285": "    assertThat(multimap.values()).containsExactly(6, 3, 2, 5, 2, 4).inOrder();\n",
        "286": "    assertThat(multimap.get(\"a\")).containsExactly(5, 2).inOrder();\n",
        "287": "    assertThat(multimap.get(\"b\")).containsExactly(6, 3).inOrder();\n",
        "288": "    assertTrue(multimap.get(\"a\") instanceof ImmutableSortedSet);\n",
        "289": "    assertEquals(Collections.reverseOrder(),\n",
        "290": "        ((ImmutableSortedSet<Integer>) multimap.get(\"a\")).comparator());\n",
        "291": "    assertTrue(multimap.get(\"x\") instanceof ImmutableSortedSet);\n",
        "292": "    assertEquals(Collections.reverseOrder(),\n",
        "293": "        ((ImmutableSortedSet<Integer>) multimap.get(\"x\")).comparator());\n",
        "294": "    assertTrue(multimap.asMap().get(\"a\") instanceof ImmutableSortedSet);\n",
        "295": "    assertEquals(Collections.reverseOrder(),\n",
        "296": "        ((ImmutableSortedSet<Integer>) multimap.asMap().get(\"a\")).comparator());\n",
        "297": "  }\n",
        "298": "\n",
        "299": "  public void testBuilderOrderKeysAndValuesBy() {\n",
        "300": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "301": "        = ImmutableSetMultimap.builder();\n",
        "302": "    builder.put(\"b\", 3);\n",
        "303": "    builder.put(\"d\", 2);\n",
        "304": "    builder.put(\"a\", 5);\n",
        "305": "    builder.orderKeysBy(Collections.reverseOrder());\n",
        "306": "    builder.orderValuesBy(Collections.reverseOrder());\n",
        "307": "    builder.put(\"c\", 4);\n",
        "308": "    builder.put(\"a\", 2);\n",
        "309": "    builder.put(\"b\", 6);\n",
        "310": "    ImmutableSetMultimap<String, Integer> multimap = builder.build();\n",
        "311": "    assertThat(multimap.keySet()).containsExactly(\"d\", \"c\", \"b\", \"a\").inOrder();\n",
        "312": "    assertThat(multimap.values()).containsExactly(2, 4, 6, 3, 5, 2).inOrder();\n",
        "313": "    assertThat(multimap.get(\"a\")).containsExactly(5, 2).inOrder();\n",
        "314": "    assertThat(multimap.get(\"b\")).containsExactly(6, 3).inOrder();\n",
        "315": "    assertTrue(multimap.get(\"a\") instanceof ImmutableSortedSet);\n",
        "316": "    assertEquals(Collections.reverseOrder(),\n",
        "317": "        ((ImmutableSortedSet<Integer>) multimap.get(\"a\")).comparator());\n",
        "318": "    assertTrue(multimap.get(\"x\") instanceof ImmutableSortedSet);\n",
        "319": "    assertEquals(Collections.reverseOrder(),\n",
        "320": "        ((ImmutableSortedSet<Integer>) multimap.get(\"x\")).comparator());\n",
        "321": "    assertTrue(multimap.asMap().get(\"a\") instanceof ImmutableSortedSet);\n",
        "322": "    assertEquals(Collections.reverseOrder(),\n",
        "323": "        ((ImmutableSortedSet<Integer>) multimap.asMap().get(\"a\")).comparator());\n",
        "324": "  }\n",
        "325": "\n",
        "326": "  public void testCopyOf() {\n",
        "327": "    HashMultimap<String, Integer> input = HashMultimap.create();\n",
        "328": "    input.put(\"foo\", 1);\n",
        "329": "    input.put(\"bar\", 2);\n",
        "330": "    input.put(\"foo\", 3);\n",
        "331": "    Multimap<String, Integer> multimap = ImmutableSetMultimap.copyOf(input);\n",
        "332": "    assertEquals(multimap, input);\n",
        "333": "    assertEquals(input, multimap);\n",
        "334": "  }\n",
        "335": "\n",
        "336": "  public void testCopyOfWithDuplicates() {\n",
        "337": "    ArrayListMultimap<Object, Object> input = ArrayListMultimap.create();\n",
        "338": "    input.put(\"foo\", 1);\n",
        "339": "    input.put(\"bar\", 2);\n",
        "340": "    input.put(\"foo\", 3);\n",
        "341": "    input.put(\"foo\", 1);\n",
        "342": "    ImmutableSetMultimap<Object, Object> copy\n",
        "343": "        = ImmutableSetMultimap.copyOf(input);\n",
        "344": "    assertEquals(3, copy.size());\n",
        "345": "  }\n",
        "346": "\n",
        "347": "  public void testCopyOfEmpty() {\n",
        "348": "    HashMultimap<String, Integer> input = HashMultimap.create();\n",
        "349": "    Multimap<String, Integer> multimap = ImmutableSetMultimap.copyOf(input);\n",
        "350": "    assertEquals(multimap, input);\n",
        "351": "    assertEquals(input, multimap);\n",
        "352": "  }\n",
        "353": "\n",
        "354": "  public void testCopyOfImmutableSetMultimap() {\n",
        "355": "    Multimap<String, Integer> multimap = createMultimap();\n",
        "356": "    assertSame(multimap, ImmutableSetMultimap.copyOf(multimap));\n",
        "357": "  }\n",
        "358": "\n",
        "359": "  public void testCopyOfNullKey() {\n",
        "360": "    HashMultimap<String, Integer> input = HashMultimap.create();\n",
        "361": "    input.put(null, 1);\n",
        "362": "    try {\n",
        "363": "      ImmutableSetMultimap.copyOf(input);\n",
        "364": "      fail();\n",
        "365": "    } catch (NullPointerException expected) {}\n",
        "366": "  }\n",
        "367": "\n",
        "368": "  public void testCopyOfNullValue() {\n",
        "369": "    HashMultimap<String, Integer> input = HashMultimap.create();\n",
        "370": "    input.putAll(\"foo\", Arrays.asList(1, null, 3));\n",
        "371": "    try {\n",
        "372": "      ImmutableSetMultimap.copyOf(input);\n",
        "373": "      fail();\n",
        "374": "    } catch (NullPointerException expected) {}\n",
        "375": "  }\n",
        "376": "\n",
        "377": "  public void testEmptyMultimapReads() {\n",
        "378": "    Multimap<String, Integer> multimap = ImmutableSetMultimap.of();\n",
        "379": "    assertFalse(multimap.containsKey(\"foo\"));\n",
        "380": "    assertFalse(multimap.containsValue(1));\n",
        "381": "    assertFalse(multimap.containsEntry(\"foo\", 1));\n",
        "382": "    assertTrue(multimap.entries().isEmpty());\n",
        "383": "    assertTrue(multimap.equals(HashMultimap.create()));\n",
        "384": "    assertEquals(Collections.emptySet(), multimap.get(\"foo\"));\n",
        "385": "    assertEquals(0, multimap.hashCode());\n",
        "386": "    assertTrue(multimap.isEmpty());\n",
        "387": "    assertEquals(HashMultiset.create(), multimap.keys());\n",
        "388": "    assertEquals(Collections.emptySet(), multimap.keySet());\n",
        "389": "    assertEquals(0, multimap.size());\n",
        "390": "    assertTrue(multimap.values().isEmpty());\n",
        "391": "    assertEquals(\"{}\", multimap.toString());\n",
        "392": "  }\n",
        "393": "\n",
        "394": "  public void testEmptyMultimapWrites() {\n",
        "395": "    Multimap<String, Integer> multimap = ImmutableSetMultimap.of();\n",
        "396": "    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(\n",
        "397": "        multimap, \"foo\", 1);\n",
        "398": "  }\n",
        "399": "\n",
        "400": "  public void testMultimapReads() {\n",
        "401": "    Multimap<String, Integer> multimap = createMultimap();\n",
        "402": "    assertTrue(multimap.containsKey(\"foo\"));\n",
        "403": "    assertFalse(multimap.containsKey(\"cat\"));\n",
        "404": "    assertTrue(multimap.containsValue(1));\n",
        "405": "    assertFalse(multimap.containsValue(5));\n",
        "406": "    assertTrue(multimap.containsEntry(\"foo\", 1));\n",
        "407": "    assertFalse(multimap.containsEntry(\"cat\", 1));\n",
        "408": "    assertFalse(multimap.containsEntry(\"foo\", 5));\n",
        "409": "    assertFalse(multimap.entries().isEmpty());\n",
        "410": "    assertEquals(3, multimap.size());\n",
        "411": "    assertFalse(multimap.isEmpty());\n",
        "412": "    assertEquals(\"{foo=[1, 3], bar=[2]}\", multimap.toString());\n",
        "413": "  }\n",
        "414": "\n",
        "415": "  public void testMultimapWrites() {\n",
        "416": "    Multimap<String, Integer> multimap = createMultimap();\n",
        "417": "    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(\n",
        "418": "        multimap, \"bar\", 2);\n",
        "419": "  }\n",
        "420": "\n",
        "421": "  public void testMultimapEquals() {\n",
        "422": "    Multimap<String, Integer> multimap = createMultimap();\n",
        "423": "    Multimap<String, Integer> hashMultimap = HashMultimap.create();\n",
        "424": "    hashMultimap.putAll(\"foo\", Arrays.asList(1, 3));\n",
        "425": "    hashMultimap.put(\"bar\", 2);\n",
        "426": "\n",
        "427": "    new EqualsTester()\n",
        "428": "        .addEqualityGroup(\n",
        "429": "            multimap,\n",
        "430": "            createMultimap(),\n",
        "431": "            hashMultimap,\n",
        "432": "            ImmutableSetMultimap.<String, Integer>builder()\n",
        "433": "                .put(\"bar\", 2).put(\"foo\", 1).put(\"foo\", 3).build(),\n",
        "434": "            ImmutableSetMultimap.<String, Integer>builder()\n",
        "435": "                .put(\"bar\", 2).put(\"foo\", 3).put(\"foo\", 1).build())\n",
        "436": "        .addEqualityGroup(ImmutableSetMultimap.<String, Integer>builder()\n",
        "437": "            .put(\"foo\", 2).put(\"foo\", 3).put(\"foo\", 1).build())\n",
        "438": "        .addEqualityGroup(ImmutableSetMultimap.<String, Integer>builder()\n",
        "439": "            .put(\"bar\", 2).put(\"foo\", 3).build())\n",
        "440": "        .testEquals();\n",
        "441": "  }\n",
        "442": "\n",
        "443": "  public void testOf() {\n",
        "444": "    assertMultimapEquals(\n",
        "445": "        ImmutableSetMultimap.of(\"one\", 1),\n",
        "446": "        \"one\", 1);\n",
        "447": "    assertMultimapEquals(\n",
        "448": "        ImmutableSetMultimap.of(\"one\", 1, \"two\", 2),\n",
        "449": "        \"one\", 1, \"two\", 2);\n",
        "450": "    assertMultimapEquals(\n",
        "451": "        ImmutableSetMultimap.of(\"one\", 1, \"two\", 2, \"three\", 3),\n",
        "452": "        \"one\", 1, \"two\", 2, \"three\", 3);\n",
        "453": "    assertMultimapEquals(\n",
        "454": "        ImmutableSetMultimap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4),\n",
        "455": "        \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4);\n",
        "456": "    assertMultimapEquals(\n",
        "457": "        ImmutableSetMultimap.of(\n",
        "458": "            \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5),\n",
        "459": "        \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "460": "  }\n",
        "461": "\n",
        "462": "  public void testInverse() {\n",
        "463": "    assertEquals(\n",
        "464": "        ImmutableSetMultimap.<Integer, String>of(),\n",
        "465": "        ImmutableSetMultimap.<String, Integer>of().inverse());\n",
        "466": "    assertEquals(\n",
        "467": "        ImmutableSetMultimap.of(1, \"one\"),\n",
        "468": "        ImmutableSetMultimap.of(\"one\", 1).inverse());\n",
        "469": "    assertEquals(\n",
        "470": "        ImmutableSetMultimap.of(1, \"one\", 2, \"two\"),\n",
        "471": "        ImmutableSetMultimap.of(\"one\", 1, \"two\", 2).inverse());\n",
        "472": "    assertEquals(\n",
        "473": "        ImmutableSetMultimap.of('o', \"of\", 'f', \"of\", 't', \"to\", 'o', \"to\"),\n",
        "474": "        ImmutableSetMultimap.of(\"of\", 'o', \"of\", 'f', \"to\", 't', \"to\", 'o').inverse());\n",
        "475": "  }\n",
        "476": "\n",
        "477": "  public void testInverseMinimizesWork() {\n",
        "478": "    ImmutableSetMultimap<String, Character> multimap =\n",
        "479": "        ImmutableSetMultimap.of(\"of\", 'o', \"of\", 'f', \"to\", 't', \"to\", 'o');\n",
        "480": "    assertSame(multimap.inverse(), multimap.inverse());\n",
        "481": "    assertSame(multimap, multimap.inverse().inverse());\n",
        "482": "  }\n",
        "483": "\n",
        "484": "  private static <K, V> void assertMultimapEquals(Multimap<K, V> multimap,\n",
        "485": "      Object... alternatingKeysAndValues) {\n",
        "486": "    assertEquals(multimap.size(), alternatingKeysAndValues.length / 2);\n",
        "487": "    int i = 0;\n",
        "488": "    for (Entry<K, V> entry : multimap.entries()) {\n",
        "489": "      assertEquals(alternatingKeysAndValues[i++], entry.getKey());\n",
        "490": "      assertEquals(alternatingKeysAndValues[i++], entry.getValue());\n",
        "491": "    }\n",
        "492": "  }\n",
        "493": "\n",
        "494": "  private ImmutableSetMultimap<String, Integer> createMultimap() {\n",
        "495": "    return ImmutableSetMultimap.<String, Integer>builder()\n",
        "496": "        .put(\"foo\", 1).put(\"bar\", 2).put(\"foo\", 3).build();\n",
        "497": "  }\n",
        "498": "}\n",
        "499": "\n"
    }
}