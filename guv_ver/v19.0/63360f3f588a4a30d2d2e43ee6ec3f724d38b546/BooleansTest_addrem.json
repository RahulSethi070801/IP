{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.primitives;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.collect.testing.Helpers;\n",
        "21": "\n",
        "22": "import junit.framework.TestCase;\n",
        "23": "\n",
        "24": "import java.util.Arrays;\n",
        "25": "import java.util.Collection;\n",
        "26": "import java.util.Collections;\n",
        "27": "import java.util.Comparator;\n",
        "28": "import java.util.List;\n",
        "29": "\n",
        "30": "/**\n",
        "31": " * Unit test for {@link Booleans}.\n",
        "32": " *\n",
        "33": " * @author Kevin Bourrillion\n",
        "34": " */\n",
        "35": "@GwtCompatible(emulated = true)\n",
        "36": "public class BooleansTest extends TestCase {\n",
        "37": "  private static final boolean[] EMPTY = {};\n",
        "38": "  private static final boolean[] ARRAY_FALSE = {false};\n",
        "39": "  private static final boolean[] ARRAY_TRUE = {true};\n",
        "40": "  private static final boolean[] ARRAY_FALSE_FALSE = {false, false};\n",
        "41": "  private static final boolean[] ARRAY_FALSE_TRUE = {false, true};\n",
        "42": "\n",
        "43": "  private static final boolean[] VALUES = {false, true};\n",
        "44": "\n",
        "45": "  public void testHashCode() {\n",
        "46": "    assertEquals(Boolean.TRUE.hashCode(), Booleans.hashCode(true));\n",
        "47": "    assertEquals(Boolean.FALSE.hashCode(), Booleans.hashCode(false));\n",
        "48": "  }\n",
        "49": "\n",
        "50": "  public void testCompare() {\n",
        "51": "    for (boolean x : VALUES) {\n",
        "52": "      for (boolean y : VALUES) {\n",
        "53": "        // note: spec requires only that the sign is the same\n",
        "54": "        assertEquals(x + \", \" + y,\n",
        "55": "                     Boolean.valueOf(x).compareTo(y),\n",
        "56": "                     Booleans.compare(x, y));\n",
        "57": "      }\n",
        "58": "    }\n",
        "59": "  }\n",
        "60": "\n",
        "61": "  public void testContains() {\n",
        "62": "    assertFalse(Booleans.contains(EMPTY, false));\n",
        "63": "    assertFalse(Booleans.contains(ARRAY_FALSE, true));\n",
        "64": "    assertTrue(Booleans.contains(ARRAY_FALSE, false));\n",
        "65": "    assertTrue(Booleans.contains(ARRAY_FALSE_TRUE, false));\n",
        "66": "    assertTrue(Booleans.contains(ARRAY_FALSE_TRUE, true));\n",
        "67": "  }\n",
        "68": "\n",
        "69": "  public void testIndexOf() {\n",
        "70": "    assertEquals(-1, Booleans.indexOf(EMPTY, ARRAY_FALSE));\n",
        "71": "    assertEquals(-1, Booleans.indexOf(ARRAY_FALSE, ARRAY_FALSE_TRUE));\n",
        "72": "    assertEquals(0, Booleans.indexOf(ARRAY_FALSE_FALSE, ARRAY_FALSE));\n",
        "73": "    assertEquals(0, Booleans.indexOf(ARRAY_FALSE, ARRAY_FALSE));\n",
        "74": "    assertEquals(0, Booleans.indexOf(ARRAY_FALSE_TRUE, ARRAY_FALSE));\n",
        "75": "    assertEquals(1, Booleans.indexOf(ARRAY_FALSE_TRUE, ARRAY_TRUE));\n",
        "76": "    assertEquals(0, Booleans.indexOf(ARRAY_TRUE, new boolean[0]));\n",
        "77": "  }\n",
        "78": "\n",
        "79": "  public void testIndexOf_arrays() {\n",
        "80": "    assertEquals(-1, Booleans.indexOf(EMPTY, false));\n",
        "81": "    assertEquals(-1, Booleans.indexOf(ARRAY_FALSE, true));\n",
        "82": "    assertEquals(-1, Booleans.indexOf(ARRAY_FALSE_FALSE, true));\n",
        "83": "    assertEquals(0, Booleans.indexOf(ARRAY_FALSE, false));\n",
        "84": "    assertEquals(0, Booleans.indexOf(ARRAY_FALSE_TRUE, false));\n",
        "85": "    assertEquals(1, Booleans.indexOf(ARRAY_FALSE_TRUE, true));\n",
        "86": "    assertEquals(2, Booleans.indexOf(new boolean[] {false, false, true}, true));\n",
        "87": "  }\n",
        "88": "\n",
        "89": "  public void testLastIndexOf() {\n",
        "90": "    assertEquals(-1, Booleans.lastIndexOf(EMPTY, false));\n",
        "91": "    assertEquals(-1, Booleans.lastIndexOf(ARRAY_FALSE, true));\n",
        "92": "    assertEquals(-1, Booleans.lastIndexOf(ARRAY_FALSE_FALSE, true));\n",
        "93": "    assertEquals(0, Booleans.lastIndexOf(ARRAY_FALSE, false));\n",
        "94": "    assertEquals(0, Booleans.lastIndexOf(ARRAY_FALSE_TRUE, false));\n",
        "95": "    assertEquals(1, Booleans.lastIndexOf(ARRAY_FALSE_TRUE, true));\n",
        "96": "    assertEquals(2, Booleans.lastIndexOf(new boolean[] {false, true, true}, true));\n",
        "97": "  }\n",
        "98": "\n",
        "99": "  public void testConcat() {\n",
        "100": "    assertTrue(Arrays.equals(EMPTY, Booleans.concat()));\n",
        "101": "    assertTrue(Arrays.equals(EMPTY, Booleans.concat(EMPTY)));\n",
        "102": "    assertTrue(Arrays.equals(EMPTY, Booleans.concat(EMPTY, EMPTY, EMPTY)));\n",
        "103": "    assertTrue(Arrays.equals(ARRAY_FALSE, Booleans.concat(ARRAY_FALSE)));\n",
        "104": "    assertNotSame(ARRAY_FALSE, Booleans.concat(ARRAY_FALSE));\n",
        "105": "    assertTrue(Arrays.equals(ARRAY_FALSE, Booleans.concat(EMPTY, ARRAY_FALSE, EMPTY)));\n",
        "106": "    assertTrue(Arrays.equals(\n",
        "107": "        new boolean[] {false, false, false},\n",
        "108": "        Booleans.concat(ARRAY_FALSE, ARRAY_FALSE, ARRAY_FALSE)));\n",
        "109": "    assertTrue(Arrays.equals(\n",
        "110": "        new boolean[] {false, false, true},\n",
        "111": "        Booleans.concat(ARRAY_FALSE, ARRAY_FALSE_TRUE)));\n",
        "112": "  }\n",
        "113": "\n",
        "114": "  public void testEnsureCapacity() {\n",
        "115": "    assertSame(EMPTY, Booleans.ensureCapacity(EMPTY, 0, 1));\n",
        "116": "    assertSame(ARRAY_FALSE, Booleans.ensureCapacity(ARRAY_FALSE, 0, 1));\n",
        "117": "    assertSame(ARRAY_FALSE, Booleans.ensureCapacity(ARRAY_FALSE, 1, 1));\n",
        "118": "    assertTrue(Arrays.equals(\n",
        "119": "        new boolean[] {true, false, false},\n",
        "120": "        Booleans.ensureCapacity(new boolean[] {true}, 2, 1)));\n",
        "121": "  }\n",
        "122": "\n",
        "123": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "124": "  public void testEnsureCapacity_fail() {\n",
        "125": "    try {\n",
        "126": "      Booleans.ensureCapacity(ARRAY_FALSE, -1, 1);\n",
        "127": "      fail();\n",
        "128": "    } catch (IllegalArgumentException expected) {\n",
        "129": "    }\n",
        "130": "    try {\n",
        "131": "      // notice that this should even fail when no growth was needed\n",
        "132": "      Booleans.ensureCapacity(ARRAY_FALSE, 1, -1);\n",
        "133": "      fail();\n",
        "134": "    } catch (IllegalArgumentException expected) {\n",
        "135": "    }\n",
        "136": "  }\n",
        "137": "\n",
        "138": "  public void testJoin() {\n",
        "139": "    assertEquals(\"\", Booleans.join(\",\", EMPTY));\n",
        "140": "    assertEquals(\"false\", Booleans.join(\",\", ARRAY_FALSE));\n",
        "141": "    assertEquals(\"false,true\", Booleans.join(\",\", false, true));\n",
        "142": "    assertEquals(\"falsetruefalse\",\n",
        "143": "        Booleans.join(\"\", false, true, false));\n",
        "144": "  }\n",
        "145": "\n",
        "146": "  public void testLexicographicalComparator() {\n",
        "147": "    List<boolean[]> ordered = Arrays.asList(\n",
        "148": "        new boolean[] {},\n",
        "149": "        new boolean[] {false},\n",
        "150": "        new boolean[] {false, false},\n",
        "151": "        new boolean[] {false, true},\n",
        "152": "        new boolean[] {true},\n",
        "153": "        new boolean[] {true, false},\n",
        "154": "        new boolean[] {true, true},\n",
        "155": "        new boolean[] {true, true, true});\n",
        "156": "\n",
        "157": "    Comparator<boolean[]> comparator = Booleans.lexicographicalComparator();\n",
        "158": "    Helpers.testComparator(comparator, ordered);\n",
        "159": "  }\n",
        "160": "\n",
        "161": "  public void testToArray() {\n",
        "162": "    // need explicit type parameter to avoid javac warning!?\n",
        "163": "    List<Boolean> none = Arrays.<Boolean>asList();\n",
        "164": "    assertTrue(Arrays.equals(EMPTY, Booleans.toArray(none)));\n",
        "165": "\n",
        "166": "    List<Boolean> one = Arrays.asList(false);\n",
        "167": "    assertTrue(Arrays.equals(ARRAY_FALSE, Booleans.toArray(one)));\n",
        "168": "\n",
        "169": "    boolean[] array = {false, false, true};\n",
        "170": "\n",
        "171": "    List<Boolean> three = Arrays.asList(false, false, true);\n",
        "172": "    assertTrue(Arrays.equals(array, Booleans.toArray(three)));\n",
        "173": "\n",
        "174": "    assertTrue(Arrays.equals(array, Booleans.toArray(Booleans.asList(array))));\n",
        "175": "  }\n",
        "176": "\n",
        "177": "  public void testToArray_threadSafe() {\n",
        "178": "    // Only for booleans, we lengthen VALUES\n",
        "179": "    boolean[] VALUES = BooleansTest.VALUES;\n",
        "180": "    VALUES = Booleans.concat(VALUES, VALUES);\n",
        "181": "\n",
        "182": "    for (int delta : new int[] { +1, 0, -1 }) {\n",
        "183": "      for (int i = 0; i < VALUES.length; i++) {\n",
        "184": "        List<Boolean> list = Booleans.asList(VALUES).subList(0, i);\n",
        "185": "        Collection<Boolean> misleadingSize =\n",
        "186": "            Helpers.misleadingSizeCollection(delta);\n",
        "187": "        misleadingSize.addAll(list);\n",
        "188": "        boolean[] arr = Booleans.toArray(misleadingSize);\n",
        "189": "        assertEquals(i, arr.length);\n",
        "190": "        for (int j = 0; j < i; j++) {\n",
        "191": "          assertEquals(VALUES[j], arr[j]);\n",
        "192": "        }\n",
        "193": "      }\n",
        "194": "    }\n",
        "195": "  }\n",
        "196": "\n",
        "197": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "198": "  public void testToArray_withNull() {\n",
        "199": "    List<Boolean> list = Arrays.asList(false, true, null);\n",
        "200": "    try {\n",
        "201": "      Booleans.toArray(list);\n",
        "202": "      fail();\n",
        "203": "    } catch (NullPointerException expected) {\n",
        "204": "    }\n",
        "205": "  }\n",
        "206": "\n",
        "207": "  public void testAsListIsEmpty() {\n",
        "208": "    assertTrue(Booleans.asList(EMPTY).isEmpty());\n",
        "209": "    assertFalse(Booleans.asList(ARRAY_FALSE).isEmpty());\n",
        "210": "  }\n",
        "211": "\n",
        "212": "  public void testAsListSize() {\n",
        "213": "    assertEquals(0, Booleans.asList(EMPTY).size());\n",
        "214": "    assertEquals(1, Booleans.asList(ARRAY_FALSE).size());\n",
        "215": "    assertEquals(2, Booleans.asList(ARRAY_FALSE_TRUE).size());\n",
        "216": "  }\n",
        "217": "\n",
        "218": "  public void testAsListIndexOf() {\n",
        "219": "    assertEquals(-1, Booleans.asList(EMPTY).indexOf(\"wrong type\"));\n",
        "220": "    assertEquals(-1, Booleans.asList(EMPTY).indexOf(true));\n",
        "221": "    assertEquals(-1, Booleans.asList(ARRAY_FALSE).indexOf(true));\n",
        "222": "    assertEquals(0, Booleans.asList(ARRAY_FALSE).indexOf(false));\n",
        "223": "    assertEquals(1, Booleans.asList(ARRAY_FALSE_TRUE).indexOf(true));\n",
        "224": "  }\n",
        "225": "\n",
        "226": "  public void testAsListLastIndexOf() {\n",
        "227": "    assertEquals(-1, Booleans.asList(EMPTY).indexOf(\"wrong type\"));\n",
        "228": "    assertEquals(-1, Booleans.asList(EMPTY).indexOf(true));\n",
        "229": "    assertEquals(-1, Booleans.asList(ARRAY_FALSE).lastIndexOf(true));\n",
        "230": "    assertEquals(1, Booleans.asList(ARRAY_FALSE_TRUE).lastIndexOf(true));\n",
        "231": "    assertEquals(1, Booleans.asList(ARRAY_FALSE_FALSE).lastIndexOf(false));\n",
        "232": "  }\n",
        "233": "\n",
        "234": "  public void testAsListContains() {\n",
        "235": "    assertFalse(Booleans.asList(EMPTY).contains(\"wrong type\"));\n",
        "236": "    assertFalse(Booleans.asList(EMPTY).contains(true));\n",
        "237": "    assertFalse(Booleans.asList(ARRAY_FALSE).contains(true));\n",
        "238": "    assertTrue(Booleans.asList(ARRAY_TRUE).contains(true));\n",
        "239": "    assertTrue(Booleans.asList(ARRAY_FALSE_TRUE).contains(false));\n",
        "240": "    assertTrue(Booleans.asList(ARRAY_FALSE_TRUE).contains(true));\n",
        "241": "  }\n",
        "242": "\n",
        "243": "  public void testAsListEquals() {\n",
        "244": "    assertEquals(Booleans.asList(EMPTY), Collections.emptyList());\n",
        "245": "    assertEquals(Booleans.asList(ARRAY_FALSE), Booleans.asList(ARRAY_FALSE));\n",
        "246": "    assertFalse(Booleans.asList(ARRAY_FALSE).equals(ARRAY_FALSE));\n",
        "247": "    assertFalse(Booleans.asList(ARRAY_FALSE).equals(null));\n",
        "248": "    assertFalse(Booleans.asList(ARRAY_FALSE).equals(Booleans.asList(ARRAY_FALSE_TRUE)));\n",
        "249": "    assertFalse(Booleans.asList(ARRAY_FALSE_FALSE).equals(Booleans.asList(ARRAY_FALSE_TRUE)));\n",
        "250": "    assertEquals(1, Booleans.asList(ARRAY_FALSE_TRUE).lastIndexOf(true));\n",
        "251": "    List<Boolean> reference = Booleans.asList(ARRAY_FALSE);\n",
        "252": "    assertEquals(Booleans.asList(ARRAY_FALSE), reference);\n",
        "253": "    assertEquals(reference, reference);\n",
        "254": "  }\n",
        "255": "\n",
        "256": "  public void testAsListHashcode() {\n",
        "257": "    assertEquals(1, Booleans.asList(EMPTY).hashCode());\n",
        "258": "    assertEquals(Booleans.asList(ARRAY_FALSE).hashCode(), Booleans.asList(ARRAY_FALSE).hashCode());\n",
        "259": "    List<Boolean> reference = Booleans.asList(ARRAY_FALSE);\n",
        "260": "    assertEquals(Booleans.asList(ARRAY_FALSE).hashCode(), reference.hashCode());\n",
        "261": "  }\n",
        "262": "\n",
        "263": "  public void testAsListToString() {\n",
        "264": "    assertEquals(\"[false]\", Booleans.asList(ARRAY_FALSE).toString());\n",
        "265": "    assertEquals(\"[false, true]\", Booleans.asList(ARRAY_FALSE_TRUE).toString());\n",
        "266": "  }\n",
        "267": "\n",
        "268": "  public void testAsListSet() {\n",
        "269": "    List<Boolean> list = Booleans.asList(ARRAY_FALSE);\n",
        "270": "    assertFalse(list.set(0, true));\n",
        "271": "    assertTrue(list.set(0, false));\n",
        "272": "    try {\n",
        "273": "      list.set(0, null);\n",
        "274": "      fail();\n",
        "275": "    } catch (NullPointerException expected) {\n",
        "276": "    }\n",
        "277": "    try {\n",
        "278": "      list.set(1, true);\n",
        "279": "      fail();\n",
        "280": "    } catch (IndexOutOfBoundsException expected) {\n",
        "281": "    }\n",
        "282": "  }\n",
        "283": "\n",
        "284": "  public void testCountTrue() {\n",
        "285": "    assertEquals(0, Booleans.countTrue());\n",
        "286": "    assertEquals(0, Booleans.countTrue(false));\n",
        "287": "    assertEquals(1, Booleans.countTrue(true));\n",
        "288": "    assertEquals(3, Booleans.countTrue(false, true, false, true, false, true));\n",
        "289": "    assertEquals(1, Booleans.countTrue(false, false, true, false, false));\n",
        "290": "  }\n",
        "291": "}\n",
        "292": "\n"
    }
}