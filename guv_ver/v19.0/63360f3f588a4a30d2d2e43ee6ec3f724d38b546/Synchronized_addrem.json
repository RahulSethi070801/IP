{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.annotations.VisibleForTesting;\n",
        "23": "\n",
        "24": "import java.io.Serializable;\n",
        "25": "import java.util.Collection;\n",
        "26": "import java.util.Comparator;\n",
        "27": "import java.util.Iterator;\n",
        "28": "import java.util.List;\n",
        "29": "import java.util.ListIterator;\n",
        "30": "import java.util.Map;\n",
        "31": "import java.util.Map.Entry;\n",
        "32": "import java.util.Queue;\n",
        "33": "import java.util.RandomAccess;\n",
        "34": "import java.util.Set;\n",
        "35": "import java.util.SortedMap;\n",
        "36": "import java.util.SortedSet;\n",
        "37": "\n",
        "38": "import javax.annotation.Nullable;\n",
        "39": "\n",
        "40": "/**\n",
        "41": " * Synchronized collection views. The returned synchronized collection views are\n",
        "42": " * serializable if the backing collection and the mutex are serializable.\n",
        "43": " *\n",
        "44": " * <p>If {@code null} is passed as the {@code mutex} parameter to any of this\n",
        "45": " * class's top-level methods or inner class constructors, the created object\n",
        "46": " * uses itself as the synchronization mutex.\n",
        "47": " *\n",
        "48": " * <p>This class should be used by other collection classes only.\n",
        "49": " *\n",
        "50": " * @author Mike Bostock\n",
        "51": " * @author Jared Levy\n",
        "52": " */\n",
        "53": "@GwtCompatible(emulated = true)\n",
        "54": "final class Synchronized {\n",
        "55": "  private Synchronized() {}\n",
        "56": "\n",
        "57": "  static class SynchronizedObject implements Serializable {\n",
        "58": "    final Object delegate;\n",
        "59": "    final Object mutex;\n",
        "60": "\n",
        "61": "    SynchronizedObject(Object delegate, @Nullable Object mutex) {\n",
        "62": "      this.delegate = checkNotNull(delegate);\n",
        "63": "      this.mutex = (mutex == null) ? this : mutex;\n",
        "64": "    }\n",
        "65": "\n",
        "66": "    Object delegate() {\n",
        "67": "      return delegate;\n",
        "68": "    }\n",
        "69": "\n",
        "70": "    // No equals and hashCode; see ForwardingObject for details.\n",
        "71": "\n",
        "72": "    @Override\n",
        "73": "    public String toString() {\n",
        "74": "      synchronized (mutex) {\n",
        "75": "        return delegate.toString();\n",
        "76": "      }\n",
        "77": "    }\n",
        "78": "\n",
        "79": "    // Serialization invokes writeObject only when it's private.\n",
        "80": "    // The SynchronizedObject subclasses don't need a writeObject method since\n",
        "81": "    // they don't contain any non-transient member variables, while the\n",
        "82": "    // following writeObject() handles the SynchronizedObject members.\n",
        "83": "  }\n",
        "84": "\n",
        "85": "  private static <E> Collection<E> collection(Collection<E> collection, @Nullable Object mutex) {\n",
        "86": "    return new SynchronizedCollection<E>(collection, mutex);\n",
        "87": "  }\n",
        "88": "\n",
        "89": "  @VisibleForTesting\n",
        "90": "  static class SynchronizedCollection<E> extends SynchronizedObject implements Collection<E> {\n",
        "91": "    private SynchronizedCollection(Collection<E> delegate, @Nullable Object mutex) {\n",
        "92": "      super(delegate, mutex);\n",
        "93": "    }\n",
        "94": "\n",
        "95": "    @SuppressWarnings(\"unchecked\")\n",
        "96": "    @Override\n",
        "97": "    Collection<E> delegate() {\n",
        "98": "      return (Collection<E>) super.delegate();\n",
        "99": "    }\n",
        "100": "\n",
        "101": "    @Override\n",
        "102": "    public boolean add(E e) {\n",
        "103": "      synchronized (mutex) {\n",
        "104": "        return delegate().add(e);\n",
        "105": "      }\n",
        "106": "    }\n",
        "107": "\n",
        "108": "    @Override\n",
        "109": "    public boolean addAll(Collection<? extends E> c) {\n",
        "110": "      synchronized (mutex) {\n",
        "111": "        return delegate().addAll(c);\n",
        "112": "      }\n",
        "113": "    }\n",
        "114": "\n",
        "115": "    @Override\n",
        "116": "    public void clear() {\n",
        "117": "      synchronized (mutex) {\n",
        "118": "        delegate().clear();\n",
        "119": "      }\n",
        "120": "    }\n",
        "121": "\n",
        "122": "    @Override\n",
        "123": "    public boolean contains(Object o) {\n",
        "124": "      synchronized (mutex) {\n",
        "125": "        return delegate().contains(o);\n",
        "126": "      }\n",
        "127": "    }\n",
        "128": "\n",
        "129": "    @Override\n",
        "130": "    public boolean containsAll(Collection<?> c) {\n",
        "131": "      synchronized (mutex) {\n",
        "132": "        return delegate().containsAll(c);\n",
        "133": "      }\n",
        "134": "    }\n",
        "135": "\n",
        "136": "    @Override\n",
        "137": "    public boolean isEmpty() {\n",
        "138": "      synchronized (mutex) {\n",
        "139": "        return delegate().isEmpty();\n",
        "140": "      }\n",
        "141": "    }\n",
        "142": "\n",
        "143": "    @Override\n",
        "144": "    public Iterator<E> iterator() {\n",
        "145": "      return delegate().iterator(); // manually synchronized\n",
        "146": "    }\n",
        "147": "\n",
        "148": "    @Override\n",
        "149": "    public boolean remove(Object o) {\n",
        "150": "      synchronized (mutex) {\n",
        "151": "        return delegate().remove(o);\n",
        "152": "      }\n",
        "153": "    }\n",
        "154": "\n",
        "155": "    @Override\n",
        "156": "    public boolean removeAll(Collection<?> c) {\n",
        "157": "      synchronized (mutex) {\n",
        "158": "        return delegate().removeAll(c);\n",
        "159": "      }\n",
        "160": "    }\n",
        "161": "\n",
        "162": "    @Override\n",
        "163": "    public boolean retainAll(Collection<?> c) {\n",
        "164": "      synchronized (mutex) {\n",
        "165": "        return delegate().retainAll(c);\n",
        "166": "      }\n",
        "167": "    }\n",
        "168": "\n",
        "169": "    @Override\n",
        "170": "    public int size() {\n",
        "171": "      synchronized (mutex) {\n",
        "172": "        return delegate().size();\n",
        "173": "      }\n",
        "174": "    }\n",
        "175": "\n",
        "176": "    @Override\n",
        "177": "    public Object[] toArray() {\n",
        "178": "      synchronized (mutex) {\n",
        "179": "        return delegate().toArray();\n",
        "180": "      }\n",
        "181": "    }\n",
        "182": "\n",
        "183": "    @Override\n",
        "184": "    public <T> T[] toArray(T[] a) {\n",
        "185": "      synchronized (mutex) {\n",
        "186": "        return delegate().toArray(a);\n",
        "187": "      }\n",
        "188": "    }\n",
        "189": "\n",
        "190": "    private static final long serialVersionUID = 0;\n",
        "191": "  }\n",
        "192": "\n",
        "193": "  @VisibleForTesting\n",
        "194": "  static <E> Set<E> set(Set<E> set, @Nullable Object mutex) {\n",
        "195": "    return new SynchronizedSet<E>(set, mutex);\n",
        "196": "  }\n",
        "197": "\n",
        "198": "  static class SynchronizedSet<E> extends SynchronizedCollection<E> implements Set<E> {\n",
        "199": "\n",
        "200": "    SynchronizedSet(Set<E> delegate, @Nullable Object mutex) {\n",
        "201": "      super(delegate, mutex);\n",
        "202": "    }\n",
        "203": "\n",
        "204": "    @Override\n",
        "205": "    Set<E> delegate() {\n",
        "206": "      return (Set<E>) super.delegate();\n",
        "207": "    }\n",
        "208": "\n",
        "209": "    @Override\n",
        "210": "    public boolean equals(Object o) {\n",
        "211": "      if (o == this) {\n",
        "212": "        return true;\n",
        "213": "      }\n",
        "214": "      synchronized (mutex) {\n",
        "215": "        return delegate().equals(o);\n",
        "216": "      }\n",
        "217": "    }\n",
        "218": "\n",
        "219": "    @Override\n",
        "220": "    public int hashCode() {\n",
        "221": "      synchronized (mutex) {\n",
        "222": "        return delegate().hashCode();\n",
        "223": "      }\n",
        "224": "    }\n",
        "225": "\n",
        "226": "    private static final long serialVersionUID = 0;\n",
        "227": "  }\n",
        "228": "\n",
        "229": "  private static <E> SortedSet<E> sortedSet(SortedSet<E> set, @Nullable Object mutex) {\n",
        "230": "    return new SynchronizedSortedSet<E>(set, mutex);\n",
        "231": "  }\n",
        "232": "\n",
        "233": "  static class SynchronizedSortedSet<E> extends SynchronizedSet<E> implements SortedSet<E> {\n",
        "234": "    SynchronizedSortedSet(SortedSet<E> delegate, @Nullable Object mutex) {\n",
        "235": "      super(delegate, mutex);\n",
        "236": "    }\n",
        "237": "\n",
        "238": "    @Override\n",
        "239": "    SortedSet<E> delegate() {\n",
        "240": "      return (SortedSet<E>) super.delegate();\n",
        "241": "    }\n",
        "242": "\n",
        "243": "    @Override\n",
        "244": "    public Comparator<? super E> comparator() {\n",
        "245": "      synchronized (mutex) {\n",
        "246": "        return delegate().comparator();\n",
        "247": "      }\n",
        "248": "    }\n",
        "249": "\n",
        "250": "    @Override\n",
        "251": "    public SortedSet<E> subSet(E fromElement, E toElement) {\n",
        "252": "      synchronized (mutex) {\n",
        "253": "        return sortedSet(delegate().subSet(fromElement, toElement), mutex);\n",
        "254": "      }\n",
        "255": "    }\n",
        "256": "\n",
        "257": "    @Override\n",
        "258": "    public SortedSet<E> headSet(E toElement) {\n",
        "259": "      synchronized (mutex) {\n",
        "260": "        return sortedSet(delegate().headSet(toElement), mutex);\n",
        "261": "      }\n",
        "262": "    }\n",
        "263": "\n",
        "264": "    @Override\n",
        "265": "    public SortedSet<E> tailSet(E fromElement) {\n",
        "266": "      synchronized (mutex) {\n",
        "267": "        return sortedSet(delegate().tailSet(fromElement), mutex);\n",
        "268": "      }\n",
        "269": "    }\n",
        "270": "\n",
        "271": "    @Override\n",
        "272": "    public E first() {\n",
        "273": "      synchronized (mutex) {\n",
        "274": "        return delegate().first();\n",
        "275": "      }\n",
        "276": "    }\n",
        "277": "\n",
        "278": "    @Override\n",
        "279": "    public E last() {\n",
        "280": "      synchronized (mutex) {\n",
        "281": "        return delegate().last();\n",
        "282": "      }\n",
        "283": "    }\n",
        "284": "\n",
        "285": "    private static final long serialVersionUID = 0;\n",
        "286": "  }\n",
        "287": "\n",
        "288": "  private static <E> List<E> list(List<E> list, @Nullable Object mutex) {\n",
        "289": "    return (list instanceof RandomAccess)\n",
        "290": "        ? new SynchronizedRandomAccessList<E>(list, mutex)\n",
        "291": "        : new SynchronizedList<E>(list, mutex);\n",
        "292": "  }\n",
        "293": "\n",
        "294": "  private static class SynchronizedList<E> extends SynchronizedCollection<E> implements List<E> {\n",
        "295": "    SynchronizedList(List<E> delegate, @Nullable Object mutex) {\n",
        "296": "      super(delegate, mutex);\n",
        "297": "    }\n",
        "298": "\n",
        "299": "    @Override\n",
        "300": "    List<E> delegate() {\n",
        "301": "      return (List<E>) super.delegate();\n",
        "302": "    }\n",
        "303": "\n",
        "304": "    @Override\n",
        "305": "    public void add(int index, E element) {\n",
        "306": "      synchronized (mutex) {\n",
        "307": "        delegate().add(index, element);\n",
        "308": "      }\n",
        "309": "    }\n",
        "310": "\n",
        "311": "    @Override\n",
        "312": "    public boolean addAll(int index, Collection<? extends E> c) {\n",
        "313": "      synchronized (mutex) {\n",
        "314": "        return delegate().addAll(index, c);\n",
        "315": "      }\n",
        "316": "    }\n",
        "317": "\n",
        "318": "    @Override\n",
        "319": "    public E get(int index) {\n",
        "320": "      synchronized (mutex) {\n",
        "321": "        return delegate().get(index);\n",
        "322": "      }\n",
        "323": "    }\n",
        "324": "\n",
        "325": "    @Override\n",
        "326": "    public int indexOf(Object o) {\n",
        "327": "      synchronized (mutex) {\n",
        "328": "        return delegate().indexOf(o);\n",
        "329": "      }\n",
        "330": "    }\n",
        "331": "\n",
        "332": "    @Override\n",
        "333": "    public int lastIndexOf(Object o) {\n",
        "334": "      synchronized (mutex) {\n",
        "335": "        return delegate().lastIndexOf(o);\n",
        "336": "      }\n",
        "337": "    }\n",
        "338": "\n",
        "339": "    @Override\n",
        "340": "    public ListIterator<E> listIterator() {\n",
        "341": "      return delegate().listIterator(); // manually synchronized\n",
        "342": "    }\n",
        "343": "\n",
        "344": "    @Override\n",
        "345": "    public ListIterator<E> listIterator(int index) {\n",
        "346": "      return delegate().listIterator(index); // manually synchronized\n",
        "347": "    }\n",
        "348": "\n",
        "349": "    @Override\n",
        "350": "    public E remove(int index) {\n",
        "351": "      synchronized (mutex) {\n",
        "352": "        return delegate().remove(index);\n",
        "353": "      }\n",
        "354": "    }\n",
        "355": "\n",
        "356": "    @Override\n",
        "357": "    public E set(int index, E element) {\n",
        "358": "      synchronized (mutex) {\n",
        "359": "        return delegate().set(index, element);\n",
        "360": "      }\n",
        "361": "    }\n",
        "362": "\n",
        "363": "    @Override\n",
        "364": "    public List<E> subList(int fromIndex, int toIndex) {\n",
        "365": "      synchronized (mutex) {\n",
        "366": "        return list(delegate().subList(fromIndex, toIndex), mutex);\n",
        "367": "      }\n",
        "368": "    }\n",
        "369": "\n",
        "370": "    @Override\n",
        "371": "    public boolean equals(Object o) {\n",
        "372": "      if (o == this) {\n",
        "373": "        return true;\n",
        "374": "      }\n",
        "375": "      synchronized (mutex) {\n",
        "376": "        return delegate().equals(o);\n",
        "377": "      }\n",
        "378": "    }\n",
        "379": "\n",
        "380": "    @Override\n",
        "381": "    public int hashCode() {\n",
        "382": "      synchronized (mutex) {\n",
        "383": "        return delegate().hashCode();\n",
        "384": "      }\n",
        "385": "    }\n",
        "386": "\n",
        "387": "    private static final long serialVersionUID = 0;\n",
        "388": "  }\n",
        "389": "\n",
        "390": "  private static class SynchronizedRandomAccessList<E> extends SynchronizedList<E>\n",
        "391": "      implements RandomAccess {\n",
        "392": "    SynchronizedRandomAccessList(List<E> list, @Nullable Object mutex) {\n",
        "393": "      super(list, mutex);\n",
        "394": "    }\n",
        "395": "\n",
        "396": "    private static final long serialVersionUID = 0;\n",
        "397": "  }\n",
        "398": "\n",
        "399": "  static <E> Multiset<E> multiset(Multiset<E> multiset, @Nullable Object mutex) {\n",
        "400": "    if (multiset instanceof SynchronizedMultiset || multiset instanceof ImmutableMultiset) {\n",
        "401": "      return multiset;\n",
        "402": "    }\n",
        "403": "    return new SynchronizedMultiset<E>(multiset, mutex);\n",
        "404": "  }\n",
        "405": "\n",
        "406": "  private static class SynchronizedMultiset<E> extends SynchronizedCollection<E>\n",
        "407": "      implements Multiset<E> {\n",
        "408": "    transient Set<E> elementSet;\n",
        "409": "    transient Set<Entry<E>> entrySet;\n",
        "410": "\n",
        "411": "    SynchronizedMultiset(Multiset<E> delegate, @Nullable Object mutex) {\n",
        "412": "      super(delegate, mutex);\n",
        "413": "    }\n",
        "414": "\n",
        "415": "    @Override\n",
        "416": "    Multiset<E> delegate() {\n",
        "417": "      return (Multiset<E>) super.delegate();\n",
        "418": "    }\n",
        "419": "\n",
        "420": "    @Override\n",
        "421": "    public int count(Object o) {\n",
        "422": "      synchronized (mutex) {\n",
        "423": "        return delegate().count(o);\n",
        "424": "      }\n",
        "425": "    }\n",
        "426": "\n",
        "427": "    @Override\n",
        "428": "    public int add(E e, int n) {\n",
        "429": "      synchronized (mutex) {\n",
        "430": "        return delegate().add(e, n);\n",
        "431": "      }\n",
        "432": "    }\n",
        "433": "\n",
        "434": "    @Override\n",
        "435": "    public int remove(Object o, int n) {\n",
        "436": "      synchronized (mutex) {\n",
        "437": "        return delegate().remove(o, n);\n",
        "438": "      }\n",
        "439": "    }\n",
        "440": "\n",
        "441": "    @Override\n",
        "442": "    public int setCount(E element, int count) {\n",
        "443": "      synchronized (mutex) {\n",
        "444": "        return delegate().setCount(element, count);\n",
        "445": "      }\n",
        "446": "    }\n",
        "447": "\n",
        "448": "    @Override\n",
        "449": "    public boolean setCount(E element, int oldCount, int newCount) {\n",
        "450": "      synchronized (mutex) {\n",
        "451": "        return delegate().setCount(element, oldCount, newCount);\n",
        "452": "      }\n",
        "453": "    }\n",
        "454": "\n",
        "455": "    @Override\n",
        "456": "    public Set<E> elementSet() {\n",
        "457": "      synchronized (mutex) {\n",
        "458": "        if (elementSet == null) {\n",
        "459": "          elementSet = typePreservingSet(delegate().elementSet(), mutex);\n",
        "460": "        }\n",
        "461": "        return elementSet;\n",
        "462": "      }\n",
        "463": "    }\n",
        "464": "\n",
        "465": "    @Override\n",
        "466": "    public Set<Entry<E>> entrySet() {\n",
        "467": "      synchronized (mutex) {\n",
        "468": "        if (entrySet == null) {\n",
        "469": "          entrySet = typePreservingSet(delegate().entrySet(), mutex);\n",
        "470": "        }\n",
        "471": "        return entrySet;\n",
        "472": "      }\n",
        "473": "    }\n",
        "474": "\n",
        "475": "    @Override\n",
        "476": "    public boolean equals(Object o) {\n",
        "477": "      if (o == this) {\n",
        "478": "        return true;\n",
        "479": "      }\n",
        "480": "      synchronized (mutex) {\n",
        "481": "        return delegate().equals(o);\n",
        "482": "      }\n",
        "483": "    }\n",
        "484": "\n",
        "485": "    @Override\n",
        "486": "    public int hashCode() {\n",
        "487": "      synchronized (mutex) {\n",
        "488": "        return delegate().hashCode();\n",
        "489": "      }\n",
        "490": "    }\n",
        "491": "\n",
        "492": "    private static final long serialVersionUID = 0;\n",
        "493": "  }\n",
        "494": "\n",
        "495": "  static <K, V> Multimap<K, V> multimap(Multimap<K, V> multimap, @Nullable Object mutex) {\n",
        "496": "    if (multimap instanceof SynchronizedMultimap || multimap instanceof ImmutableMultimap) {\n",
        "497": "      return multimap;\n",
        "498": "    }\n",
        "499": "    return new SynchronizedMultimap<K, V>(multimap, mutex);\n",
        "500": "  }\n",
        "501": "\n",
        "502": "  private static class SynchronizedMultimap<K, V> extends SynchronizedObject\n",
        "503": "      implements Multimap<K, V> {\n",
        "504": "    transient Set<K> keySet;\n",
        "505": "    transient Collection<V> valuesCollection;\n",
        "506": "    transient Collection<Map.Entry<K, V>> entries;\n",
        "507": "    transient Map<K, Collection<V>> asMap;\n",
        "508": "    transient Multiset<K> keys;\n",
        "509": "\n",
        "510": "    @SuppressWarnings(\"unchecked\")\n",
        "511": "    @Override\n",
        "512": "    Multimap<K, V> delegate() {\n",
        "513": "      return (Multimap<K, V>) super.delegate();\n",
        "514": "    }\n",
        "515": "\n",
        "516": "    SynchronizedMultimap(Multimap<K, V> delegate, @Nullable Object mutex) {\n",
        "517": "      super(delegate, mutex);\n",
        "518": "    }\n",
        "519": "\n",
        "520": "    @Override\n",
        "521": "    public int size() {\n",
        "522": "      synchronized (mutex) {\n",
        "523": "        return delegate().size();\n",
        "524": "      }\n",
        "525": "    }\n",
        "526": "\n",
        "527": "    @Override\n",
        "528": "    public boolean isEmpty() {\n",
        "529": "      synchronized (mutex) {\n",
        "530": "        return delegate().isEmpty();\n",
        "531": "      }\n",
        "532": "    }\n",
        "533": "\n",
        "534": "    @Override\n",
        "535": "    public boolean containsKey(Object key) {\n",
        "536": "      synchronized (mutex) {\n",
        "537": "        return delegate().containsKey(key);\n",
        "538": "      }\n",
        "539": "    }\n",
        "540": "\n",
        "541": "    @Override\n",
        "542": "    public boolean containsValue(Object value) {\n",
        "543": "      synchronized (mutex) {\n",
        "544": "        return delegate().containsValue(value);\n",
        "545": "      }\n",
        "546": "    }\n",
        "547": "\n",
        "548": "    @Override\n",
        "549": "    public boolean containsEntry(Object key, Object value) {\n",
        "550": "      synchronized (mutex) {\n",
        "551": "        return delegate().containsEntry(key, value);\n",
        "552": "      }\n",
        "553": "    }\n",
        "554": "\n",
        "555": "    @Override\n",
        "556": "    public Collection<V> get(K key) {\n",
        "557": "      synchronized (mutex) {\n",
        "558": "        return typePreservingCollection(delegate().get(key), mutex);\n",
        "559": "      }\n",
        "560": "    }\n",
        "561": "\n",
        "562": "    @Override\n",
        "563": "    public boolean put(K key, V value) {\n",
        "564": "      synchronized (mutex) {\n",
        "565": "        return delegate().put(key, value);\n",
        "566": "      }\n",
        "567": "    }\n",
        "568": "\n",
        "569": "    @Override\n",
        "570": "    public boolean putAll(K key, Iterable<? extends V> values) {\n",
        "571": "      synchronized (mutex) {\n",
        "572": "        return delegate().putAll(key, values);\n",
        "573": "      }\n",
        "574": "    }\n",
        "575": "\n",
        "576": "    @Override\n",
        "577": "    public boolean putAll(Multimap<? extends K, ? extends V> multimap) {\n",
        "578": "      synchronized (mutex) {\n",
        "579": "        return delegate().putAll(multimap);\n",
        "580": "      }\n",
        "581": "    }\n",
        "582": "\n",
        "583": "    @Override\n",
        "584": "    public Collection<V> replaceValues(K key, Iterable<? extends V> values) {\n",
        "585": "      synchronized (mutex) {\n",
        "586": "        return delegate().replaceValues(key, values); // copy not synchronized\n",
        "587": "      }\n",
        "588": "    }\n",
        "589": "\n",
        "590": "    @Override\n",
        "591": "    public boolean remove(Object key, Object value) {\n",
        "592": "      synchronized (mutex) {\n",
        "593": "        return delegate().remove(key, value);\n",
        "594": "      }\n",
        "595": "    }\n",
        "596": "\n",
        "597": "    @Override\n",
        "598": "    public Collection<V> removeAll(Object key) {\n",
        "599": "      synchronized (mutex) {\n",
        "600": "        return delegate().removeAll(key); // copy not synchronized\n",
        "601": "      }\n",
        "602": "    }\n",
        "603": "\n",
        "604": "    @Override\n",
        "605": "    public void clear() {\n",
        "606": "      synchronized (mutex) {\n",
        "607": "        delegate().clear();\n",
        "608": "      }\n",
        "609": "    }\n",
        "610": "\n",
        "611": "    @Override\n",
        "612": "    public Set<K> keySet() {\n",
        "613": "      synchronized (mutex) {\n",
        "614": "        if (keySet == null) {\n",
        "615": "          keySet = typePreservingSet(delegate().keySet(), mutex);\n",
        "616": "        }\n",
        "617": "        return keySet;\n",
        "618": "      }\n",
        "619": "    }\n",
        "620": "\n",
        "621": "    @Override\n",
        "622": "    public Collection<V> values() {\n",
        "623": "      synchronized (mutex) {\n",
        "624": "        if (valuesCollection == null) {\n",
        "625": "          valuesCollection = collection(delegate().values(), mutex);\n",
        "626": "        }\n",
        "627": "        return valuesCollection;\n",
        "628": "      }\n",
        "629": "    }\n",
        "630": "\n",
        "631": "    @Override\n",
        "632": "    public Collection<Map.Entry<K, V>> entries() {\n",
        "633": "      synchronized (mutex) {\n",
        "634": "        if (entries == null) {\n",
        "635": "          entries = typePreservingCollection(delegate().entries(), mutex);\n",
        "636": "        }\n",
        "637": "        return entries;\n",
        "638": "      }\n",
        "639": "    }\n",
        "640": "\n",
        "641": "    @Override\n",
        "642": "    public Map<K, Collection<V>> asMap() {\n",
        "643": "      synchronized (mutex) {\n",
        "644": "        if (asMap == null) {\n",
        "645": "          asMap = new SynchronizedAsMap<K, V>(delegate().asMap(), mutex);\n",
        "646": "        }\n",
        "647": "        return asMap;\n",
        "648": "      }\n",
        "649": "    }\n",
        "650": "\n",
        "651": "    @Override\n",
        "652": "    public Multiset<K> keys() {\n",
        "653": "      synchronized (mutex) {\n",
        "654": "        if (keys == null) {\n",
        "655": "          keys = multiset(delegate().keys(), mutex);\n",
        "656": "        }\n",
        "657": "        return keys;\n",
        "658": "      }\n",
        "659": "    }\n",
        "660": "\n",
        "661": "    @Override\n",
        "662": "    public boolean equals(Object o) {\n",
        "663": "      if (o == this) {\n",
        "664": "        return true;\n",
        "665": "      }\n",
        "666": "      synchronized (mutex) {\n",
        "667": "        return delegate().equals(o);\n",
        "668": "      }\n",
        "669": "    }\n",
        "670": "\n",
        "671": "    @Override\n",
        "672": "    public int hashCode() {\n",
        "673": "      synchronized (mutex) {\n",
        "674": "        return delegate().hashCode();\n",
        "675": "      }\n",
        "676": "    }\n",
        "677": "\n",
        "678": "    private static final long serialVersionUID = 0;\n",
        "679": "  }\n",
        "680": "\n",
        "681": "  static <K, V> ListMultimap<K, V> listMultimap(\n",
        "682": "      ListMultimap<K, V> multimap, @Nullable Object mutex) {\n",
        "683": "    if (multimap instanceof SynchronizedListMultimap || multimap instanceof ImmutableListMultimap) {\n",
        "684": "      return multimap;\n",
        "685": "    }\n",
        "686": "    return new SynchronizedListMultimap<K, V>(multimap, mutex);\n",
        "687": "  }\n",
        "688": "\n",
        "689": "  private static class SynchronizedListMultimap<K, V> extends SynchronizedMultimap<K, V>\n",
        "690": "      implements ListMultimap<K, V> {\n",
        "691": "    SynchronizedListMultimap(ListMultimap<K, V> delegate, @Nullable Object mutex) {\n",
        "692": "      super(delegate, mutex);\n",
        "693": "    }\n",
        "694": "\n",
        "695": "    @Override\n",
        "696": "    ListMultimap<K, V> delegate() {\n",
        "697": "      return (ListMultimap<K, V>) super.delegate();\n",
        "698": "    }\n",
        "699": "\n",
        "700": "    @Override\n",
        "701": "    public List<V> get(K key) {\n",
        "702": "      synchronized (mutex) {\n",
        "703": "        return list(delegate().get(key), mutex);\n",
        "704": "      }\n",
        "705": "    }\n",
        "706": "\n",
        "707": "    @Override\n",
        "708": "    public List<V> removeAll(Object key) {\n",
        "709": "      synchronized (mutex) {\n",
        "710": "        return delegate().removeAll(key); // copy not synchronized\n",
        "711": "      }\n",
        "712": "    }\n",
        "713": "\n",
        "714": "    @Override\n",
        "715": "    public List<V> replaceValues(K key, Iterable<? extends V> values) {\n",
        "716": "      synchronized (mutex) {\n",
        "717": "        return delegate().replaceValues(key, values); // copy not synchronized\n",
        "718": "      }\n",
        "719": "    }\n",
        "720": "\n",
        "721": "    private static final long serialVersionUID = 0;\n",
        "722": "  }\n",
        "723": "\n",
        "724": "  static <K, V> SetMultimap<K, V> setMultimap(SetMultimap<K, V> multimap, @Nullable Object mutex) {\n",
        "725": "    if (multimap instanceof SynchronizedSetMultimap || multimap instanceof ImmutableSetMultimap) {\n",
        "726": "      return multimap;\n",
        "727": "    }\n",
        "728": "    return new SynchronizedSetMultimap<K, V>(multimap, mutex);\n",
        "729": "  }\n",
        "730": "\n",
        "731": "  private static class SynchronizedSetMultimap<K, V> extends SynchronizedMultimap<K, V>\n",
        "732": "      implements SetMultimap<K, V> {\n",
        "733": "    transient Set<Map.Entry<K, V>> entrySet;\n",
        "734": "\n",
        "735": "    SynchronizedSetMultimap(SetMultimap<K, V> delegate, @Nullable Object mutex) {\n",
        "736": "      super(delegate, mutex);\n",
        "737": "    }\n",
        "738": "\n",
        "739": "    @Override\n",
        "740": "    SetMultimap<K, V> delegate() {\n",
        "741": "      return (SetMultimap<K, V>) super.delegate();\n",
        "742": "    }\n",
        "743": "\n",
        "744": "    @Override\n",
        "745": "    public Set<V> get(K key) {\n",
        "746": "      synchronized (mutex) {\n",
        "747": "        return set(delegate().get(key), mutex);\n",
        "748": "      }\n",
        "749": "    }\n",
        "750": "\n",
        "751": "    @Override\n",
        "752": "    public Set<V> removeAll(Object key) {\n",
        "753": "      synchronized (mutex) {\n",
        "754": "        return delegate().removeAll(key); // copy not synchronized\n",
        "755": "      }\n",
        "756": "    }\n",
        "757": "\n",
        "758": "    @Override\n",
        "759": "    public Set<V> replaceValues(K key, Iterable<? extends V> values) {\n",
        "760": "      synchronized (mutex) {\n",
        "761": "        return delegate().replaceValues(key, values); // copy not synchronized\n",
        "762": "      }\n",
        "763": "    }\n",
        "764": "\n",
        "765": "    @Override\n",
        "766": "    public Set<Map.Entry<K, V>> entries() {\n",
        "767": "      synchronized (mutex) {\n",
        "768": "        if (entrySet == null) {\n",
        "769": "          entrySet = set(delegate().entries(), mutex);\n",
        "770": "        }\n",
        "771": "        return entrySet;\n",
        "772": "      }\n",
        "773": "    }\n",
        "774": "\n",
        "775": "    private static final long serialVersionUID = 0;\n",
        "776": "  }\n",
        "777": "\n",
        "778": "  static <K, V> SortedSetMultimap<K, V> sortedSetMultimap(\n",
        "779": "      SortedSetMultimap<K, V> multimap, @Nullable Object mutex) {\n",
        "780": "    if (multimap instanceof SynchronizedSortedSetMultimap) {\n",
        "781": "      return multimap;\n",
        "782": "    }\n",
        "783": "    return new SynchronizedSortedSetMultimap<K, V>(multimap, mutex);\n",
        "784": "  }\n",
        "785": "\n",
        "786": "  private static class SynchronizedSortedSetMultimap<K, V> extends SynchronizedSetMultimap<K, V>\n",
        "787": "      implements SortedSetMultimap<K, V> {\n",
        "788": "    SynchronizedSortedSetMultimap(SortedSetMultimap<K, V> delegate, @Nullable Object mutex) {\n",
        "789": "      super(delegate, mutex);\n",
        "790": "    }\n",
        "791": "\n",
        "792": "    @Override\n",
        "793": "    SortedSetMultimap<K, V> delegate() {\n",
        "794": "      return (SortedSetMultimap<K, V>) super.delegate();\n",
        "795": "    }\n",
        "796": "\n",
        "797": "    @Override\n",
        "798": "    public SortedSet<V> get(K key) {\n",
        "799": "      synchronized (mutex) {\n",
        "800": "        return sortedSet(delegate().get(key), mutex);\n",
        "801": "      }\n",
        "802": "    }\n",
        "803": "\n",
        "804": "    @Override\n",
        "805": "    public SortedSet<V> removeAll(Object key) {\n",
        "806": "      synchronized (mutex) {\n",
        "807": "        return delegate().removeAll(key); // copy not synchronized\n",
        "808": "      }\n",
        "809": "    }\n",
        "810": "\n",
        "811": "    @Override\n",
        "812": "    public SortedSet<V> replaceValues(K key, Iterable<? extends V> values) {\n",
        "813": "      synchronized (mutex) {\n",
        "814": "        return delegate().replaceValues(key, values); // copy not synchronized\n",
        "815": "      }\n",
        "816": "    }\n",
        "817": "\n",
        "818": "    @Override\n",
        "819": "    public Comparator<? super V> valueComparator() {\n",
        "820": "      synchronized (mutex) {\n",
        "821": "        return delegate().valueComparator();\n",
        "822": "      }\n",
        "823": "    }\n",
        "824": "\n",
        "825": "    private static final long serialVersionUID = 0;\n",
        "826": "  }\n",
        "827": "\n",
        "828": "  private static <E> Collection<E> typePreservingCollection(\n",
        "829": "      Collection<E> collection, @Nullable Object mutex) {\n",
        "830": "    if (collection instanceof SortedSet) {\n",
        "831": "      return sortedSet((SortedSet<E>) collection, mutex);\n",
        "832": "    }\n",
        "833": "    if (collection instanceof Set) {\n",
        "834": "      return set((Set<E>) collection, mutex);\n",
        "835": "    }\n",
        "836": "    if (collection instanceof List) {\n",
        "837": "      return list((List<E>) collection, mutex);\n",
        "838": "    }\n",
        "839": "    return collection(collection, mutex);\n",
        "840": "  }\n",
        "841": "\n",
        "842": "  private static <E> Set<E> typePreservingSet(Set<E> set, @Nullable Object mutex) {\n",
        "843": "    if (set instanceof SortedSet) {\n",
        "844": "      return sortedSet((SortedSet<E>) set, mutex);\n",
        "845": "    } else {\n",
        "846": "      return set(set, mutex);\n",
        "847": "    }\n",
        "848": "  }\n",
        "849": "\n",
        "850": "  private static class SynchronizedAsMapEntries<K, V>\n",
        "851": "      extends SynchronizedSet<Map.Entry<K, Collection<V>>> {\n",
        "852": "    SynchronizedAsMapEntries(Set<Map.Entry<K, Collection<V>>> delegate, @Nullable Object mutex) {\n",
        "853": "      super(delegate, mutex);\n",
        "854": "    }\n",
        "855": "\n",
        "856": "    @Override\n",
        "857": "    public Iterator<Map.Entry<K, Collection<V>>> iterator() {\n",
        "858": "      // Must be manually synchronized.\n",
        "859": "      return new TransformedIterator<Map.Entry<K, Collection<V>>, Map.Entry<K, Collection<V>>>(\n",
        "860": "          super.iterator()) {\n",
        "861": "        @Override\n",
        "862": "        Map.Entry<K, Collection<V>> transform(final Map.Entry<K, Collection<V>> entry) {\n",
        "863": "          return new ForwardingMapEntry<K, Collection<V>>() {\n",
        "864": "            @Override\n",
        "865": "            protected Map.Entry<K, Collection<V>> delegate() {\n",
        "866": "              return entry;\n",
        "867": "            }\n",
        "868": "\n",
        "869": "            @Override\n",
        "870": "            public Collection<V> getValue() {\n",
        "871": "              return typePreservingCollection(entry.getValue(), mutex);\n",
        "872": "            }\n",
        "873": "          };\n",
        "874": "        }\n",
        "875": "      };\n",
        "876": "    }\n",
        "877": "\n",
        "878": "    // See Collections.CheckedMap.CheckedEntrySet for details on attacks.\n",
        "879": "\n",
        "880": "    @Override\n",
        "881": "    public Object[] toArray() {\n",
        "882": "      synchronized (mutex) {\n",
        "883": "        return ObjectArrays.toArrayImpl(delegate());\n",
        "884": "      }\n",
        "885": "    }\n",
        "886": "\n",
        "887": "    @Override\n",
        "888": "    public <T> T[] toArray(T[] array) {\n",
        "889": "      synchronized (mutex) {\n",
        "890": "        return ObjectArrays.toArrayImpl(delegate(), array);\n",
        "891": "      }\n",
        "892": "    }\n",
        "893": "\n",
        "894": "    @Override\n",
        "895": "    public boolean contains(Object o) {\n",
        "896": "      synchronized (mutex) {\n",
        "897": "        return Maps.containsEntryImpl(delegate(), o);\n",
        "898": "      }\n",
        "899": "    }\n",
        "900": "\n",
        "901": "    @Override\n",
        "902": "    public boolean containsAll(Collection<?> c) {\n",
        "903": "      synchronized (mutex) {\n",
        "904": "        return Collections2.containsAllImpl(delegate(), c);\n",
        "905": "      }\n",
        "906": "    }\n",
        "907": "\n",
        "908": "    @Override\n",
        "909": "    public boolean equals(Object o) {\n",
        "910": "      if (o == this) {\n",
        "911": "        return true;\n",
        "912": "      }\n",
        "913": "      synchronized (mutex) {\n",
        "914": "        return Sets.equalsImpl(delegate(), o);\n",
        "915": "      }\n",
        "916": "    }\n",
        "917": "\n",
        "918": "    @Override\n",
        "919": "    public boolean remove(Object o) {\n",
        "920": "      synchronized (mutex) {\n",
        "921": "        return Maps.removeEntryImpl(delegate(), o);\n",
        "922": "      }\n",
        "923": "    }\n",
        "924": "\n",
        "925": "    @Override\n",
        "926": "    public boolean removeAll(Collection<?> c) {\n",
        "927": "      synchronized (mutex) {\n",
        "928": "        return Iterators.removeAll(delegate().iterator(), c);\n",
        "929": "      }\n",
        "930": "    }\n",
        "931": "\n",
        "932": "    @Override\n",
        "933": "    public boolean retainAll(Collection<?> c) {\n",
        "934": "      synchronized (mutex) {\n",
        "935": "        return Iterators.retainAll(delegate().iterator(), c);\n",
        "936": "      }\n",
        "937": "    }\n",
        "938": "\n",
        "939": "    private static final long serialVersionUID = 0;\n",
        "940": "  }\n",
        "941": "\n",
        "942": "  @VisibleForTesting\n",
        "943": "  static <K, V> Map<K, V> map(Map<K, V> map, @Nullable Object mutex) {\n",
        "944": "    return new SynchronizedMap<K, V>(map, mutex);\n",
        "945": "  }\n",
        "946": "\n",
        "947": "  private static class SynchronizedMap<K, V> extends SynchronizedObject implements Map<K, V> {\n",
        "948": "    transient Set<K> keySet;\n",
        "949": "    transient Collection<V> values;\n",
        "950": "    transient Set<Map.Entry<K, V>> entrySet;\n",
        "951": "\n",
        "952": "    SynchronizedMap(Map<K, V> delegate, @Nullable Object mutex) {\n",
        "953": "      super(delegate, mutex);\n",
        "954": "    }\n",
        "955": "\n",
        "956": "    @SuppressWarnings(\"unchecked\")\n",
        "957": "    @Override\n",
        "958": "    Map<K, V> delegate() {\n",
        "959": "      return (Map<K, V>) super.delegate();\n",
        "960": "    }\n",
        "961": "\n",
        "962": "    @Override\n",
        "963": "    public void clear() {\n",
        "964": "      synchronized (mutex) {\n",
        "965": "        delegate().clear();\n",
        "966": "      }\n",
        "967": "    }\n",
        "968": "\n",
        "969": "    @Override\n",
        "970": "    public boolean containsKey(Object key) {\n",
        "971": "      synchronized (mutex) {\n",
        "972": "        return delegate().containsKey(key);\n",
        "973": "      }\n",
        "974": "    }\n",
        "975": "\n",
        "976": "    @Override\n",
        "977": "    public boolean containsValue(Object value) {\n",
        "978": "      synchronized (mutex) {\n",
        "979": "        return delegate().containsValue(value);\n",
        "980": "      }\n",
        "981": "    }\n",
        "982": "\n",
        "983": "    @Override\n",
        "984": "    public Set<Map.Entry<K, V>> entrySet() {\n",
        "985": "      synchronized (mutex) {\n",
        "986": "        if (entrySet == null) {\n",
        "987": "          entrySet = set(delegate().entrySet(), mutex);\n",
        "988": "        }\n",
        "989": "        return entrySet;\n",
        "990": "      }\n",
        "991": "    }\n",
        "992": "\n",
        "993": "    @Override\n",
        "994": "    public V get(Object key) {\n",
        "995": "      synchronized (mutex) {\n",
        "996": "        return delegate().get(key);\n",
        "997": "      }\n",
        "998": "    }\n",
        "999": "\n",
        "1000": "    @Override\n",
        "1001": "    public boolean isEmpty() {\n",
        "1002": "      synchronized (mutex) {\n",
        "1003": "        return delegate().isEmpty();\n",
        "1004": "      }\n",
        "1005": "    }\n",
        "1006": "\n",
        "1007": "    @Override\n",
        "1008": "    public Set<K> keySet() {\n",
        "1009": "      synchronized (mutex) {\n",
        "1010": "        if (keySet == null) {\n",
        "1011": "          keySet = set(delegate().keySet(), mutex);\n",
        "1012": "        }\n",
        "1013": "        return keySet;\n",
        "1014": "      }\n",
        "1015": "    }\n",
        "1016": "\n",
        "1017": "    @Override\n",
        "1018": "    public V put(K key, V value) {\n",
        "1019": "      synchronized (mutex) {\n",
        "1020": "        return delegate().put(key, value);\n",
        "1021": "      }\n",
        "1022": "    }\n",
        "1023": "\n",
        "1024": "    @Override\n",
        "1025": "    public void putAll(Map<? extends K, ? extends V> map) {\n",
        "1026": "      synchronized (mutex) {\n",
        "1027": "        delegate().putAll(map);\n",
        "1028": "      }\n",
        "1029": "    }\n",
        "1030": "\n",
        "1031": "    @Override\n",
        "1032": "    public V remove(Object key) {\n",
        "1033": "      synchronized (mutex) {\n",
        "1034": "        return delegate().remove(key);\n",
        "1035": "      }\n",
        "1036": "    }\n",
        "1037": "\n",
        "1038": "    @Override\n",
        "1039": "    public int size() {\n",
        "1040": "      synchronized (mutex) {\n",
        "1041": "        return delegate().size();\n",
        "1042": "      }\n",
        "1043": "    }\n",
        "1044": "\n",
        "1045": "    @Override\n",
        "1046": "    public Collection<V> values() {\n",
        "1047": "      synchronized (mutex) {\n",
        "1048": "        if (values == null) {\n",
        "1049": "          values = collection(delegate().values(), mutex);\n",
        "1050": "        }\n",
        "1051": "        return values;\n",
        "1052": "      }\n",
        "1053": "    }\n",
        "1054": "\n",
        "1055": "    @Override\n",
        "1056": "    public boolean equals(Object o) {\n",
        "1057": "      if (o == this) {\n",
        "1058": "        return true;\n",
        "1059": "      }\n",
        "1060": "      synchronized (mutex) {\n",
        "1061": "        return delegate().equals(o);\n",
        "1062": "      }\n",
        "1063": "    }\n",
        "1064": "\n",
        "1065": "    @Override\n",
        "1066": "    public int hashCode() {\n",
        "1067": "      synchronized (mutex) {\n",
        "1068": "        return delegate().hashCode();\n",
        "1069": "      }\n",
        "1070": "    }\n",
        "1071": "\n",
        "1072": "    private static final long serialVersionUID = 0;\n",
        "1073": "  }\n",
        "1074": "\n",
        "1075": "  static <K, V> SortedMap<K, V> sortedMap(SortedMap<K, V> sortedMap, @Nullable Object mutex) {\n",
        "1076": "    return new SynchronizedSortedMap<K, V>(sortedMap, mutex);\n",
        "1077": "  }\n",
        "1078": "\n",
        "1079": "  static class SynchronizedSortedMap<K, V> extends SynchronizedMap<K, V>\n",
        "1080": "      implements SortedMap<K, V> {\n",
        "1081": "\n",
        "1082": "    SynchronizedSortedMap(SortedMap<K, V> delegate, @Nullable Object mutex) {\n",
        "1083": "      super(delegate, mutex);\n",
        "1084": "    }\n",
        "1085": "\n",
        "1086": "    @Override\n",
        "1087": "    SortedMap<K, V> delegate() {\n",
        "1088": "      return (SortedMap<K, V>) super.delegate();\n",
        "1089": "    }\n",
        "1090": "\n",
        "1091": "    @Override\n",
        "1092": "    public Comparator<? super K> comparator() {\n",
        "1093": "      synchronized (mutex) {\n",
        "1094": "        return delegate().comparator();\n",
        "1095": "      }\n",
        "1096": "    }\n",
        "1097": "\n",
        "1098": "    @Override\n",
        "1099": "    public K firstKey() {\n",
        "1100": "      synchronized (mutex) {\n",
        "1101": "        return delegate().firstKey();\n",
        "1102": "      }\n",
        "1103": "    }\n",
        "1104": "\n",
        "1105": "    @Override\n",
        "1106": "    public SortedMap<K, V> headMap(K toKey) {\n",
        "1107": "      synchronized (mutex) {\n",
        "1108": "        return sortedMap(delegate().headMap(toKey), mutex);\n",
        "1109": "      }\n",
        "1110": "    }\n",
        "1111": "\n",
        "1112": "    @Override\n",
        "1113": "    public K lastKey() {\n",
        "1114": "      synchronized (mutex) {\n",
        "1115": "        return delegate().lastKey();\n",
        "1116": "      }\n",
        "1117": "    }\n",
        "1118": "\n",
        "1119": "    @Override\n",
        "1120": "    public SortedMap<K, V> subMap(K fromKey, K toKey) {\n",
        "1121": "      synchronized (mutex) {\n",
        "1122": "        return sortedMap(delegate().subMap(fromKey, toKey), mutex);\n",
        "1123": "      }\n",
        "1124": "    }\n",
        "1125": "\n",
        "1126": "    @Override\n",
        "1127": "    public SortedMap<K, V> tailMap(K fromKey) {\n",
        "1128": "      synchronized (mutex) {\n",
        "1129": "        return sortedMap(delegate().tailMap(fromKey), mutex);\n",
        "1130": "      }\n",
        "1131": "    }\n",
        "1132": "\n",
        "1133": "    private static final long serialVersionUID = 0;\n",
        "1134": "  }\n",
        "1135": "\n",
        "1136": "  static <K, V> BiMap<K, V> biMap(BiMap<K, V> bimap, @Nullable Object mutex) {\n",
        "1137": "    if (bimap instanceof SynchronizedBiMap || bimap instanceof ImmutableBiMap) {\n",
        "1138": "      return bimap;\n",
        "1139": "    }\n",
        "1140": "    return new SynchronizedBiMap<K, V>(bimap, mutex, null);\n",
        "1141": "  }\n",
        "1142": "\n",
        "1143": "  @VisibleForTesting\n",
        "1144": "  static class SynchronizedBiMap<K, V> extends SynchronizedMap<K, V>\n",
        "1145": "      implements BiMap<K, V>, Serializable {\n",
        "1146": "    private transient Set<V> valueSet;\n",
        "1147": "    private transient BiMap<V, K> inverse;\n",
        "1148": "\n",
        "1149": "    private SynchronizedBiMap(\n",
        "1150": "        BiMap<K, V> delegate, @Nullable Object mutex, @Nullable BiMap<V, K> inverse) {\n",
        "1151": "      super(delegate, mutex);\n",
        "1152": "      this.inverse = inverse;\n",
        "1153": "    }\n",
        "1154": "\n",
        "1155": "    @Override\n",
        "1156": "    BiMap<K, V> delegate() {\n",
        "1157": "      return (BiMap<K, V>) super.delegate();\n",
        "1158": "    }\n",
        "1159": "\n",
        "1160": "    @Override\n",
        "1161": "    public Set<V> values() {\n",
        "1162": "      synchronized (mutex) {\n",
        "1163": "        if (valueSet == null) {\n",
        "1164": "          valueSet = set(delegate().values(), mutex);\n",
        "1165": "        }\n",
        "1166": "        return valueSet;\n",
        "1167": "      }\n",
        "1168": "    }\n",
        "1169": "\n",
        "1170": "    @Override\n",
        "1171": "    public V forcePut(K key, V value) {\n",
        "1172": "      synchronized (mutex) {\n",
        "1173": "        return delegate().forcePut(key, value);\n",
        "1174": "      }\n",
        "1175": "    }\n",
        "1176": "\n",
        "1177": "    @Override\n",
        "1178": "    public BiMap<V, K> inverse() {\n",
        "1179": "      synchronized (mutex) {\n",
        "1180": "        if (inverse == null) {\n",
        "1181": "          inverse = new SynchronizedBiMap<V, K>(delegate().inverse(), mutex, this);\n",
        "1182": "        }\n",
        "1183": "        return inverse;\n",
        "1184": "      }\n",
        "1185": "    }\n",
        "1186": "\n",
        "1187": "    private static final long serialVersionUID = 0;\n",
        "1188": "  }\n",
        "1189": "\n",
        "1190": "  private static class SynchronizedAsMap<K, V> extends SynchronizedMap<K, Collection<V>> {\n",
        "1191": "    transient Set<Map.Entry<K, Collection<V>>> asMapEntrySet;\n",
        "1192": "    transient Collection<Collection<V>> asMapValues;\n",
        "1193": "\n",
        "1194": "    SynchronizedAsMap(Map<K, Collection<V>> delegate, @Nullable Object mutex) {\n",
        "1195": "      super(delegate, mutex);\n",
        "1196": "    }\n",
        "1197": "\n",
        "1198": "    @Override\n",
        "1199": "    public Collection<V> get(Object key) {\n",
        "1200": "      synchronized (mutex) {\n",
        "1201": "        Collection<V> collection = super.get(key);\n",
        "1202": "        return (collection == null) ? null : typePreservingCollection(collection, mutex);\n",
        "1203": "      }\n",
        "1204": "    }\n",
        "1205": "\n",
        "1206": "    @Override\n",
        "1207": "    public Set<Map.Entry<K, Collection<V>>> entrySet() {\n",
        "1208": "      synchronized (mutex) {\n",
        "1209": "        if (asMapEntrySet == null) {\n",
        "1210": "          asMapEntrySet = new SynchronizedAsMapEntries<K, V>(delegate().entrySet(), mutex);\n",
        "1211": "        }\n",
        "1212": "        return asMapEntrySet;\n",
        "1213": "      }\n",
        "1214": "    }\n",
        "1215": "\n",
        "1216": "    @Override\n",
        "1217": "    public Collection<Collection<V>> values() {\n",
        "1218": "      synchronized (mutex) {\n",
        "1219": "        if (asMapValues == null) {\n",
        "1220": "          asMapValues = new SynchronizedAsMapValues<V>(delegate().values(), mutex);\n",
        "1221": "        }\n",
        "1222": "        return asMapValues;\n",
        "1223": "      }\n",
        "1224": "    }\n",
        "1225": "\n",
        "1226": "    @Override\n",
        "1227": "    public boolean containsValue(Object o) {\n",
        "1228": "      // values() and its contains() method are both synchronized.\n",
        "1229": "      return values().contains(o);\n",
        "1230": "    }\n",
        "1231": "\n",
        "1232": "    private static final long serialVersionUID = 0;\n",
        "1233": "  }\n",
        "1234": "\n",
        "1235": "  private static class SynchronizedAsMapValues<V> extends SynchronizedCollection<Collection<V>> {\n",
        "1236": "    SynchronizedAsMapValues(Collection<Collection<V>> delegate, @Nullable Object mutex) {\n",
        "1237": "      super(delegate, mutex);\n",
        "1238": "    }\n",
        "1239": "\n",
        "1240": "    @Override\n",
        "1241": "    public Iterator<Collection<V>> iterator() {\n",
        "1242": "      // Must be manually synchronized.\n",
        "1243": "      return new TransformedIterator<Collection<V>, Collection<V>>(super.iterator()) {\n",
        "1244": "        @Override\n",
        "1245": "        Collection<V> transform(Collection<V> from) {\n",
        "1246": "          return typePreservingCollection(from, mutex);\n",
        "1247": "        }\n",
        "1248": "      };\n",
        "1249": "    }\n",
        "1250": "\n",
        "1251": "    private static final long serialVersionUID = 0;\n",
        "1252": "  }\n",
        "1253": "\n",
        "1254": "  static <E> Queue<E> queue(Queue<E> queue, @Nullable Object mutex) {\n",
        "1255": "    return (queue instanceof SynchronizedQueue) ? queue : new SynchronizedQueue<E>(queue, mutex);\n",
        "1256": "  }\n",
        "1257": "\n",
        "1258": "  private static class SynchronizedQueue<E> extends SynchronizedCollection<E> implements Queue<E> {\n",
        "1259": "\n",
        "1260": "    SynchronizedQueue(Queue<E> delegate, @Nullable Object mutex) {\n",
        "1261": "      super(delegate, mutex);\n",
        "1262": "    }\n",
        "1263": "\n",
        "1264": "    @Override\n",
        "1265": "    Queue<E> delegate() {\n",
        "1266": "      return (Queue<E>) super.delegate();\n",
        "1267": "    }\n",
        "1268": "\n",
        "1269": "    @Override\n",
        "1270": "    public E element() {\n",
        "1271": "      synchronized (mutex) {\n",
        "1272": "        return delegate().element();\n",
        "1273": "      }\n",
        "1274": "    }\n",
        "1275": "\n",
        "1276": "    @Override\n",
        "1277": "    public boolean offer(E e) {\n",
        "1278": "      synchronized (mutex) {\n",
        "1279": "        return delegate().offer(e);\n",
        "1280": "      }\n",
        "1281": "    }\n",
        "1282": "\n",
        "1283": "    @Override\n",
        "1284": "    public E peek() {\n",
        "1285": "      synchronized (mutex) {\n",
        "1286": "        return delegate().peek();\n",
        "1287": "      }\n",
        "1288": "    }\n",
        "1289": "\n",
        "1290": "    @Override\n",
        "1291": "    public E poll() {\n",
        "1292": "      synchronized (mutex) {\n",
        "1293": "        return delegate().poll();\n",
        "1294": "      }\n",
        "1295": "    }\n",
        "1296": "\n",
        "1297": "    @Override\n",
        "1298": "    public E remove() {\n",
        "1299": "      synchronized (mutex) {\n",
        "1300": "        return delegate().remove();\n",
        "1301": "      }\n",
        "1302": "    }\n",
        "1303": "\n",
        "1304": "    private static final long serialVersionUID = 0;\n",
        "1305": "  }\n",
        "1306": "}\n",
        "1307": "\n"
    }
}