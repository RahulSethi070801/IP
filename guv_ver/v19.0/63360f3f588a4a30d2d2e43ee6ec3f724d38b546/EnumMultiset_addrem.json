{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "6": " *\n",
        "7": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "8": " *\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "13": " */\n",
        "14": "\n",
        "15": "package com.google.common.collect;\n",
        "16": "\n",
        "17": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "\n",
        "21": "import java.util.EnumMap;\n",
        "22": "import java.util.Iterator;\n",
        "23": "\n",
        "24": "/**\n",
        "25": " * Multiset implementation backed by an {@link EnumMap}.\n",
        "26": " *\n",
        "27": " * <p>See the Guava User Guide article on <a href=\n",
        "28": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset\">\n",
        "29": " * {@code Multiset}</a>.\n",
        "30": " *\n",
        "31": " * @author Jared Levy\n",
        "32": " * @since 2.0\n",
        "33": " */\n",
        "34": "@GwtCompatible(emulated = true)\n",
        "35": "public final class EnumMultiset<E extends Enum<E>> extends AbstractMapBasedMultiset<E> {\n",
        "36": "  /** Creates an empty {@code EnumMultiset}. */\n",
        "37": "  public static <E extends Enum<E>> EnumMultiset<E> create(Class<E> type) {\n",
        "38": "    return new EnumMultiset<E>(type);\n",
        "39": "  }\n",
        "40": "\n",
        "41": "  /**\n",
        "42": "   * Creates a new {@code EnumMultiset} containing the specified elements.\n",
        "43": "   *\n",
        "44": "   * <p>This implementation is highly efficient when {@code elements} is itself a {@link\n",
        "45": "   * Multiset}.\n",
        "46": "   *\n",
        "47": "   * @param elements the elements that the multiset should contain\n",
        "48": "   * @throws IllegalArgumentException if {@code elements} is empty\n",
        "49": "   */\n",
        "50": "  public static <E extends Enum<E>> EnumMultiset<E> create(Iterable<E> elements) {\n",
        "51": "    Iterator<E> iterator = elements.iterator();\n",
        "52": "    checkArgument(iterator.hasNext(), \"EnumMultiset constructor passed empty Iterable\");\n",
        "53": "    EnumMultiset<E> multiset = new EnumMultiset<E>(iterator.next().getDeclaringClass());\n",
        "54": "    Iterables.addAll(multiset, elements);\n",
        "55": "    return multiset;\n",
        "56": "  }\n",
        "57": "\n",
        "58": "  /**\n",
        "59": "   * Returns a new {@code EnumMultiset} instance containing the given elements.  Unlike\n",
        "60": "   * {@link EnumMultiset#create(Iterable)}, this method does not produce an exception on an empty\n",
        "61": "   * iterable.\n",
        "62": "   *\n",
        "63": "   * @since 14.0\n",
        "64": "   */\n",
        "65": "  public static <E extends Enum<E>> EnumMultiset<E> create(Iterable<E> elements, Class<E> type) {\n",
        "66": "    EnumMultiset<E> result = create(type);\n",
        "67": "    Iterables.addAll(result, elements);\n",
        "68": "    return result;\n",
        "69": "  }\n",
        "70": "\n",
        "71": "  private transient Class<E> type;\n",
        "72": "\n",
        "73": "  /** Creates an empty {@code EnumMultiset}. */\n",
        "74": "  private EnumMultiset(Class<E> type) {\n",
        "75": "    super(WellBehavedMap.wrap(new EnumMap<E, Count>(type)));\n",
        "76": "    this.type = type;\n",
        "77": "  }\n",
        "78": "}\n",
        "79": "\n"
    }
}