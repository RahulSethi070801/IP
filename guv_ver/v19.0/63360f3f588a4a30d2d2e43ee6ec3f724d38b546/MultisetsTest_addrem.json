{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.collect.testing.DerivedComparable;\n",
        "23": "\n",
        "24": "import junit.framework.TestCase;\n",
        "25": "\n",
        "26": "import java.util.Arrays;\n",
        "27": "import java.util.Collections;\n",
        "28": "import java.util.List;\n",
        "29": "\n",
        "30": "/**\n",
        "31": " * Tests for {@link Multisets}.\n",
        "32": " *\n",
        "33": " * @author Mike Bostock\n",
        "34": " * @author Jared Levy\n",
        "35": " * @author Louis Wasserman\n",
        "36": " */\n",
        "37": "@GwtCompatible(emulated = true)\n",
        "38": "public class MultisetsTest extends TestCase {\n",
        "39": "\n",
        "40": "  /* See MultisetsImmutableEntryTest for immutableEntry() tests. */\n",
        "41": "\n",
        "42": "  public void testNewTreeMultisetDerived() {\n",
        "43": "    TreeMultiset<DerivedComparable> set = TreeMultiset.create();\n",
        "44": "    assertTrue(set.isEmpty());\n",
        "45": "    set.add(new DerivedComparable(\"foo\"), 2);\n",
        "46": "    set.add(new DerivedComparable(\"bar\"), 3);\n",
        "47": "    assertThat(set).containsExactly(\n",
        "48": "        new DerivedComparable(\"bar\"), new DerivedComparable(\"bar\"), new DerivedComparable(\"bar\"),\n",
        "49": "        new DerivedComparable(\"foo\"), new DerivedComparable(\"foo\")).inOrder();\n",
        "50": "  }\n",
        "51": "\n",
        "52": "  public void testNewTreeMultisetNonGeneric() {\n",
        "53": "    TreeMultiset<LegacyComparable> set = TreeMultiset.create();\n",
        "54": "    assertTrue(set.isEmpty());\n",
        "55": "    set.add(new LegacyComparable(\"foo\"), 2);\n",
        "56": "    set.add(new LegacyComparable(\"bar\"), 3);\n",
        "57": "    assertThat(set).containsExactly(new LegacyComparable(\"bar\"),\n",
        "58": "        new LegacyComparable(\"bar\"), new LegacyComparable(\"bar\"),\n",
        "59": "        new LegacyComparable(\"foo\"), new LegacyComparable(\"foo\")).inOrder();\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  public void testNewTreeMultisetComparator() {\n",
        "63": "    TreeMultiset<String> multiset\n",
        "64": "        = TreeMultiset.create(Collections.reverseOrder());\n",
        "65": "    multiset.add(\"bar\", 3);\n",
        "66": "    multiset.add(\"foo\", 2);\n",
        "67": "    assertThat(multiset).containsExactly(\"foo\", \"foo\", \"bar\", \"bar\", \"bar\").inOrder();\n",
        "68": "  }\n",
        "69": "\n",
        "70": "  public void testRetainOccurrencesEmpty() {\n",
        "71": "    Multiset<String> multiset = HashMultiset.create();\n",
        "72": "    Multiset<String> toRetain =\n",
        "73": "        HashMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "74": "    assertFalse(Multisets.retainOccurrences(multiset, toRetain));\n",
        "75": "    assertThat(multiset).isEmpty();\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  public void testRemoveOccurrencesIterableEmpty() {\n",
        "79": "    Multiset<String> multiset = HashMultiset.create();\n",
        "80": "    Iterable<String> toRemove = Arrays.asList(\"a\", \"b\", \"a\");\n",
        "81": "    assertFalse(Multisets.removeOccurrences(multiset, toRemove));\n",
        "82": "    assertTrue(multiset.isEmpty());\n",
        "83": "  }\n",
        "84": "\n",
        "85": "  public void testRemoveOccurrencesMultisetEmpty() {\n",
        "86": "    Multiset<String> multiset = HashMultiset.create();\n",
        "87": "    Multiset<String> toRemove =\n",
        "88": "        HashMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "89": "    assertFalse(Multisets.removeOccurrences(multiset, toRemove));\n",
        "90": "    assertTrue(multiset.isEmpty());\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  public void testUnion() {\n",
        "94": "    Multiset<String> ms1 = HashMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "95": "    Multiset<String> ms2 = HashMultiset.create(\n",
        "96": "        Arrays.asList(\"a\", \"b\", \"b\", \"c\"));\n",
        "97": "    assertThat(Multisets.union(ms1, ms2)).containsExactly(\"a\", \"a\", \"b\", \"b\", \"c\");\n",
        "98": "  }\n",
        "99": "\n",
        "100": "  public void testUnionEqualMultisets() {\n",
        "101": "    Multiset<String> ms1 = HashMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "102": "    Multiset<String> ms2 = HashMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "103": "    assertEquals(ms1, Multisets.union(ms1, ms2));\n",
        "104": "  }\n",
        "105": "\n",
        "106": "  public void testUnionEmptyNonempty() {\n",
        "107": "    Multiset<String> ms1 = HashMultiset.create();\n",
        "108": "    Multiset<String> ms2 = HashMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "109": "    assertEquals(ms2, Multisets.union(ms1, ms2));\n",
        "110": "  }\n",
        "111": "\n",
        "112": "  public void testUnionNonemptyEmpty() {\n",
        "113": "    Multiset<String> ms1 = HashMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "114": "    Multiset<String> ms2 = HashMultiset.create();\n",
        "115": "    assertEquals(ms1, Multisets.union(ms1, ms2));\n",
        "116": "  }\n",
        "117": "\n",
        "118": "  public void testIntersectEmptyNonempty() {\n",
        "119": "    Multiset<String> ms1 = HashMultiset.create();\n",
        "120": "    Multiset<String> ms2 = HashMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "121": "    assertThat(Multisets.intersection(ms1, ms2)).isEmpty();\n",
        "122": "  }\n",
        "123": "\n",
        "124": "  public void testIntersectNonemptyEmpty() {\n",
        "125": "    Multiset<String> ms1 = HashMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "126": "    Multiset<String> ms2 = HashMultiset.create();\n",
        "127": "    assertThat(Multisets.intersection(ms1, ms2)).isEmpty();\n",
        "128": "  }\n",
        "129": "\n",
        "130": "  public void testSum() {\n",
        "131": "    Multiset<String> ms1 = HashMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "132": "    Multiset<String> ms2 = HashMultiset.create(Arrays.asList(\"b\", \"c\"));\n",
        "133": "    assertThat(Multisets.sum(ms1, ms2)).containsExactly(\"a\", \"a\", \"b\", \"b\", \"c\");\n",
        "134": "  }\n",
        "135": "\n",
        "136": "  public void testSumEmptyNonempty() {\n",
        "137": "    Multiset<String> ms1 = HashMultiset.create();\n",
        "138": "    Multiset<String> ms2 = HashMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "139": "    assertThat(Multisets.sum(ms1, ms2)).containsExactly(\"a\", \"b\", \"a\");\n",
        "140": "  }\n",
        "141": "\n",
        "142": "  public void testSumNonemptyEmpty() {\n",
        "143": "    Multiset<String> ms1 = HashMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "144": "    Multiset<String> ms2 = HashMultiset.create();\n",
        "145": "    assertThat(Multisets.sum(ms1, ms2)).containsExactly(\"a\", \"b\", \"a\");\n",
        "146": "  }\n",
        "147": "\n",
        "148": "  public void testDifferenceWithNoRemovedElements() {\n",
        "149": "    Multiset<String> ms1 = HashMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "150": "    Multiset<String> ms2 = HashMultiset.create(Arrays.asList(\"a\"));\n",
        "151": "    assertThat(Multisets.difference(ms1, ms2)).containsExactly(\"a\", \"b\");\n",
        "152": "  }\n",
        "153": "\n",
        "154": "  public void testDifferenceWithRemovedElement() {\n",
        "155": "    Multiset<String> ms1 = HashMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "156": "    Multiset<String> ms2 = HashMultiset.create(Arrays.asList(\"b\"));\n",
        "157": "    assertThat(Multisets.difference(ms1, ms2)).containsExactly(\"a\", \"a\");\n",
        "158": "  }\n",
        "159": "\n",
        "160": "  public void testDifferenceWithMoreElementsInSecondMultiset() {\n",
        "161": "    Multiset<String> ms1 = HashMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "162": "    Multiset<String> ms2 = HashMultiset.create(Arrays.asList(\"a\", \"b\", \"b\", \"b\"));\n",
        "163": "    Multiset<String> diff = Multisets.difference(ms1, ms2);\n",
        "164": "    assertThat(diff).contains(\"a\");\n",
        "165": "    assertEquals(0, diff.count(\"b\"));\n",
        "166": "    assertEquals(1, diff.count(\"a\"));\n",
        "167": "    assertFalse(diff.contains(\"b\"));\n",
        "168": "    assertTrue(diff.contains(\"a\"));\n",
        "169": "  }\n",
        "170": "\n",
        "171": "  public void testDifferenceEmptyNonempty() {\n",
        "172": "    Multiset<String> ms1 = HashMultiset.create();\n",
        "173": "    Multiset<String> ms2 = HashMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "174": "    assertEquals(ms1, Multisets.difference(ms1, ms2));\n",
        "175": "  }\n",
        "176": "\n",
        "177": "  public void testDifferenceNonemptyEmpty() {\n",
        "178": "    Multiset<String> ms1 = HashMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "179": "    Multiset<String> ms2 = HashMultiset.create();\n",
        "180": "    assertEquals(ms1, Multisets.difference(ms1, ms2));\n",
        "181": "  }\n",
        "182": "\n",
        "183": "  public void testContainsOccurrencesEmpty() {\n",
        "184": "    Multiset<String> superMultiset = HashMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "185": "    Multiset<String> subMultiset = HashMultiset.create();\n",
        "186": "    assertTrue(Multisets.containsOccurrences(superMultiset, subMultiset));\n",
        "187": "    assertFalse(Multisets.containsOccurrences(subMultiset, superMultiset));\n",
        "188": "  }\n",
        "189": "\n",
        "190": "  public void testContainsOccurrences() {\n",
        "191": "    Multiset<String> superMultiset = HashMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "192": "    Multiset<String> subMultiset = HashMultiset.create(Arrays.asList(\"a\", \"b\"));\n",
        "193": "    assertTrue(Multisets.containsOccurrences(superMultiset, subMultiset));\n",
        "194": "    assertFalse(Multisets.containsOccurrences(subMultiset, superMultiset));\n",
        "195": "    Multiset<String> diffMultiset = HashMultiset.create(Arrays.asList(\"a\", \"b\", \"c\"));\n",
        "196": "    assertFalse(Multisets.containsOccurrences(superMultiset, diffMultiset));\n",
        "197": "    assertTrue(Multisets.containsOccurrences(diffMultiset, subMultiset));\n",
        "198": "  }\n",
        "199": "\n",
        "200": "  public void testRetainEmptyOccurrences() {\n",
        "201": "    Multiset<String> multiset =\n",
        "202": "        HashMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "203": "    Multiset<String> toRetain = HashMultiset.create();\n",
        "204": "    assertTrue(Multisets.retainOccurrences(multiset, toRetain));\n",
        "205": "    assertTrue(multiset.isEmpty());\n",
        "206": "  }\n",
        "207": "\n",
        "208": "  public void testRetainOccurrences() {\n",
        "209": "    Multiset<String> multiset =\n",
        "210": "        TreeMultiset.create(Arrays.asList(\"a\", \"b\", \"a\", \"c\"));\n",
        "211": "    Multiset<String> toRetain =\n",
        "212": "        HashMultiset.create(Arrays.asList(\"a\", \"b\", \"b\"));\n",
        "213": "    assertTrue(Multisets.retainOccurrences(multiset, toRetain));\n",
        "214": "    assertThat(multiset).containsExactly(\"a\", \"b\").inOrder();\n",
        "215": "  }\n",
        "216": "\n",
        "217": "  public void testRemoveEmptyOccurrencesMultiset() {\n",
        "218": "    Multiset<String> multiset =\n",
        "219": "        TreeMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "220": "    Multiset<String> toRemove = HashMultiset.create();\n",
        "221": "    assertFalse(Multisets.removeOccurrences(multiset, toRemove));\n",
        "222": "    assertThat(multiset).containsExactly(\"a\", \"a\", \"b\").inOrder();\n",
        "223": "  }\n",
        "224": "\n",
        "225": "  public void testRemoveOccurrencesMultiset() {\n",
        "226": "    Multiset<String> multiset =\n",
        "227": "        TreeMultiset.create(Arrays.asList(\"a\", \"b\", \"a\", \"c\"));\n",
        "228": "    Multiset<String> toRemove =\n",
        "229": "        HashMultiset.create(Arrays.asList(\"a\", \"b\", \"b\"));\n",
        "230": "    assertTrue(Multisets.removeOccurrences(multiset, toRemove));\n",
        "231": "    assertThat(multiset).containsExactly(\"a\", \"c\").inOrder();\n",
        "232": "  }\n",
        "233": "\n",
        "234": "  public void testRemoveEmptyOccurrencesIterable() {\n",
        "235": "    Multiset<String> multiset =\n",
        "236": "        TreeMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n",
        "237": "    Iterable<String> toRemove = ImmutableList.of();\n",
        "238": "    assertFalse(Multisets.removeOccurrences(multiset, toRemove));\n",
        "239": "    assertThat(multiset).containsExactly(\"a\", \"a\", \"b\").inOrder();\n",
        "240": "  }\n",
        "241": "\n",
        "242": "  public void testRemoveOccurrencesMultisetIterable() {\n",
        "243": "    Multiset<String> multiset =\n",
        "244": "        TreeMultiset.create(Arrays.asList(\"a\", \"b\", \"a\", \"c\"));\n",
        "245": "    List<String> toRemove = Arrays.asList(\"a\", \"b\", \"b\");\n",
        "246": "    assertTrue(Multisets.removeOccurrences(multiset, toRemove));\n",
        "247": "    assertThat(multiset).containsExactly(\"a\", \"c\").inOrder();\n",
        "248": "  }\n",
        "249": "\n",
        "250": "  @SuppressWarnings(\"deprecation\")\n",
        "251": "  public void testUnmodifiableMultisetShortCircuit() {\n",
        "252": "    Multiset<String> mod = HashMultiset.create();\n",
        "253": "    Multiset<String> unmod = Multisets.unmodifiableMultiset(mod);\n",
        "254": "    assertNotSame(mod, unmod);\n",
        "255": "    assertSame(unmod, Multisets.unmodifiableMultiset(unmod));\n",
        "256": "    ImmutableMultiset<String> immutable = ImmutableMultiset.of(\"a\", \"a\", \"b\", \"a\");\n",
        "257": "    assertSame(immutable, Multisets.unmodifiableMultiset(immutable));\n",
        "258": "    assertSame(immutable, Multisets.unmodifiableMultiset((Multiset<String>) immutable));\n",
        "259": "  }\n",
        "260": "\n",
        "261": "  public void testHighestCountFirst() {\n",
        "262": "    Multiset<String> multiset = HashMultiset.create(\n",
        "263": "        Arrays.asList(\"a\", \"a\", \"a\", \"b\", \"c\", \"c\"));\n",
        "264": "    ImmutableMultiset<String> sortedMultiset =\n",
        "265": "        Multisets.copyHighestCountFirst(multiset);\n",
        "266": "\n",
        "267": "    assertThat(sortedMultiset.entrySet()).containsExactly(\n",
        "268": "        Multisets.immutableEntry(\"a\", 3), Multisets.immutableEntry(\"c\", 2),\n",
        "269": "        Multisets.immutableEntry(\"b\", 1)).inOrder();\n",
        "270": "\n",
        "271": "    assertThat(sortedMultiset).containsExactly(\n",
        "272": "        \"a\",\n",
        "273": "        \"a\",\n",
        "274": "        \"a\",\n",
        "275": "        \"c\",\n",
        "276": "        \"c\",\n",
        "277": "        \"b\").inOrder();\n",
        "278": "\n",
        "279": "    assertThat(Multisets.copyHighestCountFirst(ImmutableMultiset.of())).isEmpty();\n",
        "280": "  }\n",
        "281": "}\n",
        "282": "\n"
    }
}