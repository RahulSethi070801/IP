{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "import static java.util.Arrays.asList;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import com.google.common.testing.EqualsTester;\n",
        "24": "\n",
        "25": "import junit.framework.TestCase;\n",
        "26": "\n",
        "27": "import java.util.Arrays;\n",
        "28": "import java.util.Collection;\n",
        "29": "import java.util.Collections;\n",
        "30": "import java.util.Iterator;\n",
        "31": "import java.util.List;\n",
        "32": "import java.util.Map;\n",
        "33": "import java.util.RandomAccess;\n",
        "34": "\n",
        "35": "/**\n",
        "36": " * Tests for {@code LinkedListMultimap}.\n",
        "37": " *\n",
        "38": " * @author Mike Bostock\n",
        "39": " */\n",
        "40": "@GwtCompatible(emulated = true)\n",
        "41": "public class LinkedListMultimapTest extends TestCase {\n",
        "42": "\n",
        "43": "  protected LinkedListMultimap<String, Integer> create() {\n",
        "44": "    return LinkedListMultimap.create();\n",
        "45": "  }\n",
        "46": "\n",
        "47": "  /**\n",
        "48": "   * Confirm that get() returns a List that doesn't implement RandomAccess.\n",
        "49": "   */\n",
        "50": "  public void testGetRandomAccess() {\n",
        "51": "    Multimap<String, Integer> multimap = create();\n",
        "52": "    multimap.put(\"foo\", 1);\n",
        "53": "    multimap.put(\"foo\", 3);\n",
        "54": "    assertThat(multimap.get(\"foo\")).isNotInstanceOf(RandomAccess.class);\n",
        "55": "    assertThat(multimap.get(\"bar\")).isNotInstanceOf(RandomAccess.class);\n",
        "56": "  }\n",
        "57": "\n",
        "58": "  /**\n",
        "59": "   * Confirm that removeAll() returns a List that implements RandomAccess, even\n",
        "60": "   * though get() doesn't.\n",
        "61": "   */\n",
        "62": "  public void testRemoveAllRandomAccess() {\n",
        "63": "    Multimap<String, Integer> multimap = create();\n",
        "64": "    multimap.put(\"foo\", 1);\n",
        "65": "    multimap.put(\"foo\", 3);\n",
        "66": "    assertTrue(multimap.removeAll(\"foo\") instanceof RandomAccess);\n",
        "67": "    assertTrue(multimap.removeAll(\"bar\") instanceof RandomAccess);\n",
        "68": "  }\n",
        "69": "\n",
        "70": "  /**\n",
        "71": "   * Confirm that replaceValues() returns a List that implements RandomAccess,\n",
        "72": "   * even though get() doesn't.\n",
        "73": "   */\n",
        "74": "  public void testReplaceValuesRandomAccess() {\n",
        "75": "    Multimap<String, Integer> multimap = create();\n",
        "76": "    multimap.put(\"foo\", 1);\n",
        "77": "    multimap.put(\"foo\", 3);\n",
        "78": "    assertTrue(multimap.replaceValues(\"foo\", Arrays.asList(2, 4))\n",
        "79": "        instanceof RandomAccess);\n",
        "80": "    assertTrue(multimap.replaceValues(\"bar\", Arrays.asList(2, 4))\n",
        "81": "        instanceof RandomAccess);\n",
        "82": "  }\n",
        "83": "\n",
        "84": "  public void testCreateFromMultimap() {\n",
        "85": "    Multimap<String, Integer> multimap = LinkedListMultimap.create();\n",
        "86": "    multimap.put(\"foo\", 1);\n",
        "87": "    multimap.put(\"bar\", 3);\n",
        "88": "    multimap.put(\"foo\", 2);\n",
        "89": "    LinkedListMultimap<String, Integer> copy =\n",
        "90": "        LinkedListMultimap.create(multimap);\n",
        "91": "    assertEquals(multimap, copy);\n",
        "92": "    assertThat(copy.entries()).containsExactlyElementsIn(multimap.entries()).inOrder();\n",
        "93": "  }\n",
        "94": "\n",
        "95": "  public void testCreateFromSize() {\n",
        "96": "    LinkedListMultimap<String, Integer> multimap\n",
        "97": "        = LinkedListMultimap.create(20);\n",
        "98": "    multimap.put(\"foo\", 1);\n",
        "99": "    multimap.put(\"bar\", 2);\n",
        "100": "    multimap.put(\"foo\", 3);\n",
        "101": "    assertEquals(ImmutableList.of(1, 3), multimap.get(\"foo\"));\n",
        "102": "  }\n",
        "103": "\n",
        "104": "  public void testCreateFromIllegalSize() {\n",
        "105": "    try {\n",
        "106": "      LinkedListMultimap.create(-20);\n",
        "107": "      fail();\n",
        "108": "    } catch (IllegalArgumentException expected) {}\n",
        "109": "  }\n",
        "110": "\n",
        "111": "  public void testLinkedGetAdd() {\n",
        "112": "    LinkedListMultimap<String, Integer> map = create();\n",
        "113": "    map.put(\"bar\", 1);\n",
        "114": "    Collection<Integer> foos = map.get(\"foo\");\n",
        "115": "    foos.add(2);\n",
        "116": "    foos.add(3);\n",
        "117": "    map.put(\"bar\", 4);\n",
        "118": "    map.put(\"foo\", 5);\n",
        "119": "    assertEquals(\"{bar=[1, 4], foo=[2, 3, 5]}\", map.toString());\n",
        "120": "    assertEquals(\"[bar=1, foo=2, foo=3, bar=4, foo=5]\",\n",
        "121": "        map.entries().toString());\n",
        "122": "  }\n",
        "123": "\n",
        "124": "  public void testLinkedGetInsert() {\n",
        "125": "    ListMultimap<String, Integer> map = create();\n",
        "126": "    map.put(\"bar\", 1);\n",
        "127": "    List<Integer> foos = map.get(\"foo\");\n",
        "128": "    foos.add(2);\n",
        "129": "    foos.add(0, 3);\n",
        "130": "    map.put(\"bar\", 4);\n",
        "131": "    map.put(\"foo\", 5);\n",
        "132": "    assertEquals(\"{bar=[1, 4], foo=[3, 2, 5]}\", map.toString());\n",
        "133": "    assertEquals(\"[bar=1, foo=3, foo=2, bar=4, foo=5]\",\n",
        "134": "        map.entries().toString());\n",
        "135": "  }\n",
        "136": "\n",
        "137": "  public void testLinkedPutInOrder() {\n",
        "138": "    Multimap<String, Integer> map = create();\n",
        "139": "    map.put(\"foo\", 1);\n",
        "140": "    map.put(\"bar\", 2);\n",
        "141": "    map.put(\"bar\", 3);\n",
        "142": "    assertEquals(\"{foo=[1], bar=[2, 3]}\", map.toString());\n",
        "143": "    assertEquals(\"[foo=1, bar=2, bar=3]\", map.entries().toString());\n",
        "144": "  }\n",
        "145": "\n",
        "146": "  public void testLinkedPutOutOfOrder() {\n",
        "147": "    Multimap<String, Integer> map = create();\n",
        "148": "    map.put(\"bar\", 1);\n",
        "149": "    map.put(\"foo\", 2);\n",
        "150": "    map.put(\"bar\", 3);\n",
        "151": "    assertEquals(\"{bar=[1, 3], foo=[2]}\", map.toString());\n",
        "152": "    assertEquals(\"[bar=1, foo=2, bar=3]\", map.entries().toString());\n",
        "153": "  }\n",
        "154": "\n",
        "155": "  public void testLinkedPutAllMultimap() {\n",
        "156": "    Multimap<String, Integer> src = create();\n",
        "157": "    src.put(\"bar\", 1);\n",
        "158": "    src.put(\"foo\", 2);\n",
        "159": "    src.put(\"bar\", 3);\n",
        "160": "    Multimap<String, Integer> dst = create();\n",
        "161": "    dst.putAll(src);\n",
        "162": "    assertEquals(\"{bar=[1, 3], foo=[2]}\", dst.toString());\n",
        "163": "    assertEquals(\"[bar=1, foo=2, bar=3]\", src.entries().toString());\n",
        "164": "  }\n",
        "165": "\n",
        "166": "  public void testLinkedReplaceValues() {\n",
        "167": "    Multimap<String, Integer> map = create();\n",
        "168": "    map.put(\"bar\", 1);\n",
        "169": "    map.put(\"foo\", 2);\n",
        "170": "    map.put(\"bar\", 3);\n",
        "171": "    map.put(\"bar\", 4);\n",
        "172": "    assertEquals(\"{bar=[1, 3, 4], foo=[2]}\", map.toString());\n",
        "173": "    map.replaceValues(\"bar\", asList(1, 2));\n",
        "174": "    assertEquals(\"[bar=1, foo=2, bar=2]\", map.entries().toString());\n",
        "175": "    assertEquals(\"{bar=[1, 2], foo=[2]}\", map.toString());\n",
        "176": "  }\n",
        "177": "\n",
        "178": "  public void testLinkedClear() {\n",
        "179": "    ListMultimap<String, Integer> map = create();\n",
        "180": "    map.put(\"foo\", 1);\n",
        "181": "    map.put(\"foo\", 2);\n",
        "182": "    map.put(\"bar\", 3);\n",
        "183": "    List<Integer> foos = map.get(\"foo\");\n",
        "184": "    Collection<Integer> values = map.values();\n",
        "185": "    assertEquals(asList(1, 2), foos);\n",
        "186": "    assertThat(values).containsExactly(1, 2, 3).inOrder();\n",
        "187": "    map.clear();\n",
        "188": "    assertEquals(Collections.emptyList(), foos);\n",
        "189": "    assertThat(values).isEmpty();\n",
        "190": "    assertEquals(\"[]\", map.entries().toString());\n",
        "191": "    assertEquals(\"{}\", map.toString());\n",
        "192": "  }\n",
        "193": "\n",
        "194": "  public void testLinkedKeySet() {\n",
        "195": "    Multimap<String, Integer> map = create();\n",
        "196": "    map.put(\"bar\", 1);\n",
        "197": "    map.put(\"foo\", 2);\n",
        "198": "    map.put(\"bar\", 3);\n",
        "199": "    map.put(\"bar\", 4);\n",
        "200": "    assertEquals(\"[bar, foo]\", map.keySet().toString());\n",
        "201": "    map.keySet().remove(\"bar\");\n",
        "202": "    assertEquals(\"{foo=[2]}\", map.toString());\n",
        "203": "  }\n",
        "204": "\n",
        "205": "  public void testLinkedKeys() {\n",
        "206": "    Multimap<String, Integer> map = create();\n",
        "207": "    map.put(\"bar\", 1);\n",
        "208": "    map.put(\"foo\", 2);\n",
        "209": "    map.put(\"bar\", 3);\n",
        "210": "    map.put(\"bar\", 4);\n",
        "211": "    assertEquals(\"[bar=1, foo=2, bar=3, bar=4]\",\n",
        "212": "        map.entries().toString());\n",
        "213": "    assertThat(map.keys()).containsExactly(\"bar\", \"foo\", \"bar\", \"bar\").inOrder();\n",
        "214": "    map.keys().remove(\"bar\"); // bar is no longer the first key!\n",
        "215": "    assertEquals(\"{foo=[2], bar=[3, 4]}\", map.toString());\n",
        "216": "  }\n",
        "217": "\n",
        "218": "  public void testLinkedValues() {\n",
        "219": "    Multimap<String, Integer> map = create();\n",
        "220": "    map.put(\"bar\", 1);\n",
        "221": "    map.put(\"foo\", 2);\n",
        "222": "    map.put(\"bar\", 3);\n",
        "223": "    map.put(\"bar\", 4);\n",
        "224": "    assertEquals(\"[1, 2, 3, 4]\", map.values().toString());\n",
        "225": "    map.values().remove(2);\n",
        "226": "    assertEquals(\"{bar=[1, 3, 4]}\", map.toString());\n",
        "227": "  }\n",
        "228": "\n",
        "229": "  public void testLinkedEntries() {\n",
        "230": "    Multimap<String, Integer> map = create();\n",
        "231": "    map.put(\"bar\", 1);\n",
        "232": "    map.put(\"foo\", 2);\n",
        "233": "    map.put(\"bar\", 3);\n",
        "234": "    Iterator<Map.Entry<String, Integer>> entries = map.entries().iterator();\n",
        "235": "    Map.Entry<String, Integer> entry = entries.next();\n",
        "236": "    assertEquals(\"bar\", entry.getKey());\n",
        "237": "    assertEquals(1, (int) entry.getValue());\n",
        "238": "    entry = entries.next();\n",
        "239": "    assertEquals(\"foo\", entry.getKey());\n",
        "240": "    assertEquals(2, (int) entry.getValue());\n",
        "241": "    entry.setValue(4);\n",
        "242": "    entry = entries.next();\n",
        "243": "    assertEquals(\"bar\", entry.getKey());\n",
        "244": "    assertEquals(3, (int) entry.getValue());\n",
        "245": "    assertFalse(entries.hasNext());\n",
        "246": "    entries.remove();\n",
        "247": "    assertEquals(\"{bar=[1], foo=[4]}\", map.toString());\n",
        "248": "  }\n",
        "249": "\n",
        "250": "  public void testLinkedAsMapEntries() {\n",
        "251": "    Multimap<String, Integer> map = create();\n",
        "252": "    map.put(\"bar\", 1);\n",
        "253": "    map.put(\"foo\", 2);\n",
        "254": "    map.put(\"bar\", 3);\n",
        "255": "    Iterator<Map.Entry<String, Collection<Integer>>> entries\n",
        "256": "        = map.asMap().entrySet().iterator();\n",
        "257": "    Map.Entry<String, Collection<Integer>> entry = entries.next();\n",
        "258": "    assertEquals(\"bar\", entry.getKey());\n",
        "259": "    assertThat(entry.getValue()).containsExactly(1, 3).inOrder();\n",
        "260": "    try {\n",
        "261": "      entry.setValue(Arrays.<Integer>asList());\n",
        "262": "      fail(\"UnsupportedOperationException expected\");\n",
        "263": "    } catch (UnsupportedOperationException expected) {}\n",
        "264": "    entries.remove(); // clear\n",
        "265": "    entry = entries.next();\n",
        "266": "    assertEquals(\"foo\", entry.getKey());\n",
        "267": "    assertThat(entry.getValue()).contains(2);\n",
        "268": "    assertFalse(entries.hasNext());\n",
        "269": "    assertEquals(\"{foo=[2]}\", map.toString());\n",
        "270": "  }\n",
        "271": "\n",
        "272": "  public void testEntriesAfterMultimapUpdate() {\n",
        "273": "    ListMultimap<String, Integer> multimap = create();\n",
        "274": "    multimap.put(\"foo\", 2);\n",
        "275": "    multimap.put(\"bar\", 3);\n",
        "276": "    Collection<Map.Entry<String, Integer>> entries = multimap.entries();\n",
        "277": "    Iterator<Map.Entry<String, Integer>> iterator = entries.iterator();\n",
        "278": "    Map.Entry<String, Integer> entrya = iterator.next();\n",
        "279": "    Map.Entry<String, Integer> entryb = iterator.next();\n",
        "280": "\n",
        "281": "    assertEquals(2, (int) multimap.get(\"foo\").set(0, 4));\n",
        "282": "    assertFalse(multimap.containsEntry(\"foo\", 2));\n",
        "283": "    assertTrue(multimap.containsEntry(\"foo\", 4));\n",
        "284": "    assertTrue(multimap.containsEntry(\"bar\", 3));\n",
        "285": "    assertEquals(4, (int) entrya.getValue());\n",
        "286": "    assertEquals(3, (int) entryb.getValue());\n",
        "287": "\n",
        "288": "    assertTrue(multimap.put(\"foo\", 5));\n",
        "289": "    assertTrue(multimap.containsEntry(\"foo\", 5));\n",
        "290": "    assertTrue(multimap.containsEntry(\"foo\", 4));\n",
        "291": "    assertTrue(multimap.containsEntry(\"bar\", 3));\n",
        "292": "    assertEquals(4, (int) entrya.getValue());\n",
        "293": "    assertEquals(3, (int) entryb.getValue());\n",
        "294": "  }\n",
        "295": "\n",
        "296": "  public void testEquals() {\n",
        "297": "    new EqualsTester()\n",
        "298": "        .addEqualityGroup(\n",
        "299": "            LinkedListMultimap.create(),\n",
        "300": "            LinkedListMultimap.create(),\n",
        "301": "            LinkedListMultimap.create(1))\n",
        "302": "        .testEquals();\n",
        "303": "  }\n",
        "304": "}\n",
        "305": "\n"
    }
}