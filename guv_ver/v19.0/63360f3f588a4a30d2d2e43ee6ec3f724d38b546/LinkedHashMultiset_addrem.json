{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "\n",
        "21": "import java.util.LinkedHashMap;\n",
        "22": "\n",
        "23": "/**\n",
        "24": " * A {@code Multiset} implementation with predictable iteration order. Its\n",
        "25": " * iterator orders elements according to when the first occurrence of the\n",
        "26": " * element was added. When the multiset contains multiple instances of an\n",
        "27": " * element, those instances are consecutive in the iteration order. If all\n",
        "28": " * occurrences of an element are removed, after which that element is added to\n",
        "29": " * the multiset, the element will appear at the end of the iteration.\n",
        "30": " *\n",
        "31": " * <p>See the Guava User Guide article on <a href=\n",
        "32": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset\">\n",
        "33": " * {@code Multiset}</a>.\n",
        "34": " *\n",
        "35": " * @author Kevin Bourrillion\n",
        "36": " * @author Jared Levy\n",
        "37": " * @since 2.0\n",
        "38": " */\n",
        "39": "@GwtCompatible(serializable = true, emulated = true)\n",
        "40": "@SuppressWarnings(\"serial\") // we're overriding default serialization\n",
        "41": "public final class LinkedHashMultiset<E> extends AbstractMapBasedMultiset<E> {\n",
        "42": "\n",
        "43": "  /**\n",
        "44": "   * Creates a new, empty {@code LinkedHashMultiset} using the default initial\n",
        "45": "   * capacity.\n",
        "46": "   */\n",
        "47": "  public static <E> LinkedHashMultiset<E> create() {\n",
        "48": "    return new LinkedHashMultiset<E>();\n",
        "49": "  }\n",
        "50": "\n",
        "51": "  /**\n",
        "52": "   * Creates a new, empty {@code LinkedHashMultiset} with the specified expected\n",
        "53": "   * number of distinct elements.\n",
        "54": "   *\n",
        "55": "   * @param distinctElements the expected number of distinct elements\n",
        "56": "   * @throws IllegalArgumentException if {@code distinctElements} is negative\n",
        "57": "   */\n",
        "58": "  public static <E> LinkedHashMultiset<E> create(int distinctElements) {\n",
        "59": "    return new LinkedHashMultiset<E>(distinctElements);\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  /**\n",
        "63": "   * Creates a new {@code LinkedHashMultiset} containing the specified elements.\n",
        "64": "   *\n",
        "65": "   * <p>This implementation is highly efficient when {@code elements} is itself\n",
        "66": "   * a {@link Multiset}.\n",
        "67": "   *\n",
        "68": "   * @param elements the elements that the multiset should contain\n",
        "69": "   */\n",
        "70": "  public static <E> LinkedHashMultiset<E> create(Iterable<? extends E> elements) {\n",
        "71": "    LinkedHashMultiset<E> multiset = create(Multisets.inferDistinctElements(elements));\n",
        "72": "    Iterables.addAll(multiset, elements);\n",
        "73": "    return multiset;\n",
        "74": "  }\n",
        "75": "\n",
        "76": "  private LinkedHashMultiset() {\n",
        "77": "    super(new LinkedHashMap<E, Count>());\n",
        "78": "  }\n",
        "79": "\n",
        "80": "  private LinkedHashMultiset(int distinctElements) {\n",
        "81": "    super(Maps.<E, Count>newLinkedHashMapWithExpectedSize(distinctElements));\n",
        "82": "  }\n",
        "83": "}\n",
        "84": "\n"
    }
}