{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.util.concurrent;\n",
        "18": "\n",
        "19": "import static com.google.common.util.concurrent.Callables.returning;\n",
        "20": "import static com.google.common.util.concurrent.TestPlatform.verifyThreadWasNotInterrupted;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "\n",
        "24": "import junit.framework.TestCase;\n",
        "25": "\n",
        "26": "import java.util.concurrent.Callable;\n",
        "27": "import java.util.concurrent.CancellationException;\n",
        "28": "import java.util.concurrent.ExecutionException;\n",
        "29": "\n",
        "30": "/**\n",
        "31": " * Test case for {@link TrustedListenableFutureTask}.\n",
        "32": " */\n",
        "33": "@GwtCompatible(emulated = true)\n",
        "34": "public class TrustedListenableFutureTaskTest extends TestCase {\n",
        "35": "\n",
        "36": "  public void testSuccessful() throws Exception {\n",
        "37": "    TrustedListenableFutureTask<Integer> task = TrustedListenableFutureTask.create(returning(2));\n",
        "38": "    assertFalse(task.isDone());\n",
        "39": "    task.run();\n",
        "40": "    assertTrue(task.isDone());\n",
        "41": "    assertFalse(task.isCancelled());\n",
        "42": "    assertEquals(2, task.get().intValue());\n",
        "43": "  }\n",
        "44": "\n",
        "45": "  public void testCancelled() throws Exception {\n",
        "46": "    TrustedListenableFutureTask<Integer> task = TrustedListenableFutureTask.create(returning(2));\n",
        "47": "    assertFalse(task.isDone());\n",
        "48": "    task.cancel(false);\n",
        "49": "    assertTrue(task.isDone());\n",
        "50": "    assertTrue(task.isCancelled());\n",
        "51": "    assertFalse(task.wasInterrupted());\n",
        "52": "    try {\n",
        "53": "      task.get();\n",
        "54": "      fail();\n",
        "55": "    } catch (CancellationException expected) {\n",
        "56": "    }\n",
        "57": "    verifyThreadWasNotInterrupted();\n",
        "58": "  }\n",
        "59": "\n",
        "60": "  public void testFailed() throws Exception {\n",
        "61": "    final Exception e = new Exception();\n",
        "62": "    TrustedListenableFutureTask<Integer> task = TrustedListenableFutureTask.create(\n",
        "63": "        new Callable<Integer>() {\n",
        "64": "          @Override public Integer call() throws Exception {\n",
        "65": "            throw e;\n",
        "66": "          }\n",
        "67": "        });\n",
        "68": "    task.run();\n",
        "69": "    assertTrue(task.isDone());\n",
        "70": "    assertFalse(task.isCancelled());\n",
        "71": "    try {\n",
        "72": "      task.get();\n",
        "73": "      fail();\n",
        "74": "    } catch (ExecutionException executionException) {\n",
        "75": "      assertEquals(e, executionException.getCause());\n",
        "76": "    }\n",
        "77": "  }\n",
        "78": "}\n",
        "79": ""
    }
}