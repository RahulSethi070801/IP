{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "\n",
        "23": "import java.util.EnumMap;\n",
        "24": "import java.util.Map;\n",
        "25": "\n",
        "26": "import javax.annotation.Nullable;\n",
        "27": "\n",
        "28": "/**\n",
        "29": " * A {@code BiMap} backed by an {@code EnumMap} instance for keys-to-values, and\n",
        "30": " * a {@code HashMap} instance for values-to-keys. Null keys are not permitted,\n",
        "31": " * but null values are. An {@code EnumHashBiMap} and its inverse are both\n",
        "32": " * serializable.\n",
        "33": " *\n",
        "34": " * <p>See the Guava User Guide article on <a href=\n",
        "35": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#bimap\">\n",
        "36": " * {@code BiMap}</a>.\n",
        "37": " *\n",
        "38": " * @author Mike Bostock\n",
        "39": " * @since 2.0\n",
        "40": " */\n",
        "41": "@GwtCompatible(emulated = true)\n",
        "42": "public final class EnumHashBiMap<K extends Enum<K>, V> extends AbstractBiMap<K, V> {\n",
        "43": "  private transient Class<K> keyType;\n",
        "44": "\n",
        "45": "  /**\n",
        "46": "   * Returns a new, empty {@code EnumHashBiMap} using the specified key type.\n",
        "47": "   *\n",
        "48": "   * @param keyType the key type\n",
        "49": "   */\n",
        "50": "  public static <K extends Enum<K>, V> EnumHashBiMap<K, V> create(Class<K> keyType) {\n",
        "51": "    return new EnumHashBiMap<K, V>(keyType);\n",
        "52": "  }\n",
        "53": "\n",
        "54": "  /**\n",
        "55": "   * Constructs a new bimap with the same mappings as the specified map. If the\n",
        "56": "   * specified map is an {@code EnumHashBiMap} or an {@link EnumBiMap}, the new\n",
        "57": "   * bimap has the same key type as the input bimap. Otherwise, the specified\n",
        "58": "   * map must contain at least one mapping, in order to determine the key type.\n",
        "59": "   *\n",
        "60": "   * @param map the map whose mappings are to be placed in this map\n",
        "61": "   * @throws IllegalArgumentException if map is not an {@code EnumBiMap} or an\n",
        "62": "   *     {@code EnumHashBiMap} instance and contains no mappings\n",
        "63": "   */\n",
        "64": "  public static <K extends Enum<K>, V> EnumHashBiMap<K, V> create(Map<K, ? extends V> map) {\n",
        "65": "    EnumHashBiMap<K, V> bimap = create(EnumBiMap.inferKeyType(map));\n",
        "66": "    bimap.putAll(map);\n",
        "67": "    return bimap;\n",
        "68": "  }\n",
        "69": "\n",
        "70": "  private EnumHashBiMap(Class<K> keyType) {\n",
        "71": "    super(\n",
        "72": "        WellBehavedMap.wrap(new EnumMap<K, V>(keyType)),\n",
        "73": "        Maps.<V, K>newHashMapWithExpectedSize(keyType.getEnumConstants().length));\n",
        "74": "    this.keyType = keyType;\n",
        "75": "  }\n",
        "76": "\n",
        "77": "  // Overriding these 3 methods to show that values may be null (but not keys)\n",
        "78": "\n",
        "79": "  @Override\n",
        "80": "  K checkKey(K key) {\n",
        "81": "    return checkNotNull(key);\n",
        "82": "  }\n",
        "83": "\n",
        "84": "  @Override\n",
        "85": "  public V put(K key, @Nullable V value) {\n",
        "86": "    return super.put(key, value);\n",
        "87": "  }\n",
        "88": "\n",
        "89": "  @Override\n",
        "90": "  public V forcePut(K key, @Nullable V value) {\n",
        "91": "    return super.forcePut(key, value);\n",
        "92": "  }\n",
        "93": "\n",
        "94": "  /** Returns the associated key type. */\n",
        "95": "  public Class<K> keyType() {\n",
        "96": "    return keyType;\n",
        "97": "  }\n",
        "98": "}\n",
        "99": "\n"
    }
}