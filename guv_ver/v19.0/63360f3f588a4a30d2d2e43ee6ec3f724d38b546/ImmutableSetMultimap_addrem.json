{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2009 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.Beta;\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import com.google.common.base.MoreObjects;\n",
        "24": "import com.google.j2objc.annotations.Weak;\n",
        "25": "\n",
        "26": "import java.util.Arrays;\n",
        "27": "import java.util.Collection;\n",
        "28": "import java.util.Comparator;\n",
        "29": "import java.util.List;\n",
        "30": "import java.util.Map;\n",
        "31": "import java.util.Map.Entry;\n",
        "32": "\n",
        "33": "import javax.annotation.Nullable;\n",
        "34": "\n",
        "35": "/**\n",
        "36": " * A {@link SetMultimap} whose contents will never change, with many other important properties\n",
        "37": " * detailed at {@link ImmutableCollection}.\n",
        "38": " *\n",
        "39": " * <p>See the Guava User Guide article on <a href=\n",
        "40": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\">\n",
        "41": " * immutable collections</a>.\n",
        "42": " *\n",
        "43": " * @author Mike Ward\n",
        "44": " * @since 2.0\n",
        "45": " */\n",
        "46": "@GwtCompatible(serializable = true, emulated = true)\n",
        "47": "public class ImmutableSetMultimap<K, V> extends ImmutableMultimap<K, V>\n",
        "48": "    implements SetMultimap<K, V> {\n",
        "49": "\n",
        "50": "  /** Returns the empty multimap. */\n",
        "51": "  // Casting is safe because the multimap will never hold any elements.\n",
        "52": "  @SuppressWarnings(\"unchecked\")\n",
        "53": "  public static <K, V> ImmutableSetMultimap<K, V> of() {\n",
        "54": "    return (ImmutableSetMultimap<K, V>) EmptyImmutableSetMultimap.INSTANCE;\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  /**\n",
        "58": "   * Returns an immutable multimap containing a single entry.\n",
        "59": "   */\n",
        "60": "  public static <K, V> ImmutableSetMultimap<K, V> of(K k1, V v1) {\n",
        "61": "    ImmutableSetMultimap.Builder<K, V> builder = ImmutableSetMultimap.builder();\n",
        "62": "    builder.put(k1, v1);\n",
        "63": "    return builder.build();\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  /**\n",
        "67": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "68": "   * Repeated occurrences of an entry (according to {@link Object#equals}) after\n",
        "69": "   * the first are ignored.\n",
        "70": "   */\n",
        "71": "  public static <K, V> ImmutableSetMultimap<K, V> of(K k1, V v1, K k2, V v2) {\n",
        "72": "    ImmutableSetMultimap.Builder<K, V> builder = ImmutableSetMultimap.builder();\n",
        "73": "    builder.put(k1, v1);\n",
        "74": "    builder.put(k2, v2);\n",
        "75": "    return builder.build();\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  /**\n",
        "79": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "80": "   * Repeated occurrences of an entry (according to {@link Object#equals}) after\n",
        "81": "   * the first are ignored.\n",
        "82": "   */\n",
        "83": "  public static <K, V> ImmutableSetMultimap<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3) {\n",
        "84": "    ImmutableSetMultimap.Builder<K, V> builder = ImmutableSetMultimap.builder();\n",
        "85": "    builder.put(k1, v1);\n",
        "86": "    builder.put(k2, v2);\n",
        "87": "    builder.put(k3, v3);\n",
        "88": "    return builder.build();\n",
        "89": "  }\n",
        "90": "\n",
        "91": "  /**\n",
        "92": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "93": "   * Repeated occurrences of an entry (according to {@link Object#equals}) after\n",
        "94": "   * the first are ignored.\n",
        "95": "   */\n",
        "96": "  public static <K, V> ImmutableSetMultimap<K, V> of(\n",
        "97": "      K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4) {\n",
        "98": "    ImmutableSetMultimap.Builder<K, V> builder = ImmutableSetMultimap.builder();\n",
        "99": "    builder.put(k1, v1);\n",
        "100": "    builder.put(k2, v2);\n",
        "101": "    builder.put(k3, v3);\n",
        "102": "    builder.put(k4, v4);\n",
        "103": "    return builder.build();\n",
        "104": "  }\n",
        "105": "\n",
        "106": "  /**\n",
        "107": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "108": "   * Repeated occurrences of an entry (according to {@link Object#equals}) after\n",
        "109": "   * the first are ignored.\n",
        "110": "   */\n",
        "111": "  public static <K, V> ImmutableSetMultimap<K, V> of(\n",
        "112": "      K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5) {\n",
        "113": "    ImmutableSetMultimap.Builder<K, V> builder = ImmutableSetMultimap.builder();\n",
        "114": "    builder.put(k1, v1);\n",
        "115": "    builder.put(k2, v2);\n",
        "116": "    builder.put(k3, v3);\n",
        "117": "    builder.put(k4, v4);\n",
        "118": "    builder.put(k5, v5);\n",
        "119": "    return builder.build();\n",
        "120": "  }\n",
        "121": "\n",
        "122": "  // looking for of() with > 5 entries? Use the builder instead.\n",
        "123": "\n",
        "124": "  /**\n",
        "125": "   * Returns a new {@link Builder}.\n",
        "126": "   */\n",
        "127": "  public static <K, V> Builder<K, V> builder() {\n",
        "128": "    return new Builder<K, V>();\n",
        "129": "  }\n",
        "130": "\n",
        "131": "  /**\n",
        "132": "   * A builder for creating immutable {@code SetMultimap} instances, especially\n",
        "133": "   * {@code public static final} multimaps (\"constant multimaps\"). Example:\n",
        "134": "   * <pre>   {@code\n",
        "135": "   *\n",
        "136": "   *   static final Multimap<String, Integer> STRING_TO_INTEGER_MULTIMAP =\n",
        "137": "   *       new ImmutableSetMultimap.Builder<String, Integer>()\n",
        "138": "   *           .put(\"one\", 1)\n",
        "139": "   *           .putAll(\"several\", 1, 2, 3)\n",
        "140": "   *           .putAll(\"many\", 1, 2, 3, 4, 5)\n",
        "141": "   *           .build();}</pre>\n",
        "142": "   *\n",
        "143": "   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple\n",
        "144": "   * times to build multiple multimaps in series. Each multimap contains the\n",
        "145": "   * key-value mappings in the previously created multimaps.\n",
        "146": "   *\n",
        "147": "   * @since 2.0\n",
        "148": "   */\n",
        "149": "  public static final class Builder<K, V> extends ImmutableMultimap.Builder<K, V> {\n",
        "150": "    /**\n",
        "151": "     * Creates a new builder. The returned builder is equivalent to the builder\n",
        "152": "     * generated by {@link ImmutableSetMultimap#builder}.\n",
        "153": "     */\n",
        "154": "    public Builder() {\n",
        "155": "      super(MultimapBuilder.linkedHashKeys().linkedHashSetValues().<K, V>build());\n",
        "156": "    }\n",
        "157": "\n",
        "158": "    /**\n",
        "159": "     * Adds a key-value mapping to the built multimap if it is not already\n",
        "160": "     * present.\n",
        "161": "     */\n",
        "162": "    @Override\n",
        "163": "    public Builder<K, V> put(K key, V value) {\n",
        "164": "      builderMultimap.put(checkNotNull(key), checkNotNull(value));\n",
        "165": "      return this;\n",
        "166": "    }\n",
        "167": "\n",
        "168": "    /**\n",
        "169": "     * Adds an entry to the built multimap if it is not already present.\n",
        "170": "     *\n",
        "171": "     * @since 11.0\n",
        "172": "     */\n",
        "173": "    @Override\n",
        "174": "    public Builder<K, V> put(Entry<? extends K, ? extends V> entry) {\n",
        "175": "      builderMultimap.put(checkNotNull(entry.getKey()), checkNotNull(entry.getValue()));\n",
        "176": "      return this;\n",
        "177": "    }\n",
        "178": "\n",
        "179": "    /**\n",
        "180": "     * {@inheritDoc}\n",
        "181": "     *\n",
        "182": "     * @since 19.0\n",
        "183": "     */\n",
        "184": "    @Beta\n",
        "185": "    @Override\n",
        "186": "    public Builder<K, V> putAll(Iterable<? extends Entry<? extends K, ? extends V>> entries) {\n",
        "187": "      super.putAll(entries);\n",
        "188": "      return this;\n",
        "189": "    }\n",
        "190": "\n",
        "191": "    @Override\n",
        "192": "    public Builder<K, V> putAll(K key, Iterable<? extends V> values) {\n",
        "193": "      Collection<V> collection = builderMultimap.get(checkNotNull(key));\n",
        "194": "      for (V value : values) {\n",
        "195": "        collection.add(checkNotNull(value));\n",
        "196": "      }\n",
        "197": "      return this;\n",
        "198": "    }\n",
        "199": "\n",
        "200": "    @Override\n",
        "201": "    public Builder<K, V> putAll(K key, V... values) {\n",
        "202": "      return putAll(key, Arrays.asList(values));\n",
        "203": "    }\n",
        "204": "\n",
        "205": "    @Override\n",
        "206": "    public Builder<K, V> putAll(Multimap<? extends K, ? extends V> multimap) {\n",
        "207": "      for (Entry<? extends K, ? extends Collection<? extends V>> entry :\n",
        "208": "          multimap.asMap().entrySet()) {\n",
        "209": "        putAll(entry.getKey(), entry.getValue());\n",
        "210": "      }\n",
        "211": "      return this;\n",
        "212": "    }\n",
        "213": "\n",
        "214": "    /**\n",
        "215": "     * {@inheritDoc}\n",
        "216": "     *\n",
        "217": "     * @since 8.0\n",
        "218": "     */\n",
        "219": "    @Override\n",
        "220": "    public Builder<K, V> orderKeysBy(Comparator<? super K> keyComparator) {\n",
        "221": "      this.keyComparator = checkNotNull(keyComparator);\n",
        "222": "      return this;\n",
        "223": "    }\n",
        "224": "\n",
        "225": "    /**\n",
        "226": "     * Specifies the ordering of the generated multimap's values for each key.\n",
        "227": "     *\n",
        "228": "     * <p>If this method is called, the sets returned by the {@code get()}\n",
        "229": "     * method of the generated multimap and its {@link Multimap#asMap()} view\n",
        "230": "     * are {@link ImmutableSortedSet} instances. However, serialization does not\n",
        "231": "     * preserve that property, though it does maintain the key and value\n",
        "232": "     * ordering.\n",
        "233": "     *\n",
        "234": "     * @since 8.0\n",
        "235": "     */\n",
        "236": "    // TODO: Make serialization behavior consistent.\n",
        "237": "    @Override\n",
        "238": "    public Builder<K, V> orderValuesBy(Comparator<? super V> valueComparator) {\n",
        "239": "      super.orderValuesBy(valueComparator);\n",
        "240": "      return this;\n",
        "241": "    }\n",
        "242": "\n",
        "243": "    /**\n",
        "244": "     * Returns a newly-created immutable set multimap.\n",
        "245": "     */\n",
        "246": "    @Override\n",
        "247": "    public ImmutableSetMultimap<K, V> build() {\n",
        "248": "      if (keyComparator != null) {\n",
        "249": "        Multimap<K, V> sortedCopy =\n",
        "250": "            MultimapBuilder.linkedHashKeys().linkedHashSetValues().<K, V>build();\n",
        "251": "        List<Map.Entry<K, Collection<V>>> entries =\n",
        "252": "            Ordering.from(keyComparator)\n",
        "253": "                .<K>onKeys()\n",
        "254": "                .immutableSortedCopy(builderMultimap.asMap().entrySet());\n",
        "255": "        for (Map.Entry<K, Collection<V>> entry : entries) {\n",
        "256": "          sortedCopy.putAll(entry.getKey(), entry.getValue());\n",
        "257": "        }\n",
        "258": "        builderMultimap = sortedCopy;\n",
        "259": "      }\n",
        "260": "      return copyOf(builderMultimap, valueComparator);\n",
        "261": "    }\n",
        "262": "  }\n",
        "263": "\n",
        "264": "  /**\n",
        "265": "   * Returns an immutable set multimap containing the same mappings as\n",
        "266": "   * {@code multimap}. The generated multimap's key and value orderings\n",
        "267": "   * correspond to the iteration ordering of the {@code multimap.asMap()} view.\n",
        "268": "   * Repeated occurrences of an entry in the multimap after the first are\n",
        "269": "   * ignored.\n",
        "270": "   *\n",
        "271": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "272": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "273": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "274": "   *\n",
        "275": "   * @throws NullPointerException if any key or value in {@code multimap} is\n",
        "276": "   *     null\n",
        "277": "   */\n",
        "278": "  public static <K, V> ImmutableSetMultimap<K, V> copyOf(\n",
        "279": "      Multimap<? extends K, ? extends V> multimap) {\n",
        "280": "    return copyOf(multimap, null);\n",
        "281": "  }\n",
        "282": "\n",
        "283": "  private static <K, V> ImmutableSetMultimap<K, V> copyOf(\n",
        "284": "      Multimap<? extends K, ? extends V> multimap, Comparator<? super V> valueComparator) {\n",
        "285": "    checkNotNull(multimap); // eager for GWT\n",
        "286": "    if (multimap.isEmpty() && valueComparator == null) {\n",
        "287": "      return of();\n",
        "288": "    }\n",
        "289": "\n",
        "290": "    if (multimap instanceof ImmutableSetMultimap) {\n",
        "291": "      @SuppressWarnings(\"unchecked\") // safe since multimap is not writable\n",
        "292": "      ImmutableSetMultimap<K, V> kvMultimap = (ImmutableSetMultimap<K, V>) multimap;\n",
        "293": "      if (!kvMultimap.isPartialView()) {\n",
        "294": "        return kvMultimap;\n",
        "295": "      }\n",
        "296": "    }\n",
        "297": "\n",
        "298": "    ImmutableMap.Builder<K, ImmutableSet<V>> builder =\n",
        "299": "        new ImmutableMap.Builder<K, ImmutableSet<V>>(multimap.asMap().size());\n",
        "300": "    int size = 0;\n",
        "301": "\n",
        "302": "    for (Entry<? extends K, ? extends Collection<? extends V>> entry :\n",
        "303": "        multimap.asMap().entrySet()) {\n",
        "304": "      K key = entry.getKey();\n",
        "305": "      Collection<? extends V> values = entry.getValue();\n",
        "306": "      ImmutableSet<V> set = valueSet(valueComparator, values);\n",
        "307": "      if (!set.isEmpty()) {\n",
        "308": "        builder.put(key, set);\n",
        "309": "        size += set.size();\n",
        "310": "      }\n",
        "311": "    }\n",
        "312": "\n",
        "313": "    return new ImmutableSetMultimap<K, V>(builder.build(), size, valueComparator);\n",
        "314": "  }\n",
        "315": "\n",
        "316": "  /**\n",
        "317": "   * Returns an immutable multimap containing the specified entries.  The\n",
        "318": "   * returned multimap iterates over keys in the order they were first\n",
        "319": "   * encountered in the input, and the values for each key are iterated in the\n",
        "320": "   * order they were encountered.  If two values for the same key are\n",
        "321": "   * {@linkplain Object#equals equal}, the first value encountered is used.\n",
        "322": "   *\n",
        "323": "   * @throws NullPointerException if any key, value, or entry is null\n",
        "324": "   * @since 19.0\n",
        "325": "   */\n",
        "326": "  @Beta\n",
        "327": "  public static <K, V> ImmutableSetMultimap<K, V> copyOf(\n",
        "328": "      Iterable<? extends Entry<? extends K, ? extends V>> entries) {\n",
        "329": "    return new Builder<K, V>().putAll(entries).build();\n",
        "330": "  }\n",
        "331": "\n",
        "332": "  /**\n",
        "333": "   * Returned by get() when a missing key is provided. Also holds the\n",
        "334": "   * comparator, if any, used for values.\n",
        "335": "   */\n",
        "336": "  private final transient ImmutableSet<V> emptySet;\n",
        "337": "\n",
        "338": "  ImmutableSetMultimap(\n",
        "339": "      ImmutableMap<K, ImmutableSet<V>> map,\n",
        "340": "      int size,\n",
        "341": "      @Nullable Comparator<? super V> valueComparator) {\n",
        "342": "    super(map, size);\n",
        "343": "    this.emptySet = emptySet(valueComparator);\n",
        "344": "  }\n",
        "345": "\n",
        "346": "  // views\n",
        "347": "\n",
        "348": "  /**\n",
        "349": "   * Returns an immutable set of the values for the given key.  If no mappings\n",
        "350": "   * in the multimap have the provided key, an empty immutable set is returned.\n",
        "351": "   * The values are in the same order as the parameters used to build this\n",
        "352": "   * multimap.\n",
        "353": "   */\n",
        "354": "  @Override\n",
        "355": "  public ImmutableSet<V> get(@Nullable K key) {\n",
        "356": "    // This cast is safe as its type is known in constructor.\n",
        "357": "    ImmutableSet<V> set = (ImmutableSet<V>) map.get(key);\n",
        "358": "    return MoreObjects.firstNonNull(set, emptySet);\n",
        "359": "  }\n",
        "360": "\n",
        "361": "  private transient ImmutableSetMultimap<V, K> inverse;\n",
        "362": "\n",
        "363": "  /**\n",
        "364": "   * {@inheritDoc}\n",
        "365": "   *\n",
        "366": "   * <p>Because an inverse of a set multimap cannot contain multiple pairs with\n",
        "367": "   * the same key and value, this method returns an {@code ImmutableSetMultimap}\n",
        "368": "   * rather than the {@code ImmutableMultimap} specified in the {@code\n",
        "369": "   * ImmutableMultimap} class.\n",
        "370": "   *\n",
        "371": "   * @since 11.0\n",
        "372": "   */\n",
        "373": "  public ImmutableSetMultimap<V, K> inverse() {\n",
        "374": "    ImmutableSetMultimap<V, K> result = inverse;\n",
        "375": "    return (result == null) ? (inverse = invert()) : result;\n",
        "376": "  }\n",
        "377": "\n",
        "378": "  private ImmutableSetMultimap<V, K> invert() {\n",
        "379": "    Builder<V, K> builder = builder();\n",
        "380": "    for (Entry<K, V> entry : entries()) {\n",
        "381": "      builder.put(entry.getValue(), entry.getKey());\n",
        "382": "    }\n",
        "383": "    ImmutableSetMultimap<V, K> invertedMultimap = builder.build();\n",
        "384": "    invertedMultimap.inverse = this;\n",
        "385": "    return invertedMultimap;\n",
        "386": "  }\n",
        "387": "\n",
        "388": "  /**\n",
        "389": "   * Guaranteed to throw an exception and leave the multimap unmodified.\n",
        "390": "   *\n",
        "391": "   * @throws UnsupportedOperationException always\n",
        "392": "   * @deprecated Unsupported operation.\n",
        "393": "   */\n",
        "394": "  @Deprecated\n",
        "395": "  @Override\n",
        "396": "  public ImmutableSet<V> removeAll(Object key) {\n",
        "397": "    throw new UnsupportedOperationException();\n",
        "398": "  }\n",
        "399": "\n",
        "400": "  /**\n",
        "401": "   * Guaranteed to throw an exception and leave the multimap unmodified.\n",
        "402": "   *\n",
        "403": "   * @throws UnsupportedOperationException always\n",
        "404": "   * @deprecated Unsupported operation.\n",
        "405": "   */\n",
        "406": "  @Deprecated\n",
        "407": "  @Override\n",
        "408": "  public ImmutableSet<V> replaceValues(K key, Iterable<? extends V> values) {\n",
        "409": "    throw new UnsupportedOperationException();\n",
        "410": "  }\n",
        "411": "\n",
        "412": "  private transient ImmutableSet<Entry<K, V>> entries;\n",
        "413": "\n",
        "414": "  /**\n",
        "415": "   * Returns an immutable collection of all key-value pairs in the multimap.\n",
        "416": "   * Its iterator traverses the values for the first key, the values for the\n",
        "417": "   * second key, and so on.\n",
        "418": "   */\n",
        "419": "  @Override\n",
        "420": "  public ImmutableSet<Entry<K, V>> entries() {\n",
        "421": "    ImmutableSet<Entry<K, V>> result = entries;\n",
        "422": "    return result == null\n",
        "423": "        ? (entries = new EntrySet<K, V>(this))\n",
        "424": "        : result;\n",
        "425": "  }\n",
        "426": "\n",
        "427": "  private static final class EntrySet<K, V> extends ImmutableSet<Entry<K, V>> {\n",
        "428": "    @Weak private final transient ImmutableSetMultimap<K, V> multimap;\n",
        "429": "\n",
        "430": "    EntrySet(ImmutableSetMultimap<K, V> multimap) {\n",
        "431": "      this.multimap = multimap;\n",
        "432": "    }\n",
        "433": "\n",
        "434": "    @Override\n",
        "435": "    public boolean contains(@Nullable Object object) {\n",
        "436": "      if (object instanceof Entry) {\n",
        "437": "        Entry<?, ?> entry = (Entry<?, ?>) object;\n",
        "438": "        return multimap.containsEntry(entry.getKey(), entry.getValue());\n",
        "439": "      }\n",
        "440": "      return false;\n",
        "441": "    }\n",
        "442": "\n",
        "443": "    @Override\n",
        "444": "    public int size() {\n",
        "445": "      return multimap.size();\n",
        "446": "    }\n",
        "447": "\n",
        "448": "    @Override\n",
        "449": "    public UnmodifiableIterator<Entry<K, V>> iterator() {\n",
        "450": "      return multimap.entryIterator();\n",
        "451": "    }\n",
        "452": "\n",
        "453": "    @Override\n",
        "454": "    boolean isPartialView() {\n",
        "455": "      return false;\n",
        "456": "    }\n",
        "457": "  }\n",
        "458": "\n",
        "459": "  private static <V> ImmutableSet<V> valueSet(\n",
        "460": "      @Nullable Comparator<? super V> valueComparator, Collection<? extends V> values) {\n",
        "461": "    return (valueComparator == null)\n",
        "462": "        ? ImmutableSet.copyOf(values)\n",
        "463": "        : ImmutableSortedSet.copyOf(valueComparator, values);\n",
        "464": "  }\n",
        "465": "\n",
        "466": "  private static <V> ImmutableSet<V> emptySet(@Nullable Comparator<? super V> valueComparator) {\n",
        "467": "    return (valueComparator == null)\n",
        "468": "        ? ImmutableSet.<V>of()\n",
        "469": "        : ImmutableSortedSet.<V>emptySet(valueComparator);\n",
        "470": "  }\n",
        "471": "\n",
        "472": "  private static <V> ImmutableSet.Builder<V> valuesBuilder(\n",
        "473": "      @Nullable Comparator<? super V> valueComparator) {\n",
        "474": "    return (valueComparator == null)\n",
        "475": "        ? new ImmutableSet.Builder<V>()\n",
        "476": "        : new ImmutableSortedSet.Builder<V>(valueComparator);\n",
        "477": "  }\n",
        "478": "\n",
        "479": "  @Nullable\n",
        "480": "  Comparator<? super V> valueComparator() {\n",
        "481": "    return emptySet instanceof ImmutableSortedSet\n",
        "482": "        ? ((ImmutableSortedSet<V>) emptySet).comparator()\n",
        "483": "        : null;\n",
        "484": "  }\n",
        "485": "}\n"
    }
}