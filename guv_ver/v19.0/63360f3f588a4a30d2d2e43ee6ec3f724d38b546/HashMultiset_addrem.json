{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "\n",
        "21": "import java.util.HashMap;\n",
        "22": "\n",
        "23": "/**\n",
        "24": " * Multiset implementation backed by a {@link HashMap}.\n",
        "25": " *\n",
        "26": " * @author Kevin Bourrillion\n",
        "27": " * @author Jared Levy\n",
        "28": " * @since 2.0\n",
        "29": " */\n",
        "30": "@GwtCompatible(serializable = true, emulated = true)\n",
        "31": "public final class HashMultiset<E> extends AbstractMapBasedMultiset<E> {\n",
        "32": "\n",
        "33": "  /**\n",
        "34": "   * Creates a new, empty {@code HashMultiset} using the default initial\n",
        "35": "   * capacity.\n",
        "36": "   */\n",
        "37": "  public static <E> HashMultiset<E> create() {\n",
        "38": "    return new HashMultiset<E>();\n",
        "39": "  }\n",
        "40": "\n",
        "41": "  /**\n",
        "42": "   * Creates a new, empty {@code HashMultiset} with the specified expected\n",
        "43": "   * number of distinct elements.\n",
        "44": "   *\n",
        "45": "   * @param distinctElements the expected number of distinct elements\n",
        "46": "   * @throws IllegalArgumentException if {@code distinctElements} is negative\n",
        "47": "   */\n",
        "48": "  public static <E> HashMultiset<E> create(int distinctElements) {\n",
        "49": "    return new HashMultiset<E>(distinctElements);\n",
        "50": "  }\n",
        "51": "\n",
        "52": "  /**\n",
        "53": "   * Creates a new {@code HashMultiset} containing the specified elements.\n",
        "54": "   *\n",
        "55": "   * <p>This implementation is highly efficient when {@code elements} is itself\n",
        "56": "   * a {@link Multiset}.\n",
        "57": "   *\n",
        "58": "   * @param elements the elements that the multiset should contain\n",
        "59": "   */\n",
        "60": "  public static <E> HashMultiset<E> create(Iterable<? extends E> elements) {\n",
        "61": "    HashMultiset<E> multiset = create(Multisets.inferDistinctElements(elements));\n",
        "62": "    Iterables.addAll(multiset, elements);\n",
        "63": "    return multiset;\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  private HashMultiset() {\n",
        "67": "    super(new HashMap<E, Count>());\n",
        "68": "  }\n",
        "69": "\n",
        "70": "  private HashMultiset(int distinctElements) {\n",
        "71": "    super(Maps.<E, Count>newHashMapWithExpectedSize(distinctElements));\n",
        "72": "  }\n",
        "73": "}\n",
        "74": "\n"
    }
}