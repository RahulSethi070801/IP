{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.base.Function;\n",
        "21": "import com.google.common.collect.Table.Cell;\n",
        "22": "import com.google.common.collect.testing.MapInterfaceTest;\n",
        "23": "import com.google.common.collect.testing.SampleElements;\n",
        "24": "import com.google.common.collect.testing.TestSetGenerator;\n",
        "25": "import com.google.common.collect.testing.features.CollectionFeature;\n",
        "26": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "27": "import com.google.common.collect.testing.features.Feature;\n",
        "28": "\n",
        "29": "import junit.framework.TestCase;\n",
        "30": "\n",
        "31": "import java.util.List;\n",
        "32": "import java.util.Map;\n",
        "33": "import java.util.Set;\n",
        "34": "import java.util.SortedMap;\n",
        "35": "\n",
        "36": "/**\n",
        "37": " * Collection tests for {@link Table} implementations.\n",
        "38": " *\n",
        "39": " * @author Jared Levy\n",
        "40": " * @author Louis Wasserman\n",
        "41": " */\n",
        "42": "@GwtCompatible(emulated = true)\n",
        "43": "public class TableCollectionTest extends TestCase {\n",
        "44": "\n",
        "45": "  private static final Feature<?>[] COLLECTION_FEATURES = {\n",
        "46": "    CollectionSize.ANY,\n",
        "47": "    CollectionFeature.ALLOWS_NULL_QUERIES\n",
        "48": "  };\n",
        "49": "\n",
        "50": "  private static final Feature<?>[] COLLECTION_FEATURES_ORDER = {\n",
        "51": "    CollectionSize.ANY,\n",
        "52": "    CollectionFeature.KNOWN_ORDER,\n",
        "53": "    CollectionFeature.ALLOWS_NULL_QUERIES\n",
        "54": "  };\n",
        "55": "\n",
        "56": "  private static final Feature<?>[] COLLECTION_FEATURES_REMOVE = {\n",
        "57": "    CollectionSize.ANY,\n",
        "58": "    CollectionFeature.SUPPORTS_REMOVE,\n",
        "59": "    CollectionFeature.ALLOWS_NULL_QUERIES\n",
        "60": "  };\n",
        "61": "\n",
        "62": "  private static final Feature<?>[] COLLECTION_FEATURES_REMOVE_ORDER = {\n",
        "63": "    CollectionSize.ANY,\n",
        "64": "    CollectionFeature.KNOWN_ORDER,\n",
        "65": "    CollectionFeature.SUPPORTS_REMOVE,\n",
        "66": "    CollectionFeature.ALLOWS_NULL_QUERIES\n",
        "67": "  };\n",
        "68": "\n",
        "69": "  private static void populateForRowKeySet(\n",
        "70": "      Table<String, Integer, Character> table, String[] elements) {\n",
        "71": "    for (String row : elements) {\n",
        "72": "      table.put(row, 1, 'a');\n",
        "73": "      table.put(row, 2, 'b');\n",
        "74": "    }\n",
        "75": "  }\n",
        "76": "\n",
        "77": "  private static void populateForColumnKeySet(\n",
        "78": "      Table<Integer, String, Character> table, String[] elements) {\n",
        "79": "    for (String column : elements) {\n",
        "80": "      table.put(1, column, 'a');\n",
        "81": "      table.put(2, column, 'b');\n",
        "82": "    }\n",
        "83": "  }\n",
        "84": "\n",
        "85": "  private static void populateForValues(\n",
        "86": "      Table<Integer, Character, String> table, String[] elements) {\n",
        "87": "    for (int i = 0; i < elements.length; i++) {\n",
        "88": "      table.put(i, 'a', elements[i]);\n",
        "89": "    }\n",
        "90": "  }\n",
        "91": "\n",
        "92": "  private static abstract class TestCellSetGenerator\n",
        "93": "      implements TestSetGenerator<Cell<String, Integer, Character>> {\n",
        "94": "    @Override\n",
        "95": "    public SampleElements<Cell<String, Integer, Character>> samples() {\n",
        "96": "      return new SampleElements<Cell<String, Integer, Character>>(\n",
        "97": "          Tables.immutableCell(\"bar\", 1, 'a'),\n",
        "98": "          Tables.immutableCell(\"bar\", 2, 'b'),\n",
        "99": "          Tables.immutableCell(\"foo\", 3, 'c'),\n",
        "100": "          Tables.immutableCell(\"bar\", 1, 'b'),\n",
        "101": "          Tables.immutableCell(\"cat\", 2, 'b'));\n",
        "102": "    }\n",
        "103": "\n",
        "104": "    @Override\n",
        "105": "    public Set<Cell<String, Integer, Character>> create(\n",
        "106": "        Object... elements) {\n",
        "107": "      Table<String, Integer, Character> table = createTable();\n",
        "108": "      for (Object element : elements) {\n",
        "109": "        @SuppressWarnings(\"unchecked\")\n",
        "110": "        Cell<String, Integer, Character> cell\n",
        "111": "            = (Cell<String, Integer, Character>) element;\n",
        "112": "        table.put(cell.getRowKey(), cell.getColumnKey(), cell.getValue());\n",
        "113": "      }\n",
        "114": "      return table.cellSet();\n",
        "115": "    }\n",
        "116": "\n",
        "117": "    abstract Table<String, Integer, Character> createTable();\n",
        "118": "\n",
        "119": "    @Override\n",
        "120": "    @SuppressWarnings(\"unchecked\")\n",
        "121": "    public Cell<String, Integer, Character>[] createArray(int length) {\n",
        "122": "      return (Cell<String, Integer, Character>[]) new Cell<?, ?, ?>[length];\n",
        "123": "    }\n",
        "124": "\n",
        "125": "    @Override\n",
        "126": "    public List<Cell<String, Integer, Character>> order(\n",
        "127": "        List<Cell<String, Integer, Character>> insertionOrder) {\n",
        "128": "      return insertionOrder;\n",
        "129": "    }\n",
        "130": "  }\n",
        "131": "\n",
        "132": "  private static abstract class MapTests\n",
        "133": "      extends MapInterfaceTest<String, Integer> {\n",
        "134": "\n",
        "135": "    MapTests(boolean allowsNullValues, boolean supportsPut, boolean supportsRemove,\n",
        "136": "        boolean supportsClear, boolean supportsIteratorRemove) {\n",
        "137": "      super(false, allowsNullValues, supportsPut, supportsRemove, supportsClear,\n",
        "138": "          supportsIteratorRemove);\n",
        "139": "    }\n",
        "140": "\n",
        "141": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "142": "      return \"four\";\n",
        "143": "    }\n",
        "144": "\n",
        "145": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "146": "      return 4;\n",
        "147": "    }\n",
        "148": "  }\n",
        "149": "\n",
        "150": "  private static abstract class RowTests extends MapTests {\n",
        "151": "    RowTests(boolean allowsNullValues, boolean supportsPut, boolean supportsRemove,\n",
        "152": "        boolean supportsClear, boolean supportsIteratorRemove) {\n",
        "153": "      super(allowsNullValues, supportsPut, supportsRemove, supportsClear,\n",
        "154": "          supportsIteratorRemove);\n",
        "155": "    }\n",
        "156": "\n",
        "157": "    abstract Table<Character, String, Integer> makeTable();\n",
        "158": "\n",
        "159": "    @Override protected Map<String, Integer> makeEmptyMap() {\n",
        "160": "      return makeTable().row('a');\n",
        "161": "    }\n",
        "162": "\n",
        "163": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "164": "      Table<Character, String, Integer> table = makeTable();\n",
        "165": "      table.put('a', \"one\", 1);\n",
        "166": "      table.put('a', \"two\", 2);\n",
        "167": "      table.put('a', \"three\", 3);\n",
        "168": "      table.put('b', \"four\", 4);\n",
        "169": "      return table.row('a');\n",
        "170": "    }\n",
        "171": "  }\n",
        "172": "\n",
        "173": "  public static class HashRowTests extends RowTests {\n",
        "174": "    public HashRowTests() {\n",
        "175": "      super(false, true, true, true, true);\n",
        "176": "    }\n",
        "177": "\n",
        "178": "    @Override Table<Character, String, Integer> makeTable() {\n",
        "179": "      return HashBasedTable.create();\n",
        "180": "    }\n",
        "181": "  }\n",
        "182": "\n",
        "183": "  public static class TreeRowTests extends RowTests {\n",
        "184": "    public TreeRowTests() {\n",
        "185": "      super(false, true, true, true, true);\n",
        "186": "    }\n",
        "187": "\n",
        "188": "    @Override Table<Character, String, Integer> makeTable() {\n",
        "189": "      return TreeBasedTable.create();\n",
        "190": "    }\n",
        "191": "  }\n",
        "192": "\n",
        "193": "  public static class TransposeRowTests extends RowTests {\n",
        "194": "    public TransposeRowTests() {\n",
        "195": "      super(false, true, true, true, false);\n",
        "196": "    }\n",
        "197": "\n",
        "198": "    @Override Table<Character, String, Integer> makeTable() {\n",
        "199": "      Table<String, Character, Integer> original = TreeBasedTable.create();\n",
        "200": "      return Tables.transpose(original);\n",
        "201": "    }\n",
        "202": "  }\n",
        "203": "\n",
        "204": "  private static final Function<Integer, Integer> DIVIDE_BY_2\n",
        "205": "      = new Function<Integer, Integer>() {\n",
        "206": "        @Override public Integer apply(Integer input) {\n",
        "207": "          return (input == null) ? null : input / 2;\n",
        "208": "        }\n",
        "209": "  };\n",
        "210": "\n",
        "211": "  public static class TransformValueRowTests extends RowTests {\n",
        "212": "    public TransformValueRowTests() {\n",
        "213": "      super(false, false, true, true, true);\n",
        "214": "    }\n",
        "215": "\n",
        "216": "    @Override Table<Character, String, Integer> makeTable() {\n",
        "217": "      Table<Character, String, Integer> table = HashBasedTable.create();\n",
        "218": "      return Tables.transformValues(table, DIVIDE_BY_2);\n",
        "219": "    }\n",
        "220": "\n",
        "221": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "222": "      Table<Character, String, Integer> table = HashBasedTable.create();\n",
        "223": "      table.put('a', \"one\", 2);\n",
        "224": "      table.put('a', \"two\", 4);\n",
        "225": "      table.put('a', \"three\", 6);\n",
        "226": "      table.put('b', \"four\", 8);\n",
        "227": "      return Tables.transformValues(table, DIVIDE_BY_2).row('a');\n",
        "228": "    }\n",
        "229": "  }\n",
        "230": "\n",
        "231": "  public static class UnmodifiableHashRowTests extends RowTests {\n",
        "232": "    public UnmodifiableHashRowTests() {\n",
        "233": "      super(false, false, false, false, false);\n",
        "234": "    }\n",
        "235": "\n",
        "236": "    @Override Table<Character, String, Integer> makeTable() {\n",
        "237": "      Table<Character, String, Integer> table = HashBasedTable.create();\n",
        "238": "      return Tables.unmodifiableTable(table);\n",
        "239": "    }\n",
        "240": "\n",
        "241": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "242": "      Table<Character, String, Integer> table = HashBasedTable.create();\n",
        "243": "      table.put('a', \"one\", 1);\n",
        "244": "      table.put('a', \"two\", 2);\n",
        "245": "      table.put('a', \"three\", 3);\n",
        "246": "      table.put('b', \"four\", 4);\n",
        "247": "      return Tables.unmodifiableTable(table).row('a');\n",
        "248": "    }\n",
        "249": "  }\n",
        "250": "\n",
        "251": "  public static class UnmodifiableTreeRowTests extends RowTests {\n",
        "252": "    public UnmodifiableTreeRowTests() {\n",
        "253": "      super(false, false, false, false, false);\n",
        "254": "    }\n",
        "255": "\n",
        "256": "    @Override Table<Character, String, Integer> makeTable() {\n",
        "257": "      RowSortedTable<Character, String, Integer> table = TreeBasedTable.create();\n",
        "258": "      return Tables.unmodifiableRowSortedTable(table);\n",
        "259": "    }\n",
        "260": "\n",
        "261": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "262": "      RowSortedTable<Character, String, Integer> table = TreeBasedTable.create();\n",
        "263": "      table.put('a', \"one\", 1);\n",
        "264": "      table.put('a', \"two\", 2);\n",
        "265": "      table.put('a', \"three\", 3);\n",
        "266": "      table.put('b', \"four\", 4);\n",
        "267": "      return Tables.unmodifiableRowSortedTable(table).row('a');\n",
        "268": "    }\n",
        "269": "  }\n",
        "270": "\n",
        "271": "  private static abstract class ColumnTests extends MapTests {\n",
        "272": "    ColumnTests(boolean allowsNullValues, boolean supportsPut, boolean supportsRemove,\n",
        "273": "        boolean supportsClear, boolean supportsIteratorRemove) {\n",
        "274": "      super(allowsNullValues, supportsPut, supportsRemove, supportsClear,\n",
        "275": "          supportsIteratorRemove);\n",
        "276": "    }\n",
        "277": "\n",
        "278": "    abstract Table<String, Character, Integer> makeTable();\n",
        "279": "\n",
        "280": "    @Override protected Map<String, Integer> makeEmptyMap() {\n",
        "281": "      return makeTable().column('a');\n",
        "282": "    }\n",
        "283": "\n",
        "284": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "285": "      Table<String, Character, Integer> table = makeTable();\n",
        "286": "      table.put(\"one\", 'a', 1);\n",
        "287": "      table.put(\"two\", 'a', 2);\n",
        "288": "      table.put(\"three\", 'a', 3);\n",
        "289": "      table.put(\"four\", 'b', 4);\n",
        "290": "      return table.column('a');\n",
        "291": "    }\n",
        "292": "  }\n",
        "293": "\n",
        "294": "  public static class HashColumnTests extends ColumnTests {\n",
        "295": "    public HashColumnTests() {\n",
        "296": "      super(false, true, true, true, false);\n",
        "297": "    }\n",
        "298": "\n",
        "299": "    @Override Table<String, Character, Integer> makeTable() {\n",
        "300": "      return HashBasedTable.create();\n",
        "301": "    }\n",
        "302": "  }\n",
        "303": "\n",
        "304": "  public static class TreeColumnTests extends ColumnTests {\n",
        "305": "    public TreeColumnTests() {\n",
        "306": "      super(false, true, true, true, false);\n",
        "307": "    }\n",
        "308": "\n",
        "309": "    @Override Table<String, Character, Integer> makeTable() {\n",
        "310": "      return TreeBasedTable.create();\n",
        "311": "    }\n",
        "312": "  }\n",
        "313": "\n",
        "314": "  public static class TransposeColumnTests extends ColumnTests {\n",
        "315": "    public TransposeColumnTests() {\n",
        "316": "      super(false, true, true, true, true);\n",
        "317": "    }\n",
        "318": "\n",
        "319": "    @Override Table<String, Character, Integer> makeTable() {\n",
        "320": "      Table<Character, String, Integer> original = TreeBasedTable.create();\n",
        "321": "      return Tables.transpose(original);\n",
        "322": "    }\n",
        "323": "  }\n",
        "324": "\n",
        "325": "  public static class TransformValueColumnTests extends ColumnTests {\n",
        "326": "    public TransformValueColumnTests() {\n",
        "327": "      super(false, false, true, true, false);\n",
        "328": "    }\n",
        "329": "\n",
        "330": "    @Override Table<String, Character, Integer> makeTable() {\n",
        "331": "      Table<String, Character, Integer> table = HashBasedTable.create();\n",
        "332": "      return Tables.transformValues(table, DIVIDE_BY_2);\n",
        "333": "    }\n",
        "334": "\n",
        "335": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "336": "      Table<String, Character, Integer> table = HashBasedTable.create();\n",
        "337": "      table.put(\"one\", 'a', 1);\n",
        "338": "      table.put(\"two\", 'a', 2);\n",
        "339": "      table.put(\"three\", 'a', 3);\n",
        "340": "      table.put(\"four\", 'b', 4);\n",
        "341": "      return Tables.transformValues(table, DIVIDE_BY_2).column('a');\n",
        "342": "    }\n",
        "343": "  }\n",
        "344": "\n",
        "345": "  public static class UnmodifiableHashColumnTests extends ColumnTests {\n",
        "346": "    public UnmodifiableHashColumnTests() {\n",
        "347": "      super(false, false, false, false, false);\n",
        "348": "    }\n",
        "349": "\n",
        "350": "    @Override Table<String, Character, Integer> makeTable() {\n",
        "351": "      Table<String, Character, Integer> table = HashBasedTable.create();\n",
        "352": "      return Tables.unmodifiableTable(table);\n",
        "353": "    }\n",
        "354": "\n",
        "355": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "356": "      Table<String, Character, Integer> table = HashBasedTable.create();\n",
        "357": "      table.put(\"one\", 'a', 1);\n",
        "358": "      table.put(\"two\", 'a', 2);\n",
        "359": "      table.put(\"three\", 'a', 3);\n",
        "360": "      table.put(\"four\", 'b', 4);\n",
        "361": "      return Tables.unmodifiableTable(table).column('a');\n",
        "362": "    }\n",
        "363": "  }\n",
        "364": "\n",
        "365": "  public static class UnmodifiableTreeColumnTests extends ColumnTests {\n",
        "366": "    public UnmodifiableTreeColumnTests() {\n",
        "367": "      super(false, false, false, false, false);\n",
        "368": "    }\n",
        "369": "\n",
        "370": "    @Override Table<String, Character, Integer> makeTable() {\n",
        "371": "      RowSortedTable<String, Character, Integer> table = TreeBasedTable.create();\n",
        "372": "      return Tables.unmodifiableRowSortedTable(table);\n",
        "373": "    }\n",
        "374": "\n",
        "375": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "376": "      RowSortedTable<String, Character, Integer> table = TreeBasedTable.create();\n",
        "377": "      table.put(\"one\", 'a', 1);\n",
        "378": "      table.put(\"two\", 'a', 2);\n",
        "379": "      table.put(\"three\", 'a', 3);\n",
        "380": "      table.put(\"four\", 'b', 4);\n",
        "381": "      return Tables.unmodifiableRowSortedTable(table).column('a');\n",
        "382": "    }\n",
        "383": "  }\n",
        "384": "\n",
        "385": "  private static abstract class MapMapTests\n",
        "386": "      extends MapInterfaceTest<String, Map<Integer, Character>> {\n",
        "387": "\n",
        "388": "    MapMapTests(boolean allowsNullValues, boolean supportsRemove,\n",
        "389": "        boolean supportsClear, boolean supportsIteratorRemove) {\n",
        "390": "      super(false, allowsNullValues, false, supportsRemove, supportsClear,\n",
        "391": "          supportsIteratorRemove);\n",
        "392": "    }\n",
        "393": "\n",
        "394": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "395": "      return \"cat\";\n",
        "396": "    }\n",
        "397": "\n",
        "398": "    @Override protected Map<Integer, Character> getValueNotInPopulatedMap() {\n",
        "399": "      return ImmutableMap.of();\n",
        "400": "    }\n",
        "401": "\n",
        "402": "    /**\n",
        "403": "     * The version of this test supplied by {@link MapInterfaceTest} fails for\n",
        "404": "     * this particular map implementation, because {@code map.get()} returns a\n",
        "405": "     * view collection that changes in the course of a call to {@code remove()}.\n",
        "406": "     * Thus, the expectation doesn't hold that {@code map.remove(x)} returns the\n",
        "407": "     * same value which {@code map.get(x)} did immediately beforehand.\n",
        "408": "     */\n",
        "409": "    @Override public void testRemove() {\n",
        "410": "      final Map<String, Map<Integer, Character>> map;\n",
        "411": "      final String keyToRemove;\n",
        "412": "      try {\n",
        "413": "        map = makePopulatedMap();\n",
        "414": "      } catch (UnsupportedOperationException e) {\n",
        "415": "        return;\n",
        "416": "      }\n",
        "417": "      keyToRemove = map.keySet().iterator().next();\n",
        "418": "      if (supportsRemove) {\n",
        "419": "        int initialSize = map.size();\n",
        "420": "        map.get(keyToRemove);\n",
        "421": "        map.remove(keyToRemove);\n",
        "422": "        // This line doesn't hold - see the Javadoc comments above.\n",
        "423": "        // assertEquals(expectedValue, oldValue);\n",
        "424": "        assertFalse(map.containsKey(keyToRemove));\n",
        "425": "        assertEquals(initialSize - 1, map.size());\n",
        "426": "      } else {\n",
        "427": "        try {\n",
        "428": "          map.remove(keyToRemove);\n",
        "429": "          fail(\"Expected UnsupportedOperationException.\");\n",
        "430": "        } catch (UnsupportedOperationException e) {\n",
        "431": "          // Expected.\n",
        "432": "        }\n",
        "433": "      }\n",
        "434": "      assertInvariants(map);\n",
        "435": "    }\n",
        "436": "  }\n",
        "437": "\n",
        "438": "  private static abstract class RowMapTests extends MapMapTests {\n",
        "439": "    RowMapTests(boolean allowsNullValues, boolean supportsRemove,\n",
        "440": "        boolean supportsClear, boolean supportsIteratorRemove) {\n",
        "441": "      super(allowsNullValues, supportsRemove, supportsClear,\n",
        "442": "          supportsIteratorRemove);\n",
        "443": "    }\n",
        "444": "\n",
        "445": "    abstract Table<String, Integer, Character> makeTable();\n",
        "446": "\n",
        "447": "    @Override protected Map<String, Map<Integer, Character>>\n",
        "448": "        makePopulatedMap() {\n",
        "449": "      Table<String, Integer, Character> table = makeTable();\n",
        "450": "      populateTable(table);\n",
        "451": "      return table.rowMap();\n",
        "452": "    }\n",
        "453": "\n",
        "454": "    void populateTable(Table<String, Integer, Character> table) {\n",
        "455": "      table.put(\"foo\", 1, 'a');\n",
        "456": "      table.put(\"bar\", 1, 'b');\n",
        "457": "      table.put(\"foo\", 3, 'c');\n",
        "458": "    }\n",
        "459": "\n",
        "460": "    @Override protected Map<String, Map<Integer, Character>> makeEmptyMap() {\n",
        "461": "      return makeTable().rowMap();\n",
        "462": "    }\n",
        "463": "  }\n",
        "464": "\n",
        "465": "  public static class HashRowMapTests extends RowMapTests {\n",
        "466": "    public HashRowMapTests() {\n",
        "467": "      super(false, true, true, true);\n",
        "468": "    }\n",
        "469": "\n",
        "470": "    @Override Table<String, Integer, Character> makeTable() {\n",
        "471": "      return HashBasedTable.create();\n",
        "472": "    }\n",
        "473": "  }\n",
        "474": "\n",
        "475": "  public static class TreeRowMapTests extends RowMapTests {\n",
        "476": "    public TreeRowMapTests() {\n",
        "477": "      super(false, true, true, true);\n",
        "478": "    }\n",
        "479": "\n",
        "480": "    @Override Table<String, Integer, Character> makeTable() {\n",
        "481": "      return TreeBasedTable.create();\n",
        "482": "    }\n",
        "483": "  }\n",
        "484": "\n",
        "485": "  public static class TreeRowMapHeadMapTests extends RowMapTests {\n",
        "486": "    public TreeRowMapHeadMapTests() {\n",
        "487": "      super(false, true, true, true);\n",
        "488": "    }\n",
        "489": "\n",
        "490": "    @Override TreeBasedTable<String, Integer, Character> makeTable() {\n",
        "491": "      TreeBasedTable<String, Integer, Character> table =\n",
        "492": "          TreeBasedTable.create();\n",
        "493": "      table.put(\"z\", 1, 'a');\n",
        "494": "      return table;\n",
        "495": "    }\n",
        "496": "\n",
        "497": "    @Override protected Map<String, Map<Integer, Character>>\n",
        "498": "        makePopulatedMap() {\n",
        "499": "      TreeBasedTable<String, Integer, Character> table = makeTable();\n",
        "500": "      populateTable(table);\n",
        "501": "      return table.rowMap().headMap(\"x\");\n",
        "502": "    }\n",
        "503": "\n",
        "504": "    @Override protected Map<String, Map<Integer, Character>> makeEmptyMap() {\n",
        "505": "      return makeTable().rowMap().headMap(\"x\");\n",
        "506": "    }\n",
        "507": "\n",
        "508": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "509": "      return \"z\";\n",
        "510": "    }\n",
        "511": "  }\n",
        "512": "\n",
        "513": "  public static class TreeRowMapTailMapTests extends RowMapTests {\n",
        "514": "    public TreeRowMapTailMapTests() {\n",
        "515": "      super(false, true, true, true);\n",
        "516": "    }\n",
        "517": "\n",
        "518": "    @Override TreeBasedTable<String, Integer, Character> makeTable() {\n",
        "519": "      TreeBasedTable<String, Integer, Character> table =\n",
        "520": "          TreeBasedTable.create();\n",
        "521": "      table.put(\"a\", 1, 'a');\n",
        "522": "      return table;\n",
        "523": "    }\n",
        "524": "\n",
        "525": "    @Override protected Map<String, Map<Integer, Character>>\n",
        "526": "        makePopulatedMap() {\n",
        "527": "      TreeBasedTable<String, Integer, Character> table = makeTable();\n",
        "528": "      populateTable(table);\n",
        "529": "      return table.rowMap().tailMap(\"b\");\n",
        "530": "    }\n",
        "531": "\n",
        "532": "    @Override protected Map<String, Map<Integer, Character>> makeEmptyMap() {\n",
        "533": "      return makeTable().rowMap().tailMap(\"b\");\n",
        "534": "    }\n",
        "535": "\n",
        "536": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "537": "      return \"a\";\n",
        "538": "    }\n",
        "539": "  }\n",
        "540": "\n",
        "541": "  public static class TreeRowMapSubMapTests extends RowMapTests {\n",
        "542": "    public TreeRowMapSubMapTests() {\n",
        "543": "      super(false, true, true, true);\n",
        "544": "    }\n",
        "545": "\n",
        "546": "    @Override TreeBasedTable<String, Integer, Character> makeTable() {\n",
        "547": "      TreeBasedTable<String, Integer, Character> table =\n",
        "548": "          TreeBasedTable.create();\n",
        "549": "      table.put(\"a\", 1, 'a');\n",
        "550": "      table.put(\"z\", 1, 'a');\n",
        "551": "      return table;\n",
        "552": "    }\n",
        "553": "\n",
        "554": "    @Override protected Map<String, Map<Integer, Character>>\n",
        "555": "        makePopulatedMap() {\n",
        "556": "      TreeBasedTable<String, Integer, Character> table = makeTable();\n",
        "557": "      populateTable(table);\n",
        "558": "      return table.rowMap().subMap(\"b\", \"x\");\n",
        "559": "    }\n",
        "560": "\n",
        "561": "    @Override protected Map<String, Map<Integer, Character>> makeEmptyMap() {\n",
        "562": "      return makeTable().rowMap().subMap(\"b\", \"x\");\n",
        "563": "    }\n",
        "564": "\n",
        "565": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "566": "      return \"z\";\n",
        "567": "    }\n",
        "568": "  }\n",
        "569": "\n",
        "570": "  private static final Function<String, Character> FIRST_CHARACTER =\n",
        "571": "      new Function<String, Character>() {\n",
        "572": "        @Override\n",
        "573": "        public Character apply(String input) {\n",
        "574": "          return input == null ? null : input.charAt(0);\n",
        "575": "        }\n",
        "576": "      };\n",
        "577": "\n",
        "578": "  public static class TransformValueRowMapTests extends RowMapTests {\n",
        "579": "    public TransformValueRowMapTests() {\n",
        "580": "      super(false, true, true, true);\n",
        "581": "    }\n",
        "582": "\n",
        "583": "    @Override Table<String, Integer, Character> makeTable() {\n",
        "584": "      Table<String, Integer, String> original = HashBasedTable.create();\n",
        "585": "      return Tables.transformValues(original, FIRST_CHARACTER);\n",
        "586": "    }\n",
        "587": "\n",
        "588": "    @Override\n",
        "589": "    protected Map<String, Map<Integer, Character>> makePopulatedMap() {\n",
        "590": "      Table<String, Integer, String> table = HashBasedTable.create();\n",
        "591": "      table.put(\"foo\", 1, \"apple\");\n",
        "592": "      table.put(\"bar\", 1, \"banana\");\n",
        "593": "      table.put(\"foo\", 3, \"cat\");\n",
        "594": "      return Tables.transformValues(table, FIRST_CHARACTER).rowMap();\n",
        "595": "    }\n",
        "596": "  }\n",
        "597": "\n",
        "598": "  public static class UnmodifiableHashRowMapTests extends RowMapTests {\n",
        "599": "    public UnmodifiableHashRowMapTests() {\n",
        "600": "      super(false, false, false, false);\n",
        "601": "    }\n",
        "602": "\n",
        "603": "    @Override Table<String, Integer, Character> makeTable() {\n",
        "604": "      Table<String, Integer, Character> original = HashBasedTable.create();\n",
        "605": "      return Tables.unmodifiableTable(original);\n",
        "606": "    }\n",
        "607": "\n",
        "608": "    @Override\n",
        "609": "    protected Map<String, Map<Integer, Character>> makePopulatedMap() {\n",
        "610": "      Table<String, Integer, Character> table = HashBasedTable.create();\n",
        "611": "      table.put(\"foo\", 1, 'a');\n",
        "612": "      table.put(\"bar\", 1, 'b');\n",
        "613": "      table.put(\"foo\", 3, 'c');\n",
        "614": "      return Tables.unmodifiableTable(table).rowMap();\n",
        "615": "    }\n",
        "616": "  }\n",
        "617": "\n",
        "618": "  public static class UnmodifiableTreeRowMapTests extends RowMapTests {\n",
        "619": "    public UnmodifiableTreeRowMapTests() {\n",
        "620": "      super(false, false, false, false);\n",
        "621": "    }\n",
        "622": "\n",
        "623": "    @Override RowSortedTable<String, Integer, Character> makeTable() {\n",
        "624": "      RowSortedTable<String, Integer, Character> original = TreeBasedTable.create();\n",
        "625": "      return Tables.unmodifiableRowSortedTable(original);\n",
        "626": "    }\n",
        "627": "\n",
        "628": "    @Override\n",
        "629": "    protected SortedMap<String, Map<Integer, Character>> makePopulatedMap() {\n",
        "630": "      RowSortedTable<String, Integer, Character> table = TreeBasedTable.create();\n",
        "631": "      table.put(\"foo\", 1, 'a');\n",
        "632": "      table.put(\"bar\", 1, 'b');\n",
        "633": "      table.put(\"foo\", 3, 'c');\n",
        "634": "      return Tables.unmodifiableRowSortedTable(table).rowMap();\n",
        "635": "    }\n",
        "636": "  }\n",
        "637": "\n",
        "638": "  private static abstract class ColumnMapTests extends MapMapTests {\n",
        "639": "    ColumnMapTests(boolean allowsNullValues, boolean supportsRemove,\n",
        "640": "        boolean supportsClear, boolean supportsIteratorRemove) {\n",
        "641": "      super(allowsNullValues, supportsRemove, supportsClear,\n",
        "642": "          supportsIteratorRemove);\n",
        "643": "    }\n",
        "644": "\n",
        "645": "    abstract Table<Integer, String, Character> makeTable();\n",
        "646": "\n",
        "647": "    @Override protected Map<String, Map<Integer, Character>>\n",
        "648": "        makePopulatedMap() {\n",
        "649": "      Table<Integer, String, Character> table = makeTable();\n",
        "650": "      table.put(1, \"foo\", 'a');\n",
        "651": "      table.put(1, \"bar\", 'b');\n",
        "652": "      table.put(3, \"foo\", 'c');\n",
        "653": "      return table.columnMap();\n",
        "654": "    }\n",
        "655": "\n",
        "656": "    @Override protected Map<String, Map<Integer, Character>> makeEmptyMap() {\n",
        "657": "      return makeTable().columnMap();\n",
        "658": "    }\n",
        "659": "  }\n",
        "660": "\n",
        "661": "  public static class HashColumnMapTests extends ColumnMapTests {\n",
        "662": "    public HashColumnMapTests() {\n",
        "663": "      super(false, true, true, false);\n",
        "664": "    }\n",
        "665": "\n",
        "666": "    @Override Table<Integer, String, Character> makeTable() {\n",
        "667": "      return HashBasedTable.create();\n",
        "668": "    }\n",
        "669": "  }\n",
        "670": "\n",
        "671": "  public static class TreeColumnMapTests extends ColumnMapTests {\n",
        "672": "    public TreeColumnMapTests() {\n",
        "673": "      super(false, true, true, false);\n",
        "674": "    }\n",
        "675": "\n",
        "676": "    @Override Table<Integer, String, Character> makeTable() {\n",
        "677": "      return TreeBasedTable.create();\n",
        "678": "    }\n",
        "679": "  }\n",
        "680": "\n",
        "681": "  public static class TransformValueColumnMapTests extends ColumnMapTests {\n",
        "682": "    public TransformValueColumnMapTests() {\n",
        "683": "      super(false, true, true, false);\n",
        "684": "    }\n",
        "685": "\n",
        "686": "    @Override Table<Integer, String, Character> makeTable() {\n",
        "687": "      Table<Integer, String, String> original = HashBasedTable.create();\n",
        "688": "      return Tables.transformValues(original, FIRST_CHARACTER);\n",
        "689": "    }\n",
        "690": "\n",
        "691": "    @Override\n",
        "692": "    protected Map<String, Map<Integer, Character>> makePopulatedMap() {\n",
        "693": "      Table<Integer, String, String> table = HashBasedTable.create();\n",
        "694": "      table.put(1, \"foo\", \"apple\");\n",
        "695": "      table.put(1, \"bar\", \"banana\");\n",
        "696": "      table.put(3, \"foo\", \"cat\");\n",
        "697": "      return Tables.transformValues(table, FIRST_CHARACTER).columnMap();\n",
        "698": "    }\n",
        "699": "  }\n",
        "700": "\n",
        "701": "  public static class UnmodifiableHashColumnMapTests extends ColumnMapTests {\n",
        "702": "    public UnmodifiableHashColumnMapTests() {\n",
        "703": "      super(false, false, false, false);\n",
        "704": "    }\n",
        "705": "\n",
        "706": "    @Override Table<Integer, String, Character> makeTable() {\n",
        "707": "      Table<Integer, String, Character> original = HashBasedTable.create();\n",
        "708": "      return Tables.unmodifiableTable(original);\n",
        "709": "    }\n",
        "710": "\n",
        "711": "    @Override\n",
        "712": "    protected Map<String, Map<Integer, Character>> makePopulatedMap() {\n",
        "713": "      Table<Integer, String, Character> table = HashBasedTable.create();\n",
        "714": "      table.put(1, \"foo\", 'a');\n",
        "715": "      table.put(1, \"bar\", 'b');\n",
        "716": "      table.put(3, \"foo\", 'c');\n",
        "717": "      return Tables.unmodifiableTable(table).columnMap();\n",
        "718": "    }\n",
        "719": "  }\n",
        "720": "\n",
        "721": "  public static class UnmodifiableTreeColumnMapTests extends ColumnMapTests {\n",
        "722": "    public UnmodifiableTreeColumnMapTests() {\n",
        "723": "      super(false, false, false, false);\n",
        "724": "    }\n",
        "725": "\n",
        "726": "    @Override Table<Integer, String, Character> makeTable() {\n",
        "727": "      RowSortedTable<Integer, String, Character> original = TreeBasedTable.create();\n",
        "728": "      return Tables.unmodifiableRowSortedTable(original);\n",
        "729": "    }\n",
        "730": "\n",
        "731": "    @Override\n",
        "732": "    protected Map<String, Map<Integer, Character>> makePopulatedMap() {\n",
        "733": "      RowSortedTable<Integer, String, Character> table = TreeBasedTable.create();\n",
        "734": "      table.put(1, \"foo\", 'a');\n",
        "735": "      table.put(1, \"bar\", 'b');\n",
        "736": "      table.put(3, \"foo\", 'c');\n",
        "737": "      return Tables.unmodifiableRowSortedTable(table).columnMap();\n",
        "738": "    }\n",
        "739": "  }\n",
        "740": "}\n",
        "741": "\n"
    }
}