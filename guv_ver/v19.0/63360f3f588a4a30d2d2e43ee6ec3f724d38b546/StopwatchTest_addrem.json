{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.base;\n",
        "18": "\n",
        "19": "import static java.util.concurrent.TimeUnit.MICROSECONDS;\n",
        "20": "import static java.util.concurrent.TimeUnit.MILLISECONDS;\n",
        "21": "import static java.util.concurrent.TimeUnit.NANOSECONDS;\n",
        "22": "\n",
        "23": "import com.google.common.annotations.GwtCompatible;\n",
        "24": "import com.google.common.testing.FakeTicker;\n",
        "25": "\n",
        "26": "import junit.framework.TestCase;\n",
        "27": "\n",
        "28": "/**\n",
        "29": " * Unit test for {@link Stopwatch}.\n",
        "30": " *\n",
        "31": " * @author Kevin Bourrillion\n",
        "32": " */\n",
        "33": "@GwtCompatible(emulated = true)\n",
        "34": "public class StopwatchTest extends TestCase {\n",
        "35": "\n",
        "36": "  private final FakeTicker ticker = new FakeTicker();\n",
        "37": "  private final Stopwatch stopwatch = new Stopwatch(ticker);\n",
        "38": "\n",
        "39": "  public void testCreateStarted() {\n",
        "40": "    Stopwatch startedStopwatch = Stopwatch.createStarted();\n",
        "41": "    assertTrue(startedStopwatch.isRunning());\n",
        "42": "  }\n",
        "43": "\n",
        "44": "  public void testCreateUnstarted() {\n",
        "45": "    Stopwatch unstartedStopwatch = Stopwatch.createUnstarted();\n",
        "46": "    assertFalse(unstartedStopwatch.isRunning());\n",
        "47": "    assertEquals(0, unstartedStopwatch.elapsed(NANOSECONDS));\n",
        "48": "  }\n",
        "49": "\n",
        "50": "  public void testInitialState() {\n",
        "51": "    assertFalse(stopwatch.isRunning());\n",
        "52": "    assertEquals(0, stopwatch.elapsed(NANOSECONDS));\n",
        "53": "  }\n",
        "54": "\n",
        "55": "  public void testStart() {\n",
        "56": "    assertSame(stopwatch, stopwatch.start());\n",
        "57": "    assertTrue(stopwatch.isRunning());\n",
        "58": "  }\n",
        "59": "\n",
        "60": "  public void testStart_whileRunning() {\n",
        "61": "    stopwatch.start();\n",
        "62": "    try {\n",
        "63": "      stopwatch.start();\n",
        "64": "      fail();\n",
        "65": "    } catch (IllegalStateException expected) {\n",
        "66": "    }\n",
        "67": "    assertTrue(stopwatch.isRunning());\n",
        "68": "  }\n",
        "69": "\n",
        "70": "  public void testStop() {\n",
        "71": "    stopwatch.start();\n",
        "72": "    assertSame(stopwatch, stopwatch.stop());\n",
        "73": "    assertFalse(stopwatch.isRunning());\n",
        "74": "  }\n",
        "75": "\n",
        "76": "  public void testStop_new() {\n",
        "77": "    try {\n",
        "78": "      stopwatch.stop();\n",
        "79": "      fail();\n",
        "80": "    } catch (IllegalStateException expected) {\n",
        "81": "    }\n",
        "82": "    assertFalse(stopwatch.isRunning());\n",
        "83": "  }\n",
        "84": "\n",
        "85": "  public void testStop_alreadyStopped() {\n",
        "86": "    stopwatch.start();\n",
        "87": "    stopwatch.stop();\n",
        "88": "    try {\n",
        "89": "      stopwatch.stop();\n",
        "90": "      fail();\n",
        "91": "    } catch (IllegalStateException expected) {\n",
        "92": "    }\n",
        "93": "    assertFalse(stopwatch.isRunning());\n",
        "94": "  }\n",
        "95": "\n",
        "96": "  public void testReset_new() {\n",
        "97": "    ticker.advance(1);\n",
        "98": "    stopwatch.reset();\n",
        "99": "    assertFalse(stopwatch.isRunning());\n",
        "100": "    ticker.advance(2);\n",
        "101": "    assertEquals(0, stopwatch.elapsed(NANOSECONDS));\n",
        "102": "    stopwatch.start();\n",
        "103": "    ticker.advance(3);\n",
        "104": "    assertEquals(3, stopwatch.elapsed(NANOSECONDS));\n",
        "105": "  }\n",
        "106": "\n",
        "107": "  public void testReset_whileRunning() {\n",
        "108": "    ticker.advance(1);\n",
        "109": "    stopwatch.start();\n",
        "110": "    assertEquals(0, stopwatch.elapsed(NANOSECONDS));\n",
        "111": "    ticker.advance(2);\n",
        "112": "    assertEquals(2, stopwatch.elapsed(NANOSECONDS));\n",
        "113": "    stopwatch.reset();\n",
        "114": "    assertFalse(stopwatch.isRunning());\n",
        "115": "    ticker.advance(3);\n",
        "116": "    assertEquals(0, stopwatch.elapsed(NANOSECONDS));\n",
        "117": "  }\n",
        "118": "\n",
        "119": "  public void testElapsed_whileRunning() {\n",
        "120": "    ticker.advance(78);\n",
        "121": "    stopwatch.start();\n",
        "122": "    assertEquals(0, stopwatch.elapsed(NANOSECONDS));\n",
        "123": "\n",
        "124": "    ticker.advance(345);\n",
        "125": "    assertEquals(345, stopwatch.elapsed(NANOSECONDS));\n",
        "126": "  }\n",
        "127": "\n",
        "128": "  public void testElapsed_notRunning() {\n",
        "129": "    ticker.advance(1);\n",
        "130": "    stopwatch.start();\n",
        "131": "    ticker.advance(4);\n",
        "132": "    stopwatch.stop();\n",
        "133": "    ticker.advance(9);\n",
        "134": "    assertEquals(4, stopwatch.elapsed(NANOSECONDS));\n",
        "135": "  }\n",
        "136": "\n",
        "137": "  public void testElapsed_multipleSegments() {\n",
        "138": "    stopwatch.start();\n",
        "139": "    ticker.advance(9);\n",
        "140": "    stopwatch.stop();\n",
        "141": "\n",
        "142": "    ticker.advance(16);\n",
        "143": "\n",
        "144": "    stopwatch.start();\n",
        "145": "    assertEquals(9, stopwatch.elapsed(NANOSECONDS));\n",
        "146": "    ticker.advance(25);\n",
        "147": "    assertEquals(34, stopwatch.elapsed(NANOSECONDS));\n",
        "148": "\n",
        "149": "    stopwatch.stop();\n",
        "150": "    ticker.advance(36);\n",
        "151": "    assertEquals(34, stopwatch.elapsed(NANOSECONDS));\n",
        "152": "  }\n",
        "153": "\n",
        "154": "  public void testElapsed_micros() {\n",
        "155": "    stopwatch.start();\n",
        "156": "    ticker.advance(999);\n",
        "157": "    assertEquals(0, stopwatch.elapsed(MICROSECONDS));\n",
        "158": "    ticker.advance(1);\n",
        "159": "    assertEquals(1, stopwatch.elapsed(MICROSECONDS));\n",
        "160": "  }\n",
        "161": "\n",
        "162": "  public void testElapsed_millis() {\n",
        "163": "    stopwatch.start();\n",
        "164": "    ticker.advance(999999);\n",
        "165": "    assertEquals(0, stopwatch.elapsed(MILLISECONDS));\n",
        "166": "    ticker.advance(1);\n",
        "167": "    assertEquals(1, stopwatch.elapsed(MILLISECONDS));\n",
        "168": "  }\n",
        "169": "\n",
        "170": "}\n",
        "171": "\n"
    }
}