{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.primitives;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "20": "import static com.google.common.base.Preconditions.checkElementIndex;\n",
        "21": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "22": "import static com.google.common.base.Preconditions.checkPositionIndexes;\n",
        "23": "\n",
        "24": "import com.google.common.annotations.GwtCompatible;\n",
        "25": "\n",
        "26": "import java.io.Serializable;\n",
        "27": "import java.util.AbstractList;\n",
        "28": "import java.util.Collection;\n",
        "29": "import java.util.Collections;\n",
        "30": "import java.util.Comparator;\n",
        "31": "import java.util.List;\n",
        "32": "import java.util.RandomAccess;\n",
        "33": "\n",
        "34": "import javax.annotation.CheckReturnValue;\n",
        "35": "import javax.annotation.Nullable;\n",
        "36": "\n",
        "37": "/**\n",
        "38": " * Static utility methods pertaining to {@code char} primitives, that are not\n",
        "39": " * already found in either {@link Character} or {@link Arrays}.\n",
        "40": " *\n",
        "41": " * <p>All the operations in this class treat {@code char} values strictly\n",
        "42": " * numerically; they are neither Unicode-aware nor locale-dependent.\n",
        "43": " *\n",
        "44": " * <p>See the Guava User Guide article on <a href=\n",
        "45": " * \"https://github.com/google/guava/wiki/PrimitivesExplained\">\n",
        "46": " * primitive utilities</a>.\n",
        "47": " *\n",
        "48": " * @author Kevin Bourrillion\n",
        "49": " * @since 1.0\n",
        "50": " */\n",
        "51": "@CheckReturnValue\n",
        "52": "@GwtCompatible(emulated = true)\n",
        "53": "public final class Chars {\n",
        "54": "  private Chars() {}\n",
        "55": "\n",
        "56": "  /**\n",
        "57": "   * The number of bytes required to represent a primitive {@code char}\n",
        "58": "   * value.\n",
        "59": "   */\n",
        "60": "  public static final int BYTES = Character.SIZE / Byte.SIZE;\n",
        "61": "\n",
        "62": "  /**\n",
        "63": "   * Returns a hash code for {@code value}; equal to the result of invoking\n",
        "64": "   * {@code ((Character) value).hashCode()}.\n",
        "65": "   *\n",
        "66": "   * @param value a primitive {@code char} value\n",
        "67": "   * @return a hash code for the value\n",
        "68": "   */\n",
        "69": "  public static int hashCode(char value) {\n",
        "70": "    return value;\n",
        "71": "  }\n",
        "72": "\n",
        "73": "  /**\n",
        "74": "   * Returns the {@code char} value that is equal to {@code value}, if possible.\n",
        "75": "   *\n",
        "76": "   * @param value any value in the range of the {@code char} type\n",
        "77": "   * @return the {@code char} value that equals {@code value}\n",
        "78": "   * @throws IllegalArgumentException if {@code value} is greater than {@link\n",
        "79": "   *     Character#MAX_VALUE} or less than {@link Character#MIN_VALUE}\n",
        "80": "   */\n",
        "81": "  public static char checkedCast(long value) {\n",
        "82": "    char result = (char) value;\n",
        "83": "    if (result != value) {\n",
        "84": "      // don't use checkArgument here, to avoid boxing\n",
        "85": "      throw new IllegalArgumentException(\"Out of range: \" + value);\n",
        "86": "    }\n",
        "87": "    return result;\n",
        "88": "  }\n",
        "89": "\n",
        "90": "  /**\n",
        "91": "   * Returns the {@code char} nearest in value to {@code value}.\n",
        "92": "   *\n",
        "93": "   * @param value any {@code long} value\n",
        "94": "   * @return the same value cast to {@code char} if it is in the range of the\n",
        "95": "   *     {@code char} type, {@link Character#MAX_VALUE} if it is too large,\n",
        "96": "   *     or {@link Character#MIN_VALUE} if it is too small\n",
        "97": "   */\n",
        "98": "  public static char saturatedCast(long value) {\n",
        "99": "    if (value > Character.MAX_VALUE) {\n",
        "100": "      return Character.MAX_VALUE;\n",
        "101": "    }\n",
        "102": "    if (value < Character.MIN_VALUE) {\n",
        "103": "      return Character.MIN_VALUE;\n",
        "104": "    }\n",
        "105": "    return (char) value;\n",
        "106": "  }\n",
        "107": "\n",
        "108": "  /**\n",
        "109": "   * Compares the two specified {@code char} values. The sign of the value\n",
        "110": "   * returned is the same as that of {@code ((Character) a).compareTo(b)}.\n",
        "111": "   *\n",
        "112": "   * <p><b>Note for Java 7 and later:</b> this method should be treated as\n",
        "113": "   * deprecated; use the equivalent {@link Character#compare} method instead.\n",
        "114": "   *\n",
        "115": "   * @param a the first {@code char} to compare\n",
        "116": "   * @param b the second {@code char} to compare\n",
        "117": "   * @return a negative value if {@code a} is less than {@code b}; a positive\n",
        "118": "   *     value if {@code a} is greater than {@code b}; or zero if they are equal\n",
        "119": "   */\n",
        "120": "  public static int compare(char a, char b) {\n",
        "121": "    return a - b; // safe due to restricted range\n",
        "122": "  }\n",
        "123": "\n",
        "124": "  /**\n",
        "125": "   * Returns {@code true} if {@code target} is present as an element anywhere in\n",
        "126": "   * {@code array}.\n",
        "127": "   *\n",
        "128": "   * @param array an array of {@code char} values, possibly empty\n",
        "129": "   * @param target a primitive {@code char} value\n",
        "130": "   * @return {@code true} if {@code array[i] == target} for some value of {@code\n",
        "131": "   *     i}\n",
        "132": "   */\n",
        "133": "  public static boolean contains(char[] array, char target) {\n",
        "134": "    for (char value : array) {\n",
        "135": "      if (value == target) {\n",
        "136": "        return true;\n",
        "137": "      }\n",
        "138": "    }\n",
        "139": "    return false;\n",
        "140": "  }\n",
        "141": "\n",
        "142": "  /**\n",
        "143": "   * Returns the index of the first appearance of the value {@code target} in\n",
        "144": "   * {@code array}.\n",
        "145": "   *\n",
        "146": "   * @param array an array of {@code char} values, possibly empty\n",
        "147": "   * @param target a primitive {@code char} value\n",
        "148": "   * @return the least index {@code i} for which {@code array[i] == target}, or\n",
        "149": "   *     {@code -1} if no such index exists.\n",
        "150": "   */\n",
        "151": "  public static int indexOf(char[] array, char target) {\n",
        "152": "    return indexOf(array, target, 0, array.length);\n",
        "153": "  }\n",
        "154": "\n",
        "155": "  // TODO(kevinb): consider making this public\n",
        "156": "  private static int indexOf(char[] array, char target, int start, int end) {\n",
        "157": "    for (int i = start; i < end; i++) {\n",
        "158": "      if (array[i] == target) {\n",
        "159": "        return i;\n",
        "160": "      }\n",
        "161": "    }\n",
        "162": "    return -1;\n",
        "163": "  }\n",
        "164": "\n",
        "165": "  /**\n",
        "166": "   * Returns the start position of the first occurrence of the specified {@code\n",
        "167": "   * target} within {@code array}, or {@code -1} if there is no such occurrence.\n",
        "168": "   *\n",
        "169": "   * <p>More formally, returns the lowest index {@code i} such that {@code\n",
        "170": "   * java.util.Arrays.copyOfRange(array, i, i + target.length)} contains exactly\n",
        "171": "   * the same elements as {@code target}.\n",
        "172": "   *\n",
        "173": "   * @param array the array to search for the sequence {@code target}\n",
        "174": "   * @param target the array to search for as a sub-sequence of {@code array}\n",
        "175": "   */\n",
        "176": "  public static int indexOf(char[] array, char[] target) {\n",
        "177": "    checkNotNull(array, \"array\");\n",
        "178": "    checkNotNull(target, \"target\");\n",
        "179": "    if (target.length == 0) {\n",
        "180": "      return 0;\n",
        "181": "    }\n",
        "182": "\n",
        "183": "    outer:\n",
        "184": "    for (int i = 0; i < array.length - target.length + 1; i++) {\n",
        "185": "      for (int j = 0; j < target.length; j++) {\n",
        "186": "        if (array[i + j] != target[j]) {\n",
        "187": "          continue outer;\n",
        "188": "        }\n",
        "189": "      }\n",
        "190": "      return i;\n",
        "191": "    }\n",
        "192": "    return -1;\n",
        "193": "  }\n",
        "194": "\n",
        "195": "  /**\n",
        "196": "   * Returns the index of the last appearance of the value {@code target} in\n",
        "197": "   * {@code array}.\n",
        "198": "   *\n",
        "199": "   * @param array an array of {@code char} values, possibly empty\n",
        "200": "   * @param target a primitive {@code char} value\n",
        "201": "   * @return the greatest index {@code i} for which {@code array[i] == target},\n",
        "202": "   *     or {@code -1} if no such index exists.\n",
        "203": "   */\n",
        "204": "  public static int lastIndexOf(char[] array, char target) {\n",
        "205": "    return lastIndexOf(array, target, 0, array.length);\n",
        "206": "  }\n",
        "207": "\n",
        "208": "  // TODO(kevinb): consider making this public\n",
        "209": "  private static int lastIndexOf(char[] array, char target, int start, int end) {\n",
        "210": "    for (int i = end - 1; i >= start; i--) {\n",
        "211": "      if (array[i] == target) {\n",
        "212": "        return i;\n",
        "213": "      }\n",
        "214": "    }\n",
        "215": "    return -1;\n",
        "216": "  }\n",
        "217": "\n",
        "218": "  /**\n",
        "219": "   * Returns the least value present in {@code array}.\n",
        "220": "   *\n",
        "221": "   * @param array a <i>nonempty</i> array of {@code char} values\n",
        "222": "   * @return the value present in {@code array} that is less than or equal to\n",
        "223": "   *     every other value in the array\n",
        "224": "   * @throws IllegalArgumentException if {@code array} is empty\n",
        "225": "   */\n",
        "226": "  public static char min(char... array) {\n",
        "227": "    checkArgument(array.length > 0);\n",
        "228": "    char min = array[0];\n",
        "229": "    for (int i = 1; i < array.length; i++) {\n",
        "230": "      if (array[i] < min) {\n",
        "231": "        min = array[i];\n",
        "232": "      }\n",
        "233": "    }\n",
        "234": "    return min;\n",
        "235": "  }\n",
        "236": "\n",
        "237": "  /**\n",
        "238": "   * Returns the greatest value present in {@code array}.\n",
        "239": "   *\n",
        "240": "   * @param array a <i>nonempty</i> array of {@code char} values\n",
        "241": "   * @return the value present in {@code array} that is greater than or equal to\n",
        "242": "   *     every other value in the array\n",
        "243": "   * @throws IllegalArgumentException if {@code array} is empty\n",
        "244": "   */\n",
        "245": "  public static char max(char... array) {\n",
        "246": "    checkArgument(array.length > 0);\n",
        "247": "    char max = array[0];\n",
        "248": "    for (int i = 1; i < array.length; i++) {\n",
        "249": "      if (array[i] > max) {\n",
        "250": "        max = array[i];\n",
        "251": "      }\n",
        "252": "    }\n",
        "253": "    return max;\n",
        "254": "  }\n",
        "255": "\n",
        "256": "  /**\n",
        "257": "   * Returns the values from each provided array combined into a single array.\n",
        "258": "   * For example, {@code concat(new char[] {a, b}, new char[] {}, new\n",
        "259": "   * char[] {c}} returns the array {@code {a, b, c}}.\n",
        "260": "   *\n",
        "261": "   * @param arrays zero or more {@code char} arrays\n",
        "262": "   * @return a single array containing all the values from the source arrays, in\n",
        "263": "   *     order\n",
        "264": "   */\n",
        "265": "  public static char[] concat(char[]... arrays) {\n",
        "266": "    int length = 0;\n",
        "267": "    for (char[] array : arrays) {\n",
        "268": "      length += array.length;\n",
        "269": "    }\n",
        "270": "    char[] result = new char[length];\n",
        "271": "    int pos = 0;\n",
        "272": "    for (char[] array : arrays) {\n",
        "273": "      System.arraycopy(array, 0, result, pos, array.length);\n",
        "274": "      pos += array.length;\n",
        "275": "    }\n",
        "276": "    return result;\n",
        "277": "  }\n",
        "278": "\n",
        "279": "  /**\n",
        "280": "   * Returns an array containing the same values as {@code array}, but\n",
        "281": "   * guaranteed to be of a specified minimum length. If {@code array} already\n",
        "282": "   * has a length of at least {@code minLength}, it is returned directly.\n",
        "283": "   * Otherwise, a new array of size {@code minLength + padding} is returned,\n",
        "284": "   * containing the values of {@code array}, and zeroes in the remaining places.\n",
        "285": "   *\n",
        "286": "   * @param array the source array\n",
        "287": "   * @param minLength the minimum length the returned array must guarantee\n",
        "288": "   * @param padding an extra amount to \"grow\" the array by if growth is\n",
        "289": "   *     necessary\n",
        "290": "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is\n",
        "291": "   *     negative\n",
        "292": "   * @return an array containing the values of {@code array}, with guaranteed\n",
        "293": "   *     minimum length {@code minLength}\n",
        "294": "   */\n",
        "295": "  public static char[] ensureCapacity(char[] array, int minLength, int padding) {\n",
        "296": "    checkArgument(minLength >= 0, \"Invalid minLength: %s\", minLength);\n",
        "297": "    checkArgument(padding >= 0, \"Invalid padding: %s\", padding);\n",
        "298": "    return (array.length < minLength)\n",
        "299": "        ? copyOf(array, minLength + padding)\n",
        "300": "        : array;\n",
        "301": "  }\n",
        "302": "\n",
        "303": "  // Arrays.copyOf() requires Java 6\n",
        "304": "  private static char[] copyOf(char[] original, int length) {\n",
        "305": "    char[] copy = new char[length];\n",
        "306": "    System.arraycopy(original, 0, copy, 0, Math.min(original.length, length));\n",
        "307": "    return copy;\n",
        "308": "  }\n",
        "309": "\n",
        "310": "  /**\n",
        "311": "   * Returns a string containing the supplied {@code char} values separated\n",
        "312": "   * by {@code separator}. For example, {@code join(\"-\", '1', '2', '3')} returns\n",
        "313": "   * the string {@code \"1-2-3\"}.\n",
        "314": "   *\n",
        "315": "   * @param separator the text that should appear between consecutive values in\n",
        "316": "   *     the resulting string (but not at the start or end)\n",
        "317": "   * @param array an array of {@code char} values, possibly empty\n",
        "318": "   */\n",
        "319": "  public static String join(String separator, char... array) {\n",
        "320": "    checkNotNull(separator);\n",
        "321": "    int len = array.length;\n",
        "322": "    if (len == 0) {\n",
        "323": "      return \"\";\n",
        "324": "    }\n",
        "325": "\n",
        "326": "    StringBuilder builder = new StringBuilder(len + separator.length() * (len - 1));\n",
        "327": "    builder.append(array[0]);\n",
        "328": "    for (int i = 1; i < len; i++) {\n",
        "329": "      builder.append(separator).append(array[i]);\n",
        "330": "    }\n",
        "331": "    return builder.toString();\n",
        "332": "  }\n",
        "333": "\n",
        "334": "  /**\n",
        "335": "   * Returns a comparator that compares two {@code char} arrays\n",
        "336": "   * lexicographically. That is, it compares, using {@link\n",
        "337": "   * #compare(char, char)}), the first pair of values that follow any\n",
        "338": "   * common prefix, or when one array is a prefix of the other, treats the\n",
        "339": "   * shorter array as the lesser. For example,\n",
        "340": "   * {@code [] < ['a'] < ['a', 'b'] < ['b']}.\n",
        "341": "   *\n",
        "342": "   * <p>The returned comparator is inconsistent with {@link\n",
        "343": "   * Object#equals(Object)} (since arrays support only identity equality), but\n",
        "344": "   * it is consistent with {@link Arrays#equals(char[], char[])}.\n",
        "345": "   *\n",
        "346": "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">\n",
        "347": "   *     Lexicographical order article at Wikipedia</a>\n",
        "348": "   * @since 2.0\n",
        "349": "   */\n",
        "350": "  public static Comparator<char[]> lexicographicalComparator() {\n",
        "351": "    return LexicographicalComparator.INSTANCE;\n",
        "352": "  }\n",
        "353": "\n",
        "354": "  private enum LexicographicalComparator implements Comparator<char[]> {\n",
        "355": "    INSTANCE;\n",
        "356": "\n",
        "357": "    @Override\n",
        "358": "    public int compare(char[] left, char[] right) {\n",
        "359": "      int minLength = Math.min(left.length, right.length);\n",
        "360": "      for (int i = 0; i < minLength; i++) {\n",
        "361": "        int result = Chars.compare(left[i], right[i]);\n",
        "362": "        if (result != 0) {\n",
        "363": "          return result;\n",
        "364": "        }\n",
        "365": "      }\n",
        "366": "      return left.length - right.length;\n",
        "367": "    }\n",
        "368": "  }\n",
        "369": "\n",
        "370": "  /**\n",
        "371": "   * Copies a collection of {@code Character} instances into a new array of\n",
        "372": "   * primitive {@code char} values.\n",
        "373": "   *\n",
        "374": "   * <p>Elements are copied from the argument collection as if by {@code\n",
        "375": "   * collection.toArray()}.  Calling this method is as thread-safe as calling\n",
        "376": "   * that method.\n",
        "377": "   *\n",
        "378": "   * @param collection a collection of {@code Character} objects\n",
        "379": "   * @return an array containing the same values as {@code collection}, in the\n",
        "380": "   *     same order, converted to primitives\n",
        "381": "   * @throws NullPointerException if {@code collection} or any of its elements\n",
        "382": "   *     is null\n",
        "383": "   */\n",
        "384": "  public static char[] toArray(Collection<Character> collection) {\n",
        "385": "    if (collection instanceof CharArrayAsList) {\n",
        "386": "      return ((CharArrayAsList) collection).toCharArray();\n",
        "387": "    }\n",
        "388": "\n",
        "389": "    Object[] boxedArray = collection.toArray();\n",
        "390": "    int len = boxedArray.length;\n",
        "391": "    char[] array = new char[len];\n",
        "392": "    for (int i = 0; i < len; i++) {\n",
        "393": "      // checkNotNull for GWT (do not optimize)\n",
        "394": "      array[i] = (Character) checkNotNull(boxedArray[i]);\n",
        "395": "    }\n",
        "396": "    return array;\n",
        "397": "  }\n",
        "398": "\n",
        "399": "  /**\n",
        "400": "   * Returns a fixed-size list backed by the specified array, similar to {@link\n",
        "401": "   * Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)},\n",
        "402": "   * but any attempt to set a value to {@code null} will result in a {@link\n",
        "403": "   * NullPointerException}.\n",
        "404": "   *\n",
        "405": "   * <p>The returned list maintains the values, but not the identities, of\n",
        "406": "   * {@code Character} objects written to or read from it.  For example, whether\n",
        "407": "   * {@code list.get(0) == list.get(0)} is true for the returned list is\n",
        "408": "   * unspecified.\n",
        "409": "   *\n",
        "410": "   * @param backingArray the array to back the list\n",
        "411": "   * @return a list view of the array\n",
        "412": "   */\n",
        "413": "  public static List<Character> asList(char... backingArray) {\n",
        "414": "    if (backingArray.length == 0) {\n",
        "415": "      return Collections.emptyList();\n",
        "416": "    }\n",
        "417": "    return new CharArrayAsList(backingArray);\n",
        "418": "  }\n",
        "419": "\n",
        "420": "  @GwtCompatible\n",
        "421": "  private static class CharArrayAsList extends AbstractList<Character>\n",
        "422": "      implements RandomAccess, Serializable {\n",
        "423": "    final char[] array;\n",
        "424": "    final int start;\n",
        "425": "    final int end;\n",
        "426": "\n",
        "427": "    CharArrayAsList(char[] array) {\n",
        "428": "      this(array, 0, array.length);\n",
        "429": "    }\n",
        "430": "\n",
        "431": "    CharArrayAsList(char[] array, int start, int end) {\n",
        "432": "      this.array = array;\n",
        "433": "      this.start = start;\n",
        "434": "      this.end = end;\n",
        "435": "    }\n",
        "436": "\n",
        "437": "    @Override\n",
        "438": "    public int size() {\n",
        "439": "      return end - start;\n",
        "440": "    }\n",
        "441": "\n",
        "442": "    @Override\n",
        "443": "    public boolean isEmpty() {\n",
        "444": "      return false;\n",
        "445": "    }\n",
        "446": "\n",
        "447": "    @Override\n",
        "448": "    public Character get(int index) {\n",
        "449": "      checkElementIndex(index, size());\n",
        "450": "      return array[start + index];\n",
        "451": "    }\n",
        "452": "\n",
        "453": "    @Override\n",
        "454": "    public boolean contains(Object target) {\n",
        "455": "      // Overridden to prevent a ton of boxing\n",
        "456": "      return (target instanceof Character)\n",
        "457": "          && Chars.indexOf(array, (Character) target, start, end) != -1;\n",
        "458": "    }\n",
        "459": "\n",
        "460": "    @Override\n",
        "461": "    public int indexOf(Object target) {\n",
        "462": "      // Overridden to prevent a ton of boxing\n",
        "463": "      if (target instanceof Character) {\n",
        "464": "        int i = Chars.indexOf(array, (Character) target, start, end);\n",
        "465": "        if (i >= 0) {\n",
        "466": "          return i - start;\n",
        "467": "        }\n",
        "468": "      }\n",
        "469": "      return -1;\n",
        "470": "    }\n",
        "471": "\n",
        "472": "    @Override\n",
        "473": "    public int lastIndexOf(Object target) {\n",
        "474": "      // Overridden to prevent a ton of boxing\n",
        "475": "      if (target instanceof Character) {\n",
        "476": "        int i = Chars.lastIndexOf(array, (Character) target, start, end);\n",
        "477": "        if (i >= 0) {\n",
        "478": "          return i - start;\n",
        "479": "        }\n",
        "480": "      }\n",
        "481": "      return -1;\n",
        "482": "    }\n",
        "483": "\n",
        "484": "    @Override\n",
        "485": "    public Character set(int index, Character element) {\n",
        "486": "      checkElementIndex(index, size());\n",
        "487": "      char oldValue = array[start + index];\n",
        "488": "      // checkNotNull for GWT (do not optimize)\n",
        "489": "      array[start + index] = checkNotNull(element);\n",
        "490": "      return oldValue;\n",
        "491": "    }\n",
        "492": "\n",
        "493": "    @Override\n",
        "494": "    public List<Character> subList(int fromIndex, int toIndex) {\n",
        "495": "      int size = size();\n",
        "496": "      checkPositionIndexes(fromIndex, toIndex, size);\n",
        "497": "      if (fromIndex == toIndex) {\n",
        "498": "        return Collections.emptyList();\n",
        "499": "      }\n",
        "500": "      return new CharArrayAsList(array, start + fromIndex, start + toIndex);\n",
        "501": "    }\n",
        "502": "\n",
        "503": "    @Override\n",
        "504": "    public boolean equals(@Nullable Object object) {\n",
        "505": "      if (object == this) {\n",
        "506": "        return true;\n",
        "507": "      }\n",
        "508": "      if (object instanceof CharArrayAsList) {\n",
        "509": "        CharArrayAsList that = (CharArrayAsList) object;\n",
        "510": "        int size = size();\n",
        "511": "        if (that.size() != size) {\n",
        "512": "          return false;\n",
        "513": "        }\n",
        "514": "        for (int i = 0; i < size; i++) {\n",
        "515": "          if (array[start + i] != that.array[that.start + i]) {\n",
        "516": "            return false;\n",
        "517": "          }\n",
        "518": "        }\n",
        "519": "        return true;\n",
        "520": "      }\n",
        "521": "      return super.equals(object);\n",
        "522": "    }\n",
        "523": "\n",
        "524": "    @Override\n",
        "525": "    public int hashCode() {\n",
        "526": "      int result = 1;\n",
        "527": "      for (int i = start; i < end; i++) {\n",
        "528": "        result = 31 * result + Chars.hashCode(array[i]);\n",
        "529": "      }\n",
        "530": "      return result;\n",
        "531": "    }\n",
        "532": "\n",
        "533": "    @Override\n",
        "534": "    public String toString() {\n",
        "535": "      StringBuilder builder = new StringBuilder(size() * 3);\n",
        "536": "      builder.append('[').append(array[start]);\n",
        "537": "      for (int i = start + 1; i < end; i++) {\n",
        "538": "        builder.append(\", \").append(array[i]);\n",
        "539": "      }\n",
        "540": "      return builder.append(']').toString();\n",
        "541": "    }\n",
        "542": "\n",
        "543": "    char[] toCharArray() {\n",
        "544": "      // Arrays.copyOfRange() is not available under GWT\n",
        "545": "      int size = size();\n",
        "546": "      char[] result = new char[size];\n",
        "547": "      System.arraycopy(array, start, result, 0, size);\n",
        "548": "      return result;\n",
        "549": "    }\n",
        "550": "\n",
        "551": "    private static final long serialVersionUID = 0;\n",
        "552": "  }\n",
        "553": "}\n"
    }
}