{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.Helpers.nefariousMapEntry;\n",
        "20": "import static com.google.common.truth.Truth.assertThat;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import com.google.common.base.Supplier;\n",
        "24": "\n",
        "25": "import junit.framework.TestCase;\n",
        "26": "\n",
        "27": "import java.io.Serializable;\n",
        "28": "import java.util.AbstractMap;\n",
        "29": "import java.util.Arrays;\n",
        "30": "import java.util.Collection;\n",
        "31": "import java.util.Collections;\n",
        "32": "import java.util.Comparator;\n",
        "33": "import java.util.HashMap;\n",
        "34": "import java.util.Iterator;\n",
        "35": "import java.util.LinkedList;\n",
        "36": "import java.util.List;\n",
        "37": "import java.util.Map;\n",
        "38": "import java.util.Queue;\n",
        "39": "import java.util.RandomAccess;\n",
        "40": "import java.util.Set;\n",
        "41": "import java.util.SortedSet;\n",
        "42": "\n",
        "43": "/**\n",
        "44": " * Tests for {@code MapConstraints}.\n",
        "45": " *\n",
        "46": " * @author Mike Bostock\n",
        "47": " * @author Jared Levy\n",
        "48": " */\n",
        "49": "@GwtCompatible(emulated = true)\n",
        "50": "public class MapConstraintsTest extends TestCase {\n",
        "51": "\n",
        "52": "  private static final String TEST_KEY = \"test\";\n",
        "53": "\n",
        "54": "  private static final Integer TEST_VALUE = 42;\n",
        "55": "\n",
        "56": "  static final class TestKeyException extends IllegalArgumentException {\n",
        "57": "    private static final long serialVersionUID = 0;\n",
        "58": "  }\n",
        "59": "\n",
        "60": "  static final class TestValueException extends IllegalArgumentException {\n",
        "61": "    private static final long serialVersionUID = 0;\n",
        "62": "  }\n",
        "63": "\n",
        "64": "  static final MapConstraint<String, Integer> TEST_CONSTRAINT\n",
        "65": "      = new TestConstraint();\n",
        "66": "\n",
        "67": "  private static final class TestConstraint\n",
        "68": "      implements MapConstraint<String, Integer>, Serializable {\n",
        "69": "    @Override\n",
        "70": "    public void checkKeyValue(String key, Integer value) {\n",
        "71": "      if (TEST_KEY.equals(key)) {\n",
        "72": "        throw new TestKeyException();\n",
        "73": "      }\n",
        "74": "      if (TEST_VALUE.equals(value)) {\n",
        "75": "        throw new TestValueException();\n",
        "76": "      }\n",
        "77": "    }\n",
        "78": "    private static final long serialVersionUID = 0;\n",
        "79": "  }\n",
        "80": "\n",
        "81": "  public void testNotNull() {\n",
        "82": "    MapConstraint<Object, Object> constraint = MapConstraints.notNull();\n",
        "83": "    constraint.checkKeyValue(\"foo\", 1);\n",
        "84": "    assertEquals(\"Not null\", constraint.toString());\n",
        "85": "    try {\n",
        "86": "      constraint.checkKeyValue(null, 1);\n",
        "87": "      fail(\"NullPointerException expected\");\n",
        "88": "    } catch (NullPointerException expected) {}\n",
        "89": "    try {\n",
        "90": "      constraint.checkKeyValue(\"foo\", null);\n",
        "91": "      fail(\"NullPointerException expected\");\n",
        "92": "    } catch (NullPointerException expected) {}\n",
        "93": "    try {\n",
        "94": "      constraint.checkKeyValue(null, null);\n",
        "95": "      fail(\"NullPointerException expected\");\n",
        "96": "    } catch (NullPointerException expected) {}\n",
        "97": "  }\n",
        "98": "\n",
        "99": "  public void testConstrainedMapLegal() {\n",
        "100": "    Map<String, Integer> map = Maps.newLinkedHashMap();\n",
        "101": "    Map<String, Integer> constrained = MapConstraints.constrainedMap(\n",
        "102": "        map, TEST_CONSTRAINT);\n",
        "103": "    map.put(TEST_KEY, TEST_VALUE);\n",
        "104": "    constrained.put(\"foo\", 1);\n",
        "105": "    map.putAll(ImmutableMap.of(\"bar\", 2));\n",
        "106": "    constrained.putAll(ImmutableMap.of(\"baz\", 3));\n",
        "107": "    assertTrue(map.equals(constrained));\n",
        "108": "    assertTrue(constrained.equals(map));\n",
        "109": "    assertEquals(map.entrySet(), constrained.entrySet());\n",
        "110": "    assertEquals(map.keySet(), constrained.keySet());\n",
        "111": "    assertEquals(HashMultiset.create(map.values()),\n",
        "112": "        HashMultiset.create(constrained.values()));\n",
        "113": "    assertThat(map.values()).isNotInstanceOf(Serializable.class);\n",
        "114": "    assertEquals(map.toString(), constrained.toString());\n",
        "115": "    assertEquals(map.hashCode(), constrained.hashCode());\n",
        "116": "    assertThat(map.entrySet()).containsExactly(\n",
        "117": "        Maps.immutableEntry(TEST_KEY, TEST_VALUE),\n",
        "118": "        Maps.immutableEntry(\"foo\", 1),\n",
        "119": "        Maps.immutableEntry(\"bar\", 2),\n",
        "120": "        Maps.immutableEntry(\"baz\", 3)).inOrder();\n",
        "121": "  }\n",
        "122": "\n",
        "123": "  public void testConstrainedMapIllegal() {\n",
        "124": "    Map<String, Integer> map = Maps.newLinkedHashMap();\n",
        "125": "    Map<String, Integer> constrained = MapConstraints.constrainedMap(\n",
        "126": "        map, TEST_CONSTRAINT);\n",
        "127": "    try {\n",
        "128": "      constrained.put(TEST_KEY, TEST_VALUE);\n",
        "129": "      fail(\"TestKeyException expected\");\n",
        "130": "    } catch (TestKeyException expected) {}\n",
        "131": "    try {\n",
        "132": "      constrained.put(\"baz\", TEST_VALUE);\n",
        "133": "      fail(\"TestValueException expected\");\n",
        "134": "    } catch (TestValueException expected) {}\n",
        "135": "    try {\n",
        "136": "      constrained.put(TEST_KEY, 3);\n",
        "137": "      fail(\"TestKeyException expected\");\n",
        "138": "    } catch (TestKeyException expected) {}\n",
        "139": "    try {\n",
        "140": "      constrained.putAll(ImmutableMap.of(\"baz\", 3, TEST_KEY, 4));\n",
        "141": "      fail(\"TestKeyException expected\");\n",
        "142": "    } catch (TestKeyException expected) {}\n",
        "143": "    assertEquals(Collections.emptySet(), map.entrySet());\n",
        "144": "    assertEquals(Collections.emptySet(), constrained.entrySet());\n",
        "145": "  }\n",
        "146": "\n",
        "147": "  public void testConstrainedBiMapLegal() {\n",
        "148": "    BiMap<String, Integer> map = new AbstractBiMap<String, Integer>(\n",
        "149": "        Maps.<String, Integer>newLinkedHashMap(),\n",
        "150": "        Maps.<Integer, String>newLinkedHashMap()) {};\n",
        "151": "    BiMap<String, Integer> constrained = MapConstraints.constrainedBiMap(\n",
        "152": "        map, TEST_CONSTRAINT);\n",
        "153": "    map.put(TEST_KEY, TEST_VALUE);\n",
        "154": "    constrained.put(\"foo\", 1);\n",
        "155": "    map.putAll(ImmutableMap.of(\"bar\", 2));\n",
        "156": "    constrained.putAll(ImmutableMap.of(\"baz\", 3));\n",
        "157": "    assertTrue(map.equals(constrained));\n",
        "158": "    assertTrue(constrained.equals(map));\n",
        "159": "    assertEquals(map.entrySet(), constrained.entrySet());\n",
        "160": "    assertEquals(map.keySet(), constrained.keySet());\n",
        "161": "    assertEquals(map.values(), constrained.values());\n",
        "162": "    assertEquals(map.toString(), constrained.toString());\n",
        "163": "    assertEquals(map.hashCode(), constrained.hashCode());\n",
        "164": "    assertThat(map.entrySet()).containsExactly(\n",
        "165": "        Maps.immutableEntry(TEST_KEY, TEST_VALUE),\n",
        "166": "        Maps.immutableEntry(\"foo\", 1),\n",
        "167": "        Maps.immutableEntry(\"bar\", 2),\n",
        "168": "        Maps.immutableEntry(\"baz\", 3)).inOrder();\n",
        "169": "  }\n",
        "170": "\n",
        "171": "  public void testConstrainedBiMapIllegal() {\n",
        "172": "    BiMap<String, Integer> map = new AbstractBiMap<String, Integer>(\n",
        "173": "        Maps.<String, Integer>newLinkedHashMap(),\n",
        "174": "        Maps.<Integer, String>newLinkedHashMap()) {};\n",
        "175": "    BiMap<String, Integer> constrained = MapConstraints.constrainedBiMap(\n",
        "176": "        map, TEST_CONSTRAINT);\n",
        "177": "    try {\n",
        "178": "      constrained.put(TEST_KEY, TEST_VALUE);\n",
        "179": "      fail(\"TestKeyException expected\");\n",
        "180": "    } catch (TestKeyException expected) {}\n",
        "181": "    try {\n",
        "182": "      constrained.put(\"baz\", TEST_VALUE);\n",
        "183": "      fail(\"TestValueException expected\");\n",
        "184": "    } catch (TestValueException expected) {}\n",
        "185": "    try {\n",
        "186": "      constrained.put(TEST_KEY, 3);\n",
        "187": "      fail(\"TestKeyException expected\");\n",
        "188": "    } catch (TestKeyException expected) {}\n",
        "189": "    try {\n",
        "190": "      constrained.putAll(ImmutableMap.of(\"baz\", 3, TEST_KEY, 4));\n",
        "191": "      fail(\"TestKeyException expected\");\n",
        "192": "    } catch (TestKeyException expected) {}\n",
        "193": "    try {\n",
        "194": "      constrained.forcePut(TEST_KEY, 3);\n",
        "195": "      fail(\"TestKeyException expected\");\n",
        "196": "    } catch (TestKeyException expected) {}\n",
        "197": "    try {\n",
        "198": "      constrained.inverse().forcePut(TEST_VALUE, \"baz\");\n",
        "199": "      fail(\"TestValueException expected\");\n",
        "200": "    } catch (TestValueException expected) {}\n",
        "201": "    try {\n",
        "202": "      constrained.inverse().forcePut(3, TEST_KEY);\n",
        "203": "      fail(\"TestKeyException expected\");\n",
        "204": "    } catch (TestKeyException expected) {}\n",
        "205": "    assertEquals(Collections.emptySet(), map.entrySet());\n",
        "206": "    assertEquals(Collections.emptySet(), constrained.entrySet());\n",
        "207": "  }\n",
        "208": "\n",
        "209": "  public void testConstrainedMultimapLegal() {\n",
        "210": "    Multimap<String, Integer> multimap = LinkedListMultimap.create();\n",
        "211": "    Multimap<String, Integer> constrained = MapConstraints.constrainedMultimap(\n",
        "212": "        multimap, TEST_CONSTRAINT);\n",
        "213": "    multimap.put(TEST_KEY, TEST_VALUE);\n",
        "214": "    constrained.put(\"foo\", 1);\n",
        "215": "    multimap.get(\"bar\").add(2);\n",
        "216": "    constrained.get(\"baz\").add(3);\n",
        "217": "    multimap.get(\"qux\").addAll(Arrays.asList(4));\n",
        "218": "    constrained.get(\"zig\").addAll(Arrays.asList(5));\n",
        "219": "    multimap.putAll(\"zag\", Arrays.asList(6));\n",
        "220": "    constrained.putAll(\"bee\", Arrays.asList(7));\n",
        "221": "    multimap.putAll(new ImmutableMultimap.Builder<String, Integer>()\n",
        "222": "        .put(\"bim\", 8).build());\n",
        "223": "    constrained.putAll(new ImmutableMultimap.Builder<String, Integer>()\n",
        "224": "        .put(\"bop\", 9).build());\n",
        "225": "    multimap.putAll(new ImmutableMultimap.Builder<String, Integer>()\n",
        "226": "        .put(\"dig\", 10).build());\n",
        "227": "    constrained.putAll(new ImmutableMultimap.Builder<String, Integer>()\n",
        "228": "        .put(\"dag\", 11).build());\n",
        "229": "    assertTrue(multimap.equals(constrained));\n",
        "230": "    assertTrue(constrained.equals(multimap));\n",
        "231": "    assertThat(ImmutableList.copyOf(multimap.entries())).isEqualTo(\n",
        "232": "        ImmutableList.copyOf(constrained.entries()));\n",
        "233": "    assertThat(constrained.asMap().get(\"foo\")).contains(1);\n",
        "234": "    assertNull(constrained.asMap().get(\"missing\"));\n",
        "235": "    assertEquals(multimap.asMap(), constrained.asMap());\n",
        "236": "    assertEquals(multimap.values(), constrained.values());\n",
        "237": "    assertEquals(multimap.keys(), constrained.keys());\n",
        "238": "    assertEquals(multimap.keySet(), constrained.keySet());\n",
        "239": "    assertEquals(multimap.toString(), constrained.toString());\n",
        "240": "    assertEquals(multimap.hashCode(), constrained.hashCode());\n",
        "241": "    assertThat(multimap.entries()).containsExactly(\n",
        "242": "        Maps.immutableEntry(TEST_KEY, TEST_VALUE),\n",
        "243": "        Maps.immutableEntry(\"foo\", 1),\n",
        "244": "        Maps.immutableEntry(\"bar\", 2),\n",
        "245": "        Maps.immutableEntry(\"baz\", 3),\n",
        "246": "        Maps.immutableEntry(\"qux\", 4),\n",
        "247": "        Maps.immutableEntry(\"zig\", 5),\n",
        "248": "        Maps.immutableEntry(\"zag\", 6),\n",
        "249": "        Maps.immutableEntry(\"bee\", 7),\n",
        "250": "        Maps.immutableEntry(\"bim\", 8),\n",
        "251": "        Maps.immutableEntry(\"bop\", 9),\n",
        "252": "        Maps.immutableEntry(\"dig\", 10),\n",
        "253": "        Maps.immutableEntry(\"dag\", 11)).inOrder();\n",
        "254": "    assertThat(constrained.asMap().values()).isNotInstanceOf(Serializable.class);\n",
        "255": "    Iterator<Collection<Integer>> iterator = constrained.asMap().values().iterator();\n",
        "256": "    iterator.next();\n",
        "257": "    iterator.next().add(12);\n",
        "258": "    assertTrue(multimap.containsEntry(\"foo\", 12));\n",
        "259": "  }\n",
        "260": "\n",
        "261": "  public void testConstrainedTypePreservingList() {\n",
        "262": "    ListMultimap<String, Integer> multimap\n",
        "263": "        = MapConstraints.constrainedListMultimap(\n",
        "264": "            LinkedListMultimap.<String, Integer>create(),\n",
        "265": "            TEST_CONSTRAINT);\n",
        "266": "    multimap.put(\"foo\", 1);\n",
        "267": "    Map.Entry<String, Collection<Integer>> entry\n",
        "268": "        = multimap.asMap().entrySet().iterator().next();\n",
        "269": "    assertTrue(entry.getValue() instanceof List);\n",
        "270": "    assertFalse(multimap.entries() instanceof Set);\n",
        "271": "    assertFalse(multimap.get(\"foo\") instanceof RandomAccess);\n",
        "272": "  }\n",
        "273": "\n",
        "274": "  public void testConstrainedTypePreservingRandomAccessList() {\n",
        "275": "    ListMultimap<String, Integer> multimap\n",
        "276": "        = MapConstraints.constrainedListMultimap(\n",
        "277": "            ArrayListMultimap.<String, Integer>create(),\n",
        "278": "            TEST_CONSTRAINT);\n",
        "279": "    multimap.put(\"foo\", 1);\n",
        "280": "    Map.Entry<String, Collection<Integer>> entry\n",
        "281": "        = multimap.asMap().entrySet().iterator().next();\n",
        "282": "    assertTrue(entry.getValue() instanceof List);\n",
        "283": "    assertFalse(multimap.entries() instanceof Set);\n",
        "284": "    assertTrue(multimap.get(\"foo\") instanceof RandomAccess);\n",
        "285": "  }\n",
        "286": "\n",
        "287": "  public void testConstrainedTypePreservingSet() {\n",
        "288": "    SetMultimap<String, Integer> multimap\n",
        "289": "        = MapConstraints.constrainedSetMultimap(\n",
        "290": "            LinkedHashMultimap.<String, Integer>create(),\n",
        "291": "            TEST_CONSTRAINT);\n",
        "292": "    multimap.put(\"foo\", 1);\n",
        "293": "    Map.Entry<String, Collection<Integer>> entry\n",
        "294": "        = multimap.asMap().entrySet().iterator().next();\n",
        "295": "    assertTrue(entry.getValue() instanceof Set);\n",
        "296": "  }\n",
        "297": "\n",
        "298": "  public void testConstrainedTypePreservingSortedSet() {\n",
        "299": "    Comparator<Integer> comparator = Collections.reverseOrder();\n",
        "300": "    SortedSetMultimap<String, Integer> delegate\n",
        "301": "        = TreeMultimap.create(Ordering.<String>natural(), comparator);\n",
        "302": "    SortedSetMultimap<String, Integer> multimap\n",
        "303": "        = MapConstraints.constrainedSortedSetMultimap(delegate,\n",
        "304": "            TEST_CONSTRAINT);\n",
        "305": "    multimap.put(\"foo\", 1);\n",
        "306": "    Map.Entry<String, Collection<Integer>> entry\n",
        "307": "        = multimap.asMap().entrySet().iterator().next();\n",
        "308": "    assertTrue(entry.getValue() instanceof SortedSet);\n",
        "309": "    assertSame(comparator, multimap.valueComparator());\n",
        "310": "    assertSame(comparator, multimap.get(\"foo\").comparator());\n",
        "311": "  }\n",
        "312": "\n",
        "313": "  @SuppressWarnings(\"unchecked\")\n",
        "314": "  public void testConstrainedMultimapIllegal() {\n",
        "315": "    Multimap<String, Integer> multimap = LinkedListMultimap.create();\n",
        "316": "    Multimap<String, Integer> constrained = MapConstraints.constrainedMultimap(\n",
        "317": "        multimap, TEST_CONSTRAINT);\n",
        "318": "    try {\n",
        "319": "      constrained.put(TEST_KEY, 1);\n",
        "320": "      fail(\"TestKeyException expected\");\n",
        "321": "    } catch (TestKeyException expected) {}\n",
        "322": "    try {\n",
        "323": "      constrained.put(\"foo\", TEST_VALUE);\n",
        "324": "      fail(\"TestValueException expected\");\n",
        "325": "    } catch (TestValueException expected) {}\n",
        "326": "    try {\n",
        "327": "      constrained.put(TEST_KEY, TEST_VALUE);\n",
        "328": "      fail(\"TestKeyException expected\");\n",
        "329": "    } catch (TestKeyException expected) {}\n",
        "330": "    try {\n",
        "331": "      constrained.get(TEST_KEY).add(1);\n",
        "332": "      fail(\"TestKeyException expected\");\n",
        "333": "    } catch (TestKeyException expected) {}\n",
        "334": "    try {\n",
        "335": "      constrained.get(\"foo\").add(TEST_VALUE);\n",
        "336": "      fail(\"TestValueException expected\");\n",
        "337": "    } catch (TestValueException expected) {}\n",
        "338": "    try {\n",
        "339": "      constrained.get(TEST_KEY).add(TEST_VALUE);\n",
        "340": "      fail(\"TestKeyException expected\");\n",
        "341": "    } catch (TestKeyException expected) {}\n",
        "342": "    try {\n",
        "343": "      constrained.get(TEST_KEY).addAll(Arrays.asList(1));\n",
        "344": "      fail(\"TestKeyException expected\");\n",
        "345": "    } catch (TestKeyException expected) {}\n",
        "346": "    try {\n",
        "347": "      constrained.get(\"foo\").addAll(Arrays.asList(1, TEST_VALUE));\n",
        "348": "      fail(\"TestValueException expected\");\n",
        "349": "    } catch (TestValueException expected) {}\n",
        "350": "    try {\n",
        "351": "      constrained.get(TEST_KEY).addAll(Arrays.asList(1, TEST_VALUE));\n",
        "352": "      fail(\"TestKeyException expected\");\n",
        "353": "    } catch (TestKeyException expected) {}\n",
        "354": "    try {\n",
        "355": "      constrained.putAll(TEST_KEY, Arrays.asList(1));\n",
        "356": "      fail(\"TestKeyException expected\");\n",
        "357": "    } catch (TestKeyException expected) {}\n",
        "358": "    try {\n",
        "359": "      constrained.putAll(\"foo\", Arrays.asList(1, TEST_VALUE));\n",
        "360": "      fail(\"TestValueException expected\");\n",
        "361": "    } catch (TestValueException expected) {}\n",
        "362": "    try {\n",
        "363": "      constrained.putAll(TEST_KEY, Arrays.asList(1, TEST_VALUE));\n",
        "364": "      fail(\"TestKeyException expected\");\n",
        "365": "    } catch (TestKeyException expected) {}\n",
        "366": "    try {\n",
        "367": "      constrained.putAll(new ImmutableMultimap.Builder<String, Integer>()\n",
        "368": "          .put(TEST_KEY, 2).put(\"foo\", 1).build());\n",
        "369": "      fail(\"TestKeyException expected\");\n",
        "370": "    } catch (TestKeyException expected) {}\n",
        "371": "    try {\n",
        "372": "      constrained.putAll(new ImmutableMultimap.Builder<String, Integer>()\n",
        "373": "          .put(\"bar\", TEST_VALUE).put(\"foo\", 1).build());\n",
        "374": "      fail(\"TestValueException expected\");\n",
        "375": "    } catch (TestValueException expected) {}\n",
        "376": "    try {\n",
        "377": "      constrained.putAll(new ImmutableMultimap.Builder<String, Integer>()\n",
        "378": "          .put(TEST_KEY, TEST_VALUE).put(\"foo\", 1).build());\n",
        "379": "      fail(\"TestKeyException expected\");\n",
        "380": "    } catch (TestKeyException expected) {}\n",
        "381": "    try {\n",
        "382": "      constrained.entries().add(Maps.immutableEntry(TEST_KEY, 1));\n",
        "383": "      fail(\"UnsupportedOperationException expected\");\n",
        "384": "    } catch (UnsupportedOperationException expected) {}\n",
        "385": "    try {\n",
        "386": "      constrained.entries().addAll(Arrays.asList(\n",
        "387": "          Maps.immutableEntry(\"foo\", 1),\n",
        "388": "          Maps.immutableEntry(TEST_KEY, 2)));\n",
        "389": "      fail(\"UnsupportedOperationException expected\");\n",
        "390": "    } catch (UnsupportedOperationException expected) {}\n",
        "391": "    assertTrue(multimap.isEmpty());\n",
        "392": "    assertTrue(constrained.isEmpty());\n",
        "393": "    constrained.put(\"foo\", 1);\n",
        "394": "    try {\n",
        "395": "      constrained.asMap().get(\"foo\").add(TEST_VALUE);\n",
        "396": "      fail(\"TestValueException expected\");\n",
        "397": "    } catch (TestValueException expected) {}\n",
        "398": "    try {\n",
        "399": "      constrained.asMap().values().iterator().next().add(TEST_VALUE);\n",
        "400": "      fail(\"TestValueException expected\");\n",
        "401": "    } catch (TestValueException expected) {}\n",
        "402": "    try {\n",
        "403": "      ((Collection<Integer>) constrained.asMap().values().toArray()[0])\n",
        "404": "          .add(TEST_VALUE);\n",
        "405": "      fail(\"TestValueException expected\");\n",
        "406": "    } catch (TestValueException expected) {}\n",
        "407": "    assertThat(ImmutableList.copyOf(multimap.entries())).isEqualTo(\n",
        "408": "        ImmutableList.copyOf(constrained.entries()));\n",
        "409": "    assertEquals(multimap.asMap(), constrained.asMap());\n",
        "410": "    assertEquals(multimap.values(), constrained.values());\n",
        "411": "    assertEquals(multimap.keys(), constrained.keys());\n",
        "412": "    assertEquals(multimap.keySet(), constrained.keySet());\n",
        "413": "    assertEquals(multimap.toString(), constrained.toString());\n",
        "414": "    assertEquals(multimap.hashCode(), constrained.hashCode());\n",
        "415": "  }\n",
        "416": "\n",
        "417": "  private static class QueueSupplier implements Supplier<Queue<Integer>> {\n",
        "418": "    @Override\n",
        "419": "    public Queue<Integer> get() {\n",
        "420": "      return new LinkedList<Integer>();\n",
        "421": "    }\n",
        "422": "  }\n",
        "423": "\n",
        "424": "  public void testConstrainedMultimapQueue() {\n",
        "425": "    Multimap<String, Integer> multimap = Multimaps.newMultimap(\n",
        "426": "        new HashMap<String, Collection<Integer>>(), new QueueSupplier());\n",
        "427": "    Multimap<String, Integer> constrained = MapConstraints.constrainedMultimap(\n",
        "428": "        multimap, TEST_CONSTRAINT);\n",
        "429": "    constrained.put(\"foo\", 1);\n",
        "430": "    assertTrue(constrained.get(\"foo\").contains(1));\n",
        "431": "    assertTrue(multimap.get(\"foo\").contains(1));\n",
        "432": "    try {\n",
        "433": "      constrained.put(TEST_KEY, 1);\n",
        "434": "      fail(\"TestKeyException expected\");\n",
        "435": "    } catch (TestKeyException expected) {}\n",
        "436": "    try {\n",
        "437": "      constrained.put(\"foo\", TEST_VALUE);\n",
        "438": "      fail(\"TestValueException expected\");\n",
        "439": "    } catch (TestValueException expected) {}\n",
        "440": "    try {\n",
        "441": "      constrained.get(\"foo\").add(TEST_VALUE);\n",
        "442": "      fail(\"TestKeyException expected\");\n",
        "443": "    } catch (TestValueException expected) {}\n",
        "444": "    try {\n",
        "445": "      constrained.get(TEST_KEY).add(1);\n",
        "446": "      fail(\"TestValueException expected\");\n",
        "447": "    } catch (TestKeyException expected) {}\n",
        "448": "    assertEquals(1, constrained.size());\n",
        "449": "    assertEquals(1, multimap.size());\n",
        "450": "  }\n",
        "451": "\n",
        "452": "  public void testMapEntrySetToArray() {\n",
        "453": "    Map<String, Integer> map = Maps.newLinkedHashMap();\n",
        "454": "    Map<String, Integer> constrained\n",
        "455": "        = MapConstraints.constrainedMap(map, TEST_CONSTRAINT);\n",
        "456": "    map.put(\"foo\", 1);\n",
        "457": "    @SuppressWarnings(\"unchecked\")\n",
        "458": "    Map.Entry<String, Integer> entry\n",
        "459": "        = (Map.Entry) constrained.entrySet().toArray()[0];\n",
        "460": "    try {\n",
        "461": "      entry.setValue(TEST_VALUE);\n",
        "462": "      fail(\"TestValueException expected\");\n",
        "463": "    } catch (TestValueException expected) {}\n",
        "464": "    assertFalse(map.containsValue(TEST_VALUE));\n",
        "465": "  }\n",
        "466": "\n",
        "467": "  public void testMapEntrySetContainsNefariousEntry() {\n",
        "468": "    Map<String, Integer> map = Maps.newTreeMap();\n",
        "469": "    Map<String, Integer> constrained\n",
        "470": "        = MapConstraints.constrainedMap(map, TEST_CONSTRAINT);\n",
        "471": "    map.put(\"foo\", 1);\n",
        "472": "    Map.Entry<String, Integer> nefariousEntry\n",
        "473": "        = nefariousMapEntry(TEST_KEY, TEST_VALUE);\n",
        "474": "    Set<Map.Entry<String, Integer>> entries = constrained.entrySet();\n",
        "475": "    assertFalse(entries.contains(nefariousEntry));\n",
        "476": "    assertFalse(map.containsValue(TEST_VALUE));\n",
        "477": "    assertFalse(entries.containsAll(Collections.singleton(nefariousEntry)));\n",
        "478": "    assertFalse(map.containsValue(TEST_VALUE));\n",
        "479": "  }\n",
        "480": "\n",
        "481": "  public void testMultimapAsMapEntriesToArray() {\n",
        "482": "    Multimap<String, Integer> multimap = LinkedListMultimap.create();\n",
        "483": "    Multimap<String, Integer> constrained\n",
        "484": "        = MapConstraints.constrainedMultimap(multimap, TEST_CONSTRAINT);\n",
        "485": "    multimap.put(\"foo\", 1);\n",
        "486": "    @SuppressWarnings(\"unchecked\")\n",
        "487": "    Map.Entry<String, Collection<Integer>> entry\n",
        "488": "        = (Map.Entry<String, Collection<Integer>>)\n",
        "489": "            constrained.asMap().entrySet().toArray()[0];\n",
        "490": "    try {\n",
        "491": "      entry.setValue(Collections.<Integer>emptySet());\n",
        "492": "      fail(\"UnsupportedOperationException expected\");\n",
        "493": "    } catch (UnsupportedOperationException expected) {}\n",
        "494": "    try {\n",
        "495": "      entry.getValue().add(TEST_VALUE);\n",
        "496": "      fail(\"TestValueException expected\");\n",
        "497": "    } catch (TestValueException expected) {}\n",
        "498": "    assertFalse(multimap.containsValue(TEST_VALUE));\n",
        "499": "  }\n",
        "500": "\n",
        "501": "  public void testMultimapAsMapValuesToArray() {\n",
        "502": "    Multimap<String, Integer> multimap = LinkedListMultimap.create();\n",
        "503": "    Multimap<String, Integer> constrained\n",
        "504": "        = MapConstraints.constrainedMultimap(multimap, TEST_CONSTRAINT);\n",
        "505": "    multimap.put(\"foo\", 1);\n",
        "506": "    @SuppressWarnings(\"unchecked\")\n",
        "507": "    Collection<Integer> collection\n",
        "508": "        = (Collection<Integer>) constrained.asMap().values().toArray()[0];\n",
        "509": "    try {\n",
        "510": "      collection.add(TEST_VALUE);\n",
        "511": "      fail(\"TestValueException expected\");\n",
        "512": "    } catch (TestValueException expected) {}\n",
        "513": "    assertFalse(multimap.containsValue(TEST_VALUE));\n",
        "514": "  }\n",
        "515": "\n",
        "516": "  public void testMultimapEntriesContainsNefariousEntry() {\n",
        "517": "    Multimap<String, Integer> multimap = LinkedListMultimap.create();\n",
        "518": "    Multimap<String, Integer> constrained\n",
        "519": "        = MapConstraints.constrainedMultimap(multimap, TEST_CONSTRAINT);\n",
        "520": "    multimap.put(\"foo\", 1);\n",
        "521": "    Map.Entry<String, Integer> nefariousEntry\n",
        "522": "        = nefariousMapEntry(TEST_KEY, TEST_VALUE);\n",
        "523": "    Collection<Map.Entry<String, Integer>> entries = constrained.entries();\n",
        "524": "    assertFalse(entries.contains(nefariousEntry));\n",
        "525": "    assertFalse(multimap.containsValue(TEST_VALUE));\n",
        "526": "    assertFalse(entries.containsAll(Collections.singleton(nefariousEntry)));\n",
        "527": "    assertFalse(multimap.containsValue(TEST_VALUE));\n",
        "528": "  }\n",
        "529": "\n",
        "530": "  public void testMultimapEntriesRemoveNefariousEntry() {\n",
        "531": "    Multimap<String, Integer> multimap = LinkedListMultimap.create();\n",
        "532": "    Multimap<String, Integer> constrained\n",
        "533": "        = MapConstraints.constrainedMultimap(multimap, TEST_CONSTRAINT);\n",
        "534": "    multimap.put(\"foo\", 1);\n",
        "535": "    Map.Entry<String, Integer> nefariousEntry\n",
        "536": "        = nefariousMapEntry(TEST_KEY, TEST_VALUE);\n",
        "537": "    Collection<Map.Entry<String, Integer>> entries = constrained.entries();\n",
        "538": "    assertFalse(entries.remove(nefariousEntry));\n",
        "539": "    assertFalse(multimap.containsValue(TEST_VALUE));\n",
        "540": "    /*\n",
        "541": "     * Either the Multimap should reject the nefarious internalEntry.setValue() call that\n",
        "542": "     * queryEntry.equals() makes, or it should arrange for internalEntry.equals(queryEntry) to be\n",
        "543": "     * used instead of the reverse so that queryEntry.equals(internalEntry) is never invoked.\n",
        "544": "     *\n",
        "545": "     * Probably the other tests should be similarly tolerant of either outcome. But for now, this is\n",
        "546": "     * the only one failing in any of our environments.\n",
        "547": "     */\n",
        "548": "    try {\n",
        "549": "      assertFalse(entries.removeAll(Collections.singleton(nefariousEntry)));\n",
        "550": "    } catch (TestValueException tolerated) {\n",
        "551": "    }\n",
        "552": "    assertFalse(multimap.containsValue(TEST_VALUE));\n",
        "553": "  }\n",
        "554": "\n",
        "555": "  public void testMultimapAsMapEntriesContainsNefariousEntry() {\n",
        "556": "    Multimap<String, Integer> multimap = LinkedListMultimap.create();\n",
        "557": "    Multimap<String, Integer> constrained\n",
        "558": "        = MapConstraints.constrainedMultimap(multimap, TEST_CONSTRAINT);\n",
        "559": "    multimap.put(\"foo\", 1);\n",
        "560": "    Map.Entry<String, ? extends Collection<Integer>> nefariousEntry\n",
        "561": "        = nefariousMapEntry(TEST_KEY, Collections.singleton(TEST_VALUE));\n",
        "562": "    Set<Map.Entry<String, Collection<Integer>>> entries\n",
        "563": "        = constrained.asMap().entrySet();\n",
        "564": "    assertFalse(entries.contains(nefariousEntry));\n",
        "565": "    assertFalse(multimap.containsValue(TEST_VALUE));\n",
        "566": "    assertFalse(entries.containsAll(Collections.singleton(nefariousEntry)));\n",
        "567": "    assertFalse(multimap.containsValue(TEST_VALUE));\n",
        "568": "  }\n",
        "569": "\n",
        "570": "  public void testMultimapAsMapEntriesRemoveNefariousEntry() {\n",
        "571": "    Multimap<String, Integer> multimap = LinkedListMultimap.create();\n",
        "572": "    Multimap<String, Integer> constrained\n",
        "573": "        = MapConstraints.constrainedMultimap(multimap, TEST_CONSTRAINT);\n",
        "574": "    multimap.put(\"foo\", 1);\n",
        "575": "    Map.Entry<String, ? extends Collection<Integer>> nefariousEntry\n",
        "576": "        = nefariousMapEntry(TEST_KEY, Collections.singleton(TEST_VALUE));\n",
        "577": "    Set<Map.Entry<String, Collection<Integer>>> entries\n",
        "578": "        = constrained.asMap().entrySet();\n",
        "579": "    assertFalse(entries.remove(nefariousEntry));\n",
        "580": "    assertFalse(multimap.containsValue(TEST_VALUE));\n",
        "581": "    assertFalse(entries.removeAll(Collections.singleton(nefariousEntry)));\n",
        "582": "    assertFalse(multimap.containsValue(TEST_VALUE));\n",
        "583": "  }\n",
        "584": "\n",
        "585": "  public void testNefariousMapPutAll() {\n",
        "586": "    Map<String, Integer> map = Maps.newLinkedHashMap();\n",
        "587": "    Map<String, Integer> constrained = MapConstraints.constrainedMap(\n",
        "588": "        map, TEST_CONSTRAINT);\n",
        "589": "    Map<String, Integer> onceIterable = onceIterableMap(\"foo\", 1);\n",
        "590": "    constrained.putAll(onceIterable);\n",
        "591": "    assertEquals((Integer) 1, constrained.get(\"foo\"));\n",
        "592": "  }\n",
        "593": "\n",
        "594": "  public void testNefariousMultimapPutAllIterable() {\n",
        "595": "    Multimap<String, Integer> multimap = LinkedListMultimap.create();\n",
        "596": "    Multimap<String, Integer> constrained = MapConstraints.constrainedMultimap(\n",
        "597": "        multimap, TEST_CONSTRAINT);\n",
        "598": "    Collection<Integer> onceIterable\n",
        "599": "        = ConstraintsTest.onceIterableCollection(1);\n",
        "600": "    constrained.putAll(\"foo\", onceIterable);\n",
        "601": "    assertEquals(ImmutableList.of(1), constrained.get(\"foo\"));\n",
        "602": "  }\n",
        "603": "\n",
        "604": "  public void testNefariousMultimapPutAllMultimap() {\n",
        "605": "    Multimap<String, Integer> multimap = LinkedListMultimap.create();\n",
        "606": "    Multimap<String, Integer> constrained = MapConstraints.constrainedMultimap(\n",
        "607": "        multimap, TEST_CONSTRAINT);\n",
        "608": "    Multimap<String, Integer> onceIterable\n",
        "609": "        = Multimaps.forMap(onceIterableMap(\"foo\", 1));\n",
        "610": "    constrained.putAll(onceIterable);\n",
        "611": "    assertEquals(ImmutableList.of(1), constrained.get(\"foo\"));\n",
        "612": "  }\n",
        "613": "\n",
        "614": "  public void testNefariousMultimapGetAddAll() {\n",
        "615": "    Multimap<String, Integer> multimap = LinkedListMultimap.create();\n",
        "616": "    Multimap<String, Integer> constrained = MapConstraints.constrainedMultimap(\n",
        "617": "        multimap, TEST_CONSTRAINT);\n",
        "618": "    Collection<Integer> onceIterable\n",
        "619": "        = ConstraintsTest.onceIterableCollection(1);\n",
        "620": "    constrained.get(\"foo\").addAll(onceIterable);\n",
        "621": "    assertEquals(ImmutableList.of(1), constrained.get(\"foo\"));\n",
        "622": "  }\n",
        "623": "\n",
        "624": "  /**\n",
        "625": "   * Returns a \"nefarious\" map, which permits only one call to its views'\n",
        "626": "   * iterator() methods. This verifies that the constrained map uses a\n",
        "627": "   * defensive copy instead of potentially checking the elements in one snapshot\n",
        "628": "   * and adding the elements from another.\n",
        "629": "   *\n",
        "630": "   * @param key the key to be contained in the map\n",
        "631": "   * @param value the value to be contained in the map\n",
        "632": "   */\n",
        "633": "  static <K, V> Map<K, V> onceIterableMap(K key, V value) {\n",
        "634": "    final Map.Entry<K, V> entry = Maps.immutableEntry(key, value);\n",
        "635": "    return new AbstractMap<K, V>() {\n",
        "636": "      boolean iteratorCalled;\n",
        "637": "      @Override public int size() {\n",
        "638": "        /*\n",
        "639": "         * We could make the map empty, but that seems more likely to trigger\n",
        "640": "         * special cases (so maybe we should test both empty and nonempty...).\n",
        "641": "         */\n",
        "642": "        return 1;\n",
        "643": "      }\n",
        "644": "      @Override public Set<Entry<K, V>> entrySet() {\n",
        "645": "        return new ForwardingSet<Entry<K, V>>() {\n",
        "646": "          @Override protected Set<Entry<K, V>> delegate() {\n",
        "647": "            return Collections.singleton(entry);\n",
        "648": "          }\n",
        "649": "          @Override public Iterator<Entry<K, V>> iterator() {\n",
        "650": "            assertFalse(\"Expected only one call to iterator()\", iteratorCalled);\n",
        "651": "            iteratorCalled = true;\n",
        "652": "            return super.iterator();\n",
        "653": "          }\n",
        "654": "        };\n",
        "655": "      }\n",
        "656": "      @Override public Set<K> keySet() {\n",
        "657": "        throw new UnsupportedOperationException();\n",
        "658": "      }\n",
        "659": "      @Override public Collection<V> values() {\n",
        "660": "        throw new UnsupportedOperationException();\n",
        "661": "      }\n",
        "662": "    };\n",
        "663": "  }\n",
        "664": "}\n",
        "665": "\n"
    }
}