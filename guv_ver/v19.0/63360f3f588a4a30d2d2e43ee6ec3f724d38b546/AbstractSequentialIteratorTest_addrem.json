{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2010 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "\n",
        "23": "import junit.framework.AssertionFailedError;\n",
        "24": "import junit.framework.TestCase;\n",
        "25": "\n",
        "26": "import java.util.Iterator;\n",
        "27": "import java.util.NoSuchElementException;\n",
        "28": "\n",
        "29": "/** Tests for {@link AbstractSequentialIterator}. */\n",
        "30": "@GwtCompatible(emulated = true)\n",
        "31": "public class AbstractSequentialIteratorTest extends TestCase {\n",
        "32": "\n",
        "33": "  public void testDoubler() {\n",
        "34": "    Iterable<Integer> doubled = new Iterable<Integer>() {\n",
        "35": "      @Override\n",
        "36": "      public Iterator<Integer> iterator() {\n",
        "37": "        return newDoubler(2, 32);\n",
        "38": "      }\n",
        "39": "    };\n",
        "40": "    assertThat(doubled).containsExactly(2, 4, 8, 16, 32).inOrder();\n",
        "41": "  }\n",
        "42": "\n",
        "43": "  public void testSampleCode() {\n",
        "44": "    Iterable<Integer> actual = new Iterable<Integer>() {\n",
        "45": "      @Override\n",
        "46": "      public Iterator<Integer> iterator() {\n",
        "47": "        Iterator<Integer> powersOfTwo = new AbstractSequentialIterator<Integer>(1) {\n",
        "48": "          protected Integer computeNext(Integer previous) {\n",
        "49": "            return (previous == 1 << 30) ? null : previous * 2;\n",
        "50": "          }\n",
        "51": "        };\n",
        "52": "        return powersOfTwo;\n",
        "53": "      }\n",
        "54": "    };\n",
        "55": "    assertThat(actual)\n",
        "56": "        .containsExactly(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384,\n",
        "57": "            32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216,\n",
        "58": "            33554432, 67108864, 134217728, 268435456, 536870912, 1073741824)\n",
        "59": "        .inOrder();\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  public void testEmpty() {\n",
        "63": "    Iterator<Object> empty = newEmpty();\n",
        "64": "    assertFalse(empty.hasNext());\n",
        "65": "    try {\n",
        "66": "      empty.next();\n",
        "67": "      fail();\n",
        "68": "    } catch (NoSuchElementException expected) {\n",
        "69": "    }\n",
        "70": "    try {\n",
        "71": "      empty.remove();\n",
        "72": "      fail();\n",
        "73": "    } catch (UnsupportedOperationException expected) {\n",
        "74": "    }\n",
        "75": "  }\n",
        "76": "\n",
        "77": "  public void testBroken() {\n",
        "78": "    Iterator<Object> broken = newBroken();\n",
        "79": "    assertTrue(broken.hasNext());\n",
        "80": "    // We can't retrieve even the known first element:\n",
        "81": "    try {\n",
        "82": "      broken.next();\n",
        "83": "      fail();\n",
        "84": "    } catch (MyException expected) {\n",
        "85": "    }\n",
        "86": "    try {\n",
        "87": "      broken.next();\n",
        "88": "      fail();\n",
        "89": "    } catch (MyException expected) {\n",
        "90": "    }\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  private static Iterator<Integer> newDoubler(int first, final int last) {\n",
        "94": "    return new AbstractSequentialIterator<Integer>(first) {\n",
        "95": "      @Override\n",
        "96": "      protected Integer computeNext(Integer previous) {\n",
        "97": "        return (previous == last) ? null : previous * 2;\n",
        "98": "      }\n",
        "99": "    };\n",
        "100": "  }\n",
        "101": "\n",
        "102": "  private static <T> Iterator<T> newEmpty() {\n",
        "103": "    return new AbstractSequentialIterator<T>(null) {\n",
        "104": "      @Override\n",
        "105": "      protected T computeNext(T previous) {\n",
        "106": "        throw new AssertionFailedError();\n",
        "107": "      }\n",
        "108": "    };\n",
        "109": "  }\n",
        "110": "\n",
        "111": "  private static Iterator<Object> newBroken() {\n",
        "112": "    return new AbstractSequentialIterator<Object>(\"UNUSED\") {\n",
        "113": "      @Override\n",
        "114": "      protected Object computeNext(Object previous) {\n",
        "115": "        throw new MyException();\n",
        "116": "      }\n",
        "117": "    };\n",
        "118": "  }\n",
        "119": "\n",
        "120": "  private static class MyException extends RuntimeException {}\n",
        "121": "}\n",
        "122": "\n"
    }
}