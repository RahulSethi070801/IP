{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2012 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static java.util.Arrays.asList;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.testing.SerializableTester;\n",
        "23": "\n",
        "24": "import junit.framework.TestCase;\n",
        "25": "\n",
        "26": "import java.util.NoSuchElementException;\n",
        "27": "\n",
        "28": "/**\n",
        "29": " * Tests for {@link EvictingQueue}.\n",
        "30": " *\n",
        "31": " * @author Kurt Alfred Kluever\n",
        "32": " */\n",
        "33": "@GwtCompatible(emulated = true)\n",
        "34": "public class EvictingQueueTest extends TestCase {\n",
        "35": "\n",
        "36": "  public void testCreateWithNegativeSize() throws Exception {\n",
        "37": "    try {\n",
        "38": "      EvictingQueue.create(-1);\n",
        "39": "      fail();\n",
        "40": "    } catch (IllegalArgumentException expected) {\n",
        "41": "    }\n",
        "42": "  }\n",
        "43": "\n",
        "44": "  public void testCreateWithZeroSize() throws Exception {\n",
        "45": "    EvictingQueue<String> queue = EvictingQueue.create(0);\n",
        "46": "    assertEquals(0, queue.size());\n",
        "47": "\n",
        "48": "    assertTrue(queue.add(\"hi\"));\n",
        "49": "    assertEquals(0, queue.size());\n",
        "50": "\n",
        "51": "    assertTrue(queue.offer(\"hi\"));\n",
        "52": "    assertEquals(0, queue.size());\n",
        "53": "\n",
        "54": "    assertFalse(queue.remove(\"hi\"));\n",
        "55": "    assertEquals(0, queue.size());\n",
        "56": "\n",
        "57": "    try {\n",
        "58": "      queue.element();\n",
        "59": "      fail();\n",
        "60": "    } catch (NoSuchElementException expected) {}\n",
        "61": "\n",
        "62": "    assertNull(queue.peek());\n",
        "63": "    assertNull(queue.poll());\n",
        "64": "    try {\n",
        "65": "      queue.remove();\n",
        "66": "      fail();\n",
        "67": "    } catch (NoSuchElementException expected) {}\n",
        "68": "  }\n",
        "69": "\n",
        "70": "  public void testRemainingCapacity_maxSize0() {\n",
        "71": "    EvictingQueue<String> queue = EvictingQueue.create(0);\n",
        "72": "    assertEquals(0, queue.remainingCapacity());\n",
        "73": "  }\n",
        "74": "\n",
        "75": "  public void testRemainingCapacity_maxSize1() {\n",
        "76": "    EvictingQueue<String> queue = EvictingQueue.create(1);\n",
        "77": "    assertEquals(1, queue.remainingCapacity());\n",
        "78": "    queue.add(\"hi\");\n",
        "79": "    assertEquals(0, queue.remainingCapacity());\n",
        "80": "  }\n",
        "81": "\n",
        "82": "  public void testRemainingCapacity_maxSize3() {\n",
        "83": "    EvictingQueue<String> queue = EvictingQueue.create(3);\n",
        "84": "    assertEquals(3, queue.remainingCapacity());\n",
        "85": "    queue.add(\"hi\");\n",
        "86": "    assertEquals(2, queue.remainingCapacity());\n",
        "87": "    queue.add(\"hi\");\n",
        "88": "    assertEquals(1, queue.remainingCapacity());\n",
        "89": "    queue.add(\"hi\");\n",
        "90": "    assertEquals(0, queue.remainingCapacity());\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  public void testEvictingAfterOne() throws Exception {\n",
        "94": "    EvictingQueue<String> queue = EvictingQueue.create(1);\n",
        "95": "    assertEquals(0, queue.size());\n",
        "96": "    assertEquals(1, queue.remainingCapacity());\n",
        "97": "\n",
        "98": "    assertTrue(queue.add(\"hi\"));\n",
        "99": "    assertEquals(\"hi\", queue.element());\n",
        "100": "    assertEquals(\"hi\", queue.peek());\n",
        "101": "    assertEquals(1, queue.size());\n",
        "102": "    assertEquals(0, queue.remainingCapacity());\n",
        "103": "\n",
        "104": "    assertTrue(queue.add(\"there\"));\n",
        "105": "    assertEquals(\"there\", queue.element());\n",
        "106": "    assertEquals(\"there\", queue.peek());\n",
        "107": "    assertEquals(1, queue.size());\n",
        "108": "    assertEquals(0, queue.remainingCapacity());\n",
        "109": "\n",
        "110": "    assertEquals(\"there\", queue.remove());\n",
        "111": "    assertEquals(0, queue.size());\n",
        "112": "    assertEquals(1, queue.remainingCapacity());\n",
        "113": "  }\n",
        "114": "\n",
        "115": "  public void testEvictingAfterThree() throws Exception {\n",
        "116": "    EvictingQueue<String> queue = EvictingQueue.create(3);\n",
        "117": "    assertEquals(0, queue.size());\n",
        "118": "    assertEquals(3, queue.remainingCapacity());\n",
        "119": "\n",
        "120": "    assertTrue(queue.add(\"one\"));\n",
        "121": "    assertTrue(queue.add(\"two\"));\n",
        "122": "    assertTrue(queue.add(\"three\"));\n",
        "123": "    assertEquals(\"one\", queue.element());\n",
        "124": "    assertEquals(\"one\", queue.peek());\n",
        "125": "    assertEquals(3, queue.size());\n",
        "126": "    assertEquals(0, queue.remainingCapacity());\n",
        "127": "\n",
        "128": "    assertTrue(queue.add(\"four\"));\n",
        "129": "    assertEquals(\"two\", queue.element());\n",
        "130": "    assertEquals(\"two\", queue.peek());\n",
        "131": "    assertEquals(3, queue.size());\n",
        "132": "    assertEquals(0, queue.remainingCapacity());\n",
        "133": "\n",
        "134": "    assertEquals(\"two\", queue.remove());\n",
        "135": "    assertEquals(2, queue.size());\n",
        "136": "    assertEquals(1, queue.remainingCapacity());\n",
        "137": "  }\n",
        "138": "\n",
        "139": "  public void testAddAll() throws Exception {\n",
        "140": "    EvictingQueue<String> queue = EvictingQueue.create(3);\n",
        "141": "    assertEquals(0, queue.size());\n",
        "142": "    assertEquals(3, queue.remainingCapacity());\n",
        "143": "\n",
        "144": "    assertTrue(queue.addAll(asList(\"one\", \"two\", \"three\")));\n",
        "145": "    assertEquals(\"one\", queue.element());\n",
        "146": "    assertEquals(\"one\", queue.peek());\n",
        "147": "    assertEquals(3, queue.size());\n",
        "148": "    assertEquals(0, queue.remainingCapacity());\n",
        "149": "\n",
        "150": "    assertTrue(queue.addAll(asList(\"four\")));\n",
        "151": "    assertEquals(\"two\", queue.element());\n",
        "152": "    assertEquals(\"two\", queue.peek());\n",
        "153": "    assertEquals(3, queue.size());\n",
        "154": "    assertEquals(0, queue.remainingCapacity());\n",
        "155": "\n",
        "156": "    assertEquals(\"two\", queue.remove());\n",
        "157": "    assertEquals(2, queue.size());\n",
        "158": "    assertEquals(1, queue.remainingCapacity());\n",
        "159": "  }\n",
        "160": "\n",
        "161": "  public void testSerialization() {\n",
        "162": "    EvictingQueue<String> original = EvictingQueue.create(5);\n",
        "163": "    original.add(\"one\");\n",
        "164": "    original.add(\"two\");\n",
        "165": "    original.add(\"three\");\n",
        "166": "\n",
        "167": "    EvictingQueue<String> copy = SerializableTester.reserialize(original);\n",
        "168": "    assertEquals(copy.maxSize, original.maxSize);\n",
        "169": "    assertEquals(\"one\", copy.remove());\n",
        "170": "    assertEquals(\"two\", copy.remove());\n",
        "171": "    assertEquals(\"three\", copy.remove());\n",
        "172": "    assertTrue(copy.isEmpty());\n",
        "173": "  }\n",
        "174": "}\n",
        "175": "\n"
    }
}