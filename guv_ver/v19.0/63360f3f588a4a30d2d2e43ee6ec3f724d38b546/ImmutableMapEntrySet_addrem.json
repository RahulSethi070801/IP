{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.j2objc.annotations.Weak;\n",
        "21": "\n",
        "22": "import java.util.Map.Entry;\n",
        "23": "\n",
        "24": "import javax.annotation.Nullable;\n",
        "25": "\n",
        "26": "/**\n",
        "27": " * {@code entrySet()} implementation for {@link ImmutableMap}.\n",
        "28": " *\n",
        "29": " * @author Jesse Wilson\n",
        "30": " * @author Kevin Bourrillion\n",
        "31": " */\n",
        "32": "@GwtCompatible(emulated = true)\n",
        "33": "abstract class ImmutableMapEntrySet<K, V> extends ImmutableSet<Entry<K, V>> {\n",
        "34": "  static final class RegularEntrySet<K, V> extends ImmutableMapEntrySet<K, V> {\n",
        "35": "    @Weak private final transient ImmutableMap<K, V> map;\n",
        "36": "    private final transient Entry<K, V>[] entries;\n",
        "37": "\n",
        "38": "    RegularEntrySet(ImmutableMap<K, V> map, Entry<K, V>[] entries) {\n",
        "39": "      this.map = map;\n",
        "40": "      this.entries = entries;\n",
        "41": "    }\n",
        "42": "\n",
        "43": "    @Override\n",
        "44": "    ImmutableMap<K, V> map() {\n",
        "45": "      return map;\n",
        "46": "    }\n",
        "47": "\n",
        "48": "    @Override\n",
        "49": "    public UnmodifiableIterator<Entry<K, V>> iterator() {\n",
        "50": "      return asList().iterator();\n",
        "51": "    }\n",
        "52": "\n",
        "53": "    @Override\n",
        "54": "    ImmutableList<Entry<K, V>> createAsList() {\n",
        "55": "      return new RegularImmutableAsList<Entry<K, V>>(this, entries);\n",
        "56": "    }\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  ImmutableMapEntrySet() {}\n",
        "60": "\n",
        "61": "  abstract ImmutableMap<K, V> map();\n",
        "62": "\n",
        "63": "  @Override\n",
        "64": "  public int size() {\n",
        "65": "    return map().size();\n",
        "66": "  }\n",
        "67": "\n",
        "68": "  @Override\n",
        "69": "  public boolean contains(@Nullable Object object) {\n",
        "70": "    if (object instanceof Entry) {\n",
        "71": "      Entry<?, ?> entry = (Entry<?, ?>) object;\n",
        "72": "      V value = map().get(entry.getKey());\n",
        "73": "      return value != null && value.equals(entry.getValue());\n",
        "74": "    }\n",
        "75": "    return false;\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  @Override\n",
        "79": "  boolean isPartialView() {\n",
        "80": "    return map().isPartialView();\n",
        "81": "  }\n",
        "82": "\n",
        "83": "  @Override\n",
        "84": "  public int hashCode() {\n",
        "85": "    return map().hashCode();\n",
        "86": "  }\n",
        "87": "}\n",
        "88": "\n"
    }
}