{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2012 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.google;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionFeature.SERIALIZABLE;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.collect.BiMap;\n",
        "23": "import com.google.common.collect.testing.features.CollectionFeature;\n",
        "24": "import com.google.common.testing.SerializableTester;\n",
        "25": "\n",
        "26": "import java.io.Serializable;\n",
        "27": "\n",
        "28": "/**\n",
        "29": " * Tests for the {@code inverse} view of a BiMap.\n",
        "30": " * \n",
        "31": " * <p>This assumes that {@code bimap.inverse().inverse() == bimap}, which is not technically\n",
        "32": " * required but is fulfilled by all current implementations.\n",
        "33": " * \n",
        "34": " * @author Louis Wasserman\n",
        "35": " */\n",
        "36": "@GwtCompatible(emulated = true)\n",
        "37": "public class BiMapInverseTester<K, V> extends AbstractBiMapTester<K, V> {\n",
        "38": "\n",
        "39": "  public void testInverseSame() {\n",
        "40": "    assertSame(getMap(), getMap().inverse().inverse());\n",
        "41": "  }\n",
        "42": "\n",
        "43": "  @CollectionFeature.Require(SERIALIZABLE)\n",
        "44": "  public void testInverseSerialization() {\n",
        "45": "    BiMapPair<K, V> pair = new BiMapPair<K, V>(getMap());\n",
        "46": "    BiMapPair<K, V> copy = SerializableTester.reserialize(pair);\n",
        "47": "    assertEquals(pair.forward, copy.forward);\n",
        "48": "    assertEquals(pair.backward, copy.backward);\n",
        "49": "    assertSame(copy.backward, copy.forward.inverse());\n",
        "50": "    assertSame(copy.forward, copy.backward.inverse());\n",
        "51": "  }\n",
        "52": "\n",
        "53": "  private static class BiMapPair<K, V> implements Serializable {\n",
        "54": "    final BiMap<K, V> forward;\n",
        "55": "    final BiMap<V, K> backward;\n",
        "56": "\n",
        "57": "    BiMapPair(BiMap<K, V> original) {\n",
        "58": "      this.forward = original;\n",
        "59": "      this.backward = original.inverse();\n",
        "60": "    }\n",
        "61": "\n",
        "62": "    private static final long serialVersionUID = 0;\n",
        "63": "  }\n",
        "64": "\n",
        "65": "}\n",
        "66": "\n"
    }
}