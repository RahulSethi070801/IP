{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.util.concurrent;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "\n",
        "23": "import java.util.concurrent.Executor;\n",
        "24": "import java.util.concurrent.RejectedExecutionException;\n",
        "25": "\n",
        "26": "/**\n",
        "27": " * Factory and utility methods for {@link java.util.concurrent.Executor}, {@link\n",
        "28": " * ExecutorService}, and {@link ThreadFactory}.\n",
        "29": " *\n",
        "30": " * @author Eric Fellheimer\n",
        "31": " * @author Kyle Littlefield\n",
        "32": " * @author Justin Mahoney\n",
        "33": " * @since 3.0\n",
        "34": " */\n",
        "35": "@GwtCompatible(emulated = true)\n",
        "36": "public final class MoreExecutors {\n",
        "37": "  private MoreExecutors() {}\n",
        "38": "\n",
        "39": "  // See sameThreadExecutor javadoc for behavioral notes.\n",
        "40": "\n",
        "41": "  /**\n",
        "42": "   * Returns an {@link Executor} that runs each task in the thread that invokes\n",
        "43": "   * {@link Executor#execute execute}, as in {@link CallerRunsPolicy}.\n",
        "44": "   *\n",
        "45": "   * <p>This instance is equivalent to: <pre>   {@code\n",
        "46": "   *   final class DirectExecutor implements Executor {\n",
        "47": "   *     public void execute(Runnable r) {\n",
        "48": "   *       r.run();\n",
        "49": "   *     }\n",
        "50": "   *   }}</pre>\n",
        "51": "   *\n",
        "52": "   * <p>This should be preferred to {@link #newDirectExecutorService()} because the implementing the\n",
        "53": "   * {@link ExecutorService} subinterface necessitates significant performance overhead.\n",
        "54": "   *\n",
        "55": "   * @since 18.0\n",
        "56": "   */\n",
        "57": "  public static Executor directExecutor() {\n",
        "58": "    return DirectExecutor.INSTANCE;\n",
        "59": "  }\n",
        "60": "\n",
        "61": "  /** See {@link #directExecutor} for behavioral notes. */\n",
        "62": "  private enum DirectExecutor implements Executor {\n",
        "63": "    INSTANCE;\n",
        "64": "    @Override public void execute(Runnable command) {\n",
        "65": "      command.run();\n",
        "66": "    }\n",
        "67": "\n",
        "68": "    @Override public String toString() {\n",
        "69": "      return \"MoreExecutors.directExecutor()\";\n",
        "70": "    }\n",
        "71": "  }\n",
        "72": "\n",
        "73": "  /*\n",
        "74": "   * This following method is a modified version of one found in\n",
        "75": "   * http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/test/tck/AbstractExecutorServiceTest.java?revision=1.30\n",
        "76": "   * which contained the following notice:\n",
        "77": "   *\n",
        "78": "   * Written by Doug Lea with assistance from members of JCP JSR-166\n",
        "79": "   * Expert Group and released to the public domain, as explained at\n",
        "80": "   * http://creativecommons.org/publicdomain/zero/1.0/\n",
        "81": "   * Other contributors include Andrew Wright, Jeffrey Hayes,\n",
        "82": "   * Pat Fisher, Mike Judd.\n",
        "83": "   */\n",
        "84": "\n",
        "85": "  // TODO(lukes): provide overloads for ListeningExecutorService? ListeningScheduledExecutorService?\n",
        "86": "  // TODO(lukes): provide overloads that take constant strings? Function<Runnable, String>s to\n",
        "87": "  // calculate names?\n",
        "88": "\n",
        "89": "  /**\n",
        "90": "   * Returns an Executor that will propagate {@link RejectedExecutionException} from the delegate\n",
        "91": "   * executor to the given {@code future}.\n",
        "92": "   *\n",
        "93": "   * <p>Note, the returned executor can only be used once.\n",
        "94": "   */\n",
        "95": "  static Executor rejectionPropagatingExecutor(\n",
        "96": "      final Executor delegate, final AbstractFuture<?> future) {\n",
        "97": "    checkNotNull(delegate);\n",
        "98": "    checkNotNull(future);\n",
        "99": "    if (delegate == directExecutor()) {\n",
        "100": "      // directExecutor() cannot throw RejectedExecutionException\n",
        "101": "      return delegate;\n",
        "102": "    }\n",
        "103": "    return new Executor() {\n",
        "104": "      volatile boolean thrownFromDelegate = true;\n",
        "105": "\n",
        "106": "      @Override\n",
        "107": "      public void execute(final Runnable command) {\n",
        "108": "        try {\n",
        "109": "          delegate.execute(\n",
        "110": "              new Runnable() {\n",
        "111": "                @Override\n",
        "112": "                public void run() {\n",
        "113": "                  thrownFromDelegate = false;\n",
        "114": "                  command.run();\n",
        "115": "                }\n",
        "116": "              });\n",
        "117": "        } catch (RejectedExecutionException e) {\n",
        "118": "          if (thrownFromDelegate) {\n",
        "119": "            // wrap exception?\n",
        "120": "            future.setException(e);\n",
        "121": "          }\n",
        "122": "          // otherwise it must have been thrown from a transitive call and the delegate runnable\n",
        "123": "          // should have handled it.\n",
        "124": "        }\n",
        "125": "      }\n",
        "126": "    };\n",
        "127": "  }\n",
        "128": "}\n"
    }
}