{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.primitives;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.collect.testing.SampleElements;\n",
        "23": "import com.google.common.collect.testing.TestListGenerator;\n",
        "24": "\n",
        "25": "import junit.framework.TestCase;\n",
        "26": "\n",
        "27": "import java.util.List;\n",
        "28": "\n",
        "29": "/**\n",
        "30": " * Test suite covering {@link Bytes#asList(byte[])}.\n",
        "31": " *\n",
        "32": " * @author Kevin Bourrillion\n",
        "33": " */\n",
        "34": "@GwtCompatible(emulated = true)\n",
        "35": "public class ByteArrayAsListTest extends TestCase {\n",
        "36": "\n",
        "37": "  private static List<Byte> asList(Byte[] values) {\n",
        "38": "    byte[] temp = new byte[values.length];\n",
        "39": "    for (int i = 0; i < values.length; i++) {\n",
        "40": "      temp[i] = checkNotNull(values[i]);  // checkNotNull for GWT (do not optimize).\n",
        "41": "    }\n",
        "42": "    return Bytes.asList(temp);\n",
        "43": "  }\n",
        "44": "\n",
        "45": "  // Test generators.  To let the GWT test suite generator access them, they need to be\n",
        "46": "  // public named classes with a public default constructor.\n",
        "47": "\n",
        "48": "  public static final class BytesAsListGenerator extends TestByteListGenerator {\n",
        "49": "    @Override protected List<Byte> create(Byte[] elements) {\n",
        "50": "      return asList(elements);\n",
        "51": "    }\n",
        "52": "  }\n",
        "53": "\n",
        "54": "  public static final class BytesAsListHeadSubListGenerator extends TestByteListGenerator {\n",
        "55": "    @Override protected List<Byte> create(Byte[] elements) {\n",
        "56": "      Byte[] suffix = {Byte.MIN_VALUE, Byte.MAX_VALUE};\n",
        "57": "      Byte[] all = concat(elements, suffix);\n",
        "58": "      return asList(all).subList(0, elements.length);\n",
        "59": "    }\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  public static final class BytesAsListTailSubListGenerator extends TestByteListGenerator {\n",
        "63": "    @Override protected List<Byte> create(Byte[] elements) {\n",
        "64": "      Byte[] prefix = {(byte) 86, (byte) 99};\n",
        "65": "      Byte[] all = concat(prefix, elements);\n",
        "66": "      return asList(all).subList(2, elements.length + 2);\n",
        "67": "    }\n",
        "68": "  }\n",
        "69": "\n",
        "70": "  public static final class BytesAsListMiddleSubListGenerator extends TestByteListGenerator {\n",
        "71": "    @Override protected List<Byte> create(Byte[] elements) {\n",
        "72": "      Byte[] prefix = {Byte.MIN_VALUE, Byte.MAX_VALUE};\n",
        "73": "      Byte[] suffix = {(byte) 86, (byte) 99};\n",
        "74": "      Byte[] all = concat(concat(prefix, elements), suffix);\n",
        "75": "      return asList(all).subList(2, elements.length + 2);\n",
        "76": "    }\n",
        "77": "  }\n",
        "78": "\n",
        "79": "  private static Byte[] concat(Byte[] left, Byte[] right) {\n",
        "80": "    Byte[] result = new Byte[left.length + right.length];\n",
        "81": "    System.arraycopy(left, 0, result, 0, left.length);\n",
        "82": "    System.arraycopy(right, 0, result, left.length, right.length);\n",
        "83": "    return result;\n",
        "84": "  }\n",
        "85": "\n",
        "86": "  public static abstract class TestByteListGenerator\n",
        "87": "      implements TestListGenerator<Byte> {\n",
        "88": "    @Override\n",
        "89": "    public SampleElements<Byte> samples() {\n",
        "90": "      return new SampleBytes();\n",
        "91": "    }\n",
        "92": "\n",
        "93": "    @Override\n",
        "94": "    public List<Byte> create(Object... elements) {\n",
        "95": "      Byte[] array = new Byte[elements.length];\n",
        "96": "      int i = 0;\n",
        "97": "      for (Object e : elements) {\n",
        "98": "        array[i++] = (Byte) e;\n",
        "99": "      }\n",
        "100": "      return create(array);\n",
        "101": "    }\n",
        "102": "\n",
        "103": "    /**\n",
        "104": "     * Creates a new collection containing the given elements; implement this\n",
        "105": "     * method instead of {@link #create(Object...)}.\n",
        "106": "     */\n",
        "107": "    protected abstract List<Byte> create(Byte[] elements);\n",
        "108": "\n",
        "109": "    @Override\n",
        "110": "    public Byte[] createArray(int length) {\n",
        "111": "      return new Byte[length];\n",
        "112": "    }\n",
        "113": "\n",
        "114": "    /** Returns the original element list, unchanged. */\n",
        "115": "    @Override\n",
        "116": "    public List<Byte> order(List<Byte> insertionOrder) {\n",
        "117": "      return insertionOrder;\n",
        "118": "    }\n",
        "119": "  }\n",
        "120": "\n",
        "121": "  public static class SampleBytes extends SampleElements<Byte> {\n",
        "122": "    public SampleBytes() {\n",
        "123": "      super((byte) 0, (byte) 1, (byte) 2, (byte) 3, (byte) 4);\n",
        "124": "    }\n",
        "125": "  }\n",
        "126": "}\n",
        "127": "\n"
    }
}