{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2011 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.util.concurrent;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.collect.ImmutableMap;\n",
        "21": "import com.google.common.collect.Sets;\n",
        "22": "\n",
        "23": "import junit.framework.TestCase;\n",
        "24": "\n",
        "25": "import java.util.Map;\n",
        "26": "import java.util.Random;\n",
        "27": "import java.util.Set;\n",
        "28": "\n",
        "29": "/**\n",
        "30": " * Tests for {@link AtomicLongMap}.\n",
        "31": " *\n",
        "32": " * @author mike nonemacher\n",
        "33": " */\n",
        "34": "@GwtCompatible(emulated = true)\n",
        "35": "public class AtomicLongMapTest extends TestCase {\n",
        "36": "  private static final int ITERATIONS = 100;\n",
        "37": "  private static final int MAX_ADDEND = 100;\n",
        "38": "\n",
        "39": "  private Random random = new Random(301);\n",
        "40": "\n",
        "41": "  public void testCreate_map() {\n",
        "42": "    Map<String, Long> in = ImmutableMap.of(\"1\", 1L, \"2\", 2L, \"3\", 3L);\n",
        "43": "    AtomicLongMap<String> map = AtomicLongMap.create(in);\n",
        "44": "    assertFalse(map.isEmpty());\n",
        "45": "    assertSame(3, map.size());\n",
        "46": "    assertTrue(map.containsKey(\"1\"));\n",
        "47": "    assertTrue(map.containsKey(\"2\"));\n",
        "48": "    assertTrue(map.containsKey(\"3\"));\n",
        "49": "    assertEquals(1L, map.get(\"1\"));\n",
        "50": "    assertEquals(2L, map.get(\"2\"));\n",
        "51": "    assertEquals(3L, map.get(\"3\"));\n",
        "52": "  }\n",
        "53": "\n",
        "54": "  public void testIncrementAndGet() {\n",
        "55": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "56": "    String key = \"key\";\n",
        "57": "    for (int i = 0; i < ITERATIONS; i++) {\n",
        "58": "      long before = map.get(key);\n",
        "59": "      long result = map.incrementAndGet(key);\n",
        "60": "      long after = map.get(key);\n",
        "61": "      assertEquals(before + 1, after);\n",
        "62": "      assertEquals(after, result);\n",
        "63": "    }\n",
        "64": "    assertEquals(1, map.size());\n",
        "65": "    assertTrue(!map.isEmpty());\n",
        "66": "    assertTrue(map.containsKey(key));\n",
        "67": "    assertEquals(ITERATIONS, (int) map.get(key));\n",
        "68": "  }\n",
        "69": "\n",
        "70": "  public void testIncrementAndGet_zero() {\n",
        "71": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "72": "    String key = \"key\";\n",
        "73": "    assertEquals(0L, map.get(key));\n",
        "74": "    assertFalse(map.containsKey(key));\n",
        "75": "\n",
        "76": "    assertEquals(1L, map.incrementAndGet(key));\n",
        "77": "    assertEquals(1L, map.get(key));\n",
        "78": "\n",
        "79": "    assertEquals(0L, map.decrementAndGet(key));\n",
        "80": "    assertEquals(0L, map.get(key));\n",
        "81": "    assertTrue(map.containsKey(key));\n",
        "82": "\n",
        "83": "    assertEquals(1L, map.incrementAndGet(key));\n",
        "84": "    assertEquals(1L, map.get(key));\n",
        "85": "  }\n",
        "86": "\n",
        "87": "  public void testGetAndIncrement() {\n",
        "88": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "89": "    String key = \"key\";\n",
        "90": "    for (int i = 0; i < ITERATIONS; i++) {\n",
        "91": "      long before = map.get(key);\n",
        "92": "      long result = map.getAndIncrement(key);\n",
        "93": "      long after = map.get(key);\n",
        "94": "      assertEquals(before + 1, after);\n",
        "95": "      assertEquals(before, result);\n",
        "96": "    }\n",
        "97": "    assertEquals(1, map.size());\n",
        "98": "    assertTrue(!map.isEmpty());\n",
        "99": "    assertTrue(map.containsKey(key));\n",
        "100": "    assertEquals(ITERATIONS, (int) map.get(key));\n",
        "101": "  }\n",
        "102": "\n",
        "103": "  public void testGetAndIncrement_zero() {\n",
        "104": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "105": "    String key = \"key\";\n",
        "106": "    assertEquals(0L, map.get(key));\n",
        "107": "    assertFalse(map.containsKey(key));\n",
        "108": "\n",
        "109": "    assertEquals(0L, map.getAndIncrement(key));\n",
        "110": "    assertEquals(1L, map.get(key));\n",
        "111": "\n",
        "112": "    assertEquals(1L, map.getAndDecrement(key));\n",
        "113": "    assertEquals(0L, map.get(key));\n",
        "114": "    assertTrue(map.containsKey(key));\n",
        "115": "\n",
        "116": "    assertEquals(0L, map.getAndIncrement(key));\n",
        "117": "    assertEquals(1L, map.get(key));\n",
        "118": "  }\n",
        "119": "\n",
        "120": "  public void testDecrementAndGet() {\n",
        "121": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "122": "    String key = \"key\";\n",
        "123": "    for (int i = 0; i < ITERATIONS; i++) {\n",
        "124": "      long before = map.get(key);\n",
        "125": "      long result = map.decrementAndGet(key);\n",
        "126": "      long after = map.get(key);\n",
        "127": "      assertEquals(before - 1, after);\n",
        "128": "      assertEquals(after, result);\n",
        "129": "    }\n",
        "130": "    assertEquals(1, map.size());\n",
        "131": "    assertTrue(!map.isEmpty());\n",
        "132": "    assertTrue(map.containsKey(key));\n",
        "133": "    assertEquals(-1 * ITERATIONS, (int) map.get(key));\n",
        "134": "  }\n",
        "135": "\n",
        "136": "  public void testDecrementAndGet_zero() {\n",
        "137": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "138": "    String key = \"key\";\n",
        "139": "    assertEquals(0L, map.get(key));\n",
        "140": "    assertFalse(map.containsKey(key));\n",
        "141": "\n",
        "142": "    assertEquals(-1L, map.decrementAndGet(key));\n",
        "143": "    assertEquals(-1L, map.get(key));\n",
        "144": "\n",
        "145": "    assertEquals(0L, map.incrementAndGet(key));\n",
        "146": "    assertEquals(0L, map.get(key));\n",
        "147": "    assertTrue(map.containsKey(key));\n",
        "148": "\n",
        "149": "    assertEquals(-1L, map.decrementAndGet(key));\n",
        "150": "    assertEquals(-1L, map.get(key));\n",
        "151": "  }\n",
        "152": "\n",
        "153": "  public void testGetAndDecrement() {\n",
        "154": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "155": "    String key = \"key\";\n",
        "156": "    for (int i = 0; i < ITERATIONS; i++) {\n",
        "157": "      long before = map.get(key);\n",
        "158": "      long result = map.getAndDecrement(key);\n",
        "159": "      long after = map.get(key);\n",
        "160": "      assertEquals(before - 1, after);\n",
        "161": "      assertEquals(before, result);\n",
        "162": "    }\n",
        "163": "    assertEquals(1, map.size());\n",
        "164": "    assertTrue(!map.isEmpty());\n",
        "165": "    assertTrue(map.containsKey(key));\n",
        "166": "    assertEquals(-1 * ITERATIONS, (int) map.get(key));\n",
        "167": "  }\n",
        "168": "\n",
        "169": "  public void testGetAndDecrement_zero() {\n",
        "170": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "171": "    String key = \"key\";\n",
        "172": "    assertEquals(0L, map.get(key));\n",
        "173": "    assertFalse(map.containsKey(key));\n",
        "174": "\n",
        "175": "    assertEquals(0L, map.getAndDecrement(key));\n",
        "176": "    assertEquals(-1L, map.get(key));\n",
        "177": "\n",
        "178": "    assertEquals(-1L, map.getAndIncrement(key));\n",
        "179": "    assertEquals(0L, map.get(key));\n",
        "180": "    assertTrue(map.containsKey(key));\n",
        "181": "\n",
        "182": "    assertEquals(0L, map.getAndDecrement(key));\n",
        "183": "    assertEquals(-1L, map.get(key));\n",
        "184": "  }\n",
        "185": "\n",
        "186": "  public void testAddAndGet() {\n",
        "187": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "188": "    String key = \"key\";\n",
        "189": "    long addend = random.nextInt(MAX_ADDEND);\n",
        "190": "    for (int i = 0; i < ITERATIONS; i++) {\n",
        "191": "      long before = map.get(key);\n",
        "192": "      long result = map.addAndGet(key, addend);\n",
        "193": "      long after = map.get(key);\n",
        "194": "      assertEquals(before + addend, after);\n",
        "195": "      assertEquals(after, result);\n",
        "196": "      addend = after;\n",
        "197": "    }\n",
        "198": "    assertEquals(1, map.size());\n",
        "199": "    assertTrue(!map.isEmpty());\n",
        "200": "    assertTrue(map.containsKey(key));\n",
        "201": "  }\n",
        "202": "\n",
        "203": "  public void testAddAndGet_zero() {\n",
        "204": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "205": "    String key = \"key\";\n",
        "206": "    long value = random.nextInt(MAX_ADDEND);\n",
        "207": "    assertEquals(0L, map.get(key));\n",
        "208": "    assertFalse(map.containsKey(key));\n",
        "209": "\n",
        "210": "    assertEquals(value, map.addAndGet(key, value));\n",
        "211": "    assertEquals(value, map.get(key));\n",
        "212": "\n",
        "213": "    assertEquals(0L, map.addAndGet(key, -1 * value));\n",
        "214": "    assertEquals(0L, map.get(key));\n",
        "215": "    assertTrue(map.containsKey(key));\n",
        "216": "\n",
        "217": "    assertEquals(value, map.addAndGet(key, value));\n",
        "218": "    assertEquals(value, map.get(key));\n",
        "219": "  }\n",
        "220": "\n",
        "221": "  public void testGetAndAdd() {\n",
        "222": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "223": "    String key = \"key\";\n",
        "224": "    long addend = random.nextInt(MAX_ADDEND);\n",
        "225": "    for (int i = 0; i < ITERATIONS; i++) {\n",
        "226": "      long before = map.get(key);\n",
        "227": "      long result = map.getAndAdd(key, addend);\n",
        "228": "      long after = map.get(key);\n",
        "229": "      assertEquals(before + addend, after);\n",
        "230": "      assertEquals(before, result);\n",
        "231": "      addend = after;\n",
        "232": "    }\n",
        "233": "    assertEquals(1, map.size());\n",
        "234": "    assertTrue(!map.isEmpty());\n",
        "235": "    assertTrue(map.containsKey(key));\n",
        "236": "  }\n",
        "237": "\n",
        "238": "  public void testGetAndAdd_zero() {\n",
        "239": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "240": "    String key = \"key\";\n",
        "241": "    long value = random.nextInt(MAX_ADDEND);\n",
        "242": "    assertEquals(0L, map.get(key));\n",
        "243": "    assertFalse(map.containsKey(key));\n",
        "244": "\n",
        "245": "    assertEquals(0L, map.getAndAdd(key, value));\n",
        "246": "    assertEquals(value, map.get(key));\n",
        "247": "\n",
        "248": "    assertEquals(value, map.getAndAdd(key, -1 * value));\n",
        "249": "    assertEquals(0L, map.get(key));\n",
        "250": "    assertTrue(map.containsKey(key));\n",
        "251": "\n",
        "252": "    assertEquals(0L, map.getAndAdd(key, value));\n",
        "253": "    assertEquals(value, map.get(key));\n",
        "254": "  }\n",
        "255": "\n",
        "256": "  public void testPut() {\n",
        "257": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "258": "    String key = \"key\";\n",
        "259": "    long newValue = random.nextInt(MAX_ADDEND);\n",
        "260": "    for (int i = 0; i < ITERATIONS; i++) {\n",
        "261": "      long before = map.get(key);\n",
        "262": "      long result = map.put(key, newValue);\n",
        "263": "      long after = map.get(key);\n",
        "264": "      assertEquals(newValue, after);\n",
        "265": "      assertEquals(before, result);\n",
        "266": "      newValue += newValue;\n",
        "267": "    }\n",
        "268": "    assertEquals(1, map.size());\n",
        "269": "    assertTrue(!map.isEmpty());\n",
        "270": "    assertTrue(map.containsKey(key));\n",
        "271": "  }\n",
        "272": "\n",
        "273": "  public void testPut_zero() {\n",
        "274": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "275": "    String key = \"key\";\n",
        "276": "    long value = random.nextInt(MAX_ADDEND);\n",
        "277": "    assertEquals(0L, map.get(key));\n",
        "278": "    assertFalse(map.containsKey(key));\n",
        "279": "\n",
        "280": "    assertEquals(0L, map.put(key, value));\n",
        "281": "    assertEquals(value, map.get(key));\n",
        "282": "\n",
        "283": "    assertEquals(value, map.put(key, 0L));\n",
        "284": "    assertEquals(0L, map.get(key));\n",
        "285": "    assertTrue(map.containsKey(key));\n",
        "286": "\n",
        "287": "    assertEquals(0L, map.put(key, value));\n",
        "288": "    assertEquals(value, map.get(key));\n",
        "289": "  }\n",
        "290": "\n",
        "291": "  public void testPutAll() {\n",
        "292": "    Map<String, Long> in = ImmutableMap.of(\"1\", 1L, \"2\", 2L, \"3\", 3L);\n",
        "293": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "294": "    assertTrue(map.isEmpty());\n",
        "295": "    assertSame(0, map.size());\n",
        "296": "    assertFalse(map.containsKey(\"1\"));\n",
        "297": "    assertFalse(map.containsKey(\"2\"));\n",
        "298": "    assertFalse(map.containsKey(\"3\"));\n",
        "299": "    assertEquals(0L, map.get(\"1\"));\n",
        "300": "    assertEquals(0L, map.get(\"2\"));\n",
        "301": "    assertEquals(0L, map.get(\"3\"));\n",
        "302": "\n",
        "303": "    map.putAll(in);\n",
        "304": "    assertFalse(map.isEmpty());\n",
        "305": "    assertSame(3, map.size());\n",
        "306": "    assertTrue(map.containsKey(\"1\"));\n",
        "307": "    assertTrue(map.containsKey(\"2\"));\n",
        "308": "    assertTrue(map.containsKey(\"3\"));\n",
        "309": "    assertEquals(1L, map.get(\"1\"));\n",
        "310": "    assertEquals(2L, map.get(\"2\"));\n",
        "311": "    assertEquals(3L, map.get(\"3\"));\n",
        "312": "  }\n",
        "313": "\n",
        "314": "  public void testPutIfAbsent() {\n",
        "315": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "316": "    String key = \"key\";\n",
        "317": "    long newValue = random.nextInt(MAX_ADDEND);\n",
        "318": "    for (int i = 0; i < ITERATIONS; i++) {\n",
        "319": "      long before = map.get(key);\n",
        "320": "      long result = map.putIfAbsent(key, newValue);\n",
        "321": "      long after = map.get(key);\n",
        "322": "      assertEquals(before, result);\n",
        "323": "      assertEquals(before == 0 ? newValue : before, after);\n",
        "324": "\n",
        "325": "      map.remove(key);\n",
        "326": "      before = map.get(key);\n",
        "327": "      result = map.putIfAbsent(key, newValue);\n",
        "328": "      after = map.get(key);\n",
        "329": "      assertEquals(0, before);\n",
        "330": "      assertEquals(before, result);\n",
        "331": "      assertEquals(newValue, after);\n",
        "332": "\n",
        "333": "      map.put(key, 0L);\n",
        "334": "      before = map.get(key);\n",
        "335": "      result = map.putIfAbsent(key, newValue);\n",
        "336": "      after = map.get(key);\n",
        "337": "      assertEquals(0, before);\n",
        "338": "      assertEquals(before, result);\n",
        "339": "      assertEquals(newValue, after);\n",
        "340": "\n",
        "341": "      newValue += newValue;\n",
        "342": "    }\n",
        "343": "    assertEquals(1, map.size());\n",
        "344": "    assertTrue(!map.isEmpty());\n",
        "345": "    assertTrue(map.containsKey(key));\n",
        "346": "  }\n",
        "347": "\n",
        "348": "  public void testPutIfAbsent_zero() {\n",
        "349": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "350": "    String key = \"key\";\n",
        "351": "    long value = random.nextInt(MAX_ADDEND);\n",
        "352": "    assertEquals(0L, map.get(key));\n",
        "353": "    assertFalse(map.containsKey(key));\n",
        "354": "\n",
        "355": "    assertEquals(0L, map.putIfAbsent(key, value));\n",
        "356": "    assertEquals(value, map.get(key));\n",
        "357": "\n",
        "358": "    assertEquals(value, map.put(key, 0L));\n",
        "359": "    assertEquals(0L, map.get(key));\n",
        "360": "    assertTrue(map.containsKey(key));\n",
        "361": "\n",
        "362": "    assertEquals(0L, map.putIfAbsent(key, value));\n",
        "363": "    assertEquals(value, map.get(key));\n",
        "364": "  }\n",
        "365": "\n",
        "366": "  public void testReplace() {\n",
        "367": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "368": "    String key = \"key\";\n",
        "369": "    long newValue = random.nextInt(MAX_ADDEND);\n",
        "370": "    for (int i = 0; i < ITERATIONS; i++) {\n",
        "371": "      long before = map.get(key);\n",
        "372": "      assertFalse(map.replace(key, before + 1, newValue + 1));\n",
        "373": "      assertFalse(map.replace(key, before - 1, newValue - 1));\n",
        "374": "      assertTrue(map.replace(key, before, newValue));\n",
        "375": "      long after = map.get(key);\n",
        "376": "      assertEquals(newValue, after);\n",
        "377": "      newValue += newValue;\n",
        "378": "    }\n",
        "379": "    assertEquals(1, map.size());\n",
        "380": "    assertTrue(!map.isEmpty());\n",
        "381": "    assertTrue(map.containsKey(key));\n",
        "382": "  }\n",
        "383": "\n",
        "384": "  public void testReplace_zero() {\n",
        "385": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "386": "    String key = \"key\";\n",
        "387": "    long value = random.nextInt(MAX_ADDEND);\n",
        "388": "    assertEquals(0L, map.get(key));\n",
        "389": "    assertFalse(map.containsKey(key));\n",
        "390": "\n",
        "391": "    assertTrue(map.replace(key, 0L, value));\n",
        "392": "    assertEquals(value, map.get(key));\n",
        "393": "\n",
        "394": "    assertTrue(map.replace(key, value, 0L));\n",
        "395": "    assertEquals(0L, map.get(key));\n",
        "396": "    assertTrue(map.containsKey(key));\n",
        "397": "\n",
        "398": "    assertTrue(map.replace(key, 0L, value));\n",
        "399": "    assertEquals(value, map.get(key));\n",
        "400": "  }\n",
        "401": "\n",
        "402": "  public void testRemove() {\n",
        "403": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "404": "    String key = \"key\";\n",
        "405": "    assertEquals(0, map.size());\n",
        "406": "    assertTrue(map.isEmpty());\n",
        "407": "    assertEquals(0L, map.remove(key));\n",
        "408": "\n",
        "409": "    long newValue = random.nextInt(MAX_ADDEND);\n",
        "410": "    for (int i = 0; i < ITERATIONS; i++) {\n",
        "411": "      map.put(key, newValue);\n",
        "412": "      assertTrue(map.containsKey(key));\n",
        "413": "\n",
        "414": "      long before = map.get(key);\n",
        "415": "      long result = map.remove(key);\n",
        "416": "      long after = map.get(key);\n",
        "417": "      assertFalse(map.containsKey(key));\n",
        "418": "      assertEquals(before, result);\n",
        "419": "      assertEquals(0L, after);\n",
        "420": "      newValue += newValue;\n",
        "421": "    }\n",
        "422": "    assertEquals(0, map.size());\n",
        "423": "    assertTrue(map.isEmpty());\n",
        "424": "  }\n",
        "425": "\n",
        "426": "  public void testRemove_zero() {\n",
        "427": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "428": "    String key = \"key\";\n",
        "429": "    assertEquals(0L, map.get(key));\n",
        "430": "    assertFalse(map.containsKey(key));\n",
        "431": "\n",
        "432": "    assertEquals(0L, map.remove(key));\n",
        "433": "    assertEquals(0L, map.get(key));\n",
        "434": "    assertFalse(map.containsKey(key));\n",
        "435": "\n",
        "436": "    assertEquals(0L, map.put(key, 0L));\n",
        "437": "    assertEquals(0L, map.get(key));\n",
        "438": "    assertTrue(map.containsKey(key));\n",
        "439": "\n",
        "440": "    assertEquals(0L, map.remove(key));\n",
        "441": "    assertEquals(0L, map.get(key));\n",
        "442": "    assertFalse(map.containsKey(key));\n",
        "443": "  }\n",
        "444": "\n",
        "445": "  public void testRemoveValue() {\n",
        "446": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "447": "    String key = \"key\";\n",
        "448": "    assertEquals(0, map.size());\n",
        "449": "    assertTrue(map.isEmpty());\n",
        "450": "    assertFalse(map.remove(key, 0L));\n",
        "451": "\n",
        "452": "    long newValue = random.nextInt(MAX_ADDEND);\n",
        "453": "    for (int i = 0; i < ITERATIONS; i++) {\n",
        "454": "      map.put(key, newValue);\n",
        "455": "      assertTrue(map.containsKey(key));\n",
        "456": "\n",
        "457": "      long before = map.get(key);\n",
        "458": "      assertFalse(map.remove(key, newValue + 1));\n",
        "459": "      assertFalse(map.remove(key, newValue - 1));\n",
        "460": "      assertTrue(map.remove(key, newValue));\n",
        "461": "      long after = map.get(key);\n",
        "462": "      assertFalse(map.containsKey(key));\n",
        "463": "      assertEquals(0L, after);\n",
        "464": "      newValue += newValue;\n",
        "465": "    }\n",
        "466": "    assertEquals(0, map.size());\n",
        "467": "    assertTrue(map.isEmpty());\n",
        "468": "  }\n",
        "469": "\n",
        "470": "  public void testRemoveValue_zero() {\n",
        "471": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "472": "    String key = \"key\";\n",
        "473": "    assertEquals(0L, map.get(key));\n",
        "474": "    assertFalse(map.containsKey(key));\n",
        "475": "\n",
        "476": "    assertFalse(map.remove(key, 0L));\n",
        "477": "    assertEquals(0L, map.get(key));\n",
        "478": "    assertFalse(map.containsKey(key));\n",
        "479": "\n",
        "480": "    assertEquals(0L, map.put(key, 0L));\n",
        "481": "    assertEquals(0L, map.get(key));\n",
        "482": "    assertTrue(map.containsKey(key));\n",
        "483": "\n",
        "484": "    assertTrue(map.remove(key, 0L));\n",
        "485": "    assertEquals(0L, map.get(key));\n",
        "486": "    assertFalse(map.containsKey(key));\n",
        "487": "  }\n",
        "488": "\n",
        "489": "  public void testRemoveZeros() {\n",
        "490": "    AtomicLongMap<Object> map = AtomicLongMap.create();\n",
        "491": "    Set<Object> nonZeroKeys = Sets.newHashSet();\n",
        "492": "    for (int i = 0; i < ITERATIONS; i++) {\n",
        "493": "      Object key = new Object();\n",
        "494": "      long value = i % 2;\n",
        "495": "      map.put(key, value);\n",
        "496": "      if (value != 0L) {\n",
        "497": "        nonZeroKeys.add(key);\n",
        "498": "      }\n",
        "499": "    }\n",
        "500": "    assertEquals(ITERATIONS, map.size());\n",
        "501": "    assertTrue(map.asMap().containsValue(0L));\n",
        "502": "\n",
        "503": "    map.removeAllZeros();\n",
        "504": "    assertFalse(map.asMap().containsValue(0L));\n",
        "505": "    assertEquals(ITERATIONS / 2, map.size());\n",
        "506": "    assertEquals(nonZeroKeys, map.asMap().keySet());\n",
        "507": "  }\n",
        "508": "\n",
        "509": "  public void testClear() {\n",
        "510": "    AtomicLongMap<Object> map = AtomicLongMap.create();\n",
        "511": "    for (int i = 0; i < ITERATIONS; i++) {\n",
        "512": "      map.put(new Object(), i);\n",
        "513": "    }\n",
        "514": "    assertEquals(ITERATIONS, map.size());\n",
        "515": "\n",
        "516": "    map.clear();\n",
        "517": "    assertEquals(0, map.size());\n",
        "518": "    assertTrue(map.isEmpty());\n",
        "519": "  }\n",
        "520": "\n",
        "521": "  public void testSum() {\n",
        "522": "    AtomicLongMap<Object> map = AtomicLongMap.create();\n",
        "523": "    long sum = 0;\n",
        "524": "    for (int i = 0; i < ITERATIONS; i++) {\n",
        "525": "      map.put(new Object(), i);\n",
        "526": "      sum += i;\n",
        "527": "    }\n",
        "528": "    assertEquals(ITERATIONS, map.size());\n",
        "529": "    assertEquals(sum, map.sum());\n",
        "530": "  }\n",
        "531": "\n",
        "532": "  public void testEmpty() {\n",
        "533": "    AtomicLongMap<String> map = AtomicLongMap.create();\n",
        "534": "    assertEquals(0L, map.get(\"a\"));\n",
        "535": "    assertEquals(0, map.size());\n",
        "536": "    assertTrue(map.isEmpty());\n",
        "537": "    assertFalse(map.remove(\"a\", 1L));\n",
        "538": "    assertFalse(map.remove(\"a\", 0L));\n",
        "539": "    assertFalse(map.replace(\"a\", 1L, 0L));\n",
        "540": "  }\n",
        "541": "}\n",
        "542": "\n"
    }
}