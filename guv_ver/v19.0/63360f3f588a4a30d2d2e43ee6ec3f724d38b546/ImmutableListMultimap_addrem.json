{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.Beta;\n",
        "20": "import com.google.common.annotations.GwtCompatible;\n",
        "21": "\n",
        "22": "import java.util.Collection;\n",
        "23": "import java.util.Comparator;\n",
        "24": "import java.util.Map.Entry;\n",
        "25": "\n",
        "26": "import javax.annotation.Nullable;\n",
        "27": "\n",
        "28": "/**\n",
        "29": " * A {@link ListMultimap} whose contents will never change, with many other important properties\n",
        "30": " * detailed at {@link ImmutableCollection}.\n",
        "31": " *\n",
        "32": " * <p>See the Guava User Guide article on <a href=\n",
        "33": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\">\n",
        "34": " * immutable collections</a>.\n",
        "35": " *\n",
        "36": " * @author Jared Levy\n",
        "37": " * @since 2.0\n",
        "38": " */\n",
        "39": "@GwtCompatible(serializable = true, emulated = true)\n",
        "40": "public class ImmutableListMultimap<K, V> extends ImmutableMultimap<K, V>\n",
        "41": "    implements ListMultimap<K, V> {\n",
        "42": "\n",
        "43": "  /** Returns the empty multimap. */\n",
        "44": "  // Casting is safe because the multimap will never hold any elements.\n",
        "45": "  @SuppressWarnings(\"unchecked\")\n",
        "46": "  public static <K, V> ImmutableListMultimap<K, V> of() {\n",
        "47": "    return (ImmutableListMultimap<K, V>) EmptyImmutableListMultimap.INSTANCE;\n",
        "48": "  }\n",
        "49": "\n",
        "50": "  /**\n",
        "51": "   * Returns an immutable multimap containing a single entry.\n",
        "52": "   */\n",
        "53": "  public static <K, V> ImmutableListMultimap<K, V> of(K k1, V v1) {\n",
        "54": "    ImmutableListMultimap.Builder<K, V> builder = ImmutableListMultimap.builder();\n",
        "55": "    builder.put(k1, v1);\n",
        "56": "    return builder.build();\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  /**\n",
        "60": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "61": "   */\n",
        "62": "  public static <K, V> ImmutableListMultimap<K, V> of(K k1, V v1, K k2, V v2) {\n",
        "63": "    ImmutableListMultimap.Builder<K, V> builder = ImmutableListMultimap.builder();\n",
        "64": "    builder.put(k1, v1);\n",
        "65": "    builder.put(k2, v2);\n",
        "66": "    return builder.build();\n",
        "67": "  }\n",
        "68": "\n",
        "69": "  /**\n",
        "70": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "71": "   */\n",
        "72": "  public static <K, V> ImmutableListMultimap<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3) {\n",
        "73": "    ImmutableListMultimap.Builder<K, V> builder = ImmutableListMultimap.builder();\n",
        "74": "    builder.put(k1, v1);\n",
        "75": "    builder.put(k2, v2);\n",
        "76": "    builder.put(k3, v3);\n",
        "77": "    return builder.build();\n",
        "78": "  }\n",
        "79": "\n",
        "80": "  /**\n",
        "81": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "82": "   */\n",
        "83": "  public static <K, V> ImmutableListMultimap<K, V> of(\n",
        "84": "      K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4) {\n",
        "85": "    ImmutableListMultimap.Builder<K, V> builder = ImmutableListMultimap.builder();\n",
        "86": "    builder.put(k1, v1);\n",
        "87": "    builder.put(k2, v2);\n",
        "88": "    builder.put(k3, v3);\n",
        "89": "    builder.put(k4, v4);\n",
        "90": "    return builder.build();\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  /**\n",
        "94": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "95": "   */\n",
        "96": "  public static <K, V> ImmutableListMultimap<K, V> of(\n",
        "97": "      K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5) {\n",
        "98": "    ImmutableListMultimap.Builder<K, V> builder = ImmutableListMultimap.builder();\n",
        "99": "    builder.put(k1, v1);\n",
        "100": "    builder.put(k2, v2);\n",
        "101": "    builder.put(k3, v3);\n",
        "102": "    builder.put(k4, v4);\n",
        "103": "    builder.put(k5, v5);\n",
        "104": "    return builder.build();\n",
        "105": "  }\n",
        "106": "\n",
        "107": "  // looking for of() with > 5 entries? Use the builder instead.\n",
        "108": "\n",
        "109": "  /**\n",
        "110": "   * Returns a new builder. The generated builder is equivalent to the builder\n",
        "111": "   * created by the {@link Builder} constructor.\n",
        "112": "   */\n",
        "113": "  public static <K, V> Builder<K, V> builder() {\n",
        "114": "    return new Builder<K, V>();\n",
        "115": "  }\n",
        "116": "\n",
        "117": "  /**\n",
        "118": "   * A builder for creating immutable {@code ListMultimap} instances, especially\n",
        "119": "   * {@code public static final} multimaps (\"constant multimaps\"). Example:\n",
        "120": "   * <pre>   {@code\n",
        "121": "   *\n",
        "122": "   *   static final Multimap<String, Integer> STRING_TO_INTEGER_MULTIMAP =\n",
        "123": "   *       new ImmutableListMultimap.Builder<String, Integer>()\n",
        "124": "   *           .put(\"one\", 1)\n",
        "125": "   *           .putAll(\"several\", 1, 2, 3)\n",
        "126": "   *           .putAll(\"many\", 1, 2, 3, 4, 5)\n",
        "127": "   *           .build();}</pre>\n",
        "128": "   *\n",
        "129": "   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple\n",
        "130": "   * times to build multiple multimaps in series. Each multimap contains the\n",
        "131": "   * key-value mappings in the previously created multimaps.\n",
        "132": "   *\n",
        "133": "   * @since 2.0\n",
        "134": "   */\n",
        "135": "  public static final class Builder<K, V> extends ImmutableMultimap.Builder<K, V> {\n",
        "136": "    /**\n",
        "137": "     * Creates a new builder. The returned builder is equivalent to the builder\n",
        "138": "     * generated by {@link ImmutableListMultimap#builder}.\n",
        "139": "     */\n",
        "140": "    public Builder() {}\n",
        "141": "\n",
        "142": "    @Override\n",
        "143": "    public Builder<K, V> put(K key, V value) {\n",
        "144": "      super.put(key, value);\n",
        "145": "      return this;\n",
        "146": "    }\n",
        "147": "\n",
        "148": "    /**\n",
        "149": "     * {@inheritDoc}\n",
        "150": "     *\n",
        "151": "     * @since 11.0\n",
        "152": "     */\n",
        "153": "    @Override\n",
        "154": "    public Builder<K, V> put(Entry<? extends K, ? extends V> entry) {\n",
        "155": "      super.put(entry);\n",
        "156": "      return this;\n",
        "157": "    }\n",
        "158": "\n",
        "159": "    /**\n",
        "160": "     * {@inheritDoc}\n",
        "161": "     *\n",
        "162": "     * @since 19.0\n",
        "163": "     */\n",
        "164": "    @Beta\n",
        "165": "    @Override\n",
        "166": "    public Builder<K, V> putAll(Iterable<? extends Entry<? extends K, ? extends V>> entries) {\n",
        "167": "      super.putAll(entries);\n",
        "168": "      return this;\n",
        "169": "    }\n",
        "170": "\n",
        "171": "    @Override\n",
        "172": "    public Builder<K, V> putAll(K key, Iterable<? extends V> values) {\n",
        "173": "      super.putAll(key, values);\n",
        "174": "      return this;\n",
        "175": "    }\n",
        "176": "\n",
        "177": "    @Override\n",
        "178": "    public Builder<K, V> putAll(K key, V... values) {\n",
        "179": "      super.putAll(key, values);\n",
        "180": "      return this;\n",
        "181": "    }\n",
        "182": "\n",
        "183": "    @Override\n",
        "184": "    public Builder<K, V> putAll(Multimap<? extends K, ? extends V> multimap) {\n",
        "185": "      super.putAll(multimap);\n",
        "186": "      return this;\n",
        "187": "    }\n",
        "188": "\n",
        "189": "    /**\n",
        "190": "     * {@inheritDoc}\n",
        "191": "     *\n",
        "192": "     * @since 8.0\n",
        "193": "     */\n",
        "194": "    @Override\n",
        "195": "    public Builder<K, V> orderKeysBy(Comparator<? super K> keyComparator) {\n",
        "196": "      super.orderKeysBy(keyComparator);\n",
        "197": "      return this;\n",
        "198": "    }\n",
        "199": "\n",
        "200": "    /**\n",
        "201": "     * {@inheritDoc}\n",
        "202": "     *\n",
        "203": "     * @since 8.0\n",
        "204": "     */\n",
        "205": "    @Override\n",
        "206": "    public Builder<K, V> orderValuesBy(Comparator<? super V> valueComparator) {\n",
        "207": "      super.orderValuesBy(valueComparator);\n",
        "208": "      return this;\n",
        "209": "    }\n",
        "210": "\n",
        "211": "    /**\n",
        "212": "     * Returns a newly-created immutable list multimap.\n",
        "213": "     */\n",
        "214": "    @Override\n",
        "215": "    public ImmutableListMultimap<K, V> build() {\n",
        "216": "      return (ImmutableListMultimap<K, V>) super.build();\n",
        "217": "    }\n",
        "218": "  }\n",
        "219": "\n",
        "220": "  /**\n",
        "221": "   * Returns an immutable multimap containing the same mappings as {@code\n",
        "222": "   * multimap}. The generated multimap's key and value orderings correspond to\n",
        "223": "   * the iteration ordering of the {@code multimap.asMap()} view.\n",
        "224": "   *\n",
        "225": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "226": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "227": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "228": "   *\n",
        "229": "   * @throws NullPointerException if any key or value in {@code multimap} is\n",
        "230": "   *         null\n",
        "231": "   */\n",
        "232": "  public static <K, V> ImmutableListMultimap<K, V> copyOf(\n",
        "233": "      Multimap<? extends K, ? extends V> multimap) {\n",
        "234": "    if (multimap.isEmpty()) {\n",
        "235": "      return of();\n",
        "236": "    }\n",
        "237": "\n",
        "238": "    // TODO(lowasser): copy ImmutableSetMultimap by using asList() on the sets\n",
        "239": "    if (multimap instanceof ImmutableListMultimap) {\n",
        "240": "      @SuppressWarnings(\"unchecked\") // safe since multimap is not writable\n",
        "241": "      ImmutableListMultimap<K, V> kvMultimap = (ImmutableListMultimap<K, V>) multimap;\n",
        "242": "      if (!kvMultimap.isPartialView()) {\n",
        "243": "        return kvMultimap;\n",
        "244": "      }\n",
        "245": "    }\n",
        "246": "\n",
        "247": "    ImmutableMap.Builder<K, ImmutableList<V>> builder =\n",
        "248": "        new ImmutableMap.Builder<K, ImmutableList<V>>(multimap.asMap().size());\n",
        "249": "    int size = 0;\n",
        "250": "\n",
        "251": "    for (Entry<? extends K, ? extends Collection<? extends V>> entry :\n",
        "252": "        multimap.asMap().entrySet()) {\n",
        "253": "      ImmutableList<V> list = ImmutableList.copyOf(entry.getValue());\n",
        "254": "      if (!list.isEmpty()) {\n",
        "255": "        builder.put(entry.getKey(), list);\n",
        "256": "        size += list.size();\n",
        "257": "      }\n",
        "258": "    }\n",
        "259": "\n",
        "260": "    return new ImmutableListMultimap<K, V>(builder.build(), size);\n",
        "261": "  }\n",
        "262": "\n",
        "263": "  /**\n",
        "264": "   * Returns an immutable multimap containing the specified entries.  The\n",
        "265": "   * returned multimap iterates over keys in the order they were first\n",
        "266": "   * encountered in the input, and the values for each key are iterated in the\n",
        "267": "   * order they were encountered.\n",
        "268": "   *\n",
        "269": "   * @throws NullPointerException if any key, value, or entry is null\n",
        "270": "   * @since 19.0\n",
        "271": "   */\n",
        "272": "  @Beta\n",
        "273": "  public static <K, V> ImmutableListMultimap<K, V> copyOf(\n",
        "274": "      Iterable<? extends Entry<? extends K, ? extends V>> entries) {\n",
        "275": "    return new Builder<K, V>().putAll(entries).build();\n",
        "276": "  }\n",
        "277": "\n",
        "278": "  ImmutableListMultimap(ImmutableMap<K, ImmutableList<V>> map, int size) {\n",
        "279": "    super(map, size);\n",
        "280": "  }\n",
        "281": "\n",
        "282": "  // views\n",
        "283": "\n",
        "284": "  /**\n",
        "285": "   * Returns an immutable list of the values for the given key.  If no mappings\n",
        "286": "   * in the multimap have the provided key, an empty immutable list is\n",
        "287": "   * returned. The values are in the same order as the parameters used to build\n",
        "288": "   * this multimap.\n",
        "289": "   */\n",
        "290": "  @Override\n",
        "291": "  public ImmutableList<V> get(@Nullable K key) {\n",
        "292": "    // This cast is safe as its type is known in constructor.\n",
        "293": "    ImmutableList<V> list = (ImmutableList<V>) map.get(key);\n",
        "294": "    return (list == null) ? ImmutableList.<V>of() : list;\n",
        "295": "  }\n",
        "296": "\n",
        "297": "  private transient ImmutableListMultimap<V, K> inverse;\n",
        "298": "\n",
        "299": "  /**\n",
        "300": "   * {@inheritDoc}\n",
        "301": "   *\n",
        "302": "   * <p>Because an inverse of a list multimap can contain multiple pairs with\n",
        "303": "   * the same key and value, this method returns an {@code\n",
        "304": "   * ImmutableListMultimap} rather than the {@code ImmutableMultimap} specified\n",
        "305": "   * in the {@code ImmutableMultimap} class.\n",
        "306": "   *\n",
        "307": "   * @since 11.0\n",
        "308": "   */\n",
        "309": "  @Override\n",
        "310": "  public ImmutableListMultimap<V, K> inverse() {\n",
        "311": "    ImmutableListMultimap<V, K> result = inverse;\n",
        "312": "    return (result == null) ? (inverse = invert()) : result;\n",
        "313": "  }\n",
        "314": "\n",
        "315": "  private ImmutableListMultimap<V, K> invert() {\n",
        "316": "    Builder<V, K> builder = builder();\n",
        "317": "    for (Entry<K, V> entry : entries()) {\n",
        "318": "      builder.put(entry.getValue(), entry.getKey());\n",
        "319": "    }\n",
        "320": "    ImmutableListMultimap<V, K> invertedMultimap = builder.build();\n",
        "321": "    invertedMultimap.inverse = this;\n",
        "322": "    return invertedMultimap;\n",
        "323": "  }\n",
        "324": "\n",
        "325": "  /**\n",
        "326": "   * Guaranteed to throw an exception and leave the multimap unmodified.\n",
        "327": "   *\n",
        "328": "   * @throws UnsupportedOperationException always\n",
        "329": "   * @deprecated Unsupported operation.\n",
        "330": "   */\n",
        "331": "  @Deprecated\n",
        "332": "  @Override\n",
        "333": "  public ImmutableList<V> removeAll(Object key) {\n",
        "334": "    throw new UnsupportedOperationException();\n",
        "335": "  }\n",
        "336": "\n",
        "337": "  /**\n",
        "338": "   * Guaranteed to throw an exception and leave the multimap unmodified.\n",
        "339": "   *\n",
        "340": "   * @throws UnsupportedOperationException always\n",
        "341": "   * @deprecated Unsupported operation.\n",
        "342": "   */\n",
        "343": "  @Deprecated\n",
        "344": "  @Override\n",
        "345": "  public ImmutableList<V> replaceValues(K key, Iterable<? extends V> values) {\n",
        "346": "    throw new UnsupportedOperationException();\n",
        "347": "  }\n",
        "348": "}\n"
    }
}