{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.primitives;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "import static java.lang.Float.NaN;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import com.google.common.collect.testing.Helpers;\n",
        "24": "\n",
        "25": "import junit.framework.TestCase;\n",
        "26": "\n",
        "27": "import java.util.Arrays;\n",
        "28": "import java.util.Collection;\n",
        "29": "import java.util.Collections;\n",
        "30": "import java.util.Comparator;\n",
        "31": "import java.util.List;\n",
        "32": "\n",
        "33": "/**\n",
        "34": " * Unit test for {@link Floats}.\n",
        "35": " *\n",
        "36": " * @author Kevin Bourrillion\n",
        "37": " */\n",
        "38": "@GwtCompatible(emulated = true)\n",
        "39": "@SuppressWarnings(\"cast\") // redundant casts are intentional and harmless\n",
        "40": "public class FloatsTest extends TestCase {\n",
        "41": "  private static final float[] EMPTY = {};\n",
        "42": "  private static final float[] ARRAY1 = {(float) 1};\n",
        "43": "  private static final float[] ARRAY234\n",
        "44": "      = {(float) 2, (float) 3, (float) 4};\n",
        "45": "\n",
        "46": "  private static final float LEAST = Float.NEGATIVE_INFINITY;\n",
        "47": "  private static final float GREATEST = Float.POSITIVE_INFINITY;\n",
        "48": "\n",
        "49": "  private static final float[] NUMBERS = new float[] {\n",
        "50": "      LEAST, -Float.MAX_VALUE, -1f, -0f, 0f, 1f, Float.MAX_VALUE, GREATEST,\n",
        "51": "      Float.MIN_NORMAL, -Float.MIN_NORMAL,  Float.MIN_VALUE, -Float.MIN_VALUE,\n",
        "52": "      Integer.MIN_VALUE, Integer.MAX_VALUE, Long.MIN_VALUE, Long.MAX_VALUE\n",
        "53": "  };\n",
        "54": "\n",
        "55": "  private static final float[] VALUES\n",
        "56": "      = Floats.concat(NUMBERS, new float[] {NaN});\n",
        "57": "\n",
        "58": "  public void testHashCode() {\n",
        "59": "    for (float value : VALUES) {\n",
        "60": "      assertEquals(((Float) value).hashCode(), Floats.hashCode(value));\n",
        "61": "    }\n",
        "62": "  }\n",
        "63": "\n",
        "64": "  public void testIsFinite() {\n",
        "65": "    for (float value : NUMBERS) {\n",
        "66": "      assertEquals(!(Float.isInfinite(value) || Float.isNaN(value)), Floats.isFinite(value));\n",
        "67": "    }\n",
        "68": "  }\n",
        "69": "\n",
        "70": "  public void testCompare() {\n",
        "71": "    for (float x : VALUES) {\n",
        "72": "      for (float y : VALUES) {\n",
        "73": "        // note: spec requires only that the sign is the same\n",
        "74": "        assertEquals(x + \", \" + y,\n",
        "75": "                     Float.valueOf(x).compareTo(y),\n",
        "76": "                     Floats.compare(x, y));\n",
        "77": "      }\n",
        "78": "    }\n",
        "79": "  }\n",
        "80": "\n",
        "81": "  public void testContains() {\n",
        "82": "    assertFalse(Floats.contains(EMPTY, (float) 1));\n",
        "83": "    assertFalse(Floats.contains(ARRAY1, (float) 2));\n",
        "84": "    assertFalse(Floats.contains(ARRAY234, (float) 1));\n",
        "85": "    assertTrue(Floats.contains(new float[] {(float) -1}, (float) -1));\n",
        "86": "    assertTrue(Floats.contains(ARRAY234, (float) 2));\n",
        "87": "    assertTrue(Floats.contains(ARRAY234, (float) 3));\n",
        "88": "    assertTrue(Floats.contains(ARRAY234, (float) 4));\n",
        "89": "\n",
        "90": "    for (float value : NUMBERS) {\n",
        "91": "      assertTrue(\"\" + value, Floats.contains(new float[] {5f, value}, value));\n",
        "92": "    }\n",
        "93": "    assertFalse(Floats.contains(new float[] {5f, NaN}, NaN));\n",
        "94": "  }\n",
        "95": "\n",
        "96": "  public void testIndexOf() {\n",
        "97": "    assertEquals(-1, Floats.indexOf(EMPTY, (float) 1));\n",
        "98": "    assertEquals(-1, Floats.indexOf(ARRAY1, (float) 2));\n",
        "99": "    assertEquals(-1, Floats.indexOf(ARRAY234, (float) 1));\n",
        "100": "    assertEquals(0, Floats.indexOf(\n",
        "101": "        new float[] {(float) -1}, (float) -1));\n",
        "102": "    assertEquals(0, Floats.indexOf(ARRAY234, (float) 2));\n",
        "103": "    assertEquals(1, Floats.indexOf(ARRAY234, (float) 3));\n",
        "104": "    assertEquals(2, Floats.indexOf(ARRAY234, (float) 4));\n",
        "105": "    assertEquals(1, Floats.indexOf(\n",
        "106": "        new float[] { (float) 2, (float) 3, (float) 2, (float) 3 },\n",
        "107": "        (float) 3));\n",
        "108": "\n",
        "109": "    for (float value : NUMBERS) {\n",
        "110": "      assertEquals(\"\" + value, 1,\n",
        "111": "          Floats.indexOf(new float[] {5f, value}, value));\n",
        "112": "    }\n",
        "113": "    assertEquals(-1, Floats.indexOf(new float[] {5f, NaN}, NaN));\n",
        "114": "  }\n",
        "115": "\n",
        "116": "  public void testIndexOf_arrayTarget() {\n",
        "117": "    assertEquals(0, Floats.indexOf(EMPTY, EMPTY));\n",
        "118": "    assertEquals(0, Floats.indexOf(ARRAY234, EMPTY));\n",
        "119": "    assertEquals(-1, Floats.indexOf(EMPTY, ARRAY234));\n",
        "120": "    assertEquals(-1, Floats.indexOf(ARRAY234, ARRAY1));\n",
        "121": "    assertEquals(-1, Floats.indexOf(ARRAY1, ARRAY234));\n",
        "122": "    assertEquals(0, Floats.indexOf(ARRAY1, ARRAY1));\n",
        "123": "    assertEquals(0, Floats.indexOf(ARRAY234, ARRAY234));\n",
        "124": "    assertEquals(0, Floats.indexOf(\n",
        "125": "        ARRAY234, new float[] { (float) 2, (float) 3 }));\n",
        "126": "    assertEquals(1, Floats.indexOf(\n",
        "127": "        ARRAY234, new float[] { (float) 3, (float) 4 }));\n",
        "128": "    assertEquals(1, Floats.indexOf(ARRAY234, new float[] { (float) 3 }));\n",
        "129": "    assertEquals(2, Floats.indexOf(ARRAY234, new float[] { (float) 4 }));\n",
        "130": "    assertEquals(1, Floats.indexOf(new float[] { (float) 2, (float) 3,\n",
        "131": "        (float) 3, (float) 3, (float) 3 },\n",
        "132": "        new float[] { (float) 3 }\n",
        "133": "    ));\n",
        "134": "    assertEquals(2, Floats.indexOf(\n",
        "135": "        new float[] { (float) 2, (float) 3, (float) 2,\n",
        "136": "            (float) 3, (float) 4, (float) 2, (float) 3},\n",
        "137": "        new float[] { (float) 2, (float) 3, (float) 4}\n",
        "138": "    ));\n",
        "139": "    assertEquals(1, Floats.indexOf(\n",
        "140": "        new float[] { (float) 2, (float) 2, (float) 3,\n",
        "141": "            (float) 4, (float) 2, (float) 3, (float) 4},\n",
        "142": "        new float[] { (float) 2, (float) 3, (float) 4}\n",
        "143": "    ));\n",
        "144": "    assertEquals(-1, Floats.indexOf(\n",
        "145": "        new float[] { (float) 4, (float) 3, (float) 2},\n",
        "146": "        new float[] { (float) 2, (float) 3, (float) 4}\n",
        "147": "    ));\n",
        "148": "\n",
        "149": "    for (float value : NUMBERS) {\n",
        "150": "      assertEquals(\"\" + value, 1, Floats.indexOf(\n",
        "151": "          new float[] {5f, value, value, 5f}, new float[] {value, value}));\n",
        "152": "    }\n",
        "153": "    assertEquals(-1, Floats.indexOf(\n",
        "154": "        new float[] {5f, NaN, NaN, 5f}, new float[] {NaN, NaN}));\n",
        "155": "  }\n",
        "156": "\n",
        "157": "  public void testLastIndexOf() {\n",
        "158": "    assertEquals(-1, Floats.lastIndexOf(EMPTY, (float) 1));\n",
        "159": "    assertEquals(-1, Floats.lastIndexOf(ARRAY1, (float) 2));\n",
        "160": "    assertEquals(-1, Floats.lastIndexOf(ARRAY234, (float) 1));\n",
        "161": "    assertEquals(0, Floats.lastIndexOf(\n",
        "162": "        new float[] {(float) -1}, (float) -1));\n",
        "163": "    assertEquals(0, Floats.lastIndexOf(ARRAY234, (float) 2));\n",
        "164": "    assertEquals(1, Floats.lastIndexOf(ARRAY234, (float) 3));\n",
        "165": "    assertEquals(2, Floats.lastIndexOf(ARRAY234, (float) 4));\n",
        "166": "    assertEquals(3, Floats.lastIndexOf(\n",
        "167": "        new float[] { (float) 2, (float) 3, (float) 2, (float) 3 },\n",
        "168": "        (float) 3));\n",
        "169": "\n",
        "170": "    for (float value : NUMBERS) {\n",
        "171": "      assertEquals(\"\" + value,\n",
        "172": "          0, Floats.lastIndexOf(new float[] {value, 5f}, value));\n",
        "173": "    }\n",
        "174": "    assertEquals(-1, Floats.lastIndexOf(new float[] {NaN, 5f}, NaN));\n",
        "175": "  }\n",
        "176": "\n",
        "177": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "178": "  public void testMax_noArgs() {\n",
        "179": "    try {\n",
        "180": "      Floats.max();\n",
        "181": "      fail();\n",
        "182": "    } catch (IllegalArgumentException expected) {\n",
        "183": "    }\n",
        "184": "  }\n",
        "185": "\n",
        "186": "  public void testMax() {\n",
        "187": "    assertEquals(GREATEST, Floats.max(GREATEST));\n",
        "188": "    assertEquals(LEAST, Floats.max(LEAST));\n",
        "189": "    assertEquals((float) 9, Floats.max(\n",
        "190": "        (float) 8, (float) 6, (float) 7,\n",
        "191": "        (float) 5, (float) 3, (float) 0, (float) 9));\n",
        "192": "\n",
        "193": "    assertEquals(0f, Floats.max(-0f, 0f));\n",
        "194": "    assertEquals(0f, Floats.max(0f, -0f));\n",
        "195": "    assertEquals(GREATEST, Floats.max(NUMBERS));\n",
        "196": "    assertTrue(Float.isNaN(Floats.max(VALUES)));\n",
        "197": "  }\n",
        "198": "\n",
        "199": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "200": "  public void testMin_noArgs() {\n",
        "201": "    try {\n",
        "202": "      Floats.min();\n",
        "203": "      fail();\n",
        "204": "    } catch (IllegalArgumentException expected) {\n",
        "205": "    }\n",
        "206": "  }\n",
        "207": "\n",
        "208": "  public void testMin() {\n",
        "209": "    assertEquals(LEAST, Floats.min(LEAST));\n",
        "210": "    assertEquals(GREATEST, Floats.min(GREATEST));\n",
        "211": "    assertEquals((float) 0, Floats.min(\n",
        "212": "        (float) 8, (float) 6, (float) 7,\n",
        "213": "        (float) 5, (float) 3, (float) 0, (float) 9));\n",
        "214": "\n",
        "215": "    assertEquals(-0f, Floats.min(-0f, 0f));\n",
        "216": "    assertEquals(-0f, Floats.min(0f, -0f));\n",
        "217": "    assertEquals(LEAST, Floats.min(NUMBERS));\n",
        "218": "    assertTrue(Float.isNaN(Floats.min(VALUES)));\n",
        "219": "  }\n",
        "220": "\n",
        "221": "  public void testConcat() {\n",
        "222": "    assertTrue(Arrays.equals(EMPTY, Floats.concat()));\n",
        "223": "    assertTrue(Arrays.equals(EMPTY, Floats.concat(EMPTY)));\n",
        "224": "    assertTrue(Arrays.equals(EMPTY, Floats.concat(EMPTY, EMPTY, EMPTY)));\n",
        "225": "    assertTrue(Arrays.equals(ARRAY1, Floats.concat(ARRAY1)));\n",
        "226": "    assertNotSame(ARRAY1, Floats.concat(ARRAY1));\n",
        "227": "    assertTrue(Arrays.equals(ARRAY1, Floats.concat(EMPTY, ARRAY1, EMPTY)));\n",
        "228": "    assertTrue(Arrays.equals(\n",
        "229": "        new float[] {(float) 1, (float) 1, (float) 1},\n",
        "230": "        Floats.concat(ARRAY1, ARRAY1, ARRAY1)));\n",
        "231": "    assertTrue(Arrays.equals(\n",
        "232": "        new float[] {(float) 1, (float) 2, (float) 3, (float) 4},\n",
        "233": "        Floats.concat(ARRAY1, ARRAY234)));\n",
        "234": "  }\n",
        "235": "\n",
        "236": "  public void testEnsureCapacity() {\n",
        "237": "    assertSame(EMPTY, Floats.ensureCapacity(EMPTY, 0, 1));\n",
        "238": "    assertSame(ARRAY1, Floats.ensureCapacity(ARRAY1, 0, 1));\n",
        "239": "    assertSame(ARRAY1, Floats.ensureCapacity(ARRAY1, 1, 1));\n",
        "240": "    assertTrue(Arrays.equals(\n",
        "241": "        new float[] {(float) 1, (float) 0, (float) 0},\n",
        "242": "        Floats.ensureCapacity(ARRAY1, 2, 1)));\n",
        "243": "  }\n",
        "244": "\n",
        "245": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "246": "  public void testEnsureCapacity_fail() {\n",
        "247": "    try {\n",
        "248": "      Floats.ensureCapacity(ARRAY1, -1, 1);\n",
        "249": "      fail();\n",
        "250": "    } catch (IllegalArgumentException expected) {\n",
        "251": "    }\n",
        "252": "    try {\n",
        "253": "      // notice that this should even fail when no growth was needed\n",
        "254": "      Floats.ensureCapacity(ARRAY1, 1, -1);\n",
        "255": "      fail();\n",
        "256": "    } catch (IllegalArgumentException expected) {\n",
        "257": "    }\n",
        "258": "  }\n",
        "259": "\n",
        "260": "  public void testLexicographicalComparator() {\n",
        "261": "    List<float[]> ordered = Arrays.asList(\n",
        "262": "        new float[] {},\n",
        "263": "        new float[] {LEAST},\n",
        "264": "        new float[] {LEAST, LEAST},\n",
        "265": "        new float[] {LEAST, (float) 1},\n",
        "266": "        new float[] {(float) 1},\n",
        "267": "        new float[] {(float) 1, LEAST},\n",
        "268": "        new float[] {GREATEST, Float.MAX_VALUE},\n",
        "269": "        new float[] {GREATEST, GREATEST},\n",
        "270": "        new float[] {GREATEST, GREATEST, GREATEST});\n",
        "271": "\n",
        "272": "    Comparator<float[]> comparator = Floats.lexicographicalComparator();\n",
        "273": "    Helpers.testComparator(comparator, ordered);\n",
        "274": "  }\n",
        "275": "\n",
        "276": "  public void testToArray() {\n",
        "277": "    // need explicit type parameter to avoid javac warning!?\n",
        "278": "    List<Float> none = Arrays.<Float>asList();\n",
        "279": "    assertTrue(Arrays.equals(EMPTY, Floats.toArray(none)));\n",
        "280": "\n",
        "281": "    List<Float> one = Arrays.asList((float) 1);\n",
        "282": "    assertTrue(Arrays.equals(ARRAY1, Floats.toArray(one)));\n",
        "283": "\n",
        "284": "    float[] array = {(float) 0, (float) 1, (float) 3};\n",
        "285": "\n",
        "286": "    List<Float> three = Arrays.asList((float) 0, (float) 1, (float) 3);\n",
        "287": "    assertTrue(Arrays.equals(array, Floats.toArray(three)));\n",
        "288": "\n",
        "289": "    assertTrue(Arrays.equals(array, Floats.toArray(Floats.asList(array))));\n",
        "290": "  }\n",
        "291": "\n",
        "292": "  public void testToArray_threadSafe() {\n",
        "293": "    for (int delta : new int[] { +1, 0, -1 }) {\n",
        "294": "      for (int i = 0; i < VALUES.length; i++) {\n",
        "295": "        List<Float> list = Floats.asList(VALUES).subList(0, i);\n",
        "296": "        Collection<Float> misleadingSize =\n",
        "297": "            Helpers.misleadingSizeCollection(delta);\n",
        "298": "        misleadingSize.addAll(list);\n",
        "299": "        float[] arr = Floats.toArray(misleadingSize);\n",
        "300": "        assertEquals(i, arr.length);\n",
        "301": "        for (int j = 0; j < i; j++) {\n",
        "302": "          assertEquals(VALUES[j], arr[j]);\n",
        "303": "        }\n",
        "304": "      }\n",
        "305": "    }\n",
        "306": "  }\n",
        "307": "\n",
        "308": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "309": "  public void testToArray_withNull() {\n",
        "310": "    List<Float> list = Arrays.asList((float) 0, (float) 1, null);\n",
        "311": "    try {\n",
        "312": "      Floats.toArray(list);\n",
        "313": "      fail();\n",
        "314": "    } catch (NullPointerException expected) {\n",
        "315": "    }\n",
        "316": "  }\n",
        "317": "\n",
        "318": "  public void testToArray_withConversion() {\n",
        "319": "    float[] array = {(float) 0, (float) 1, (float) 2};\n",
        "320": "\n",
        "321": "    List<Byte> bytes = Arrays.asList((byte) 0, (byte) 1, (byte) 2);\n",
        "322": "    List<Short> shorts = Arrays.asList((short) 0, (short) 1, (short) 2);\n",
        "323": "    List<Integer> ints = Arrays.asList(0, 1, 2);\n",
        "324": "    List<Float> floats = Arrays.asList((float) 0, (float) 1, (float) 2);\n",
        "325": "    List<Long> longs = Arrays.asList((long) 0, (long) 1, (long) 2);\n",
        "326": "    List<Double> doubles = Arrays.asList((double) 0, (double) 1, (double) 2);\n",
        "327": "\n",
        "328": "    assertTrue(Arrays.equals(array, Floats.toArray(bytes)));\n",
        "329": "    assertTrue(Arrays.equals(array, Floats.toArray(shorts)));\n",
        "330": "    assertTrue(Arrays.equals(array, Floats.toArray(ints)));\n",
        "331": "    assertTrue(Arrays.equals(array, Floats.toArray(floats)));\n",
        "332": "    assertTrue(Arrays.equals(array, Floats.toArray(longs)));\n",
        "333": "    assertTrue(Arrays.equals(array, Floats.toArray(doubles)));\n",
        "334": "  }\n",
        "335": "\n",
        "336": "  public void testAsList_isAView() {\n",
        "337": "    float[] array = {(float) 0, (float) 1};\n",
        "338": "    List<Float> list = Floats.asList(array);\n",
        "339": "    list.set(0, (float) 2);\n",
        "340": "    assertTrue(Arrays.equals(new float[] {(float) 2, (float) 1}, array));\n",
        "341": "    array[1] = (float) 3;\n",
        "342": "    assertThat(list).containsExactly((float) 2, (float) 3).inOrder();\n",
        "343": "  }\n",
        "344": "\n",
        "345": "  public void testAsList_toArray_roundTrip() {\n",
        "346": "    float[] array = { (float) 0, (float) 1, (float) 2 };\n",
        "347": "    List<Float> list = Floats.asList(array);\n",
        "348": "    float[] newArray = Floats.toArray(list);\n",
        "349": "\n",
        "350": "    // Make sure it returned a copy\n",
        "351": "    list.set(0, (float) 4);\n",
        "352": "    assertTrue(Arrays.equals(\n",
        "353": "        new float[] { (float) 0, (float) 1, (float) 2 }, newArray));\n",
        "354": "    newArray[1] = (float) 5;\n",
        "355": "    assertEquals((float) 1, (float) list.get(1));\n",
        "356": "  }\n",
        "357": "\n",
        "358": "  // This test stems from a real bug found by andrewk\n",
        "359": "  public void testAsList_subList_toArray_roundTrip() {\n",
        "360": "    float[] array = { (float) 0, (float) 1, (float) 2, (float) 3 };\n",
        "361": "    List<Float> list = Floats.asList(array);\n",
        "362": "    assertTrue(Arrays.equals(new float[] { (float) 1, (float) 2 },\n",
        "363": "        Floats.toArray(list.subList(1, 3))));\n",
        "364": "    assertTrue(Arrays.equals(new float[] {},\n",
        "365": "        Floats.toArray(list.subList(2, 2))));\n",
        "366": "  }\n",
        "367": "\n",
        "368": "  public void testAsListEmpty() {\n",
        "369": "    assertSame(Collections.emptyList(), Floats.asList(EMPTY));\n",
        "370": "  }\n",
        "371": "\n",
        "372": "  /**\n",
        "373": "   * A reference implementation for {@code tryParse} that just catches the exception from\n",
        "374": "   * {@link Float#valueOf}.\n",
        "375": "   */\n",
        "376": "  private static Float referenceTryParse(String input) {\n",
        "377": "    if (input.trim().length() < input.length()) {\n",
        "378": "      return null;\n",
        "379": "    }\n",
        "380": "    try {\n",
        "381": "      return Float.valueOf(input);\n",
        "382": "    } catch (NumberFormatException e) {\n",
        "383": "      return null;\n",
        "384": "    }\n",
        "385": " }\n",
        "386": "\n",
        "387": "  private static final String[] BAD_TRY_PARSE_INPUTS =\n",
        "388": "    { \"\", \"+-\", \"+-0\", \" 5\", \"32 \", \" 55 \", \"infinity\", \"POSITIVE_INFINITY\", \"0x9A\", \"0x9A.bE-5\",\n",
        "389": "      \".\", \".e5\", \"NaNd\", \"InfinityF\" };\n",
        "390": "\n",
        "391": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "392": "  public void testStringConverter_convertError() {\n",
        "393": "    try {\n",
        "394": "      Floats.stringConverter().convert(\"notanumber\");\n",
        "395": "      fail();\n",
        "396": "    } catch (NumberFormatException expected) {\n",
        "397": "    }\n",
        "398": "  }\n",
        "399": "\n",
        "400": "  public void testStringConverter_nullConversions() {\n",
        "401": "    assertNull(Floats.stringConverter().convert(null));\n",
        "402": "    assertNull(Floats.stringConverter().reverse().convert(null));\n",
        "403": "  }\n",
        "404": "}\n",
        "405": "\n"
    }
}