{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2009 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "20": "import static com.google.common.base.Preconditions.checkElementIndex;\n",
        "21": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "22": "\n",
        "23": "import com.google.common.annotations.Beta;\n",
        "24": "import com.google.common.annotations.GwtCompatible;\n",
        "25": "import com.google.common.base.Objects;\n",
        "26": "import com.google.common.collect.Maps.IteratorBasedAbstractMap;\n",
        "27": "import com.google.j2objc.annotations.WeakOuter;\n",
        "28": "\n",
        "29": "import java.io.Serializable;\n",
        "30": "import java.util.Arrays;\n",
        "31": "import java.util.Collection;\n",
        "32": "import java.util.Iterator;\n",
        "33": "import java.util.Map;\n",
        "34": "import java.util.Map.Entry;\n",
        "35": "import java.util.Set;\n",
        "36": "\n",
        "37": "import javax.annotation.Nullable;\n",
        "38": "\n",
        "39": "/**\n",
        "40": " * Fixed-size {@link Table} implementation backed by a two-dimensional array.\n",
        "41": " *\n",
        "42": " * <p>The allowed row and column keys must be supplied when the table is\n",
        "43": " * created. The table always contains a mapping for every row key / column pair.\n",
        "44": " * The value corresponding to a given row and column is null unless another\n",
        "45": " * value is provided.\n",
        "46": " *\n",
        "47": " * <p>The table's size is constant: the product of the number of supplied row\n",
        "48": " * keys and the number of supplied column keys. The {@code remove} and {@code\n",
        "49": " * clear} methods are not supported by the table or its views. The {@link\n",
        "50": " * #erase} and {@link #eraseAll} methods may be used instead.\n",
        "51": " *\n",
        "52": " * <p>The ordering of the row and column keys provided when the table is\n",
        "53": " * constructed determines the iteration ordering across rows and columns in the\n",
        "54": " * table's views. None of the view iterators support {@link Iterator#remove}.\n",
        "55": " * If the table is modified after an iterator is created, the iterator remains\n",
        "56": " * valid.\n",
        "57": " *\n",
        "58": " * <p>This class requires less memory than the {@link HashBasedTable} and {@link\n",
        "59": " * TreeBasedTable} implementations, except when the table is sparse.\n",
        "60": " *\n",
        "61": " * <p>Null row keys or column keys are not permitted.\n",
        "62": " *\n",
        "63": " * <p>This class provides methods involving the underlying array structure,\n",
        "64": " * where the array indices correspond to the position of a row or column in the\n",
        "65": " * lists of allowed keys and values. See the {@link #at}, {@link #set}, {@link\n",
        "66": " * #toArray}, {@link #rowKeyList}, and {@link #columnKeyList} methods for more\n",
        "67": " * details.\n",
        "68": " *\n",
        "69": " * <p>Note that this implementation is not synchronized. If multiple threads\n",
        "70": " * access the same cell of an {@code ArrayTable} concurrently and one of the\n",
        "71": " * threads modifies its value, there is no guarantee that the new value will be\n",
        "72": " * fully visible to the other threads. To guarantee that modifications are\n",
        "73": " * visible, synchronize access to the table. Unlike other {@code Table}\n",
        "74": " * implementations, synchronization is unnecessary between a thread that writes\n",
        "75": " * to one cell and a thread that reads from another.\n",
        "76": " *\n",
        "77": " * <p>See the Guava User Guide article on <a href=\n",
        "78": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#table\">\n",
        "79": " * {@code Table}</a>.\n",
        "80": " *\n",
        "81": " * @author Jared Levy\n",
        "82": " * @since 10.0\n",
        "83": " */\n",
        "84": "@Beta\n",
        "85": "@GwtCompatible(emulated = true)\n",
        "86": "public final class ArrayTable<R, C, V> extends AbstractTable<R, C, V> implements Serializable {\n",
        "87": "\n",
        "88": "  /**\n",
        "89": "   * Creates an empty {@code ArrayTable}.\n",
        "90": "   *\n",
        "91": "   * @param rowKeys row keys that may be stored in the generated table\n",
        "92": "   * @param columnKeys column keys that may be stored in the generated table\n",
        "93": "   * @throws NullPointerException if any of the provided keys is null\n",
        "94": "   * @throws IllegalArgumentException if {@code rowKeys} or {@code columnKeys}\n",
        "95": "   *     contains duplicates or is empty\n",
        "96": "   */\n",
        "97": "  public static <R, C, V> ArrayTable<R, C, V> create(\n",
        "98": "      Iterable<? extends R> rowKeys, Iterable<? extends C> columnKeys) {\n",
        "99": "    return new ArrayTable<R, C, V>(rowKeys, columnKeys);\n",
        "100": "  }\n",
        "101": "\n",
        "102": "  /*\n",
        "103": "   * TODO(jlevy): Add factory methods taking an Enum class, instead of an\n",
        "104": "   * iterable, to specify the allowed row keys and/or column keys. Note that\n",
        "105": "   * custom serialization logic is needed to support different enum sizes during\n",
        "106": "   * serialization and deserialization.\n",
        "107": "   */\n",
        "108": "\n",
        "109": "  /**\n",
        "110": "   * Creates an {@code ArrayTable} with the mappings in the provided table.\n",
        "111": "   *\n",
        "112": "   * <p>If {@code table} includes a mapping with row key {@code r} and a\n",
        "113": "   * separate mapping with column key {@code c}, the returned table contains a\n",
        "114": "   * mapping with row key {@code r} and column key {@code c}. If that row key /\n",
        "115": "   * column key pair in not in {@code table}, the pair maps to {@code null} in\n",
        "116": "   * the generated table.\n",
        "117": "   *\n",
        "118": "   * <p>The returned table allows subsequent {@code put} calls with the row keys\n",
        "119": "   * in {@code table.rowKeySet()} and the column keys in {@code\n",
        "120": "   * table.columnKeySet()}. Calling {@link #put} with other keys leads to an\n",
        "121": "   * {@code IllegalArgumentException}.\n",
        "122": "   *\n",
        "123": "   * <p>The ordering of {@code table.rowKeySet()} and {@code\n",
        "124": "   * table.columnKeySet()} determines the row and column iteration ordering of\n",
        "125": "   * the returned table.\n",
        "126": "   *\n",
        "127": "   * @throws NullPointerException if {@code table} has a null key\n",
        "128": "   * @throws IllegalArgumentException if the provided table is empty\n",
        "129": "   */\n",
        "130": "  public static <R, C, V> ArrayTable<R, C, V> create(Table<R, C, V> table) {\n",
        "131": "    return (table instanceof ArrayTable<?, ?, ?>)\n",
        "132": "        ? new ArrayTable<R, C, V>((ArrayTable<R, C, V>) table)\n",
        "133": "        : new ArrayTable<R, C, V>(table);\n",
        "134": "  }\n",
        "135": "\n",
        "136": "  private final ImmutableList<R> rowList;\n",
        "137": "  private final ImmutableList<C> columnList;\n",
        "138": "\n",
        "139": "  // TODO(jlevy): Add getters returning rowKeyToIndex and columnKeyToIndex?\n",
        "140": "  private final ImmutableMap<R, Integer> rowKeyToIndex;\n",
        "141": "  private final ImmutableMap<C, Integer> columnKeyToIndex;\n",
        "142": "  private final V[][] array;\n",
        "143": "\n",
        "144": "  private ArrayTable(Iterable<? extends R> rowKeys, Iterable<? extends C> columnKeys) {\n",
        "145": "    this.rowList = ImmutableList.copyOf(rowKeys);\n",
        "146": "    this.columnList = ImmutableList.copyOf(columnKeys);\n",
        "147": "    checkArgument(!rowList.isEmpty());\n",
        "148": "    checkArgument(!columnList.isEmpty());\n",
        "149": "\n",
        "150": "    /*\n",
        "151": "     * TODO(jlevy): Support empty rowKeys or columnKeys? If we do, when\n",
        "152": "     * columnKeys is empty but rowKeys isn't, the table is empty but\n",
        "153": "     * containsRow() can return true and rowKeySet() isn't empty.\n",
        "154": "     */\n",
        "155": "    rowKeyToIndex = Maps.indexMap(rowList);\n",
        "156": "    columnKeyToIndex = Maps.indexMap(columnList);\n",
        "157": "\n",
        "158": "    @SuppressWarnings(\"unchecked\")\n",
        "159": "    V[][] tmpArray = (V[][]) new Object[rowList.size()][columnList.size()];\n",
        "160": "    array = tmpArray;\n",
        "161": "    // Necessary because in GWT the arrays are initialized with \"undefined\" instead of null.\n",
        "162": "    eraseAll();\n",
        "163": "  }\n",
        "164": "\n",
        "165": "  private ArrayTable(Table<R, C, V> table) {\n",
        "166": "    this(table.rowKeySet(), table.columnKeySet());\n",
        "167": "    putAll(table);\n",
        "168": "  }\n",
        "169": "\n",
        "170": "  private ArrayTable(ArrayTable<R, C, V> table) {\n",
        "171": "    rowList = table.rowList;\n",
        "172": "    columnList = table.columnList;\n",
        "173": "    rowKeyToIndex = table.rowKeyToIndex;\n",
        "174": "    columnKeyToIndex = table.columnKeyToIndex;\n",
        "175": "    @SuppressWarnings(\"unchecked\")\n",
        "176": "    V[][] copy = (V[][]) new Object[rowList.size()][columnList.size()];\n",
        "177": "    array = copy;\n",
        "178": "    // Necessary because in GWT the arrays are initialized with \"undefined\" instead of null.\n",
        "179": "    eraseAll();\n",
        "180": "    for (int i = 0; i < rowList.size(); i++) {\n",
        "181": "      System.arraycopy(table.array[i], 0, copy[i], 0, table.array[i].length);\n",
        "182": "    }\n",
        "183": "  }\n",
        "184": "\n",
        "185": "  private abstract static class ArrayMap<K, V> extends IteratorBasedAbstractMap<K, V> {\n",
        "186": "    private final ImmutableMap<K, Integer> keyIndex;\n",
        "187": "\n",
        "188": "    private ArrayMap(ImmutableMap<K, Integer> keyIndex) {\n",
        "189": "      this.keyIndex = keyIndex;\n",
        "190": "    }\n",
        "191": "\n",
        "192": "    @Override\n",
        "193": "    public Set<K> keySet() {\n",
        "194": "      return keyIndex.keySet();\n",
        "195": "    }\n",
        "196": "\n",
        "197": "    K getKey(int index) {\n",
        "198": "      return keyIndex.keySet().asList().get(index);\n",
        "199": "    }\n",
        "200": "\n",
        "201": "    abstract String getKeyRole();\n",
        "202": "\n",
        "203": "    @Nullable\n",
        "204": "    abstract V getValue(int index);\n",
        "205": "\n",
        "206": "    @Nullable\n",
        "207": "    abstract V setValue(int index, V newValue);\n",
        "208": "\n",
        "209": "    @Override\n",
        "210": "    public int size() {\n",
        "211": "      return keyIndex.size();\n",
        "212": "    }\n",
        "213": "\n",
        "214": "    @Override\n",
        "215": "    public boolean isEmpty() {\n",
        "216": "      return keyIndex.isEmpty();\n",
        "217": "    }\n",
        "218": "\n",
        "219": "    @Override\n",
        "220": "    Iterator<Entry<K, V>> entryIterator() {\n",
        "221": "      return new AbstractIndexedListIterator<Entry<K, V>>(size()) {\n",
        "222": "        @Override\n",
        "223": "        protected Entry<K, V> get(final int index) {\n",
        "224": "          return new AbstractMapEntry<K, V>() {\n",
        "225": "            @Override\n",
        "226": "            public K getKey() {\n",
        "227": "              return ArrayMap.this.getKey(index);\n",
        "228": "            }\n",
        "229": "\n",
        "230": "            @Override\n",
        "231": "            public V getValue() {\n",
        "232": "              return ArrayMap.this.getValue(index);\n",
        "233": "            }\n",
        "234": "\n",
        "235": "            @Override\n",
        "236": "            public V setValue(V value) {\n",
        "237": "              return ArrayMap.this.setValue(index, value);\n",
        "238": "            }\n",
        "239": "          };\n",
        "240": "        }\n",
        "241": "      };\n",
        "242": "    }\n",
        "243": "\n",
        "244": "    // TODO(lowasser): consider an optimized values() implementation\n",
        "245": "\n",
        "246": "    @Override\n",
        "247": "    public boolean containsKey(@Nullable Object key) {\n",
        "248": "      return keyIndex.containsKey(key);\n",
        "249": "    }\n",
        "250": "\n",
        "251": "    @Override\n",
        "252": "    public V get(@Nullable Object key) {\n",
        "253": "      Integer index = keyIndex.get(key);\n",
        "254": "      if (index == null) {\n",
        "255": "        return null;\n",
        "256": "      } else {\n",
        "257": "        return getValue(index);\n",
        "258": "      }\n",
        "259": "    }\n",
        "260": "\n",
        "261": "    @Override\n",
        "262": "    public V put(K key, V value) {\n",
        "263": "      Integer index = keyIndex.get(key);\n",
        "264": "      if (index == null) {\n",
        "265": "        throw new IllegalArgumentException(\n",
        "266": "            getKeyRole() + \" \" + key + \" not in \" + keyIndex.keySet());\n",
        "267": "      }\n",
        "268": "      return setValue(index, value);\n",
        "269": "    }\n",
        "270": "\n",
        "271": "    @Override\n",
        "272": "    public V remove(Object key) {\n",
        "273": "      throw new UnsupportedOperationException();\n",
        "274": "    }\n",
        "275": "\n",
        "276": "    @Override\n",
        "277": "    public void clear() {\n",
        "278": "      throw new UnsupportedOperationException();\n",
        "279": "    }\n",
        "280": "  }\n",
        "281": "\n",
        "282": "  /**\n",
        "283": "   * Returns, as an immutable list, the row keys provided when the table was\n",
        "284": "   * constructed, including those that are mapped to null values only.\n",
        "285": "   */\n",
        "286": "  public ImmutableList<R> rowKeyList() {\n",
        "287": "    return rowList;\n",
        "288": "  }\n",
        "289": "\n",
        "290": "  /**\n",
        "291": "   * Returns, as an immutable list, the column keys provided when the table was\n",
        "292": "   * constructed, including those that are mapped to null values only.\n",
        "293": "   */\n",
        "294": "  public ImmutableList<C> columnKeyList() {\n",
        "295": "    return columnList;\n",
        "296": "  }\n",
        "297": "\n",
        "298": "  /**\n",
        "299": "   * Returns the value corresponding to the specified row and column indices.\n",
        "300": "   * The same value is returned by {@code\n",
        "301": "   * get(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex))}, but\n",
        "302": "   * this method runs more quickly.\n",
        "303": "   *\n",
        "304": "   * @param rowIndex position of the row key in {@link #rowKeyList()}\n",
        "305": "   * @param columnIndex position of the row key in {@link #columnKeyList()}\n",
        "306": "   * @return the value with the specified row and column\n",
        "307": "   * @throws IndexOutOfBoundsException if either index is negative, {@code\n",
        "308": "   *     rowIndex} is greater then or equal to the number of allowed row keys,\n",
        "309": "   *     or {@code columnIndex} is greater then or equal to the number of\n",
        "310": "   *     allowed column keys\n",
        "311": "   */\n",
        "312": "  public V at(int rowIndex, int columnIndex) {\n",
        "313": "    // In GWT array access never throws IndexOutOfBoundsException.\n",
        "314": "    checkElementIndex(rowIndex, rowList.size());\n",
        "315": "    checkElementIndex(columnIndex, columnList.size());\n",
        "316": "    return array[rowIndex][columnIndex];\n",
        "317": "  }\n",
        "318": "\n",
        "319": "  /**\n",
        "320": "   * Associates {@code value} with the specified row and column indices. The\n",
        "321": "   * logic {@code\n",
        "322": "   * put(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex), value)}\n",
        "323": "   * has the same behavior, but this method runs more quickly.\n",
        "324": "   *\n",
        "325": "   * @param rowIndex position of the row key in {@link #rowKeyList()}\n",
        "326": "   * @param columnIndex position of the row key in {@link #columnKeyList()}\n",
        "327": "   * @param value value to store in the table\n",
        "328": "   * @return the previous value with the specified row and column\n",
        "329": "   * @throws IndexOutOfBoundsException if either index is negative, {@code\n",
        "330": "   *     rowIndex} is greater then or equal to the number of allowed row keys,\n",
        "331": "   *     or {@code columnIndex} is greater then or equal to the number of\n",
        "332": "   *     allowed column keys\n",
        "333": "   */\n",
        "334": "  public V set(int rowIndex, int columnIndex, @Nullable V value) {\n",
        "335": "    // In GWT array access never throws IndexOutOfBoundsException.\n",
        "336": "    checkElementIndex(rowIndex, rowList.size());\n",
        "337": "    checkElementIndex(columnIndex, columnList.size());\n",
        "338": "    V oldValue = array[rowIndex][columnIndex];\n",
        "339": "    array[rowIndex][columnIndex] = value;\n",
        "340": "    return oldValue;\n",
        "341": "  }\n",
        "342": "\n",
        "343": "  /**\n",
        "344": "   * Not supported. Use {@link #eraseAll} instead.\n",
        "345": "   *\n",
        "346": "   * @throws UnsupportedOperationException always\n",
        "347": "   * @deprecated Use {@link #eraseAll}\n",
        "348": "   */\n",
        "349": "  @Override\n",
        "350": "  @Deprecated\n",
        "351": "  public void clear() {\n",
        "352": "    throw new UnsupportedOperationException();\n",
        "353": "  }\n",
        "354": "\n",
        "355": "  /**\n",
        "356": "   * Associates the value {@code null} with every pair of allowed row and column\n",
        "357": "   * keys.\n",
        "358": "   */\n",
        "359": "  public void eraseAll() {\n",
        "360": "    for (V[] row : array) {\n",
        "361": "      Arrays.fill(row, null);\n",
        "362": "    }\n",
        "363": "  }\n",
        "364": "\n",
        "365": "  /**\n",
        "366": "   * Returns {@code true} if the provided keys are among the keys provided when\n",
        "367": "   * the table was constructed.\n",
        "368": "   */\n",
        "369": "  @Override\n",
        "370": "  public boolean contains(@Nullable Object rowKey, @Nullable Object columnKey) {\n",
        "371": "    return containsRow(rowKey) && containsColumn(columnKey);\n",
        "372": "  }\n",
        "373": "\n",
        "374": "  /**\n",
        "375": "   * Returns {@code true} if the provided column key is among the column keys\n",
        "376": "   * provided when the table was constructed.\n",
        "377": "   */\n",
        "378": "  @Override\n",
        "379": "  public boolean containsColumn(@Nullable Object columnKey) {\n",
        "380": "    return columnKeyToIndex.containsKey(columnKey);\n",
        "381": "  }\n",
        "382": "\n",
        "383": "  /**\n",
        "384": "   * Returns {@code true} if the provided row key is among the row keys\n",
        "385": "   * provided when the table was constructed.\n",
        "386": "   */\n",
        "387": "  @Override\n",
        "388": "  public boolean containsRow(@Nullable Object rowKey) {\n",
        "389": "    return rowKeyToIndex.containsKey(rowKey);\n",
        "390": "  }\n",
        "391": "\n",
        "392": "  @Override\n",
        "393": "  public boolean containsValue(@Nullable Object value) {\n",
        "394": "    for (V[] row : array) {\n",
        "395": "      for (V element : row) {\n",
        "396": "        if (Objects.equal(value, element)) {\n",
        "397": "          return true;\n",
        "398": "        }\n",
        "399": "      }\n",
        "400": "    }\n",
        "401": "    return false;\n",
        "402": "  }\n",
        "403": "\n",
        "404": "  @Override\n",
        "405": "  public V get(@Nullable Object rowKey, @Nullable Object columnKey) {\n",
        "406": "    Integer rowIndex = rowKeyToIndex.get(rowKey);\n",
        "407": "    Integer columnIndex = columnKeyToIndex.get(columnKey);\n",
        "408": "    return (rowIndex == null || columnIndex == null) ? null : at(rowIndex, columnIndex);\n",
        "409": "  }\n",
        "410": "\n",
        "411": "  /**\n",
        "412": "   * Always returns {@code false}.\n",
        "413": "   */\n",
        "414": "  @Override\n",
        "415": "  public boolean isEmpty() {\n",
        "416": "    return false;\n",
        "417": "  }\n",
        "418": "\n",
        "419": "  /**\n",
        "420": "   * {@inheritDoc}\n",
        "421": "   *\n",
        "422": "   * @throws IllegalArgumentException if {@code rowKey} is not in {@link\n",
        "423": "   *     #rowKeySet()} or {@code columnKey} is not in {@link #columnKeySet()}.\n",
        "424": "   */\n",
        "425": "  @Override\n",
        "426": "  public V put(R rowKey, C columnKey, @Nullable V value) {\n",
        "427": "    checkNotNull(rowKey);\n",
        "428": "    checkNotNull(columnKey);\n",
        "429": "    Integer rowIndex = rowKeyToIndex.get(rowKey);\n",
        "430": "    checkArgument(rowIndex != null, \"Row %s not in %s\", rowKey, rowList);\n",
        "431": "    Integer columnIndex = columnKeyToIndex.get(columnKey);\n",
        "432": "    checkArgument(columnIndex != null, \"Column %s not in %s\", columnKey, columnList);\n",
        "433": "    return set(rowIndex, columnIndex, value);\n",
        "434": "  }\n",
        "435": "\n",
        "436": "  /*\n",
        "437": "   * TODO(jlevy): Consider creating a merge() method, similar to putAll() but\n",
        "438": "   * copying non-null values only.\n",
        "439": "   */\n",
        "440": "\n",
        "441": "  /**\n",
        "442": "   * {@inheritDoc}\n",
        "443": "   *\n",
        "444": "   * <p>If {@code table} is an {@code ArrayTable}, its null values will be\n",
        "445": "   * stored in this table, possibly replacing values that were previously\n",
        "446": "   * non-null.\n",
        "447": "   *\n",
        "448": "   * @throws NullPointerException if {@code table} has a null key\n",
        "449": "   * @throws IllegalArgumentException if any of the provided table's row keys or\n",
        "450": "   *     column keys is not in {@link #rowKeySet()} or {@link #columnKeySet()}\n",
        "451": "   */\n",
        "452": "  @Override\n",
        "453": "  public void putAll(Table<? extends R, ? extends C, ? extends V> table) {\n",
        "454": "    super.putAll(table);\n",
        "455": "  }\n",
        "456": "\n",
        "457": "  /**\n",
        "458": "   * Not supported. Use {@link #erase} instead.\n",
        "459": "   *\n",
        "460": "   * @throws UnsupportedOperationException always\n",
        "461": "   * @deprecated Use {@link #erase}\n",
        "462": "   */\n",
        "463": "  @Override\n",
        "464": "  @Deprecated\n",
        "465": "  public V remove(Object rowKey, Object columnKey) {\n",
        "466": "    throw new UnsupportedOperationException();\n",
        "467": "  }\n",
        "468": "\n",
        "469": "  /**\n",
        "470": "   * Associates the value {@code null} with the specified keys, assuming both\n",
        "471": "   * keys are valid. If either key is null or isn't among the keys provided\n",
        "472": "   * during construction, this method has no effect.\n",
        "473": "   *\n",
        "474": "   * <p>This method is equivalent to {@code put(rowKey, columnKey, null)} when\n",
        "475": "   * both provided keys are valid.\n",
        "476": "   *\n",
        "477": "   * @param rowKey row key of mapping to be erased\n",
        "478": "   * @param columnKey column key of mapping to be erased\n",
        "479": "   * @return the value previously associated with the keys, or {@code null} if\n",
        "480": "   *     no mapping existed for the keys\n",
        "481": "   */\n",
        "482": "  public V erase(@Nullable Object rowKey, @Nullable Object columnKey) {\n",
        "483": "    Integer rowIndex = rowKeyToIndex.get(rowKey);\n",
        "484": "    Integer columnIndex = columnKeyToIndex.get(columnKey);\n",
        "485": "    if (rowIndex == null || columnIndex == null) {\n",
        "486": "      return null;\n",
        "487": "    }\n",
        "488": "    return set(rowIndex, columnIndex, null);\n",
        "489": "  }\n",
        "490": "\n",
        "491": "  // TODO(jlevy): Add eraseRow and eraseColumn methods?\n",
        "492": "\n",
        "493": "  @Override\n",
        "494": "  public int size() {\n",
        "495": "    return rowList.size() * columnList.size();\n",
        "496": "  }\n",
        "497": "\n",
        "498": "  /**\n",
        "499": "   * Returns an unmodifiable set of all row key / column key / value\n",
        "500": "   * triplets. Changes to the table will update the returned set.\n",
        "501": "   *\n",
        "502": "   * <p>The returned set's iterator traverses the mappings with the first row\n",
        "503": "   * key, the mappings with the second row key, and so on.\n",
        "504": "   *\n",
        "505": "   * <p>The value in the returned cells may change if the table subsequently\n",
        "506": "   * changes.\n",
        "507": "   *\n",
        "508": "   * @return set of table cells consisting of row key / column key / value\n",
        "509": "   *     triplets\n",
        "510": "   */\n",
        "511": "  @Override\n",
        "512": "  public Set<Cell<R, C, V>> cellSet() {\n",
        "513": "    return super.cellSet();\n",
        "514": "  }\n",
        "515": "\n",
        "516": "  @Override\n",
        "517": "  Iterator<Cell<R, C, V>> cellIterator() {\n",
        "518": "    return new AbstractIndexedListIterator<Cell<R, C, V>>(size()) {\n",
        "519": "      @Override\n",
        "520": "      protected Cell<R, C, V> get(final int index) {\n",
        "521": "        return new Tables.AbstractCell<R, C, V>() {\n",
        "522": "          final int rowIndex = index / columnList.size();\n",
        "523": "          final int columnIndex = index % columnList.size();\n",
        "524": "\n",
        "525": "          @Override\n",
        "526": "          public R getRowKey() {\n",
        "527": "            return rowList.get(rowIndex);\n",
        "528": "          }\n",
        "529": "\n",
        "530": "          @Override\n",
        "531": "          public C getColumnKey() {\n",
        "532": "            return columnList.get(columnIndex);\n",
        "533": "          }\n",
        "534": "\n",
        "535": "          @Override\n",
        "536": "          public V getValue() {\n",
        "537": "            return at(rowIndex, columnIndex);\n",
        "538": "          }\n",
        "539": "        };\n",
        "540": "      }\n",
        "541": "    };\n",
        "542": "  }\n",
        "543": "\n",
        "544": "  /**\n",
        "545": "   * Returns a view of all mappings that have the given column key. If the\n",
        "546": "   * column key isn't in {@link #columnKeySet()}, an empty immutable map is\n",
        "547": "   * returned.\n",
        "548": "   *\n",
        "549": "   * <p>Otherwise, for each row key in {@link #rowKeySet()}, the returned map\n",
        "550": "   * associates the row key with the corresponding value in the table. Changes\n",
        "551": "   * to the returned map will update the underlying table, and vice versa.\n",
        "552": "   *\n",
        "553": "   * @param columnKey key of column to search for in the table\n",
        "554": "   * @return the corresponding map from row keys to values\n",
        "555": "   */\n",
        "556": "  @Override\n",
        "557": "  public Map<R, V> column(C columnKey) {\n",
        "558": "    checkNotNull(columnKey);\n",
        "559": "    Integer columnIndex = columnKeyToIndex.get(columnKey);\n",
        "560": "    return (columnIndex == null) ? ImmutableMap.<R, V>of() : new Column(columnIndex);\n",
        "561": "  }\n",
        "562": "\n",
        "563": "  private class Column extends ArrayMap<R, V> {\n",
        "564": "    final int columnIndex;\n",
        "565": "\n",
        "566": "    Column(int columnIndex) {\n",
        "567": "      super(rowKeyToIndex);\n",
        "568": "      this.columnIndex = columnIndex;\n",
        "569": "    }\n",
        "570": "\n",
        "571": "    @Override\n",
        "572": "    String getKeyRole() {\n",
        "573": "      return \"Row\";\n",
        "574": "    }\n",
        "575": "\n",
        "576": "    @Override\n",
        "577": "    V getValue(int index) {\n",
        "578": "      return at(index, columnIndex);\n",
        "579": "    }\n",
        "580": "\n",
        "581": "    @Override\n",
        "582": "    V setValue(int index, V newValue) {\n",
        "583": "      return set(index, columnIndex, newValue);\n",
        "584": "    }\n",
        "585": "  }\n",
        "586": "\n",
        "587": "  /**\n",
        "588": "   * Returns an immutable set of the valid column keys, including those that\n",
        "589": "   * are associated with null values only.\n",
        "590": "   *\n",
        "591": "   * @return immutable set of column keys\n",
        "592": "   */\n",
        "593": "  @Override\n",
        "594": "  public ImmutableSet<C> columnKeySet() {\n",
        "595": "    return columnKeyToIndex.keySet();\n",
        "596": "  }\n",
        "597": "\n",
        "598": "  private transient ColumnMap columnMap;\n",
        "599": "\n",
        "600": "  @Override\n",
        "601": "  public Map<C, Map<R, V>> columnMap() {\n",
        "602": "    ColumnMap map = columnMap;\n",
        "603": "    return (map == null) ? columnMap = new ColumnMap() : map;\n",
        "604": "  }\n",
        "605": "\n",
        "606": "  @WeakOuter\n",
        "607": "  private class ColumnMap extends ArrayMap<C, Map<R, V>> {\n",
        "608": "    private ColumnMap() {\n",
        "609": "      super(columnKeyToIndex);\n",
        "610": "    }\n",
        "611": "\n",
        "612": "    @Override\n",
        "613": "    String getKeyRole() {\n",
        "614": "      return \"Column\";\n",
        "615": "    }\n",
        "616": "\n",
        "617": "    @Override\n",
        "618": "    Map<R, V> getValue(int index) {\n",
        "619": "      return new Column(index);\n",
        "620": "    }\n",
        "621": "\n",
        "622": "    @Override\n",
        "623": "    Map<R, V> setValue(int index, Map<R, V> newValue) {\n",
        "624": "      throw new UnsupportedOperationException();\n",
        "625": "    }\n",
        "626": "\n",
        "627": "    @Override\n",
        "628": "    public Map<R, V> put(C key, Map<R, V> value) {\n",
        "629": "      throw new UnsupportedOperationException();\n",
        "630": "    }\n",
        "631": "  }\n",
        "632": "\n",
        "633": "  /**\n",
        "634": "   * Returns a view of all mappings that have the given row key. If the\n",
        "635": "   * row key isn't in {@link #rowKeySet()}, an empty immutable map is\n",
        "636": "   * returned.\n",
        "637": "   *\n",
        "638": "   * <p>Otherwise, for each column key in {@link #columnKeySet()}, the returned\n",
        "639": "   * map associates the column key with the corresponding value in the\n",
        "640": "   * table. Changes to the returned map will update the underlying table, and\n",
        "641": "   * vice versa.\n",
        "642": "   *\n",
        "643": "   * @param rowKey key of row to search for in the table\n",
        "644": "   * @return the corresponding map from column keys to values\n",
        "645": "   */\n",
        "646": "  @Override\n",
        "647": "  public Map<C, V> row(R rowKey) {\n",
        "648": "    checkNotNull(rowKey);\n",
        "649": "    Integer rowIndex = rowKeyToIndex.get(rowKey);\n",
        "650": "    return (rowIndex == null) ? ImmutableMap.<C, V>of() : new Row(rowIndex);\n",
        "651": "  }\n",
        "652": "\n",
        "653": "  private class Row extends ArrayMap<C, V> {\n",
        "654": "    final int rowIndex;\n",
        "655": "\n",
        "656": "    Row(int rowIndex) {\n",
        "657": "      super(columnKeyToIndex);\n",
        "658": "      this.rowIndex = rowIndex;\n",
        "659": "    }\n",
        "660": "\n",
        "661": "    @Override\n",
        "662": "    String getKeyRole() {\n",
        "663": "      return \"Column\";\n",
        "664": "    }\n",
        "665": "\n",
        "666": "    @Override\n",
        "667": "    V getValue(int index) {\n",
        "668": "      return at(rowIndex, index);\n",
        "669": "    }\n",
        "670": "\n",
        "671": "    @Override\n",
        "672": "    V setValue(int index, V newValue) {\n",
        "673": "      return set(rowIndex, index, newValue);\n",
        "674": "    }\n",
        "675": "  }\n",
        "676": "\n",
        "677": "  /**\n",
        "678": "   * Returns an immutable set of the valid row keys, including those that are\n",
        "679": "   * associated with null values only.\n",
        "680": "   *\n",
        "681": "   * @return immutable set of row keys\n",
        "682": "   */\n",
        "683": "  @Override\n",
        "684": "  public ImmutableSet<R> rowKeySet() {\n",
        "685": "    return rowKeyToIndex.keySet();\n",
        "686": "  }\n",
        "687": "\n",
        "688": "  private transient RowMap rowMap;\n",
        "689": "\n",
        "690": "  @Override\n",
        "691": "  public Map<R, Map<C, V>> rowMap() {\n",
        "692": "    RowMap map = rowMap;\n",
        "693": "    return (map == null) ? rowMap = new RowMap() : map;\n",
        "694": "  }\n",
        "695": "\n",
        "696": "  @WeakOuter\n",
        "697": "  private class RowMap extends ArrayMap<R, Map<C, V>> {\n",
        "698": "    private RowMap() {\n",
        "699": "      super(rowKeyToIndex);\n",
        "700": "    }\n",
        "701": "\n",
        "702": "    @Override\n",
        "703": "    String getKeyRole() {\n",
        "704": "      return \"Row\";\n",
        "705": "    }\n",
        "706": "\n",
        "707": "    @Override\n",
        "708": "    Map<C, V> getValue(int index) {\n",
        "709": "      return new Row(index);\n",
        "710": "    }\n",
        "711": "\n",
        "712": "    @Override\n",
        "713": "    Map<C, V> setValue(int index, Map<C, V> newValue) {\n",
        "714": "      throw new UnsupportedOperationException();\n",
        "715": "    }\n",
        "716": "\n",
        "717": "    @Override\n",
        "718": "    public Map<C, V> put(R key, Map<C, V> value) {\n",
        "719": "      throw new UnsupportedOperationException();\n",
        "720": "    }\n",
        "721": "  }\n",
        "722": "\n",
        "723": "  /**\n",
        "724": "   * Returns an unmodifiable collection of all values, which may contain\n",
        "725": "   * duplicates. Changes to the table will update the returned collection.\n",
        "726": "   *\n",
        "727": "   * <p>The returned collection's iterator traverses the values of the first row\n",
        "728": "   * key, the values of the second row key, and so on.\n",
        "729": "   *\n",
        "730": "   * @return collection of values\n",
        "731": "   */\n",
        "732": "  @Override\n",
        "733": "  public Collection<V> values() {\n",
        "734": "    return super.values();\n",
        "735": "  }\n",
        "736": "\n",
        "737": "  private static final long serialVersionUID = 0;\n",
        "738": "}\n",
        "739": "\n"
    }
}