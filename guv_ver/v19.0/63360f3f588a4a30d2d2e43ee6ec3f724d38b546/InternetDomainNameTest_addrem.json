{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2009 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.net;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.base.Ascii;\n",
        "21": "import com.google.common.base.Strings;\n",
        "22": "import com.google.common.collect.ImmutableSet;\n",
        "23": "import com.google.common.collect.Iterables;\n",
        "24": "import com.google.common.testing.EqualsTester;\n",
        "25": "\n",
        "26": "import junit.framework.TestCase;\n",
        "27": "\n",
        "28": "/**\n",
        "29": " * {@link TestCase} for {@link InternetDomainName}.\n",
        "30": " *\n",
        "31": " * @author Craig Berry\n",
        "32": " */\n",
        "33": "@GwtCompatible(emulated = true)\n",
        "34": "public final class InternetDomainNameTest extends TestCase {\n",
        "35": "  private static final InternetDomainName UNICODE_EXAMPLE =\n",
        "36": "      InternetDomainName.from(\"j\\u00f8rpeland.no\");\n",
        "37": "  private static final InternetDomainName PUNYCODE_EXAMPLE =\n",
        "38": "      InternetDomainName.from(\"xn--jrpeland-54a.no\");\n",
        "39": "\n",
        "40": "  /**\n",
        "41": "   * The Greek letter delta, used in unicode testing.\n",
        "42": "   */\n",
        "43": "  private static final String DELTA = \"\\u0394\";\n",
        "44": "\n",
        "45": "  /**\n",
        "46": "   * A domain part which is valid under lenient validation, but invalid under\n",
        "47": "   * strict validation.\n",
        "48": "   */\n",
        "49": "  static final String LOTS_OF_DELTAS = Strings.repeat(DELTA, 62);\n",
        "50": "\n",
        "51": "  private static final String ALMOST_TOO_MANY_LEVELS =\n",
        "52": "      Strings.repeat(\"a.\", 127);\n",
        "53": "\n",
        "54": "  private static final String ALMOST_TOO_LONG =\n",
        "55": "      Strings.repeat(\"aaaaa.\", 40) + \"1234567890.c\";\n",
        "56": "\n",
        "57": "  private static final ImmutableSet<String> VALID_NAME = ImmutableSet.of(\n",
        "58": "      \"foo.com\",\n",
        "59": "      \"f-_-o.cOM\",\n",
        "60": "      \"f--1.com\",\n",
        "61": "      \"f11-1.com\",\n",
        "62": "      \"www\",\n",
        "63": "      \"abc.a23\",\n",
        "64": "      \"biz.com.ua\",\n",
        "65": "      \"x\",\n",
        "66": "      \"fOo\",\n",
        "67": "      \"f--o\",\n",
        "68": "      \"f_a\",\n",
        "69": "      \"foo.net.us\\uFF61ocm\",\n",
        "70": "      \"woo.com.\",\n",
        "71": "      \"a\" + DELTA + \"b.com\",\n",
        "72": "      ALMOST_TOO_MANY_LEVELS,\n",
        "73": "      ALMOST_TOO_LONG);\n",
        "74": "\n",
        "75": "  private static final ImmutableSet<String> INVALID_NAME = ImmutableSet.of(\n",
        "76": "      \"\",\n",
        "77": "      \" \",\n",
        "78": "      \"127.0.0.1\",\n",
        "79": "      \"::1\", \"13\",\n",
        "80": "      \"abc.12c\",\n",
        "81": "      \"foo-.com\",\n",
        "82": "      \"_bar.quux\",\n",
        "83": "      \"foo+bar.com\",\n",
        "84": "      \"foo!bar.com\",\n",
        "85": "      \".foo.com\",\n",
        "86": "      \"..bar.com\",\n",
        "87": "      \"baz..com\",\n",
        "88": "      \"..quiffle.com\",\n",
        "89": "      \"fleeb.com..\",\n",
        "90": "      \".\",\n",
        "91": "      \"..\",\n",
        "92": "      \"...\",\n",
        "93": "      \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.com\",\n",
        "94": "      \"a\" + DELTA + \" .com\",\n",
        "95": "      ALMOST_TOO_MANY_LEVELS + \"com\",\n",
        "96": "      ALMOST_TOO_LONG + \".c\");\n",
        "97": "\n",
        "98": "  private static final ImmutableSet<String> PS = ImmutableSet.of(\n",
        "99": "      \"com\",\n",
        "100": "      \"co.uk\",\n",
        "101": "      \"foo.bd\",\n",
        "102": "      \"xxxxxx.bd\",\n",
        "103": "      \"org.mK\",\n",
        "104": "      \"us\",\n",
        "105": "      \"uk\\uFF61com.\",  // Alternate dot character\n",
        "106": "      \"\\u7f51\\u7edc.Cn\",  // \"\u7f51\u7edc.Cn\"\n",
        "107": "      \"j\\u00f8rpeland.no\",  // \"jorpeland.no\" (first o slashed)\n",
        "108": "      \"xn--jrpeland-54a.no\"  // IDNA (punycode) encoding of above\n",
        "109": "  );\n",
        "110": "\n",
        "111": "  private static final ImmutableSet<String> NO_PS = ImmutableSet.of(\n",
        "112": "      \"www\", \"foo.ihopethiswillneverbeapublicsuffix\", \"x.y.z\");\n",
        "113": "\n",
        "114": "  private static final ImmutableSet<String> NON_PS = ImmutableSet.of(\n",
        "115": "      \"foo.bar.com\", \"foo.ca\", \"foo.bar.ca\",\n",
        "116": "      \"foo.bar.co.il\", \"state.CA.us\", \"www.state.pa.us\", \"pvt.k12.ca.us\",\n",
        "117": "      \"www.google.com\", \"www4.yahoo.co.uk\", \"home.netscape.com\",\n",
        "118": "      \"web.MIT.edu\", \"foo.eDu.au\", \"utenti.blah.IT\", \"dominio.com.co\");\n",
        "119": "\n",
        "120": "  private static final ImmutableSet<String> TOP_PRIVATE_DOMAIN =\n",
        "121": "      ImmutableSet.of(\"google.com\", \"foo.Co.uk\", \"foo.ca.us.\");\n",
        "122": "\n",
        "123": "  private static final ImmutableSet<String> UNDER_PRIVATE_DOMAIN =\n",
        "124": "      ImmutableSet.of(\"foo.bar.google.com\", \"a.b.co.uk\", \"x.y.ca.us\");\n",
        "125": "\n",
        "126": "  private static final ImmutableSet<String> VALID_IP_ADDRS = ImmutableSet.of(\n",
        "127": "      \"1.2.3.4\", \"127.0.0.1\", \"::1\", \"2001:db8::1\");\n",
        "128": "\n",
        "129": "  private static final ImmutableSet<String> INVALID_IP_ADDRS = ImmutableSet.of(\n",
        "130": "      \"\", \"1\", \"1.2.3\", \"...\", \"1.2.3.4.5\", \"400.500.600.700\",\n",
        "131": "      \":\", \":::1\", \"2001:db8:\");\n",
        "132": "\n",
        "133": "  private static final ImmutableSet<String> SOMEWHERE_UNDER_PS =\n",
        "134": "      ImmutableSet.of(\n",
        "135": "          \"foo.bar.google.com\",\n",
        "136": "          \"a.b.c.1.2.3.ca.us\",\n",
        "137": "          \"site.jp\",\n",
        "138": "          \"uomi-online.kir.jp\",\n",
        "139": "          \"jprs.co.jp\",\n",
        "140": "          \"site.quick.jp\",\n",
        "141": "          \"site.tenki.jp\",\n",
        "142": "          \"site.or.jp\",\n",
        "143": "          \"site.gr.jp\",\n",
        "144": "          \"site.ne.jp\",\n",
        "145": "          \"site.ac.jp\",\n",
        "146": "          \"site.ad.jp\",\n",
        "147": "          \"site.ed.jp\",\n",
        "148": "          \"site.geo.jp\",\n",
        "149": "          \"site.go.jp\",\n",
        "150": "          \"site.lg.jp\",\n",
        "151": "          \"1.fm\",\n",
        "152": "          \"site.cc\",\n",
        "153": "          \"site.ee\",\n",
        "154": "          \"site.fi\",\n",
        "155": "          \"site.fm\",\n",
        "156": "          \"site.gr\",\n",
        "157": "          \"www.leguide.ma\",\n",
        "158": "          \"site.ma\",\n",
        "159": "          \"some.org.mk\",\n",
        "160": "          \"site.mk\",\n",
        "161": "          \"site.tv\",\n",
        "162": "          \"site.us\",\n",
        "163": "          \"www.odev.us\",\n",
        "164": "          \"www.GOOGLE.com\",\n",
        "165": "          \"www.com\",\n",
        "166": "          \"google.com\",\n",
        "167": "          \"www7.google.co.uk\",\n",
        "168": "          \"google.Co.uK\",\n",
        "169": "          \"jobs.kt.com.\",\n",
        "170": "          \"home.netscape.com\",\n",
        "171": "          \"web.stanford.edu\",\n",
        "172": "          \"stanford.edu\",\n",
        "173": "          \"state.ca.us\",\n",
        "174": "          \"www.state.ca.us\",\n",
        "175": "          \"state.ca.us\",\n",
        "176": "          \"pvt.k12.ca.us\",\n",
        "177": "          \"www.rave.ca.\",\n",
        "178": "          \"cnn.ca\",\n",
        "179": "          \"ledger-enquirer.com\",\n",
        "180": "          \"it-trace.ch\",\n",
        "181": "          \"cool.dk\",\n",
        "182": "          \"cool.co.uk\",\n",
        "183": "          \"cool.de\",\n",
        "184": "          \"cool.es\",\n",
        "185": "          \"cool\\uFF61fr\", // Alternate dot character\n",
        "186": "          \"cool.nl\",\n",
        "187": "          \"members.blah.nl.\",\n",
        "188": "          \"cool.se\",\n",
        "189": "          \"utenti.blah.it\",\n",
        "190": "          \"kt.co\",\n",
        "191": "          \"a\\u7f51\\u7edcA.\\u7f51\\u7edc.Cn\"  // \"a\u7f51\u7edcA.\u7f51\u7edc.Cn\"\n",
        "192": "      );\n",
        "193": "\n",
        "194": "  public void testValid() {\n",
        "195": "    for (String name : VALID_NAME) {\n",
        "196": "      InternetDomainName.from(name);\n",
        "197": "    }\n",
        "198": "  }\n",
        "199": "\n",
        "200": "  public void testInvalid() {\n",
        "201": "    for (String name : INVALID_NAME) {\n",
        "202": "      try {\n",
        "203": "        InternetDomainName.from(name);\n",
        "204": "        fail(\"Should have been invalid: '\" + name + \"'\");\n",
        "205": "      } catch (IllegalArgumentException expected) {\n",
        "206": "        // Expected case\n",
        "207": "      }\n",
        "208": "    }\n",
        "209": "  }\n",
        "210": "\n",
        "211": "  public void testPublicSuffix() {\n",
        "212": "    for (String name : PS) {\n",
        "213": "      final InternetDomainName domain = InternetDomainName.from(name);\n",
        "214": "      assertTrue(name, domain.isPublicSuffix());\n",
        "215": "      assertTrue(name, domain.hasPublicSuffix());\n",
        "216": "      assertFalse(name, domain.isUnderPublicSuffix());\n",
        "217": "      assertFalse(name, domain.isTopPrivateDomain());\n",
        "218": "      assertEquals(domain, domain.publicSuffix());\n",
        "219": "    }\n",
        "220": "\n",
        "221": "    for (String name : NO_PS) {\n",
        "222": "      final InternetDomainName domain = InternetDomainName.from(name);\n",
        "223": "      assertFalse(name, domain.isPublicSuffix());\n",
        "224": "      assertFalse(name, domain.hasPublicSuffix());\n",
        "225": "      assertFalse(name, domain.isUnderPublicSuffix());\n",
        "226": "      assertFalse(name, domain.isTopPrivateDomain());\n",
        "227": "      assertNull(domain.publicSuffix());\n",
        "228": "    }\n",
        "229": "\n",
        "230": "    for (String name : NON_PS) {\n",
        "231": "      final InternetDomainName domain = InternetDomainName.from(name);\n",
        "232": "      assertFalse(name, domain.isPublicSuffix());\n",
        "233": "      assertTrue(name, domain.hasPublicSuffix());\n",
        "234": "      assertTrue(name, domain.isUnderPublicSuffix());\n",
        "235": "    }\n",
        "236": "  }\n",
        "237": "\n",
        "238": "  public void testUnderPublicSuffix() {\n",
        "239": "    for (String name : SOMEWHERE_UNDER_PS) {\n",
        "240": "      final InternetDomainName domain = InternetDomainName.from(name);\n",
        "241": "      assertFalse(name, domain.isPublicSuffix());\n",
        "242": "      assertTrue(name, domain.hasPublicSuffix());\n",
        "243": "      assertTrue(name, domain.isUnderPublicSuffix());\n",
        "244": "    }\n",
        "245": "  }\n",
        "246": "\n",
        "247": "  public void testTopPrivateDomain() {\n",
        "248": "    for (String name : TOP_PRIVATE_DOMAIN) {\n",
        "249": "      final InternetDomainName domain = InternetDomainName.from(name);\n",
        "250": "      assertFalse(name, domain.isPublicSuffix());\n",
        "251": "      assertTrue(name, domain.hasPublicSuffix());\n",
        "252": "      assertTrue(name, domain.isUnderPublicSuffix());\n",
        "253": "      assertTrue(name, domain.isTopPrivateDomain());\n",
        "254": "      assertEquals(domain.parent(), domain.publicSuffix());\n",
        "255": "    }\n",
        "256": "  }\n",
        "257": "\n",
        "258": "  public void testUnderPrivateDomain() {\n",
        "259": "    for (String name : UNDER_PRIVATE_DOMAIN) {\n",
        "260": "      final InternetDomainName domain = InternetDomainName.from(name);\n",
        "261": "      assertFalse(name, domain.isPublicSuffix());\n",
        "262": "      assertTrue(name, domain.hasPublicSuffix());\n",
        "263": "      assertTrue(name, domain.isUnderPublicSuffix());\n",
        "264": "      assertFalse(name, domain.isTopPrivateDomain());\n",
        "265": "    }\n",
        "266": "  }\n",
        "267": "\n",
        "268": "  public void testParent() {\n",
        "269": "    assertEquals(\n",
        "270": "        \"com\",\n",
        "271": "        InternetDomainName.from(\"google.com\").parent().toString());\n",
        "272": "    assertEquals(\n",
        "273": "        \"uk\",\n",
        "274": "        InternetDomainName.from(\"co.uk\").parent().toString());\n",
        "275": "    assertEquals(\n",
        "276": "        \"google.com\",\n",
        "277": "        InternetDomainName.from(\"www.google.com\").parent().toString());\n",
        "278": "\n",
        "279": "    try {\n",
        "280": "      InternetDomainName.from(\"com\").parent();\n",
        "281": "      fail(\"'com' should throw ISE on .parent() call\");\n",
        "282": "    } catch (IllegalStateException expected) {\n",
        "283": "    }\n",
        "284": "  }\n",
        "285": "\n",
        "286": "  public void testChild() {\n",
        "287": "    InternetDomainName domain = InternetDomainName.from(\"foo.com\");\n",
        "288": "\n",
        "289": "    assertEquals(\"www.foo.com\", domain.child(\"www\").toString());\n",
        "290": "\n",
        "291": "    try {\n",
        "292": "      domain.child(\"www.\");\n",
        "293": "      fail(\"www..google.com should have been invalid\");\n",
        "294": "    } catch (IllegalArgumentException expected) {\n",
        "295": "      // Expected outcome\n",
        "296": "    }\n",
        "297": "  }\n",
        "298": "\n",
        "299": "  public void testParentChild() {\n",
        "300": "    InternetDomainName origin = InternetDomainName.from(\"foo.com\");\n",
        "301": "    InternetDomainName parent = origin.parent();\n",
        "302": "    assertEquals(\"com\", parent.toString());\n",
        "303": "\n",
        "304": "    // These would throw an exception if leniency were not preserved during parent() and child()\n",
        "305": "    // calls.\n",
        "306": "    InternetDomainName child = parent.child(LOTS_OF_DELTAS);\n",
        "307": "    child.child(LOTS_OF_DELTAS);\n",
        "308": "  }\n",
        "309": "\n",
        "310": "  public void testValidTopPrivateDomain() {\n",
        "311": "    InternetDomainName googleDomain = InternetDomainName.from(\"google.com\");\n",
        "312": "\n",
        "313": "    assertEquals(googleDomain, googleDomain.topPrivateDomain());\n",
        "314": "    assertEquals(googleDomain, googleDomain.child(\"mail\").topPrivateDomain());\n",
        "315": "    assertEquals(googleDomain, googleDomain.child(\"foo.bar\").topPrivateDomain());\n",
        "316": "  }\n",
        "317": "\n",
        "318": "  public void testInvalidTopPrivateDomain() {\n",
        "319": "    ImmutableSet<String> badCookieDomains =\n",
        "320": "        ImmutableSet.of(\"co.uk\", \"foo\", \"com\");\n",
        "321": "\n",
        "322": "    for (String domain : badCookieDomains) {\n",
        "323": "      try {\n",
        "324": "        InternetDomainName.from(domain).topPrivateDomain();\n",
        "325": "        fail(domain);\n",
        "326": "      } catch (IllegalStateException expected) {\n",
        "327": "      }\n",
        "328": "    }\n",
        "329": "  }\n",
        "330": "\n",
        "331": "  public void testIsValid() {\n",
        "332": "    final Iterable<String> validCases = Iterables.concat(\n",
        "333": "        VALID_NAME, PS, NO_PS, NON_PS);\n",
        "334": "    final Iterable<String> invalidCases = Iterables.concat(\n",
        "335": "        INVALID_NAME, VALID_IP_ADDRS, INVALID_IP_ADDRS);\n",
        "336": "\n",
        "337": "    for (String valid : validCases) {\n",
        "338": "      assertTrue(valid, InternetDomainName.isValid(valid));\n",
        "339": "    }\n",
        "340": "\n",
        "341": "    for (String invalid : invalidCases) {\n",
        "342": "      assertFalse(invalid, InternetDomainName.isValid(invalid));\n",
        "343": "    }\n",
        "344": "  }\n",
        "345": "\n",
        "346": "  public void testToString() {\n",
        "347": "    for (String inputName : SOMEWHERE_UNDER_PS) {\n",
        "348": "      InternetDomainName domain = InternetDomainName.from(inputName);\n",
        "349": "\n",
        "350": "      /*\n",
        "351": "       * We would ordinarily use constants for the expected results, but\n",
        "352": "       * doing it by derivation allows us to reuse the test case definitions\n",
        "353": "       * used in other tests.\n",
        "354": "       */\n",
        "355": "\n",
        "356": "      String expectedName = Ascii.toLowerCase(inputName);\n",
        "357": "      expectedName = expectedName.replaceAll(\"[\\u3002\\uFF0E\\uFF61]\", \".\");\n",
        "358": "\n",
        "359": "      if (expectedName.endsWith(\".\")) {\n",
        "360": "        expectedName = expectedName.substring(0, expectedName.length() - 1);\n",
        "361": "      }\n",
        "362": "\n",
        "363": "      assertEquals(expectedName, domain.toString());\n",
        "364": "    }\n",
        "365": "  }\n",
        "366": "\n",
        "367": "  public void testExclusion() {\n",
        "368": "    InternetDomainName domain = InternetDomainName.from(\"foo.teledata.mz\");\n",
        "369": "    assertTrue(domain.hasPublicSuffix());\n",
        "370": "    assertEquals(\"mz\", domain.publicSuffix().toString());\n",
        "371": "\n",
        "372": "    // Behold the weirdness!\n",
        "373": "    assertFalse(domain.publicSuffix().isPublicSuffix());\n",
        "374": "  }\n",
        "375": "\n",
        "376": "  public void testMultipleUnders() {\n",
        "377": "    // PSL has both *.uk and *.sch.uk; the latter should win.\n",
        "378": "    // See http://code.google.com/p/guava-libraries/issues/detail?id=1176\n",
        "379": "\n",
        "380": "    InternetDomainName domain = InternetDomainName.from(\"www.essex.sch.uk\");\n",
        "381": "    assertTrue(domain.hasPublicSuffix());\n",
        "382": "    assertEquals(\"essex.sch.uk\", domain.publicSuffix().toString());\n",
        "383": "    assertEquals(\"www.essex.sch.uk\", domain.topPrivateDomain().toString());\n",
        "384": "  }\n",
        "385": "\n",
        "386": "  public void testEquality() {\n",
        "387": "    new EqualsTester()\n",
        "388": "        .addEqualityGroup(\n",
        "389": "            idn(\"google.com\"), idn(\"google.com\"), idn(\"GOOGLE.COM\"))\n",
        "390": "        .addEqualityGroup(idn(\"www.google.com\"))\n",
        "391": "        .addEqualityGroup(UNICODE_EXAMPLE)\n",
        "392": "        .addEqualityGroup(PUNYCODE_EXAMPLE)\n",
        "393": "        .testEquals();\n",
        "394": "  }\n",
        "395": "\n",
        "396": "  private static InternetDomainName idn(String domain) {\n",
        "397": "    return InternetDomainName.from(domain);\n",
        "398": "  }\n",
        "399": "}\n"
    }
}