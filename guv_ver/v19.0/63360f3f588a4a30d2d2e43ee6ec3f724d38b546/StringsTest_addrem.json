{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2010 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.base;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "\n",
        "21": "import junit.framework.TestCase;\n",
        "22": "\n",
        "23": "/**\n",
        "24": " * Unit test for {@link Strings}.\n",
        "25": " *\n",
        "26": " * @author Kevin Bourrillion\n",
        "27": " */\n",
        "28": "@GwtCompatible(emulated = true)\n",
        "29": "public class StringsTest extends TestCase {\n",
        "30": "  public void testNullToEmpty() {\n",
        "31": "    assertEquals(\"\", Strings.nullToEmpty(null));\n",
        "32": "    assertEquals(\"\", Strings.nullToEmpty(\"\"));\n",
        "33": "    assertEquals(\"a\", Strings.nullToEmpty(\"a\"));\n",
        "34": "  }\n",
        "35": "\n",
        "36": "  public void testEmptyToNull() {\n",
        "37": "    assertNull(Strings.emptyToNull(null));\n",
        "38": "    assertNull(Strings.emptyToNull(\"\"));\n",
        "39": "    assertEquals(\"a\", Strings.emptyToNull(\"a\"));\n",
        "40": "  }\n",
        "41": "\n",
        "42": "  public void testIsNullOrEmpty() {\n",
        "43": "    assertTrue(Strings.isNullOrEmpty(null));\n",
        "44": "    assertTrue(Strings.isNullOrEmpty(\"\"));\n",
        "45": "    assertFalse(Strings.isNullOrEmpty(\"a\"));\n",
        "46": "  }\n",
        "47": "\n",
        "48": "  public void testPadStart_noPadding() {\n",
        "49": "    assertSame(\"\", Strings.padStart(\"\", 0, '-'));\n",
        "50": "    assertSame(\"x\", Strings.padStart(\"x\", 0, '-'));\n",
        "51": "    assertSame(\"x\", Strings.padStart(\"x\", 1, '-'));\n",
        "52": "    assertSame(\"xx\", Strings.padStart(\"xx\", 0, '-'));\n",
        "53": "    assertSame(\"xx\", Strings.padStart(\"xx\", 2, '-'));\n",
        "54": "  }\n",
        "55": "\n",
        "56": "  public void testPadStart_somePadding() {\n",
        "57": "    assertEquals(\"-\", Strings.padStart(\"\", 1, '-'));\n",
        "58": "    assertEquals(\"--\", Strings.padStart(\"\", 2, '-'));\n",
        "59": "    assertEquals(\"-x\", Strings.padStart(\"x\", 2, '-'));\n",
        "60": "    assertEquals(\"--x\", Strings.padStart(\"x\", 3, '-'));\n",
        "61": "    assertEquals(\"-xx\", Strings.padStart(\"xx\", 3, '-'));\n",
        "62": "  }\n",
        "63": "\n",
        "64": "  public void testPadStart_negativeMinLength() {\n",
        "65": "    assertSame(\"x\", Strings.padStart(\"x\", -1, '-'));\n",
        "66": "  }\n",
        "67": "\n",
        "68": "  // TODO: could remove if we got NPT working in GWT somehow\n",
        "69": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "70": "  public void testPadStart_null() {\n",
        "71": "    try {\n",
        "72": "      Strings.padStart(null, 5, '0');\n",
        "73": "      fail();\n",
        "74": "    } catch (NullPointerException expected) {\n",
        "75": "    }\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  public void testPadEnd_noPadding() {\n",
        "79": "    assertSame(\"\", Strings.padEnd(\"\", 0, '-'));\n",
        "80": "    assertSame(\"x\", Strings.padEnd(\"x\", 0, '-'));\n",
        "81": "    assertSame(\"x\", Strings.padEnd(\"x\", 1, '-'));\n",
        "82": "    assertSame(\"xx\", Strings.padEnd(\"xx\", 0, '-'));\n",
        "83": "    assertSame(\"xx\", Strings.padEnd(\"xx\", 2, '-'));\n",
        "84": "  }\n",
        "85": "\n",
        "86": "  public void testPadEnd_somePadding() {\n",
        "87": "    assertEquals(\"-\", Strings.padEnd(\"\", 1, '-'));\n",
        "88": "    assertEquals(\"--\", Strings.padEnd(\"\", 2, '-'));\n",
        "89": "    assertEquals(\"x-\", Strings.padEnd(\"x\", 2, '-'));\n",
        "90": "    assertEquals(\"x--\", Strings.padEnd(\"x\", 3, '-'));\n",
        "91": "    assertEquals(\"xx-\", Strings.padEnd(\"xx\", 3, '-'));\n",
        "92": "  }\n",
        "93": "\n",
        "94": "  public void testPadEnd_negativeMinLength() {\n",
        "95": "    assertSame(\"x\", Strings.padEnd(\"x\", -1, '-'));\n",
        "96": "  }\n",
        "97": "\n",
        "98": "  // TODO: could remove if we got NPT working in GWT somehow\n",
        "99": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "100": "  public void testPadEnd_null() {\n",
        "101": "    try {\n",
        "102": "      Strings.padEnd(null, 5, '0');\n",
        "103": "      fail();\n",
        "104": "    } catch (NullPointerException expected) {\n",
        "105": "    }\n",
        "106": "  }\n",
        "107": "\n",
        "108": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "109": "  public void testRepeat() {\n",
        "110": "    String input = \"20\";\n",
        "111": "    assertEquals(\"\", Strings.repeat(input, 0));\n",
        "112": "    assertEquals(\"20\", Strings.repeat(input, 1));\n",
        "113": "    assertEquals(\"2020\", Strings.repeat(input, 2));\n",
        "114": "    assertEquals(\"202020\", Strings.repeat(input, 3));\n",
        "115": "\n",
        "116": "    assertEquals(\"\", Strings.repeat(\"\", 4));\n",
        "117": "\n",
        "118": "    for (int i = 0; i < 100; ++i) {\n",
        "119": "      assertEquals(2 * i, Strings.repeat(input, i).length());\n",
        "120": "    }\n",
        "121": "\n",
        "122": "    try {\n",
        "123": "      Strings.repeat(\"x\", -1);\n",
        "124": "      fail();\n",
        "125": "    } catch (IllegalArgumentException expected) {\n",
        "126": "    }\n",
        "127": "    try {\n",
        "128": "      // Massive string\n",
        "129": "      Strings.repeat(\"12345678\", (1 << 30) + 3);\n",
        "130": "      fail();\n",
        "131": "    } catch (ArrayIndexOutOfBoundsException expected) {\n",
        "132": "    }\n",
        "133": "  }\n",
        "134": "\n",
        "135": "  // TODO: could remove if we got NPT working in GWT somehow\n",
        "136": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "137": "  public void testRepeat_null() {\n",
        "138": "    try {\n",
        "139": "      Strings.repeat(null, 5);\n",
        "140": "      fail();\n",
        "141": "    } catch (NullPointerException expected) {\n",
        "142": "    }\n",
        "143": "  }\n",
        "144": "\n",
        "145": "  public void testCommonPrefix() {\n",
        "146": "    assertEquals(\"\", Strings.commonPrefix(\"\", \"\"));\n",
        "147": "    assertEquals(\"\", Strings.commonPrefix(\"abc\", \"\"));\n",
        "148": "    assertEquals(\"\", Strings.commonPrefix(\"\", \"abc\"));\n",
        "149": "    assertEquals(\"\", Strings.commonPrefix(\"abcde\", \"xyz\"));\n",
        "150": "    assertEquals(\"\", Strings.commonPrefix(\"xyz\", \"abcde\"));\n",
        "151": "    assertEquals(\"\", Strings.commonPrefix(\"xyz\", \"abcxyz\"));\n",
        "152": "    assertEquals(\"a\", Strings.commonPrefix(\"abc\", \"aaaaa\"));\n",
        "153": "    assertEquals(\"aa\", Strings.commonPrefix(\"aa\", \"aaaaa\"));\n",
        "154": "    assertEquals(\"abc\",\n",
        "155": "        Strings.commonPrefix(new StringBuffer(\"abcdef\"), \"abcxyz\"));\n",
        "156": "\n",
        "157": "    // Identical valid surrogate pairs.\n",
        "158": "    assertEquals(\"abc\\uD8AB\\uDCAB\",\n",
        "159": "        Strings.commonPrefix(\"abc\\uD8AB\\uDCABdef\", \"abc\\uD8AB\\uDCABxyz\"));\n",
        "160": "    // Differing valid surrogate pairs.\n",
        "161": "    assertEquals(\"abc\",\n",
        "162": "        Strings.commonPrefix(\"abc\\uD8AB\\uDCABdef\", \"abc\\uD8AB\\uDCACxyz\"));\n",
        "163": "    // One invalid pair.\n",
        "164": "    assertEquals(\"abc\",\n",
        "165": "        Strings.commonPrefix(\"abc\\uD8AB\\uDCABdef\", \"abc\\uD8AB\\uD8ABxyz\"));\n",
        "166": "    // Two identical invalid pairs.\n",
        "167": "    assertEquals(\"abc\\uD8AB\\uD8AC\",\n",
        "168": "        Strings.commonPrefix(\"abc\\uD8AB\\uD8ACdef\", \"abc\\uD8AB\\uD8ACxyz\"));\n",
        "169": "    // Two differing invalid pairs.\n",
        "170": "    assertEquals(\"abc\\uD8AB\",\n",
        "171": "        Strings.commonPrefix(\"abc\\uD8AB\\uD8ABdef\", \"abc\\uD8AB\\uD8ACxyz\"));\n",
        "172": "    // One orphan high surrogate.\n",
        "173": "    assertEquals(\"\", Strings.commonPrefix(\"\\uD8AB\\uDCAB\", \"\\uD8AB\"));\n",
        "174": "    // Two orphan high surrogates.\n",
        "175": "    assertEquals(\"\\uD8AB\", Strings.commonPrefix(\"\\uD8AB\", \"\\uD8AB\"));\n",
        "176": "  }\n",
        "177": "\n",
        "178": "  public void testCommonSuffix() {\n",
        "179": "    assertEquals(\"\", Strings.commonSuffix(\"\", \"\"));\n",
        "180": "    assertEquals(\"\", Strings.commonSuffix(\"abc\", \"\"));\n",
        "181": "    assertEquals(\"\", Strings.commonSuffix(\"\", \"abc\"));\n",
        "182": "    assertEquals(\"\", Strings.commonSuffix(\"abcde\", \"xyz\"));\n",
        "183": "    assertEquals(\"\", Strings.commonSuffix(\"xyz\", \"abcde\"));\n",
        "184": "    assertEquals(\"\", Strings.commonSuffix(\"xyz\", \"xyzabc\"));\n",
        "185": "    assertEquals(\"c\", Strings.commonSuffix(\"abc\", \"ccccc\"));\n",
        "186": "    assertEquals(\"aa\", Strings.commonSuffix(\"aa\", \"aaaaa\"));\n",
        "187": "    assertEquals(\"abc\",\n",
        "188": "        Strings.commonSuffix(new StringBuffer(\"xyzabc\"), \"xxxabc\"));\n",
        "189": "\n",
        "190": "    // Identical valid surrogate pairs.\n",
        "191": "    assertEquals(\"\\uD8AB\\uDCABdef\",\n",
        "192": "        Strings.commonSuffix(\"abc\\uD8AB\\uDCABdef\", \"xyz\\uD8AB\\uDCABdef\"));\n",
        "193": "    // Differing valid surrogate pairs.\n",
        "194": "    assertEquals(\"def\",\n",
        "195": "        Strings.commonSuffix(\"abc\\uD8AB\\uDCABdef\", \"abc\\uD8AC\\uDCABdef\"));\n",
        "196": "    // One invalid pair.\n",
        "197": "    assertEquals(\"def\",\n",
        "198": "        Strings.commonSuffix(\"abc\\uD8AB\\uDCABdef\", \"xyz\\uDCAB\\uDCABdef\"));\n",
        "199": "    // Two identical invalid pairs.\n",
        "200": "    assertEquals(\"\\uD8AB\\uD8ABdef\",\n",
        "201": "        Strings.commonSuffix(\"abc\\uD8AB\\uD8ABdef\", \"xyz\\uD8AB\\uD8ABdef\"));\n",
        "202": "    // Two differing invalid pairs.\n",
        "203": "    assertEquals(\"\\uDCABdef\",\n",
        "204": "        Strings.commonSuffix(\"abc\\uDCAB\\uDCABdef\", \"abc\\uDCAC\\uDCABdef\"));\n",
        "205": "    // One orphan low surrogate.\n",
        "206": "    assertEquals(\"\", Strings.commonSuffix(\"x\\uD8AB\\uDCAB\", \"\\uDCAB\"));\n",
        "207": "    // Two orphan low surrogates.\n",
        "208": "    assertEquals(\"\\uDCAB\", Strings.commonSuffix(\"\\uDCAB\", \"\\uDCAB\"));\n",
        "209": "  }\n",
        "210": "\n",
        "211": "  public void testValidSurrogatePairAt() {\n",
        "212": "    assertTrue(Strings.validSurrogatePairAt(\"\\uD8AB\\uDCAB\", 0));\n",
        "213": "    assertTrue(Strings.validSurrogatePairAt(\"abc\\uD8AB\\uDCAB\", 3));\n",
        "214": "    assertTrue(Strings.validSurrogatePairAt(\"abc\\uD8AB\\uDCABxyz\", 3));\n",
        "215": "    assertFalse(Strings.validSurrogatePairAt(\"\\uD8AB\\uD8AB\", 0));\n",
        "216": "    assertFalse(Strings.validSurrogatePairAt(\"\\uDCAB\\uDCAB\", 0));\n",
        "217": "    assertFalse(Strings.validSurrogatePairAt(\"\\uD8AB\\uDCAB\", -1));\n",
        "218": "    assertFalse(Strings.validSurrogatePairAt(\"\\uD8AB\\uDCAB\", 1));\n",
        "219": "    assertFalse(Strings.validSurrogatePairAt(\"\\uD8AB\\uDCAB\", -2));\n",
        "220": "    assertFalse(Strings.validSurrogatePairAt(\"\\uD8AB\\uDCAB\", 2));\n",
        "221": "    assertFalse(Strings.validSurrogatePairAt(\"x\\uDCAB\", 0));\n",
        "222": "    assertFalse(Strings.validSurrogatePairAt(\"\\uD8ABx\", 0));\n",
        "223": "  }\n",
        "224": "}\n",
        "225": "\n"
    }
}