{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2006 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "6": " *\n",
        "7": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "8": " *\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "13": " */\n",
        "14": "\n",
        "15": "package com.google.common.util.concurrent;\n",
        "16": "\n",
        "17": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "\n",
        "21": "import java.util.concurrent.ExecutionException;\n",
        "22": "import java.util.concurrent.Executor;\n",
        "23": "import java.util.concurrent.TimeUnit;\n",
        "24": "import java.util.logging.Level;\n",
        "25": "import java.util.logging.Logger;\n",
        "26": "\n",
        "27": "import javax.annotation.Nullable;\n",
        "28": "\n",
        "29": "/**\n",
        "30": " * Implementations of {@code Futures.immediate*}.\n",
        "31": " */\n",
        "32": "@GwtCompatible(emulated = true)\n",
        "33": "abstract class ImmediateFuture<V> implements ListenableFuture<V> {\n",
        "34": "  /*\n",
        "35": "   * TODO(lukes): Use AbstractFuture.TrustedFuture instead of special classes so that get() throws\n",
        "36": "   * InterruptedException when appropriate, and, more importantly for failed/cancelled Futures, we\n",
        "37": "   * can take advantage of the TrustedFuture optimizations.\n",
        "38": "   */\n",
        "39": "  private static final Logger log = Logger.getLogger(ImmediateFuture.class.getName());\n",
        "40": "\n",
        "41": "  @Override\n",
        "42": "  public void addListener(Runnable listener, Executor executor) {\n",
        "43": "    checkNotNull(listener, \"Runnable was null.\");\n",
        "44": "    checkNotNull(executor, \"Executor was null.\");\n",
        "45": "    try {\n",
        "46": "      executor.execute(listener);\n",
        "47": "    } catch (RuntimeException e) {\n",
        "48": "      // ListenableFuture's contract is that it will not throw unchecked exceptions, so log the bad\n",
        "49": "      // runnable and/or executor and swallow it.\n",
        "50": "      log.log(\n",
        "51": "          Level.SEVERE,\n",
        "52": "          \"RuntimeException while executing runnable \" + listener + \" with executor \" + executor,\n",
        "53": "          e);\n",
        "54": "    }\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  @Override\n",
        "58": "  public boolean cancel(boolean mayInterruptIfRunning) {\n",
        "59": "    return false;\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  @Override\n",
        "63": "  public abstract V get() throws ExecutionException;\n",
        "64": "\n",
        "65": "  @Override\n",
        "66": "  public V get(long timeout, TimeUnit unit) throws ExecutionException {\n",
        "67": "    checkNotNull(unit);\n",
        "68": "    return get();\n",
        "69": "  }\n",
        "70": "\n",
        "71": "  @Override\n",
        "72": "  public boolean isCancelled() {\n",
        "73": "    return false;\n",
        "74": "  }\n",
        "75": "\n",
        "76": "  @Override\n",
        "77": "  public boolean isDone() {\n",
        "78": "    return true;\n",
        "79": "  }\n",
        "80": "\n",
        "81": "  static class ImmediateSuccessfulFuture<V> extends ImmediateFuture<V> {\n",
        "82": "    static final ImmediateSuccessfulFuture<Object> NULL =\n",
        "83": "        new ImmediateSuccessfulFuture<Object>(null);\n",
        "84": "    @Nullable private final V value;\n",
        "85": "\n",
        "86": "    ImmediateSuccessfulFuture(@Nullable V value) {\n",
        "87": "      this.value = value;\n",
        "88": "    }\n",
        "89": "\n",
        "90": "    @Override\n",
        "91": "    public V get() {\n",
        "92": "      return value;\n",
        "93": "    }\n",
        "94": "  }\n",
        "95": "\n",
        "96": "  static class ImmediateFailedFuture<V> extends ImmediateFuture<V> {\n",
        "97": "    private final Throwable thrown;\n",
        "98": "\n",
        "99": "    ImmediateFailedFuture(Throwable thrown) {\n",
        "100": "      this.thrown = thrown;\n",
        "101": "    }\n",
        "102": "\n",
        "103": "    @Override\n",
        "104": "    public V get() throws ExecutionException {\n",
        "105": "      throw new ExecutionException(thrown);\n",
        "106": "    }\n",
        "107": "  }\n",
        "108": "}\n",
        "109": "\n"
    }
}