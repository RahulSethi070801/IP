{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.collect.testing.SortedMapInterfaceTest;\n",
        "23": "\n",
        "24": "import java.util.Collections;\n",
        "25": "import java.util.Comparator;\n",
        "26": "import java.util.Map;\n",
        "27": "import java.util.Set;\n",
        "28": "import java.util.SortedMap;\n",
        "29": "\n",
        "30": "/**\n",
        "31": " * Test cases for {@link TreeBasedTable}.\n",
        "32": " *\n",
        "33": " * @author Jared Levy\n",
        "34": " * @author Louis Wasserman\n",
        "35": " */\n",
        "36": "@GwtCompatible(emulated = true)\n",
        "37": "public class TreeBasedTableTest extends AbstractTableTest {\n",
        "38": "\n",
        "39": "  public static class TreeRowTest extends\n",
        "40": "      SortedMapInterfaceTest<String, String> {\n",
        "41": "    public TreeRowTest() {\n",
        "42": "      super(false, false, true, true, true);\n",
        "43": "    }\n",
        "44": "\n",
        "45": "    @Override protected SortedMap<String, String> makeEmptyMap() {\n",
        "46": "      TreeBasedTable<String, String, String> table = TreeBasedTable.create();\n",
        "47": "      table.put(\"a\", \"b\", \"c\");\n",
        "48": "      table.put(\"c\", \"b\", \"a\");\n",
        "49": "      table.put(\"a\", \"a\", \"d\");\n",
        "50": "      return table.row(\"b\");\n",
        "51": "    }\n",
        "52": "\n",
        "53": "    @Override protected SortedMap<String, String> makePopulatedMap() {\n",
        "54": "      TreeBasedTable<String, String, String> table = TreeBasedTable.create();\n",
        "55": "      table.put(\"a\", \"b\", \"c\");\n",
        "56": "      table.put(\"c\", \"b\", \"a\");\n",
        "57": "      table.put(\"b\", \"b\", \"x\");\n",
        "58": "      table.put(\"b\", \"c\", \"y\");\n",
        "59": "      table.put(\"b\", \"x\", \"n\");\n",
        "60": "      table.put(\"a\", \"a\", \"d\");\n",
        "61": "      return table.row(\"b\");\n",
        "62": "    }\n",
        "63": "\n",
        "64": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "65": "      return \"q\";\n",
        "66": "    }\n",
        "67": "\n",
        "68": "    @Override protected String getValueNotInPopulatedMap() {\n",
        "69": "      return \"p\";\n",
        "70": "    }\n",
        "71": "\n",
        "72": "    public void testClearSubMapOfRowMap() {\n",
        "73": "      TreeBasedTable<String, String, String> table = TreeBasedTable.create();\n",
        "74": "      table.put(\"a\", \"b\", \"c\");\n",
        "75": "      table.put(\"c\", \"b\", \"a\");\n",
        "76": "      table.put(\"b\", \"b\", \"x\");\n",
        "77": "      table.put(\"b\", \"c\", \"y\");\n",
        "78": "      table.put(\"b\", \"x\", \"n\");\n",
        "79": "      table.put(\"a\", \"a\", \"d\");\n",
        "80": "      table.row(\"b\").subMap(\"c\", \"x\").clear();\n",
        "81": "      assertEquals(table.row(\"b\"), ImmutableMap.of(\"b\", \"x\", \"x\", \"n\"));\n",
        "82": "      table.row(\"b\").subMap(\"b\", \"y\").clear();\n",
        "83": "      assertEquals(table.row(\"b\"), ImmutableMap.of());\n",
        "84": "      assertFalse(table.backingMap.containsKey(\"b\"));\n",
        "85": "    }\n",
        "86": "  }\n",
        "87": "\n",
        "88": "  private TreeBasedTable<String, Integer, Character> sortedTable;\n",
        "89": "\n",
        "90": "  protected TreeBasedTable<String, Integer, Character> create(\n",
        "91": "    Comparator<? super String> rowComparator,\n",
        "92": "    Comparator<? super Integer> columnComparator,\n",
        "93": "    Object... data) {\n",
        "94": "    TreeBasedTable<String, Integer, Character> table =\n",
        "95": "        TreeBasedTable.create(rowComparator, columnComparator);\n",
        "96": "    table.put(\"foo\", 4, 'a');\n",
        "97": "    table.put(\"cat\", 1, 'b');\n",
        "98": "    table.clear();\n",
        "99": "    populate(table, data);\n",
        "100": "    return table;\n",
        "101": "  }\n",
        "102": "\n",
        "103": "  @Override protected TreeBasedTable<String, Integer, Character> create(\n",
        "104": "      Object... data) {\n",
        "105": "    TreeBasedTable<String, Integer, Character> table = TreeBasedTable.create();\n",
        "106": "    table.put(\"foo\", 4, 'a');\n",
        "107": "    table.put(\"cat\", 1, 'b');\n",
        "108": "    table.clear();\n",
        "109": "    populate(table, data);\n",
        "110": "    return table;\n",
        "111": "  }\n",
        "112": "\n",
        "113": "  public void testCreateExplicitComparators() {\n",
        "114": "    table = TreeBasedTable.create(\n",
        "115": "        Collections.reverseOrder(), Ordering.usingToString());\n",
        "116": "    table.put(\"foo\", 3, 'a');\n",
        "117": "    table.put(\"foo\", 12, 'b');\n",
        "118": "    table.put(\"bar\", 5, 'c');\n",
        "119": "    table.put(\"cat\", 8, 'd');\n",
        "120": "    assertThat(table.rowKeySet()).containsExactly(\"foo\", \"cat\", \"bar\").inOrder();\n",
        "121": "    assertThat(table.row(\"foo\").keySet()).containsExactly(12, 3).inOrder();\n",
        "122": "  }\n",
        "123": "\n",
        "124": "  public void testCreateCopy() {\n",
        "125": "    TreeBasedTable<String, Integer, Character> original = TreeBasedTable.create(\n",
        "126": "        Collections.reverseOrder(), Ordering.usingToString());\n",
        "127": "    original.put(\"foo\", 3, 'a');\n",
        "128": "    original.put(\"foo\", 12, 'b');\n",
        "129": "    original.put(\"bar\", 5, 'c');\n",
        "130": "    original.put(\"cat\", 8, 'd');\n",
        "131": "    table = TreeBasedTable.create(original);\n",
        "132": "    assertThat(table.rowKeySet()).containsExactly(\"foo\", \"cat\", \"bar\").inOrder();\n",
        "133": "    assertThat(table.row(\"foo\").keySet()).containsExactly(12, 3).inOrder();\n",
        "134": "    assertEquals(original, table);\n",
        "135": "  }\n",
        "136": "\n",
        "137": "  public void testToString_ordered() {\n",
        "138": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "139": "    assertEquals(\"{bar={1=b}, foo={1=a, 3=c}}\", table.toString());\n",
        "140": "    assertEquals(\"{bar={1=b}, foo={1=a, 3=c}}\", table.rowMap().toString());\n",
        "141": "  }\n",
        "142": "\n",
        "143": "  public void testCellSetToString_ordered() {\n",
        "144": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "145": "    assertEquals(\"[(bar,1)=b, (foo,1)=a, (foo,3)=c]\",\n",
        "146": "        table.cellSet().toString());\n",
        "147": "  }\n",
        "148": "\n",
        "149": "  public void testRowKeySetToString_ordered() {\n",
        "150": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "151": "    assertEquals(\"[bar, foo]\", table.rowKeySet().toString());\n",
        "152": "  }\n",
        "153": "\n",
        "154": "  public void testValuesToString_ordered() {\n",
        "155": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "156": "    assertEquals(\"[b, a, c]\", table.values().toString());\n",
        "157": "  }\n",
        "158": "\n",
        "159": "  public void testRowComparator() {\n",
        "160": "    sortedTable = TreeBasedTable.create();\n",
        "161": "    assertSame(Ordering.natural(), sortedTable.rowComparator());\n",
        "162": "\n",
        "163": "    sortedTable = TreeBasedTable.create(\n",
        "164": "        Collections.reverseOrder(), Ordering.usingToString());\n",
        "165": "    assertSame(Collections.reverseOrder(), sortedTable.rowComparator());\n",
        "166": "  }\n",
        "167": "\n",
        "168": "  public void testColumnComparator() {\n",
        "169": "    sortedTable = TreeBasedTable.create();\n",
        "170": "    assertSame(Ordering.natural(), sortedTable.columnComparator());\n",
        "171": "\n",
        "172": "    sortedTable = TreeBasedTable.create(\n",
        "173": "        Collections.reverseOrder(), Ordering.usingToString());\n",
        "174": "    assertSame(Ordering.usingToString(), sortedTable.columnComparator());\n",
        "175": "  }\n",
        "176": "\n",
        "177": "  public void testRowKeySetComparator() {\n",
        "178": "    sortedTable = TreeBasedTable.create();\n",
        "179": "    assertSame(Ordering.natural(),\n",
        "180": "        sortedTable.rowKeySet().comparator());\n",
        "181": "\n",
        "182": "    sortedTable = TreeBasedTable.create(\n",
        "183": "        Collections.reverseOrder(), Ordering.usingToString());\n",
        "184": "    assertSame(Collections.reverseOrder(),\n",
        "185": "        sortedTable.rowKeySet().comparator());\n",
        "186": "  }\n",
        "187": "\n",
        "188": "  public void testRowKeySetFirst() {\n",
        "189": "    sortedTable = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "190": "    assertSame(\"bar\", sortedTable.rowKeySet().first());\n",
        "191": "  }\n",
        "192": "\n",
        "193": "  public void testRowKeySetLast() {\n",
        "194": "    sortedTable = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "195": "    assertSame(\"foo\", sortedTable.rowKeySet().last());\n",
        "196": "  }\n",
        "197": "\n",
        "198": "  public void testRowKeySetHeadSet() {\n",
        "199": "    sortedTable = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "200": "    Set<String> set = sortedTable.rowKeySet().headSet(\"cat\");\n",
        "201": "    assertEquals(Collections.singleton(\"bar\"), set);\n",
        "202": "    set.clear();\n",
        "203": "    assertTrue(set.isEmpty());\n",
        "204": "    assertEquals(Collections.singleton(\"foo\"), sortedTable.rowKeySet());\n",
        "205": "  }\n",
        "206": "\n",
        "207": "  public void testRowKeySetTailSet() {\n",
        "208": "    sortedTable = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "209": "    Set<String> set = sortedTable.rowKeySet().tailSet(\"cat\");\n",
        "210": "    assertEquals(Collections.singleton(\"foo\"), set);\n",
        "211": "    set.clear();\n",
        "212": "    assertTrue(set.isEmpty());\n",
        "213": "    assertEquals(Collections.singleton(\"bar\"), sortedTable.rowKeySet());\n",
        "214": "  }\n",
        "215": "\n",
        "216": "  public void testRowKeySetSubSet() {\n",
        "217": "    sortedTable = create(\n",
        "218": "        \"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c', \"dog\", 2, 'd');\n",
        "219": "    Set<String> set = sortedTable.rowKeySet().subSet(\"cat\", \"egg\");\n",
        "220": "    assertEquals(Collections.singleton(\"dog\"), set);\n",
        "221": "    set.clear();\n",
        "222": "    assertTrue(set.isEmpty());\n",
        "223": "    assertEquals(ImmutableSet.of(\"bar\", \"foo\"), sortedTable.rowKeySet());\n",
        "224": "  }\n",
        "225": "\n",
        "226": "  public void testRowMapComparator() {\n",
        "227": "    sortedTable = TreeBasedTable.create();\n",
        "228": "    assertSame(Ordering.natural(), sortedTable.rowMap().comparator());\n",
        "229": "\n",
        "230": "    sortedTable = TreeBasedTable.create(\n",
        "231": "        Collections.reverseOrder(), Ordering.usingToString());\n",
        "232": "    assertSame(Collections.reverseOrder(), sortedTable.rowMap().comparator());\n",
        "233": "  }\n",
        "234": "\n",
        "235": "  public void testRowMapFirstKey() {\n",
        "236": "    sortedTable = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "237": "    assertSame(\"bar\", sortedTable.rowMap().firstKey());\n",
        "238": "  }\n",
        "239": "\n",
        "240": "  public void testRowMapLastKey() {\n",
        "241": "    sortedTable = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "242": "    assertSame(\"foo\", sortedTable.rowMap().lastKey());\n",
        "243": "  }\n",
        "244": "\n",
        "245": "  public void testRowKeyMapHeadMap() {\n",
        "246": "    sortedTable = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "247": "    Map<String, Map<Integer, Character>> map\n",
        "248": "        = sortedTable.rowMap().headMap(\"cat\");\n",
        "249": "    assertEquals(1, map.size());\n",
        "250": "    assertEquals(ImmutableMap.of(1, 'b'), map.get(\"bar\"));\n",
        "251": "    map.clear();\n",
        "252": "    assertTrue(map.isEmpty());\n",
        "253": "    assertEquals(Collections.singleton(\"foo\"), sortedTable.rowKeySet());\n",
        "254": "  }\n",
        "255": "\n",
        "256": "  public void testRowKeyMapTailMap() {\n",
        "257": "    sortedTable = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "258": "    Map<String, Map<Integer, Character>> map\n",
        "259": "        = sortedTable.rowMap().tailMap(\"cat\");\n",
        "260": "    assertEquals(1, map.size());\n",
        "261": "    assertEquals(ImmutableMap.of(1, 'a', 3, 'c'), map.get(\"foo\"));\n",
        "262": "    map.clear();\n",
        "263": "    assertTrue(map.isEmpty());\n",
        "264": "    assertEquals(Collections.singleton(\"bar\"), sortedTable.rowKeySet());\n",
        "265": "  }\n",
        "266": "\n",
        "267": "  public void testRowKeyMapSubMap() {\n",
        "268": "    sortedTable = create(\n",
        "269": "        \"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c', \"dog\", 2, 'd');\n",
        "270": "    Map<String, Map<Integer, Character>> map\n",
        "271": "        = sortedTable.rowMap().subMap(\"cat\", \"egg\");\n",
        "272": "    assertEquals(ImmutableMap.of(2, 'd'), map.get(\"dog\"));\n",
        "273": "    map.clear();\n",
        "274": "    assertTrue(map.isEmpty());\n",
        "275": "    assertEquals(ImmutableSet.of(\"bar\", \"foo\"), sortedTable.rowKeySet());\n",
        "276": "  }\n",
        "277": "\n",
        "278": "  public void testRowMapValuesAreSorted() {\n",
        "279": "    sortedTable = create(\n",
        "280": "        \"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c', \"dog\", 2, 'd');\n",
        "281": "    assertTrue(sortedTable.rowMap().get(\"foo\") instanceof SortedMap);\n",
        "282": "  }\n",
        "283": "\n",
        "284": "  public void testColumnKeySet_isSorted() {\n",
        "285": "    table = create(\"a\", 2,  'X',\n",
        "286": "                   \"a\", 2,  'X',\n",
        "287": "                   \"b\", 3,  'X',\n",
        "288": "                   \"b\", 2,  'X',\n",
        "289": "                   \"c\", 10, 'X',\n",
        "290": "                   \"c\", 10, 'X',\n",
        "291": "                   \"c\", 20, 'X',\n",
        "292": "                   \"d\", 15, 'X',\n",
        "293": "                   \"d\", 20, 'X',\n",
        "294": "                   \"d\", 1,  'X',\n",
        "295": "                   \"e\", 5,  'X'\n",
        "296": "                  );\n",
        "297": "    assertEquals(\"[1, 2, 3, 5, 10, 15, 20]\", table.columnKeySet().toString());\n",
        "298": "  }\n",
        "299": "\n",
        "300": "  public void testColumnKeySet_isSortedWithRealComparator() {\n",
        "301": "    table = create(String.CASE_INSENSITIVE_ORDER,\n",
        "302": "                   Ordering.natural().reverse(),\n",
        "303": "                   \"a\", 2,  'X',\n",
        "304": "                   \"a\", 2,  'X',\n",
        "305": "                   \"b\", 3,  'X',\n",
        "306": "                   \"b\", 2,  'X',\n",
        "307": "                   \"c\", 10, 'X',\n",
        "308": "                   \"c\", 10, 'X',\n",
        "309": "                   \"c\", 20, 'X',\n",
        "310": "                   \"d\", 15, 'X',\n",
        "311": "                   \"d\", 20, 'X',\n",
        "312": "                   \"d\", 1,  'X',\n",
        "313": "                   \"e\", 5,  'X'\n",
        "314": "                  );\n",
        "315": "    assertEquals(\"[20, 15, 10, 5, 3, 2, 1]\", table.columnKeySet().toString());\n",
        "316": "  }\n",
        "317": "\n",
        "318": "  public void testColumnKeySet_empty() {\n",
        "319": "    table = create();\n",
        "320": "    assertEquals(\"[]\", table.columnKeySet().toString());\n",
        "321": "  }\n",
        "322": "\n",
        "323": "  public void testColumnKeySet_oneRow() {\n",
        "324": "    table = create(\"a\", 2,  'X',\n",
        "325": "                   \"a\", 1,  'X'\n",
        "326": "                  );\n",
        "327": "    assertEquals(\"[1, 2]\", table.columnKeySet().toString());\n",
        "328": "  }\n",
        "329": "\n",
        "330": "  public void testColumnKeySet_oneColumn() {\n",
        "331": "    table = create(\"a\", 1,  'X',\n",
        "332": "                   \"b\", 1,  'X'\n",
        "333": "                  );\n",
        "334": "    assertEquals(\"[1]\", table.columnKeySet().toString());\n",
        "335": "  }\n",
        "336": "\n",
        "337": "  public void testColumnKeySet_oneEntry() {\n",
        "338": "    table = create(\"a\", 1,  'X');\n",
        "339": "    assertEquals(\"[1]\", table.columnKeySet().toString());\n",
        "340": "  }\n",
        "341": "\n",
        "342": "  public void testRowEntrySetContains() {\n",
        "343": "    table =\n",
        "344": "        sortedTable =\n",
        "345": "            create(\"a\", 2, 'X', \"a\", 2, 'X', \"b\", 3, 'X', \"b\", 2, 'X', \"c\", 10,\n",
        "346": "                'X', \"c\", 10, 'X', \"c\", 20, 'X', \"d\", 15, 'X', \"d\", 20, 'X',\n",
        "347": "                \"d\", 1, 'X', \"e\", 5, 'X');\n",
        "348": "    SortedMap<Integer, Character> row = sortedTable.row(\"c\");\n",
        "349": "    Set<Map.Entry<Integer, Character>> entrySet = row.entrySet();\n",
        "350": "    assertTrue(entrySet.contains(Maps.immutableEntry(10, 'X')));\n",
        "351": "    assertTrue(entrySet.contains(Maps.immutableEntry(20, 'X')));\n",
        "352": "    assertFalse(entrySet.contains(Maps.immutableEntry(15, 'X')));\n",
        "353": "    entrySet = row.tailMap(15).entrySet();\n",
        "354": "    assertFalse(entrySet.contains(Maps.immutableEntry(10, 'X')));\n",
        "355": "    assertTrue(entrySet.contains(Maps.immutableEntry(20, 'X')));\n",
        "356": "    assertFalse(entrySet.contains(Maps.immutableEntry(15, 'X')));\n",
        "357": "  }\n",
        "358": "\n",
        "359": "  public void testRowEntrySetRemove() {\n",
        "360": "    table =\n",
        "361": "        sortedTable =\n",
        "362": "            create(\"a\", 2, 'X', \"a\", 2, 'X', \"b\", 3, 'X', \"b\", 2, 'X', \"c\", 10,\n",
        "363": "                'X', \"c\", 10, 'X', \"c\", 20, 'X', \"d\", 15, 'X', \"d\", 20, 'X',\n",
        "364": "                \"d\", 1, 'X', \"e\", 5, 'X');\n",
        "365": "    SortedMap<Integer, Character> row = sortedTable.row(\"c\");\n",
        "366": "    Set<Map.Entry<Integer, Character>> entrySet = row.tailMap(15).entrySet();\n",
        "367": "    assertFalse(entrySet.remove(Maps.immutableEntry(10, 'X')));\n",
        "368": "    assertTrue(entrySet.remove(Maps.immutableEntry(20, 'X')));\n",
        "369": "    assertFalse(entrySet.remove(Maps.immutableEntry(15, 'X')));\n",
        "370": "    entrySet = row.entrySet();\n",
        "371": "    assertTrue(entrySet.remove(Maps.immutableEntry(10, 'X')));\n",
        "372": "    assertFalse(entrySet.remove(Maps.immutableEntry(20, 'X')));\n",
        "373": "    assertFalse(entrySet.remove(Maps.immutableEntry(15, 'X')));\n",
        "374": "  }\n",
        "375": "\n",
        "376": "  public void testRowSize() {\n",
        "377": "    table =\n",
        "378": "        sortedTable =\n",
        "379": "            create(\"a\", 2, 'X', \"a\", 2, 'X', \"b\", 3, 'X', \"b\", 2, 'X', \"c\", 10,\n",
        "380": "                'X', \"c\", 10, 'X', \"c\", 20, 'X', \"d\", 15, 'X', \"d\", 20, 'X',\n",
        "381": "                \"d\", 1, 'X', \"e\", 5, 'X');\n",
        "382": "    SortedMap<Integer, Character> row = sortedTable.row(\"c\");\n",
        "383": "    assertEquals(row.size(), 2);\n",
        "384": "    assertEquals(row.tailMap(15).size(), 1);\n",
        "385": "  }\n",
        "386": "\n",
        "387": "  public void testSubRowClearAndPut() {\n",
        "388": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "389": "    SortedMap<Integer, Character> row = (SortedMap<Integer, Character>) table.row(\"foo\");\n",
        "390": "    SortedMap<Integer, Character> subRow = row.tailMap(2);\n",
        "391": "    assertEquals(ImmutableMap.of(1, 'a', 3, 'c'), row);\n",
        "392": "    assertEquals(ImmutableMap.of(3, 'c'), subRow);\n",
        "393": "    table.remove(\"foo\", 3);\n",
        "394": "    assertEquals(ImmutableMap.of(1, 'a'), row);\n",
        "395": "    assertEquals(ImmutableMap.of(), subRow);\n",
        "396": "    table.remove(\"foo\", 1);\n",
        "397": "    assertEquals(ImmutableMap.of(), row);\n",
        "398": "    assertEquals(ImmutableMap.of(), subRow);\n",
        "399": "    table.put(\"foo\", 2, 'b');\n",
        "400": "    assertEquals(ImmutableMap.of(2, 'b'), row);\n",
        "401": "    assertEquals(ImmutableMap.of(2, 'b'), subRow);\n",
        "402": "    row.clear();\n",
        "403": "    assertEquals(ImmutableMap.of(), row);\n",
        "404": "    assertEquals(ImmutableMap.of(), subRow);\n",
        "405": "    table.put(\"foo\", 5, 'x');\n",
        "406": "    assertEquals(ImmutableMap.of(5, 'x'), row);\n",
        "407": "    assertEquals(ImmutableMap.of(5, 'x'), subRow);\n",
        "408": "  }\n",
        "409": "}\n",
        "410": "\n"
    }
}