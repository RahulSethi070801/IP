{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.primitives;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.base.Converter;\n",
        "21": "import com.google.common.collect.testing.Helpers;\n",
        "22": "\n",
        "23": "import junit.framework.TestCase;\n",
        "24": "\n",
        "25": "import java.util.Arrays;\n",
        "26": "import java.util.Collection;\n",
        "27": "import java.util.Collections;\n",
        "28": "import java.util.Comparator;\n",
        "29": "import java.util.List;\n",
        "30": "\n",
        "31": "/**\n",
        "32": " * Unit test for {@link Shorts}.\n",
        "33": " *\n",
        "34": " * @author Kevin Bourrillion\n",
        "35": " */\n",
        "36": "@GwtCompatible(emulated = true)\n",
        "37": "@SuppressWarnings(\"cast\") // redundant casts are intentional and harmless\n",
        "38": "public class ShortsTest extends TestCase {\n",
        "39": "  private static final short[] EMPTY = {};\n",
        "40": "  private static final short[] ARRAY1 = {(short) 1};\n",
        "41": "  private static final short[] ARRAY234\n",
        "42": "      = {(short) 2, (short) 3, (short) 4};\n",
        "43": "\n",
        "44": "  private static final short LEAST = Short.MIN_VALUE;\n",
        "45": "  private static final short GREATEST = Short.MAX_VALUE;\n",
        "46": "\n",
        "47": "  private static final short[] VALUES =\n",
        "48": "      { LEAST, (short) -1, (short) 0, (short) 1, GREATEST };\n",
        "49": "\n",
        "50": "  public void testHashCode() {\n",
        "51": "    for (short value : VALUES) {\n",
        "52": "      assertEquals(((Short) value).hashCode(), Shorts.hashCode(value));\n",
        "53": "    }\n",
        "54": "  }\n",
        "55": "\n",
        "56": "  public void testCheckedCast() {\n",
        "57": "    for (short value : VALUES) {\n",
        "58": "      assertEquals(value, Shorts.checkedCast((long) value));\n",
        "59": "    }\n",
        "60": "    assertCastFails(GREATEST + 1L);\n",
        "61": "    assertCastFails(LEAST - 1L);\n",
        "62": "    assertCastFails(Long.MAX_VALUE);\n",
        "63": "    assertCastFails(Long.MIN_VALUE);\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  public void testSaturatedCast() {\n",
        "67": "    for (short value : VALUES) {\n",
        "68": "      assertEquals(value, Shorts.saturatedCast((long) value));\n",
        "69": "    }\n",
        "70": "    assertEquals(GREATEST, Shorts.saturatedCast(GREATEST + 1L));\n",
        "71": "    assertEquals(LEAST, Shorts.saturatedCast(LEAST - 1L));\n",
        "72": "    assertEquals(GREATEST, Shorts.saturatedCast(Long.MAX_VALUE));\n",
        "73": "    assertEquals(LEAST, Shorts.saturatedCast(Long.MIN_VALUE));\n",
        "74": "  }\n",
        "75": "\n",
        "76": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "77": "  private static void assertCastFails(long value) {\n",
        "78": "    try {\n",
        "79": "      Shorts.checkedCast(value);\n",
        "80": "      fail(\"Cast to short should have failed: \" + value);\n",
        "81": "    } catch (IllegalArgumentException ex) {\n",
        "82": "      assertTrue(value + \" not found in exception text: \" + ex.getMessage(),\n",
        "83": "          ex.getMessage().contains(String.valueOf(value)));\n",
        "84": "    }\n",
        "85": "  }\n",
        "86": "\n",
        "87": "  public void testCompare() {\n",
        "88": "    for (short x : VALUES) {\n",
        "89": "      for (short y : VALUES) {\n",
        "90": "        // Only compare the sign of the result of compareTo().\n",
        "91": "        int expected = Short.valueOf(x).compareTo(y);\n",
        "92": "        int actual = Shorts.compare(x, y);\n",
        "93": "        if (expected == 0) {\n",
        "94": "          assertEquals(x + \", \" + y, expected, actual);\n",
        "95": "        } else if (expected < 0) {\n",
        "96": "          assertTrue(x + \", \" + y + \" (expected: \" + expected + \", actual\" + actual + \")\",\n",
        "97": "              actual < 0);\n",
        "98": "        } else {\n",
        "99": "          assertTrue(x + \", \" + y + \" (expected: \" + expected + \", actual\" + actual + \")\",\n",
        "100": "              actual > 0);\n",
        "101": "        }\n",
        "102": "      }\n",
        "103": "    }\n",
        "104": "  }\n",
        "105": "\n",
        "106": "  public void testContains() {\n",
        "107": "    assertFalse(Shorts.contains(EMPTY, (short) 1));\n",
        "108": "    assertFalse(Shorts.contains(ARRAY1, (short) 2));\n",
        "109": "    assertFalse(Shorts.contains(ARRAY234, (short) 1));\n",
        "110": "    assertTrue(Shorts.contains(new short[] {(short) -1}, (short) -1));\n",
        "111": "    assertTrue(Shorts.contains(ARRAY234, (short) 2));\n",
        "112": "    assertTrue(Shorts.contains(ARRAY234, (short) 3));\n",
        "113": "    assertTrue(Shorts.contains(ARRAY234, (short) 4));\n",
        "114": "  }\n",
        "115": "\n",
        "116": "  public void testIndexOf() {\n",
        "117": "    assertEquals(-1, Shorts.indexOf(EMPTY, (short) 1));\n",
        "118": "    assertEquals(-1, Shorts.indexOf(ARRAY1, (short) 2));\n",
        "119": "    assertEquals(-1, Shorts.indexOf(ARRAY234, (short) 1));\n",
        "120": "    assertEquals(0, Shorts.indexOf(\n",
        "121": "        new short[] {(short) -1}, (short) -1));\n",
        "122": "    assertEquals(0, Shorts.indexOf(ARRAY234, (short) 2));\n",
        "123": "    assertEquals(1, Shorts.indexOf(ARRAY234, (short) 3));\n",
        "124": "    assertEquals(2, Shorts.indexOf(ARRAY234, (short) 4));\n",
        "125": "    assertEquals(1, Shorts.indexOf(\n",
        "126": "        new short[] { (short) 2, (short) 3, (short) 2, (short) 3 },\n",
        "127": "        (short) 3));\n",
        "128": "  }\n",
        "129": "\n",
        "130": "  public void testIndexOf_arrayTarget() {\n",
        "131": "    assertEquals(0, Shorts.indexOf(EMPTY, EMPTY));\n",
        "132": "    assertEquals(0, Shorts.indexOf(ARRAY234, EMPTY));\n",
        "133": "    assertEquals(-1, Shorts.indexOf(EMPTY, ARRAY234));\n",
        "134": "    assertEquals(-1, Shorts.indexOf(ARRAY234, ARRAY1));\n",
        "135": "    assertEquals(-1, Shorts.indexOf(ARRAY1, ARRAY234));\n",
        "136": "    assertEquals(0, Shorts.indexOf(ARRAY1, ARRAY1));\n",
        "137": "    assertEquals(0, Shorts.indexOf(ARRAY234, ARRAY234));\n",
        "138": "    assertEquals(0, Shorts.indexOf(\n",
        "139": "        ARRAY234, new short[] { (short) 2, (short) 3 }));\n",
        "140": "    assertEquals(1, Shorts.indexOf(\n",
        "141": "        ARRAY234, new short[] { (short) 3, (short) 4 }));\n",
        "142": "    assertEquals(1, Shorts.indexOf(ARRAY234, new short[] { (short) 3 }));\n",
        "143": "    assertEquals(2, Shorts.indexOf(ARRAY234, new short[] { (short) 4 }));\n",
        "144": "    assertEquals(1, Shorts.indexOf(new short[] { (short) 2, (short) 3,\n",
        "145": "        (short) 3, (short) 3, (short) 3 },\n",
        "146": "        new short[] { (short) 3 }\n",
        "147": "    ));\n",
        "148": "    assertEquals(2, Shorts.indexOf(\n",
        "149": "        new short[] { (short) 2, (short) 3, (short) 2,\n",
        "150": "            (short) 3, (short) 4, (short) 2, (short) 3},\n",
        "151": "        new short[] { (short) 2, (short) 3, (short) 4}\n",
        "152": "    ));\n",
        "153": "    assertEquals(1, Shorts.indexOf(\n",
        "154": "        new short[] { (short) 2, (short) 2, (short) 3,\n",
        "155": "            (short) 4, (short) 2, (short) 3, (short) 4},\n",
        "156": "        new short[] { (short) 2, (short) 3, (short) 4}\n",
        "157": "    ));\n",
        "158": "    assertEquals(-1, Shorts.indexOf(\n",
        "159": "        new short[] { (short) 4, (short) 3, (short) 2},\n",
        "160": "        new short[] { (short) 2, (short) 3, (short) 4}\n",
        "161": "    ));\n",
        "162": "  }\n",
        "163": "\n",
        "164": "  public void testLastIndexOf() {\n",
        "165": "    assertEquals(-1, Shorts.lastIndexOf(EMPTY, (short) 1));\n",
        "166": "    assertEquals(-1, Shorts.lastIndexOf(ARRAY1, (short) 2));\n",
        "167": "    assertEquals(-1, Shorts.lastIndexOf(ARRAY234, (short) 1));\n",
        "168": "    assertEquals(0, Shorts.lastIndexOf(\n",
        "169": "        new short[] {(short) -1}, (short) -1));\n",
        "170": "    assertEquals(0, Shorts.lastIndexOf(ARRAY234, (short) 2));\n",
        "171": "    assertEquals(1, Shorts.lastIndexOf(ARRAY234, (short) 3));\n",
        "172": "    assertEquals(2, Shorts.lastIndexOf(ARRAY234, (short) 4));\n",
        "173": "    assertEquals(3, Shorts.lastIndexOf(\n",
        "174": "        new short[] { (short) 2, (short) 3, (short) 2, (short) 3 },\n",
        "175": "        (short) 3));\n",
        "176": "  }\n",
        "177": "\n",
        "178": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "179": "  public void testMax_noArgs() {\n",
        "180": "    try {\n",
        "181": "      Shorts.max();\n",
        "182": "      fail();\n",
        "183": "    } catch (IllegalArgumentException expected) {\n",
        "184": "    }\n",
        "185": "  }\n",
        "186": "\n",
        "187": "  public void testMax() {\n",
        "188": "    assertEquals(LEAST, Shorts.max(LEAST));\n",
        "189": "    assertEquals(GREATEST, Shorts.max(GREATEST));\n",
        "190": "    assertEquals((short) 9, Shorts.max(\n",
        "191": "        (short) 8, (short) 6, (short) 7,\n",
        "192": "        (short) 5, (short) 3, (short) 0, (short) 9));\n",
        "193": "  }\n",
        "194": "\n",
        "195": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "196": "  public void testMin_noArgs() {\n",
        "197": "    try {\n",
        "198": "      Shorts.min();\n",
        "199": "      fail();\n",
        "200": "    } catch (IllegalArgumentException expected) {\n",
        "201": "    }\n",
        "202": "  }\n",
        "203": "\n",
        "204": "  public void testMin() {\n",
        "205": "    assertEquals(LEAST, Shorts.min(LEAST));\n",
        "206": "    assertEquals(GREATEST, Shorts.min(GREATEST));\n",
        "207": "    assertEquals((short) 0, Shorts.min(\n",
        "208": "        (short) 8, (short) 6, (short) 7,\n",
        "209": "        (short) 5, (short) 3, (short) 0, (short) 9));\n",
        "210": "  }\n",
        "211": "\n",
        "212": "  public void testConcat() {\n",
        "213": "    assertTrue(Arrays.equals(EMPTY, Shorts.concat()));\n",
        "214": "    assertTrue(Arrays.equals(EMPTY, Shorts.concat(EMPTY)));\n",
        "215": "    assertTrue(Arrays.equals(EMPTY, Shorts.concat(EMPTY, EMPTY, EMPTY)));\n",
        "216": "    assertTrue(Arrays.equals(ARRAY1, Shorts.concat(ARRAY1)));\n",
        "217": "    assertNotSame(ARRAY1, Shorts.concat(ARRAY1));\n",
        "218": "    assertTrue(Arrays.equals(ARRAY1, Shorts.concat(EMPTY, ARRAY1, EMPTY)));\n",
        "219": "    assertTrue(Arrays.equals(\n",
        "220": "        new short[] {(short) 1, (short) 1, (short) 1},\n",
        "221": "        Shorts.concat(ARRAY1, ARRAY1, ARRAY1)));\n",
        "222": "    assertTrue(Arrays.equals(\n",
        "223": "        new short[] {(short) 1, (short) 2, (short) 3, (short) 4},\n",
        "224": "        Shorts.concat(ARRAY1, ARRAY234)));\n",
        "225": "  }\n",
        "226": "\n",
        "227": "  public void testEnsureCapacity() {\n",
        "228": "    assertSame(EMPTY, Shorts.ensureCapacity(EMPTY, 0, 1));\n",
        "229": "    assertSame(ARRAY1, Shorts.ensureCapacity(ARRAY1, 0, 1));\n",
        "230": "    assertSame(ARRAY1, Shorts.ensureCapacity(ARRAY1, 1, 1));\n",
        "231": "    assertTrue(Arrays.equals(\n",
        "232": "        new short[] {(short) 1, (short) 0, (short) 0},\n",
        "233": "        Shorts.ensureCapacity(ARRAY1, 2, 1)));\n",
        "234": "  }\n",
        "235": "\n",
        "236": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "237": "  public void testEnsureCapacity_fail() {\n",
        "238": "    try {\n",
        "239": "      Shorts.ensureCapacity(ARRAY1, -1, 1);\n",
        "240": "      fail();\n",
        "241": "    } catch (IllegalArgumentException expected) {\n",
        "242": "    }\n",
        "243": "    try {\n",
        "244": "      // notice that this should even fail when no growth was needed\n",
        "245": "      Shorts.ensureCapacity(ARRAY1, 1, -1);\n",
        "246": "      fail();\n",
        "247": "    } catch (IllegalArgumentException expected) {\n",
        "248": "    }\n",
        "249": "  }\n",
        "250": "\n",
        "251": "  public void testJoin() {\n",
        "252": "    assertEquals(\"\", Shorts.join(\",\", EMPTY));\n",
        "253": "    assertEquals(\"1\", Shorts.join(\",\", ARRAY1));\n",
        "254": "    assertEquals(\"1,2\", Shorts.join(\",\", (short) 1, (short) 2));\n",
        "255": "    assertEquals(\"123\",\n",
        "256": "        Shorts.join(\"\", (short) 1, (short) 2, (short) 3));\n",
        "257": "  }\n",
        "258": "\n",
        "259": "  public void testLexicographicalComparator() {\n",
        "260": "    List<short[]> ordered = Arrays.asList(\n",
        "261": "        new short[] {},\n",
        "262": "        new short[] {LEAST},\n",
        "263": "        new short[] {LEAST, LEAST},\n",
        "264": "        new short[] {LEAST, (short) 1},\n",
        "265": "        new short[] {(short) 1},\n",
        "266": "        new short[] {(short) 1, LEAST},\n",
        "267": "        new short[] {GREATEST, GREATEST - (short) 1},\n",
        "268": "        new short[] {GREATEST, GREATEST},\n",
        "269": "        new short[] {GREATEST, GREATEST, GREATEST});\n",
        "270": "\n",
        "271": "    Comparator<short[]> comparator = Shorts.lexicographicalComparator();\n",
        "272": "    Helpers.testComparator(comparator, ordered);\n",
        "273": "  }\n",
        "274": "\n",
        "275": "  public void testToArray() {\n",
        "276": "    // need explicit type parameter to avoid javac warning!?\n",
        "277": "    List<Short> none = Arrays.<Short>asList();\n",
        "278": "    assertTrue(Arrays.equals(EMPTY, Shorts.toArray(none)));\n",
        "279": "\n",
        "280": "    List<Short> one = Arrays.asList((short) 1);\n",
        "281": "    assertTrue(Arrays.equals(ARRAY1, Shorts.toArray(one)));\n",
        "282": "\n",
        "283": "    short[] array = {(short) 0, (short) 1, (short) 3};\n",
        "284": "\n",
        "285": "    List<Short> three = Arrays.asList((short) 0, (short) 1, (short) 3);\n",
        "286": "    assertTrue(Arrays.equals(array, Shorts.toArray(three)));\n",
        "287": "\n",
        "288": "    assertTrue(Arrays.equals(array, Shorts.toArray(Shorts.asList(array))));\n",
        "289": "  }\n",
        "290": "\n",
        "291": "  public void testToArray_threadSafe() {\n",
        "292": "    for (int delta : new int[] { +1, 0, -1 }) {\n",
        "293": "      for (int i = 0; i < VALUES.length; i++) {\n",
        "294": "        List<Short> list = Shorts.asList(VALUES).subList(0, i);\n",
        "295": "        Collection<Short> misleadingSize =\n",
        "296": "            Helpers.misleadingSizeCollection(delta);\n",
        "297": "        misleadingSize.addAll(list);\n",
        "298": "        short[] arr = Shorts.toArray(misleadingSize);\n",
        "299": "        assertEquals(i, arr.length);\n",
        "300": "        for (int j = 0; j < i; j++) {\n",
        "301": "          assertEquals(VALUES[j], arr[j]);\n",
        "302": "        }\n",
        "303": "      }\n",
        "304": "    }\n",
        "305": "  }\n",
        "306": "\n",
        "307": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "308": "  public void testToArray_withNull() {\n",
        "309": "    List<Short> list = Arrays.asList((short) 0, (short) 1, null);\n",
        "310": "    try {\n",
        "311": "      Shorts.toArray(list);\n",
        "312": "      fail();\n",
        "313": "    } catch (NullPointerException expected) {\n",
        "314": "    }\n",
        "315": "  }\n",
        "316": "\n",
        "317": "  public void testToArray_withConversion() {\n",
        "318": "    short[] array = {(short) 0, (short) 1, (short) 2};\n",
        "319": "\n",
        "320": "    List<Byte> bytes = Arrays.asList((byte) 0, (byte) 1, (byte) 2);\n",
        "321": "    List<Short> shorts = Arrays.asList((short) 0, (short) 1, (short) 2);\n",
        "322": "    List<Integer> ints = Arrays.asList(0, 1, 2);\n",
        "323": "    List<Float> floats = Arrays.asList((float) 0, (float) 1, (float) 2);\n",
        "324": "    List<Long> longs = Arrays.asList((long) 0, (long) 1, (long) 2);\n",
        "325": "    List<Double> doubles = Arrays.asList((double) 0, (double) 1, (double) 2);\n",
        "326": "\n",
        "327": "    assertTrue(Arrays.equals(array, Shorts.toArray(bytes)));\n",
        "328": "    assertTrue(Arrays.equals(array, Shorts.toArray(shorts)));\n",
        "329": "    assertTrue(Arrays.equals(array, Shorts.toArray(ints)));\n",
        "330": "    assertTrue(Arrays.equals(array, Shorts.toArray(floats)));\n",
        "331": "    assertTrue(Arrays.equals(array, Shorts.toArray(longs)));\n",
        "332": "    assertTrue(Arrays.equals(array, Shorts.toArray(doubles)));\n",
        "333": "  }\n",
        "334": "\n",
        "335": "  public void testAsList_isAView() {\n",
        "336": "    short[] array = {(short) 0, (short) 1};\n",
        "337": "    List<Short> list = Shorts.asList(array);\n",
        "338": "    list.set(0, (short) 2);\n",
        "339": "    assertTrue(Arrays.equals(new short[] {(short) 2, (short) 1}, array));\n",
        "340": "    array[1] = (short) 3;\n",
        "341": "    assertEquals(Arrays.asList((short) 2, (short) 3), list);\n",
        "342": "  }\n",
        "343": "\n",
        "344": "  public void testAsList_toArray_roundTrip() {\n",
        "345": "    short[] array = { (short) 0, (short) 1, (short) 2 };\n",
        "346": "    List<Short> list = Shorts.asList(array);\n",
        "347": "    short[] newArray = Shorts.toArray(list);\n",
        "348": "\n",
        "349": "    // Make sure it returned a copy\n",
        "350": "    list.set(0, (short) 4);\n",
        "351": "    assertTrue(Arrays.equals(\n",
        "352": "        new short[] { (short) 0, (short) 1, (short) 2 }, newArray));\n",
        "353": "    newArray[1] = (short) 5;\n",
        "354": "    assertEquals((short) 1, (short) list.get(1));\n",
        "355": "  }\n",
        "356": "\n",
        "357": "  // This test stems from a real bug found by andrewk\n",
        "358": "  public void testAsList_subList_toArray_roundTrip() {\n",
        "359": "    short[] array = { (short) 0, (short) 1, (short) 2, (short) 3 };\n",
        "360": "    List<Short> list = Shorts.asList(array);\n",
        "361": "    assertTrue(Arrays.equals(new short[] { (short) 1, (short) 2 },\n",
        "362": "        Shorts.toArray(list.subList(1, 3))));\n",
        "363": "    assertTrue(Arrays.equals(new short[] {},\n",
        "364": "        Shorts.toArray(list.subList(2, 2))));\n",
        "365": "  }\n",
        "366": "\n",
        "367": "  public void testAsListEmpty() {\n",
        "368": "    assertSame(Collections.emptyList(), Shorts.asList(EMPTY));\n",
        "369": "  }\n",
        "370": "\n",
        "371": "  public void testStringConverter_convert() {\n",
        "372": "    Converter<String, Short> converter = Shorts.stringConverter();\n",
        "373": "    assertEquals((Short) (short) 1, converter.convert(\"1\"));\n",
        "374": "    assertEquals((Short) (short) 0, converter.convert(\"0\"));\n",
        "375": "    assertEquals((Short) (short) (-1), converter.convert(\"-1\"));\n",
        "376": "    assertEquals((Short) (short) 255, converter.convert(\"0xff\"));\n",
        "377": "    assertEquals((Short) (short) 255, converter.convert(\"0xFF\"));\n",
        "378": "    assertEquals((Short) (short) (-255), converter.convert(\"-0xFF\"));\n",
        "379": "    assertEquals((Short) (short) 255, converter.convert(\"#0000FF\"));\n",
        "380": "    assertEquals((Short) (short) 438, converter.convert(\"0666\"));\n",
        "381": "  }\n",
        "382": "\n",
        "383": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "384": "  public void testStringConverter_convertError() {\n",
        "385": "    try {\n",
        "386": "      Shorts.stringConverter().convert(\"notanumber\");\n",
        "387": "      fail();\n",
        "388": "    } catch (NumberFormatException expected) {\n",
        "389": "    }\n",
        "390": "  }\n",
        "391": "\n",
        "392": "  public void testStringConverter_nullConversions() {\n",
        "393": "    assertNull(Shorts.stringConverter().convert(null));\n",
        "394": "    assertNull(Shorts.stringConverter().reverse().convert(null));\n",
        "395": "  }\n",
        "396": "\n",
        "397": "  public void testStringConverter_reverse() {\n",
        "398": "    Converter<String, Short> converter = Shorts.stringConverter();\n",
        "399": "    assertEquals(\"1\", converter.reverse().convert((short) 1));\n",
        "400": "    assertEquals(\"0\", converter.reverse().convert((short) 0));\n",
        "401": "    assertEquals(\"-1\", converter.reverse().convert((short) -1));\n",
        "402": "    assertEquals(\"255\", converter.reverse().convert((short) 0xff));\n",
        "403": "    assertEquals(\"255\", converter.reverse().convert((short) 0xFF));\n",
        "404": "    assertEquals(\"-255\", converter.reverse().convert((short) -0xFF));\n",
        "405": "    assertEquals(\"438\", converter.reverse().convert((short) 0666));\n",
        "406": "  }\n",
        "407": "}\n",
        "408": "\n"
    }
}