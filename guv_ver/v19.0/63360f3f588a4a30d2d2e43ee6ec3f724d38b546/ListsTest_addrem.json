{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.IteratorFeature.UNMODIFIABLE;\n",
        "20": "import static com.google.common.truth.Truth.assertThat;\n",
        "21": "import static java.util.Arrays.asList;\n",
        "22": "import static java.util.Collections.singletonList;\n",
        "23": "\n",
        "24": "import com.google.common.annotations.GwtCompatible;\n",
        "25": "import com.google.common.base.Function;\n",
        "26": "import com.google.common.collect.testing.IteratorTester;\n",
        "27": "\n",
        "28": "import junit.framework.TestCase;\n",
        "29": "\n",
        "30": "import java.io.Serializable;\n",
        "31": "import java.util.ArrayList;\n",
        "32": "import java.util.Collection;\n",
        "33": "import java.util.Collections;\n",
        "34": "import java.util.Iterator;\n",
        "35": "import java.util.LinkedList;\n",
        "36": "import java.util.List;\n",
        "37": "import java.util.ListIterator;\n",
        "38": "import java.util.NoSuchElementException;\n",
        "39": "import java.util.RandomAccess;\n",
        "40": "\n",
        "41": "/**\n",
        "42": " * Unit test for {@code Lists}.\n",
        "43": " *\n",
        "44": " * @author Kevin Bourrillion\n",
        "45": " * @author Mike Bostock\n",
        "46": " * @author Jared Levy\n",
        "47": " */\n",
        "48": "@GwtCompatible(emulated = true)\n",
        "49": "public class ListsTest extends TestCase {\n",
        "50": "\n",
        "51": "  private static final Collection<Integer> SOME_COLLECTION\n",
        "52": "      = asList(0, 1, 1);\n",
        "53": "\n",
        "54": "  private static final Iterable<Integer> SOME_ITERABLE = new SomeIterable();\n",
        "55": "\n",
        "56": "  private static final class RemoveFirstFunction\n",
        "57": "      implements Function<String, String>, Serializable {\n",
        "58": "    @Override\n",
        "59": "    public String apply(String from) {\n",
        "60": "      return (from.length() == 0) ? from : from.substring(1);\n",
        "61": "    }\n",
        "62": "  }\n",
        "63": "\n",
        "64": "  private static class SomeIterable implements Iterable<Integer>, Serializable {\n",
        "65": "    @Override\n",
        "66": "    public Iterator<Integer> iterator() {\n",
        "67": "      return SOME_COLLECTION.iterator();\n",
        "68": "    }\n",
        "69": "    private static final long serialVersionUID = 0;\n",
        "70": "  }\n",
        "71": "\n",
        "72": "  private static final List<Integer> SOME_LIST\n",
        "73": "      = Lists.newArrayList(1, 2, 3, 4);\n",
        "74": "\n",
        "75": "  private static final List<Integer> SOME_SEQUENTIAL_LIST\n",
        "76": "      = Lists.newLinkedList(asList(1, 2, 3, 4));\n",
        "77": "\n",
        "78": "  private static final List<String> SOME_STRING_LIST\n",
        "79": "      = asList(\"1\", \"2\", \"3\", \"4\");\n",
        "80": "\n",
        "81": "  private static final Function<Number, String> SOME_FUNCTION\n",
        "82": "      = new SomeFunction();\n",
        "83": "\n",
        "84": "  private static class SomeFunction\n",
        "85": "      implements Function<Number, String>, Serializable {\n",
        "86": "    @Override\n",
        "87": "    public String apply(Number n) {\n",
        "88": "      return String.valueOf(n);\n",
        "89": "    }\n",
        "90": "    private static final long serialVersionUID = 0;\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  public void testCharactersOfIsView() {\n",
        "94": "    StringBuilder builder = new StringBuilder(\"abc\");\n",
        "95": "    List<Character> chars = Lists.charactersOf(builder);\n",
        "96": "    assertEquals(asList('a', 'b', 'c'), chars);\n",
        "97": "    builder.append(\"def\");\n",
        "98": "    assertEquals(\n",
        "99": "        asList('a', 'b', 'c', 'd', 'e', 'f'), chars);\n",
        "100": "    builder.deleteCharAt(5);\n",
        "101": "    assertEquals(\n",
        "102": "        asList('a', 'b', 'c', 'd', 'e'), chars);\n",
        "103": "  }\n",
        "104": "\n",
        "105": "  public void testNewArrayListEmpty() {\n",
        "106": "    ArrayList<Integer> list = Lists.newArrayList();\n",
        "107": "    assertEquals(Collections.emptyList(), list);\n",
        "108": "  }\n",
        "109": "\n",
        "110": "  public void testNewArrayListWithCapacity() {\n",
        "111": "    ArrayList<Integer> list = Lists.newArrayListWithCapacity(0);\n",
        "112": "    assertEquals(Collections.emptyList(), list);\n",
        "113": "\n",
        "114": "    ArrayList<Integer> bigger = Lists.newArrayListWithCapacity(256);\n",
        "115": "    assertEquals(Collections.emptyList(), bigger);\n",
        "116": "  }\n",
        "117": "\n",
        "118": "  public void testNewArrayListWithCapacity_negative() {\n",
        "119": "    try {\n",
        "120": "      Lists.newArrayListWithCapacity(-1);\n",
        "121": "      fail();\n",
        "122": "    } catch (IllegalArgumentException expected) {\n",
        "123": "    }\n",
        "124": "  }\n",
        "125": "\n",
        "126": "  public void testNewArrayListWithExpectedSize() {\n",
        "127": "    ArrayList<Integer> list = Lists.newArrayListWithExpectedSize(0);\n",
        "128": "    assertEquals(Collections.emptyList(), list);\n",
        "129": "\n",
        "130": "    ArrayList<Integer> bigger = Lists.newArrayListWithExpectedSize(256);\n",
        "131": "    assertEquals(Collections.emptyList(), bigger);\n",
        "132": "  }\n",
        "133": "\n",
        "134": "  public void testNewArrayListWithExpectedSize_negative() {\n",
        "135": "    try {\n",
        "136": "      Lists.newArrayListWithExpectedSize(-1);\n",
        "137": "      fail();\n",
        "138": "    } catch (IllegalArgumentException expected) {\n",
        "139": "    }\n",
        "140": "  }\n",
        "141": "\n",
        "142": "  public void testNewArrayListVarArgs() {\n",
        "143": "    ArrayList<Integer> list = Lists.newArrayList(0, 1, 1);\n",
        "144": "    assertEquals(SOME_COLLECTION, list);\n",
        "145": "  }\n",
        "146": "\n",
        "147": "  public void testComputeArrayListCapacity() {\n",
        "148": "    assertEquals(5, Lists.computeArrayListCapacity(0));\n",
        "149": "    assertEquals(13, Lists.computeArrayListCapacity(8));\n",
        "150": "    assertEquals(89, Lists.computeArrayListCapacity(77));\n",
        "151": "    assertEquals(22000005, Lists.computeArrayListCapacity(20000000));\n",
        "152": "    assertEquals(Integer.MAX_VALUE,\n",
        "153": "        Lists.computeArrayListCapacity(Integer.MAX_VALUE - 1000));\n",
        "154": "  }\n",
        "155": "\n",
        "156": "  public void testNewArrayListFromCollection() {\n",
        "157": "    ArrayList<Integer> list = Lists.newArrayList(SOME_COLLECTION);\n",
        "158": "    assertEquals(SOME_COLLECTION, list);\n",
        "159": "  }\n",
        "160": "\n",
        "161": "  public void testNewArrayListFromIterable() {\n",
        "162": "    ArrayList<Integer> list = Lists.newArrayList(SOME_ITERABLE);\n",
        "163": "    assertEquals(SOME_COLLECTION, list);\n",
        "164": "  }\n",
        "165": "\n",
        "166": "  public void testNewArrayListFromIterator() {\n",
        "167": "    ArrayList<Integer> list = Lists.newArrayList(SOME_COLLECTION.iterator());\n",
        "168": "    assertEquals(SOME_COLLECTION, list);\n",
        "169": "  }\n",
        "170": "\n",
        "171": "  public void testNewLinkedListEmpty() {\n",
        "172": "    LinkedList<Integer> list = Lists.newLinkedList();\n",
        "173": "    assertEquals(Collections.emptyList(), list);\n",
        "174": "  }\n",
        "175": "\n",
        "176": "  public void testNewLinkedListFromCollection() {\n",
        "177": "    LinkedList<Integer> list = Lists.newLinkedList(SOME_COLLECTION);\n",
        "178": "    assertEquals(SOME_COLLECTION, list);\n",
        "179": "  }\n",
        "180": "\n",
        "181": "  public void testNewLinkedListFromIterable() {\n",
        "182": "    LinkedList<Integer> list = Lists.newLinkedList(SOME_ITERABLE);\n",
        "183": "    assertEquals(SOME_COLLECTION, list);\n",
        "184": "  }\n",
        "185": "\n",
        "186": "  /**\n",
        "187": "   * This is just here to illustrate how {@code Arrays#asList} differs from\n",
        "188": "   * {@code Lists#newArrayList}.\n",
        "189": "   */\n",
        "190": "  public void testArraysAsList() {\n",
        "191": "    List<String> ourWay = Lists.newArrayList(\"foo\", \"bar\", \"baz\");\n",
        "192": "    List<String> otherWay = asList(\"foo\", \"bar\", \"baz\");\n",
        "193": "\n",
        "194": "    // They're logically equal\n",
        "195": "    assertEquals(ourWay, otherWay);\n",
        "196": "\n",
        "197": "    // The result of Arrays.asList() is mutable\n",
        "198": "    otherWay.set(0, \"FOO\");\n",
        "199": "    assertEquals(\"FOO\", otherWay.get(0));\n",
        "200": "\n",
        "201": "    // But it can't grow\n",
        "202": "    try {\n",
        "203": "      otherWay.add(\"nope\");\n",
        "204": "      fail(\"no exception thrown\");\n",
        "205": "    } catch (UnsupportedOperationException expected) {\n",
        "206": "    }\n",
        "207": "\n",
        "208": "    // And it can't shrink\n",
        "209": "    try {\n",
        "210": "      otherWay.remove(2);\n",
        "211": "      fail(\"no exception thrown\");\n",
        "212": "    } catch (UnsupportedOperationException expected) {\n",
        "213": "    }\n",
        "214": "  }\n",
        "215": "\n",
        "216": "  private void checkFooBarBazList(List<String> list) {\n",
        "217": "    assertThat(list).containsExactly(\"foo\", \"bar\", \"baz\").inOrder();\n",
        "218": "    assertEquals(3, list.size());\n",
        "219": "    assertIndexIsOutOfBounds(list, -1);\n",
        "220": "    assertEquals(\"foo\", list.get(0));\n",
        "221": "    assertEquals(\"bar\", list.get(1));\n",
        "222": "    assertEquals(\"baz\", list.get(2));\n",
        "223": "    assertIndexIsOutOfBounds(list, 3);\n",
        "224": "  }\n",
        "225": "\n",
        "226": "  public void testAsList1Small() {\n",
        "227": "    List<String> list = Lists.asList(\"foo\", new String[0]);\n",
        "228": "    assertThat(list).contains(\"foo\");\n",
        "229": "    assertEquals(1, list.size());\n",
        "230": "    assertIndexIsOutOfBounds(list, -1);\n",
        "231": "    assertEquals(\"foo\", list.get(0));\n",
        "232": "    assertIndexIsOutOfBounds(list, 1);\n",
        "233": "    assertTrue(list instanceof RandomAccess);\n",
        "234": "\n",
        "235": "    new IteratorTester<String>(3, UNMODIFIABLE, singletonList(\"foo\"),\n",
        "236": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "237": "      @Override protected Iterator<String> newTargetIterator() {\n",
        "238": "        return Lists.asList(\"foo\", new String[0]).iterator();\n",
        "239": "      }\n",
        "240": "    }.test();\n",
        "241": "  }\n",
        "242": "\n",
        "243": "  public void testAsList2() {\n",
        "244": "    List<String> list = Lists.asList(\"foo\", \"bar\", new String[] { \"baz\" });\n",
        "245": "    checkFooBarBazList(list);\n",
        "246": "    assertTrue(list instanceof RandomAccess);\n",
        "247": "\n",
        "248": "    new IteratorTester<String>(5, UNMODIFIABLE, asList(\"foo\", \"bar\",\n",
        "249": "        \"baz\"), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "250": "      @Override protected Iterator<String> newTargetIterator() {\n",
        "251": "        return Lists.asList(\"foo\", \"bar\", new String[] {\"baz\"}).iterator();\n",
        "252": "      }\n",
        "253": "    }.test();\n",
        "254": "  }\n",
        "255": "\n",
        "256": "  private static void assertIndexIsOutOfBounds(List<String> list, int index) {\n",
        "257": "    try {\n",
        "258": "      list.get(index);\n",
        "259": "      fail();\n",
        "260": "    } catch (IndexOutOfBoundsException expected) {\n",
        "261": "    }\n",
        "262": "  }\n",
        "263": "\n",
        "264": "  public void testReverseViewRandomAccess() {\n",
        "265": "    List<Integer> fromList = Lists.newArrayList(SOME_LIST);\n",
        "266": "    List<Integer> toList = Lists.reverse(fromList);\n",
        "267": "    assertReverseView(fromList, toList);\n",
        "268": "  }\n",
        "269": "\n",
        "270": "  public void testReverseViewSequential() {\n",
        "271": "    List<Integer> fromList = Lists.newLinkedList(SOME_SEQUENTIAL_LIST);\n",
        "272": "    List<Integer> toList = Lists.reverse(fromList);\n",
        "273": "    assertReverseView(fromList, toList);\n",
        "274": "  }\n",
        "275": "\n",
        "276": "  private static void assertReverseView(List<Integer> fromList,\n",
        "277": "      List<Integer> toList) {\n",
        "278": "    /* fromList modifications reflected in toList */\n",
        "279": "    fromList.set(0, 5);\n",
        "280": "    assertEquals(asList(4, 3, 2, 5), toList);\n",
        "281": "    fromList.add(6);\n",
        "282": "    assertEquals(asList(6, 4, 3, 2, 5), toList);\n",
        "283": "    fromList.add(2, 9);\n",
        "284": "    assertEquals(asList(6, 4, 3, 9, 2, 5), toList);\n",
        "285": "    fromList.remove(Integer.valueOf(2));\n",
        "286": "    assertEquals(asList(6, 4, 3, 9, 5), toList);\n",
        "287": "    fromList.remove(3);\n",
        "288": "    assertEquals(asList(6, 3, 9, 5), toList);\n",
        "289": "\n",
        "290": "    /* toList modifications reflected in fromList */\n",
        "291": "    toList.remove(0);\n",
        "292": "    assertEquals(asList(5, 9, 3), fromList);\n",
        "293": "    toList.add(7);\n",
        "294": "    assertEquals(asList(7, 5, 9, 3), fromList);\n",
        "295": "    toList.add(5);\n",
        "296": "    assertEquals(asList(5, 7, 5, 9, 3), fromList);\n",
        "297": "    toList.remove(Integer.valueOf(5));\n",
        "298": "    assertEquals(asList(5, 7, 9, 3), fromList);\n",
        "299": "    toList.set(1, 8);\n",
        "300": "    assertEquals(asList(5, 7, 8, 3), fromList);\n",
        "301": "    toList.clear();\n",
        "302": "    assertEquals(Collections.emptyList(), fromList);\n",
        "303": "  }\n",
        "304": "\n",
        "305": "  private static <E> List<E> list(E... elements) {\n",
        "306": "    return ImmutableList.copyOf(elements);\n",
        "307": "  }\n",
        "308": "\n",
        "309": "  @SuppressWarnings(\"unchecked\") // varargs!\n",
        "310": "  public void testCartesianProduct_binary1x1() {\n",
        "311": "    assertThat(Lists.cartesianProduct(list(1), list(2))).contains(list(1, 2));\n",
        "312": "  }\n",
        "313": "\n",
        "314": "  @SuppressWarnings(\"unchecked\") // varargs!\n",
        "315": "  public void testCartesianProduct_binary1x2() {\n",
        "316": "    assertThat(Lists.cartesianProduct(list(1), list(2, 3)))\n",
        "317": "        .containsExactly(list(1, 2), list(1, 3)).inOrder();\n",
        "318": "  }\n",
        "319": "\n",
        "320": "  @SuppressWarnings(\"unchecked\") // varargs!\n",
        "321": "  public void testCartesianProduct_binary2x2() {\n",
        "322": "    assertThat(Lists.cartesianProduct(list(1, 2), list(3, 4)))\n",
        "323": "        .containsExactly(list(1, 3), list(1, 4), list(2, 3), list(2, 4)).inOrder();\n",
        "324": "  }\n",
        "325": "\n",
        "326": "  @SuppressWarnings(\"unchecked\") // varargs!\n",
        "327": "  public void testCartesianProduct_2x2x2() {\n",
        "328": "    assertThat(Lists.cartesianProduct(list(0, 1), list(0, 1), list(0, 1))).containsExactly(\n",
        "329": "        list(0, 0, 0), list(0, 0, 1), list(0, 1, 0), list(0, 1, 1),\n",
        "330": "        list(1, 0, 0), list(1, 0, 1), list(1, 1, 0), list(1, 1, 1)).inOrder();\n",
        "331": "  }\n",
        "332": "\n",
        "333": "  @SuppressWarnings(\"unchecked\") // varargs!\n",
        "334": "  public void testCartesianProduct_contains() {\n",
        "335": "    List<List<Integer>> actual = Lists.cartesianProduct(list(1, 2), list(3, 4));\n",
        "336": "    assertTrue(actual.contains(list(1, 3)));\n",
        "337": "    assertTrue(actual.contains(list(1, 4)));\n",
        "338": "    assertTrue(actual.contains(list(2, 3)));\n",
        "339": "    assertTrue(actual.contains(list(2, 4)));\n",
        "340": "    assertFalse(actual.contains(list(3, 1)));\n",
        "341": "  }\n",
        "342": "\n",
        "343": "  @SuppressWarnings(\"unchecked\") // varargs!\n",
        "344": "  public void testCartesianProduct_unrelatedTypes() {\n",
        "345": "    List<Integer> x = list(1, 2);\n",
        "346": "    List<String> y = list(\"3\", \"4\");\n",
        "347": "\n",
        "348": "    List<Object> exp1 = list((Object) 1, \"3\");\n",
        "349": "    List<Object> exp2 = list((Object) 1, \"4\");\n",
        "350": "    List<Object> exp3 = list((Object) 2, \"3\");\n",
        "351": "    List<Object> exp4 = list((Object) 2, \"4\");\n",
        "352": "\n",
        "353": "    assertThat(Lists.<Object>cartesianProduct(x, y))\n",
        "354": "        .containsExactly(exp1, exp2, exp3, exp4).inOrder();\n",
        "355": "  }\n",
        "356": "\n",
        "357": "  @SuppressWarnings(\"unchecked\") // varargs!\n",
        "358": "  public void testCartesianProductTooBig() {\n",
        "359": "    List<String> list = Collections.nCopies(10000, \"foo\");\n",
        "360": "    try {\n",
        "361": "      Lists.cartesianProduct(list, list, list, list, list);\n",
        "362": "      fail(\"Expected IAE\");\n",
        "363": "    } catch (IllegalArgumentException expected) {}\n",
        "364": "  }\n",
        "365": "\n",
        "366": "  public void testTransformHashCodeRandomAccess() {\n",
        "367": "    List<String> list = Lists.transform(SOME_LIST, SOME_FUNCTION);\n",
        "368": "    assertEquals(SOME_STRING_LIST.hashCode(), list.hashCode());\n",
        "369": "  }\n",
        "370": "\n",
        "371": "  public void testTransformHashCodeSequential() {\n",
        "372": "    List<String> list = Lists.transform(SOME_SEQUENTIAL_LIST, SOME_FUNCTION);\n",
        "373": "    assertEquals(SOME_STRING_LIST.hashCode(), list.hashCode());\n",
        "374": "  }\n",
        "375": "\n",
        "376": "  public void testTransformModifiableRandomAccess() {\n",
        "377": "    List<Integer> fromList = Lists.newArrayList(SOME_LIST);\n",
        "378": "    List<String> list = Lists.transform(fromList, SOME_FUNCTION);\n",
        "379": "    assertTransformModifiable(list);\n",
        "380": "  }\n",
        "381": "\n",
        "382": "  public void testTransformModifiableSequential() {\n",
        "383": "    List<Integer> fromList = Lists.newLinkedList(SOME_SEQUENTIAL_LIST);\n",
        "384": "    List<String> list = Lists.transform(fromList, SOME_FUNCTION);\n",
        "385": "    assertTransformModifiable(list);\n",
        "386": "  }\n",
        "387": "\n",
        "388": "  private static void assertTransformModifiable(List<String> list) {\n",
        "389": "    try {\n",
        "390": "      list.add(\"5\");\n",
        "391": "      fail(\"transformed list is addable\");\n",
        "392": "    } catch (UnsupportedOperationException expected) {}\n",
        "393": "    list.remove(0);\n",
        "394": "    assertEquals(asList(\"2\", \"3\", \"4\"), list);\n",
        "395": "    list.remove(\"3\");\n",
        "396": "    assertEquals(asList(\"2\", \"4\"), list);\n",
        "397": "    try {\n",
        "398": "      list.set(0, \"5\");\n",
        "399": "      fail(\"transformed list is setable\");\n",
        "400": "    } catch (UnsupportedOperationException expected) {}\n",
        "401": "    list.clear();\n",
        "402": "    assertEquals(Collections.emptyList(), list);\n",
        "403": "  }\n",
        "404": "\n",
        "405": "  public void testTransformViewRandomAccess() {\n",
        "406": "    List<Integer> fromList = Lists.newArrayList(SOME_LIST);\n",
        "407": "    List<String> toList = Lists.transform(fromList, SOME_FUNCTION);\n",
        "408": "    assertTransformView(fromList, toList);\n",
        "409": "  }\n",
        "410": "\n",
        "411": "  public void testTransformViewSequential() {\n",
        "412": "    List<Integer> fromList = Lists.newLinkedList(SOME_SEQUENTIAL_LIST);\n",
        "413": "    List<String> toList = Lists.transform(fromList, SOME_FUNCTION);\n",
        "414": "    assertTransformView(fromList, toList);\n",
        "415": "  }\n",
        "416": "\n",
        "417": "  private static void assertTransformView(List<Integer> fromList,\n",
        "418": "      List<String> toList) {\n",
        "419": "    /* fromList modifications reflected in toList */\n",
        "420": "    fromList.set(0, 5);\n",
        "421": "    assertEquals(asList(\"5\", \"2\", \"3\", \"4\"), toList);\n",
        "422": "    fromList.add(6);\n",
        "423": "    assertEquals(asList(\"5\", \"2\", \"3\", \"4\", \"6\"), toList);\n",
        "424": "    fromList.remove(Integer.valueOf(2));\n",
        "425": "    assertEquals(asList(\"5\", \"3\", \"4\", \"6\"), toList);\n",
        "426": "    fromList.remove(2);\n",
        "427": "    assertEquals(asList(\"5\", \"3\", \"6\"), toList);\n",
        "428": "\n",
        "429": "    /* toList modifications reflected in fromList */\n",
        "430": "    toList.remove(2);\n",
        "431": "    assertEquals(asList(5, 3), fromList);\n",
        "432": "    toList.remove(\"5\");\n",
        "433": "    assertEquals(asList(3), fromList);\n",
        "434": "    toList.clear();\n",
        "435": "    assertEquals(Collections.emptyList(), fromList);\n",
        "436": "  }\n",
        "437": "\n",
        "438": "  public void testTransformRandomAccess() {\n",
        "439": "    List<String> list = Lists.transform(SOME_LIST, SOME_FUNCTION);\n",
        "440": "    assertTrue(list instanceof RandomAccess);\n",
        "441": "  }\n",
        "442": "\n",
        "443": "  public void testTransformSequential() {\n",
        "444": "    List<String> list = Lists.transform(SOME_SEQUENTIAL_LIST, SOME_FUNCTION);\n",
        "445": "    assertThat(list).isNotInstanceOf(RandomAccess.class);\n",
        "446": "  }\n",
        "447": "\n",
        "448": "  public void testTransformListIteratorRandomAccess() {\n",
        "449": "    List<Integer> fromList = Lists.newArrayList(SOME_LIST);\n",
        "450": "    List<String> list = Lists.transform(fromList, SOME_FUNCTION);\n",
        "451": "    assertTransformListIterator(list);\n",
        "452": "  }\n",
        "453": "\n",
        "454": "  public void testTransformListIteratorSequential() {\n",
        "455": "    List<Integer> fromList = Lists.newLinkedList(SOME_SEQUENTIAL_LIST);\n",
        "456": "    List<String> list = Lists.transform(fromList, SOME_FUNCTION);\n",
        "457": "    assertTransformListIterator(list);\n",
        "458": "  }\n",
        "459": "\n",
        "460": "  public void testTransformPreservesIOOBEsThrownByFunction() {\n",
        "461": "    try {\n",
        "462": "      Lists.transform(ImmutableList.of(\"foo\", \"bar\"), new Function<String, String>() {\n",
        "463": "        @Override\n",
        "464": "        public String apply(String input) {\n",
        "465": "          throw new IndexOutOfBoundsException();\n",
        "466": "        }\n",
        "467": "      }).toArray();\n",
        "468": "      fail();\n",
        "469": "    } catch (IndexOutOfBoundsException expected) {\n",
        "470": "      // success\n",
        "471": "    }\n",
        "472": "  }\n",
        "473": "\n",
        "474": "  private static void assertTransformListIterator(List<String> list) {\n",
        "475": "    ListIterator<String> iterator = list.listIterator(1);\n",
        "476": "    assertEquals(1, iterator.nextIndex());\n",
        "477": "    assertEquals(\"2\", iterator.next());\n",
        "478": "    assertEquals(\"3\", iterator.next());\n",
        "479": "    assertEquals(\"4\", iterator.next());\n",
        "480": "    assertEquals(4, iterator.nextIndex());\n",
        "481": "    try {\n",
        "482": "      iterator.next();\n",
        "483": "      fail(\"did not detect end of list\");\n",
        "484": "    } catch (NoSuchElementException expected) {}\n",
        "485": "    assertEquals(3, iterator.previousIndex());\n",
        "486": "    assertEquals(\"4\", iterator.previous());\n",
        "487": "    assertEquals(\"3\", iterator.previous());\n",
        "488": "    assertEquals(\"2\", iterator.previous());\n",
        "489": "    assertTrue(iterator.hasPrevious());\n",
        "490": "    assertEquals(\"1\", iterator.previous());\n",
        "491": "    assertFalse(iterator.hasPrevious());\n",
        "492": "    assertEquals(-1, iterator.previousIndex());\n",
        "493": "    try {\n",
        "494": "      iterator.previous();\n",
        "495": "      fail(\"did not detect beginning of list\");\n",
        "496": "    } catch (NoSuchElementException expected) {}\n",
        "497": "    iterator.remove();\n",
        "498": "    assertEquals(asList(\"2\", \"3\", \"4\"), list);\n",
        "499": "    assertFalse(list.isEmpty());\n",
        "500": "\n",
        "501": "    // An UnsupportedOperationException or IllegalStateException may occur.\n",
        "502": "    try {\n",
        "503": "      iterator.add(\"1\");\n",
        "504": "      fail(\"transformed list iterator is addable\");\n",
        "505": "    } catch (UnsupportedOperationException expected) {\n",
        "506": "    } catch (IllegalStateException expected) {}\n",
        "507": "    try {\n",
        "508": "      iterator.set(\"1\");\n",
        "509": "      fail(\"transformed list iterator is settable\");\n",
        "510": "    } catch (UnsupportedOperationException expected) {\n",
        "511": "    } catch (IllegalStateException expected) {}\n",
        "512": "  }\n",
        "513": "\n",
        "514": "  public void testTransformIteratorRandomAccess() {\n",
        "515": "    List<Integer> fromList = Lists.newArrayList(SOME_LIST);\n",
        "516": "    List<String> list = Lists.transform(fromList, SOME_FUNCTION);\n",
        "517": "    assertTransformIterator(list);\n",
        "518": "  }\n",
        "519": "\n",
        "520": "  public void testTransformIteratorSequential() {\n",
        "521": "    List<Integer> fromList = Lists.newLinkedList(SOME_SEQUENTIAL_LIST);\n",
        "522": "    List<String> list = Lists.transform(fromList, SOME_FUNCTION);\n",
        "523": "    assertTransformIterator(list);\n",
        "524": "  }\n",
        "525": "\n",
        "526": "  /**\n",
        "527": "   * We use this class to avoid the need to suppress generics checks with\n",
        "528": "   * easy mock.\n",
        "529": "   */\n",
        "530": "  private interface IntegerList extends List<Integer> {}\n",
        "531": "\n",
        "532": "  private static void assertTransformIterator(List<String> list) {\n",
        "533": "    Iterator<String> iterator = list.iterator();\n",
        "534": "    assertTrue(iterator.hasNext());\n",
        "535": "    assertEquals(\"1\", iterator.next());\n",
        "536": "    assertTrue(iterator.hasNext());\n",
        "537": "    assertEquals(\"2\", iterator.next());\n",
        "538": "    assertTrue(iterator.hasNext());\n",
        "539": "    assertEquals(\"3\", iterator.next());\n",
        "540": "    assertTrue(iterator.hasNext());\n",
        "541": "    assertEquals(\"4\", iterator.next());\n",
        "542": "    assertFalse(iterator.hasNext());\n",
        "543": "    try {\n",
        "544": "      iterator.next();\n",
        "545": "      fail(\"did not detect end of list\");\n",
        "546": "    } catch (NoSuchElementException expected) {}\n",
        "547": "    iterator.remove();\n",
        "548": "    assertEquals(asList(\"1\", \"2\", \"3\"), list);\n",
        "549": "    assertFalse(iterator.hasNext());\n",
        "550": "  }\n",
        "551": "\n",
        "552": "  public void testPartition_badSize() {\n",
        "553": "    List<Integer> source = Collections.singletonList(1);\n",
        "554": "    try {\n",
        "555": "      Lists.partition(source, 0);\n",
        "556": "      fail();\n",
        "557": "    } catch (IllegalArgumentException expected) {\n",
        "558": "    }\n",
        "559": "  }\n",
        "560": "\n",
        "561": "  public void testPartition_empty() {\n",
        "562": "    List<Integer> source = Collections.emptyList();\n",
        "563": "    List<List<Integer>> partitions = Lists.partition(source, 1);\n",
        "564": "    assertTrue(partitions.isEmpty());\n",
        "565": "    assertEquals(0, partitions.size());\n",
        "566": "  }\n",
        "567": "\n",
        "568": "  public void testPartition_1_1() {\n",
        "569": "    List<Integer> source = Collections.singletonList(1);\n",
        "570": "    List<List<Integer>> partitions = Lists.partition(source, 1);\n",
        "571": "    assertEquals(1, partitions.size());\n",
        "572": "    assertEquals(Collections.singletonList(1), partitions.get(0));\n",
        "573": "  }\n",
        "574": "\n",
        "575": "  public void testPartition_1_2() {\n",
        "576": "    List<Integer> source = Collections.singletonList(1);\n",
        "577": "    List<List<Integer>> partitions = Lists.partition(source, 2);\n",
        "578": "    assertEquals(1, partitions.size());\n",
        "579": "    assertEquals(Collections.singletonList(1), partitions.get(0));\n",
        "580": "  }\n",
        "581": "\n",
        "582": "  public void testPartition_2_1() {\n",
        "583": "    List<Integer> source = asList(1, 2);\n",
        "584": "    List<List<Integer>> partitions = Lists.partition(source, 1);\n",
        "585": "    assertEquals(2, partitions.size());\n",
        "586": "    assertEquals(Collections.singletonList(1), partitions.get(0));\n",
        "587": "    assertEquals(Collections.singletonList(2), partitions.get(1));\n",
        "588": "  }\n",
        "589": "\n",
        "590": "  public void testPartition_3_2() {\n",
        "591": "    List<Integer> source = asList(1, 2, 3);\n",
        "592": "    List<List<Integer>> partitions = Lists.partition(source, 2);\n",
        "593": "    assertEquals(2, partitions.size());\n",
        "594": "    assertEquals(asList(1, 2), partitions.get(0));\n",
        "595": "    assertEquals(asList(3), partitions.get(1));\n",
        "596": "  }\n",
        "597": "\n",
        "598": "  public void testPartitionRandomAccessFalse() {\n",
        "599": "    List<Integer> source = Lists.newLinkedList(asList(1, 2, 3));\n",
        "600": "    List<List<Integer>> partitions = Lists.partition(source, 2);\n",
        "601": "    assertThat(partitions).isNotInstanceOf(RandomAccess.class);\n",
        "602": "    assertThat(partitions.get(0)).isNotInstanceOf(RandomAccess.class);\n",
        "603": "    assertThat(partitions.get(1)).isNotInstanceOf(RandomAccess.class);\n",
        "604": "  }\n",
        "605": "\n",
        "606": "  // TODO: use the ListTestSuiteBuilder\n",
        "607": "\n",
        "608": "  public void testPartition_view() {\n",
        "609": "    List<Integer> list = asList(1, 2, 3);\n",
        "610": "    List<List<Integer>> partitions = Lists.partition(list, 3);\n",
        "611": "\n",
        "612": "    // Changes before the partition is retrieved are reflected\n",
        "613": "    list.set(0, 3);\n",
        "614": "\n",
        "615": "    Iterator<List<Integer>> iterator = partitions.iterator();\n",
        "616": "\n",
        "617": "    // Changes before the partition is retrieved are reflected\n",
        "618": "    list.set(1, 4);\n",
        "619": "\n",
        "620": "    List<Integer> first = iterator.next();\n",
        "621": "\n",
        "622": "    // Changes after are too (unlike Iterables.partition)\n",
        "623": "    list.set(2, 5);\n",
        "624": "\n",
        "625": "    assertEquals(asList(3, 4, 5), first);\n",
        "626": "\n",
        "627": "    // Changes to a sublist also write through to the original list\n",
        "628": "    first.set(1, 6);\n",
        "629": "    assertEquals(asList(3, 6, 5), list);\n",
        "630": "  }\n",
        "631": "\n",
        "632": "  public void testPartitionSize_1() {\n",
        "633": "    List<Integer> list = asList(1, 2, 3);\n",
        "634": "    assertEquals(1, Lists.partition(list, Integer.MAX_VALUE).size());\n",
        "635": "    assertEquals(1, Lists.partition(list, Integer.MAX_VALUE - 1).size());\n",
        "636": "  }\n",
        "637": "}\n"
    }
}