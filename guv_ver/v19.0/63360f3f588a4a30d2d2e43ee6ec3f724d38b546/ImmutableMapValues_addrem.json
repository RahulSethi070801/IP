{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.j2objc.annotations.Weak;\n",
        "21": "\n",
        "22": "import java.util.Map.Entry;\n",
        "23": "\n",
        "24": "import javax.annotation.Nullable;\n",
        "25": "\n",
        "26": "/**\n",
        "27": " * {@code values()} implementation for {@link ImmutableMap}.\n",
        "28": " *\n",
        "29": " * @author Jesse Wilson\n",
        "30": " * @author Kevin Bourrillion\n",
        "31": " */\n",
        "32": "@GwtCompatible(emulated = true)\n",
        "33": "final class ImmutableMapValues<K, V> extends ImmutableCollection<V> {\n",
        "34": "  @Weak private final ImmutableMap<K, V> map;\n",
        "35": "\n",
        "36": "  ImmutableMapValues(ImmutableMap<K, V> map) {\n",
        "37": "    this.map = map;\n",
        "38": "  }\n",
        "39": "\n",
        "40": "  @Override\n",
        "41": "  public int size() {\n",
        "42": "    return map.size();\n",
        "43": "  }\n",
        "44": "\n",
        "45": "  @Override\n",
        "46": "  public UnmodifiableIterator<V> iterator() {\n",
        "47": "    return new UnmodifiableIterator<V>() {\n",
        "48": "      final UnmodifiableIterator<Entry<K, V>> entryItr = map.entrySet().iterator();\n",
        "49": "\n",
        "50": "      @Override\n",
        "51": "      public boolean hasNext() {\n",
        "52": "        return entryItr.hasNext();\n",
        "53": "      }\n",
        "54": "\n",
        "55": "      @Override\n",
        "56": "      public V next() {\n",
        "57": "        return entryItr.next().getValue();\n",
        "58": "      }\n",
        "59": "    };\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  @Override\n",
        "63": "  public boolean contains(@Nullable Object object) {\n",
        "64": "    return object != null && Iterators.contains(iterator(), object);\n",
        "65": "  }\n",
        "66": "\n",
        "67": "  @Override\n",
        "68": "  boolean isPartialView() {\n",
        "69": "    return true;\n",
        "70": "  }\n",
        "71": "\n",
        "72": "  @Override\n",
        "73": "  ImmutableList<V> createAsList() {\n",
        "74": "    final ImmutableList<Entry<K, V>> entryList = map.entrySet().asList();\n",
        "75": "    return new ImmutableAsList<V>() {\n",
        "76": "      @Override\n",
        "77": "      public V get(int index) {\n",
        "78": "        return entryList.get(index).getValue();\n",
        "79": "      }\n",
        "80": "\n",
        "81": "      @Override\n",
        "82": "      ImmutableCollection<V> delegateCollection() {\n",
        "83": "        return ImmutableMapValues.this;\n",
        "84": "      }\n",
        "85": "    };\n",
        "86": "  }\n",
        "87": "}\n",
        "88": "\n"
    }
}