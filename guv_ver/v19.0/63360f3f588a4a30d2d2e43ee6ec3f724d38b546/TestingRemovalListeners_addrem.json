{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2011 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "6": " *\n",
        "7": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "8": " *\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "13": " */\n",
        "14": "\n",
        "15": "package com.google.common.cache;\n",
        "16": "\n",
        "17": "import com.google.common.annotations.GwtCompatible;\n",
        "18": "\n",
        "19": "import java.util.concurrent.atomic.AtomicInteger;\n",
        "20": "\n",
        "21": "/**\n",
        "22": " * Utility {@link RemovalListener} implementations intended for use in testing.\n",
        "23": " *\n",
        "24": " * @author mike nonemacher\n",
        "25": " */\n",
        "26": "@GwtCompatible(emulated = true)\n",
        "27": "class TestingRemovalListeners {\n",
        "28": "\n",
        "29": "  /**\n",
        "30": "   * Returns a new no-op {@code RemovalListener}.\n",
        "31": "   */\n",
        "32": "  static <K, V> NullRemovalListener<K, V> nullRemovalListener() {\n",
        "33": "    return new NullRemovalListener<K, V>();\n",
        "34": "  }\n",
        "35": "\n",
        "36": "  /**\n",
        "37": "   * Type-inferring factory method for creating a {@link CountingRemovalListener}.\n",
        "38": "   */\n",
        "39": "  static <K, V> CountingRemovalListener<K, V> countingRemovalListener() {\n",
        "40": "    return new CountingRemovalListener<K,V>();\n",
        "41": "  }\n",
        "42": "\n",
        "43": "  /**\n",
        "44": "   * {@link RemovalListener} that counts each {@link RemovalNotification} it receives, and provides\n",
        "45": "   * access to the most-recently received one.\n",
        "46": "   */\n",
        "47": "  static class CountingRemovalListener<K, V> implements RemovalListener<K, V> {\n",
        "48": "    private final AtomicInteger count = new AtomicInteger();\n",
        "49": "    private volatile RemovalNotification<K, V> lastNotification;\n",
        "50": "\n",
        "51": "    @Override\n",
        "52": "    public void onRemoval(RemovalNotification<K, V> notification) {\n",
        "53": "      count.incrementAndGet();\n",
        "54": "      lastNotification = notification;\n",
        "55": "    }\n",
        "56": "\n",
        "57": "    public int getCount() {\n",
        "58": "      return count.get();\n",
        "59": "    }\n",
        "60": "\n",
        "61": "    public K getLastEvictedKey() {\n",
        "62": "      return lastNotification.getKey();\n",
        "63": "    }\n",
        "64": "\n",
        "65": "    public V getLastEvictedValue() {\n",
        "66": "      return lastNotification.getValue();\n",
        "67": "    }\n",
        "68": "\n",
        "69": "    public RemovalNotification<K, V> getLastNotification() {\n",
        "70": "      return lastNotification;\n",
        "71": "    }\n",
        "72": "  }\n",
        "73": "\n",
        "74": "  /**\n",
        "75": "   * No-op {@link RemovalListener}.\n",
        "76": "   */\n",
        "77": "  static class NullRemovalListener<K, V> implements RemovalListener<K, V> {\n",
        "78": "    @Override\n",
        "79": "    public void onRemoval(RemovalNotification<K, V> notification) {}\n",
        "80": "  }\n",
        "81": "}\n",
        "82": "\n"
    }
}