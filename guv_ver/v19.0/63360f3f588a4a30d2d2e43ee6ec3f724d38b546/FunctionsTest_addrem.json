{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2005 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.base;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.collect.ImmutableMap;\n",
        "21": "import com.google.common.collect.Maps;\n",
        "22": "import com.google.common.testing.EqualsTester;\n",
        "23": "\n",
        "24": "import junit.framework.TestCase;\n",
        "25": "\n",
        "26": "import java.io.Serializable;\n",
        "27": "import java.util.Map;\n",
        "28": "\n",
        "29": "/**\n",
        "30": " * Tests for {@link Functions}.\n",
        "31": " *\n",
        "32": " * @author Mike Bostock\n",
        "33": " * @author Vlad Patryshev\n",
        "34": " */\n",
        "35": "@GwtCompatible(emulated = true)\n",
        "36": "public class FunctionsTest extends TestCase {\n",
        "37": "\n",
        "38": "  public void testIdentity_same() {\n",
        "39": "    Function<String, String> identity = Functions.identity();\n",
        "40": "    assertNull(identity.apply(null));\n",
        "41": "    assertSame(\"foo\", identity.apply(\"foo\"));\n",
        "42": "  }\n",
        "43": "\n",
        "44": "  public void testIdentity_notSame() {\n",
        "45": "    Function<Long, Long> identity = Functions.identity();\n",
        "46": "    assertNotSame(new Long(135135L), identity.apply(new Long(135135L)));\n",
        "47": "  }\n",
        "48": "\n",
        "49": "  public void testToStringFunction_apply() {\n",
        "50": "    assertEquals(\"3\", Functions.toStringFunction().apply(3));\n",
        "51": "    assertEquals(\"hiya\", Functions.toStringFunction().apply(\"hiya\"));\n",
        "52": "    assertEquals(\"I'm a string\",\n",
        "53": "        Functions.toStringFunction().apply(\n",
        "54": "            new Object() {\n",
        "55": "              @Override public String toString() {\n",
        "56": "                return \"I'm a string\";\n",
        "57": "              }\n",
        "58": "            }));\n",
        "59": "    try {\n",
        "60": "      Functions.toStringFunction().apply(null);\n",
        "61": "      fail(\"expected NullPointerException\");\n",
        "62": "    } catch (NullPointerException e) {\n",
        "63": "      // expected\n",
        "64": "    }\n",
        "65": "  }\n",
        "66": "\n",
        "67": "  public void testForMapWithoutDefault() {\n",
        "68": "    Map<String, Integer> map = Maps.newHashMap();\n",
        "69": "    map.put(\"One\", 1);\n",
        "70": "    map.put(\"Three\", 3);\n",
        "71": "    map.put(\"Null\", null);\n",
        "72": "    Function<String, Integer> function = Functions.forMap(map);\n",
        "73": "\n",
        "74": "    assertEquals(1, function.apply(\"One\").intValue());\n",
        "75": "    assertEquals(3, function.apply(\"Three\").intValue());\n",
        "76": "    assertNull(function.apply(\"Null\"));\n",
        "77": "\n",
        "78": "    try {\n",
        "79": "      function.apply(\"Two\");\n",
        "80": "      fail();\n",
        "81": "    } catch (IllegalArgumentException expected) {\n",
        "82": "    }\n",
        "83": "\n",
        "84": "    new EqualsTester()\n",
        "85": "        .addEqualityGroup(function, Functions.forMap(map))\n",
        "86": "        .addEqualityGroup(Functions.forMap(map, 42))\n",
        "87": "        .testEquals();\n",
        "88": "  }\n",
        "89": "\n",
        "90": "  public void testForMapWithDefault() {\n",
        "91": "    Map<String, Integer> map = Maps.newHashMap();\n",
        "92": "    map.put(\"One\", 1);\n",
        "93": "    map.put(\"Three\", 3);\n",
        "94": "    map.put(\"Null\", null);\n",
        "95": "    Function<String, Integer> function = Functions.forMap(map, 42);\n",
        "96": "\n",
        "97": "    assertEquals(1, function.apply(\"One\").intValue());\n",
        "98": "    assertEquals(42, function.apply(\"Two\").intValue());\n",
        "99": "    assertEquals(3, function.apply(\"Three\").intValue());\n",
        "100": "    assertNull(function.apply(\"Null\"));\n",
        "101": "\n",
        "102": "    new EqualsTester()\n",
        "103": "        .addEqualityGroup(function, Functions.forMap(map, 42))\n",
        "104": "        .addEqualityGroup(Functions.forMap(map))\n",
        "105": "        .addEqualityGroup(Functions.forMap(map, null))\n",
        "106": "        .addEqualityGroup(Functions.forMap(map, 43))\n",
        "107": "        .testEquals();\n",
        "108": "  }\n",
        "109": "\n",
        "110": "  public void testForMapWithDefault_null() {\n",
        "111": "    ImmutableMap<String, Integer> map = ImmutableMap.of(\"One\", 1);\n",
        "112": "    Function<String, Integer> function = Functions.forMap(map, null);\n",
        "113": "\n",
        "114": "    assertEquals((Integer) 1, function.apply(\"One\"));\n",
        "115": "    assertNull(function.apply(\"Two\"));\n",
        "116": "\n",
        "117": "    // check basic sanity of equals and hashCode\n",
        "118": "    new EqualsTester()\n",
        "119": "        .addEqualityGroup(function)\n",
        "120": "        .addEqualityGroup(Functions.forMap(map, 1))\n",
        "121": "        .testEquals();\n",
        "122": "  }\n",
        "123": "\n",
        "124": "  public void testForMapWildCardWithDefault() {\n",
        "125": "    Map<String, Integer> map = Maps.newHashMap();\n",
        "126": "    map.put(\"One\", 1);\n",
        "127": "    map.put(\"Three\", 3);\n",
        "128": "    Number number = Double.valueOf(42);\n",
        "129": "    Function<String, Number> function = Functions.forMap(map, number);\n",
        "130": "\n",
        "131": "    assertEquals(1, function.apply(\"One\").intValue());\n",
        "132": "    assertEquals(number, function.apply(\"Two\"));\n",
        "133": "    assertEquals(3L, function.apply(\"Three\").longValue());\n",
        "134": "  }\n",
        "135": "\n",
        "136": "  public void testComposition() {\n",
        "137": "    Map<String, Integer> mJapaneseToInteger = Maps.newHashMap();\n",
        "138": "    mJapaneseToInteger.put(\"Ichi\", 1);\n",
        "139": "    mJapaneseToInteger.put(\"Ni\", 2);\n",
        "140": "    mJapaneseToInteger.put(\"San\", 3);\n",
        "141": "    Function<String, Integer> japaneseToInteger =\n",
        "142": "        Functions.forMap(mJapaneseToInteger);\n",
        "143": "\n",
        "144": "    Map<Integer, String> mIntegerToSpanish = Maps.newHashMap();\n",
        "145": "    mIntegerToSpanish.put(1, \"Uno\");\n",
        "146": "    mIntegerToSpanish.put(3, \"Tres\");\n",
        "147": "    mIntegerToSpanish.put(4, \"Cuatro\");\n",
        "148": "    Function<Integer, String> integerToSpanish =\n",
        "149": "        Functions.forMap(mIntegerToSpanish);\n",
        "150": "\n",
        "151": "    Function<String, String> japaneseToSpanish =\n",
        "152": "        Functions.compose(integerToSpanish, japaneseToInteger);\n",
        "153": "\n",
        "154": "    assertEquals(\"Uno\", japaneseToSpanish.apply(\"Ichi\"));\n",
        "155": "    try {\n",
        "156": "      japaneseToSpanish.apply(\"Ni\");\n",
        "157": "      fail();\n",
        "158": "    } catch (IllegalArgumentException e) {\n",
        "159": "    }\n",
        "160": "    assertEquals(\"Tres\", japaneseToSpanish.apply(\"San\"));\n",
        "161": "    try {\n",
        "162": "      japaneseToSpanish.apply(\"Shi\");\n",
        "163": "      fail();\n",
        "164": "    } catch (IllegalArgumentException e) {\n",
        "165": "    }\n",
        "166": "\n",
        "167": "    new EqualsTester()\n",
        "168": "        .addEqualityGroup(\n",
        "169": "            japaneseToSpanish,\n",
        "170": "            Functions.compose(integerToSpanish, japaneseToInteger))\n",
        "171": "        .addEqualityGroup(japaneseToInteger)\n",
        "172": "        .addEqualityGroup(integerToSpanish)\n",
        "173": "        .addEqualityGroup(\n",
        "174": "            Functions.compose(japaneseToInteger, integerToSpanish))\n",
        "175": "        .testEquals();\n",
        "176": "  }\n",
        "177": "\n",
        "178": "  public void testCompositionWildcard() {\n",
        "179": "    Map<String, Integer> mapJapaneseToInteger = Maps.newHashMap();\n",
        "180": "    Function<String, Integer> japaneseToInteger =\n",
        "181": "        Functions.forMap(mapJapaneseToInteger);\n",
        "182": "\n",
        "183": "    Function<Object, String> numberToSpanish = Functions.constant(\"Yo no se\");\n",
        "184": "\n",
        "185": "    Function<String, String> japaneseToSpanish =\n",
        "186": "        Functions.compose(numberToSpanish, japaneseToInteger);\n",
        "187": "  }\n",
        "188": "\n",
        "189": "  private static class HashCodeFunction implements Function<Object, Integer> {\n",
        "190": "    @Override\n",
        "191": "    public Integer apply(Object o) {\n",
        "192": "      return (o == null) ? 0 : o.hashCode();\n",
        "193": "    }\n",
        "194": "  }\n",
        "195": "\n",
        "196": "  public void testComposeOfFunctionsIsAssociative() {\n",
        "197": "    Map<Float, String> m = ImmutableMap.of(\n",
        "198": "        4.0f, \"A\", 3.0f, \"B\", 2.0f, \"C\", 1.0f, \"D\");\n",
        "199": "    Function<? super Integer, Boolean> h = Functions.constant(Boolean.TRUE);\n",
        "200": "    Function<? super String, Integer> g = new HashCodeFunction();\n",
        "201": "    Function<Float, String> f = Functions.forMap(m, \"F\");\n",
        "202": "\n",
        "203": "    Function<Float, Boolean> c1 = Functions.compose(Functions.compose(h, g), f);\n",
        "204": "    Function<Float, Boolean> c2 = Functions.compose(h, Functions.compose(g, f));\n",
        "205": "\n",
        "206": "    // Might be nice (eventually) to have:\n",
        "207": "    //     assertEquals(c1, c2);\n",
        "208": "\n",
        "209": "    // But for now, settle for this:\n",
        "210": "    assertEquals(c1.hashCode(), c2.hashCode());\n",
        "211": "\n",
        "212": "    assertEquals(c1.apply(1.0f), c2.apply(1.0f));\n",
        "213": "    assertEquals(c1.apply(5.0f), c2.apply(5.0f));\n",
        "214": "  }\n",
        "215": "\n",
        "216": "  public void testComposeOfPredicateAndFunctionIsAssociative() {\n",
        "217": "    Map<Float, String> m = ImmutableMap.of(\n",
        "218": "        4.0f, \"A\", 3.0f, \"B\", 2.0f, \"C\", 1.0f, \"D\");\n",
        "219": "    Predicate<? super Integer> h = Predicates.equalTo(42);\n",
        "220": "    Function<? super String, Integer> g = new HashCodeFunction();\n",
        "221": "    Function<Float, String> f = Functions.forMap(m, \"F\");\n",
        "222": "\n",
        "223": "    Predicate<Float> p1 = Predicates.compose(Predicates.compose(h, g), f);\n",
        "224": "    Predicate<Float> p2 = Predicates.compose(h, Functions.compose(g, f));\n",
        "225": "\n",
        "226": "    // Might be nice (eventually) to have:\n",
        "227": "    //     assertEquals(p1, p2);\n",
        "228": "\n",
        "229": "    // But for now, settle for this:\n",
        "230": "    assertEquals(p1.hashCode(), p2.hashCode());\n",
        "231": "\n",
        "232": "    assertEquals(p1.apply(1.0f), p2.apply(1.0f));\n",
        "233": "    assertEquals(p1.apply(5.0f), p2.apply(5.0f));\n",
        "234": "  }\n",
        "235": "\n",
        "236": "  public void testForPredicate() {\n",
        "237": "    Function<Object, Boolean> alwaysTrue =\n",
        "238": "        Functions.forPredicate(Predicates.alwaysTrue());\n",
        "239": "    Function<Object, Boolean> alwaysFalse =\n",
        "240": "        Functions.forPredicate(Predicates.alwaysFalse());\n",
        "241": "\n",
        "242": "    assertTrue(alwaysTrue.apply(0));\n",
        "243": "    assertFalse(alwaysFalse.apply(0));\n",
        "244": "\n",
        "245": "    new EqualsTester()\n",
        "246": "        .addEqualityGroup(\n",
        "247": "            alwaysTrue, Functions.forPredicate(Predicates.alwaysTrue()))\n",
        "248": "        .addEqualityGroup(alwaysFalse)\n",
        "249": "        .addEqualityGroup(Functions.identity())\n",
        "250": "        .testEquals();\n",
        "251": "  }\n",
        "252": "\n",
        "253": "  public void testConstant() {\n",
        "254": "    Function<Object, Object> f = Functions.<Object>constant(\"correct\");\n",
        "255": "    assertEquals(\"correct\", f.apply(new Object()));\n",
        "256": "    assertEquals(\"correct\", f.apply(null));\n",
        "257": "\n",
        "258": "    Function<Object, String> g = Functions.constant(null);\n",
        "259": "    assertEquals(null, g.apply(2));\n",
        "260": "    assertEquals(null, g.apply(null));\n",
        "261": "\n",
        "262": "    new EqualsTester()\n",
        "263": "        .addEqualityGroup(f, Functions.constant(\"correct\"))\n",
        "264": "        .addEqualityGroup(Functions.constant(\"incorrect\"))\n",
        "265": "        .addEqualityGroup(Functions.toStringFunction())\n",
        "266": "        .addEqualityGroup(g)\n",
        "267": "        .testEquals();\n",
        "268": "\n",
        "269": "    new EqualsTester()\n",
        "270": "        .addEqualityGroup(g, Functions.constant(null))\n",
        "271": "        .addEqualityGroup(Functions.constant(\"incorrect\"))\n",
        "272": "        .addEqualityGroup(Functions.toStringFunction())\n",
        "273": "        .addEqualityGroup(f)\n",
        "274": "        .testEquals();\n",
        "275": "  }\n",
        "276": "\n",
        "277": "  private static class CountingSupplier\n",
        "278": "      implements Supplier<Integer>, Serializable {\n",
        "279": "\n",
        "280": "    private static final long serialVersionUID = 0;\n",
        "281": "\n",
        "282": "    private int value;\n",
        "283": "\n",
        "284": "    @Override\n",
        "285": "    public Integer get() {\n",
        "286": "      return ++value;\n",
        "287": "    }\n",
        "288": "\n",
        "289": "    @Override\n",
        "290": "    public boolean equals(Object obj) {\n",
        "291": "      if (obj instanceof CountingSupplier) {\n",
        "292": "        return this.value == ((CountingSupplier) obj).value;\n",
        "293": "      }\n",
        "294": "      return false;\n",
        "295": "    }\n",
        "296": "\n",
        "297": "    @Override\n",
        "298": "    public int hashCode() {\n",
        "299": "      return value;\n",
        "300": "    }\n",
        "301": "  }\n",
        "302": "\n",
        "303": "  public void testForSupplier() {\n",
        "304": "    Supplier<Integer> supplier = new CountingSupplier();\n",
        "305": "    Function<Object, Integer> function = Functions.forSupplier(supplier);\n",
        "306": "\n",
        "307": "    assertEquals(1, (int) function.apply(null));\n",
        "308": "    assertEquals(2, (int) function.apply(\"foo\"));\n",
        "309": "\n",
        "310": "    new EqualsTester()\n",
        "311": "        .addEqualityGroup(function, Functions.forSupplier(supplier))\n",
        "312": "        .addEqualityGroup(Functions.forSupplier(new CountingSupplier()))\n",
        "313": "        .addEqualityGroup(Functions.forSupplier(Suppliers.ofInstance(12)))\n",
        "314": "        .addEqualityGroup(Functions.toStringFunction())\n",
        "315": "        .testEquals();\n",
        "316": "  }\n",
        "317": "\n",
        "318": "}\n",
        "319": "\n"
    }
}