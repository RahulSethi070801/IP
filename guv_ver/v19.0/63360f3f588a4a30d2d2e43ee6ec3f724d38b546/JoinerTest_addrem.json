{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.base;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.base.Joiner.MapJoiner;\n",
        "21": "import com.google.common.collect.ImmutableMap;\n",
        "22": "import com.google.common.collect.ImmutableMultimap;\n",
        "23": "import com.google.common.collect.ImmutableSet;\n",
        "24": "import com.google.common.collect.Lists;\n",
        "25": "import com.google.common.collect.Maps;\n",
        "26": "\n",
        "27": "import junit.framework.AssertionFailedError;\n",
        "28": "import junit.framework.TestCase;\n",
        "29": "\n",
        "30": "import java.io.IOException;\n",
        "31": "import java.util.Arrays;\n",
        "32": "import java.util.Iterator;\n",
        "33": "import java.util.Map;\n",
        "34": "import java.util.Set;\n",
        "35": "\n",
        "36": "/**\n",
        "37": " * Unit test for {@link Joiner}.\n",
        "38": " *\n",
        "39": " * @author Kevin Bourrillion\n",
        "40": " */\n",
        "41": "@GwtCompatible(emulated = true)\n",
        "42": "public class JoinerTest extends TestCase {\n",
        "43": "  private static final Joiner J = Joiner.on(\"-\");\n",
        "44": "\n",
        "45": "  // <Integer> needed to prevent warning :(\n",
        "46": "  private static final Iterable<Integer> ITERABLE_ = Arrays.<Integer>asList();\n",
        "47": "  private static final Iterable<Integer> ITERABLE_1 = Arrays.asList(1);\n",
        "48": "  private static final Iterable<Integer> ITERABLE_12 = Arrays.asList(1, 2);\n",
        "49": "  private static final Iterable<Integer> ITERABLE_123 = Arrays.asList(1, 2, 3);\n",
        "50": "  private static final Iterable<Integer> ITERABLE_NULL = Arrays.asList((Integer) null);\n",
        "51": "  private static final Iterable<Integer> ITERABLE_NULL_NULL\n",
        "52": "      = Arrays.asList((Integer) null, null);\n",
        "53": "  private static final Iterable<Integer> ITERABLE_NULL_1 = Arrays.asList(null, 1);\n",
        "54": "  private static final Iterable<Integer> ITERABLE_1_NULL = Arrays.asList(1, null);\n",
        "55": "  private static final Iterable<Integer> ITERABLE_1_NULL_2 = Arrays.asList(1, null, 2);\n",
        "56": "  private static final Iterable<Integer> ITERABLE_FOUR_NULLS\n",
        "57": "      = Arrays.asList((Integer) null, null, null, null);\n",
        "58": "\n",
        "59": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "60": "  public void testNoSpecialNullBehavior() {\n",
        "61": "    checkNoOutput(J, ITERABLE_);\n",
        "62": "    checkResult(J, ITERABLE_1, \"1\");\n",
        "63": "    checkResult(J, ITERABLE_12, \"1-2\");\n",
        "64": "    checkResult(J, ITERABLE_123, \"1-2-3\");\n",
        "65": "\n",
        "66": "    try {\n",
        "67": "      J.join(ITERABLE_NULL);\n",
        "68": "      fail();\n",
        "69": "    } catch (NullPointerException expected) {\n",
        "70": "    }\n",
        "71": "    try {\n",
        "72": "      J.join(ITERABLE_1_NULL_2);\n",
        "73": "      fail();\n",
        "74": "    } catch (NullPointerException expected) {\n",
        "75": "    }\n",
        "76": "\n",
        "77": "    try {\n",
        "78": "      J.join(ITERABLE_NULL.iterator());\n",
        "79": "      fail();\n",
        "80": "    } catch (NullPointerException expected) {\n",
        "81": "    }\n",
        "82": "    try {\n",
        "83": "      J.join(ITERABLE_1_NULL_2.iterator());\n",
        "84": "      fail();\n",
        "85": "    } catch (NullPointerException expected) {\n",
        "86": "    }\n",
        "87": "  }\n",
        "88": "\n",
        "89": "  public void testOnCharOverride() {\n",
        "90": "    Joiner onChar = Joiner.on('-');\n",
        "91": "    checkNoOutput(onChar, ITERABLE_);\n",
        "92": "    checkResult(onChar, ITERABLE_1, \"1\");\n",
        "93": "    checkResult(onChar, ITERABLE_12, \"1-2\");\n",
        "94": "    checkResult(onChar, ITERABLE_123, \"1-2-3\");\n",
        "95": "  }\n",
        "96": "\n",
        "97": "  public void testSkipNulls() {\n",
        "98": "    Joiner skipNulls = J.skipNulls();\n",
        "99": "    checkNoOutput(skipNulls, ITERABLE_);\n",
        "100": "    checkNoOutput(skipNulls, ITERABLE_NULL);\n",
        "101": "    checkNoOutput(skipNulls, ITERABLE_NULL_NULL);\n",
        "102": "    checkNoOutput(skipNulls, ITERABLE_FOUR_NULLS);\n",
        "103": "    checkResult(skipNulls, ITERABLE_1, \"1\");\n",
        "104": "    checkResult(skipNulls, ITERABLE_12, \"1-2\");\n",
        "105": "    checkResult(skipNulls, ITERABLE_123, \"1-2-3\");\n",
        "106": "    checkResult(skipNulls, ITERABLE_NULL_1, \"1\");\n",
        "107": "    checkResult(skipNulls, ITERABLE_1_NULL, \"1\");\n",
        "108": "    checkResult(skipNulls, ITERABLE_1_NULL_2, \"1-2\");\n",
        "109": "  }\n",
        "110": "\n",
        "111": "  public void testUseForNull() {\n",
        "112": "    Joiner zeroForNull = J.useForNull(\"0\");\n",
        "113": "    checkNoOutput(zeroForNull, ITERABLE_);\n",
        "114": "    checkResult(zeroForNull, ITERABLE_1, \"1\");\n",
        "115": "    checkResult(zeroForNull, ITERABLE_12, \"1-2\");\n",
        "116": "    checkResult(zeroForNull, ITERABLE_123, \"1-2-3\");\n",
        "117": "    checkResult(zeroForNull, ITERABLE_NULL, \"0\");\n",
        "118": "    checkResult(zeroForNull, ITERABLE_NULL_NULL, \"0-0\");\n",
        "119": "    checkResult(zeroForNull, ITERABLE_NULL_1, \"0-1\");\n",
        "120": "    checkResult(zeroForNull, ITERABLE_1_NULL, \"1-0\");\n",
        "121": "    checkResult(zeroForNull, ITERABLE_1_NULL_2, \"1-0-2\");\n",
        "122": "    checkResult(zeroForNull, ITERABLE_FOUR_NULLS, \"0-0-0-0\");\n",
        "123": "  }\n",
        "124": "\n",
        "125": "  private static void checkNoOutput(Joiner joiner, Iterable<Integer> set) {\n",
        "126": "    assertEquals(\"\", joiner.join(set));\n",
        "127": "    assertEquals(\"\", joiner.join(set.iterator()));\n",
        "128": "\n",
        "129": "    Object[] array = Lists.newArrayList(set).toArray(new Integer[0]);\n",
        "130": "    assertEquals(\"\", joiner.join(array));\n",
        "131": "\n",
        "132": "    StringBuilder sb1FromIterable = new StringBuilder();\n",
        "133": "    assertSame(sb1FromIterable, joiner.appendTo(sb1FromIterable, set));\n",
        "134": "    assertEquals(0, sb1FromIterable.length());\n",
        "135": "\n",
        "136": "    StringBuilder sb1FromIterator = new StringBuilder();\n",
        "137": "    assertSame(sb1FromIterator, joiner.appendTo(sb1FromIterator, set));\n",
        "138": "    assertEquals(0, sb1FromIterator.length());\n",
        "139": "\n",
        "140": "    StringBuilder sb2 = new StringBuilder();\n",
        "141": "    assertSame(sb2, joiner.appendTo(sb2, array));\n",
        "142": "    assertEquals(0, sb2.length());\n",
        "143": "\n",
        "144": "    try {\n",
        "145": "      joiner.appendTo(NASTY_APPENDABLE, set);\n",
        "146": "    } catch (IOException e) {\n",
        "147": "      throw new AssertionError(e);\n",
        "148": "    }\n",
        "149": "\n",
        "150": "    try {\n",
        "151": "      joiner.appendTo(NASTY_APPENDABLE, set.iterator());\n",
        "152": "    } catch (IOException e) {\n",
        "153": "      throw new AssertionError(e);\n",
        "154": "    }\n",
        "155": "\n",
        "156": "    try {\n",
        "157": "      joiner.appendTo(NASTY_APPENDABLE, array);\n",
        "158": "    } catch (IOException e) {\n",
        "159": "      throw new AssertionError(e);\n",
        "160": "    }\n",
        "161": "  }\n",
        "162": "\n",
        "163": "  private static final Appendable NASTY_APPENDABLE = new Appendable() {\n",
        "164": "    @Override\n",
        "165": "    public Appendable append(CharSequence csq) throws IOException {\n",
        "166": "      throw new IOException();\n",
        "167": "    }\n",
        "168": "    @Override\n",
        "169": "    public Appendable append(CharSequence csq, int start, int end) throws IOException {\n",
        "170": "      throw new IOException();\n",
        "171": "    }\n",
        "172": "    @Override\n",
        "173": "    public Appendable append(char c) throws IOException {\n",
        "174": "      throw new IOException();\n",
        "175": "    }\n",
        "176": "  };\n",
        "177": "\n",
        "178": "  private static void checkResult(Joiner joiner, Iterable<Integer> parts, String expected) {\n",
        "179": "    assertEquals(expected, joiner.join(parts));\n",
        "180": "    assertEquals(expected, joiner.join(parts.iterator()));\n",
        "181": "\n",
        "182": "    StringBuilder sb1FromIterable = new StringBuilder().append('x');\n",
        "183": "    joiner.appendTo(sb1FromIterable, parts);\n",
        "184": "    assertEquals(\"x\" + expected, sb1FromIterable.toString());\n",
        "185": "\n",
        "186": "    StringBuilder sb1FromIterator = new StringBuilder().append('x');\n",
        "187": "    joiner.appendTo(sb1FromIterator, parts.iterator());\n",
        "188": "    assertEquals(\"x\" + expected, sb1FromIterator.toString());\n",
        "189": "\n",
        "190": "    Integer[] partsArray = Lists.newArrayList(parts).toArray(new Integer[0]);\n",
        "191": "    assertEquals(expected, joiner.join(partsArray));\n",
        "192": "\n",
        "193": "    StringBuilder sb2 = new StringBuilder().append('x');\n",
        "194": "    joiner.appendTo(sb2, partsArray);\n",
        "195": "    assertEquals(\"x\" + expected, sb2.toString());\n",
        "196": "\n",
        "197": "    int num = partsArray.length - 2;\n",
        "198": "    if (num >= 0) {\n",
        "199": "      Object[] rest = new Integer[num];\n",
        "200": "      for (int i = 0; i < num; i++) {\n",
        "201": "        rest[i] = partsArray[i + 2];\n",
        "202": "      }\n",
        "203": "\n",
        "204": "      assertEquals(expected, joiner.join(partsArray[0], partsArray[1], rest));\n",
        "205": "\n",
        "206": "      StringBuilder sb3 = new StringBuilder().append('x');\n",
        "207": "      joiner.appendTo(sb3, partsArray[0], partsArray[1], rest);\n",
        "208": "      assertEquals(\"x\" + expected, sb3.toString());\n",
        "209": "    }\n",
        "210": "  }\n",
        "211": "\n",
        "212": "  public void test_useForNull_skipNulls() {\n",
        "213": "    Joiner j = Joiner.on(\"x\").useForNull(\"y\");\n",
        "214": "    try {\n",
        "215": "      j = j.skipNulls();\n",
        "216": "      fail();\n",
        "217": "    } catch (UnsupportedOperationException expected) {\n",
        "218": "    }\n",
        "219": "  }\n",
        "220": "\n",
        "221": "  public void test_skipNulls_useForNull() {\n",
        "222": "    Joiner j = Joiner.on(\"x\").skipNulls();\n",
        "223": "    try {\n",
        "224": "      j = j.useForNull(\"y\");\n",
        "225": "      fail();\n",
        "226": "    } catch (UnsupportedOperationException expected) {\n",
        "227": "    }\n",
        "228": "  }\n",
        "229": "\n",
        "230": "  public void test_useForNull_twice() {\n",
        "231": "    Joiner j = Joiner.on(\"x\").useForNull(\"y\");\n",
        "232": "    try {\n",
        "233": "      j = j.useForNull(\"y\");\n",
        "234": "      fail();\n",
        "235": "    } catch (UnsupportedOperationException expected) {\n",
        "236": "    }\n",
        "237": "  }\n",
        "238": "\n",
        "239": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "240": "  public void testMap() {\n",
        "241": "    MapJoiner j = Joiner.on(\";\").withKeyValueSeparator(\":\");\n",
        "242": "    assertEquals(\"\", j.join(ImmutableMap.of()));\n",
        "243": "    assertEquals(\":\", j.join(ImmutableMap.of(\"\", \"\")));\n",
        "244": "\n",
        "245": "    Map<String, String> mapWithNulls = Maps.newLinkedHashMap();\n",
        "246": "    mapWithNulls.put(\"a\", null);\n",
        "247": "    mapWithNulls.put(null, \"b\");\n",
        "248": "\n",
        "249": "    try {\n",
        "250": "      j.join(mapWithNulls);\n",
        "251": "      fail();\n",
        "252": "    } catch (NullPointerException expected) {\n",
        "253": "    }\n",
        "254": "\n",
        "255": "    assertEquals(\"a:00;00:b\", j.useForNull(\"00\").join(mapWithNulls));\n",
        "256": "\n",
        "257": "    StringBuilder sb = new StringBuilder();\n",
        "258": "    j.appendTo(sb, ImmutableMap.of(1, 2, 3, 4, 5, 6));\n",
        "259": "    assertEquals(\"1:2;3:4;5:6\", sb.toString());\n",
        "260": "  }\n",
        "261": "\n",
        "262": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "263": "  public void testEntries() {\n",
        "264": "    MapJoiner j = Joiner.on(\";\").withKeyValueSeparator(\":\");\n",
        "265": "    assertEquals(\"\", j.join(ImmutableMultimap.of().entries()));\n",
        "266": "    assertEquals(\"\", j.join(ImmutableMultimap.of().entries().iterator()));\n",
        "267": "    assertEquals(\":\", j.join(ImmutableMultimap.of(\"\", \"\").entries()));\n",
        "268": "    assertEquals(\":\", j.join(ImmutableMultimap.of(\"\", \"\").entries().iterator()));\n",
        "269": "    assertEquals(\"1:a;1:b\", j.join(ImmutableMultimap.of(\"1\", \"a\", \"1\", \"b\").entries()));\n",
        "270": "    assertEquals(\"1:a;1:b\", j.join(ImmutableMultimap.of(\"1\", \"a\", \"1\", \"b\").entries().iterator()));\n",
        "271": "\n",
        "272": "    Map<String, String> mapWithNulls = Maps.newLinkedHashMap();\n",
        "273": "    mapWithNulls.put(\"a\", null);\n",
        "274": "    mapWithNulls.put(null, \"b\");\n",
        "275": "    Set<Map.Entry<String, String>> entriesWithNulls = mapWithNulls.entrySet();\n",
        "276": "\n",
        "277": "    try {\n",
        "278": "      j.join(entriesWithNulls);\n",
        "279": "      fail();\n",
        "280": "    } catch (NullPointerException expected) {\n",
        "281": "    }\n",
        "282": "\n",
        "283": "    try {\n",
        "284": "      j.join(entriesWithNulls.iterator());\n",
        "285": "      fail();\n",
        "286": "    } catch (NullPointerException expected) {\n",
        "287": "    }\n",
        "288": "\n",
        "289": "    assertEquals(\"a:00;00:b\", j.useForNull(\"00\").join(entriesWithNulls));\n",
        "290": "    assertEquals(\"a:00;00:b\", j.useForNull(\"00\").join(entriesWithNulls.iterator()));\n",
        "291": "\n",
        "292": "    StringBuilder sb1 = new StringBuilder();\n",
        "293": "    j.appendTo(sb1, ImmutableMultimap.of(1, 2, 3, 4, 5, 6, 1, 3, 5, 10).entries());\n",
        "294": "    assertEquals(\"1:2;1:3;3:4;5:6;5:10\", sb1.toString());\n",
        "295": "\n",
        "296": "    StringBuilder sb2 = new StringBuilder();\n",
        "297": "    j.appendTo(sb2, ImmutableMultimap.of(1, 2, 3, 4, 5, 6, 1, 3, 5, 10).entries().iterator());\n",
        "298": "    assertEquals(\"1:2;1:3;3:4;5:6;5:10\", sb2.toString());\n",
        "299": "  }\n",
        "300": "\n",
        "301": "  @SuppressWarnings(\"ReturnValueIgnored\") // testing for exception\n",
        "302": "  public void test_skipNulls_onMap() {\n",
        "303": "    Joiner j = Joiner.on(\",\").skipNulls();\n",
        "304": "    try {\n",
        "305": "      j.withKeyValueSeparator(\"/\");\n",
        "306": "      fail();\n",
        "307": "    } catch (UnsupportedOperationException expected) {\n",
        "308": "    }\n",
        "309": "  }\n",
        "310": "\n",
        "311": "  private static class DontStringMeBro implements CharSequence {\n",
        "312": "    @Override\n",
        "313": "    public int length() {\n",
        "314": "      return 3;\n",
        "315": "    }\n",
        "316": "    @Override\n",
        "317": "    public char charAt(int index) {\n",
        "318": "      return \"foo\".charAt(index);\n",
        "319": "    }\n",
        "320": "    @Override\n",
        "321": "    public CharSequence subSequence(int start, int end) {\n",
        "322": "      return \"foo\".subSequence(start, end);\n",
        "323": "    }\n",
        "324": "    @Override public String toString() {\n",
        "325": "      throw new AssertionFailedError(\"shouldn't be invoked\");\n",
        "326": "    }\n",
        "327": "  }\n",
        "328": "\n",
        "329": "  // Don't do this.\n",
        "330": "  private static class IterableIterator implements Iterable<Integer>, Iterator<Integer> {\n",
        "331": "    private static final ImmutableSet<Integer> INTEGERS = ImmutableSet.of(1, 2, 3, 4);\n",
        "332": "    private final Iterator<Integer> iterator;\n",
        "333": "    public IterableIterator() {\n",
        "334": "      this.iterator = iterator();\n",
        "335": "    }\n",
        "336": "    @Override public Iterator<Integer> iterator() {\n",
        "337": "      return INTEGERS.iterator();\n",
        "338": "    }\n",
        "339": "    @Override public boolean hasNext() {\n",
        "340": "      return iterator.hasNext();\n",
        "341": "    }\n",
        "342": "    @Override public Integer next() {\n",
        "343": "      return iterator.next();\n",
        "344": "    }\n",
        "345": "    @Override public void remove() {\n",
        "346": "      iterator.remove();\n",
        "347": "    }\n",
        "348": "  }\n",
        "349": "}\n",
        "350": "\n"
    }
}