{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.collect.Multiset.Entry;\n",
        "23": "import com.google.j2objc.annotations.WeakOuter;\n",
        "24": "\n",
        "25": "import java.io.Serializable;\n",
        "26": "import java.util.Collection;\n",
        "27": "import java.util.Collections;\n",
        "28": "import java.util.Iterator;\n",
        "29": "\n",
        "30": "import javax.annotation.Nullable;\n",
        "31": "\n",
        "32": "/**\n",
        "33": " * A {@link Multiset} whose contents will never change, with many other important properties\n",
        "34": " * detailed at {@link ImmutableCollection}.\n",
        "35": " *\n",
        "36": " * <p><b>Grouped iteration.</b> In all current implementations, duplicate elements always appear\n",
        "37": " * consecutively when iterating. Elements iterate in order by the <i>first</i> appearance of\n",
        "38": " * that element when the multiset was created.\n",
        "39": " *\n",
        "40": " * <p>See the Guava User Guide article on <a href=\n",
        "41": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\">\n",
        "42": " * immutable collections</a>.\n",
        "43": " *\n",
        "44": " * @author Jared Levy\n",
        "45": " * @author Louis Wasserman\n",
        "46": " * @since 2.0\n",
        "47": " */\n",
        "48": "@GwtCompatible(serializable = true, emulated = true)\n",
        "49": "@SuppressWarnings(\"serial\") // we're overriding default serialization\n",
        "50": "// TODO(lowasser): write an efficient asList() implementation\n",
        "51": "public abstract class ImmutableMultiset<E> extends ImmutableCollection<E> implements Multiset<E> {\n",
        "52": "  /**\n",
        "53": "   * Returns the empty immutable multiset.\n",
        "54": "   */\n",
        "55": "  @SuppressWarnings(\"unchecked\") // all supported methods are covariant\n",
        "56": "  public static <E> ImmutableMultiset<E> of() {\n",
        "57": "    return (ImmutableMultiset<E>) RegularImmutableMultiset.EMPTY;\n",
        "58": "  }\n",
        "59": "\n",
        "60": "  /**\n",
        "61": "   * Returns an immutable multiset containing a single element.\n",
        "62": "   *\n",
        "63": "   * @throws NullPointerException if {@code element} is null\n",
        "64": "   * @since 6.0 (source-compatible since 2.0)\n",
        "65": "   */\n",
        "66": "  @SuppressWarnings(\"unchecked\") // generic array created but never written\n",
        "67": "  public static <E> ImmutableMultiset<E> of(E element) {\n",
        "68": "    return copyFromElements(element);\n",
        "69": "  }\n",
        "70": "\n",
        "71": "  /**\n",
        "72": "   * Returns an immutable multiset containing the given elements, in order.\n",
        "73": "   *\n",
        "74": "   * @throws NullPointerException if any element is null\n",
        "75": "   * @since 6.0 (source-compatible since 2.0)\n",
        "76": "   */\n",
        "77": "  @SuppressWarnings(\"unchecked\") //\n",
        "78": "  public static <E> ImmutableMultiset<E> of(E e1, E e2) {\n",
        "79": "    return copyFromElements(e1, e2);\n",
        "80": "  }\n",
        "81": "\n",
        "82": "  /**\n",
        "83": "   * Returns an immutable multiset containing the given elements, in the \"grouped iteration order\"\n",
        "84": "   * described in the class documentation.\n",
        "85": "   *\n",
        "86": "   * @throws NullPointerException if any element is null\n",
        "87": "   * @since 6.0 (source-compatible since 2.0)\n",
        "88": "   */\n",
        "89": "  @SuppressWarnings(\"unchecked\") //\n",
        "90": "  public static <E> ImmutableMultiset<E> of(E e1, E e2, E e3) {\n",
        "91": "    return copyFromElements(e1, e2, e3);\n",
        "92": "  }\n",
        "93": "\n",
        "94": "  /**\n",
        "95": "   * Returns an immutable multiset containing the given elements, in the \"grouped iteration order\"\n",
        "96": "   * described in the class documentation.\n",
        "97": "   *\n",
        "98": "   * @throws NullPointerException if any element is null\n",
        "99": "   * @since 6.0 (source-compatible since 2.0)\n",
        "100": "   */\n",
        "101": "  @SuppressWarnings(\"unchecked\") //\n",
        "102": "  public static <E> ImmutableMultiset<E> of(E e1, E e2, E e3, E e4) {\n",
        "103": "    return copyFromElements(e1, e2, e3, e4);\n",
        "104": "  }\n",
        "105": "\n",
        "106": "  /**\n",
        "107": "   * Returns an immutable multiset containing the given elements, in the \"grouped iteration order\"\n",
        "108": "   * described in the class documentation.\n",
        "109": "   *\n",
        "110": "   * @throws NullPointerException if any element is null\n",
        "111": "   * @since 6.0 (source-compatible since 2.0)\n",
        "112": "   */\n",
        "113": "  @SuppressWarnings(\"unchecked\") //\n",
        "114": "  public static <E> ImmutableMultiset<E> of(E e1, E e2, E e3, E e4, E e5) {\n",
        "115": "    return copyFromElements(e1, e2, e3, e4, e5);\n",
        "116": "  }\n",
        "117": "\n",
        "118": "  /**\n",
        "119": "   * Returns an immutable multiset containing the given elements, in the \"grouped iteration order\"\n",
        "120": "   * described in the class documentation.\n",
        "121": "   *\n",
        "122": "   * @throws NullPointerException if any element is null\n",
        "123": "   * @since 6.0 (source-compatible since 2.0)\n",
        "124": "   */\n",
        "125": "  @SuppressWarnings(\"unchecked\") //\n",
        "126": "  public static <E> ImmutableMultiset<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E... others) {\n",
        "127": "    return new Builder<E>()\n",
        "128": "        .add(e1)\n",
        "129": "        .add(e2)\n",
        "130": "        .add(e3)\n",
        "131": "        .add(e4)\n",
        "132": "        .add(e5)\n",
        "133": "        .add(e6)\n",
        "134": "        .add(others)\n",
        "135": "        .build();\n",
        "136": "  }\n",
        "137": "\n",
        "138": "  /**\n",
        "139": "   * Returns an immutable multiset containing the given elements, in the \"grouped iteration order\"\n",
        "140": "   * described in the class documentation.\n",
        "141": "   *\n",
        "142": "   * @throws NullPointerException if any of {@code elements} is null\n",
        "143": "   * @since 6.0\n",
        "144": "   */\n",
        "145": "  public static <E> ImmutableMultiset<E> copyOf(E[] elements) {\n",
        "146": "    return copyFromElements(elements);\n",
        "147": "  }\n",
        "148": "\n",
        "149": "  /**\n",
        "150": "   * Returns an immutable multiset containing the given elements, in the \"grouped iteration order\"\n",
        "151": "   * described in the class documentation.\n",
        "152": "   *\n",
        "153": "   * @throws NullPointerException if any of {@code elements} is null\n",
        "154": "   */\n",
        "155": "  public static <E> ImmutableMultiset<E> copyOf(Iterable<? extends E> elements) {\n",
        "156": "    if (elements instanceof ImmutableMultiset) {\n",
        "157": "      @SuppressWarnings(\"unchecked\") // all supported methods are covariant\n",
        "158": "      ImmutableMultiset<E> result = (ImmutableMultiset<E>) elements;\n",
        "159": "      if (!result.isPartialView()) {\n",
        "160": "        return result;\n",
        "161": "      }\n",
        "162": "    }\n",
        "163": "\n",
        "164": "    Multiset<? extends E> multiset =\n",
        "165": "        (elements instanceof Multiset)\n",
        "166": "            ? Multisets.cast(elements)\n",
        "167": "            : LinkedHashMultiset.create(elements);\n",
        "168": "\n",
        "169": "    return copyFromEntries(multiset.entrySet());\n",
        "170": "  }\n",
        "171": "\n",
        "172": "  private static <E> ImmutableMultiset<E> copyFromElements(E... elements) {\n",
        "173": "    Multiset<E> multiset = LinkedHashMultiset.create();\n",
        "174": "    Collections.addAll(multiset, elements);\n",
        "175": "    return copyFromEntries(multiset.entrySet());\n",
        "176": "  }\n",
        "177": "\n",
        "178": "  static <E> ImmutableMultiset<E> copyFromEntries(\n",
        "179": "      Collection<? extends Entry<? extends E>> entries) {\n",
        "180": "    if (entries.isEmpty()) {\n",
        "181": "      return of();\n",
        "182": "    } else {\n",
        "183": "      return new RegularImmutableMultiset<E>(entries);\n",
        "184": "    }\n",
        "185": "  }\n",
        "186": "\n",
        "187": "  /**\n",
        "188": "   * Returns an immutable multiset containing the given elements, in the \"grouped iteration order\"\n",
        "189": "   * described in the class documentation.\n",
        "190": "   *\n",
        "191": "   * @throws NullPointerException if any of {@code elements} is null\n",
        "192": "   */\n",
        "193": "  public static <E> ImmutableMultiset<E> copyOf(Iterator<? extends E> elements) {\n",
        "194": "    Multiset<E> multiset = LinkedHashMultiset.create();\n",
        "195": "    Iterators.addAll(multiset, elements);\n",
        "196": "    return copyFromEntries(multiset.entrySet());\n",
        "197": "  }\n",
        "198": "\n",
        "199": "  ImmutableMultiset() {}\n",
        "200": "\n",
        "201": "  @Override\n",
        "202": "  public UnmodifiableIterator<E> iterator() {\n",
        "203": "    final Iterator<Entry<E>> entryIterator = entrySet().iterator();\n",
        "204": "    return new UnmodifiableIterator<E>() {\n",
        "205": "      int remaining;\n",
        "206": "      E element;\n",
        "207": "\n",
        "208": "      @Override\n",
        "209": "      public boolean hasNext() {\n",
        "210": "        return (remaining > 0) || entryIterator.hasNext();\n",
        "211": "      }\n",
        "212": "\n",
        "213": "      @Override\n",
        "214": "      public E next() {\n",
        "215": "        if (remaining <= 0) {\n",
        "216": "          Entry<E> entry = entryIterator.next();\n",
        "217": "          element = entry.getElement();\n",
        "218": "          remaining = entry.getCount();\n",
        "219": "        }\n",
        "220": "        remaining--;\n",
        "221": "        return element;\n",
        "222": "      }\n",
        "223": "    };\n",
        "224": "  }\n",
        "225": "\n",
        "226": "  @Override\n",
        "227": "  public boolean contains(@Nullable Object object) {\n",
        "228": "    return count(object) > 0;\n",
        "229": "  }\n",
        "230": "\n",
        "231": "  /**\n",
        "232": "   * Guaranteed to throw an exception and leave the collection unmodified.\n",
        "233": "   *\n",
        "234": "   * @throws UnsupportedOperationException always\n",
        "235": "   * @deprecated Unsupported operation.\n",
        "236": "   */\n",
        "237": "  @Deprecated\n",
        "238": "  @Override\n",
        "239": "  public final int add(E element, int occurrences) {\n",
        "240": "    throw new UnsupportedOperationException();\n",
        "241": "  }\n",
        "242": "\n",
        "243": "  /**\n",
        "244": "   * Guaranteed to throw an exception and leave the collection unmodified.\n",
        "245": "   *\n",
        "246": "   * @throws UnsupportedOperationException always\n",
        "247": "   * @deprecated Unsupported operation.\n",
        "248": "   */\n",
        "249": "  @Deprecated\n",
        "250": "  @Override\n",
        "251": "  public final int remove(Object element, int occurrences) {\n",
        "252": "    throw new UnsupportedOperationException();\n",
        "253": "  }\n",
        "254": "\n",
        "255": "  /**\n",
        "256": "   * Guaranteed to throw an exception and leave the collection unmodified.\n",
        "257": "   *\n",
        "258": "   * @throws UnsupportedOperationException always\n",
        "259": "   * @deprecated Unsupported operation.\n",
        "260": "   */\n",
        "261": "  @Deprecated\n",
        "262": "  @Override\n",
        "263": "  public final int setCount(E element, int count) {\n",
        "264": "    throw new UnsupportedOperationException();\n",
        "265": "  }\n",
        "266": "\n",
        "267": "  /**\n",
        "268": "   * Guaranteed to throw an exception and leave the collection unmodified.\n",
        "269": "   *\n",
        "270": "   * @throws UnsupportedOperationException always\n",
        "271": "   * @deprecated Unsupported operation.\n",
        "272": "   */\n",
        "273": "  @Deprecated\n",
        "274": "  @Override\n",
        "275": "  public final boolean setCount(E element, int oldCount, int newCount) {\n",
        "276": "    throw new UnsupportedOperationException();\n",
        "277": "  }\n",
        "278": "\n",
        "279": "  @Override\n",
        "280": "  public boolean equals(@Nullable Object object) {\n",
        "281": "    return Multisets.equalsImpl(this, object);\n",
        "282": "  }\n",
        "283": "\n",
        "284": "  @Override\n",
        "285": "  public int hashCode() {\n",
        "286": "    return Sets.hashCodeImpl(entrySet());\n",
        "287": "  }\n",
        "288": "\n",
        "289": "  @Override\n",
        "290": "  public String toString() {\n",
        "291": "    return entrySet().toString();\n",
        "292": "  }\n",
        "293": "\n",
        "294": "  private transient ImmutableSet<Entry<E>> entrySet;\n",
        "295": "\n",
        "296": "  @Override\n",
        "297": "  public ImmutableSet<Entry<E>> entrySet() {\n",
        "298": "    ImmutableSet<Entry<E>> es = entrySet;\n",
        "299": "    return (es == null) ? (entrySet = createEntrySet()) : es;\n",
        "300": "  }\n",
        "301": "\n",
        "302": "  private final ImmutableSet<Entry<E>> createEntrySet() {\n",
        "303": "    return isEmpty() ? ImmutableSet.<Entry<E>>of() : new EntrySet();\n",
        "304": "  }\n",
        "305": "\n",
        "306": "  abstract Entry<E> getEntry(int index);\n",
        "307": "\n",
        "308": "  @WeakOuter\n",
        "309": "  private final class EntrySet extends ImmutableSet.Indexed<Entry<E>> {\n",
        "310": "    @Override\n",
        "311": "    boolean isPartialView() {\n",
        "312": "      return ImmutableMultiset.this.isPartialView();\n",
        "313": "    }\n",
        "314": "\n",
        "315": "    @Override\n",
        "316": "    Entry<E> get(int index) {\n",
        "317": "      return getEntry(index);\n",
        "318": "    }\n",
        "319": "\n",
        "320": "    @Override\n",
        "321": "    public int size() {\n",
        "322": "      return elementSet().size();\n",
        "323": "    }\n",
        "324": "\n",
        "325": "    @Override\n",
        "326": "    public boolean contains(Object o) {\n",
        "327": "      if (o instanceof Entry) {\n",
        "328": "        Entry<?> entry = (Entry<?>) o;\n",
        "329": "        if (entry.getCount() <= 0) {\n",
        "330": "          return false;\n",
        "331": "        }\n",
        "332": "        int count = count(entry.getElement());\n",
        "333": "        return count == entry.getCount();\n",
        "334": "      }\n",
        "335": "      return false;\n",
        "336": "    }\n",
        "337": "\n",
        "338": "    @Override\n",
        "339": "    public int hashCode() {\n",
        "340": "      return ImmutableMultiset.this.hashCode();\n",
        "341": "    }\n",
        "342": "\n",
        "343": "    // We can't label this with @Override, because it doesn't override anything\n",
        "344": "    // in the GWT emulated version.\n",
        "345": "    // TODO(cpovirk): try making all copies of this method @GwtIncompatible instead\n",
        "346": "    Object writeReplace() {\n",
        "347": "      return new EntrySetSerializedForm<E>(ImmutableMultiset.this);\n",
        "348": "    }\n",
        "349": "\n",
        "350": "    private static final long serialVersionUID = 0;\n",
        "351": "  }\n",
        "352": "\n",
        "353": "  static class EntrySetSerializedForm<E> implements Serializable {\n",
        "354": "    final ImmutableMultiset<E> multiset;\n",
        "355": "\n",
        "356": "    EntrySetSerializedForm(ImmutableMultiset<E> multiset) {\n",
        "357": "      this.multiset = multiset;\n",
        "358": "    }\n",
        "359": "\n",
        "360": "    Object readResolve() {\n",
        "361": "      return multiset.entrySet();\n",
        "362": "    }\n",
        "363": "  }\n",
        "364": "\n",
        "365": "  private static class SerializedForm implements Serializable {\n",
        "366": "    final Object[] elements;\n",
        "367": "    final int[] counts;\n",
        "368": "\n",
        "369": "    SerializedForm(Multiset<?> multiset) {\n",
        "370": "      int distinct = multiset.entrySet().size();\n",
        "371": "      elements = new Object[distinct];\n",
        "372": "      counts = new int[distinct];\n",
        "373": "      int i = 0;\n",
        "374": "      for (Entry<?> entry : multiset.entrySet()) {\n",
        "375": "        elements[i] = entry.getElement();\n",
        "376": "        counts[i] = entry.getCount();\n",
        "377": "        i++;\n",
        "378": "      }\n",
        "379": "    }\n",
        "380": "\n",
        "381": "    Object readResolve() {\n",
        "382": "      LinkedHashMultiset<Object> multiset = LinkedHashMultiset.create(elements.length);\n",
        "383": "      for (int i = 0; i < elements.length; i++) {\n",
        "384": "        multiset.add(elements[i], counts[i]);\n",
        "385": "      }\n",
        "386": "      return ImmutableMultiset.copyOf(multiset);\n",
        "387": "    }\n",
        "388": "\n",
        "389": "    private static final long serialVersionUID = 0;\n",
        "390": "  }\n",
        "391": "\n",
        "392": "  // We can't label this with @Override, because it doesn't override anything\n",
        "393": "  // in the GWT emulated version.\n",
        "394": "  Object writeReplace() {\n",
        "395": "    return new SerializedForm(this);\n",
        "396": "  }\n",
        "397": "\n",
        "398": "  /**\n",
        "399": "   * Returns a new builder. The generated builder is equivalent to the builder\n",
        "400": "   * created by the {@link Builder} constructor.\n",
        "401": "   */\n",
        "402": "  public static <E> Builder<E> builder() {\n",
        "403": "    return new Builder<E>();\n",
        "404": "  }\n",
        "405": "\n",
        "406": "  /**\n",
        "407": "   * A builder for creating immutable multiset instances, especially {@code\n",
        "408": "   * public static final} multisets (\"constant multisets\"). Example:\n",
        "409": "   * <pre> {@code\n",
        "410": "   *\n",
        "411": "   *   public static final ImmutableMultiset<Bean> BEANS =\n",
        "412": "   *       new ImmutableMultiset.Builder<Bean>()\n",
        "413": "   *           .addCopies(Bean.COCOA, 4)\n",
        "414": "   *           .addCopies(Bean.GARDEN, 6)\n",
        "415": "   *           .addCopies(Bean.RED, 8)\n",
        "416": "   *           .addCopies(Bean.BLACK_EYED, 10)\n",
        "417": "   *           .build();}</pre>\n",
        "418": "   *\n",
        "419": "   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple\n",
        "420": "   * times to build multiple multisets in series.\n",
        "421": "   *\n",
        "422": "   * @since 2.0\n",
        "423": "   */\n",
        "424": "  public static class Builder<E> extends ImmutableCollection.Builder<E> {\n",
        "425": "    final Multiset<E> contents;\n",
        "426": "\n",
        "427": "    /**\n",
        "428": "     * Creates a new builder. The returned builder is equivalent to the builder\n",
        "429": "     * generated by {@link ImmutableMultiset#builder}.\n",
        "430": "     */\n",
        "431": "    public Builder() {\n",
        "432": "      this(LinkedHashMultiset.<E>create());\n",
        "433": "    }\n",
        "434": "\n",
        "435": "    Builder(Multiset<E> contents) {\n",
        "436": "      this.contents = contents;\n",
        "437": "    }\n",
        "438": "\n",
        "439": "    /**\n",
        "440": "     * Adds {@code element} to the {@code ImmutableMultiset}.\n",
        "441": "     *\n",
        "442": "     * @param element the element to add\n",
        "443": "     * @return this {@code Builder} object\n",
        "444": "     * @throws NullPointerException if {@code element} is null\n",
        "445": "     */\n",
        "446": "    @Override\n",
        "447": "    public Builder<E> add(E element) {\n",
        "448": "      contents.add(checkNotNull(element));\n",
        "449": "      return this;\n",
        "450": "    }\n",
        "451": "\n",
        "452": "    /**\n",
        "453": "     * Adds a number of occurrences of an element to this {@code\n",
        "454": "     * ImmutableMultiset}.\n",
        "455": "     *\n",
        "456": "     * @param element the element to add\n",
        "457": "     * @param occurrences the number of occurrences of the element to add. May\n",
        "458": "     *     be zero, in which case no change will be made.\n",
        "459": "     * @return this {@code Builder} object\n",
        "460": "     * @throws NullPointerException if {@code element} is null\n",
        "461": "     * @throws IllegalArgumentException if {@code occurrences} is negative, or\n",
        "462": "     *     if this operation would result in more than {@link Integer#MAX_VALUE}\n",
        "463": "     *     occurrences of the element\n",
        "464": "     */\n",
        "465": "    public Builder<E> addCopies(E element, int occurrences) {\n",
        "466": "      contents.add(checkNotNull(element), occurrences);\n",
        "467": "      return this;\n",
        "468": "    }\n",
        "469": "\n",
        "470": "    /**\n",
        "471": "     * Adds or removes the necessary occurrences of an element such that the\n",
        "472": "     * element attains the desired count.\n",
        "473": "     *\n",
        "474": "     * @param element the element to add or remove occurrences of\n",
        "475": "     * @param count the desired count of the element in this multiset\n",
        "476": "     * @return this {@code Builder} object\n",
        "477": "     * @throws NullPointerException if {@code element} is null\n",
        "478": "     * @throws IllegalArgumentException if {@code count} is negative\n",
        "479": "     */\n",
        "480": "    public Builder<E> setCount(E element, int count) {\n",
        "481": "      contents.setCount(checkNotNull(element), count);\n",
        "482": "      return this;\n",
        "483": "    }\n",
        "484": "\n",
        "485": "    /**\n",
        "486": "     * Adds each element of {@code elements} to the {@code ImmutableMultiset}.\n",
        "487": "     *\n",
        "488": "     * @param elements the elements to add\n",
        "489": "     * @return this {@code Builder} object\n",
        "490": "     * @throws NullPointerException if {@code elements} is null or contains a\n",
        "491": "     *     null element\n",
        "492": "     */\n",
        "493": "    @Override\n",
        "494": "    public Builder<E> add(E... elements) {\n",
        "495": "      super.add(elements);\n",
        "496": "      return this;\n",
        "497": "    }\n",
        "498": "\n",
        "499": "    /**\n",
        "500": "     * Adds each element of {@code elements} to the {@code ImmutableMultiset}.\n",
        "501": "     *\n",
        "502": "     * @param elements the {@code Iterable} to add to the {@code\n",
        "503": "     *     ImmutableMultiset}\n",
        "504": "     * @return this {@code Builder} object\n",
        "505": "     * @throws NullPointerException if {@code elements} is null or contains a\n",
        "506": "     *     null element\n",
        "507": "     */\n",
        "508": "    @Override\n",
        "509": "    public Builder<E> addAll(Iterable<? extends E> elements) {\n",
        "510": "      if (elements instanceof Multiset) {\n",
        "511": "        Multiset<? extends E> multiset = Multisets.cast(elements);\n",
        "512": "        for (Entry<? extends E> entry : multiset.entrySet()) {\n",
        "513": "          addCopies(entry.getElement(), entry.getCount());\n",
        "514": "        }\n",
        "515": "      } else {\n",
        "516": "        super.addAll(elements);\n",
        "517": "      }\n",
        "518": "      return this;\n",
        "519": "    }\n",
        "520": "\n",
        "521": "    /**\n",
        "522": "     * Adds each element of {@code elements} to the {@code ImmutableMultiset}.\n",
        "523": "     *\n",
        "524": "     * @param elements the elements to add to the {@code ImmutableMultiset}\n",
        "525": "     * @return this {@code Builder} object\n",
        "526": "     * @throws NullPointerException if {@code elements} is null or contains a\n",
        "527": "     *     null element\n",
        "528": "     */\n",
        "529": "    @Override\n",
        "530": "    public Builder<E> addAll(Iterator<? extends E> elements) {\n",
        "531": "      super.addAll(elements);\n",
        "532": "      return this;\n",
        "533": "    }\n",
        "534": "\n",
        "535": "    /**\n",
        "536": "     * Returns a newly-created {@code ImmutableMultiset} based on the contents\n",
        "537": "     * of the {@code Builder}.\n",
        "538": "     */\n",
        "539": "    @Override\n",
        "540": "    public ImmutableMultiset<E> build() {\n",
        "541": "      return copyOf(contents);\n",
        "542": "    }\n",
        "543": "  }\n",
        "544": "}\n"
    }
}