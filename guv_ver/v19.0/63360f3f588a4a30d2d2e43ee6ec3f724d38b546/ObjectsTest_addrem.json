{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2006 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.base;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "\n",
        "21": "import junit.framework.TestCase;\n",
        "22": "\n",
        "23": "/**\n",
        "24": " * Tests for {@link Objects}.\n",
        "25": " *\n",
        "26": " * @author Laurence Gonsalves\n",
        "27": " */\n",
        "28": "@GwtCompatible(emulated = true)\n",
        "29": "public class ObjectsTest extends TestCase {\n",
        "30": "\n",
        "31": "  public void testEqual() throws Exception {\n",
        "32": "    assertTrue(Objects.equal(1, 1));\n",
        "33": "    assertTrue(Objects.equal(null, null));\n",
        "34": "\n",
        "35": "    // test distinct string objects\n",
        "36": "    String s1 = \"foobar\";\n",
        "37": "    String s2 = new String(s1);\n",
        "38": "    assertTrue(Objects.equal(s1, s2));\n",
        "39": "\n",
        "40": "    assertFalse(Objects.equal(s1, null));\n",
        "41": "    assertFalse(Objects.equal(null, s1));\n",
        "42": "    assertFalse(Objects.equal(\"foo\", \"bar\"));\n",
        "43": "    assertFalse(Objects.equal(\"1\", 1));\n",
        "44": "  }\n",
        "45": "\n",
        "46": "  public void testHashCode() throws Exception {\n",
        "47": "    int h1 = Objects.hashCode(1, \"two\", 3.0);\n",
        "48": "    int h2 = Objects.hashCode(\n",
        "49": "        new Integer(1), new String(\"two\"), new Double(3.0));\n",
        "50": "    // repeatable\n",
        "51": "    assertEquals(h1, h2);\n",
        "52": "\n",
        "53": "    // These don't strictly need to be true, but they're nice properties.\n",
        "54": "    assertTrue(Objects.hashCode(1, 2, null) != Objects.hashCode(1, 2));\n",
        "55": "    assertTrue(Objects.hashCode(1, 2, null) != Objects.hashCode(1, null, 2));\n",
        "56": "    assertTrue(Objects.hashCode(1, null, 2) != Objects.hashCode(1, 2));\n",
        "57": "    assertTrue(Objects.hashCode(1, 2, 3) != Objects.hashCode(3, 2, 1));\n",
        "58": "    assertTrue(Objects.hashCode(1, 2, 3) != Objects.hashCode(2, 3, 1));\n",
        "59": "  }\n",
        "60": "\n",
        "61": "  public void testFirstNonNull_withNonNull() throws Exception {\n",
        "62": "    String s1 = \"foo\";\n",
        "63": "    String s2 = Objects.firstNonNull(s1, \"bar\");\n",
        "64": "    assertSame(s1, s2);\n",
        "65": "\n",
        "66": "    Long n1 = new Long(42);\n",
        "67": "    Long n2 = Objects.firstNonNull(null, n1);\n",
        "68": "    assertSame(n1, n2);\n",
        "69": "  }\n",
        "70": "\n",
        "71": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "72": "  public void testFirstNonNull_throwsNullPointerException() throws Exception {\n",
        "73": "    try {\n",
        "74": "      Objects.firstNonNull(null, null);\n",
        "75": "      fail(\"expected NullPointerException\");\n",
        "76": "    } catch (NullPointerException expected) {\n",
        "77": "    }\n",
        "78": "  }\n",
        "79": "}\n",
        "80": "\n"
    }
}