{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.collect.testing.SampleElements;\n",
        "21": "import com.google.common.collect.testing.google.TestBiMapGenerator;\n",
        "22": "\n",
        "23": "import junit.framework.TestCase;\n",
        "24": "\n",
        "25": "import java.util.Collections;\n",
        "26": "import java.util.List;\n",
        "27": "import java.util.Map;\n",
        "28": "import java.util.Map.Entry;\n",
        "29": "import java.util.Set;\n",
        "30": "\n",
        "31": "/**\n",
        "32": " * Tests for {@code EnumHashBiMap}.\n",
        "33": " *\n",
        "34": " * @author Mike Bostock\n",
        "35": " */\n",
        "36": "@GwtCompatible(emulated = true)\n",
        "37": "public class EnumHashBiMapTest extends TestCase {\n",
        "38": "  private enum Currency { DOLLAR, FRANC, PESO, POUND, YEN }\n",
        "39": "  private enum Country { CANADA, CHILE, JAPAN, SWITZERLAND, UK }\n",
        "40": "\n",
        "41": "  public static final class EnumHashBiMapGenerator implements TestBiMapGenerator<Country, String> {\n",
        "42": "    @SuppressWarnings(\"unchecked\")\n",
        "43": "    @Override\n",
        "44": "    public BiMap<Country, String> create(Object... entries) {\n",
        "45": "      BiMap<Country, String> result = EnumHashBiMap.create(Country.class);\n",
        "46": "      for (Object o : entries) {\n",
        "47": "        Entry<Country, String> entry = (Entry<Country, String>) o;\n",
        "48": "        result.put(entry.getKey(), entry.getValue());\n",
        "49": "      }\n",
        "50": "      return result;\n",
        "51": "    }\n",
        "52": "\n",
        "53": "    @Override\n",
        "54": "    public SampleElements<Entry<Country, String>> samples() {\n",
        "55": "      return new SampleElements<Entry<Country, String>>(\n",
        "56": "          Maps.immutableEntry(Country.CANADA, \"DOLLAR\"),\n",
        "57": "          Maps.immutableEntry(Country.CHILE, \"PESO\"),\n",
        "58": "          Maps.immutableEntry(Country.UK, \"POUND\"),\n",
        "59": "          Maps.immutableEntry(Country.JAPAN, \"YEN\"),\n",
        "60": "          Maps.immutableEntry(Country.SWITZERLAND, \"FRANC\"));\n",
        "61": "    }\n",
        "62": "\n",
        "63": "    @SuppressWarnings(\"unchecked\")\n",
        "64": "    @Override\n",
        "65": "    public Entry<Country, String>[] createArray(int length) {\n",
        "66": "      return new Entry[length];\n",
        "67": "    }\n",
        "68": "\n",
        "69": "    @Override\n",
        "70": "    public Iterable<Entry<Country, String>> order(List<Entry<Country, String>> insertionOrder) {\n",
        "71": "      return insertionOrder;\n",
        "72": "    }\n",
        "73": "\n",
        "74": "    @Override\n",
        "75": "    public Country[] createKeyArray(int length) {\n",
        "76": "      return new Country[length];\n",
        "77": "    }\n",
        "78": "\n",
        "79": "    @Override\n",
        "80": "    public String[] createValueArray(int length) {\n",
        "81": "      return new String[length];\n",
        "82": "    }\n",
        "83": "  }\n",
        "84": "\n",
        "85": "  public void testCreate() {\n",
        "86": "    EnumHashBiMap<Currency, String> bimap =\n",
        "87": "        EnumHashBiMap.create(Currency.class);\n",
        "88": "    assertTrue(bimap.isEmpty());\n",
        "89": "    assertEquals(\"{}\", bimap.toString());\n",
        "90": "    assertEquals(HashBiMap.create(), bimap);\n",
        "91": "    bimap.put(Currency.DOLLAR, \"dollar\");\n",
        "92": "    assertEquals(\"dollar\", bimap.get(Currency.DOLLAR));\n",
        "93": "    assertEquals(Currency.DOLLAR, bimap.inverse().get(\"dollar\"));\n",
        "94": "  }\n",
        "95": "\n",
        "96": "  public void testCreateFromMap() {\n",
        "97": "    /* Test with non-empty Map. */\n",
        "98": "    Map<Currency, String> map = ImmutableMap.of(\n",
        "99": "        Currency.DOLLAR, \"dollar\",\n",
        "100": "        Currency.PESO, \"peso\",\n",
        "101": "        Currency.FRANC, \"franc\");\n",
        "102": "    EnumHashBiMap<Currency, String> bimap\n",
        "103": "        = EnumHashBiMap.create(map);\n",
        "104": "    assertEquals(\"dollar\", bimap.get(Currency.DOLLAR));\n",
        "105": "    assertEquals(Currency.DOLLAR, bimap.inverse().get(\"dollar\"));\n",
        "106": "\n",
        "107": "    /* Map must have at least one entry if not an EnumHashBiMap. */\n",
        "108": "    try {\n",
        "109": "      EnumHashBiMap.create(\n",
        "110": "          Collections.<Currency, String>emptyMap());\n",
        "111": "      fail(\"IllegalArgumentException expected\");\n",
        "112": "    } catch (IllegalArgumentException expected) {}\n",
        "113": "\n",
        "114": "    /* Map can be empty if it's an EnumHashBiMap. */\n",
        "115": "    Map<Currency, String> emptyBimap = EnumHashBiMap.create(Currency.class);\n",
        "116": "    bimap = EnumHashBiMap.create(emptyBimap);\n",
        "117": "    assertTrue(bimap.isEmpty());\n",
        "118": "\n",
        "119": "    /* Map can be empty if it's an EnumBiMap. */\n",
        "120": "    Map<Currency, Country> emptyBimap2 =\n",
        "121": "        EnumBiMap.create(Currency.class, Country.class);\n",
        "122": "    EnumHashBiMap<Currency, Country> bimap2\n",
        "123": "        = EnumHashBiMap.create(emptyBimap2);\n",
        "124": "    assertTrue(bimap2.isEmpty());\n",
        "125": "  }\n",
        "126": "\n",
        "127": "  public void testEnumHashBiMapConstructor() {\n",
        "128": "    /* Test that it copies existing entries. */\n",
        "129": "    EnumHashBiMap<Currency, String> bimap1 =\n",
        "130": "        EnumHashBiMap.create(Currency.class);\n",
        "131": "    bimap1.put(Currency.DOLLAR, \"dollar\");\n",
        "132": "    EnumHashBiMap<Currency, String> bimap2 =\n",
        "133": "        EnumHashBiMap.create(bimap1);\n",
        "134": "    assertEquals(\"dollar\", bimap2.get(Currency.DOLLAR));\n",
        "135": "    assertEquals(bimap1, bimap2);\n",
        "136": "    bimap2.inverse().put(\"franc\", Currency.FRANC);\n",
        "137": "    assertEquals(\"franc\", bimap2.get(Currency.FRANC));\n",
        "138": "    assertNull(bimap1.get(Currency.FRANC));\n",
        "139": "    assertFalse(bimap2.equals(bimap1));\n",
        "140": "\n",
        "141": "    /* Test that it can be empty. */\n",
        "142": "    EnumHashBiMap<Currency, String> emptyBimap =\n",
        "143": "        EnumHashBiMap.create(Currency.class);\n",
        "144": "    EnumHashBiMap<Currency, String> bimap3 =\n",
        "145": "        EnumHashBiMap.create(emptyBimap);\n",
        "146": "    assertEquals(bimap3, emptyBimap);\n",
        "147": "  }\n",
        "148": "\n",
        "149": "  public void testEnumBiMapConstructor() {\n",
        "150": "    /* Test that it copies existing entries. */\n",
        "151": "    EnumBiMap<Currency, Country> bimap1 =\n",
        "152": "        EnumBiMap.create(Currency.class, Country.class);\n",
        "153": "    bimap1.put(Currency.DOLLAR, Country.SWITZERLAND);\n",
        "154": "    EnumHashBiMap<Currency, Object> bimap2 = // use supertype\n",
        "155": "        EnumHashBiMap.<Currency, Object>create(bimap1);\n",
        "156": "    assertEquals(Country.SWITZERLAND, bimap2.get(Currency.DOLLAR));\n",
        "157": "    assertEquals(bimap1, bimap2);\n",
        "158": "    bimap2.inverse().put(\"franc\", Currency.FRANC);\n",
        "159": "    assertEquals(\"franc\", bimap2.get(Currency.FRANC));\n",
        "160": "    assertNull(bimap1.get(Currency.FRANC));\n",
        "161": "    assertFalse(bimap2.equals(bimap1));\n",
        "162": "\n",
        "163": "    /* Test that it can be empty. */\n",
        "164": "    EnumBiMap<Currency, Country> emptyBimap =\n",
        "165": "        EnumBiMap.create(Currency.class, Country.class);\n",
        "166": "    EnumHashBiMap<Currency, Country> bimap3 = // use exact type\n",
        "167": "        EnumHashBiMap.create(emptyBimap);\n",
        "168": "    assertEquals(bimap3, emptyBimap);\n",
        "169": "  }\n",
        "170": "\n",
        "171": "  public void testKeyType() {\n",
        "172": "    EnumHashBiMap<Currency, String> bimap =\n",
        "173": "        EnumHashBiMap.create(Currency.class);\n",
        "174": "    assertEquals(Currency.class, bimap.keyType());\n",
        "175": "  }\n",
        "176": "\n",
        "177": "  public void testEntrySet() {\n",
        "178": "    // Bug 3168290\n",
        "179": "    Map<Currency, String> map = ImmutableMap.of(\n",
        "180": "        Currency.DOLLAR, \"dollar\",\n",
        "181": "        Currency.PESO, \"peso\",\n",
        "182": "        Currency.FRANC, \"franc\");\n",
        "183": "    EnumHashBiMap<Currency, String> bimap\n",
        "184": "        = EnumHashBiMap.create(map);\n",
        "185": "\n",
        "186": "    Set<Object> uniqueEntries = Sets.newIdentityHashSet();\n",
        "187": "    uniqueEntries.addAll(bimap.entrySet());\n",
        "188": "    assertEquals(3, uniqueEntries.size());\n",
        "189": "  }\n",
        "190": "}\n",
        "191": "\n"
    }
}