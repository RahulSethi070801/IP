{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2011 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "6": " *\n",
        "7": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "8": " *\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the\n",
        "10": " * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n",
        "11": " * express or implied. See the License for the specific language governing permissions and\n",
        "12": " * limitations under the License.\n",
        "13": " */\n",
        "14": "\n",
        "15": "package com.google.common.primitives;\n",
        "16": "\n",
        "17": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "18": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "19": "import static com.google.common.primitives.UnsignedInts.INT_MASK;\n",
        "20": "import static com.google.common.primitives.UnsignedInts.compare;\n",
        "21": "import static com.google.common.primitives.UnsignedInts.toLong;\n",
        "22": "\n",
        "23": "import com.google.common.annotations.GwtCompatible;\n",
        "24": "\n",
        "25": "import java.math.BigInteger;\n",
        "26": "\n",
        "27": "import javax.annotation.CheckReturnValue;\n",
        "28": "import javax.annotation.Nullable;\n",
        "29": "\n",
        "30": "/**\n",
        "31": " * A wrapper class for unsigned {@code int} values, supporting arithmetic operations.\n",
        "32": " *\n",
        "33": " * <p>In some cases, when speed is more important than code readability, it may be faster simply to\n",
        "34": " * treat primitive {@code int} values as unsigned, using the methods from {@link UnsignedInts}.\n",
        "35": " *\n",
        "36": " * <p>See the Guava User Guide article on <a href=\n",
        "37": " * \"https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support\">\n",
        "38": " * unsigned primitive utilities</a>.\n",
        "39": " *\n",
        "40": " * @author Louis Wasserman\n",
        "41": " * @since 11.0\n",
        "42": " */\n",
        "43": "@CheckReturnValue\n",
        "44": "@GwtCompatible(emulated = true)\n",
        "45": "public final class UnsignedInteger extends Number implements Comparable<UnsignedInteger> {\n",
        "46": "  public static final UnsignedInteger ZERO = fromIntBits(0);\n",
        "47": "  public static final UnsignedInteger ONE = fromIntBits(1);\n",
        "48": "  public static final UnsignedInteger MAX_VALUE = fromIntBits(-1);\n",
        "49": "\n",
        "50": "  private final int value;\n",
        "51": "\n",
        "52": "  private UnsignedInteger(int value) {\n",
        "53": "    // GWT doesn't consistently overflow values to make them 32-bit, so we need to force it.\n",
        "54": "    this.value = value & 0xffffffff;\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  /**\n",
        "58": "   * Returns an {@code UnsignedInteger} corresponding to a given bit representation.\n",
        "59": "   * The argument is interpreted as an unsigned 32-bit value. Specifically, the sign bit\n",
        "60": "   * of {@code bits} is interpreted as a normal bit, and all other bits are treated as usual.\n",
        "61": "   *\n",
        "62": "   * <p>If the argument is nonnegative, the returned result will be equal to {@code bits},\n",
        "63": "   * otherwise, the result will be equal to {@code 2^32 + bits}.\n",
        "64": "   *\n",
        "65": "   * <p>To represent unsigned decimal constants, consider {@link #valueOf(long)} instead.\n",
        "66": "   *\n",
        "67": "   * @since 14.0\n",
        "68": "   */\n",
        "69": "  public static UnsignedInteger fromIntBits(int bits) {\n",
        "70": "    return new UnsignedInteger(bits);\n",
        "71": "  }\n",
        "72": "\n",
        "73": "  /**\n",
        "74": "   * Returns an {@code UnsignedInteger} that is equal to {@code value},\n",
        "75": "   * if possible.  The inverse operation of {@link #longValue()}.\n",
        "76": "   */\n",
        "77": "  public static UnsignedInteger valueOf(long value) {\n",
        "78": "    checkArgument(\n",
        "79": "        (value & INT_MASK) == value,\n",
        "80": "        \"value (%s) is outside the range for an unsigned integer value\",\n",
        "81": "        value);\n",
        "82": "    return fromIntBits((int) value);\n",
        "83": "  }\n",
        "84": "\n",
        "85": "  /**\n",
        "86": "   * Returns a {@code UnsignedInteger} representing the same value as the specified\n",
        "87": "   * {@link BigInteger}. This is the inverse operation of {@link #bigIntegerValue()}.\n",
        "88": "   *\n",
        "89": "   * @throws IllegalArgumentException if {@code value} is negative or {@code value >= 2^32}\n",
        "90": "   */\n",
        "91": "  public static UnsignedInteger valueOf(BigInteger value) {\n",
        "92": "    checkNotNull(value);\n",
        "93": "    checkArgument(\n",
        "94": "        value.signum() >= 0 && value.bitLength() <= Integer.SIZE,\n",
        "95": "        \"value (%s) is outside the range for an unsigned integer value\",\n",
        "96": "        value);\n",
        "97": "    return fromIntBits(value.intValue());\n",
        "98": "  }\n",
        "99": "\n",
        "100": "  /**\n",
        "101": "   * Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed\n",
        "102": "   * as an unsigned {@code int} value.\n",
        "103": "   *\n",
        "104": "   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code int}\n",
        "105": "   *         value\n",
        "106": "   */\n",
        "107": "  public static UnsignedInteger valueOf(String string) {\n",
        "108": "    return valueOf(string, 10);\n",
        "109": "  }\n",
        "110": "\n",
        "111": "  /**\n",
        "112": "   * Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed\n",
        "113": "   * as an unsigned {@code int} value in the specified radix.\n",
        "114": "   *\n",
        "115": "   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code int}\n",
        "116": "   *         value\n",
        "117": "   */\n",
        "118": "  public static UnsignedInteger valueOf(String string, int radix) {\n",
        "119": "    return fromIntBits(UnsignedInts.parseUnsignedInt(string, radix));\n",
        "120": "  }\n",
        "121": "\n",
        "122": "  /**\n",
        "123": "   * Returns the result of adding this and {@code val}. If the result would have more than 32 bits,\n",
        "124": "   * returns the low 32 bits of the result.\n",
        "125": "   *\n",
        "126": "   * @since 14.0\n",
        "127": "   */\n",
        "128": "  public UnsignedInteger plus(UnsignedInteger val) {\n",
        "129": "    return fromIntBits(this.value + checkNotNull(val).value);\n",
        "130": "  }\n",
        "131": "\n",
        "132": "  /**\n",
        "133": "   * Returns the result of subtracting this and {@code val}. If the result would be negative,\n",
        "134": "   * returns the low 32 bits of the result.\n",
        "135": "   *\n",
        "136": "   * @since 14.0\n",
        "137": "   */\n",
        "138": "  public UnsignedInteger minus(UnsignedInteger val) {\n",
        "139": "    return fromIntBits(value - checkNotNull(val).value);\n",
        "140": "  }\n",
        "141": "\n",
        "142": "  /**\n",
        "143": "   * Returns the result of dividing this by {@code val}.\n",
        "144": "   *\n",
        "145": "   * @throws ArithmeticException if {@code val} is zero\n",
        "146": "   * @since 14.0\n",
        "147": "   */\n",
        "148": "  public UnsignedInteger dividedBy(UnsignedInteger val) {\n",
        "149": "    return fromIntBits(UnsignedInts.divide(value, checkNotNull(val).value));\n",
        "150": "  }\n",
        "151": "\n",
        "152": "  /**\n",
        "153": "   * Returns this mod {@code val}.\n",
        "154": "   *\n",
        "155": "   * @throws ArithmeticException if {@code val} is zero\n",
        "156": "   * @since 14.0\n",
        "157": "   */\n",
        "158": "  public UnsignedInteger mod(UnsignedInteger val) {\n",
        "159": "    return fromIntBits(UnsignedInts.remainder(value, checkNotNull(val).value));\n",
        "160": "  }\n",
        "161": "\n",
        "162": "  /**\n",
        "163": "   * Returns the value of this {@code UnsignedInteger} as an {@code int}. This is an inverse\n",
        "164": "   * operation to {@link #fromIntBits}.\n",
        "165": "   *\n",
        "166": "   * <p>Note that if this {@code UnsignedInteger} holds a value {@code >= 2^31}, the returned value\n",
        "167": "   * will be equal to {@code this - 2^32}.\n",
        "168": "   */\n",
        "169": "  @Override\n",
        "170": "  public int intValue() {\n",
        "171": "    return value;\n",
        "172": "  }\n",
        "173": "\n",
        "174": "  /**\n",
        "175": "   * Returns the value of this {@code UnsignedInteger} as a {@code long}.\n",
        "176": "   */\n",
        "177": "  @Override\n",
        "178": "  public long longValue() {\n",
        "179": "    return toLong(value);\n",
        "180": "  }\n",
        "181": "\n",
        "182": "  /**\n",
        "183": "   * Returns the value of this {@code UnsignedInteger} as a {@code float}, analogous to a widening\n",
        "184": "   * primitive conversion from {@code int} to {@code float}, and correctly rounded.\n",
        "185": "   */\n",
        "186": "  @Override\n",
        "187": "  public float floatValue() {\n",
        "188": "    return longValue();\n",
        "189": "  }\n",
        "190": "\n",
        "191": "  /**\n",
        "192": "   * Returns the value of this {@code UnsignedInteger} as a {@code float}, analogous to a widening\n",
        "193": "   * primitive conversion from {@code int} to {@code double}, and correctly rounded.\n",
        "194": "   */\n",
        "195": "  @Override\n",
        "196": "  public double doubleValue() {\n",
        "197": "    return longValue();\n",
        "198": "  }\n",
        "199": "\n",
        "200": "  /**\n",
        "201": "   * Returns the value of this {@code UnsignedInteger} as a {@link BigInteger}.\n",
        "202": "   */\n",
        "203": "  public BigInteger bigIntegerValue() {\n",
        "204": "    return BigInteger.valueOf(longValue());\n",
        "205": "  }\n",
        "206": "\n",
        "207": "  /**\n",
        "208": "   * Compares this unsigned integer to another unsigned integer.\n",
        "209": "   * Returns {@code 0} if they are equal, a negative number if {@code this < other},\n",
        "210": "   * and a positive number if {@code this > other}.\n",
        "211": "   */\n",
        "212": "  @Override\n",
        "213": "  public int compareTo(UnsignedInteger other) {\n",
        "214": "    checkNotNull(other);\n",
        "215": "    return compare(value, other.value);\n",
        "216": "  }\n",
        "217": "\n",
        "218": "  @Override\n",
        "219": "  public int hashCode() {\n",
        "220": "    return value;\n",
        "221": "  }\n",
        "222": "\n",
        "223": "  @Override\n",
        "224": "  public boolean equals(@Nullable Object obj) {\n",
        "225": "    if (obj instanceof UnsignedInteger) {\n",
        "226": "      UnsignedInteger other = (UnsignedInteger) obj;\n",
        "227": "      return value == other.value;\n",
        "228": "    }\n",
        "229": "    return false;\n",
        "230": "  }\n",
        "231": "\n",
        "232": "  /**\n",
        "233": "   * Returns a string representation of the {@code UnsignedInteger} value, in base 10.\n",
        "234": "   */\n",
        "235": "  @Override\n",
        "236": "  public String toString() {\n",
        "237": "    return toString(10);\n",
        "238": "  }\n",
        "239": "\n",
        "240": "  /**\n",
        "241": "   * Returns a string representation of the {@code UnsignedInteger} value, in base {@code radix}.\n",
        "242": "   * If {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX}, the radix\n",
        "243": "   * {@code 10} is used.\n",
        "244": "   */\n",
        "245": "  public String toString(int radix) {\n",
        "246": "    return UnsignedInts.toString(value, radix);\n",
        "247": "  }\n",
        "248": "}\n",
        "249": "\n"
    }
}