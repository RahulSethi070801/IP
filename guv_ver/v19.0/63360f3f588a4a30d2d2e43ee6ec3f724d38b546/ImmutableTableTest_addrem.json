{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2009 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "\n",
        "23": "/**\n",
        "24": " * Tests common methods in {@link ImmutableTable}\n",
        "25": " *\n",
        "26": " * @author Gregory Kick\n",
        "27": " */\n",
        "28": "@GwtCompatible(emulated = true)\n",
        "29": "public class ImmutableTableTest extends AbstractTableReadTest {\n",
        "30": "  @Override protected Table<String, Integer, Character> create(Object... data) {\n",
        "31": "    ImmutableTable.Builder<String, Integer, Character> builder =\n",
        "32": "        ImmutableTable.builder();\n",
        "33": "    for (int i = 0; i < data.length; i = i + 3) {\n",
        "34": "      builder.put((String) data[i], (Integer) data[i + 1],\n",
        "35": "          (Character) data[i + 2]);\n",
        "36": "    }\n",
        "37": "    return builder.build();\n",
        "38": "  }\n",
        "39": "\n",
        "40": "  public void testBuilder() {\n",
        "41": "    ImmutableTable.Builder<Character, Integer, String> builder =\n",
        "42": "        new ImmutableTable.Builder<Character, Integer, String>();\n",
        "43": "    assertEquals(ImmutableTable.of(), builder.build());\n",
        "44": "    assertEquals(ImmutableTable.of('a', 1, \"foo\"), builder\n",
        "45": "        .put('a', 1, \"foo\")\n",
        "46": "        .build());\n",
        "47": "    Table<Character, Integer, String> expectedTable = HashBasedTable.create();\n",
        "48": "    expectedTable.put('a', 1, \"foo\");\n",
        "49": "    expectedTable.put('b', 1, \"bar\");\n",
        "50": "    expectedTable.put('a', 2, \"baz\");\n",
        "51": "    Table<Character, Integer, String> otherTable = HashBasedTable.create();\n",
        "52": "    otherTable.put('b', 1, \"bar\");\n",
        "53": "    otherTable.put('a', 2, \"baz\");\n",
        "54": "    assertEquals(expectedTable, builder\n",
        "55": "        .putAll(otherTable)\n",
        "56": "        .build());\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  public void testBuilder_withImmutableCell() {\n",
        "60": "    ImmutableTable.Builder<Character, Integer, String> builder =\n",
        "61": "        new ImmutableTable.Builder<Character, Integer, String>();\n",
        "62": "    assertEquals(ImmutableTable.of('a', 1, \"foo\"), builder\n",
        "63": "        .put(Tables.immutableCell('a', 1, \"foo\"))\n",
        "64": "        .build());\n",
        "65": "  }\n",
        "66": "\n",
        "67": "  public void testBuilder_withImmutableCellAndNullContents() {\n",
        "68": "    ImmutableTable.Builder<Character, Integer, String> builder =\n",
        "69": "        new ImmutableTable.Builder<Character, Integer, String>();\n",
        "70": "    try {\n",
        "71": "      builder.put(Tables.immutableCell((Character) null, 1, \"foo\"));\n",
        "72": "      fail();\n",
        "73": "    } catch (NullPointerException e) {\n",
        "74": "      // success\n",
        "75": "    }\n",
        "76": "    try {\n",
        "77": "      builder.put(Tables.immutableCell('a', (Integer) null, \"foo\"));\n",
        "78": "      fail();\n",
        "79": "    } catch (NullPointerException e) {\n",
        "80": "      // success\n",
        "81": "    }\n",
        "82": "    try {\n",
        "83": "      builder.put(Tables.immutableCell('a', 1, (String) null));\n",
        "84": "      fail();\n",
        "85": "    } catch (NullPointerException e) {\n",
        "86": "      // success\n",
        "87": "    }\n",
        "88": "  }\n",
        "89": "\n",
        "90": "  private static class StringHolder {\n",
        "91": "    String string;\n",
        "92": "  }\n",
        "93": "\n",
        "94": "  public void testBuilder_withMutableCell() {\n",
        "95": "    ImmutableTable.Builder<Character, Integer, String> builder =\n",
        "96": "        new ImmutableTable.Builder<Character, Integer, String>();\n",
        "97": "\n",
        "98": "    final StringHolder holder = new StringHolder();\n",
        "99": "    holder.string = \"foo\";\n",
        "100": "    Table.Cell<Character, Integer, String> mutableCell =\n",
        "101": "        new Tables.AbstractCell<Character, Integer, String>() {\n",
        "102": "          @Override public Character getRowKey() {\n",
        "103": "            return 'K';\n",
        "104": "          }\n",
        "105": "          @Override public Integer getColumnKey() {\n",
        "106": "            return 42;\n",
        "107": "          }\n",
        "108": "          @Override public String getValue() {\n",
        "109": "            return holder.string;\n",
        "110": "          }\n",
        "111": "        };\n",
        "112": "\n",
        "113": "    // Add the mutable cell to the builder\n",
        "114": "    builder.put(mutableCell);\n",
        "115": "\n",
        "116": "    // Mutate the value\n",
        "117": "    holder.string = \"bar\";\n",
        "118": "\n",
        "119": "    // Make sure it uses the original value.\n",
        "120": "    assertEquals(ImmutableTable.of('K', 42, \"foo\"), builder.build());\n",
        "121": "  }\n",
        "122": "\n",
        "123": "  public void testBuilder_noDuplicates() {\n",
        "124": "    ImmutableTable.Builder<Character, Integer, String> builder =\n",
        "125": "        new ImmutableTable.Builder<Character, Integer, String>()\n",
        "126": "            .put('a', 1, \"foo\")\n",
        "127": "            .put('a', 1, \"bar\");\n",
        "128": "    try {\n",
        "129": "      builder.build();\n",
        "130": "      fail();\n",
        "131": "    } catch (IllegalArgumentException e) {\n",
        "132": "      // success\n",
        "133": "    }\n",
        "134": "  }\n",
        "135": "\n",
        "136": "  public void testBuilder_noNulls() {\n",
        "137": "    ImmutableTable.Builder<Character, Integer, String> builder =\n",
        "138": "        new ImmutableTable.Builder<Character, Integer, String>();\n",
        "139": "    try {\n",
        "140": "      builder.put(null, 1, \"foo\");\n",
        "141": "      fail();\n",
        "142": "    } catch (NullPointerException e) {\n",
        "143": "      // success\n",
        "144": "    }\n",
        "145": "    try {\n",
        "146": "      builder.put('a', null, \"foo\");\n",
        "147": "      fail();\n",
        "148": "    } catch (NullPointerException e) {\n",
        "149": "      // success\n",
        "150": "    }\n",
        "151": "    try {\n",
        "152": "      builder.put('a', 1, null);\n",
        "153": "      fail();\n",
        "154": "    } catch (NullPointerException e) {\n",
        "155": "      // success\n",
        "156": "    }\n",
        "157": "  }\n",
        "158": "\n",
        "159": "  private static <R, C, V> void validateTableCopies(Table<R, C, V> original) {\n",
        "160": "    Table<R, C, V> copy = ImmutableTable.copyOf(original);\n",
        "161": "    assertEquals(original, copy);\n",
        "162": "    validateViewOrdering(original, copy);\n",
        "163": "\n",
        "164": "    Table<R, C, V> built\n",
        "165": "        = ImmutableTable.<R, C, V>builder().putAll(original).build();\n",
        "166": "    assertEquals(original, built);\n",
        "167": "    validateViewOrdering(original, built);\n",
        "168": "  }\n",
        "169": "\n",
        "170": "  private static <R, C, V> void validateViewOrdering(\n",
        "171": "      Table<R, C, V> original, Table<R, C, V> copy) {\n",
        "172": "    assertTrue(Iterables.elementsEqual(original.cellSet(), copy.cellSet()));\n",
        "173": "    assertTrue(Iterables.elementsEqual(original.rowKeySet(), copy.rowKeySet()));\n",
        "174": "    assertTrue(Iterables.elementsEqual(original.values(), copy.values()));\n",
        "175": "  }\n",
        "176": "\n",
        "177": "  public void testCopyOf() {\n",
        "178": "    Table<Character, Integer, String> table = TreeBasedTable.create();\n",
        "179": "    validateTableCopies(table);\n",
        "180": "    table.put('b', 2, \"foo\");\n",
        "181": "    validateTableCopies(table);\n",
        "182": "    table.put('b', 1, \"bar\");\n",
        "183": "    table.put('a', 2, \"baz\");\n",
        "184": "    validateTableCopies(table);\n",
        "185": "    // Even though rowKeySet, columnKeySet, and cellSet have the same\n",
        "186": "    // iteration ordering, row has an inconsistent ordering.\n",
        "187": "    assertThat(table.row('b').keySet()).containsExactly(1, 2).inOrder();\n",
        "188": "    assertThat(ImmutableTable.copyOf(table).row('b').keySet())\n",
        "189": "        .containsExactly(2, 1).inOrder();\n",
        "190": "  }\n",
        "191": "\n",
        "192": "  public void testCopyOfSparse() {\n",
        "193": "    Table<Character, Integer, String> table = TreeBasedTable.create();\n",
        "194": "    table.put('x', 2, \"foo\");\n",
        "195": "    table.put('r', 1, \"bar\");\n",
        "196": "    table.put('c', 3, \"baz\");\n",
        "197": "    table.put('b', 7, \"cat\");\n",
        "198": "    table.put('e', 5, \"dog\");\n",
        "199": "    table.put('c', 0, \"axe\");\n",
        "200": "    table.put('e', 3, \"tub\");\n",
        "201": "    table.put('r', 4, \"foo\");\n",
        "202": "    table.put('x', 5, \"bar\");\n",
        "203": "    validateTableCopies(table);\n",
        "204": "  }\n",
        "205": "\n",
        "206": "  public void testCopyOfDense() {\n",
        "207": "    Table<Character, Integer, String> table = TreeBasedTable.create();\n",
        "208": "    table.put('c', 3, \"foo\");\n",
        "209": "    table.put('c', 2, \"bar\");\n",
        "210": "    table.put('c', 1, \"baz\");\n",
        "211": "    table.put('b', 3, \"cat\");\n",
        "212": "    table.put('b', 1, \"dog\");\n",
        "213": "    table.put('a', 3, \"foo\");\n",
        "214": "    table.put('a', 2, \"bar\");\n",
        "215": "    table.put('a', 1, \"baz\");\n",
        "216": "    validateTableCopies(table);\n",
        "217": "  }\n",
        "218": "\n",
        "219": "  public void testBuilder_orderRowsAndColumnsBy_putAll() {\n",
        "220": "    Table<Character, Integer, String> table = HashBasedTable.create();\n",
        "221": "    table.put('b', 2, \"foo\");\n",
        "222": "    table.put('b', 1, \"bar\");\n",
        "223": "    table.put('a', 2, \"baz\");\n",
        "224": "    ImmutableTable.Builder<Character, Integer, String> builder\n",
        "225": "        = ImmutableTable.builder();\n",
        "226": "    Table<Character, Integer, String> copy\n",
        "227": "        = builder.orderRowsBy(Ordering.natural())\n",
        "228": "            .orderColumnsBy(Ordering.natural())\n",
        "229": "            .putAll(table).build();\n",
        "230": "    assertThat(copy.rowKeySet()).containsExactly('a', 'b').inOrder();\n",
        "231": "    assertThat(copy.columnKeySet()).containsExactly(1, 2).inOrder();\n",
        "232": "    assertThat(copy.values()).containsExactly(\"baz\", \"bar\", \"foo\").inOrder();\n",
        "233": "    assertThat(copy.row('b').keySet()).containsExactly(1, 2).inOrder();\n",
        "234": "  }\n",
        "235": "\n",
        "236": "  public void testBuilder_orderRowsAndColumnsBy_sparse() {\n",
        "237": "    ImmutableTable.Builder<Character, Integer, String> builder\n",
        "238": "        = ImmutableTable.builder();\n",
        "239": "    builder.orderRowsBy(Ordering.natural());\n",
        "240": "    builder.orderColumnsBy(Ordering.natural());\n",
        "241": "    builder.put('x', 2, \"foo\");\n",
        "242": "    builder.put('r', 1, \"bar\");\n",
        "243": "    builder.put('c', 3, \"baz\");\n",
        "244": "    builder.put('b', 7, \"cat\");\n",
        "245": "    builder.put('e', 5, \"dog\");\n",
        "246": "    builder.put('c', 0, \"axe\");\n",
        "247": "    builder.put('e', 3, \"tub\");\n",
        "248": "    builder.put('r', 4, \"foo\");\n",
        "249": "    builder.put('x', 5, \"bar\");\n",
        "250": "    Table<Character, Integer, String> table = builder.build();\n",
        "251": "    assertThat(table.rowKeySet()).containsExactly('b', 'c', 'e', 'r', 'x').inOrder();\n",
        "252": "    assertThat(table.columnKeySet()).containsExactly(0, 1, 2, 3, 4, 5, 7).inOrder();\n",
        "253": "    assertThat(table.values()).containsExactly(\"cat\", \"axe\", \"baz\", \"tub\",\n",
        "254": "        \"dog\", \"bar\", \"foo\", \"foo\", \"bar\").inOrder();\n",
        "255": "    assertThat(table.row('c').keySet()).containsExactly(0, 3).inOrder();\n",
        "256": "    assertThat(table.column(5).keySet()).containsExactly('e', 'x').inOrder();\n",
        "257": "  }\n",
        "258": "\n",
        "259": "  public void testBuilder_orderRowsAndColumnsBy_dense() {\n",
        "260": "    ImmutableTable.Builder<Character, Integer, String> builder\n",
        "261": "        = ImmutableTable.builder();\n",
        "262": "    builder.orderRowsBy(Ordering.natural());\n",
        "263": "    builder.orderColumnsBy(Ordering.natural());\n",
        "264": "    builder.put('c', 3, \"foo\");\n",
        "265": "    builder.put('c', 2, \"bar\");\n",
        "266": "    builder.put('c', 1, \"baz\");\n",
        "267": "    builder.put('b', 3, \"cat\");\n",
        "268": "    builder.put('b', 1, \"dog\");\n",
        "269": "    builder.put('a', 3, \"foo\");\n",
        "270": "    builder.put('a', 2, \"bar\");\n",
        "271": "    builder.put('a', 1, \"baz\");\n",
        "272": "    Table<Character, Integer, String> table = builder.build();\n",
        "273": "    assertThat(table.rowKeySet()).containsExactly('a', 'b', 'c').inOrder();\n",
        "274": "    assertThat(table.columnKeySet()).containsExactly(1, 2, 3).inOrder();\n",
        "275": "    assertThat(table.values()).containsExactly(\"baz\", \"bar\", \"foo\", \"dog\",\n",
        "276": "        \"cat\", \"baz\", \"bar\", \"foo\").inOrder();\n",
        "277": "    assertThat(table.row('c').keySet()).containsExactly(1, 2, 3).inOrder();\n",
        "278": "    assertThat(table.column(1).keySet()).containsExactly('a', 'b', 'c').inOrder();\n",
        "279": "  }\n",
        "280": "\n",
        "281": "  public void testBuilder_orderRowsBy_sparse() {\n",
        "282": "    ImmutableTable.Builder<Character, Integer, String> builder\n",
        "283": "        = ImmutableTable.builder();\n",
        "284": "    builder.orderRowsBy(Ordering.natural());\n",
        "285": "    builder.put('x', 2, \"foo\");\n",
        "286": "    builder.put('r', 1, \"bar\");\n",
        "287": "    builder.put('c', 3, \"baz\");\n",
        "288": "    builder.put('b', 7, \"cat\");\n",
        "289": "    builder.put('e', 5, \"dog\");\n",
        "290": "    builder.put('c', 0, \"axe\");\n",
        "291": "    builder.put('e', 3, \"tub\");\n",
        "292": "    builder.put('r', 4, \"foo\");\n",
        "293": "    builder.put('x', 5, \"bar\");\n",
        "294": "    Table<Character, Integer, String> table = builder.build();\n",
        "295": "    assertThat(table.rowKeySet()).containsExactly('b', 'c', 'e', 'r', 'x').inOrder();\n",
        "296": "    assertThat(table.column(5).keySet()).containsExactly('e', 'x').inOrder();\n",
        "297": "  }\n",
        "298": "\n",
        "299": "  public void testBuilder_orderRowsBy_dense() {\n",
        "300": "    ImmutableTable.Builder<Character, Integer, String> builder\n",
        "301": "        = ImmutableTable.builder();\n",
        "302": "    builder.orderRowsBy(Ordering.natural());\n",
        "303": "    builder.put('c', 3, \"foo\");\n",
        "304": "    builder.put('c', 2, \"bar\");\n",
        "305": "    builder.put('c', 1, \"baz\");\n",
        "306": "    builder.put('b', 3, \"cat\");\n",
        "307": "    builder.put('b', 1, \"dog\");\n",
        "308": "    builder.put('a', 3, \"foo\");\n",
        "309": "    builder.put('a', 2, \"bar\");\n",
        "310": "    builder.put('a', 1, \"baz\");\n",
        "311": "    Table<Character, Integer, String> table = builder.build();\n",
        "312": "    assertThat(table.rowKeySet()).containsExactly('a', 'b', 'c').inOrder();\n",
        "313": "    assertThat(table.column(1).keySet()).containsExactly('a', 'b', 'c').inOrder();\n",
        "314": "  }\n",
        "315": "\n",
        "316": "  public void testBuilder_orderColumnsBy_sparse() {\n",
        "317": "    ImmutableTable.Builder<Character, Integer, String> builder\n",
        "318": "        = ImmutableTable.builder();\n",
        "319": "    builder.orderColumnsBy(Ordering.natural());\n",
        "320": "    builder.put('x', 2, \"foo\");\n",
        "321": "    builder.put('r', 1, \"bar\");\n",
        "322": "    builder.put('c', 3, \"baz\");\n",
        "323": "    builder.put('b', 7, \"cat\");\n",
        "324": "    builder.put('e', 5, \"dog\");\n",
        "325": "    builder.put('c', 0, \"axe\");\n",
        "326": "    builder.put('e', 3, \"tub\");\n",
        "327": "    builder.put('r', 4, \"foo\");\n",
        "328": "    builder.put('x', 5, \"bar\");\n",
        "329": "    Table<Character, Integer, String> table = builder.build();\n",
        "330": "    assertThat(table.columnKeySet()).containsExactly(0, 1, 2, 3, 4, 5, 7).inOrder();\n",
        "331": "    assertThat(table.row('c').keySet()).containsExactly(0, 3).inOrder();\n",
        "332": "  }\n",
        "333": "\n",
        "334": "  public void testBuilder_orderColumnsBy_dense() {\n",
        "335": "    ImmutableTable.Builder<Character, Integer, String> builder\n",
        "336": "        = ImmutableTable.builder();\n",
        "337": "    builder.orderColumnsBy(Ordering.natural());\n",
        "338": "    builder.put('c', 3, \"foo\");\n",
        "339": "    builder.put('c', 2, \"bar\");\n",
        "340": "    builder.put('c', 1, \"baz\");\n",
        "341": "    builder.put('b', 3, \"cat\");\n",
        "342": "    builder.put('b', 1, \"dog\");\n",
        "343": "    builder.put('a', 3, \"foo\");\n",
        "344": "    builder.put('a', 2, \"bar\");\n",
        "345": "    builder.put('a', 1, \"baz\");\n",
        "346": "    Table<Character, Integer, String> table = builder.build();\n",
        "347": "    assertThat(table.columnKeySet()).containsExactly(1, 2, 3).inOrder();\n",
        "348": "    assertThat(table.row('c').keySet()).containsExactly(1, 2, 3).inOrder();\n",
        "349": "  }\n",
        "350": "}\n",
        "351": "\n"
    }
}