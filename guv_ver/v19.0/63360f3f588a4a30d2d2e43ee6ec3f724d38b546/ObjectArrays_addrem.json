{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkPositionIndexes;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "\n",
        "23": "import java.util.Collection;\n",
        "24": "\n",
        "25": "import javax.annotation.Nullable;\n",
        "26": "\n",
        "27": "/**\n",
        "28": " * Static utility methods pertaining to object arrays.\n",
        "29": " *\n",
        "30": " * @author Kevin Bourrillion\n",
        "31": " * @since 2.0\n",
        "32": " */\n",
        "33": "@GwtCompatible(emulated = true)\n",
        "34": "public final class ObjectArrays {\n",
        "35": "  static final Object[] EMPTY_ARRAY = new Object[0];\n",
        "36": "\n",
        "37": "  private ObjectArrays() {}\n",
        "38": "\n",
        "39": "  /**\n",
        "40": "   * Returns a new array of the given length with the same type as a reference\n",
        "41": "   * array.\n",
        "42": "   *\n",
        "43": "   * @param reference any array of the desired type\n",
        "44": "   * @param length the length of the new array\n",
        "45": "   */\n",
        "46": "  public static <T> T[] newArray(T[] reference, int length) {\n",
        "47": "    return Platform.newArray(reference, length);\n",
        "48": "  }\n",
        "49": "\n",
        "50": "  /**\n",
        "51": "   * Returns a new array that prepends {@code element} to {@code array}.\n",
        "52": "   *\n",
        "53": "   * @param element the element to prepend to the front of {@code array}\n",
        "54": "   * @param array the array of elements to append\n",
        "55": "   * @return an array whose size is one larger than {@code array}, with\n",
        "56": "   *     {@code element} occupying the first position, and the\n",
        "57": "   *     elements of {@code array} occupying the remaining elements.\n",
        "58": "   */\n",
        "59": "  public static <T> T[] concat(@Nullable T element, T[] array) {\n",
        "60": "    T[] result = newArray(array, array.length + 1);\n",
        "61": "    result[0] = element;\n",
        "62": "    System.arraycopy(array, 0, result, 1, array.length);\n",
        "63": "    return result;\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  /**\n",
        "67": "   * Returns a new array that appends {@code element} to {@code array}.\n",
        "68": "   *\n",
        "69": "   * @param array the array of elements to prepend\n",
        "70": "   * @param element the element to append to the end\n",
        "71": "   * @return an array whose size is one larger than {@code array}, with\n",
        "72": "   *     the same contents as {@code array}, plus {@code element} occupying the\n",
        "73": "   *     last position.\n",
        "74": "   */\n",
        "75": "  public static <T> T[] concat(T[] array, @Nullable T element) {\n",
        "76": "    T[] result = arraysCopyOf(array, array.length + 1);\n",
        "77": "    result[array.length] = element;\n",
        "78": "    return result;\n",
        "79": "  }\n",
        "80": "\n",
        "81": "  /** GWT safe version of Arrays.copyOf. */\n",
        "82": "  static <T> T[] arraysCopyOf(T[] original, int newLength) {\n",
        "83": "    T[] copy = newArray(original, newLength);\n",
        "84": "    System.arraycopy(original, 0, copy, 0, Math.min(original.length, newLength));\n",
        "85": "    return copy;\n",
        "86": "  }\n",
        "87": "\n",
        "88": "  /**\n",
        "89": "   * Returns an array containing all of the elements in the specified\n",
        "90": "   * collection; the runtime type of the returned array is that of the specified\n",
        "91": "   * array. If the collection fits in the specified array, it is returned\n",
        "92": "   * therein. Otherwise, a new array is allocated with the runtime type of the\n",
        "93": "   * specified array and the size of the specified collection.\n",
        "94": "   *\n",
        "95": "   * <p>If the collection fits in the specified array with room to spare (i.e.,\n",
        "96": "   * the array has more elements than the collection), the element in the array\n",
        "97": "   * immediately following the end of the collection is set to {@code null}.\n",
        "98": "   * This is useful in determining the length of the collection <i>only</i> if\n",
        "99": "   * the caller knows that the collection does not contain any null elements.\n",
        "100": "   *\n",
        "101": "   * <p>This method returns the elements in the order they are returned by the\n",
        "102": "   * collection's iterator.\n",
        "103": "   *\n",
        "104": "   * <p>TODO(kevinb): support concurrently modified collections?\n",
        "105": "   *\n",
        "106": "   * @param c the collection for which to return an array of elements\n",
        "107": "   * @param array the array in which to place the collection elements\n",
        "108": "   * @throws ArrayStoreException if the runtime type of the specified array is\n",
        "109": "   *     not a supertype of the runtime type of every element in the specified\n",
        "110": "   *     collection\n",
        "111": "   */\n",
        "112": "  static <T> T[] toArrayImpl(Collection<?> c, T[] array) {\n",
        "113": "    int size = c.size();\n",
        "114": "    if (array.length < size) {\n",
        "115": "      array = newArray(array, size);\n",
        "116": "    }\n",
        "117": "    fillArray(c, array);\n",
        "118": "    if (array.length > size) {\n",
        "119": "      array[size] = null;\n",
        "120": "    }\n",
        "121": "    return array;\n",
        "122": "  }\n",
        "123": "\n",
        "124": "  /**\n",
        "125": "   * Implementation of {@link Collection#toArray(Object[])} for collections backed by an object\n",
        "126": "   * array. the runtime type of the returned array is that of the specified array. If the collection\n",
        "127": "   * fits in the specified array, it is returned therein. Otherwise, a new array is allocated with\n",
        "128": "   * the runtime type of the specified array and the size of the specified collection.\n",
        "129": "   *\n",
        "130": "   * <p>If the collection fits in the specified array with room to spare (i.e., the array has more\n",
        "131": "   * elements than the collection), the element in the array immediately following the end of the\n",
        "132": "   * collection is set to {@code null}. This is useful in determining the length of the collection\n",
        "133": "   * <i>only</i> if the caller knows that the collection does not contain any null elements.\n",
        "134": "   */\n",
        "135": "  static <T> T[] toArrayImpl(Object[] src, int offset, int len, T[] dst) {\n",
        "136": "    checkPositionIndexes(offset, offset + len, src.length);\n",
        "137": "    if (dst.length < len) {\n",
        "138": "      dst = newArray(dst, len);\n",
        "139": "    } else if (dst.length > len) {\n",
        "140": "      dst[len] = null;\n",
        "141": "    }\n",
        "142": "    System.arraycopy(src, offset, dst, 0, len);\n",
        "143": "    return dst;\n",
        "144": "  }\n",
        "145": "\n",
        "146": "  /**\n",
        "147": "   * Returns an array containing all of the elements in the specified\n",
        "148": "   * collection. This method returns the elements in the order they are returned\n",
        "149": "   * by the collection's iterator. The returned array is \"safe\" in that no\n",
        "150": "   * references to it are maintained by the collection. The caller is thus free\n",
        "151": "   * to modify the returned array.\n",
        "152": "   *\n",
        "153": "   * <p>This method assumes that the collection size doesn't change while the\n",
        "154": "   * method is running.\n",
        "155": "   *\n",
        "156": "   * <p>TODO(kevinb): support concurrently modified collections?\n",
        "157": "   *\n",
        "158": "   * @param c the collection for which to return an array of elements\n",
        "159": "   */\n",
        "160": "  static Object[] toArrayImpl(Collection<?> c) {\n",
        "161": "    return fillArray(c, new Object[c.size()]);\n",
        "162": "  }\n",
        "163": "\n",
        "164": "  /**\n",
        "165": "   * Returns a copy of the specified subrange of the specified array that is literally an Object[],\n",
        "166": "   * and not e.g. a {@code String[]}.\n",
        "167": "   */\n",
        "168": "  static Object[] copyAsObjectArray(Object[] elements, int offset, int length) {\n",
        "169": "    checkPositionIndexes(offset, offset + length, elements.length);\n",
        "170": "    if (length == 0) {\n",
        "171": "      return EMPTY_ARRAY;\n",
        "172": "    }\n",
        "173": "    Object[] result = new Object[length];\n",
        "174": "    System.arraycopy(elements, offset, result, 0, length);\n",
        "175": "    return result;\n",
        "176": "  }\n",
        "177": "\n",
        "178": "  private static Object[] fillArray(Iterable<?> elements, Object[] array) {\n",
        "179": "    int i = 0;\n",
        "180": "    for (Object element : elements) {\n",
        "181": "      array[i++] = element;\n",
        "182": "    }\n",
        "183": "    return array;\n",
        "184": "  }\n",
        "185": "\n",
        "186": "  /**\n",
        "187": "   * Swaps {@code array[i]} with {@code array[j]}.\n",
        "188": "   */\n",
        "189": "  static void swap(Object[] array, int i, int j) {\n",
        "190": "    Object temp = array[i];\n",
        "191": "    array[i] = array[j];\n",
        "192": "    array[j] = temp;\n",
        "193": "  }\n",
        "194": "\n",
        "195": "  static Object[] checkElementsNotNull(Object... array) {\n",
        "196": "    return checkElementsNotNull(array, array.length);\n",
        "197": "  }\n",
        "198": "\n",
        "199": "  static Object[] checkElementsNotNull(Object[] array, int length) {\n",
        "200": "    for (int i = 0; i < length; i++) {\n",
        "201": "      checkElementNotNull(array[i], i);\n",
        "202": "    }\n",
        "203": "    return array;\n",
        "204": "  }\n",
        "205": "\n",
        "206": "  // We do this instead of Preconditions.checkNotNull to save boxing and array\n",
        "207": "  // creation cost.\n",
        "208": "  static Object checkElementNotNull(Object element, int index) {\n",
        "209": "    if (element == null) {\n",
        "210": "      throw new NullPointerException(\"at index \" + index);\n",
        "211": "    }\n",
        "212": "    return element;\n",
        "213": "  }\n",
        "214": "}\n",
        "215": "\n"
    }
}