{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2010 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " *      http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS-IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.Beta;\n",
        "20": "import com.google.common.annotations.GwtCompatible;\n",
        "21": "import com.google.common.base.Function;\n",
        "22": "\n",
        "23": "import java.util.concurrent.ConcurrentMap;\n",
        "24": "import java.util.concurrent.TimeUnit;\n",
        "25": "\n",
        "26": "/**\n",
        "27": " * A class exactly like {@link MapMaker}, except restricted in the types of maps it can build.\n",
        "28": " * For the most part, you should probably just ignore the existence of this class.\n",
        "29": " *\n",
        "30": " * @param <K0> the base type for all key types of maps built by this map maker\n",
        "31": " * @param <V0> the base type for all value types of maps built by this map maker\n",
        "32": " * @author Kevin Bourrillion\n",
        "33": " * @since 7.0\n",
        "34": " * @deprecated This class existed only to support the generic paramterization necessary for the\n",
        "35": " *     caching functionality in {@code MapMaker}. That functionality has been moved to {@link\n",
        "36": " *     com.google.common.cache.CacheBuilder}, which is a properly generified class and thus needs no\n",
        "37": " *     \"Generic\" equivalent; simple use {@code CacheBuilder} naturally. For general migration\n",
        "38": " *     instructions, see the <a\n",
        "39": " *     href=\"https://github.com/google/guava/wiki/MapMakerMigration\">MapMaker Migration\n",
        "40": " *     Guide</a>.\n",
        "41": " */\n",
        "42": "@Beta\n",
        "43": "@Deprecated\n",
        "44": "@GwtCompatible(emulated = true)\n",
        "45": "abstract class GenericMapMaker<K0, V0> {\n",
        "46": "\n",
        "47": "  // Set by MapMaker, but sits in this class to preserve the type relationship\n",
        "48": "\n",
        "49": "  // No subclasses but our own\n",
        "50": "  GenericMapMaker() {}\n",
        "51": "\n",
        "52": "  /**\n",
        "53": "   * See {@link MapMaker#initialCapacity}.\n",
        "54": "   */\n",
        "55": "  public abstract GenericMapMaker<K0, V0> initialCapacity(int initialCapacity);\n",
        "56": "\n",
        "57": "  /**\n",
        "58": "   * See {@link MapMaker#maximumSize}.\n",
        "59": "   */\n",
        "60": "  abstract GenericMapMaker<K0, V0> maximumSize(int maximumSize);\n",
        "61": "\n",
        "62": "  /**\n",
        "63": "   * See {@link MapMaker#concurrencyLevel}.\n",
        "64": "   */\n",
        "65": "  public abstract GenericMapMaker<K0, V0> concurrencyLevel(int concurrencyLevel);\n",
        "66": "\n",
        "67": "  /**\n",
        "68": "   * See {@link MapMaker#expireAfterWrite}.\n",
        "69": "   */\n",
        "70": "  abstract GenericMapMaker<K0, V0> expireAfterWrite(long duration, TimeUnit unit);\n",
        "71": "\n",
        "72": "  /*\n",
        "73": "   * Note that MapMaker's removalListener() is not here, because once you're interacting with a\n",
        "74": "   * GenericMapMaker you've already called that, and shouldn't be calling it again.\n",
        "75": "   */\n",
        "76": "\n",
        "77": "  /**\n",
        "78": "   * See {@link MapMaker#makeMap}.\n",
        "79": "   */\n",
        "80": "  public abstract <K extends K0, V extends V0> ConcurrentMap<K, V> makeMap();\n",
        "81": "\n",
        "82": "  /**\n",
        "83": "   * See {@link MapMaker#makeComputingMap}.\n",
        "84": "   */\n",
        "85": "  @Deprecated\n",
        "86": "  abstract <K extends K0, V extends V0> ConcurrentMap<K, V> makeComputingMap(\n",
        "87": "      Function<? super K, ? extends V> computingFunction);\n",
        "88": "}\n"
    }
}