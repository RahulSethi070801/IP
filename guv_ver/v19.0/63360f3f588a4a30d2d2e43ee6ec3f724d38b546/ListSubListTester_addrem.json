{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.testers;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS;\n",
        "20": "import static com.google.common.collect.testing.features.CollectionSize.ONE;\n",
        "21": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "22": "import static com.google.common.collect.testing.features.ListFeature.SUPPORTS_ADD_WITH_INDEX;\n",
        "23": "import static com.google.common.collect.testing.features.ListFeature.SUPPORTS_REMOVE_WITH_INDEX;\n",
        "24": "import static com.google.common.collect.testing.features.ListFeature.SUPPORTS_SET;\n",
        "25": "import static java.util.Collections.emptyList;\n",
        "26": "\n",
        "27": "import com.google.common.annotations.GwtCompatible;\n",
        "28": "import com.google.common.collect.testing.Helpers;\n",
        "29": "import com.google.common.collect.testing.features.CollectionFeature;\n",
        "30": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "31": "import com.google.common.collect.testing.features.ListFeature;\n",
        "32": "import com.google.common.testing.SerializableTester;\n",
        "33": "\n",
        "34": "import java.util.Arrays;\n",
        "35": "import java.util.Collections;\n",
        "36": "import java.util.List;\n",
        "37": "\n",
        "38": "/**\n",
        "39": " * A generic JUnit test which tests {@code subList()} operations on a list.\n",
        "40": " * Can't be invoked directly; please see\n",
        "41": " * {@link com.google.common.collect.testing.ListTestSuiteBuilder}.\n",
        "42": " *\n",
        "43": " * @author Chris Povirk\n",
        "44": " */\n",
        "45": "@SuppressWarnings(\"unchecked\") // too many \"unchecked generic array creations\"\n",
        "46": "@GwtCompatible(emulated = true)\n",
        "47": "public class ListSubListTester<E> extends AbstractListTester<E> {\n",
        "48": "  public void testSubList_startNegative() {\n",
        "49": "    try {\n",
        "50": "      getList().subList(-1, 0);\n",
        "51": "      fail(\"subList(-1, 0) should throw\");\n",
        "52": "    } catch (IndexOutOfBoundsException expected) {\n",
        "53": "    }\n",
        "54": "  }\n",
        "55": "\n",
        "56": "  public void testSubList_endTooLarge() {\n",
        "57": "    try {\n",
        "58": "      getList().subList(0, getNumElements() + 1);\n",
        "59": "      fail(\"subList(0, size + 1) should throw\");\n",
        "60": "    } catch (IndexOutOfBoundsException expected) {\n",
        "61": "    }\n",
        "62": "  }\n",
        "63": "\n",
        "64": "  public void testSubList_startGreaterThanEnd() {\n",
        "65": "    try {\n",
        "66": "      getList().subList(1, 0);\n",
        "67": "      fail(\"subList(1, 0) should throw\");\n",
        "68": "    } catch (IndexOutOfBoundsException expected) {\n",
        "69": "    } catch (IllegalArgumentException expected) {\n",
        "70": "      /*\n",
        "71": "       * The subList() docs claim that this should be an\n",
        "72": "       * IndexOutOfBoundsException, but many JDK implementations throw\n",
        "73": "       * IllegalArgumentException:\n",
        "74": "       * http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4506427\n",
        "75": "       */\n",
        "76": "    }\n",
        "77": "  }\n",
        "78": "\n",
        "79": "  public void testSubList_empty() {\n",
        "80": "    assertEquals(\"subList(0, 0) should be empty\",\n",
        "81": "        emptyList(), getList().subList(0, 0));\n",
        "82": "  }\n",
        "83": "\n",
        "84": "  public void testSubList_entireList() {\n",
        "85": "    assertEquals(\"subList(0, size) should be equal to the original list\",\n",
        "86": "        getList(), getList().subList(0, getNumElements()));\n",
        "87": "  }\n",
        "88": "\n",
        "89": "  @ListFeature.Require(SUPPORTS_REMOVE_WITH_INDEX)\n",
        "90": "  @CollectionSize.Require(absent = ZERO)\n",
        "91": "  public void testSubList_subListRemoveAffectsOriginal() {\n",
        "92": "    List<E> subList = getList().subList(0, 1);\n",
        "93": "    subList.remove(0);\n",
        "94": "    List<E> expected =\n",
        "95": "        Arrays.asList(createSamplesArray()).subList(1, getNumElements());\n",
        "96": "    expectContents(expected);\n",
        "97": "  }\n",
        "98": "\n",
        "99": "  @ListFeature.Require(SUPPORTS_REMOVE_WITH_INDEX)\n",
        "100": "  @CollectionSize.Require(absent = ZERO)\n",
        "101": "  public void testSubList_subListClearAffectsOriginal() {\n",
        "102": "    List<E> subList = getList().subList(0, 1);\n",
        "103": "    subList.clear();\n",
        "104": "    List<E> expected =\n",
        "105": "        Arrays.asList(createSamplesArray()).subList(1, getNumElements());\n",
        "106": "    expectContents(expected);\n",
        "107": "  }\n",
        "108": "\n",
        "109": "  @ListFeature.Require(SUPPORTS_ADD_WITH_INDEX)\n",
        "110": "  public void testSubList_subListAddAffectsOriginal() {\n",
        "111": "    List<E> subList = getList().subList(0, 0);\n",
        "112": "    subList.add(e3());\n",
        "113": "    expectAdded(0, e3());\n",
        "114": "  }\n",
        "115": "\n",
        "116": "  @ListFeature.Require(SUPPORTS_SET)\n",
        "117": "  @CollectionSize.Require(absent = ZERO)\n",
        "118": "  public void testSubList_subListSetAffectsOriginal() {\n",
        "119": "    List<E> subList = getList().subList(0, 1);\n",
        "120": "    subList.set(0, e3());\n",
        "121": "    List<E> expected = Helpers.copyToList(createSamplesArray());\n",
        "122": "    expected.set(0, e3());\n",
        "123": "    expectContents(expected);\n",
        "124": "  }\n",
        "125": "\n",
        "126": "  @ListFeature.Require(SUPPORTS_SET)\n",
        "127": "  @CollectionSize.Require(absent = ZERO)\n",
        "128": "  public void testSubList_originalListSetAffectsSubList() {\n",
        "129": "    List<E> subList = getList().subList(0, 1);\n",
        "130": "    getList().set(0, e3());\n",
        "131": "    assertEquals(\"A set() call to a list after a sublist has been created \"\n",
        "132": "        + \"should be reflected in the sublist\",\n",
        "133": "        Collections.singletonList(e3()), subList);\n",
        "134": "  }\n",
        "135": "\n",
        "136": "  @ListFeature.Require(SUPPORTS_REMOVE_WITH_INDEX)\n",
        "137": "  @CollectionSize.Require(absent = {ZERO, ONE})\n",
        "138": "  public void testSubList_subListRemoveAffectsOriginalLargeList() {\n",
        "139": "    List<E> subList = getList().subList(1, 3);\n",
        "140": "    subList.remove(e2());\n",
        "141": "    List<E> expected = Helpers.copyToList(createSamplesArray());\n",
        "142": "    expected.remove(2);\n",
        "143": "    expectContents(expected);\n",
        "144": "  }\n",
        "145": "\n",
        "146": "  @ListFeature.Require(SUPPORTS_ADD_WITH_INDEX)\n",
        "147": "  @CollectionSize.Require(absent = {ZERO, ONE})\n",
        "148": "  public void testSubList_subListAddAtIndexAffectsOriginalLargeList() {\n",
        "149": "    List<E> subList = getList().subList(2, 3);\n",
        "150": "    subList.add(0, e3());\n",
        "151": "    expectAdded(2, e3());\n",
        "152": "  }\n",
        "153": "\n",
        "154": "  @ListFeature.Require(SUPPORTS_SET)\n",
        "155": "  @CollectionSize.Require(absent = {ZERO, ONE})\n",
        "156": "  public void testSubList_subListSetAffectsOriginalLargeList() {\n",
        "157": "    List<E> subList = getList().subList(1, 2);\n",
        "158": "    subList.set(0, e3());\n",
        "159": "    List<E> expected = Helpers.copyToList(createSamplesArray());\n",
        "160": "    expected.set(1, e3());\n",
        "161": "    expectContents(expected);\n",
        "162": "  }\n",
        "163": "\n",
        "164": "  @ListFeature.Require(SUPPORTS_SET)\n",
        "165": "  @CollectionSize.Require(absent = {ZERO, ONE})\n",
        "166": "  public void testSubList_originalListSetAffectsSubListLargeList() {\n",
        "167": "    List<E> subList = getList().subList(1, 3);\n",
        "168": "    getList().set(1, e3());\n",
        "169": "    assertEquals(\"A set() call to a list after a sublist has been created \"\n",
        "170": "        + \"should be reflected in the sublist\",\n",
        "171": "        Arrays.asList(e3(), e2()), subList);\n",
        "172": "  }\n",
        "173": "\n",
        "174": "  public void testSubList_ofSubListEmpty() {\n",
        "175": "    List<E> subList = getList().subList(0, 0).subList(0, 0);\n",
        "176": "    assertEquals(\"subList(0, 0).subList(0, 0) should be an empty list\",\n",
        "177": "        emptyList(), subList);\n",
        "178": "  }\n",
        "179": "\n",
        "180": "  @CollectionSize.Require(absent = {ZERO, ONE})\n",
        "181": "  public void testSubList_ofSubListNonEmpty() {\n",
        "182": "    List<E> subList = getList().subList(0, 2).subList(1, 2);\n",
        "183": "    assertEquals(\"subList(0, 2).subList(1, 2) \"\n",
        "184": "        + \"should be a single-element list of the element at index 1\",\n",
        "185": "        Collections.singletonList(getOrderedElements().get(1)), subList);\n",
        "186": "  }\n",
        "187": "\n",
        "188": "  @CollectionSize.Require(absent = {ZERO})\n",
        "189": "  public void testSubList_size() {\n",
        "190": "    List<E> list = getList();\n",
        "191": "    int size = getNumElements();\n",
        "192": "    assertEquals(list.subList(0, size).size(),\n",
        "193": "                 size);\n",
        "194": "    assertEquals(list.subList(0, size - 1).size(),\n",
        "195": "                 size - 1);\n",
        "196": "    assertEquals(list.subList(1, size).size(),\n",
        "197": "                 size - 1);\n",
        "198": "    assertEquals(list.subList(size, size).size(),\n",
        "199": "                 0);\n",
        "200": "    assertEquals(list.subList(0, 0).size(),\n",
        "201": "                 0);\n",
        "202": "  }\n",
        "203": "\n",
        "204": "  @CollectionSize.Require(absent = {ZERO})\n",
        "205": "  public void testSubList_isEmpty() {\n",
        "206": "    List<E> list = getList();\n",
        "207": "    int size = getNumElements();\n",
        "208": "    for (List<E> subList : Arrays.asList(\n",
        "209": "        list.subList(0, size),\n",
        "210": "        list.subList(0, size - 1),\n",
        "211": "        list.subList(1, size),\n",
        "212": "        list.subList(0, 0),\n",
        "213": "        list.subList(size, size))) {\n",
        "214": "      assertEquals(subList.isEmpty(), subList.size() == 0);\n",
        "215": "    }\n",
        "216": "  }\n",
        "217": "\n",
        "218": "  @CollectionSize.Require(absent = {ZERO, ONE})\n",
        "219": "  public void testSubList_get() {\n",
        "220": "    List<E> list = getList();\n",
        "221": "    int size = getNumElements();\n",
        "222": "    List<E> copy = list.subList(0, size);\n",
        "223": "    List<E> head = list.subList(0, size - 1);\n",
        "224": "    List<E> tail = list.subList(1, size);\n",
        "225": "    assertEquals(list.get(0), copy.get(0));\n",
        "226": "    assertEquals(list.get(size - 1), copy.get(size - 1));\n",
        "227": "    assertEquals(list.get(1), tail.get(0));\n",
        "228": "    assertEquals(list.get(size - 1), tail.get(size - 2));\n",
        "229": "    assertEquals(list.get(0), head.get(0));\n",
        "230": "    assertEquals(list.get(size - 2), head.get(size - 2));\n",
        "231": "    for (List<E> subList : Arrays.asList(copy, head, tail)) {\n",
        "232": "      for (int index : Arrays.asList(-1, subList.size())) {\n",
        "233": "        try {\n",
        "234": "          subList.get(index);\n",
        "235": "          fail(\"expected IndexOutOfBoundsException\");\n",
        "236": "        } catch (IndexOutOfBoundsException expected) {\n",
        "237": "        }\n",
        "238": "      }\n",
        "239": "    }\n",
        "240": "  }\n",
        "241": "\n",
        "242": "  @CollectionSize.Require(absent = {ZERO, ONE})\n",
        "243": "  public void testSubList_contains() {\n",
        "244": "    List<E> list = getList();\n",
        "245": "    int size = getNumElements();\n",
        "246": "    List<E> copy = list.subList(0, size);\n",
        "247": "    List<E> head = list.subList(0, size - 1);\n",
        "248": "    List<E> tail = list.subList(1, size);\n",
        "249": "    assertTrue(copy.contains(list.get(0)));\n",
        "250": "    assertTrue(head.contains(list.get(0)));\n",
        "251": "    assertTrue(tail.contains(list.get(1)));\n",
        "252": "    // The following assumes all elements are distinct.\n",
        "253": "    assertTrue(copy.contains(list.get(size - 1)));\n",
        "254": "    assertTrue(head.contains(list.get(size - 2)));\n",
        "255": "    assertTrue(tail.contains(list.get(size - 1)));\n",
        "256": "    assertFalse(head.contains(list.get(size - 1)));\n",
        "257": "    assertFalse(tail.contains(list.get(0)));\n",
        "258": "  }\n",
        "259": "\n",
        "260": "  @CollectionSize.Require(absent = {ZERO, ONE})\n",
        "261": "  public void testSubList_indexOf() {\n",
        "262": "    List<E> list = getList();\n",
        "263": "    int size = getNumElements();\n",
        "264": "    List<E> copy = list.subList(0, size);\n",
        "265": "    List<E> head = list.subList(0, size - 1);\n",
        "266": "    List<E> tail = list.subList(1, size);\n",
        "267": "    assertEquals(copy.indexOf(list.get(0)),\n",
        "268": "                 0);\n",
        "269": "    assertEquals(head.indexOf(list.get(0)),\n",
        "270": "                 0);\n",
        "271": "    assertEquals(tail.indexOf(list.get(1)),\n",
        "272": "                 0);\n",
        "273": "    // The following assumes all elements are distinct.\n",
        "274": "    assertEquals(copy.indexOf(list.get(size - 1)),\n",
        "275": "                 size - 1);\n",
        "276": "    assertEquals(head.indexOf(list.get(size - 2)),\n",
        "277": "                 size - 2);\n",
        "278": "    assertEquals(tail.indexOf(list.get(size - 1)),\n",
        "279": "                 size - 2);\n",
        "280": "    assertEquals(head.indexOf(list.get(size - 1)),\n",
        "281": "                 -1);\n",
        "282": "    assertEquals(tail.indexOf(list.get(0)),\n",
        "283": "                 -1);\n",
        "284": "  }\n",
        "285": "\n",
        "286": "  @CollectionSize.Require(absent = {ZERO, ONE})\n",
        "287": "  public void testSubList_lastIndexOf() {\n",
        "288": "    List<E> list = getList();\n",
        "289": "    int size = list.size();\n",
        "290": "    List<E> copy = list.subList(0, size);\n",
        "291": "    List<E> head = list.subList(0, size - 1);\n",
        "292": "    List<E> tail = list.subList(1, size);\n",
        "293": "    assertEquals(copy.lastIndexOf(list.get(size - 1)),\n",
        "294": "                 size - 1);\n",
        "295": "    assertEquals(head.lastIndexOf(list.get(size - 2)),\n",
        "296": "                 size - 2);\n",
        "297": "    assertEquals(tail.lastIndexOf(list.get(size - 1)),\n",
        "298": "                 size - 2);\n",
        "299": "    // The following assumes all elements are distinct.\n",
        "300": "    assertEquals(copy.lastIndexOf(list.get(0)),\n",
        "301": "                 0);\n",
        "302": "    assertEquals(head.lastIndexOf(list.get(0)),\n",
        "303": "                 0);\n",
        "304": "    assertEquals(tail.lastIndexOf(list.get(1)),\n",
        "305": "                 0);\n",
        "306": "    assertEquals(head.lastIndexOf(list.get(size - 1)),\n",
        "307": "                 -1);\n",
        "308": "    assertEquals(tail.lastIndexOf(list.get(0)),\n",
        "309": "                 -1);\n",
        "310": "  }\n",
        "311": "\n",
        "312": "  @CollectionFeature.Require(SERIALIZABLE_INCLUDING_VIEWS)\n",
        "313": "  public void testReserializeWholeSubList() {\n",
        "314": "    SerializableTester.reserializeAndAssert(getList().subList(0, getNumElements()));\n",
        "315": "  }\n",
        "316": "\n",
        "317": "  @CollectionFeature.Require(SERIALIZABLE_INCLUDING_VIEWS)\n",
        "318": "  public void testReserializeEmptySubList() {\n",
        "319": "    SerializableTester.reserializeAndAssert(getList().subList(0, 0));\n",
        "320": "  }\n",
        "321": "\n",
        "322": "  @CollectionFeature.Require(SERIALIZABLE_INCLUDING_VIEWS)\n",
        "323": "  @CollectionSize.Require(absent = {ZERO, ONE})\n",
        "324": "  public void testReserializeSubList() {\n",
        "325": "    SerializableTester.reserializeAndAssert(getList().subList(0, 2));\n",
        "326": "  }\n",
        "327": "\n",
        "328": "  /*\n",
        "329": "   * TODO: perform all List tests on subList(), but beware infinite recursion\n",
        "330": "   */\n",
        "331": "}\n",
        "332": "\n"
    }
}