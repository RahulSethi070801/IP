{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.base;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "\n",
        "23": "import java.io.Serializable;\n",
        "24": "import java.util.ArrayList;\n",
        "25": "import java.util.Arrays;\n",
        "26": "import java.util.Collection;\n",
        "27": "import java.util.List;\n",
        "28": "\n",
        "29": "import javax.annotation.CheckReturnValue;\n",
        "30": "import javax.annotation.Nullable;\n",
        "31": "\n",
        "32": "/**\n",
        "33": " * Static utility methods pertaining to {@code Predicate} instances.\n",
        "34": " *\n",
        "35": " * <p>All methods returns serializable predicates as long as they're given\n",
        "36": " * serializable parameters.\n",
        "37": " *\n",
        "38": " * <p>See the Guava User Guide article on <a href=\n",
        "39": " * \"https://github.com/google/guava/wiki/FunctionalExplained\">the\n",
        "40": " * use of {@code Predicate}</a>.\n",
        "41": " *\n",
        "42": " * @author Kevin Bourrillion\n",
        "43": " * @since 2.0\n",
        "44": " */\n",
        "45": "@CheckReturnValue\n",
        "46": "@GwtCompatible(emulated = true)\n",
        "47": "public final class Predicates {\n",
        "48": "  private Predicates() {}\n",
        "49": "\n",
        "50": "  // TODO(kevinb): considering having these implement a VisitablePredicate\n",
        "51": "  // interface which specifies an accept(PredicateVisitor) method.\n",
        "52": "\n",
        "53": "  /**\n",
        "54": "   * Returns a predicate that always evaluates to {@code true}.\n",
        "55": "   */\n",
        "56": "  @GwtCompatible(serializable = true)\n",
        "57": "  public static <T> Predicate<T> alwaysTrue() {\n",
        "58": "    return ObjectPredicate.ALWAYS_TRUE.withNarrowedType();\n",
        "59": "  }\n",
        "60": "\n",
        "61": "  /**\n",
        "62": "   * Returns a predicate that always evaluates to {@code false}.\n",
        "63": "   */\n",
        "64": "  @GwtCompatible(serializable = true)\n",
        "65": "  public static <T> Predicate<T> alwaysFalse() {\n",
        "66": "    return ObjectPredicate.ALWAYS_FALSE.withNarrowedType();\n",
        "67": "  }\n",
        "68": "\n",
        "69": "  /**\n",
        "70": "   * Returns a predicate that evaluates to {@code true} if the object reference\n",
        "71": "   * being tested is null.\n",
        "72": "   */\n",
        "73": "  @GwtCompatible(serializable = true)\n",
        "74": "  public static <T> Predicate<T> isNull() {\n",
        "75": "    return ObjectPredicate.IS_NULL.withNarrowedType();\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  /**\n",
        "79": "   * Returns a predicate that evaluates to {@code true} if the object reference\n",
        "80": "   * being tested is not null.\n",
        "81": "   */\n",
        "82": "  @GwtCompatible(serializable = true)\n",
        "83": "  public static <T> Predicate<T> notNull() {\n",
        "84": "    return ObjectPredicate.NOT_NULL.withNarrowedType();\n",
        "85": "  }\n",
        "86": "\n",
        "87": "  /**\n",
        "88": "   * Returns a predicate that evaluates to {@code true} if the given predicate\n",
        "89": "   * evaluates to {@code false}.\n",
        "90": "   */\n",
        "91": "  public static <T> Predicate<T> not(Predicate<T> predicate) {\n",
        "92": "    return new NotPredicate<T>(predicate);\n",
        "93": "  }\n",
        "94": "\n",
        "95": "  /**\n",
        "96": "   * Returns a predicate that evaluates to {@code true} if each of its\n",
        "97": "   * components evaluates to {@code true}. The components are evaluated in\n",
        "98": "   * order, and evaluation will be \"short-circuited\" as soon as a false\n",
        "99": "   * predicate is found. It defensively copies the iterable passed in, so future\n",
        "100": "   * changes to it won't alter the behavior of this predicate. If {@code\n",
        "101": "   * components} is empty, the returned predicate will always evaluate to {@code\n",
        "102": "   * true}.\n",
        "103": "   */\n",
        "104": "  public static <T> Predicate<T> and(Iterable<? extends Predicate<? super T>> components) {\n",
        "105": "    return new AndPredicate<T>(defensiveCopy(components));\n",
        "106": "  }\n",
        "107": "\n",
        "108": "  /**\n",
        "109": "   * Returns a predicate that evaluates to {@code true} if each of its\n",
        "110": "   * components evaluates to {@code true}. The components are evaluated in\n",
        "111": "   * order, and evaluation will be \"short-circuited\" as soon as a false\n",
        "112": "   * predicate is found. It defensively copies the array passed in, so future\n",
        "113": "   * changes to it won't alter the behavior of this predicate. If {@code\n",
        "114": "   * components} is empty, the returned predicate will always evaluate to {@code\n",
        "115": "   * true}.\n",
        "116": "   */\n",
        "117": "  public static <T> Predicate<T> and(Predicate<? super T>... components) {\n",
        "118": "    return new AndPredicate<T>(defensiveCopy(components));\n",
        "119": "  }\n",
        "120": "\n",
        "121": "  /**\n",
        "122": "   * Returns a predicate that evaluates to {@code true} if both of its\n",
        "123": "   * components evaluate to {@code true}. The components are evaluated in\n",
        "124": "   * order, and evaluation will be \"short-circuited\" as soon as a false\n",
        "125": "   * predicate is found.\n",
        "126": "   */\n",
        "127": "  public static <T> Predicate<T> and(Predicate<? super T> first, Predicate<? super T> second) {\n",
        "128": "    return new AndPredicate<T>(Predicates.<T>asList(checkNotNull(first), checkNotNull(second)));\n",
        "129": "  }\n",
        "130": "\n",
        "131": "  /**\n",
        "132": "   * Returns a predicate that evaluates to {@code true} if any one of its\n",
        "133": "   * components evaluates to {@code true}. The components are evaluated in\n",
        "134": "   * order, and evaluation will be \"short-circuited\" as soon as a\n",
        "135": "   * true predicate is found. It defensively copies the iterable passed in, so\n",
        "136": "   * future changes to it won't alter the behavior of this predicate. If {@code\n",
        "137": "   * components} is empty, the returned predicate will always evaluate to {@code\n",
        "138": "   * false}.\n",
        "139": "   */\n",
        "140": "  public static <T> Predicate<T> or(Iterable<? extends Predicate<? super T>> components) {\n",
        "141": "    return new OrPredicate<T>(defensiveCopy(components));\n",
        "142": "  }\n",
        "143": "\n",
        "144": "  /**\n",
        "145": "   * Returns a predicate that evaluates to {@code true} if any one of its\n",
        "146": "   * components evaluates to {@code true}. The components are evaluated in\n",
        "147": "   * order, and evaluation will be \"short-circuited\" as soon as a\n",
        "148": "   * true predicate is found. It defensively copies the array passed in, so\n",
        "149": "   * future changes to it won't alter the behavior of this predicate. If {@code\n",
        "150": "   * components} is empty, the returned predicate will always evaluate to {@code\n",
        "151": "   * false}.\n",
        "152": "   */\n",
        "153": "  public static <T> Predicate<T> or(Predicate<? super T>... components) {\n",
        "154": "    return new OrPredicate<T>(defensiveCopy(components));\n",
        "155": "  }\n",
        "156": "\n",
        "157": "  /**\n",
        "158": "   * Returns a predicate that evaluates to {@code true} if either of its\n",
        "159": "   * components evaluates to {@code true}. The components are evaluated in\n",
        "160": "   * order, and evaluation will be \"short-circuited\" as soon as a\n",
        "161": "   * true predicate is found.\n",
        "162": "   */\n",
        "163": "  public static <T> Predicate<T> or(Predicate<? super T> first, Predicate<? super T> second) {\n",
        "164": "    return new OrPredicate<T>(Predicates.<T>asList(checkNotNull(first), checkNotNull(second)));\n",
        "165": "  }\n",
        "166": "\n",
        "167": "  /**\n",
        "168": "   * Returns a predicate that evaluates to {@code true} if the object being\n",
        "169": "   * tested {@code equals()} the given target or both are null.\n",
        "170": "   */\n",
        "171": "  public static <T> Predicate<T> equalTo(@Nullable T target) {\n",
        "172": "    return (target == null) ? Predicates.<T>isNull() : new IsEqualToPredicate<T>(target);\n",
        "173": "  }\n",
        "174": "\n",
        "175": "  /**\n",
        "176": "   * Returns a predicate that evaluates to {@code true} if the object reference\n",
        "177": "   * being tested is a member of the given collection. It does not defensively\n",
        "178": "   * copy the collection passed in, so future changes to it will alter the\n",
        "179": "   * behavior of the predicate.\n",
        "180": "   *\n",
        "181": "   * <p>This method can technically accept any {@code Collection<?>}, but using\n",
        "182": "   * a typed collection helps prevent bugs. This approach doesn't block any\n",
        "183": "   * potential users since it is always possible to use {@code\n",
        "184": "   * Predicates.<Object>in()}.\n",
        "185": "   *\n",
        "186": "   * @param target the collection that may contain the function input\n",
        "187": "   */\n",
        "188": "  public static <T> Predicate<T> in(Collection<? extends T> target) {\n",
        "189": "    return new InPredicate<T>(target);\n",
        "190": "  }\n",
        "191": "\n",
        "192": "  /**\n",
        "193": "   * Returns the composition of a function and a predicate. For every {@code x},\n",
        "194": "   * the generated predicate returns {@code predicate(function(x))}.\n",
        "195": "   *\n",
        "196": "   * @return the composition of the provided function and predicate\n",
        "197": "   */\n",
        "198": "  public static <A, B> Predicate<A> compose(\n",
        "199": "      Predicate<B> predicate, Function<A, ? extends B> function) {\n",
        "200": "    return new CompositionPredicate<A, B>(predicate, function);\n",
        "201": "  }\n",
        "202": "\n",
        "203": "  // End public API, begin private implementation classes.\n",
        "204": "\n",
        "205": "  // Package private for GWT serialization.\n",
        "206": "  enum ObjectPredicate implements Predicate<Object> {\n",
        "207": "    /** @see Predicates#alwaysTrue() */\n",
        "208": "    ALWAYS_TRUE {\n",
        "209": "      @Override\n",
        "210": "      public boolean apply(@Nullable Object o) {\n",
        "211": "        return true;\n",
        "212": "      }\n",
        "213": "\n",
        "214": "      @Override\n",
        "215": "      public String toString() {\n",
        "216": "        return \"Predicates.alwaysTrue()\";\n",
        "217": "      }\n",
        "218": "    },\n",
        "219": "    /** @see Predicates#alwaysFalse() */\n",
        "220": "    ALWAYS_FALSE {\n",
        "221": "      @Override\n",
        "222": "      public boolean apply(@Nullable Object o) {\n",
        "223": "        return false;\n",
        "224": "      }\n",
        "225": "\n",
        "226": "      @Override\n",
        "227": "      public String toString() {\n",
        "228": "        return \"Predicates.alwaysFalse()\";\n",
        "229": "      }\n",
        "230": "    },\n",
        "231": "    /** @see Predicates#isNull() */\n",
        "232": "    IS_NULL {\n",
        "233": "      @Override\n",
        "234": "      public boolean apply(@Nullable Object o) {\n",
        "235": "        return o == null;\n",
        "236": "      }\n",
        "237": "\n",
        "238": "      @Override\n",
        "239": "      public String toString() {\n",
        "240": "        return \"Predicates.isNull()\";\n",
        "241": "      }\n",
        "242": "    },\n",
        "243": "    /** @see Predicates#notNull() */\n",
        "244": "    NOT_NULL {\n",
        "245": "      @Override\n",
        "246": "      public boolean apply(@Nullable Object o) {\n",
        "247": "        return o != null;\n",
        "248": "      }\n",
        "249": "\n",
        "250": "      @Override\n",
        "251": "      public String toString() {\n",
        "252": "        return \"Predicates.notNull()\";\n",
        "253": "      }\n",
        "254": "    };\n",
        "255": "\n",
        "256": "    @SuppressWarnings(\"unchecked\") // safe contravariant cast\n",
        "257": "    <T> Predicate<T> withNarrowedType() {\n",
        "258": "      return (Predicate<T>) this;\n",
        "259": "    }\n",
        "260": "  }\n",
        "261": "\n",
        "262": "  /** @see Predicates#not(Predicate) */\n",
        "263": "  private static class NotPredicate<T> implements Predicate<T>, Serializable {\n",
        "264": "    final Predicate<T> predicate;\n",
        "265": "\n",
        "266": "    NotPredicate(Predicate<T> predicate) {\n",
        "267": "      this.predicate = checkNotNull(predicate);\n",
        "268": "    }\n",
        "269": "\n",
        "270": "    @Override\n",
        "271": "    public boolean apply(@Nullable T t) {\n",
        "272": "      return !predicate.apply(t);\n",
        "273": "    }\n",
        "274": "\n",
        "275": "    @Override\n",
        "276": "    public int hashCode() {\n",
        "277": "      return ~predicate.hashCode();\n",
        "278": "    }\n",
        "279": "\n",
        "280": "    @Override\n",
        "281": "    public boolean equals(@Nullable Object obj) {\n",
        "282": "      if (obj instanceof NotPredicate) {\n",
        "283": "        NotPredicate<?> that = (NotPredicate<?>) obj;\n",
        "284": "        return predicate.equals(that.predicate);\n",
        "285": "      }\n",
        "286": "      return false;\n",
        "287": "    }\n",
        "288": "\n",
        "289": "    @Override\n",
        "290": "    public String toString() {\n",
        "291": "      return \"Predicates.not(\" + predicate + \")\";\n",
        "292": "    }\n",
        "293": "\n",
        "294": "    private static final long serialVersionUID = 0;\n",
        "295": "  }\n",
        "296": "\n",
        "297": "  private static final Joiner COMMA_JOINER = Joiner.on(',');\n",
        "298": "\n",
        "299": "  /** @see Predicates#and(Iterable) */\n",
        "300": "  private static class AndPredicate<T> implements Predicate<T>, Serializable {\n",
        "301": "    private final List<? extends Predicate<? super T>> components;\n",
        "302": "\n",
        "303": "    private AndPredicate(List<? extends Predicate<? super T>> components) {\n",
        "304": "      this.components = components;\n",
        "305": "    }\n",
        "306": "\n",
        "307": "    @Override\n",
        "308": "    public boolean apply(@Nullable T t) {\n",
        "309": "      // Avoid using the Iterator to avoid generating garbage (issue 820).\n",
        "310": "      for (int i = 0; i < components.size(); i++) {\n",
        "311": "        if (!components.get(i).apply(t)) {\n",
        "312": "          return false;\n",
        "313": "        }\n",
        "314": "      }\n",
        "315": "      return true;\n",
        "316": "    }\n",
        "317": "\n",
        "318": "    @Override\n",
        "319": "    public int hashCode() {\n",
        "320": "      // add a random number to avoid collisions with OrPredicate\n",
        "321": "      return components.hashCode() + 0x12472c2c;\n",
        "322": "    }\n",
        "323": "\n",
        "324": "    @Override\n",
        "325": "    public boolean equals(@Nullable Object obj) {\n",
        "326": "      if (obj instanceof AndPredicate) {\n",
        "327": "        AndPredicate<?> that = (AndPredicate<?>) obj;\n",
        "328": "        return components.equals(that.components);\n",
        "329": "      }\n",
        "330": "      return false;\n",
        "331": "    }\n",
        "332": "\n",
        "333": "    @Override\n",
        "334": "    public String toString() {\n",
        "335": "      return \"Predicates.and(\" + COMMA_JOINER.join(components) + \")\";\n",
        "336": "    }\n",
        "337": "\n",
        "338": "    private static final long serialVersionUID = 0;\n",
        "339": "  }\n",
        "340": "\n",
        "341": "  /** @see Predicates#or(Iterable) */\n",
        "342": "  private static class OrPredicate<T> implements Predicate<T>, Serializable {\n",
        "343": "    private final List<? extends Predicate<? super T>> components;\n",
        "344": "\n",
        "345": "    private OrPredicate(List<? extends Predicate<? super T>> components) {\n",
        "346": "      this.components = components;\n",
        "347": "    }\n",
        "348": "\n",
        "349": "    @Override\n",
        "350": "    public boolean apply(@Nullable T t) {\n",
        "351": "      // Avoid using the Iterator to avoid generating garbage (issue 820).\n",
        "352": "      for (int i = 0; i < components.size(); i++) {\n",
        "353": "        if (components.get(i).apply(t)) {\n",
        "354": "          return true;\n",
        "355": "        }\n",
        "356": "      }\n",
        "357": "      return false;\n",
        "358": "    }\n",
        "359": "\n",
        "360": "    @Override\n",
        "361": "    public int hashCode() {\n",
        "362": "      // add a random number to avoid collisions with AndPredicate\n",
        "363": "      return components.hashCode() + 0x053c91cf;\n",
        "364": "    }\n",
        "365": "\n",
        "366": "    @Override\n",
        "367": "    public boolean equals(@Nullable Object obj) {\n",
        "368": "      if (obj instanceof OrPredicate) {\n",
        "369": "        OrPredicate<?> that = (OrPredicate<?>) obj;\n",
        "370": "        return components.equals(that.components);\n",
        "371": "      }\n",
        "372": "      return false;\n",
        "373": "    }\n",
        "374": "\n",
        "375": "    @Override\n",
        "376": "    public String toString() {\n",
        "377": "      return \"Predicates.or(\" + COMMA_JOINER.join(components) + \")\";\n",
        "378": "    }\n",
        "379": "\n",
        "380": "    private static final long serialVersionUID = 0;\n",
        "381": "  }\n",
        "382": "\n",
        "383": "  /** @see Predicates#equalTo(Object) */\n",
        "384": "  private static class IsEqualToPredicate<T> implements Predicate<T>, Serializable {\n",
        "385": "    private final T target;\n",
        "386": "\n",
        "387": "    private IsEqualToPredicate(T target) {\n",
        "388": "      this.target = target;\n",
        "389": "    }\n",
        "390": "\n",
        "391": "    @Override\n",
        "392": "    public boolean apply(T t) {\n",
        "393": "      return target.equals(t);\n",
        "394": "    }\n",
        "395": "\n",
        "396": "    @Override\n",
        "397": "    public int hashCode() {\n",
        "398": "      return target.hashCode();\n",
        "399": "    }\n",
        "400": "\n",
        "401": "    @Override\n",
        "402": "    public boolean equals(@Nullable Object obj) {\n",
        "403": "      if (obj instanceof IsEqualToPredicate) {\n",
        "404": "        IsEqualToPredicate<?> that = (IsEqualToPredicate<?>) obj;\n",
        "405": "        return target.equals(that.target);\n",
        "406": "      }\n",
        "407": "      return false;\n",
        "408": "    }\n",
        "409": "\n",
        "410": "    @Override\n",
        "411": "    public String toString() {\n",
        "412": "      return \"Predicates.equalTo(\" + target + \")\";\n",
        "413": "    }\n",
        "414": "\n",
        "415": "    private static final long serialVersionUID = 0;\n",
        "416": "  }\n",
        "417": "\n",
        "418": "  /** @see Predicates#in(Collection) */\n",
        "419": "  private static class InPredicate<T> implements Predicate<T>, Serializable {\n",
        "420": "    private final Collection<?> target;\n",
        "421": "\n",
        "422": "    private InPredicate(Collection<?> target) {\n",
        "423": "      this.target = checkNotNull(target);\n",
        "424": "    }\n",
        "425": "\n",
        "426": "    @Override\n",
        "427": "    public boolean apply(@Nullable T t) {\n",
        "428": "      try {\n",
        "429": "        return target.contains(t);\n",
        "430": "      } catch (NullPointerException e) {\n",
        "431": "        return false;\n",
        "432": "      } catch (ClassCastException e) {\n",
        "433": "        return false;\n",
        "434": "      }\n",
        "435": "    }\n",
        "436": "\n",
        "437": "    @Override\n",
        "438": "    public boolean equals(@Nullable Object obj) {\n",
        "439": "      if (obj instanceof InPredicate) {\n",
        "440": "        InPredicate<?> that = (InPredicate<?>) obj;\n",
        "441": "        return target.equals(that.target);\n",
        "442": "      }\n",
        "443": "      return false;\n",
        "444": "    }\n",
        "445": "\n",
        "446": "    @Override\n",
        "447": "    public int hashCode() {\n",
        "448": "      return target.hashCode();\n",
        "449": "    }\n",
        "450": "\n",
        "451": "    @Override\n",
        "452": "    public String toString() {\n",
        "453": "      return \"Predicates.in(\" + target + \")\";\n",
        "454": "    }\n",
        "455": "\n",
        "456": "    private static final long serialVersionUID = 0;\n",
        "457": "  }\n",
        "458": "\n",
        "459": "  /** @see Predicates#compose(Predicate, Function) */\n",
        "460": "  private static class CompositionPredicate<A, B> implements Predicate<A>, Serializable {\n",
        "461": "    final Predicate<B> p;\n",
        "462": "    final Function<A, ? extends B> f;\n",
        "463": "\n",
        "464": "    private CompositionPredicate(Predicate<B> p, Function<A, ? extends B> f) {\n",
        "465": "      this.p = checkNotNull(p);\n",
        "466": "      this.f = checkNotNull(f);\n",
        "467": "    }\n",
        "468": "\n",
        "469": "    @Override\n",
        "470": "    public boolean apply(@Nullable A a) {\n",
        "471": "      return p.apply(f.apply(a));\n",
        "472": "    }\n",
        "473": "\n",
        "474": "    @Override\n",
        "475": "    public boolean equals(@Nullable Object obj) {\n",
        "476": "      if (obj instanceof CompositionPredicate) {\n",
        "477": "        CompositionPredicate<?, ?> that = (CompositionPredicate<?, ?>) obj;\n",
        "478": "        return f.equals(that.f) && p.equals(that.p);\n",
        "479": "      }\n",
        "480": "      return false;\n",
        "481": "    }\n",
        "482": "\n",
        "483": "    @Override\n",
        "484": "    public int hashCode() {\n",
        "485": "      return f.hashCode() ^ p.hashCode();\n",
        "486": "    }\n",
        "487": "\n",
        "488": "    @Override\n",
        "489": "    public String toString() {\n",
        "490": "      // TODO(cpovirk): maybe make this look like the method call does (\"Predicates.compose(...)\")\n",
        "491": "      return p + \"(\" + f + \")\";\n",
        "492": "    }\n",
        "493": "\n",
        "494": "    private static final long serialVersionUID = 0;\n",
        "495": "  }\n",
        "496": "\n",
        "497": "  private static <T> List<Predicate<? super T>> asList(\n",
        "498": "      Predicate<? super T> first, Predicate<? super T> second) {\n",
        "499": "    // TODO(kevinb): understand why we still get a warning despite @SafeVarargs!\n",
        "500": "    return Arrays.<Predicate<? super T>>asList(first, second);\n",
        "501": "  }\n",
        "502": "\n",
        "503": "  private static <T> List<T> defensiveCopy(T... array) {\n",
        "504": "    return defensiveCopy(Arrays.asList(array));\n",
        "505": "  }\n",
        "506": "\n",
        "507": "  static <T> List<T> defensiveCopy(Iterable<T> iterable) {\n",
        "508": "    ArrayList<T> list = new ArrayList<T>();\n",
        "509": "    for (T element : iterable) {\n",
        "510": "      list.add(checkNotNull(element));\n",
        "511": "    }\n",
        "512": "    return list;\n",
        "513": "  }\n",
        "514": "}\n",
        "515": "\n"
    }
}