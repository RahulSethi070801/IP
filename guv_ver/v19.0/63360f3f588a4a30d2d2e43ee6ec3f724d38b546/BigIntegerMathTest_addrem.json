{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2011 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.math;\n",
        "18": "\n",
        "19": "import static com.google.common.math.MathTesting.ALL_BIGINTEGER_CANDIDATES;\n",
        "20": "import static com.google.common.math.MathTesting.ALL_ROUNDING_MODES;\n",
        "21": "import static com.google.common.math.MathTesting.POSITIVE_BIGINTEGER_CANDIDATES;\n",
        "22": "import static java.math.BigInteger.ONE;\n",
        "23": "import static java.math.BigInteger.ZERO;\n",
        "24": "import static java.math.RoundingMode.CEILING;\n",
        "25": "import static java.math.RoundingMode.DOWN;\n",
        "26": "import static java.math.RoundingMode.FLOOR;\n",
        "27": "import static java.math.RoundingMode.HALF_DOWN;\n",
        "28": "import static java.math.RoundingMode.HALF_EVEN;\n",
        "29": "import static java.math.RoundingMode.HALF_UP;\n",
        "30": "import static java.math.RoundingMode.UNNECESSARY;\n",
        "31": "import static java.math.RoundingMode.UP;\n",
        "32": "import static java.util.Arrays.asList;\n",
        "33": "\n",
        "34": "import com.google.common.annotations.GwtCompatible;\n",
        "35": "\n",
        "36": "import junit.framework.TestCase;\n",
        "37": "\n",
        "38": "import java.math.BigInteger;\n",
        "39": "import java.math.RoundingMode;\n",
        "40": "\n",
        "41": "/**\n",
        "42": " * Tests for BigIntegerMath.\n",
        "43": " *\n",
        "44": " * @author Louis Wasserman\n",
        "45": " */\n",
        "46": "@GwtCompatible(emulated = true)\n",
        "47": "public class BigIntegerMathTest extends TestCase {\n",
        "48": "\n",
        "49": "  public void testIsPowerOfTwo() {\n",
        "50": "    for (BigInteger x : ALL_BIGINTEGER_CANDIDATES) {\n",
        "51": "      // Checks for a single bit set.\n",
        "52": "      boolean expected = x.signum() > 0 & x.and(x.subtract(ONE)).equals(ZERO);\n",
        "53": "      assertEquals(expected, BigIntegerMath.isPowerOfTwo(x));\n",
        "54": "    }\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  public void testLog2ZeroAlwaysThrows() {\n",
        "58": "    for (RoundingMode mode : ALL_ROUNDING_MODES) {\n",
        "59": "      try {\n",
        "60": "        BigIntegerMath.log2(ZERO, mode);\n",
        "61": "        fail(\"Expected IllegalArgumentException\");\n",
        "62": "      } catch (IllegalArgumentException expected) {}\n",
        "63": "    }\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  public void testLog2NegativeAlwaysThrows() {\n",
        "67": "    for (RoundingMode mode : ALL_ROUNDING_MODES) {\n",
        "68": "      try {\n",
        "69": "        BigIntegerMath.log2(BigInteger.valueOf(-1), mode);\n",
        "70": "        fail(\"Expected IllegalArgumentException\");\n",
        "71": "      } catch (IllegalArgumentException expected) {}\n",
        "72": "    }\n",
        "73": "  }\n",
        "74": "\n",
        "75": "  public void testLog2Floor() {\n",
        "76": "    for (BigInteger x : POSITIVE_BIGINTEGER_CANDIDATES) {\n",
        "77": "      for (RoundingMode mode : asList(FLOOR, DOWN)) {\n",
        "78": "        int result = BigIntegerMath.log2(x, mode);\n",
        "79": "        assertTrue(ZERO.setBit(result).compareTo(x) <= 0);\n",
        "80": "        assertTrue(ZERO.setBit(result + 1).compareTo(x) > 0);\n",
        "81": "      }\n",
        "82": "    }\n",
        "83": "  }\n",
        "84": "\n",
        "85": "  public void testLog2Ceiling() {\n",
        "86": "    for (BigInteger x : POSITIVE_BIGINTEGER_CANDIDATES) {\n",
        "87": "      for (RoundingMode mode : asList(CEILING, UP)) {\n",
        "88": "        int result = BigIntegerMath.log2(x, mode);\n",
        "89": "        assertTrue(ZERO.setBit(result).compareTo(x) >= 0);\n",
        "90": "        assertTrue(result == 0 || ZERO.setBit(result - 1).compareTo(x) < 0);\n",
        "91": "      }\n",
        "92": "    }\n",
        "93": "  }\n",
        "94": "\n",
        "95": "  // Relies on the correctness of isPowerOfTwo(BigInteger).\n",
        "96": "  public void testLog2Exact() {\n",
        "97": "    for (BigInteger x : POSITIVE_BIGINTEGER_CANDIDATES) {\n",
        "98": "      // We only expect an exception if x was not a power of 2.\n",
        "99": "      boolean isPowerOf2 = BigIntegerMath.isPowerOfTwo(x);\n",
        "100": "      try {\n",
        "101": "        assertEquals(x, ZERO.setBit(BigIntegerMath.log2(x, UNNECESSARY)));\n",
        "102": "        assertTrue(isPowerOf2);\n",
        "103": "      } catch (ArithmeticException e) {\n",
        "104": "        assertFalse(isPowerOf2);\n",
        "105": "      }\n",
        "106": "    }\n",
        "107": "  }\n",
        "108": "\n",
        "109": "  public void testLog2HalfUp() {\n",
        "110": "    for (BigInteger x : POSITIVE_BIGINTEGER_CANDIDATES) {\n",
        "111": "      int result = BigIntegerMath.log2(x, HALF_UP);\n",
        "112": "      BigInteger x2 = x.pow(2);\n",
        "113": "      // x^2 < 2^(2 * result + 1), or else we would have rounded up\n",
        "114": "      assertTrue(ZERO.setBit(2 * result + 1).compareTo(x2) > 0);\n",
        "115": "      // x^2 >= 2^(2 * result - 1), or else we would have rounded down\n",
        "116": "      assertTrue(result == 0 || ZERO.setBit(2 * result - 1).compareTo(x2) <= 0);\n",
        "117": "    }\n",
        "118": "  }\n",
        "119": "\n",
        "120": "  public void testLog2HalfDown() {\n",
        "121": "    for (BigInteger x : POSITIVE_BIGINTEGER_CANDIDATES) {\n",
        "122": "      int result = BigIntegerMath.log2(x, HALF_DOWN);\n",
        "123": "      BigInteger x2 = x.pow(2);\n",
        "124": "      // x^2 <= 2^(2 * result + 1), or else we would have rounded up\n",
        "125": "      assertTrue(ZERO.setBit(2 * result + 1).compareTo(x2) >= 0);\n",
        "126": "      // x^2 > 2^(2 * result - 1), or else we would have rounded down\n",
        "127": "      assertTrue(result == 0 || ZERO.setBit(2 * result - 1).compareTo(x2) < 0);\n",
        "128": "    }\n",
        "129": "  }\n",
        "130": "\n",
        "131": "  // Relies on the correctness of log2(BigInteger, {HALF_UP,HALF_DOWN}).\n",
        "132": "  public void testLog2HalfEven() {\n",
        "133": "    for (BigInteger x : POSITIVE_BIGINTEGER_CANDIDATES) {\n",
        "134": "      int halfEven = BigIntegerMath.log2(x, HALF_EVEN);\n",
        "135": "      // Now figure out what rounding mode we should behave like (it depends if FLOOR was\n",
        "136": "      // odd/even).\n",
        "137": "      boolean floorWasEven = (BigIntegerMath.log2(x, FLOOR) & 1) == 0;\n",
        "138": "      assertEquals(BigIntegerMath.log2(x, floorWasEven ? HALF_DOWN : HALF_UP), halfEven);\n",
        "139": "    }\n",
        "140": "  }\n",
        "141": "\n",
        "142": "  // Relies on the correctness of log10(BigInteger, FLOOR).\n",
        "143": "\n",
        "144": "  // Relies on the correctness of log10(BigInteger, {HALF_UP,HALF_DOWN}).\n",
        "145": "\n",
        "146": "  // Relies on the correctness of sqrt(BigInteger, FLOOR).\n",
        "147": "\n",
        "148": "  // Relies on the correctness of sqrt(BigInteger, {HALF_UP,HALF_DOWN}).\n",
        "149": "\n",
        "150": "  public void testFactorial() {\n",
        "151": "    BigInteger expected = BigInteger.ONE;\n",
        "152": "    for (int i = 1; i <= 200; i++) {\n",
        "153": "      expected = expected.multiply(BigInteger.valueOf(i));\n",
        "154": "      assertEquals(expected, BigIntegerMath.factorial(i));\n",
        "155": "    }\n",
        "156": "  }\n",
        "157": "\n",
        "158": "  public void testFactorial0() {\n",
        "159": "    assertEquals(BigInteger.ONE, BigIntegerMath.factorial(0));\n",
        "160": "  }\n",
        "161": "\n",
        "162": "  public void testFactorialNegative() {\n",
        "163": "    try {\n",
        "164": "      BigIntegerMath.factorial(-1);\n",
        "165": "      fail(\"Expected IllegalArgumentException\");\n",
        "166": "    } catch (IllegalArgumentException expected) {}\n",
        "167": "  }\n",
        "168": "\n",
        "169": "  public void testBinomialSmall() {\n",
        "170": "    runBinomialTest(0, 30);\n",
        "171": "  }\n",
        "172": "\n",
        "173": "  // Depends on the correctness of BigIntegerMath.factorial\n",
        "174": "  private static void runBinomialTest(int firstN, int lastN) {\n",
        "175": "    for (int n = firstN; n <= lastN; n++) {\n",
        "176": "      for (int k = 0; k <= n; k++) {\n",
        "177": "        BigInteger expected = BigIntegerMath\n",
        "178": "            .factorial(n)\n",
        "179": "            .divide(BigIntegerMath.factorial(k))\n",
        "180": "            .divide(BigIntegerMath.factorial(n - k));\n",
        "181": "        assertEquals(expected, BigIntegerMath.binomial(n, k));\n",
        "182": "      }\n",
        "183": "    }\n",
        "184": "  }\n",
        "185": "\n",
        "186": "  public void testBinomialOutside() {\n",
        "187": "    for (int n = 0; n <= 50; n++) {\n",
        "188": "      try {\n",
        "189": "        BigIntegerMath.binomial(n, -1);\n",
        "190": "        fail(\"Expected IllegalArgumentException\");\n",
        "191": "      } catch (IllegalArgumentException expected) {}\n",
        "192": "      try {\n",
        "193": "        BigIntegerMath.binomial(n, n + 1);\n",
        "194": "        fail(\"Expected IllegalArgumentException\");\n",
        "195": "      } catch (IllegalArgumentException expected) {}\n",
        "196": "    }\n",
        "197": "  }\n",
        "198": "}\n",
        "199": "\n"
    }
}