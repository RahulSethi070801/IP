{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.collect.Table.Cell;\n",
        "21": "import com.google.common.testing.EqualsTester;\n",
        "22": "\n",
        "23": "import junit.framework.TestCase;\n",
        "24": "\n",
        "25": "/**\n",
        "26": " * Tests for {@link Tables}.\n",
        "27": " *\n",
        "28": " * @author Jared Levy\n",
        "29": " */\n",
        "30": "@GwtCompatible(emulated = true)\n",
        "31": "public class TablesTest extends TestCase {\n",
        "32": "  \n",
        "33": "  public void testImmutableEntryToString() {\n",
        "34": "    Cell<String, Integer, Character> entry\n",
        "35": "        = Tables.immutableCell(\"foo\", 1, 'a');\n",
        "36": "    assertEquals(\"(foo,1)=a\", entry.toString());\n",
        "37": "    \n",
        "38": "    Cell<String, Integer, Character> nullEntry\n",
        "39": "        = Tables.immutableCell(null, null, null);\n",
        "40": "    assertEquals(\"(null,null)=null\", nullEntry.toString());\n",
        "41": "  }\n",
        "42": "  \n",
        "43": "  public void testEntryEquals() {\n",
        "44": "    Cell<String, Integer, Character> entry\n",
        "45": "        = Tables.immutableCell(\"foo\", 1, 'a');\n",
        "46": "    \n",
        "47": "    new EqualsTester()\n",
        "48": "        .addEqualityGroup(entry, Tables.immutableCell(\"foo\", 1, 'a'))\n",
        "49": "        .addEqualityGroup(Tables.immutableCell(\"bar\", 1, 'a'))\n",
        "50": "        .addEqualityGroup(Tables.immutableCell(\"foo\", 2, 'a'))\n",
        "51": "        .addEqualityGroup(Tables.immutableCell(\"foo\", 1, 'b'))\n",
        "52": "        .addEqualityGroup(Tables.immutableCell(null, null, null))\n",
        "53": "        .testEquals();\n",
        "54": "  }\n",
        "55": "  \n",
        "56": "  public void testEntryEqualsNull() {\n",
        "57": "    Cell<String, Integer, Character> entry\n",
        "58": "        = Tables.immutableCell(null, null, null);\n",
        "59": "    \n",
        "60": "    new EqualsTester()\n",
        "61": "        .addEqualityGroup(entry, Tables.immutableCell(null, null, null))\n",
        "62": "        .addEqualityGroup(Tables.immutableCell(\"bar\", null, null))\n",
        "63": "        .addEqualityGroup(Tables.immutableCell(null, 2, null))\n",
        "64": "        .addEqualityGroup(Tables.immutableCell(null, null, 'b'))\n",
        "65": "        .addEqualityGroup(Tables.immutableCell(\"foo\", 1, 'a'))\n",
        "66": "        .testEquals();\n",
        "67": "  }\n",
        "68": "}\n",
        "69": "\n"
    }
}