{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.collect.ImmutableMultimap.Builder;\n",
        "21": "import com.google.common.collect.testing.SampleElements;\n",
        "22": "import com.google.common.collect.testing.SampleElements.Unhashables;\n",
        "23": "import com.google.common.collect.testing.UnhashableObject;\n",
        "24": "import com.google.common.testing.EqualsTester;\n",
        "25": "\n",
        "26": "import junit.framework.TestCase;\n",
        "27": "\n",
        "28": "import java.util.Arrays;\n",
        "29": "import java.util.Map.Entry;\n",
        "30": "\n",
        "31": "/**\n",
        "32": " * Tests for {@link ImmutableMultimap}.\n",
        "33": " *\n",
        "34": " * @author Jared Levy\n",
        "35": " */\n",
        "36": "@GwtCompatible(emulated = true)\n",
        "37": "public class ImmutableMultimapTest extends TestCase {\n",
        "38": "\n",
        "39": "  public void testBuilder_withImmutableEntry() {\n",
        "40": "    ImmutableMultimap<String, Integer> multimap = new Builder<String, Integer>()\n",
        "41": "        .put(Maps.immutableEntry(\"one\", 1))\n",
        "42": "        .build();\n",
        "43": "    assertEquals(Arrays.asList(1), multimap.get(\"one\"));\n",
        "44": "  }\n",
        "45": "\n",
        "46": "  public void testBuilder_withImmutableEntryAndNullContents() {\n",
        "47": "    Builder<String, Integer> builder = new Builder<String, Integer>();\n",
        "48": "    try {\n",
        "49": "      builder.put(Maps.immutableEntry(\"one\", (Integer) null));\n",
        "50": "      fail();\n",
        "51": "    } catch (NullPointerException expected) {\n",
        "52": "    }\n",
        "53": "    try {\n",
        "54": "      builder.put(Maps.immutableEntry((String) null, 1));\n",
        "55": "      fail();\n",
        "56": "    } catch (NullPointerException expected) {\n",
        "57": "    }\n",
        "58": "  }\n",
        "59": "\n",
        "60": "  private static class StringHolder {\n",
        "61": "    String string;\n",
        "62": "  }\n",
        "63": "\n",
        "64": "  public void testBuilder_withMutableEntry() {\n",
        "65": "    ImmutableMultimap.Builder<String, Integer> builder =\n",
        "66": "        new Builder<String, Integer>();\n",
        "67": "    final StringHolder holder = new StringHolder();\n",
        "68": "    holder.string = \"one\";\n",
        "69": "    Entry<String, Integer> entry = new AbstractMapEntry<String, Integer>() {\n",
        "70": "      @Override public String getKey() {\n",
        "71": "        return holder.string;\n",
        "72": "      }\n",
        "73": "      @Override public Integer getValue() {\n",
        "74": "        return 1;\n",
        "75": "      }\n",
        "76": "    };\n",
        "77": "\n",
        "78": "    builder.put(entry);\n",
        "79": "    holder.string = \"two\";\n",
        "80": "    assertEquals(Arrays.asList(1), builder.build().get(\"one\"));\n",
        "81": "  }\n",
        "82": "\n",
        "83": "  // TODO: test ImmutableMultimap builder and factory methods\n",
        "84": "\n",
        "85": "  public void testCopyOf() {\n",
        "86": "    ImmutableSetMultimap<String, String> setMultimap\n",
        "87": "        = ImmutableSetMultimap.of(\"k1\", \"v1\");\n",
        "88": "    ImmutableMultimap<String, String> setMultimapCopy\n",
        "89": "        = ImmutableMultimap.copyOf(setMultimap);\n",
        "90": "    assertSame(\"copyOf(ImmutableSetMultimap) should not create a new instance\",\n",
        "91": "        setMultimap, setMultimapCopy);\n",
        "92": "\n",
        "93": "    ImmutableListMultimap<String, String> listMultimap\n",
        "94": "        = ImmutableListMultimap.of(\"k1\", \"v1\");\n",
        "95": "    ImmutableMultimap<String, String> listMultimapCopy\n",
        "96": "        = ImmutableMultimap.copyOf(listMultimap);\n",
        "97": "    assertSame(\"copyOf(ImmutableListMultimap) should not create a new instance\",\n",
        "98": "        listMultimap, listMultimapCopy);\n",
        "99": "  }\n",
        "100": "\n",
        "101": "  public void testUnhashableSingletonValue() {\n",
        "102": "    SampleElements<UnhashableObject> unhashables = new Unhashables();\n",
        "103": "    Multimap<Integer, UnhashableObject> multimap = ImmutableMultimap.of(\n",
        "104": "        0, unhashables.e0());\n",
        "105": "    assertEquals(1, multimap.get(0).size());\n",
        "106": "    assertTrue(multimap.get(0).contains(unhashables.e0()));\n",
        "107": "  }\n",
        "108": "\n",
        "109": "  public void testUnhashableMixedValues() {\n",
        "110": "    SampleElements<UnhashableObject> unhashables = new Unhashables();\n",
        "111": "    Multimap<Integer, Object> multimap = ImmutableMultimap.<Integer, Object>of(\n",
        "112": "        0, unhashables.e0(), 2, \"hey you\", 0, unhashables.e1());\n",
        "113": "    assertEquals(2, multimap.get(0).size());\n",
        "114": "    assertTrue(multimap.get(0).contains(unhashables.e0()));\n",
        "115": "    assertTrue(multimap.get(0).contains(unhashables.e1()));\n",
        "116": "    assertTrue(multimap.get(2).contains(\"hey you\"));\n",
        "117": "  }\n",
        "118": "\n",
        "119": "  public void testEquals() {\n",
        "120": "    new EqualsTester()\n",
        "121": "        .addEqualityGroup(ImmutableMultimap.of(), ImmutableMultimap.of())\n",
        "122": "        .addEqualityGroup(ImmutableMultimap.of(1, \"a\"), ImmutableMultimap.of(1, \"a\"))\n",
        "123": "        .addEqualityGroup(\n",
        "124": "            ImmutableMultimap.of(1, \"a\", 2, \"b\"),\n",
        "125": "            ImmutableMultimap.of(2, \"b\", 1, \"a\"))\n",
        "126": "        .testEquals();\n",
        "127": "  }\n",
        "128": "}\n",
        "129": "\n"
    }
}