{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "\n",
        "23": "import junit.framework.TestCase;\n",
        "24": "\n",
        "25": "import java.util.Arrays;\n",
        "26": "import java.util.List;\n",
        "27": "\n",
        "28": "/**\n",
        "29": " * Unit test for {@code ObjectArrays}.\n",
        "30": " *\n",
        "31": " * @author Kevin Bourrillion\n",
        "32": " */\n",
        "33": "@GwtCompatible(emulated = true)\n",
        "34": "public class ObjectArraysTest extends TestCase {\n",
        "35": "\n",
        "36": "  public void testNewArray_fromArray_Empty() {\n",
        "37": "    String[] in = new String[0];\n",
        "38": "    String[] empty = ObjectArrays.newArray(in, 0);\n",
        "39": "    assertThat(empty).isEmpty();\n",
        "40": "  }\n",
        "41": "\n",
        "42": "  public void testNewArray_fromArray_Nonempty() {\n",
        "43": "    String[] array = ObjectArrays.newArray(new String[0], 2);\n",
        "44": "    assertEquals(String[].class, array.getClass());\n",
        "45": "    assertThat(array).hasLength(2);\n",
        "46": "    assertNull(array[0]);\n",
        "47": "  }\n",
        "48": "\n",
        "49": "  public void testNewArray_fromArray_OfArray() {\n",
        "50": "    String[][] array = ObjectArrays.newArray(new String[0][0], 1);\n",
        "51": "    assertEquals(String[][].class, array.getClass());\n",
        "52": "    assertThat(array).hasLength(1);\n",
        "53": "    assertNull(array[0]);\n",
        "54": "  }\n",
        "55": "\n",
        "56": "  public void testToArrayImpl1() {\n",
        "57": "    doTestToArrayImpl1(Lists.<Integer>newArrayList());\n",
        "58": "    doTestToArrayImpl1(Lists.newArrayList(1));\n",
        "59": "    doTestToArrayImpl1(Lists.newArrayList(1, null, 3));\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  private void doTestToArrayImpl1(List<Integer> list) {\n",
        "63": "    Object[] reference = list.toArray();\n",
        "64": "    Object[] target = ObjectArrays.toArrayImpl(list);\n",
        "65": "    assertEquals(reference.getClass(), target.getClass());\n",
        "66": "    assertTrue(Arrays.equals(reference, target));\n",
        "67": "  }\n",
        "68": "\n",
        "69": "  public void testToArrayImpl2() {\n",
        "70": "    doTestToArrayImpl2(Lists.<Integer>newArrayList(), new Integer[0], false);\n",
        "71": "    doTestToArrayImpl2(Lists.<Integer>newArrayList(), new Integer[1], true);\n",
        "72": "\n",
        "73": "    doTestToArrayImpl2(Lists.newArrayList(1), new Integer[0], false);\n",
        "74": "    doTestToArrayImpl2(Lists.newArrayList(1), new Integer[1], true);\n",
        "75": "    doTestToArrayImpl2(Lists.newArrayList(1), new Integer[] { 2, 3 }, true);\n",
        "76": "\n",
        "77": "    doTestToArrayImpl2(Lists.newArrayList(1, null, 3), new Integer[0], false);\n",
        "78": "    doTestToArrayImpl2(Lists.newArrayList(1, null, 3), new Integer[2], false);\n",
        "79": "    doTestToArrayImpl2(Lists.newArrayList(1, null, 3), new Integer[3], true);\n",
        "80": "  }\n",
        "81": "\n",
        "82": "  private void doTestToArrayImpl2(List<Integer> list, Integer[] array1,\n",
        "83": "      boolean expectModify) {\n",
        "84": "    Integer[] starting = ObjectArrays.arraysCopyOf(array1, array1.length);\n",
        "85": "    Integer[] array2 = ObjectArrays.arraysCopyOf(array1, array1.length);\n",
        "86": "    Object[] reference = list.toArray(array1);\n",
        "87": "\n",
        "88": "    Object[] target = ObjectArrays.toArrayImpl(list, array2);\n",
        "89": "\n",
        "90": "    assertEquals(reference.getClass(), target.getClass());\n",
        "91": "    assertTrue(Arrays.equals(reference, target));\n",
        "92": "    assertTrue(Arrays.equals(reference, target));\n",
        "93": "\n",
        "94": "    Object[] expectedArray1 = expectModify ? reference : starting;\n",
        "95": "    Object[] expectedArray2 = expectModify ? target : starting;\n",
        "96": "    assertTrue(Arrays.equals(expectedArray1, array1));\n",
        "97": "    assertTrue(Arrays.equals(expectedArray2, array2));\n",
        "98": "  }\n",
        "99": "\n",
        "100": "  public void testPrependZeroElements() {\n",
        "101": "    String[] result = ObjectArrays.concat(\"foo\", new String[] {});\n",
        "102": "    assertThat(result).asList().contains(\"foo\");\n",
        "103": "  }\n",
        "104": "\n",
        "105": "  public void testPrependOneElement() {\n",
        "106": "    String[] result = ObjectArrays.concat(\"foo\", new String[] { \"bar\" });\n",
        "107": "    assertThat(result).asList().containsExactly(\"foo\", \"bar\").inOrder();\n",
        "108": "  }\n",
        "109": "\n",
        "110": "  public void testPrependTwoElements() {\n",
        "111": "    String[] result = ObjectArrays.concat(\"foo\", new String[] { \"bar\", \"baz\" });\n",
        "112": "    assertThat(result).asList().containsExactly(\"foo\", \"bar\", \"baz\").inOrder();\n",
        "113": "  }\n",
        "114": "\n",
        "115": "  public void testAppendZeroElements() {\n",
        "116": "    String[] result = ObjectArrays.concat(new String[] {}, \"foo\");\n",
        "117": "    assertThat(result).asList().contains(\"foo\");\n",
        "118": "  }\n",
        "119": "\n",
        "120": "  public void testAppendOneElement() {\n",
        "121": "    String[] result = ObjectArrays.concat(new String[] { \"foo\" }, \"bar\");\n",
        "122": "    assertThat(result).asList().containsExactly(\"foo\", \"bar\").inOrder();\n",
        "123": "  }\n",
        "124": "\n",
        "125": "  public void testAppendTwoElements() {\n",
        "126": "    String[] result = ObjectArrays.concat(new String[] { \"foo\", \"bar\" }, \"baz\");\n",
        "127": "    assertThat(result).asList().containsExactly(\"foo\", \"bar\", \"baz\").inOrder();\n",
        "128": "  }\n",
        "129": "\n",
        "130": "  public void testEmptyArrayToEmpty() {\n",
        "131": "    doTestNewArrayEquals(new Object[0], 0);\n",
        "132": "  }\n",
        "133": "\n",
        "134": "  public void testEmptyArrayToNonEmpty() {\n",
        "135": "    checkArrayEquals(new Long[5], ObjectArrays.newArray(new Long[0], 5));\n",
        "136": "  }\n",
        "137": "\n",
        "138": "  public void testNonEmptyToShorter() {\n",
        "139": "    checkArrayEquals(new String[9], ObjectArrays.newArray(new String[10], 9));\n",
        "140": "  }\n",
        "141": "\n",
        "142": "  public void testNonEmptyToSameLength() {\n",
        "143": "    doTestNewArrayEquals(new String[10], 10);\n",
        "144": "  }\n",
        "145": "\n",
        "146": "  public void testNonEmptyToLonger() {\n",
        "147": "    checkArrayEquals(new String[10],\n",
        "148": "        ObjectArrays.newArray(new String[] { \"a\", \"b\", \"c\", \"d\", \"e\" }, 10));\n",
        "149": "  }\n",
        "150": "\n",
        "151": "  private static void checkArrayEquals(Object[] expected, Object[] actual) {\n",
        "152": "    assertTrue(\"expected(\" + expected.getClass() + \"): \" + Arrays.toString(expected)\n",
        "153": "        + \" actual(\" + actual.getClass() + \"): \" + Arrays.toString(actual),\n",
        "154": "        arrayEquals(expected, actual));\n",
        "155": "  }\n",
        "156": "\n",
        "157": "  private static boolean arrayEquals(Object[] array1, Object[] array2) {\n",
        "158": "    assertSame(array1.getClass(), array2.getClass());\n",
        "159": "    return Arrays.equals(array1, array2);\n",
        "160": "  }\n",
        "161": "\n",
        "162": "  private static void doTestNewArrayEquals(Object[] expected, int length) {\n",
        "163": "    checkArrayEquals(expected, ObjectArrays.newArray(expected, length));\n",
        "164": "  }\n",
        "165": "}\n",
        "166": "\n"
    }
}