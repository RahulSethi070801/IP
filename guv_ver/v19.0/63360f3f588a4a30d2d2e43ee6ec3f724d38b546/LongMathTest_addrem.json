{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2011 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.math;\n",
        "18": "\n",
        "19": "import static com.google.common.math.MathTesting.ALL_LONG_CANDIDATES;\n",
        "20": "import static com.google.common.math.MathTesting.ALL_ROUNDING_MODES;\n",
        "21": "import static com.google.common.math.MathTesting.ALL_SAFE_ROUNDING_MODES;\n",
        "22": "import static com.google.common.math.MathTesting.NEGATIVE_INTEGER_CANDIDATES;\n",
        "23": "import static com.google.common.math.MathTesting.NEGATIVE_LONG_CANDIDATES;\n",
        "24": "import static com.google.common.math.MathTesting.POSITIVE_LONG_CANDIDATES;\n",
        "25": "import static java.math.BigInteger.valueOf;\n",
        "26": "import static java.math.RoundingMode.UNNECESSARY;\n",
        "27": "\n",
        "28": "import com.google.common.annotations.GwtCompatible;\n",
        "29": "\n",
        "30": "import junit.framework.TestCase;\n",
        "31": "\n",
        "32": "import java.math.BigDecimal;\n",
        "33": "import java.math.BigInteger;\n",
        "34": "import java.math.RoundingMode;\n",
        "35": "\n",
        "36": "/**\n",
        "37": " * Tests for LongMath.\n",
        "38": " *\n",
        "39": " * @author Louis Wasserman\n",
        "40": " */\n",
        "41": "@GwtCompatible(emulated = true)\n",
        "42": "public class LongMathTest extends TestCase {\n",
        "43": "  \n",
        "44": "  public void testLessThanBranchFree() {\n",
        "45": "    for (long x : ALL_LONG_CANDIDATES) {\n",
        "46": "      for (long y : ALL_LONG_CANDIDATES) {\n",
        "47": "        BigInteger difference = BigInteger.valueOf(x).subtract(BigInteger.valueOf(y));\n",
        "48": "        if (fitsInLong(difference)) {\n",
        "49": "          int expected = (x < y) ? 1 : 0;\n",
        "50": "          int actual = LongMath.lessThanBranchFree(x, y);\n",
        "51": "          assertEquals(expected, actual);\n",
        "52": "        }\n",
        "53": "      }\n",
        "54": "    }\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  // Throws an ArithmeticException if \"the simple implementation\" of binomial coefficients overflows\n",
        "58": "\n",
        "59": "  public void testLog2ZeroAlwaysThrows() {\n",
        "60": "    for (RoundingMode mode : ALL_ROUNDING_MODES) {\n",
        "61": "      try {\n",
        "62": "        LongMath.log2(0L, mode);\n",
        "63": "        fail(\"Expected IllegalArgumentException\");\n",
        "64": "      } catch (IllegalArgumentException expected) {}\n",
        "65": "    }\n",
        "66": "  }\n",
        "67": "\n",
        "68": "  public void testLog2NegativeAlwaysThrows() {\n",
        "69": "    for (long x : NEGATIVE_LONG_CANDIDATES) {\n",
        "70": "      for (RoundingMode mode : ALL_ROUNDING_MODES) {\n",
        "71": "        try {\n",
        "72": "          LongMath.log2(x, mode);\n",
        "73": "          fail(\"Expected IllegalArgumentException\");\n",
        "74": "        } catch (IllegalArgumentException expected) {}\n",
        "75": "      }\n",
        "76": "    }\n",
        "77": "  }\n",
        "78": "\n",
        "79": "  /* Relies on the correctness of BigIntegerMath.log2 for all modes except UNNECESSARY. */\n",
        "80": "  public void testLog2MatchesBigInteger() {\n",
        "81": "    for (long x : POSITIVE_LONG_CANDIDATES) {\n",
        "82": "      for (RoundingMode mode : ALL_SAFE_ROUNDING_MODES) {\n",
        "83": "        // The BigInteger implementation is tested separately, use it as the reference.\n",
        "84": "        assertEquals(BigIntegerMath.log2(valueOf(x), mode), LongMath.log2(x, mode));\n",
        "85": "      }\n",
        "86": "    }\n",
        "87": "  }\n",
        "88": "\n",
        "89": "  /* Relies on the correctness of isPowerOfTwo(long). */\n",
        "90": "  public void testLog2Exact() {\n",
        "91": "    for (long x : POSITIVE_LONG_CANDIDATES) {\n",
        "92": "      // We only expect an exception if x was not a power of 2.\n",
        "93": "      boolean isPowerOf2 = LongMath.isPowerOfTwo(x);\n",
        "94": "      try {\n",
        "95": "        assertEquals(x, 1L << LongMath.log2(x, UNNECESSARY));\n",
        "96": "        assertTrue(isPowerOf2);\n",
        "97": "      } catch (ArithmeticException e) {\n",
        "98": "        assertFalse(isPowerOf2);\n",
        "99": "      }\n",
        "100": "    }\n",
        "101": "  }\n",
        "102": "\n",
        "103": "  // Relies on the correctness of BigIntegerMath.log10 for all modes except UNNECESSARY.\n",
        "104": "\n",
        "105": "  // Relies on the correctness of log10(long, FLOOR) and of pow(long, int).\n",
        "106": "\n",
        "107": "  // Relies on the correctness of BigIntegerMath.sqrt for all modes except UNNECESSARY.\n",
        "108": "\n",
        "109": "  /* Relies on the correctness of sqrt(long, FLOOR). */\n",
        "110": "\n",
        "111": "  public void testGCDExhaustive() {\n",
        "112": "    for (long a : POSITIVE_LONG_CANDIDATES) {\n",
        "113": "      for (long b : POSITIVE_LONG_CANDIDATES) {\n",
        "114": "        assertEquals(valueOf(a).gcd(valueOf(b)), valueOf(LongMath.gcd(a, b)));\n",
        "115": "      }\n",
        "116": "    }\n",
        "117": "  }\n",
        "118": "\n",
        "119": "  // Depends on the correctness of BigIntegerMath.factorial.\n",
        "120": "\n",
        "121": "  // Depends on the correctness of BigIntegerMath.binomial.\n",
        "122": "  public void testBinomial() {\n",
        "123": "    for (int n = 0; n <= 70; n++) {\n",
        "124": "      for (int k = 0; k <= n; k++) {\n",
        "125": "        BigInteger expectedBig = BigIntegerMath.binomial(n, k);\n",
        "126": "        long expectedLong = fitsInLong(expectedBig) ? expectedBig.longValue() : Long.MAX_VALUE;\n",
        "127": "        assertEquals(expectedLong, LongMath.binomial(n, k));\n",
        "128": "      }\n",
        "129": "    }\n",
        "130": "  }\n",
        "131": "\n",
        "132": "  public void testBinomialOutside() {\n",
        "133": "    for (int n = 0; n <= 50; n++) {\n",
        "134": "      try {\n",
        "135": "        LongMath.binomial(n, -1);\n",
        "136": "        fail(\"Expected IllegalArgumentException\");\n",
        "137": "      } catch (IllegalArgumentException expected) {}\n",
        "138": "      try {\n",
        "139": "        LongMath.binomial(n, n + 1);\n",
        "140": "        fail(\"Expected IllegalArgumentException\");\n",
        "141": "      } catch (IllegalArgumentException expected) {}\n",
        "142": "    }\n",
        "143": "  }\n",
        "144": "\n",
        "145": "  public void testBinomialNegative() {\n",
        "146": "    for (int n : NEGATIVE_INTEGER_CANDIDATES) {\n",
        "147": "      try {\n",
        "148": "        LongMath.binomial(n, 0);\n",
        "149": "        fail(\"Expected IllegalArgumentException\");\n",
        "150": "      } catch (IllegalArgumentException expected) {}\n",
        "151": "    }\n",
        "152": "  }\n",
        "153": "  \n",
        "154": "  public void testSqrtOfLongIsAtMostFloorSqrtMaxLong() {\n",
        "155": "    long sqrtMaxLong = (long) Math.sqrt(Long.MAX_VALUE);\n",
        "156": "    assertTrue(sqrtMaxLong <= LongMath.FLOOR_SQRT_MAX_LONG);\n",
        "157": "  }\n",
        "158": "\n",
        "159": "  /**\n",
        "160": "   * Helper method that asserts the arithmetic mean of x and y is equal\n",
        "161": "   * to the expectedMean.\n",
        "162": "   */\n",
        "163": "  private static void assertMean(long expectedMean, long x, long y) {\n",
        "164": "    assertEquals(\"The expectedMean should be the same as computeMeanSafely\",\n",
        "165": "        expectedMean, computeMeanSafely(x, y));\n",
        "166": "    assertMean(x, y);\n",
        "167": "  }\n",
        "168": "\n",
        "169": "  /**\n",
        "170": "   * Helper method that asserts the arithmetic mean of x and y is equal\n",
        "171": "   *to the result of computeMeanSafely.\n",
        "172": "   */\n",
        "173": "  private static void assertMean(long x, long y) {\n",
        "174": "    long expectedMean = computeMeanSafely(x, y);\n",
        "175": "    assertEquals(expectedMean, LongMath.mean(x, y));\n",
        "176": "    assertEquals(\"The mean of x and y should equal the mean of y and x\",\n",
        "177": "        expectedMean, LongMath.mean(y, x));\n",
        "178": "  }\n",
        "179": "\n",
        "180": "  /**\n",
        "181": "   * Computes the mean in a way that is obvious and resilient to\n",
        "182": "   * overflow by using BigInteger arithmetic.\n",
        "183": "   */\n",
        "184": "  private static long computeMeanSafely(long x, long y) {\n",
        "185": "    BigInteger bigX = BigInteger.valueOf(x);\n",
        "186": "    BigInteger bigY = BigInteger.valueOf(y);\n",
        "187": "    BigDecimal bigMean = new BigDecimal(bigX.add(bigY))\n",
        "188": "        .divide(BigDecimal.valueOf(2), BigDecimal.ROUND_FLOOR);\n",
        "189": "    // parseInt blows up on overflow as opposed to intValue() which does not.\n",
        "190": "    return Long.parseLong(bigMean.toString());\n",
        "191": "  }\n",
        "192": "\n",
        "193": "  private static boolean fitsInLong(BigInteger big) {\n",
        "194": "    return big.bitLength() <= 63;\n",
        "195": "  }\n",
        "196": "}\n",
        "197": "\n"
    }
}