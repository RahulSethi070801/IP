{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "\n",
        "21": "import junit.framework.TestCase;\n",
        "22": "\n",
        "23": "import java.util.Iterator;\n",
        "24": "import java.util.NoSuchElementException;\n",
        "25": "\n",
        "26": "/**\n",
        "27": " * Unit test for {@code AbstractIterator}.\n",
        "28": " *\n",
        "29": " * @author Kevin Bourrillion\n",
        "30": " */\n",
        "31": "@SuppressWarnings(\"serial\") // No serialization is used in this test\n",
        "32": "@GwtCompatible(emulated = true)\n",
        "33": "// TODO(cpovirk): why is this slow (>1m/test) under GWT when fully optimized?\n",
        "34": "public class AbstractIteratorTest extends TestCase {\n",
        "35": "\n",
        "36": "  public void testDefaultBehaviorOfNextAndHasNext() {\n",
        "37": "\n",
        "38": "    // This sample AbstractIterator returns 0 on the first call, 1 on the\n",
        "39": "    // second, then signals that it's reached the end of the data\n",
        "40": "    Iterator<Integer> iter = new AbstractIterator<Integer>() {\n",
        "41": "      private int rep;\n",
        "42": "      @Override public Integer computeNext() {\n",
        "43": "        switch (rep++) {\n",
        "44": "          case 0:\n",
        "45": "            return 0;\n",
        "46": "          case 1:\n",
        "47": "            return 1;\n",
        "48": "          case 2:\n",
        "49": "            return endOfData();\n",
        "50": "          default:\n",
        "51": "            fail(\"Should not have been invoked again\");\n",
        "52": "            return null;\n",
        "53": "        }\n",
        "54": "      }\n",
        "55": "    };\n",
        "56": "\n",
        "57": "    assertTrue(iter.hasNext());\n",
        "58": "    assertEquals(0, (int) iter.next());\n",
        "59": "\n",
        "60": "    // verify idempotence of hasNext()\n",
        "61": "    assertTrue(iter.hasNext());\n",
        "62": "    assertTrue(iter.hasNext());\n",
        "63": "    assertTrue(iter.hasNext());\n",
        "64": "    assertEquals(1, (int) iter.next());\n",
        "65": "\n",
        "66": "    assertFalse(iter.hasNext());\n",
        "67": "\n",
        "68": "    // Make sure computeNext() doesn't get invoked again\n",
        "69": "    assertFalse(iter.hasNext());\n",
        "70": "\n",
        "71": "    try {\n",
        "72": "      iter.next();\n",
        "73": "      fail(\"no exception thrown\");\n",
        "74": "    } catch (NoSuchElementException expected) {\n",
        "75": "    }\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  public void testDefaultBehaviorOfPeek() {\n",
        "79": "    /*\n",
        "80": "     * This sample AbstractIterator returns 0 on the first call, 1 on the\n",
        "81": "     * second, then signals that it's reached the end of the data\n",
        "82": "     */\n",
        "83": "    AbstractIterator<Integer> iter = new AbstractIterator<Integer>() {\n",
        "84": "      private int rep;\n",
        "85": "      @Override public Integer computeNext() {\n",
        "86": "        switch (rep++) {\n",
        "87": "          case 0:\n",
        "88": "            return 0;\n",
        "89": "          case 1:\n",
        "90": "            return 1;\n",
        "91": "          case 2:\n",
        "92": "            return endOfData();\n",
        "93": "          default:\n",
        "94": "            fail(\"Should not have been invoked again\");\n",
        "95": "            return null;\n",
        "96": "        }\n",
        "97": "      }\n",
        "98": "    };\n",
        "99": "\n",
        "100": "    assertEquals(0, (int) iter.peek());\n",
        "101": "    assertEquals(0, (int) iter.peek());\n",
        "102": "    assertTrue(iter.hasNext());\n",
        "103": "    assertEquals(0, (int) iter.peek());\n",
        "104": "    assertEquals(0, (int) iter.next());\n",
        "105": "\n",
        "106": "    assertEquals(1, (int) iter.peek());\n",
        "107": "    assertEquals(1, (int) iter.next());\n",
        "108": "\n",
        "109": "    try {\n",
        "110": "      iter.peek();\n",
        "111": "      fail(\"peek() should throw NoSuchElementException at end\");\n",
        "112": "    } catch (NoSuchElementException expected) {\n",
        "113": "    }\n",
        "114": "\n",
        "115": "    try {\n",
        "116": "      iter.peek();\n",
        "117": "      fail(\"peek() should continue to throw NoSuchElementException at end\");\n",
        "118": "    } catch (NoSuchElementException expected) {\n",
        "119": "    }\n",
        "120": "\n",
        "121": "    try {\n",
        "122": "      iter.next();\n",
        "123": "      fail(\"next() should throw NoSuchElementException as usual\");\n",
        "124": "    } catch (NoSuchElementException expected) {\n",
        "125": "    }\n",
        "126": "\n",
        "127": "    try {\n",
        "128": "      iter.peek();\n",
        "129": "      fail(\"peek() should still throw NoSuchElementException after next()\");\n",
        "130": "    } catch (NoSuchElementException expected) {\n",
        "131": "    }\n",
        "132": "  }\n",
        "133": "\n",
        "134": "  public void testDefaultBehaviorOfPeekForEmptyIteration() {\n",
        "135": "\n",
        "136": "    AbstractIterator<Integer> empty = new AbstractIterator<Integer>() {\n",
        "137": "      private boolean alreadyCalledEndOfData;\n",
        "138": "      @Override public Integer computeNext() {\n",
        "139": "        if (alreadyCalledEndOfData) {\n",
        "140": "          fail(\"Should not have been invoked again\");\n",
        "141": "        }\n",
        "142": "        alreadyCalledEndOfData = true;\n",
        "143": "        return endOfData();\n",
        "144": "      }\n",
        "145": "    };\n",
        "146": "\n",
        "147": "    try {\n",
        "148": "      empty.peek();\n",
        "149": "      fail(\"peek() should throw NoSuchElementException at end\");\n",
        "150": "    } catch (NoSuchElementException expected) {\n",
        "151": "    }\n",
        "152": "\n",
        "153": "    try {\n",
        "154": "      empty.peek();\n",
        "155": "      fail(\"peek() should continue to throw NoSuchElementException at end\");\n",
        "156": "    } catch (NoSuchElementException expected) {\n",
        "157": "    }\n",
        "158": "  }\n",
        "159": "\n",
        "160": "  public void testSneakyThrow() throws Exception {\n",
        "161": "    Iterator<Integer> iter = new AbstractIterator<Integer>() {\n",
        "162": "      boolean haveBeenCalled;\n",
        "163": "      @Override public Integer computeNext() {\n",
        "164": "        if (haveBeenCalled) {\n",
        "165": "          fail(\"Should not have been called again\");\n",
        "166": "        } else {\n",
        "167": "          haveBeenCalled = true;\n",
        "168": "          sneakyThrow(new SomeCheckedException());\n",
        "169": "        }\n",
        "170": "        return null; // never reached\n",
        "171": "      }\n",
        "172": "    };\n",
        "173": "\n",
        "174": "    // The first time, the sneakily-thrown exception comes out\n",
        "175": "    try {\n",
        "176": "      iter.hasNext();\n",
        "177": "      fail(\"No exception thrown\");\n",
        "178": "    } catch (Exception e) {\n",
        "179": "      if (!(e instanceof SomeCheckedException)) {\n",
        "180": "        throw e;\n",
        "181": "      }\n",
        "182": "    }\n",
        "183": "\n",
        "184": "    // But the second time, AbstractIterator itself throws an ISE\n",
        "185": "    try {\n",
        "186": "      iter.hasNext();\n",
        "187": "      fail(\"No exception thrown\");\n",
        "188": "    } catch (IllegalStateException expected) {\n",
        "189": "    }\n",
        "190": "  }\n",
        "191": "\n",
        "192": "  public void testException() {\n",
        "193": "    final SomeUncheckedException exception = new SomeUncheckedException();\n",
        "194": "    Iterator<Integer> iter = new AbstractIterator<Integer>() {\n",
        "195": "      @Override public Integer computeNext() {\n",
        "196": "        throw exception;\n",
        "197": "      }\n",
        "198": "    };\n",
        "199": "\n",
        "200": "    // It should pass through untouched\n",
        "201": "    try {\n",
        "202": "      iter.hasNext();\n",
        "203": "      fail(\"No exception thrown\");\n",
        "204": "    } catch (SomeUncheckedException e) {\n",
        "205": "      assertSame(exception, e);\n",
        "206": "    }\n",
        "207": "  }\n",
        "208": "\n",
        "209": "  public void testExceptionAfterEndOfData() {\n",
        "210": "    Iterator<Integer> iter = new AbstractIterator<Integer>() {\n",
        "211": "      @Override public Integer computeNext() {\n",
        "212": "        endOfData();\n",
        "213": "        throw new SomeUncheckedException();\n",
        "214": "      }\n",
        "215": "    };\n",
        "216": "    try {\n",
        "217": "      iter.hasNext();\n",
        "218": "      fail(\"No exception thrown\");\n",
        "219": "    } catch (SomeUncheckedException expected) {\n",
        "220": "    }\n",
        "221": "  }\n",
        "222": "\n",
        "223": "  public void testCantRemove() {\n",
        "224": "    Iterator<Integer> iter = new AbstractIterator<Integer>() {\n",
        "225": "      boolean haveBeenCalled;\n",
        "226": "      @Override public Integer computeNext() {\n",
        "227": "        if (haveBeenCalled) {\n",
        "228": "          endOfData();\n",
        "229": "        }\n",
        "230": "        haveBeenCalled = true;\n",
        "231": "        return 0;\n",
        "232": "      }\n",
        "233": "    };\n",
        "234": "\n",
        "235": "    assertEquals(0, (int) iter.next());\n",
        "236": "\n",
        "237": "    try {\n",
        "238": "      iter.remove();\n",
        "239": "      fail(\"No exception thrown\");\n",
        "240": "    } catch (UnsupportedOperationException expected) {\n",
        "241": "    }\n",
        "242": "  }\n",
        "243": "\n",
        "244": "  public void testReentrantHasNext() {\n",
        "245": "    Iterator<Integer> iter = new AbstractIterator<Integer>() {\n",
        "246": "      @Override protected Integer computeNext() {\n",
        "247": "        hasNext();\n",
        "248": "        return null;\n",
        "249": "      }\n",
        "250": "    };\n",
        "251": "    try {\n",
        "252": "      iter.hasNext();\n",
        "253": "      fail();\n",
        "254": "    } catch (IllegalStateException expected) {\n",
        "255": "    }\n",
        "256": "  }\n",
        "257": "\n",
        "258": "  // Technically we should test other reentrant scenarios (9 combinations of\n",
        "259": "  // hasNext/next/peek), but we'll cop out for now, knowing that peek() and\n",
        "260": "  // next() both start by invoking hasNext() anyway.\n",
        "261": "\n",
        "262": "  /**\n",
        "263": "   * Throws a undeclared checked exception.\n",
        "264": "   */\n",
        "265": "  private static void sneakyThrow(Throwable t) {\n",
        "266": "    class SneakyThrower<T extends Throwable> {\n",
        "267": "      @SuppressWarnings(\"unchecked\") // not really safe, but that's the point\n",
        "268": "      void throwIt(Throwable t) throws T {\n",
        "269": "        throw (T) t;\n",
        "270": "      }\n",
        "271": "    }\n",
        "272": "    new SneakyThrower<Error>().throwIt(t);\n",
        "273": "  }\n",
        "274": "\n",
        "275": "  private static class SomeCheckedException extends Exception {\n",
        "276": "  }\n",
        "277": "\n",
        "278": "  private static class SomeUncheckedException extends RuntimeException {\n",
        "279": "  }\n",
        "280": "}\n",
        "281": "\n"
    }
}