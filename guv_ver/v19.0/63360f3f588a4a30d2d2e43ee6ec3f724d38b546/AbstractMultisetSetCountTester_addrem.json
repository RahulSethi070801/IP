{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2009 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.google;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionFeature.ALLOWS_NULL_VALUES;\n",
        "20": "import static com.google.common.collect.testing.features.CollectionFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION;\n",
        "21": "import static com.google.common.collect.testing.features.CollectionFeature.RESTRICTS_ELEMENTS;\n",
        "22": "import static com.google.common.collect.testing.features.CollectionFeature.SUPPORTS_ADD;\n",
        "23": "import static com.google.common.collect.testing.features.CollectionFeature.SUPPORTS_REMOVE;\n",
        "24": "import static com.google.common.collect.testing.features.CollectionSize.SEVERAL;\n",
        "25": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "26": "\n",
        "27": "import com.google.common.annotations.GwtCompatible;\n",
        "28": "import com.google.common.collect.Multiset;\n",
        "29": "import com.google.common.collect.Multiset.Entry;\n",
        "30": "import com.google.common.collect.testing.features.CollectionFeature;\n",
        "31": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "32": "\n",
        "33": "import java.util.ConcurrentModificationException;\n",
        "34": "import java.util.Iterator;\n",
        "35": "\n",
        "36": "/**\n",
        "37": " * Common superclass for {@link MultisetSetCountUnconditionallyTester} and\n",
        "38": " * {@link MultisetSetCountConditionallyTester}. It is used by those testers to\n",
        "39": " * test calls to the unconditional {@code setCount()} method and calls to the\n",
        "40": " * conditional {@code setCount()} method when the expected present count is\n",
        "41": " * correct.\n",
        "42": " *\n",
        "43": " * @author Chris Povirk\n",
        "44": " */\n",
        "45": "@GwtCompatible(emulated = true)\n",
        "46": "public abstract class AbstractMultisetSetCountTester<E>\n",
        "47": "    extends AbstractMultisetTester<E> {\n",
        "48": "  /*\n",
        "49": "   * TODO: consider adding MultisetFeatures.SUPPORTS_SET_COUNT. Currently we\n",
        "50": "   * assume that using setCount() to increase the count is permitted iff add()\n",
        "51": "   * is permitted and similarly for decrease/remove(). We assume that a\n",
        "52": "   * setCount() no-op is permitted if either add() or remove() is permitted,\n",
        "53": "   * though we also allow it to \"succeed\" if neither is permitted.\n",
        "54": "   */\n",
        "55": "\n",
        "56": "  private void assertSetCount(E element, int count) {\n",
        "57": "    setCountCheckReturnValue(element, count);\n",
        "58": "\n",
        "59": "    assertEquals(\n",
        "60": "        \"multiset.count() should return the value passed to setCount()\",\n",
        "61": "        count, getMultiset().count(element));\n",
        "62": "\n",
        "63": "    int size = 0;\n",
        "64": "    for (Multiset.Entry<E> entry : getMultiset().entrySet()) {\n",
        "65": "      size += entry.getCount();\n",
        "66": "    }\n",
        "67": "    assertEquals(\n",
        "68": "        \"multiset.size() should be the sum of the counts of all entries\",\n",
        "69": "        size, getMultiset().size());\n",
        "70": "  }\n",
        "71": "\n",
        "72": "  /**\n",
        "73": "   * Call the {@code setCount()} method under test, and check its return value.\n",
        "74": "   */\n",
        "75": "  abstract void setCountCheckReturnValue(E element, int count);\n",
        "76": "\n",
        "77": "  /**\n",
        "78": "   * Call the {@code setCount()} method under test, but do not check its return\n",
        "79": "   * value. Callers should use this method over\n",
        "80": "   * {@link #setCountCheckReturnValue(Object, int)} when they expect\n",
        "81": "   * {@code setCount()} to throw an exception, as checking the return value\n",
        "82": "   * could produce an incorrect error message like\n",
        "83": "   * \"setCount() should return the original count\" instead of the message passed\n",
        "84": "   * to a later invocation of {@code fail()}, like \"setCount should throw\n",
        "85": "   * UnsupportedOperationException.\"\n",
        "86": "   */\n",
        "87": "  abstract void setCountNoCheckReturnValue(E element, int count);\n",
        "88": "\n",
        "89": "  private void assertSetCountIncreasingFailure(E element, int count) {\n",
        "90": "    try {\n",
        "91": "      setCountNoCheckReturnValue(element, count);\n",
        "92": "      fail(\"a call to multiset.setCount() to increase an element's count \"\n",
        "93": "          + \"should throw\");\n",
        "94": "    } catch (UnsupportedOperationException expected) {\n",
        "95": "    }\n",
        "96": "  }\n",
        "97": "\n",
        "98": "  private void assertSetCountDecreasingFailure(E element, int count) {\n",
        "99": "    try {\n",
        "100": "      setCountNoCheckReturnValue(element, count);\n",
        "101": "      fail(\"a call to multiset.setCount() to decrease an element's count \"\n",
        "102": "          + \"should throw\");\n",
        "103": "    } catch (UnsupportedOperationException expected) {\n",
        "104": "    }\n",
        "105": "  }\n",
        "106": "\n",
        "107": "  // Unconditional setCount no-ops.\n",
        "108": "\n",
        "109": "  private void assertZeroToZero() {\n",
        "110": "    assertSetCount(e3(), 0);\n",
        "111": "  }\n",
        "112": "\n",
        "113": "  private void assertOneToOne() {\n",
        "114": "    assertSetCount(e0(), 1);\n",
        "115": "  }\n",
        "116": "\n",
        "117": "  private void assertThreeToThree() {\n",
        "118": "    initThreeCopies();\n",
        "119": "    assertSetCount(e0(), 3);\n",
        "120": "  }\n",
        "121": "\n",
        "122": "  @CollectionFeature.Require(SUPPORTS_ADD)\n",
        "123": "  public void testSetCount_zeroToZero_addSupported() {\n",
        "124": "    assertZeroToZero();\n",
        "125": "  }\n",
        "126": "\n",
        "127": "  @CollectionFeature.Require(SUPPORTS_REMOVE)\n",
        "128": "  public void testSetCount_zeroToZero_removeSupported() {\n",
        "129": "    assertZeroToZero();\n",
        "130": "  }\n",
        "131": "\n",
        "132": "  @CollectionFeature.Require(absent = {SUPPORTS_ADD, SUPPORTS_REMOVE})\n",
        "133": "  public void testSetCount_zeroToZero_unsupported() {\n",
        "134": "    try {\n",
        "135": "      assertZeroToZero();\n",
        "136": "    } catch (UnsupportedOperationException tolerated) {\n",
        "137": "    }\n",
        "138": "  }\n",
        "139": "\n",
        "140": "  @CollectionSize.Require(absent = ZERO)\n",
        "141": "  @CollectionFeature.Require(SUPPORTS_ADD)\n",
        "142": "  public void testSetCount_oneToOne_addSupported() {\n",
        "143": "    assertOneToOne();\n",
        "144": "  }\n",
        "145": "\n",
        "146": "  @CollectionSize.Require(absent = ZERO)\n",
        "147": "  @CollectionFeature.Require(SUPPORTS_REMOVE)\n",
        "148": "  public void testSetCount_oneToOne_removeSupported() {\n",
        "149": "    assertOneToOne();\n",
        "150": "  }\n",
        "151": "\n",
        "152": "  @CollectionSize.Require(absent = ZERO)\n",
        "153": "  @CollectionFeature.Require(absent = {SUPPORTS_ADD, SUPPORTS_REMOVE})\n",
        "154": "  public void testSetCount_oneToOne_unsupported() {\n",
        "155": "    try {\n",
        "156": "      assertOneToOne();\n",
        "157": "    } catch (UnsupportedOperationException tolerated) {\n",
        "158": "    }\n",
        "159": "  }\n",
        "160": "\n",
        "161": "  @CollectionSize.Require(SEVERAL)\n",
        "162": "  @CollectionFeature.Require(SUPPORTS_ADD)\n",
        "163": "  public void testSetCount_threeToThree_addSupported() {\n",
        "164": "    assertThreeToThree();\n",
        "165": "  }\n",
        "166": "\n",
        "167": "  @CollectionSize.Require(SEVERAL)\n",
        "168": "  @CollectionFeature.Require(SUPPORTS_REMOVE)\n",
        "169": "  public void testSetCount_threeToThree_removeSupported() {\n",
        "170": "    assertThreeToThree();\n",
        "171": "  }\n",
        "172": "\n",
        "173": "  @CollectionSize.Require(SEVERAL)\n",
        "174": "  @CollectionFeature.Require(absent = {SUPPORTS_ADD, SUPPORTS_REMOVE})\n",
        "175": "  public void testSetCount_threeToThree_unsupported() {\n",
        "176": "    try {\n",
        "177": "      assertThreeToThree();\n",
        "178": "    } catch (UnsupportedOperationException tolerated) {\n",
        "179": "    }\n",
        "180": "  }\n",
        "181": "\n",
        "182": "  // Unconditional setCount size increases:\n",
        "183": "\n",
        "184": "  @CollectionFeature.Require(SUPPORTS_ADD)\n",
        "185": "  public void testSetCount_zeroToOne_supported() {\n",
        "186": "    assertSetCount(e3(), 1);\n",
        "187": "  }\n",
        "188": "\n",
        "189": "  @CollectionFeature.Require({SUPPORTS_ADD,\n",
        "190": "      FAILS_FAST_ON_CONCURRENT_MODIFICATION})\n",
        "191": "  public void testSetCountZeroToOneConcurrentWithIteration() {\n",
        "192": "    try {\n",
        "193": "      Iterator<E> iterator = collection.iterator();\n",
        "194": "      assertSetCount(e3(), 1);\n",
        "195": "      iterator.next();\n",
        "196": "      fail(\"Expected ConcurrentModificationException\");\n",
        "197": "    } catch (ConcurrentModificationException expected) {\n",
        "198": "      // success\n",
        "199": "    }\n",
        "200": "  }\n",
        "201": "\n",
        "202": "  @CollectionFeature.Require({SUPPORTS_ADD,\n",
        "203": "      FAILS_FAST_ON_CONCURRENT_MODIFICATION})\n",
        "204": "  public void testSetCountZeroToOneConcurrentWithEntrySetIteration() {\n",
        "205": "    try {\n",
        "206": "      Iterator<Entry<E>> iterator = getMultiset().entrySet().iterator();\n",
        "207": "      assertSetCount(e3(), 1);\n",
        "208": "      iterator.next();\n",
        "209": "      fail(\"Expected ConcurrentModificationException\");\n",
        "210": "    } catch (ConcurrentModificationException expected) {\n",
        "211": "      // success\n",
        "212": "    }\n",
        "213": "  }\n",
        "214": "\n",
        "215": "  @CollectionFeature.Require(SUPPORTS_ADD)\n",
        "216": "  public void testSetCount_zeroToThree_supported() {\n",
        "217": "    assertSetCount(e3(), 3);\n",
        "218": "  }\n",
        "219": "\n",
        "220": "  @CollectionSize.Require(absent = ZERO)\n",
        "221": "  @CollectionFeature.Require(SUPPORTS_ADD)\n",
        "222": "  public void testSetCount_oneToThree_supported() {\n",
        "223": "    assertSetCount(e0(), 3);\n",
        "224": "  }\n",
        "225": "\n",
        "226": "  @CollectionFeature.Require(absent = SUPPORTS_ADD)\n",
        "227": "  public void testSetCount_zeroToOne_unsupported() {\n",
        "228": "    assertSetCountIncreasingFailure(e3(), 1);\n",
        "229": "  }\n",
        "230": "\n",
        "231": "  @CollectionFeature.Require(absent = SUPPORTS_ADD)\n",
        "232": "  public void testSetCount_zeroToThree_unsupported() {\n",
        "233": "    assertSetCountIncreasingFailure(e3(), 3);\n",
        "234": "  }\n",
        "235": "\n",
        "236": "  @CollectionSize.Require(absent = ZERO)\n",
        "237": "  @CollectionFeature.Require(absent = SUPPORTS_ADD)\n",
        "238": "  public void testSetCount_oneToThree_unsupported() {\n",
        "239": "    assertSetCountIncreasingFailure(e3(), 3);\n",
        "240": "  }\n",
        "241": "\n",
        "242": "  // Unconditional setCount size decreases:\n",
        "243": "\n",
        "244": "  @CollectionSize.Require(absent = ZERO)\n",
        "245": "  @CollectionFeature.Require(SUPPORTS_REMOVE)\n",
        "246": "  public void testSetCount_oneToZero_supported() {\n",
        "247": "    assertSetCount(e0(), 0);\n",
        "248": "  }\n",
        "249": "\n",
        "250": "  @CollectionFeature.Require({SUPPORTS_REMOVE,\n",
        "251": "      FAILS_FAST_ON_CONCURRENT_MODIFICATION})\n",
        "252": "  @CollectionSize.Require(absent = ZERO)\n",
        "253": "  public void testSetCountOneToZeroConcurrentWithIteration() {\n",
        "254": "    try {\n",
        "255": "      Iterator<E> iterator = collection.iterator();\n",
        "256": "      assertSetCount(e0(), 0);\n",
        "257": "      iterator.next();\n",
        "258": "      fail(\"Expected ConcurrentModificationException\");\n",
        "259": "    } catch (ConcurrentModificationException expected) {\n",
        "260": "      // success\n",
        "261": "    }\n",
        "262": "  }\n",
        "263": "\n",
        "264": "  @CollectionFeature.Require({SUPPORTS_REMOVE,\n",
        "265": "      FAILS_FAST_ON_CONCURRENT_MODIFICATION})\n",
        "266": "  @CollectionSize.Require(absent = ZERO)\n",
        "267": "  public void testSetCountOneToZeroConcurrentWithEntrySetIteration() {\n",
        "268": "    try {\n",
        "269": "      Iterator<Entry<E>> iterator = getMultiset().entrySet().iterator();\n",
        "270": "      assertSetCount(e0(), 0);\n",
        "271": "      iterator.next();\n",
        "272": "      fail(\"Expected ConcurrentModificationException\");\n",
        "273": "    } catch (ConcurrentModificationException expected) {\n",
        "274": "      // success\n",
        "275": "    }\n",
        "276": "  }\n",
        "277": "\n",
        "278": "  @CollectionSize.Require(SEVERAL)\n",
        "279": "  @CollectionFeature.Require(SUPPORTS_REMOVE)\n",
        "280": "  public void testSetCount_threeToZero_supported() {\n",
        "281": "    initThreeCopies();\n",
        "282": "    assertSetCount(e0(), 0);\n",
        "283": "  }\n",
        "284": "\n",
        "285": "  @CollectionSize.Require(SEVERAL)\n",
        "286": "  @CollectionFeature.Require(SUPPORTS_REMOVE)\n",
        "287": "  public void testSetCount_threeToOne_supported() {\n",
        "288": "    initThreeCopies();\n",
        "289": "    assertSetCount(e0(), 1);\n",
        "290": "  }\n",
        "291": "\n",
        "292": "  @CollectionSize.Require(absent = ZERO)\n",
        "293": "  @CollectionFeature.Require(absent = SUPPORTS_REMOVE)\n",
        "294": "  public void testSetCount_oneToZero_unsupported() {\n",
        "295": "    assertSetCountDecreasingFailure(e0(), 0);\n",
        "296": "  }\n",
        "297": "\n",
        "298": "  @CollectionSize.Require(SEVERAL)\n",
        "299": "  @CollectionFeature.Require(absent = SUPPORTS_REMOVE)\n",
        "300": "  public void testSetCount_threeToZero_unsupported() {\n",
        "301": "    initThreeCopies();\n",
        "302": "    assertSetCountDecreasingFailure(e0(), 0);\n",
        "303": "  }\n",
        "304": "\n",
        "305": "  @CollectionSize.Require(SEVERAL)\n",
        "306": "  @CollectionFeature.Require(absent = SUPPORTS_REMOVE)\n",
        "307": "  public void testSetCount_threeToOne_unsupported() {\n",
        "308": "    initThreeCopies();\n",
        "309": "    assertSetCountDecreasingFailure(e0(), 1);\n",
        "310": "  }\n",
        "311": "\n",
        "312": "  // setCount with nulls:\n",
        "313": "\n",
        "314": "  @CollectionSize.Require(absent = ZERO)\n",
        "315": "  @CollectionFeature.Require({SUPPORTS_REMOVE, ALLOWS_NULL_VALUES})\n",
        "316": "  public void testSetCount_removeNull_nullSupported() {\n",
        "317": "    initCollectionWithNullElement();\n",
        "318": "    assertSetCount(null, 0);\n",
        "319": "  }\n",
        "320": "\n",
        "321": "  @CollectionFeature.Require(value = {SUPPORTS_ADD, ALLOWS_NULL_VALUES},\n",
        "322": "      absent = RESTRICTS_ELEMENTS)\n",
        "323": "  public void testSetCount_addNull_nullSupported() {\n",
        "324": "    assertSetCount(null, 1);\n",
        "325": "  }\n",
        "326": "\n",
        "327": "  @CollectionFeature.Require(value = SUPPORTS_ADD, absent = ALLOWS_NULL_VALUES)\n",
        "328": "  public void testSetCount_addNull_nullUnsupported() {\n",
        "329": "    try {\n",
        "330": "      setCountNoCheckReturnValue(null, 1);\n",
        "331": "      fail(\"adding null with setCount() should throw NullPointerException\");\n",
        "332": "    } catch (NullPointerException expected) {\n",
        "333": "    }\n",
        "334": "  }\n",
        "335": "\n",
        "336": "  @CollectionFeature.Require(ALLOWS_NULL_VALUES)\n",
        "337": "  public void testSetCount_noOpNull_nullSupported() {\n",
        "338": "    try {\n",
        "339": "      assertSetCount(null, 0);\n",
        "340": "    } catch (UnsupportedOperationException tolerated) {\n",
        "341": "    }\n",
        "342": "  }\n",
        "343": "\n",
        "344": "  @CollectionFeature.Require(absent = ALLOWS_NULL_VALUES)\n",
        "345": "  public void testSetCount_noOpNull_nullUnsupported() {\n",
        "346": "    try {\n",
        "347": "      assertSetCount(null, 0);\n",
        "348": "    } catch (NullPointerException tolerated) {\n",
        "349": "    } catch (UnsupportedOperationException tolerated) {\n",
        "350": "    }\n",
        "351": "  }\n",
        "352": "\n",
        "353": "  @CollectionSize.Require(absent = ZERO)\n",
        "354": "  @CollectionFeature.Require(ALLOWS_NULL_VALUES)\n",
        "355": "  public void testSetCount_existingNoNopNull_nullSupported() {\n",
        "356": "    initCollectionWithNullElement();\n",
        "357": "    try {\n",
        "358": "      assertSetCount(null, 1);\n",
        "359": "    } catch (UnsupportedOperationException tolerated) {\n",
        "360": "    }\n",
        "361": "  }\n",
        "362": "\n",
        "363": "  // Negative count.\n",
        "364": "\n",
        "365": "  @CollectionFeature.Require(SUPPORTS_REMOVE)\n",
        "366": "  public void testSetCount_negative_removeSupported() {\n",
        "367": "    try {\n",
        "368": "      setCountNoCheckReturnValue(e3(), -1);\n",
        "369": "      fail(\"calling setCount() with a negative count should throw \"\n",
        "370": "          + \"IllegalArgumentException\");\n",
        "371": "    } catch (IllegalArgumentException expected) {\n",
        "372": "    }\n",
        "373": "  }\n",
        "374": "\n",
        "375": "  @CollectionFeature.Require(absent = SUPPORTS_REMOVE)\n",
        "376": "  public void testSetCount_negative_removeUnsupported() {\n",
        "377": "    try {\n",
        "378": "      setCountNoCheckReturnValue(e3(), -1);\n",
        "379": "      fail(\"calling setCount() with a negative count should throw \"\n",
        "380": "          + \"IllegalArgumentException or UnsupportedOperationException\");\n",
        "381": "    } catch (IllegalArgumentException expected) {\n",
        "382": "    } catch (UnsupportedOperationException expected) {\n",
        "383": "    }\n",
        "384": "  }\n",
        "385": "\n",
        "386": "  // TODO: test adding element of wrong type\n",
        "387": "}\n",
        "388": "\n"
    }
}