{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.collect.testing.google.TestStringBiMapGenerator;\n",
        "21": "\n",
        "22": "import junit.framework.TestCase;\n",
        "23": "\n",
        "24": "import java.util.Iterator;\n",
        "25": "import java.util.Map;\n",
        "26": "import java.util.Map.Entry;\n",
        "27": "import java.util.Set;\n",
        "28": "\n",
        "29": "/**\n",
        "30": " * Tests for {@link HashBiMap}.\n",
        "31": " *\n",
        "32": " * @author Mike Bostock\n",
        "33": " */\n",
        "34": "@GwtCompatible(emulated = true)\n",
        "35": "public class HashBiMapTest extends TestCase {\n",
        "36": "\n",
        "37": "  public static final class HashBiMapGenerator extends TestStringBiMapGenerator {\n",
        "38": "    @Override\n",
        "39": "    protected BiMap<String, String> create(Entry<String, String>[] entries) {\n",
        "40": "      BiMap<String, String> result = HashBiMap.create();\n",
        "41": "      for (Entry<String, String> entry : entries) {\n",
        "42": "        result.put(entry.getKey(), entry.getValue());\n",
        "43": "      }\n",
        "44": "      return result;\n",
        "45": "    }\n",
        "46": "  }\n",
        "47": "\n",
        "48": "  public void testMapConstructor() {\n",
        "49": "    /* Test with non-empty Map. */\n",
        "50": "    Map<String, String> map = ImmutableMap.of(\n",
        "51": "        \"canada\", \"dollar\",\n",
        "52": "        \"chile\", \"peso\",\n",
        "53": "        \"switzerland\", \"franc\");\n",
        "54": "    HashBiMap<String, String> bimap = HashBiMap.create(map);\n",
        "55": "    assertEquals(\"dollar\", bimap.get(\"canada\"));\n",
        "56": "    assertEquals(\"canada\", bimap.inverse().get(\"dollar\"));\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  private static final int N = 1000;\n",
        "60": "\n",
        "61": "  public void testBashIt() throws Exception {\n",
        "62": "    BiMap<Integer, Integer> bimap = HashBiMap.create(N);\n",
        "63": "    BiMap<Integer, Integer> inverse = bimap.inverse();\n",
        "64": "\n",
        "65": "    for (int i = 0; i < N; i++) {\n",
        "66": "      assertNull(bimap.put(2 * i, 2 * i + 1));\n",
        "67": "    }\n",
        "68": "    for (int i = 0; i < N; i++) {\n",
        "69": "      assertEquals(2 * i + 1, (int) bimap.get(2 * i));\n",
        "70": "    }\n",
        "71": "    for (int i = 0; i < N; i++) {\n",
        "72": "      assertEquals(2 * i, (int) inverse.get(2 * i + 1));\n",
        "73": "    }\n",
        "74": "    for (int i = 0; i < N; i++) {\n",
        "75": "      int oldValue = bimap.get(2 * i);\n",
        "76": "      assertEquals(2 * i + 1, (int) bimap.put(2 * i, oldValue - 2));\n",
        "77": "    }\n",
        "78": "    for (int i = 0; i < N; i++) {\n",
        "79": "      assertEquals(2 * i - 1, (int) bimap.get(2 * i));\n",
        "80": "    }\n",
        "81": "    for (int i = 0; i < N; i++) {\n",
        "82": "      assertEquals(2 * i, (int) inverse.get(2 * i - 1));\n",
        "83": "    }\n",
        "84": "    Set<Entry<Integer, Integer>> entries = bimap.entrySet();\n",
        "85": "    for (Entry<Integer, Integer> entry : entries) {\n",
        "86": "      entry.setValue(entry.getValue() + 2 * N);\n",
        "87": "    }\n",
        "88": "    for (int i = 0; i < N; i++) {\n",
        "89": "      assertEquals(2 * N + 2 * i - 1, (int) bimap.get(2 * i));\n",
        "90": "    }\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  public void testBiMapEntrySetIteratorRemove() {\n",
        "94": "    BiMap<Integer, String> map = HashBiMap.create();\n",
        "95": "    map.put(1, \"one\");\n",
        "96": "    Set<Map.Entry<Integer, String>> entries = map.entrySet();\n",
        "97": "    Iterator<Map.Entry<Integer, String>> iterator = entries.iterator();\n",
        "98": "    Map.Entry<Integer, String> entry = iterator.next();\n",
        "99": "    entry.setValue(\"two\"); // changes the iterator's current entry value\n",
        "100": "    assertEquals(\"two\", map.get(1));\n",
        "101": "    assertEquals(Integer.valueOf(1), map.inverse().get(\"two\"));\n",
        "102": "    iterator.remove(); // removes the updated entry\n",
        "103": "    assertTrue(map.isEmpty());\n",
        "104": "  }\n",
        "105": "  \n",
        "106": "  public void testInverseEntrySetValue() {\n",
        "107": "    BiMap<Integer, String> map = HashBiMap.create();\n",
        "108": "    map.put(1, \"one\");\n",
        "109": "    Entry<String, Integer> inverseEntry = Iterables.getOnlyElement(map.inverse().entrySet());\n",
        "110": "    inverseEntry.setValue(2);\n",
        "111": "    assertEquals(Integer.valueOf(2), inverseEntry.getValue());\n",
        "112": "  }\n",
        "113": "}\n",
        "114": "\n"
    }
}