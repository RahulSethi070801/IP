{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2009 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.base.Joiner;\n",
        "23": "import com.google.common.collect.ImmutableSortedMap.Builder;\n",
        "24": "import com.google.common.collect.testing.SortedMapInterfaceTest;\n",
        "25": "\n",
        "26": "import junit.framework.TestCase;\n",
        "27": "\n",
        "28": "import java.io.Serializable;\n",
        "29": "import java.util.Collections;\n",
        "30": "import java.util.Comparator;\n",
        "31": "import java.util.LinkedHashMap;\n",
        "32": "import java.util.Map;\n",
        "33": "import java.util.Map.Entry;\n",
        "34": "import java.util.SortedMap;\n",
        "35": "\n",
        "36": "/**\n",
        "37": " * Tests for {@link ImmutableSortedMap}.\n",
        "38": " *\n",
        "39": " * @author Kevin Bourrillion\n",
        "40": " * @author Jesse Wilson\n",
        "41": " * @author Jared Levy\n",
        "42": " */\n",
        "43": "@GwtCompatible(emulated = true)\n",
        "44": "public class ImmutableSortedMapTest extends TestCase {\n",
        "45": "  // TODO: Avoid duplicating code in ImmutableMapTest\n",
        "46": "\n",
        "47": "  public abstract static class AbstractMapTests<K, V>\n",
        "48": "      extends SortedMapInterfaceTest<K, V> {\n",
        "49": "    public AbstractMapTests() {\n",
        "50": "      super(false, false, false, false, false);\n",
        "51": "    }\n",
        "52": "\n",
        "53": "    @Override protected SortedMap<K, V> makeEmptyMap() {\n",
        "54": "      throw new UnsupportedOperationException();\n",
        "55": "    }\n",
        "56": "\n",
        "57": "    private static final Joiner joiner = Joiner.on(\", \");\n",
        "58": "\n",
        "59": "    @Override protected void assertMoreInvariants(Map<K, V> map) {\n",
        "60": "      // TODO: can these be moved to MapInterfaceTest?\n",
        "61": "      for (Entry<K, V> entry : map.entrySet()) {\n",
        "62": "        assertEquals(entry.getKey() + \"=\" + entry.getValue(),\n",
        "63": "            entry.toString());\n",
        "64": "      }\n",
        "65": "\n",
        "66": "      assertEquals(\"{\" + joiner.join(map.entrySet()) + \"}\",\n",
        "67": "          map.toString());\n",
        "68": "      assertEquals(\"[\" + joiner.join(map.entrySet()) + \"]\",\n",
        "69": "          map.entrySet().toString());\n",
        "70": "      assertEquals(\"[\" + joiner.join(map.keySet()) + \"]\",\n",
        "71": "          map.keySet().toString());\n",
        "72": "      assertEquals(\"[\" + joiner.join(map.values()) + \"]\",\n",
        "73": "          map.values().toString());\n",
        "74": "\n",
        "75": "      assertEquals(Sets.newHashSet(map.entrySet()), map.entrySet());\n",
        "76": "      assertEquals(Sets.newHashSet(map.keySet()), map.keySet());\n",
        "77": "    }\n",
        "78": "  }\n",
        "79": "\n",
        "80": "  public static class MapTests extends AbstractMapTests<String, Integer> {\n",
        "81": "    @Override protected SortedMap<String, Integer> makeEmptyMap() {\n",
        "82": "      return ImmutableSortedMap.of();\n",
        "83": "    }\n",
        "84": "\n",
        "85": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "86": "      return ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3);\n",
        "87": "    }\n",
        "88": "\n",
        "89": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "90": "      return \"minus one\";\n",
        "91": "    }\n",
        "92": "\n",
        "93": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "94": "      return -1;\n",
        "95": "    }\n",
        "96": "  }\n",
        "97": "\n",
        "98": "  public static class SingletonMapTests\n",
        "99": "      extends AbstractMapTests<String, Integer> {\n",
        "100": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "101": "      return ImmutableSortedMap.of(\"one\", 1);\n",
        "102": "    }\n",
        "103": "\n",
        "104": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "105": "      return \"minus one\";\n",
        "106": "    }\n",
        "107": "\n",
        "108": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "109": "      return -1;\n",
        "110": "    }\n",
        "111": "  }\n",
        "112": "\n",
        "113": "  public static class HeadMapTests extends AbstractMapTests<String, Integer> {\n",
        "114": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "115": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5)\n",
        "116": "          .headMap(\"d\");\n",
        "117": "    }\n",
        "118": "\n",
        "119": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "120": "      return \"d\";\n",
        "121": "    }\n",
        "122": "\n",
        "123": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "124": "      return 4;\n",
        "125": "    }\n",
        "126": "  }\n",
        "127": "\n",
        "128": "  public static class HeadMapInclusiveTests extends AbstractMapTests<String, Integer> {\n",
        "129": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "130": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5)\n",
        "131": "          .headMap(\"c\", true);\n",
        "132": "    }\n",
        "133": "\n",
        "134": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "135": "      return \"d\";\n",
        "136": "    }\n",
        "137": "\n",
        "138": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "139": "      return 4;\n",
        "140": "    }\n",
        "141": "  }\n",
        "142": "\n",
        "143": "  public static class TailMapTests extends AbstractMapTests<String, Integer> {\n",
        "144": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "145": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5)\n",
        "146": "          .tailMap(\"b\");\n",
        "147": "    }\n",
        "148": "\n",
        "149": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "150": "      return \"a\";\n",
        "151": "    }\n",
        "152": "\n",
        "153": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "154": "      return 1;\n",
        "155": "    }\n",
        "156": "  }\n",
        "157": "\n",
        "158": "  public static class TailExclusiveMapTests extends AbstractMapTests<String, Integer> {\n",
        "159": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "160": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5)\n",
        "161": "          .tailMap(\"a\", false);\n",
        "162": "    }\n",
        "163": "\n",
        "164": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "165": "      return \"a\";\n",
        "166": "    }\n",
        "167": "\n",
        "168": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "169": "      return 1;\n",
        "170": "    }\n",
        "171": "  }\n",
        "172": "\n",
        "173": "  public static class SubMapTests extends AbstractMapTests<String, Integer> {\n",
        "174": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "175": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5)\n",
        "176": "          .subMap(\"b\", \"d\");\n",
        "177": "    }\n",
        "178": "\n",
        "179": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "180": "      return \"a\";\n",
        "181": "    }\n",
        "182": "\n",
        "183": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "184": "      return 4;\n",
        "185": "    }\n",
        "186": "  }\n",
        "187": "\n",
        "188": "  public static class CreationTests extends TestCase {\n",
        "189": "    public void testEmptyBuilder() {\n",
        "190": "      ImmutableSortedMap<String, Integer> map\n",
        "191": "          = ImmutableSortedMap.<String, Integer>naturalOrder().build();\n",
        "192": "      assertEquals(Collections.<String, Integer>emptyMap(), map);\n",
        "193": "    }\n",
        "194": "\n",
        "195": "    public void testSingletonBuilder() {\n",
        "196": "      ImmutableSortedMap<String, Integer> map\n",
        "197": "          = ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "198": "              .put(\"one\", 1)\n",
        "199": "              .build();\n",
        "200": "      assertMapEquals(map, \"one\", 1);\n",
        "201": "    }\n",
        "202": "\n",
        "203": "    public void testBuilder() {\n",
        "204": "      ImmutableSortedMap<String, Integer> map\n",
        "205": "          = ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "206": "              .put(\"one\", 1)\n",
        "207": "              .put(\"two\", 2)\n",
        "208": "              .put(\"three\", 3)\n",
        "209": "              .put(\"four\", 4)\n",
        "210": "              .put(\"five\", 5)\n",
        "211": "              .build();\n",
        "212": "      assertMapEquals(map,\n",
        "213": "          \"five\", 5, \"four\", 4, \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "214": "    }\n",
        "215": "    \n",
        "216": "    public void testBuilder_orderEntriesByValueFails() {\n",
        "217": "      ImmutableSortedMap.Builder<String, Integer> builder = ImmutableSortedMap.naturalOrder();\n",
        "218": "      try {\n",
        "219": "        builder.orderEntriesByValue(Ordering.natural());\n",
        "220": "        fail(\"Expected UnsupportedOperationException\");\n",
        "221": "      } catch (UnsupportedOperationException expected) {}\n",
        "222": "    }\n",
        "223": "\n",
        "224": "    public void testBuilder_withImmutableEntry() {\n",
        "225": "      ImmutableSortedMap<String, Integer> map =\n",
        "226": "          ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "227": "              .put(Maps.immutableEntry(\"one\", 1))\n",
        "228": "              .build();\n",
        "229": "      assertMapEquals(map, \"one\", 1);\n",
        "230": "    }\n",
        "231": "\n",
        "232": "    public void testBuilder_withImmutableEntryAndNullContents() {\n",
        "233": "      Builder<String, Integer> builder =\n",
        "234": "          ImmutableSortedMap.naturalOrder();\n",
        "235": "      try {\n",
        "236": "        builder.put(Maps.immutableEntry(\"one\", (Integer) null));\n",
        "237": "        fail();\n",
        "238": "      } catch (NullPointerException expected) {\n",
        "239": "      }\n",
        "240": "      try {\n",
        "241": "        builder.put(Maps.immutableEntry((String) null, 1));\n",
        "242": "        fail();\n",
        "243": "      } catch (NullPointerException expected) {\n",
        "244": "      }\n",
        "245": "    }\n",
        "246": "\n",
        "247": "    private static class StringHolder {\n",
        "248": "      String string;\n",
        "249": "    }\n",
        "250": "\n",
        "251": "    public void testBuilder_withMutableEntry() {\n",
        "252": "      ImmutableSortedMap.Builder<String, Integer> builder =\n",
        "253": "          ImmutableSortedMap.naturalOrder();\n",
        "254": "      final StringHolder holder = new StringHolder();\n",
        "255": "      holder.string = \"one\";\n",
        "256": "      Entry<String, Integer> entry = new AbstractMapEntry<String, Integer>() {\n",
        "257": "        @Override public String getKey() {\n",
        "258": "          return holder.string;\n",
        "259": "        }\n",
        "260": "        @Override public Integer getValue() {\n",
        "261": "          return 1;\n",
        "262": "        }\n",
        "263": "      };\n",
        "264": "\n",
        "265": "      builder.put(entry);\n",
        "266": "      holder.string = \"two\";\n",
        "267": "      assertMapEquals(builder.build(), \"one\", 1);\n",
        "268": "    }\n",
        "269": "\n",
        "270": "    public void testBuilderPutAllWithEmptyMap() {\n",
        "271": "      ImmutableSortedMap<String, Integer> map\n",
        "272": "          = ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "273": "              .putAll(Collections.<String, Integer>emptyMap())\n",
        "274": "              .build();\n",
        "275": "      assertEquals(Collections.<String, Integer>emptyMap(), map);\n",
        "276": "    }\n",
        "277": "\n",
        "278": "    public void testBuilderPutAll() {\n",
        "279": "      Map<String, Integer> toPut = new LinkedHashMap<String, Integer>();\n",
        "280": "      toPut.put(\"one\", 1);\n",
        "281": "      toPut.put(\"two\", 2);\n",
        "282": "      toPut.put(\"three\", 3);\n",
        "283": "      Map<String, Integer> moreToPut = new LinkedHashMap<String, Integer>();\n",
        "284": "      moreToPut.put(\"four\", 4);\n",
        "285": "      moreToPut.put(\"five\", 5);\n",
        "286": "\n",
        "287": "      ImmutableSortedMap<String, Integer> map\n",
        "288": "          = ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "289": "              .putAll(toPut)\n",
        "290": "              .putAll(moreToPut)\n",
        "291": "              .build();\n",
        "292": "      assertMapEquals(map,\n",
        "293": "          \"five\", 5, \"four\", 4, \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "294": "    }\n",
        "295": "\n",
        "296": "    public void testBuilderReuse() {\n",
        "297": "      Builder<String, Integer> builder = ImmutableSortedMap.naturalOrder();\n",
        "298": "      ImmutableSortedMap<String, Integer> mapOne = builder\n",
        "299": "          .put(\"one\", 1)\n",
        "300": "          .put(\"two\", 2)\n",
        "301": "          .build();\n",
        "302": "      ImmutableSortedMap<String, Integer> mapTwo = builder\n",
        "303": "          .put(\"three\", 3)\n",
        "304": "          .put(\"four\", 4)\n",
        "305": "          .build();\n",
        "306": "\n",
        "307": "      assertMapEquals(mapOne, \"one\", 1, \"two\", 2);\n",
        "308": "      assertMapEquals(mapTwo, \"four\", 4, \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "309": "    }\n",
        "310": "\n",
        "311": "    public void testBuilderPutNullKey() {\n",
        "312": "      Builder<String, Integer> builder = ImmutableSortedMap.naturalOrder();\n",
        "313": "      try {\n",
        "314": "        builder.put(null, 1);\n",
        "315": "        fail();\n",
        "316": "      } catch (NullPointerException expected) {\n",
        "317": "      }\n",
        "318": "    }\n",
        "319": "\n",
        "320": "    public void testBuilderPutNullValue() {\n",
        "321": "      Builder<String, Integer> builder = ImmutableSortedMap.naturalOrder();\n",
        "322": "      try {\n",
        "323": "        builder.put(\"one\", null);\n",
        "324": "        fail();\n",
        "325": "      } catch (NullPointerException expected) {\n",
        "326": "      }\n",
        "327": "    }\n",
        "328": "\n",
        "329": "    public void testBuilderPutNullKeyViaPutAll() {\n",
        "330": "      Builder<String, Integer> builder = ImmutableSortedMap.naturalOrder();\n",
        "331": "      try {\n",
        "332": "        builder.putAll(Collections.<String, Integer>singletonMap(null, 1));\n",
        "333": "        fail();\n",
        "334": "      } catch (NullPointerException expected) {\n",
        "335": "      }\n",
        "336": "    }\n",
        "337": "\n",
        "338": "    public void testBuilderPutNullValueViaPutAll() {\n",
        "339": "      Builder<String, Integer> builder = ImmutableSortedMap.naturalOrder();\n",
        "340": "      try {\n",
        "341": "        builder.putAll(Collections.<String, Integer>singletonMap(\"one\", null));\n",
        "342": "        fail();\n",
        "343": "      } catch (NullPointerException expected) {\n",
        "344": "      }\n",
        "345": "    }\n",
        "346": "\n",
        "347": "    public void testPuttingTheSameKeyTwiceThrowsOnBuild() {\n",
        "348": "      Builder<String, Integer> builder\n",
        "349": "          = ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "350": "              .put(\"one\", 1)\n",
        "351": "              .put(\"one\", 2); // throwing on this line would be even better\n",
        "352": "\n",
        "353": "      try {\n",
        "354": "        builder.build();\n",
        "355": "        fail();\n",
        "356": "      } catch (IllegalArgumentException expected) {\n",
        "357": "      }\n",
        "358": "    }\n",
        "359": "\n",
        "360": "    public void testOf() {\n",
        "361": "      assertMapEquals(\n",
        "362": "          ImmutableSortedMap.of(\"one\", 1),\n",
        "363": "          \"one\", 1);\n",
        "364": "      assertMapEquals(\n",
        "365": "          ImmutableSortedMap.of(\"one\", 1, \"two\", 2),\n",
        "366": "          \"one\", 1, \"two\", 2);\n",
        "367": "      assertMapEquals(\n",
        "368": "          ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3),\n",
        "369": "          \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "370": "      assertMapEquals(\n",
        "371": "          ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4),\n",
        "372": "          \"four\", 4, \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "373": "      assertMapEquals(\n",
        "374": "          ImmutableSortedMap.of(\n",
        "375": "              \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5),\n",
        "376": "          \"five\", 5, \"four\", 4, \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "377": "    }\n",
        "378": "\n",
        "379": "    public void testOfNullKey() {\n",
        "380": "      Integer n = null;\n",
        "381": "      try {\n",
        "382": "        ImmutableSortedMap.of(n, 1);\n",
        "383": "        fail();\n",
        "384": "      } catch (NullPointerException expected) {\n",
        "385": "      }\n",
        "386": "\n",
        "387": "      try {\n",
        "388": "        ImmutableSortedMap.of(\"one\", 1, null, 2);\n",
        "389": "        fail();\n",
        "390": "      } catch (NullPointerException expected) {\n",
        "391": "      }\n",
        "392": "    }\n",
        "393": "\n",
        "394": "    public void testOfNullValue() {\n",
        "395": "      try {\n",
        "396": "        ImmutableSortedMap.of(\"one\", null);\n",
        "397": "        fail();\n",
        "398": "      } catch (NullPointerException expected) {\n",
        "399": "      }\n",
        "400": "\n",
        "401": "      try {\n",
        "402": "        ImmutableSortedMap.of(\"one\", 1, \"two\", null);\n",
        "403": "        fail();\n",
        "404": "      } catch (NullPointerException expected) {\n",
        "405": "      }\n",
        "406": "    }\n",
        "407": "\n",
        "408": "    public void testOfWithDuplicateKey() {\n",
        "409": "      try {\n",
        "410": "        ImmutableSortedMap.of(\"one\", 1, \"one\", 1);\n",
        "411": "        fail();\n",
        "412": "      } catch (IllegalArgumentException expected) {\n",
        "413": "      }\n",
        "414": "    }\n",
        "415": "\n",
        "416": "    public void testCopyOfEmptyMap() {\n",
        "417": "      ImmutableSortedMap<String, Integer> copy\n",
        "418": "          = ImmutableSortedMap.copyOf(Collections.<String, Integer>emptyMap());\n",
        "419": "      assertEquals(Collections.<String, Integer>emptyMap(), copy);\n",
        "420": "      assertSame(copy, ImmutableSortedMap.copyOf(copy));\n",
        "421": "      assertSame(Ordering.natural(), copy.comparator());\n",
        "422": "    }\n",
        "423": "\n",
        "424": "    public void testCopyOfSingletonMap() {\n",
        "425": "      ImmutableSortedMap<String, Integer> copy\n",
        "426": "          = ImmutableSortedMap.copyOf(Collections.singletonMap(\"one\", 1));\n",
        "427": "      assertMapEquals(copy, \"one\", 1);\n",
        "428": "      assertSame(copy, ImmutableSortedMap.copyOf(copy));\n",
        "429": "      assertSame(Ordering.natural(), copy.comparator());\n",
        "430": "    }\n",
        "431": "\n",
        "432": "    public void testCopyOf() {\n",
        "433": "      Map<String, Integer> original = new LinkedHashMap<String, Integer>();\n",
        "434": "      original.put(\"one\", 1);\n",
        "435": "      original.put(\"two\", 2);\n",
        "436": "      original.put(\"three\", 3);\n",
        "437": "\n",
        "438": "      ImmutableSortedMap<String, Integer> copy\n",
        "439": "          = ImmutableSortedMap.copyOf(original);\n",
        "440": "      assertMapEquals(copy, \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "441": "      assertSame(copy, ImmutableSortedMap.copyOf(copy));\n",
        "442": "      assertSame(Ordering.natural(), copy.comparator());\n",
        "443": "    }\n",
        "444": "\n",
        "445": "    public void testCopyOfExplicitComparator() {\n",
        "446": "      Comparator<String> comparator = Ordering.natural().reverse();\n",
        "447": "      Map<String, Integer> original = new LinkedHashMap<String, Integer>();\n",
        "448": "      original.put(\"one\", 1);\n",
        "449": "      original.put(\"two\", 2);\n",
        "450": "      original.put(\"three\", 3);\n",
        "451": "\n",
        "452": "      ImmutableSortedMap<String, Integer> copy\n",
        "453": "          = ImmutableSortedMap.copyOf(original, comparator);\n",
        "454": "      assertMapEquals(copy, \"two\", 2, \"three\", 3, \"one\", 1);\n",
        "455": "      assertSame(copy, ImmutableSortedMap.copyOf(copy, comparator));\n",
        "456": "      assertSame(comparator, copy.comparator());\n",
        "457": "    }\n",
        "458": "\n",
        "459": "    public void testCopyOfImmutableSortedSetDifferentComparator() {\n",
        "460": "      Comparator<String> comparator = Ordering.natural().reverse();\n",
        "461": "      Map<String, Integer> original\n",
        "462": "          = ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3);\n",
        "463": "      ImmutableSortedMap<String, Integer> copy\n",
        "464": "          = ImmutableSortedMap.copyOf(original, comparator);\n",
        "465": "      assertMapEquals(copy, \"two\", 2, \"three\", 3, \"one\", 1);\n",
        "466": "      assertSame(copy, ImmutableSortedMap.copyOf(copy, comparator));\n",
        "467": "      assertSame(comparator, copy.comparator());\n",
        "468": "    }\n",
        "469": "\n",
        "470": "    public void testCopyOfSortedNatural() {\n",
        "471": "      SortedMap<String, Integer> original = Maps.newTreeMap();\n",
        "472": "      original.put(\"one\", 1);\n",
        "473": "      original.put(\"two\", 2);\n",
        "474": "      original.put(\"three\", 3);\n",
        "475": "\n",
        "476": "      ImmutableSortedMap<String, Integer> copy\n",
        "477": "          = ImmutableSortedMap.copyOfSorted(original);\n",
        "478": "      assertMapEquals(copy, \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "479": "      assertSame(copy, ImmutableSortedMap.copyOfSorted(copy));\n",
        "480": "      assertSame(Ordering.natural(), copy.comparator());\n",
        "481": "    }\n",
        "482": "\n",
        "483": "    public void testCopyOfSortedExplicit() {\n",
        "484": "      Comparator<String> comparator = Ordering.natural().reverse();\n",
        "485": "      SortedMap<String, Integer> original = Maps.newTreeMap(comparator);\n",
        "486": "      original.put(\"one\", 1);\n",
        "487": "      original.put(\"two\", 2);\n",
        "488": "      original.put(\"three\", 3);\n",
        "489": "\n",
        "490": "      ImmutableSortedMap<String, Integer> copy\n",
        "491": "          = ImmutableSortedMap.copyOfSorted(original);\n",
        "492": "      assertMapEquals(copy, \"two\", 2, \"three\", 3, \"one\", 1);\n",
        "493": "      assertSame(copy, ImmutableSortedMap.copyOfSorted(copy));\n",
        "494": "      assertSame(comparator, copy.comparator());\n",
        "495": "    }\n",
        "496": "\n",
        "497": "    private static class IntegerDiv10 implements Comparable<IntegerDiv10> {\n",
        "498": "      final int value;\n",
        "499": "\n",
        "500": "      IntegerDiv10(int value) {\n",
        "501": "        this.value = value;\n",
        "502": "      }\n",
        "503": "\n",
        "504": "      @Override\n",
        "505": "      public int compareTo(IntegerDiv10 o) {\n",
        "506": "        return value / 10 - o.value / 10;\n",
        "507": "      }\n",
        "508": "\n",
        "509": "      @Override public String toString() {\n",
        "510": "        return Integer.toString(value);\n",
        "511": "      }\n",
        "512": "    }\n",
        "513": "\n",
        "514": "    public void testCopyOfDuplicateKey() {\n",
        "515": "      Map<IntegerDiv10, String> original = ImmutableMap.of(\n",
        "516": "          new IntegerDiv10(3), \"three\",\n",
        "517": "          new IntegerDiv10(20), \"twenty\",\n",
        "518": "          new IntegerDiv10(11), \"eleven\",\n",
        "519": "          new IntegerDiv10(35), \"thirty five\",\n",
        "520": "          new IntegerDiv10(12), \"twelve\"\n",
        "521": "      );\n",
        "522": "\n",
        "523": "      try {\n",
        "524": "        ImmutableSortedMap.copyOf(original);\n",
        "525": "        fail(\"Expected IllegalArgumentException\");\n",
        "526": "      } catch (IllegalArgumentException expected) {\n",
        "527": "      }\n",
        "528": "    }\n",
        "529": "\n",
        "530": "    public void testImmutableMapCopyOfImmutableSortedMap() {\n",
        "531": "      IntegerDiv10 three = new IntegerDiv10(3);\n",
        "532": "      IntegerDiv10 eleven = new IntegerDiv10(11);\n",
        "533": "      IntegerDiv10 twelve = new IntegerDiv10(12);\n",
        "534": "      IntegerDiv10 twenty = new IntegerDiv10(20);\n",
        "535": "      Map<IntegerDiv10, String> original = ImmutableSortedMap.of(\n",
        "536": "          three, \"three\", eleven, \"eleven\", twenty, \"twenty\");\n",
        "537": "      Map<IntegerDiv10, String> copy = ImmutableMap.copyOf(original);\n",
        "538": "      assertTrue(original.containsKey(twelve));\n",
        "539": "      assertFalse(copy.containsKey(twelve));\n",
        "540": "    }\n",
        "541": "\n",
        "542": "    public void testBuilderReverseOrder() {\n",
        "543": "      ImmutableSortedMap<String, Integer> map\n",
        "544": "          = ImmutableSortedMap.<String, Integer>reverseOrder()\n",
        "545": "              .put(\"one\", 1)\n",
        "546": "              .put(\"two\", 2)\n",
        "547": "              .put(\"three\", 3)\n",
        "548": "              .put(\"four\", 4)\n",
        "549": "              .put(\"five\", 5)\n",
        "550": "              .build();\n",
        "551": "      assertMapEquals(map,\n",
        "552": "          \"two\", 2, \"three\", 3, \"one\", 1, \"four\", 4, \"five\", 5);\n",
        "553": "      assertEquals(Ordering.natural().reverse(), map.comparator());\n",
        "554": "    }\n",
        "555": "\n",
        "556": "    public void testBuilderComparator() {\n",
        "557": "      Comparator<String> comparator = Ordering.natural().reverse();\n",
        "558": "      ImmutableSortedMap<String, Integer> map\n",
        "559": "          = new ImmutableSortedMap.Builder<String, Integer>(comparator)\n",
        "560": "              .put(\"one\", 1)\n",
        "561": "              .put(\"two\", 2)\n",
        "562": "              .put(\"three\", 3)\n",
        "563": "              .put(\"four\", 4)\n",
        "564": "              .put(\"five\", 5)\n",
        "565": "              .build();\n",
        "566": "      assertMapEquals(map,\n",
        "567": "          \"two\", 2, \"three\", 3, \"one\", 1, \"four\", 4, \"five\", 5);\n",
        "568": "      assertSame(comparator, map.comparator());\n",
        "569": "    }\n",
        "570": "  }\n",
        "571": "\n",
        "572": "  public void testNullGet() {\n",
        "573": "    ImmutableSortedMap<String, Integer> map = ImmutableSortedMap.of(\"one\", 1);\n",
        "574": "    assertNull(map.get(null));\n",
        "575": "  }\n",
        "576": "\n",
        "577": "  private static <K, V> void assertMapEquals(Map<K, V> map,\n",
        "578": "      Object... alternatingKeysAndValues) {\n",
        "579": "    assertEquals(map.size(), alternatingKeysAndValues.length / 2);\n",
        "580": "    int i = 0;\n",
        "581": "    for (Entry<K, V> entry : map.entrySet()) {\n",
        "582": "      assertEquals(alternatingKeysAndValues[i++], entry.getKey());\n",
        "583": "      assertEquals(alternatingKeysAndValues[i++], entry.getValue());\n",
        "584": "    }\n",
        "585": "  }\n",
        "586": "\n",
        "587": "  private static class IntHolder implements Serializable {\n",
        "588": "    public int value;\n",
        "589": "\n",
        "590": "    public IntHolder(int value) {\n",
        "591": "      this.value = value;\n",
        "592": "    }\n",
        "593": "\n",
        "594": "    @Override public boolean equals(Object o) {\n",
        "595": "      return (o instanceof IntHolder) && ((IntHolder) o).value == value;\n",
        "596": "    }\n",
        "597": "\n",
        "598": "    @Override public int hashCode() {\n",
        "599": "      return value;\n",
        "600": "    }\n",
        "601": "\n",
        "602": "    private static final long serialVersionUID = 5;\n",
        "603": "  }\n",
        "604": "\n",
        "605": "  public void testMutableValues() {\n",
        "606": "    IntHolder holderA = new IntHolder(1);\n",
        "607": "    IntHolder holderB = new IntHolder(2);\n",
        "608": "    Map<String, IntHolder> map\n",
        "609": "        = ImmutableSortedMap.of(\"a\", holderA, \"b\", holderB);\n",
        "610": "    holderA.value = 3;\n",
        "611": "    assertTrue(map.entrySet().contains(Maps.immutableEntry(\"a\", new IntHolder(3))));\n",
        "612": "    Map<String, Integer> intMap\n",
        "613": "        = ImmutableSortedMap.of(\"a\", 3, \"b\", 2);\n",
        "614": "    assertEquals(intMap.hashCode(), map.entrySet().hashCode());\n",
        "615": "    assertEquals(intMap.hashCode(), map.hashCode());\n",
        "616": "  }\n",
        "617": "\n",
        "618": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "619": "  public void testHeadMapInclusive() {\n",
        "620": "    Map<String, Integer> map =\n",
        "621": "        ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3).headMap(\"three\", true);\n",
        "622": "    assertThat(map.entrySet()).containsExactly(\n",
        "623": "        Maps.immutableEntry(\"one\", 1),\n",
        "624": "        Maps.immutableEntry(\"three\", 3)).inOrder();\n",
        "625": "  }\n",
        "626": "\n",
        "627": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "628": "  public void testHeadMapExclusive() {\n",
        "629": "    Map<String, Integer> map =\n",
        "630": "        ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3).headMap(\"three\", false);\n",
        "631": "    assertThat(map.entrySet()).containsExactly(Maps.immutableEntry(\"one\", 1));\n",
        "632": "  }\n",
        "633": "\n",
        "634": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "635": "  public void testTailMapInclusive() {\n",
        "636": "    Map<String, Integer> map =\n",
        "637": "        ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3).tailMap(\"three\", true);\n",
        "638": "    assertThat(map.entrySet()).containsExactly(Maps.immutableEntry(\"three\", 3),\n",
        "639": "        Maps.immutableEntry(\"two\", 2)).inOrder();\n",
        "640": "  }\n",
        "641": "\n",
        "642": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "643": "  public void testTailMapExclusive() {\n",
        "644": "    Map<String, Integer> map =\n",
        "645": "        ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3).tailMap(\"three\", false);\n",
        "646": "    assertThat(map.entrySet()).containsExactly(Maps.immutableEntry(\"two\", 2));\n",
        "647": "  }\n",
        "648": "\n",
        "649": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "650": "  public void testSubMapExclusiveExclusive() {\n",
        "651": "    Map<String, Integer> map =\n",
        "652": "        ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3).subMap(\"one\", false, \"two\", false);\n",
        "653": "    assertThat(map.entrySet()).containsExactly(Maps.immutableEntry(\"three\", 3));\n",
        "654": "  }\n",
        "655": "\n",
        "656": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "657": "  public void testSubMapInclusiveExclusive() {\n",
        "658": "    Map<String, Integer> map =\n",
        "659": "        ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3).subMap(\"one\", true, \"two\", false);\n",
        "660": "    assertThat(map.entrySet()).containsExactly(Maps.immutableEntry(\"one\", 1),\n",
        "661": "        Maps.immutableEntry(\"three\", 3)).inOrder();\n",
        "662": "  }\n",
        "663": "\n",
        "664": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "665": "  public void testSubMapExclusiveInclusive() {\n",
        "666": "    Map<String, Integer> map =\n",
        "667": "        ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3).subMap(\"one\", false, \"two\", true);\n",
        "668": "    assertThat(map.entrySet()).containsExactly(Maps.immutableEntry(\"three\", 3),\n",
        "669": "        Maps.immutableEntry(\"two\", 2)).inOrder();\n",
        "670": "  }\n",
        "671": "\n",
        "672": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "673": "  public void testSubMapInclusiveInclusive() {\n",
        "674": "    Map<String, Integer> map =\n",
        "675": "        ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3).subMap(\"one\", true, \"two\", true);\n",
        "676": "    assertThat(map.entrySet()).containsExactly(Maps.immutableEntry(\"one\", 1),\n",
        "677": "        Maps.immutableEntry(\"three\", 3), Maps.immutableEntry(\"two\", 2)).inOrder();\n",
        "678": "  }\n",
        "679": "\n",
        "680": "  private static class SelfComparableExample implements Comparable<SelfComparableExample> {\n",
        "681": "    @Override\n",
        "682": "    public int compareTo(SelfComparableExample o) {\n",
        "683": "      return 0;\n",
        "684": "    }\n",
        "685": "  }\n",
        "686": "\n",
        "687": "  public void testBuilderGenerics_SelfComparable() {\n",
        "688": "    ImmutableSortedMap.Builder<SelfComparableExample, Object> natural =\n",
        "689": "        ImmutableSortedMap.naturalOrder();\n",
        "690": "\n",
        "691": "    ImmutableSortedMap.Builder<SelfComparableExample, Object> reverse =\n",
        "692": "        ImmutableSortedMap.reverseOrder();\n",
        "693": "  }\n",
        "694": "\n",
        "695": "  private static class SuperComparableExample extends SelfComparableExample {}\n",
        "696": "\n",
        "697": "  public void testBuilderGenerics_SuperComparable() {\n",
        "698": "    ImmutableSortedMap.Builder<SuperComparableExample, Object> natural =\n",
        "699": "        ImmutableSortedMap.naturalOrder();\n",
        "700": "\n",
        "701": "    ImmutableSortedMap.Builder<SuperComparableExample, Object> reverse =\n",
        "702": "        ImmutableSortedMap.reverseOrder();\n",
        "703": "  }\n",
        "704": "}\n",
        "705": "\n"
    }
}