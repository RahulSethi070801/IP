{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.base;\n",
        "18": "\n",
        "19": "import static com.google.common.base.CharMatcher.anyOf;\n",
        "20": "import static com.google.common.base.CharMatcher.breakingWhitespace;\n",
        "21": "import static com.google.common.base.CharMatcher.forPredicate;\n",
        "22": "import static com.google.common.base.CharMatcher.inRange;\n",
        "23": "import static com.google.common.base.CharMatcher.is;\n",
        "24": "import static com.google.common.base.CharMatcher.isNot;\n",
        "25": "import static com.google.common.base.CharMatcher.noneOf;\n",
        "26": "import static com.google.common.base.CharMatcher.whitespace;\n",
        "27": "\n",
        "28": "import com.google.common.annotations.GwtCompatible;\n",
        "29": "import com.google.common.collect.Sets;\n",
        "30": "\n",
        "31": "import junit.framework.AssertionFailedError;\n",
        "32": "import junit.framework.TestCase;\n",
        "33": "\n",
        "34": "import java.util.Arrays;\n",
        "35": "import java.util.HashSet;\n",
        "36": "import java.util.Random;\n",
        "37": "import java.util.Set;\n",
        "38": "\n",
        "39": "/**\n",
        "40": " * Unit test for {@link CharMatcher}.\n",
        "41": " *\n",
        "42": " * @author Kevin Bourrillion\n",
        "43": " */\n",
        "44": "@GwtCompatible(emulated = true)\n",
        "45": "public class CharMatcherTest extends TestCase {\n",
        "46": "\n",
        "47": "  private static final CharMatcher WHATEVER = new CharMatcher() {\n",
        "48": "    @Override public boolean matches(char c) {\n",
        "49": "      throw new AssertionFailedError(\n",
        "50": "          \"You weren't supposed to actually invoke me!\");\n",
        "51": "    }\n",
        "52": "  };\n",
        "53": "\n",
        "54": "  public void testAnyAndNone_logicalOps() throws Exception {\n",
        "55": "    // These are testing behavior that's never promised by the API, but since\n",
        "56": "    // we're lucky enough that these do pass, it saves us from having to write\n",
        "57": "    // more excruciating tests! Hooray!\n",
        "58": "\n",
        "59": "    assertSame(CharMatcher.any(), CharMatcher.none().negate());\n",
        "60": "    assertSame(CharMatcher.none(), CharMatcher.any().negate());\n",
        "61": "\n",
        "62": "    assertSame(WHATEVER, CharMatcher.any().and(WHATEVER));\n",
        "63": "    assertSame(CharMatcher.any(), CharMatcher.any().or(WHATEVER));\n",
        "64": "\n",
        "65": "    assertSame(CharMatcher.none(), CharMatcher.none().and(WHATEVER));\n",
        "66": "    assertSame(WHATEVER, CharMatcher.none().or(WHATEVER));\n",
        "67": "  }\n",
        "68": "\n",
        "69": "  // The rest of the behavior of ANY and DEFAULT will be covered in the tests for\n",
        "70": "  // the text processing methods below.\n",
        "71": "\n",
        "72": "  public void testWhitespaceBreakingWhitespaceSubset() throws Exception {\n",
        "73": "    for (int c = 0; c <= Character.MAX_VALUE; c++) {\n",
        "74": "      if (breakingWhitespace().matches((char) c)) {\n",
        "75": "        assertTrue(Integer.toHexString(c), whitespace().matches((char) c));\n",
        "76": "      }\n",
        "77": "    }\n",
        "78": "  }\n",
        "79": "\n",
        "80": "  // The next tests require ICU4J and have, at least for now, been sliced out\n",
        "81": "  // of the open-source view of the tests.\n",
        "82": "\n",
        "83": "  // Omitting tests for the rest of the JAVA_* constants as these are defined\n",
        "84": "  // as extremely straightforward pass-throughs to the JDK methods.\n",
        "85": "\n",
        "86": "  // We're testing the is(), isNot(), anyOf(), noneOf() and inRange() methods\n",
        "87": "  // below by testing their text-processing methods.\n",
        "88": "\n",
        "89": "  // The organization of this test class is unusual, as it's not done by\n",
        "90": "  // method, but by overall \"scenario\". Also, the variety of actual tests we\n",
        "91": "  // do borders on absurd overkill. Better safe than sorry, though?\n",
        "92": "\n",
        "93": "  public void testEmpty() throws Exception {\n",
        "94": "    doTestEmpty(CharMatcher.any());\n",
        "95": "    doTestEmpty(CharMatcher.none());\n",
        "96": "    doTestEmpty(is('a'));\n",
        "97": "    doTestEmpty(isNot('a'));\n",
        "98": "    doTestEmpty(anyOf(\"\"));\n",
        "99": "    doTestEmpty(anyOf(\"x\"));\n",
        "100": "    doTestEmpty(anyOf(\"xy\"));\n",
        "101": "    doTestEmpty(anyOf(\"CharMatcher\"));\n",
        "102": "    doTestEmpty(noneOf(\"CharMatcher\"));\n",
        "103": "    doTestEmpty(inRange('n', 'q'));\n",
        "104": "    doTestEmpty(forPredicate(Predicates.equalTo('c')));\n",
        "105": "  }\n",
        "106": "\n",
        "107": "  private void doTestEmpty(CharMatcher matcher) throws Exception {\n",
        "108": "    reallyTestEmpty(matcher);\n",
        "109": "    reallyTestEmpty(matcher.negate());\n",
        "110": "    reallyTestEmpty(matcher.precomputed());\n",
        "111": "  }\n",
        "112": "\n",
        "113": "  private void reallyTestEmpty(CharMatcher matcher) throws Exception {\n",
        "114": "    assertEquals(-1, matcher.indexIn(\"\"));\n",
        "115": "    assertEquals(-1, matcher.indexIn(\"\", 0));\n",
        "116": "    try {\n",
        "117": "      matcher.indexIn(\"\", 1);\n",
        "118": "      fail();\n",
        "119": "    } catch (IndexOutOfBoundsException expected) {\n",
        "120": "    }\n",
        "121": "    try {\n",
        "122": "      matcher.indexIn(\"\", -1);\n",
        "123": "      fail();\n",
        "124": "    } catch (IndexOutOfBoundsException expected) {\n",
        "125": "    }\n",
        "126": "    assertEquals(-1, matcher.lastIndexIn(\"\"));\n",
        "127": "    assertFalse(matcher.matchesAnyOf(\"\"));\n",
        "128": "    assertTrue(matcher.matchesAllOf(\"\"));\n",
        "129": "    assertTrue(matcher.matchesNoneOf(\"\"));\n",
        "130": "    assertEquals(\"\", matcher.removeFrom(\"\"));\n",
        "131": "    assertEquals(\"\", matcher.replaceFrom(\"\", 'z'));\n",
        "132": "    assertEquals(\"\", matcher.replaceFrom(\"\", \"ZZ\"));\n",
        "133": "    assertEquals(\"\", matcher.trimFrom(\"\"));\n",
        "134": "    assertEquals(0, matcher.countIn(\"\"));\n",
        "135": "  }\n",
        "136": "\n",
        "137": "  public void testNoMatches() {\n",
        "138": "    doTestNoMatches(CharMatcher.none(), \"blah\");\n",
        "139": "    doTestNoMatches(is('a'), \"bcde\");\n",
        "140": "    doTestNoMatches(isNot('a'), \"aaaa\");\n",
        "141": "    doTestNoMatches(anyOf(\"\"), \"abcd\");\n",
        "142": "    doTestNoMatches(anyOf(\"x\"), \"abcd\");\n",
        "143": "    doTestNoMatches(anyOf(\"xy\"), \"abcd\");\n",
        "144": "    doTestNoMatches(anyOf(\"CharMatcher\"), \"zxqy\");\n",
        "145": "    doTestNoMatches(noneOf(\"CharMatcher\"), \"ChMa\");\n",
        "146": "    doTestNoMatches(inRange('p', 'x'), \"mom\");\n",
        "147": "    doTestNoMatches(forPredicate(Predicates.equalTo('c')), \"abe\");\n",
        "148": "    doTestNoMatches(inRange('A', 'Z').and(inRange('F', 'K').negate()), \"F1a\");\n",
        "149": "    doTestNoMatches(CharMatcher.digit(), \"\\tAz()\");\n",
        "150": "    doTestNoMatches(CharMatcher.javaDigit(), \"\\tAz()\");\n",
        "151": "    doTestNoMatches(CharMatcher.digit().and(CharMatcher.ascii()), \"\\tAz()\");\n",
        "152": "    doTestNoMatches(CharMatcher.singleWidth(), \"\\u05bf\\u3000\");\n",
        "153": "  }\n",
        "154": "\n",
        "155": "  private void doTestNoMatches(CharMatcher matcher, String s) {\n",
        "156": "    reallyTestNoMatches(matcher, s);\n",
        "157": "    reallyTestAllMatches(matcher.negate(), s);\n",
        "158": "    reallyTestNoMatches(matcher.precomputed(), s);\n",
        "159": "    reallyTestAllMatches(matcher.negate().precomputed(), s);\n",
        "160": "    reallyTestAllMatches(matcher.precomputed().negate(), s);\n",
        "161": "    reallyTestNoMatches(forPredicate(matcher), s);\n",
        "162": "\n",
        "163": "    reallyTestNoMatches(matcher, new StringBuilder(s));\n",
        "164": "  }\n",
        "165": "\n",
        "166": "  public void testAllMatches() {\n",
        "167": "    doTestAllMatches(CharMatcher.any(), \"blah\");\n",
        "168": "    doTestAllMatches(isNot('a'), \"bcde\");\n",
        "169": "    doTestAllMatches(is('a'), \"aaaa\");\n",
        "170": "    doTestAllMatches(noneOf(\"CharMatcher\"), \"zxqy\");\n",
        "171": "    doTestAllMatches(anyOf(\"x\"), \"xxxx\");\n",
        "172": "    doTestAllMatches(anyOf(\"xy\"), \"xyyx\");\n",
        "173": "    doTestAllMatches(anyOf(\"CharMatcher\"), \"ChMa\");\n",
        "174": "    doTestAllMatches(inRange('m', 'p'), \"mom\");\n",
        "175": "    doTestAllMatches(forPredicate(Predicates.equalTo('c')), \"ccc\");\n",
        "176": "    doTestAllMatches(CharMatcher.digit(), \"0123456789\\u0ED0\\u1B59\");\n",
        "177": "    doTestAllMatches(CharMatcher.javaDigit(), \"0123456789\");\n",
        "178": "    doTestAllMatches(CharMatcher.digit().and(CharMatcher.ascii()), \"0123456789\");\n",
        "179": "    doTestAllMatches(CharMatcher.singleWidth(), \"\\t0123ABCdef~\\u00A0\\u2111\");\n",
        "180": "  }\n",
        "181": "\n",
        "182": "  private void doTestAllMatches(CharMatcher matcher, String s) {\n",
        "183": "    reallyTestAllMatches(matcher, s);\n",
        "184": "    reallyTestNoMatches(matcher.negate(), s);\n",
        "185": "    reallyTestAllMatches(matcher.precomputed(), s);\n",
        "186": "    reallyTestNoMatches(matcher.negate().precomputed(), s);\n",
        "187": "    reallyTestNoMatches(matcher.precomputed().negate(), s);\n",
        "188": "    reallyTestAllMatches(forPredicate(matcher), s);\n",
        "189": "\n",
        "190": "    reallyTestAllMatches(matcher, new StringBuilder(s));\n",
        "191": "  }\n",
        "192": "\n",
        "193": "  private void reallyTestNoMatches(CharMatcher matcher, CharSequence s) {\n",
        "194": "    assertFalse(matcher.matches(s.charAt(0)));\n",
        "195": "    assertEquals(-1, matcher.indexIn(s));\n",
        "196": "    assertEquals(-1, matcher.indexIn(s, 0));\n",
        "197": "    assertEquals(-1, matcher.indexIn(s, 1));\n",
        "198": "    assertEquals(-1, matcher.indexIn(s, s.length()));\n",
        "199": "    try {\n",
        "200": "      matcher.indexIn(s, s.length() + 1);\n",
        "201": "      fail();\n",
        "202": "    } catch (IndexOutOfBoundsException expected) {\n",
        "203": "    }\n",
        "204": "    try {\n",
        "205": "      matcher.indexIn(s, -1);\n",
        "206": "      fail();\n",
        "207": "    } catch (IndexOutOfBoundsException expected) {\n",
        "208": "    }\n",
        "209": "    assertEquals(-1, matcher.lastIndexIn(s));\n",
        "210": "    assertFalse(matcher.matchesAnyOf(s));\n",
        "211": "    assertFalse(matcher.matchesAllOf(s));\n",
        "212": "    assertTrue(matcher.matchesNoneOf(s));\n",
        "213": "\n",
        "214": "    assertEquals(s.toString(), matcher.removeFrom(s));\n",
        "215": "    assertEquals(s.toString(), matcher.replaceFrom(s, 'z'));\n",
        "216": "    assertEquals(s.toString(), matcher.replaceFrom(s, \"ZZ\"));\n",
        "217": "    assertEquals(s.toString(), matcher.trimFrom(s));\n",
        "218": "    assertEquals(0, matcher.countIn(s));\n",
        "219": "  }\n",
        "220": "\n",
        "221": "  private void reallyTestAllMatches(CharMatcher matcher, CharSequence s) {\n",
        "222": "    assertTrue(matcher.matches(s.charAt(0)));\n",
        "223": "    assertEquals(0, matcher.indexIn(s));\n",
        "224": "    assertEquals(0, matcher.indexIn(s, 0));\n",
        "225": "    assertEquals(1, matcher.indexIn(s, 1));\n",
        "226": "    assertEquals(-1, matcher.indexIn(s, s.length()));\n",
        "227": "    assertEquals(s.length() - 1, matcher.lastIndexIn(s));\n",
        "228": "    assertTrue(matcher.matchesAnyOf(s));\n",
        "229": "    assertTrue(matcher.matchesAllOf(s));\n",
        "230": "    assertFalse(matcher.matchesNoneOf(s));\n",
        "231": "    assertEquals(\"\", matcher.removeFrom(s));\n",
        "232": "    assertEquals(Strings.repeat(\"z\", s.length()),\n",
        "233": "        matcher.replaceFrom(s, 'z'));\n",
        "234": "    assertEquals(Strings.repeat(\"ZZ\", s.length()),\n",
        "235": "        matcher.replaceFrom(s, \"ZZ\"));\n",
        "236": "    assertEquals(\"\", matcher.trimFrom(s));\n",
        "237": "    assertEquals(s.length(), matcher.countIn(s));\n",
        "238": "  }\n",
        "239": "\n",
        "240": "  public void testGeneral() {\n",
        "241": "    doTestGeneral(is('a'), 'a', 'b');\n",
        "242": "    doTestGeneral(isNot('a'), 'b', 'a');\n",
        "243": "    doTestGeneral(anyOf(\"x\"), 'x', 'z');\n",
        "244": "    doTestGeneral(anyOf(\"xy\"), 'y', 'z');\n",
        "245": "    doTestGeneral(anyOf(\"CharMatcher\"), 'C', 'z');\n",
        "246": "    doTestGeneral(noneOf(\"CharMatcher\"), 'z', 'C');\n",
        "247": "    doTestGeneral(inRange('p', 'x'), 'q', 'z');\n",
        "248": "  }\n",
        "249": "\n",
        "250": "  private void doTestGeneral(CharMatcher matcher, char match, char noMatch) {\n",
        "251": "    doTestOneCharMatch(matcher, \"\" + match);\n",
        "252": "    doTestOneCharNoMatch(matcher, \"\" + noMatch);\n",
        "253": "    doTestMatchThenNoMatch(matcher, \"\" + match + noMatch);\n",
        "254": "    doTestNoMatchThenMatch(matcher, \"\" + noMatch + match);\n",
        "255": "  }\n",
        "256": "\n",
        "257": "  private void doTestOneCharMatch(CharMatcher matcher, String s) {\n",
        "258": "    reallyTestOneCharMatch(matcher, s);\n",
        "259": "    reallyTestOneCharNoMatch(matcher.negate(), s);\n",
        "260": "    reallyTestOneCharMatch(matcher.precomputed(), s);\n",
        "261": "    reallyTestOneCharNoMatch(matcher.negate().precomputed(), s);\n",
        "262": "    reallyTestOneCharNoMatch(matcher.precomputed().negate(), s);\n",
        "263": "  }\n",
        "264": "\n",
        "265": "  private void doTestOneCharNoMatch(CharMatcher matcher, String s) {\n",
        "266": "    reallyTestOneCharNoMatch(matcher, s);\n",
        "267": "    reallyTestOneCharMatch(matcher.negate(), s);\n",
        "268": "    reallyTestOneCharNoMatch(matcher.precomputed(), s);\n",
        "269": "    reallyTestOneCharMatch(matcher.negate().precomputed(), s);\n",
        "270": "    reallyTestOneCharMatch(matcher.precomputed().negate(), s);\n",
        "271": "  }\n",
        "272": "\n",
        "273": "  private void doTestMatchThenNoMatch(CharMatcher matcher, String s) {\n",
        "274": "    reallyTestMatchThenNoMatch(matcher, s);\n",
        "275": "    reallyTestNoMatchThenMatch(matcher.negate(), s);\n",
        "276": "    reallyTestMatchThenNoMatch(matcher.precomputed(), s);\n",
        "277": "    reallyTestNoMatchThenMatch(matcher.negate().precomputed(), s);\n",
        "278": "    reallyTestNoMatchThenMatch(matcher.precomputed().negate(), s);\n",
        "279": "  }\n",
        "280": "\n",
        "281": "  private void doTestNoMatchThenMatch(CharMatcher matcher, String s) {\n",
        "282": "    reallyTestNoMatchThenMatch(matcher, s);\n",
        "283": "    reallyTestMatchThenNoMatch(matcher.negate(), s);\n",
        "284": "    reallyTestNoMatchThenMatch(matcher.precomputed(), s);\n",
        "285": "    reallyTestMatchThenNoMatch(matcher.negate().precomputed(), s);\n",
        "286": "    reallyTestMatchThenNoMatch(matcher.precomputed().negate(), s);\n",
        "287": "  }\n",
        "288": "\n",
        "289": "  @SuppressWarnings(\"deprecation\") // intentionally testing apply() method\n",
        "290": "  private void reallyTestOneCharMatch(CharMatcher matcher, String s) {\n",
        "291": "    assertTrue(matcher.matches(s.charAt(0)));\n",
        "292": "    assertTrue(matcher.apply(s.charAt(0)));\n",
        "293": "    assertEquals(0, matcher.indexIn(s));\n",
        "294": "    assertEquals(0, matcher.indexIn(s, 0));\n",
        "295": "    assertEquals(-1, matcher.indexIn(s, 1));\n",
        "296": "    assertEquals(0, matcher.lastIndexIn(s));\n",
        "297": "    assertTrue(matcher.matchesAnyOf(s));\n",
        "298": "    assertTrue(matcher.matchesAllOf(s));\n",
        "299": "    assertFalse(matcher.matchesNoneOf(s));\n",
        "300": "    assertEquals(\"\", matcher.removeFrom(s));\n",
        "301": "    assertEquals(\"z\", matcher.replaceFrom(s, 'z'));\n",
        "302": "    assertEquals(\"ZZ\", matcher.replaceFrom(s, \"ZZ\"));\n",
        "303": "    assertEquals(\"\", matcher.trimFrom(s));\n",
        "304": "    assertEquals(1, matcher.countIn(s));\n",
        "305": "  }\n",
        "306": "\n",
        "307": "  @SuppressWarnings(\"deprecation\") // intentionally testing apply() method\n",
        "308": "  private void reallyTestOneCharNoMatch(CharMatcher matcher, String s) {\n",
        "309": "    assertFalse(matcher.matches(s.charAt(0)));\n",
        "310": "    assertFalse(matcher.apply(s.charAt(0)));\n",
        "311": "    assertEquals(-1, matcher.indexIn(s));\n",
        "312": "    assertEquals(-1, matcher.indexIn(s, 0));\n",
        "313": "    assertEquals(-1, matcher.indexIn(s, 1));\n",
        "314": "    assertEquals(-1, matcher.lastIndexIn(s));\n",
        "315": "    assertFalse(matcher.matchesAnyOf(s));\n",
        "316": "    assertFalse(matcher.matchesAllOf(s));\n",
        "317": "    assertTrue(matcher.matchesNoneOf(s));\n",
        "318": "\n",
        "319": "    assertSame(s, matcher.removeFrom(s));\n",
        "320": "    assertSame(s, matcher.replaceFrom(s, 'z'));\n",
        "321": "    assertSame(s, matcher.replaceFrom(s, \"ZZ\"));\n",
        "322": "    assertSame(s, matcher.trimFrom(s));\n",
        "323": "    assertSame(0, matcher.countIn(s));\n",
        "324": "  }\n",
        "325": "\n",
        "326": "  private void reallyTestMatchThenNoMatch(CharMatcher matcher, String s) {\n",
        "327": "    assertEquals(0, matcher.indexIn(s));\n",
        "328": "    assertEquals(0, matcher.indexIn(s, 0));\n",
        "329": "    assertEquals(-1, matcher.indexIn(s, 1));\n",
        "330": "    assertEquals(-1, matcher.indexIn(s, 2));\n",
        "331": "    assertEquals(0, matcher.lastIndexIn(s));\n",
        "332": "    assertTrue(matcher.matchesAnyOf(s));\n",
        "333": "    assertFalse(matcher.matchesAllOf(s));\n",
        "334": "    assertFalse(matcher.matchesNoneOf(s));\n",
        "335": "    assertEquals(s.substring(1), matcher.removeFrom(s));\n",
        "336": "    assertEquals(\"z\" + s.substring(1), matcher.replaceFrom(s, 'z'));\n",
        "337": "    assertEquals(\"ZZ\" + s.substring(1), matcher.replaceFrom(s, \"ZZ\"));\n",
        "338": "    assertEquals(s.substring(1), matcher.trimFrom(s));\n",
        "339": "    assertEquals(1, matcher.countIn(s));\n",
        "340": "  }\n",
        "341": "\n",
        "342": "  private void reallyTestNoMatchThenMatch(CharMatcher matcher, String s) {\n",
        "343": "    assertEquals(1, matcher.indexIn(s));\n",
        "344": "    assertEquals(1, matcher.indexIn(s, 0));\n",
        "345": "    assertEquals(1, matcher.indexIn(s, 1));\n",
        "346": "    assertEquals(-1, matcher.indexIn(s, 2));\n",
        "347": "    assertEquals(1, matcher.lastIndexIn(s));\n",
        "348": "    assertTrue(matcher.matchesAnyOf(s));\n",
        "349": "    assertFalse(matcher.matchesAllOf(s));\n",
        "350": "    assertFalse(matcher.matchesNoneOf(s));\n",
        "351": "    assertEquals(s.substring(0, 1), matcher.removeFrom(s));\n",
        "352": "    assertEquals(s.substring(0, 1) + \"z\", matcher.replaceFrom(s, 'z'));\n",
        "353": "    assertEquals(s.substring(0, 1) + \"ZZ\", matcher.replaceFrom(s, \"ZZ\"));\n",
        "354": "    assertEquals(s.substring(0, 1), matcher.trimFrom(s));\n",
        "355": "    assertEquals(1, matcher.countIn(s));\n",
        "356": "  }\n",
        "357": "\n",
        "358": "  /**\n",
        "359": "   * Checks that expected is equals to out, and further, if in is\n",
        "360": "   * equals to expected, then out is successfully optimized to be\n",
        "361": "   * identical to in, i.e. that \"in\" is simply returned.\n",
        "362": "   */\n",
        "363": "  private void assertEqualsSame(String expected, String in, String out) {\n",
        "364": "    if (expected.equals(in)) {\n",
        "365": "      assertSame(in, out);\n",
        "366": "    } else {\n",
        "367": "      assertEquals(expected, out);\n",
        "368": "    }\n",
        "369": "  }\n",
        "370": "\n",
        "371": "  // Test collapse() a little differently than the rest, as we really want to\n",
        "372": "  // cover lots of different configurations of input text\n",
        "373": "  public void testCollapse() {\n",
        "374": "    // collapsing groups of '-' into '_' or '-'\n",
        "375": "    doTestCollapse(\"-\", \"_\");\n",
        "376": "    doTestCollapse(\"x-\", \"x_\");\n",
        "377": "    doTestCollapse(\"-x\", \"_x\");\n",
        "378": "    doTestCollapse(\"--\", \"_\");\n",
        "379": "    doTestCollapse(\"x--\", \"x_\");\n",
        "380": "    doTestCollapse(\"--x\", \"_x\");\n",
        "381": "    doTestCollapse(\"-x-\", \"_x_\");\n",
        "382": "    doTestCollapse(\"x-x\", \"x_x\");\n",
        "383": "    doTestCollapse(\"---\", \"_\");\n",
        "384": "    doTestCollapse(\"--x-\", \"_x_\");\n",
        "385": "    doTestCollapse(\"--xx\", \"_xx\");\n",
        "386": "    doTestCollapse(\"-x--\", \"_x_\");\n",
        "387": "    doTestCollapse(\"-x-x\", \"_x_x\");\n",
        "388": "    doTestCollapse(\"-xx-\", \"_xx_\");\n",
        "389": "    doTestCollapse(\"x--x\", \"x_x\");\n",
        "390": "    doTestCollapse(\"x-x-\", \"x_x_\");\n",
        "391": "    doTestCollapse(\"x-xx\", \"x_xx\");\n",
        "392": "    doTestCollapse(\"x-x--xx---x----x\", \"x_x_xx_x_x\");\n",
        "393": "\n",
        "394": "    doTestCollapseWithNoChange(\"\");\n",
        "395": "    doTestCollapseWithNoChange(\"x\");\n",
        "396": "    doTestCollapseWithNoChange(\"xx\");\n",
        "397": "  }\n",
        "398": "\n",
        "399": "  private void doTestCollapse(String in, String out) {\n",
        "400": "    // Try a few different matchers which all match '-' and not 'x'\n",
        "401": "    // Try replacement chars that both do and do not change the value.\n",
        "402": "    for (char replacement : new char[] { '_', '-' }) {\n",
        "403": "      String expected = out.replace('_', replacement);\n",
        "404": "      assertEqualsSame(expected, in, is('-').collapseFrom(in, replacement));\n",
        "405": "      assertEqualsSame(expected, in, is('-').collapseFrom(in, replacement));\n",
        "406": "      assertEqualsSame(expected, in, is('-').or(is('#')).collapseFrom(in, replacement));\n",
        "407": "      assertEqualsSame(expected, in, isNot('x').collapseFrom(in, replacement));\n",
        "408": "      assertEqualsSame(expected, in, is('x').negate().collapseFrom(in, replacement));\n",
        "409": "      assertEqualsSame(expected, in, anyOf(\"-\").collapseFrom(in, replacement));\n",
        "410": "      assertEqualsSame(expected, in, anyOf(\"-#\").collapseFrom(in, replacement));\n",
        "411": "      assertEqualsSame(expected, in, anyOf(\"-#123\").collapseFrom(in, replacement));\n",
        "412": "    }\n",
        "413": "  }\n",
        "414": "\n",
        "415": "  private void doTestCollapseWithNoChange(String inout) {\n",
        "416": "    assertSame(inout, is('-').collapseFrom(inout, '_'));\n",
        "417": "    assertSame(inout, is('-').or(is('#')).collapseFrom(inout, '_'));\n",
        "418": "    assertSame(inout, isNot('x').collapseFrom(inout, '_'));\n",
        "419": "    assertSame(inout, is('x').negate().collapseFrom(inout, '_'));\n",
        "420": "    assertSame(inout, anyOf(\"-\").collapseFrom(inout, '_'));\n",
        "421": "    assertSame(inout, anyOf(\"-#\").collapseFrom(inout, '_'));\n",
        "422": "    assertSame(inout, anyOf(\"-#123\").collapseFrom(inout, '_'));\n",
        "423": "    assertSame(inout, CharMatcher.none().collapseFrom(inout, '_'));\n",
        "424": "  }\n",
        "425": "\n",
        "426": "  public void testCollapse_any() {\n",
        "427": "    assertEquals(\"\", CharMatcher.any().collapseFrom(\"\", '_'));\n",
        "428": "    assertEquals(\"_\", CharMatcher.any().collapseFrom(\"a\", '_'));\n",
        "429": "    assertEquals(\"_\", CharMatcher.any().collapseFrom(\"ab\", '_'));\n",
        "430": "    assertEquals(\"_\", CharMatcher.any().collapseFrom(\"abcd\", '_'));\n",
        "431": "  }\n",
        "432": "\n",
        "433": "  public void testTrimFrom() {\n",
        "434": "    // trimming -\n",
        "435": "    doTestTrimFrom(\"-\", \"\");\n",
        "436": "    doTestTrimFrom(\"x-\", \"x\");\n",
        "437": "    doTestTrimFrom(\"-x\", \"x\");\n",
        "438": "    doTestTrimFrom(\"--\", \"\");\n",
        "439": "    doTestTrimFrom(\"x--\", \"x\");\n",
        "440": "    doTestTrimFrom(\"--x\", \"x\");\n",
        "441": "    doTestTrimFrom(\"-x-\", \"x\");\n",
        "442": "    doTestTrimFrom(\"x-x\", \"x-x\");\n",
        "443": "    doTestTrimFrom(\"---\", \"\");\n",
        "444": "    doTestTrimFrom(\"--x-\", \"x\");\n",
        "445": "    doTestTrimFrom(\"--xx\", \"xx\");\n",
        "446": "    doTestTrimFrom(\"-x--\", \"x\");\n",
        "447": "    doTestTrimFrom(\"-x-x\", \"x-x\");\n",
        "448": "    doTestTrimFrom(\"-xx-\", \"xx\");\n",
        "449": "    doTestTrimFrom(\"x--x\", \"x--x\");\n",
        "450": "    doTestTrimFrom(\"x-x-\", \"x-x\");\n",
        "451": "    doTestTrimFrom(\"x-xx\", \"x-xx\");\n",
        "452": "    doTestTrimFrom(\"x-x--xx---x----x\", \"x-x--xx---x----x\");\n",
        "453": "    // additional testing using the doc example\n",
        "454": "    assertEquals(\"cat\", anyOf(\"ab\").trimFrom(\"abacatbab\"));\n",
        "455": "  }\n",
        "456": "\n",
        "457": "  private void doTestTrimFrom(String in, String out) {\n",
        "458": "    // Try a few different matchers which all match '-' and not 'x'\n",
        "459": "    assertEquals(out, is('-').trimFrom(in));\n",
        "460": "    assertEquals(out, is('-').or(is('#')).trimFrom(in));\n",
        "461": "    assertEquals(out, isNot('x').trimFrom(in));\n",
        "462": "    assertEquals(out, is('x').negate().trimFrom(in));\n",
        "463": "    assertEquals(out, anyOf(\"-\").trimFrom(in));\n",
        "464": "    assertEquals(out, anyOf(\"-#\").trimFrom(in));\n",
        "465": "    assertEquals(out, anyOf(\"-#123\").trimFrom(in));\n",
        "466": "  }\n",
        "467": "\n",
        "468": "  public void testTrimLeadingFrom() {\n",
        "469": "    // trimming -\n",
        "470": "    doTestTrimLeadingFrom(\"-\", \"\");\n",
        "471": "    doTestTrimLeadingFrom(\"x-\", \"x-\");\n",
        "472": "    doTestTrimLeadingFrom(\"-x\", \"x\");\n",
        "473": "    doTestTrimLeadingFrom(\"--\", \"\");\n",
        "474": "    doTestTrimLeadingFrom(\"x--\", \"x--\");\n",
        "475": "    doTestTrimLeadingFrom(\"--x\", \"x\");\n",
        "476": "    doTestTrimLeadingFrom(\"-x-\", \"x-\");\n",
        "477": "    doTestTrimLeadingFrom(\"x-x\", \"x-x\");\n",
        "478": "    doTestTrimLeadingFrom(\"---\", \"\");\n",
        "479": "    doTestTrimLeadingFrom(\"--x-\", \"x-\");\n",
        "480": "    doTestTrimLeadingFrom(\"--xx\", \"xx\");\n",
        "481": "    doTestTrimLeadingFrom(\"-x--\", \"x--\");\n",
        "482": "    doTestTrimLeadingFrom(\"-x-x\", \"x-x\");\n",
        "483": "    doTestTrimLeadingFrom(\"-xx-\", \"xx-\");\n",
        "484": "    doTestTrimLeadingFrom(\"x--x\", \"x--x\");\n",
        "485": "    doTestTrimLeadingFrom(\"x-x-\", \"x-x-\");\n",
        "486": "    doTestTrimLeadingFrom(\"x-xx\", \"x-xx\");\n",
        "487": "    doTestTrimLeadingFrom(\"x-x--xx---x----x\", \"x-x--xx---x----x\");\n",
        "488": "    // additional testing using the doc example\n",
        "489": "    assertEquals(\"catbab\", anyOf(\"ab\").trimLeadingFrom(\"abacatbab\"));\n",
        "490": "  }\n",
        "491": "\n",
        "492": "  private void doTestTrimLeadingFrom(String in, String out) {\n",
        "493": "    // Try a few different matchers which all match '-' and not 'x'\n",
        "494": "    assertEquals(out, is('-').trimLeadingFrom(in));\n",
        "495": "    assertEquals(out, is('-').or(is('#')).trimLeadingFrom(in));\n",
        "496": "    assertEquals(out, isNot('x').trimLeadingFrom(in));\n",
        "497": "    assertEquals(out, is('x').negate().trimLeadingFrom(in));\n",
        "498": "    assertEquals(out, anyOf(\"-#\").trimLeadingFrom(in));\n",
        "499": "    assertEquals(out, anyOf(\"-#123\").trimLeadingFrom(in));\n",
        "500": "  }\n",
        "501": "\n",
        "502": "  public void testTrimTrailingFrom() {\n",
        "503": "    // trimming -\n",
        "504": "    doTestTrimTrailingFrom(\"-\", \"\");\n",
        "505": "    doTestTrimTrailingFrom(\"x-\", \"x\");\n",
        "506": "    doTestTrimTrailingFrom(\"-x\", \"-x\");\n",
        "507": "    doTestTrimTrailingFrom(\"--\", \"\");\n",
        "508": "    doTestTrimTrailingFrom(\"x--\", \"x\");\n",
        "509": "    doTestTrimTrailingFrom(\"--x\", \"--x\");\n",
        "510": "    doTestTrimTrailingFrom(\"-x-\", \"-x\");\n",
        "511": "    doTestTrimTrailingFrom(\"x-x\", \"x-x\");\n",
        "512": "    doTestTrimTrailingFrom(\"---\", \"\");\n",
        "513": "    doTestTrimTrailingFrom(\"--x-\", \"--x\");\n",
        "514": "    doTestTrimTrailingFrom(\"--xx\", \"--xx\");\n",
        "515": "    doTestTrimTrailingFrom(\"-x--\", \"-x\");\n",
        "516": "    doTestTrimTrailingFrom(\"-x-x\", \"-x-x\");\n",
        "517": "    doTestTrimTrailingFrom(\"-xx-\", \"-xx\");\n",
        "518": "    doTestTrimTrailingFrom(\"x--x\", \"x--x\");\n",
        "519": "    doTestTrimTrailingFrom(\"x-x-\", \"x-x\");\n",
        "520": "    doTestTrimTrailingFrom(\"x-xx\", \"x-xx\");\n",
        "521": "    doTestTrimTrailingFrom(\"x-x--xx---x----x\", \"x-x--xx---x----x\");\n",
        "522": "    // additional testing using the doc example\n",
        "523": "    assertEquals(\"abacat\", anyOf(\"ab\").trimTrailingFrom(\"abacatbab\"));\n",
        "524": "  }\n",
        "525": "\n",
        "526": "  private void doTestTrimTrailingFrom(String in, String out) {\n",
        "527": "    // Try a few different matchers which all match '-' and not 'x'\n",
        "528": "    assertEquals(out, is('-').trimTrailingFrom(in));\n",
        "529": "    assertEquals(out, is('-').or(is('#')).trimTrailingFrom(in));\n",
        "530": "    assertEquals(out, isNot('x').trimTrailingFrom(in));\n",
        "531": "    assertEquals(out, is('x').negate().trimTrailingFrom(in));\n",
        "532": "    assertEquals(out, anyOf(\"-#\").trimTrailingFrom(in));\n",
        "533": "    assertEquals(out, anyOf(\"-#123\").trimTrailingFrom(in));\n",
        "534": "  }\n",
        "535": "\n",
        "536": "  public void testTrimAndCollapse() {\n",
        "537": "    // collapsing groups of '-' into '_' or '-'\n",
        "538": "    doTestTrimAndCollapse(\"\", \"\");\n",
        "539": "    doTestTrimAndCollapse(\"x\", \"x\");\n",
        "540": "    doTestTrimAndCollapse(\"-\", \"\");\n",
        "541": "    doTestTrimAndCollapse(\"x-\", \"x\");\n",
        "542": "    doTestTrimAndCollapse(\"-x\", \"x\");\n",
        "543": "    doTestTrimAndCollapse(\"--\", \"\");\n",
        "544": "    doTestTrimAndCollapse(\"x--\", \"x\");\n",
        "545": "    doTestTrimAndCollapse(\"--x\", \"x\");\n",
        "546": "    doTestTrimAndCollapse(\"-x-\", \"x\");\n",
        "547": "    doTestTrimAndCollapse(\"x-x\", \"x_x\");\n",
        "548": "    doTestTrimAndCollapse(\"---\", \"\");\n",
        "549": "    doTestTrimAndCollapse(\"--x-\", \"x\");\n",
        "550": "    doTestTrimAndCollapse(\"--xx\", \"xx\");\n",
        "551": "    doTestTrimAndCollapse(\"-x--\", \"x\");\n",
        "552": "    doTestTrimAndCollapse(\"-x-x\", \"x_x\");\n",
        "553": "    doTestTrimAndCollapse(\"-xx-\", \"xx\");\n",
        "554": "    doTestTrimAndCollapse(\"x--x\", \"x_x\");\n",
        "555": "    doTestTrimAndCollapse(\"x-x-\", \"x_x\");\n",
        "556": "    doTestTrimAndCollapse(\"x-xx\", \"x_xx\");\n",
        "557": "    doTestTrimAndCollapse(\"x-x--xx---x----x\", \"x_x_xx_x_x\");\n",
        "558": "  }\n",
        "559": "\n",
        "560": "  private void doTestTrimAndCollapse(String in, String out) {\n",
        "561": "    // Try a few different matchers which all match '-' and not 'x'\n",
        "562": "    for (char replacement : new char[] { '_', '-' }) {\n",
        "563": "      String expected = out.replace('_', replacement);\n",
        "564": "      assertEqualsSame(expected, in, is('-').trimAndCollapseFrom(in, replacement));\n",
        "565": "      assertEqualsSame(expected, in, is('-').or(is('#')).trimAndCollapseFrom(in, replacement));\n",
        "566": "      assertEqualsSame(expected, in, isNot('x').trimAndCollapseFrom(in, replacement));\n",
        "567": "      assertEqualsSame(expected, in, is('x').negate().trimAndCollapseFrom(in, replacement));\n",
        "568": "      assertEqualsSame(expected, in, anyOf(\"-\").trimAndCollapseFrom(in, replacement));\n",
        "569": "      assertEqualsSame(expected, in, anyOf(\"-#\").trimAndCollapseFrom(in, replacement));\n",
        "570": "      assertEqualsSame(expected, in, anyOf(\"-#123\").trimAndCollapseFrom(in, replacement));\n",
        "571": "    }\n",
        "572": "  }\n",
        "573": "\n",
        "574": "  public void testReplaceFrom() {\n",
        "575": "    assertEquals(\"yoho\", is('a').replaceFrom(\"yaha\", 'o'));\n",
        "576": "    assertEquals(\"yh\", is('a').replaceFrom(\"yaha\", \"\"));\n",
        "577": "    assertEquals(\"yoho\", is('a').replaceFrom(\"yaha\", \"o\"));\n",
        "578": "    assertEquals(\"yoohoo\", is('a').replaceFrom(\"yaha\", \"oo\"));\n",
        "579": "    assertEquals(\"12 &gt; 5\", is('>').replaceFrom(\"12 > 5\", \"&gt;\"));\n",
        "580": "  }\n",
        "581": "\n",
        "582": "  public void testPrecomputedOptimizations() {\n",
        "583": "    // These are testing behavior that's never promised by the API.\n",
        "584": "    // Some matchers are so efficient that it is a waste of effort to\n",
        "585": "    // build a precomputed version.\n",
        "586": "    CharMatcher m1 = is('x');\n",
        "587": "    assertSame(m1, m1.precomputed());\n",
        "588": "    assertEquals(m1.toString(), m1.precomputed().toString());\n",
        "589": "\n",
        "590": "    CharMatcher m2 = anyOf(\"Az\");\n",
        "591": "    assertSame(m2, m2.precomputed());\n",
        "592": "    assertEquals(m2.toString(), m2.precomputed().toString());\n",
        "593": "\n",
        "594": "    CharMatcher m3 = inRange('A', 'Z');\n",
        "595": "    assertSame(m3, m3.precomputed());\n",
        "596": "    assertEquals(m3.toString(), m3.precomputed().toString());\n",
        "597": "\n",
        "598": "    assertSame(CharMatcher.none(), CharMatcher.none().precomputed());\n",
        "599": "    assertSame(CharMatcher.any(), CharMatcher.any().precomputed());\n",
        "600": "  }\n",
        "601": "\n",
        "602": "  static void checkExactMatches(CharMatcher m, char[] chars) {\n",
        "603": "    Set<Character> positive = Sets.newHashSetWithExpectedSize(chars.length);\n",
        "604": "    for (char c : chars) {\n",
        "605": "      positive.add(c);\n",
        "606": "    }\n",
        "607": "    for (int c = 0; c <= Character.MAX_VALUE; c++) {\n",
        "608": "      assertFalse(positive.contains(new Character((char) c)) ^ m.matches((char) c));\n",
        "609": "    }\n",
        "610": "  }\n",
        "611": "\n",
        "612": "  static char[] randomChars(Random rand, int size) {\n",
        "613": "    Set<Character> chars = new HashSet<Character>(size);\n",
        "614": "    for (int i = 0; i < size; i++) {\n",
        "615": "      char c;\n",
        "616": "      while (true) {\n",
        "617": "        c = (char) rand.nextInt(Character.MAX_VALUE - Character.MIN_VALUE + 1);\n",
        "618": "        if (!chars.contains(c)) {\n",
        "619": "          break;\n",
        "620": "        }\n",
        "621": "      }\n",
        "622": "      chars.add(c);\n",
        "623": "    }\n",
        "624": "    char[] retValue = new char[chars.size()];\n",
        "625": "    int i = 0;\n",
        "626": "    for (char c : chars) {\n",
        "627": "      retValue[i++] = c;\n",
        "628": "    }\n",
        "629": "    Arrays.sort(retValue);\n",
        "630": "    return retValue;\n",
        "631": "  }\n",
        "632": "\n",
        "633": "  public void testToString() {\n",
        "634": "    assertToStringWorks(\"CharMatcher.none()\", CharMatcher.anyOf(\"\"));\n",
        "635": "    assertToStringWorks(\"CharMatcher.is('\\\\u0031')\", CharMatcher.anyOf(\"1\"));\n",
        "636": "    assertToStringWorks(\"CharMatcher.isNot('\\\\u0031')\", CharMatcher.isNot('1'));\n",
        "637": "    assertToStringWorks(\"CharMatcher.anyOf(\\\"\\\\u0031\\\\u0032\\\")\", CharMatcher.anyOf(\"12\"));\n",
        "638": "    assertToStringWorks(\"CharMatcher.anyOf(\\\"\\\\u0031\\\\u0032\\\\u0033\\\")\",\n",
        "639": "        CharMatcher.anyOf(\"321\"));\n",
        "640": "    assertToStringWorks(\"CharMatcher.inRange('\\\\u0031', '\\\\u0033')\",\n",
        "641": "        CharMatcher.inRange('1', '3'));\n",
        "642": "  }\n",
        "643": "\n",
        "644": "  private static void assertToStringWorks(String expected, CharMatcher matcher) {\n",
        "645": "    assertEquals(expected, matcher.toString());\n",
        "646": "    assertEquals(expected, matcher.precomputed().toString());\n",
        "647": "    assertEquals(expected, matcher.negate().negate().toString());\n",
        "648": "    assertEquals(expected, matcher.negate().precomputed().negate().toString());\n",
        "649": "    assertEquals(expected, matcher.negate().precomputed().negate().precomputed().toString());\n",
        "650": "  }\n",
        "651": "}\n",
        "652": "\n"
    }
}