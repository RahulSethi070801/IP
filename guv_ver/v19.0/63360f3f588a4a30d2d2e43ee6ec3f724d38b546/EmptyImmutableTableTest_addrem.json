{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2009 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.testing.EqualsTester;\n",
        "21": "\n",
        "22": "/**\n",
        "23": " * Tests {@link EmptyImmutableTable}\n",
        "24": " *\n",
        "25": " * @author Gregory Kick\n",
        "26": " */\n",
        "27": "@GwtCompatible(emulated = true)\n",
        "28": "public class EmptyImmutableTableTest extends AbstractImmutableTableTest {\n",
        "29": "  private static final ImmutableTable<Character, Integer, String> INSTANCE = ImmutableTable.of();\n",
        "30": "\n",
        "31": "  @Override Iterable<ImmutableTable<Character, Integer, String>> getTestInstances() {\n",
        "32": "    return ImmutableSet.of(INSTANCE);\n",
        "33": "  }\n",
        "34": "\n",
        "35": "  public void testHashCode() {\n",
        "36": "    assertEquals(0, INSTANCE.hashCode());\n",
        "37": "  }\n",
        "38": "\n",
        "39": "  public void testEqualsObject() {\n",
        "40": "    Table<Character, Integer, String> nonEmptyTable = HashBasedTable.create();\n",
        "41": "    nonEmptyTable.put('A', 1, \"blah\");\n",
        "42": "\n",
        "43": "    new EqualsTester()\n",
        "44": "        .addEqualityGroup(INSTANCE, HashBasedTable.create(), TreeBasedTable.create())\n",
        "45": "        .addEqualityGroup(nonEmptyTable)\n",
        "46": "        .testEquals();\n",
        "47": "  }\n",
        "48": "\n",
        "49": "  public void testToString() {\n",
        "50": "    assertEquals(\"{}\", INSTANCE.toString());\n",
        "51": "  }\n",
        "52": "\n",
        "53": "  public void testSize() {\n",
        "54": "    assertEquals(0, INSTANCE.size());\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  public void testGet() {\n",
        "58": "    assertNull(INSTANCE.get('a', 1));\n",
        "59": "  }\n",
        "60": "\n",
        "61": "  public void testIsEmpty() {\n",
        "62": "    assertTrue(INSTANCE.isEmpty());\n",
        "63": "  }\n",
        "64": "\n",
        "65": "  public void testCellSet() {\n",
        "66": "    assertEquals(ImmutableSet.of(), INSTANCE.cellSet());\n",
        "67": "  }\n",
        "68": "\n",
        "69": "  public void testColumn() {\n",
        "70": "    assertEquals(ImmutableMap.of(), INSTANCE.column(1));\n",
        "71": "  }\n",
        "72": "\n",
        "73": "  public void testColumnKeySet() {\n",
        "74": "    assertEquals(ImmutableSet.of(), INSTANCE.columnKeySet());\n",
        "75": "  }\n",
        "76": "\n",
        "77": "  public void testColumnMap() {\n",
        "78": "    assertEquals(ImmutableMap.of(), INSTANCE.columnMap());\n",
        "79": "  }\n",
        "80": "\n",
        "81": "  public void testContains() {\n",
        "82": "    assertFalse(INSTANCE.contains('a', 1));\n",
        "83": "  }\n",
        "84": "\n",
        "85": "  public void testContainsColumn() {\n",
        "86": "    assertFalse(INSTANCE.containsColumn(1));\n",
        "87": "  }\n",
        "88": "\n",
        "89": "  public void testContainsRow() {\n",
        "90": "    assertFalse(INSTANCE.containsRow('a'));\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  public void testContainsValue() {\n",
        "94": "    assertFalse(INSTANCE.containsValue(\"blah\"));\n",
        "95": "  }\n",
        "96": "\n",
        "97": "  public void testRow() {\n",
        "98": "    assertEquals(ImmutableMap.of(), INSTANCE.row('a'));\n",
        "99": "  }\n",
        "100": "\n",
        "101": "  public void testRowKeySet() {\n",
        "102": "    assertEquals(ImmutableSet.of(), INSTANCE.rowKeySet());\n",
        "103": "  }\n",
        "104": "\n",
        "105": "  public void testRowMap() {\n",
        "106": "    assertEquals(ImmutableMap.of(), INSTANCE.rowMap());\n",
        "107": "  }\n",
        "108": "\n",
        "109": "  public void testValues() {\n",
        "110": "    assertTrue(INSTANCE.values().isEmpty());\n",
        "111": "  }\n",
        "112": "}\n",
        "113": "\n"
    }
}