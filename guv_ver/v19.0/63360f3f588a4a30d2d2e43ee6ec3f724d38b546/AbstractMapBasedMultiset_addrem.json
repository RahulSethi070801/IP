{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "20": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "21": "import static com.google.common.collect.CollectPreconditions.checkNonnegative;\n",
        "22": "import static com.google.common.collect.CollectPreconditions.checkRemove;\n",
        "23": "\n",
        "24": "import com.google.common.annotations.GwtCompatible;\n",
        "25": "import com.google.common.primitives.Ints;\n",
        "26": "\n",
        "27": "import java.io.Serializable;\n",
        "28": "import java.util.ConcurrentModificationException;\n",
        "29": "import java.util.Iterator;\n",
        "30": "import java.util.Map;\n",
        "31": "import java.util.Set;\n",
        "32": "\n",
        "33": "import javax.annotation.Nullable;\n",
        "34": "\n",
        "35": "/**\n",
        "36": " * Basic implementation of {@code Multiset<E>} backed by an instance of {@code\n",
        "37": " * Map<E, Count>}.\n",
        "38": " *\n",
        "39": " * <p>For serialization to work, the subclass must specify explicit {@code\n",
        "40": " * readObject} and {@code writeObject} methods.\n",
        "41": " *\n",
        "42": " * @author Kevin Bourrillion\n",
        "43": " */\n",
        "44": "@GwtCompatible(emulated = true)\n",
        "45": "abstract class AbstractMapBasedMultiset<E> extends AbstractMultiset<E> implements Serializable {\n",
        "46": "\n",
        "47": "  private transient Map<E, Count> backingMap;\n",
        "48": "\n",
        "49": "  /*\n",
        "50": "   * Cache the size for efficiency. Using a long lets us avoid the need for\n",
        "51": "   * overflow checking and ensures that size() will function correctly even if\n",
        "52": "   * the multiset had once been larger than Integer.MAX_VALUE.\n",
        "53": "   */\n",
        "54": "  private transient long size;\n",
        "55": "\n",
        "56": "  /** Standard constructor. */\n",
        "57": "  protected AbstractMapBasedMultiset(Map<E, Count> backingMap) {\n",
        "58": "    this.backingMap = checkNotNull(backingMap);\n",
        "59": "    this.size = super.size();\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  /** Used during deserialization only. The backing map must be empty. */\n",
        "63": "  void setBackingMap(Map<E, Count> backingMap) {\n",
        "64": "    this.backingMap = backingMap;\n",
        "65": "  }\n",
        "66": "\n",
        "67": "  // Required Implementations\n",
        "68": "\n",
        "69": "  /**\n",
        "70": "   * {@inheritDoc}\n",
        "71": "   *\n",
        "72": "   * <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned\n",
        "73": "   * set always returns the current count of that element in the multiset, as\n",
        "74": "   * opposed to the count at the time the entry was retrieved.\n",
        "75": "   */\n",
        "76": "  @Override\n",
        "77": "  public Set<Multiset.Entry<E>> entrySet() {\n",
        "78": "    return super.entrySet();\n",
        "79": "  }\n",
        "80": "\n",
        "81": "  @Override\n",
        "82": "  Iterator<Entry<E>> entryIterator() {\n",
        "83": "    final Iterator<Map.Entry<E, Count>> backingEntries = backingMap.entrySet().iterator();\n",
        "84": "    return new Iterator<Multiset.Entry<E>>() {\n",
        "85": "      Map.Entry<E, Count> toRemove;\n",
        "86": "\n",
        "87": "      @Override\n",
        "88": "      public boolean hasNext() {\n",
        "89": "        return backingEntries.hasNext();\n",
        "90": "      }\n",
        "91": "\n",
        "92": "      @Override\n",
        "93": "      public Multiset.Entry<E> next() {\n",
        "94": "        final Map.Entry<E, Count> mapEntry = backingEntries.next();\n",
        "95": "        toRemove = mapEntry;\n",
        "96": "        return new Multisets.AbstractEntry<E>() {\n",
        "97": "          @Override\n",
        "98": "          public E getElement() {\n",
        "99": "            return mapEntry.getKey();\n",
        "100": "          }\n",
        "101": "\n",
        "102": "          @Override\n",
        "103": "          public int getCount() {\n",
        "104": "            Count count = mapEntry.getValue();\n",
        "105": "            if (count == null || count.get() == 0) {\n",
        "106": "              Count frequency = backingMap.get(getElement());\n",
        "107": "              if (frequency != null) {\n",
        "108": "                return frequency.get();\n",
        "109": "              }\n",
        "110": "            }\n",
        "111": "            return (count == null) ? 0 : count.get();\n",
        "112": "          }\n",
        "113": "        };\n",
        "114": "      }\n",
        "115": "\n",
        "116": "      @Override\n",
        "117": "      public void remove() {\n",
        "118": "        checkRemove(toRemove != null);\n",
        "119": "        size -= toRemove.getValue().getAndSet(0);\n",
        "120": "        backingEntries.remove();\n",
        "121": "        toRemove = null;\n",
        "122": "      }\n",
        "123": "    };\n",
        "124": "  }\n",
        "125": "\n",
        "126": "  @Override\n",
        "127": "  public void clear() {\n",
        "128": "    for (Count frequency : backingMap.values()) {\n",
        "129": "      frequency.set(0);\n",
        "130": "    }\n",
        "131": "    backingMap.clear();\n",
        "132": "    size = 0L;\n",
        "133": "  }\n",
        "134": "\n",
        "135": "  @Override\n",
        "136": "  int distinctElements() {\n",
        "137": "    return backingMap.size();\n",
        "138": "  }\n",
        "139": "\n",
        "140": "  // Optimizations - Query Operations\n",
        "141": "\n",
        "142": "  @Override\n",
        "143": "  public int size() {\n",
        "144": "    return Ints.saturatedCast(size);\n",
        "145": "  }\n",
        "146": "\n",
        "147": "  @Override\n",
        "148": "  public Iterator<E> iterator() {\n",
        "149": "    return new MapBasedMultisetIterator();\n",
        "150": "  }\n",
        "151": "\n",
        "152": "  /*\n",
        "153": "   * Not subclassing AbstractMultiset$MultisetIterator because next() needs to\n",
        "154": "   * retrieve the Map.Entry<E, Count> entry, which can then be used for\n",
        "155": "   * a more efficient remove() call.\n",
        "156": "   */\n",
        "157": "  private class MapBasedMultisetIterator implements Iterator<E> {\n",
        "158": "    final Iterator<Map.Entry<E, Count>> entryIterator;\n",
        "159": "    Map.Entry<E, Count> currentEntry;\n",
        "160": "    int occurrencesLeft;\n",
        "161": "    boolean canRemove;\n",
        "162": "\n",
        "163": "    MapBasedMultisetIterator() {\n",
        "164": "      this.entryIterator = backingMap.entrySet().iterator();\n",
        "165": "    }\n",
        "166": "\n",
        "167": "    @Override\n",
        "168": "    public boolean hasNext() {\n",
        "169": "      return occurrencesLeft > 0 || entryIterator.hasNext();\n",
        "170": "    }\n",
        "171": "\n",
        "172": "    @Override\n",
        "173": "    public E next() {\n",
        "174": "      if (occurrencesLeft == 0) {\n",
        "175": "        currentEntry = entryIterator.next();\n",
        "176": "        occurrencesLeft = currentEntry.getValue().get();\n",
        "177": "      }\n",
        "178": "      occurrencesLeft--;\n",
        "179": "      canRemove = true;\n",
        "180": "      return currentEntry.getKey();\n",
        "181": "    }\n",
        "182": "\n",
        "183": "    @Override\n",
        "184": "    public void remove() {\n",
        "185": "      checkRemove(canRemove);\n",
        "186": "      int frequency = currentEntry.getValue().get();\n",
        "187": "      if (frequency <= 0) {\n",
        "188": "        throw new ConcurrentModificationException();\n",
        "189": "      }\n",
        "190": "      if (currentEntry.getValue().addAndGet(-1) == 0) {\n",
        "191": "        entryIterator.remove();\n",
        "192": "      }\n",
        "193": "      size--;\n",
        "194": "      canRemove = false;\n",
        "195": "    }\n",
        "196": "  }\n",
        "197": "\n",
        "198": "  @Override\n",
        "199": "  public int count(@Nullable Object element) {\n",
        "200": "    Count frequency = Maps.safeGet(backingMap, element);\n",
        "201": "    return (frequency == null) ? 0 : frequency.get();\n",
        "202": "  }\n",
        "203": "\n",
        "204": "  // Optional Operations - Modification Operations\n",
        "205": "\n",
        "206": "  /**\n",
        "207": "   * {@inheritDoc}\n",
        "208": "   *\n",
        "209": "   * @throws IllegalArgumentException if the call would result in more than\n",
        "210": "   *     {@link Integer#MAX_VALUE} occurrences of {@code element} in this\n",
        "211": "   *     multiset.\n",
        "212": "   */\n",
        "213": "  @Override\n",
        "214": "  public int add(@Nullable E element, int occurrences) {\n",
        "215": "    if (occurrences == 0) {\n",
        "216": "      return count(element);\n",
        "217": "    }\n",
        "218": "    checkArgument(occurrences > 0, \"occurrences cannot be negative: %s\", occurrences);\n",
        "219": "    Count frequency = backingMap.get(element);\n",
        "220": "    int oldCount;\n",
        "221": "    if (frequency == null) {\n",
        "222": "      oldCount = 0;\n",
        "223": "      backingMap.put(element, new Count(occurrences));\n",
        "224": "    } else {\n",
        "225": "      oldCount = frequency.get();\n",
        "226": "      long newCount = (long) oldCount + (long) occurrences;\n",
        "227": "      checkArgument(newCount <= Integer.MAX_VALUE, \"too many occurrences: %s\", newCount);\n",
        "228": "      frequency.getAndAdd(occurrences);\n",
        "229": "    }\n",
        "230": "    size += occurrences;\n",
        "231": "    return oldCount;\n",
        "232": "  }\n",
        "233": "\n",
        "234": "  @Override\n",
        "235": "  public int remove(@Nullable Object element, int occurrences) {\n",
        "236": "    if (occurrences == 0) {\n",
        "237": "      return count(element);\n",
        "238": "    }\n",
        "239": "    checkArgument(occurrences > 0, \"occurrences cannot be negative: %s\", occurrences);\n",
        "240": "    Count frequency = backingMap.get(element);\n",
        "241": "    if (frequency == null) {\n",
        "242": "      return 0;\n",
        "243": "    }\n",
        "244": "\n",
        "245": "    int oldCount = frequency.get();\n",
        "246": "\n",
        "247": "    int numberRemoved;\n",
        "248": "    if (oldCount > occurrences) {\n",
        "249": "      numberRemoved = occurrences;\n",
        "250": "    } else {\n",
        "251": "      numberRemoved = oldCount;\n",
        "252": "      backingMap.remove(element);\n",
        "253": "    }\n",
        "254": "\n",
        "255": "    frequency.addAndGet(-numberRemoved);\n",
        "256": "    size -= numberRemoved;\n",
        "257": "    return oldCount;\n",
        "258": "  }\n",
        "259": "\n",
        "260": "  // Roughly a 33% performance improvement over AbstractMultiset.setCount().\n",
        "261": "  @Override\n",
        "262": "  public int setCount(@Nullable E element, int count) {\n",
        "263": "    checkNonnegative(count, \"count\");\n",
        "264": "\n",
        "265": "    Count existingCounter;\n",
        "266": "    int oldCount;\n",
        "267": "    if (count == 0) {\n",
        "268": "      existingCounter = backingMap.remove(element);\n",
        "269": "      oldCount = getAndSet(existingCounter, count);\n",
        "270": "    } else {\n",
        "271": "      existingCounter = backingMap.get(element);\n",
        "272": "      oldCount = getAndSet(existingCounter, count);\n",
        "273": "\n",
        "274": "      if (existingCounter == null) {\n",
        "275": "        backingMap.put(element, new Count(count));\n",
        "276": "      }\n",
        "277": "    }\n",
        "278": "\n",
        "279": "    size += (count - oldCount);\n",
        "280": "    return oldCount;\n",
        "281": "  }\n",
        "282": "\n",
        "283": "  private static int getAndSet(Count i, int count) {\n",
        "284": "    if (i == null) {\n",
        "285": "      return 0;\n",
        "286": "    }\n",
        "287": "\n",
        "288": "    return i.getAndSet(count);\n",
        "289": "  }\n",
        "290": "\n",
        "291": "  // Don't allow default serialization.\n",
        "292": "}\n",
        "293": "\n"
    }
}