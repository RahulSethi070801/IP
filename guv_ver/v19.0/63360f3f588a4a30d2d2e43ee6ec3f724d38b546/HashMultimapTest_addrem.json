{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "\n",
        "21": "import junit.framework.TestCase;\n",
        "22": "\n",
        "23": "/**\n",
        "24": " * Unit tests for {@link HashMultimap}.\n",
        "25": " *\n",
        "26": " * @author Jared Levy\n",
        "27": " */\n",
        "28": "@GwtCompatible(emulated = true)\n",
        "29": "public class HashMultimapTest extends TestCase {\n",
        "30": "\n",
        "31": "  /*\n",
        "32": "   * The behavior of toString() is tested by TreeMultimap, which shares a\n",
        "33": "   * lot of code with HashMultimap and has deterministic iteration order.\n",
        "34": "   */\n",
        "35": "  public void testCreate() {\n",
        "36": "    HashMultimap<String, Integer> multimap = HashMultimap.create();\n",
        "37": "    multimap.put(\"foo\", 1);\n",
        "38": "    multimap.put(\"bar\", 2);\n",
        "39": "    multimap.put(\"foo\", 3);\n",
        "40": "    assertEquals(ImmutableSet.of(1, 3), multimap.get(\"foo\"));\n",
        "41": "    assertEquals(2, multimap.expectedValuesPerKey);\n",
        "42": "  }\n",
        "43": "\n",
        "44": "  public void testCreateFromMultimap() {\n",
        "45": "    HashMultimap<String, Integer> multimap = HashMultimap.create();\n",
        "46": "    multimap.put(\"foo\", 1);\n",
        "47": "    multimap.put(\"bar\", 2);\n",
        "48": "    multimap.put(\"foo\", 3);\n",
        "49": "    HashMultimap<String, Integer> copy = HashMultimap.create(multimap);\n",
        "50": "    assertEquals(multimap, copy);\n",
        "51": "    assertEquals(2, copy.expectedValuesPerKey);\n",
        "52": "  }\n",
        "53": "\n",
        "54": "  public void testCreateFromSizes() {\n",
        "55": "    HashMultimap<String, Integer> multimap = HashMultimap.create(20, 15);\n",
        "56": "    multimap.put(\"foo\", 1);\n",
        "57": "    multimap.put(\"bar\", 2);\n",
        "58": "    multimap.put(\"foo\", 3);\n",
        "59": "    assertEquals(ImmutableSet.of(1, 3), multimap.get(\"foo\"));\n",
        "60": "    assertEquals(15, multimap.expectedValuesPerKey);\n",
        "61": "  }\n",
        "62": "\n",
        "63": "  public void testCreateFromIllegalSizes() {\n",
        "64": "    try {\n",
        "65": "      HashMultimap.create(-20, 15);\n",
        "66": "      fail();\n",
        "67": "    } catch (IllegalArgumentException expected) {}\n",
        "68": "\n",
        "69": "    try {\n",
        "70": "      HashMultimap.create(20, -15);\n",
        "71": "      fail();\n",
        "72": "    } catch (IllegalArgumentException expected) {}\n",
        "73": "  }\n",
        "74": "\n",
        "75": "  public void testEmptyMultimapsEqual() {\n",
        "76": "    Multimap<String, Integer> setMultimap = HashMultimap.create();\n",
        "77": "    Multimap<String, Integer> listMultimap = ArrayListMultimap.create();\n",
        "78": "    assertTrue(setMultimap.equals(listMultimap));\n",
        "79": "    assertTrue(listMultimap.equals(setMultimap));\n",
        "80": "  }\n",
        "81": "}\n",
        "82": "\n"
    }
}