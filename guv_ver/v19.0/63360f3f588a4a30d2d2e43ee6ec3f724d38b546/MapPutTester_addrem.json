{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.testers;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "20": "import static com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_KEYS;\n",
        "21": "import static com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_VALUES;\n",
        "22": "import static com.google.common.collect.testing.features.MapFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION;\n",
        "23": "import static com.google.common.collect.testing.features.MapFeature.SUPPORTS_PUT;\n",
        "24": "\n",
        "25": "import com.google.common.annotations.GwtCompatible;\n",
        "26": "import com.google.common.collect.testing.AbstractMapTester;\n",
        "27": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "28": "import com.google.common.collect.testing.features.MapFeature;\n",
        "29": "\n",
        "30": "import java.util.ConcurrentModificationException;\n",
        "31": "import java.util.Iterator;\n",
        "32": "import java.util.Map;\n",
        "33": "import java.util.Map.Entry;\n",
        "34": "\n",
        "35": "/**\n",
        "36": " * A generic JUnit test which tests {@code put} operations on a map. Can't be\n",
        "37": " * invoked directly; please see\n",
        "38": " * {@link com.google.common.collect.testing.MapTestSuiteBuilder}.\n",
        "39": " *\n",
        "40": " * @author Chris Povirk\n",
        "41": " * @author Kevin Bourrillion\n",
        "42": " */\n",
        "43": "@SuppressWarnings(\"unchecked\") // too many \"unchecked generic array creations\"\n",
        "44": "@GwtCompatible(emulated = true)\n",
        "45": "public class MapPutTester<K, V> extends AbstractMapTester<K, V> {\n",
        "46": "  private Entry<K, V> nullKeyEntry;\n",
        "47": "  private Entry<K, V> nullValueEntry;\n",
        "48": "  private Entry<K, V> nullKeyValueEntry;\n",
        "49": "  private Entry<K, V> presentKeyNullValueEntry;\n",
        "50": "\n",
        "51": "  @Override public void setUp() throws Exception {\n",
        "52": "    super.setUp();\n",
        "53": "    nullKeyEntry = entry(null, v3());\n",
        "54": "    nullValueEntry = entry(k3(), null);\n",
        "55": "    nullKeyValueEntry = entry(null, null);\n",
        "56": "    presentKeyNullValueEntry = entry(k0(), null);\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  @MapFeature.Require(SUPPORTS_PUT)\n",
        "60": "  public void testPut_supportedNotPresent() {\n",
        "61": "    assertNull(\"put(notPresent, value) should return null\", put(e3()));\n",
        "62": "    expectAdded(e3());\n",
        "63": "  }\n",
        "64": "\n",
        "65": "  @MapFeature.Require({FAILS_FAST_ON_CONCURRENT_MODIFICATION, SUPPORTS_PUT})\n",
        "66": "  @CollectionSize.Require(absent = ZERO)\n",
        "67": "  public void testPutAbsentConcurrentWithEntrySetIteration() {\n",
        "68": "    try {\n",
        "69": "      Iterator<Entry<K, V>> iterator = getMap().entrySet().iterator();\n",
        "70": "      put(e3());\n",
        "71": "      iterator.next();\n",
        "72": "      fail(\"Expected ConcurrentModificationException\");\n",
        "73": "    } catch (ConcurrentModificationException expected) {\n",
        "74": "      // success\n",
        "75": "    }\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  @MapFeature.Require({FAILS_FAST_ON_CONCURRENT_MODIFICATION, SUPPORTS_PUT})\n",
        "79": "  @CollectionSize.Require(absent = ZERO)\n",
        "80": "  public void testPutAbsentConcurrentWithKeySetIteration() {\n",
        "81": "    try {\n",
        "82": "      Iterator<K> iterator = getMap().keySet().iterator();\n",
        "83": "      put(e3());\n",
        "84": "      iterator.next();\n",
        "85": "      fail(\"Expected ConcurrentModificationException\");\n",
        "86": "    } catch (ConcurrentModificationException expected) {\n",
        "87": "      // success\n",
        "88": "    }\n",
        "89": "  }\n",
        "90": "\n",
        "91": "  @MapFeature.Require({FAILS_FAST_ON_CONCURRENT_MODIFICATION, SUPPORTS_PUT})\n",
        "92": "  @CollectionSize.Require(absent = ZERO)\n",
        "93": "  public void testPutAbsentConcurrentWithValueIteration() {\n",
        "94": "    try {\n",
        "95": "      Iterator<V> iterator = getMap().values().iterator();\n",
        "96": "      put(e3());\n",
        "97": "      iterator.next();\n",
        "98": "      fail(\"Expected ConcurrentModificationException\");\n",
        "99": "    } catch (ConcurrentModificationException expected) {\n",
        "100": "      // success\n",
        "101": "    }\n",
        "102": "  }\n",
        "103": "\n",
        "104": "  @MapFeature.Require(absent = SUPPORTS_PUT)\n",
        "105": "  public void testPut_unsupportedNotPresent() {\n",
        "106": "    try {\n",
        "107": "      put(e3());\n",
        "108": "      fail(\"put(notPresent, value) should throw\");\n",
        "109": "    } catch (UnsupportedOperationException expected) {\n",
        "110": "    }\n",
        "111": "    expectUnchanged();\n",
        "112": "    expectMissing(e3());\n",
        "113": "  }\n",
        "114": "\n",
        "115": "  @MapFeature.Require(absent = SUPPORTS_PUT)\n",
        "116": "  @CollectionSize.Require(absent = ZERO)\n",
        "117": "  public void testPut_unsupportedPresentExistingValue() {\n",
        "118": "    try {\n",
        "119": "      assertEquals(\"put(present, existingValue) should return present or throw\",\n",
        "120": "          v0(), put(e0()));\n",
        "121": "    } catch (UnsupportedOperationException tolerated) {\n",
        "122": "    }\n",
        "123": "    expectUnchanged();\n",
        "124": "  }\n",
        "125": "\n",
        "126": "  @MapFeature.Require(absent = SUPPORTS_PUT)\n",
        "127": "  @CollectionSize.Require(absent = ZERO)\n",
        "128": "  public void testPut_unsupportedPresentDifferentValue() {\n",
        "129": "    try {\n",
        "130": "      getMap().put(k0(), v3());\n",
        "131": "      fail(\"put(present, differentValue) should throw\");\n",
        "132": "    } catch (UnsupportedOperationException expected) {\n",
        "133": "    }\n",
        "134": "    expectUnchanged();\n",
        "135": "  }\n",
        "136": "\n",
        "137": "  @MapFeature.Require({SUPPORTS_PUT, ALLOWS_NULL_KEYS})\n",
        "138": "  public void testPut_nullKeySupportedNotPresent() {\n",
        "139": "    assertNull(\"put(null, value) should return null\", put(nullKeyEntry));\n",
        "140": "    expectAdded(nullKeyEntry);\n",
        "141": "  }\n",
        "142": "\n",
        "143": "  @MapFeature.Require({SUPPORTS_PUT, ALLOWS_NULL_KEYS})\n",
        "144": "  @CollectionSize.Require(absent = ZERO)\n",
        "145": "  public void testPut_nullKeySupportedPresent() {\n",
        "146": "    Entry<K, V> newEntry = entry(null, v3());\n",
        "147": "    initMapWithNullKey();\n",
        "148": "    assertEquals(\"put(present, value) should return the associated value\",\n",
        "149": "        getValueForNullKey(), put(newEntry));\n",
        "150": "\n",
        "151": "    Entry<K, V>[] expected = createArrayWithNullKey();\n",
        "152": "    expected[getNullLocation()] = newEntry;\n",
        "153": "    expectContents(expected);\n",
        "154": "  }\n",
        "155": "\n",
        "156": "  @MapFeature.Require(value = SUPPORTS_PUT, absent = ALLOWS_NULL_KEYS)\n",
        "157": "  public void testPut_nullKeyUnsupported() {\n",
        "158": "    try {\n",
        "159": "      put(nullKeyEntry);\n",
        "160": "      fail(\"put(null, value) should throw\");\n",
        "161": "    } catch (NullPointerException expected) {\n",
        "162": "    }\n",
        "163": "    expectUnchanged();\n",
        "164": "    expectNullKeyMissingWhenNullKeysUnsupported(\n",
        "165": "        \"Should not contain null key after unsupported put(null, value)\");\n",
        "166": "  }\n",
        "167": "\n",
        "168": "  @MapFeature.Require({SUPPORTS_PUT, ALLOWS_NULL_VALUES})\n",
        "169": "  public void testPut_nullValueSupported() {\n",
        "170": "    assertNull(\"put(key, null) should return null\", put(nullValueEntry));\n",
        "171": "    expectAdded(nullValueEntry);\n",
        "172": "  }\n",
        "173": "\n",
        "174": "  @MapFeature.Require(value = SUPPORTS_PUT, absent = ALLOWS_NULL_VALUES)\n",
        "175": "  public void testPut_nullValueUnsupported() {\n",
        "176": "    try {\n",
        "177": "      put(nullValueEntry);\n",
        "178": "      fail(\"put(key, null) should throw\");\n",
        "179": "    } catch (NullPointerException expected) {\n",
        "180": "    }\n",
        "181": "    expectUnchanged();\n",
        "182": "    expectNullValueMissingWhenNullValuesUnsupported(\n",
        "183": "        \"Should not contain null value after unsupported put(key, null)\");\n",
        "184": "  }\n",
        "185": "\n",
        "186": "  @MapFeature.Require({SUPPORTS_PUT, ALLOWS_NULL_VALUES})\n",
        "187": "  @CollectionSize.Require(absent = ZERO)\n",
        "188": "  public void testPut_replaceWithNullValueSupported() {\n",
        "189": "    assertEquals(\"put(present, null) should return the associated value\",\n",
        "190": "        v0(), put(presentKeyNullValueEntry));\n",
        "191": "    expectReplacement(presentKeyNullValueEntry);\n",
        "192": "  }\n",
        "193": "\n",
        "194": "  @MapFeature.Require(value = SUPPORTS_PUT, absent = ALLOWS_NULL_VALUES)\n",
        "195": "  @CollectionSize.Require(absent = ZERO)\n",
        "196": "  public void testPut_replaceWithNullValueUnsupported() {\n",
        "197": "    try {\n",
        "198": "      put(presentKeyNullValueEntry);\n",
        "199": "      fail(\"put(present, null) should throw\");\n",
        "200": "    } catch (NullPointerException expected) {\n",
        "201": "    }\n",
        "202": "    expectUnchanged();\n",
        "203": "    expectNullValueMissingWhenNullValuesUnsupported(\n",
        "204": "        \"Should not contain null after unsupported put(present, null)\");\n",
        "205": "  }\n",
        "206": "\n",
        "207": "  @MapFeature.Require({SUPPORTS_PUT, ALLOWS_NULL_VALUES})\n",
        "208": "  @CollectionSize.Require(absent = ZERO)\n",
        "209": "  public void testPut_replaceNullValueWithNullSupported() {\n",
        "210": "    initMapWithNullValue();\n",
        "211": "    assertNull(\"put(present, null) should return the associated value (null)\",\n",
        "212": "        getMap().put(getKeyForNullValue(), null));\n",
        "213": "    expectContents(createArrayWithNullValue());\n",
        "214": "  }\n",
        "215": "\n",
        "216": "  @MapFeature.Require({SUPPORTS_PUT, ALLOWS_NULL_VALUES})\n",
        "217": "  @CollectionSize.Require(absent = ZERO)\n",
        "218": "  public void testPut_replaceNullValueWithNonNullSupported() {\n",
        "219": "    Entry<K, V> newEntry = entry(getKeyForNullValue(), v3());\n",
        "220": "    initMapWithNullValue();\n",
        "221": "    assertNull(\"put(present, value) should return the associated value (null)\",\n",
        "222": "        put(newEntry));\n",
        "223": "\n",
        "224": "    Entry<K, V>[] expected = createArrayWithNullValue();\n",
        "225": "    expected[getNullLocation()] = newEntry;\n",
        "226": "    expectContents(expected);\n",
        "227": "  }\n",
        "228": "\n",
        "229": "  @MapFeature.Require({SUPPORTS_PUT, ALLOWS_NULL_KEYS, ALLOWS_NULL_VALUES})\n",
        "230": "  public void testPut_nullKeyAndValueSupported() {\n",
        "231": "    assertNull(\"put(null, null) should return null\", put(nullKeyValueEntry));\n",
        "232": "    expectAdded(nullKeyValueEntry);\n",
        "233": "  }\n",
        "234": "\n",
        "235": "  private V put(Map.Entry<K, V> entry) {\n",
        "236": "    return getMap().put(entry.getKey(), entry.getValue());\n",
        "237": "  }\n",
        "238": "}\n",
        "239": "\n"
    }
}