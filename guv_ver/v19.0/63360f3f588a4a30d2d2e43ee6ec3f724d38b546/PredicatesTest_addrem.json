{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2005 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.base;\n",
        "18": "\n",
        "19": "import static com.google.common.base.CharMatcher.WHITESPACE;\n",
        "20": "import static com.google.common.collect.Lists.newArrayList;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import com.google.common.collect.ImmutableSet;\n",
        "24": "import com.google.common.testing.EqualsTester;\n",
        "25": "\n",
        "26": "import junit.framework.AssertionFailedError;\n",
        "27": "import junit.framework.TestCase;\n",
        "28": "\n",
        "29": "import java.io.Serializable;\n",
        "30": "import java.util.ArrayList;\n",
        "31": "import java.util.Arrays;\n",
        "32": "import java.util.Collection;\n",
        "33": "import java.util.Collections;\n",
        "34": "import java.util.Iterator;\n",
        "35": "import java.util.List;\n",
        "36": "\n",
        "37": "/**\n",
        "38": " * Unit test for {@link Predicates}.\n",
        "39": " *\n",
        "40": " * @author Kevin Bourrillion\n",
        "41": " */\n",
        "42": "@GwtCompatible(emulated = true)\n",
        "43": "public class PredicatesTest extends TestCase {\n",
        "44": "  private static final Predicate<Integer> TRUE = Predicates.alwaysTrue();\n",
        "45": "  private static final Predicate<Integer> FALSE = Predicates.alwaysFalse();\n",
        "46": "  private static final Predicate<Integer> NEVER_REACHED =\n",
        "47": "      new Predicate<Integer>() {\n",
        "48": "    @Override\n",
        "49": "    public boolean apply(Integer i) {\n",
        "50": "      throw new AssertionFailedError(\n",
        "51": "          \"This predicate should never have been evaluated\");\n",
        "52": "    }\n",
        "53": "  };\n",
        "54": "\n",
        "55": "  /** Instantiable predicate with reasonable hashCode() and equals() methods. */\n",
        "56": "  static class IsOdd implements Predicate<Integer>, Serializable {\n",
        "57": "    private static final long serialVersionUID = 0x150ddL;\n",
        "58": "    @Override\n",
        "59": "    public boolean apply(Integer i) {\n",
        "60": "      return (i.intValue() & 1) == 1;\n",
        "61": "    }\n",
        "62": "    @Override public int hashCode() {\n",
        "63": "      return 0x150dd;\n",
        "64": "    }\n",
        "65": "    @Override public boolean equals(Object obj) {\n",
        "66": "      return obj instanceof IsOdd;\n",
        "67": "    }\n",
        "68": "    @Override public String toString() {\n",
        "69": "      return \"IsOdd\";\n",
        "70": "    }\n",
        "71": "  }\n",
        "72": "\n",
        "73": "  /**\n",
        "74": "   * Generates a new Predicate per call.\n",
        "75": "   *\n",
        "76": "   * <p>Creating a new Predicate each time helps catch cases where code is\n",
        "77": "   * using {@code x == y} instead of {@code x.equals(y)}.\n",
        "78": "   */\n",
        "79": "  private static IsOdd isOdd() {\n",
        "80": "    return new IsOdd();\n",
        "81": "  }\n",
        "82": "\n",
        "83": "  /*\n",
        "84": "   * Tests for Predicates.alwaysTrue().\n",
        "85": "   */\n",
        "86": "\n",
        "87": "  public void testAlwaysTrue_apply() {\n",
        "88": "    assertEvalsToTrue(Predicates.alwaysTrue());\n",
        "89": "  }\n",
        "90": "\n",
        "91": "  public void testAlwaysTrue_equality() throws Exception {\n",
        "92": "    new EqualsTester()\n",
        "93": "        .addEqualityGroup(TRUE, Predicates.alwaysTrue())\n",
        "94": "        .addEqualityGroup(isOdd())\n",
        "95": "        .addEqualityGroup(Predicates.alwaysFalse())\n",
        "96": "        .testEquals();\n",
        "97": "  }\n",
        "98": "\n",
        "99": "  /*\n",
        "100": "   * Tests for Predicates.alwaysFalse().\n",
        "101": "   */\n",
        "102": "\n",
        "103": "  public void testAlwaysFalse_apply() throws Exception {\n",
        "104": "    assertEvalsToFalse(Predicates.alwaysFalse());\n",
        "105": "  }\n",
        "106": "\n",
        "107": "  public void testAlwaysFalse_equality() throws Exception {\n",
        "108": "    new EqualsTester()\n",
        "109": "        .addEqualityGroup(FALSE, Predicates.alwaysFalse())\n",
        "110": "        .addEqualityGroup(isOdd())\n",
        "111": "        .addEqualityGroup(Predicates.alwaysTrue())\n",
        "112": "        .testEquals();\n",
        "113": "  }\n",
        "114": "\n",
        "115": "  /*\n",
        "116": "   * Tests for Predicates.not(predicate).\n",
        "117": "   */\n",
        "118": "\n",
        "119": "  public void testNot_apply() {\n",
        "120": "    assertEvalsToTrue(Predicates.not(FALSE));\n",
        "121": "    assertEvalsToFalse(Predicates.not(TRUE));\n",
        "122": "    assertEvalsLikeOdd(Predicates.not(Predicates.not(isOdd())));\n",
        "123": "  }\n",
        "124": "\n",
        "125": "  public void testNot_equality() {\n",
        "126": "    new EqualsTester()\n",
        "127": "        .addEqualityGroup(Predicates.not(isOdd()), Predicates.not(isOdd()))\n",
        "128": "        .addEqualityGroup(Predicates.not(TRUE))\n",
        "129": "        .addEqualityGroup(isOdd())\n",
        "130": "        .testEquals();\n",
        "131": "  }\n",
        "132": "\n",
        "133": "  public void testNot_equalityForNotOfKnownValues() {\n",
        "134": "    new EqualsTester()\n",
        "135": "        .addEqualityGroup(TRUE, Predicates.alwaysTrue())\n",
        "136": "        .addEqualityGroup(FALSE)\n",
        "137": "        .addEqualityGroup(Predicates.not(TRUE))\n",
        "138": "        .testEquals();\n",
        "139": "\n",
        "140": "    new EqualsTester()\n",
        "141": "        .addEqualityGroup(FALSE, Predicates.alwaysFalse())\n",
        "142": "        .addEqualityGroup(TRUE)\n",
        "143": "        .addEqualityGroup(Predicates.not(FALSE))\n",
        "144": "        .testEquals();\n",
        "145": "\n",
        "146": "    new EqualsTester()\n",
        "147": "        .addEqualityGroup(Predicates.isNull(), Predicates.isNull())\n",
        "148": "        .addEqualityGroup(Predicates.notNull())\n",
        "149": "        .addEqualityGroup(Predicates.not(Predicates.isNull()))\n",
        "150": "        .testEquals();\n",
        "151": "\n",
        "152": "    new EqualsTester()\n",
        "153": "        .addEqualityGroup(Predicates.notNull(), Predicates.notNull())\n",
        "154": "        .addEqualityGroup(Predicates.isNull())\n",
        "155": "        .addEqualityGroup(Predicates.not(Predicates.notNull()))\n",
        "156": "        .testEquals();\n",
        "157": "  }\n",
        "158": "\n",
        "159": "  /*\n",
        "160": "   * Tests for all the different flavors of Predicates.and().\n",
        "161": "   */\n",
        "162": "\n",
        "163": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "164": "  public void testAnd_applyNoArgs() {\n",
        "165": "    assertEvalsToTrue(Predicates.and());\n",
        "166": "  }\n",
        "167": "\n",
        "168": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "169": "  public void testAnd_equalityNoArgs() {\n",
        "170": "    new EqualsTester()\n",
        "171": "        .addEqualityGroup(Predicates.and(), Predicates.and())\n",
        "172": "        .addEqualityGroup(Predicates.and(FALSE))\n",
        "173": "        .addEqualityGroup(Predicates.or())\n",
        "174": "        .testEquals();\n",
        "175": "  }\n",
        "176": "\n",
        "177": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "178": "  public void testAnd_applyOneArg() {\n",
        "179": "    assertEvalsLikeOdd(Predicates.and(isOdd()));\n",
        "180": "  }\n",
        "181": "\n",
        "182": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "183": "  public void testAnd_equalityOneArg() {\n",
        "184": "    Object[] notEqualObjects = {Predicates.and(NEVER_REACHED, FALSE)};\n",
        "185": "    new EqualsTester()\n",
        "186": "        .addEqualityGroup(\n",
        "187": "            Predicates.and(NEVER_REACHED), Predicates.and(NEVER_REACHED))\n",
        "188": "        .addEqualityGroup(notEqualObjects)\n",
        "189": "        .addEqualityGroup(Predicates.and(isOdd()))\n",
        "190": "        .addEqualityGroup(Predicates.and())\n",
        "191": "        .addEqualityGroup(Predicates.or(NEVER_REACHED))\n",
        "192": "        .testEquals();\n",
        "193": "  }\n",
        "194": "\n",
        "195": "  public void testAnd_applyBinary() {\n",
        "196": "    assertEvalsLikeOdd(Predicates.and(isOdd(), TRUE));\n",
        "197": "    assertEvalsLikeOdd(Predicates.and(TRUE, isOdd()));\n",
        "198": "    assertEvalsToFalse(Predicates.and(FALSE, NEVER_REACHED));\n",
        "199": "  }\n",
        "200": "\n",
        "201": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "202": "  public void testAnd_equalityBinary() {\n",
        "203": "    new EqualsTester()\n",
        "204": "        .addEqualityGroup(\n",
        "205": "            Predicates.and(TRUE, NEVER_REACHED),\n",
        "206": "            Predicates.and(TRUE, NEVER_REACHED))\n",
        "207": "        .addEqualityGroup(Predicates.and(NEVER_REACHED, TRUE))\n",
        "208": "        .addEqualityGroup(Predicates.and(TRUE))\n",
        "209": "        .addEqualityGroup(Predicates.or(TRUE, NEVER_REACHED))\n",
        "210": "        .testEquals();\n",
        "211": "  }\n",
        "212": "\n",
        "213": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "214": "  public void testAnd_applyTernary() {\n",
        "215": "    assertEvalsLikeOdd(Predicates.and(isOdd(), TRUE, TRUE));\n",
        "216": "    assertEvalsLikeOdd(Predicates.and(TRUE, isOdd(), TRUE));\n",
        "217": "    assertEvalsLikeOdd(Predicates.and(TRUE, TRUE, isOdd()));\n",
        "218": "    assertEvalsToFalse(Predicates.and(TRUE, FALSE, NEVER_REACHED));\n",
        "219": "  }\n",
        "220": "\n",
        "221": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "222": "  public void testAnd_equalityTernary() {\n",
        "223": "    new EqualsTester()\n",
        "224": "        .addEqualityGroup(\n",
        "225": "            Predicates.and(TRUE, isOdd(), NEVER_REACHED),\n",
        "226": "            Predicates.and(TRUE, isOdd(), NEVER_REACHED))\n",
        "227": "        .addEqualityGroup(Predicates.and(isOdd(), NEVER_REACHED, TRUE))\n",
        "228": "        .addEqualityGroup(Predicates.and(TRUE))\n",
        "229": "        .addEqualityGroup(Predicates.or(TRUE, isOdd(), NEVER_REACHED))\n",
        "230": "        .testEquals();\n",
        "231": "  }\n",
        "232": "\n",
        "233": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "234": "  public void testAnd_applyIterable() {\n",
        "235": "    Collection<Predicate<Integer>> empty = Arrays.asList();\n",
        "236": "    assertEvalsToTrue(Predicates.and(empty));\n",
        "237": "    assertEvalsLikeOdd(Predicates.and(Arrays.asList(isOdd())));\n",
        "238": "    assertEvalsLikeOdd(Predicates.and(Arrays.asList(TRUE, isOdd())));\n",
        "239": "    assertEvalsToFalse(Predicates.and(Arrays.asList(FALSE, NEVER_REACHED)));\n",
        "240": "  }\n",
        "241": "\n",
        "242": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "243": "  public void testAnd_equalityIterable() {\n",
        "244": "    new EqualsTester()\n",
        "245": "        .addEqualityGroup(\n",
        "246": "            Predicates.and(Arrays.asList(TRUE, NEVER_REACHED)),\n",
        "247": "            Predicates.and(Arrays.asList(TRUE, NEVER_REACHED)),\n",
        "248": "            Predicates.and(TRUE, NEVER_REACHED))\n",
        "249": "        .addEqualityGroup(Predicates.and(FALSE, NEVER_REACHED))\n",
        "250": "        .addEqualityGroup(Predicates.or(TRUE, NEVER_REACHED))\n",
        "251": "        .testEquals();\n",
        "252": "  }\n",
        "253": "\n",
        "254": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "255": "  public void testAnd_arrayDefensivelyCopied() {\n",
        "256": "    Predicate[] array = {Predicates.alwaysFalse()};\n",
        "257": "    Predicate<Object> predicate = Predicates.and(array);\n",
        "258": "    assertFalse(predicate.apply(1));\n",
        "259": "    array[0] = Predicates.alwaysTrue();\n",
        "260": "    assertFalse(predicate.apply(1));\n",
        "261": "  }\n",
        "262": "\n",
        "263": "  public void testAnd_listDefensivelyCopied() {\n",
        "264": "    List<Predicate<Object>> list = newArrayList();\n",
        "265": "    Predicate<Object> predicate = Predicates.and(list);\n",
        "266": "    assertTrue(predicate.apply(1));\n",
        "267": "    list.add(Predicates.alwaysFalse());\n",
        "268": "    assertTrue(predicate.apply(1));\n",
        "269": "  }\n",
        "270": "\n",
        "271": "  public void testAnd_iterableDefensivelyCopied() {\n",
        "272": "    final List<Predicate<Object>> list = newArrayList();\n",
        "273": "    Iterable<Predicate<Object>> iterable = new Iterable<Predicate<Object>>() {\n",
        "274": "      @Override\n",
        "275": "      public Iterator<Predicate<Object>> iterator() {\n",
        "276": "        return list.iterator();\n",
        "277": "      }\n",
        "278": "    };\n",
        "279": "    Predicate<Object> predicate = Predicates.and(iterable);\n",
        "280": "    assertTrue(predicate.apply(1));\n",
        "281": "    list.add(Predicates.alwaysFalse());\n",
        "282": "    assertTrue(predicate.apply(1));\n",
        "283": "  }\n",
        "284": "\n",
        "285": "  /*\n",
        "286": "   * Tests for all the different flavors of Predicates.or().\n",
        "287": "   */\n",
        "288": "\n",
        "289": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "290": "  public void testOr_applyNoArgs() {\n",
        "291": "    assertEvalsToFalse(Predicates.or());\n",
        "292": "  }\n",
        "293": "\n",
        "294": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "295": "  public void testOr_equalityNoArgs() {\n",
        "296": "    new EqualsTester()\n",
        "297": "        .addEqualityGroup(Predicates.or(), Predicates.or())\n",
        "298": "        .addEqualityGroup(Predicates.or(TRUE))\n",
        "299": "        .addEqualityGroup(Predicates.and())\n",
        "300": "        .testEquals();\n",
        "301": "  }\n",
        "302": "\n",
        "303": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "304": "  public void testOr_applyOneArg() {\n",
        "305": "    assertEvalsToTrue(Predicates.or(TRUE));\n",
        "306": "    assertEvalsToFalse(Predicates.or(FALSE));\n",
        "307": "  }\n",
        "308": "\n",
        "309": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "310": "  public void testOr_equalityOneArg() {\n",
        "311": "    new EqualsTester()\n",
        "312": "        .addEqualityGroup(\n",
        "313": "            Predicates.or(NEVER_REACHED), Predicates.or(NEVER_REACHED))\n",
        "314": "        .addEqualityGroup(Predicates.or(NEVER_REACHED, TRUE))\n",
        "315": "        .addEqualityGroup(Predicates.or(TRUE))\n",
        "316": "        .addEqualityGroup(Predicates.or())\n",
        "317": "        .addEqualityGroup(Predicates.and(NEVER_REACHED))\n",
        "318": "        .testEquals();\n",
        "319": "  }\n",
        "320": "\n",
        "321": "  public void testOr_applyBinary() {\n",
        "322": "    Predicate<Integer> falseOrFalse = Predicates.or(FALSE, FALSE);\n",
        "323": "    Predicate<Integer> falseOrTrue = Predicates.or(FALSE, TRUE);\n",
        "324": "    Predicate<Integer> trueOrAnything = Predicates.or(TRUE, NEVER_REACHED);\n",
        "325": "\n",
        "326": "    assertEvalsToFalse(falseOrFalse);\n",
        "327": "    assertEvalsToTrue(falseOrTrue);\n",
        "328": "    assertEvalsToTrue(trueOrAnything);\n",
        "329": "  }\n",
        "330": "\n",
        "331": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "332": "  public void testOr_equalityBinary() {\n",
        "333": "    new EqualsTester()\n",
        "334": "        .addEqualityGroup(\n",
        "335": "            Predicates.or(FALSE, NEVER_REACHED),\n",
        "336": "            Predicates.or(FALSE, NEVER_REACHED))\n",
        "337": "        .addEqualityGroup(Predicates.or(NEVER_REACHED, FALSE))\n",
        "338": "        .addEqualityGroup(Predicates.or(TRUE))\n",
        "339": "        .addEqualityGroup(Predicates.and(FALSE, NEVER_REACHED))\n",
        "340": "        .testEquals();\n",
        "341": "  }\n",
        "342": "\n",
        "343": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "344": "  public void testOr_applyTernary() {\n",
        "345": "    assertEvalsLikeOdd(Predicates.or(isOdd(), FALSE, FALSE));\n",
        "346": "    assertEvalsLikeOdd(Predicates.or(FALSE, isOdd(), FALSE));\n",
        "347": "    assertEvalsLikeOdd(Predicates.or(FALSE, FALSE, isOdd()));\n",
        "348": "    assertEvalsToTrue(Predicates.or(FALSE, TRUE, NEVER_REACHED));\n",
        "349": "  }\n",
        "350": "\n",
        "351": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "352": "  public void testOr_equalityTernary() {\n",
        "353": "    new EqualsTester()\n",
        "354": "        .addEqualityGroup(\n",
        "355": "            Predicates.or(FALSE, NEVER_REACHED, TRUE),\n",
        "356": "            Predicates.or(FALSE, NEVER_REACHED, TRUE))\n",
        "357": "        .addEqualityGroup(Predicates.or(TRUE, NEVER_REACHED, FALSE))\n",
        "358": "        .addEqualityGroup(Predicates.or(TRUE))\n",
        "359": "        .addEqualityGroup(Predicates.and(FALSE, NEVER_REACHED, TRUE))\n",
        "360": "        .testEquals();\n",
        "361": "  }\n",
        "362": "\n",
        "363": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "364": "  public void testOr_applyIterable() {\n",
        "365": "    Predicate<Integer> vacuouslyFalse =\n",
        "366": "        Predicates.or(Collections.<Predicate<Integer>>emptyList());\n",
        "367": "    Predicate<Integer> troo = Predicates.or(Collections.singletonList(TRUE));\n",
        "368": "    /*\n",
        "369": "     * newLinkedList() takes varargs. TRUE and FALSE are both instances of\n",
        "370": "     * Predicate<Integer>, so the call is safe.\n",
        "371": "     */\n",
        "372": "    Predicate<Integer> trueAndFalse = Predicates.or(Arrays.asList(TRUE, FALSE));\n",
        "373": "\n",
        "374": "    assertEvalsToFalse(vacuouslyFalse);\n",
        "375": "    assertEvalsToTrue(troo);\n",
        "376": "    assertEvalsToTrue(trueAndFalse);\n",
        "377": "  }\n",
        "378": "\n",
        "379": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "380": "  public void testOr_equalityIterable() {\n",
        "381": "    new EqualsTester()\n",
        "382": "        .addEqualityGroup(\n",
        "383": "            Predicates.or(Arrays.asList(FALSE, NEVER_REACHED)),\n",
        "384": "            Predicates.or(Arrays.asList(FALSE, NEVER_REACHED)),\n",
        "385": "            Predicates.or(FALSE, NEVER_REACHED))\n",
        "386": "        .addEqualityGroup(Predicates.or(TRUE, NEVER_REACHED))\n",
        "387": "        .addEqualityGroup(Predicates.and(FALSE, NEVER_REACHED))\n",
        "388": "        .testEquals();\n",
        "389": "  }\n",
        "390": "\n",
        "391": "  @SuppressWarnings(\"unchecked\") // varargs\n",
        "392": "  public void testOr_arrayDefensivelyCopied() {\n",
        "393": "    Predicate[] array = {Predicates.alwaysFalse()};\n",
        "394": "    Predicate<Object> predicate = Predicates.or(array);\n",
        "395": "    assertFalse(predicate.apply(1));\n",
        "396": "    array[0] = Predicates.alwaysTrue();\n",
        "397": "    assertFalse(predicate.apply(1));\n",
        "398": "  }\n",
        "399": "\n",
        "400": "  public void testOr_listDefensivelyCopied() {\n",
        "401": "    List<Predicate<Object>> list = newArrayList();\n",
        "402": "    Predicate<Object> predicate = Predicates.or(list);\n",
        "403": "    assertFalse(predicate.apply(1));\n",
        "404": "    list.add(Predicates.alwaysTrue());\n",
        "405": "    assertFalse(predicate.apply(1));\n",
        "406": "  }\n",
        "407": "\n",
        "408": "  public void testOr_iterableDefensivelyCopied() {\n",
        "409": "    final List<Predicate<Object>> list = newArrayList();\n",
        "410": "    Iterable<Predicate<Object>> iterable = new Iterable<Predicate<Object>>() {\n",
        "411": "      @Override\n",
        "412": "      public Iterator<Predicate<Object>> iterator() {\n",
        "413": "        return list.iterator();\n",
        "414": "      }\n",
        "415": "    };\n",
        "416": "    Predicate<Object> predicate = Predicates.or(iterable);\n",
        "417": "    assertFalse(predicate.apply(1));\n",
        "418": "    list.add(Predicates.alwaysTrue());\n",
        "419": "    assertFalse(predicate.apply(1));\n",
        "420": "  }\n",
        "421": "\n",
        "422": "  /*\n",
        "423": "   * Tests for Predicates.equalTo(x).\n",
        "424": "   */\n",
        "425": "\n",
        "426": "  public void testIsEqualTo_apply() {\n",
        "427": "    Predicate<Integer> isOne = Predicates.equalTo(1);\n",
        "428": "\n",
        "429": "    assertTrue(isOne.apply(1));\n",
        "430": "    assertFalse(isOne.apply(2));\n",
        "431": "    assertFalse(isOne.apply(null));\n",
        "432": "  }\n",
        "433": "\n",
        "434": "  public void testIsEqualTo_equality() {\n",
        "435": "    new EqualsTester()\n",
        "436": "        .addEqualityGroup(Predicates.equalTo(1), Predicates.equalTo(1))\n",
        "437": "        .addEqualityGroup(Predicates.equalTo(2))\n",
        "438": "        .addEqualityGroup(Predicates.equalTo(null))\n",
        "439": "        .testEquals();\n",
        "440": "  }\n",
        "441": "\n",
        "442": "  public void testIsEqualToNull_apply() {\n",
        "443": "    Predicate<Integer> isNull = Predicates.equalTo(null);\n",
        "444": "    assertTrue(isNull.apply(null));\n",
        "445": "    assertFalse(isNull.apply(1));\n",
        "446": "  }\n",
        "447": "\n",
        "448": "  public void testIsEqualToNull_equality() {\n",
        "449": "    new EqualsTester()\n",
        "450": "        .addEqualityGroup(Predicates.equalTo(null), Predicates.equalTo(null))\n",
        "451": "        .addEqualityGroup(Predicates.equalTo(1))\n",
        "452": "        .addEqualityGroup(Predicates.equalTo(\"null\"))\n",
        "453": "        .testEquals();\n",
        "454": "  }\n",
        "455": "\n",
        "456": "  /*\n",
        "457": "   * Tests for Predicates.isNull()\n",
        "458": "   */\n",
        "459": "\n",
        "460": "  public void testIsNull_apply() {\n",
        "461": "    Predicate<Integer> isNull = Predicates.isNull();\n",
        "462": "    assertTrue(isNull.apply(null));\n",
        "463": "    assertFalse(isNull.apply(1));\n",
        "464": "  }\n",
        "465": "\n",
        "466": "  public void testIsNull_equality() {\n",
        "467": "    new EqualsTester()\n",
        "468": "        .addEqualityGroup(Predicates.isNull(), Predicates.isNull())\n",
        "469": "        .addEqualityGroup(Predicates.notNull())\n",
        "470": "        .testEquals();\n",
        "471": "  }\n",
        "472": "\n",
        "473": "  public void testNotNull_apply() {\n",
        "474": "    Predicate<Integer> notNull = Predicates.notNull();\n",
        "475": "    assertFalse(notNull.apply(null));\n",
        "476": "    assertTrue(notNull.apply(1));\n",
        "477": "  }\n",
        "478": "\n",
        "479": "  public void testNotNull_equality() {\n",
        "480": "    new EqualsTester()\n",
        "481": "        .addEqualityGroup(Predicates.notNull(), Predicates.notNull())\n",
        "482": "        .addEqualityGroup(Predicates.isNull())\n",
        "483": "        .testEquals();\n",
        "484": "  }\n",
        "485": "\n",
        "486": "  public void testIn_apply() {\n",
        "487": "    Collection<Integer> nums = Arrays.asList(1, 5);\n",
        "488": "    Predicate<Integer> isOneOrFive = Predicates.in(nums);\n",
        "489": "\n",
        "490": "    assertTrue(isOneOrFive.apply(1));\n",
        "491": "    assertTrue(isOneOrFive.apply(5));\n",
        "492": "    assertFalse(isOneOrFive.apply(3));\n",
        "493": "    assertFalse(isOneOrFive.apply(null));\n",
        "494": "  }\n",
        "495": "\n",
        "496": "  public void testIn_equality() {\n",
        "497": "    Collection<Integer> nums = ImmutableSet.of(1, 5);\n",
        "498": "    Collection<Integer> sameOrder = ImmutableSet.of(1, 5);\n",
        "499": "    Collection<Integer> differentOrder = ImmutableSet.of(5, 1);\n",
        "500": "    Collection<Integer> differentNums = ImmutableSet.of(1, 3, 5);\n",
        "501": "\n",
        "502": "    new EqualsTester()\n",
        "503": "        .addEqualityGroup(Predicates.in(nums), Predicates.in(nums),\n",
        "504": "            Predicates.in(sameOrder), Predicates.in(differentOrder))\n",
        "505": "        .addEqualityGroup(Predicates.in(differentNums))\n",
        "506": "        .testEquals();\n",
        "507": "  }\n",
        "508": "\n",
        "509": "  public void testIn_handlesNullPointerException() {\n",
        "510": "    class CollectionThatThrowsNPE<T> extends ArrayList<T> {\n",
        "511": "      private static final long serialVersionUID = 1L;\n",
        "512": "\n",
        "513": "      @Override public boolean contains(Object element) {\n",
        "514": "        Preconditions.checkNotNull(element);\n",
        "515": "        return super.contains(element);\n",
        "516": "      }\n",
        "517": "    }\n",
        "518": "    Collection<Integer> nums = new CollectionThatThrowsNPE<Integer>();\n",
        "519": "    Predicate<Integer> isFalse = Predicates.in(nums);\n",
        "520": "    assertFalse(isFalse.apply(null));\n",
        "521": "  }\n",
        "522": "\n",
        "523": "  public void testIn_handlesClassCastException() {\n",
        "524": "    class CollectionThatThrowsCCE<T> extends ArrayList<T> {\n",
        "525": "      private static final long serialVersionUID = 1L;\n",
        "526": "\n",
        "527": "      @Override public boolean contains(Object element) {\n",
        "528": "        throw new ClassCastException(\"\");\n",
        "529": "      }\n",
        "530": "    }\n",
        "531": "    Collection<Integer> nums = new CollectionThatThrowsCCE<Integer>();\n",
        "532": "    nums.add(3);\n",
        "533": "    Predicate<Integer> isThree = Predicates.in(nums);\n",
        "534": "    assertFalse(isThree.apply(3));\n",
        "535": "  }\n",
        "536": "\n",
        "537": "  /*\n",
        "538": "   * Tests that compilation will work when applying explicit types.\n",
        "539": "   */\n",
        "540": "  @SuppressWarnings(\"unused\") // compilation test\n",
        "541": "  public void testIn_compilesWithExplicitSupertype() {\n",
        "542": "    Collection<Number> nums = ImmutableSet.of();\n",
        "543": "    Predicate<Number> p1 = Predicates.in(nums);\n",
        "544": "    Predicate<Object> p2 = Predicates.<Object>in(nums);\n",
        "545": "    // The next two lines are not expected to compile.\n",
        "546": "    // Predicate<Integer> p3 = Predicates.in(nums);\n",
        "547": "    // Predicate<Integer> p4 = Predicates.<Integer>in(nums);\n",
        "548": "  }\n",
        "549": "\n",
        "550": "  // enum singleton pattern\n",
        "551": "  private enum TrimStringFunction implements Function<String, String> {\n",
        "552": "    INSTANCE;\n",
        "553": "\n",
        "554": "    @Override\n",
        "555": "    public String apply(String string) {\n",
        "556": "      return WHITESPACE.trimFrom(string);\n",
        "557": "    }\n",
        "558": "  }\n",
        "559": "\n",
        "560": "  public void testCompose() {\n",
        "561": "    Function<String, String> trim = TrimStringFunction.INSTANCE;\n",
        "562": "    Predicate<String> equalsFoo = Predicates.equalTo(\"Foo\");\n",
        "563": "    Predicate<String> equalsBar = Predicates.equalTo(\"Bar\");\n",
        "564": "    Predicate<String> trimEqualsFoo = Predicates.compose(equalsFoo, trim);\n",
        "565": "    Function<String, String> identity = Functions.identity();\n",
        "566": "\n",
        "567": "    assertTrue(trimEqualsFoo.apply(\"Foo\"));\n",
        "568": "    assertTrue(trimEqualsFoo.apply(\"   Foo   \"));\n",
        "569": "    assertFalse(trimEqualsFoo.apply(\"Foo-b-que\"));\n",
        "570": "\n",
        "571": "    new EqualsTester()\n",
        "572": "        .addEqualityGroup(trimEqualsFoo, Predicates.compose(equalsFoo, trim))\n",
        "573": "        .addEqualityGroup(equalsFoo)\n",
        "574": "        .addEqualityGroup(trim)\n",
        "575": "        .addEqualityGroup(Predicates.compose(equalsFoo, identity))\n",
        "576": "        .addEqualityGroup(Predicates.compose(equalsBar, trim))\n",
        "577": "        .testEquals();\n",
        "578": "  }\n",
        "579": "\n",
        "580": "  public void assertEqualHashCode(\n",
        "581": "      Predicate<? super Integer> expected, Predicate<? super Integer> actual) {\n",
        "582": "    assertEquals(actual + \" should hash like \" + expected, expected.hashCode(), actual.hashCode());\n",
        "583": "  }\n",
        "584": "\n",
        "585": "  public void testHashCodeForBooleanOperations() {\n",
        "586": "    Predicate<Integer> p1 = Predicates.isNull();\n",
        "587": "    Predicate<Integer> p2 = isOdd();\n",
        "588": "\n",
        "589": "    // Make sure that hash codes are not computed per-instance.\n",
        "590": "    assertEqualHashCode(\n",
        "591": "        Predicates.not(p1),\n",
        "592": "        Predicates.not(p1));\n",
        "593": "\n",
        "594": "    assertEqualHashCode(\n",
        "595": "        Predicates.and(p1, p2),\n",
        "596": "        Predicates.and(p1, p2));\n",
        "597": "\n",
        "598": "    assertEqualHashCode(\n",
        "599": "        Predicates.or(p1, p2),\n",
        "600": "        Predicates.or(p1, p2));\n",
        "601": "\n",
        "602": "    // While not a contractual requirement, we'd like the hash codes for ands\n",
        "603": "    // & ors of the same predicates to not collide.\n",
        "604": "    assertTrue(Predicates.and(p1, p2).hashCode() != Predicates.or(p1, p2).hashCode());\n",
        "605": "  }\n",
        "606": "\n",
        "607": "  private static void assertEvalsToTrue(Predicate<? super Integer> predicate) {\n",
        "608": "    assertTrue(predicate.apply(0));\n",
        "609": "    assertTrue(predicate.apply(1));\n",
        "610": "    assertTrue(predicate.apply(null));\n",
        "611": "  }\n",
        "612": "\n",
        "613": "  private static void assertEvalsToFalse(Predicate<? super Integer> predicate) {\n",
        "614": "    assertFalse(predicate.apply(0));\n",
        "615": "    assertFalse(predicate.apply(1));\n",
        "616": "    assertFalse(predicate.apply(null));\n",
        "617": "  }\n",
        "618": "\n",
        "619": "  private static void assertEvalsLikeOdd(Predicate<? super Integer> predicate) {\n",
        "620": "    assertEvalsLike(isOdd(), predicate);\n",
        "621": "  }\n",
        "622": "\n",
        "623": "  private static void assertEvalsLike(\n",
        "624": "      Predicate<? super Integer> expected,\n",
        "625": "      Predicate<? super Integer> actual) {\n",
        "626": "    assertEvalsLike(expected, actual, 0);\n",
        "627": "    assertEvalsLike(expected, actual, 1);\n",
        "628": "    assertEvalsLike(expected, actual, null);\n",
        "629": "  }\n",
        "630": "\n",
        "631": "  private static <T> void assertEvalsLike(\n",
        "632": "      Predicate<? super T> expected,\n",
        "633": "      Predicate<? super T> actual,\n",
        "634": "      T input) {\n",
        "635": "    Boolean expectedResult = null;\n",
        "636": "    RuntimeException expectedRuntimeException = null;\n",
        "637": "    try {\n",
        "638": "      expectedResult = expected.apply(input);\n",
        "639": "    } catch (RuntimeException e) {\n",
        "640": "      expectedRuntimeException = e;\n",
        "641": "    }\n",
        "642": "\n",
        "643": "    Boolean actualResult = null;\n",
        "644": "    RuntimeException actualRuntimeException = null;\n",
        "645": "    try {\n",
        "646": "      actualResult = actual.apply(input);\n",
        "647": "    } catch (RuntimeException e) {\n",
        "648": "      actualRuntimeException = e;\n",
        "649": "    }\n",
        "650": "\n",
        "651": "    assertEquals(expectedResult, actualResult);\n",
        "652": "    if (expectedRuntimeException != null) {\n",
        "653": "      assertNotNull(actualRuntimeException);\n",
        "654": "      assertEquals(\n",
        "655": "          expectedRuntimeException.getClass(),\n",
        "656": "          actualRuntimeException.getClass());\n",
        "657": "    }\n",
        "658": "  }\n",
        "659": "}\n",
        "660": "\n"
    }
}