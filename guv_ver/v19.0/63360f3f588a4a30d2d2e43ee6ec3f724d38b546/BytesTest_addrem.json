{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.primitives;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.collect.testing.Helpers;\n",
        "21": "\n",
        "22": "import junit.framework.TestCase;\n",
        "23": "\n",
        "24": "import java.util.Arrays;\n",
        "25": "import java.util.Collection;\n",
        "26": "import java.util.Collections;\n",
        "27": "import java.util.List;\n",
        "28": "\n",
        "29": "/**\n",
        "30": " * Unit test for {@link Bytes}.\n",
        "31": " *\n",
        "32": " * @author Kevin Bourrillion\n",
        "33": " */\n",
        "34": "@GwtCompatible(emulated = true)\n",
        "35": "public class BytesTest extends TestCase {\n",
        "36": "  private static final byte[] EMPTY = {};\n",
        "37": "  private static final byte[] ARRAY1 = {(byte) 1};\n",
        "38": "  private static final byte[] ARRAY234\n",
        "39": "      = {(byte) 2, (byte) 3, (byte) 4};\n",
        "40": "\n",
        "41": "  private static final byte[] VALUES =\n",
        "42": "      { Byte.MIN_VALUE, -1, 0, 1, Byte.MAX_VALUE };\n",
        "43": "\n",
        "44": "  public void testHashCode() {\n",
        "45": "    for (byte value : VALUES) {\n",
        "46": "      assertEquals(((Byte) value).hashCode(), Bytes.hashCode(value));\n",
        "47": "    }\n",
        "48": "  }\n",
        "49": "\n",
        "50": "  public void testContains() {\n",
        "51": "    assertFalse(Bytes.contains(EMPTY, (byte) 1));\n",
        "52": "    assertFalse(Bytes.contains(ARRAY1, (byte) 2));\n",
        "53": "    assertFalse(Bytes.contains(ARRAY234, (byte) 1));\n",
        "54": "    assertTrue(Bytes.contains(new byte[] {(byte) -1}, (byte) -1));\n",
        "55": "    assertTrue(Bytes.contains(ARRAY234, (byte) 2));\n",
        "56": "    assertTrue(Bytes.contains(ARRAY234, (byte) 3));\n",
        "57": "    assertTrue(Bytes.contains(ARRAY234, (byte) 4));\n",
        "58": "  }\n",
        "59": "\n",
        "60": "  public void testIndexOf() {\n",
        "61": "    assertEquals(-1, Bytes.indexOf(EMPTY, (byte) 1));\n",
        "62": "    assertEquals(-1, Bytes.indexOf(ARRAY1, (byte) 2));\n",
        "63": "    assertEquals(-1, Bytes.indexOf(ARRAY234, (byte) 1));\n",
        "64": "    assertEquals(0, Bytes.indexOf(\n",
        "65": "        new byte[] {(byte) -1}, (byte) -1));\n",
        "66": "    assertEquals(0, Bytes.indexOf(ARRAY234, (byte) 2));\n",
        "67": "    assertEquals(1, Bytes.indexOf(ARRAY234, (byte) 3));\n",
        "68": "    assertEquals(2, Bytes.indexOf(ARRAY234, (byte) 4));\n",
        "69": "    assertEquals(1, Bytes.indexOf(\n",
        "70": "        new byte[] { (byte) 2, (byte) 3, (byte) 2, (byte) 3 },\n",
        "71": "        (byte) 3));\n",
        "72": "  }\n",
        "73": "\n",
        "74": "  public void testIndexOf_arrayTarget() {\n",
        "75": "    assertEquals(0, Bytes.indexOf(EMPTY, EMPTY));\n",
        "76": "    assertEquals(0, Bytes.indexOf(ARRAY234, EMPTY));\n",
        "77": "    assertEquals(-1, Bytes.indexOf(EMPTY, ARRAY234));\n",
        "78": "    assertEquals(-1, Bytes.indexOf(ARRAY234, ARRAY1));\n",
        "79": "    assertEquals(-1, Bytes.indexOf(ARRAY1, ARRAY234));\n",
        "80": "    assertEquals(0, Bytes.indexOf(ARRAY1, ARRAY1));\n",
        "81": "    assertEquals(0, Bytes.indexOf(ARRAY234, ARRAY234));\n",
        "82": "    assertEquals(0, Bytes.indexOf(\n",
        "83": "        ARRAY234, new byte[] { (byte) 2, (byte) 3 }));\n",
        "84": "    assertEquals(1, Bytes.indexOf(\n",
        "85": "        ARRAY234, new byte[] { (byte) 3, (byte) 4 }));\n",
        "86": "    assertEquals(1, Bytes.indexOf(ARRAY234, new byte[] { (byte) 3 }));\n",
        "87": "    assertEquals(2, Bytes.indexOf(ARRAY234, new byte[] { (byte) 4 }));\n",
        "88": "    assertEquals(1, Bytes.indexOf(new byte[] { (byte) 2, (byte) 3,\n",
        "89": "        (byte) 3, (byte) 3, (byte) 3 },\n",
        "90": "        new byte[] { (byte) 3 }\n",
        "91": "    ));\n",
        "92": "    assertEquals(2, Bytes.indexOf(\n",
        "93": "        new byte[] { (byte) 2, (byte) 3, (byte) 2,\n",
        "94": "            (byte) 3, (byte) 4, (byte) 2, (byte) 3},\n",
        "95": "        new byte[] { (byte) 2, (byte) 3, (byte) 4}\n",
        "96": "    ));\n",
        "97": "    assertEquals(1, Bytes.indexOf(\n",
        "98": "        new byte[] { (byte) 2, (byte) 2, (byte) 3,\n",
        "99": "            (byte) 4, (byte) 2, (byte) 3, (byte) 4},\n",
        "100": "        new byte[] { (byte) 2, (byte) 3, (byte) 4}\n",
        "101": "    ));\n",
        "102": "    assertEquals(-1, Bytes.indexOf(\n",
        "103": "        new byte[] { (byte) 4, (byte) 3, (byte) 2},\n",
        "104": "        new byte[] { (byte) 2, (byte) 3, (byte) 4}\n",
        "105": "    ));\n",
        "106": "  }\n",
        "107": "\n",
        "108": "  public void testLastIndexOf() {\n",
        "109": "    assertEquals(-1, Bytes.lastIndexOf(EMPTY, (byte) 1));\n",
        "110": "    assertEquals(-1, Bytes.lastIndexOf(ARRAY1, (byte) 2));\n",
        "111": "    assertEquals(-1, Bytes.lastIndexOf(ARRAY234, (byte) 1));\n",
        "112": "    assertEquals(0, Bytes.lastIndexOf(\n",
        "113": "        new byte[] {(byte) -1}, (byte) -1));\n",
        "114": "    assertEquals(0, Bytes.lastIndexOf(ARRAY234, (byte) 2));\n",
        "115": "    assertEquals(1, Bytes.lastIndexOf(ARRAY234, (byte) 3));\n",
        "116": "    assertEquals(2, Bytes.lastIndexOf(ARRAY234, (byte) 4));\n",
        "117": "    assertEquals(3, Bytes.lastIndexOf(\n",
        "118": "        new byte[] { (byte) 2, (byte) 3, (byte) 2, (byte) 3 },\n",
        "119": "        (byte) 3));\n",
        "120": "  }\n",
        "121": "\n",
        "122": "  public void testConcat() {\n",
        "123": "    assertTrue(Arrays.equals(EMPTY, Bytes.concat()));\n",
        "124": "    assertTrue(Arrays.equals(EMPTY, Bytes.concat(EMPTY)));\n",
        "125": "    assertTrue(Arrays.equals(EMPTY, Bytes.concat(EMPTY, EMPTY, EMPTY)));\n",
        "126": "    assertTrue(Arrays.equals(ARRAY1, Bytes.concat(ARRAY1)));\n",
        "127": "    assertNotSame(ARRAY1, Bytes.concat(ARRAY1));\n",
        "128": "    assertTrue(Arrays.equals(ARRAY1, Bytes.concat(EMPTY, ARRAY1, EMPTY)));\n",
        "129": "    assertTrue(Arrays.equals(\n",
        "130": "        new byte[] {(byte) 1, (byte) 1, (byte) 1},\n",
        "131": "        Bytes.concat(ARRAY1, ARRAY1, ARRAY1)));\n",
        "132": "    assertTrue(Arrays.equals(\n",
        "133": "        new byte[] {(byte) 1, (byte) 2, (byte) 3, (byte) 4},\n",
        "134": "        Bytes.concat(ARRAY1, ARRAY234)));\n",
        "135": "  }\n",
        "136": "\n",
        "137": "  public void testEnsureCapacity() {\n",
        "138": "    assertSame(EMPTY, Bytes.ensureCapacity(EMPTY, 0, 1));\n",
        "139": "    assertSame(ARRAY1, Bytes.ensureCapacity(ARRAY1, 0, 1));\n",
        "140": "    assertSame(ARRAY1, Bytes.ensureCapacity(ARRAY1, 1, 1));\n",
        "141": "    assertTrue(Arrays.equals(\n",
        "142": "        new byte[] {(byte) 1, (byte) 0, (byte) 0},\n",
        "143": "        Bytes.ensureCapacity(ARRAY1, 2, 1)));\n",
        "144": "  }\n",
        "145": "\n",
        "146": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "147": "  public void testEnsureCapacity_fail() {\n",
        "148": "    try {\n",
        "149": "      Bytes.ensureCapacity(ARRAY1, -1, 1);\n",
        "150": "      fail();\n",
        "151": "    } catch (IllegalArgumentException expected) {\n",
        "152": "    }\n",
        "153": "    try {\n",
        "154": "      // notice that this should even fail when no growth was needed\n",
        "155": "      Bytes.ensureCapacity(ARRAY1, 1, -1);\n",
        "156": "      fail();\n",
        "157": "    } catch (IllegalArgumentException expected) {\n",
        "158": "    }\n",
        "159": "  }\n",
        "160": "\n",
        "161": "  public void testToArray() {\n",
        "162": "    // need explicit type parameter to avoid javac warning!?\n",
        "163": "    List<Byte> none = Arrays.<Byte>asList();\n",
        "164": "    assertTrue(Arrays.equals(EMPTY, Bytes.toArray(none)));\n",
        "165": "\n",
        "166": "    List<Byte> one = Arrays.asList((byte) 1);\n",
        "167": "    assertTrue(Arrays.equals(ARRAY1, Bytes.toArray(one)));\n",
        "168": "\n",
        "169": "    byte[] array = {(byte) 0, (byte) 1, (byte) 0x55};\n",
        "170": "\n",
        "171": "    List<Byte> three = Arrays.asList((byte) 0, (byte) 1, (byte) 0x55);\n",
        "172": "    assertTrue(Arrays.equals(array, Bytes.toArray(three)));\n",
        "173": "\n",
        "174": "    assertTrue(Arrays.equals(array, Bytes.toArray(Bytes.asList(array))));\n",
        "175": "  }\n",
        "176": "\n",
        "177": "  public void testToArray_threadSafe() {\n",
        "178": "    for (int delta : new int[] { +1, 0, -1 }) {\n",
        "179": "      for (int i = 0; i < VALUES.length; i++) {\n",
        "180": "        List<Byte> list = Bytes.asList(VALUES).subList(0, i);\n",
        "181": "        Collection<Byte> misleadingSize =\n",
        "182": "            Helpers.misleadingSizeCollection(delta);\n",
        "183": "        misleadingSize.addAll(list);\n",
        "184": "        byte[] arr = Bytes.toArray(misleadingSize);\n",
        "185": "        assertEquals(i, arr.length);\n",
        "186": "        for (int j = 0; j < i; j++) {\n",
        "187": "          assertEquals(VALUES[j], arr[j]);\n",
        "188": "        }\n",
        "189": "      }\n",
        "190": "    }\n",
        "191": "  }\n",
        "192": "\n",
        "193": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "194": "  public void testToArray_withNull() {\n",
        "195": "    List<Byte> list = Arrays.asList((byte) 0, (byte) 1, null);\n",
        "196": "    try {\n",
        "197": "      Bytes.toArray(list);\n",
        "198": "      fail();\n",
        "199": "    } catch (NullPointerException expected) {\n",
        "200": "    }\n",
        "201": "  }\n",
        "202": "\n",
        "203": "  public void testToArray_withConversion() {\n",
        "204": "    byte[] array = {(byte) 0, (byte) 1, (byte) 2};\n",
        "205": "\n",
        "206": "    List<Byte> bytes = Arrays.asList((byte) 0, (byte) 1, (byte) 2);\n",
        "207": "    List<Short> shorts = Arrays.asList((short) 0, (short) 1, (short) 2);\n",
        "208": "    List<Integer> ints = Arrays.asList(0, 1, 2);\n",
        "209": "    List<Float> floats = Arrays.asList((float) 0, (float) 1, (float) 2);\n",
        "210": "    List<Long> longs = Arrays.asList((long) 0, (long) 1, (long) 2);\n",
        "211": "    List<Double> doubles = Arrays.asList((double) 0, (double) 1, (double) 2);\n",
        "212": "\n",
        "213": "    assertTrue(Arrays.equals(array, Bytes.toArray(bytes)));\n",
        "214": "    assertTrue(Arrays.equals(array, Bytes.toArray(shorts)));\n",
        "215": "    assertTrue(Arrays.equals(array, Bytes.toArray(ints)));\n",
        "216": "    assertTrue(Arrays.equals(array, Bytes.toArray(floats)));\n",
        "217": "    assertTrue(Arrays.equals(array, Bytes.toArray(longs)));\n",
        "218": "    assertTrue(Arrays.equals(array, Bytes.toArray(doubles)));\n",
        "219": "  }\n",
        "220": "\n",
        "221": "  public void testAsList_isAView() {\n",
        "222": "    byte[] array = {(byte) 0, (byte) 1};\n",
        "223": "    List<Byte> list = Bytes.asList(array);\n",
        "224": "    list.set(0, (byte) 2);\n",
        "225": "    assertTrue(Arrays.equals(new byte[] {(byte) 2, (byte) 1}, array));\n",
        "226": "    array[1] = (byte) 3;\n",
        "227": "    assertEquals(Arrays.asList((byte) 2, (byte) 3), list);\n",
        "228": "  }\n",
        "229": "\n",
        "230": "  public void testAsList_toArray_roundTrip() {\n",
        "231": "    byte[] array = { (byte) 0, (byte) 1, (byte) 2 };\n",
        "232": "    List<Byte> list = Bytes.asList(array);\n",
        "233": "    byte[] newArray = Bytes.toArray(list);\n",
        "234": "\n",
        "235": "    // Make sure it returned a copy\n",
        "236": "    list.set(0, (byte) 4);\n",
        "237": "    assertTrue(Arrays.equals(\n",
        "238": "        new byte[] { (byte) 0, (byte) 1, (byte) 2 }, newArray));\n",
        "239": "    newArray[1] = (byte) 5;\n",
        "240": "    assertEquals((byte) 1, (byte) list.get(1));\n",
        "241": "  }\n",
        "242": "\n",
        "243": "  // This test stems from a real bug found by andrewk\n",
        "244": "  public void testAsList_subList_toArray_roundTrip() {\n",
        "245": "    byte[] array = { (byte) 0, (byte) 1, (byte) 2, (byte) 3 };\n",
        "246": "    List<Byte> list = Bytes.asList(array);\n",
        "247": "    assertTrue(Arrays.equals(new byte[] { (byte) 1, (byte) 2 },\n",
        "248": "        Bytes.toArray(list.subList(1, 3))));\n",
        "249": "    assertTrue(Arrays.equals(new byte[] {},\n",
        "250": "        Bytes.toArray(list.subList(2, 2))));\n",
        "251": "  }\n",
        "252": "\n",
        "253": "  public void testAsListEmpty() {\n",
        "254": "    assertSame(Collections.emptyList(), Bytes.asList(EMPTY));\n",
        "255": "  }\n",
        "256": "}\n",
        "257": "\n"
    }
}