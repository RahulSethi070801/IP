{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2006 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.base;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "\n",
        "23": "import junit.framework.AssertionFailedError;\n",
        "24": "import junit.framework.TestCase;\n",
        "25": "\n",
        "26": "/**\n",
        "27": " * Unit test for {@link Preconditions}.\n",
        "28": " *\n",
        "29": " * @author Kevin Bourrillion\n",
        "30": " * @author Jared Levy\n",
        "31": " */\n",
        "32": "@GwtCompatible(emulated = true)\n",
        "33": "public class PreconditionsTest extends TestCase {\n",
        "34": "  public void testCheckArgument_simple_success() {\n",
        "35": "    Preconditions.checkArgument(true);\n",
        "36": "  }\n",
        "37": "\n",
        "38": "  public void testCheckArgument_simple_failure() {\n",
        "39": "    try {\n",
        "40": "      Preconditions.checkArgument(false);\n",
        "41": "      fail(\"no exception thrown\");\n",
        "42": "    } catch (IllegalArgumentException expected) {\n",
        "43": "    }\n",
        "44": "  }\n",
        "45": "\n",
        "46": "  public void testCheckArgument_simpleMessage_success() {\n",
        "47": "    Preconditions.checkArgument(true, IGNORE_ME);\n",
        "48": "  }\n",
        "49": "\n",
        "50": "  public void testCheckArgument_simpleMessage_failure() {\n",
        "51": "    try {\n",
        "52": "      Preconditions.checkArgument(false, new Message());\n",
        "53": "      fail(\"no exception thrown\");\n",
        "54": "    } catch (IllegalArgumentException expected) {\n",
        "55": "      verifySimpleMessage(expected);\n",
        "56": "    }\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  public void testCheckArgument_nullMessage_failure() {\n",
        "60": "    try {\n",
        "61": "      Preconditions.checkArgument(false, null);\n",
        "62": "      fail(\"no exception thrown\");\n",
        "63": "    } catch (IllegalArgumentException expected) {\n",
        "64": "      assertThat(expected).hasMessage(\"null\");\n",
        "65": "    }\n",
        "66": "  }\n",
        "67": "\n",
        "68": "  public void testCheckArgument_complexMessage_success() {\n",
        "69": "    Preconditions.checkArgument(true, \"%s\", IGNORE_ME);\n",
        "70": "  }\n",
        "71": "\n",
        "72": "  public void testCheckArgument_complexMessage_failure() {\n",
        "73": "    try {\n",
        "74": "      Preconditions.checkArgument(false, FORMAT, 5);\n",
        "75": "      fail(\"no exception thrown\");\n",
        "76": "    } catch (IllegalArgumentException expected) {\n",
        "77": "      verifyComplexMessage(expected);\n",
        "78": "    }\n",
        "79": "  }\n",
        "80": "\n",
        "81": "  public void testCheckState_simple_success() {\n",
        "82": "    Preconditions.checkState(true);\n",
        "83": "  }\n",
        "84": "\n",
        "85": "  public void testCheckState_simple_failure() {\n",
        "86": "    try {\n",
        "87": "      Preconditions.checkState(false);\n",
        "88": "      fail(\"no exception thrown\");\n",
        "89": "    } catch (IllegalStateException expected) {\n",
        "90": "    }\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  public void testCheckState_simpleMessage_success() {\n",
        "94": "    Preconditions.checkState(true, IGNORE_ME);\n",
        "95": "  }\n",
        "96": "\n",
        "97": "  public void testCheckState_simpleMessage_failure() {\n",
        "98": "    try {\n",
        "99": "      Preconditions.checkState(false, new Message());\n",
        "100": "      fail(\"no exception thrown\");\n",
        "101": "    } catch (IllegalStateException expected) {\n",
        "102": "      verifySimpleMessage(expected);\n",
        "103": "    }\n",
        "104": "  }\n",
        "105": "\n",
        "106": "  public void testCheckState_nullMessage_failure() {\n",
        "107": "    try {\n",
        "108": "      Preconditions.checkState(false, null);\n",
        "109": "      fail(\"no exception thrown\");\n",
        "110": "    } catch (IllegalStateException expected) {\n",
        "111": "      assertThat(expected).hasMessage(\"null\");\n",
        "112": "    }\n",
        "113": "  }\n",
        "114": "\n",
        "115": "  public void testCheckState_complexMessage_success() {\n",
        "116": "    Preconditions.checkState(true, \"%s\", IGNORE_ME);\n",
        "117": "  }\n",
        "118": "\n",
        "119": "  public void testCheckState_complexMessage_failure() {\n",
        "120": "    try {\n",
        "121": "      Preconditions.checkState(false, FORMAT, 5);\n",
        "122": "      fail(\"no exception thrown\");\n",
        "123": "    } catch (IllegalStateException expected) {\n",
        "124": "      verifyComplexMessage(expected);\n",
        "125": "    }\n",
        "126": "  }\n",
        "127": "\n",
        "128": "  private static final String NON_NULL_STRING = \"foo\";\n",
        "129": "\n",
        "130": "  public void testCheckNotNull_simple_success() {\n",
        "131": "    String result = Preconditions.checkNotNull(NON_NULL_STRING);\n",
        "132": "    assertSame(NON_NULL_STRING, result);\n",
        "133": "  }\n",
        "134": "\n",
        "135": "  public void testCheckNotNull_simple_failure() {\n",
        "136": "    try {\n",
        "137": "      Preconditions.checkNotNull(null);\n",
        "138": "      fail(\"no exception thrown\");\n",
        "139": "    } catch (NullPointerException expected) {\n",
        "140": "    }\n",
        "141": "  }\n",
        "142": "\n",
        "143": "  public void testCheckNotNull_simpleMessage_success() {\n",
        "144": "    String result = Preconditions.checkNotNull(NON_NULL_STRING, IGNORE_ME);\n",
        "145": "    assertSame(NON_NULL_STRING, result);\n",
        "146": "  }\n",
        "147": "\n",
        "148": "  public void testCheckNotNull_simpleMessage_failure() {\n",
        "149": "    try {\n",
        "150": "      Preconditions.checkNotNull(null, new Message());\n",
        "151": "      fail(\"no exception thrown\");\n",
        "152": "    } catch (NullPointerException expected) {\n",
        "153": "      verifySimpleMessage(expected);\n",
        "154": "    }\n",
        "155": "  }\n",
        "156": "\n",
        "157": "  public void testCheckNotNull_complexMessage_success() {\n",
        "158": "    String result = Preconditions.checkNotNull(\n",
        "159": "        NON_NULL_STRING, \"%s\", IGNORE_ME);\n",
        "160": "    assertSame(NON_NULL_STRING, result);\n",
        "161": "  }\n",
        "162": "\n",
        "163": "  public void testCheckNotNull_complexMessage_failure() {\n",
        "164": "    try {\n",
        "165": "      Preconditions.checkNotNull(null, FORMAT, 5);\n",
        "166": "      fail(\"no exception thrown\");\n",
        "167": "    } catch (NullPointerException expected) {\n",
        "168": "      verifyComplexMessage(expected);\n",
        "169": "    }\n",
        "170": "  }\n",
        "171": "\n",
        "172": "  public void testCheckElementIndex_ok() {\n",
        "173": "    assertEquals(0, Preconditions.checkElementIndex(0, 1));\n",
        "174": "    assertEquals(0, Preconditions.checkElementIndex(0, 2));\n",
        "175": "    assertEquals(1, Preconditions.checkElementIndex(1, 2));\n",
        "176": "  }\n",
        "177": "\n",
        "178": "  public void testCheckElementIndex_badSize() {\n",
        "179": "    try {\n",
        "180": "      Preconditions.checkElementIndex(1, -1);\n",
        "181": "      fail();\n",
        "182": "    } catch (IllegalArgumentException expected) {\n",
        "183": "      // don't care what the message text is, as this is an invalid usage of\n",
        "184": "      // the Preconditions class, unlike all the other exceptions it throws\n",
        "185": "    }\n",
        "186": "  }\n",
        "187": "\n",
        "188": "  public void testCheckElementIndex_negative() {\n",
        "189": "    try {\n",
        "190": "      Preconditions.checkElementIndex(-1, 1);\n",
        "191": "      fail();\n",
        "192": "    } catch (IndexOutOfBoundsException expected) {\n",
        "193": "      assertThat(expected).hasMessage(\"index (-1) must not be negative\");\n",
        "194": "    }\n",
        "195": "  }\n",
        "196": "\n",
        "197": "  public void testCheckElementIndex_tooHigh() {\n",
        "198": "    try {\n",
        "199": "      Preconditions.checkElementIndex(1, 1);\n",
        "200": "      fail();\n",
        "201": "    } catch (IndexOutOfBoundsException expected) {\n",
        "202": "      assertThat(expected).hasMessage(\"index (1) must be less than size (1)\");\n",
        "203": "    }\n",
        "204": "  }\n",
        "205": "\n",
        "206": "  public void testCheckElementIndex_withDesc_negative() {\n",
        "207": "    try {\n",
        "208": "      Preconditions.checkElementIndex(-1, 1, \"foo\");\n",
        "209": "      fail();\n",
        "210": "    } catch (IndexOutOfBoundsException expected) {\n",
        "211": "      assertThat(expected).hasMessage(\"foo (-1) must not be negative\");\n",
        "212": "    }\n",
        "213": "  }\n",
        "214": "\n",
        "215": "  public void testCheckElementIndex_withDesc_tooHigh() {\n",
        "216": "    try {\n",
        "217": "      Preconditions.checkElementIndex(1, 1, \"foo\");\n",
        "218": "      fail();\n",
        "219": "    } catch (IndexOutOfBoundsException expected) {\n",
        "220": "      assertThat(expected).hasMessage(\"foo (1) must be less than size (1)\");\n",
        "221": "    }\n",
        "222": "  }\n",
        "223": "\n",
        "224": "  public void testCheckPositionIndex_ok() {\n",
        "225": "    assertEquals(0, Preconditions.checkPositionIndex(0, 0));\n",
        "226": "    assertEquals(0, Preconditions.checkPositionIndex(0, 1));\n",
        "227": "    assertEquals(1, Preconditions.checkPositionIndex(1, 1));\n",
        "228": "  }\n",
        "229": "\n",
        "230": "  public void testCheckPositionIndex_badSize() {\n",
        "231": "    try {\n",
        "232": "      Preconditions.checkPositionIndex(1, -1);\n",
        "233": "      fail();\n",
        "234": "    } catch (IllegalArgumentException expected) {\n",
        "235": "      // don't care what the message text is, as this is an invalid usage of\n",
        "236": "      // the Preconditions class, unlike all the other exceptions it throws\n",
        "237": "    }\n",
        "238": "  }\n",
        "239": "\n",
        "240": "  public void testCheckPositionIndex_negative() {\n",
        "241": "    try {\n",
        "242": "      Preconditions.checkPositionIndex(-1, 1);\n",
        "243": "      fail();\n",
        "244": "    } catch (IndexOutOfBoundsException expected) {\n",
        "245": "      assertThat(expected).hasMessage(\"index (-1) must not be negative\");\n",
        "246": "    }\n",
        "247": "  }\n",
        "248": "\n",
        "249": "  public void testCheckPositionIndex_tooHigh() {\n",
        "250": "    try {\n",
        "251": "      Preconditions.checkPositionIndex(2, 1);\n",
        "252": "      fail();\n",
        "253": "    } catch (IndexOutOfBoundsException expected) {\n",
        "254": "      assertThat(expected).hasMessage(\"index (2) must not be greater than size (1)\");\n",
        "255": "    }\n",
        "256": "  }\n",
        "257": "\n",
        "258": "  public void testCheckPositionIndex_withDesc_negative() {\n",
        "259": "    try {\n",
        "260": "      Preconditions.checkPositionIndex(-1, 1, \"foo\");\n",
        "261": "      fail();\n",
        "262": "    } catch (IndexOutOfBoundsException expected) {\n",
        "263": "      assertThat(expected).hasMessage(\"foo (-1) must not be negative\");\n",
        "264": "    }\n",
        "265": "  }\n",
        "266": "\n",
        "267": "  public void testCheckPositionIndex_withDesc_tooHigh() {\n",
        "268": "    try {\n",
        "269": "      Preconditions.checkPositionIndex(2, 1, \"foo\");\n",
        "270": "      fail();\n",
        "271": "    } catch (IndexOutOfBoundsException expected) {\n",
        "272": "      assertThat(expected).hasMessage(\"foo (2) must not be greater than size (1)\");\n",
        "273": "    }\n",
        "274": "  }\n",
        "275": "\n",
        "276": "  public void testCheckPositionIndexes_ok() {\n",
        "277": "    Preconditions.checkPositionIndexes(0, 0, 0);\n",
        "278": "    Preconditions.checkPositionIndexes(0, 0, 1);\n",
        "279": "    Preconditions.checkPositionIndexes(0, 1, 1);\n",
        "280": "    Preconditions.checkPositionIndexes(1, 1, 1);\n",
        "281": "  }\n",
        "282": "\n",
        "283": "  public void testCheckPositionIndexes_badSize() {\n",
        "284": "    try {\n",
        "285": "      Preconditions.checkPositionIndexes(1, 1, -1);\n",
        "286": "      fail();\n",
        "287": "    } catch (IllegalArgumentException expected) {\n",
        "288": "    }\n",
        "289": "  }\n",
        "290": "\n",
        "291": "  public void testCheckPositionIndex_startNegative() {\n",
        "292": "    try {\n",
        "293": "      Preconditions.checkPositionIndexes(-1, 1, 1);\n",
        "294": "      fail();\n",
        "295": "    } catch (IndexOutOfBoundsException expected) {\n",
        "296": "      assertThat(expected).hasMessage(\"start index (-1) must not be negative\");\n",
        "297": "    }\n",
        "298": "  }\n",
        "299": "\n",
        "300": "  public void testCheckPositionIndexes_endTooHigh() {\n",
        "301": "    try {\n",
        "302": "      Preconditions.checkPositionIndexes(0, 2, 1);\n",
        "303": "      fail();\n",
        "304": "    } catch (IndexOutOfBoundsException expected) {\n",
        "305": "      assertThat(expected).hasMessage(\"end index (2) must not be greater than size (1)\");\n",
        "306": "    }\n",
        "307": "  }\n",
        "308": "\n",
        "309": "  public void testCheckPositionIndexes_reversed() {\n",
        "310": "    try {\n",
        "311": "      Preconditions.checkPositionIndexes(1, 0, 1);\n",
        "312": "      fail();\n",
        "313": "    } catch (IndexOutOfBoundsException expected) {\n",
        "314": "      assertThat(expected).hasMessage(\"end index (0) must not be less than start index (1)\");\n",
        "315": "    }\n",
        "316": "  }\n",
        "317": "\n",
        "318": "  public void testFormat() {\n",
        "319": "    assertEquals(\"%s\", Preconditions.format(\"%s\"));\n",
        "320": "    assertEquals(\"5\", Preconditions.format(\"%s\", 5));\n",
        "321": "    assertEquals(\"foo [5]\", Preconditions.format(\"foo\", 5));\n",
        "322": "    assertEquals(\"foo [5, 6, 7]\", Preconditions.format(\"foo\", 5, 6, 7));\n",
        "323": "    assertEquals(\"%s 1 2\", Preconditions.format(\"%s %s %s\", \"%s\", 1, 2));\n",
        "324": "    assertEquals(\" [5, 6]\", Preconditions.format(\"\", 5, 6));\n",
        "325": "    assertEquals(\"123\", Preconditions.format(\"%s%s%s\", 1, 2, 3));\n",
        "326": "    assertEquals(\"1%s%s\", Preconditions.format(\"%s%s%s\", 1));\n",
        "327": "    assertEquals(\"5 + 6 = 11\", Preconditions.format(\"%s + 6 = 11\", 5));\n",
        "328": "    assertEquals(\"5 + 6 = 11\", Preconditions.format(\"5 + %s = 11\", 6));\n",
        "329": "    assertEquals(\"5 + 6 = 11\", Preconditions.format(\"5 + 6 = %s\", 11));\n",
        "330": "    assertEquals(\"5 + 6 = 11\", Preconditions.format(\"%s + %s = %s\", 5, 6, 11));\n",
        "331": "    assertEquals(\"null [null, null]\",\n",
        "332": "        Preconditions.format(\"%s\", null, null, null));\n",
        "333": "    assertEquals(\"null [5, 6]\", Preconditions.format(null, 5, 6));\n",
        "334": "  }\n",
        "335": "\n",
        "336": "  private static final Object IGNORE_ME = new Object() {\n",
        "337": "    @Override public String toString() {\n",
        "338": "      throw new AssertionFailedError();\n",
        "339": "    }\n",
        "340": "  };\n",
        "341": "\n",
        "342": "  private static class Message {\n",
        "343": "    boolean invoked;\n",
        "344": "    @Override public String toString() {\n",
        "345": "      assertFalse(invoked);\n",
        "346": "      invoked = true;\n",
        "347": "      return \"A message\";\n",
        "348": "    }\n",
        "349": "  }\n",
        "350": "\n",
        "351": "  private static final String FORMAT = \"I ate %s pies.\";\n",
        "352": "\n",
        "353": "  private static void verifySimpleMessage(Exception e) {\n",
        "354": "    assertThat(e).hasMessage(\"A message\");\n",
        "355": "  }\n",
        "356": "\n",
        "357": "  private static void verifyComplexMessage(Exception e) {\n",
        "358": "    assertThat(e).hasMessage(\"I ate 5 pies.\");\n",
        "359": "  }\n",
        "360": "}\n"
    }
}