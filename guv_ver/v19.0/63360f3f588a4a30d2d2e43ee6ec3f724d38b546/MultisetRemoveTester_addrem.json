{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2013 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.google;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.Helpers.assertEmpty;\n",
        "20": "import static com.google.common.collect.testing.features.CollectionFeature.ALLOWS_NULL_QUERIES;\n",
        "21": "import static com.google.common.collect.testing.features.CollectionFeature.ALLOWS_NULL_VALUES;\n",
        "22": "import static com.google.common.collect.testing.features.CollectionFeature.SUPPORTS_REMOVE;\n",
        "23": "import static com.google.common.collect.testing.features.CollectionSize.SEVERAL;\n",
        "24": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "25": "\n",
        "26": "import com.google.common.annotations.GwtCompatible;\n",
        "27": "import com.google.common.collect.testing.Helpers;\n",
        "28": "import com.google.common.collect.testing.WrongType;\n",
        "29": "import com.google.common.collect.testing.features.CollectionFeature;\n",
        "30": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "31": "\n",
        "32": "import java.util.Collections;\n",
        "33": "import java.util.List;\n",
        "34": "\n",
        "35": "/**\n",
        "36": " * Tests for {@code Multiset#remove}, {@code Multiset.removeAll}, and {@code Multiset.retainAll}\n",
        "37": " * not already covered by the corresponding Collection testers.\n",
        "38": " *\n",
        "39": " * @author Jared Levy\n",
        "40": " */\n",
        "41": "@GwtCompatible(emulated = true)\n",
        "42": "public class MultisetRemoveTester<E> extends AbstractMultisetTester<E> {\n",
        "43": "  @CollectionFeature.Require(SUPPORTS_REMOVE)\n",
        "44": "  public void testRemoveNegative() {\n",
        "45": "    try {\n",
        "46": "      getMultiset().remove(e0(), -1);\n",
        "47": "      fail(\"Expected IllegalArgumentException\");\n",
        "48": "    } catch (IllegalArgumentException expected) {}\n",
        "49": "    expectUnchanged();\n",
        "50": "  }\n",
        "51": "\n",
        "52": "  @CollectionFeature.Require(absent = SUPPORTS_REMOVE)\n",
        "53": "  public void testRemoveUnsupported() {\n",
        "54": "    try {\n",
        "55": "      getMultiset().remove(e0(), 2);\n",
        "56": "      fail(\"Expected UnsupportedOperationException\");\n",
        "57": "    } catch (UnsupportedOperationException expected) {}\n",
        "58": "  }\n",
        "59": "\n",
        "60": "  @CollectionFeature.Require(SUPPORTS_REMOVE)\n",
        "61": "  public void testRemoveZeroNoOp() {\n",
        "62": "    int originalCount = getMultiset().count(e0());\n",
        "63": "    assertEquals(\"old count\", originalCount, getMultiset().remove(e0(), 0));\n",
        "64": "    expectUnchanged();\n",
        "65": "  }\n",
        "66": "\n",
        "67": "  @CollectionSize.Require(absent = ZERO)\n",
        "68": "  @CollectionFeature.Require(SUPPORTS_REMOVE)\n",
        "69": "  public void testRemove_occurrences_present() {\n",
        "70": "    assertEquals(\"multiset.remove(present, 2) didn't return the old count\",\n",
        "71": "        1, getMultiset().remove(e0(), 2));\n",
        "72": "    assertFalse(\"multiset contains present after multiset.remove(present, 2)\",\n",
        "73": "        getMultiset().contains(e0()));\n",
        "74": "    assertEquals(0, getMultiset().count(e0()));\n",
        "75": "  }\n",
        "76": "\n",
        "77": "  @CollectionSize.Require(SEVERAL)\n",
        "78": "  @CollectionFeature.Require(SUPPORTS_REMOVE)\n",
        "79": "  public void testRemove_some_occurrences_present() {\n",
        "80": "    initThreeCopies();\n",
        "81": "    assertEquals(\"multiset.remove(present, 2) didn't return the old count\",\n",
        "82": "        3, getMultiset().remove(e0(), 2));\n",
        "83": "    assertTrue(\"multiset contains present after multiset.remove(present, 2)\",\n",
        "84": "        getMultiset().contains(e0()));\n",
        "85": "    assertEquals(1, getMultiset().count(e0()));\n",
        "86": "  }\n",
        "87": "\n",
        "88": "  @CollectionFeature.Require(SUPPORTS_REMOVE)\n",
        "89": "  public void testRemove_occurrences_absent() {\n",
        "90": "    assertEquals(\"multiset.remove(absent, 0) didn't return 0\",\n",
        "91": "        0, getMultiset().remove(e3(), 2));\n",
        "92": "  }\n",
        "93": "\n",
        "94": "  @CollectionFeature.Require(absent = SUPPORTS_REMOVE)\n",
        "95": "  public void testRemove_occurrences_unsupported_absent() {\n",
        "96": "    // notice: we don't care whether it succeeds, or fails with UOE\n",
        "97": "    try {\n",
        "98": "      assertEquals(\n",
        "99": "          \"multiset.remove(absent, 2) didn't return 0 or throw an exception\",\n",
        "100": "          0, getMultiset().remove(e3(), 2));\n",
        "101": "    } catch (UnsupportedOperationException ok) {}\n",
        "102": "  }\n",
        "103": "\n",
        "104": "  @CollectionFeature.Require(SUPPORTS_REMOVE)\n",
        "105": "  public void testRemove_occurrences_0() {\n",
        "106": "    int oldCount = getMultiset().count(e0());\n",
        "107": "    assertEquals(\"multiset.remove(E, 0) didn't return the old count\",\n",
        "108": "        oldCount, getMultiset().remove(e0(), 0));\n",
        "109": "  }\n",
        "110": "\n",
        "111": "  @CollectionFeature.Require(SUPPORTS_REMOVE)\n",
        "112": "  public void testRemove_occurrences_negative() {\n",
        "113": "    try {\n",
        "114": "      getMultiset().remove(e0(), -1);\n",
        "115": "      fail(\"multiset.remove(E, -1) didn't throw an exception\");\n",
        "116": "    } catch (IllegalArgumentException required) {}\n",
        "117": "  }\n",
        "118": "\n",
        "119": "  @CollectionFeature.Require(SUPPORTS_REMOVE)\n",
        "120": "  public void testRemove_occurrences_wrongType() {\n",
        "121": "    assertEquals(\"multiset.remove(wrongType, 1) didn't return 0\",\n",
        "122": "        0, getMultiset().remove(WrongType.VALUE, 1));\n",
        "123": "  }\n",
        "124": "\n",
        "125": "  @CollectionSize.Require(absent = ZERO)\n",
        "126": "  @CollectionFeature.Require({SUPPORTS_REMOVE, ALLOWS_NULL_VALUES})\n",
        "127": "  public void testRemove_nullPresent() {\n",
        "128": "    initCollectionWithNullElement();\n",
        "129": "    assertEquals(1, getMultiset().remove(null, 2));\n",
        "130": "    assertFalse(\"multiset contains present after multiset.remove(present, 2)\",\n",
        "131": "        getMultiset().contains(null));\n",
        "132": "    assertEquals(0, getMultiset().count(null));\n",
        "133": "  }\n",
        "134": "\n",
        "135": "  @CollectionFeature.Require({SUPPORTS_REMOVE, ALLOWS_NULL_QUERIES})\n",
        "136": "  public void testRemove_nullAbsent() {\n",
        "137": "    assertEquals(0, getMultiset().remove(null, 2));\n",
        "138": "  }\n",
        "139": "\n",
        "140": "  @CollectionFeature.Require(value = SUPPORTS_REMOVE, absent = ALLOWS_NULL_QUERIES)\n",
        "141": "  public void testRemove_nullForbidden() {\n",
        "142": "    try {\n",
        "143": "      getMultiset().remove(null, 2);\n",
        "144": "      fail(\"Expected NullPointerException\");\n",
        "145": "    } catch (NullPointerException expected) {}\n",
        "146": "  }\n",
        "147": "\n",
        "148": "  @CollectionSize.Require(SEVERAL)\n",
        "149": "  @CollectionFeature.Require(SUPPORTS_REMOVE)\n",
        "150": "  public void testRemoveAllIgnoresCount() {\n",
        "151": "    initThreeCopies();\n",
        "152": "    assertTrue(getMultiset().removeAll(Collections.singleton(e0())));\n",
        "153": "    assertEmpty(getMultiset());\n",
        "154": "  }\n",
        "155": "\n",
        "156": "  @CollectionSize.Require(SEVERAL)\n",
        "157": "  @CollectionFeature.Require(SUPPORTS_REMOVE)\n",
        "158": "  public void testRetainAllIgnoresCount() {\n",
        "159": "    initThreeCopies();\n",
        "160": "    List<E> contents = Helpers.copyToList(getMultiset());\n",
        "161": "    assertFalse(getMultiset().retainAll(Collections.singleton(e0())));\n",
        "162": "    expectContents(contents);\n",
        "163": "  }\n",
        "164": "}\n",
        "165": "\n"
    }
}