{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.collect.ImmutableSet.Builder;\n",
        "23": "import com.google.common.testing.EqualsTester;\n",
        "24": "\n",
        "25": "import java.util.Collection;\n",
        "26": "import java.util.Collections;\n",
        "27": "import java.util.Iterator;\n",
        "28": "import java.util.Set;\n",
        "29": "\n",
        "30": "/**\n",
        "31": " * Unit test for {@link ImmutableSet}.\n",
        "32": " *\n",
        "33": " * @author Kevin Bourrillion\n",
        "34": " * @author Jared Levy\n",
        "35": " * @author Nick Kralevich\n",
        "36": " */\n",
        "37": "@GwtCompatible(emulated = true)\n",
        "38": "public class ImmutableSetTest extends AbstractImmutableSetTest {\n",
        "39": "\n",
        "40": "  @Override protected Set<String> of() {\n",
        "41": "    return ImmutableSet.of();\n",
        "42": "  }\n",
        "43": "\n",
        "44": "  @Override protected Set<String> of(String e) {\n",
        "45": "    return ImmutableSet.of(e);\n",
        "46": "  }\n",
        "47": "\n",
        "48": "  @Override protected Set<String> of(String e1, String e2) {\n",
        "49": "    return ImmutableSet.of(e1, e2);\n",
        "50": "  }\n",
        "51": "\n",
        "52": "  @Override protected Set<String> of(String e1, String e2, String e3) {\n",
        "53": "    return ImmutableSet.of(e1, e2, e3);\n",
        "54": "  }\n",
        "55": "\n",
        "56": "  @Override protected Set<String> of(\n",
        "57": "      String e1, String e2, String e3, String e4) {\n",
        "58": "    return ImmutableSet.of(e1, e2, e3, e4);\n",
        "59": "  }\n",
        "60": "\n",
        "61": "  @Override protected Set<String> of(\n",
        "62": "      String e1, String e2, String e3, String e4, String e5) {\n",
        "63": "    return ImmutableSet.of(e1, e2, e3, e4, e5);\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  @Override protected Set<String> of(String e1, String e2, String e3,\n",
        "67": "      String e4, String e5, String e6, String... rest) {\n",
        "68": "    return ImmutableSet.of(e1, e2, e3, e4, e5, e6, rest);\n",
        "69": "  }\n",
        "70": "\n",
        "71": "  @Override protected Set<String> copyOf(String[] elements) {\n",
        "72": "    return ImmutableSet.copyOf(elements);\n",
        "73": "  }\n",
        "74": "\n",
        "75": "  @Override protected Set<String> copyOf(Collection<String> elements) {\n",
        "76": "    return ImmutableSet.copyOf(elements);\n",
        "77": "  }\n",
        "78": "\n",
        "79": "  @Override protected Set<String> copyOf(Iterable<String> elements) {\n",
        "80": "    return ImmutableSet.copyOf(elements);\n",
        "81": "  }\n",
        "82": "\n",
        "83": "  @Override protected Set<String> copyOf(Iterator<String> elements) {\n",
        "84": "    return ImmutableSet.copyOf(elements);\n",
        "85": "  }\n",
        "86": "\n",
        "87": "  public void testCreation_allDuplicates() {\n",
        "88": "    ImmutableSet<String> set = ImmutableSet.copyOf(Lists.newArrayList(\"a\", \"a\"));\n",
        "89": "    assertTrue(set instanceof SingletonImmutableSet);\n",
        "90": "    assertEquals(Lists.newArrayList(\"a\"), Lists.newArrayList(set));\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  public void testCreation_oneDuplicate() {\n",
        "94": "    // now we'll get the varargs overload\n",
        "95": "    ImmutableSet<String> set = ImmutableSet.of(\n",
        "96": "        \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"a\");\n",
        "97": "    assertEquals(Lists.newArrayList(\n",
        "98": "        \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"),\n",
        "99": "        Lists.newArrayList(set));\n",
        "100": "  }\n",
        "101": "\n",
        "102": "  public void testCreation_manyDuplicates() {\n",
        "103": "    // now we'll get the varargs overload\n",
        "104": "    ImmutableSet<String> set = ImmutableSet.of(\n",
        "105": "        \"a\", \"b\", \"c\", \"c\", \"c\", \"c\", \"b\", \"b\", \"a\", \"a\", \"c\", \"c\", \"c\", \"a\");\n",
        "106": "    assertThat(set).containsExactly(\"a\", \"b\", \"c\").inOrder();\n",
        "107": "  }\n",
        "108": "\n",
        "109": "  public void testCreation_arrayOfArray() {\n",
        "110": "    String[] array = new String[] { \"a\" };\n",
        "111": "    Set<String[]> set = ImmutableSet.<String[]>of(array);\n",
        "112": "    assertEquals(Collections.singleton(array), set);\n",
        "113": "  }\n",
        "114": "\n",
        "115": "  public void testCopyOf_copiesImmutableSortedSet() {\n",
        "116": "    ImmutableSortedSet<String> sortedSet = ImmutableSortedSet.of(\"a\");\n",
        "117": "    ImmutableSet<String> copy = ImmutableSet.copyOf(sortedSet);\n",
        "118": "    assertNotSame(sortedSet, copy);\n",
        "119": "  }\n",
        "120": "\n",
        "121": "  @Override <E extends Comparable<E>> Builder<E> builder() {\n",
        "122": "    return ImmutableSet.builder();\n",
        "123": "  }\n",
        "124": "\n",
        "125": "  @Override int getComplexBuilderSetLastElement() {\n",
        "126": "    return LAST_COLOR_ADDED;\n",
        "127": "  }\n",
        "128": "\n",
        "129": "  public void testEquals() {\n",
        "130": "    new EqualsTester()\n",
        "131": "        .addEqualityGroup(ImmutableSet.of(), ImmutableSet.of())\n",
        "132": "        .addEqualityGroup(ImmutableSet.of(1), ImmutableSet.of(1), ImmutableSet.of(1, 1))\n",
        "133": "        .addEqualityGroup(ImmutableSet.of(1, 2, 1), ImmutableSet.of(2, 1, 1))\n",
        "134": "        .testEquals();\n",
        "135": "  }\n",
        "136": "}\n",
        "137": "\n"
    }
}