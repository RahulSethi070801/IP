{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.base.Joiner;\n",
        "23": "import com.google.common.collect.ImmutableBiMap.Builder;\n",
        "24": "import com.google.common.collect.testing.MapInterfaceTest;\n",
        "25": "\n",
        "26": "import junit.framework.TestCase;\n",
        "27": "\n",
        "28": "import java.util.Collections;\n",
        "29": "import java.util.LinkedHashMap;\n",
        "30": "import java.util.Map;\n",
        "31": "import java.util.Map.Entry;\n",
        "32": "import java.util.Set;\n",
        "33": "\n",
        "34": "/**\n",
        "35": " * Tests for {@link ImmutableBiMap}.\n",
        "36": " *\n",
        "37": " * @author Jared Levy\n",
        "38": " */\n",
        "39": "@GwtCompatible(emulated = true)\n",
        "40": "public class ImmutableBiMapTest extends TestCase {\n",
        "41": "\n",
        "42": "  // TODO: Reduce duplication of ImmutableMapTest code\n",
        "43": "\n",
        "44": "  public static abstract class AbstractMapTests<K, V>\n",
        "45": "      extends MapInterfaceTest<K, V> {\n",
        "46": "    public AbstractMapTests() {\n",
        "47": "      super(false, false, false, false, false);\n",
        "48": "    }\n",
        "49": "\n",
        "50": "    @Override protected Map<K, V> makeEmptyMap() {\n",
        "51": "      throw new UnsupportedOperationException();\n",
        "52": "    }\n",
        "53": "\n",
        "54": "    private static final Joiner joiner = Joiner.on(\", \");\n",
        "55": "\n",
        "56": "    @Override protected void assertMoreInvariants(Map<K, V> map) {\n",
        "57": "\n",
        "58": "      BiMap<K, V> bimap = (BiMap<K, V>) map;\n",
        "59": "\n",
        "60": "      for (Entry<K, V> entry : map.entrySet()) {\n",
        "61": "        assertEquals(entry.getKey() + \"=\" + entry.getValue(),\n",
        "62": "            entry.toString());\n",
        "63": "        assertEquals(entry.getKey(), bimap.inverse().get(entry.getValue()));\n",
        "64": "      }\n",
        "65": "\n",
        "66": "      assertEquals(\"{\" + joiner.join(map.entrySet()) + \"}\",\n",
        "67": "          map.toString());\n",
        "68": "      assertEquals(\"[\" + joiner.join(map.entrySet()) + \"]\",\n",
        "69": "          map.entrySet().toString());\n",
        "70": "      assertEquals(\"[\" + joiner.join(map.keySet()) + \"]\",\n",
        "71": "          map.keySet().toString());\n",
        "72": "      assertEquals(\"[\" + joiner.join(map.values()) + \"]\",\n",
        "73": "          map.values().toString());\n",
        "74": "\n",
        "75": "      assertEquals(Sets.newHashSet(map.entrySet()), map.entrySet());\n",
        "76": "      assertEquals(Sets.newHashSet(map.keySet()), map.keySet());\n",
        "77": "    }\n",
        "78": "  }\n",
        "79": "\n",
        "80": "  public static class MapTests extends AbstractMapTests<String, Integer> {\n",
        "81": "    @Override protected Map<String, Integer> makeEmptyMap() {\n",
        "82": "      return ImmutableBiMap.of();\n",
        "83": "    }\n",
        "84": "\n",
        "85": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "86": "      return ImmutableBiMap.of(\"one\", 1, \"two\", 2, \"three\", 3);\n",
        "87": "    }\n",
        "88": "\n",
        "89": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "90": "      return \"minus one\";\n",
        "91": "    }\n",
        "92": "\n",
        "93": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "94": "      return -1;\n",
        "95": "    }\n",
        "96": "  }\n",
        "97": "\n",
        "98": "  public static class InverseMapTests\n",
        "99": "      extends AbstractMapTests<String, Integer> {\n",
        "100": "    @Override protected Map<String, Integer> makeEmptyMap() {\n",
        "101": "      return ImmutableBiMap.of();\n",
        "102": "    }\n",
        "103": "\n",
        "104": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "105": "      return ImmutableBiMap.of(1, \"one\", 2, \"two\", 3, \"three\").inverse();\n",
        "106": "    }\n",
        "107": "\n",
        "108": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "109": "      return \"minus one\";\n",
        "110": "    }\n",
        "111": "\n",
        "112": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "113": "      return -1;\n",
        "114": "    }\n",
        "115": "  }\n",
        "116": "\n",
        "117": "  public static class CreationTests extends TestCase {\n",
        "118": "    public void testEmptyBuilder() {\n",
        "119": "      ImmutableBiMap<String, Integer> map\n",
        "120": "          = new Builder<String, Integer>().build();\n",
        "121": "      assertEquals(Collections.<String, Integer>emptyMap(), map);\n",
        "122": "      assertEquals(Collections.<Integer, String>emptyMap(), map.inverse());\n",
        "123": "      assertSame(ImmutableBiMap.of(), map);\n",
        "124": "    }\n",
        "125": "\n",
        "126": "    public void testSingletonBuilder() {\n",
        "127": "      ImmutableBiMap<String, Integer> map = new Builder<String, Integer>()\n",
        "128": "          .put(\"one\", 1)\n",
        "129": "          .build();\n",
        "130": "      assertMapEquals(map, \"one\", 1);\n",
        "131": "      assertMapEquals(map.inverse(), 1, \"one\");\n",
        "132": "    }\n",
        "133": "\n",
        "134": "    public void testBuilder_withImmutableEntry() {\n",
        "135": "      ImmutableBiMap<String, Integer> map = new Builder<String, Integer>()\n",
        "136": "          .put(Maps.immutableEntry(\"one\", 1))\n",
        "137": "          .build();\n",
        "138": "      assertMapEquals(map, \"one\", 1);\n",
        "139": "    }\n",
        "140": "\n",
        "141": "    public void testBuilder() {\n",
        "142": "      ImmutableBiMap<String, Integer> map\n",
        "143": "          = ImmutableBiMap.<String, Integer>builder()\n",
        "144": "            .put(\"one\", 1)\n",
        "145": "            .put(\"two\", 2)\n",
        "146": "            .put(\"three\", 3)\n",
        "147": "            .put(\"four\", 4)\n",
        "148": "            .put(\"five\", 5)\n",
        "149": "            .build();\n",
        "150": "      assertMapEquals(map,\n",
        "151": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "152": "      assertMapEquals(map.inverse(),\n",
        "153": "          1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "154": "    }\n",
        "155": "    \n",
        "156": "    public void testBuilder_orderEntriesByValue() {\n",
        "157": "      ImmutableBiMap<String, Integer> map =\n",
        "158": "          ImmutableBiMap.<String, Integer>builder()\n",
        "159": "              .orderEntriesByValue(Ordering.natural())\n",
        "160": "              .put(\"three\", 3)\n",
        "161": "              .put(\"one\", 1)\n",
        "162": "              .put(\"five\", 5)\n",
        "163": "              .put(\"four\", 4)\n",
        "164": "              .put(\"two\", 2)\n",
        "165": "              .build();\n",
        "166": "      assertMapEquals(map,\n",
        "167": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "168": "      assertMapEquals(map.inverse(),\n",
        "169": "          1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "170": "    }\n",
        "171": "    \n",
        "172": "    public void testBuilder_orderEntriesByValueAfterExactSizeBuild() {\n",
        "173": "      ImmutableBiMap.Builder<String, Integer> builder =\n",
        "174": "          new ImmutableBiMap.Builder<String, Integer>(2).put(\"four\", 4).put(\"one\", 1);\n",
        "175": "      ImmutableMap<String, Integer> keyOrdered = builder.build();\n",
        "176": "      ImmutableMap<String, Integer> valueOrdered =\n",
        "177": "          builder.orderEntriesByValue(Ordering.natural()).build();\n",
        "178": "      assertMapEquals(keyOrdered, \"four\", 4, \"one\", 1);\n",
        "179": "      assertMapEquals(valueOrdered, \"one\", 1, \"four\", 4);\n",
        "180": "    }\n",
        "181": "    \n",
        "182": "    public void testBuilder_orderEntriesByValue_usedTwiceFails() {\n",
        "183": "      ImmutableBiMap.Builder<String, Integer> builder = new Builder<String, Integer>()\n",
        "184": "          .orderEntriesByValue(Ordering.natural());\n",
        "185": "      try {\n",
        "186": "        builder.orderEntriesByValue(Ordering.natural());\n",
        "187": "        fail(\"Expected IllegalStateException\");\n",
        "188": "      } catch (IllegalStateException expected) {}\n",
        "189": "    }\n",
        "190": "\n",
        "191": "    public void testBuilderPutAllWithEmptyMap() {\n",
        "192": "      ImmutableBiMap<String, Integer> map = new Builder<String, Integer>()\n",
        "193": "          .putAll(Collections.<String, Integer>emptyMap())\n",
        "194": "          .build();\n",
        "195": "      assertEquals(Collections.<String, Integer>emptyMap(), map);\n",
        "196": "    }\n",
        "197": "\n",
        "198": "    public void testBuilderPutAll() {\n",
        "199": "      Map<String, Integer> toPut = new LinkedHashMap<String, Integer>();\n",
        "200": "      toPut.put(\"one\", 1);\n",
        "201": "      toPut.put(\"two\", 2);\n",
        "202": "      toPut.put(\"three\", 3);\n",
        "203": "      Map<String, Integer> moreToPut = new LinkedHashMap<String, Integer>();\n",
        "204": "      moreToPut.put(\"four\", 4);\n",
        "205": "      moreToPut.put(\"five\", 5);\n",
        "206": "\n",
        "207": "      ImmutableBiMap<String, Integer> map = new Builder<String, Integer>()\n",
        "208": "          .putAll(toPut)\n",
        "209": "          .putAll(moreToPut)\n",
        "210": "          .build();\n",
        "211": "      assertMapEquals(map,\n",
        "212": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "213": "      assertMapEquals(map.inverse(),\n",
        "214": "          1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "215": "    }\n",
        "216": "\n",
        "217": "    public void testBuilderReuse() {\n",
        "218": "      Builder<String, Integer> builder = new Builder<String, Integer>();\n",
        "219": "      ImmutableBiMap<String, Integer> mapOne = builder\n",
        "220": "          .put(\"one\", 1)\n",
        "221": "          .put(\"two\", 2)\n",
        "222": "          .build();\n",
        "223": "      ImmutableBiMap<String, Integer> mapTwo = builder\n",
        "224": "          .put(\"three\", 3)\n",
        "225": "          .put(\"four\", 4)\n",
        "226": "          .build();\n",
        "227": "\n",
        "228": "      assertMapEquals(mapOne, \"one\", 1, \"two\", 2);\n",
        "229": "      assertMapEquals(mapOne.inverse(), 1, \"one\", 2, \"two\");\n",
        "230": "      assertMapEquals(mapTwo, \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4);\n",
        "231": "      assertMapEquals(mapTwo.inverse(),\n",
        "232": "          1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\");\n",
        "233": "    }\n",
        "234": "\n",
        "235": "    public void testBuilderPutNullKey() {\n",
        "236": "      Builder<String, Integer> builder = new Builder<String, Integer>();\n",
        "237": "      try {\n",
        "238": "        builder.put(null, 1);\n",
        "239": "        fail();\n",
        "240": "      } catch (NullPointerException expected) {\n",
        "241": "      }\n",
        "242": "    }\n",
        "243": "\n",
        "244": "    public void testBuilderPutNullValue() {\n",
        "245": "      Builder<String, Integer> builder = new Builder<String, Integer>();\n",
        "246": "      try {\n",
        "247": "        builder.put(\"one\", null);\n",
        "248": "        fail();\n",
        "249": "      } catch (NullPointerException expected) {\n",
        "250": "      }\n",
        "251": "    }\n",
        "252": "\n",
        "253": "    public void testBuilderPutNullKeyViaPutAll() {\n",
        "254": "      Builder<String, Integer> builder = new Builder<String, Integer>();\n",
        "255": "      try {\n",
        "256": "        builder.putAll(Collections.<String, Integer>singletonMap(null, 1));\n",
        "257": "        fail();\n",
        "258": "      } catch (NullPointerException expected) {\n",
        "259": "      }\n",
        "260": "    }\n",
        "261": "\n",
        "262": "    public void testBuilderPutNullValueViaPutAll() {\n",
        "263": "      Builder<String, Integer> builder = new Builder<String, Integer>();\n",
        "264": "      try {\n",
        "265": "        builder.putAll(Collections.<String, Integer>singletonMap(\"one\", null));\n",
        "266": "        fail();\n",
        "267": "      } catch (NullPointerException expected) {\n",
        "268": "      }\n",
        "269": "    }\n",
        "270": "\n",
        "271": "    public void testPuttingTheSameKeyTwiceThrowsOnBuild() {\n",
        "272": "      Builder<String, Integer> builder = new Builder<String, Integer>()\n",
        "273": "          .put(\"one\", 1)\n",
        "274": "          .put(\"one\", 1); // throwing on this line would be even better\n",
        "275": "\n",
        "276": "      try {\n",
        "277": "        builder.build();\n",
        "278": "        fail();\n",
        "279": "      } catch (IllegalArgumentException expected) {\n",
        "280": "        assertThat(expected.getMessage()).contains(\"one\");\n",
        "281": "      }\n",
        "282": "    }\n",
        "283": "\n",
        "284": "    public void testOf() {\n",
        "285": "      assertMapEquals(\n",
        "286": "          ImmutableBiMap.of(\"one\", 1),\n",
        "287": "          \"one\", 1);\n",
        "288": "      assertMapEquals(\n",
        "289": "          ImmutableBiMap.of(\"one\", 1).inverse(),\n",
        "290": "          1, \"one\");\n",
        "291": "      assertMapEquals(\n",
        "292": "          ImmutableBiMap.of(\"one\", 1, \"two\", 2),\n",
        "293": "          \"one\", 1, \"two\", 2);\n",
        "294": "      assertMapEquals(\n",
        "295": "          ImmutableBiMap.of(\"one\", 1, \"two\", 2).inverse(),\n",
        "296": "          1, \"one\", 2, \"two\");\n",
        "297": "      assertMapEquals(\n",
        "298": "          ImmutableBiMap.of(\"one\", 1, \"two\", 2, \"three\", 3),\n",
        "299": "          \"one\", 1, \"two\", 2, \"three\", 3);\n",
        "300": "      assertMapEquals(\n",
        "301": "          ImmutableBiMap.of(\"one\", 1, \"two\", 2, \"three\", 3).inverse(),\n",
        "302": "          1, \"one\", 2, \"two\", 3, \"three\");\n",
        "303": "      assertMapEquals(\n",
        "304": "          ImmutableBiMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4),\n",
        "305": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4);\n",
        "306": "      assertMapEquals(\n",
        "307": "          ImmutableBiMap.of(\n",
        "308": "              \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4).inverse(),\n",
        "309": "          1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\");\n",
        "310": "      assertMapEquals(\n",
        "311": "          ImmutableBiMap.of(\n",
        "312": "              \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5),\n",
        "313": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "314": "      assertMapEquals(\n",
        "315": "          ImmutableBiMap.of(\n",
        "316": "              \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5).inverse(),\n",
        "317": "          1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "318": "    }\n",
        "319": "\n",
        "320": "    public void testOfNullKey() {\n",
        "321": "      try {\n",
        "322": "        ImmutableBiMap.of(null, 1);\n",
        "323": "        fail();\n",
        "324": "      } catch (NullPointerException expected) {\n",
        "325": "      }\n",
        "326": "\n",
        "327": "      try {\n",
        "328": "        ImmutableBiMap.of(\"one\", 1, null, 2);\n",
        "329": "        fail();\n",
        "330": "      } catch (NullPointerException expected) {\n",
        "331": "      }\n",
        "332": "    }\n",
        "333": "\n",
        "334": "    public void testOfNullValue() {\n",
        "335": "      try {\n",
        "336": "        ImmutableBiMap.of(\"one\", null);\n",
        "337": "        fail();\n",
        "338": "      } catch (NullPointerException expected) {\n",
        "339": "      }\n",
        "340": "\n",
        "341": "      try {\n",
        "342": "        ImmutableBiMap.of(\"one\", 1, \"two\", null);\n",
        "343": "        fail();\n",
        "344": "      } catch (NullPointerException expected) {\n",
        "345": "      }\n",
        "346": "    }\n",
        "347": "\n",
        "348": "    public void testOfWithDuplicateKey() {\n",
        "349": "      try {\n",
        "350": "        ImmutableBiMap.of(\"one\", 1, \"one\", 1);\n",
        "351": "        fail();\n",
        "352": "      } catch (IllegalArgumentException expected) {\n",
        "353": "        assertThat(expected.getMessage()).contains(\"one\");\n",
        "354": "      }\n",
        "355": "    }\n",
        "356": "\n",
        "357": "    public void testCopyOfEmptyMap() {\n",
        "358": "      ImmutableBiMap<String, Integer> copy\n",
        "359": "          = ImmutableBiMap.copyOf(Collections.<String, Integer>emptyMap());\n",
        "360": "      assertEquals(Collections.<String, Integer>emptyMap(), copy);\n",
        "361": "      assertSame(copy, ImmutableBiMap.copyOf(copy));\n",
        "362": "      assertSame(ImmutableBiMap.of(), copy);\n",
        "363": "    }\n",
        "364": "\n",
        "365": "    public void testCopyOfSingletonMap() {\n",
        "366": "      ImmutableBiMap<String, Integer> copy\n",
        "367": "          = ImmutableBiMap.copyOf(Collections.singletonMap(\"one\", 1));\n",
        "368": "      assertMapEquals(copy, \"one\", 1);\n",
        "369": "      assertSame(copy, ImmutableBiMap.copyOf(copy));\n",
        "370": "    }\n",
        "371": "\n",
        "372": "    public void testCopyOf() {\n",
        "373": "      Map<String, Integer> original = new LinkedHashMap<String, Integer>();\n",
        "374": "      original.put(\"one\", 1);\n",
        "375": "      original.put(\"two\", 2);\n",
        "376": "      original.put(\"three\", 3);\n",
        "377": "\n",
        "378": "      ImmutableBiMap<String, Integer> copy = ImmutableBiMap.copyOf(original);\n",
        "379": "      assertMapEquals(copy, \"one\", 1, \"two\", 2, \"three\", 3);\n",
        "380": "      assertSame(copy, ImmutableBiMap.copyOf(copy));\n",
        "381": "    }\n",
        "382": "\n",
        "383": "    public void testEmpty() {\n",
        "384": "      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.of();\n",
        "385": "      assertEquals(Collections.<String, Integer>emptyMap(), bimap);\n",
        "386": "      assertEquals(Collections.<String, Integer>emptyMap(), bimap.inverse());\n",
        "387": "    }\n",
        "388": "\n",
        "389": "    public void testFromHashMap() {\n",
        "390": "      Map<String, Integer> hashMap = Maps.newLinkedHashMap();\n",
        "391": "      hashMap.put(\"one\", 1);\n",
        "392": "      hashMap.put(\"two\", 2);\n",
        "393": "      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.copyOf(\n",
        "394": "          ImmutableMap.of(\"one\", 1, \"two\", 2));\n",
        "395": "      assertMapEquals(bimap, \"one\", 1, \"two\", 2);\n",
        "396": "      assertMapEquals(bimap.inverse(), 1, \"one\", 2, \"two\");\n",
        "397": "    }\n",
        "398": "\n",
        "399": "    public void testFromImmutableMap() {\n",
        "400": "      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.copyOf(\n",
        "401": "          new ImmutableMap.Builder<String, Integer>()\n",
        "402": "              .put(\"one\", 1)\n",
        "403": "              .put(\"two\", 2)\n",
        "404": "              .put(\"three\", 3)\n",
        "405": "              .put(\"four\", 4)\n",
        "406": "              .put(\"five\", 5)\n",
        "407": "              .build());\n",
        "408": "      assertMapEquals(bimap,\n",
        "409": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "410": "      assertMapEquals(bimap.inverse(),\n",
        "411": "          1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "412": "    }\n",
        "413": "\n",
        "414": "    public void testDuplicateValues() {\n",
        "415": "      ImmutableMap<String, Integer> map\n",
        "416": "          = new ImmutableMap.Builder<String, Integer>()\n",
        "417": "              .put(\"one\", 1)\n",
        "418": "              .put(\"two\", 2)\n",
        "419": "              .put(\"uno\", 1)\n",
        "420": "              .put(\"dos\", 2)\n",
        "421": "              .build();\n",
        "422": "\n",
        "423": "      try {\n",
        "424": "        ImmutableBiMap.copyOf(map);\n",
        "425": "        fail();\n",
        "426": "      } catch (IllegalArgumentException expected) {\n",
        "427": "        assertThat(expected.getMessage()).contains(\"1\");\n",
        "428": "      }\n",
        "429": "    }\n",
        "430": "  }\n",
        "431": "\n",
        "432": "  public static class BiMapSpecificTests extends TestCase {\n",
        "433": "\n",
        "434": "    @SuppressWarnings(\"deprecation\")\n",
        "435": "    public void testForcePut() {\n",
        "436": "      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.copyOf(\n",
        "437": "          ImmutableMap.of(\"one\", 1, \"two\", 2));\n",
        "438": "      try {\n",
        "439": "        bimap.forcePut(\"three\", 3);\n",
        "440": "        fail();\n",
        "441": "      } catch (UnsupportedOperationException expected) {}\n",
        "442": "    }\n",
        "443": "\n",
        "444": "    public void testKeySet() {\n",
        "445": "      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.copyOf(\n",
        "446": "          ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4));\n",
        "447": "      Set<String> keys = bimap.keySet();\n",
        "448": "      assertEquals(Sets.newHashSet(\"one\", \"two\", \"three\", \"four\"), keys);\n",
        "449": "      assertThat(keys).containsExactly(\"one\", \"two\", \"three\", \"four\").inOrder();\n",
        "450": "    }\n",
        "451": "\n",
        "452": "    public void testValues() {\n",
        "453": "      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.copyOf(\n",
        "454": "          ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4));\n",
        "455": "      Set<Integer> values = bimap.values();\n",
        "456": "      assertEquals(Sets.newHashSet(1, 2, 3, 4), values);\n",
        "457": "      assertThat(values).containsExactly(1, 2, 3, 4).inOrder();\n",
        "458": "    }\n",
        "459": "\n",
        "460": "    public void testDoubleInverse() {\n",
        "461": "      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.copyOf(\n",
        "462": "          ImmutableMap.of(\"one\", 1, \"two\", 2));\n",
        "463": "      assertSame(bimap, bimap.inverse().inverse());\n",
        "464": "    }\n",
        "465": "  }\n",
        "466": "\n",
        "467": "  private static <K, V> void assertMapEquals(Map<K, V> map,\n",
        "468": "      Object... alternatingKeysAndValues) {\n",
        "469": "    int i = 0;\n",
        "470": "    for (Entry<K, V> entry : map.entrySet()) {\n",
        "471": "      assertEquals(alternatingKeysAndValues[i++], entry.getKey());\n",
        "472": "      assertEquals(alternatingKeysAndValues[i++], entry.getValue());\n",
        "473": "    }\n",
        "474": "  }\n",
        "475": "}\n",
        "476": "\n"
    }
}