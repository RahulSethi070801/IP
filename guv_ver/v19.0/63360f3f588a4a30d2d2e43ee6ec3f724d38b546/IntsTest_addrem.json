{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.primitives;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.base.Converter;\n",
        "21": "import com.google.common.collect.testing.Helpers;\n",
        "22": "\n",
        "23": "import junit.framework.TestCase;\n",
        "24": "\n",
        "25": "import java.util.Arrays;\n",
        "26": "import java.util.Collection;\n",
        "27": "import java.util.Collections;\n",
        "28": "import java.util.Comparator;\n",
        "29": "import java.util.List;\n",
        "30": "\n",
        "31": "/**\n",
        "32": " * Unit test for {@link Ints}.\n",
        "33": " *\n",
        "34": " * @author Kevin Bourrillion\n",
        "35": " */\n",
        "36": "@GwtCompatible(emulated = true)\n",
        "37": "@SuppressWarnings(\"cast\") // redundant casts are intentional and harmless\n",
        "38": "public class IntsTest extends TestCase {\n",
        "39": "  private static final int[] EMPTY = {};\n",
        "40": "  private static final int[] ARRAY1 = {(int) 1};\n",
        "41": "  private static final int[] ARRAY234\n",
        "42": "      = {(int) 2, (int) 3, (int) 4};\n",
        "43": "\n",
        "44": "  private static final int LEAST = Integer.MIN_VALUE;\n",
        "45": "  private static final int GREATEST = Integer.MAX_VALUE;\n",
        "46": "\n",
        "47": "  private static final int[] VALUES =\n",
        "48": "      { LEAST, (int) -1, (int) 0, (int) 1, GREATEST };\n",
        "49": "\n",
        "50": "  public void testHashCode() {\n",
        "51": "    for (int value : VALUES) {\n",
        "52": "      assertEquals(((Integer) value).hashCode(), Ints.hashCode(value));\n",
        "53": "    }\n",
        "54": "  }\n",
        "55": "\n",
        "56": "  public void testCheckedCast() {\n",
        "57": "    for (int value : VALUES) {\n",
        "58": "      assertEquals(value, Ints.checkedCast((long) value));\n",
        "59": "    }\n",
        "60": "    assertCastFails(GREATEST + 1L);\n",
        "61": "    assertCastFails(LEAST - 1L);\n",
        "62": "    assertCastFails(Long.MAX_VALUE);\n",
        "63": "    assertCastFails(Long.MIN_VALUE);\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  public void testSaturatedCast() {\n",
        "67": "    for (int value : VALUES) {\n",
        "68": "      assertEquals(value, Ints.saturatedCast((long) value));\n",
        "69": "    }\n",
        "70": "    assertEquals(GREATEST, Ints.saturatedCast(GREATEST + 1L));\n",
        "71": "    assertEquals(LEAST, Ints.saturatedCast(LEAST - 1L));\n",
        "72": "    assertEquals(GREATEST, Ints.saturatedCast(Long.MAX_VALUE));\n",
        "73": "    assertEquals(LEAST, Ints.saturatedCast(Long.MIN_VALUE));\n",
        "74": "  }\n",
        "75": "\n",
        "76": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "77": "  private static void assertCastFails(long value) {\n",
        "78": "    try {\n",
        "79": "      Ints.checkedCast(value);\n",
        "80": "      fail(\"Cast to int should have failed: \" + value);\n",
        "81": "    } catch (IllegalArgumentException ex) {\n",
        "82": "      assertTrue(value + \" not found in exception text: \" + ex.getMessage(),\n",
        "83": "          ex.getMessage().contains(String.valueOf(value)));\n",
        "84": "    }\n",
        "85": "  }\n",
        "86": "\n",
        "87": "  public void testCompare() {\n",
        "88": "    for (int x : VALUES) {\n",
        "89": "      for (int y : VALUES) {\n",
        "90": "        // note: spec requires only that the sign is the same\n",
        "91": "        assertEquals(x + \", \" + y,\n",
        "92": "                     Integer.valueOf(x).compareTo(y),\n",
        "93": "                     Ints.compare(x, y));\n",
        "94": "      }\n",
        "95": "    }\n",
        "96": "  }\n",
        "97": "\n",
        "98": "  public void testContains() {\n",
        "99": "    assertFalse(Ints.contains(EMPTY, (int) 1));\n",
        "100": "    assertFalse(Ints.contains(ARRAY1, (int) 2));\n",
        "101": "    assertFalse(Ints.contains(ARRAY234, (int) 1));\n",
        "102": "    assertTrue(Ints.contains(new int[] {(int) -1}, (int) -1));\n",
        "103": "    assertTrue(Ints.contains(ARRAY234, (int) 2));\n",
        "104": "    assertTrue(Ints.contains(ARRAY234, (int) 3));\n",
        "105": "    assertTrue(Ints.contains(ARRAY234, (int) 4));\n",
        "106": "  }\n",
        "107": "\n",
        "108": "  public void testIndexOf() {\n",
        "109": "    assertEquals(-1, Ints.indexOf(EMPTY, (int) 1));\n",
        "110": "    assertEquals(-1, Ints.indexOf(ARRAY1, (int) 2));\n",
        "111": "    assertEquals(-1, Ints.indexOf(ARRAY234, (int) 1));\n",
        "112": "    assertEquals(0, Ints.indexOf(\n",
        "113": "        new int[] {(int) -1}, (int) -1));\n",
        "114": "    assertEquals(0, Ints.indexOf(ARRAY234, (int) 2));\n",
        "115": "    assertEquals(1, Ints.indexOf(ARRAY234, (int) 3));\n",
        "116": "    assertEquals(2, Ints.indexOf(ARRAY234, (int) 4));\n",
        "117": "    assertEquals(1, Ints.indexOf(\n",
        "118": "        new int[] { (int) 2, (int) 3, (int) 2, (int) 3 },\n",
        "119": "        (int) 3));\n",
        "120": "  }\n",
        "121": "\n",
        "122": "  public void testIndexOf_arrayTarget() {\n",
        "123": "    assertEquals(0, Ints.indexOf(EMPTY, EMPTY));\n",
        "124": "    assertEquals(0, Ints.indexOf(ARRAY234, EMPTY));\n",
        "125": "    assertEquals(-1, Ints.indexOf(EMPTY, ARRAY234));\n",
        "126": "    assertEquals(-1, Ints.indexOf(ARRAY234, ARRAY1));\n",
        "127": "    assertEquals(-1, Ints.indexOf(ARRAY1, ARRAY234));\n",
        "128": "    assertEquals(0, Ints.indexOf(ARRAY1, ARRAY1));\n",
        "129": "    assertEquals(0, Ints.indexOf(ARRAY234, ARRAY234));\n",
        "130": "    assertEquals(0, Ints.indexOf(\n",
        "131": "        ARRAY234, new int[] { (int) 2, (int) 3 }));\n",
        "132": "    assertEquals(1, Ints.indexOf(\n",
        "133": "        ARRAY234, new int[] { (int) 3, (int) 4 }));\n",
        "134": "    assertEquals(1, Ints.indexOf(ARRAY234, new int[] { (int) 3 }));\n",
        "135": "    assertEquals(2, Ints.indexOf(ARRAY234, new int[] { (int) 4 }));\n",
        "136": "    assertEquals(1, Ints.indexOf(new int[] { (int) 2, (int) 3,\n",
        "137": "        (int) 3, (int) 3, (int) 3 },\n",
        "138": "        new int[] { (int) 3 }\n",
        "139": "    ));\n",
        "140": "    assertEquals(2, Ints.indexOf(\n",
        "141": "        new int[] { (int) 2, (int) 3, (int) 2,\n",
        "142": "            (int) 3, (int) 4, (int) 2, (int) 3},\n",
        "143": "        new int[] { (int) 2, (int) 3, (int) 4}\n",
        "144": "    ));\n",
        "145": "    assertEquals(1, Ints.indexOf(\n",
        "146": "        new int[] { (int) 2, (int) 2, (int) 3,\n",
        "147": "            (int) 4, (int) 2, (int) 3, (int) 4},\n",
        "148": "        new int[] { (int) 2, (int) 3, (int) 4}\n",
        "149": "    ));\n",
        "150": "    assertEquals(-1, Ints.indexOf(\n",
        "151": "        new int[] { (int) 4, (int) 3, (int) 2},\n",
        "152": "        new int[] { (int) 2, (int) 3, (int) 4}\n",
        "153": "    ));\n",
        "154": "  }\n",
        "155": "\n",
        "156": "  public void testLastIndexOf() {\n",
        "157": "    assertEquals(-1, Ints.lastIndexOf(EMPTY, (int) 1));\n",
        "158": "    assertEquals(-1, Ints.lastIndexOf(ARRAY1, (int) 2));\n",
        "159": "    assertEquals(-1, Ints.lastIndexOf(ARRAY234, (int) 1));\n",
        "160": "    assertEquals(0, Ints.lastIndexOf(\n",
        "161": "        new int[] {(int) -1}, (int) -1));\n",
        "162": "    assertEquals(0, Ints.lastIndexOf(ARRAY234, (int) 2));\n",
        "163": "    assertEquals(1, Ints.lastIndexOf(ARRAY234, (int) 3));\n",
        "164": "    assertEquals(2, Ints.lastIndexOf(ARRAY234, (int) 4));\n",
        "165": "    assertEquals(3, Ints.lastIndexOf(\n",
        "166": "        new int[] { (int) 2, (int) 3, (int) 2, (int) 3 },\n",
        "167": "        (int) 3));\n",
        "168": "  }\n",
        "169": "\n",
        "170": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "171": "  public void testMax_noArgs() {\n",
        "172": "    try {\n",
        "173": "      Ints.max();\n",
        "174": "      fail();\n",
        "175": "    } catch (IllegalArgumentException expected) {\n",
        "176": "    }\n",
        "177": "  }\n",
        "178": "\n",
        "179": "  public void testMax() {\n",
        "180": "    assertEquals(LEAST, Ints.max(LEAST));\n",
        "181": "    assertEquals(GREATEST, Ints.max(GREATEST));\n",
        "182": "    assertEquals((int) 9, Ints.max(\n",
        "183": "        (int) 8, (int) 6, (int) 7,\n",
        "184": "        (int) 5, (int) 3, (int) 0, (int) 9));\n",
        "185": "  }\n",
        "186": "\n",
        "187": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "188": "  public void testMin_noArgs() {\n",
        "189": "    try {\n",
        "190": "      Ints.min();\n",
        "191": "      fail();\n",
        "192": "    } catch (IllegalArgumentException expected) {\n",
        "193": "    }\n",
        "194": "  }\n",
        "195": "\n",
        "196": "  public void testMin() {\n",
        "197": "    assertEquals(LEAST, Ints.min(LEAST));\n",
        "198": "    assertEquals(GREATEST, Ints.min(GREATEST));\n",
        "199": "    assertEquals((int) 0, Ints.min(\n",
        "200": "        (int) 8, (int) 6, (int) 7,\n",
        "201": "        (int) 5, (int) 3, (int) 0, (int) 9));\n",
        "202": "  }\n",
        "203": "\n",
        "204": "  public void testConcat() {\n",
        "205": "    assertTrue(Arrays.equals(EMPTY, Ints.concat()));\n",
        "206": "    assertTrue(Arrays.equals(EMPTY, Ints.concat(EMPTY)));\n",
        "207": "    assertTrue(Arrays.equals(EMPTY, Ints.concat(EMPTY, EMPTY, EMPTY)));\n",
        "208": "    assertTrue(Arrays.equals(ARRAY1, Ints.concat(ARRAY1)));\n",
        "209": "    assertNotSame(ARRAY1, Ints.concat(ARRAY1));\n",
        "210": "    assertTrue(Arrays.equals(ARRAY1, Ints.concat(EMPTY, ARRAY1, EMPTY)));\n",
        "211": "    assertTrue(Arrays.equals(\n",
        "212": "        new int[] {(int) 1, (int) 1, (int) 1},\n",
        "213": "        Ints.concat(ARRAY1, ARRAY1, ARRAY1)));\n",
        "214": "    assertTrue(Arrays.equals(\n",
        "215": "        new int[] {(int) 1, (int) 2, (int) 3, (int) 4},\n",
        "216": "        Ints.concat(ARRAY1, ARRAY234)));\n",
        "217": "  }\n",
        "218": "\n",
        "219": "  public void testEnsureCapacity() {\n",
        "220": "    assertSame(EMPTY, Ints.ensureCapacity(EMPTY, 0, 1));\n",
        "221": "    assertSame(ARRAY1, Ints.ensureCapacity(ARRAY1, 0, 1));\n",
        "222": "    assertSame(ARRAY1, Ints.ensureCapacity(ARRAY1, 1, 1));\n",
        "223": "    assertTrue(Arrays.equals(\n",
        "224": "        new int[] {(int) 1, (int) 0, (int) 0},\n",
        "225": "        Ints.ensureCapacity(ARRAY1, 2, 1)));\n",
        "226": "  }\n",
        "227": "\n",
        "228": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "229": "  public void testEnsureCapacity_fail() {\n",
        "230": "    try {\n",
        "231": "      Ints.ensureCapacity(ARRAY1, -1, 1);\n",
        "232": "      fail();\n",
        "233": "    } catch (IllegalArgumentException expected) {\n",
        "234": "    }\n",
        "235": "    try {\n",
        "236": "      // notice that this should even fail when no growth was needed\n",
        "237": "      Ints.ensureCapacity(ARRAY1, 1, -1);\n",
        "238": "      fail();\n",
        "239": "    } catch (IllegalArgumentException expected) {\n",
        "240": "    }\n",
        "241": "  }\n",
        "242": "\n",
        "243": "  public void testJoin() {\n",
        "244": "    assertEquals(\"\", Ints.join(\",\", EMPTY));\n",
        "245": "    assertEquals(\"1\", Ints.join(\",\", ARRAY1));\n",
        "246": "    assertEquals(\"1,2\", Ints.join(\",\", (int) 1, (int) 2));\n",
        "247": "    assertEquals(\"123\",\n",
        "248": "        Ints.join(\"\", (int) 1, (int) 2, (int) 3));\n",
        "249": "  }\n",
        "250": "\n",
        "251": "  public void testLexicographicalComparator() {\n",
        "252": "    List<int[]> ordered = Arrays.asList(\n",
        "253": "        new int[] {},\n",
        "254": "        new int[] {LEAST},\n",
        "255": "        new int[] {LEAST, LEAST},\n",
        "256": "        new int[] {LEAST, (int) 1},\n",
        "257": "        new int[] {(int) 1},\n",
        "258": "        new int[] {(int) 1, LEAST},\n",
        "259": "        new int[] {GREATEST, GREATEST - (int) 1},\n",
        "260": "        new int[] {GREATEST, GREATEST},\n",
        "261": "        new int[] {GREATEST, GREATEST, GREATEST});\n",
        "262": "\n",
        "263": "    Comparator<int[]> comparator = Ints.lexicographicalComparator();\n",
        "264": "    Helpers.testComparator(comparator, ordered);\n",
        "265": "  }\n",
        "266": "\n",
        "267": "  public void testToArray() {\n",
        "268": "    // need explicit type parameter to avoid javac warning!?\n",
        "269": "    List<Integer> none = Arrays.<Integer>asList();\n",
        "270": "    assertTrue(Arrays.equals(EMPTY, Ints.toArray(none)));\n",
        "271": "\n",
        "272": "    List<Integer> one = Arrays.asList((int) 1);\n",
        "273": "    assertTrue(Arrays.equals(ARRAY1, Ints.toArray(one)));\n",
        "274": "\n",
        "275": "    int[] array = {(int) 0, (int) 1, (int) 0xdeadbeef};\n",
        "276": "\n",
        "277": "    List<Integer> three = Arrays.asList((int) 0, (int) 1, (int) 0xdeadbeef);\n",
        "278": "    assertTrue(Arrays.equals(array, Ints.toArray(three)));\n",
        "279": "\n",
        "280": "    assertTrue(Arrays.equals(array, Ints.toArray(Ints.asList(array))));\n",
        "281": "  }\n",
        "282": "\n",
        "283": "  public void testToArray_threadSafe() {\n",
        "284": "    for (int delta : new int[] { +1, 0, -1 }) {\n",
        "285": "      for (int i = 0; i < VALUES.length; i++) {\n",
        "286": "        List<Integer> list = Ints.asList(VALUES).subList(0, i);\n",
        "287": "        Collection<Integer> misleadingSize =\n",
        "288": "            Helpers.misleadingSizeCollection(delta);\n",
        "289": "        misleadingSize.addAll(list);\n",
        "290": "        int[] arr = Ints.toArray(misleadingSize);\n",
        "291": "        assertEquals(i, arr.length);\n",
        "292": "        for (int j = 0; j < i; j++) {\n",
        "293": "          assertEquals(VALUES[j], arr[j]);\n",
        "294": "        }\n",
        "295": "      }\n",
        "296": "    }\n",
        "297": "  }\n",
        "298": "\n",
        "299": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "300": "  public void testToArray_withNull() {\n",
        "301": "    List<Integer> list = Arrays.asList((int) 0, (int) 1, null);\n",
        "302": "    try {\n",
        "303": "      Ints.toArray(list);\n",
        "304": "      fail();\n",
        "305": "    } catch (NullPointerException expected) {\n",
        "306": "    }\n",
        "307": "  }\n",
        "308": "\n",
        "309": "  public void testToArray_withConversion() {\n",
        "310": "    int[] array = {0, 1, 2};\n",
        "311": "\n",
        "312": "    List<Byte> bytes = Arrays.asList((byte) 0, (byte) 1, (byte) 2);\n",
        "313": "    List<Short> shorts = Arrays.asList((short) 0, (short) 1, (short) 2);\n",
        "314": "    List<Integer> ints = Arrays.asList(0, 1, 2);\n",
        "315": "    List<Float> floats = Arrays.asList((float) 0, (float) 1, (float) 2);\n",
        "316": "    List<Long> longs = Arrays.asList((long) 0, (long) 1, (long) 2);\n",
        "317": "    List<Double> doubles = Arrays.asList((double) 0, (double) 1, (double) 2);\n",
        "318": "\n",
        "319": "    assertTrue(Arrays.equals(array, Ints.toArray(bytes)));\n",
        "320": "    assertTrue(Arrays.equals(array, Ints.toArray(shorts)));\n",
        "321": "    assertTrue(Arrays.equals(array, Ints.toArray(ints)));\n",
        "322": "    assertTrue(Arrays.equals(array, Ints.toArray(floats)));\n",
        "323": "    assertTrue(Arrays.equals(array, Ints.toArray(longs)));\n",
        "324": "    assertTrue(Arrays.equals(array, Ints.toArray(doubles)));\n",
        "325": "  }\n",
        "326": "\n",
        "327": "  public void testAsList_isAView() {\n",
        "328": "    int[] array = {(int) 0, (int) 1};\n",
        "329": "    List<Integer> list = Ints.asList(array);\n",
        "330": "    list.set(0, (int) 2);\n",
        "331": "    assertTrue(Arrays.equals(new int[] {(int) 2, (int) 1}, array));\n",
        "332": "    array[1] = (int) 3;\n",
        "333": "    assertEquals(Arrays.asList((int) 2, (int) 3), list);\n",
        "334": "  }\n",
        "335": "\n",
        "336": "  public void testAsList_toArray_roundTrip() {\n",
        "337": "    int[] array = { (int) 0, (int) 1, (int) 2 };\n",
        "338": "    List<Integer> list = Ints.asList(array);\n",
        "339": "    int[] newArray = Ints.toArray(list);\n",
        "340": "\n",
        "341": "    // Make sure it returned a copy\n",
        "342": "    list.set(0, (int) 4);\n",
        "343": "    assertTrue(Arrays.equals(\n",
        "344": "        new int[] { (int) 0, (int) 1, (int) 2 }, newArray));\n",
        "345": "    newArray[1] = (int) 5;\n",
        "346": "    assertEquals((int) 1, (int) list.get(1));\n",
        "347": "  }\n",
        "348": "\n",
        "349": "  // This test stems from a real bug found by andrewk\n",
        "350": "  public void testAsList_subList_toArray_roundTrip() {\n",
        "351": "    int[] array = { (int) 0, (int) 1, (int) 2, (int) 3 };\n",
        "352": "    List<Integer> list = Ints.asList(array);\n",
        "353": "    assertTrue(Arrays.equals(new int[] { (int) 1, (int) 2 },\n",
        "354": "        Ints.toArray(list.subList(1, 3))));\n",
        "355": "    assertTrue(Arrays.equals(new int[] {},\n",
        "356": "        Ints.toArray(list.subList(2, 2))));\n",
        "357": "  }\n",
        "358": "\n",
        "359": "  public void testAsListEmpty() {\n",
        "360": "    assertSame(Collections.emptyList(), Ints.asList(EMPTY));\n",
        "361": "  }\n",
        "362": "\n",
        "363": "  public void testStringConverter_convert() {\n",
        "364": "    Converter<String, Integer> converter = Ints.stringConverter();\n",
        "365": "    assertEquals((Integer) 1, converter.convert(\"1\"));\n",
        "366": "    assertEquals((Integer) 0, converter.convert(\"0\"));\n",
        "367": "    assertEquals((Integer) (-1), converter.convert(\"-1\"));\n",
        "368": "    assertEquals((Integer) 255, converter.convert(\"0xff\"));\n",
        "369": "    assertEquals((Integer) 255, converter.convert(\"0xFF\"));\n",
        "370": "    assertEquals((Integer) (-255), converter.convert(\"-0xFF\"));\n",
        "371": "    assertEquals((Integer) 255, converter.convert(\"#0000FF\"));\n",
        "372": "    assertEquals((Integer) 438, converter.convert(\"0666\"));\n",
        "373": "  }\n",
        "374": "\n",
        "375": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "376": "  public void testStringConverter_convertError() {\n",
        "377": "    try {\n",
        "378": "      Ints.stringConverter().convert(\"notanumber\");\n",
        "379": "      fail();\n",
        "380": "    } catch (NumberFormatException expected) {\n",
        "381": "    }\n",
        "382": "  }\n",
        "383": "\n",
        "384": "  public void testStringConverter_nullConversions() {\n",
        "385": "    assertNull(Ints.stringConverter().convert(null));\n",
        "386": "    assertNull(Ints.stringConverter().reverse().convert(null));\n",
        "387": "  }\n",
        "388": "\n",
        "389": "  public void testStringConverter_reverse() {\n",
        "390": "    Converter<String, Integer> converter = Ints.stringConverter();\n",
        "391": "    assertEquals(\"1\", converter.reverse().convert(1));\n",
        "392": "    assertEquals(\"0\", converter.reverse().convert(0));\n",
        "393": "    assertEquals(\"-1\", converter.reverse().convert(-1));\n",
        "394": "    assertEquals(\"255\", converter.reverse().convert(0xff));\n",
        "395": "    assertEquals(\"255\", converter.reverse().convert(0xFF));\n",
        "396": "    assertEquals(\"-255\", converter.reverse().convert(-0xFF));\n",
        "397": "    assertEquals(\"438\", converter.reverse().convert(0666));\n",
        "398": "  }\n",
        "399": "\n",
        "400": "  public void testTryParse() {\n",
        "401": "    tryParseAndAssertEquals(0, \"0\");\n",
        "402": "    tryParseAndAssertEquals(0, \"-0\");\n",
        "403": "    tryParseAndAssertEquals(1, \"1\");\n",
        "404": "    tryParseAndAssertEquals(-1, \"-1\");\n",
        "405": "    tryParseAndAssertEquals(8900, \"8900\");\n",
        "406": "    tryParseAndAssertEquals(-8900, \"-8900\");\n",
        "407": "    tryParseAndAssertEquals(GREATEST, Integer.toString(GREATEST));\n",
        "408": "    tryParseAndAssertEquals(LEAST, Integer.toString(LEAST));\n",
        "409": "    assertNull(Ints.tryParse(\"\"));\n",
        "410": "    assertNull(Ints.tryParse(\"-\"));\n",
        "411": "    assertNull(Ints.tryParse(\"+1\"));\n",
        "412": "    assertNull(Ints.tryParse(\"9999999999999999\"));\n",
        "413": "    assertNull(\"Max integer + 1\",\n",
        "414": "        Ints.tryParse(Long.toString(((long) GREATEST) + 1)));\n",
        "415": "    assertNull(\"Max integer * 10\",\n",
        "416": "        Ints.tryParse(Long.toString(((long) GREATEST) * 10)));\n",
        "417": "    assertNull(\"Min integer - 1\",\n",
        "418": "        Ints.tryParse(Long.toString(((long) LEAST) - 1)));\n",
        "419": "    assertNull(\"Min integer * 10\",\n",
        "420": "        Ints.tryParse(Long.toString(((long) LEAST) * 10)));\n",
        "421": "    assertNull(\"Max long\", Ints.tryParse(Long.toString(Long.MAX_VALUE)));\n",
        "422": "    assertNull(\"Min long\", Ints.tryParse(Long.toString(Long.MIN_VALUE)));\n",
        "423": "    assertNull(Ints.tryParse(\"\\u0662\\u06f3\"));\n",
        "424": "  }\n",
        "425": "\n",
        "426": "  /**\n",
        "427": "   * Applies {@link Ints#tryParse(String)} to the given string and asserts that\n",
        "428": "   * the result is as expected.\n",
        "429": "   */\n",
        "430": "  private static void tryParseAndAssertEquals(Integer expected, String value) {\n",
        "431": "    assertEquals(expected, Ints.tryParse(value));\n",
        "432": "  }\n",
        "433": "\n",
        "434": "  public void testTryParse_radix() {\n",
        "435": "    for (int radix = Character.MIN_RADIX;\n",
        "436": "        radix <= Character.MAX_RADIX; radix++) {\n",
        "437": "      radixEncodeParseAndAssertEquals(0, radix);\n",
        "438": "      radixEncodeParseAndAssertEquals(8000, radix);\n",
        "439": "      radixEncodeParseAndAssertEquals(-8000, radix);\n",
        "440": "      radixEncodeParseAndAssertEquals(GREATEST, radix);\n",
        "441": "      radixEncodeParseAndAssertEquals(LEAST, radix);\n",
        "442": "      assertNull(\"Radix: \" + radix, Ints.tryParse(\"9999999999999999\", radix));\n",
        "443": "      assertNull(\"Radix: \" + radix,\n",
        "444": "          Ints.tryParse(Long.toString((long) GREATEST + 1, radix), radix));\n",
        "445": "      assertNull(\"Radix: \" + radix,\n",
        "446": "          Ints.tryParse(Long.toString((long) LEAST - 1, radix), radix));\n",
        "447": "    }\n",
        "448": "    assertNull(\"Hex string and dec parm\", Ints.tryParse(\"FFFF\", 10));\n",
        "449": "    assertEquals(\"Mixed hex case\", 65535, (int) Ints.tryParse(\"ffFF\", 16));\n",
        "450": "  }\n",
        "451": "\n",
        "452": "  /**\n",
        "453": "   * Encodes the an integer as a string with given radix, then uses\n",
        "454": "   * {@link Ints#tryParse(String, int)} to parse the result. Asserts the result\n",
        "455": "   * is the same as what we started with.\n",
        "456": "   */\n",
        "457": "  private static void radixEncodeParseAndAssertEquals(Integer value,\n",
        "458": "      int radix) {\n",
        "459": "    assertEquals(\"Radix: \" + radix, value,\n",
        "460": "        Ints.tryParse(Integer.toString(value, radix), radix));\n",
        "461": "  }\n",
        "462": "\n",
        "463": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "464": "  public void testTryParse_radixTooBig() {\n",
        "465": "    try {\n",
        "466": "      Ints.tryParse(\"0\", Character.MAX_RADIX + 1);\n",
        "467": "      fail();\n",
        "468": "    } catch (IllegalArgumentException expected) {\n",
        "469": "    }\n",
        "470": "  }\n",
        "471": "\n",
        "472": "  @SuppressWarnings(\"CheckReturnValue\")\n",
        "473": "  public void testTryParse_radixTooSmall() {\n",
        "474": "    try {\n",
        "475": "      Ints.tryParse(\"0\", Character.MIN_RADIX - 1);\n",
        "476": "      fail();\n",
        "477": "    } catch (IllegalArgumentException expected) {\n",
        "478": "    }\n",
        "479": "  }\n",
        "480": "}\n",
        "481": "\n"
    }
}