{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static java.util.Arrays.asList;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.collect.testing.AnEnum;\n",
        "23": "import com.google.common.collect.testing.google.TestEnumMultisetGenerator;\n",
        "24": "\n",
        "25": "import junit.framework.TestCase;\n",
        "26": "\n",
        "27": "import java.util.Collection;\n",
        "28": "import java.util.EnumSet;\n",
        "29": "import java.util.Set;\n",
        "30": "\n",
        "31": "/**\n",
        "32": " * Tests for an {@link EnumMultiset}.\n",
        "33": " *\n",
        "34": " * @author Jared Levy\n",
        "35": " */\n",
        "36": "@GwtCompatible(emulated = true)\n",
        "37": "public class EnumMultisetTest extends TestCase {\n",
        "38": "\n",
        "39": "  private static TestEnumMultisetGenerator enumMultisetGenerator() {\n",
        "40": "    return new TestEnumMultisetGenerator() {\n",
        "41": "      @Override protected Multiset<AnEnum> create(AnEnum[] elements) {\n",
        "42": "        return (elements.length == 0)\n",
        "43": "            ? EnumMultiset.create(AnEnum.class)\n",
        "44": "            : EnumMultiset.create(asList(elements));\n",
        "45": "      }\n",
        "46": "    };\n",
        "47": "  }\n",
        "48": "\n",
        "49": "  private enum Color {\n",
        "50": "    BLUE, RED, YELLOW, GREEN, WHITE\n",
        "51": "  }\n",
        "52": "\n",
        "53": "  private enum Gender {\n",
        "54": "    MALE, FEMALE\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  public void testClassCreate() {\n",
        "58": "    Multiset<Color> ms = EnumMultiset.create(Color.class);\n",
        "59": "    ms.add(Color.RED);\n",
        "60": "    ms.add(Color.YELLOW);\n",
        "61": "    ms.add(Color.RED);\n",
        "62": "    assertEquals(0, ms.count(Color.BLUE));\n",
        "63": "    assertEquals(1, ms.count(Color.YELLOW));\n",
        "64": "    assertEquals(2, ms.count(Color.RED));\n",
        "65": "  }\n",
        "66": "\n",
        "67": "  public void testCollectionCreate() {\n",
        "68": "    Multiset<Color> ms = EnumMultiset.create(\n",
        "69": "        asList(Color.RED, Color.YELLOW, Color.RED));\n",
        "70": "    assertEquals(0, ms.count(Color.BLUE));\n",
        "71": "    assertEquals(1, ms.count(Color.YELLOW));\n",
        "72": "    assertEquals(2, ms.count(Color.RED));\n",
        "73": "  }\n",
        "74": "\n",
        "75": "  public void testIllegalCreate() {\n",
        "76": "    Collection<Color> empty = EnumSet.noneOf(Color.class);\n",
        "77": "    try {\n",
        "78": "      EnumMultiset.create(empty);\n",
        "79": "      fail();\n",
        "80": "    } catch (IllegalArgumentException expected) {}\n",
        "81": "  }\n",
        "82": "  \n",
        "83": "  public void testCreateEmptyWithClass() {\n",
        "84": "    Multiset<Color> ms = EnumMultiset.create(ImmutableList.<Color>of(), Color.class);\n",
        "85": "    ms.add(Color.RED);\n",
        "86": "  }\n",
        "87": "  \n",
        "88": "  public void testCreateEmptyWithoutClassFails() {\n",
        "89": "    try {\n",
        "90": "      EnumMultiset.create(ImmutableList.<Color> of());\n",
        "91": "      fail(\"Expected IllegalArgumentException\");\n",
        "92": "    } catch (IllegalArgumentException expected) {\n",
        "93": "    }\n",
        "94": "  }\n",
        "95": "\n",
        "96": "  public void testToString() {\n",
        "97": "    Multiset<Color> ms = EnumMultiset.create(Color.class);\n",
        "98": "    ms.add(Color.BLUE, 3);\n",
        "99": "    ms.add(Color.YELLOW, 1);\n",
        "100": "    ms.add(Color.RED, 2);\n",
        "101": "    assertEquals(\"[BLUE x 3, RED x 2, YELLOW]\", ms.toString());\n",
        "102": "  }\n",
        "103": "\n",
        "104": "  public void testEntrySet() {\n",
        "105": "    Multiset<Color> ms = EnumMultiset.create(Color.class);\n",
        "106": "    ms.add(Color.BLUE, 3);\n",
        "107": "    ms.add(Color.YELLOW, 1);\n",
        "108": "    ms.add(Color.RED, 2);\n",
        "109": "\n",
        "110": "    Set<Object> uniqueEntries = Sets.newIdentityHashSet();\n",
        "111": "    uniqueEntries.addAll(ms.entrySet());\n",
        "112": "    assertEquals(3, uniqueEntries.size());\n",
        "113": "  }\n",
        "114": "\n",
        "115": "  // Wrapper of EnumMultiset factory methods, because we need to skip create(Class).\n",
        "116": "  // create(Enum1.class) is equal to create(Enum2.class) but testEquals() expects otherwise.\n",
        "117": "  // For the same reason, we need to skip create(Iterable, Class).\n",
        "118": "  private static class EnumMultisetFactory {\n",
        "119": "    public static <E extends Enum<E>> EnumMultiset<E> create(Iterable<E> elements) {\n",
        "120": "      return EnumMultiset.create(elements);\n",
        "121": "    }\n",
        "122": "  }\n",
        "123": "}\n",
        "124": "\n"
    }
}