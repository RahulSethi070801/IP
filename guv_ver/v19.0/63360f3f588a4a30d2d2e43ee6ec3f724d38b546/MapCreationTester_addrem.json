{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.testers;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionSize.ONE;\n",
        "20": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "21": "import static com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_KEYS;\n",
        "22": "import static com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_VALUES;\n",
        "23": "import static com.google.common.collect.testing.features.MapFeature.REJECTS_DUPLICATES_AT_CREATION;\n",
        "24": "\n",
        "25": "import com.google.common.annotations.GwtCompatible;\n",
        "26": "import com.google.common.collect.testing.AbstractMapTester;\n",
        "27": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "28": "import com.google.common.collect.testing.features.MapFeature;\n",
        "29": "\n",
        "30": "import java.util.Arrays;\n",
        "31": "import java.util.List;\n",
        "32": "import java.util.Map.Entry;\n",
        "33": "\n",
        "34": "/**\n",
        "35": " * A generic JUnit test which tests creation (typically through a constructor or\n",
        "36": " * static factory method) of a map. Can't be invoked directly; please see\n",
        "37": " * {@link com.google.common.collect.testing.MapTestSuiteBuilder}.\n",
        "38": " *\n",
        "39": " * @author Chris Povirk\n",
        "40": " * @author Kevin Bourrillion\n",
        "41": " */\n",
        "42": "@GwtCompatible(emulated = true)\n",
        "43": "public class MapCreationTester<K, V> extends AbstractMapTester<K, V> {\n",
        "44": "  @MapFeature.Require(ALLOWS_NULL_KEYS)\n",
        "45": "  @CollectionSize.Require(absent = ZERO)\n",
        "46": "  public void testCreateWithNullKeySupported() {\n",
        "47": "    initMapWithNullKey();\n",
        "48": "    expectContents(createArrayWithNullKey());\n",
        "49": "  }\n",
        "50": "\n",
        "51": "  @MapFeature.Require(absent = ALLOWS_NULL_KEYS)\n",
        "52": "  @CollectionSize.Require(absent = ZERO)\n",
        "53": "  public void testCreateWithNullKeyUnsupported() {\n",
        "54": "    try {\n",
        "55": "      initMapWithNullKey();\n",
        "56": "      fail(\"Creating a map containing a null key should fail\");\n",
        "57": "    } catch (NullPointerException expected) {\n",
        "58": "    }\n",
        "59": "  }\n",
        "60": "\n",
        "61": "  @MapFeature.Require(ALLOWS_NULL_VALUES)\n",
        "62": "  @CollectionSize.Require(absent = ZERO)\n",
        "63": "  public void testCreateWithNullValueSupported() {\n",
        "64": "    initMapWithNullValue();\n",
        "65": "    expectContents(createArrayWithNullValue());\n",
        "66": "  }\n",
        "67": "\n",
        "68": "  @MapFeature.Require(absent = ALLOWS_NULL_VALUES)\n",
        "69": "  @CollectionSize.Require(absent = ZERO)\n",
        "70": "  public void testCreateWithNullValueUnsupported() {\n",
        "71": "    try {\n",
        "72": "      initMapWithNullValue();\n",
        "73": "      fail(\"Creating a map containing a null value should fail\");\n",
        "74": "    } catch (NullPointerException expected) {\n",
        "75": "    }\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  @MapFeature.Require({ALLOWS_NULL_KEYS, ALLOWS_NULL_VALUES})\n",
        "79": "  @CollectionSize.Require(absent = ZERO)\n",
        "80": "  public void testCreateWithNullKeyAndValueSupported() {\n",
        "81": "    Entry<K, V>[] entries = createSamplesArray();\n",
        "82": "    entries[getNullLocation()] = entry(null, null);\n",
        "83": "    resetMap(entries);\n",
        "84": "    expectContents(entries);\n",
        "85": "  }\n",
        "86": "\n",
        "87": "  @MapFeature.Require(value = ALLOWS_NULL_KEYS,\n",
        "88": "      absent = REJECTS_DUPLICATES_AT_CREATION)\n",
        "89": "  @CollectionSize.Require(absent = {ZERO, ONE})\n",
        "90": "  public void testCreateWithDuplicates_nullDuplicatesNotRejected() {\n",
        "91": "    expectFirstRemoved(getEntriesMultipleNullKeys());\n",
        "92": "  }\n",
        "93": "\n",
        "94": "  @MapFeature.Require(absent = REJECTS_DUPLICATES_AT_CREATION)\n",
        "95": "  @CollectionSize.Require(absent = {ZERO, ONE})\n",
        "96": "  public void testCreateWithDuplicates_nonNullDuplicatesNotRejected() {\n",
        "97": "    expectFirstRemoved(getEntriesMultipleNonNullKeys());\n",
        "98": "  }\n",
        "99": "\n",
        "100": "  @MapFeature.Require({ALLOWS_NULL_KEYS, REJECTS_DUPLICATES_AT_CREATION})\n",
        "101": "  @CollectionSize.Require(absent = {ZERO, ONE})\n",
        "102": "  public void testCreateWithDuplicates_nullDuplicatesRejected() {\n",
        "103": "    Entry<K, V>[] entries = getEntriesMultipleNullKeys();\n",
        "104": "    try {\n",
        "105": "      resetMap(entries);\n",
        "106": "      fail(\"Should reject duplicate null elements at creation\");\n",
        "107": "    } catch (IllegalArgumentException expected) {\n",
        "108": "    }\n",
        "109": "  }\n",
        "110": "\n",
        "111": "  @MapFeature.Require(REJECTS_DUPLICATES_AT_CREATION)\n",
        "112": "  @CollectionSize.Require(absent = {ZERO, ONE})\n",
        "113": "  public void testCreateWithDuplicates_nonNullDuplicatesRejected() {\n",
        "114": "    Entry<K, V>[] entries = getEntriesMultipleNonNullKeys();\n",
        "115": "    try {\n",
        "116": "      resetMap(entries);\n",
        "117": "      fail(\"Should reject duplicate non-null elements at creation\");\n",
        "118": "    } catch (IllegalArgumentException expected) {\n",
        "119": "    }\n",
        "120": "  }\n",
        "121": "\n",
        "122": "  private Entry<K, V>[] getEntriesMultipleNullKeys() {\n",
        "123": "    Entry<K, V>[] entries = createArrayWithNullKey();\n",
        "124": "    entries[0] = entry(null, entries[0].getValue());\n",
        "125": "    return entries;\n",
        "126": "  }\n",
        "127": "\n",
        "128": "  private Entry<K, V>[] getEntriesMultipleNonNullKeys() {\n",
        "129": "    Entry<K, V>[] entries = createSamplesArray();\n",
        "130": "    entries[0] = entry(k1(), v0());\n",
        "131": "    return entries;\n",
        "132": "  }\n",
        "133": "\n",
        "134": "  private void expectFirstRemoved(Entry<K, V>[] entries) {\n",
        "135": "    resetMap(entries);\n",
        "136": "\n",
        "137": "    List<Entry<K, V>> expectedWithDuplicateRemoved =\n",
        "138": "        Arrays.asList(entries).subList(1, getNumElements());\n",
        "139": "    expectContents(expectedWithDuplicateRemoved);\n",
        "140": "  }\n",
        "141": "}\n",
        "142": "\n"
    }
}