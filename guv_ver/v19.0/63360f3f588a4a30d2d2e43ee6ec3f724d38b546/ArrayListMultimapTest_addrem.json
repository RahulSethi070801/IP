{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "import static java.util.Arrays.asList;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "\n",
        "24": "import junit.framework.TestCase;\n",
        "25": "\n",
        "26": "import java.util.ConcurrentModificationException;\n",
        "27": "import java.util.List;\n",
        "28": "import java.util.RandomAccess;\n",
        "29": "\n",
        "30": "/**\n",
        "31": " * Unit tests for {@code ArrayListMultimap}.\n",
        "32": " *\n",
        "33": " * @author Jared Levy\n",
        "34": " */\n",
        "35": "@GwtCompatible(emulated = true)\n",
        "36": "public class ArrayListMultimapTest extends TestCase {\n",
        "37": "\n",
        "38": "  protected ListMultimap<String, Integer> create() {\n",
        "39": "    return ArrayListMultimap.create();\n",
        "40": "  }\n",
        "41": "\n",
        "42": "  /**\n",
        "43": "   * Confirm that get() returns a List implementing RandomAccess.\n",
        "44": "   */\n",
        "45": "  public void testGetRandomAccess() {\n",
        "46": "    Multimap<String, Integer> multimap = create();\n",
        "47": "    multimap.put(\"foo\", 1);\n",
        "48": "    multimap.put(\"foo\", 3);\n",
        "49": "    assertTrue(multimap.get(\"foo\") instanceof RandomAccess);\n",
        "50": "    assertTrue(multimap.get(\"bar\") instanceof RandomAccess);\n",
        "51": "  }\n",
        "52": "\n",
        "53": "  /**\n",
        "54": "   * Confirm that removeAll() returns a List implementing RandomAccess.\n",
        "55": "   */\n",
        "56": "  public void testRemoveAllRandomAccess() {\n",
        "57": "    Multimap<String, Integer> multimap = create();\n",
        "58": "    multimap.put(\"foo\", 1);\n",
        "59": "    multimap.put(\"foo\", 3);\n",
        "60": "    assertTrue(multimap.removeAll(\"foo\") instanceof RandomAccess);\n",
        "61": "    assertTrue(multimap.removeAll(\"bar\") instanceof RandomAccess);\n",
        "62": "  }\n",
        "63": "\n",
        "64": "  /**\n",
        "65": "   * Confirm that replaceValues() returns a List implementing RandomAccess.\n",
        "66": "   */\n",
        "67": "  public void testReplaceValuesRandomAccess() {\n",
        "68": "    Multimap<String, Integer> multimap = create();\n",
        "69": "    multimap.put(\"foo\", 1);\n",
        "70": "    multimap.put(\"foo\", 3);\n",
        "71": "    assertTrue(multimap.replaceValues(\"foo\", asList(2, 4))\n",
        "72": "        instanceof RandomAccess);\n",
        "73": "    assertTrue(multimap.replaceValues(\"bar\", asList(2, 4))\n",
        "74": "        instanceof RandomAccess);\n",
        "75": "  }\n",
        "76": "\n",
        "77": "  /**\n",
        "78": "   * Test throwing ConcurrentModificationException when a sublist's ancestor's\n",
        "79": "   * delegate changes.\n",
        "80": "   */\n",
        "81": "  public void testSublistConcurrentModificationException() {\n",
        "82": "    ListMultimap<String, Integer> multimap = create();\n",
        "83": "    multimap.putAll(\"foo\", asList(1, 2, 3, 4, 5));\n",
        "84": "    List<Integer> list = multimap.get(\"foo\");\n",
        "85": "    assertThat(multimap.get(\"foo\")).containsExactly(1, 2, 3, 4, 5).inOrder();\n",
        "86": "    List<Integer> sublist = list.subList(0, 5);\n",
        "87": "    assertThat(sublist).containsExactly(1, 2, 3, 4, 5).inOrder();\n",
        "88": "\n",
        "89": "    sublist.clear();\n",
        "90": "    assertTrue(sublist.isEmpty());\n",
        "91": "    multimap.put(\"foo\", 6);\n",
        "92": "\n",
        "93": "    try {\n",
        "94": "      sublist.isEmpty();\n",
        "95": "      fail(\"Expected ConcurrentModificationException\");\n",
        "96": "    } catch (ConcurrentModificationException expected) {}\n",
        "97": "  }\n",
        "98": "\n",
        "99": "  public void testCreateFromMultimap() {\n",
        "100": "    Multimap<String, Integer> multimap = create();\n",
        "101": "    multimap.put(\"foo\", 1);\n",
        "102": "    multimap.put(\"foo\", 3);\n",
        "103": "    multimap.put(\"bar\", 2);\n",
        "104": "    ArrayListMultimap<String, Integer> copy\n",
        "105": "        = ArrayListMultimap.create(multimap);\n",
        "106": "    assertEquals(multimap, copy);\n",
        "107": "  }\n",
        "108": "\n",
        "109": "  public void testCreate() {\n",
        "110": "    ArrayListMultimap<String, Integer> multimap\n",
        "111": "        = ArrayListMultimap.create();\n",
        "112": "    assertEquals(3, multimap.expectedValuesPerKey);\n",
        "113": "  }\n",
        "114": "\n",
        "115": "  public void testCreateFromSizes() {\n",
        "116": "    ArrayListMultimap<String, Integer> multimap\n",
        "117": "        = ArrayListMultimap.create(15, 20);\n",
        "118": "    assertEquals(20, multimap.expectedValuesPerKey);\n",
        "119": "  }\n",
        "120": "\n",
        "121": "  public void testCreateFromIllegalSizes() {\n",
        "122": "    try {\n",
        "123": "      ArrayListMultimap.create(15, -2);\n",
        "124": "      fail();\n",
        "125": "    } catch (IllegalArgumentException expected) {}\n",
        "126": "\n",
        "127": "    try {\n",
        "128": "      ArrayListMultimap.create(-15, 2);\n",
        "129": "      fail();\n",
        "130": "    } catch (IllegalArgumentException expected) {}\n",
        "131": "  }\n",
        "132": "\n",
        "133": "  public void testCreateFromHashMultimap() {\n",
        "134": "    Multimap<String, Integer> original = HashMultimap.create();\n",
        "135": "    ArrayListMultimap<String, Integer> multimap\n",
        "136": "        = ArrayListMultimap.create(original);\n",
        "137": "    assertEquals(3, multimap.expectedValuesPerKey);\n",
        "138": "  }\n",
        "139": "\n",
        "140": "  public void testCreateFromArrayListMultimap() {\n",
        "141": "    ArrayListMultimap<String, Integer> original\n",
        "142": "        = ArrayListMultimap.create(15, 20);\n",
        "143": "    ArrayListMultimap<String, Integer> multimap\n",
        "144": "        = ArrayListMultimap.create(original);\n",
        "145": "    assertEquals(20, multimap.expectedValuesPerKey);\n",
        "146": "  }\n",
        "147": "\n",
        "148": "  public void testTrimToSize() {\n",
        "149": "    ArrayListMultimap<String, Integer> multimap\n",
        "150": "        = ArrayListMultimap.create();\n",
        "151": "    multimap.put(\"foo\", 1);\n",
        "152": "    multimap.put(\"foo\", 2);\n",
        "153": "    multimap.put(\"bar\", 3);\n",
        "154": "    multimap.trimToSize();\n",
        "155": "    assertEquals(3, multimap.size());\n",
        "156": "    assertThat(multimap.get(\"foo\")).containsExactly(1, 2).inOrder();\n",
        "157": "    assertThat(multimap.get(\"bar\")).contains(3);\n",
        "158": "  }\n",
        "159": "}\n",
        "160": "\n"
    }
}