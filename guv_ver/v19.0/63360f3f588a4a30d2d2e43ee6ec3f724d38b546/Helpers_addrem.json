{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2009 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing;\n",
        "18": "\n",
        "19": "import static java.util.Collections.sort;\n",
        "20": "import static junit.framework.Assert.assertEquals;\n",
        "21": "import static junit.framework.Assert.assertFalse;\n",
        "22": "import static junit.framework.Assert.assertTrue;\n",
        "23": "\n",
        "24": "import com.google.common.annotations.GwtCompatible;\n",
        "25": "\n",
        "26": "import junit.framework.Assert;\n",
        "27": "import junit.framework.AssertionFailedError;\n",
        "28": "\n",
        "29": "import java.io.Serializable;\n",
        "30": "import java.util.ArrayList;\n",
        "31": "import java.util.Arrays;\n",
        "32": "import java.util.Collection;\n",
        "33": "import java.util.Collections;\n",
        "34": "import java.util.Comparator;\n",
        "35": "import java.util.Iterator;\n",
        "36": "import java.util.LinkedHashSet;\n",
        "37": "import java.util.List;\n",
        "38": "import java.util.ListIterator;\n",
        "39": "import java.util.Map;\n",
        "40": "import java.util.Map.Entry;\n",
        "41": "import java.util.Set;\n",
        "42": "\n",
        "43": "@GwtCompatible(emulated = true)\n",
        "44": "public class Helpers {\n",
        "45": "  // Clone of Objects.equal\n",
        "46": "  static boolean equal(Object a, Object b) {\n",
        "47": "    return a == b || (a != null && a.equals(b));\n",
        "48": "  }\n",
        "49": "\n",
        "50": "  // Clone of Lists.newArrayList\n",
        "51": "  public static <E> List<E> copyToList(Iterable<? extends E> elements) {\n",
        "52": "    List<E> list = new ArrayList<E>();\n",
        "53": "    addAll(list, elements);\n",
        "54": "    return list;\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  public static <E> List<E> copyToList(E[] elements) {\n",
        "58": "    return copyToList(Arrays.asList(elements));\n",
        "59": "  }\n",
        "60": "\n",
        "61": "  // Clone of Sets.newLinkedHashSet\n",
        "62": "  public static <E> Set<E> copyToSet(Iterable<? extends E> elements) {\n",
        "63": "    Set<E> set = new LinkedHashSet<E>();\n",
        "64": "    addAll(set, elements);\n",
        "65": "    return set;\n",
        "66": "  }\n",
        "67": "\n",
        "68": "  public static <E> Set<E> copyToSet(E[] elements) {\n",
        "69": "    return copyToSet(Arrays.asList(elements));\n",
        "70": "  }\n",
        "71": "\n",
        "72": "  // Would use Maps.immutableEntry\n",
        "73": "  public static <K, V> Entry<K, V> mapEntry(K key, V value) {\n",
        "74": "    return Collections.singletonMap(key, value).entrySet().iterator().next();\n",
        "75": "  }\n",
        "76": "\n",
        "77": "  private static boolean isEmpty(Iterable<?> iterable) {\n",
        "78": "    return iterable instanceof Collection\n",
        "79": "        ? ((Collection<?>) iterable).isEmpty()\n",
        "80": "        : iterable.iterator().hasNext();\n",
        "81": "  }\n",
        "82": "\n",
        "83": "  public static void assertEmpty(Iterable<?> iterable) {\n",
        "84": "    if (!isEmpty(iterable)) {\n",
        "85": "      Assert.fail(\"Not true that \" + iterable + \" is empty\");\n",
        "86": "    }\n",
        "87": "  }\n",
        "88": "\n",
        "89": "  public static void assertEmpty(Map<?, ?> map) {\n",
        "90": "    if (!map.isEmpty()) {\n",
        "91": "      Assert.fail(\"Not true that \" + map + \" is empty\");\n",
        "92": "    }\n",
        "93": "  }\n",
        "94": "\n",
        "95": "  public static void assertEqualInOrder(\n",
        "96": "      Iterable<?> expected, Iterable<?> actual) {\n",
        "97": "    Iterator<?> expectedIter = expected.iterator();\n",
        "98": "    Iterator<?> actualIter = actual.iterator();\n",
        "99": "\n",
        "100": "    while (expectedIter.hasNext() && actualIter.hasNext()) {\n",
        "101": "      if (!equal(expectedIter.next(), actualIter.next())) {\n",
        "102": "        Assert.fail(\n",
        "103": "            \"contents were not equal and in the same order: \"\n",
        "104": "                + \"expected = \" + expected + \", actual = \" + actual);\n",
        "105": "      }\n",
        "106": "    }\n",
        "107": "\n",
        "108": "    if (expectedIter.hasNext() || actualIter.hasNext()) {\n",
        "109": "      // actual either had too few or too many elements\n",
        "110": "      Assert.fail(\n",
        "111": "          \"contents were not equal and in the same order: \"\n",
        "112": "              + \"expected = \" + expected + \", actual = \" + actual);\n",
        "113": "    }\n",
        "114": "  }\n",
        "115": "\n",
        "116": "  public static void assertContentsInOrder(Iterable<?> actual, Object... expected) {\n",
        "117": "    assertEqualInOrder(Arrays.asList(expected), actual);\n",
        "118": "  }\n",
        "119": "\n",
        "120": "  public static void assertEqualIgnoringOrder(\n",
        "121": "      Iterable<?> expected, Iterable<?> actual) {\n",
        "122": "    List<?> exp = copyToList(expected);\n",
        "123": "    List<?> act = copyToList(actual);\n",
        "124": "    String actString = act.toString();\n",
        "125": "\n",
        "126": "    // Of course we could take pains to give the complete description of the\n",
        "127": "    // problem on any failure.\n",
        "128": "\n",
        "129": "    // Yeah it's n^2.\n",
        "130": "    for (Object object : exp) {\n",
        "131": "      if (!act.remove(object)) {\n",
        "132": "        Assert.fail(\"did not contain expected element \" + object + \", \"\n",
        "133": "            + \"expected = \" + exp + \", actual = \" + actString);\n",
        "134": "      }\n",
        "135": "    }\n",
        "136": "    assertTrue(\"unexpected elements: \" + act, act.isEmpty());\n",
        "137": "  }\n",
        "138": "\n",
        "139": "  public static void assertContentsAnyOrder(\n",
        "140": "      Iterable<?> actual, Object... expected) {\n",
        "141": "    assertEqualIgnoringOrder(Arrays.asList(expected), actual);\n",
        "142": "  }\n",
        "143": "\n",
        "144": "  public static void assertContains(Iterable<?> actual, Object expected) {\n",
        "145": "    boolean contained = false;\n",
        "146": "    if (actual instanceof Collection) {\n",
        "147": "      contained = ((Collection<?>) actual).contains(expected);\n",
        "148": "    } else {\n",
        "149": "      for (Object o : actual) {\n",
        "150": "        if (equal(o, expected)) {\n",
        "151": "          contained = true;\n",
        "152": "          break;\n",
        "153": "        }\n",
        "154": "      }\n",
        "155": "    }\n",
        "156": "\n",
        "157": "    if (!contained) {\n",
        "158": "      Assert.fail(\"Not true that \" + actual + \" contains \" + expected);\n",
        "159": "    }\n",
        "160": "  }\n",
        "161": "\n",
        "162": "  public static void assertContainsAllOf(\n",
        "163": "      Iterable<?> actual, Object... expected) {\n",
        "164": "    List<Object> expectedList = new ArrayList<Object>();\n",
        "165": "    expectedList.addAll(Arrays.asList(expected));\n",
        "166": "\n",
        "167": "    for (Object o : actual) {\n",
        "168": "      expectedList.remove(o);\n",
        "169": "    }\n",
        "170": "\n",
        "171": "    if (!expectedList.isEmpty()) {\n",
        "172": "      Assert.fail(\n",
        "173": "          \"Not true that \" + actual + \" contains all of \" + Arrays.asList(expected));\n",
        "174": "    }\n",
        "175": "  }\n",
        "176": "\n",
        "177": "  public static <E> boolean addAll(\n",
        "178": "      Collection<E> addTo, Iterable<? extends E> elementsToAdd) {\n",
        "179": "    boolean modified = false;\n",
        "180": "    for (E e : elementsToAdd) {\n",
        "181": "      modified |= addTo.add(e);\n",
        "182": "    }\n",
        "183": "    return modified;\n",
        "184": "  }\n",
        "185": "\n",
        "186": "  static <T> Iterable<T> reverse(final List<T> list) {\n",
        "187": "    return new Iterable<T>() {\n",
        "188": "      @Override\n",
        "189": "      public Iterator<T> iterator() {\n",
        "190": "        final ListIterator<T> listIter = list.listIterator(list.size());\n",
        "191": "        return new Iterator<T>() {\n",
        "192": "          @Override\n",
        "193": "          public boolean hasNext() {\n",
        "194": "            return listIter.hasPrevious();\n",
        "195": "          }\n",
        "196": "          @Override\n",
        "197": "          public T next() {\n",
        "198": "            return listIter.previous();\n",
        "199": "          }\n",
        "200": "          @Override\n",
        "201": "          public void remove() {\n",
        "202": "            listIter.remove();\n",
        "203": "          }\n",
        "204": "        };\n",
        "205": "      }\n",
        "206": "    };\n",
        "207": "  }\n",
        "208": "\n",
        "209": "  static <T> Iterator<T> cycle(final Iterable<T> iterable) {\n",
        "210": "    return new Iterator<T>() {\n",
        "211": "      Iterator<T> iterator = Collections.<T>emptySet().iterator();\n",
        "212": "      @Override\n",
        "213": "      public boolean hasNext() {\n",
        "214": "        return true;\n",
        "215": "      }\n",
        "216": "      @Override\n",
        "217": "      public T next() {\n",
        "218": "        if (!iterator.hasNext()) {\n",
        "219": "          iterator = iterable.iterator();\n",
        "220": "        }\n",
        "221": "        return iterator.next();\n",
        "222": "      }\n",
        "223": "      @Override\n",
        "224": "      public void remove() {\n",
        "225": "        throw new UnsupportedOperationException();\n",
        "226": "      }\n",
        "227": "    };\n",
        "228": "  }\n",
        "229": "\n",
        "230": "  static <T> T get(Iterator<T> iterator, int position) {\n",
        "231": "    for (int i = 0; i < position; i++) {\n",
        "232": "      iterator.next();\n",
        "233": "    }\n",
        "234": "    return iterator.next();\n",
        "235": "  }\n",
        "236": "\n",
        "237": "  static void fail(Throwable cause, Object message) {\n",
        "238": "    AssertionFailedError assertionFailedError =\n",
        "239": "        new AssertionFailedError(String.valueOf(message));\n",
        "240": "    assertionFailedError.initCause(cause);\n",
        "241": "    throw assertionFailedError;\n",
        "242": "  }\n",
        "243": "\n",
        "244": "  public static <K, V> Comparator<Entry<K, V>> entryComparator(\n",
        "245": "      final Comparator<? super K> keyComparator) {\n",
        "246": "    return new Comparator<Entry<K, V>>() {\n",
        "247": "      @Override\n",
        "248": "      @SuppressWarnings(\"unchecked\") // no less safe than putting it in the map!\n",
        "249": "      public int compare(Entry<K, V> a, Entry<K, V> b) {\n",
        "250": "        return (keyComparator == null)\n",
        "251": "            ? ((Comparable) a.getKey()).compareTo(b.getKey())\n",
        "252": "            : keyComparator.compare(a.getKey(), b.getKey());\n",
        "253": "      }\n",
        "254": "    };\n",
        "255": "  }\n",
        "256": "\n",
        "257": "  /**\n",
        "258": "   * Asserts that all pairs of {@code T} values within {@code valuesInExpectedOrder} are ordered\n",
        "259": "   * consistently between their order within {@code valuesInExpectedOrder} and the order implied by\n",
        "260": "   * the given {@code comparator}.\n",
        "261": "   *\n",
        "262": "   * @see #testComparator(Comparator, List)\n",
        "263": "   */\n",
        "264": "  public static <T> void testComparator(\n",
        "265": "      Comparator<? super T> comparator, T... valuesInExpectedOrder) {\n",
        "266": "    testComparator(comparator, Arrays.asList(valuesInExpectedOrder));\n",
        "267": "  }\n",
        "268": "\n",
        "269": "  /**\n",
        "270": "   * Asserts that all pairs of {@code T} values within {@code valuesInExpectedOrder} are ordered\n",
        "271": "   * consistently between their order within {@code valuesInExpectedOrder} and the order implied by\n",
        "272": "   * the given {@code comparator}.\n",
        "273": "   *\n",
        "274": "   * <p>In detail, this method asserts\n",
        "275": "   * <ul>\n",
        "276": "   * <li><i>reflexivity</i>: {@code comparator.compare(t, t) = 0} for all {@code t} in\n",
        "277": "   * {@code valuesInExpectedOrder}; and\n",
        "278": "   * <li><i>consistency</i>: {@code comparator.compare(ti, tj) < 0} and\n",
        "279": "   * {@code comparator.compare(tj, ti) > 0} for {@code i < j}, where\n",
        "280": "   * {@code ti = valuesInExpectedOrder.get(i)} and {@code tj = valuesInExpectedOrder.get(j)}.\n",
        "281": "   */\n",
        "282": "  public static <T> void testComparator(\n",
        "283": "      Comparator<? super T> comparator, List<T> valuesInExpectedOrder) {\n",
        "284": "    // This does an O(n^2) test of all pairs of values in both orders\n",
        "285": "    for (int i = 0; i < valuesInExpectedOrder.size(); i++) {\n",
        "286": "      T t = valuesInExpectedOrder.get(i);\n",
        "287": "\n",
        "288": "      for (int j = 0; j < i; j++) {\n",
        "289": "        T lesser = valuesInExpectedOrder.get(j);\n",
        "290": "        assertTrue(comparator + \".compare(\" + lesser + \", \" + t + \")\",\n",
        "291": "            comparator.compare(lesser, t) < 0);\n",
        "292": "      }\n",
        "293": "\n",
        "294": "      assertEquals(comparator + \".compare(\" + t + \", \" + t + \")\",\n",
        "295": "          0, comparator.compare(t, t));\n",
        "296": "\n",
        "297": "      for (int j = i + 1; j < valuesInExpectedOrder.size(); j++) {\n",
        "298": "        T greater = valuesInExpectedOrder.get(j);\n",
        "299": "        assertTrue(comparator + \".compare(\" + greater + \", \" + t + \")\",\n",
        "300": "            comparator.compare(greater, t) > 0);\n",
        "301": "      }\n",
        "302": "    }\n",
        "303": "  }\n",
        "304": "\n",
        "305": "  public static <T extends Comparable<? super T>> void testCompareToAndEquals(\n",
        "306": "      List<T> valuesInExpectedOrder) {\n",
        "307": "    // This does an O(n^2) test of all pairs of values in both orders\n",
        "308": "    for (int i = 0; i < valuesInExpectedOrder.size(); i++) {\n",
        "309": "      T t = valuesInExpectedOrder.get(i);\n",
        "310": "\n",
        "311": "      for (int j = 0; j < i; j++) {\n",
        "312": "        T lesser = valuesInExpectedOrder.get(j);\n",
        "313": "        assertTrue(lesser + \".compareTo(\" + t + ')', lesser.compareTo(t) < 0);\n",
        "314": "        assertFalse(lesser.equals(t));\n",
        "315": "      }\n",
        "316": "\n",
        "317": "      assertEquals(t + \".compareTo(\" + t + ')', 0, t.compareTo(t));\n",
        "318": "      assertTrue(t.equals(t));\n",
        "319": "\n",
        "320": "      for (int j = i + 1; j < valuesInExpectedOrder.size(); j++) {\n",
        "321": "        T greater = valuesInExpectedOrder.get(j);\n",
        "322": "        assertTrue(greater + \".compareTo(\" + t + ')', greater.compareTo(t) > 0);\n",
        "323": "        assertFalse(greater.equals(t));\n",
        "324": "      }\n",
        "325": "    }\n",
        "326": "  }\n",
        "327": "\n",
        "328": "  /**\n",
        "329": "   * Returns a collection that simulates concurrent modification by\n",
        "330": "   * having its size method return incorrect values.  This is useful\n",
        "331": "   * for testing methods that must treat the return value from size()\n",
        "332": "   * as a hint only.\n",
        "333": "   *\n",
        "334": "   * @param delta the difference between the true size of the\n",
        "335": "   * collection and the values returned by the size method\n",
        "336": "   */\n",
        "337": "  public static <T> Collection<T> misleadingSizeCollection(final int delta) {\n",
        "338": "    // It would be nice to be able to return a real concurrent\n",
        "339": "    // collection like ConcurrentLinkedQueue, so that e.g. concurrent\n",
        "340": "    // iteration would work, but that would not be GWT-compatible.\n",
        "341": "    return new ArrayList<T>() {\n",
        "342": "      @Override public int size() { return Math.max(0, super.size() + delta); }\n",
        "343": "    };\n",
        "344": "  }\n",
        "345": "\n",
        "346": "  /**\n",
        "347": "   * Returns a \"nefarious\" map entry with the specified key and value,\n",
        "348": "   * meaning an entry that is suitable for testing that map entries cannot be\n",
        "349": "   * modified via a nefarious implementation of equals. This is used for testing\n",
        "350": "   * unmodifiable collections of map entries; for example, it should not be\n",
        "351": "   * possible to access the raw (modifiable) map entry via a nefarious equals\n",
        "352": "   * method.\n",
        "353": "   */\n",
        "354": "  public static <K, V> Map.Entry<K, V> nefariousMapEntry(final K key,\n",
        "355": "      final V value) {\n",
        "356": "    return new Map.Entry<K, V>() {\n",
        "357": "      @Override public K getKey() {\n",
        "358": "        return key;\n",
        "359": "      }\n",
        "360": "      @Override public V getValue() {\n",
        "361": "        return value;\n",
        "362": "      }\n",
        "363": "      @Override public V setValue(V value) {\n",
        "364": "        throw new UnsupportedOperationException();\n",
        "365": "      }\n",
        "366": "      @SuppressWarnings(\"unchecked\")\n",
        "367": "      @Override public boolean equals(Object o) {\n",
        "368": "        if (o instanceof Map.Entry) {\n",
        "369": "          Map.Entry<K, V> e = (Map.Entry<K, V>) o;\n",
        "370": "          e.setValue(value); // muhahaha!\n",
        "371": "\n",
        "372": "          return equal(this.getKey(), e.getKey())\n",
        "373": "              && equal(this.getValue(), e.getValue());\n",
        "374": "        }\n",
        "375": "        return false;\n",
        "376": "      }\n",
        "377": "\n",
        "378": "      @Override public int hashCode() {\n",
        "379": "        K k = getKey();\n",
        "380": "        V v = getValue();\n",
        "381": "        return ((k == null) ?\n",
        "382": "            0 : k.hashCode()) ^ ((v == null) ? 0 : v.hashCode());\n",
        "383": "      }\n",
        "384": "\n",
        "385": "      /**\n",
        "386": "       * Returns a string representation of the form <code>{key}={value}</code>.\n",
        "387": "       */\n",
        "388": "      @Override public String toString() {\n",
        "389": "        return getKey() + \"=\" + getValue();\n",
        "390": "      }\n",
        "391": "    };\n",
        "392": "  }\n",
        "393": "\n",
        "394": "  static <E> List<E> castOrCopyToList(Iterable<E> iterable) {\n",
        "395": "    if (iterable instanceof List) {\n",
        "396": "      return (List<E>) iterable;\n",
        "397": "    }\n",
        "398": "    List<E> list = new ArrayList<E>();\n",
        "399": "    for (E e : iterable) {\n",
        "400": "      list.add(e);\n",
        "401": "    }\n",
        "402": "    return list;\n",
        "403": "  }\n",
        "404": "\n",
        "405": "  private static final Comparator<Comparable> NATURAL_ORDER = new Comparator<Comparable>() {\n",
        "406": "    @SuppressWarnings(\"unchecked\") // assume any Comparable is Comparable<Self>\n",
        "407": "    @Override public int compare(Comparable left, Comparable right) {\n",
        "408": "      return left.compareTo(right);\n",
        "409": "    }\n",
        "410": "  };\n",
        "411": "\n",
        "412": "  public static <K extends Comparable, V> Iterable<Entry<K, V>> orderEntriesByKey(\n",
        "413": "      List<Entry<K, V>> insertionOrder) {\n",
        "414": "    sort(insertionOrder, Helpers.<K, V>entryComparator(NATURAL_ORDER));\n",
        "415": "    return insertionOrder;\n",
        "416": "  }\n",
        "417": "\n",
        "418": "  /**\n",
        "419": "   * Private replacement for {@link com.google.gwt.user.client.rpc.GwtTransient} to work around\n",
        "420": "   * build-system quirks.\n",
        "421": "   */\n",
        "422": "  private @interface GwtTransient {}\n",
        "423": "\n",
        "424": "  /**\n",
        "425": "   * Compares strings in natural order except that null comes immediately before a given value. This\n",
        "426": "   * works better than Ordering.natural().nullsFirst() because, if null comes before all other\n",
        "427": "   * values, it lies outside the submap/submultiset ranges we test, and the variety of tests that\n",
        "428": "   * exercise null handling fail on those subcollections.\n",
        "429": "   */\n",
        "430": "  public abstract static class NullsBefore implements Comparator<String>, Serializable {\n",
        "431": "    /*\n",
        "432": "     * We don't serialize this class in GWT, so we don't care about whether GWT will serialize this\n",
        "433": "     * field.\n",
        "434": "     */\n",
        "435": "    @GwtTransient private final String justAfterNull;\n",
        "436": "\n",
        "437": "    protected NullsBefore(String justAfterNull) {\n",
        "438": "      if (justAfterNull == null) {\n",
        "439": "        throw new NullPointerException();\n",
        "440": "      }\n",
        "441": "\n",
        "442": "      this.justAfterNull = justAfterNull;\n",
        "443": "    }\n",
        "444": "\n",
        "445": "    @Override\n",
        "446": "    public int compare(String lhs, String rhs) {\n",
        "447": "      if (lhs == rhs) {\n",
        "448": "        return 0;\n",
        "449": "      }\n",
        "450": "      if (lhs == null) {\n",
        "451": "        // lhs (null) comes just before justAfterNull.\n",
        "452": "        // If rhs is b, lhs comes first.\n",
        "453": "        if (rhs.equals(justAfterNull)) {\n",
        "454": "          return -1;\n",
        "455": "        }\n",
        "456": "        return justAfterNull.compareTo(rhs);\n",
        "457": "      }\n",
        "458": "      if (rhs == null) {\n",
        "459": "        // rhs (null) comes just before justAfterNull.\n",
        "460": "        // If lhs is b, rhs comes first.\n",
        "461": "        if (lhs.equals(justAfterNull)) {\n",
        "462": "          return 1;\n",
        "463": "        }\n",
        "464": "        return lhs.compareTo(justAfterNull);\n",
        "465": "      }\n",
        "466": "      return lhs.compareTo(rhs);\n",
        "467": "    }\n",
        "468": "\n",
        "469": "    @Override\n",
        "470": "    public boolean equals(Object obj) {\n",
        "471": "      if (obj instanceof NullsBefore) {\n",
        "472": "        NullsBefore other = (NullsBefore) obj;\n",
        "473": "        return justAfterNull.equals(other.justAfterNull);\n",
        "474": "      }\n",
        "475": "      return false;\n",
        "476": "    }\n",
        "477": "\n",
        "478": "    @Override\n",
        "479": "    public int hashCode() {\n",
        "480": "      return justAfterNull.hashCode();\n",
        "481": "    }\n",
        "482": "  }\n",
        "483": "\n",
        "484": "  public static final class NullsBeforeB extends NullsBefore {\n",
        "485": "    public static final NullsBeforeB INSTANCE = new NullsBeforeB();\n",
        "486": "\n",
        "487": "    private NullsBeforeB() {\n",
        "488": "      super(\"b\");\n",
        "489": "    }\n",
        "490": "  }\n",
        "491": "\n",
        "492": "  public static final class NullsBeforeTwo extends NullsBefore {\n",
        "493": "    public static final NullsBeforeTwo INSTANCE = new NullsBeforeTwo();\n",
        "494": "\n",
        "495": "    private NullsBeforeTwo() {\n",
        "496": "      super(\"two\"); // from TestStringSortedMapGenerator's sample keys\n",
        "497": "    }\n",
        "498": "  }\n",
        "499": "}\n",
        "500": "\n"
    }
}