{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static java.util.Arrays.asList;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.collect.testing.Helpers;\n",
        "23": "import com.google.common.collect.testing.MinimalCollection;\n",
        "24": "import com.google.common.collect.testing.MinimalIterable;\n",
        "25": "\n",
        "26": "import junit.framework.TestCase;\n",
        "27": "\n",
        "28": "import java.util.Arrays;\n",
        "29": "import java.util.Collection;\n",
        "30": "import java.util.Collections;\n",
        "31": "import java.util.Iterator;\n",
        "32": "import java.util.List;\n",
        "33": "\n",
        "34": "/**\n",
        "35": " * Unit test for {@link ImmutableList}.\n",
        "36": " *\n",
        "37": " * @author Kevin Bourrillion\n",
        "38": " * @author George van den Driessche\n",
        "39": " * @author Jared Levy\n",
        "40": " */\n",
        "41": "@GwtCompatible(emulated = true)\n",
        "42": "public class ImmutableListTest extends TestCase {\n",
        "43": "\n",
        "44": "  public static class CreationTests extends TestCase {\n",
        "45": "    public void testCreation_noArgs() {\n",
        "46": "      List<String> list = ImmutableList.of();\n",
        "47": "      assertEquals(Collections.emptyList(), list);\n",
        "48": "    }\n",
        "49": "\n",
        "50": "    public void testCreation_oneElement() {\n",
        "51": "      List<String> list = ImmutableList.of(\"a\");\n",
        "52": "      assertEquals(Collections.singletonList(\"a\"), list);\n",
        "53": "    }\n",
        "54": "\n",
        "55": "    public void testCreation_twoElements() {\n",
        "56": "      List<String> list = ImmutableList.of(\"a\", \"b\");\n",
        "57": "      assertEquals(Lists.newArrayList(\"a\", \"b\"), list);\n",
        "58": "    }\n",
        "59": "\n",
        "60": "    public void testCreation_threeElements() {\n",
        "61": "      List<String> list = ImmutableList.of(\"a\", \"b\", \"c\");\n",
        "62": "      assertEquals(Lists.newArrayList(\"a\", \"b\", \"c\"), list);\n",
        "63": "    }\n",
        "64": "\n",
        "65": "    public void testCreation_fourElements() {\n",
        "66": "      List<String> list = ImmutableList.of(\"a\", \"b\", \"c\", \"d\");\n",
        "67": "      assertEquals(Lists.newArrayList(\"a\", \"b\", \"c\", \"d\"), list);\n",
        "68": "    }\n",
        "69": "\n",
        "70": "    public void testCreation_fiveElements() {\n",
        "71": "      List<String> list = ImmutableList.of(\"a\", \"b\", \"c\", \"d\", \"e\");\n",
        "72": "      assertEquals(Lists.newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\"), list);\n",
        "73": "    }\n",
        "74": "\n",
        "75": "    public void testCreation_sixElements() {\n",
        "76": "      List<String> list = ImmutableList.of(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\");\n",
        "77": "      assertEquals(Lists.newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"), list);\n",
        "78": "    }\n",
        "79": "\n",
        "80": "    public void testCreation_sevenElements() {\n",
        "81": "      List<String> list = ImmutableList.of(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\");\n",
        "82": "      assertEquals(Lists.newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"), list);\n",
        "83": "    }\n",
        "84": "\n",
        "85": "    public void testCreation_eightElements() {\n",
        "86": "      List<String> list = ImmutableList.of(\n",
        "87": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\");\n",
        "88": "      assertEquals(Lists.newArrayList(\n",
        "89": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"), list);\n",
        "90": "    }\n",
        "91": "\n",
        "92": "    public void testCreation_nineElements() {\n",
        "93": "      List<String> list = ImmutableList.of(\n",
        "94": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\");\n",
        "95": "      assertEquals(Lists.newArrayList(\n",
        "96": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"), list);\n",
        "97": "    }\n",
        "98": "\n",
        "99": "    public void testCreation_tenElements() {\n",
        "100": "      List<String> list = ImmutableList.of(\n",
        "101": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\");\n",
        "102": "      assertEquals(Lists.newArrayList(\n",
        "103": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"), list);\n",
        "104": "    }\n",
        "105": "\n",
        "106": "    public void testCreation_elevenElements() {\n",
        "107": "      List<String> list = ImmutableList.of(\n",
        "108": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\");\n",
        "109": "      assertEquals(Lists.newArrayList(\n",
        "110": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"), list);\n",
        "111": "    }\n",
        "112": "\n",
        "113": "    // Varargs versions\n",
        "114": "\n",
        "115": "    public void testCreation_twelveElements() {\n",
        "116": "      List<String> list = ImmutableList.of(\n",
        "117": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\");\n",
        "118": "      assertEquals(Lists.newArrayList(\n",
        "119": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"), list);\n",
        "120": "    }\n",
        "121": "\n",
        "122": "    public void testCreation_thirteenElements() {\n",
        "123": "      List<String> list = ImmutableList.of(\n",
        "124": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\");\n",
        "125": "      assertEquals(Lists.newArrayList(\n",
        "126": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"),\n",
        "127": "          list);\n",
        "128": "    }\n",
        "129": "\n",
        "130": "    public void testCreation_fourteenElements() {\n",
        "131": "      List<String> list = ImmutableList.of(\n",
        "132": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\");\n",
        "133": "      assertEquals(Lists.newArrayList(\n",
        "134": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"),\n",
        "135": "          list);\n",
        "136": "    }\n",
        "137": "\n",
        "138": "    public void testCreation_singletonNull() {\n",
        "139": "      try {\n",
        "140": "        ImmutableList.of((String) null);\n",
        "141": "        fail();\n",
        "142": "      } catch (NullPointerException expected) {\n",
        "143": "      }\n",
        "144": "    }\n",
        "145": "\n",
        "146": "    public void testCreation_withNull() {\n",
        "147": "      try {\n",
        "148": "        ImmutableList.of(\"a\", null, \"b\");\n",
        "149": "        fail();\n",
        "150": "      } catch (NullPointerException expected) {\n",
        "151": "      }\n",
        "152": "    }\n",
        "153": "\n",
        "154": "    public void testCreation_generic() {\n",
        "155": "      List<String> a = ImmutableList.of(\"a\");\n",
        "156": "      // only verify that there is no compile warning\n",
        "157": "      ImmutableList.of(a, a);\n",
        "158": "    }\n",
        "159": "\n",
        "160": "    public void testCreation_arrayOfArray() {\n",
        "161": "      String[] array = new String[] { \"a\" };\n",
        "162": "      List<String[]> list = ImmutableList.<String[]>of(array);\n",
        "163": "      assertEquals(Collections.singletonList(array), list);\n",
        "164": "    }\n",
        "165": "\n",
        "166": "    public void testCopyOf_emptyArray() {\n",
        "167": "      String[] array = new String[0];\n",
        "168": "      List<String> list = ImmutableList.copyOf(array);\n",
        "169": "      assertEquals(Collections.emptyList(), list);\n",
        "170": "    }\n",
        "171": "\n",
        "172": "    public void testCopyOf_arrayOfOneElement() {\n",
        "173": "      String[] array = new String[] { \"a\" };\n",
        "174": "      List<String> list = ImmutableList.copyOf(array);\n",
        "175": "      assertEquals(Collections.singletonList(\"a\"), list);\n",
        "176": "    }\n",
        "177": "\n",
        "178": "    public void testCopyOf_nullArray() {\n",
        "179": "      try {\n",
        "180": "        ImmutableList.copyOf((String[]) null);\n",
        "181": "        fail();\n",
        "182": "      } catch (NullPointerException expected) {\n",
        "183": "      }\n",
        "184": "    }\n",
        "185": "\n",
        "186": "    public void testCopyOf_arrayContainingOnlyNull() {\n",
        "187": "      String[] array = new String[] { null };\n",
        "188": "      try {\n",
        "189": "        ImmutableList.copyOf(array);\n",
        "190": "        fail();\n",
        "191": "      } catch (NullPointerException expected) {\n",
        "192": "      }\n",
        "193": "    }\n",
        "194": "\n",
        "195": "    public void testCopyOf_collection_empty() {\n",
        "196": "      // \"<String>\" is required to work around a javac 1.5 bug.\n",
        "197": "      Collection<String> c = MinimalCollection.<String>of();\n",
        "198": "      List<String> list = ImmutableList.copyOf(c);\n",
        "199": "      assertEquals(Collections.emptyList(), list);\n",
        "200": "    }\n",
        "201": "\n",
        "202": "    public void testCopyOf_collection_oneElement() {\n",
        "203": "      Collection<String> c = MinimalCollection.of(\"a\");\n",
        "204": "      List<String> list = ImmutableList.copyOf(c);\n",
        "205": "      assertEquals(Collections.singletonList(\"a\"), list);\n",
        "206": "    }\n",
        "207": "\n",
        "208": "    public void testCopyOf_collection_general() {\n",
        "209": "      Collection<String> c = MinimalCollection.of(\"a\", \"b\", \"a\");\n",
        "210": "      List<String> list = ImmutableList.copyOf(c);\n",
        "211": "      assertEquals(asList(\"a\", \"b\", \"a\"), list);\n",
        "212": "      List<String> mutableList = asList(\"a\", \"b\");\n",
        "213": "      list = ImmutableList.copyOf(mutableList);\n",
        "214": "      mutableList.set(0, \"c\");\n",
        "215": "      assertEquals(asList(\"a\", \"b\"), list);\n",
        "216": "    }\n",
        "217": "\n",
        "218": "    public void testCopyOf_collectionContainingNull() {\n",
        "219": "      Collection<String> c = MinimalCollection.of(\"a\", null, \"b\");\n",
        "220": "      try {\n",
        "221": "        ImmutableList.copyOf(c);\n",
        "222": "        fail();\n",
        "223": "      } catch (NullPointerException expected) {\n",
        "224": "      }\n",
        "225": "    }\n",
        "226": "\n",
        "227": "    public void testCopyOf_iterator_empty() {\n",
        "228": "      Iterator<String> iterator = Iterators.emptyIterator();\n",
        "229": "      List<String> list = ImmutableList.copyOf(iterator);\n",
        "230": "      assertEquals(Collections.emptyList(), list);\n",
        "231": "    }\n",
        "232": "\n",
        "233": "    public void testCopyOf_iterator_oneElement() {\n",
        "234": "      Iterator<String> iterator = Iterators.singletonIterator(\"a\");\n",
        "235": "      List<String> list = ImmutableList.copyOf(iterator);\n",
        "236": "      assertEquals(Collections.singletonList(\"a\"), list);\n",
        "237": "    }\n",
        "238": "\n",
        "239": "    public void testCopyOf_iterator_general() {\n",
        "240": "      Iterator<String> iterator = asList(\"a\", \"b\", \"a\").iterator();\n",
        "241": "      List<String> list = ImmutableList.copyOf(iterator);\n",
        "242": "      assertEquals(asList(\"a\", \"b\", \"a\"), list);\n",
        "243": "    }\n",
        "244": "\n",
        "245": "    public void testCopyOf_iteratorContainingNull() {\n",
        "246": "      Iterator<String> iterator = asList(\"a\", null, \"b\").iterator();\n",
        "247": "      try {\n",
        "248": "        ImmutableList.copyOf(iterator);\n",
        "249": "        fail();\n",
        "250": "      } catch (NullPointerException expected) {\n",
        "251": "      }\n",
        "252": "    }\n",
        "253": "\n",
        "254": "    public void testCopyOf_iteratorNull() {\n",
        "255": "      try {\n",
        "256": "        ImmutableList.copyOf((Iterator<String>) null);\n",
        "257": "        fail();\n",
        "258": "      } catch (NullPointerException expected) {\n",
        "259": "      }\n",
        "260": "    }\n",
        "261": "\n",
        "262": "    public void testCopyOf_concurrentlyMutating() {\n",
        "263": "      List<String> sample = Lists.newArrayList(\"a\", \"b\", \"c\");\n",
        "264": "      for (int delta : new int[] {-1, 0, 1}) {\n",
        "265": "        for (int i = 0; i < sample.size(); i++) {\n",
        "266": "          Collection<String> misleading =\n",
        "267": "              Helpers.misleadingSizeCollection(delta);\n",
        "268": "          List<String> expected = sample.subList(0, i);\n",
        "269": "          misleading.addAll(expected);\n",
        "270": "          assertEquals(expected, ImmutableList.copyOf(misleading));\n",
        "271": "          assertEquals(expected,\n",
        "272": "              ImmutableList.copyOf((Iterable<String>) misleading));\n",
        "273": "        }\n",
        "274": "      }\n",
        "275": "    }\n",
        "276": "\n",
        "277": "    private static class CountingIterable implements Iterable<String> {\n",
        "278": "      int count = 0;\n",
        "279": "      @Override\n",
        "280": "      public Iterator<String> iterator() {\n",
        "281": "        count++;\n",
        "282": "        return asList(\"a\", \"b\", \"a\").iterator();\n",
        "283": "      }\n",
        "284": "    }\n",
        "285": "\n",
        "286": "    public void testCopyOf_plainIterable() {\n",
        "287": "      CountingIterable iterable = new CountingIterable();\n",
        "288": "      List<String> list = ImmutableList.copyOf(iterable);\n",
        "289": "      assertEquals(asList(\"a\", \"b\", \"a\"), list);\n",
        "290": "    }\n",
        "291": "\n",
        "292": "    public void testCopyOf_plainIterable_iteratesOnce() {\n",
        "293": "      CountingIterable iterable = new CountingIterable();\n",
        "294": "      ImmutableList.copyOf(iterable);\n",
        "295": "      assertEquals(1, iterable.count);\n",
        "296": "    }\n",
        "297": "\n",
        "298": "    public void testCopyOf_shortcut_empty() {\n",
        "299": "      Collection<String> c = ImmutableList.of();\n",
        "300": "      assertSame(c, ImmutableList.copyOf(c));\n",
        "301": "    }\n",
        "302": "\n",
        "303": "    public void testCopyOf_shortcut_singleton() {\n",
        "304": "      Collection<String> c = ImmutableList.of(\"a\");\n",
        "305": "      assertSame(c, ImmutableList.copyOf(c));\n",
        "306": "    }\n",
        "307": "\n",
        "308": "    public void testCopyOf_shortcut_immutableList() {\n",
        "309": "      Collection<String> c = ImmutableList.of(\"a\", \"b\", \"c\");\n",
        "310": "      assertSame(c, ImmutableList.copyOf(c));\n",
        "311": "    }\n",
        "312": "\n",
        "313": "    public void testBuilderAddArrayHandlesNulls() {\n",
        "314": "      String[] elements = {\"a\", null, \"b\"};\n",
        "315": "      ImmutableList.Builder<String> builder = ImmutableList.builder();\n",
        "316": "      try {\n",
        "317": "        builder.add(elements);\n",
        "318": "        fail (\"Expected NullPointerException\");\n",
        "319": "      } catch (NullPointerException expected) {\n",
        "320": "      }\n",
        "321": "      ImmutableList<String> result = builder.build();\n",
        "322": "\n",
        "323": "      /*\n",
        "324": "       * Maybe it rejects all elements, or maybe it adds \"a\" before failing.\n",
        "325": "       * Either way is fine with us.\n",
        "326": "       */\n",
        "327": "      if (result.isEmpty()) {\n",
        "328": "        return;\n",
        "329": "      }\n",
        "330": "      assertTrue(ImmutableList.of(\"a\").equals(result));\n",
        "331": "      assertEquals(1, result.size());\n",
        "332": "    }\n",
        "333": "\n",
        "334": "    public void testBuilderAddCollectionHandlesNulls() {\n",
        "335": "      List<String> elements = Arrays.asList(\"a\", null, \"b\");\n",
        "336": "      ImmutableList.Builder<String> builder = ImmutableList.builder();\n",
        "337": "      try {\n",
        "338": "        builder.addAll(elements);\n",
        "339": "        fail (\"Expected NullPointerException\");\n",
        "340": "      } catch (NullPointerException expected) {\n",
        "341": "      }\n",
        "342": "      ImmutableList<String> result = builder.build();\n",
        "343": "      assertEquals(ImmutableList.of(\"a\"), result);\n",
        "344": "      assertEquals(1, result.size());\n",
        "345": "    }\n",
        "346": "  }\n",
        "347": "\n",
        "348": "  public static class BasicTests extends TestCase {\n",
        "349": "\n",
        "350": "    public void testEquals_immutableList() {\n",
        "351": "      Collection<String> c = ImmutableList.of(\"a\", \"b\", \"c\");\n",
        "352": "      assertTrue(c.equals(ImmutableList.of(\"a\", \"b\", \"c\")));\n",
        "353": "      assertFalse(c.equals(ImmutableList.of(\"a\", \"c\", \"b\")));\n",
        "354": "      assertFalse(c.equals(ImmutableList.of(\"a\", \"b\")));\n",
        "355": "      assertFalse(c.equals(ImmutableList.of(\"a\", \"b\", \"c\", \"d\")));\n",
        "356": "    }\n",
        "357": "\n",
        "358": "    public void testBuilderAdd() {\n",
        "359": "      ImmutableList<String> list = new ImmutableList.Builder<String>()\n",
        "360": "          .add(\"a\")\n",
        "361": "          .add(\"b\")\n",
        "362": "          .add(\"a\")\n",
        "363": "          .add(\"c\")\n",
        "364": "          .build();\n",
        "365": "      assertEquals(asList(\"a\", \"b\", \"a\", \"c\"), list);\n",
        "366": "    }\n",
        "367": "\n",
        "368": "    public void testBuilderAdd_varargs() {\n",
        "369": "      ImmutableList<String> list = new ImmutableList.Builder<String>()\n",
        "370": "          .add(\"a\", \"b\", \"a\", \"c\")\n",
        "371": "          .build();\n",
        "372": "      assertEquals(asList(\"a\", \"b\", \"a\", \"c\"), list);\n",
        "373": "    }\n",
        "374": "\n",
        "375": "    public void testBuilderAddAll_iterable() {\n",
        "376": "      List<String> a = asList(\"a\", \"b\");\n",
        "377": "      List<String> b = asList(\"c\", \"d\");\n",
        "378": "      ImmutableList<String> list = new ImmutableList.Builder<String>()\n",
        "379": "          .addAll(a)\n",
        "380": "          .addAll(b)\n",
        "381": "          .build();\n",
        "382": "      assertEquals(asList( \"a\", \"b\", \"c\", \"d\"), list);\n",
        "383": "      b.set(0, \"f\");\n",
        "384": "      assertEquals(asList( \"a\", \"b\", \"c\", \"d\"), list);\n",
        "385": "    }\n",
        "386": "\n",
        "387": "    public void testBuilderAddAll_iterator() {\n",
        "388": "      List<String> a = asList(\"a\", \"b\");\n",
        "389": "      List<String> b = asList(\"c\", \"d\");\n",
        "390": "      ImmutableList<String> list = new ImmutableList.Builder<String>()\n",
        "391": "          .addAll(a.iterator())\n",
        "392": "          .addAll(b.iterator())\n",
        "393": "          .build();\n",
        "394": "      assertEquals(asList( \"a\", \"b\", \"c\", \"d\"), list);\n",
        "395": "      b.set(0, \"f\");\n",
        "396": "      assertEquals(asList( \"a\", \"b\", \"c\", \"d\"), list);\n",
        "397": "    }\n",
        "398": "\n",
        "399": "    public void testComplexBuilder() {\n",
        "400": "      List<Integer> colorElem = asList(0x00, 0x33, 0x66, 0x99, 0xCC, 0xFF);\n",
        "401": "      ImmutableList.Builder<Integer> webSafeColorsBuilder\n",
        "402": "          = ImmutableList.builder();\n",
        "403": "      for (Integer red : colorElem) {\n",
        "404": "        for (Integer green : colorElem) {\n",
        "405": "          for (Integer blue : colorElem) {\n",
        "406": "            webSafeColorsBuilder.add((red << 16) + (green << 8) + blue);\n",
        "407": "          }\n",
        "408": "        }\n",
        "409": "      }\n",
        "410": "      ImmutableList<Integer> webSafeColors = webSafeColorsBuilder.build();\n",
        "411": "      assertEquals(216, webSafeColors.size());\n",
        "412": "      Integer[] webSafeColorArray =\n",
        "413": "          webSafeColors.toArray(new Integer[webSafeColors.size()]);\n",
        "414": "      assertEquals(0x000000, (int) webSafeColorArray[0]);\n",
        "415": "      assertEquals(0x000033, (int) webSafeColorArray[1]);\n",
        "416": "      assertEquals(0x000066, (int) webSafeColorArray[2]);\n",
        "417": "      assertEquals(0x003300, (int) webSafeColorArray[6]);\n",
        "418": "      assertEquals(0x330000, (int) webSafeColorArray[36]);\n",
        "419": "      assertEquals(0x000066, (int) webSafeColors.get(2));\n",
        "420": "      assertEquals(0x003300, (int) webSafeColors.get(6));\n",
        "421": "      ImmutableList<Integer> addedColor\n",
        "422": "          = webSafeColorsBuilder.add(0x00BFFF).build();\n",
        "423": "      assertEquals(\"Modifying the builder should not have changed any already\"\n",
        "424": "          + \" built sets\", 216, webSafeColors.size());\n",
        "425": "      assertEquals(\"the new array should be one bigger than webSafeColors\",\n",
        "426": "          217, addedColor.size());\n",
        "427": "      Integer[] appendColorArray =\n",
        "428": "          addedColor.toArray(new Integer[addedColor.size()]);\n",
        "429": "      assertEquals(0x00BFFF, (int) appendColorArray[216]);\n",
        "430": "    }\n",
        "431": "\n",
        "432": "    public void testBuilderAddHandlesNullsCorrectly() {\n",
        "433": "      ImmutableList.Builder<String> builder = ImmutableList.builder();\n",
        "434": "      try {\n",
        "435": "        builder.add((String) null);\n",
        "436": "        fail(\"expected NullPointerException\");\n",
        "437": "      } catch (NullPointerException expected) {\n",
        "438": "      }\n",
        "439": "\n",
        "440": "      try {\n",
        "441": "        builder.add((String[]) null);\n",
        "442": "        fail(\"expected NullPointerException\");\n",
        "443": "      } catch (NullPointerException expected) {\n",
        "444": "      }\n",
        "445": "\n",
        "446": "      try {\n",
        "447": "        builder.add(\"a\", null, \"b\");\n",
        "448": "        fail(\"expected NullPointerException\");\n",
        "449": "      } catch (NullPointerException expected) {\n",
        "450": "      }\n",
        "451": "    }\n",
        "452": "\n",
        "453": "    public void testBuilderAddAllHandlesNullsCorrectly() {\n",
        "454": "      ImmutableList.Builder<String> builder = ImmutableList.builder();\n",
        "455": "      try {\n",
        "456": "        builder.addAll((Iterable<String>) null);\n",
        "457": "        fail(\"expected NullPointerException\");\n",
        "458": "      } catch (NullPointerException expected) {\n",
        "459": "      }\n",
        "460": "\n",
        "461": "      try {\n",
        "462": "        builder.addAll((Iterator<String>) null);\n",
        "463": "        fail(\"expected NullPointerException\");\n",
        "464": "      } catch (NullPointerException expected) {\n",
        "465": "      }\n",
        "466": "\n",
        "467": "      builder = ImmutableList.builder();\n",
        "468": "      List<String> listWithNulls = asList(\"a\", null, \"b\");\n",
        "469": "      try {\n",
        "470": "        builder.addAll(listWithNulls);\n",
        "471": "        fail(\"expected NullPointerException\");\n",
        "472": "      } catch (NullPointerException expected) {\n",
        "473": "      }\n",
        "474": "\n",
        "475": "      builder = ImmutableList.builder();\n",
        "476": "      Iterator<String> iteratorWithNulls = asList(\"a\", null, \"b\").iterator();\n",
        "477": "      try {\n",
        "478": "        builder.addAll(iteratorWithNulls);\n",
        "479": "        fail(\"expected NullPointerException\");\n",
        "480": "      } catch (NullPointerException expected) {\n",
        "481": "      }\n",
        "482": "\n",
        "483": "      Iterable<String> iterableWithNulls = MinimalIterable.of(\"a\", null, \"b\");\n",
        "484": "      try {\n",
        "485": "        builder.addAll(iterableWithNulls);\n",
        "486": "        fail(\"expected NullPointerException\");\n",
        "487": "      } catch (NullPointerException expected) {\n",
        "488": "      }\n",
        "489": "    }\n",
        "490": "\n",
        "491": "    public void testAsList() {\n",
        "492": "      ImmutableList<String> list = ImmutableList.of(\"a\", \"b\");\n",
        "493": "      assertSame(list, list.asList());\n",
        "494": "    }\n",
        "495": "  }\n",
        "496": "}\n",
        "497": "\n"
    }
}