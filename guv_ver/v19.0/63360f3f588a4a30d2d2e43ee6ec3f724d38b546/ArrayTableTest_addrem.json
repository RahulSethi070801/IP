{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2009 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "import static java.util.Arrays.asList;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import com.google.common.base.Objects;\n",
        "24": "import com.google.common.collect.Table.Cell;\n",
        "25": "import com.google.common.testing.EqualsTester;\n",
        "26": "import com.google.common.testing.SerializableTester;\n",
        "27": "\n",
        "28": "import java.util.Arrays;\n",
        "29": "import java.util.Map;\n",
        "30": "\n",
        "31": "/**\n",
        "32": " * Test cases for {@link ArrayTable}.\n",
        "33": " *\n",
        "34": " * @author Jared Levy\n",
        "35": " */\n",
        "36": "@GwtCompatible(emulated = true)\n",
        "37": "public class ArrayTableTest extends AbstractTableTest {\n",
        "38": "\n",
        "39": "  @Override protected ArrayTable<String, Integer, Character> create(\n",
        "40": "      Object... data) {\n",
        "41": "    // TODO: Specify different numbers of rows and columns, to detect problems\n",
        "42": "    // that arise when the wrong size is used.\n",
        "43": "    ArrayTable<String, Integer, Character> table =\n",
        "44": "        ArrayTable.create(asList(\"foo\", \"bar\", \"cat\"), asList(1, 2, 3));\n",
        "45": "    populate(table, data);\n",
        "46": "    return table;\n",
        "47": "  }\n",
        "48": "\n",
        "49": "  @Override protected void assertSize(int expectedSize) {\n",
        "50": "    assertEquals(9, table.size());\n",
        "51": "  }\n",
        "52": "\n",
        "53": "  @Override protected boolean supportsRemove() {\n",
        "54": "    return false;\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  @Override protected boolean supportsNullValues() {\n",
        "58": "    return true;\n",
        "59": "  }\n",
        "60": "\n",
        "61": "  // Overriding tests of behavior that differs for ArrayTable.\n",
        "62": "\n",
        "63": "  @Override public void testContains() {\n",
        "64": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "65": "    assertTrue(table.contains(\"foo\", 1));\n",
        "66": "    assertTrue(table.contains(\"bar\", 1));\n",
        "67": "    assertTrue(table.contains(\"foo\", 3));\n",
        "68": "    assertTrue(table.contains(\"foo\", 2));\n",
        "69": "    assertTrue(table.contains(\"bar\", 3));\n",
        "70": "    assertTrue(table.contains(\"cat\", 1));\n",
        "71": "    assertFalse(table.contains(\"foo\", -1));\n",
        "72": "    assertFalse(table.contains(\"bad\", 1));\n",
        "73": "    assertFalse(table.contains(\"bad\", -1));\n",
        "74": "    assertFalse(table.contains(\"foo\", null));\n",
        "75": "    assertFalse(table.contains(null, 1));\n",
        "76": "    assertFalse(table.contains(null, null));\n",
        "77": "  }\n",
        "78": "\n",
        "79": "  @Override public void testContainsRow() {\n",
        "80": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "81": "    assertTrue(table.containsRow(\"foo\"));\n",
        "82": "    assertTrue(table.containsRow(\"bar\"));\n",
        "83": "    assertTrue(table.containsRow(\"cat\"));\n",
        "84": "    assertFalse(table.containsRow(\"bad\"));\n",
        "85": "    assertFalse(table.containsRow(null));\n",
        "86": "  }\n",
        "87": "\n",
        "88": "  @Override public void testContainsColumn() {\n",
        "89": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "90": "    assertTrue(table.containsColumn(1));\n",
        "91": "    assertTrue(table.containsColumn(3));\n",
        "92": "    assertTrue(table.containsColumn(2));\n",
        "93": "    assertFalse(table.containsColumn(-1));\n",
        "94": "    assertFalse(table.containsColumn(null));\n",
        "95": "  }\n",
        "96": "\n",
        "97": "  @Override public void testContainsValue() {\n",
        "98": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "99": "    assertTrue(table.containsValue('a'));\n",
        "100": "    assertTrue(table.containsValue('b'));\n",
        "101": "    assertTrue(table.containsValue('c'));\n",
        "102": "    assertFalse(table.containsValue('x'));\n",
        "103": "    assertTrue(table.containsValue(null));\n",
        "104": "  }\n",
        "105": "\n",
        "106": "  @Override public void testIsEmpty() {\n",
        "107": "    assertFalse(table.isEmpty());\n",
        "108": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "109": "    assertFalse(table.isEmpty());\n",
        "110": "  }\n",
        "111": "\n",
        "112": "  @Override public void testEquals() {\n",
        "113": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "114": "    Table<String, Integer, Character> hashCopy = HashBasedTable.create();\n",
        "115": "    hashCopy.put(\"foo\", 1, 'a');\n",
        "116": "    hashCopy.put(\"bar\", 1, 'b');\n",
        "117": "    hashCopy.put(\"foo\", 3, 'c');\n",
        "118": "    Table<String, Integer, Character> reordered\n",
        "119": "        = create(\"foo\", 3, 'c', \"foo\", 1, 'a', \"bar\", 1, 'b');\n",
        "120": "    Table<String, Integer, Character> smaller\n",
        "121": "        = create(\"foo\", 1, 'a', \"bar\", 1, 'b');\n",
        "122": "    Table<String, Integer, Character> swapOuter\n",
        "123": "        = create(\"bar\", 1, 'a', \"foo\", 1, 'b', \"bar\", 3, 'c');\n",
        "124": "    Table<String, Integer, Character> swapValues\n",
        "125": "        = create(\"foo\", 1, 'c', \"bar\", 1, 'b', \"foo\", 3, 'a');\n",
        "126": "\n",
        "127": "    new EqualsTester()\n",
        "128": "        .addEqualityGroup(table, reordered)\n",
        "129": "        .addEqualityGroup(hashCopy)\n",
        "130": "        .addEqualityGroup(smaller)\n",
        "131": "        .addEqualityGroup(swapOuter)\n",
        "132": "        .addEqualityGroup(swapValues)\n",
        "133": "        .testEquals();\n",
        "134": "  }\n",
        "135": "\n",
        "136": "  @Override public void testHashCode() {\n",
        "137": "    table = ArrayTable.create(asList(\"foo\", \"bar\"), asList(1, 3));\n",
        "138": "    table.put(\"foo\", 1, 'a');\n",
        "139": "    table.put(\"bar\", 1, 'b');\n",
        "140": "    table.put(\"foo\", 3, 'c');\n",
        "141": "    int expected = Objects.hashCode(\"foo\", 1, 'a')\n",
        "142": "        + Objects.hashCode(\"bar\", 1, 'b')\n",
        "143": "        + Objects.hashCode(\"foo\", 3, 'c')\n",
        "144": "        + Objects.hashCode(\"bar\", 3, 0);\n",
        "145": "    assertEquals(expected, table.hashCode());\n",
        "146": "  }\n",
        "147": "\n",
        "148": "  @Override public void testRow() {\n",
        "149": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "150": "    Map<Integer, Character> expected = Maps.newHashMap();\n",
        "151": "    expected.put(1, 'a');\n",
        "152": "    expected.put(3, 'c');\n",
        "153": "    expected.put(2, null);\n",
        "154": "    assertEquals(expected, table.row(\"foo\"));\n",
        "155": "  }\n",
        "156": "\n",
        "157": "  @Override public void testColumn() {\n",
        "158": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "159": "    Map<String, Character> expected = Maps.newHashMap();\n",
        "160": "    expected.put(\"foo\", 'a');\n",
        "161": "    expected.put(\"bar\", 'b');\n",
        "162": "    expected.put(\"cat\", null);\n",
        "163": "    assertEquals(expected, table.column(1));\n",
        "164": "  }\n",
        "165": "\n",
        "166": "  @Override public void testToStringSize1() {\n",
        "167": "    table = ArrayTable.create(ImmutableList.of(\"foo\"), ImmutableList.of(1));\n",
        "168": "    table.put(\"foo\", 1, 'a');\n",
        "169": "    assertEquals(\"{foo={1=a}}\", table.toString());\n",
        "170": "  }\n",
        "171": "\n",
        "172": "  public void testCreateDuplicateRows() {\n",
        "173": "    try {\n",
        "174": "      ArrayTable.create(asList(\"foo\", \"bar\", \"foo\"), asList(1, 2, 3));\n",
        "175": "      fail();\n",
        "176": "    } catch (IllegalArgumentException expected) {}\n",
        "177": "  }\n",
        "178": "\n",
        "179": "  public void testCreateDuplicateColumns() {\n",
        "180": "    try {\n",
        "181": "      ArrayTable.create(asList(\"foo\", \"bar\"), asList(1, 2, 3, 2));\n",
        "182": "      fail();\n",
        "183": "    } catch (IllegalArgumentException expected) {}\n",
        "184": "  }\n",
        "185": "\n",
        "186": "  public void testCreateEmptyRows() {\n",
        "187": "    try {\n",
        "188": "      ArrayTable.create(Arrays.<String>asList(), asList(1, 2, 3));\n",
        "189": "      fail();\n",
        "190": "    } catch (IllegalArgumentException expected) {}\n",
        "191": "  }\n",
        "192": "\n",
        "193": "  public void testCreateEmptyColumns() {\n",
        "194": "    try {\n",
        "195": "      ArrayTable.create(asList(\"foo\", \"bar\"), Arrays.<Integer>asList());\n",
        "196": "      fail();\n",
        "197": "    } catch (IllegalArgumentException expected) {}\n",
        "198": "  }\n",
        "199": "\n",
        "200": "  public void testCreateCopyArrayTable() {\n",
        "201": "    Table<String, Integer, Character> original\n",
        "202": "        = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "203": "    Table<String, Integer, Character> copy = ArrayTable.create(original);\n",
        "204": "    assertEquals(original, copy);\n",
        "205": "    original.put(\"foo\", 1, 'd');\n",
        "206": "    assertEquals((Character) 'd', original.get(\"foo\", 1));\n",
        "207": "    assertEquals((Character) 'a', copy.get(\"foo\", 1));\n",
        "208": "    assertEquals(copy.rowKeySet(), original.rowKeySet());\n",
        "209": "    assertEquals(copy.columnKeySet(), original.columnKeySet());\n",
        "210": "  }\n",
        "211": "\n",
        "212": "  public void testCreateCopyHashBasedTable() {\n",
        "213": "    Table<String, Integer, Character> original = HashBasedTable.create();\n",
        "214": "    original.put(\"foo\", 1, 'a');\n",
        "215": "    original.put(\"bar\", 1, 'b');\n",
        "216": "    original.put(\"foo\", 3, 'c');\n",
        "217": "    Table<String, Integer, Character> copy = ArrayTable.create(original);\n",
        "218": "    assertEquals(4, copy.size());\n",
        "219": "    assertEquals((Character) 'a', copy.get(\"foo\", 1));\n",
        "220": "    assertEquals((Character) 'b', copy.get(\"bar\", 1));\n",
        "221": "    assertEquals((Character) 'c', copy.get(\"foo\", 3));\n",
        "222": "    assertNull(copy.get(\"bar\", 3));\n",
        "223": "    original.put(\"foo\", 1, 'd');\n",
        "224": "    assertEquals((Character) 'd', original.get(\"foo\", 1));\n",
        "225": "    assertEquals((Character) 'a', copy.get(\"foo\", 1));\n",
        "226": "    assertEquals(copy.rowKeySet(), ImmutableSet.of(\"foo\", \"bar\"));\n",
        "227": "    assertEquals(copy.columnKeySet(), ImmutableSet.of(1, 3));\n",
        "228": "  }\n",
        "229": "\n",
        "230": "  public void testCreateCopyEmptyTable() {\n",
        "231": "    Table<String, Integer, Character> original = HashBasedTable.create();\n",
        "232": "    try {\n",
        "233": "      ArrayTable.create(original);\n",
        "234": "      fail();\n",
        "235": "    } catch (IllegalArgumentException expected) {}\n",
        "236": "  }\n",
        "237": "\n",
        "238": "  public void testSerialization() {\n",
        "239": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "240": "    SerializableTester.reserializeAndAssert(table);\n",
        "241": "  }\n",
        "242": "\n",
        "243": "  public void testToString_ordered() {\n",
        "244": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "245": "    assertEquals(\"{foo={1=a, 2=null, 3=c}, \" +\n",
        "246": "        \"bar={1=b, 2=null, 3=null}, \" +\n",
        "247": "        \"cat={1=null, 2=null, 3=null}}\",\n",
        "248": "        table.toString());\n",
        "249": "    assertEquals(\"{foo={1=a, 2=null, 3=c}, \" +\n",
        "250": "        \"bar={1=b, 2=null, 3=null}, \" +\n",
        "251": "        \"cat={1=null, 2=null, 3=null}}\",\n",
        "252": "        table.rowMap().toString());\n",
        "253": "  }\n",
        "254": "\n",
        "255": "  public void testCellSetToString_ordered() {\n",
        "256": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "257": "    assertEquals(\"[(foo,1)=a, (foo,2)=null, (foo,3)=c, \" +\n",
        "258": "        \"(bar,1)=b, (bar,2)=null, (bar,3)=null, \" +\n",
        "259": "        \"(cat,1)=null, (cat,2)=null, (cat,3)=null]\",\n",
        "260": "        table.cellSet().toString());\n",
        "261": "  }\n",
        "262": "\n",
        "263": "  public void testRowKeySetToString_ordered() {\n",
        "264": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "265": "    assertEquals(\"[foo, bar, cat]\", table.rowKeySet().toString());\n",
        "266": "  }\n",
        "267": "\n",
        "268": "  public void testColumnKeySetToString_ordered() {\n",
        "269": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "270": "    assertEquals(\"[1, 2, 3]\", table.columnKeySet().toString());\n",
        "271": "  }\n",
        "272": "\n",
        "273": "  public void testValuesToString_ordered() {\n",
        "274": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "275": "    assertEquals(\"[a, null, c, b, null, null, null, null, null]\",\n",
        "276": "        table.values().toString());\n",
        "277": "  }\n",
        "278": "\n",
        "279": "  public void testRowKeyList() {\n",
        "280": "    ArrayTable<String, Integer, Character> table\n",
        "281": "        = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "282": "    assertThat(table.rowKeyList()).containsExactly(\"foo\", \"bar\", \"cat\").inOrder();\n",
        "283": "  }\n",
        "284": "\n",
        "285": "  public void testColumnKeyList() {\n",
        "286": "    ArrayTable<String, Integer, Character> table\n",
        "287": "        = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "288": "    assertThat(table.columnKeyList()).containsExactly(1, 2, 3).inOrder();\n",
        "289": "  }\n",
        "290": "\n",
        "291": "  public void testGetMissingKeys() {\n",
        "292": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "293": "    assertNull(table.get(\"dog\", 1));\n",
        "294": "    assertNull(table.get(\"foo\", 4));\n",
        "295": "  }\n",
        "296": "\n",
        "297": "  public void testAt() {\n",
        "298": "    ArrayTable<String, Integer, Character> table\n",
        "299": "        = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "300": "    assertEquals((Character) 'b', table.at(1, 0));\n",
        "301": "    assertEquals((Character) 'c', table.at(0, 2));\n",
        "302": "    assertNull(table.at(1, 2));\n",
        "303": "    try {\n",
        "304": "      table.at(1, 3);\n",
        "305": "      fail();\n",
        "306": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "307": "    try {\n",
        "308": "      table.at(1, -1);\n",
        "309": "      fail();\n",
        "310": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "311": "    try {\n",
        "312": "      table.at(3, 2);\n",
        "313": "      fail();\n",
        "314": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "315": "    try {\n",
        "316": "      table.at(-1, 2);\n",
        "317": "      fail();\n",
        "318": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "319": "  }\n",
        "320": "\n",
        "321": "  public void testSet() {\n",
        "322": "    ArrayTable<String, Integer, Character> table\n",
        "323": "        = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "324": "    assertEquals((Character) 'b', table.set(1, 0, 'd'));\n",
        "325": "    assertEquals((Character) 'd', table.get(\"bar\", 1));\n",
        "326": "    assertNull(table.set(2, 0, 'e'));\n",
        "327": "    assertEquals((Character) 'e', table.get(\"cat\", 1));\n",
        "328": "    assertEquals((Character) 'a', table.set(0, 0, null));\n",
        "329": "    assertNull(table.get(\"foo\", 1));\n",
        "330": "    try {\n",
        "331": "      table.set(1, 3, 'z');\n",
        "332": "      fail();\n",
        "333": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "334": "    try {\n",
        "335": "      table.set(1, -1, 'z');\n",
        "336": "      fail();\n",
        "337": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "338": "    try {\n",
        "339": "      table.set(3, 2, 'z');\n",
        "340": "      fail();\n",
        "341": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "342": "    try {\n",
        "343": "      table.set(-1, 2, 'z');\n",
        "344": "      fail();\n",
        "345": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "346": "    assertFalse(table.containsValue('z'));\n",
        "347": "  }\n",
        "348": "\n",
        "349": "  public void testEraseAll() {\n",
        "350": "    ArrayTable<String, Integer, Character> table\n",
        "351": "        = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "352": "    table.eraseAll();\n",
        "353": "    assertEquals(9, table.size());\n",
        "354": "    assertNull(table.get(\"bar\", 1));\n",
        "355": "    assertTrue(table.containsRow(\"foo\"));\n",
        "356": "    assertFalse(table.containsValue('a'));\n",
        "357": "  }\n",
        "358": "\n",
        "359": "  public void testPutIllegal() {\n",
        "360": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "361": "    try {\n",
        "362": "      table.put(\"dog\", 1, 'd');\n",
        "363": "      fail();\n",
        "364": "    } catch (IllegalArgumentException expected) {\n",
        "365": "      assertThat(expected).hasMessage(\"Row dog not in [foo, bar, cat]\");\n",
        "366": "    }\n",
        "367": "    try {\n",
        "368": "      table.put(\"foo\", 4, 'd');\n",
        "369": "      fail();\n",
        "370": "    } catch (IllegalArgumentException expected) {\n",
        "371": "      assertThat(expected).hasMessage(\"Column 4 not in [1, 2, 3]\");\n",
        "372": "    }\n",
        "373": "    assertFalse(table.containsValue('d'));\n",
        "374": "  }\n",
        "375": "\n",
        "376": "  public void testErase() {\n",
        "377": "    ArrayTable<String, Integer, Character> table\n",
        "378": "        = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "379": "    assertEquals((Character) 'b', table.erase(\"bar\", 1));\n",
        "380": "    assertNull(table.get(\"bar\", 1));\n",
        "381": "    assertEquals(9, table.size());\n",
        "382": "    assertNull(table.erase(\"bar\", 1));\n",
        "383": "    assertNull(table.erase(\"foo\", 2));\n",
        "384": "    assertNull(table.erase(\"dog\", 1));\n",
        "385": "    assertNull(table.erase(\"bar\", 5));\n",
        "386": "    assertNull(table.erase(null, 1));\n",
        "387": "    assertNull(table.erase(\"bar\", null));\n",
        "388": "  }\n",
        "389": "\n",
        "390": "  public void testCellReflectsChanges() {\n",
        "391": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "392": "    Cell<String, Integer, Character> cell = table.cellSet().iterator().next();\n",
        "393": "    assertEquals(Tables.immutableCell(\"foo\", 1, 'a'), cell);\n",
        "394": "    assertEquals((Character) 'a', table.put(\"foo\", 1, 'd'));\n",
        "395": "    assertEquals(Tables.immutableCell(\"foo\", 1, 'd'), cell);\n",
        "396": "  }\n",
        "397": "\n",
        "398": "  public void testRowMissing() {\n",
        "399": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "400": "    Map<Integer, Character> row = table.row(\"dog\");\n",
        "401": "    assertTrue(row.isEmpty());\n",
        "402": "    try {\n",
        "403": "      row.put(1, 'd');\n",
        "404": "      fail();\n",
        "405": "    } catch (UnsupportedOperationException expected) {}\n",
        "406": "  }\n",
        "407": "\n",
        "408": "  public void testColumnMissing() {\n",
        "409": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "410": "    Map<String, Character> column = table.column(4);\n",
        "411": "    assertTrue(column.isEmpty());\n",
        "412": "    try {\n",
        "413": "      column.put(\"foo\", 'd');\n",
        "414": "      fail();\n",
        "415": "    } catch (UnsupportedOperationException expected) {}\n",
        "416": "  }\n",
        "417": "\n",
        "418": "  public void testRowPutIllegal() {\n",
        "419": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "420": "    Map<Integer, Character> map = table.row(\"foo\");\n",
        "421": "    try {\n",
        "422": "      map.put(4, 'd');\n",
        "423": "      fail();\n",
        "424": "    } catch (IllegalArgumentException expected) {\n",
        "425": "      assertThat(expected).hasMessage(\"Column 4 not in [1, 2, 3]\");\n",
        "426": "    }\n",
        "427": "  }\n",
        "428": "\n",
        "429": "  public void testColumnPutIllegal() {\n",
        "430": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "431": "    Map<String, Character> map = table.column(3);\n",
        "432": "    try {\n",
        "433": "      map.put(\"dog\", 'd');\n",
        "434": "      fail();\n",
        "435": "    } catch (IllegalArgumentException expected) {\n",
        "436": "      assertThat(expected).hasMessage(\"Row dog not in [foo, bar, cat]\");\n",
        "437": "    }\n",
        "438": "  }\n",
        "439": "}\n",
        "440": "\n"
    }
}