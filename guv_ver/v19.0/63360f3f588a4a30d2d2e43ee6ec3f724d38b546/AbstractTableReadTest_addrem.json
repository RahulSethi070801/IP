{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.base.Objects;\n",
        "23": "import com.google.common.testing.EqualsTester;\n",
        "24": "\n",
        "25": "import junit.framework.TestCase;\n",
        "26": "\n",
        "27": "/**\n",
        "28": " * Test cases for {@link Table} read operations.\n",
        "29": " *\n",
        "30": " * @author Jared Levy\n",
        "31": " */\n",
        "32": "@GwtCompatible(emulated = true)\n",
        "33": "public abstract class AbstractTableReadTest extends TestCase {\n",
        "34": "  protected Table<String, Integer, Character> table;\n",
        "35": "\n",
        "36": "  /**\n",
        "37": "   * Creates a table with the specified data.\n",
        "38": "   *\n",
        "39": "   * @param data the table data, repeating the sequence row key, column key,\n",
        "40": "   *     value once per mapping\n",
        "41": "   * @throws IllegalArgumentException if the size of {@code data} isn't a\n",
        "42": "   *     multiple of 3\n",
        "43": "   * @throws ClassCastException if a data element has the wrong type\n",
        "44": "   */\n",
        "45": "  protected abstract Table<String, Integer, Character>\n",
        "46": "      create(Object... data);\n",
        "47": "\n",
        "48": "  protected void assertSize(int expectedSize) {\n",
        "49": "    assertEquals(expectedSize, table.size());\n",
        "50": "  }\n",
        "51": "\n",
        "52": "  @Override public void setUp() throws Exception {\n",
        "53": "    super.setUp();\n",
        "54": "    table = create();\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  public void testContains() {\n",
        "58": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "59": "    assertTrue(table.contains(\"foo\", 1));\n",
        "60": "    assertTrue(table.contains(\"bar\", 1));\n",
        "61": "    assertTrue(table.contains(\"foo\", 3));\n",
        "62": "    assertFalse(table.contains(\"foo\", 2));\n",
        "63": "    assertFalse(table.contains(\"bar\", 3));\n",
        "64": "    assertFalse(table.contains(\"cat\", 1));\n",
        "65": "    assertFalse(table.contains(\"foo\", null));\n",
        "66": "    assertFalse(table.contains(null, 1));\n",
        "67": "    assertFalse(table.contains(null, null));\n",
        "68": "  }\n",
        "69": "\n",
        "70": "  public void testContainsRow() {\n",
        "71": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "72": "    assertTrue(table.containsRow(\"foo\"));\n",
        "73": "    assertTrue(table.containsRow(\"bar\"));\n",
        "74": "    assertFalse(table.containsRow(\"cat\"));\n",
        "75": "    assertFalse(table.containsRow(null));\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  public void testContainsColumn() {\n",
        "79": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "80": "    assertTrue(table.containsColumn(1));\n",
        "81": "    assertTrue(table.containsColumn(3));\n",
        "82": "    assertFalse(table.containsColumn(2));\n",
        "83": "    assertFalse(table.containsColumn(null));\n",
        "84": "  }\n",
        "85": "\n",
        "86": "  public void testContainsValue() {\n",
        "87": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "88": "    assertTrue(table.containsValue('a'));\n",
        "89": "    assertTrue(table.containsValue('b'));\n",
        "90": "    assertTrue(table.containsValue('c'));\n",
        "91": "    assertFalse(table.containsValue('x'));\n",
        "92": "    assertFalse(table.containsValue(null));\n",
        "93": "  }\n",
        "94": "\n",
        "95": "  public void testGet() {\n",
        "96": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "97": "    assertEquals((Character) 'a', table.get(\"foo\", 1));\n",
        "98": "    assertEquals((Character) 'b', table.get(\"bar\", 1));\n",
        "99": "    assertEquals((Character) 'c', table.get(\"foo\", 3));\n",
        "100": "    assertNull(table.get(\"foo\", 2));\n",
        "101": "    assertNull(table.get(\"bar\", 3));\n",
        "102": "    assertNull(table.get(\"cat\", 1));\n",
        "103": "    assertNull(table.get(\"foo\", null));\n",
        "104": "    assertNull(table.get(null, 1));\n",
        "105": "    assertNull(table.get(null, null));\n",
        "106": "  }\n",
        "107": "\n",
        "108": "  public void testIsEmpty() {\n",
        "109": "    assertTrue(table.isEmpty());\n",
        "110": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "111": "    assertFalse(table.isEmpty());\n",
        "112": "  }\n",
        "113": "\n",
        "114": "  public void testSize() {\n",
        "115": "    assertSize(0);\n",
        "116": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "117": "    assertSize(3);\n",
        "118": "  }\n",
        "119": "\n",
        "120": "  public void testEquals() {\n",
        "121": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "122": "    Table<String, Integer, Character> hashCopy = HashBasedTable.create(table);\n",
        "123": "    Table<String, Integer, Character> reordered\n",
        "124": "        = create(\"foo\", 3, 'c', \"foo\", 1, 'a', \"bar\", 1, 'b');\n",
        "125": "    Table<String, Integer, Character> smaller\n",
        "126": "        = create(\"foo\", 1, 'a', \"bar\", 1, 'b');\n",
        "127": "    Table<String, Integer, Character> swapOuter\n",
        "128": "        = create(\"bar\", 1, 'a', \"foo\", 1, 'b', \"bar\", 3, 'c');\n",
        "129": "    Table<String, Integer, Character> swapValues\n",
        "130": "        = create(\"foo\", 1, 'c', \"bar\", 1, 'b', \"foo\", 3, 'a');\n",
        "131": "\n",
        "132": "    new EqualsTester()\n",
        "133": "        .addEqualityGroup(table, hashCopy, reordered)\n",
        "134": "        .addEqualityGroup(smaller)\n",
        "135": "        .addEqualityGroup(swapOuter)\n",
        "136": "        .addEqualityGroup(swapValues)\n",
        "137": "        .testEquals();\n",
        "138": "  }\n",
        "139": "\n",
        "140": "  public void testHashCode() {\n",
        "141": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "142": "    int expected = Objects.hashCode(\"foo\", 1, 'a')\n",
        "143": "        + Objects.hashCode(\"bar\", 1, 'b')\n",
        "144": "        + Objects.hashCode(\"foo\", 3, 'c');\n",
        "145": "    assertEquals(expected, table.hashCode());\n",
        "146": "  }\n",
        "147": "\n",
        "148": "  public void testToStringSize1() {\n",
        "149": "    table = create(\"foo\", 1, 'a');\n",
        "150": "    assertEquals(\"{foo={1=a}}\", table.toString());\n",
        "151": "  }\n",
        "152": "\n",
        "153": "  public void testRow() {\n",
        "154": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "155": "    assertEquals(ImmutableMap.of(1, 'a', 3, 'c'), table.row(\"foo\"));\n",
        "156": "  }\n",
        "157": "\n",
        "158": "  // This test assumes that the implementation does not support null keys.\n",
        "159": "  public void testRowNull() {\n",
        "160": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "161": "    try {\n",
        "162": "      table.row(null);\n",
        "163": "      fail();\n",
        "164": "    } catch (NullPointerException expected) {}\n",
        "165": "  }\n",
        "166": "\n",
        "167": "  public void testColumn() {\n",
        "168": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "169": "    assertEquals(ImmutableMap.of(\"foo\", 'a', \"bar\", 'b'), table.column(1));\n",
        "170": "  }\n",
        "171": "\n",
        "172": "  // This test assumes that the implementation does not support null keys.\n",
        "173": "  public void testColumnNull() {\n",
        "174": "    table = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "175": "    try {\n",
        "176": "      table.column(null);\n",
        "177": "      fail();\n",
        "178": "    } catch (NullPointerException expected) {}\n",
        "179": "  }\n",
        "180": "\n",
        "181": "  public void testColumnSetPartialOverlap() {\n",
        "182": "    table = create(\n",
        "183": "        \"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 2, 'c', \"bar\", 3, 'd');\n",
        "184": "    assertThat(table.columnKeySet()).containsExactly(1, 2, 3);\n",
        "185": "  }\n",
        "186": "}\n",
        "187": "\n"
    }
}