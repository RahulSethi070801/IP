{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.Iterables.concat;\n",
        "20": "import static com.google.common.collect.Lists.newArrayList;\n",
        "21": "import static com.google.common.truth.Truth.assertThat;\n",
        "22": "import static java.util.Arrays.asList;\n",
        "23": "import static java.util.Collections.nCopies;\n",
        "24": "\n",
        "25": "import com.google.common.annotations.GwtCompatible;\n",
        "26": "import com.google.common.base.Function;\n",
        "27": "import com.google.common.base.Predicate;\n",
        "28": "\n",
        "29": "import junit.framework.TestCase;\n",
        "30": "\n",
        "31": "import java.util.Collection;\n",
        "32": "import java.util.Collections;\n",
        "33": "import java.util.Iterator;\n",
        "34": "import java.util.List;\n",
        "35": "import java.util.NoSuchElementException;\n",
        "36": "\n",
        "37": "/**\n",
        "38": " * Tests for {@link Collections2}.\n",
        "39": " *\n",
        "40": " * @author Chris Povirk\n",
        "41": " * @author Jared Levy\n",
        "42": " */\n",
        "43": "@GwtCompatible(emulated = true)\n",
        "44": "public class Collections2Test extends TestCase {\n",
        "45": "\n",
        "46": "  static final Predicate<String> NOT_YYY_ZZZ = new Predicate<String>() {\n",
        "47": "      @Override\n",
        "48": "      public boolean apply(String input) {\n",
        "49": "        return !\"yyy\".equals(input) && !\"zzz\".equals(input);\n",
        "50": "      }\n",
        "51": "  };\n",
        "52": "\n",
        "53": "  static final Predicate<String> LENGTH_1 = new Predicate<String>() {\n",
        "54": "    @Override\n",
        "55": "    public boolean apply(String input) {\n",
        "56": "      return input.length() == 1;\n",
        "57": "    }\n",
        "58": "  };\n",
        "59": "\n",
        "60": "  static final Predicate<String> STARTS_WITH_VOWEL = new Predicate<String>() {\n",
        "61": "    @Override\n",
        "62": "    public boolean apply(String input) {\n",
        "63": "      return asList('a', 'e', 'i', 'o', 'u').contains(input.charAt(0));\n",
        "64": "    }\n",
        "65": "  };\n",
        "66": "\n",
        "67": "  private static final Function<String, String> REMOVE_FIRST_CHAR\n",
        "68": "      = new Function<String, String>() {\n",
        "69": "        @Override\n",
        "70": "        public String apply(String from) {\n",
        "71": "          return ((from == null) || \"\".equals(from))\n",
        "72": "              ? null : from.substring(1);\n",
        "73": "        }\n",
        "74": "      };\n",
        "75": "\n",
        "76": "  public void testOrderedPermutationSetEmpty() {\n",
        "77": "    List<Integer> list = newArrayList();\n",
        "78": "    Collection<List<Integer>> permutationSet =\n",
        "79": "        Collections2.orderedPermutations(list);\n",
        "80": "\n",
        "81": "    assertEquals(1, permutationSet.size());\n",
        "82": "    assertThat(permutationSet).contains(list);\n",
        "83": "\n",
        "84": "    Iterator<List<Integer>> permutations = permutationSet.iterator();\n",
        "85": "\n",
        "86": "    assertNextPermutation(Lists.<Integer>newArrayList(), permutations);\n",
        "87": "    assertNoMorePermutations(permutations);\n",
        "88": "  }\n",
        "89": "\n",
        "90": "  public void testOrderedPermutationSetOneElement() {\n",
        "91": "    List<Integer> list = newArrayList(1);\n",
        "92": "    Iterator<List<Integer>> permutations =\n",
        "93": "        Collections2.orderedPermutations(list).iterator();\n",
        "94": "\n",
        "95": "    assertNextPermutation(newArrayList(1), permutations);\n",
        "96": "    assertNoMorePermutations(permutations);\n",
        "97": "  }\n",
        "98": "\n",
        "99": "  public void testOrderedPermutationSetThreeElements() {\n",
        "100": "    List<String> list = newArrayList(\"b\", \"a\", \"c\");\n",
        "101": "    Iterator<List<String>> permutations =\n",
        "102": "        Collections2.orderedPermutations(list).iterator();\n",
        "103": "\n",
        "104": "    assertNextPermutation(newArrayList(\"a\", \"b\", \"c\"), permutations);\n",
        "105": "    assertNextPermutation(newArrayList(\"a\", \"c\", \"b\"), permutations);\n",
        "106": "    assertNextPermutation(newArrayList(\"b\", \"a\", \"c\"), permutations);\n",
        "107": "    assertNextPermutation(newArrayList(\"b\", \"c\", \"a\"), permutations);\n",
        "108": "    assertNextPermutation(newArrayList(\"c\", \"a\", \"b\"), permutations);\n",
        "109": "    assertNextPermutation(newArrayList(\"c\", \"b\", \"a\"), permutations);\n",
        "110": "    assertNoMorePermutations(permutations);\n",
        "111": "  }\n",
        "112": "\n",
        "113": "  public void testOrderedPermutationSetRepeatedElements() {\n",
        "114": "    List<Integer> list = newArrayList(1, 1, 2, 2);\n",
        "115": "    Iterator<List<Integer>> permutations =\n",
        "116": "        Collections2.orderedPermutations(list, Ordering.natural()).iterator();\n",
        "117": "\n",
        "118": "    assertNextPermutation(newArrayList(1, 1, 2, 2), permutations);\n",
        "119": "    assertNextPermutation(newArrayList(1, 2, 1, 2), permutations);\n",
        "120": "    assertNextPermutation(newArrayList(1, 2, 2, 1), permutations);\n",
        "121": "    assertNextPermutation(newArrayList(2, 1, 1, 2), permutations);\n",
        "122": "    assertNextPermutation(newArrayList(2, 1, 2, 1), permutations);\n",
        "123": "    assertNextPermutation(newArrayList(2, 2, 1, 1), permutations);\n",
        "124": "    assertNoMorePermutations(permutations);\n",
        "125": "  }\n",
        "126": "\n",
        "127": "  public void testOrderedPermutationSetRepeatedElementsSize() {\n",
        "128": "    List<Integer> list = newArrayList(1, 1, 1, 1, 2, 2, 3);\n",
        "129": "    Collection<List<Integer>> permutations =\n",
        "130": "        Collections2.orderedPermutations(list, Ordering.natural());\n",
        "131": "\n",
        "132": "    assertPermutationsCount(105, permutations);\n",
        "133": "  }\n",
        "134": "\n",
        "135": "  public void testOrderedPermutationSetSizeOverflow() {\n",
        "136": "    // 12 elements won't overflow\n",
        "137": "    assertEquals(479001600 /*12!*/, Collections2.orderedPermutations(\n",
        "138": "        newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).size());\n",
        "139": "    // 13 elements overflow an int\n",
        "140": "    assertEquals(Integer.MAX_VALUE, Collections2.orderedPermutations(\n",
        "141": "        newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)).size());\n",
        "142": "    // 21 elements overflow a long\n",
        "143": "    assertEquals(Integer.MAX_VALUE, Collections2.orderedPermutations(\n",
        "144": "        newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n",
        "145": "            16, 17, 18, 19, 20, 21)).size());\n",
        "146": "\n",
        "147": "    // Almost force an overflow in the binomial coefficient calculation\n",
        "148": "    assertEquals(1391975640 /*C(34,14)*/, Collections2.orderedPermutations(\n",
        "149": "        concat(nCopies(20, 1), nCopies(14, 2))).size());\n",
        "150": "    // Do force an overflow in the binomial coefficient calculation\n",
        "151": "    assertEquals(Integer.MAX_VALUE, Collections2.orderedPermutations(\n",
        "152": "        concat(nCopies(21, 1), nCopies(14, 2))).size());\n",
        "153": "  }\n",
        "154": "\n",
        "155": "  public void testOrderedPermutationSetContains() {\n",
        "156": "    List<Integer> list = newArrayList(3, 2, 1);\n",
        "157": "    Collection<List<Integer>> permutationSet =\n",
        "158": "        Collections2.orderedPermutations(list);\n",
        "159": "\n",
        "160": "    assertTrue(permutationSet.contains(newArrayList(1, 2, 3)));\n",
        "161": "    assertTrue(permutationSet.contains(newArrayList(2, 3, 1)));\n",
        "162": "    assertFalse(permutationSet.contains(newArrayList(1, 2)));\n",
        "163": "    assertFalse(permutationSet.contains(newArrayList(1, 1, 2, 3)));\n",
        "164": "    assertFalse(permutationSet.contains(newArrayList(1, 2, 3, 4)));\n",
        "165": "    assertFalse(permutationSet.contains(null));\n",
        "166": "  }\n",
        "167": "\n",
        "168": "  public void testPermutationSetEmpty() {\n",
        "169": "    Collection<List<Integer>> permutationSet =\n",
        "170": "        Collections2.permutations(Collections.<Integer>emptyList());\n",
        "171": "\n",
        "172": "    assertEquals(1, permutationSet.size());\n",
        "173": "    assertTrue(permutationSet.contains(Collections.<Integer> emptyList()));\n",
        "174": "\n",
        "175": "    Iterator<List<Integer>> permutations = permutationSet.iterator();\n",
        "176": "    assertNextPermutation(Collections.<Integer> emptyList(), permutations);\n",
        "177": "    assertNoMorePermutations(permutations);\n",
        "178": "  }\n",
        "179": "\n",
        "180": "  public void testPermutationSetOneElement() {\n",
        "181": "    Iterator<List<Integer>> permutations =\n",
        "182": "        Collections2.permutations(Collections.<Integer> singletonList(1))\n",
        "183": "        .iterator();\n",
        "184": "    assertNextPermutation(newArrayList(1), permutations);\n",
        "185": "    assertNoMorePermutations(permutations);\n",
        "186": "  }\n",
        "187": "\n",
        "188": "  public void testPermutationSetTwoElements() {\n",
        "189": "    Iterator<List<Integer>> permutations = Collections2.permutations(\n",
        "190": "        newArrayList(1, 2)).iterator();\n",
        "191": "    assertNextPermutation(newArrayList(1, 2), permutations);\n",
        "192": "    assertNextPermutation(newArrayList(2, 1), permutations);\n",
        "193": "    assertNoMorePermutations(permutations);\n",
        "194": "  }\n",
        "195": "\n",
        "196": "  public void testPermutationSetThreeElements() {\n",
        "197": "    Iterator<List<Integer>> permutations = Collections2.permutations(\n",
        "198": "        newArrayList(1, 2, 3)).iterator();\n",
        "199": "    assertNextPermutation(newArrayList(1, 2, 3), permutations);\n",
        "200": "    assertNextPermutation(newArrayList(1, 3, 2), permutations);\n",
        "201": "    assertNextPermutation(newArrayList(3, 1, 2), permutations);\n",
        "202": "\n",
        "203": "    assertNextPermutation(newArrayList(3, 2, 1), permutations);\n",
        "204": "    assertNextPermutation(newArrayList(2, 3, 1), permutations);\n",
        "205": "    assertNextPermutation(newArrayList(2, 1, 3), permutations);\n",
        "206": "    assertNoMorePermutations(permutations);\n",
        "207": "  }\n",
        "208": "\n",
        "209": "  public void testPermutationSetThreeElementsOutOfOrder() {\n",
        "210": "    Iterator<List<Integer>> permutations = Collections2.permutations(\n",
        "211": "        newArrayList(3, 2, 1)).iterator();\n",
        "212": "    assertNextPermutation(newArrayList(3, 2, 1), permutations);\n",
        "213": "    assertNextPermutation(newArrayList(3, 1, 2), permutations);\n",
        "214": "    assertNextPermutation(newArrayList(1, 3, 2), permutations);\n",
        "215": "\n",
        "216": "    assertNextPermutation(newArrayList(1, 2, 3), permutations);\n",
        "217": "    assertNextPermutation(newArrayList(2, 1, 3), permutations);\n",
        "218": "    assertNextPermutation(newArrayList(2, 3, 1), permutations);\n",
        "219": "    assertNoMorePermutations(permutations);\n",
        "220": "  }\n",
        "221": "\n",
        "222": "  public void testPermutationSetThreeRepeatedElements() {\n",
        "223": "    Iterator<List<Integer>> permutations = Collections2.permutations(\n",
        "224": "        newArrayList(1, 1, 2)).iterator();\n",
        "225": "    assertNextPermutation(newArrayList(1, 1, 2), permutations);\n",
        "226": "    assertNextPermutation(newArrayList(1, 2, 1), permutations);\n",
        "227": "    assertNextPermutation(newArrayList(2, 1, 1), permutations);\n",
        "228": "    assertNextPermutation(newArrayList(2, 1, 1), permutations);\n",
        "229": "    assertNextPermutation(newArrayList(1, 2, 1), permutations);\n",
        "230": "    assertNextPermutation(newArrayList(1, 1, 2), permutations);\n",
        "231": "    assertNoMorePermutations(permutations);\n",
        "232": "  }\n",
        "233": "\n",
        "234": "  public void testPermutationSetFourElements() {\n",
        "235": "    Iterator<List<Integer>> permutations = Collections2.permutations(\n",
        "236": "        newArrayList(1, 2, 3, 4)).iterator();\n",
        "237": "    assertNextPermutation(newArrayList(1, 2, 3, 4), permutations);\n",
        "238": "    assertNextPermutation(newArrayList(1, 2, 4, 3), permutations);\n",
        "239": "    assertNextPermutation(newArrayList(1, 4, 2, 3), permutations);\n",
        "240": "    assertNextPermutation(newArrayList(4, 1, 2, 3), permutations);\n",
        "241": "\n",
        "242": "    assertNextPermutation(newArrayList(4, 1, 3, 2), permutations);\n",
        "243": "    assertNextPermutation(newArrayList(1, 4, 3, 2), permutations);\n",
        "244": "    assertNextPermutation(newArrayList(1, 3, 4, 2), permutations);\n",
        "245": "    assertNextPermutation(newArrayList(1, 3, 2, 4), permutations);\n",
        "246": "\n",
        "247": "    assertNextPermutation(newArrayList(3, 1, 2, 4), permutations);\n",
        "248": "    assertNextPermutation(newArrayList(3, 1, 4, 2), permutations);\n",
        "249": "    assertNextPermutation(newArrayList(3, 4, 1, 2), permutations);\n",
        "250": "    assertNextPermutation(newArrayList(4, 3, 1, 2), permutations);\n",
        "251": "\n",
        "252": "    assertNextPermutation(newArrayList(4, 3, 2, 1), permutations);\n",
        "253": "    assertNextPermutation(newArrayList(3, 4, 2, 1), permutations);\n",
        "254": "    assertNextPermutation(newArrayList(3, 2, 4, 1), permutations);\n",
        "255": "    assertNextPermutation(newArrayList(3, 2, 1, 4), permutations);\n",
        "256": "\n",
        "257": "    assertNextPermutation(newArrayList(2, 3, 1, 4), permutations);\n",
        "258": "    assertNextPermutation(newArrayList(2, 3, 4, 1), permutations);\n",
        "259": "    assertNextPermutation(newArrayList(2, 4, 3, 1), permutations);\n",
        "260": "    assertNextPermutation(newArrayList(4, 2, 3, 1), permutations);\n",
        "261": "\n",
        "262": "    assertNextPermutation(newArrayList(4, 2, 1, 3), permutations);\n",
        "263": "    assertNextPermutation(newArrayList(2, 4, 1, 3), permutations);\n",
        "264": "    assertNextPermutation(newArrayList(2, 1, 4, 3), permutations);\n",
        "265": "    assertNextPermutation(newArrayList(2, 1, 3, 4), permutations);\n",
        "266": "    assertNoMorePermutations(permutations);\n",
        "267": "  }\n",
        "268": "\n",
        "269": "  public void testPermutationSetSize() {\n",
        "270": "    assertPermutationsCount(1,\n",
        "271": "        Collections2.permutations(Collections.<Integer>emptyList()));\n",
        "272": "    assertPermutationsCount(1, Collections2.permutations(newArrayList(1)));\n",
        "273": "    assertPermutationsCount(2, Collections2.permutations(newArrayList(1, 2)));\n",
        "274": "    assertPermutationsCount(6,\n",
        "275": "        Collections2.permutations(newArrayList(1, 2, 3)));\n",
        "276": "    assertPermutationsCount(5040,\n",
        "277": "        Collections2.permutations(newArrayList(1, 2, 3, 4, 5, 6, 7)));\n",
        "278": "    assertPermutationsCount(40320,\n",
        "279": "        Collections2.permutations(newArrayList(1, 2, 3, 4, 5, 6, 7, 8)));\n",
        "280": "  }\n",
        "281": "\n",
        "282": "  public void testPermutationSetSizeOverflow() {\n",
        "283": "    // 13 elements overflow an int\n",
        "284": "    assertEquals(Integer.MAX_VALUE, Collections2.permutations(newArrayList(\n",
        "285": "        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)).size());\n",
        "286": "    // 21 elements overflow a long\n",
        "287": "    assertEquals(Integer.MAX_VALUE, Collections2.orderedPermutations(\n",
        "288": "        newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n",
        "289": "            16, 17, 18, 19, 20)).size());\n",
        "290": "    assertEquals(Integer.MAX_VALUE, Collections2.orderedPermutations(\n",
        "291": "        newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n",
        "292": "            16, 17, 18, 19, 20, 21)).size());\n",
        "293": "  }\n",
        "294": "\n",
        "295": "  public void testPermutationSetContains() {\n",
        "296": "    List<Integer> list = newArrayList(3, 2, 1);\n",
        "297": "    Collection<List<Integer>> permutationSet =\n",
        "298": "        Collections2.permutations(list);\n",
        "299": "\n",
        "300": "    assertTrue(permutationSet.contains(newArrayList(1, 2, 3)));\n",
        "301": "    assertTrue(permutationSet.contains(newArrayList(2, 3, 1)));\n",
        "302": "    assertFalse(permutationSet.contains(newArrayList(1, 2)));\n",
        "303": "    assertFalse(permutationSet.contains(newArrayList(1, 1, 2, 3)));\n",
        "304": "    assertFalse(permutationSet.contains(newArrayList(1, 2, 3, 4)));\n",
        "305": "    assertFalse(permutationSet.contains(null));\n",
        "306": "  }\n",
        "307": "\n",
        "308": "  private <T> void assertNextPermutation(List<T> expectedPermutation,\n",
        "309": "      Iterator<List<T>> permutations) {\n",
        "310": "    assertTrue(\"Expected another permutation, but there was none.\",\n",
        "311": "        permutations.hasNext());\n",
        "312": "    assertEquals(expectedPermutation, permutations.next());\n",
        "313": "  }\n",
        "314": "\n",
        "315": "  private <T> void assertNoMorePermutations(\n",
        "316": "      Iterator<List<T>> permutations) {\n",
        "317": "    assertFalse(\"Expected no more permutations, but there was one.\",\n",
        "318": "        permutations.hasNext());\n",
        "319": "    try {\n",
        "320": "      permutations.next();\n",
        "321": "      fail(\"Expected NoSuchElementException.\");\n",
        "322": "    } catch (NoSuchElementException expected) {}\n",
        "323": "  }\n",
        "324": "\n",
        "325": "  private <T> void assertPermutationsCount(int expected,\n",
        "326": "      Collection<List<T>> permutationSet) {\n",
        "327": "    assertEquals(expected, permutationSet.size());\n",
        "328": "    Iterator<List<T>> permutations = permutationSet.iterator();\n",
        "329": "    for (int i = 0; i < expected; i++) {\n",
        "330": "      assertTrue(permutations.hasNext());\n",
        "331": "      permutations.next();\n",
        "332": "    }\n",
        "333": "    assertNoMorePermutations(permutations);\n",
        "334": "  }\n",
        "335": "\n",
        "336": "  public void testToStringImplWithNullEntries() throws Exception {\n",
        "337": "    List<String> list = Lists.newArrayList();\n",
        "338": "    list.add(\"foo\");\n",
        "339": "    list.add(null);\n",
        "340": "\n",
        "341": "    assertEquals(list.toString(), Collections2.toStringImpl(list));\n",
        "342": "  }\n",
        "343": "\n",
        "344": "}\n",
        "345": "\n"
    }
}