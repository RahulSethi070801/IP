{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2009 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.base.Objects;\n",
        "23": "import com.google.common.testing.EqualsTester;\n",
        "24": "\n",
        "25": "/**\n",
        "26": " * Tests {@link SingletonImmutableTable}.\n",
        "27": " *\n",
        "28": " * @author Gregory Kick\n",
        "29": " */\n",
        "30": "@GwtCompatible(emulated = true)\n",
        "31": "public class SingletonImmutableTableTest extends AbstractImmutableTableTest {\n",
        "32": "  private final ImmutableTable<Character, Integer, String> testTable =\n",
        "33": "      new SingletonImmutableTable<Character, Integer, String>('a', 1, \"blah\");\n",
        "34": "\n",
        "35": "  public void testHashCode() {\n",
        "36": "    assertEquals(Objects.hashCode('a', 1, \"blah\"), testTable.hashCode());\n",
        "37": "  }\n",
        "38": "\n",
        "39": "  public void testCellSet() {\n",
        "40": "    assertEquals(ImmutableSet.of(Tables.immutableCell('a', 1, \"blah\")), testTable.cellSet());\n",
        "41": "  }\n",
        "42": "\n",
        "43": "  public void testColumn() {\n",
        "44": "    assertEquals(ImmutableMap.of(), testTable.column(0));\n",
        "45": "    assertEquals(ImmutableMap.of('a', \"blah\"), testTable.column(1));\n",
        "46": "  }\n",
        "47": "\n",
        "48": "  public void testColumnKeySet() {\n",
        "49": "    assertEquals(ImmutableSet.of(1), testTable.columnKeySet());\n",
        "50": "  }\n",
        "51": "\n",
        "52": "  public void testColumnMap() {\n",
        "53": "    assertEquals(ImmutableMap.of(1, ImmutableMap.of('a', \"blah\")), testTable.columnMap());\n",
        "54": "  }\n",
        "55": "\n",
        "56": "  public void testRow() {\n",
        "57": "    assertEquals(ImmutableMap.of(), testTable.row('A'));\n",
        "58": "    assertEquals(ImmutableMap.of(1, \"blah\"), testTable.row('a'));\n",
        "59": "  }\n",
        "60": "\n",
        "61": "  public void testRowKeySet() {\n",
        "62": "    assertEquals(ImmutableSet.of('a'), testTable.rowKeySet());\n",
        "63": "  }\n",
        "64": "\n",
        "65": "  public void testRowMap() {\n",
        "66": "    assertEquals(ImmutableMap.of('a', ImmutableMap.of(1, \"blah\")),\n",
        "67": "        testTable.rowMap());\n",
        "68": "  }\n",
        "69": "\n",
        "70": "  public void testEqualsObject() {\n",
        "71": "    new EqualsTester()\n",
        "72": "        .addEqualityGroup(testTable, HashBasedTable.create(testTable))\n",
        "73": "        .addEqualityGroup(ImmutableTable.of(), HashBasedTable.create())\n",
        "74": "        .addEqualityGroup(HashBasedTable.create(ImmutableTable.of('A', 2, \"\")))\n",
        "75": "        .testEquals();\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  public void testToString() {\n",
        "79": "    assertEquals(\"{a={1=blah}}\", testTable.toString());\n",
        "80": "  }\n",
        "81": "\n",
        "82": "  public void testContains() {\n",
        "83": "    assertTrue(testTable.contains('a', 1));\n",
        "84": "    assertFalse(testTable.contains('a', 2));\n",
        "85": "    assertFalse(testTable.contains('A', 1));\n",
        "86": "    assertFalse(testTable.contains('A', 2));\n",
        "87": "  }\n",
        "88": "\n",
        "89": "  public void testContainsColumn() {\n",
        "90": "    assertTrue(testTable.containsColumn(1));\n",
        "91": "    assertFalse(testTable.containsColumn(2));\n",
        "92": "  }\n",
        "93": "\n",
        "94": "  public void testContainsRow() {\n",
        "95": "    assertTrue(testTable.containsRow('a'));\n",
        "96": "    assertFalse(testTable.containsRow('A'));\n",
        "97": "  }\n",
        "98": "\n",
        "99": "  public void testContainsValue() {\n",
        "100": "    assertTrue(testTable.containsValue(\"blah\"));\n",
        "101": "    assertFalse(testTable.containsValue(\"\"));\n",
        "102": "  }\n",
        "103": "\n",
        "104": "  public void testGet() {\n",
        "105": "    assertEquals(\"blah\", testTable.get('a', 1));\n",
        "106": "    assertNull(testTable.get('a', 2));\n",
        "107": "    assertNull(testTable.get('A', 1));\n",
        "108": "    assertNull(testTable.get('A', 2));\n",
        "109": "  }\n",
        "110": "\n",
        "111": "  public void testIsEmpty() {\n",
        "112": "    assertFalse(testTable.isEmpty());\n",
        "113": "  }\n",
        "114": "\n",
        "115": "  public void testSize() {\n",
        "116": "    assertEquals(1, testTable.size());\n",
        "117": "  }\n",
        "118": "\n",
        "119": "  public void testValues() {\n",
        "120": "    assertThat(testTable.values()).contains(\"blah\");\n",
        "121": "  }\n",
        "122": "\n",
        "123": "  @Override Iterable<ImmutableTable<Character, Integer, String>> getTestInstances() {\n",
        "124": "    return ImmutableSet.of(testTable);\n",
        "125": "  }\n",
        "126": "}\n",
        "127": "\n"
    }
}