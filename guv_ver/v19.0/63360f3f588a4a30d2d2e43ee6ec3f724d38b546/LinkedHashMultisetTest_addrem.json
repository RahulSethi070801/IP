{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "import static java.util.Arrays.asList;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import com.google.common.collect.testing.google.TestStringMultisetGenerator;\n",
        "24": "\n",
        "25": "import junit.framework.TestCase;\n",
        "26": "\n",
        "27": "import java.util.Arrays;\n",
        "28": "import java.util.List;\n",
        "29": "\n",
        "30": "/**\n",
        "31": " * Unit test for {@link LinkedHashMultiset}.\n",
        "32": " *\n",
        "33": " * @author Kevin Bourrillion\n",
        "34": " */\n",
        "35": "@GwtCompatible(emulated = true)\n",
        "36": "public class LinkedHashMultisetTest extends TestCase {\n",
        "37": "\n",
        "38": "  private static TestStringMultisetGenerator linkedHashMultisetGenerator() {\n",
        "39": "    return new TestStringMultisetGenerator() {\n",
        "40": "      @Override protected Multiset<String> create(String[] elements) {\n",
        "41": "        return LinkedHashMultiset.create(asList(elements));\n",
        "42": "      }\n",
        "43": "\n",
        "44": "      @Override\n",
        "45": "      public List<String> order(List<String> insertionOrder) {\n",
        "46": "        List<String> order = Lists.newArrayList();\n",
        "47": "        for (String s : insertionOrder) {\n",
        "48": "          int index = order.indexOf(s);\n",
        "49": "          if (index == -1) {\n",
        "50": "            order.add(s);\n",
        "51": "          } else {\n",
        "52": "            order.add(index, s);\n",
        "53": "          }\n",
        "54": "        }\n",
        "55": "        return order;\n",
        "56": "      }\n",
        "57": "    };\n",
        "58": "  }\n",
        "59": "\n",
        "60": "  public void testCreate() {\n",
        "61": "    Multiset<String> multiset = LinkedHashMultiset.create();\n",
        "62": "    multiset.add(\"foo\", 2);\n",
        "63": "    multiset.add(\"bar\");\n",
        "64": "    assertEquals(3, multiset.size());\n",
        "65": "    assertEquals(2, multiset.count(\"foo\"));\n",
        "66": "    assertEquals(\"[foo x 2, bar]\", multiset.toString());\n",
        "67": "  }\n",
        "68": "\n",
        "69": "  public void testCreateWithSize() {\n",
        "70": "    Multiset<String> multiset = LinkedHashMultiset.create(50);\n",
        "71": "    multiset.add(\"foo\", 2);\n",
        "72": "    multiset.add(\"bar\");\n",
        "73": "    assertEquals(3, multiset.size());\n",
        "74": "    assertEquals(2, multiset.count(\"foo\"));\n",
        "75": "    assertEquals(\"[foo x 2, bar]\", multiset.toString());\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  public void testCreateFromIterable() {\n",
        "79": "    Multiset<String> multiset\n",
        "80": "        = LinkedHashMultiset.create(Arrays.asList(\"foo\", \"bar\", \"foo\"));\n",
        "81": "    assertEquals(3, multiset.size());\n",
        "82": "    assertEquals(2, multiset.count(\"foo\"));\n",
        "83": "    assertEquals(\"[foo x 2, bar]\", multiset.toString());\n",
        "84": "  }\n",
        "85": "\n",
        "86": "  public void testToString() {\n",
        "87": "    Multiset<String> ms = LinkedHashMultiset.create();\n",
        "88": "    ms.add(\"a\", 3);\n",
        "89": "    ms.add(\"c\", 1);\n",
        "90": "    ms.add(\"b\", 2);\n",
        "91": "\n",
        "92": "    assertEquals(\"[a x 3, c, b x 2]\", ms.toString());\n",
        "93": "  }\n",
        "94": "\n",
        "95": "  public void testLosesPlaceInLine() throws Exception {\n",
        "96": "    Multiset<String> ms = LinkedHashMultiset.create();\n",
        "97": "    ms.add(\"a\");\n",
        "98": "    ms.add(\"b\", 2);\n",
        "99": "    ms.add(\"c\");\n",
        "100": "    assertThat(ms.elementSet()).containsExactly(\"a\", \"b\", \"c\").inOrder();\n",
        "101": "    ms.remove(\"b\");\n",
        "102": "    assertThat(ms.elementSet()).containsExactly(\"a\", \"b\", \"c\").inOrder();\n",
        "103": "    ms.add(\"b\");\n",
        "104": "    assertThat(ms.elementSet()).containsExactly(\"a\", \"b\", \"c\").inOrder();\n",
        "105": "    ms.remove(\"b\", 2);\n",
        "106": "    ms.add(\"b\");\n",
        "107": "    assertThat(ms.elementSet()).containsExactly(\"a\", \"c\", \"b\").inOrder();\n",
        "108": "  }\n",
        "109": "}\n",
        "110": "\n"
    }
}