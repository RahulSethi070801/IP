{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.testers;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.IteratorFeature.MODIFIABLE;\n",
        "20": "import static com.google.common.collect.testing.IteratorFeature.UNMODIFIABLE;\n",
        "21": "import static com.google.common.collect.testing.features.CollectionFeature.KNOWN_ORDER;\n",
        "22": "import static com.google.common.collect.testing.features.CollectionFeature.SUPPORTS_ITERATOR_REMOVE;\n",
        "23": "\n",
        "24": "import com.google.common.annotations.GwtCompatible;\n",
        "25": "import com.google.common.collect.testing.AbstractCollectionTester;\n",
        "26": "import com.google.common.collect.testing.Helpers;\n",
        "27": "import com.google.common.collect.testing.IteratorFeature;\n",
        "28": "import com.google.common.collect.testing.IteratorTester;\n",
        "29": "import com.google.common.collect.testing.features.CollectionFeature;\n",
        "30": "\n",
        "31": "import java.util.ArrayList;\n",
        "32": "import java.util.Arrays;\n",
        "33": "import java.util.Iterator;\n",
        "34": "import java.util.List;\n",
        "35": "import java.util.NoSuchElementException;\n",
        "36": "import java.util.Set;\n",
        "37": "\n",
        "38": "/**\n",
        "39": " * A generic JUnit test which tests {@code iterator} operations on a collection.\n",
        "40": " * Can't be invoked directly; please see\n",
        "41": " * {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.\n",
        "42": " *\n",
        "43": " * @author Chris Povirk\n",
        "44": " */\n",
        "45": "@GwtCompatible(emulated = true)\n",
        "46": "public class CollectionIteratorTester<E> extends AbstractCollectionTester<E> {\n",
        "47": "  public void testIterator() {\n",
        "48": "    List<E> iteratorElements = new ArrayList<E>();\n",
        "49": "    for (E element : collection) { // uses iterator()\n",
        "50": "      iteratorElements.add(element);\n",
        "51": "    }\n",
        "52": "    Helpers.assertEqualIgnoringOrder(\n",
        "53": "        Arrays.asList(createSamplesArray()), iteratorElements);\n",
        "54": "  }\n",
        "55": "\n",
        "56": "  @CollectionFeature.Require(KNOWN_ORDER)\n",
        "57": "  public void testIterationOrdering() {\n",
        "58": "    List<E> iteratorElements = new ArrayList<E>();\n",
        "59": "    for (E element : collection) { // uses iterator()\n",
        "60": "      iteratorElements.add(element);\n",
        "61": "    }\n",
        "62": "    List<E> expected = Helpers.copyToList(getOrderedElements());\n",
        "63": "    assertEquals(\"Different ordered iteration\", expected, iteratorElements);\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  // TODO: switch to DerivedIteratorTestSuiteBuilder\n",
        "67": "\n",
        "68": "  @CollectionFeature.Require({KNOWN_ORDER, SUPPORTS_ITERATOR_REMOVE})\n",
        "69": "  public void testIterator_knownOrderRemoveSupported() {\n",
        "70": "    runIteratorTest(MODIFIABLE, IteratorTester.KnownOrder.KNOWN_ORDER,\n",
        "71": "        getOrderedElements());\n",
        "72": "  }\n",
        "73": "\n",
        "74": "  @CollectionFeature.Require(value = KNOWN_ORDER, absent = SUPPORTS_ITERATOR_REMOVE)\n",
        "75": "  public void testIterator_knownOrderRemoveUnsupported() {\n",
        "76": "    runIteratorTest(UNMODIFIABLE, IteratorTester.KnownOrder.KNOWN_ORDER,\n",
        "77": "        getOrderedElements());\n",
        "78": "  }\n",
        "79": "\n",
        "80": "  @CollectionFeature.Require(absent = KNOWN_ORDER, value = SUPPORTS_ITERATOR_REMOVE)\n",
        "81": "  public void testIterator_unknownOrderRemoveSupported() {\n",
        "82": "    runIteratorTest(MODIFIABLE, IteratorTester.KnownOrder.UNKNOWN_ORDER,\n",
        "83": "        getSampleElements());\n",
        "84": "  }\n",
        "85": "\n",
        "86": "  @CollectionFeature.Require(absent = {KNOWN_ORDER, SUPPORTS_ITERATOR_REMOVE})\n",
        "87": "  public void testIterator_unknownOrderRemoveUnsupported() {\n",
        "88": "    runIteratorTest(UNMODIFIABLE, IteratorTester.KnownOrder.UNKNOWN_ORDER,\n",
        "89": "        getSampleElements());\n",
        "90": "  }\n",
        "91": "\n",
        "92": "  private void runIteratorTest(Set<IteratorFeature> features,\n",
        "93": "      IteratorTester.KnownOrder knownOrder, Iterable<E> elements) {\n",
        "94": "    new IteratorTester<E>(Platform.collectionIteratorTesterNumIterations(), features, elements,\n",
        "95": "        knownOrder) {\n",
        "96": "      @Override protected Iterator<E> newTargetIterator() {\n",
        "97": "        resetCollection();\n",
        "98": "        return collection.iterator();\n",
        "99": "      }\n",
        "100": "\n",
        "101": "      @Override protected void verify(List<E> elements) {\n",
        "102": "        expectContents(elements);\n",
        "103": "      }\n",
        "104": "    }.test();\n",
        "105": "  }\n",
        "106": "\n",
        "107": "  public void testIteratorNoSuchElementException() {\n",
        "108": "    Iterator<E> iterator = collection.iterator();\n",
        "109": "    while (iterator.hasNext()) {\n",
        "110": "      iterator.next();\n",
        "111": "    }\n",
        "112": "\n",
        "113": "    try {\n",
        "114": "      iterator.next();\n",
        "115": "      fail(\"iterator.next() should throw NoSuchElementException\");\n",
        "116": "    } catch (NoSuchElementException expected) {}\n",
        "117": "  }\n",
        "118": "}\n",
        "119": "\n"
    }
}