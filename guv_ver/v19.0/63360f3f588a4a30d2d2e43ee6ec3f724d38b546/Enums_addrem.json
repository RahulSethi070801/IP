{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2011 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.base;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.Beta;\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "\n",
        "24": "import java.io.Serializable;\n",
        "25": "\n",
        "26": "import javax.annotation.CheckReturnValue;\n",
        "27": "import javax.annotation.Nullable;\n",
        "28": "\n",
        "29": "/**\n",
        "30": " * Utility methods for working with {@link Enum} instances.\n",
        "31": " *\n",
        "32": " * @author Steve McKay\n",
        "33": " *\n",
        "34": " * @since 9.0\n",
        "35": " */\n",
        "36": "@CheckReturnValue\n",
        "37": "@GwtCompatible(emulated = true)\n",
        "38": "@Beta\n",
        "39": "public final class Enums {\n",
        "40": "\n",
        "41": "  private Enums() {}\n",
        "42": "\n",
        "43": "  /**\n",
        "44": "   * Returns an optional enum constant for the given type, using {@link Enum#valueOf}. If the\n",
        "45": "   * constant does not exist, {@link Optional#absent} is returned. A common use case is for parsing\n",
        "46": "   * user input or falling back to a default enum constant. For example,\n",
        "47": "   * {@code Enums.getIfPresent(Country.class, countryInput).or(Country.DEFAULT);}\n",
        "48": "   *\n",
        "49": "   * @since 12.0\n",
        "50": "   */\n",
        "51": "  public static <T extends Enum<T>> Optional<T> getIfPresent(Class<T> enumClass, String value) {\n",
        "52": "    checkNotNull(enumClass);\n",
        "53": "    checkNotNull(value);\n",
        "54": "    return Platform.getEnumIfPresent(enumClass, value);\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  /**\n",
        "58": "   * Returns a converter that converts between strings and {@code enum} values of type\n",
        "59": "   * {@code enumClass} using {@link Enum#valueOf(Class, String)} and {@link Enum#name()}. The\n",
        "60": "   * converter will throw an {@code IllegalArgumentException} if the argument is not the name of\n",
        "61": "   * any enum constant in the specified enum.\n",
        "62": "   *\n",
        "63": "   * @since 16.0\n",
        "64": "   */\n",
        "65": "  public static <T extends Enum<T>> Converter<String, T> stringConverter(final Class<T> enumClass) {\n",
        "66": "    return new StringConverter<T>(enumClass);\n",
        "67": "  }\n",
        "68": "\n",
        "69": "  private static final class StringConverter<T extends Enum<T>> extends Converter<String, T>\n",
        "70": "      implements Serializable {\n",
        "71": "\n",
        "72": "    private final Class<T> enumClass;\n",
        "73": "\n",
        "74": "    StringConverter(Class<T> enumClass) {\n",
        "75": "      this.enumClass = checkNotNull(enumClass);\n",
        "76": "    }\n",
        "77": "\n",
        "78": "    @Override\n",
        "79": "    protected T doForward(String value) {\n",
        "80": "      return Enum.valueOf(enumClass, value);\n",
        "81": "    }\n",
        "82": "\n",
        "83": "    @Override\n",
        "84": "    protected String doBackward(T enumValue) {\n",
        "85": "      return enumValue.name();\n",
        "86": "    }\n",
        "87": "\n",
        "88": "    @Override\n",
        "89": "    public boolean equals(@Nullable Object object) {\n",
        "90": "      if (object instanceof StringConverter) {\n",
        "91": "        StringConverter<?> that = (StringConverter<?>) object;\n",
        "92": "        return this.enumClass.equals(that.enumClass);\n",
        "93": "      }\n",
        "94": "      return false;\n",
        "95": "    }\n",
        "96": "\n",
        "97": "    @Override\n",
        "98": "    public int hashCode() {\n",
        "99": "      return enumClass.hashCode();\n",
        "100": "    }\n",
        "101": "\n",
        "102": "    @Override\n",
        "103": "    public String toString() {\n",
        "104": "      return \"Enums.stringConverter(\" + enumClass.getName() + \".class)\";\n",
        "105": "    }\n",
        "106": "\n",
        "107": "    private static final long serialVersionUID = 0L;\n",
        "108": "  }\n",
        "109": "}\n",
        "110": "\n"
    }
}