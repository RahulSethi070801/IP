{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.testers;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.IteratorFeature.MODIFIABLE;\n",
        "20": "import static com.google.common.collect.testing.IteratorFeature.UNMODIFIABLE;\n",
        "21": "import static com.google.common.collect.testing.features.CollectionFeature.SUPPORTS_REMOVE;\n",
        "22": "import static com.google.common.collect.testing.features.ListFeature.SUPPORTS_ADD_WITH_INDEX;\n",
        "23": "import static com.google.common.collect.testing.features.ListFeature.SUPPORTS_SET;\n",
        "24": "import static com.google.common.collect.testing.testers.Platform.listListIteratorTesterNumIterations;\n",
        "25": "import static java.util.Collections.singleton;\n",
        "26": "\n",
        "27": "import com.google.common.annotations.GwtCompatible;\n",
        "28": "import com.google.common.collect.testing.Helpers;\n",
        "29": "import com.google.common.collect.testing.IteratorFeature;\n",
        "30": "import com.google.common.collect.testing.ListIteratorTester;\n",
        "31": "import com.google.common.collect.testing.features.CollectionFeature;\n",
        "32": "import com.google.common.collect.testing.features.ListFeature;\n",
        "33": "\n",
        "34": "import java.util.List;\n",
        "35": "import java.util.ListIterator;\n",
        "36": "import java.util.Set;\n",
        "37": "\n",
        "38": "/**\n",
        "39": " * A generic JUnit test which tests {@code listIterator} operations on a list.\n",
        "40": " * Can't be invoked directly; please see\n",
        "41": " * {@link com.google.common.collect.testing.ListTestSuiteBuilder}.\n",
        "42": " *\n",
        "43": " * @author Chris Povirk\n",
        "44": " * @author Kevin Bourrillion\n",
        "45": " */\n",
        "46": "@GwtCompatible(emulated = true)\n",
        "47": "public class ListListIteratorTester<E> extends AbstractListTester<E> {\n",
        "48": "  // TODO: switch to DerivedIteratorTestSuiteBuilder\n",
        "49": "\n",
        "50": "  @CollectionFeature.Require(absent = SUPPORTS_REMOVE)\n",
        "51": "  @ListFeature.Require(absent = {SUPPORTS_SET, SUPPORTS_ADD_WITH_INDEX})\n",
        "52": "  public void testListIterator_unmodifiable() {\n",
        "53": "    runListIteratorTest(UNMODIFIABLE);\n",
        "54": "  }\n",
        "55": "\n",
        "56": "  /*\n",
        "57": "   * For now, we don't cope with testing this when the list supports only some\n",
        "58": "   * modification operations.\n",
        "59": "   */\n",
        "60": "  @CollectionFeature.Require(SUPPORTS_REMOVE)\n",
        "61": "  @ListFeature.Require({SUPPORTS_SET, SUPPORTS_ADD_WITH_INDEX})\n",
        "62": "  public void testListIterator_fullyModifiable() {\n",
        "63": "    runListIteratorTest(MODIFIABLE);\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  private void runListIteratorTest(Set<IteratorFeature> features) {\n",
        "67": "    new ListIteratorTester<E>(\n",
        "68": "        listListIteratorTesterNumIterations(), singleton(e4()), features,\n",
        "69": "        Helpers.copyToList(getOrderedElements()), 0) {\n",
        "70": "      {\n",
        "71": "        // TODO: don't set this universally\n",
        "72": "        stopTestingWhenAddThrowsException();\n",
        "73": "      }\n",
        "74": "\n",
        "75": "      @Override protected ListIterator<E> newTargetIterator() {\n",
        "76": "        resetCollection();\n",
        "77": "        return getList().listIterator();\n",
        "78": "      }\n",
        "79": "\n",
        "80": "      @Override protected void verify(List<E> elements) {\n",
        "81": "        expectContents(elements);\n",
        "82": "      }\n",
        "83": "    }.test();\n",
        "84": "  }\n",
        "85": "\n",
        "86": "  public void testListIterator_tooLow() {\n",
        "87": "    try {\n",
        "88": "      getList().listIterator(-1);\n",
        "89": "      fail();\n",
        "90": "    } catch (IndexOutOfBoundsException expected) {\n",
        "91": "    }\n",
        "92": "  }\n",
        "93": "\n",
        "94": "  public void testListIterator_tooHigh() {\n",
        "95": "    try {\n",
        "96": "      getList().listIterator(getNumElements() + 1);\n",
        "97": "      fail();\n",
        "98": "    } catch (IndexOutOfBoundsException expected) {\n",
        "99": "    }\n",
        "100": "  }\n",
        "101": "\n",
        "102": "  public void testListIterator_atSize() {\n",
        "103": "    getList().listIterator(getNumElements());\n",
        "104": "    // TODO: run the iterator through ListIteratorTester\n",
        "105": "  }\n",
        "106": "}\n",
        "107": "\n"
    }
}