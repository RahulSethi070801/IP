{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "\n",
        "21": "import junit.framework.TestCase;\n",
        "22": "\n",
        "23": "import java.util.HashSet;\n",
        "24": "import java.util.Set;\n",
        "25": "\n",
        "26": "/**\n",
        "27": " * Unit tests for {@link Sets#union}, {@link Sets#intersection} and\n",
        "28": " * {@link Sets#difference}.\n",
        "29": " *\n",
        "30": " * @author Kevin Bourrillion\n",
        "31": " */\n",
        "32": "@GwtCompatible(emulated = true)\n",
        "33": "public class SetOperationsTest extends TestCase {\n",
        "34": "\n",
        "35": "  public static class MoreTests extends TestCase {\n",
        "36": "    Set<String> friends;\n",
        "37": "    Set<String> enemies;\n",
        "38": "\n",
        "39": "    @Override public void setUp() {\n",
        "40": "      friends = Sets.newHashSet(\"Tom\", \"Joe\", \"Dave\");\n",
        "41": "      enemies = Sets.newHashSet(\"Dick\", \"Harry\", \"Tom\");\n",
        "42": "    }\n",
        "43": "\n",
        "44": "    public void testUnion() {\n",
        "45": "      Set<String> all = Sets.union(friends, enemies);\n",
        "46": "      assertEquals(5, all.size());\n",
        "47": "\n",
        "48": "      ImmutableSet<String> immut = Sets.union(friends, enemies).immutableCopy();\n",
        "49": "      HashSet<String> mut\n",
        "50": "          = Sets.union(friends, enemies).copyInto(new HashSet<String>());\n",
        "51": "\n",
        "52": "      enemies.add(\"Buck\");\n",
        "53": "      assertEquals(6, all.size());\n",
        "54": "      assertEquals(5, immut.size());\n",
        "55": "      assertEquals(5, mut.size());\n",
        "56": "    }\n",
        "57": "\n",
        "58": "    public void testIntersection() {\n",
        "59": "      Set<String> friends = Sets.newHashSet(\"Tom\", \"Joe\", \"Dave\");\n",
        "60": "      Set<String> enemies = Sets.newHashSet(\"Dick\", \"Harry\", \"Tom\");\n",
        "61": "\n",
        "62": "      Set<String> frenemies = Sets.intersection(friends, enemies);\n",
        "63": "      assertEquals(1, frenemies.size());\n",
        "64": "\n",
        "65": "      ImmutableSet<String> immut\n",
        "66": "          = Sets.intersection(friends, enemies).immutableCopy();\n",
        "67": "      HashSet<String> mut\n",
        "68": "          = Sets.intersection(friends, enemies).copyInto(new HashSet<String>());\n",
        "69": "\n",
        "70": "      enemies.add(\"Joe\");\n",
        "71": "      assertEquals(2, frenemies.size());\n",
        "72": "      assertEquals(1, immut.size());\n",
        "73": "      assertEquals(1, mut.size());\n",
        "74": "    }\n",
        "75": "\n",
        "76": "    public void testDifference() {\n",
        "77": "      Set<String> friends = Sets.newHashSet(\"Tom\", \"Joe\", \"Dave\");\n",
        "78": "      Set<String> enemies = Sets.newHashSet(\"Dick\", \"Harry\", \"Tom\");\n",
        "79": "\n",
        "80": "      Set<String> goodFriends = Sets.difference(friends, enemies);\n",
        "81": "      assertEquals(2, goodFriends.size());\n",
        "82": "\n",
        "83": "      ImmutableSet<String> immut\n",
        "84": "          = Sets.difference(friends, enemies).immutableCopy();\n",
        "85": "      HashSet<String> mut\n",
        "86": "          = Sets.difference(friends, enemies).copyInto(new HashSet<String>());\n",
        "87": "\n",
        "88": "      enemies.add(\"Dave\");\n",
        "89": "      assertEquals(1, goodFriends.size());\n",
        "90": "      assertEquals(2, immut.size());\n",
        "91": "      assertEquals(2, mut.size());\n",
        "92": "    }\n",
        "93": "\n",
        "94": "    public void testSymmetricDifference() {\n",
        "95": "      Set<String> friends = Sets.newHashSet(\"Tom\", \"Joe\", \"Dave\");\n",
        "96": "      Set<String> enemies = Sets.newHashSet(\"Dick\", \"Harry\", \"Tom\");\n",
        "97": "\n",
        "98": "      Set<String> symmetricDifferenceFriendsFirst = Sets.symmetricDifference(\n",
        "99": "          friends, enemies);\n",
        "100": "      assertEquals(4, symmetricDifferenceFriendsFirst.size());\n",
        "101": "\n",
        "102": "      Set<String> symmetricDifferenceEnemiesFirst = Sets.symmetricDifference(\n",
        "103": "          enemies, friends);\n",
        "104": "      assertEquals(4, symmetricDifferenceEnemiesFirst.size());\n",
        "105": "\n",
        "106": "      assertEquals(symmetricDifferenceFriendsFirst,\n",
        "107": "          symmetricDifferenceEnemiesFirst);\n",
        "108": "\n",
        "109": "      ImmutableSet<String> immut\n",
        "110": "          = Sets.symmetricDifference(friends, enemies).immutableCopy();\n",
        "111": "      HashSet<String> mut = Sets.symmetricDifference(friends, enemies)\n",
        "112": "          .copyInto(new HashSet<String>());\n",
        "113": "\n",
        "114": "      enemies.add(\"Dave\");\n",
        "115": "      assertEquals(3, symmetricDifferenceFriendsFirst.size());\n",
        "116": "      assertEquals(4, immut.size());\n",
        "117": "      assertEquals(4, mut.size());\n",
        "118": "\n",
        "119": "      immut = Sets.symmetricDifference(enemies, friends).immutableCopy();\n",
        "120": "      mut = Sets.symmetricDifference(enemies, friends).\n",
        "121": "          copyInto(new HashSet<String>());\n",
        "122": "      friends.add(\"Harry\");\n",
        "123": "      assertEquals(2, symmetricDifferenceEnemiesFirst.size());\n",
        "124": "      assertEquals(3, immut.size());\n",
        "125": "      assertEquals(3, mut.size());\n",
        "126": "    }\n",
        "127": "  }\n",
        "128": "}\n",
        "129": "\n"
    }
}