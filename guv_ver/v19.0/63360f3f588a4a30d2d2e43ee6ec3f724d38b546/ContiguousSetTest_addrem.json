{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2011 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.BoundType.CLOSED;\n",
        "20": "import static com.google.common.collect.BoundType.OPEN;\n",
        "21": "import static com.google.common.collect.DiscreteDomain.integers;\n",
        "22": "import static com.google.common.truth.Truth.assertThat;\n",
        "23": "\n",
        "24": "import com.google.common.annotations.GwtCompatible;\n",
        "25": "import com.google.common.testing.EqualsTester;\n",
        "26": "\n",
        "27": "import junit.framework.TestCase;\n",
        "28": "\n",
        "29": "import java.util.Set;\n",
        "30": "\n",
        "31": "/**\n",
        "32": " * @author Gregory Kick\n",
        "33": " */\n",
        "34": "@GwtCompatible(emulated = true)\n",
        "35": "public class ContiguousSetTest extends TestCase {\n",
        "36": "  private static DiscreteDomain<Integer> NOT_EQUAL_TO_INTEGERS = new DiscreteDomain<Integer>() {\n",
        "37": "    @Override public Integer next(Integer value) {\n",
        "38": "      return integers().next(value);\n",
        "39": "    }\n",
        "40": "\n",
        "41": "    @Override public Integer previous(Integer value) {\n",
        "42": "      return integers().previous(value);\n",
        "43": "    }\n",
        "44": "\n",
        "45": "    @Override public long distance(Integer start, Integer end) {\n",
        "46": "      return integers().distance(start, end);\n",
        "47": "    }\n",
        "48": "\n",
        "49": "    @Override public Integer minValue() {\n",
        "50": "      return integers().minValue();\n",
        "51": "    }\n",
        "52": "\n",
        "53": "    @Override public Integer maxValue() {\n",
        "54": "      return integers().maxValue();\n",
        "55": "    }\n",
        "56": "  };\n",
        "57": "\n",
        "58": "  public void testEquals() {\n",
        "59": "    new EqualsTester()\n",
        "60": "        .addEqualityGroup(\n",
        "61": "            ContiguousSet.create(Range.closed(1, 3), integers()),\n",
        "62": "            ContiguousSet.create(Range.closedOpen(1, 4), integers()),\n",
        "63": "            ContiguousSet.create(Range.openClosed(0, 3), integers()),\n",
        "64": "            ContiguousSet.create(Range.open(0, 4), integers()),\n",
        "65": "            ContiguousSet.create(Range.closed(1, 3), NOT_EQUAL_TO_INTEGERS),\n",
        "66": "            ContiguousSet.create(Range.closedOpen(1, 4), NOT_EQUAL_TO_INTEGERS),\n",
        "67": "            ContiguousSet.create(Range.openClosed(0, 3), NOT_EQUAL_TO_INTEGERS),\n",
        "68": "            ContiguousSet.create(Range.open(0, 4), NOT_EQUAL_TO_INTEGERS),\n",
        "69": "            ImmutableSortedSet.of(1, 2, 3))\n",
        "70": "        .addEqualityGroup(\n",
        "71": "            ContiguousSet.create(Range.closedOpen(1, 1), integers()),\n",
        "72": "            ImmutableSortedSet.of(),\n",
        "73": "            ImmutableSet.of())\n",
        "74": "        .testEquals();\n",
        "75": "    // not testing hashCode for these because it takes forever to compute\n",
        "76": "    assertEquals(\n",
        "77": "        ContiguousSet.create(Range.closed(Integer.MIN_VALUE, Integer.MAX_VALUE), integers()),\n",
        "78": "        ContiguousSet.create(Range.<Integer>all(), integers()));\n",
        "79": "    assertEquals(\n",
        "80": "        ContiguousSet.create(Range.closed(Integer.MIN_VALUE, Integer.MAX_VALUE), integers()),\n",
        "81": "        ContiguousSet.create(Range.atLeast(Integer.MIN_VALUE), integers()));\n",
        "82": "    assertEquals(\n",
        "83": "        ContiguousSet.create(Range.closed(Integer.MIN_VALUE, Integer.MAX_VALUE), integers()),\n",
        "84": "        ContiguousSet.create(Range.atMost(Integer.MAX_VALUE), integers()));\n",
        "85": "  }\n",
        "86": "\n",
        "87": "  public void testCreate_noMin() {\n",
        "88": "    Range<Integer> range = Range.lessThan(0);\n",
        "89": "    try {\n",
        "90": "      ContiguousSet.create(range, RangeTest.UNBOUNDED_DOMAIN);\n",
        "91": "      fail();\n",
        "92": "    } catch (IllegalArgumentException expected) {}\n",
        "93": "  }\n",
        "94": "\n",
        "95": "  public void testCreate_noMax() {\n",
        "96": "    Range<Integer> range = Range.greaterThan(0);\n",
        "97": "    try {\n",
        "98": "      ContiguousSet.create(range, RangeTest.UNBOUNDED_DOMAIN);\n",
        "99": "      fail();\n",
        "100": "    } catch (IllegalArgumentException expected) {}\n",
        "101": "  }\n",
        "102": "\n",
        "103": "  public void testCreate_empty() {\n",
        "104": "    assertEquals(ImmutableSet.of(), ContiguousSet.create(Range.closedOpen(1, 1), integers()));\n",
        "105": "    assertEquals(ImmutableSet.of(), ContiguousSet.create(Range.openClosed(5, 5), integers()));\n",
        "106": "    assertEquals(ImmutableSet.of(),\n",
        "107": "        ContiguousSet.create(Range.lessThan(Integer.MIN_VALUE), integers()));\n",
        "108": "    assertEquals(ImmutableSet.of(),\n",
        "109": "        ContiguousSet.create(Range.greaterThan(Integer.MAX_VALUE), integers()));\n",
        "110": "  }\n",
        "111": "\n",
        "112": "  public void testHeadSet() {\n",
        "113": "    ImmutableSortedSet<Integer> set = ContiguousSet.create(Range.closed(1, 3), integers());\n",
        "114": "    assertThat(set.headSet(1)).isEmpty();\n",
        "115": "    assertThat(set.headSet(2)).contains(1);\n",
        "116": "    assertThat(set.headSet(3)).containsExactly(1, 2).inOrder();\n",
        "117": "    assertThat(set.headSet(4)).containsExactly(1, 2, 3).inOrder();\n",
        "118": "    assertThat(set.headSet(Integer.MAX_VALUE)).containsExactly(1, 2, 3).inOrder();\n",
        "119": "    assertThat(set.headSet(1, true)).contains(1);\n",
        "120": "    assertThat(set.headSet(2, true)).containsExactly(1, 2).inOrder();\n",
        "121": "    assertThat(set.headSet(3, true)).containsExactly(1, 2, 3).inOrder();\n",
        "122": "    assertThat(set.headSet(4, true)).containsExactly(1, 2, 3).inOrder();\n",
        "123": "    assertThat(set.headSet(Integer.MAX_VALUE, true)).containsExactly(1, 2, 3).inOrder();\n",
        "124": "  }\n",
        "125": "\n",
        "126": "  public void testHeadSet_tooSmall() {\n",
        "127": "    assertThat(ContiguousSet.create(Range.closed(1, 3), integers()).headSet(0)).isEmpty();\n",
        "128": "  }\n",
        "129": "\n",
        "130": "  public void testTailSet() {\n",
        "131": "    ImmutableSortedSet<Integer> set = ContiguousSet.create(Range.closed(1, 3), integers());\n",
        "132": "    assertThat(set.tailSet(Integer.MIN_VALUE)).containsExactly(1, 2, 3).inOrder();\n",
        "133": "    assertThat(set.tailSet(1)).containsExactly(1, 2, 3).inOrder();\n",
        "134": "    assertThat(set.tailSet(2)).containsExactly(2, 3).inOrder();\n",
        "135": "    assertThat(set.tailSet(3)).contains(3);\n",
        "136": "    assertThat(set.tailSet(Integer.MIN_VALUE, false)).containsExactly(1, 2, 3).inOrder();\n",
        "137": "    assertThat(set.tailSet(1, false)).containsExactly(2, 3).inOrder();\n",
        "138": "    assertThat(set.tailSet(2, false)).contains(3);\n",
        "139": "    assertThat(set.tailSet(3, false)).isEmpty();\n",
        "140": "  }\n",
        "141": "\n",
        "142": "  public void testTailSet_tooLarge() {\n",
        "143": "    assertThat(ContiguousSet.create(Range.closed(1, 3), integers()).tailSet(4)).isEmpty();\n",
        "144": "  }\n",
        "145": "\n",
        "146": "  public void testSubSet() {\n",
        "147": "    ImmutableSortedSet<Integer> set = ContiguousSet.create(Range.closed(1, 3), integers());\n",
        "148": "    assertThat(set.subSet(1, 4)).containsExactly(1, 2, 3).inOrder();\n",
        "149": "    assertThat(set.subSet(2, 4)).containsExactly(2, 3).inOrder();\n",
        "150": "    assertThat(set.subSet(3, 4)).contains(3);\n",
        "151": "    assertThat(set.subSet(3, 3)).isEmpty();\n",
        "152": "    assertThat(set.subSet(2, 3)).contains(2);\n",
        "153": "    assertThat(set.subSet(1, 3)).containsExactly(1, 2).inOrder();\n",
        "154": "    assertThat(set.subSet(1, 2)).contains(1);\n",
        "155": "    assertThat(set.subSet(2, 2)).isEmpty();\n",
        "156": "    assertThat(set.subSet(Integer.MIN_VALUE, Integer.MAX_VALUE)).containsExactly(1, 2, 3).inOrder();\n",
        "157": "    assertThat(set.subSet(1, true, 3, true)).containsExactly(1, 2, 3).inOrder();\n",
        "158": "    assertThat(set.subSet(1, false, 3, true)).containsExactly(2, 3).inOrder();\n",
        "159": "    assertThat(set.subSet(1, true, 3, false)).containsExactly(1, 2).inOrder();\n",
        "160": "    assertThat(set.subSet(1, false, 3, false)).contains(2);\n",
        "161": "  }\n",
        "162": "\n",
        "163": "  public void testSubSet_outOfOrder() {\n",
        "164": "    ImmutableSortedSet<Integer> set = ContiguousSet.create(Range.closed(1, 3), integers());\n",
        "165": "    try {\n",
        "166": "      set.subSet(3, 2);\n",
        "167": "      fail();\n",
        "168": "    } catch (IllegalArgumentException expected) {}\n",
        "169": "  }\n",
        "170": "\n",
        "171": "  public void testSubSet_tooLarge() {\n",
        "172": "    assertThat(ContiguousSet.create(Range.closed(1, 3), integers()).subSet(4, 6)).isEmpty();\n",
        "173": "  }\n",
        "174": "\n",
        "175": "  public void testSubSet_tooSmall() {\n",
        "176": "    assertThat(ContiguousSet.create(Range.closed(1, 3), integers()).subSet(-1, 0)).isEmpty();\n",
        "177": "  }\n",
        "178": "\n",
        "179": "  public void testFirst() {\n",
        "180": "    assertEquals(1, ContiguousSet.create(Range.closed(1, 3), integers()).first().intValue());\n",
        "181": "    assertEquals(1, ContiguousSet.create(Range.open(0, 4), integers()).first().intValue());\n",
        "182": "    assertEquals(Integer.MIN_VALUE,\n",
        "183": "        ContiguousSet.create(Range.<Integer>all(), integers()).first().intValue());\n",
        "184": "  }\n",
        "185": "\n",
        "186": "  public void testLast() {\n",
        "187": "    assertEquals(3, ContiguousSet.create(Range.closed(1, 3), integers()).last().intValue());\n",
        "188": "    assertEquals(3, ContiguousSet.create(Range.open(0, 4), integers()).last().intValue());\n",
        "189": "    assertEquals(Integer.MAX_VALUE,\n",
        "190": "        ContiguousSet.create(Range.<Integer>all(), integers()).last().intValue());\n",
        "191": "  }\n",
        "192": "\n",
        "193": "  public void testContains() {\n",
        "194": "    ImmutableSortedSet<Integer> set = ContiguousSet.create(Range.closed(1, 3), integers());\n",
        "195": "    assertFalse(set.contains(0));\n",
        "196": "    assertTrue(set.contains(1));\n",
        "197": "    assertTrue(set.contains(2));\n",
        "198": "    assertTrue(set.contains(3));\n",
        "199": "    assertFalse(set.contains(4));\n",
        "200": "    set = ContiguousSet.create(Range.open(0, 4), integers());\n",
        "201": "    assertFalse(set.contains(0));\n",
        "202": "    assertTrue(set.contains(1));\n",
        "203": "    assertTrue(set.contains(2));\n",
        "204": "    assertTrue(set.contains(3));\n",
        "205": "    assertFalse(set.contains(4));\n",
        "206": "    assertFalse(set.contains(\"blah\"));\n",
        "207": "  }\n",
        "208": "\n",
        "209": "  public void testContainsAll() {\n",
        "210": "    ImmutableSortedSet<Integer> set = ContiguousSet.create(Range.closed(1, 3), integers());\n",
        "211": "    for (Set<Integer> subset : Sets.powerSet(ImmutableSet.of(1, 2, 3))) {\n",
        "212": "      assertTrue(set.containsAll(subset));\n",
        "213": "    }\n",
        "214": "    for (Set<Integer> subset : Sets.powerSet(ImmutableSet.of(1, 2, 3))) {\n",
        "215": "      assertFalse(set.containsAll(Sets.union(subset, ImmutableSet.of(9))));\n",
        "216": "    }\n",
        "217": "    assertFalse(set.containsAll(ImmutableSet.of(\"blah\")));\n",
        "218": "  }\n",
        "219": "\n",
        "220": "  public void testRange() {\n",
        "221": "    assertEquals(Range.closed(1, 3),\n",
        "222": "        ContiguousSet.create(Range.closed(1, 3), integers()).range());\n",
        "223": "    assertEquals(Range.closed(1, 3),\n",
        "224": "        ContiguousSet.create(Range.closedOpen(1, 4), integers()).range());\n",
        "225": "    assertEquals(Range.closed(1, 3), ContiguousSet.create(Range.open(0, 4), integers()).range());\n",
        "226": "    assertEquals(Range.closed(1, 3),\n",
        "227": "        ContiguousSet.create(Range.openClosed(0, 3), integers()).range());\n",
        "228": "\n",
        "229": "    assertEquals(Range.openClosed(0, 3),\n",
        "230": "        ContiguousSet.create(Range.closed(1, 3), integers()).range(OPEN, CLOSED));\n",
        "231": "    assertEquals(Range.openClosed(0, 3),\n",
        "232": "        ContiguousSet.create(Range.closedOpen(1, 4), integers()).range(OPEN, CLOSED));\n",
        "233": "    assertEquals(Range.openClosed(0, 3),\n",
        "234": "        ContiguousSet.create(Range.open(0, 4), integers()).range(OPEN, CLOSED));\n",
        "235": "    assertEquals(Range.openClosed(0, 3),\n",
        "236": "        ContiguousSet.create(Range.openClosed(0, 3), integers()).range(OPEN, CLOSED));\n",
        "237": "\n",
        "238": "    assertEquals(Range.open(0, 4),\n",
        "239": "        ContiguousSet.create(Range.closed(1, 3), integers()).range(OPEN, OPEN));\n",
        "240": "    assertEquals(Range.open(0, 4),\n",
        "241": "        ContiguousSet.create(Range.closedOpen(1, 4), integers()).range(OPEN, OPEN));\n",
        "242": "    assertEquals(Range.open(0, 4),\n",
        "243": "        ContiguousSet.create(Range.open(0, 4), integers()).range(OPEN, OPEN));\n",
        "244": "    assertEquals(Range.open(0, 4),\n",
        "245": "        ContiguousSet.create(Range.openClosed(0, 3), integers()).range(OPEN, OPEN));\n",
        "246": "\n",
        "247": "    assertEquals(Range.closedOpen(1, 4),\n",
        "248": "        ContiguousSet.create(Range.closed(1, 3), integers()).range(CLOSED, OPEN));\n",
        "249": "    assertEquals(Range.closedOpen(1, 4),\n",
        "250": "        ContiguousSet.create(Range.closedOpen(1, 4), integers()).range(CLOSED, OPEN));\n",
        "251": "    assertEquals(Range.closedOpen(1, 4),\n",
        "252": "        ContiguousSet.create(Range.open(0, 4), integers()).range(CLOSED, OPEN));\n",
        "253": "    assertEquals(Range.closedOpen(1, 4),\n",
        "254": "        ContiguousSet.create(Range.openClosed(0, 3), integers()).range(CLOSED, OPEN));\n",
        "255": "  }\n",
        "256": "\n",
        "257": "  public void testRange_unboundedRange() {\n",
        "258": "    assertEquals(Range.closed(Integer.MIN_VALUE, Integer.MAX_VALUE),\n",
        "259": "        ContiguousSet.create(Range.<Integer>all(), integers()).range());\n",
        "260": "    assertEquals(Range.atLeast(Integer.MIN_VALUE),\n",
        "261": "        ContiguousSet.create(Range.<Integer>all(), integers()).range(CLOSED, OPEN));\n",
        "262": "    assertEquals(Range.all(),\n",
        "263": "        ContiguousSet.create(Range.<Integer>all(), integers()).range(OPEN, OPEN));\n",
        "264": "    assertEquals(Range.atMost(Integer.MAX_VALUE),\n",
        "265": "        ContiguousSet.create(Range.<Integer>all(), integers()).range(OPEN, CLOSED));\n",
        "266": "  }\n",
        "267": "\n",
        "268": "  public void testIntersection_empty() {\n",
        "269": "    ContiguousSet<Integer> set = ContiguousSet.create(Range.closed(1, 3), integers());\n",
        "270": "    ContiguousSet<Integer> emptySet = ContiguousSet.create(Range.closedOpen(2, 2), integers());\n",
        "271": "    assertEquals(ImmutableSet.of(), set.intersection(emptySet));\n",
        "272": "    assertEquals(ImmutableSet.of(), emptySet.intersection(set));\n",
        "273": "    assertEquals(ImmutableSet.of(),\n",
        "274": "        ContiguousSet.create(Range.closed(-5, -1), integers()).intersection(\n",
        "275": "            ContiguousSet.create(Range.open(3, 64), integers())));\n",
        "276": "  }\n",
        "277": "\n",
        "278": "  public void testIntersection() {\n",
        "279": "    ContiguousSet<Integer> set = ContiguousSet.create(Range.closed(1, 3), integers());\n",
        "280": "    assertEquals(ImmutableSet.of(1, 2, 3),\n",
        "281": "        ContiguousSet.create(Range.open(-1, 4), integers()).intersection(set));\n",
        "282": "    assertEquals(ImmutableSet.of(1, 2, 3),\n",
        "283": "        set.intersection(ContiguousSet.create(Range.open(-1, 4), integers())));\n",
        "284": "  }\n",
        "285": "}\n",
        "286": "\n"
    }
}