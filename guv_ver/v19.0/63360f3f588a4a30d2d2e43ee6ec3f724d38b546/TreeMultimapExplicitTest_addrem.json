{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "\n",
        "23": "import junit.framework.TestCase;\n",
        "24": "\n",
        "25": "import java.util.Arrays;\n",
        "26": "import java.util.Collection;\n",
        "27": "import java.util.Comparator;\n",
        "28": "import java.util.Iterator;\n",
        "29": "import java.util.Map;\n",
        "30": "import java.util.SortedSet;\n",
        "31": "\n",
        "32": "/**\n",
        "33": " * Unit tests for {@code TreeMultimap} with explicit comparators.\n",
        "34": " *\n",
        "35": " * @author Jared Levy\n",
        "36": " */\n",
        "37": "@GwtCompatible(emulated = true)\n",
        "38": "public class TreeMultimapExplicitTest extends TestCase {\n",
        "39": "\n",
        "40": "  /**\n",
        "41": "   * Compare strings lengths, and if the lengths are equal compare the strings.\n",
        "42": "   * A {@code null} is less than any non-null value.\n",
        "43": "   */\n",
        "44": "  private enum StringLength implements Comparator<String> {\n",
        "45": "    COMPARATOR;\n",
        "46": "\n",
        "47": "    @Override\n",
        "48": "    public int compare(String first, String second) {\n",
        "49": "      if (first == second) {\n",
        "50": "        return 0;\n",
        "51": "      } else if (first == null) {\n",
        "52": "        return -1;\n",
        "53": "      } else if (second == null) {\n",
        "54": "        return 1;\n",
        "55": "      } else if (first.length() != second.length()) {\n",
        "56": "        return first.length() - second.length();\n",
        "57": "      } else {\n",
        "58": "        return first.compareTo(second);\n",
        "59": "      }\n",
        "60": "    }\n",
        "61": "  }\n",
        "62": "\n",
        "63": "  /**\n",
        "64": "   * Decreasing integer values. A {@code null} comes before any non-null value.\n",
        "65": "   */\n",
        "66": "  private static final Comparator<Integer> DECREASING_INT_COMPARATOR =\n",
        "67": "      Ordering.<Integer>natural().reverse().nullsFirst();\n",
        "68": "\n",
        "69": "  private SetMultimap<String, Integer> create() {\n",
        "70": "    return TreeMultimap.create(\n",
        "71": "        StringLength.COMPARATOR, DECREASING_INT_COMPARATOR);\n",
        "72": "  }\n",
        "73": "\n",
        "74": "  /**\n",
        "75": "   * Create and populate a {@code TreeMultimap} with explicit comparators.\n",
        "76": "   */\n",
        "77": "  private TreeMultimap<String, Integer> createPopulate() {\n",
        "78": "    TreeMultimap<String, Integer> multimap = TreeMultimap.create(\n",
        "79": "        StringLength.COMPARATOR, DECREASING_INT_COMPARATOR);\n",
        "80": "    multimap.put(\"google\", 2);\n",
        "81": "    multimap.put(\"google\", 6);\n",
        "82": "    multimap.put(null, 3);\n",
        "83": "    multimap.put(null, 1);\n",
        "84": "    multimap.put(null, 7);\n",
        "85": "    multimap.put(\"tree\", 0);\n",
        "86": "    multimap.put(\"tree\", null);\n",
        "87": "    return multimap;\n",
        "88": "  }\n",
        "89": "\n",
        "90": "  /**\n",
        "91": "   * Test that a TreeMultimap created from another uses the natural ordering.\n",
        "92": "   */\n",
        "93": "  public void testMultimapCreateFromTreeMultimap() {\n",
        "94": "    TreeMultimap<String, Integer> tree = TreeMultimap.create(\n",
        "95": "        StringLength.COMPARATOR, DECREASING_INT_COMPARATOR);\n",
        "96": "    tree.put(\"google\", 2);\n",
        "97": "    tree.put(\"google\", 6);\n",
        "98": "    tree.put(\"tree\", 0);\n",
        "99": "    tree.put(\"tree\", 3);\n",
        "100": "    assertThat(tree.keySet()).containsExactly(\"tree\", \"google\").inOrder();\n",
        "101": "    assertThat(tree.get(\"google\")).containsExactly(6, 2).inOrder();\n",
        "102": "\n",
        "103": "    TreeMultimap<String, Integer> copy = TreeMultimap.create(tree);\n",
        "104": "    assertEquals(tree, copy);\n",
        "105": "    assertThat(copy.keySet()).containsExactly(\"google\", \"tree\").inOrder();\n",
        "106": "    assertThat(copy.get(\"google\")).containsExactly(2, 6).inOrder();\n",
        "107": "    assertEquals(Ordering.natural(), copy.keyComparator());\n",
        "108": "    assertEquals(Ordering.natural(), copy.valueComparator());\n",
        "109": "    assertEquals(Ordering.natural(), copy.get(\"google\").comparator());\n",
        "110": "  }\n",
        "111": "\n",
        "112": "  public void testToString() {\n",
        "113": "    Multimap<String, Integer> multimap = create();\n",
        "114": "    multimap.put(\"foo\", 3);\n",
        "115": "    multimap.put(\"bar\", 1);\n",
        "116": "    multimap.putAll(\"foo\", Arrays.asList(-1, 2, 4));\n",
        "117": "    multimap.putAll(\"bar\", Arrays.asList(2, 3));\n",
        "118": "    multimap.put(\"foo\", 1);\n",
        "119": "    assertEquals(\"{bar=[3, 2, 1], foo=[4, 3, 2, 1, -1]}\",\n",
        "120": "        multimap.toString());\n",
        "121": "  }\n",
        "122": "\n",
        "123": "  public void testGetComparator() {\n",
        "124": "    TreeMultimap<String, Integer> multimap = createPopulate();\n",
        "125": "    assertEquals(StringLength.COMPARATOR, multimap.keyComparator());\n",
        "126": "    assertEquals(DECREASING_INT_COMPARATOR, multimap.valueComparator());\n",
        "127": "  }\n",
        "128": "\n",
        "129": "  public void testOrderedGet() {\n",
        "130": "    TreeMultimap<String, Integer> multimap = createPopulate();\n",
        "131": "    assertThat(multimap.get(null)).containsExactly(7, 3, 1).inOrder();\n",
        "132": "    assertThat(multimap.get(\"google\")).containsExactly(6, 2).inOrder();\n",
        "133": "    assertThat(multimap.get(\"tree\")).containsExactly(null, 0).inOrder();\n",
        "134": "  }\n",
        "135": "\n",
        "136": "  public void testOrderedKeySet() {\n",
        "137": "    TreeMultimap<String, Integer> multimap = createPopulate();\n",
        "138": "    assertThat(multimap.keySet()).containsExactly(null, \"tree\", \"google\").inOrder();\n",
        "139": "  }\n",
        "140": "\n",
        "141": "  public void testOrderedAsMapEntries() {\n",
        "142": "    TreeMultimap<String, Integer> multimap = createPopulate();\n",
        "143": "    Iterator<Map.Entry<String, Collection<Integer>>> iterator =\n",
        "144": "        multimap.asMap().entrySet().iterator();\n",
        "145": "    Map.Entry<String, Collection<Integer>> entry = iterator.next();\n",
        "146": "    assertEquals(null, entry.getKey());\n",
        "147": "    assertThat(entry.getValue()).containsExactly(7, 3, 1);\n",
        "148": "    entry = iterator.next();\n",
        "149": "    assertEquals(\"tree\", entry.getKey());\n",
        "150": "    assertThat(entry.getValue()).containsExactly(null, 0);\n",
        "151": "    entry = iterator.next();\n",
        "152": "    assertEquals(\"google\", entry.getKey());\n",
        "153": "    assertThat(entry.getValue()).containsExactly(6, 2);\n",
        "154": "  }\n",
        "155": "\n",
        "156": "  public void testOrderedEntries() {\n",
        "157": "    TreeMultimap<String, Integer> multimap = createPopulate();\n",
        "158": "    assertThat(multimap.entries()).containsExactly(\n",
        "159": "        Maps.immutableEntry((String) null, 7),\n",
        "160": "        Maps.immutableEntry((String) null, 3),\n",
        "161": "        Maps.immutableEntry((String) null, 1),\n",
        "162": "        Maps.immutableEntry(\"tree\", (Integer) null),\n",
        "163": "        Maps.immutableEntry(\"tree\", 0),\n",
        "164": "        Maps.immutableEntry(\"google\", 6), \n",
        "165": "        Maps.immutableEntry(\"google\", 2)).inOrder();\n",
        "166": "  }\n",
        "167": "\n",
        "168": "  public void testOrderedValues() {\n",
        "169": "    TreeMultimap<String, Integer> multimap = createPopulate();\n",
        "170": "    assertThat(multimap.values()).containsExactly(7, 3, 1, null, 0, 6, 2).inOrder();\n",
        "171": "  }\n",
        "172": "\n",
        "173": "  public void testComparator() {\n",
        "174": "    TreeMultimap<String, Integer> multimap = createPopulate();\n",
        "175": "    assertEquals(DECREASING_INT_COMPARATOR, multimap.get(\"foo\").comparator());\n",
        "176": "    assertEquals(DECREASING_INT_COMPARATOR,\n",
        "177": "        multimap.get(\"missing\").comparator());\n",
        "178": "  }\n",
        "179": "\n",
        "180": "  public void testMultimapComparators() {\n",
        "181": "    Multimap<String, Integer> multimap = create();\n",
        "182": "    multimap.put(\"foo\", 3);\n",
        "183": "    multimap.put(\"bar\", 1);\n",
        "184": "    multimap.putAll(\"foo\", Arrays.asList(-1, 2, 4));\n",
        "185": "    multimap.putAll(\"bar\", Arrays.asList(2, 3));\n",
        "186": "    multimap.put(\"foo\", 1);\n",
        "187": "    TreeMultimap<String, Integer> copy =\n",
        "188": "        TreeMultimap.create(StringLength.COMPARATOR, DECREASING_INT_COMPARATOR);\n",
        "189": "    copy.putAll(multimap);\n",
        "190": "    assertEquals(multimap, copy);\n",
        "191": "    assertEquals(StringLength.COMPARATOR, copy.keyComparator());\n",
        "192": "    assertEquals(DECREASING_INT_COMPARATOR, copy.valueComparator());\n",
        "193": "  }\n",
        "194": "\n",
        "195": "  public void testSortedKeySet() {\n",
        "196": "    TreeMultimap<String, Integer> multimap = createPopulate();\n",
        "197": "    SortedSet<String> keySet = multimap.keySet();\n",
        "198": "\n",
        "199": "    assertEquals(null, keySet.first());\n",
        "200": "    assertEquals(\"google\", keySet.last());\n",
        "201": "    assertEquals(StringLength.COMPARATOR, keySet.comparator());\n",
        "202": "    assertEquals(Sets.newHashSet(null, \"tree\"), keySet.headSet(\"yahoo\"));\n",
        "203": "    assertEquals(Sets.newHashSet(\"google\"), keySet.tailSet(\"yahoo\"));\n",
        "204": "    assertEquals(Sets.newHashSet(\"tree\"), keySet.subSet(\"ask\", \"yahoo\"));\n",
        "205": "  }\n",
        "206": "}\n",
        "207": "\n"
    }
}