{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2010 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "6": " *\n",
        "7": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "8": " *\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "13": " */\n",
        "14": "\n",
        "15": "package com.google.common.collect;\n",
        "16": "\n",
        "17": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "18": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "19": "\n",
        "20": "import com.google.common.annotations.Beta;\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "\n",
        "23": "import java.util.NoSuchElementException;\n",
        "24": "\n",
        "25": "/**\n",
        "26": " * A sorted set of contiguous values in a given {@link DiscreteDomain}.\n",
        "27": " *\n",
        "28": " * <p><b>Warning:</b> Be extremely careful what you do with conceptually large instances (such as\n",
        "29": " * {@code ContiguousSet.create(Range.greaterThan(0), DiscreteDomain.integers()}). Certain\n",
        "30": " * operations on such a set can be performed efficiently, but others (such as {@link Set#hashCode}\n",
        "31": " * or {@link Collections#frequency}) can cause major performance problems.\n",
        "32": " *\n",
        "33": " * @author Gregory Kick\n",
        "34": " * @since 10.0\n",
        "35": " */\n",
        "36": "@Beta\n",
        "37": "@GwtCompatible(emulated = true)\n",
        "38": "@SuppressWarnings(\"rawtypes\") // allow ungenerified Comparable types\n",
        "39": "public abstract class ContiguousSet<C extends Comparable> extends ImmutableSortedSet<C> {\n",
        "40": "  /**\n",
        "41": "   * Returns a {@code ContiguousSet} containing the same values in the given domain\n",
        "42": "   * {@linkplain Range#contains contained} by the range.\n",
        "43": "   *\n",
        "44": "   * @throws IllegalArgumentException if neither range nor the domain has a lower bound, or if\n",
        "45": "   *     neither has an upper bound\n",
        "46": "   *\n",
        "47": "   * @since 13.0\n",
        "48": "   */\n",
        "49": "  public static <C extends Comparable> ContiguousSet<C> create(\n",
        "50": "      Range<C> range, DiscreteDomain<C> domain) {\n",
        "51": "    checkNotNull(range);\n",
        "52": "    checkNotNull(domain);\n",
        "53": "    Range<C> effectiveRange = range;\n",
        "54": "    try {\n",
        "55": "      if (!range.hasLowerBound()) {\n",
        "56": "        effectiveRange = effectiveRange.intersection(Range.atLeast(domain.minValue()));\n",
        "57": "      }\n",
        "58": "      if (!range.hasUpperBound()) {\n",
        "59": "        effectiveRange = effectiveRange.intersection(Range.atMost(domain.maxValue()));\n",
        "60": "      }\n",
        "61": "    } catch (NoSuchElementException e) {\n",
        "62": "      throw new IllegalArgumentException(e);\n",
        "63": "    }\n",
        "64": "\n",
        "65": "    // Per class spec, we are allowed to throw CCE if necessary\n",
        "66": "    boolean empty =\n",
        "67": "        effectiveRange.isEmpty()\n",
        "68": "            || Range.compareOrThrow(\n",
        "69": "                    range.lowerBound.leastValueAbove(domain),\n",
        "70": "                    range.upperBound.greatestValueBelow(domain))\n",
        "71": "                > 0;\n",
        "72": "\n",
        "73": "    return empty\n",
        "74": "        ? new EmptyContiguousSet<C>(domain)\n",
        "75": "        : new RegularContiguousSet<C>(effectiveRange, domain);\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  final DiscreteDomain<C> domain;\n",
        "79": "\n",
        "80": "  ContiguousSet(DiscreteDomain<C> domain) {\n",
        "81": "    super(Ordering.natural());\n",
        "82": "    this.domain = domain;\n",
        "83": "  }\n",
        "84": "\n",
        "85": "  @Override\n",
        "86": "  public ContiguousSet<C> headSet(C toElement) {\n",
        "87": "    return headSetImpl(checkNotNull(toElement), false);\n",
        "88": "  }\n",
        "89": "\n",
        "90": "  @Override\n",
        "91": "  public ContiguousSet<C> subSet(C fromElement, C toElement) {\n",
        "92": "    checkNotNull(fromElement);\n",
        "93": "    checkNotNull(toElement);\n",
        "94": "    checkArgument(comparator().compare(fromElement, toElement) <= 0);\n",
        "95": "    return subSetImpl(fromElement, true, toElement, false);\n",
        "96": "  }\n",
        "97": "\n",
        "98": "  @Override\n",
        "99": "  public ContiguousSet<C> tailSet(C fromElement) {\n",
        "100": "    return tailSetImpl(checkNotNull(fromElement), true);\n",
        "101": "  }\n",
        "102": "\n",
        "103": "  /*\n",
        "104": "   * These methods perform most headSet, subSet, and tailSet logic, besides parameter validation.\n",
        "105": "   */\n",
        "106": "  // TODO(kevinb): we can probably make these real @Overrides now\n",
        "107": "  /*@Override*/\n",
        "108": "  abstract ContiguousSet<C> headSetImpl(C toElement, boolean inclusive);\n",
        "109": "\n",
        "110": "  /*@Override*/\n",
        "111": "  abstract ContiguousSet<C> subSetImpl(\n",
        "112": "      C fromElement, boolean fromInclusive, C toElement, boolean toInclusive);\n",
        "113": "\n",
        "114": "  /*@Override*/\n",
        "115": "  abstract ContiguousSet<C> tailSetImpl(C fromElement, boolean inclusive);\n",
        "116": "\n",
        "117": "  /**\n",
        "118": "   * Returns the set of values that are contained in both this set and the other.\n",
        "119": "   *\n",
        "120": "   * <p>This method should always be used instead of\n",
        "121": "   * {@link Sets#intersection} for {@link ContiguousSet} instances.\n",
        "122": "   */\n",
        "123": "  public abstract ContiguousSet<C> intersection(ContiguousSet<C> other);\n",
        "124": "\n",
        "125": "  /**\n",
        "126": "   * Returns a range, closed on both ends, whose endpoints are the minimum and maximum values\n",
        "127": "   * contained in this set.  This is equivalent to {@code range(CLOSED, CLOSED)}.\n",
        "128": "   *\n",
        "129": "   * @throws NoSuchElementException if this set is empty\n",
        "130": "   */\n",
        "131": "  public abstract Range<C> range();\n",
        "132": "\n",
        "133": "  /**\n",
        "134": "   * Returns the minimal range with the given boundary types for which all values in this set are\n",
        "135": "   * {@linkplain Range#contains(Comparable) contained} within the range.\n",
        "136": "   *\n",
        "137": "   * <p>Note that this method will return ranges with unbounded endpoints if {@link BoundType#OPEN}\n",
        "138": "   * is requested for a domain minimum or maximum.  For example, if {@code set} was created from the\n",
        "139": "   * range {@code [1..Integer.MAX_VALUE]} then {@code set.range(CLOSED, OPEN)} must return\n",
        "140": "   * {@code [1..\u221e)}.\n",
        "141": "   *\n",
        "142": "   * @throws NoSuchElementException if this set is empty\n",
        "143": "   */\n",
        "144": "  public abstract Range<C> range(BoundType lowerBoundType, BoundType upperBoundType);\n",
        "145": "\n",
        "146": "  /** Returns a short-hand representation of the contents such as {@code \"[1..100]\"}. */\n",
        "147": "  @Override\n",
        "148": "  public String toString() {\n",
        "149": "    return range().toString();\n",
        "150": "  }\n",
        "151": "\n",
        "152": "  /**\n",
        "153": "   * Not supported. {@code ContiguousSet} instances are constructed with {@link #create}. This\n",
        "154": "   * method exists only to hide {@link ImmutableSet#builder} from consumers of {@code\n",
        "155": "   * ContiguousSet}.\n",
        "156": "   *\n",
        "157": "   * @throws UnsupportedOperationException always\n",
        "158": "   * @deprecated Use {@link #create}.\n",
        "159": "   */\n",
        "160": "  @Deprecated\n",
        "161": "  public static <E> ImmutableSortedSet.Builder<E> builder() {\n",
        "162": "    throw new UnsupportedOperationException();\n",
        "163": "  }\n",
        "164": "}\n",
        "165": "\n"
    }
}