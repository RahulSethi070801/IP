{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.CollectPreconditions.checkRemove;\n",
        "20": "import static com.google.common.collect.Iterators.advance;\n",
        "21": "import static com.google.common.collect.Iterators.get;\n",
        "22": "import static com.google.common.collect.Iterators.getLast;\n",
        "23": "import static com.google.common.collect.Lists.newArrayList;\n",
        "24": "import static com.google.common.truth.Truth.assertThat;\n",
        "25": "import static java.util.Arrays.asList;\n",
        "26": "\n",
        "27": "import com.google.common.annotations.GwtCompatible;\n",
        "28": "import com.google.common.base.Function;\n",
        "29": "import com.google.common.base.Predicate;\n",
        "30": "import com.google.common.base.Predicates;\n",
        "31": "\n",
        "32": "import junit.framework.AssertionFailedError;\n",
        "33": "import junit.framework.TestCase;\n",
        "34": "\n",
        "35": "import java.util.ArrayList;\n",
        "36": "import java.util.Collections;\n",
        "37": "import java.util.ConcurrentModificationException;\n",
        "38": "import java.util.Enumeration;\n",
        "39": "import java.util.Iterator;\n",
        "40": "import java.util.List;\n",
        "41": "import java.util.ListIterator;\n",
        "42": "import java.util.NoSuchElementException;\n",
        "43": "import java.util.RandomAccess;\n",
        "44": "import java.util.Set;\n",
        "45": "import java.util.Vector;\n",
        "46": "\n",
        "47": "/**\n",
        "48": " * Unit test for {@code Iterators}.\n",
        "49": " *\n",
        "50": " * @author Kevin Bourrillion\n",
        "51": " */\n",
        "52": "@GwtCompatible(emulated = true)\n",
        "53": "public class IteratorsTest extends TestCase {\n",
        "54": "\n",
        "55": "  public void testEmptyIterator() {\n",
        "56": "    Iterator<String> iterator = Iterators.emptyIterator();\n",
        "57": "    assertFalse(iterator.hasNext());\n",
        "58": "    try {\n",
        "59": "      iterator.next();\n",
        "60": "      fail(\"no exception thrown\");\n",
        "61": "    } catch (NoSuchElementException expected) {\n",
        "62": "    }\n",
        "63": "    try {\n",
        "64": "      iterator.remove();\n",
        "65": "      fail(\"no exception thrown\");\n",
        "66": "    } catch (UnsupportedOperationException expected) {\n",
        "67": "    }\n",
        "68": "  }\n",
        "69": "\n",
        "70": "  public void testEmptyListIterator() {\n",
        "71": "    ListIterator<String> iterator = Iterators.emptyListIterator();\n",
        "72": "    assertFalse(iterator.hasNext());\n",
        "73": "    assertFalse(iterator.hasPrevious());\n",
        "74": "    assertEquals(0, iterator.nextIndex());\n",
        "75": "    assertEquals(-1, iterator.previousIndex());\n",
        "76": "    try {\n",
        "77": "      iterator.next();\n",
        "78": "      fail(\"no exception thrown\");\n",
        "79": "    } catch (NoSuchElementException expected) {\n",
        "80": "    }\n",
        "81": "    try {\n",
        "82": "      iterator.previous();\n",
        "83": "      fail(\"no exception thrown\");\n",
        "84": "    } catch (NoSuchElementException expected) {\n",
        "85": "    }\n",
        "86": "    try {\n",
        "87": "      iterator.remove();\n",
        "88": "      fail(\"no exception thrown\");\n",
        "89": "    } catch (UnsupportedOperationException expected) {\n",
        "90": "    }\n",
        "91": "    try {\n",
        "92": "      iterator.set(\"a\");\n",
        "93": "      fail(\"no exception thrown\");\n",
        "94": "    } catch (UnsupportedOperationException expected) {\n",
        "95": "    }\n",
        "96": "    try {\n",
        "97": "      iterator.add(\"a\");\n",
        "98": "      fail(\"no exception thrown\");\n",
        "99": "    } catch (UnsupportedOperationException expected) {\n",
        "100": "    }\n",
        "101": "  }\n",
        "102": "\n",
        "103": "  public void testEmptyModifiableIterator() {\n",
        "104": "    Iterator<String> iterator = Iterators.emptyModifiableIterator();\n",
        "105": "    assertFalse(iterator.hasNext());\n",
        "106": "    try {\n",
        "107": "      iterator.next();\n",
        "108": "      fail(\"Expected NoSuchElementException\");\n",
        "109": "    } catch (NoSuchElementException expected) {\n",
        "110": "    }\n",
        "111": "    try {\n",
        "112": "      iterator.remove();\n",
        "113": "      fail(\"Expected IllegalStateException\");\n",
        "114": "    } catch (IllegalStateException expected) {\n",
        "115": "    }\n",
        "116": "  }\n",
        "117": "\n",
        "118": "  public void testSize0() {\n",
        "119": "    Iterator<String> iterator = Iterators.emptyIterator();\n",
        "120": "    assertEquals(0, Iterators.size(iterator));\n",
        "121": "  }\n",
        "122": "\n",
        "123": "  public void testSize1() {\n",
        "124": "    Iterator<Integer> iterator = Collections.singleton(0).iterator();\n",
        "125": "    assertEquals(1, Iterators.size(iterator));\n",
        "126": "  }\n",
        "127": "\n",
        "128": "  public void testSize_partiallyConsumed() {\n",
        "129": "    Iterator<Integer> iterator = asList(1, 2, 3, 4, 5).iterator();\n",
        "130": "    iterator.next();\n",
        "131": "    iterator.next();\n",
        "132": "    assertEquals(3, Iterators.size(iterator));\n",
        "133": "  }\n",
        "134": "\n",
        "135": "  public void test_contains_nonnull_yes() {\n",
        "136": "    Iterator<String> set = asList(\"a\", null, \"b\").iterator();\n",
        "137": "    assertTrue(Iterators.contains(set, \"b\"));\n",
        "138": "  }\n",
        "139": "\n",
        "140": "  public void test_contains_nonnull_no() {\n",
        "141": "    Iterator<String> set = asList(\"a\", \"b\").iterator();\n",
        "142": "    assertFalse(Iterators.contains(set, \"c\"));\n",
        "143": "  }\n",
        "144": "\n",
        "145": "  public void test_contains_null_yes() {\n",
        "146": "    Iterator<String> set = asList(\"a\", null, \"b\").iterator();\n",
        "147": "    assertTrue(Iterators.contains(set, null));\n",
        "148": "  }\n",
        "149": "\n",
        "150": "  public void test_contains_null_no() {\n",
        "151": "    Iterator<String> set = asList(\"a\", \"b\").iterator();\n",
        "152": "    assertFalse(Iterators.contains(set, null));\n",
        "153": "  }\n",
        "154": "\n",
        "155": "  public void testGetOnlyElement_noDefault_valid() {\n",
        "156": "    Iterator<String> iterator = Collections.singletonList(\"foo\").iterator();\n",
        "157": "    assertEquals(\"foo\", Iterators.getOnlyElement(iterator));\n",
        "158": "  }\n",
        "159": "\n",
        "160": "  public void testGetOnlyElement_noDefault_empty() {\n",
        "161": "    Iterator<String> iterator = Iterators.emptyIterator();\n",
        "162": "    try {\n",
        "163": "      Iterators.getOnlyElement(iterator);\n",
        "164": "      fail();\n",
        "165": "    } catch (NoSuchElementException expected) {\n",
        "166": "    }\n",
        "167": "  }\n",
        "168": "\n",
        "169": "  public void testGetOnlyElement_noDefault_moreThanOneLessThanFiveElements() {\n",
        "170": "    Iterator<String> iterator = asList(\"one\", \"two\").iterator();\n",
        "171": "    try {\n",
        "172": "      Iterators.getOnlyElement(iterator);\n",
        "173": "      fail();\n",
        "174": "    } catch (IllegalArgumentException expected) {\n",
        "175": "      assertThat(expected).hasMessage(\"expected one element but was: <one, two>\");\n",
        "176": "    }\n",
        "177": "  }\n",
        "178": "\n",
        "179": "  public void testGetOnlyElement_noDefault_fiveElements() {\n",
        "180": "    Iterator<String> iterator =\n",
        "181": "        asList(\"one\", \"two\", \"three\", \"four\", \"five\").iterator();\n",
        "182": "    try {\n",
        "183": "      Iterators.getOnlyElement(iterator);\n",
        "184": "      fail();\n",
        "185": "    } catch (IllegalArgumentException expected) {\n",
        "186": "      assertThat(expected)\n",
        "187": "          .hasMessage(\"expected one element but was: <one, two, three, four, five>\");\n",
        "188": "    }\n",
        "189": "  }\n",
        "190": "\n",
        "191": "  public void testGetOnlyElement_noDefault_moreThanFiveElements() {\n",
        "192": "    Iterator<String> iterator =\n",
        "193": "        asList(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\").iterator();\n",
        "194": "    try {\n",
        "195": "      Iterators.getOnlyElement(iterator);\n",
        "196": "      fail();\n",
        "197": "    } catch (IllegalArgumentException expected) {\n",
        "198": "      assertThat(expected)\n",
        "199": "          .hasMessage(\"expected one element but was: <one, two, three, four, five, ...>\");\n",
        "200": "    }\n",
        "201": "  }\n",
        "202": "\n",
        "203": "  public void testGetOnlyElement_withDefault_singleton() {\n",
        "204": "    Iterator<String> iterator = Collections.singletonList(\"foo\").iterator();\n",
        "205": "    assertEquals(\"foo\", Iterators.getOnlyElement(iterator, \"bar\"));\n",
        "206": "  }\n",
        "207": "\n",
        "208": "  public void testGetOnlyElement_withDefault_empty() {\n",
        "209": "    Iterator<String> iterator = Iterators.emptyIterator();\n",
        "210": "    assertEquals(\"bar\", Iterators.getOnlyElement(iterator, \"bar\"));\n",
        "211": "  }\n",
        "212": "\n",
        "213": "  public void testGetOnlyElement_withDefault_empty_null() {\n",
        "214": "    Iterator<String> iterator = Iterators.emptyIterator();\n",
        "215": "    assertNull(Iterators.getOnlyElement(iterator, null));\n",
        "216": "  }\n",
        "217": "\n",
        "218": "  public void testGetOnlyElement_withDefault_two() {\n",
        "219": "    Iterator<String> iterator = asList(\"foo\", \"bar\").iterator();\n",
        "220": "    try {\n",
        "221": "      Iterators.getOnlyElement(iterator, \"x\");\n",
        "222": "      fail();\n",
        "223": "    } catch (IllegalArgumentException expected) {\n",
        "224": "      assertThat(expected).hasMessage(\"expected one element but was: <foo, bar>\");\n",
        "225": "    }\n",
        "226": "  }\n",
        "227": "\n",
        "228": "  public void testFilterSimple() {\n",
        "229": "    Iterator<String> unfiltered = Lists.newArrayList(\"foo\", \"bar\").iterator();\n",
        "230": "    Iterator<String> filtered = Iterators.filter(unfiltered,\n",
        "231": "                                                 Predicates.equalTo(\"foo\"));\n",
        "232": "    List<String> expected = Collections.singletonList(\"foo\");\n",
        "233": "    List<String> actual = Lists.newArrayList(filtered);\n",
        "234": "    assertEquals(expected, actual);\n",
        "235": "  }\n",
        "236": "\n",
        "237": "  public void testFilterNoMatch() {\n",
        "238": "    Iterator<String> unfiltered = Lists.newArrayList(\"foo\", \"bar\").iterator();\n",
        "239": "    Iterator<String> filtered = Iterators.filter(unfiltered,\n",
        "240": "                                                 Predicates.alwaysFalse());\n",
        "241": "    List<String> expected = Collections.emptyList();\n",
        "242": "    List<String> actual = Lists.newArrayList(filtered);\n",
        "243": "    assertEquals(expected, actual);\n",
        "244": "  }\n",
        "245": "\n",
        "246": "  public void testFilterMatchAll() {\n",
        "247": "    Iterator<String> unfiltered = Lists.newArrayList(\"foo\", \"bar\").iterator();\n",
        "248": "    Iterator<String> filtered = Iterators.filter(unfiltered,\n",
        "249": "                                                 Predicates.alwaysTrue());\n",
        "250": "    List<String> expected = Lists.newArrayList(\"foo\", \"bar\");\n",
        "251": "    List<String> actual = Lists.newArrayList(filtered);\n",
        "252": "    assertEquals(expected, actual);\n",
        "253": "  }\n",
        "254": "\n",
        "255": "  public void testFilterNothing() {\n",
        "256": "    Iterator<String> unfiltered = Collections.<String>emptyList().iterator();\n",
        "257": "    Iterator<String> filtered = Iterators.filter(unfiltered,\n",
        "258": "        new Predicate<String>() {\n",
        "259": "          @Override\n",
        "260": "          public boolean apply(String s) {\n",
        "261": "            throw new AssertionFailedError(\"Should never be evaluated\");\n",
        "262": "          }\n",
        "263": "        });\n",
        "264": "\n",
        "265": "    List<String> expected = Collections.emptyList();\n",
        "266": "    List<String> actual = Lists.newArrayList(filtered);\n",
        "267": "    assertEquals(expected, actual);\n",
        "268": "  }\n",
        "269": "\n",
        "270": "  public void testAny() {\n",
        "271": "    List<String> list = Lists.newArrayList();\n",
        "272": "    Predicate<String> predicate = Predicates.equalTo(\"pants\");\n",
        "273": "\n",
        "274": "    assertFalse(Iterators.any(list.iterator(), predicate));\n",
        "275": "    list.add(\"cool\");\n",
        "276": "    assertFalse(Iterators.any(list.iterator(), predicate));\n",
        "277": "    list.add(\"pants\");\n",
        "278": "    assertTrue(Iterators.any(list.iterator(), predicate));\n",
        "279": "  }\n",
        "280": "\n",
        "281": "  public void testAll() {\n",
        "282": "    List<String> list = Lists.newArrayList();\n",
        "283": "    Predicate<String> predicate = Predicates.equalTo(\"cool\");\n",
        "284": "\n",
        "285": "    assertTrue(Iterators.all(list.iterator(), predicate));\n",
        "286": "    list.add(\"cool\");\n",
        "287": "    assertTrue(Iterators.all(list.iterator(), predicate));\n",
        "288": "    list.add(\"pants\");\n",
        "289": "    assertFalse(Iterators.all(list.iterator(), predicate));\n",
        "290": "  }\n",
        "291": "\n",
        "292": "  public void testFind_firstElement() {\n",
        "293": "    Iterable<String> list = Lists.newArrayList(\"cool\", \"pants\");\n",
        "294": "    Iterator<String> iterator = list.iterator();\n",
        "295": "    assertEquals(\"cool\", Iterators.find(iterator, Predicates.equalTo(\"cool\")));\n",
        "296": "    assertEquals(\"pants\", iterator.next());\n",
        "297": "  }\n",
        "298": "\n",
        "299": "  public void testFind_lastElement() {\n",
        "300": "    Iterable<String> list = Lists.newArrayList(\"cool\", \"pants\");\n",
        "301": "    Iterator<String> iterator = list.iterator();\n",
        "302": "    assertEquals(\"pants\", Iterators.find(iterator,\n",
        "303": "        Predicates.equalTo(\"pants\")));\n",
        "304": "    assertFalse(iterator.hasNext());\n",
        "305": "  }\n",
        "306": "\n",
        "307": "  public void testFind_notPresent() {\n",
        "308": "    Iterable<String> list = Lists.newArrayList(\"cool\", \"pants\");\n",
        "309": "    Iterator<String> iterator = list.iterator();\n",
        "310": "    try {\n",
        "311": "      Iterators.find(iterator, Predicates.alwaysFalse());\n",
        "312": "      fail();\n",
        "313": "    } catch (NoSuchElementException e) {\n",
        "314": "    }\n",
        "315": "    assertFalse(iterator.hasNext());\n",
        "316": "  }\n",
        "317": "\n",
        "318": "  public void testFind_matchAlways() {\n",
        "319": "    Iterable<String> list = Lists.newArrayList(\"cool\", \"pants\");\n",
        "320": "    Iterator<String> iterator = list.iterator();\n",
        "321": "    assertEquals(\"cool\", Iterators.find(iterator, Predicates.alwaysTrue()));\n",
        "322": "  }\n",
        "323": "\n",
        "324": "  public void testFind_withDefault_first() {\n",
        "325": "    Iterable<String> list = Lists.newArrayList(\"cool\", \"pants\");\n",
        "326": "    Iterator<String> iterator = list.iterator();\n",
        "327": "    assertEquals(\"cool\",\n",
        "328": "        Iterators.find(iterator, Predicates.equalTo(\"cool\"), \"woot\"));\n",
        "329": "    assertEquals(\"pants\", iterator.next());\n",
        "330": "  }\n",
        "331": "\n",
        "332": "  public void testFind_withDefault_last() {\n",
        "333": "    Iterable<String> list = Lists.newArrayList(\"cool\", \"pants\");\n",
        "334": "    Iterator<String> iterator = list.iterator();\n",
        "335": "    assertEquals(\"pants\",\n",
        "336": "        Iterators.find(iterator, Predicates.equalTo(\"pants\"), \"woot\"));\n",
        "337": "    assertFalse(iterator.hasNext());\n",
        "338": "  }\n",
        "339": "\n",
        "340": "  public void testFind_withDefault_notPresent() {\n",
        "341": "    Iterable<String> list = Lists.newArrayList(\"cool\", \"pants\");\n",
        "342": "    Iterator<String> iterator = list.iterator();\n",
        "343": "    assertEquals(\"woot\",\n",
        "344": "        Iterators.find(iterator, Predicates.alwaysFalse(), \"woot\"));\n",
        "345": "    assertFalse(iterator.hasNext());\n",
        "346": "  }\n",
        "347": "\n",
        "348": "  public void testFind_withDefault_notPresent_nullReturn() {\n",
        "349": "    Iterable<String> list = Lists.newArrayList(\"cool\", \"pants\");\n",
        "350": "    Iterator<String> iterator = list.iterator();\n",
        "351": "    assertNull(\n",
        "352": "        Iterators.find(iterator, Predicates.alwaysFalse(), null));\n",
        "353": "    assertFalse(iterator.hasNext());\n",
        "354": "  }\n",
        "355": "\n",
        "356": "  public void testFind_withDefault_matchAlways() {\n",
        "357": "    Iterable<String> list = Lists.newArrayList(\"cool\", \"pants\");\n",
        "358": "    Iterator<String> iterator = list.iterator();\n",
        "359": "    assertEquals(\"cool\",\n",
        "360": "        Iterators.find(iterator, Predicates.alwaysTrue(), \"woot\"));\n",
        "361": "    assertEquals(\"pants\", iterator.next());\n",
        "362": "  }\n",
        "363": "\n",
        "364": "  public void testTryFind_firstElement() {\n",
        "365": "    Iterable<String> list = Lists.newArrayList(\"cool\", \"pants\");\n",
        "366": "    Iterator<String> iterator = list.iterator();\n",
        "367": "    assertThat(Iterators.tryFind(iterator, Predicates.equalTo(\"cool\"))).hasValue(\"cool\");\n",
        "368": "  }\n",
        "369": "\n",
        "370": "  public void testTryFind_lastElement() {\n",
        "371": "    Iterable<String> list = Lists.newArrayList(\"cool\", \"pants\");\n",
        "372": "    Iterator<String> iterator = list.iterator();\n",
        "373": "    assertThat(Iterators.tryFind(iterator, Predicates.equalTo(\"pants\"))).hasValue(\"pants\");\n",
        "374": "  }\n",
        "375": "\n",
        "376": "  public void testTryFind_alwaysTrue() {\n",
        "377": "    Iterable<String> list = Lists.newArrayList(\"cool\", \"pants\");\n",
        "378": "    Iterator<String> iterator = list.iterator();\n",
        "379": "    assertThat(Iterators.tryFind(iterator, Predicates.alwaysTrue())).hasValue(\"cool\");\n",
        "380": "  }\n",
        "381": "\n",
        "382": "  public void testTryFind_alwaysFalse_orDefault() {\n",
        "383": "    Iterable<String> list = Lists.newArrayList(\"cool\", \"pants\");\n",
        "384": "    Iterator<String> iterator = list.iterator();\n",
        "385": "    assertEquals(\"woot\",\n",
        "386": "        Iterators.tryFind(iterator, Predicates.alwaysFalse()).or(\"woot\"));\n",
        "387": "    assertFalse(iterator.hasNext());\n",
        "388": "  }\n",
        "389": "\n",
        "390": "  public void testTryFind_alwaysFalse_isPresent() {\n",
        "391": "    Iterable<String> list = Lists.newArrayList(\"cool\", \"pants\");\n",
        "392": "    Iterator<String> iterator = list.iterator();\n",
        "393": "    assertThat(Iterators.tryFind(iterator, Predicates.alwaysFalse())).isAbsent();\n",
        "394": "    assertFalse(iterator.hasNext());\n",
        "395": "  }\n",
        "396": "\n",
        "397": "  public void testTransform() {\n",
        "398": "    Iterator<String> input = asList(\"1\", \"2\", \"3\").iterator();\n",
        "399": "    Iterator<Integer> result = Iterators.transform(input,\n",
        "400": "        new Function<String, Integer>() {\n",
        "401": "          @Override\n",
        "402": "          public Integer apply(String from) {\n",
        "403": "            return Integer.valueOf(from);\n",
        "404": "          }\n",
        "405": "        });\n",
        "406": "\n",
        "407": "    List<Integer> actual = Lists.newArrayList(result);\n",
        "408": "    List<Integer> expected = asList(1, 2, 3);\n",
        "409": "    assertEquals(expected, actual);\n",
        "410": "  }\n",
        "411": "\n",
        "412": "  public void testTransformRemove() {\n",
        "413": "    List<String> list = Lists.newArrayList(\"1\", \"2\", \"3\");\n",
        "414": "    Iterator<String> input = list.iterator();\n",
        "415": "    Iterator<Integer> iterator = Iterators.transform(input,\n",
        "416": "        new Function<String, Integer>() {\n",
        "417": "          @Override\n",
        "418": "          public Integer apply(String from) {\n",
        "419": "            return Integer.valueOf(from);\n",
        "420": "          }\n",
        "421": "        });\n",
        "422": "\n",
        "423": "    assertEquals(Integer.valueOf(1), iterator.next());\n",
        "424": "    assertEquals(Integer.valueOf(2), iterator.next());\n",
        "425": "    iterator.remove();\n",
        "426": "    assertEquals(asList(\"1\", \"3\"), list);\n",
        "427": "  }\n",
        "428": "\n",
        "429": "  public void testPoorlyBehavedTransform() {\n",
        "430": "    Iterator<String> input = asList(\"1\", null, \"3\").iterator();\n",
        "431": "    Iterator<Integer> result = Iterators.transform(input,\n",
        "432": "        new Function<String, Integer>() {\n",
        "433": "          @Override\n",
        "434": "          public Integer apply(String from) {\n",
        "435": "            return Integer.valueOf(from);\n",
        "436": "          }\n",
        "437": "        });\n",
        "438": "\n",
        "439": "    result.next();\n",
        "440": "    try {\n",
        "441": "      result.next();\n",
        "442": "      fail(\"Expected NFE\");\n",
        "443": "    } catch (NumberFormatException nfe) {\n",
        "444": "      // Expected to fail.\n",
        "445": "    }\n",
        "446": "  }\n",
        "447": "\n",
        "448": "  public void testNullFriendlyTransform() {\n",
        "449": "    Iterator<Integer> input = asList(1, 2, null, 3).iterator();\n",
        "450": "    Iterator<String> result = Iterators.transform(input,\n",
        "451": "        new Function<Integer, String>() {\n",
        "452": "          @Override\n",
        "453": "          public String apply(Integer from) {\n",
        "454": "            return String.valueOf(from);\n",
        "455": "          }\n",
        "456": "        });\n",
        "457": "\n",
        "458": "    List<String> actual = Lists.newArrayList(result);\n",
        "459": "    List<String> expected = asList(\"1\", \"2\", \"null\", \"3\");\n",
        "460": "    assertEquals(expected, actual);\n",
        "461": "  }\n",
        "462": "\n",
        "463": "  public void testCycleOfEmpty() {\n",
        "464": "    // \"<String>\" for javac 1.5.\n",
        "465": "    Iterator<String> cycle = Iterators.<String>cycle();\n",
        "466": "    assertFalse(cycle.hasNext());\n",
        "467": "  }\n",
        "468": "\n",
        "469": "  public void testCycleOfOne() {\n",
        "470": "    Iterator<String> cycle = Iterators.cycle(\"a\");\n",
        "471": "    for (int i = 0; i < 3; i++) {\n",
        "472": "      assertTrue(cycle.hasNext());\n",
        "473": "      assertEquals(\"a\", cycle.next());\n",
        "474": "    }\n",
        "475": "  }\n",
        "476": "\n",
        "477": "  public void testCycleOfOneWithRemove() {\n",
        "478": "    Iterable<String> iterable = Lists.newArrayList(\"a\");\n",
        "479": "    Iterator<String> cycle = Iterators.cycle(iterable);\n",
        "480": "    assertTrue(cycle.hasNext());\n",
        "481": "    assertEquals(\"a\", cycle.next());\n",
        "482": "    cycle.remove();\n",
        "483": "    assertEquals(Collections.emptyList(), iterable);\n",
        "484": "    assertFalse(cycle.hasNext());\n",
        "485": "  }\n",
        "486": "\n",
        "487": "  public void testCycleOfTwo() {\n",
        "488": "    Iterator<String> cycle = Iterators.cycle(\"a\", \"b\");\n",
        "489": "    for (int i = 0; i < 3; i++) {\n",
        "490": "      assertTrue(cycle.hasNext());\n",
        "491": "      assertEquals(\"a\", cycle.next());\n",
        "492": "      assertTrue(cycle.hasNext());\n",
        "493": "      assertEquals(\"b\", cycle.next());\n",
        "494": "    }\n",
        "495": "  }\n",
        "496": "\n",
        "497": "  public void testCycleOfTwoWithRemove() {\n",
        "498": "    Iterable<String> iterable = Lists.newArrayList(\"a\", \"b\");\n",
        "499": "    Iterator<String> cycle = Iterators.cycle(iterable);\n",
        "500": "    assertTrue(cycle.hasNext());\n",
        "501": "    assertEquals(\"a\", cycle.next());\n",
        "502": "    assertTrue(cycle.hasNext());\n",
        "503": "    assertEquals(\"b\", cycle.next());\n",
        "504": "    assertTrue(cycle.hasNext());\n",
        "505": "    assertEquals(\"a\", cycle.next());\n",
        "506": "    cycle.remove();\n",
        "507": "    assertEquals(Collections.singletonList(\"b\"), iterable);\n",
        "508": "    assertTrue(cycle.hasNext());\n",
        "509": "    assertEquals(\"b\", cycle.next());\n",
        "510": "    assertTrue(cycle.hasNext());\n",
        "511": "    assertEquals(\"b\", cycle.next());\n",
        "512": "    cycle.remove();\n",
        "513": "    assertEquals(Collections.emptyList(), iterable);\n",
        "514": "    assertFalse(cycle.hasNext());\n",
        "515": "  }\n",
        "516": "\n",
        "517": "  public void testCycleRemoveWithoutNext() {\n",
        "518": "    Iterator<String> cycle = Iterators.cycle(\"a\", \"b\");\n",
        "519": "    assertTrue(cycle.hasNext());\n",
        "520": "    try {\n",
        "521": "      cycle.remove();\n",
        "522": "      fail(\"no exception thrown\");\n",
        "523": "    } catch (IllegalStateException expected) {\n",
        "524": "    }\n",
        "525": "  }\n",
        "526": "\n",
        "527": "  public void testCycleRemoveSameElementTwice() {\n",
        "528": "    Iterator<String> cycle = Iterators.cycle(\"a\", \"b\");\n",
        "529": "    cycle.next();\n",
        "530": "    cycle.remove();\n",
        "531": "    try {\n",
        "532": "      cycle.remove();\n",
        "533": "      fail(\"no exception thrown\");\n",
        "534": "    } catch (IllegalStateException expected) {\n",
        "535": "    }\n",
        "536": "  }\n",
        "537": "\n",
        "538": "  public void testCycleWhenRemoveIsNotSupported() {\n",
        "539": "    Iterable<String> iterable = asList(\"a\", \"b\");\n",
        "540": "    Iterator<String> cycle = Iterators.cycle(iterable);\n",
        "541": "    cycle.next();\n",
        "542": "    try {\n",
        "543": "      cycle.remove();\n",
        "544": "      fail(\"no exception thrown\");\n",
        "545": "    } catch (UnsupportedOperationException expected) {\n",
        "546": "    }\n",
        "547": "  }\n",
        "548": "\n",
        "549": "  public void testCycleRemoveAfterHasNext() {\n",
        "550": "    Iterable<String> iterable = Lists.newArrayList(\"a\");\n",
        "551": "    Iterator<String> cycle = Iterators.cycle(iterable);\n",
        "552": "    assertTrue(cycle.hasNext());\n",
        "553": "    assertEquals(\"a\", cycle.next());\n",
        "554": "    assertTrue(cycle.hasNext());\n",
        "555": "    cycle.remove();\n",
        "556": "    assertEquals(Collections.emptyList(), iterable);\n",
        "557": "    assertFalse(cycle.hasNext());\n",
        "558": "  }\n",
        "559": "\n",
        "560": "  /** An Iterable whose Iterator is rigorous in checking for concurrent modification. */\n",
        "561": "  private static final class PickyIterable<E> implements Iterable<E> {\n",
        "562": "    final List<E> elements;\n",
        "563": "    int modCount = 0;\n",
        "564": "\n",
        "565": "    PickyIterable(E... elements) {\n",
        "566": "      this.elements = new ArrayList<E>(asList(elements));\n",
        "567": "    }\n",
        "568": "\n",
        "569": "    @Override\n",
        "570": "    public Iterator<E> iterator() {\n",
        "571": "      return new PickyIterator();\n",
        "572": "    }\n",
        "573": "\n",
        "574": "    final class PickyIterator implements Iterator<E> {\n",
        "575": "      int expectedModCount = modCount;\n",
        "576": "      int index = 0;\n",
        "577": "      boolean canRemove;\n",
        "578": "\n",
        "579": "      @Override\n",
        "580": "      public boolean hasNext() {\n",
        "581": "        checkConcurrentModification();\n",
        "582": "        return index < elements.size();\n",
        "583": "      }\n",
        "584": "\n",
        "585": "      @Override\n",
        "586": "      public E next() {\n",
        "587": "        checkConcurrentModification();\n",
        "588": "        if (!hasNext()) {\n",
        "589": "          throw new NoSuchElementException();\n",
        "590": "        }\n",
        "591": "        canRemove = true;\n",
        "592": "        return elements.get(index++);\n",
        "593": "      }\n",
        "594": "\n",
        "595": "      @Override\n",
        "596": "      public void remove() {\n",
        "597": "        checkConcurrentModification();\n",
        "598": "        checkRemove(canRemove);\n",
        "599": "        elements.remove(--index);\n",
        "600": "        expectedModCount = ++modCount;\n",
        "601": "        canRemove = false;\n",
        "602": "      }\n",
        "603": "\n",
        "604": "      void checkConcurrentModification() {\n",
        "605": "        if (expectedModCount != modCount) {\n",
        "606": "          throw new ConcurrentModificationException();\n",
        "607": "        }\n",
        "608": "      }\n",
        "609": "    }\n",
        "610": "  }\n",
        "611": "\n",
        "612": "  public void testCycleRemoveAfterHasNextExtraPicky() {\n",
        "613": "    PickyIterable<String> iterable = new PickyIterable(\"a\");\n",
        "614": "    Iterator<String> cycle = Iterators.cycle(iterable);\n",
        "615": "    assertTrue(cycle.hasNext());\n",
        "616": "    assertEquals(\"a\", cycle.next());\n",
        "617": "    assertTrue(cycle.hasNext());\n",
        "618": "    cycle.remove();\n",
        "619": "    assertTrue(iterable.elements.isEmpty());\n",
        "620": "    assertFalse(cycle.hasNext());\n",
        "621": "  }\n",
        "622": "\n",
        "623": "  public void testCycleNoSuchElementException() {\n",
        "624": "    Iterable<String> iterable = Lists.newArrayList(\"a\");\n",
        "625": "    Iterator<String> cycle = Iterators.cycle(iterable);\n",
        "626": "    assertTrue(cycle.hasNext());\n",
        "627": "    assertEquals(\"a\", cycle.next());\n",
        "628": "    cycle.remove();\n",
        "629": "    assertFalse(cycle.hasNext());\n",
        "630": "    try {\n",
        "631": "      cycle.next();\n",
        "632": "      fail();\n",
        "633": "    } catch (NoSuchElementException expected) {}\n",
        "634": "  }\n",
        "635": "\n",
        "636": "  /**\n",
        "637": "   * Illustrates the somewhat bizarre behavior when a null is passed in.\n",
        "638": "   */\n",
        "639": "  public void testConcatContainingNull() {\n",
        "640": "    @SuppressWarnings(\"unchecked\")\n",
        "641": "    Iterator<Iterator<Integer>> input\n",
        "642": "        = asList(iterateOver(1, 2), null, iterateOver(3)).iterator();\n",
        "643": "    Iterator<Integer> result = Iterators.concat(input);\n",
        "644": "    assertEquals(1, (int) result.next());\n",
        "645": "    assertEquals(2, (int) result.next());\n",
        "646": "    try {\n",
        "647": "      result.hasNext();\n",
        "648": "      fail(\"no exception thrown\");\n",
        "649": "    } catch (NullPointerException e) {\n",
        "650": "    }\n",
        "651": "    try {\n",
        "652": "      result.next();\n",
        "653": "      fail(\"no exception thrown\");\n",
        "654": "    } catch (NullPointerException e) {\n",
        "655": "    }\n",
        "656": "    // There is no way to get \"through\" to the 3.  Buh-bye\n",
        "657": "  }\n",
        "658": "\n",
        "659": "  @SuppressWarnings(\"unchecked\")\n",
        "660": "  public void testConcatVarArgsContainingNull() {\n",
        "661": "    try {\n",
        "662": "      Iterators.concat(iterateOver(1, 2), null, iterateOver(3), iterateOver(4),\n",
        "663": "          iterateOver(5));\n",
        "664": "      fail(\"no exception thrown\");\n",
        "665": "    } catch (NullPointerException e) {\n",
        "666": "    }\n",
        "667": "  }\n",
        "668": "\n",
        "669": "  public void testAddAllWithEmptyIterator() {\n",
        "670": "    List<String> alreadyThere = Lists.newArrayList(\"already\", \"there\");\n",
        "671": "\n",
        "672": "    boolean changed = Iterators.addAll(alreadyThere,\n",
        "673": "                                       Iterators.<String>emptyIterator());\n",
        "674": "    assertThat(alreadyThere).containsExactly(\"already\", \"there\").inOrder();\n",
        "675": "    assertFalse(changed);\n",
        "676": "  }\n",
        "677": "\n",
        "678": "  public void testAddAllToList() {\n",
        "679": "    List<String> alreadyThere = Lists.newArrayList(\"already\", \"there\");\n",
        "680": "    List<String> freshlyAdded = Lists.newArrayList(\"freshly\", \"added\");\n",
        "681": "\n",
        "682": "    boolean changed = Iterators.addAll(alreadyThere, freshlyAdded.iterator());\n",
        "683": "\n",
        "684": "    assertThat(alreadyThere).containsExactly(\"already\", \"there\", \"freshly\", \"added\");\n",
        "685": "    assertTrue(changed);\n",
        "686": "  }\n",
        "687": "\n",
        "688": "  public void testAddAllToSet() {\n",
        "689": "    Set<String> alreadyThere\n",
        "690": "        = Sets.newLinkedHashSet(asList(\"already\", \"there\"));\n",
        "691": "    List<String> oneMore = Lists.newArrayList(\"there\");\n",
        "692": "\n",
        "693": "    boolean changed = Iterators.addAll(alreadyThere, oneMore.iterator());\n",
        "694": "    assertThat(alreadyThere).containsExactly(\"already\", \"there\").inOrder();\n",
        "695": "    assertFalse(changed);\n",
        "696": "  }\n",
        "697": "\n",
        "698": "  private static Iterator<Integer> iterateOver(final Integer... values) {\n",
        "699": "    return newArrayList(values).iterator();\n",
        "700": "  }\n",
        "701": "\n",
        "702": "  public void testElementsEqual() {\n",
        "703": "    Iterable<?> a;\n",
        "704": "    Iterable<?> b;\n",
        "705": "\n",
        "706": "    // Base case.\n",
        "707": "    a = Lists.newArrayList();\n",
        "708": "    b = Collections.emptySet();\n",
        "709": "    assertTrue(Iterators.elementsEqual(a.iterator(), b.iterator()));\n",
        "710": "\n",
        "711": "    // A few elements.\n",
        "712": "    a = asList(4, 8, 15, 16, 23, 42);\n",
        "713": "    b = asList(4, 8, 15, 16, 23, 42);\n",
        "714": "    assertTrue(Iterators.elementsEqual(a.iterator(), b.iterator()));\n",
        "715": "\n",
        "716": "    // The same, but with nulls.\n",
        "717": "    a = asList(4, 8, null, 16, 23, 42);\n",
        "718": "    b = asList(4, 8, null, 16, 23, 42);\n",
        "719": "    assertTrue(Iterators.elementsEqual(a.iterator(), b.iterator()));\n",
        "720": "\n",
        "721": "    // Different Iterable types (still equal elements, though).\n",
        "722": "    a = ImmutableList.of(4, 8, 15, 16, 23, 42);\n",
        "723": "    b = asList(4, 8, 15, 16, 23, 42);\n",
        "724": "    assertTrue(Iterators.elementsEqual(a.iterator(), b.iterator()));\n",
        "725": "\n",
        "726": "    // An element differs.\n",
        "727": "    a = asList(4, 8, 15, 12, 23, 42);\n",
        "728": "    b = asList(4, 8, 15, 16, 23, 42);\n",
        "729": "    assertFalse(Iterators.elementsEqual(a.iterator(), b.iterator()));\n",
        "730": "\n",
        "731": "    // null versus non-null.\n",
        "732": "    a = asList(4, 8, 15, null, 23, 42);\n",
        "733": "    b = asList(4, 8, 15, 16, 23, 42);\n",
        "734": "    assertFalse(Iterators.elementsEqual(a.iterator(), b.iterator()));\n",
        "735": "    assertFalse(Iterators.elementsEqual(b.iterator(), a.iterator()));\n",
        "736": "\n",
        "737": "    // Different lengths.\n",
        "738": "    a = asList(4, 8, 15, 16, 23);\n",
        "739": "    b = asList(4, 8, 15, 16, 23, 42);\n",
        "740": "    assertFalse(Iterators.elementsEqual(a.iterator(), b.iterator()));\n",
        "741": "    assertFalse(Iterators.elementsEqual(b.iterator(), a.iterator()));\n",
        "742": "\n",
        "743": "    // Different lengths, one is empty.\n",
        "744": "    a = Collections.emptySet();\n",
        "745": "    b = asList(4, 8, 15, 16, 23, 42);\n",
        "746": "    assertFalse(Iterators.elementsEqual(a.iterator(), b.iterator()));\n",
        "747": "    assertFalse(Iterators.elementsEqual(b.iterator(), a.iterator()));\n",
        "748": "  }\n",
        "749": "\n",
        "750": "  public void testPartition_badSize() {\n",
        "751": "    Iterator<Integer> source = Iterators.singletonIterator(1);\n",
        "752": "    try {\n",
        "753": "      Iterators.partition(source, 0);\n",
        "754": "      fail();\n",
        "755": "    } catch (IllegalArgumentException expected) {\n",
        "756": "    }\n",
        "757": "  }\n",
        "758": "\n",
        "759": "  public void testPartition_empty() {\n",
        "760": "    Iterator<Integer> source = Iterators.emptyIterator();\n",
        "761": "    Iterator<List<Integer>> partitions = Iterators.partition(source, 1);\n",
        "762": "    assertFalse(partitions.hasNext());\n",
        "763": "  }\n",
        "764": "\n",
        "765": "  public void testPartition_singleton1() {\n",
        "766": "    Iterator<Integer> source = Iterators.singletonIterator(1);\n",
        "767": "    Iterator<List<Integer>> partitions = Iterators.partition(source, 1);\n",
        "768": "    assertTrue(partitions.hasNext());\n",
        "769": "    assertTrue(partitions.hasNext());\n",
        "770": "    assertEquals(ImmutableList.of(1), partitions.next());\n",
        "771": "    assertFalse(partitions.hasNext());\n",
        "772": "  }\n",
        "773": "\n",
        "774": "  public void testPartition_singleton2() {\n",
        "775": "    Iterator<Integer> source = Iterators.singletonIterator(1);\n",
        "776": "    Iterator<List<Integer>> partitions = Iterators.partition(source, 2);\n",
        "777": "    assertTrue(partitions.hasNext());\n",
        "778": "    assertTrue(partitions.hasNext());\n",
        "779": "    assertEquals(ImmutableList.of(1), partitions.next());\n",
        "780": "    assertFalse(partitions.hasNext());\n",
        "781": "  }\n",
        "782": "\n",
        "783": "  public void testPartition_view() {\n",
        "784": "    List<Integer> list = asList(1, 2);\n",
        "785": "    Iterator<List<Integer>> partitions\n",
        "786": "        = Iterators.partition(list.iterator(), 1);\n",
        "787": "\n",
        "788": "    // Changes before the partition is retrieved are reflected\n",
        "789": "    list.set(0, 3);\n",
        "790": "    List<Integer> first = partitions.next();\n",
        "791": "\n",
        "792": "    // Changes after are not\n",
        "793": "    list.set(0, 4);\n",
        "794": "\n",
        "795": "    assertEquals(ImmutableList.of(3), first);\n",
        "796": "  }\n",
        "797": "\n",
        "798": "  public void testPaddedPartition_badSize() {\n",
        "799": "    Iterator<Integer> source = Iterators.singletonIterator(1);\n",
        "800": "    try {\n",
        "801": "      Iterators.paddedPartition(source, 0);\n",
        "802": "      fail();\n",
        "803": "    } catch (IllegalArgumentException expected) {\n",
        "804": "    }\n",
        "805": "  }\n",
        "806": "\n",
        "807": "  public void testPaddedPartition_empty() {\n",
        "808": "    Iterator<Integer> source = Iterators.emptyIterator();\n",
        "809": "    Iterator<List<Integer>> partitions = Iterators.paddedPartition(source, 1);\n",
        "810": "    assertFalse(partitions.hasNext());\n",
        "811": "  }\n",
        "812": "\n",
        "813": "  public void testPaddedPartition_singleton1() {\n",
        "814": "    Iterator<Integer> source = Iterators.singletonIterator(1);\n",
        "815": "    Iterator<List<Integer>> partitions = Iterators.paddedPartition(source, 1);\n",
        "816": "    assertTrue(partitions.hasNext());\n",
        "817": "    assertTrue(partitions.hasNext());\n",
        "818": "    assertEquals(ImmutableList.of(1), partitions.next());\n",
        "819": "    assertFalse(partitions.hasNext());\n",
        "820": "  }\n",
        "821": "\n",
        "822": "  public void testPaddedPartition_singleton2() {\n",
        "823": "    Iterator<Integer> source = Iterators.singletonIterator(1);\n",
        "824": "    Iterator<List<Integer>> partitions = Iterators.paddedPartition(source, 2);\n",
        "825": "    assertTrue(partitions.hasNext());\n",
        "826": "    assertTrue(partitions.hasNext());\n",
        "827": "    assertEquals(asList(1, null), partitions.next());\n",
        "828": "    assertFalse(partitions.hasNext());\n",
        "829": "  }\n",
        "830": "\n",
        "831": "  public void testPaddedPartition_view() {\n",
        "832": "    List<Integer> list = asList(1, 2);\n",
        "833": "    Iterator<List<Integer>> partitions\n",
        "834": "        = Iterators.paddedPartition(list.iterator(), 1);\n",
        "835": "\n",
        "836": "    // Changes before the PaddedPartition is retrieved are reflected\n",
        "837": "    list.set(0, 3);\n",
        "838": "    List<Integer> first = partitions.next();\n",
        "839": "\n",
        "840": "    // Changes after are not\n",
        "841": "    list.set(0, 4);\n",
        "842": "\n",
        "843": "    assertEquals(ImmutableList.of(3), first);\n",
        "844": "  }\n",
        "845": "\n",
        "846": "  public void testPaddedPartitionRandomAccess() {\n",
        "847": "    Iterator<Integer> source = asList(1, 2, 3).iterator();\n",
        "848": "    Iterator<List<Integer>> partitions = Iterators.paddedPartition(source, 2);\n",
        "849": "    assertTrue(partitions.next() instanceof RandomAccess);\n",
        "850": "    assertTrue(partitions.next() instanceof RandomAccess);\n",
        "851": "  }\n",
        "852": "\n",
        "853": "  public void testForArrayEmpty() {\n",
        "854": "    String[] array = new String[0];\n",
        "855": "    Iterator<String> iterator = Iterators.forArray(array);\n",
        "856": "    assertFalse(iterator.hasNext());\n",
        "857": "    try {\n",
        "858": "      iterator.next();\n",
        "859": "      fail();\n",
        "860": "    } catch (NoSuchElementException expected) {}\n",
        "861": "  }\n",
        "862": "\n",
        "863": "  public void testForArrayTypical() {\n",
        "864": "    String[] array = {\"foo\", \"bar\"};\n",
        "865": "    Iterator<String> iterator = Iterators.forArray(array);\n",
        "866": "    assertTrue(iterator.hasNext());\n",
        "867": "    assertEquals(\"foo\", iterator.next());\n",
        "868": "    assertTrue(iterator.hasNext());\n",
        "869": "    try {\n",
        "870": "      iterator.remove();\n",
        "871": "      fail();\n",
        "872": "    } catch (UnsupportedOperationException expected) {}\n",
        "873": "    assertEquals(\"bar\", iterator.next());\n",
        "874": "    assertFalse(iterator.hasNext());\n",
        "875": "    try {\n",
        "876": "      iterator.next();\n",
        "877": "      fail();\n",
        "878": "    } catch (NoSuchElementException expected) {}\n",
        "879": "  }\n",
        "880": "\n",
        "881": "  public void testForArrayOffset() {\n",
        "882": "    String[] array = {\"foo\", \"bar\", \"cat\", \"dog\"};\n",
        "883": "    Iterator<String> iterator = Iterators.forArray(array, 1, 2, 0);\n",
        "884": "    assertTrue(iterator.hasNext());\n",
        "885": "    assertEquals(\"bar\", iterator.next());\n",
        "886": "    assertTrue(iterator.hasNext());\n",
        "887": "    assertEquals(\"cat\", iterator.next());\n",
        "888": "    assertFalse(iterator.hasNext());\n",
        "889": "    try {\n",
        "890": "      Iterators.forArray(array, 2, 3, 0);\n",
        "891": "      fail();\n",
        "892": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "893": "  }\n",
        "894": "\n",
        "895": "  public void testForArrayLength0() {\n",
        "896": "    String[] array = {\"foo\", \"bar\"};\n",
        "897": "    assertFalse(Iterators.forArray(array, 0, 0, 0).hasNext());\n",
        "898": "    assertFalse(Iterators.forArray(array, 1, 0, 0).hasNext());\n",
        "899": "    assertFalse(Iterators.forArray(array, 2, 0, 0).hasNext());\n",
        "900": "    try {\n",
        "901": "      Iterators.forArray(array, -1, 0, 0);\n",
        "902": "      fail();\n",
        "903": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "904": "    try {\n",
        "905": "      Iterators.forArray(array, 3, 0, 0);\n",
        "906": "      fail();\n",
        "907": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "908": "  }\n",
        "909": "\n",
        "910": "  public void testForEnumerationEmpty() {\n",
        "911": "    Enumeration<Integer> enumer = enumerate();\n",
        "912": "    Iterator<Integer> iter = Iterators.forEnumeration(enumer);\n",
        "913": "\n",
        "914": "    assertFalse(iter.hasNext());\n",
        "915": "    try {\n",
        "916": "      iter.next();\n",
        "917": "      fail();\n",
        "918": "    } catch (NoSuchElementException expected) {\n",
        "919": "    }\n",
        "920": "  }\n",
        "921": "\n",
        "922": "  public void testForEnumerationSingleton() {\n",
        "923": "    Enumeration<Integer> enumer = enumerate(1);\n",
        "924": "    Iterator<Integer> iter = Iterators.forEnumeration(enumer);\n",
        "925": "\n",
        "926": "    assertTrue(iter.hasNext());\n",
        "927": "    assertTrue(iter.hasNext());\n",
        "928": "    assertEquals(1, (int) iter.next());\n",
        "929": "    try {\n",
        "930": "      iter.remove();\n",
        "931": "      fail();\n",
        "932": "    } catch (UnsupportedOperationException expected) {\n",
        "933": "    }\n",
        "934": "    assertFalse(iter.hasNext());\n",
        "935": "    try {\n",
        "936": "      iter.next();\n",
        "937": "      fail();\n",
        "938": "    } catch (NoSuchElementException expected) {\n",
        "939": "    }\n",
        "940": "  }\n",
        "941": "\n",
        "942": "  public void testForEnumerationTypical() {\n",
        "943": "    Enumeration<Integer> enumer = enumerate(1, 2, 3);\n",
        "944": "    Iterator<Integer> iter = Iterators.forEnumeration(enumer);\n",
        "945": "\n",
        "946": "    assertTrue(iter.hasNext());\n",
        "947": "    assertEquals(1, (int) iter.next());\n",
        "948": "    assertTrue(iter.hasNext());\n",
        "949": "    assertEquals(2, (int) iter.next());\n",
        "950": "    assertTrue(iter.hasNext());\n",
        "951": "    assertEquals(3, (int) iter.next());\n",
        "952": "    assertFalse(iter.hasNext());\n",
        "953": "  }\n",
        "954": "\n",
        "955": "  public void testAsEnumerationEmpty() {\n",
        "956": "    Iterator<Integer> iter = Iterators.emptyIterator();\n",
        "957": "    Enumeration<Integer> enumer = Iterators.asEnumeration(iter);\n",
        "958": "\n",
        "959": "    assertFalse(enumer.hasMoreElements());\n",
        "960": "    try {\n",
        "961": "      enumer.nextElement();\n",
        "962": "      fail();\n",
        "963": "    } catch (NoSuchElementException expected) {\n",
        "964": "    }\n",
        "965": "  }\n",
        "966": "\n",
        "967": "  public void testAsEnumerationSingleton() {\n",
        "968": "    Iterator<Integer> iter = ImmutableList.of(1).iterator();\n",
        "969": "    Enumeration<Integer> enumer = Iterators.asEnumeration(iter);\n",
        "970": "\n",
        "971": "    assertTrue(enumer.hasMoreElements());\n",
        "972": "    assertTrue(enumer.hasMoreElements());\n",
        "973": "    assertEquals(1, (int) enumer.nextElement());\n",
        "974": "    assertFalse(enumer.hasMoreElements());\n",
        "975": "    try {\n",
        "976": "      enumer.nextElement();\n",
        "977": "      fail();\n",
        "978": "    } catch (NoSuchElementException expected) {\n",
        "979": "    }\n",
        "980": "  }\n",
        "981": "\n",
        "982": "  public void testAsEnumerationTypical() {\n",
        "983": "    Iterator<Integer> iter = ImmutableList.of(1, 2, 3).iterator();\n",
        "984": "    Enumeration<Integer> enumer = Iterators.asEnumeration(iter);\n",
        "985": "\n",
        "986": "    assertTrue(enumer.hasMoreElements());\n",
        "987": "    assertEquals(1, (int) enumer.nextElement());\n",
        "988": "    assertTrue(enumer.hasMoreElements());\n",
        "989": "    assertEquals(2, (int) enumer.nextElement());\n",
        "990": "    assertTrue(enumer.hasMoreElements());\n",
        "991": "    assertEquals(3, (int) enumer.nextElement());\n",
        "992": "    assertFalse(enumer.hasMoreElements());\n",
        "993": "  }\n",
        "994": "\n",
        "995": "  private static Enumeration<Integer> enumerate(Integer... ints) {\n",
        "996": "    Vector<Integer> vector = new Vector<Integer>();\n",
        "997": "    vector.addAll(asList(ints));\n",
        "998": "    return vector.elements();\n",
        "999": "  }\n",
        "1000": "\n",
        "1001": "  public void testToString() {\n",
        "1002": "    Iterator<String> iterator = Lists.newArrayList(\"yam\", \"bam\", \"jam\", \"ham\").iterator();\n",
        "1003": "    assertEquals(\"[yam, bam, jam, ham]\", Iterators.toString(iterator));\n",
        "1004": "  }\n",
        "1005": "\n",
        "1006": "  public void testToStringWithNull() {\n",
        "1007": "    Iterator<String> iterator = Lists.newArrayList(\"hello\", null, \"world\").iterator();\n",
        "1008": "    assertEquals(\"[hello, null, world]\", Iterators.toString(iterator));\n",
        "1009": "  }\n",
        "1010": "\n",
        "1011": "  public void testToStringEmptyIterator() {\n",
        "1012": "    Iterator<String> iterator = Collections.<String>emptyList().iterator();\n",
        "1013": "    assertEquals(\"[]\", Iterators.toString(iterator));\n",
        "1014": "  }\n",
        "1015": "\n",
        "1016": "  public void testLimit() {\n",
        "1017": "    List<String> list = newArrayList();\n",
        "1018": "    try {\n",
        "1019": "      Iterators.limit(list.iterator(), -1);\n",
        "1020": "      fail(\"expected exception\");\n",
        "1021": "    } catch (IllegalArgumentException expected) {\n",
        "1022": "      // expected\n",
        "1023": "    }\n",
        "1024": "\n",
        "1025": "    assertFalse(Iterators.limit(list.iterator(), 0).hasNext());\n",
        "1026": "    assertFalse(Iterators.limit(list.iterator(), 1).hasNext());\n",
        "1027": "\n",
        "1028": "    list.add(\"cool\");\n",
        "1029": "    assertFalse(Iterators.limit(list.iterator(), 0).hasNext());\n",
        "1030": "    assertEquals(list, newArrayList(Iterators.limit(list.iterator(), 1)));\n",
        "1031": "    assertEquals(list, newArrayList(Iterators.limit(list.iterator(), 2)));\n",
        "1032": "\n",
        "1033": "    list.add(\"pants\");\n",
        "1034": "    assertFalse(Iterators.limit(list.iterator(), 0).hasNext());\n",
        "1035": "    assertEquals(ImmutableList.of(\"cool\"),\n",
        "1036": "        newArrayList(Iterators.limit(list.iterator(), 1)));\n",
        "1037": "    assertEquals(list, newArrayList(Iterators.limit(list.iterator(), 2)));\n",
        "1038": "    assertEquals(list, newArrayList(Iterators.limit(list.iterator(), 3)));\n",
        "1039": "  }\n",
        "1040": "\n",
        "1041": "  public void testLimitRemove() {\n",
        "1042": "    List<String> list = newArrayList();\n",
        "1043": "    list.add(\"cool\");\n",
        "1044": "    list.add(\"pants\");\n",
        "1045": "    Iterator<String> iterator = Iterators.limit(list.iterator(), 1);\n",
        "1046": "    iterator.next();\n",
        "1047": "    iterator.remove();\n",
        "1048": "    assertFalse(iterator.hasNext());\n",
        "1049": "    assertEquals(1, list.size());\n",
        "1050": "    assertEquals(\"pants\", list.get(0));\n",
        "1051": "  }\n",
        "1052": "\n",
        "1053": "  public void testGetNext_withDefault_singleton() {\n",
        "1054": "    Iterator<String> iterator = Collections.singletonList(\"foo\").iterator();\n",
        "1055": "    assertEquals(\"foo\", Iterators.getNext(iterator, \"bar\"));\n",
        "1056": "  }\n",
        "1057": "\n",
        "1058": "  public void testGetNext_withDefault_empty() {\n",
        "1059": "    Iterator<String> iterator = Iterators.emptyIterator();\n",
        "1060": "    assertEquals(\"bar\", Iterators.getNext(iterator, \"bar\"));\n",
        "1061": "  }\n",
        "1062": "\n",
        "1063": "  public void testGetNext_withDefault_empty_null() {\n",
        "1064": "    Iterator<String> iterator = Iterators.emptyIterator();\n",
        "1065": "    assertNull(Iterators.getNext(iterator, null));\n",
        "1066": "  }\n",
        "1067": "\n",
        "1068": "  public void testGetNext_withDefault_two() {\n",
        "1069": "    Iterator<String> iterator = asList(\"foo\", \"bar\").iterator();\n",
        "1070": "    assertEquals(\"foo\", Iterators.getNext(iterator, \"x\"));\n",
        "1071": "  }\n",
        "1072": "\n",
        "1073": "  public void testGetLast_basic() {\n",
        "1074": "    List<String> list = newArrayList();\n",
        "1075": "    list.add(\"a\");\n",
        "1076": "    list.add(\"b\");\n",
        "1077": "    assertEquals(\"b\", getLast(list.iterator()));\n",
        "1078": "  }\n",
        "1079": "\n",
        "1080": "  public void testGetLast_exception() {\n",
        "1081": "    List<String> list = newArrayList();\n",
        "1082": "    try {\n",
        "1083": "      getLast(list.iterator());\n",
        "1084": "      fail();\n",
        "1085": "    } catch (NoSuchElementException expected) {\n",
        "1086": "    }\n",
        "1087": "  }\n",
        "1088": "\n",
        "1089": "  public void testGetLast_withDefault_singleton() {\n",
        "1090": "    Iterator<String> iterator = Collections.singletonList(\"foo\").iterator();\n",
        "1091": "    assertEquals(\"foo\", Iterators.getLast(iterator, \"bar\"));\n",
        "1092": "  }\n",
        "1093": "\n",
        "1094": "  public void testGetLast_withDefault_empty() {\n",
        "1095": "    Iterator<String> iterator = Iterators.emptyIterator();\n",
        "1096": "    assertEquals(\"bar\", Iterators.getLast(iterator, \"bar\"));\n",
        "1097": "  }\n",
        "1098": "\n",
        "1099": "  public void testGetLast_withDefault_empty_null() {\n",
        "1100": "    Iterator<String> iterator = Iterators.emptyIterator();\n",
        "1101": "    assertNull(Iterators.getLast(iterator, null));\n",
        "1102": "  }\n",
        "1103": "\n",
        "1104": "  public void testGetLast_withDefault_two() {\n",
        "1105": "    Iterator<String> iterator = asList(\"foo\", \"bar\").iterator();\n",
        "1106": "    assertEquals(\"bar\", Iterators.getLast(iterator, \"x\"));\n",
        "1107": "  }\n",
        "1108": "\n",
        "1109": "  public void testGet_basic() {\n",
        "1110": "    List<String> list = newArrayList();\n",
        "1111": "    list.add(\"a\");\n",
        "1112": "    list.add(\"b\");\n",
        "1113": "    Iterator<String> iterator = list.iterator();\n",
        "1114": "    assertEquals(\"b\", get(iterator, 1));\n",
        "1115": "    assertFalse(iterator.hasNext());\n",
        "1116": "  }\n",
        "1117": "\n",
        "1118": "  public void testGet_atSize() {\n",
        "1119": "    List<String> list = newArrayList();\n",
        "1120": "    list.add(\"a\");\n",
        "1121": "    list.add(\"b\");\n",
        "1122": "    Iterator<String> iterator = list.iterator();\n",
        "1123": "    try {\n",
        "1124": "      get(iterator, 2);\n",
        "1125": "      fail();\n",
        "1126": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "1127": "    assertFalse(iterator.hasNext());\n",
        "1128": "  }\n",
        "1129": "\n",
        "1130": "  public void testGet_pastEnd() {\n",
        "1131": "    List<String> list = newArrayList();\n",
        "1132": "    list.add(\"a\");\n",
        "1133": "    list.add(\"b\");\n",
        "1134": "    Iterator<String> iterator = list.iterator();\n",
        "1135": "    try {\n",
        "1136": "      get(iterator, 5);\n",
        "1137": "      fail();\n",
        "1138": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "1139": "    assertFalse(iterator.hasNext());\n",
        "1140": "  }\n",
        "1141": "\n",
        "1142": "  public void testGet_empty() {\n",
        "1143": "    List<String> list = newArrayList();\n",
        "1144": "    Iterator<String> iterator = list.iterator();\n",
        "1145": "    try {\n",
        "1146": "      get(iterator, 0);\n",
        "1147": "      fail();\n",
        "1148": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "1149": "    assertFalse(iterator.hasNext());\n",
        "1150": "  }\n",
        "1151": "\n",
        "1152": "  public void testGet_negativeIndex() {\n",
        "1153": "    List<String> list = newArrayList(\"a\", \"b\", \"c\");\n",
        "1154": "    Iterator<String> iterator = list.iterator();\n",
        "1155": "    try {\n",
        "1156": "      get(iterator, -1);\n",
        "1157": "      fail();\n",
        "1158": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "1159": "  }\n",
        "1160": "\n",
        "1161": "  public void testGet_withDefault_basic() {\n",
        "1162": "    List<String> list = newArrayList();\n",
        "1163": "    list.add(\"a\");\n",
        "1164": "    list.add(\"b\");\n",
        "1165": "    Iterator<String> iterator = list.iterator();\n",
        "1166": "    assertEquals(\"a\", get(iterator, 0, \"c\"));\n",
        "1167": "    assertTrue(iterator.hasNext());\n",
        "1168": "  }\n",
        "1169": "\n",
        "1170": "  public void testGet_withDefault_atSize() {\n",
        "1171": "    List<String> list = newArrayList();\n",
        "1172": "    list.add(\"a\");\n",
        "1173": "    list.add(\"b\");\n",
        "1174": "    Iterator<String> iterator = list.iterator();\n",
        "1175": "    assertEquals(\"c\", get(iterator, 2, \"c\"));\n",
        "1176": "    assertFalse(iterator.hasNext());\n",
        "1177": "  }\n",
        "1178": "\n",
        "1179": "  public void testGet_withDefault_pastEnd() {\n",
        "1180": "    List<String> list = newArrayList();\n",
        "1181": "    list.add(\"a\");\n",
        "1182": "    list.add(\"b\");\n",
        "1183": "    Iterator<String> iterator = list.iterator();\n",
        "1184": "    assertEquals(\"c\", get(iterator, 3, \"c\"));\n",
        "1185": "    assertFalse(iterator.hasNext());\n",
        "1186": "  }\n",
        "1187": "\n",
        "1188": "  public void testGet_withDefault_negativeIndex() {\n",
        "1189": "    List<String> list = newArrayList();\n",
        "1190": "    list.add(\"a\");\n",
        "1191": "    list.add(\"b\");\n",
        "1192": "    Iterator<String> iterator = list.iterator();\n",
        "1193": "    try {\n",
        "1194": "      get(iterator, -1, \"c\");\n",
        "1195": "      fail();\n",
        "1196": "    } catch (IndexOutOfBoundsException expected) {\n",
        "1197": "      // pass\n",
        "1198": "    }\n",
        "1199": "    assertTrue(iterator.hasNext());\n",
        "1200": "  }\n",
        "1201": "\n",
        "1202": "  public void testAdvance_basic() {\n",
        "1203": "    List<String> list = newArrayList();\n",
        "1204": "    list.add(\"a\");\n",
        "1205": "    list.add(\"b\");\n",
        "1206": "    Iterator<String> iterator = list.iterator();\n",
        "1207": "    advance(iterator, 1);\n",
        "1208": "    assertEquals(\"b\", iterator.next());\n",
        "1209": "  }\n",
        "1210": "\n",
        "1211": "  public void testAdvance_pastEnd() {\n",
        "1212": "    List<String> list = newArrayList();\n",
        "1213": "    list.add(\"a\");\n",
        "1214": "    list.add(\"b\");\n",
        "1215": "    Iterator<String> iterator = list.iterator();\n",
        "1216": "    advance(iterator, 5);\n",
        "1217": "    assertFalse(iterator.hasNext());\n",
        "1218": "  }\n",
        "1219": "\n",
        "1220": "  public void testAdvance_illegalArgument() {\n",
        "1221": "    List<String> list = newArrayList(\"a\", \"b\", \"c\");\n",
        "1222": "    Iterator<String> iterator = list.iterator();\n",
        "1223": "    try {\n",
        "1224": "      advance(iterator, -1);\n",
        "1225": "      fail();\n",
        "1226": "    } catch (IllegalArgumentException expected) {}\n",
        "1227": "  }\n",
        "1228": "\n",
        "1229": "  public void testFrequency() {\n",
        "1230": "    List<String> list = newArrayList(\"a\", null, \"b\", null, \"a\", null);\n",
        "1231": "    assertEquals(2, Iterators.frequency(list.iterator(), \"a\"));\n",
        "1232": "    assertEquals(1, Iterators.frequency(list.iterator(), \"b\"));\n",
        "1233": "    assertEquals(0, Iterators.frequency(list.iterator(), \"c\"));\n",
        "1234": "    assertEquals(0, Iterators.frequency(list.iterator(), 4.2));\n",
        "1235": "    assertEquals(3, Iterators.frequency(list.iterator(), null));\n",
        "1236": "  }\n",
        "1237": "\n",
        "1238": "  public void testRemoveAll() {\n",
        "1239": "    List<String> list = newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\");\n",
        "1240": "    assertTrue(Iterators.removeAll(\n",
        "1241": "        list.iterator(), newArrayList(\"b\", \"d\", \"f\")));\n",
        "1242": "    assertEquals(newArrayList(\"a\", \"c\", \"e\"), list);\n",
        "1243": "    assertFalse(Iterators.removeAll(\n",
        "1244": "        list.iterator(), newArrayList(\"x\", \"y\", \"z\")));\n",
        "1245": "    assertEquals(newArrayList(\"a\", \"c\", \"e\"), list);\n",
        "1246": "  }\n",
        "1247": "\n",
        "1248": "  public void testRemoveIf() {\n",
        "1249": "    List<String> list = newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\");\n",
        "1250": "    assertTrue(Iterators.removeIf(\n",
        "1251": "        list.iterator(),\n",
        "1252": "        new Predicate<String>() {\n",
        "1253": "          @Override\n",
        "1254": "          public boolean apply(String s) {\n",
        "1255": "            return s.equals(\"b\") || s.equals(\"d\") || s.equals(\"f\");\n",
        "1256": "          }\n",
        "1257": "        }));\n",
        "1258": "    assertEquals(newArrayList(\"a\", \"c\", \"e\"), list);\n",
        "1259": "    assertFalse(Iterators.removeIf(\n",
        "1260": "        list.iterator(),\n",
        "1261": "        new Predicate<String>() {\n",
        "1262": "          @Override\n",
        "1263": "          public boolean apply(String s) {\n",
        "1264": "            return s.equals(\"x\") || s.equals(\"y\") || s.equals(\"z\");\n",
        "1265": "          }\n",
        "1266": "        }));\n",
        "1267": "    assertEquals(newArrayList(\"a\", \"c\", \"e\"), list);\n",
        "1268": "  }\n",
        "1269": "\n",
        "1270": "  public void testRetainAll() {\n",
        "1271": "    List<String> list = newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\");\n",
        "1272": "    assertTrue(Iterators.retainAll(\n",
        "1273": "        list.iterator(), newArrayList(\"b\", \"d\", \"f\")));\n",
        "1274": "    assertEquals(newArrayList(\"b\", \"d\"), list);\n",
        "1275": "    assertFalse(Iterators.retainAll(\n",
        "1276": "        list.iterator(), newArrayList(\"b\", \"e\", \"d\")));\n",
        "1277": "    assertEquals(newArrayList(\"b\", \"d\"), list);\n",
        "1278": "  }\n",
        "1279": "\n",
        "1280": "  public void testConsumingIterator() {\n",
        "1281": "    // Test data\n",
        "1282": "    List<String> list = Lists.newArrayList(\"a\", \"b\");\n",
        "1283": "\n",
        "1284": "    // Test & Verify\n",
        "1285": "    Iterator<String> consumingIterator =\n",
        "1286": "        Iterators.consumingIterator(list.iterator());\n",
        "1287": "\n",
        "1288": "    assertEquals(\"Iterators.consumingIterator(...)\", consumingIterator.toString());\n",
        "1289": "\n",
        "1290": "    assertThat(list).containsExactly(\"a\", \"b\").inOrder();\n",
        "1291": "\n",
        "1292": "    assertTrue(consumingIterator.hasNext());\n",
        "1293": "    assertThat(list).containsExactly(\"a\", \"b\").inOrder();\n",
        "1294": "    assertEquals(\"a\", consumingIterator.next());\n",
        "1295": "    assertThat(list).contains(\"b\");\n",
        "1296": "\n",
        "1297": "    assertTrue(consumingIterator.hasNext());\n",
        "1298": "    assertEquals(\"b\", consumingIterator.next());\n",
        "1299": "    assertThat(list).isEmpty();\n",
        "1300": "\n",
        "1301": "    assertFalse(consumingIterator.hasNext());\n",
        "1302": "  }\n",
        "1303": "\n",
        "1304": "  public void testIndexOf_consumedData() {\n",
        "1305": "    Iterator<String> iterator =\n",
        "1306": "        Lists.newArrayList(\"manny\", \"mo\", \"jack\").iterator();\n",
        "1307": "    assertEquals(1, Iterators.indexOf(iterator, Predicates.equalTo(\"mo\")));\n",
        "1308": "    assertEquals(\"jack\", iterator.next());\n",
        "1309": "    assertFalse(iterator.hasNext());\n",
        "1310": "  }\n",
        "1311": "\n",
        "1312": "  public void testIndexOf_consumedDataWithDuplicates() {\n",
        "1313": "    Iterator<String> iterator =\n",
        "1314": "        Lists.newArrayList(\"manny\", \"mo\", \"mo\", \"jack\").iterator();\n",
        "1315": "    assertEquals(1, Iterators.indexOf(iterator, Predicates.equalTo(\"mo\")));\n",
        "1316": "    assertEquals(\"mo\", iterator.next());\n",
        "1317": "    assertEquals(\"jack\", iterator.next());\n",
        "1318": "    assertFalse(iterator.hasNext());\n",
        "1319": "  }\n",
        "1320": "\n",
        "1321": "  public void testIndexOf_consumedDataNoMatch() {\n",
        "1322": "    Iterator<String> iterator =\n",
        "1323": "        Lists.newArrayList(\"manny\", \"mo\", \"mo\", \"jack\").iterator();\n",
        "1324": "    assertEquals(-1, Iterators.indexOf(iterator, Predicates.equalTo(\"bob\")));\n",
        "1325": "    assertFalse(iterator.hasNext());\n",
        "1326": "  }\n",
        "1327": "\n",
        "1328": "  @SuppressWarnings(\"deprecation\")\n",
        "1329": "  public void testUnmodifiableIteratorShortCircuit() {\n",
        "1330": "    Iterator<String> mod = Lists.newArrayList(\"a\", \"b\", \"c\").iterator();\n",
        "1331": "    UnmodifiableIterator<String> unmod = Iterators.unmodifiableIterator(mod);\n",
        "1332": "    assertNotSame(mod, unmod);\n",
        "1333": "    assertSame(unmod, Iterators.unmodifiableIterator(unmod));\n",
        "1334": "    assertSame(unmod, Iterators.unmodifiableIterator((Iterator<String>) unmod));\n",
        "1335": "  }\n",
        "1336": "\n",
        "1337": "  @SuppressWarnings(\"deprecation\")\n",
        "1338": "  public void testPeekingIteratorShortCircuit() {\n",
        "1339": "    Iterator<String> nonpeek = Lists.newArrayList(\"a\", \"b\", \"c\").iterator();\n",
        "1340": "    PeekingIterator<String> peek = Iterators.peekingIterator(nonpeek);\n",
        "1341": "    assertNotSame(peek, nonpeek);\n",
        "1342": "    assertSame(peek, Iterators.peekingIterator(peek));\n",
        "1343": "    assertSame(peek, Iterators.peekingIterator((Iterator<String>) peek));\n",
        "1344": "  }\n",
        "1345": "}\n"
    }
}