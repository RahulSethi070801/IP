{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "import static java.util.Arrays.asList;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import com.google.common.collect.testing.MinimalCollection;\n",
        "24": "import com.google.common.collect.testing.google.UnmodifiableCollectionTests;\n",
        "25": "import com.google.common.testing.EqualsTester;\n",
        "26": "\n",
        "27": "import junit.framework.TestCase;\n",
        "28": "\n",
        "29": "import java.util.Collection;\n",
        "30": "import java.util.Iterator;\n",
        "31": "import java.util.List;\n",
        "32": "\n",
        "33": "/**\n",
        "34": " * Tests for {@link ImmutableMultiset}.\n",
        "35": " *\n",
        "36": " * @author Jared Levy\n",
        "37": " */\n",
        "38": "@GwtCompatible(emulated = true)\n",
        "39": "public class ImmutableMultisetTest extends TestCase {\n",
        "40": "\n",
        "41": "  public void testCreation_noArgs() {\n",
        "42": "    Multiset<String> multiset = ImmutableMultiset.of();\n",
        "43": "    assertTrue(multiset.isEmpty());\n",
        "44": "  }\n",
        "45": "\n",
        "46": "  public void testCreation_oneElement() {\n",
        "47": "    Multiset<String> multiset = ImmutableMultiset.of(\"a\");\n",
        "48": "    assertEquals(HashMultiset.create(asList(\"a\")), multiset);\n",
        "49": "  }\n",
        "50": "\n",
        "51": "  public void testCreation_twoElements() {\n",
        "52": "    Multiset<String> multiset = ImmutableMultiset.of(\"a\", \"b\");\n",
        "53": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\")), multiset);\n",
        "54": "  }\n",
        "55": "\n",
        "56": "  public void testCreation_threeElements() {\n",
        "57": "    Multiset<String> multiset = ImmutableMultiset.of(\"a\", \"b\", \"c\");\n",
        "58": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"c\")), multiset);\n",
        "59": "  }\n",
        "60": "\n",
        "61": "  public void testCreation_fourElements() {\n",
        "62": "    Multiset<String> multiset = ImmutableMultiset.of(\"a\", \"b\", \"c\", \"d\");\n",
        "63": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"c\", \"d\")), multiset);\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  public void testCreation_fiveElements() {\n",
        "67": "    Multiset<String> multiset = ImmutableMultiset.of(\"a\", \"b\", \"c\", \"d\", \"e\");\n",
        "68": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"c\", \"d\", \"e\")),\n",
        "69": "        multiset);\n",
        "70": "  }\n",
        "71": "\n",
        "72": "  public void testCreation_sixElements() {\n",
        "73": "    Multiset<String> multiset = ImmutableMultiset.of(\n",
        "74": "        \"a\", \"b\", \"c\", \"d\", \"e\", \"f\");\n",
        "75": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")),\n",
        "76": "        multiset);\n",
        "77": "  }\n",
        "78": "\n",
        "79": "  public void testCreation_sevenElements() {\n",
        "80": "    Multiset<String> multiset = ImmutableMultiset.of(\n",
        "81": "        \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\");\n",
        "82": "    assertEquals(\n",
        "83": "        HashMultiset.create(asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")),\n",
        "84": "        multiset);\n",
        "85": "  }\n",
        "86": "\n",
        "87": "  public void testCreation_emptyArray() {\n",
        "88": "    String[] array = new String[0];\n",
        "89": "    Multiset<String> multiset = ImmutableMultiset.copyOf(array);\n",
        "90": "    assertTrue(multiset.isEmpty());\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  public void testCreation_arrayOfOneElement() {\n",
        "94": "    String[] array = new String[] { \"a\" };\n",
        "95": "    Multiset<String> multiset = ImmutableMultiset.copyOf(array);\n",
        "96": "    assertEquals(HashMultiset.create(asList(\"a\")), multiset);\n",
        "97": "  }\n",
        "98": "\n",
        "99": "  public void testCreation_arrayOfArray() {\n",
        "100": "    String[] array = new String[] { \"a\" };\n",
        "101": "    Multiset<String[]> multiset = ImmutableMultiset.<String[]>of(array);\n",
        "102": "    Multiset<String[]> expected = HashMultiset.create();\n",
        "103": "    expected.add(array);\n",
        "104": "    assertEquals(expected, multiset);\n",
        "105": "  }\n",
        "106": "\n",
        "107": "  public void testCreation_arrayContainingOnlyNull() {\n",
        "108": "    String[] array = new String[] { null };\n",
        "109": "    try {\n",
        "110": "      ImmutableMultiset.copyOf(array);\n",
        "111": "      fail();\n",
        "112": "    } catch (NullPointerException expected) {}\n",
        "113": "  }\n",
        "114": "\n",
        "115": "  public void testCopyOf_collection_empty() {\n",
        "116": "    // \"<String>\" is required to work around a javac 1.5 bug.\n",
        "117": "    Collection<String> c = MinimalCollection.<String>of();\n",
        "118": "    Multiset<String> multiset = ImmutableMultiset.copyOf(c);\n",
        "119": "    assertTrue(multiset.isEmpty());\n",
        "120": "  }\n",
        "121": "\n",
        "122": "  public void testCopyOf_collection_oneElement() {\n",
        "123": "    Collection<String> c = MinimalCollection.of(\"a\");\n",
        "124": "    Multiset<String> multiset = ImmutableMultiset.copyOf(c);\n",
        "125": "    assertEquals(HashMultiset.create(asList(\"a\")), multiset);\n",
        "126": "  }\n",
        "127": "\n",
        "128": "  public void testCopyOf_collection_general() {\n",
        "129": "    Collection<String> c = MinimalCollection.of(\"a\", \"b\", \"a\");\n",
        "130": "    Multiset<String> multiset = ImmutableMultiset.copyOf(c);\n",
        "131": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"a\")), multiset);\n",
        "132": "  }\n",
        "133": "\n",
        "134": "  public void testCopyOf_collectionContainingNull() {\n",
        "135": "    Collection<String> c = MinimalCollection.of(\"a\", null, \"b\");\n",
        "136": "    try {\n",
        "137": "      ImmutableMultiset.copyOf(c);\n",
        "138": "      fail();\n",
        "139": "    } catch (NullPointerException expected) {}\n",
        "140": "  }\n",
        "141": "\n",
        "142": "  public void testCopyOf_multiset_empty() {\n",
        "143": "    Multiset<String> c = HashMultiset.create();\n",
        "144": "    Multiset<String> multiset = ImmutableMultiset.copyOf(c);\n",
        "145": "    assertTrue(multiset.isEmpty());\n",
        "146": "  }\n",
        "147": "\n",
        "148": "  public void testCopyOf_multiset_oneElement() {\n",
        "149": "    Multiset<String> c = HashMultiset.create(asList(\"a\"));\n",
        "150": "    Multiset<String> multiset = ImmutableMultiset.copyOf(c);\n",
        "151": "    assertEquals(HashMultiset.create(asList(\"a\")), multiset);\n",
        "152": "  }\n",
        "153": "\n",
        "154": "  public void testCopyOf_multiset_general() {\n",
        "155": "    Multiset<String> c = HashMultiset.create(asList(\"a\", \"b\", \"a\"));\n",
        "156": "    Multiset<String> multiset = ImmutableMultiset.copyOf(c);\n",
        "157": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"a\")), multiset);\n",
        "158": "  }\n",
        "159": "\n",
        "160": "  public void testCopyOf_multisetContainingNull() {\n",
        "161": "    Multiset<String> c = HashMultiset.create(asList(\"a\", null, \"b\"));\n",
        "162": "    try {\n",
        "163": "      ImmutableMultiset.copyOf(c);\n",
        "164": "      fail();\n",
        "165": "    } catch (NullPointerException expected) {}\n",
        "166": "  }\n",
        "167": "\n",
        "168": "  public void testCopyOf_iterator_empty() {\n",
        "169": "    Iterator<String> iterator = Iterators.emptyIterator();\n",
        "170": "    Multiset<String> multiset = ImmutableMultiset.copyOf(iterator);\n",
        "171": "    assertTrue(multiset.isEmpty());\n",
        "172": "  }\n",
        "173": "\n",
        "174": "  public void testCopyOf_iterator_oneElement() {\n",
        "175": "    Iterator<String> iterator = Iterators.singletonIterator(\"a\");\n",
        "176": "    Multiset<String> multiset = ImmutableMultiset.copyOf(iterator);\n",
        "177": "    assertEquals(HashMultiset.create(asList(\"a\")), multiset);\n",
        "178": "  }\n",
        "179": "\n",
        "180": "  public void testCopyOf_iterator_general() {\n",
        "181": "    Iterator<String> iterator = asList(\"a\", \"b\", \"a\").iterator();\n",
        "182": "    Multiset<String> multiset = ImmutableMultiset.copyOf(iterator);\n",
        "183": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"a\")), multiset);\n",
        "184": "  }\n",
        "185": "\n",
        "186": "  public void testCopyOf_iteratorContainingNull() {\n",
        "187": "    Iterator<String> iterator = asList(\"a\", null, \"b\").iterator();\n",
        "188": "    try {\n",
        "189": "      ImmutableMultiset.copyOf(iterator);\n",
        "190": "      fail();\n",
        "191": "    } catch (NullPointerException expected) {}\n",
        "192": "  }\n",
        "193": "\n",
        "194": "  private static class CountingIterable implements Iterable<String> {\n",
        "195": "    int count = 0;\n",
        "196": "    @Override\n",
        "197": "    public Iterator<String> iterator() {\n",
        "198": "      count++;\n",
        "199": "      return asList(\"a\", \"b\", \"a\").iterator();\n",
        "200": "    }\n",
        "201": "  }\n",
        "202": "\n",
        "203": "  public void testCopyOf_plainIterable() {\n",
        "204": "    CountingIterable iterable = new CountingIterable();\n",
        "205": "    Multiset<String> multiset = ImmutableMultiset.copyOf(iterable);\n",
        "206": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"a\")), multiset);\n",
        "207": "    assertEquals(1, iterable.count);\n",
        "208": "  }\n",
        "209": "\n",
        "210": "  public void testCopyOf_shortcut_empty() {\n",
        "211": "    Collection<String> c = ImmutableMultiset.of();\n",
        "212": "    assertSame(c, ImmutableMultiset.copyOf(c));\n",
        "213": "  }\n",
        "214": "\n",
        "215": "  public void testCopyOf_shortcut_singleton() {\n",
        "216": "    Collection<String> c = ImmutableMultiset.of(\"a\");\n",
        "217": "    assertSame(c, ImmutableMultiset.copyOf(c));\n",
        "218": "  }\n",
        "219": "\n",
        "220": "  public void testCopyOf_shortcut_immutableMultiset() {\n",
        "221": "    Collection<String> c = ImmutableMultiset.of(\"a\", \"b\", \"c\");\n",
        "222": "    assertSame(c, ImmutableMultiset.copyOf(c));\n",
        "223": "  }\n",
        "224": "\n",
        "225": "  public void testBuilderAdd() {\n",
        "226": "    ImmutableMultiset<String> multiset = new ImmutableMultiset.Builder<String>()\n",
        "227": "        .add(\"a\")\n",
        "228": "        .add(\"b\")\n",
        "229": "        .add(\"a\")\n",
        "230": "        .add(\"c\")\n",
        "231": "        .build();\n",
        "232": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"a\", \"c\")), multiset);\n",
        "233": "  }\n",
        "234": "\n",
        "235": "  public void testBuilderAddAll() {\n",
        "236": "    List<String> a = asList(\"a\", \"b\");\n",
        "237": "    List<String> b = asList(\"c\", \"d\");\n",
        "238": "    ImmutableMultiset<String> multiset = new ImmutableMultiset.Builder<String>()\n",
        "239": "        .addAll(a)\n",
        "240": "        .addAll(b)\n",
        "241": "        .build();\n",
        "242": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"c\", \"d\")), multiset);\n",
        "243": "  }\n",
        "244": "\n",
        "245": "  public void testBuilderAddAllMultiset() {\n",
        "246": "    Multiset<String> a = HashMultiset.create(asList(\"a\", \"b\", \"b\"));\n",
        "247": "    Multiset<String> b = HashMultiset.create(asList(\"c\", \"b\"));\n",
        "248": "    ImmutableMultiset<String> multiset = new ImmutableMultiset.Builder<String>()\n",
        "249": "        .addAll(a)\n",
        "250": "        .addAll(b)\n",
        "251": "        .build();\n",
        "252": "    assertEquals(\n",
        "253": "        HashMultiset.create(asList(\"a\", \"b\", \"b\", \"b\", \"c\")), multiset);\n",
        "254": "  }\n",
        "255": "\n",
        "256": "  public void testBuilderAddAllIterator() {\n",
        "257": "    Iterator<String> iterator = asList(\"a\", \"b\", \"a\", \"c\").iterator();\n",
        "258": "    ImmutableMultiset<String> multiset = new ImmutableMultiset.Builder<String>()\n",
        "259": "        .addAll(iterator)\n",
        "260": "        .build();\n",
        "261": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"a\", \"c\")), multiset);\n",
        "262": "  }\n",
        "263": "\n",
        "264": "  public void testBuilderAddCopies() {\n",
        "265": "    ImmutableMultiset<String> multiset = new ImmutableMultiset.Builder<String>()\n",
        "266": "        .addCopies(\"a\", 2)\n",
        "267": "        .addCopies(\"b\", 3)\n",
        "268": "        .addCopies(\"c\", 0)\n",
        "269": "        .build();\n",
        "270": "    assertEquals(\n",
        "271": "        HashMultiset.create(asList(\"a\", \"a\", \"b\", \"b\", \"b\")), multiset);\n",
        "272": "  }\n",
        "273": "\n",
        "274": "  public void testBuilderSetCount() {\n",
        "275": "    ImmutableMultiset<String> multiset = new ImmutableMultiset.Builder<String>()\n",
        "276": "        .add(\"a\")\n",
        "277": "        .setCount(\"a\", 2)\n",
        "278": "        .setCount(\"b\", 3)\n",
        "279": "        .build();\n",
        "280": "    assertEquals(\n",
        "281": "        HashMultiset.create(asList(\"a\", \"a\", \"b\", \"b\", \"b\")), multiset);\n",
        "282": "  }\n",
        "283": "\n",
        "284": "  public void testBuilderAddHandlesNullsCorrectly() {\n",
        "285": "    ImmutableMultiset.Builder<String> builder = ImmutableMultiset.builder();\n",
        "286": "    try {\n",
        "287": "      builder.add((String) null);\n",
        "288": "      fail(\"expected NullPointerException\");\n",
        "289": "    } catch (NullPointerException expected) {}\n",
        "290": "  }\n",
        "291": "\n",
        "292": "  public void testBuilderAddAllHandlesNullsCorrectly() {\n",
        "293": "    ImmutableMultiset.Builder<String> builder = ImmutableMultiset.builder();\n",
        "294": "    try {\n",
        "295": "      builder.addAll((Collection<String>) null);\n",
        "296": "      fail(\"expected NullPointerException\");\n",
        "297": "    } catch (NullPointerException expected) {}\n",
        "298": "\n",
        "299": "    builder = ImmutableMultiset.builder();\n",
        "300": "    List<String> listWithNulls = asList(\"a\", null, \"b\");\n",
        "301": "    try {\n",
        "302": "      builder.addAll(listWithNulls);\n",
        "303": "      fail(\"expected NullPointerException\");\n",
        "304": "    } catch (NullPointerException expected) {}\n",
        "305": "\n",
        "306": "    builder = ImmutableMultiset.builder();\n",
        "307": "    Multiset<String> multisetWithNull\n",
        "308": "        = LinkedHashMultiset.create(asList(\"a\", null, \"b\"));\n",
        "309": "    try {\n",
        "310": "      builder.addAll(multisetWithNull);\n",
        "311": "      fail(\"expected NullPointerException\");\n",
        "312": "    } catch (NullPointerException expected) {}\n",
        "313": "  }\n",
        "314": "\n",
        "315": "  public void testBuilderAddCopiesHandlesNullsCorrectly() {\n",
        "316": "    ImmutableMultiset.Builder<String> builder = ImmutableMultiset.builder();\n",
        "317": "    try {\n",
        "318": "      builder.addCopies(null, 2);\n",
        "319": "      fail(\"expected NullPointerException\");\n",
        "320": "    } catch (NullPointerException expected) {}\n",
        "321": "  }\n",
        "322": "\n",
        "323": "  public void testBuilderAddCopiesIllegal() {\n",
        "324": "    ImmutableMultiset.Builder<String> builder = ImmutableMultiset.builder();\n",
        "325": "    try {\n",
        "326": "      builder.addCopies(\"a\", -2);\n",
        "327": "      fail(\"expected IllegalArgumentException\");\n",
        "328": "    } catch (IllegalArgumentException expected) {}\n",
        "329": "  }\n",
        "330": "\n",
        "331": "  public void testBuilderSetCountHandlesNullsCorrectly() {\n",
        "332": "    ImmutableMultiset.Builder<String> builder = ImmutableMultiset.builder();\n",
        "333": "    try {\n",
        "334": "      builder.setCount(null, 2);\n",
        "335": "      fail(\"expected NullPointerException\");\n",
        "336": "    } catch (NullPointerException expected) {}\n",
        "337": "  }\n",
        "338": "\n",
        "339": "  public void testBuilderSetCountIllegal() {\n",
        "340": "    ImmutableMultiset.Builder<String> builder = ImmutableMultiset.builder();\n",
        "341": "    try {\n",
        "342": "      builder.setCount(\"a\", -2);\n",
        "343": "      fail(\"expected IllegalArgumentException\");\n",
        "344": "    } catch (IllegalArgumentException expected) {}\n",
        "345": "  }\n",
        "346": "\n",
        "347": "  public void testEquals_immutableMultiset() {\n",
        "348": "    Collection<String> c = ImmutableMultiset.of(\"a\", \"b\", \"a\");\n",
        "349": "    assertEquals(c, ImmutableMultiset.of(\"a\", \"b\", \"a\"));\n",
        "350": "    assertEquals(c, ImmutableMultiset.of(\"a\", \"a\", \"b\"));\n",
        "351": "    assertThat(c).isNotEqualTo(ImmutableMultiset.of(\"a\", \"b\"));\n",
        "352": "    assertThat(c).isNotEqualTo(ImmutableMultiset.of(\"a\", \"b\", \"c\", \"d\"));\n",
        "353": "  }\n",
        "354": "\n",
        "355": "  public void testIterationOrder() {\n",
        "356": "    Collection<String> c = ImmutableMultiset.of(\"a\", \"b\", \"a\");\n",
        "357": "    assertThat(c).containsExactly(\"a\", \"a\", \"b\").inOrder();\n",
        "358": "  }\n",
        "359": "\n",
        "360": "  public void testMultisetWrites() {\n",
        "361": "    Multiset<String> multiset = ImmutableMultiset.of(\"a\", \"b\", \"a\");\n",
        "362": "    UnmodifiableCollectionTests.assertMultisetIsUnmodifiable(multiset, \"test\");\n",
        "363": "  }\n",
        "364": "\n",
        "365": "  public void testAsList() {\n",
        "366": "    ImmutableMultiset<String> multiset\n",
        "367": "        = ImmutableMultiset.of(\"a\", \"a\", \"b\", \"b\", \"b\");\n",
        "368": "    ImmutableList<String> list = multiset.asList();\n",
        "369": "    assertEquals(ImmutableList.of(\"a\", \"a\", \"b\", \"b\", \"b\"), list);\n",
        "370": "    assertEquals(2, list.indexOf(\"b\"));\n",
        "371": "    assertEquals(4, list.lastIndexOf(\"b\"));\n",
        "372": "  }\n",
        "373": "\n",
        "374": "  public void testEquals() {\n",
        "375": "    new EqualsTester()\n",
        "376": "        .addEqualityGroup(ImmutableMultiset.of(), ImmutableMultiset.of())\n",
        "377": "        .addEqualityGroup(ImmutableMultiset.of(1), ImmutableMultiset.of(1))\n",
        "378": "        .addEqualityGroup(ImmutableMultiset.of(1, 1), ImmutableMultiset.of(1, 1))\n",
        "379": "        .addEqualityGroup(ImmutableMultiset.of(1, 2, 1), ImmutableMultiset.of(2, 1, 1))\n",
        "380": "        .testEquals();\n",
        "381": "  }\n",
        "382": "}\n",
        "383": "\n"
    }
}