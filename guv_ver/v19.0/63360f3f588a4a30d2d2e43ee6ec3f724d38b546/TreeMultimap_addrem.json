{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "\n",
        "23": "import java.util.Collection;\n",
        "24": "import java.util.Comparator;\n",
        "25": "import java.util.SortedSet;\n",
        "26": "import java.util.TreeMap;\n",
        "27": "import java.util.TreeSet;\n",
        "28": "\n",
        "29": "import javax.annotation.Nullable;\n",
        "30": "\n",
        "31": "/**\n",
        "32": " * Implementation of {@code Multimap} whose keys and values are ordered by\n",
        "33": " * their natural ordering or by supplied comparators. In all cases, this\n",
        "34": " * implementation uses {@link Comparable#compareTo} or {@link\n",
        "35": " * Comparator#compare} instead of {@link Object#equals} to determine\n",
        "36": " * equivalence of instances.\n",
        "37": " *\n",
        "38": " * <p><b>Warning:</b> The comparators or comparables used must be <i>consistent\n",
        "39": " * with equals</i> as explained by the {@link Comparable} class specification.\n",
        "40": " * Otherwise, the resulting multiset will violate the general contract of {@link\n",
        "41": " * SetMultimap}, which it is specified in terms of {@link Object#equals}.\n",
        "42": " *\n",
        "43": " * <p>The collections returned by {@code keySet} and {@code asMap} iterate\n",
        "44": " * through the keys according to the key comparator ordering or the natural\n",
        "45": " * ordering of the keys. Similarly, {@code get}, {@code removeAll}, and {@code\n",
        "46": " * replaceValues} return collections that iterate through the values according\n",
        "47": " * to the value comparator ordering or the natural ordering of the values. The\n",
        "48": " * collections generated by {@code entries}, {@code keys}, and {@code values}\n",
        "49": " * iterate across the keys according to the above key ordering, and for each\n",
        "50": " * key they iterate across the values according to the value ordering.\n",
        "51": " *\n",
        "52": " * <p>The multimap does not store duplicate key-value pairs. Adding a new\n",
        "53": " * key-value pair equal to an existing key-value pair has no effect.\n",
        "54": " *\n",
        "55": " * <p>Null keys and values are permitted (provided, of course, that the\n",
        "56": " * respective comparators support them). All optional multimap methods are\n",
        "57": " * supported, and all returned views are modifiable.\n",
        "58": " *\n",
        "59": " * <p>This class is not threadsafe when any concurrent operations update the\n",
        "60": " * multimap. Concurrent read operations will work correctly. To allow concurrent\n",
        "61": " * update operations, wrap your multimap with a call to {@link\n",
        "62": " * Multimaps#synchronizedSortedSetMultimap}.\n",
        "63": " *\n",
        "64": " * <p>See the Guava User Guide article on <a href=\n",
        "65": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap\">\n",
        "66": " * {@code Multimap}</a>.\n",
        "67": " *\n",
        "68": " * @author Jared Levy\n",
        "69": " * @author Louis Wasserman\n",
        "70": " * @since 2.0\n",
        "71": " */\n",
        "72": "@GwtCompatible(serializable = true, emulated = true)\n",
        "73": "public class TreeMultimap<K, V> extends AbstractSortedKeySortedSetMultimap<K, V> {\n",
        "74": "  private transient Comparator<? super K> keyComparator;\n",
        "75": "  private transient Comparator<? super V> valueComparator;\n",
        "76": "\n",
        "77": "  /**\n",
        "78": "   * Creates an empty {@code TreeMultimap} ordered by the natural ordering of\n",
        "79": "   * its keys and values.\n",
        "80": "   */\n",
        "81": "  public static <K extends Comparable, V extends Comparable> TreeMultimap<K, V> create() {\n",
        "82": "    return new TreeMultimap<K, V>(Ordering.natural(), Ordering.natural());\n",
        "83": "  }\n",
        "84": "\n",
        "85": "  /**\n",
        "86": "   * Creates an empty {@code TreeMultimap} instance using explicit comparators.\n",
        "87": "   * Neither comparator may be null; use {@link Ordering#natural()} to specify\n",
        "88": "   * natural order.\n",
        "89": "   *\n",
        "90": "   * @param keyComparator the comparator that determines the key ordering\n",
        "91": "   * @param valueComparator the comparator that determines the value ordering\n",
        "92": "   */\n",
        "93": "  public static <K, V> TreeMultimap<K, V> create(\n",
        "94": "      Comparator<? super K> keyComparator, Comparator<? super V> valueComparator) {\n",
        "95": "    return new TreeMultimap<K, V>(checkNotNull(keyComparator), checkNotNull(valueComparator));\n",
        "96": "  }\n",
        "97": "\n",
        "98": "  /**\n",
        "99": "   * Constructs a {@code TreeMultimap}, ordered by the natural ordering of its\n",
        "100": "   * keys and values, with the same mappings as the specified multimap.\n",
        "101": "   *\n",
        "102": "   * @param multimap the multimap whose contents are copied to this multimap\n",
        "103": "   */\n",
        "104": "  public static <K extends Comparable, V extends Comparable> TreeMultimap<K, V> create(\n",
        "105": "      Multimap<? extends K, ? extends V> multimap) {\n",
        "106": "    return new TreeMultimap<K, V>(Ordering.natural(), Ordering.natural(), multimap);\n",
        "107": "  }\n",
        "108": "\n",
        "109": "  TreeMultimap(Comparator<? super K> keyComparator, Comparator<? super V> valueComparator) {\n",
        "110": "    super(new TreeMap<K, Collection<V>>(keyComparator));\n",
        "111": "    this.keyComparator = keyComparator;\n",
        "112": "    this.valueComparator = valueComparator;\n",
        "113": "  }\n",
        "114": "\n",
        "115": "  private TreeMultimap(\n",
        "116": "      Comparator<? super K> keyComparator,\n",
        "117": "      Comparator<? super V> valueComparator,\n",
        "118": "      Multimap<? extends K, ? extends V> multimap) {\n",
        "119": "    this(keyComparator, valueComparator);\n",
        "120": "    putAll(multimap);\n",
        "121": "  }\n",
        "122": "\n",
        "123": "  /**\n",
        "124": "   * {@inheritDoc}\n",
        "125": "   *\n",
        "126": "   * <p>Creates an empty {@code TreeSet} for a collection of values for one key.\n",
        "127": "   *\n",
        "128": "   * @return a new {@code TreeSet} containing a collection of values for one\n",
        "129": "   *     key\n",
        "130": "   */\n",
        "131": "  @Override\n",
        "132": "  SortedSet<V> createCollection() {\n",
        "133": "    return new TreeSet<V>(valueComparator);\n",
        "134": "  }\n",
        "135": "\n",
        "136": "  @Override\n",
        "137": "  Collection<V> createCollection(@Nullable K key) {\n",
        "138": "    if (key == null) {\n",
        "139": "      keyComparator().compare(key, key);\n",
        "140": "    }\n",
        "141": "    return super.createCollection(key);\n",
        "142": "  }\n",
        "143": "\n",
        "144": "  /**\n",
        "145": "   * Returns the comparator that orders the multimap keys.\n",
        "146": "   */\n",
        "147": "  public Comparator<? super K> keyComparator() {\n",
        "148": "    return keyComparator;\n",
        "149": "  }\n",
        "150": "\n",
        "151": "  @Override\n",
        "152": "  public Comparator<? super V> valueComparator() {\n",
        "153": "    return valueComparator;\n",
        "154": "  }\n",
        "155": "\n",
        "156": "  /*\n",
        "157": "   * The following @GwtIncompatible methods override the methods in\n",
        "158": "   * AbstractSortedKeySortedSetMultimap, so GWT will fall back to the ASKSSM implementations,\n",
        "159": "   * which return SortedSets and SortedMaps.\n",
        "160": "   */\n",
        "161": "}\n",
        "162": "\n"
    }
}