{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2011 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.base;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.testing.SerializableTester;\n",
        "23": "\n",
        "24": "import junit.framework.TestCase;\n",
        "25": "\n",
        "26": "import java.lang.annotation.Retention;\n",
        "27": "import java.lang.annotation.RetentionPolicy;\n",
        "28": "\n",
        "29": "/**\n",
        "30": " * Tests for {@link Enums}.\n",
        "31": " *\n",
        "32": " * @author Steve McKay\n",
        "33": " */\n",
        "34": "@GwtCompatible(emulated = true)\n",
        "35": "public class EnumsTest extends TestCase {\n",
        "36": "\n",
        "37": "  private enum TestEnum {\n",
        "38": "    CHEETO,\n",
        "39": "    HONDA,\n",
        "40": "    POODLE,\n",
        "41": "  }\n",
        "42": "\n",
        "43": "  private enum OtherEnum {}\n",
        "44": "\n",
        "45": "  public void testGetIfPresent() {\n",
        "46": "    assertThat(Enums.getIfPresent(TestEnum.class, \"CHEETO\")).hasValue(TestEnum.CHEETO);\n",
        "47": "    assertThat(Enums.getIfPresent(TestEnum.class, \"HONDA\")).hasValue(TestEnum.HONDA);\n",
        "48": "    assertThat(Enums.getIfPresent(TestEnum.class, \"POODLE\")).hasValue(TestEnum.POODLE);\n",
        "49": "\n",
        "50": "    assertThat(Enums.getIfPresent(TestEnum.class, \"CHEETO\")).isPresent();\n",
        "51": "    assertThat(Enums.getIfPresent(TestEnum.class, \"HONDA\")).isPresent();\n",
        "52": "    assertThat(Enums.getIfPresent(TestEnum.class, \"POODLE\")).isPresent();\n",
        "53": "\n",
        "54": "    assertThat(Enums.getIfPresent(TestEnum.class, \"CHEETO\")).hasValue(TestEnum.CHEETO);\n",
        "55": "    assertThat(Enums.getIfPresent(TestEnum.class, \"HONDA\")).hasValue(TestEnum.HONDA);\n",
        "56": "    assertThat(Enums.getIfPresent(TestEnum.class, \"POODLE\")).hasValue(TestEnum.POODLE);\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  public void testGetIfPresent_caseSensitive() {\n",
        "60": "    assertThat(Enums.getIfPresent(TestEnum.class, \"cHEETO\")).isAbsent();\n",
        "61": "    assertThat(Enums.getIfPresent(TestEnum.class, \"Honda\")).isAbsent();\n",
        "62": "    assertThat(Enums.getIfPresent(TestEnum.class, \"poodlE\")).isAbsent();\n",
        "63": "  }\n",
        "64": "\n",
        "65": "  public void testGetIfPresent_whenNoMatchingConstant() {\n",
        "66": "    assertThat(Enums.getIfPresent(TestEnum.class, \"WOMBAT\")).isAbsent();\n",
        "67": "  }\n",
        "68": "\n",
        "69": "  // Create a second ClassLoader and use it to get a second version of the TestEnum class.\n",
        "70": "  // Run Enums.getIfPresent on that other TestEnum and then return a WeakReference containing the\n",
        "71": "  // new ClassLoader. If Enums.getIfPresent does caching that prevents the shadow TestEnum\n",
        "72": "  // (and therefore its ClassLoader) from being unloaded, then this WeakReference will never be\n",
        "73": "  // cleared.\n",
        "74": "\n",
        "75": "  public void testStringConverter_convert() {\n",
        "76": "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n",
        "77": "    assertEquals(TestEnum.CHEETO, converter.convert(\"CHEETO\"));\n",
        "78": "    assertEquals(TestEnum.HONDA, converter.convert(\"HONDA\"));\n",
        "79": "    assertEquals(TestEnum.POODLE, converter.convert(\"POODLE\"));\n",
        "80": "    assertNull(converter.convert(null));\n",
        "81": "    assertNull(converter.reverse().convert(null));\n",
        "82": "  }\n",
        "83": "\n",
        "84": "  public void testStringConverter_convertError() {\n",
        "85": "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n",
        "86": "    try {\n",
        "87": "      converter.convert(\"xxx\");\n",
        "88": "      fail();\n",
        "89": "    } catch (IllegalArgumentException expected) {\n",
        "90": "    }\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  public void testStringConverter_reverse() {\n",
        "94": "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n",
        "95": "    assertEquals(\"CHEETO\", converter.reverse().convert(TestEnum.CHEETO));\n",
        "96": "    assertEquals(\"HONDA\", converter.reverse().convert(TestEnum.HONDA));\n",
        "97": "    assertEquals(\"POODLE\", converter.reverse().convert(TestEnum.POODLE));\n",
        "98": "  }\n",
        "99": "\n",
        "100": "  public void testStringConverter_nullConversions() {\n",
        "101": "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n",
        "102": "    assertNull(converter.convert(null));\n",
        "103": "    assertNull(converter.reverse().convert(null));\n",
        "104": "  }\n",
        "105": "\n",
        "106": "  public void testStringConverter_serialization() {\n",
        "107": "    SerializableTester.reserializeAndAssert(Enums.stringConverter(TestEnum.class));\n",
        "108": "  }\n",
        "109": "\n",
        "110": "  @Retention(RetentionPolicy.RUNTIME)\n",
        "111": "  private @interface ExampleAnnotation {}\n",
        "112": "\n",
        "113": "  private enum AnEnum {\n",
        "114": "    @ExampleAnnotation FOO,\n",
        "115": "    BAR\n",
        "116": "  }\n",
        "117": "}\n",
        "118": "\n"
    }
}