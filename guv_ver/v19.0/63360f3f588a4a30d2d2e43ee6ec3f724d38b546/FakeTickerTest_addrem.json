{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.testing;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "\n",
        "21": "import junit.framework.TestCase;\n",
        "22": "\n",
        "23": "import java.util.EnumSet;\n",
        "24": "import java.util.concurrent.TimeUnit;\n",
        "25": "\n",
        "26": "/**\n",
        "27": " * Unit test for {@link FakeTicker}.\n",
        "28": " *\n",
        "29": " * @author Jige Yu\n",
        "30": " */\n",
        "31": "@GwtCompatible(emulated = true)\n",
        "32": "public class FakeTickerTest extends TestCase {\n",
        "33": "\n",
        "34": "  public void testAdvance() {\n",
        "35": "    FakeTicker ticker = new FakeTicker();\n",
        "36": "    assertEquals(0, ticker.read());\n",
        "37": "    assertSame(ticker, ticker.advance(10));\n",
        "38": "    assertEquals(10, ticker.read());\n",
        "39": "    ticker.advance(1, TimeUnit.MILLISECONDS);\n",
        "40": "    assertEquals(1000010L, ticker.read());\n",
        "41": "  }\n",
        "42": "\n",
        "43": "  public void testAutoIncrementStep_returnsSameInstance() {\n",
        "44": "    FakeTicker ticker = new FakeTicker();\n",
        "45": "    assertSame(ticker, ticker.setAutoIncrementStep(10, TimeUnit.NANOSECONDS));\n",
        "46": "  }\n",
        "47": "\n",
        "48": "  public void testAutoIncrementStep_nanos() {\n",
        "49": "    FakeTicker ticker = new FakeTicker().setAutoIncrementStep(10, TimeUnit.NANOSECONDS);\n",
        "50": "    assertEquals(0, ticker.read());\n",
        "51": "    assertEquals(10, ticker.read());\n",
        "52": "    assertEquals(20, ticker.read());\n",
        "53": "  }\n",
        "54": "\n",
        "55": "  public void testAutoIncrementStep_millis() {\n",
        "56": "    FakeTicker ticker = new FakeTicker().setAutoIncrementStep(1, TimeUnit.MILLISECONDS);\n",
        "57": "    assertEquals(0, ticker.read());\n",
        "58": "    assertEquals(1000000, ticker.read());\n",
        "59": "    assertEquals(2000000, ticker.read());\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  public void testAutoIncrementStep_seconds() {\n",
        "63": "    FakeTicker ticker = new FakeTicker().setAutoIncrementStep(3, TimeUnit.SECONDS);\n",
        "64": "    assertEquals(0, ticker.read());\n",
        "65": "    assertEquals(3000000000L, ticker.read());\n",
        "66": "    assertEquals(6000000000L, ticker.read());\n",
        "67": "  }\n",
        "68": "\n",
        "69": "  public void testAutoIncrementStep_resetToZero() {\n",
        "70": "    FakeTicker ticker = new FakeTicker().setAutoIncrementStep(10, TimeUnit.NANOSECONDS);\n",
        "71": "    assertEquals(0, ticker.read());\n",
        "72": "    assertEquals(10, ticker.read());\n",
        "73": "    assertEquals(20, ticker.read());\n",
        "74": "\n",
        "75": "    for (TimeUnit timeUnit : EnumSet.allOf(TimeUnit.class)) {\n",
        "76": "      ticker.setAutoIncrementStep(0, timeUnit);\n",
        "77": "      assertEquals(\n",
        "78": "          \"Expected no auto-increment when setting autoIncrementStep to 0 \" + timeUnit,\n",
        "79": "          30, ticker.read());\n",
        "80": "    }\n",
        "81": "  }\n",
        "82": "\n",
        "83": "  public void testAutoIncrement_negative() {\n",
        "84": "    FakeTicker ticker = new FakeTicker();\n",
        "85": "    try {\n",
        "86": "      ticker.setAutoIncrementStep(-1, TimeUnit.NANOSECONDS);\n",
        "87": "      fail(\"Expected IllegalArgumentException\");\n",
        "88": "    } catch (IllegalArgumentException expected) {\n",
        "89": "    }\n",
        "90": "  }\n",
        "91": "}\n",
        "92": "\n"
    }
}