{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2010 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "6": " *\n",
        "7": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "8": " *\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the\n",
        "10": " * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n",
        "11": " * express or implied. See the License for the specific language governing permissions and\n",
        "12": " * limitations under the License.\n",
        "13": " */\n",
        "14": "\n",
        "15": "package com.google.common.collect;\n",
        "16": "\n",
        "17": "import com.google.common.annotations.GwtCompatible;\n",
        "18": "import com.google.common.collect.SortedLists.KeyAbsentBehavior;\n",
        "19": "import com.google.common.collect.SortedLists.KeyPresentBehavior;\n",
        "20": "\n",
        "21": "import junit.framework.TestCase;\n",
        "22": "\n",
        "23": "import java.util.List;\n",
        "24": "\n",
        "25": "/**\n",
        "26": " * Tests for SortedLists.\n",
        "27": " *\n",
        "28": " * @author Louis Wasserman\n",
        "29": " */\n",
        "30": "@GwtCompatible(emulated = true)\n",
        "31": "public class SortedListsTest extends TestCase {\n",
        "32": "  private static final ImmutableList<Integer> LIST_WITH_DUPS =\n",
        "33": "      ImmutableList.of(1, 1, 2, 4, 4, 4, 8);\n",
        "34": "\n",
        "35": "  private static final ImmutableList<Integer> LIST_WITHOUT_DUPS = ImmutableList.of(1, 2, 4, 8);\n",
        "36": "\n",
        "37": "  void assertModelAgrees(List<Integer> list, Integer key, int answer,\n",
        "38": "      KeyPresentBehavior presentBehavior, KeyAbsentBehavior absentBehavior) {\n",
        "39": "    switch (presentBehavior) {\n",
        "40": "      case FIRST_PRESENT:\n",
        "41": "        if (list.contains(key)) {\n",
        "42": "          assertEquals(list.indexOf(key), answer);\n",
        "43": "          return;\n",
        "44": "        }\n",
        "45": "        break;\n",
        "46": "      case LAST_PRESENT:\n",
        "47": "        if (list.contains(key)) {\n",
        "48": "          assertEquals(list.lastIndexOf(key), answer);\n",
        "49": "          return;\n",
        "50": "        }\n",
        "51": "        break;\n",
        "52": "      case ANY_PRESENT:\n",
        "53": "        if (list.contains(key)) {\n",
        "54": "          assertEquals(key, list.get(answer));\n",
        "55": "          return;\n",
        "56": "        }\n",
        "57": "        break;\n",
        "58": "      case FIRST_AFTER:\n",
        "59": "        if (list.contains(key)) {\n",
        "60": "          assertEquals(list.lastIndexOf(key) + 1, answer);\n",
        "61": "          return;\n",
        "62": "        }\n",
        "63": "        break;\n",
        "64": "      case LAST_BEFORE:\n",
        "65": "        if (list.contains(key)) {\n",
        "66": "          assertEquals(list.indexOf(key) - 1, answer);\n",
        "67": "          return;\n",
        "68": "        }\n",
        "69": "        break;\n",
        "70": "      default:\n",
        "71": "        throw new AssertionError();\n",
        "72": "    }\n",
        "73": "    // key is not present\n",
        "74": "    int nextHigherIndex = list.size();\n",
        "75": "    for (int i = list.size() - 1; i >= 0 && list.get(i) > key; i--) {\n",
        "76": "      nextHigherIndex = i;\n",
        "77": "    }\n",
        "78": "    switch (absentBehavior) {\n",
        "79": "      case NEXT_LOWER:\n",
        "80": "        assertEquals(nextHigherIndex - 1, answer);\n",
        "81": "        return;\n",
        "82": "      case NEXT_HIGHER:\n",
        "83": "        assertEquals(nextHigherIndex, answer);\n",
        "84": "        return;\n",
        "85": "      case INVERTED_INSERTION_INDEX:\n",
        "86": "        assertEquals(-1 - nextHigherIndex, answer);\n",
        "87": "        return;\n",
        "88": "      default:\n",
        "89": "        throw new AssertionError();\n",
        "90": "    }\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  public void testWithoutDups() {\n",
        "94": "    for (KeyPresentBehavior presentBehavior : KeyPresentBehavior.values()) {\n",
        "95": "      for (KeyAbsentBehavior absentBehavior : KeyAbsentBehavior.values()) {\n",
        "96": "        for (int key = 0; key <= 10; key++) {\n",
        "97": "          assertModelAgrees(LIST_WITHOUT_DUPS, key,\n",
        "98": "              SortedLists.binarySearch(LIST_WITHOUT_DUPS, key, presentBehavior, absentBehavior),\n",
        "99": "              presentBehavior, absentBehavior);\n",
        "100": "        }\n",
        "101": "      }\n",
        "102": "    }\n",
        "103": "  }\n",
        "104": "\n",
        "105": "  public void testWithDups() {\n",
        "106": "    for (KeyPresentBehavior presentBehavior : KeyPresentBehavior.values()) {\n",
        "107": "      for (KeyAbsentBehavior absentBehavior : KeyAbsentBehavior.values()) {\n",
        "108": "        for (int key = 0; key <= 10; key++) {\n",
        "109": "          assertModelAgrees(LIST_WITH_DUPS, key,\n",
        "110": "              SortedLists.binarySearch(LIST_WITH_DUPS, key, presentBehavior, absentBehavior),\n",
        "111": "              presentBehavior, absentBehavior);\n",
        "112": "        }\n",
        "113": "      }\n",
        "114": "    }\n",
        "115": "  }\n",
        "116": "}\n",
        "117": "\n"
    }
}