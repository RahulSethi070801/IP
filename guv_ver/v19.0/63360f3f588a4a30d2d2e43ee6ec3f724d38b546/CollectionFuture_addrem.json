{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2006 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "6": " *\n",
        "7": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "8": " *\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "13": " */\n",
        "14": "\n",
        "15": "package com.google.common.util.concurrent;\n",
        "16": "\n",
        "17": "import static com.google.common.base.Preconditions.checkState;\n",
        "18": "import static com.google.common.collect.Lists.newArrayListWithCapacity;\n",
        "19": "import static java.util.Collections.unmodifiableList;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.base.Optional;\n",
        "23": "import com.google.common.collect.ImmutableCollection;\n",
        "24": "import com.google.common.collect.ImmutableList;\n",
        "25": "import com.google.common.collect.Lists;\n",
        "26": "import com.google.j2objc.annotations.WeakOuter;\n",
        "27": "\n",
        "28": "import java.util.List;\n",
        "29": "\n",
        "30": "import javax.annotation.Nullable;\n",
        "31": "\n",
        "32": "/**\n",
        "33": " * Aggregate future that collects (stores) results of each future.\n",
        "34": " */\n",
        "35": "@GwtCompatible(emulated = true)\n",
        "36": "abstract class CollectionFuture<V, C> extends AggregateFuture<V, C> {\n",
        "37": "\n",
        "38": "  @WeakOuter\n",
        "39": "  abstract class CollectionFutureRunningState extends RunningState {\n",
        "40": "    private List<Optional<V>> values;\n",
        "41": "\n",
        "42": "    CollectionFutureRunningState(\n",
        "43": "        ImmutableCollection<? extends ListenableFuture<? extends V>> futures,\n",
        "44": "        boolean allMustSucceed) {\n",
        "45": "      super(futures, allMustSucceed, true);\n",
        "46": "\n",
        "47": "      this.values =\n",
        "48": "          futures.isEmpty()\n",
        "49": "              ? ImmutableList.<Optional<V>>of()\n",
        "50": "              : Lists.<Optional<V>>newArrayListWithCapacity(futures.size());\n",
        "51": "\n",
        "52": "      // Populate the results list with null initially.\n",
        "53": "      for (int i = 0; i < futures.size(); ++i) {\n",
        "54": "        values.add(null);\n",
        "55": "      }\n",
        "56": "    }\n",
        "57": "\n",
        "58": "    @Override\n",
        "59": "    final void collectOneValue(boolean allMustSucceed, int index, @Nullable V returnValue) {\n",
        "60": "      List<Optional<V>> localValues = values;\n",
        "61": "\n",
        "62": "      if (localValues != null) {\n",
        "63": "        localValues.set(index, Optional.fromNullable(returnValue));\n",
        "64": "      } else {\n",
        "65": "        // Some other future failed or has been cancelled, causing this one to also be cancelled or\n",
        "66": "        // have an exception set. This should only happen if allMustSucceed is true or if the output\n",
        "67": "        // itself has been cancelled.\n",
        "68": "        checkState(\n",
        "69": "            allMustSucceed || isCancelled(), \"Future was done before all dependencies completed\");\n",
        "70": "      }\n",
        "71": "    }\n",
        "72": "\n",
        "73": "    @Override\n",
        "74": "    final void handleAllCompleted() {\n",
        "75": "      List<Optional<V>> localValues = values;\n",
        "76": "      if (localValues != null) {\n",
        "77": "        set(combine(localValues));\n",
        "78": "      } else {\n",
        "79": "        checkState(isDone());\n",
        "80": "      }\n",
        "81": "    }\n",
        "82": "\n",
        "83": "    @Override\n",
        "84": "    void releaseResourcesAfterFailure() {\n",
        "85": "      super.releaseResourcesAfterFailure();\n",
        "86": "      this.values = null;\n",
        "87": "    }\n",
        "88": "\n",
        "89": "    abstract C combine(List<Optional<V>> values);\n",
        "90": "  }\n",
        "91": "\n",
        "92": "  /** Used for {@link Futures#allAsList} and {@link Futures#successfulAsList}. */\n",
        "93": "  static final class ListFuture<V> extends CollectionFuture<V, List<V>> {\n",
        "94": "    ListFuture(\n",
        "95": "        ImmutableCollection<? extends ListenableFuture<? extends V>> futures,\n",
        "96": "        boolean allMustSucceed) {\n",
        "97": "      init(new ListFutureRunningState(futures, allMustSucceed));\n",
        "98": "    }\n",
        "99": "\n",
        "100": "    private final class ListFutureRunningState extends CollectionFutureRunningState {\n",
        "101": "      ListFutureRunningState(\n",
        "102": "          ImmutableCollection<? extends ListenableFuture<? extends V>> futures,\n",
        "103": "          boolean allMustSucceed) {\n",
        "104": "        super(futures, allMustSucceed);\n",
        "105": "      }\n",
        "106": "\n",
        "107": "      @Override\n",
        "108": "      public List<V> combine(List<Optional<V>> values) {\n",
        "109": "        List<V> result = newArrayListWithCapacity(values.size());\n",
        "110": "        for (Optional<V> element : values) {\n",
        "111": "          result.add(element != null ? element.orNull() : null);\n",
        "112": "        }\n",
        "113": "        return unmodifiableList(result);\n",
        "114": "      }\n",
        "115": "    }\n",
        "116": "  }\n",
        "117": "}\n",
        "118": "\n"
    }
}