{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.testers;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "20": "import static com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_KEYS;\n",
        "21": "import static com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_VALUES;\n",
        "22": "import static com.google.common.collect.testing.features.MapFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION;\n",
        "23": "import static com.google.common.collect.testing.features.MapFeature.SUPPORTS_PUT;\n",
        "24": "import static java.util.Collections.singletonList;\n",
        "25": "\n",
        "26": "import com.google.common.annotations.GwtCompatible;\n",
        "27": "import com.google.common.collect.testing.AbstractMapTester;\n",
        "28": "import com.google.common.collect.testing.MinimalCollection;\n",
        "29": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "30": "import com.google.common.collect.testing.features.MapFeature;\n",
        "31": "\n",
        "32": "import java.util.Collections;\n",
        "33": "import java.util.ConcurrentModificationException;\n",
        "34": "import java.util.Iterator;\n",
        "35": "import java.util.LinkedHashMap;\n",
        "36": "import java.util.List;\n",
        "37": "import java.util.Map;\n",
        "38": "import java.util.Map.Entry;\n",
        "39": "\n",
        "40": "/**\n",
        "41": " * A generic JUnit test which tests {@code putAll} operations on a map. Can't be\n",
        "42": " * invoked directly; please see\n",
        "43": " * {@link com.google.common.collect.testing.MapTestSuiteBuilder}.\n",
        "44": " *\n",
        "45": " * @author Chris Povirk\n",
        "46": " * @author Kevin Bourrillion\n",
        "47": " */\n",
        "48": "@SuppressWarnings(\"unchecked\") // too many \"unchecked generic array creations\"\n",
        "49": "@GwtCompatible(emulated = true)\n",
        "50": "public class MapPutAllTester<K, V> extends AbstractMapTester<K, V> {\n",
        "51": "  private List<Entry<K, V>> containsNullKey;\n",
        "52": "  private List<Entry<K, V>> containsNullValue;\n",
        "53": "\n",
        "54": "  @Override public void setUp() throws Exception {\n",
        "55": "    super.setUp();\n",
        "56": "    containsNullKey = singletonList(entry(null, v3()));\n",
        "57": "    containsNullValue = singletonList(entry(k3(), null));\n",
        "58": "  }\n",
        "59": "\n",
        "60": "  @MapFeature.Require(SUPPORTS_PUT)\n",
        "61": "  public void testPutAll_supportedNothing() {\n",
        "62": "    getMap().putAll(emptyMap());\n",
        "63": "    expectUnchanged();\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  @MapFeature.Require(absent = SUPPORTS_PUT)\n",
        "67": "  public void testPutAll_unsupportedNothing() {\n",
        "68": "    try {\n",
        "69": "      getMap().putAll(emptyMap());\n",
        "70": "    } catch (UnsupportedOperationException tolerated) {\n",
        "71": "    }\n",
        "72": "    expectUnchanged();\n",
        "73": "  }\n",
        "74": "\n",
        "75": "  @MapFeature.Require(SUPPORTS_PUT)\n",
        "76": "  public void testPutAll_supportedNonePresent() {\n",
        "77": "    putAll(createDisjointCollection());\n",
        "78": "    expectAdded(e3(), e4());\n",
        "79": "  }\n",
        "80": "\n",
        "81": "  @MapFeature.Require(absent = SUPPORTS_PUT)\n",
        "82": "  public void testPutAll_unsupportedNonePresent() {\n",
        "83": "    try {\n",
        "84": "      putAll(createDisjointCollection());\n",
        "85": "      fail(\"putAll(nonePresent) should throw\");\n",
        "86": "    } catch (UnsupportedOperationException expected) {\n",
        "87": "    }\n",
        "88": "    expectUnchanged();\n",
        "89": "    expectMissing(e3(), e4());\n",
        "90": "  }\n",
        "91": "\n",
        "92": "  @MapFeature.Require(SUPPORTS_PUT)\n",
        "93": "  @CollectionSize.Require(absent = ZERO)\n",
        "94": "  public void testPutAll_supportedSomePresent() {\n",
        "95": "    putAll(MinimalCollection.of(e3(), e0()));\n",
        "96": "    expectAdded(e3());\n",
        "97": "  }\n",
        "98": "\n",
        "99": "  @MapFeature.Require({ FAILS_FAST_ON_CONCURRENT_MODIFICATION,\n",
        "100": "      SUPPORTS_PUT })\n",
        "101": "  @CollectionSize.Require(absent = ZERO)\n",
        "102": "  public void testPutAllSomePresentConcurrentWithEntrySetIteration() {\n",
        "103": "    try {\n",
        "104": "      Iterator<Entry<K, V>> iterator = getMap().entrySet().iterator();\n",
        "105": "      putAll(MinimalCollection.of(e3(), e0()));\n",
        "106": "      iterator.next();\n",
        "107": "      fail(\"Expected ConcurrentModificationException\");\n",
        "108": "    } catch (ConcurrentModificationException expected) {\n",
        "109": "      // success\n",
        "110": "    }\n",
        "111": "  }\n",
        "112": "\n",
        "113": "  @MapFeature.Require(absent = SUPPORTS_PUT)\n",
        "114": "  @CollectionSize.Require(absent = ZERO)\n",
        "115": "  public void testPutAll_unsupportedSomePresent() {\n",
        "116": "    try {\n",
        "117": "      putAll(MinimalCollection.of(e3(), e0()));\n",
        "118": "      fail(\"putAll(somePresent) should throw\");\n",
        "119": "    } catch (UnsupportedOperationException expected) {\n",
        "120": "    }\n",
        "121": "    expectUnchanged();\n",
        "122": "  }\n",
        "123": "\n",
        "124": "  @MapFeature.Require(absent = SUPPORTS_PUT)\n",
        "125": "  @CollectionSize.Require(absent = ZERO)\n",
        "126": "  public void testPutAll_unsupportedAllPresent() {\n",
        "127": "    try {\n",
        "128": "      putAll(MinimalCollection.of(e0()));\n",
        "129": "    } catch (UnsupportedOperationException tolerated) {\n",
        "130": "    }\n",
        "131": "    expectUnchanged();\n",
        "132": "  }\n",
        "133": "\n",
        "134": "  @MapFeature.Require({SUPPORTS_PUT,\n",
        "135": "      ALLOWS_NULL_KEYS})\n",
        "136": "  public void testPutAll_nullKeySupported() {\n",
        "137": "    putAll(containsNullKey);\n",
        "138": "    expectAdded(containsNullKey.get(0));\n",
        "139": "  }\n",
        "140": "\n",
        "141": "  @MapFeature.Require(value = SUPPORTS_PUT,\n",
        "142": "      absent = ALLOWS_NULL_KEYS)\n",
        "143": "  public void testPutAll_nullKeyUnsupported() {\n",
        "144": "    try {\n",
        "145": "      putAll(containsNullKey);\n",
        "146": "      fail(\"putAll(containsNullKey) should throw\");\n",
        "147": "    } catch (NullPointerException expected) {\n",
        "148": "    }\n",
        "149": "    expectUnchanged();\n",
        "150": "    expectNullKeyMissingWhenNullKeysUnsupported(\n",
        "151": "        \"Should not contain null key after unsupported \" +\n",
        "152": "        \"putAll(containsNullKey)\");\n",
        "153": "  }\n",
        "154": "\n",
        "155": "  @MapFeature.Require({SUPPORTS_PUT,\n",
        "156": "      ALLOWS_NULL_VALUES})\n",
        "157": "  public void testPutAll_nullValueSupported() {\n",
        "158": "    putAll(containsNullValue);\n",
        "159": "    expectAdded(containsNullValue.get(0));\n",
        "160": "  }\n",
        "161": "\n",
        "162": "  @MapFeature.Require(value = SUPPORTS_PUT,\n",
        "163": "      absent = ALLOWS_NULL_VALUES)\n",
        "164": "  public void testPutAll_nullValueUnsupported() {\n",
        "165": "    try {\n",
        "166": "      putAll(containsNullValue);\n",
        "167": "      fail(\"putAll(containsNullValue) should throw\");\n",
        "168": "    } catch (NullPointerException expected) {\n",
        "169": "    }\n",
        "170": "    expectUnchanged();\n",
        "171": "    expectNullValueMissingWhenNullValuesUnsupported(\n",
        "172": "        \"Should not contain null value after unsupported \" +\n",
        "173": "        \"putAll(containsNullValue)\");\n",
        "174": "  }\n",
        "175": "\n",
        "176": "  @MapFeature.Require(SUPPORTS_PUT)\n",
        "177": "  public void testPutAll_nullCollectionReference() {\n",
        "178": "    try {\n",
        "179": "      getMap().putAll(null);\n",
        "180": "      fail(\"putAll(null) should throw NullPointerException\");\n",
        "181": "    } catch (NullPointerException expected) {\n",
        "182": "    }\n",
        "183": "  }\n",
        "184": "\n",
        "185": "  private Map<K, V> emptyMap() {\n",
        "186": "    return Collections.emptyMap();\n",
        "187": "  }\n",
        "188": "\n",
        "189": "  private void putAll(Iterable<Entry<K, V>> entries) {\n",
        "190": "    Map<K, V> map = new LinkedHashMap<K, V>();\n",
        "191": "    for (Entry<K, V> entry : entries) {\n",
        "192": "      map.put(entry.getKey(), entry.getValue());\n",
        "193": "    }\n",
        "194": "    getMap().putAll(map);\n",
        "195": "  }\n",
        "196": "}\n",
        "197": "\n"
    }
}