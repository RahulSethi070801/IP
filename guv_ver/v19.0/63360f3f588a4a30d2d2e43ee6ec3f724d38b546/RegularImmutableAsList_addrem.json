{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2012 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.j2objc.annotations.Weak;\n",
        "21": "\n",
        "22": "/**\n",
        "23": " * An {@link ImmutableAsList} implementation specialized for when the delegate collection is\n",
        "24": " * already backed by an {@code ImmutableList} or array.\n",
        "25": " *\n",
        "26": " * @author Louis Wasserman\n",
        "27": " */\n",
        "28": "@GwtCompatible(emulated = true)\n",
        "29": "@SuppressWarnings(\"serial\") // uses writeReplace, not default serialization\n",
        "30": "class RegularImmutableAsList<E> extends ImmutableAsList<E> {\n",
        "31": "  @Weak private final ImmutableCollection<E> delegate;\n",
        "32": "  private final ImmutableList<? extends E> delegateList;\n",
        "33": "\n",
        "34": "  RegularImmutableAsList(ImmutableCollection<E> delegate, ImmutableList<? extends E> delegateList) {\n",
        "35": "    this.delegate = delegate;\n",
        "36": "    this.delegateList = delegateList;\n",
        "37": "  }\n",
        "38": "\n",
        "39": "  RegularImmutableAsList(ImmutableCollection<E> delegate, Object[] array) {\n",
        "40": "    this(delegate, ImmutableList.<E>asImmutableList(array));\n",
        "41": "  }\n",
        "42": "\n",
        "43": "  @Override\n",
        "44": "  ImmutableCollection<E> delegateCollection() {\n",
        "45": "    return delegate;\n",
        "46": "  }\n",
        "47": "\n",
        "48": "  ImmutableList<? extends E> delegateList() {\n",
        "49": "    return delegateList;\n",
        "50": "  }\n",
        "51": "\n",
        "52": "  @SuppressWarnings(\"unchecked\") // safe covariant cast!\n",
        "53": "  @Override\n",
        "54": "  public UnmodifiableListIterator<E> listIterator(int index) {\n",
        "55": "    return (UnmodifiableListIterator<E>) delegateList.listIterator(index);\n",
        "56": "  }\n",
        "57": "\n",
        "58": "  @Override\n",
        "59": "  public E get(int index) {\n",
        "60": "    return delegateList.get(index);\n",
        "61": "  }\n",
        "62": "}\n",
        "63": "\n"
    }
}