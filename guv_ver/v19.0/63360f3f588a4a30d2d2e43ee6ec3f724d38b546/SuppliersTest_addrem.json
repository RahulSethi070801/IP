{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.base;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.collect.Lists;\n",
        "21": "import com.google.common.testing.EqualsTester;\n",
        "22": "\n",
        "23": "import junit.framework.TestCase;\n",
        "24": "\n",
        "25": "import java.io.Serializable;\n",
        "26": "import java.util.ArrayList;\n",
        "27": "import java.util.List;\n",
        "28": "\n",
        "29": "/**\n",
        "30": " * Tests com.google.common.base.Suppliers.\n",
        "31": " *\n",
        "32": " * @author Laurence Gonsalves\n",
        "33": " * @author Harry Heymann\n",
        "34": " */\n",
        "35": "@GwtCompatible(emulated = true)\n",
        "36": "public class SuppliersTest extends TestCase {\n",
        "37": "  public void testCompose() {\n",
        "38": "    Supplier<Integer> fiveSupplier = new Supplier<Integer>() {\n",
        "39": "      @Override\n",
        "40": "      public Integer get() {\n",
        "41": "        return 5;\n",
        "42": "      }\n",
        "43": "    };\n",
        "44": "\n",
        "45": "    Function<Number, Integer> intValueFunction =\n",
        "46": "        new Function<Number, Integer>() {\n",
        "47": "          @Override\n",
        "48": "          public Integer apply(Number x) {\n",
        "49": "            return x.intValue();\n",
        "50": "          }\n",
        "51": "        };\n",
        "52": "\n",
        "53": "    Supplier<Integer> squareSupplier = Suppliers.compose(intValueFunction,\n",
        "54": "        fiveSupplier);\n",
        "55": "\n",
        "56": "    assertEquals(Integer.valueOf(5), squareSupplier.get());\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  public void testComposeWithLists() {\n",
        "60": "    Supplier<ArrayList<Integer>> listSupplier\n",
        "61": "        = new Supplier<ArrayList<Integer>>() {\n",
        "62": "      @Override\n",
        "63": "      public ArrayList<Integer> get() {\n",
        "64": "        return Lists.newArrayList(0);\n",
        "65": "      }\n",
        "66": "    };\n",
        "67": "\n",
        "68": "    Function<List<Integer>, List<Integer>> addElementFunction =\n",
        "69": "        new Function<List<Integer>, List<Integer>>() {\n",
        "70": "          @Override\n",
        "71": "          public List<Integer> apply(List<Integer> list) {\n",
        "72": "            ArrayList<Integer> result = Lists.newArrayList(list);\n",
        "73": "            result.add(1);\n",
        "74": "            return result;\n",
        "75": "          }\n",
        "76": "        };\n",
        "77": "\n",
        "78": "    Supplier<List<Integer>> addSupplier = Suppliers.compose(addElementFunction,\n",
        "79": "        listSupplier);\n",
        "80": "\n",
        "81": "    List<Integer> result = addSupplier.get();\n",
        "82": "    assertEquals(Integer.valueOf(0), result.get(0));\n",
        "83": "    assertEquals(Integer.valueOf(1), result.get(1));\n",
        "84": "  }\n",
        "85": "\n",
        "86": "  static class CountingSupplier implements Supplier<Integer>, Serializable {\n",
        "87": "    private static final long serialVersionUID = 0L;\n",
        "88": "    transient int calls = 0;\n",
        "89": "    @Override\n",
        "90": "    public Integer get() {\n",
        "91": "      calls++;\n",
        "92": "      return calls * 10;\n",
        "93": "    }\n",
        "94": "  }\n",
        "95": "\n",
        "96": "  public void testMemoize() {\n",
        "97": "    CountingSupplier countingSupplier = new CountingSupplier();\n",
        "98": "    Supplier<Integer> memoizedSupplier = Suppliers.memoize(countingSupplier);\n",
        "99": "    checkMemoize(countingSupplier, memoizedSupplier);\n",
        "100": "  }\n",
        "101": "\n",
        "102": "  public void testMemoize_redudantly() {\n",
        "103": "    CountingSupplier countingSupplier = new CountingSupplier();\n",
        "104": "    Supplier<Integer> memoizedSupplier = Suppliers.memoize(countingSupplier);\n",
        "105": "    assertSame(memoizedSupplier, Suppliers.memoize(memoizedSupplier));\n",
        "106": "  }\n",
        "107": "\n",
        "108": "  private void checkMemoize(\n",
        "109": "      CountingSupplier countingSupplier, Supplier<Integer> memoizedSupplier) {\n",
        "110": "    // the underlying supplier hasn't executed yet\n",
        "111": "    assertEquals(0, countingSupplier.calls);\n",
        "112": "\n",
        "113": "    assertEquals(10, (int) memoizedSupplier.get());\n",
        "114": "\n",
        "115": "    // now it has\n",
        "116": "    assertEquals(1, countingSupplier.calls);\n",
        "117": "\n",
        "118": "    assertEquals(10, (int) memoizedSupplier.get());\n",
        "119": "\n",
        "120": "    // it still should only have executed once due to memoization\n",
        "121": "    assertEquals(1, countingSupplier.calls);\n",
        "122": "  }\n",
        "123": "\n",
        "124": "  public void testMemoizeExceptionThrown() {\n",
        "125": "    Supplier<Integer> exceptingSupplier = new Supplier<Integer>() {\n",
        "126": "      @Override\n",
        "127": "      public Integer get() {\n",
        "128": "        throw new NullPointerException();\n",
        "129": "      }\n",
        "130": "    };\n",
        "131": "\n",
        "132": "    Supplier<Integer> memoizedSupplier = Suppliers.memoize(exceptingSupplier);\n",
        "133": "\n",
        "134": "    // call get() twice to make sure that memoization doesn't interfere\n",
        "135": "    // with throwing the exception\n",
        "136": "    for (int i = 0; i < 2; i++) {\n",
        "137": "      try {\n",
        "138": "        memoizedSupplier.get();\n",
        "139": "        fail(\"failed to throw NullPointerException\");\n",
        "140": "      } catch (NullPointerException e) {\n",
        "141": "        // this is what should happen\n",
        "142": "      }\n",
        "143": "    }\n",
        "144": "  }\n",
        "145": "\n",
        "146": "  public void testOfInstanceSuppliesSameInstance() {\n",
        "147": "    Object toBeSupplied = new Object();\n",
        "148": "    Supplier<Object> objectSupplier = Suppliers.ofInstance(toBeSupplied);\n",
        "149": "    assertSame(toBeSupplied,objectSupplier.get());\n",
        "150": "    assertSame(toBeSupplied,objectSupplier.get()); // idempotent\n",
        "151": "  }\n",
        "152": "\n",
        "153": "  public void testOfInstanceSuppliesNull() {\n",
        "154": "    Supplier<Integer> nullSupplier = Suppliers.ofInstance(null);\n",
        "155": "    assertNull(nullSupplier.get());\n",
        "156": "  }\n",
        "157": "\n",
        "158": "  public void testSupplierFunction() {\n",
        "159": "    Supplier<Integer> supplier = Suppliers.ofInstance(14);\n",
        "160": "    Function<Supplier<Integer>, Integer> supplierFunction =\n",
        "161": "        Suppliers.supplierFunction();\n",
        "162": "\n",
        "163": "    assertEquals(14, (int) supplierFunction.apply(supplier));\n",
        "164": "  }\n",
        "165": "\n",
        "166": "  public void testOfInstance_equals() {\n",
        "167": "    new EqualsTester()\n",
        "168": "        .addEqualityGroup(\n",
        "169": "            Suppliers.ofInstance(\"foo\"), Suppliers.ofInstance(\"foo\"))\n",
        "170": "        .addEqualityGroup(Suppliers.ofInstance(\"bar\"))\n",
        "171": "        .testEquals();\n",
        "172": "  }\n",
        "173": "\n",
        "174": "  public void testCompose_equals() {\n",
        "175": "    new EqualsTester()\n",
        "176": "        .addEqualityGroup(\n",
        "177": "            Suppliers.compose(Functions.constant(1), Suppliers.ofInstance(\"foo\")),\n",
        "178": "            Suppliers.compose(Functions.constant(1), Suppliers.ofInstance(\"foo\")))\n",
        "179": "        .addEqualityGroup(\n",
        "180": "            Suppliers.compose(Functions.constant(2), Suppliers.ofInstance(\"foo\")))\n",
        "181": "        .addEqualityGroup(\n",
        "182": "            Suppliers.compose(Functions.constant(1), Suppliers.ofInstance(\"bar\")))\n",
        "183": "        .testEquals();\n",
        "184": "  }\n",
        "185": "}\n",
        "186": "\n"
    }
}