{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2011 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.util.concurrent;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.base.Preconditions;\n",
        "23": "\n",
        "24": "import junit.framework.TestCase;\n",
        "25": "\n",
        "26": "import java.util.concurrent.CancellationException;\n",
        "27": "import java.util.concurrent.Executor;\n",
        "28": "import java.util.concurrent.TimeUnit;\n",
        "29": "\n",
        "30": "import javax.annotation.Nullable;\n",
        "31": "\n",
        "32": "/**\n",
        "33": " * Test for {@link FutureCallback}.\n",
        "34": " *\n",
        "35": " * @author Anthony Zana\n",
        "36": " */\n",
        "37": "@GwtCompatible(emulated = true)\n",
        "38": "public class FutureCallbackTest extends TestCase {\n",
        "39": "  public void testSameThreadSuccess() {\n",
        "40": "    SettableFuture<String> f = SettableFuture.create();\n",
        "41": "    MockCallback callback = new MockCallback(\"foo\");\n",
        "42": "    Futures.addCallback(f, callback);\n",
        "43": "    f.set(\"foo\");\n",
        "44": "  }\n",
        "45": "\n",
        "46": "  public void testExecutorSuccess() {\n",
        "47": "    CountingSameThreadExecutor ex = new CountingSameThreadExecutor();\n",
        "48": "    SettableFuture<String> f = SettableFuture.create();\n",
        "49": "    MockCallback callback = new MockCallback(\"foo\");\n",
        "50": "    Futures.addCallback(f, callback, ex);\n",
        "51": "    f.set(\"foo\");\n",
        "52": "    assertEquals(1, ex.runCount);\n",
        "53": "  }\n",
        "54": "\n",
        "55": "  // Error cases\n",
        "56": "  public void testSameThreadExecutionException() {\n",
        "57": "    SettableFuture<String> f = SettableFuture.create();\n",
        "58": "    Exception e = new IllegalArgumentException(\"foo not found\");\n",
        "59": "    MockCallback callback = new MockCallback(e);\n",
        "60": "    Futures.addCallback(f, callback);\n",
        "61": "    f.setException(e);\n",
        "62": "  }\n",
        "63": "\n",
        "64": "  public void testCancel() {\n",
        "65": "    SettableFuture<String> f = SettableFuture.create();\n",
        "66": "    FutureCallback<String> callback =\n",
        "67": "        new FutureCallback<String>() {\n",
        "68": "          private boolean called = false;\n",
        "69": "\n",
        "70": "          @Override\n",
        "71": "          public void onSuccess(String result) {\n",
        "72": "            fail(\"Was not expecting onSuccess() to be called.\");\n",
        "73": "          }\n",
        "74": "\n",
        "75": "          @Override\n",
        "76": "          public synchronized void onFailure(Throwable t) {\n",
        "77": "            assertFalse(called);\n",
        "78": "            assertThat(t).isInstanceOf(CancellationException.class);\n",
        "79": "            called = true;\n",
        "80": "          }\n",
        "81": "        };\n",
        "82": "    Futures.addCallback(f, callback);\n",
        "83": "    f.cancel(true);\n",
        "84": "  }\n",
        "85": "\n",
        "86": "  public void testThrowErrorFromGet() {\n",
        "87": "    Error error = new AssertionError(\"ASSERT!\");\n",
        "88": "    ListenableFuture<String> f = ThrowingFuture.throwingError(error);\n",
        "89": "    MockCallback callback = new MockCallback(error);\n",
        "90": "    Futures.addCallback(f, callback);\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  public void testRuntimeExeceptionFromGet() {\n",
        "94": "    RuntimeException e = new IllegalArgumentException(\"foo not found\");\n",
        "95": "    ListenableFuture<String> f = ThrowingFuture.throwingRuntimeException(e);\n",
        "96": "    MockCallback callback = new MockCallback(e);\n",
        "97": "    Futures.addCallback(f, callback);\n",
        "98": "  }\n",
        "99": "\n",
        "100": "  public void testWildcardFuture() {\n",
        "101": "    SettableFuture<String> settable = SettableFuture.create();\n",
        "102": "    ListenableFuture<?> f = settable;\n",
        "103": "    FutureCallback<Object> callback = new FutureCallback<Object>() {\n",
        "104": "      @Override\n",
        "105": "      public void onSuccess(Object result) {}\n",
        "106": "\n",
        "107": "      @Override\n",
        "108": "      public void onFailure(Throwable t) {}\n",
        "109": "    };\n",
        "110": "    Futures.addCallback(f, callback);\n",
        "111": "  }\n",
        "112": "\n",
        "113": "  private class CountingSameThreadExecutor implements Executor {\n",
        "114": "    int runCount = 0;\n",
        "115": "    @Override\n",
        "116": "    public void execute(Runnable command) {\n",
        "117": "      command.run();\n",
        "118": "      runCount++;\n",
        "119": "    }\n",
        "120": "  }\n",
        "121": "\n",
        "122": "  // TODO(user): Move to testing, unify with RuntimeExceptionThrowingFuture\n",
        "123": "\n",
        "124": "  /**\n",
        "125": "   * A {@link Future} implementation which always throws directly from calls to\n",
        "126": "   * get() (i.e. not wrapped in ExecutionException.\n",
        "127": "   * For just a normal Future failure, use {@link SettableFuture}).\n",
        "128": "   *\n",
        "129": "   * <p>Useful for testing the behavior of Future utilities against odd futures.\n",
        "130": "   *\n",
        "131": "   * @author Anthony Zana\n",
        "132": "   */\n",
        "133": "  private static class ThrowingFuture<V> implements ListenableFuture<V> {\n",
        "134": "    private final Error error;\n",
        "135": "    private final RuntimeException runtime;\n",
        "136": "\n",
        "137": "    public static <V> ListenableFuture<V> throwingError(Error error) {\n",
        "138": "      return new ThrowingFuture<V>(error);\n",
        "139": "    }\n",
        "140": "\n",
        "141": "    public static <V> ListenableFuture<V>\n",
        "142": "        throwingRuntimeException(RuntimeException e) {\n",
        "143": "      return new ThrowingFuture<V>(e);\n",
        "144": "    }\n",
        "145": "\n",
        "146": "    private ThrowingFuture(Error error) {\n",
        "147": "      this.error = Preconditions.checkNotNull(error);\n",
        "148": "      this.runtime = null;\n",
        "149": "    }\n",
        "150": "\n",
        "151": "    public ThrowingFuture(RuntimeException e) {\n",
        "152": "      this.runtime = Preconditions.checkNotNull(e);\n",
        "153": "      this.error = null;\n",
        "154": "    }\n",
        "155": "\n",
        "156": "    @Override\n",
        "157": "    public boolean cancel(boolean mayInterruptIfRunning) {\n",
        "158": "      return false;\n",
        "159": "    }\n",
        "160": "\n",
        "161": "    @Override\n",
        "162": "    public boolean isCancelled() {\n",
        "163": "      return false;\n",
        "164": "    }\n",
        "165": "\n",
        "166": "    @Override\n",
        "167": "    public boolean isDone() {\n",
        "168": "      return true;\n",
        "169": "    }\n",
        "170": "\n",
        "171": "    @Override\n",
        "172": "    public V get() {\n",
        "173": "      throwOnGet();\n",
        "174": "      throw new AssertionError(\"Unreachable\");\n",
        "175": "    }\n",
        "176": "\n",
        "177": "    @Override\n",
        "178": "    public V get(long timeout, TimeUnit unit) {\n",
        "179": "      throwOnGet();\n",
        "180": "      throw new AssertionError(\"Unreachable\");\n",
        "181": "    }\n",
        "182": "\n",
        "183": "    @Override\n",
        "184": "    public void addListener(Runnable listener, Executor executor) {\n",
        "185": "      executor.execute(listener);\n",
        "186": "    }\n",
        "187": "\n",
        "188": "    private void throwOnGet() {\n",
        "189": "      if (error != null) {\n",
        "190": "        throw error;\n",
        "191": "      } else {\n",
        "192": "        throw runtime;\n",
        "193": "      }\n",
        "194": "    }\n",
        "195": "  }\n",
        "196": "\n",
        "197": "  private final class MockCallback implements FutureCallback<String> {\n",
        "198": "    @Nullable private String value = null;\n",
        "199": "    @Nullable private Throwable failure = null;\n",
        "200": "    private boolean wasCalled = false;\n",
        "201": "\n",
        "202": "    MockCallback(String expectedValue) {\n",
        "203": "      this.value = expectedValue;\n",
        "204": "    }\n",
        "205": "\n",
        "206": "    public MockCallback(Throwable expectedFailure) {\n",
        "207": "      this.failure = expectedFailure;\n",
        "208": "    }\n",
        "209": "\n",
        "210": "    @Override\n",
        "211": "    public synchronized void onSuccess(String result) {\n",
        "212": "      assertFalse(wasCalled);\n",
        "213": "      wasCalled = true;\n",
        "214": "      assertEquals(value, result);\n",
        "215": "    }\n",
        "216": "\n",
        "217": "    @Override\n",
        "218": "    public synchronized void onFailure(Throwable t) {\n",
        "219": "      assertFalse(wasCalled);\n",
        "220": "      wasCalled = true;\n",
        "221": "      assertEquals(failure, t);\n",
        "222": "    }\n",
        "223": "  }\n",
        "224": "}\n"
    }
}