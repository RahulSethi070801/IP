{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "import static java.util.Arrays.asList;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "\n",
        "24": "import java.util.Arrays;\n",
        "25": "import java.util.Collection;\n",
        "26": "import java.util.Collections;\n",
        "27": "import java.util.Comparator;\n",
        "28": "import java.util.Iterator;\n",
        "29": "import java.util.NoSuchElementException;\n",
        "30": "import java.util.Set;\n",
        "31": "import java.util.SortedSet;\n",
        "32": "import java.util.TreeSet;\n",
        "33": "\n",
        "34": "/**\n",
        "35": " * Unit tests for {@link ImmutableSortedSet}.\n",
        "36": " *\n",
        "37": " * @author Jared Levy\n",
        "38": " */\n",
        "39": "@GwtCompatible(emulated = true)\n",
        "40": "public class ImmutableSortedSetTest extends AbstractImmutableSetTest {\n",
        "41": "\n",
        "42": "  // enum singleton pattern\n",
        "43": "  private enum StringLengthComparator implements Comparator<String> {\n",
        "44": "    INSTANCE;\n",
        "45": "\n",
        "46": "    @Override\n",
        "47": "    public int compare(String a, String b) {\n",
        "48": "      return a.length() - b.length();\n",
        "49": "    }\n",
        "50": "  }\n",
        "51": "\n",
        "52": "  private static final Comparator<String> STRING_LENGTH\n",
        "53": "      = StringLengthComparator.INSTANCE;\n",
        "54": "\n",
        "55": "  @Override protected SortedSet<String> of() {\n",
        "56": "    return ImmutableSortedSet.of();\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  @Override protected SortedSet<String> of(String e) {\n",
        "60": "    return ImmutableSortedSet.of(e);\n",
        "61": "  }\n",
        "62": "\n",
        "63": "  @Override protected SortedSet<String> of(String e1, String e2) {\n",
        "64": "    return ImmutableSortedSet.of(e1, e2);\n",
        "65": "  }\n",
        "66": "\n",
        "67": "  @Override protected SortedSet<String> of(String e1, String e2, String e3) {\n",
        "68": "    return ImmutableSortedSet.of(e1, e2, e3);\n",
        "69": "  }\n",
        "70": "\n",
        "71": "  @Override protected SortedSet<String> of(\n",
        "72": "      String e1, String e2, String e3, String e4) {\n",
        "73": "    return ImmutableSortedSet.of(e1, e2, e3, e4);\n",
        "74": "  }\n",
        "75": "\n",
        "76": "  @Override protected SortedSet<String> of(\n",
        "77": "      String e1, String e2, String e3, String e4, String e5) {\n",
        "78": "    return ImmutableSortedSet.of(e1, e2, e3, e4, e5);\n",
        "79": "  }\n",
        "80": "\n",
        "81": "  @Override protected SortedSet<String> of(String e1, String e2, String e3,\n",
        "82": "      String e4, String e5, String e6, String... rest) {\n",
        "83": "    return ImmutableSortedSet.of(e1, e2, e3, e4, e5, e6, rest);\n",
        "84": "  }\n",
        "85": "\n",
        "86": "  @Override protected SortedSet<String> copyOf(String[] elements) {\n",
        "87": "    return ImmutableSortedSet.copyOf(elements);\n",
        "88": "  }\n",
        "89": "\n",
        "90": "  @Override protected SortedSet<String> copyOf(Collection<String> elements) {\n",
        "91": "    return ImmutableSortedSet.copyOf(elements);\n",
        "92": "  }\n",
        "93": "\n",
        "94": "  @Override protected SortedSet<String> copyOf(Iterable<String> elements) {\n",
        "95": "    return ImmutableSortedSet.copyOf(elements);\n",
        "96": "  }\n",
        "97": "\n",
        "98": "  @Override protected SortedSet<String> copyOf(Iterator<String> elements) {\n",
        "99": "    return ImmutableSortedSet.copyOf(elements);\n",
        "100": "  }\n",
        "101": "\n",
        "102": "  public void testEmpty_comparator() {\n",
        "103": "    SortedSet<String> set = of();\n",
        "104": "    assertSame(Ordering.natural(), set.comparator());\n",
        "105": "  }\n",
        "106": "\n",
        "107": "  public void testEmpty_headSet() {\n",
        "108": "    SortedSet<String> set = of();\n",
        "109": "    assertSame(set, set.headSet(\"c\"));\n",
        "110": "  }\n",
        "111": "\n",
        "112": "  public void testEmpty_tailSet() {\n",
        "113": "    SortedSet<String> set = of();\n",
        "114": "    assertSame(set, set.tailSet(\"f\"));\n",
        "115": "  }\n",
        "116": "\n",
        "117": "  public void testEmpty_subSet() {\n",
        "118": "    SortedSet<String> set = of();\n",
        "119": "    assertSame(set, set.subSet(\"c\", \"f\"));\n",
        "120": "  }\n",
        "121": "\n",
        "122": "  public void testEmpty_first() {\n",
        "123": "    SortedSet<String> set = of();\n",
        "124": "    try {\n",
        "125": "      set.first();\n",
        "126": "      fail();\n",
        "127": "    } catch (NoSuchElementException expected) {\n",
        "128": "    }\n",
        "129": "  }\n",
        "130": "\n",
        "131": "  public void testEmpty_last() {\n",
        "132": "    SortedSet<String> set = of();\n",
        "133": "    try {\n",
        "134": "      set.last();\n",
        "135": "      fail();\n",
        "136": "    } catch (NoSuchElementException expected) {\n",
        "137": "    }\n",
        "138": "  }\n",
        "139": "\n",
        "140": "  public void testSingle_comparator() {\n",
        "141": "    SortedSet<String> set = of(\"e\");\n",
        "142": "    assertSame(Ordering.natural(), set.comparator());\n",
        "143": "  }\n",
        "144": "\n",
        "145": "  public void testSingle_headSet() {\n",
        "146": "    SortedSet<String> set = of(\"e\");\n",
        "147": "    assertTrue(set.headSet(\"g\") instanceof ImmutableSortedSet);\n",
        "148": "    assertThat(set.headSet(\"g\")).contains(\"e\");\n",
        "149": "    assertSame(of(), set.headSet(\"c\"));\n",
        "150": "    assertSame(of(), set.headSet(\"e\"));\n",
        "151": "  }\n",
        "152": "\n",
        "153": "  public void testSingle_tailSet() {\n",
        "154": "    SortedSet<String> set = of(\"e\");\n",
        "155": "    assertTrue(set.tailSet(\"c\") instanceof ImmutableSortedSet);\n",
        "156": "    assertThat(set.tailSet(\"c\")).contains(\"e\");\n",
        "157": "    assertThat(set.tailSet(\"e\")).contains(\"e\");\n",
        "158": "    assertSame(of(), set.tailSet(\"g\"));\n",
        "159": "  }\n",
        "160": "\n",
        "161": "  public void testSingle_subSet() {\n",
        "162": "    SortedSet<String> set = of(\"e\");\n",
        "163": "    assertTrue(set.subSet(\"c\", \"g\") instanceof ImmutableSortedSet);\n",
        "164": "    assertThat(set.subSet(\"c\", \"g\")).contains(\"e\");\n",
        "165": "    assertThat(set.subSet(\"e\", \"g\")).contains(\"e\");\n",
        "166": "    assertSame(of(), set.subSet(\"f\", \"g\"));\n",
        "167": "    assertSame(of(), set.subSet(\"c\", \"e\"));\n",
        "168": "    assertSame(of(), set.subSet(\"c\", \"d\"));\n",
        "169": "  }\n",
        "170": "\n",
        "171": "  public void testSingle_first() {\n",
        "172": "    SortedSet<String> set = of(\"e\");\n",
        "173": "    assertEquals(\"e\", set.first());\n",
        "174": "  }\n",
        "175": "\n",
        "176": "  public void testSingle_last() {\n",
        "177": "    SortedSet<String> set = of(\"e\");\n",
        "178": "    assertEquals(\"e\", set.last());\n",
        "179": "  }\n",
        "180": "\n",
        "181": "  public void testOf_ordering() {\n",
        "182": "    SortedSet<String> set = of(\"e\", \"a\", \"f\", \"b\", \"d\", \"c\");\n",
        "183": "    assertThat(set).containsExactly(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\").inOrder();\n",
        "184": "  }\n",
        "185": "\n",
        "186": "  /*\n",
        "187": "   * Tests that we workaround GWT bug #3621 (or that it is already fixed).\n",
        "188": "   *\n",
        "189": "   * A call to of() with a parameter that is not a plain Object[] (here,\n",
        "190": "   * Interface[]) creates a RegularImmutableSortedSet backed by an array of that\n",
        "191": "   * type. Later, RegularImmutableSortedSet.toArray() calls System.arraycopy()\n",
        "192": "   * to copy from that array to the destination array. This would be fine, but\n",
        "193": "   * GWT has a bug: It refuses to copy from an E[] to an Object[] when E is an\n",
        "194": "   * interface type.\n",
        "195": "   */\n",
        "196": "  // TODO: test other collections for this problem\n",
        "197": "  public void testOf_gwtArraycopyBug() {\n",
        "198": "    /*\n",
        "199": "     * The test requires:\n",
        "200": "     *\n",
        "201": "     * 1) An interface I extending Comparable<I> so that the created array is of\n",
        "202": "     * an interface type. 2) An instance of a class implementing that interface\n",
        "203": "     * so that we can pass non-null instances of the interface.\n",
        "204": "     *\n",
        "205": "     * (Currently it's safe to pass instances for which compareTo() always\n",
        "206": "     * returns 0, but if we had a SingletonImmutableSortedSet, this might no\n",
        "207": "     * longer be the case.)\n",
        "208": "     *\n",
        "209": "     * javax.naming.Name and java.util.concurrent.Delayed might work, but\n",
        "210": "     * they're fairly obscure, we've invented our own interface and class.\n",
        "211": "     */\n",
        "212": "    Interface a = new Impl();\n",
        "213": "    Interface b = new Impl();\n",
        "214": "    ImmutableSortedSet<Interface> set = ImmutableSortedSet.of(a, b);\n",
        "215": "    set.toArray();\n",
        "216": "    set.toArray(new Object[2]);\n",
        "217": "  }\n",
        "218": "\n",
        "219": "  interface Interface extends Comparable<Interface> {\n",
        "220": "  }\n",
        "221": "  static class Impl implements Interface {\n",
        "222": "    static int nextId;\n",
        "223": "    Integer id = nextId++;\n",
        "224": "\n",
        "225": "    @Override public int compareTo(Interface other) {\n",
        "226": "      return id.compareTo(((Impl) other).id);\n",
        "227": "    }\n",
        "228": "  }\n",
        "229": "\n",
        "230": "  public void testOf_ordering_dupes() {\n",
        "231": "    SortedSet<String> set = of(\"e\", \"a\", \"e\", \"f\", \"b\", \"b\", \"d\", \"a\", \"c\");\n",
        "232": "    assertThat(set).containsExactly(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\").inOrder();\n",
        "233": "  }\n",
        "234": "\n",
        "235": "  public void testOf_comparator() {\n",
        "236": "    SortedSet<String> set = of(\"e\", \"a\", \"f\", \"b\", \"d\", \"c\");\n",
        "237": "    assertSame(Ordering.natural(), set.comparator());\n",
        "238": "  }\n",
        "239": "\n",
        "240": "  public void testOf_headSet() {\n",
        "241": "    SortedSet<String> set = of(\"e\", \"f\", \"b\", \"d\", \"c\");\n",
        "242": "    assertTrue(set.headSet(\"e\") instanceof ImmutableSortedSet);\n",
        "243": "    assertThat(set.headSet(\"e\")).containsExactly(\"b\", \"c\", \"d\").inOrder();\n",
        "244": "    assertThat(set.headSet(\"g\")).containsExactly(\"b\", \"c\", \"d\", \"e\", \"f\").inOrder();\n",
        "245": "    assertSame(of(), set.headSet(\"a\"));\n",
        "246": "    assertSame(of(), set.headSet(\"b\"));\n",
        "247": "  }\n",
        "248": "\n",
        "249": "  public void testOf_tailSet() {\n",
        "250": "    SortedSet<String> set = of(\"e\", \"f\", \"b\", \"d\", \"c\");\n",
        "251": "    assertTrue(set.tailSet(\"e\") instanceof ImmutableSortedSet);\n",
        "252": "    assertThat(set.tailSet(\"e\")).containsExactly(\"e\", \"f\").inOrder();\n",
        "253": "    assertThat(set.tailSet(\"a\")).containsExactly(\"b\", \"c\", \"d\", \"e\", \"f\").inOrder();\n",
        "254": "    assertSame(of(), set.tailSet(\"g\"));\n",
        "255": "  }\n",
        "256": "\n",
        "257": "  public void testOf_subSet() {\n",
        "258": "    SortedSet<String> set = of(\"e\", \"f\", \"b\", \"d\", \"c\");\n",
        "259": "    assertTrue(set.subSet(\"c\", \"e\") instanceof ImmutableSortedSet);\n",
        "260": "    assertThat(set.subSet(\"c\", \"e\")).containsExactly(\"c\", \"d\").inOrder();\n",
        "261": "    assertThat(set.subSet(\"a\", \"g\")).containsExactly(\"b\", \"c\", \"d\", \"e\", \"f\").inOrder();\n",
        "262": "    assertSame(of(), set.subSet(\"a\", \"b\"));\n",
        "263": "    assertSame(of(), set.subSet(\"g\", \"h\"));\n",
        "264": "    assertSame(of(), set.subSet(\"c\", \"c\"));\n",
        "265": "    try {\n",
        "266": "      set.subSet(\"e\", \"c\");\n",
        "267": "      fail();\n",
        "268": "    } catch (IllegalArgumentException expected) {\n",
        "269": "    }\n",
        "270": "  }\n",
        "271": "\n",
        "272": "  public void testOf_first() {\n",
        "273": "    SortedSet<String> set = of(\"e\", \"f\", \"b\", \"d\", \"c\");\n",
        "274": "    assertEquals(\"b\", set.first());\n",
        "275": "  }\n",
        "276": "\n",
        "277": "  public void testOf_last() {\n",
        "278": "    SortedSet<String> set = of(\"e\", \"f\", \"b\", \"d\", \"c\");\n",
        "279": "    assertEquals(\"f\", set.last());\n",
        "280": "  }\n",
        "281": "\n",
        "282": "  /* \"Explicit\" indicates an explicit comparator. */\n",
        "283": "\n",
        "284": "  public void testExplicit_ordering() {\n",
        "285": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "286": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "287": "    assertThat(set).containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\").inOrder();\n",
        "288": "  }\n",
        "289": "\n",
        "290": "  public void testExplicit_ordering_dupes() {\n",
        "291": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "292": "        \"in\", \"the\", \"quick\", \"brown\", \"fox\", \"jumped\",\n",
        "293": "        \"over\", \"a\", \"lazy\", \"dog\").build();\n",
        "294": "    assertThat(set).containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\").inOrder();\n",
        "295": "  }\n",
        "296": "\n",
        "297": "  public void testExplicit_contains() {\n",
        "298": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "299": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "300": "    assertTrue(set.contains(\"quick\"));\n",
        "301": "    assertTrue(set.contains(\"google\"));\n",
        "302": "    assertFalse(set.contains(\"\"));\n",
        "303": "    assertFalse(set.contains(\"california\"));\n",
        "304": "    assertFalse(set.contains(null));\n",
        "305": "  }\n",
        "306": "\n",
        "307": "  public void testExplicit_containsMismatchedTypes() {\n",
        "308": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "309": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "310": "    assertFalse(set.contains(3.7));\n",
        "311": "  }\n",
        "312": "\n",
        "313": "  public void testExplicit_comparator() {\n",
        "314": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "315": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "316": "    assertSame(STRING_LENGTH, set.comparator());\n",
        "317": "  }\n",
        "318": "\n",
        "319": "  public void testExplicit_headSet() {\n",
        "320": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "321": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "322": "    assertTrue(set.headSet(\"a\") instanceof ImmutableSortedSet);\n",
        "323": "    assertTrue(set.headSet(\"fish\") instanceof ImmutableSortedSet);\n",
        "324": "    assertThat(set.headSet(\"fish\")).containsExactly(\"a\", \"in\", \"the\").inOrder();\n",
        "325": "    assertThat(set.headSet(\"california\"))\n",
        "326": "        .containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\").inOrder();\n",
        "327": "    assertTrue(set.headSet(\"a\").isEmpty());\n",
        "328": "    assertTrue(set.headSet(\"\").isEmpty());\n",
        "329": "  }\n",
        "330": "\n",
        "331": "  public void testExplicit_tailSet() {\n",
        "332": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "333": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "334": "    assertTrue(set.tailSet(\"california\") instanceof ImmutableSortedSet);\n",
        "335": "    assertTrue(set.tailSet(\"fish\") instanceof ImmutableSortedSet);\n",
        "336": "    assertThat(set.tailSet(\"fish\")).containsExactly(\"over\", \"quick\", \"jumped\").inOrder();\n",
        "337": "    assertThat(\n",
        "338": "        set.tailSet(\"a\")).containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\").inOrder();\n",
        "339": "    assertTrue(set.tailSet(\"california\").isEmpty());\n",
        "340": "  }\n",
        "341": "\n",
        "342": "  public void testExplicit_subSet() {\n",
        "343": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "344": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "345": "    assertTrue(set.subSet(\"the\", \"quick\") instanceof ImmutableSortedSet);\n",
        "346": "    assertTrue(set.subSet(\"\", \"b\") instanceof ImmutableSortedSet);\n",
        "347": "    assertThat(set.subSet(\"the\", \"quick\")).containsExactly(\"the\", \"over\").inOrder();\n",
        "348": "    assertThat(set.subSet(\"a\", \"california\"))\n",
        "349": "        .containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\").inOrder();\n",
        "350": "    assertTrue(set.subSet(\"\", \"b\").isEmpty());\n",
        "351": "    assertTrue(set.subSet(\"vermont\", \"california\").isEmpty());\n",
        "352": "    assertTrue(set.subSet(\"aaa\", \"zzz\").isEmpty());\n",
        "353": "    try {\n",
        "354": "      set.subSet(\"quick\", \"the\");\n",
        "355": "      fail();\n",
        "356": "    } catch (IllegalArgumentException expected) {\n",
        "357": "    }\n",
        "358": "  }\n",
        "359": "\n",
        "360": "  public void testExplicit_first() {\n",
        "361": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "362": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "363": "    assertEquals(\"a\", set.first());\n",
        "364": "  }\n",
        "365": "\n",
        "366": "  public void testExplicit_last() {\n",
        "367": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "368": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "369": "    assertEquals(\"jumped\", set.last());\n",
        "370": "  }\n",
        "371": "\n",
        "372": "  public void testCopyOf_ordering() {\n",
        "373": "    SortedSet<String> set =\n",
        "374": "        copyOf(asList(\"e\", \"a\", \"f\", \"b\", \"d\", \"c\"));\n",
        "375": "    assertThat(set).containsExactly(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\").inOrder();\n",
        "376": "  }\n",
        "377": "\n",
        "378": "  public void testCopyOf_ordering_dupes() {\n",
        "379": "    SortedSet<String> set =\n",
        "380": "        copyOf(asList(\"e\", \"a\", \"e\", \"f\", \"b\", \"b\", \"d\", \"a\", \"c\"));\n",
        "381": "    assertThat(set).containsExactly(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\").inOrder();\n",
        "382": "  }\n",
        "383": "\n",
        "384": "  public void testCopyOf_subSet() {\n",
        "385": "    SortedSet<String> set = of(\"e\", \"a\", \"f\", \"b\", \"d\", \"c\");\n",
        "386": "    SortedSet<String> subset = set.subSet(\"c\", \"e\");\n",
        "387": "    SortedSet<String> copy = copyOf(subset);\n",
        "388": "    assertEquals(subset, copy);\n",
        "389": "  }\n",
        "390": "\n",
        "391": "  public void testCopyOf_headSet() {\n",
        "392": "    SortedSet<String> set = of(\"e\", \"a\", \"f\", \"b\", \"d\", \"c\");\n",
        "393": "    SortedSet<String> headset = set.headSet(\"d\");\n",
        "394": "    SortedSet<String> copy = copyOf(headset);\n",
        "395": "    assertEquals(headset, copy);\n",
        "396": "  }\n",
        "397": "\n",
        "398": "  public void testCopyOf_tailSet() {\n",
        "399": "    SortedSet<String> set = of(\"e\", \"a\", \"f\", \"b\", \"d\", \"c\");\n",
        "400": "    SortedSet<String> tailset = set.tailSet(\"d\");\n",
        "401": "    SortedSet<String> copy = copyOf(tailset);\n",
        "402": "    assertEquals(tailset, copy);\n",
        "403": "  }\n",
        "404": "\n",
        "405": "  public void testCopyOf_comparator() {\n",
        "406": "    SortedSet<String> set = copyOf(asList(\"e\", \"a\", \"f\", \"b\", \"d\", \"c\"));\n",
        "407": "    assertSame(Ordering.natural(), set.comparator());\n",
        "408": "  }\n",
        "409": "\n",
        "410": "  public void testCopyOf_iterator_ordering() {\n",
        "411": "    SortedSet<String> set = copyOf(asIterator(\"e\", \"a\", \"f\", \"b\", \"d\", \"c\"));\n",
        "412": "    assertThat(set).containsExactly(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\").inOrder();\n",
        "413": "  }\n",
        "414": "\n",
        "415": "  public void testCopyOf_iterator_ordering_dupes() {\n",
        "416": "    SortedSet<String> set =\n",
        "417": "        copyOf(asIterator(\"e\", \"a\", \"e\", \"f\", \"b\", \"b\", \"d\", \"a\", \"c\"));\n",
        "418": "    assertThat(set).containsExactly(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\").inOrder();\n",
        "419": "  }\n",
        "420": "\n",
        "421": "  public void testCopyOf_iterator_comparator() {\n",
        "422": "    SortedSet<String> set = copyOf(asIterator(\"e\", \"a\", \"f\", \"b\", \"d\", \"c\"));\n",
        "423": "    assertSame(Ordering.natural(), set.comparator());\n",
        "424": "  }\n",
        "425": "\n",
        "426": "  public void testCopyOf_sortedSet_ordering() {\n",
        "427": "    SortedSet<String> set =\n",
        "428": "        copyOf(Sets.newTreeSet(asList(\"e\", \"a\", \"f\", \"b\", \"d\", \"c\")));\n",
        "429": "    assertThat(set).containsExactly(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\").inOrder();\n",
        "430": "  }\n",
        "431": "\n",
        "432": "  public void testCopyOf_sortedSet_comparator() {\n",
        "433": "    SortedSet<String> set = copyOf(Sets.<String>newTreeSet());\n",
        "434": "    assertSame(Ordering.natural(), set.comparator());\n",
        "435": "  }\n",
        "436": "\n",
        "437": "  public void testCopyOfExplicit_ordering() {\n",
        "438": "    SortedSet<String> set =\n",
        "439": "        ImmutableSortedSet.copyOf(STRING_LENGTH, asList(\n",
        "440": "            \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "441": "    assertThat(set).containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\").inOrder();\n",
        "442": "  }\n",
        "443": "\n",
        "444": "  public void testCopyOfExplicit_ordering_dupes() {\n",
        "445": "    SortedSet<String> set =\n",
        "446": "        ImmutableSortedSet.copyOf(STRING_LENGTH, asList(\n",
        "447": "            \"in\", \"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"a\",\n",
        "448": "            \"lazy\", \"dog\"));\n",
        "449": "    assertThat(set).containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\").inOrder();\n",
        "450": "  }\n",
        "451": "\n",
        "452": "  public void testCopyOfExplicit_comparator() {\n",
        "453": "    SortedSet<String> set =\n",
        "454": "        ImmutableSortedSet.copyOf(STRING_LENGTH, asList(\n",
        "455": "            \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "456": "    assertSame(STRING_LENGTH, set.comparator());\n",
        "457": "  }\n",
        "458": "\n",
        "459": "  public void testCopyOfExplicit_iterator_ordering() {\n",
        "460": "    SortedSet<String> set =\n",
        "461": "        ImmutableSortedSet.copyOf(STRING_LENGTH, asIterator(\n",
        "462": "            \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "463": "    assertThat(set).containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\").inOrder();\n",
        "464": "  }\n",
        "465": "\n",
        "466": "  public void testCopyOfExplicit_iterator_ordering_dupes() {\n",
        "467": "    SortedSet<String> set =\n",
        "468": "        ImmutableSortedSet.copyOf(STRING_LENGTH, asIterator(\n",
        "469": "            \"in\", \"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"a\",\n",
        "470": "            \"lazy\", \"dog\"));\n",
        "471": "    assertThat(set).containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\").inOrder();\n",
        "472": "  }\n",
        "473": "\n",
        "474": "  public void testCopyOfExplicit_iterator_comparator() {\n",
        "475": "    SortedSet<String> set =\n",
        "476": "        ImmutableSortedSet.copyOf(STRING_LENGTH, asIterator(\n",
        "477": "            \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "478": "    assertSame(STRING_LENGTH, set.comparator());\n",
        "479": "  }\n",
        "480": "\n",
        "481": "  public void testCopyOf_sortedSetIterable() {\n",
        "482": "    SortedSet<String> input = Sets.newTreeSet(STRING_LENGTH);\n",
        "483": "    Collections.addAll(input, \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\");\n",
        "484": "    SortedSet<String> set = copyOf(input);\n",
        "485": "    assertThat(set).containsExactly(\"a\", \"in\", \"jumped\", \"over\", \"quick\", \"the\").inOrder();\n",
        "486": "  }\n",
        "487": "\n",
        "488": "  public void testCopyOfSorted_natural_ordering() {\n",
        "489": "    SortedSet<String> input = Sets.newTreeSet(\n",
        "490": "        asList(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "491": "    SortedSet<String> set = ImmutableSortedSet.copyOfSorted(input);\n",
        "492": "    assertThat(set).containsExactly(\"a\", \"in\", \"jumped\", \"over\", \"quick\", \"the\").inOrder();\n",
        "493": "  }\n",
        "494": "\n",
        "495": "  public void testCopyOfSorted_natural_comparator() {\n",
        "496": "    SortedSet<String> input =\n",
        "497": "        Sets.newTreeSet(asList(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "498": "    SortedSet<String> set = ImmutableSortedSet.copyOfSorted(input);\n",
        "499": "    assertSame(Ordering.natural(), set.comparator());\n",
        "500": "  }\n",
        "501": "\n",
        "502": "  public void testCopyOfSorted_explicit_ordering() {\n",
        "503": "    SortedSet<String> input = Sets.newTreeSet(STRING_LENGTH);\n",
        "504": "    Collections.addAll(input, \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\");\n",
        "505": "    SortedSet<String> set = ImmutableSortedSet.copyOfSorted(input);\n",
        "506": "    assertThat(set).containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\").inOrder();\n",
        "507": "    assertSame(STRING_LENGTH, set.comparator());\n",
        "508": "  }\n",
        "509": "\n",
        "510": "  public void testEquals_bothDefaultOrdering() {\n",
        "511": "    SortedSet<String> set = of(\"a\", \"b\", \"c\");\n",
        "512": "    assertEquals(set, Sets.newTreeSet(asList(\"a\", \"b\", \"c\")));\n",
        "513": "    assertEquals(Sets.newTreeSet(asList(\"a\", \"b\", \"c\")), set);\n",
        "514": "    assertFalse(set.equals(Sets.newTreeSet(asList(\"a\", \"b\", \"d\"))));\n",
        "515": "    assertFalse(Sets.newTreeSet(asList(\"a\", \"b\", \"d\")).equals(set));\n",
        "516": "    assertFalse(set.equals(Sets.newHashSet(4, 5, 6)));\n",
        "517": "    assertFalse(Sets.newHashSet(4, 5, 6).equals(set));\n",
        "518": "  }\n",
        "519": "\n",
        "520": "  public void testEquals_bothExplicitOrdering() {\n",
        "521": "    SortedSet<String> set = of(\"in\", \"the\", \"a\");\n",
        "522": "    assertEquals(Sets.newTreeSet(asList(\"in\", \"the\", \"a\")), set);\n",
        "523": "    assertFalse(set.equals(Sets.newTreeSet(asList(\"in\", \"the\", \"house\"))));\n",
        "524": "    assertFalse(Sets.newTreeSet(asList(\"in\", \"the\", \"house\")).equals(set));\n",
        "525": "    assertFalse(set.equals(Sets.newHashSet(4, 5, 6)));\n",
        "526": "    assertFalse(Sets.newHashSet(4, 5, 6).equals(set));\n",
        "527": "\n",
        "528": "    Set<String> complex = Sets.newTreeSet(STRING_LENGTH);\n",
        "529": "    Collections.addAll(complex, \"in\", \"the\", \"a\");\n",
        "530": "    assertEquals(set, complex);\n",
        "531": "  }\n",
        "532": "\n",
        "533": "  public void testEquals_bothDefaultOrdering_StringVsInt() {\n",
        "534": "    SortedSet<String> set = of(\"a\", \"b\", \"c\");\n",
        "535": "    assertFalse(set.equals(Sets.newTreeSet(asList(4, 5, 6))));\n",
        "536": "    assertNotEqualLenient(Sets.newTreeSet(asList(4, 5, 6)), set);\n",
        "537": "  }\n",
        "538": "\n",
        "539": "  public void testEquals_bothExplicitOrdering_StringVsInt() {\n",
        "540": "    SortedSet<String> set = of(\"in\", \"the\", \"a\");\n",
        "541": "    assertFalse(set.equals(Sets.newTreeSet(asList(4, 5, 6))));\n",
        "542": "    assertNotEqualLenient(Sets.newTreeSet(asList(4, 5, 6)), set);\n",
        "543": "  }\n",
        "544": "\n",
        "545": "  public void testContainsAll_notSortedSet() {\n",
        "546": "    SortedSet<String> set = of(\"a\", \"b\", \"f\");\n",
        "547": "    assertTrue(set.containsAll(Collections.emptyList()));\n",
        "548": "    assertTrue(set.containsAll(asList(\"b\")));\n",
        "549": "    assertTrue(set.containsAll(asList(\"b\", \"b\")));\n",
        "550": "    assertTrue(set.containsAll(asList(\"b\", \"f\")));\n",
        "551": "    assertTrue(set.containsAll(asList(\"b\", \"f\", \"a\")));\n",
        "552": "    assertFalse(set.containsAll(asList(\"d\")));\n",
        "553": "    assertFalse(set.containsAll(asList(\"z\")));\n",
        "554": "    assertFalse(set.containsAll(asList(\"b\", \"d\")));\n",
        "555": "    assertFalse(set.containsAll(asList(\"f\", \"d\", \"a\")));\n",
        "556": "  }\n",
        "557": "\n",
        "558": "  public void testContainsAll_sameComparator() {\n",
        "559": "    SortedSet<String> set = of(\"a\", \"b\", \"f\");\n",
        "560": "    assertTrue(set.containsAll(Sets.newTreeSet()));\n",
        "561": "    assertTrue(set.containsAll(Sets.newTreeSet(asList(\"b\"))));\n",
        "562": "    assertTrue(set.containsAll(Sets.newTreeSet(asList(\"a\", \"f\"))));\n",
        "563": "    assertTrue(set.containsAll(Sets.newTreeSet(asList(\"a\", \"b\", \"f\"))));\n",
        "564": "    assertFalse(set.containsAll(Sets.newTreeSet(asList(\"d\"))));\n",
        "565": "    assertFalse(set.containsAll(Sets.newTreeSet(asList(\"z\"))));\n",
        "566": "    assertFalse(set.containsAll(Sets.newTreeSet(asList(\"b\", \"d\"))));\n",
        "567": "    assertFalse(set.containsAll(Sets.newTreeSet(asList(\"f\", \"d\", \"a\"))));\n",
        "568": "  }\n",
        "569": "\n",
        "570": "  public void testContainsAll_sameComparator_StringVsInt() {\n",
        "571": "    SortedSet<String> set = of(\"a\", \"b\", \"f\");\n",
        "572": "    SortedSet<Integer> unexpected = Sets.newTreeSet(Ordering.natural());\n",
        "573": "    unexpected.addAll(asList(1, 2, 3));\n",
        "574": "    assertFalse(set.containsAll(unexpected));\n",
        "575": "  }\n",
        "576": "\n",
        "577": "  public void testContainsAll_differentComparator() {\n",
        "578": "    Comparator<Comparable<?>> comparator = Collections.reverseOrder();\n",
        "579": "    SortedSet<String> set = new ImmutableSortedSet.Builder<String>(comparator)\n",
        "580": "        .add(\"a\", \"b\", \"f\").build();\n",
        "581": "    assertTrue(set.containsAll(Sets.newTreeSet()));\n",
        "582": "    assertTrue(set.containsAll(Sets.newTreeSet(asList(\"b\"))));\n",
        "583": "    assertTrue(set.containsAll(Sets.newTreeSet(asList(\"a\", \"f\"))));\n",
        "584": "    assertTrue(set.containsAll(Sets.newTreeSet(asList(\"a\", \"b\", \"f\"))));\n",
        "585": "    assertFalse(set.containsAll(Sets.newTreeSet(asList(\"d\"))));\n",
        "586": "    assertFalse(set.containsAll(Sets.newTreeSet(asList(\"z\"))));\n",
        "587": "    assertFalse(set.containsAll(Sets.newTreeSet(asList(\"b\", \"d\"))));\n",
        "588": "    assertFalse(set.containsAll(Sets.newTreeSet(asList(\"f\", \"d\", \"a\"))));\n",
        "589": "  }\n",
        "590": "\n",
        "591": "  public void testReverseOrder() {\n",
        "592": "    SortedSet<String> set = ImmutableSortedSet.<String>reverseOrder()\n",
        "593": "        .add(\"a\", \"b\", \"c\").build();\n",
        "594": "    assertThat(set).containsExactly(\"c\", \"b\", \"a\").inOrder();\n",
        "595": "    assertEquals(Ordering.natural().reverse(), set.comparator());\n",
        "596": "  }\n",
        "597": "\n",
        "598": "  private static final Comparator<Object> TO_STRING\n",
        "599": "      = new Comparator<Object>() {\n",
        "600": "          @Override\n",
        "601": "          public int compare(Object o1, Object o2) {\n",
        "602": "            return o1.toString().compareTo(o2.toString());\n",
        "603": "          }\n",
        "604": "        };\n",
        "605": "\n",
        "606": "  public void testSupertypeComparator() {\n",
        "607": "    SortedSet<Integer> set = new ImmutableSortedSet.Builder<Integer>(TO_STRING)\n",
        "608": "        .add(3, 12, 101, 44).build();\n",
        "609": "    assertThat(set).containsExactly(101, 12, 3, 44).inOrder();\n",
        "610": "  }\n",
        "611": "\n",
        "612": "  public void testSupertypeComparatorSubtypeElements() {\n",
        "613": "    SortedSet<Number> set = new ImmutableSortedSet.Builder<Number>(TO_STRING)\n",
        "614": "        .add(3, 12, 101, 44).build();\n",
        "615": "    assertThat(set).containsExactly(101, 12, 3, 44).inOrder();\n",
        "616": "  }\n",
        "617": "\n",
        "618": "  @Override <E extends Comparable<E>> ImmutableSortedSet.Builder<E> builder() {\n",
        "619": "    return ImmutableSortedSet.naturalOrder();\n",
        "620": "  }\n",
        "621": "\n",
        "622": "  @Override int getComplexBuilderSetLastElement() {\n",
        "623": "    return 0x00FFFFFF;\n",
        "624": "  }\n",
        "625": "\n",
        "626": "  public void testLegacyComparable_of() {\n",
        "627": "    ImmutableSortedSet<LegacyComparable> set0 = ImmutableSortedSet.of();\n",
        "628": "\n",
        "629": "    @SuppressWarnings(\"unchecked\") // using a legacy comparable\n",
        "630": "    ImmutableSortedSet<LegacyComparable> set1 = ImmutableSortedSet.of(\n",
        "631": "        LegacyComparable.Z);\n",
        "632": "\n",
        "633": "    @SuppressWarnings(\"unchecked\") // using a legacy comparable\n",
        "634": "    ImmutableSortedSet<LegacyComparable> set2 = ImmutableSortedSet.of(\n",
        "635": "        LegacyComparable.Z, LegacyComparable.Y);\n",
        "636": "  }\n",
        "637": "\n",
        "638": "  public void testLegacyComparable_copyOf_collection() {\n",
        "639": "    ImmutableSortedSet<LegacyComparable> set\n",
        "640": "        = ImmutableSortedSet.copyOf(LegacyComparable.VALUES_BACKWARD);\n",
        "641": "    assertTrue(Iterables.elementsEqual(LegacyComparable.VALUES_FORWARD, set));\n",
        "642": "  }\n",
        "643": "\n",
        "644": "  public void testLegacyComparable_copyOf_iterator() {\n",
        "645": "    ImmutableSortedSet<LegacyComparable> set = ImmutableSortedSet.copyOf(\n",
        "646": "        LegacyComparable.VALUES_BACKWARD.iterator());\n",
        "647": "    assertTrue(Iterables.elementsEqual(LegacyComparable.VALUES_FORWARD, set));\n",
        "648": "  }\n",
        "649": "\n",
        "650": "  public void testLegacyComparable_builder_natural() {\n",
        "651": "    @SuppressWarnings(\"unchecked\")\n",
        "652": "    // Note: IntelliJ wrongly reports an error for this statement\n",
        "653": "    ImmutableSortedSet.Builder<LegacyComparable> builder\n",
        "654": "        = ImmutableSortedSet.<LegacyComparable>naturalOrder();\n",
        "655": "\n",
        "656": "    builder.addAll(LegacyComparable.VALUES_BACKWARD);\n",
        "657": "    builder.add(LegacyComparable.X);\n",
        "658": "    builder.add(LegacyComparable.Y, LegacyComparable.Z);\n",
        "659": "\n",
        "660": "    ImmutableSortedSet<LegacyComparable> set = builder.build();\n",
        "661": "    assertTrue(Iterables.elementsEqual(LegacyComparable.VALUES_FORWARD, set));\n",
        "662": "  }\n",
        "663": "\n",
        "664": "  public void testLegacyComparable_builder_reverse() {\n",
        "665": "    @SuppressWarnings(\"unchecked\")\n",
        "666": "    // Note: IntelliJ wrongly reports an error for this statement\n",
        "667": "    ImmutableSortedSet.Builder<LegacyComparable> builder\n",
        "668": "        = ImmutableSortedSet.<LegacyComparable>reverseOrder();\n",
        "669": "\n",
        "670": "    builder.addAll(LegacyComparable.VALUES_FORWARD);\n",
        "671": "    builder.add(LegacyComparable.X);\n",
        "672": "    builder.add(LegacyComparable.Y, LegacyComparable.Z);\n",
        "673": "\n",
        "674": "    ImmutableSortedSet<LegacyComparable> set = builder.build();\n",
        "675": "    assertTrue(Iterables.elementsEqual(LegacyComparable.VALUES_BACKWARD, set));\n",
        "676": "  }\n",
        "677": "\n",
        "678": "  @SuppressWarnings({\"deprecation\", \"static-access\"})\n",
        "679": "  public void testBuilderMethod() {\n",
        "680": "    try {\n",
        "681": "      ImmutableSortedSet.builder();\n",
        "682": "      fail();\n",
        "683": "    } catch (UnsupportedOperationException expected) {\n",
        "684": "    }\n",
        "685": "  }\n",
        "686": "\n",
        "687": "  public void testAsList() {\n",
        "688": "    ImmutableSet<String> set = ImmutableSortedSet.of(\"a\", \"e\", \"i\", \"o\", \"u\");\n",
        "689": "    ImmutableList<String> list = set.asList();\n",
        "690": "    assertEquals(ImmutableList.of(\"a\", \"e\", \"i\", \"o\", \"u\"), list);\n",
        "691": "    assertSame(list, ImmutableList.copyOf(set));\n",
        "692": "  }\n",
        "693": "\n",
        "694": "  public void testSubsetAsList() {\n",
        "695": "    ImmutableSet<String> set\n",
        "696": "        = ImmutableSortedSet.of(\"a\", \"e\", \"i\", \"o\", \"u\").subSet(\"c\", \"r\");\n",
        "697": "    ImmutableList<String> list = set.asList();\n",
        "698": "    assertEquals(ImmutableList.of(\"e\", \"i\", \"o\"), list);\n",
        "699": "    assertEquals(list, ImmutableList.copyOf(set));\n",
        "700": "  }\n",
        "701": "\n",
        "702": "  public void testAsListInconsistentComprator() {\n",
        "703": "    ImmutableSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "704": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "705": "    ImmutableList<String> list = set.asList();\n",
        "706": "    assertTrue(list.contains(\"the\"));\n",
        "707": "    assertEquals(2, list.indexOf(\"the\"));\n",
        "708": "    assertEquals(2, list.lastIndexOf(\"the\"));\n",
        "709": "    assertFalse(list.contains(\"dog\"));\n",
        "710": "    assertEquals(-1, list.indexOf(\"dog\"));\n",
        "711": "    assertEquals(-1, list.lastIndexOf(\"dog\"));\n",
        "712": "    assertFalse(list.contains(\"chicken\"));\n",
        "713": "    assertEquals(-1, list.indexOf(\"chicken\"));\n",
        "714": "    assertEquals(-1, list.lastIndexOf(\"chicken\"));\n",
        "715": "  }\n",
        "716": "\n",
        "717": "  private static <E> Iterator<E> asIterator(E... elements) {\n",
        "718": "    return asList(elements).iterator();\n",
        "719": "  }\n",
        "720": "\n",
        "721": "  // In GWT, java.util.TreeSet throws ClassCastException when the comparator\n",
        "722": "  // throws it, unlike JDK6.  Therefore, we accept ClassCastException as a\n",
        "723": "  // valid result thrown by java.util.TreeSet#equals.\n",
        "724": "  private static void assertNotEqualLenient(\n",
        "725": "      TreeSet<?> unexpected, SortedSet<?> actual) {\n",
        "726": "    try {\n",
        "727": "      assertThat(actual).isNotEqualTo(unexpected);\n",
        "728": "    } catch (ClassCastException accepted) {\n",
        "729": "    }\n",
        "730": "  }\n",
        "731": "\n",
        "732": "  public void testHeadSetInclusive() {\n",
        "733": "    String[] strings = NUMBER_NAMES.toArray(new String[0]);\n",
        "734": "    ImmutableSortedSet<String> set = ImmutableSortedSet.copyOf(strings);\n",
        "735": "    Arrays.sort(strings);\n",
        "736": "    for (int i = 0; i < strings.length; i++) {\n",
        "737": "      assertThat(set.headSet(strings[i], true))\n",
        "738": "          .containsExactlyElementsIn(sortedNumberNames(0, i + 1))\n",
        "739": "          .inOrder();\n",
        "740": "    }\n",
        "741": "  }\n",
        "742": "\n",
        "743": "  public void testHeadSetExclusive() {\n",
        "744": "    String[] strings = NUMBER_NAMES.toArray(new String[0]);\n",
        "745": "    ImmutableSortedSet<String> set = ImmutableSortedSet.copyOf(strings);\n",
        "746": "    Arrays.sort(strings);\n",
        "747": "    for (int i = 0; i < strings.length; i++) {\n",
        "748": "      assertThat(set.headSet(strings[i], false))\n",
        "749": "          .containsExactlyElementsIn(sortedNumberNames(0, i))\n",
        "750": "          .inOrder();\n",
        "751": "    }\n",
        "752": "  }\n",
        "753": "\n",
        "754": "  public void testTailSetInclusive() {\n",
        "755": "    String[] strings = NUMBER_NAMES.toArray(new String[0]);\n",
        "756": "    ImmutableSortedSet<String> set = ImmutableSortedSet.copyOf(strings);\n",
        "757": "    Arrays.sort(strings);\n",
        "758": "    for (int i = 0; i < strings.length; i++) {\n",
        "759": "      assertThat(set.tailSet(strings[i], true))\n",
        "760": "          .containsExactlyElementsIn(sortedNumberNames(i, strings.length))\n",
        "761": "          .inOrder();\n",
        "762": "    }\n",
        "763": "  }\n",
        "764": "\n",
        "765": "  public void testTailSetExclusive() {\n",
        "766": "    String[] strings = NUMBER_NAMES.toArray(new String[0]);\n",
        "767": "    ImmutableSortedSet<String> set = ImmutableSortedSet.copyOf(strings);\n",
        "768": "    Arrays.sort(strings);\n",
        "769": "    for (int i = 0; i < strings.length; i++) {\n",
        "770": "      assertThat(set.tailSet(strings[i], false))\n",
        "771": "          .containsExactlyElementsIn(sortedNumberNames(i + 1, strings.length))\n",
        "772": "          .inOrder();\n",
        "773": "    }\n",
        "774": "  }\n",
        "775": "\n",
        "776": "  public void testSubSetExclusiveExclusive() {\n",
        "777": "    String[] strings = NUMBER_NAMES.toArray(new String[0]);\n",
        "778": "    ImmutableSortedSet<String> set = ImmutableSortedSet.copyOf(strings);\n",
        "779": "    Arrays.sort(strings);\n",
        "780": "    for (int i = 0; i < strings.length; i++) {\n",
        "781": "      for (int j = i; j < strings.length; j++) {\n",
        "782": "        assertThat(set.subSet(strings[i], false, strings[j], false))\n",
        "783": "            .containsExactlyElementsIn(sortedNumberNames(Math.min(i + 1, j), j))\n",
        "784": "            .inOrder();\n",
        "785": "      }\n",
        "786": "    }\n",
        "787": "  }\n",
        "788": "\n",
        "789": "  public void testSubSetInclusiveExclusive() {\n",
        "790": "    String[] strings = NUMBER_NAMES.toArray(new String[0]);\n",
        "791": "    ImmutableSortedSet<String> set = ImmutableSortedSet.copyOf(strings);\n",
        "792": "    Arrays.sort(strings);\n",
        "793": "    for (int i = 0; i < strings.length; i++) {\n",
        "794": "      for (int j = i; j < strings.length; j++) {\n",
        "795": "        assertThat(set.subSet(strings[i], true, strings[j], false))\n",
        "796": "            .containsExactlyElementsIn(sortedNumberNames(i, j))\n",
        "797": "            .inOrder();\n",
        "798": "      }\n",
        "799": "    }\n",
        "800": "  }\n",
        "801": "\n",
        "802": "  public void testSubSetExclusiveInclusive() {\n",
        "803": "    String[] strings = NUMBER_NAMES.toArray(new String[0]);\n",
        "804": "    ImmutableSortedSet<String> set = ImmutableSortedSet.copyOf(strings);\n",
        "805": "    Arrays.sort(strings);\n",
        "806": "    for (int i = 0; i < strings.length; i++) {\n",
        "807": "      for (int j = i; j < strings.length; j++) {\n",
        "808": "        assertThat(set.subSet(strings[i], false, strings[j], true))\n",
        "809": "            .containsExactlyElementsIn(sortedNumberNames(i + 1, j + 1))\n",
        "810": "            .inOrder();\n",
        "811": "      }\n",
        "812": "    }\n",
        "813": "  }\n",
        "814": "\n",
        "815": "  public void testSubSetInclusiveInclusive() {\n",
        "816": "    String[] strings = NUMBER_NAMES.toArray(new String[0]);\n",
        "817": "    ImmutableSortedSet<String> set = ImmutableSortedSet.copyOf(strings);\n",
        "818": "    Arrays.sort(strings);\n",
        "819": "    for (int i = 0; i < strings.length; i++) {\n",
        "820": "      for (int j = i; j < strings.length; j++) {\n",
        "821": "        assertThat(set.subSet(strings[i], true, strings[j], true))\n",
        "822": "            .containsExactlyElementsIn(sortedNumberNames(i, j + 1))\n",
        "823": "            .inOrder();\n",
        "824": "      }\n",
        "825": "    }\n",
        "826": "  }\n",
        "827": "\n",
        "828": "  private static ImmutableList<String> sortedNumberNames(int i, int j) {\n",
        "829": "    return ImmutableList.copyOf(SORTED_NUMBER_NAMES.subList(i, j));\n",
        "830": "  }\n",
        "831": "\n",
        "832": "  private static final ImmutableList<String> NUMBER_NAMES =\n",
        "833": "      ImmutableList.of(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\");\n",
        "834": "\n",
        "835": "  private static final ImmutableList<String> SORTED_NUMBER_NAMES =\n",
        "836": "      Ordering.natural().immutableSortedCopy(NUMBER_NAMES);\n",
        "837": "\n",
        "838": "  private static class SelfComparableExample implements Comparable<SelfComparableExample> {\n",
        "839": "    @Override\n",
        "840": "    public int compareTo(SelfComparableExample o) {\n",
        "841": "      return 0;\n",
        "842": "    }\n",
        "843": "  }\n",
        "844": "\n",
        "845": "  public void testBuilderGenerics_SelfComparable() {\n",
        "846": "    ImmutableSortedSet.Builder<SelfComparableExample> natural = ImmutableSortedSet.naturalOrder();\n",
        "847": "    ImmutableSortedSet.Builder<SelfComparableExample> reverse = ImmutableSortedSet.reverseOrder();\n",
        "848": "  }\n",
        "849": "\n",
        "850": "  private static class SuperComparableExample extends SelfComparableExample {}\n",
        "851": "\n",
        "852": "  public void testBuilderGenerics_SuperComparable() {\n",
        "853": "    ImmutableSortedSet.Builder<SuperComparableExample> natural = ImmutableSortedSet.naturalOrder();\n",
        "854": "    ImmutableSortedSet.Builder<SuperComparableExample> reverse = ImmutableSortedSet.reverseOrder();\n",
        "855": "  }\n",
        "856": "}\n",
        "857": "\n"
    }
}