{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "import static java.util.Arrays.asList;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import com.google.common.testing.EqualsTester;\n",
        "24": "\n",
        "25": "import junit.framework.TestCase;\n",
        "26": "\n",
        "27": "import java.util.Arrays;\n",
        "28": "import java.util.Collection;\n",
        "29": "import java.util.Iterator;\n",
        "30": "import java.util.Map;\n",
        "31": "\n",
        "32": "/**\n",
        "33": " * Unit tests for {@code LinkedHashMultimap}.\n",
        "34": " *\n",
        "35": " * @author Jared Levy\n",
        "36": " */\n",
        "37": "@GwtCompatible(emulated = true)\n",
        "38": "public class LinkedHashMultimapTest extends TestCase {\n",
        "39": "\n",
        "40": "  public void testValueSetHashTableExpansion() {\n",
        "41": "    LinkedHashMultimap<String, Integer> multimap = LinkedHashMultimap.create();\n",
        "42": "    for (int z = 1; z <= 100; z++) {\n",
        "43": "      multimap.put(\"a\", z);\n",
        "44": "      // The Eclipse compiler (and hence GWT) rejects a parameterized cast.\n",
        "45": "      @SuppressWarnings(\"unchecked\")\n",
        "46": "      LinkedHashMultimap<String, Integer>.ValueSet valueSet =\n",
        "47": "          (LinkedHashMultimap.ValueSet) multimap.backingMap().get(\"a\");\n",
        "48": "      assertEquals(z, valueSet.size());\n",
        "49": "      assertFalse(Hashing.needsResizing(valueSet.size(), valueSet.hashTable.length, \n",
        "50": "          LinkedHashMultimap.VALUE_SET_LOAD_FACTOR));\n",
        "51": "    }\n",
        "52": "  }\n",
        "53": "\n",
        "54": "  private Multimap<String, Integer> initializeMultimap5() {\n",
        "55": "    Multimap<String, Integer> multimap = LinkedHashMultimap.create();\n",
        "56": "    multimap.put(\"foo\", 5);\n",
        "57": "    multimap.put(\"bar\", 4);\n",
        "58": "    multimap.put(\"foo\", 3);\n",
        "59": "    multimap.put(\"cow\", 2);\n",
        "60": "    multimap.put(\"bar\", 1);\n",
        "61": "    return multimap;\n",
        "62": "  }\n",
        "63": "\n",
        "64": "  public void testToString() {\n",
        "65": "    Multimap<String, Integer> multimap = LinkedHashMultimap.create();\n",
        "66": "    multimap.put(\"foo\", 3);\n",
        "67": "    multimap.put(\"bar\", 1);\n",
        "68": "    multimap.putAll(\"foo\", Arrays.asList(-1, 2, 4));\n",
        "69": "    multimap.putAll(\"bar\", Arrays.asList(2, 3));\n",
        "70": "    multimap.put(\"foo\", 1);\n",
        "71": "    assertEquals(\"{foo=[3, -1, 2, 4, 1], bar=[1, 2, 3]}\",\n",
        "72": "        multimap.toString());\n",
        "73": "  }\n",
        "74": "\n",
        "75": "  public void testOrderingReadOnly() {\n",
        "76": "    Multimap<String, Integer> multimap = initializeMultimap5();\n",
        "77": "    assertOrderingReadOnly(multimap);\n",
        "78": "  }\n",
        "79": "\n",
        "80": "  public void testOrderingUnmodifiable() {\n",
        "81": "    Multimap<String, Integer> multimap = initializeMultimap5();\n",
        "82": "    assertOrderingReadOnly(Multimaps.unmodifiableMultimap(multimap));\n",
        "83": "  }\n",
        "84": "\n",
        "85": "  public void testOrderingSynchronized() {\n",
        "86": "    Multimap<String, Integer> multimap = initializeMultimap5();\n",
        "87": "    assertOrderingReadOnly(Multimaps.synchronizedMultimap(multimap));\n",
        "88": "  }\n",
        "89": "\n",
        "90": "  private void assertOrderingReadOnly(Multimap<String, Integer> multimap) {\n",
        "91": "    assertThat(multimap.get(\"foo\")).containsExactly(5, 3).inOrder();\n",
        "92": "    assertThat(multimap.get(\"bar\")).containsExactly(4, 1).inOrder();\n",
        "93": "    assertThat(multimap.get(\"cow\")).contains(2);\n",
        "94": "\n",
        "95": "    assertThat(multimap.keySet()).containsExactly(\"foo\", \"bar\", \"cow\").inOrder();\n",
        "96": "    assertThat(multimap.values()).containsExactly(5, 4, 3, 2, 1).inOrder();\n",
        "97": "\n",
        "98": "    Iterator<Map.Entry<String, Integer>> entryIterator =\n",
        "99": "        multimap.entries().iterator();\n",
        "100": "    assertEquals(Maps.immutableEntry(\"foo\", 5), entryIterator.next());\n",
        "101": "    assertEquals(Maps.immutableEntry(\"bar\", 4), entryIterator.next());\n",
        "102": "    assertEquals(Maps.immutableEntry(\"foo\", 3), entryIterator.next());\n",
        "103": "    assertEquals(Maps.immutableEntry(\"cow\", 2), entryIterator.next());\n",
        "104": "    assertEquals(Maps.immutableEntry(\"bar\", 1), entryIterator.next());\n",
        "105": "\n",
        "106": "    Iterator<Map.Entry<String, Collection<Integer>>> collectionIterator =\n",
        "107": "        multimap.asMap().entrySet().iterator();\n",
        "108": "    Map.Entry<String, Collection<Integer>> entry = collectionIterator.next();\n",
        "109": "    assertEquals(\"foo\", entry.getKey());\n",
        "110": "    assertThat(entry.getValue()).containsExactly(5, 3).inOrder();\n",
        "111": "    entry = collectionIterator.next();\n",
        "112": "    assertEquals(\"bar\", entry.getKey());\n",
        "113": "    assertThat(entry.getValue()).containsExactly(4, 1).inOrder();\n",
        "114": "    entry = collectionIterator.next();\n",
        "115": "    assertEquals(\"cow\", entry.getKey());\n",
        "116": "    assertThat(entry.getValue()).contains(2);\n",
        "117": "  }\n",
        "118": "\n",
        "119": "  public void testOrderingUpdates() {\n",
        "120": "    Multimap<String, Integer> multimap = initializeMultimap5();\n",
        "121": "\n",
        "122": "    assertThat(multimap.replaceValues(\"foo\", asList(6, 7))).containsExactly(5, 3).inOrder();\n",
        "123": "    assertThat(multimap.keySet()).containsExactly(\"foo\", \"bar\", \"cow\").inOrder();\n",
        "124": "    assertThat(multimap.removeAll(\"foo\")).containsExactly(6, 7).inOrder();\n",
        "125": "    assertThat(multimap.keySet()).containsExactly(\"bar\", \"cow\").inOrder();\n",
        "126": "    assertTrue(multimap.remove(\"bar\", 4));\n",
        "127": "    assertThat(multimap.keySet()).containsExactly(\"bar\", \"cow\").inOrder();\n",
        "128": "    assertTrue(multimap.remove(\"bar\", 1));\n",
        "129": "    assertThat(multimap.keySet()).contains(\"cow\");\n",
        "130": "    multimap.put(\"bar\", 9);\n",
        "131": "    assertThat(multimap.keySet()).containsExactly(\"cow\", \"bar\").inOrder();\n",
        "132": "  }\n",
        "133": "\n",
        "134": "  public void testToStringNullExact() {\n",
        "135": "    Multimap<String, Integer> multimap = LinkedHashMultimap.create();\n",
        "136": "\n",
        "137": "    multimap.put(\"foo\", 3);\n",
        "138": "    multimap.put(\"foo\", -1);\n",
        "139": "    multimap.put(null, null);\n",
        "140": "    multimap.put(\"bar\", 1);\n",
        "141": "    multimap.put(\"foo\", 2);\n",
        "142": "    multimap.put(null, 0);\n",
        "143": "    multimap.put(\"bar\", 2);\n",
        "144": "    multimap.put(\"bar\", null);\n",
        "145": "    multimap.put(\"foo\", null);\n",
        "146": "    multimap.put(\"foo\", 4);\n",
        "147": "    multimap.put(null, -1);\n",
        "148": "    multimap.put(\"bar\", 3);\n",
        "149": "    multimap.put(\"bar\", 1);\n",
        "150": "    multimap.put(\"foo\", 1);\n",
        "151": "\n",
        "152": "    assertEquals(\n",
        "153": "        \"{foo=[3, -1, 2, null, 4, 1], null=[null, 0, -1], bar=[1, 2, null, 3]}\",\n",
        "154": "        multimap.toString());\n",
        "155": "  }\n",
        "156": "\n",
        "157": "  public void testPutMultimapOrdered() {\n",
        "158": "    Multimap<String, Integer> multimap = LinkedHashMultimap.create();\n",
        "159": "    multimap.putAll(initializeMultimap5());\n",
        "160": "    assertOrderingReadOnly(multimap);\n",
        "161": "  }\n",
        "162": "\n",
        "163": "  public void testKeysToString_ordering() {\n",
        "164": "    Multimap<String, Integer> multimap = initializeMultimap5();\n",
        "165": "    assertEquals(\"[foo x 2, bar x 2, cow]\", multimap.keys().toString());\n",
        "166": "  }\n",
        "167": "\n",
        "168": "  public void testCreate() {\n",
        "169": "    LinkedHashMultimap<String, Integer> multimap = LinkedHashMultimap.create();\n",
        "170": "    multimap.put(\"foo\", 1);\n",
        "171": "    multimap.put(\"bar\", 2);\n",
        "172": "    multimap.put(\"foo\", 3);\n",
        "173": "    assertEquals(ImmutableSet.of(1, 3), multimap.get(\"foo\"));\n",
        "174": "  }\n",
        "175": "\n",
        "176": "  public void testCreateFromMultimap() {\n",
        "177": "    Multimap<String, Integer> multimap = LinkedHashMultimap.create();\n",
        "178": "    multimap.put(\"a\", 1);\n",
        "179": "    multimap.put(\"b\", 2);\n",
        "180": "    multimap.put(\"a\", 3);\n",
        "181": "    multimap.put(\"c\", 4);\n",
        "182": "    LinkedHashMultimap<String, Integer> copy =\n",
        "183": "        LinkedHashMultimap.create(multimap);\n",
        "184": "    new EqualsTester()\n",
        "185": "        .addEqualityGroup(multimap, copy)\n",
        "186": "        .testEquals();\n",
        "187": "  }\n",
        "188": "\n",
        "189": "  public void testCreateFromSizes() {\n",
        "190": "    LinkedHashMultimap<String, Integer> multimap\n",
        "191": "        = LinkedHashMultimap.create(20, 15);\n",
        "192": "    multimap.put(\"foo\", 1);\n",
        "193": "    multimap.put(\"bar\", 2);\n",
        "194": "    multimap.put(\"foo\", 3);\n",
        "195": "    assertEquals(ImmutableSet.of(1, 3), multimap.get(\"foo\"));\n",
        "196": "  }\n",
        "197": "\n",
        "198": "  public void testCreateFromIllegalSizes() {\n",
        "199": "    try {\n",
        "200": "      LinkedHashMultimap.create(-20, 15);\n",
        "201": "      fail();\n",
        "202": "    } catch (IllegalArgumentException expected) {}\n",
        "203": "\n",
        "204": "    try {\n",
        "205": "      LinkedHashMultimap.create(20, -15);\n",
        "206": "      fail();\n",
        "207": "    } catch (IllegalArgumentException expected) {}\n",
        "208": "  }\n",
        "209": "}\n",
        "210": "\n"
    }
}