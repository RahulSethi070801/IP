{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2011 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "6": " *\n",
        "7": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "8": " *\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the\n",
        "10": " * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n",
        "11": " * express or implied. See the License for the specific language governing permissions and\n",
        "12": " * limitations under the License.\n",
        "13": " */\n",
        "14": "\n",
        "15": "package com.google.common.collect;\n",
        "16": "\n",
        "17": "import static com.google.common.collect.BoundType.CLOSED;\n",
        "18": "import static com.google.common.collect.BoundType.OPEN;\n",
        "19": "\n",
        "20": "import com.google.common.annotations.GwtCompatible;\n",
        "21": "import com.google.common.base.Objects;\n",
        "22": "\n",
        "23": "import junit.framework.TestCase;\n",
        "24": "\n",
        "25": "import java.util.Arrays;\n",
        "26": "import java.util.List;\n",
        "27": "\n",
        "28": "/**\n",
        "29": " * Tests for {@code GeneralRange}.\n",
        "30": " *\n",
        "31": " * @author Louis Wasserman\n",
        "32": " */\n",
        "33": "@GwtCompatible(emulated = true)\n",
        "34": "public class GeneralRangeTest extends TestCase {\n",
        "35": "  private static final Ordering<Integer> ORDERING = Ordering.natural().nullsFirst();\n",
        "36": "\n",
        "37": "  private static final List<Integer> IN_ORDER_VALUES = Arrays.asList(null, 1, 2, 3, 4, 5);\n",
        "38": "\n",
        "39": "  public void testCreateEmptyRangeFails() {\n",
        "40": "    for (BoundType lboundType : BoundType.values()) {\n",
        "41": "      for (BoundType uboundType : BoundType.values()) {\n",
        "42": "        try {\n",
        "43": "          GeneralRange.range(ORDERING, 4, lboundType, 2, uboundType);\n",
        "44": "          fail(\"Expected IAE\");\n",
        "45": "        } catch (IllegalArgumentException expected) {}\n",
        "46": "      }\n",
        "47": "    }\n",
        "48": "  }\n",
        "49": "\n",
        "50": "  public void testCreateEmptyRangeOpenOpenFails() {\n",
        "51": "    for (Integer i : IN_ORDER_VALUES) {\n",
        "52": "      try {\n",
        "53": "        GeneralRange.range(ORDERING, i, OPEN, i, OPEN);\n",
        "54": "        fail(\"Expected IAE\");\n",
        "55": "      } catch (IllegalArgumentException expected) {}\n",
        "56": "    }\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  public void testCreateEmptyRangeClosedOpenSucceeds() {\n",
        "60": "    for (Integer i : IN_ORDER_VALUES) {\n",
        "61": "      GeneralRange<Integer> range = GeneralRange.range(ORDERING, i, CLOSED, i, OPEN);\n",
        "62": "      for (Integer j : IN_ORDER_VALUES) {\n",
        "63": "        assertFalse(range.contains(j));\n",
        "64": "      }\n",
        "65": "    }\n",
        "66": "  }\n",
        "67": "\n",
        "68": "  public void testCreateEmptyRangeOpenClosedSucceeds() {\n",
        "69": "    for (Integer i : IN_ORDER_VALUES) {\n",
        "70": "      GeneralRange<Integer> range = GeneralRange.range(ORDERING, i, OPEN, i, CLOSED);\n",
        "71": "      for (Integer j : IN_ORDER_VALUES) {\n",
        "72": "        assertFalse(range.contains(j));\n",
        "73": "      }\n",
        "74": "    }\n",
        "75": "  }\n",
        "76": "\n",
        "77": "  public void testCreateSingletonRangeSucceeds() {\n",
        "78": "    for (Integer i : IN_ORDER_VALUES) {\n",
        "79": "      GeneralRange<Integer> range = GeneralRange.range(ORDERING, i, CLOSED, i, CLOSED);\n",
        "80": "      for (Integer j : IN_ORDER_VALUES) {\n",
        "81": "        assertEquals(Objects.equal(i, j), range.contains(j));\n",
        "82": "      }\n",
        "83": "    }\n",
        "84": "  }\n",
        "85": "\n",
        "86": "  public void testSingletonRange() {\n",
        "87": "    GeneralRange<Integer> range = GeneralRange.range(ORDERING, 3, CLOSED, 3, CLOSED);\n",
        "88": "    for (Integer i : IN_ORDER_VALUES) {\n",
        "89": "      assertEquals(ORDERING.compare(i, 3) == 0, range.contains(i));\n",
        "90": "    }\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  public void testLowerRange() {\n",
        "94": "    for (BoundType lBoundType : BoundType.values()) {\n",
        "95": "      GeneralRange<Integer> range = GeneralRange.downTo(ORDERING, 3, lBoundType);\n",
        "96": "      for (Integer i : IN_ORDER_VALUES) {\n",
        "97": "        assertEquals(ORDERING.compare(i, 3) > 0\n",
        "98": "            || (ORDERING.compare(i, 3) == 0 && lBoundType == CLOSED), range.contains(i));\n",
        "99": "        assertEquals(ORDERING.compare(i, 3) < 0\n",
        "100": "            || (ORDERING.compare(i, 3) == 0 && lBoundType == OPEN), range.tooLow(i));\n",
        "101": "        assertFalse(range.tooHigh(i));\n",
        "102": "      }\n",
        "103": "    }\n",
        "104": "  }\n",
        "105": "\n",
        "106": "  public void testUpperRange() {\n",
        "107": "    for (BoundType lBoundType : BoundType.values()) {\n",
        "108": "      GeneralRange<Integer> range = GeneralRange.upTo(ORDERING, 3, lBoundType);\n",
        "109": "      for (Integer i : IN_ORDER_VALUES) {\n",
        "110": "        assertEquals(ORDERING.compare(i, 3) < 0\n",
        "111": "            || (ORDERING.compare(i, 3) == 0 && lBoundType == CLOSED), range.contains(i));\n",
        "112": "        assertEquals(ORDERING.compare(i, 3) > 0\n",
        "113": "            || (ORDERING.compare(i, 3) == 0 && lBoundType == OPEN), range.tooHigh(i));\n",
        "114": "        assertFalse(range.tooLow(i));\n",
        "115": "      }\n",
        "116": "    }\n",
        "117": "  }\n",
        "118": "\n",
        "119": "  public void testDoublyBoundedAgainstRange() {\n",
        "120": "    for (BoundType lboundType : BoundType.values()) {\n",
        "121": "      for (BoundType uboundType : BoundType.values()) {\n",
        "122": "        Range<Integer> range = Range.range(2, lboundType, 4, uboundType);\n",
        "123": "        GeneralRange<Integer> gRange = GeneralRange.range(ORDERING, 2, lboundType, 4, uboundType);\n",
        "124": "        for (Integer i : IN_ORDER_VALUES) {\n",
        "125": "          assertEquals(i != null && range.contains(i), gRange.contains(i));\n",
        "126": "        }\n",
        "127": "      }\n",
        "128": "    }\n",
        "129": "  }\n",
        "130": "\n",
        "131": "  public void testIntersectAgainstMatchingEndpointsRange() {\n",
        "132": "    GeneralRange<Integer> range = GeneralRange.range(ORDERING, 2, CLOSED, 4, OPEN);\n",
        "133": "    assertEquals(GeneralRange.range(ORDERING, 2, OPEN, 4, OPEN),\n",
        "134": "        range.intersect(GeneralRange.range(ORDERING, 2, OPEN, 4, CLOSED)));\n",
        "135": "  }\n",
        "136": "\n",
        "137": "  public void testIntersectAgainstBiggerRange() {\n",
        "138": "    GeneralRange<Integer> range = GeneralRange.range(ORDERING, 2, CLOSED, 4, OPEN);\n",
        "139": "\n",
        "140": "    assertEquals(GeneralRange.range(ORDERING, 2, CLOSED, 4, OPEN),\n",
        "141": "        range.intersect(GeneralRange.range(ORDERING, null, OPEN, 5, CLOSED)));\n",
        "142": "\n",
        "143": "    assertEquals(GeneralRange.range(ORDERING, 2, OPEN, 4, OPEN),\n",
        "144": "        range.intersect(GeneralRange.range(ORDERING, 2, OPEN, 5, CLOSED)));\n",
        "145": "\n",
        "146": "    assertEquals(GeneralRange.range(ORDERING, 2, CLOSED, 4, OPEN),\n",
        "147": "        range.intersect(GeneralRange.range(ORDERING, 1, OPEN, 4, OPEN)));\n",
        "148": "  }\n",
        "149": "\n",
        "150": "  public void testIntersectAgainstSmallerRange() {\n",
        "151": "    GeneralRange<Integer> range = GeneralRange.range(ORDERING, 2, OPEN, 4, OPEN);\n",
        "152": "    assertEquals(GeneralRange.range(ORDERING, 3, CLOSED, 4, OPEN),\n",
        "153": "        range.intersect(GeneralRange.range(ORDERING, 3, CLOSED, 4, CLOSED)));\n",
        "154": "  }\n",
        "155": "\n",
        "156": "  public void testIntersectOverlappingRange() {\n",
        "157": "    GeneralRange<Integer> range = GeneralRange.range(ORDERING, 2, OPEN, 4, CLOSED);\n",
        "158": "    assertEquals(GeneralRange.range(ORDERING, 3, CLOSED, 4, CLOSED),\n",
        "159": "        range.intersect(GeneralRange.range(ORDERING, 3, CLOSED, 5, CLOSED)));\n",
        "160": "    assertEquals(GeneralRange.range(ORDERING, 2, OPEN, 3, OPEN),\n",
        "161": "        range.intersect(GeneralRange.range(ORDERING, 1, OPEN, 3, OPEN)));\n",
        "162": "  }\n",
        "163": "\n",
        "164": "  public void testIntersectNonOverlappingRange() {\n",
        "165": "    GeneralRange<Integer> range = GeneralRange.range(ORDERING, 2, OPEN, 4, CLOSED);\n",
        "166": "    assertTrue(range.intersect(GeneralRange.range(ORDERING, 5, CLOSED, 6, CLOSED)).isEmpty());\n",
        "167": "    assertTrue(range.intersect(GeneralRange.range(ORDERING, 1, OPEN, 2, OPEN)).isEmpty());\n",
        "168": "  }\n",
        "169": "\n",
        "170": "  public void testFromRangeAll() {\n",
        "171": "    assertEquals(GeneralRange.all(Ordering.natural()), GeneralRange.from(Range.all()));\n",
        "172": "  }\n",
        "173": "\n",
        "174": "  public void testFromRangeOneEnd() {\n",
        "175": "    for (BoundType endpointType : BoundType.values()) {\n",
        "176": "      assertEquals(GeneralRange.upTo(Ordering.natural(), 3, endpointType),\n",
        "177": "          GeneralRange.from(Range.upTo(3, endpointType)));\n",
        "178": "\n",
        "179": "      assertEquals(GeneralRange.downTo(Ordering.natural(), 3, endpointType),\n",
        "180": "          GeneralRange.from(Range.downTo(3, endpointType)));\n",
        "181": "    }\n",
        "182": "  }\n",
        "183": "\n",
        "184": "  public void testFromRangeTwoEnds() {\n",
        "185": "    for (BoundType lowerType : BoundType.values()) {\n",
        "186": "      for (BoundType upperType : BoundType.values()) {\n",
        "187": "        assertEquals(GeneralRange.range(Ordering.natural(), 3, lowerType, 4, upperType),\n",
        "188": "            GeneralRange.from(Range.range(3, lowerType, 4, upperType)));\n",
        "189": "      }\n",
        "190": "    }\n",
        "191": "  }\n",
        "192": "\n",
        "193": "  public void testReverse() {\n",
        "194": "    assertEquals(GeneralRange.all(ORDERING.reverse()), GeneralRange.all(ORDERING).reverse());\n",
        "195": "    assertEquals(GeneralRange.downTo(ORDERING.reverse(), 3, CLOSED),\n",
        "196": "        GeneralRange.upTo(ORDERING, 3, CLOSED).reverse());\n",
        "197": "    assertEquals(GeneralRange.upTo(ORDERING.reverse(), 3, OPEN),\n",
        "198": "        GeneralRange.downTo(ORDERING, 3, OPEN).reverse());\n",
        "199": "    assertEquals(GeneralRange.range(ORDERING.reverse(), 5, OPEN, 3, CLOSED),\n",
        "200": "        GeneralRange.range(ORDERING, 3, CLOSED, 5, OPEN).reverse());\n",
        "201": "  }\n",
        "202": "}\n",
        "203": "\n"
    }
}