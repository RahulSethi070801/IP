{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2013 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.google;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionFeature.ALLOWS_NULL_QUERIES;\n",
        "20": "import static com.google.common.collect.testing.features.CollectionFeature.ALLOWS_NULL_VALUES;\n",
        "21": "import static com.google.common.collect.testing.features.CollectionSize.SEVERAL;\n",
        "22": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "23": "\n",
        "24": "import com.google.common.annotations.GwtCompatible;\n",
        "25": "import com.google.common.collect.testing.WrongType;\n",
        "26": "import com.google.common.collect.testing.features.CollectionFeature;\n",
        "27": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "28": "\n",
        "29": "/**\n",
        "30": " * Tests for {@code Multiset#count}.\n",
        "31": " *\n",
        "32": " * @author Jared Levy\n",
        "33": " */\n",
        "34": "@GwtCompatible(emulated = true)\n",
        "35": "public class MultisetCountTester<E> extends AbstractMultisetTester<E> {\n",
        "36": "\n",
        "37": "  public void testCount_0() {\n",
        "38": "    assertEquals(\"multiset.count(missing) didn't return 0\",\n",
        "39": "        0, getMultiset().count(e3()));\n",
        "40": "  }\n",
        "41": "\n",
        "42": "  @CollectionSize.Require(absent = ZERO)\n",
        "43": "  public void testCount_1() {\n",
        "44": "    assertEquals(\"multiset.count(present) didn't return 1\",\n",
        "45": "        1, getMultiset().count(e0()));\n",
        "46": "  }\n",
        "47": "\n",
        "48": "  @CollectionSize.Require(SEVERAL)\n",
        "49": "  public void testCount_3() {\n",
        "50": "    initThreeCopies();\n",
        "51": "    assertEquals(\"multiset.count(thriceContained) didn't return 3\",\n",
        "52": "        3, getMultiset().count(e0()));\n",
        "53": "  }\n",
        "54": "\n",
        "55": "  @CollectionFeature.Require(ALLOWS_NULL_QUERIES)\n",
        "56": "  public void testCount_nullAbsent() {\n",
        "57": "    assertEquals(\"multiset.count(null) didn't return 0\",\n",
        "58": "        0, getMultiset().count(null));\n",
        "59": "  }\n",
        "60": "\n",
        "61": "  @CollectionFeature.Require(absent = ALLOWS_NULL_QUERIES)\n",
        "62": "  public void testCount_null_forbidden() {\n",
        "63": "    try {\n",
        "64": "      getMultiset().count(null);\n",
        "65": "      fail(\"Expected NullPointerException\");\n",
        "66": "    } catch (NullPointerException expected) {}\n",
        "67": "  }\n",
        "68": "  \n",
        "69": "  @CollectionSize.Require(absent = ZERO)\n",
        "70": "  @CollectionFeature.Require(ALLOWS_NULL_VALUES)\n",
        "71": "  public void testCount_nullPresent() {\n",
        "72": "    initCollectionWithNullElement();\n",
        "73": "    assertEquals(1, getMultiset().count(null));\n",
        "74": "  }\n",
        "75": "\n",
        "76": "  public void testCount_wrongType() {\n",
        "77": "    assertEquals(\"multiset.count(wrongType) didn't return 0\",\n",
        "78": "        0, getMultiset().count(WrongType.VALUE));\n",
        "79": "  }\n",
        "80": "}\n",
        "81": "\n"
    }
}