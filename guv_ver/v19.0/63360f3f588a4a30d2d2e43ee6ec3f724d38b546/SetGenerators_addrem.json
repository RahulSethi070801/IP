{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.google;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "import static com.google.common.collect.Lists.newArrayList;\n",
        "21": "import static com.google.common.collect.Sets.newTreeSet;\n",
        "22": "import static com.google.common.collect.testing.SampleElements.Strings.AFTER_LAST;\n",
        "23": "import static com.google.common.collect.testing.SampleElements.Strings.AFTER_LAST_2;\n",
        "24": "import static com.google.common.collect.testing.SampleElements.Strings.BEFORE_FIRST;\n",
        "25": "import static com.google.common.collect.testing.SampleElements.Strings.BEFORE_FIRST_2;\n",
        "26": "import static junit.framework.Assert.assertEquals;\n",
        "27": "\n",
        "28": "import com.google.common.annotations.GwtCompatible;\n",
        "29": "import com.google.common.collect.ContiguousSet;\n",
        "30": "import com.google.common.collect.DiscreteDomain;\n",
        "31": "import com.google.common.collect.ImmutableSet;\n",
        "32": "import com.google.common.collect.ImmutableSortedSet;\n",
        "33": "import com.google.common.collect.Lists;\n",
        "34": "import com.google.common.collect.Ordering;\n",
        "35": "import com.google.common.collect.Range;\n",
        "36": "import com.google.common.collect.Sets;\n",
        "37": "import com.google.common.collect.testing.TestCollectionGenerator;\n",
        "38": "import com.google.common.collect.testing.TestCollidingSetGenerator;\n",
        "39": "import com.google.common.collect.testing.TestIntegerSortedSetGenerator;\n",
        "40": "import com.google.common.collect.testing.TestSetGenerator;\n",
        "41": "import com.google.common.collect.testing.TestStringListGenerator;\n",
        "42": "import com.google.common.collect.testing.TestStringSetGenerator;\n",
        "43": "import com.google.common.collect.testing.TestStringSortedSetGenerator;\n",
        "44": "import com.google.common.collect.testing.TestUnhashableCollectionGenerator;\n",
        "45": "import com.google.common.collect.testing.UnhashableObject;\n",
        "46": "\n",
        "47": "import java.util.Arrays;\n",
        "48": "import java.util.Collections;\n",
        "49": "import java.util.Comparator;\n",
        "50": "import java.util.List;\n",
        "51": "import java.util.Set;\n",
        "52": "import java.util.SortedSet;\n",
        "53": "\n",
        "54": "/**\n",
        "55": " * Generators of different types of sets and derived collections from sets.\n",
        "56": " *\n",
        "57": " * @author Kevin Bourrillion\n",
        "58": " * @author Jared Levy\n",
        "59": " * @author Hayward Chan\n",
        "60": " */\n",
        "61": "@GwtCompatible(emulated = true)\n",
        "62": "public class SetGenerators {\n",
        "63": "\n",
        "64": "  public static class ImmutableSetCopyOfGenerator extends TestStringSetGenerator {\n",
        "65": "    @Override protected Set<String> create(String[] elements) {\n",
        "66": "      return ImmutableSet.copyOf(elements);\n",
        "67": "    }\n",
        "68": "  }\n",
        "69": "\n",
        "70": "  public static class ImmutableSetWithBadHashesGenerator\n",
        "71": "      extends TestCollidingSetGenerator\n",
        "72": "      // Work around a GWT compiler bug.  Not explicitly listing this will\n",
        "73": "      // cause the createArray() method missing in the generated javascript.\n",
        "74": "      // TODO: Remove this once the GWT bug is fixed.\n",
        "75": "      implements TestCollectionGenerator<Object> {\n",
        "76": "    @Override\n",
        "77": "    public Set<Object> create(Object... elements) {\n",
        "78": "      return ImmutableSet.copyOf(elements);\n",
        "79": "    }\n",
        "80": "  }\n",
        "81": "\n",
        "82": "  public static class DegeneratedImmutableSetGenerator\n",
        "83": "      extends TestStringSetGenerator {\n",
        "84": "    // Make sure we get what we think we're getting, or else this test\n",
        "85": "    // is pointless\n",
        "86": "    @SuppressWarnings(\"cast\")\n",
        "87": "    @Override protected Set<String> create(String[] elements) {\n",
        "88": "      return (ImmutableSet<String>)\n",
        "89": "          ImmutableSet.of(elements[0], elements[0]);\n",
        "90": "    }\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  public static class ImmutableSortedSetCopyOfGenerator\n",
        "94": "      extends TestStringSortedSetGenerator {\n",
        "95": "    @Override protected SortedSet<String> create(String[] elements) {\n",
        "96": "      return ImmutableSortedSet.copyOf(elements);\n",
        "97": "    }\n",
        "98": "  }\n",
        "99": "\n",
        "100": "  public static class ImmutableSortedSetHeadsetGenerator\n",
        "101": "      extends TestStringSortedSetGenerator {\n",
        "102": "    @Override protected SortedSet<String> create(String[] elements) {\n",
        "103": "      List<String> list = Lists.newArrayList(elements);\n",
        "104": "      list.add(\"zzz\");\n",
        "105": "      return ImmutableSortedSet.copyOf(list)\n",
        "106": "          .headSet(\"zzy\");\n",
        "107": "    }\n",
        "108": "  }\n",
        "109": "\n",
        "110": "  public static class ImmutableSortedSetTailsetGenerator\n",
        "111": "      extends TestStringSortedSetGenerator {\n",
        "112": "    @Override protected SortedSet<String> create(String[] elements) {\n",
        "113": "      List<String> list = Lists.newArrayList(elements);\n",
        "114": "      list.add(\"\\0\");\n",
        "115": "      return ImmutableSortedSet.copyOf(list)\n",
        "116": "          .tailSet(\"\\0\\0\");\n",
        "117": "    }\n",
        "118": "  }\n",
        "119": "\n",
        "120": "  public static class ImmutableSortedSetSubsetGenerator\n",
        "121": "      extends TestStringSortedSetGenerator {\n",
        "122": "    @Override protected SortedSet<String> create(String[] elements) {\n",
        "123": "      List<String> list = Lists.newArrayList(elements);\n",
        "124": "      list.add(\"\\0\");\n",
        "125": "      list.add(\"zzz\");\n",
        "126": "      return ImmutableSortedSet.copyOf(list)\n",
        "127": "          .subSet(\"\\0\\0\", \"zzy\");\n",
        "128": "    }\n",
        "129": "  }\n",
        "130": "\n",
        "131": "  public static class ImmutableSortedSetExplicitComparator\n",
        "132": "      extends TestStringSetGenerator {\n",
        "133": "\n",
        "134": "    private static final Comparator<String> STRING_REVERSED\n",
        "135": "        = Collections.reverseOrder();\n",
        "136": "\n",
        "137": "    @Override protected SortedSet<String> create(String[] elements) {\n",
        "138": "      return ImmutableSortedSet.orderedBy(STRING_REVERSED)\n",
        "139": "          .add(elements)\n",
        "140": "          .build();\n",
        "141": "    }\n",
        "142": "\n",
        "143": "    @Override public List<String> order(List<String> insertionOrder) {\n",
        "144": "      Collections.sort(insertionOrder, Collections.reverseOrder());\n",
        "145": "      return insertionOrder;\n",
        "146": "    }\n",
        "147": "  }\n",
        "148": "\n",
        "149": "  public static class ImmutableSortedSetExplicitSuperclassComparatorGenerator\n",
        "150": "      extends TestStringSetGenerator {\n",
        "151": "\n",
        "152": "    private static final Comparator<Comparable<?>> COMPARABLE_REVERSED\n",
        "153": "        = Collections.reverseOrder();\n",
        "154": "\n",
        "155": "    @Override protected SortedSet<String> create(String[] elements) {\n",
        "156": "      return new ImmutableSortedSet.Builder<String>(COMPARABLE_REVERSED)\n",
        "157": "          .add(elements)\n",
        "158": "          .build();\n",
        "159": "    }\n",
        "160": "\n",
        "161": "    @Override public List<String> order(List<String> insertionOrder) {\n",
        "162": "      Collections.sort(insertionOrder, Collections.reverseOrder());\n",
        "163": "      return insertionOrder;\n",
        "164": "    }\n",
        "165": "  }\n",
        "166": "\n",
        "167": "  public static class ImmutableSortedSetReversedOrderGenerator\n",
        "168": "      extends TestStringSetGenerator {\n",
        "169": "\n",
        "170": "    @Override protected SortedSet<String> create(String[] elements) {\n",
        "171": "      return ImmutableSortedSet.<String>reverseOrder()\n",
        "172": "          .addAll(Arrays.asList(elements).iterator())\n",
        "173": "          .build();\n",
        "174": "    }\n",
        "175": "\n",
        "176": "    @Override public List<String> order(List<String> insertionOrder) {\n",
        "177": "      Collections.sort(insertionOrder, Collections.reverseOrder());\n",
        "178": "      return insertionOrder;\n",
        "179": "    }\n",
        "180": "  }\n",
        "181": "\n",
        "182": "  public static class ImmutableSortedSetUnhashableGenerator\n",
        "183": "      extends TestUnhashableSetGenerator {\n",
        "184": "    @Override public Set<UnhashableObject> create(\n",
        "185": "        UnhashableObject[] elements) {\n",
        "186": "      return ImmutableSortedSet.copyOf(elements);\n",
        "187": "    }\n",
        "188": "  }\n",
        "189": "\n",
        "190": "  public static class ImmutableSetAsListGenerator\n",
        "191": "      extends TestStringListGenerator {\n",
        "192": "    @Override protected List<String> create(String[] elements) {\n",
        "193": "      return ImmutableSet.copyOf(elements).asList();\n",
        "194": "    }\n",
        "195": "  }\n",
        "196": "\n",
        "197": "  public static class ImmutableSortedSetAsListGenerator\n",
        "198": "      extends TestStringListGenerator {\n",
        "199": "    @Override protected List<String> create(String[] elements) {\n",
        "200": "      Comparator<String> comparator = createExplicitComparator(elements);\n",
        "201": "      ImmutableSet<String> set = ImmutableSortedSet.copyOf(\n",
        "202": "          comparator, Arrays.asList(elements));\n",
        "203": "      return set.asList();\n",
        "204": "    }\n",
        "205": "  }\n",
        "206": "\n",
        "207": "  public static class ImmutableSortedSetSubsetAsListGenerator\n",
        "208": "      extends TestStringListGenerator {\n",
        "209": "    @Override protected List<String> create(String[] elements) {\n",
        "210": "      Comparator<String> comparator = createExplicitComparator(elements);\n",
        "211": "      ImmutableSortedSet.Builder<String> builder\n",
        "212": "          = ImmutableSortedSet.orderedBy(comparator);\n",
        "213": "      builder.add(BEFORE_FIRST);\n",
        "214": "      builder.add(elements);\n",
        "215": "      builder.add(AFTER_LAST);\n",
        "216": "      return builder.build().subSet(BEFORE_FIRST_2,\n",
        "217": "          AFTER_LAST).asList();\n",
        "218": "    }\n",
        "219": "  }\n",
        "220": "\n",
        "221": "  public static class ImmutableSortedSetAsListSubListGenerator\n",
        "222": "      extends TestStringListGenerator {\n",
        "223": "    @Override protected List<String> create(String[] elements) {\n",
        "224": "      Comparator<String> comparator = createExplicitComparator(elements);\n",
        "225": "      ImmutableSortedSet.Builder<String> builder\n",
        "226": "          = ImmutableSortedSet.orderedBy(comparator);\n",
        "227": "      builder.add(BEFORE_FIRST);\n",
        "228": "      builder.add(elements);\n",
        "229": "      builder.add(AFTER_LAST);\n",
        "230": "      return builder.build().asList().subList(1, elements.length + 1);\n",
        "231": "    }\n",
        "232": "  }\n",
        "233": "\n",
        "234": "  public static class ImmutableSortedSetSubsetAsListSubListGenerator\n",
        "235": "      extends TestStringListGenerator {\n",
        "236": "    @Override protected List<String> create(String[] elements) {\n",
        "237": "      Comparator<String> comparator = createExplicitComparator(elements);\n",
        "238": "      ImmutableSortedSet.Builder<String> builder\n",
        "239": "          = ImmutableSortedSet.orderedBy(comparator);\n",
        "240": "      builder.add(BEFORE_FIRST);\n",
        "241": "      builder.add(BEFORE_FIRST_2);\n",
        "242": "      builder.add(elements);\n",
        "243": "      builder.add(AFTER_LAST);\n",
        "244": "      builder.add(AFTER_LAST_2);\n",
        "245": "      return builder.build().subSet(BEFORE_FIRST_2,\n",
        "246": "          AFTER_LAST_2)\n",
        "247": "              .asList().subList(1, elements.length + 1);\n",
        "248": "    }\n",
        "249": "  }\n",
        "250": "\n",
        "251": "  public abstract static class TestUnhashableSetGenerator\n",
        "252": "      extends TestUnhashableCollectionGenerator<Set<UnhashableObject>>\n",
        "253": "      implements TestSetGenerator<UnhashableObject> {\n",
        "254": "  }\n",
        "255": "\n",
        "256": "  private static Ordering<String> createExplicitComparator(\n",
        "257": "      String[] elements) {\n",
        "258": "    // Collapse equal elements, which Ordering.explicit() doesn't support, while\n",
        "259": "    // maintaining the ordering by first occurrence.\n",
        "260": "    Set<String> elementsPlus = Sets.newLinkedHashSet();\n",
        "261": "    elementsPlus.add(BEFORE_FIRST);\n",
        "262": "    elementsPlus.add(BEFORE_FIRST_2);\n",
        "263": "    elementsPlus.addAll(Arrays.asList(elements));\n",
        "264": "    elementsPlus.add(AFTER_LAST);\n",
        "265": "    elementsPlus.add(AFTER_LAST_2);\n",
        "266": "    return Ordering.explicit(Lists.newArrayList(elementsPlus));\n",
        "267": "  }\n",
        "268": "\n",
        "269": "  /*\n",
        "270": "   * All the ContiguousSet generators below manually reject nulls here. In principle, we'd like to\n",
        "271": "   * defer that to Range, since it's ContiguousSet.create() that's used to create the sets. However,\n",
        "272": "   * that gets messy here, and we already have null tests for Range.\n",
        "273": "   */\n",
        "274": "\n",
        "275": "  /*\n",
        "276": "   * These generators also rely on consecutive integer inputs (not necessarily in order, but no\n",
        "277": "   * holes).\n",
        "278": "   */\n",
        "279": "\n",
        "280": "  // SetCreationTester has some tests that pass in duplicates. Dedup them.\n",
        "281": "  private static <E extends Comparable<? super E>> SortedSet<E> nullCheckedTreeSet(E[] elements) {\n",
        "282": "    SortedSet<E> set = newTreeSet();\n",
        "283": "    for (E element : elements) {\n",
        "284": "      // Explicit null check because TreeSet wrongly accepts add(null) when empty.\n",
        "285": "      set.add(checkNotNull(element));\n",
        "286": "    }\n",
        "287": "    return set;\n",
        "288": "  }\n",
        "289": "\n",
        "290": "  public static class ContiguousSetGenerator extends AbstractContiguousSetGenerator {\n",
        "291": "    @Override protected SortedSet<Integer> create(Integer[] elements) {\n",
        "292": "      return checkedCreate(nullCheckedTreeSet(elements));\n",
        "293": "    }\n",
        "294": "  }\n",
        "295": "\n",
        "296": "  public static class ContiguousSetHeadsetGenerator extends AbstractContiguousSetGenerator {\n",
        "297": "    @Override protected SortedSet<Integer> create(Integer[] elements) {\n",
        "298": "      SortedSet<Integer> set = nullCheckedTreeSet(elements);\n",
        "299": "      int tooHigh = (set.isEmpty()) ? 0 : set.last() + 1;\n",
        "300": "      set.add(tooHigh);\n",
        "301": "      return checkedCreate(set).headSet(tooHigh);\n",
        "302": "    }\n",
        "303": "  }\n",
        "304": "\n",
        "305": "  public static class ContiguousSetTailsetGenerator extends AbstractContiguousSetGenerator {\n",
        "306": "    @Override protected SortedSet<Integer> create(Integer[] elements) {\n",
        "307": "      SortedSet<Integer> set = nullCheckedTreeSet(elements);\n",
        "308": "      int tooLow = (set.isEmpty()) ? 0 : set.first() - 1;\n",
        "309": "      set.add(tooLow);\n",
        "310": "      return checkedCreate(set).tailSet(tooLow + 1);\n",
        "311": "    }\n",
        "312": "  }\n",
        "313": "\n",
        "314": "  public static class ContiguousSetSubsetGenerator extends AbstractContiguousSetGenerator {\n",
        "315": "    @Override protected SortedSet<Integer> create(Integer[] elements) {\n",
        "316": "      SortedSet<Integer> set = nullCheckedTreeSet(elements);\n",
        "317": "      if (set.isEmpty()) {\n",
        "318": "        /*\n",
        "319": "         * The (tooLow + 1, tooHigh) arguments below would be invalid because tooLow would be\n",
        "320": "         * greater than tooHigh.\n",
        "321": "         */\n",
        "322": "        return ContiguousSet.create(Range.openClosed(0, 1), DiscreteDomain.integers()).subSet(0, 1);\n",
        "323": "      }\n",
        "324": "      int tooHigh = set.last() + 1;\n",
        "325": "      int tooLow = set.first() - 1;\n",
        "326": "      set.add(tooHigh);\n",
        "327": "      set.add(tooLow);\n",
        "328": "      return checkedCreate(set).subSet(tooLow + 1, tooHigh);\n",
        "329": "    }\n",
        "330": "  }\n",
        "331": "\n",
        "332": "  private abstract static class AbstractContiguousSetGenerator\n",
        "333": "      extends TestIntegerSortedSetGenerator {\n",
        "334": "    protected final ContiguousSet<Integer> checkedCreate(SortedSet<Integer> elementsSet) {\n",
        "335": "      List<Integer> elements = newArrayList(elementsSet);\n",
        "336": "      /*\n",
        "337": "       * A ContiguousSet can't have holes. If a test demands a hole, it should be changed so that it\n",
        "338": "       * doesn't need one, or it should be suppressed for ContiguousSet.\n",
        "339": "       */\n",
        "340": "      for (int i = 0; i < elements.size() - 1; i++) {\n",
        "341": "        assertEquals(elements.get(i) + 1, (int) elements.get(i + 1));\n",
        "342": "      }\n",
        "343": "      Range<Integer> range =\n",
        "344": "          (elements.isEmpty()) ? Range.closedOpen(0, 0) : Range.encloseAll(elements);\n",
        "345": "      return ContiguousSet.create(range, DiscreteDomain.integers());\n",
        "346": "    }\n",
        "347": "  }\n",
        "348": "}\n",
        "349": "\n"
    }
}