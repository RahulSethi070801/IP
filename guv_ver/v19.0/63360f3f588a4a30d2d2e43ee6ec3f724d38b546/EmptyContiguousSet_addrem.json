{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2011 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "6": " *\n",
        "7": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "8": " *\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "13": " */\n",
        "14": "package com.google.common.collect;\n",
        "15": "\n",
        "16": "import com.google.common.annotations.GwtCompatible;\n",
        "17": "\n",
        "18": "import java.util.NoSuchElementException;\n",
        "19": "import java.util.Set;\n",
        "20": "\n",
        "21": "import javax.annotation.Nullable;\n",
        "22": "\n",
        "23": "/**\n",
        "24": " * An empty contiguous set.\n",
        "25": " *\n",
        "26": " * @author Gregory Kick\n",
        "27": " */\n",
        "28": "@GwtCompatible(emulated = true)\n",
        "29": "@SuppressWarnings(\"unchecked\") // allow ungenerified Comparable types\n",
        "30": "final class EmptyContiguousSet<C extends Comparable> extends ContiguousSet<C> {\n",
        "31": "  EmptyContiguousSet(DiscreteDomain<C> domain) {\n",
        "32": "    super(domain);\n",
        "33": "  }\n",
        "34": "\n",
        "35": "  @Override\n",
        "36": "  public C first() {\n",
        "37": "    throw new NoSuchElementException();\n",
        "38": "  }\n",
        "39": "\n",
        "40": "  @Override\n",
        "41": "  public C last() {\n",
        "42": "    throw new NoSuchElementException();\n",
        "43": "  }\n",
        "44": "\n",
        "45": "  @Override\n",
        "46": "  public int size() {\n",
        "47": "    return 0;\n",
        "48": "  }\n",
        "49": "\n",
        "50": "  @Override\n",
        "51": "  public ContiguousSet<C> intersection(ContiguousSet<C> other) {\n",
        "52": "    return this;\n",
        "53": "  }\n",
        "54": "\n",
        "55": "  @Override\n",
        "56": "  public Range<C> range() {\n",
        "57": "    throw new NoSuchElementException();\n",
        "58": "  }\n",
        "59": "\n",
        "60": "  @Override\n",
        "61": "  public Range<C> range(BoundType lowerBoundType, BoundType upperBoundType) {\n",
        "62": "    throw new NoSuchElementException();\n",
        "63": "  }\n",
        "64": "\n",
        "65": "  @Override\n",
        "66": "  ContiguousSet<C> headSetImpl(C toElement, boolean inclusive) {\n",
        "67": "    return this;\n",
        "68": "  }\n",
        "69": "\n",
        "70": "  @Override\n",
        "71": "  ContiguousSet<C> subSetImpl(\n",
        "72": "      C fromElement, boolean fromInclusive, C toElement, boolean toInclusive) {\n",
        "73": "    return this;\n",
        "74": "  }\n",
        "75": "\n",
        "76": "  @Override\n",
        "77": "  ContiguousSet<C> tailSetImpl(C fromElement, boolean fromInclusive) {\n",
        "78": "    return this;\n",
        "79": "  }\n",
        "80": "\n",
        "81": "  @Override\n",
        "82": "  public boolean contains(Object object) {\n",
        "83": "    return false;\n",
        "84": "  }\n",
        "85": "\n",
        "86": "  @Override\n",
        "87": "  public UnmodifiableIterator<C> iterator() {\n",
        "88": "    return Iterators.emptyIterator();\n",
        "89": "  }\n",
        "90": "\n",
        "91": "  @Override\n",
        "92": "  boolean isPartialView() {\n",
        "93": "    return false;\n",
        "94": "  }\n",
        "95": "\n",
        "96": "  @Override\n",
        "97": "  public boolean isEmpty() {\n",
        "98": "    return true;\n",
        "99": "  }\n",
        "100": "\n",
        "101": "  @Override\n",
        "102": "  public ImmutableList<C> asList() {\n",
        "103": "    return ImmutableList.of();\n",
        "104": "  }\n",
        "105": "\n",
        "106": "  @Override\n",
        "107": "  public String toString() {\n",
        "108": "    return \"[]\";\n",
        "109": "  }\n",
        "110": "\n",
        "111": "  @Override\n",
        "112": "  public boolean equals(@Nullable Object object) {\n",
        "113": "    if (object instanceof Set) {\n",
        "114": "      Set<?> that = (Set<?>) object;\n",
        "115": "      return that.isEmpty();\n",
        "116": "    }\n",
        "117": "    return false;\n",
        "118": "  }\n",
        "119": "\n",
        "120": "  @Override\n",
        "121": "  public int hashCode() {\n",
        "122": "    return 0;\n",
        "123": "  }\n",
        "124": "}\n",
        "125": "\n"
    }
}