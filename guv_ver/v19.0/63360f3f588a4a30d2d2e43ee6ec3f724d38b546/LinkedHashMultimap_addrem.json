{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2007 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.CollectPreconditions.checkNonnegative;\n",
        "20": "import static com.google.common.collect.CollectPreconditions.checkRemove;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import com.google.common.annotations.VisibleForTesting;\n",
        "24": "import com.google.common.base.Objects;\n",
        "25": "import com.google.j2objc.annotations.WeakOuter;\n",
        "26": "\n",
        "27": "import java.util.Arrays;\n",
        "28": "import java.util.Collection;\n",
        "29": "import java.util.ConcurrentModificationException;\n",
        "30": "import java.util.Iterator;\n",
        "31": "import java.util.LinkedHashMap;\n",
        "32": "import java.util.LinkedHashSet;\n",
        "33": "import java.util.Map;\n",
        "34": "import java.util.NoSuchElementException;\n",
        "35": "import java.util.Set;\n",
        "36": "\n",
        "37": "import javax.annotation.Nullable;\n",
        "38": "\n",
        "39": "/**\n",
        "40": " * Implementation of {@code Multimap} that does not allow duplicate key-value\n",
        "41": " * entries and that returns collections whose iterators follow the ordering in\n",
        "42": " * which the data was added to the multimap.\n",
        "43": " *\n",
        "44": " * <p>The collections returned by {@code keySet}, {@code keys}, and {@code\n",
        "45": " * asMap} iterate through the keys in the order they were first added to the\n",
        "46": " * multimap. Similarly, {@code get}, {@code removeAll}, and {@code\n",
        "47": " * replaceValues} return collections that iterate through the values in the\n",
        "48": " * order they were added. The collections generated by {@code entries} and\n",
        "49": " * {@code values} iterate across the key-value mappings in the order they were\n",
        "50": " * added to the multimap.\n",
        "51": " *\n",
        "52": " * <p>The iteration ordering of the collections generated by {@code keySet},\n",
        "53": " * {@code keys}, and {@code asMap} has a few subtleties. As long as the set of\n",
        "54": " * keys remains unchanged, adding or removing mappings does not affect the key\n",
        "55": " * iteration order. However, if you remove all values associated with a key and\n",
        "56": " * then add the key back to the multimap, that key will come last in the key\n",
        "57": " * iteration order.\n",
        "58": " *\n",
        "59": " * <p>The multimap does not store duplicate key-value pairs. Adding a new\n",
        "60": " * key-value pair equal to an existing key-value pair has no effect.\n",
        "61": " *\n",
        "62": " * <p>Keys and values may be null. All optional multimap methods are supported,\n",
        "63": " * and all returned views are modifiable.\n",
        "64": " *\n",
        "65": " * <p>This class is not threadsafe when any concurrent operations update the\n",
        "66": " * multimap. Concurrent read operations will work correctly. To allow concurrent\n",
        "67": " * update operations, wrap your multimap with a call to {@link\n",
        "68": " * Multimaps#synchronizedSetMultimap}.\n",
        "69": " *\n",
        "70": " * <p>See the Guava User Guide article on <a href=\n",
        "71": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap\">\n",
        "72": " * {@code Multimap}</a>.\n",
        "73": " *\n",
        "74": " * @author Jared Levy\n",
        "75": " * @author Louis Wasserman\n",
        "76": " * @since 2.0\n",
        "77": " */\n",
        "78": "@GwtCompatible(serializable = true, emulated = true)\n",
        "79": "public final class LinkedHashMultimap<K, V> extends AbstractSetMultimap<K, V> {\n",
        "80": "\n",
        "81": "  /**\n",
        "82": "   * Creates a new, empty {@code LinkedHashMultimap} with the default initial\n",
        "83": "   * capacities.\n",
        "84": "   */\n",
        "85": "  public static <K, V> LinkedHashMultimap<K, V> create() {\n",
        "86": "    return new LinkedHashMultimap<K, V>(DEFAULT_KEY_CAPACITY, DEFAULT_VALUE_SET_CAPACITY);\n",
        "87": "  }\n",
        "88": "\n",
        "89": "  /**\n",
        "90": "   * Constructs an empty {@code LinkedHashMultimap} with enough capacity to hold\n",
        "91": "   * the specified numbers of keys and values without rehashing.\n",
        "92": "   *\n",
        "93": "   * @param expectedKeys the expected number of distinct keys\n",
        "94": "   * @param expectedValuesPerKey the expected average number of values per key\n",
        "95": "   * @throws IllegalArgumentException if {@code expectedKeys} or {@code\n",
        "96": "   *      expectedValuesPerKey} is negative\n",
        "97": "   */\n",
        "98": "  public static <K, V> LinkedHashMultimap<K, V> create(int expectedKeys, int expectedValuesPerKey) {\n",
        "99": "    return new LinkedHashMultimap<K, V>(\n",
        "100": "        Maps.capacity(expectedKeys), Maps.capacity(expectedValuesPerKey));\n",
        "101": "  }\n",
        "102": "\n",
        "103": "  /**\n",
        "104": "   * Constructs a {@code LinkedHashMultimap} with the same mappings as the\n",
        "105": "   * specified multimap. If a key-value mapping appears multiple times in the\n",
        "106": "   * input multimap, it only appears once in the constructed multimap. The new\n",
        "107": "   * multimap has the same {@link Multimap#entries()} iteration order as the\n",
        "108": "   * input multimap, except for excluding duplicate mappings.\n",
        "109": "   *\n",
        "110": "   * @param multimap the multimap whose contents are copied to this multimap\n",
        "111": "   */\n",
        "112": "  public static <K, V> LinkedHashMultimap<K, V> create(\n",
        "113": "      Multimap<? extends K, ? extends V> multimap) {\n",
        "114": "    LinkedHashMultimap<K, V> result = create(multimap.keySet().size(), DEFAULT_VALUE_SET_CAPACITY);\n",
        "115": "    result.putAll(multimap);\n",
        "116": "    return result;\n",
        "117": "  }\n",
        "118": "\n",
        "119": "  private interface ValueSetLink<K, V> {\n",
        "120": "    ValueSetLink<K, V> getPredecessorInValueSet();\n",
        "121": "\n",
        "122": "    ValueSetLink<K, V> getSuccessorInValueSet();\n",
        "123": "\n",
        "124": "    void setPredecessorInValueSet(ValueSetLink<K, V> entry);\n",
        "125": "\n",
        "126": "    void setSuccessorInValueSet(ValueSetLink<K, V> entry);\n",
        "127": "  }\n",
        "128": "\n",
        "129": "  private static <K, V> void succeedsInValueSet(ValueSetLink<K, V> pred, ValueSetLink<K, V> succ) {\n",
        "130": "    pred.setSuccessorInValueSet(succ);\n",
        "131": "    succ.setPredecessorInValueSet(pred);\n",
        "132": "  }\n",
        "133": "\n",
        "134": "  private static <K, V> void succeedsInMultimap(ValueEntry<K, V> pred, ValueEntry<K, V> succ) {\n",
        "135": "    pred.setSuccessorInMultimap(succ);\n",
        "136": "    succ.setPredecessorInMultimap(pred);\n",
        "137": "  }\n",
        "138": "\n",
        "139": "  private static <K, V> void deleteFromValueSet(ValueSetLink<K, V> entry) {\n",
        "140": "    succeedsInValueSet(entry.getPredecessorInValueSet(), entry.getSuccessorInValueSet());\n",
        "141": "  }\n",
        "142": "\n",
        "143": "  private static <K, V> void deleteFromMultimap(ValueEntry<K, V> entry) {\n",
        "144": "    succeedsInMultimap(entry.getPredecessorInMultimap(), entry.getSuccessorInMultimap());\n",
        "145": "  }\n",
        "146": "\n",
        "147": "  /**\n",
        "148": "   * LinkedHashMultimap entries are in no less than three coexisting linked lists:\n",
        "149": "   * a bucket in the hash table for a Set<V> associated with a key, the linked list\n",
        "150": "   * of insertion-ordered entries in that Set<V>, and the linked list of entries\n",
        "151": "   * in the LinkedHashMultimap as a whole.\n",
        "152": "   */\n",
        "153": "  @VisibleForTesting\n",
        "154": "  static final class ValueEntry<K, V> extends ImmutableEntry<K, V> implements ValueSetLink<K, V> {\n",
        "155": "    final int smearedValueHash;\n",
        "156": "\n",
        "157": "    @Nullable ValueEntry<K, V> nextInValueBucket;\n",
        "158": "\n",
        "159": "    ValueSetLink<K, V> predecessorInValueSet;\n",
        "160": "    ValueSetLink<K, V> successorInValueSet;\n",
        "161": "\n",
        "162": "    ValueEntry<K, V> predecessorInMultimap;\n",
        "163": "    ValueEntry<K, V> successorInMultimap;\n",
        "164": "\n",
        "165": "    ValueEntry(\n",
        "166": "        @Nullable K key,\n",
        "167": "        @Nullable V value,\n",
        "168": "        int smearedValueHash,\n",
        "169": "        @Nullable ValueEntry<K, V> nextInValueBucket) {\n",
        "170": "      super(key, value);\n",
        "171": "      this.smearedValueHash = smearedValueHash;\n",
        "172": "      this.nextInValueBucket = nextInValueBucket;\n",
        "173": "    }\n",
        "174": "\n",
        "175": "    boolean matchesValue(@Nullable Object v, int smearedVHash) {\n",
        "176": "      return smearedValueHash == smearedVHash && Objects.equal(getValue(), v);\n",
        "177": "    }\n",
        "178": "\n",
        "179": "    @Override\n",
        "180": "    public ValueSetLink<K, V> getPredecessorInValueSet() {\n",
        "181": "      return predecessorInValueSet;\n",
        "182": "    }\n",
        "183": "\n",
        "184": "    @Override\n",
        "185": "    public ValueSetLink<K, V> getSuccessorInValueSet() {\n",
        "186": "      return successorInValueSet;\n",
        "187": "    }\n",
        "188": "\n",
        "189": "    @Override\n",
        "190": "    public void setPredecessorInValueSet(ValueSetLink<K, V> entry) {\n",
        "191": "      predecessorInValueSet = entry;\n",
        "192": "    }\n",
        "193": "\n",
        "194": "    @Override\n",
        "195": "    public void setSuccessorInValueSet(ValueSetLink<K, V> entry) {\n",
        "196": "      successorInValueSet = entry;\n",
        "197": "    }\n",
        "198": "\n",
        "199": "    public ValueEntry<K, V> getPredecessorInMultimap() {\n",
        "200": "      return predecessorInMultimap;\n",
        "201": "    }\n",
        "202": "\n",
        "203": "    public ValueEntry<K, V> getSuccessorInMultimap() {\n",
        "204": "      return successorInMultimap;\n",
        "205": "    }\n",
        "206": "\n",
        "207": "    public void setSuccessorInMultimap(ValueEntry<K, V> multimapSuccessor) {\n",
        "208": "      this.successorInMultimap = multimapSuccessor;\n",
        "209": "    }\n",
        "210": "\n",
        "211": "    public void setPredecessorInMultimap(ValueEntry<K, V> multimapPredecessor) {\n",
        "212": "      this.predecessorInMultimap = multimapPredecessor;\n",
        "213": "    }\n",
        "214": "  }\n",
        "215": "\n",
        "216": "  private static final int DEFAULT_KEY_CAPACITY = 16;\n",
        "217": "  private static final int DEFAULT_VALUE_SET_CAPACITY = 2;\n",
        "218": "  @VisibleForTesting static final double VALUE_SET_LOAD_FACTOR = 1.0;\n",
        "219": "\n",
        "220": "  @VisibleForTesting transient int valueSetCapacity = DEFAULT_VALUE_SET_CAPACITY;\n",
        "221": "  private transient ValueEntry<K, V> multimapHeaderEntry;\n",
        "222": "\n",
        "223": "  private LinkedHashMultimap(int keyCapacity, int valueSetCapacity) {\n",
        "224": "    super(new LinkedHashMap<K, Collection<V>>(keyCapacity));\n",
        "225": "    checkNonnegative(valueSetCapacity, \"expectedValuesPerKey\");\n",
        "226": "\n",
        "227": "    this.valueSetCapacity = valueSetCapacity;\n",
        "228": "    this.multimapHeaderEntry = new ValueEntry<K, V>(null, null, 0, null);\n",
        "229": "    succeedsInMultimap(multimapHeaderEntry, multimapHeaderEntry);\n",
        "230": "  }\n",
        "231": "\n",
        "232": "  /**\n",
        "233": "   * {@inheritDoc}\n",
        "234": "   *\n",
        "235": "   * <p>Creates an empty {@code LinkedHashSet} for a collection of values for\n",
        "236": "   * one key.\n",
        "237": "   *\n",
        "238": "   * @return a new {@code LinkedHashSet} containing a collection of values for\n",
        "239": "   *     one key\n",
        "240": "   */\n",
        "241": "  @Override\n",
        "242": "  Set<V> createCollection() {\n",
        "243": "    return new LinkedHashSet<V>(valueSetCapacity);\n",
        "244": "  }\n",
        "245": "\n",
        "246": "  /**\n",
        "247": "   * {@inheritDoc}\n",
        "248": "   *\n",
        "249": "   * <p>Creates a decorated insertion-ordered set that also keeps track of the\n",
        "250": "   * order in which key-value pairs are added to the multimap.\n",
        "251": "   *\n",
        "252": "   * @param key key to associate with values in the collection\n",
        "253": "   * @return a new decorated set containing a collection of values for one key\n",
        "254": "   */\n",
        "255": "  @Override\n",
        "256": "  Collection<V> createCollection(K key) {\n",
        "257": "    return new ValueSet(key, valueSetCapacity);\n",
        "258": "  }\n",
        "259": "\n",
        "260": "  /**\n",
        "261": "   * {@inheritDoc}\n",
        "262": "   *\n",
        "263": "   * <p>If {@code values} is not empty and the multimap already contains a\n",
        "264": "   * mapping for {@code key}, the {@code keySet()} ordering is unchanged.\n",
        "265": "   * However, the provided values always come last in the {@link #entries()} and\n",
        "266": "   * {@link #values()} iteration orderings.\n",
        "267": "   */\n",
        "268": "  @Override\n",
        "269": "  public Set<V> replaceValues(@Nullable K key, Iterable<? extends V> values) {\n",
        "270": "    return super.replaceValues(key, values);\n",
        "271": "  }\n",
        "272": "\n",
        "273": "  /**\n",
        "274": "   * Returns a set of all key-value pairs. Changes to the returned set will\n",
        "275": "   * update the underlying multimap, and vice versa. The entries set does not\n",
        "276": "   * support the {@code add} or {@code addAll} operations.\n",
        "277": "   *\n",
        "278": "   * <p>The iterator generated by the returned set traverses the entries in the\n",
        "279": "   * order they were added to the multimap.\n",
        "280": "   *\n",
        "281": "   * <p>Each entry is an immutable snapshot of a key-value mapping in the\n",
        "282": "   * multimap, taken at the time the entry is returned by a method call to the\n",
        "283": "   * collection or its iterator.\n",
        "284": "   */\n",
        "285": "  @Override\n",
        "286": "  public Set<Map.Entry<K, V>> entries() {\n",
        "287": "    return super.entries();\n",
        "288": "  }\n",
        "289": "\n",
        "290": "  /**\n",
        "291": "   * Returns a collection of all values in the multimap. Changes to the returned\n",
        "292": "   * collection will update the underlying multimap, and vice versa.\n",
        "293": "   *\n",
        "294": "   * <p>The iterator generated by the returned collection traverses the values\n",
        "295": "   * in the order they were added to the multimap.\n",
        "296": "   */\n",
        "297": "  @Override\n",
        "298": "  public Collection<V> values() {\n",
        "299": "    return super.values();\n",
        "300": "  }\n",
        "301": "\n",
        "302": "  @VisibleForTesting\n",
        "303": "  @WeakOuter\n",
        "304": "  final class ValueSet extends Sets.ImprovedAbstractSet<V> implements ValueSetLink<K, V> {\n",
        "305": "    /*\n",
        "306": "     * We currently use a fixed load factor of 1.0, a bit higher than normal to reduce memory\n",
        "307": "     * consumption.\n",
        "308": "     */\n",
        "309": "\n",
        "310": "    private final K key;\n",
        "311": "    @VisibleForTesting ValueEntry<K, V>[] hashTable;\n",
        "312": "    private int size = 0;\n",
        "313": "    private int modCount = 0;\n",
        "314": "\n",
        "315": "    // We use the set object itself as the end of the linked list, avoiding an unnecessary\n",
        "316": "    // entry object per key.\n",
        "317": "    private ValueSetLink<K, V> firstEntry;\n",
        "318": "    private ValueSetLink<K, V> lastEntry;\n",
        "319": "\n",
        "320": "    ValueSet(K key, int expectedValues) {\n",
        "321": "      this.key = key;\n",
        "322": "      this.firstEntry = this;\n",
        "323": "      this.lastEntry = this;\n",
        "324": "      // Round expected values up to a power of 2 to get the table size.\n",
        "325": "      int tableSize = Hashing.closedTableSize(expectedValues, VALUE_SET_LOAD_FACTOR);\n",
        "326": "\n",
        "327": "      @SuppressWarnings(\"unchecked\")\n",
        "328": "      ValueEntry<K, V>[] hashTable = new ValueEntry[tableSize];\n",
        "329": "      this.hashTable = hashTable;\n",
        "330": "    }\n",
        "331": "\n",
        "332": "    private int mask() {\n",
        "333": "      return hashTable.length - 1;\n",
        "334": "    }\n",
        "335": "\n",
        "336": "    @Override\n",
        "337": "    public ValueSetLink<K, V> getPredecessorInValueSet() {\n",
        "338": "      return lastEntry;\n",
        "339": "    }\n",
        "340": "\n",
        "341": "    @Override\n",
        "342": "    public ValueSetLink<K, V> getSuccessorInValueSet() {\n",
        "343": "      return firstEntry;\n",
        "344": "    }\n",
        "345": "\n",
        "346": "    @Override\n",
        "347": "    public void setPredecessorInValueSet(ValueSetLink<K, V> entry) {\n",
        "348": "      lastEntry = entry;\n",
        "349": "    }\n",
        "350": "\n",
        "351": "    @Override\n",
        "352": "    public void setSuccessorInValueSet(ValueSetLink<K, V> entry) {\n",
        "353": "      firstEntry = entry;\n",
        "354": "    }\n",
        "355": "\n",
        "356": "    @Override\n",
        "357": "    public Iterator<V> iterator() {\n",
        "358": "      return new Iterator<V>() {\n",
        "359": "        ValueSetLink<K, V> nextEntry = firstEntry;\n",
        "360": "        ValueEntry<K, V> toRemove;\n",
        "361": "        int expectedModCount = modCount;\n",
        "362": "\n",
        "363": "        private void checkForComodification() {\n",
        "364": "          if (modCount != expectedModCount) {\n",
        "365": "            throw new ConcurrentModificationException();\n",
        "366": "          }\n",
        "367": "        }\n",
        "368": "\n",
        "369": "        @Override\n",
        "370": "        public boolean hasNext() {\n",
        "371": "          checkForComodification();\n",
        "372": "          return nextEntry != ValueSet.this;\n",
        "373": "        }\n",
        "374": "\n",
        "375": "        @Override\n",
        "376": "        public V next() {\n",
        "377": "          if (!hasNext()) {\n",
        "378": "            throw new NoSuchElementException();\n",
        "379": "          }\n",
        "380": "          ValueEntry<K, V> entry = (ValueEntry<K, V>) nextEntry;\n",
        "381": "          V result = entry.getValue();\n",
        "382": "          toRemove = entry;\n",
        "383": "          nextEntry = entry.getSuccessorInValueSet();\n",
        "384": "          return result;\n",
        "385": "        }\n",
        "386": "\n",
        "387": "        @Override\n",
        "388": "        public void remove() {\n",
        "389": "          checkForComodification();\n",
        "390": "          checkRemove(toRemove != null);\n",
        "391": "          ValueSet.this.remove(toRemove.getValue());\n",
        "392": "          expectedModCount = modCount;\n",
        "393": "          toRemove = null;\n",
        "394": "        }\n",
        "395": "      };\n",
        "396": "    }\n",
        "397": "\n",
        "398": "    @Override\n",
        "399": "    public int size() {\n",
        "400": "      return size;\n",
        "401": "    }\n",
        "402": "\n",
        "403": "    @Override\n",
        "404": "    public boolean contains(@Nullable Object o) {\n",
        "405": "      int smearedHash = Hashing.smearedHash(o);\n",
        "406": "      for (ValueEntry<K, V> entry = hashTable[smearedHash & mask()];\n",
        "407": "          entry != null;\n",
        "408": "          entry = entry.nextInValueBucket) {\n",
        "409": "        if (entry.matchesValue(o, smearedHash)) {\n",
        "410": "          return true;\n",
        "411": "        }\n",
        "412": "      }\n",
        "413": "      return false;\n",
        "414": "    }\n",
        "415": "\n",
        "416": "    @Override\n",
        "417": "    public boolean add(@Nullable V value) {\n",
        "418": "      int smearedHash = Hashing.smearedHash(value);\n",
        "419": "      int bucket = smearedHash & mask();\n",
        "420": "      ValueEntry<K, V> rowHead = hashTable[bucket];\n",
        "421": "      for (ValueEntry<K, V> entry = rowHead; entry != null; entry = entry.nextInValueBucket) {\n",
        "422": "        if (entry.matchesValue(value, smearedHash)) {\n",
        "423": "          return false;\n",
        "424": "        }\n",
        "425": "      }\n",
        "426": "\n",
        "427": "      ValueEntry<K, V> newEntry = new ValueEntry<K, V>(key, value, smearedHash, rowHead);\n",
        "428": "      succeedsInValueSet(lastEntry, newEntry);\n",
        "429": "      succeedsInValueSet(newEntry, this);\n",
        "430": "      succeedsInMultimap(multimapHeaderEntry.getPredecessorInMultimap(), newEntry);\n",
        "431": "      succeedsInMultimap(newEntry, multimapHeaderEntry);\n",
        "432": "      hashTable[bucket] = newEntry;\n",
        "433": "      size++;\n",
        "434": "      modCount++;\n",
        "435": "      rehashIfNecessary();\n",
        "436": "      return true;\n",
        "437": "    }\n",
        "438": "\n",
        "439": "    private void rehashIfNecessary() {\n",
        "440": "      if (Hashing.needsResizing(size, hashTable.length, VALUE_SET_LOAD_FACTOR)) {\n",
        "441": "        @SuppressWarnings(\"unchecked\")\n",
        "442": "        ValueEntry<K, V>[] hashTable = new ValueEntry[this.hashTable.length * 2];\n",
        "443": "        this.hashTable = hashTable;\n",
        "444": "        int mask = hashTable.length - 1;\n",
        "445": "        for (ValueSetLink<K, V> entry = firstEntry;\n",
        "446": "            entry != this;\n",
        "447": "            entry = entry.getSuccessorInValueSet()) {\n",
        "448": "          ValueEntry<K, V> valueEntry = (ValueEntry<K, V>) entry;\n",
        "449": "          int bucket = valueEntry.smearedValueHash & mask;\n",
        "450": "          valueEntry.nextInValueBucket = hashTable[bucket];\n",
        "451": "          hashTable[bucket] = valueEntry;\n",
        "452": "        }\n",
        "453": "      }\n",
        "454": "    }\n",
        "455": "\n",
        "456": "    @Override\n",
        "457": "    public boolean remove(@Nullable Object o) {\n",
        "458": "      int smearedHash = Hashing.smearedHash(o);\n",
        "459": "      int bucket = smearedHash & mask();\n",
        "460": "      ValueEntry<K, V> prev = null;\n",
        "461": "      for (ValueEntry<K, V> entry = hashTable[bucket];\n",
        "462": "          entry != null;\n",
        "463": "          prev = entry, entry = entry.nextInValueBucket) {\n",
        "464": "        if (entry.matchesValue(o, smearedHash)) {\n",
        "465": "          if (prev == null) {\n",
        "466": "            // first entry in the bucket\n",
        "467": "            hashTable[bucket] = entry.nextInValueBucket;\n",
        "468": "          } else {\n",
        "469": "            prev.nextInValueBucket = entry.nextInValueBucket;\n",
        "470": "          }\n",
        "471": "          deleteFromValueSet(entry);\n",
        "472": "          deleteFromMultimap(entry);\n",
        "473": "          size--;\n",
        "474": "          modCount++;\n",
        "475": "          return true;\n",
        "476": "        }\n",
        "477": "      }\n",
        "478": "      return false;\n",
        "479": "    }\n",
        "480": "\n",
        "481": "    @Override\n",
        "482": "    public void clear() {\n",
        "483": "      Arrays.fill(hashTable, null);\n",
        "484": "      size = 0;\n",
        "485": "      for (ValueSetLink<K, V> entry = firstEntry;\n",
        "486": "          entry != this;\n",
        "487": "          entry = entry.getSuccessorInValueSet()) {\n",
        "488": "        ValueEntry<K, V> valueEntry = (ValueEntry<K, V>) entry;\n",
        "489": "        deleteFromMultimap(valueEntry);\n",
        "490": "      }\n",
        "491": "      succeedsInValueSet(this, this);\n",
        "492": "      modCount++;\n",
        "493": "    }\n",
        "494": "  }\n",
        "495": "\n",
        "496": "  @Override\n",
        "497": "  Iterator<Map.Entry<K, V>> entryIterator() {\n",
        "498": "    return new Iterator<Map.Entry<K, V>>() {\n",
        "499": "      ValueEntry<K, V> nextEntry = multimapHeaderEntry.successorInMultimap;\n",
        "500": "      ValueEntry<K, V> toRemove;\n",
        "501": "\n",
        "502": "      @Override\n",
        "503": "      public boolean hasNext() {\n",
        "504": "        return nextEntry != multimapHeaderEntry;\n",
        "505": "      }\n",
        "506": "\n",
        "507": "      @Override\n",
        "508": "      public Map.Entry<K, V> next() {\n",
        "509": "        if (!hasNext()) {\n",
        "510": "          throw new NoSuchElementException();\n",
        "511": "        }\n",
        "512": "        ValueEntry<K, V> result = nextEntry;\n",
        "513": "        toRemove = result;\n",
        "514": "        nextEntry = nextEntry.successorInMultimap;\n",
        "515": "        return result;\n",
        "516": "      }\n",
        "517": "\n",
        "518": "      @Override\n",
        "519": "      public void remove() {\n",
        "520": "        checkRemove(toRemove != null);\n",
        "521": "        LinkedHashMultimap.this.remove(toRemove.getKey(), toRemove.getValue());\n",
        "522": "        toRemove = null;\n",
        "523": "      }\n",
        "524": "    };\n",
        "525": "  }\n",
        "526": "\n",
        "527": "  @Override\n",
        "528": "  Iterator<V> valueIterator() {\n",
        "529": "    return Maps.valueIterator(entryIterator());\n",
        "530": "  }\n",
        "531": "\n",
        "532": "  @Override\n",
        "533": "  public void clear() {\n",
        "534": "    super.clear();\n",
        "535": "    succeedsInMultimap(multimapHeaderEntry, multimapHeaderEntry);\n",
        "536": "  }\n",
        "537": "}\n",
        "538": "\n"
    }
}