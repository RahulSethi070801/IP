{
    "addition": {
        "21": "import static com.google.common.util.concurrent.Platform.isInstanceOfThrowableClass;\n",
        "65": "public final class Futures extends GwtFuturesCatchingSpecialization {\n",
        "214": "   * <b>To be deprecated:</b> Prefer {@link #catchingAsync(ListenableFuture,\n",
        "215": "   * Class, AsyncFunction) catchingAsync(input, Throwable.class,\n",
        "216": "   * fallbackImplementedAsAnAsyncFunction)}, usually replacing {@code\n",
        "217": "   * Throwable.class} with the specific type you want to handle.\n",
        "218": "   *\n",
        "219": "   * <p>Returns a {@code Future} whose result is taken from the given primary\n",
        "280": "   * <p>Also note that, regardless of which thread executes {@code\n",
        "297": "   * <b>To be deprecated:</b> Prefer {@link #catchingAsync(ListenableFuture,\n",
        "298": "   * Class, AsyncFunction, Executor) catchingAsync(input, Throwable.class,\n",
        "299": "   * fallbackImplementedAsAnAsyncFunction, executor)}, usually replacing {@code\n",
        "300": "   * Throwable.class} with the specific type you want to handle.\n",
        "301": "   *\n",
        "302": "   * <p>Returns a {@code Future} whose result is taken from the given primary\n",
        "362": "    return catchingAsync(\n",
        "363": "        input, Throwable.class, asAsyncFunction(fallback), executor);\n",
        "364": "  }\n",
        "365": "\n",
        "366": "  static <V> AsyncFunction<Throwable, V> asAsyncFunction(final FutureFallback<V> fallback) {\n",
        "368": "    return new AsyncFunction<Throwable, V>() {\n",
        "369": "      @Override\n",
        "370": "      public ListenableFuture<V> apply(Throwable t) throws Exception {\n",
        "371": "        return checkNotNull(fallback.create(t), \"FutureFallback.create returned null instead of a \"\n",
        "372": "            + \"Future. Did you mean to return immediateFuture(null)?\");\n",
        "373": "      }\n",
        "374": "    };\n",
        "377": "  static class CatchingFuture<V, X extends Throwable> extends AbstractFuture.TrustedFuture<V> {\n",
        "380": "    CatchingFuture(ListenableFuture<? extends V> input,\n",
        "381": "        final Class<X> exceptionType,\n",
        "382": "        final AsyncFunction<? super X, ? extends V> fallback,\n",
        "384": "      checkNotNull(exceptionType);\n",
        "385": "      checkNotNull(fallback);\n",
        "386": "\n",
        "405": "            if (isInstanceOfThrowableClass(throwable, exceptionType)) {\n",
        "406": "              @SuppressWarnings(\"unchecked\") // verified safe by isInstance\n",
        "407": "              X castThrowable = (X) throwable;\n",
        "408": "              ListenableFuture<? extends V> replacement = fallback.apply(castThrowable);\n",
        "409": "              checkNotNull(replacement, \"AsyncFunction.apply returned null instead of a Future. \"\n",
        "410": "                  + \"Did you mean to return immediateFuture(null)?\");\n",
        "411": "              setFuture(replacement);\n",
        "412": "            } else {\n",
        "413": "              setException(throwable);\n",
        "414": "            }\n",
        "590": "   * <p>Also note that, regardless of which thread executes {@code\n",
        "728": "   * <p>Also note that, regardless of which thread executes {@code\n",
        "802": "  static <I, O> AsyncFunction<I, O> asAsyncFunction(\n",
        "804": "    checkNotNull(function);\n"
    },
    "removed": {
        "64": "public final class Futures {\n",
        "213": "   * Returns a {@code Future} whose result is taken from the given primary\n",
        "274": "   * <p>Also note that, regardless of which thread executes the {@code\n",
        "291": "   * Returns a {@code Future} whose result is taken from the given primary\n",
        "352": "    return new FallbackFuture<V>(input, fallback, executor);\n",
        "355": "  /**\n",
        "356": "   * A future that falls back on a second, generated future, in case its\n",
        "357": "   * original future fails.\n",
        "358": "   */\n",
        "359": "  private static class FallbackFuture<V> extends AbstractFuture.TrustedFuture<V> {\n",
        "362": "    FallbackFuture(ListenableFuture<? extends V> input,\n",
        "363": "        final FutureFallback<? extends V> fallback,\n",
        "383": "            ListenableFuture<? extends V> replacement = fallback.create(throwable);\n",
        "384": "            checkNotNull(replacement, \"FutureFallback.create returned null instead of a Future. \"\n",
        "385": "                + \"Did you mean to return immediateFuture(null)?\");\n",
        "386": "            setFuture(replacement);\n",
        "562": "   * <p>Also note that, regardless of which thread executes the {@code\n",
        "700": "   * <p>Also note that, regardless of which thread executes the {@code\n",
        "774": "  private static <I, O> AsyncFunction<I, O> asAsyncFunction(\n"
    }
}