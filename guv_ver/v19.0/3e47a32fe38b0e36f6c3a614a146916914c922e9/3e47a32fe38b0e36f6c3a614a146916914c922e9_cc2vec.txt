{"id": "3e47a32fe38b0e36f6c3a614a146916914c922e9", "code": [{"0": "guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java", "added": {"1": ["import static com.google.common.util.concurrent.Platform.isInstanceOfThrowableClass;\n"], "2": ["public final class Futures extends GwtFuturesCatchingSpecialization {\n"], "3": ["   * <b>To be deprecated:</b> Prefer {@link #catchingAsync(ListenableFuture,\n", "   * Class, AsyncFunction) catchingAsync(input, Throwable.class,\n", "   * fallbackImplementedAsAnAsyncFunction)}, usually replacing {@code\n", "   * Throwable.class} with the specific type you want to handle.\n", "   *\n", "   * <p>Returns a {@code Future} whose result is taken from the given primary\n"], "4": ["   * <p>Also note that, regardless of which thread executes {@code\n"], "5": ["   * <b>To be deprecated:</b> Prefer {@link #catchingAsync(ListenableFuture,\n", "   * Class, AsyncFunction, Executor) catchingAsync(input, Throwable.class,\n", "   * fallbackImplementedAsAnAsyncFunction, executor)}, usually replacing {@code\n", "   * Throwable.class} with the specific type you want to handle.\n", "   *\n", "   * <p>Returns a {@code Future} whose result is taken from the given primary\n"], "6": ["    return catchingAsync(\n", "        input, Throwable.class, asAsyncFunction(fallback), executor);\n", "  }\n", "\n", "  static <V> AsyncFunction<Throwable, V> asAsyncFunction(final FutureFallback<V> fallback) {\n", "    return new AsyncFunction<Throwable, V>() {\n", "      @Override\n", "      public ListenableFuture<V> apply(Throwable t) throws Exception {\n", "        return checkNotNull(fallback.create(t), \"FutureFallback.create returned null instead of a \"\n", "            + \"Future. Did you mean to return immediateFuture(null)?\");\n", "      }\n", "    };\n", "  static class CatchingFuture<V, X extends Throwable> extends AbstractFuture.TrustedFuture<V> {\n", "    CatchingFuture(ListenableFuture<? extends V> input,\n", "        final Class<X> exceptionType,\n", "        final AsyncFunction<? super X, ? extends V> fallback,\n", "      checkNotNull(exceptionType);\n", "      checkNotNull(fallback);\n", "\n"], "7": ["            if (isInstanceOfThrowableClass(throwable, exceptionType)) {\n", "              @SuppressWarnings(\"unchecked\") // verified safe by isInstance\n", "              X castThrowable = (X) throwable;\n", "              ListenableFuture<? extends V> replacement = fallback.apply(castThrowable);\n", "              checkNotNull(replacement, \"AsyncFunction.apply returned null instead of a Future. \"\n", "                  + \"Did you mean to return immediateFuture(null)?\");\n", "              setFuture(replacement);\n", "            } else {\n", "              setException(throwable);\n", "            }\n"], "8": ["   * <p>Also note that, regardless of which thread executes {@code\n"], "9": ["   * <p>Also note that, regardless of which thread executes {@code\n"], "10": ["  static <I, O> AsyncFunction<I, O> asAsyncFunction(\n", "    checkNotNull(function);\n"]}, "removed": {"2": ["public final class Futures {\n"], "3": ["   * Returns a {@code Future} whose result is taken from the given primary\n"], "4": ["   * <p>Also note that, regardless of which thread executes the {@code\n"], "5": ["   * Returns a {@code Future} whose result is taken from the given primary\n"], "6": ["    return new FallbackFuture<V>(input, fallback, executor);\n", "  /**\n", "   * A future that falls back on a second, generated future, in case its\n", "   * original future fails.\n", "   */\n", "  private static class FallbackFuture<V> extends AbstractFuture.TrustedFuture<V> {\n", "    FallbackFuture(ListenableFuture<? extends V> input,\n", "        final FutureFallback<? extends V> fallback,\n"], "7": ["            ListenableFuture<? extends V> replacement = fallback.create(throwable);\n", "            checkNotNull(replacement, \"FutureFallback.create returned null instead of a Future. \"\n", "                + \"Did you mean to return immediateFuture(null)?\");\n", "            setFuture(replacement);\n"], "8": ["   * <p>Also note that, regardless of which thread executes the {@code\n"], "9": ["   * <p>Also note that, regardless of which thread executes the {@code\n"], "10": ["  private static <I, O> AsyncFunction<I, O> asAsyncFunction(\n"]}, "added_lines": {"1": [21], "2": [65], "3": [214, 215, 216, 217, 218, 219], "4": [280], "5": [297, 298, 299, 300, 301, 302], "6": [362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 377, 380, 381, 382, 384, 385, 386], "7": [405, 406, 407, 408, 409, 410, 411, 412, 413, 414], "8": [590], "9": [728], "10": [802, 804]}, "removed_lines": {"2": [64], "3": [213], "4": [274], "5": [291], "6": [352, 355, 356, 357, 358, 359, 362, 363], "7": [383, 384, 385, 386], "8": [562], "9": [700], "10": [774]}}, {"1": "guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/GwtFuturesCatchingSpecialization.java", "added": {"1": ["/*\n", " * Copyright (C) 2006 The Guava Authors\n", " *\n", " * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package com.google.common.util.concurrent;\n", "\n", "import static com.google.common.util.concurrent.Futures.asAsyncFunction;\n", "import static com.google.common.util.concurrent.MoreExecutors.directExecutor;\n", "\n", "import com.google.common.base.Function;\n", "import com.google.common.util.concurrent.Futures.CatchingFuture;\n", "\n", "import java.util.concurrent.Executor;\n", "\n", "/**\n", " * Hidden superclass of {@link Futures} that provides us a place to declare special GWT versions of\n", " * the {@link Futures#catching(ListenableFuture, Class, com.google.common.base.Function)\n", " * Futures.catching} family of methods. Those versions have slightly different signatures.\n", " */\n", "abstract class GwtFuturesCatchingSpecialization {\n", "  /*\n", "   * In the GWT versions of the methods (below), every exceptionType parameter is required to be\n", "   * Class<Throwable>. To handle only certain kinds of exceptions under GWT, you'll need to write\n", "   * your own instanceof tests.\n", "   */\n", "\n", "  public static <V> ListenableFuture<V> catching(\n", "      ListenableFuture<? extends V> input,\n", "      Class<Throwable> exceptionType,\n", "      Function<? super Throwable, ? extends V> fallback) {\n", "    return catching(input, exceptionType, fallback, directExecutor());\n", "  }\n", "\n", "  public static <V> ListenableFuture<V> catching(\n", "      ListenableFuture<? extends V> input,\n", "      Class<Throwable> exceptionType,\n", "      Function<? super Throwable, ? extends V> fallback,\n", "      Executor executor) {\n", "    return catchingAsync(input, exceptionType, asAsyncFunction(fallback), executor);\n", "  }\n", "\n", "  public static <V> ListenableFuture<V> catchingAsync(\n", "      ListenableFuture<? extends V> input,\n", "      Class<Throwable> exceptionType,\n", "      AsyncFunction<? super Throwable, ? extends V> fallback) {\n", "    return catchingAsync(input, exceptionType, fallback, directExecutor());\n", "  }\n", "\n", "  public static <V> ListenableFuture<V> catchingAsync(\n", "      ListenableFuture<? extends V> input,\n", "      Class<Throwable> exceptionType,\n", "      AsyncFunction<? super Throwable, ? extends V> fallback,\n", "      Executor executor) {\n", "    return new CatchingFuture<V, Throwable>(input, exceptionType, fallback, executor);\n", "  }\n", "}\n"]}, "removed": {}, "added_lines": {"1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68]}, "removed_lines": {}}, {"2": "guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Platform.java", "added": {"1": ["/*\n", " * Copyright (C) 2015 The Guava Authors\n", " *\n", " * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package com.google.common.util.concurrent;\n", "\n", "/**\n", " * Methods factored out so that they can be emulated differently in GWT.\n", " */\n", "final class Platform {\n", "  static boolean isInstanceOfThrowableClass(Throwable t, Class<? extends Throwable> expectedClass) {\n", "    /*\n", "     * This method is used only by CatchingFuture, and CatchingFuture accepts only Throwable.class\n", "     * under GWT.\n", "     */\n", "    return true;\n", "  }\n", "\n", "  private Platform() {}\n", "}\n"]}, "removed": {}, "added_lines": {"1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]}, "removed_lines": {}}, {"3": "guava-gwt/test-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/FuturesTest.java", "added": {"1": ["import java.io.IOException;\n"], "2": ["  private static class FunctionSpy<I, O> implements Function<I, O> {\n", "    private int applyCount;\n", "    private final Function<I, O> delegate;\n", "\n", "    public FunctionSpy(Function<I, O> delegate) {\n", "      this.delegate = delegate;\n", "    }\n", "\n", "    @Override\n", "    public O apply(I input) {\n", "      applyCount++;\n", "      return delegate.apply(input);\n", "    }\n", "\n", "    void verifyCallCount(int expected) {\n", "      assertThat(applyCount).is(expected);\n", "    }\n", "  }\n", "\n", "  private static <I, O> FunctionSpy<I, O> spy(Function<I, O> delegate) {\n", "    return new FunctionSpy<I, O>(delegate);\n", "  }\n", "\n", "  private static <X extends Throwable, V> Function<X, V> unexpectedFunction() {\n", "    return new Function<X, V>() {\n", "      @Override\n", "      public V apply(X t) {\n", "        throw new AssertionError(\"Unexpected fallback\", t);\n", "      }\n", "    };\n", "  }\n", "\n"], "3": ["      public ListenableFuture<V> create(Throwable t) {\n", "        throw new AssertionError(\"Unexpected fallback\", t);\n", "      }\n", "    };\n", "  }\n", "\n", "  private static class AsyncFunctionSpy<X extends Throwable, V> implements AsyncFunction<X, V> {\n", "    private int count;\n", "    private final AsyncFunction<X, V> delegate;\n", "\n", "    public AsyncFunctionSpy(AsyncFunction<X, V> delegate) {\n", "      this.delegate = delegate;\n", "    }\n", "\n", "    @Override\n", "    public final ListenableFuture<V> apply(X t) throws Exception {\n", "      count++;\n", "      return delegate.apply(t);\n", "    }\n", "\n", "    void verifyCallCount(int expected) {\n", "      assertThat(count).is(expected);\n", "    }\n", "  }\n", "\n", "  private static <X extends Throwable, V> AsyncFunctionSpy<X, V> spy(AsyncFunction<X, V> delegate) {\n", "    return new AsyncFunctionSpy<X, V>(delegate);\n", "  }\n", "\n", "  private static <X extends Throwable, V> AsyncFunction<X, V> unexpectedAsyncFunction() {\n", "    return new AsyncFunction<X, V>() {\n", "      @Override\n", "      public ListenableFuture<V> apply(X t) {\n"], "4": ["  // catchingAsync tests cloned from the old withFallback tests:\n", "\n", "  public void testCatchingAsync_inputDoesNotRaiseException() throws Exception {\n", "    AsyncFunction<Throwable, Integer> fallback = unexpectedAsyncFunction();\n", "    ListenableFuture<Integer> originalFuture = Futures.immediateFuture(7);\n", "    ListenableFuture<Integer> faultToleranteFuture =\n", "        Futures.catchingAsync(originalFuture, Throwable.class, fallback);\n", "    assertEquals(7, faultToleranteFuture.get().intValue());\n", "  }\n", "\n", "  public void testCatchingAsync_inputRaisesException() throws Exception {\n", "    final RuntimeException raisedException = new RuntimeException();\n", "    AsyncFunctionSpy<Throwable, Integer> fallback = spy(new AsyncFunction<Throwable, Integer>() {\n", "      @Override\n", "      public ListenableFuture<Integer> apply(Throwable t) throws Exception {\n", "        assertThat(t).isSameAs(raisedException);\n", "        return Futures.immediateFuture(20);\n", "      }\n", "    });\n", "    ListenableFuture<Integer> failingFuture = Futures.immediateFailedFuture(raisedException);\n", "    ListenableFuture<Integer> faultTolerantFuture =\n", "        Futures.catchingAsync(failingFuture, Throwable.class, fallback);\n", "    assertEquals(20, faultTolerantFuture.get().intValue());\n", "    fallback.verifyCallCount(1);\n", "  }\n", "\n", "  public void testCatchingAsync_fallbackGeneratesRuntimeException() throws Exception {\n", "    RuntimeException expectedException = new RuntimeException();\n", "    runExpectedExceptionCatchingAsyncTest(expectedException, false);\n", "  }\n", "\n", "  public void testCatchingAsync_fallbackGeneratesCheckedException() throws Exception {\n", "    Exception expectedException = new Exception() {\n", "    };\n", "    runExpectedExceptionCatchingAsyncTest(expectedException, false);\n", "  }\n", "\n", "  public void testCatchingAsync_fallbackGeneratesError() throws Exception {\n", "    final Error error = new Error(\"deliberate\");\n", "    AsyncFunction<Throwable, Integer> fallback = new AsyncFunction<Throwable, Integer>() {\n", "      @Override\n", "      public ListenableFuture<Integer> apply(Throwable t) throws Exception {\n", "        throw error;\n", "      }\n", "    };\n", "    ListenableFuture<Integer> failingFuture = Futures.immediateFailedFuture(new RuntimeException());\n", "    try {\n", "      Futures.catchingAsync(failingFuture, Throwable.class, fallback).get();\n", "      fail(\"An Exception should have been thrown!\");\n", "    } catch (ExecutionException expected) {\n", "      assertSame(error, expected.getCause());\n", "    }\n", "  }\n", "\n", "  public void testCatchingAsync_fallbackReturnsRuntimeException() throws Exception {\n", "    RuntimeException expectedException = new RuntimeException();\n", "    runExpectedExceptionCatchingAsyncTest(expectedException, true);\n", "  }\n", "\n", "  public void testCatchingAsync_fallbackReturnsCheckedException() throws Exception {\n", "    Exception expectedException = new Exception() {\n", "    };\n", "    runExpectedExceptionCatchingAsyncTest(expectedException, true);\n", "  }\n", "\n", "  private void runExpectedExceptionCatchingAsyncTest(\n", "      final Exception expectedException, final boolean wrapInFuture) throws Exception {\n", "    AsyncFunctionSpy<Throwable, Integer> fallback = spy(new AsyncFunction<Throwable, Integer>() {\n", "      @Override\n", "      public ListenableFuture<Integer> apply(Throwable t) throws Exception {\n", "        if (!wrapInFuture) {\n", "          throw expectedException;\n", "        } else {\n", "          return Futures.immediateFailedFuture(expectedException);\n", "        }\n", "      }\n", "    });\n", "\n", "    ListenableFuture<Integer> failingFuture = Futures.immediateFailedFuture(new RuntimeException());\n", "\n", "    ListenableFuture<Integer> faultToleranteFuture =\n", "        Futures.catchingAsync(failingFuture, Throwable.class, fallback);\n", "    try {\n", "      faultToleranteFuture.get();\n", "      fail(\"An Exception should have been thrown!\");\n", "    } catch (ExecutionException ee) {\n", "      assertSame(expectedException, ee.getCause());\n", "    }\n", "    fallback.verifyCallCount(1);\n", "  }\n", "\n", "  public void testCatchingAsync_fallbackNotReady() throws Exception {\n", "    ListenableFuture<Integer> primary = immediateFailedFuture(new Exception());\n", "    final SettableFuture<Integer> secondary = SettableFuture.create();\n", "    AsyncFunction<Throwable, Integer> fallback = new AsyncFunction<Throwable, Integer>() {\n", "      @Override\n", "      public ListenableFuture<Integer> apply(Throwable t) {\n", "        return secondary;\n", "      }\n", "    };\n", "    ListenableFuture<Integer> derived = Futures.catchingAsync(primary, Throwable.class, fallback);\n", "    secondary.set(1);\n", "    assertEquals(1, (int) derived.get());\n", "  }\n", "\n", "  public void testCatchingAsync_resultInterruptedBeforeFallback() throws Exception {\n", "    SettableFuture<Integer> primary = SettableFuture.create();\n", "    AsyncFunction<Throwable, Integer> fallback = unexpectedAsyncFunction();\n", "    ListenableFuture<Integer> derived = Futures.catchingAsync(primary, Throwable.class, fallback);\n", "    derived.cancel(true);\n", "    assertTrue(primary.isCancelled());\n", "    assertTrue(primary.wasInterrupted());\n", "  }\n", "\n", "  public void testCatchingAsync_resultCancelledBeforeFallback() throws Exception {\n", "    SettableFuture<Integer> primary = SettableFuture.create();\n", "    AsyncFunction<Throwable, Integer> fallback = unexpectedAsyncFunction();\n", "    ListenableFuture<Integer> derived = Futures.catchingAsync(primary, Throwable.class, fallback);\n", "    derived.cancel(false);\n", "    assertTrue(primary.isCancelled());\n", "    assertFalse(primary.wasInterrupted());\n", "  }\n", "\n", "  public void testCatchingAsync_nullInsteadOfFuture() throws Exception {\n", "    ListenableFuture<Integer> inputFuture = immediateFailedFuture(new Exception());\n", "    ListenableFuture<?> chainedFuture = Futures.catchingAsync(inputFuture, Throwable.class,\n", "        new AsyncFunction<Throwable, Integer>() {\n", "          @Override\n", "          public ListenableFuture<Integer> apply(Throwable t) {\n", "            return null;\n", "          }\n", "        });\n", "    try {\n", "      chainedFuture.get();\n", "      fail();\n", "    } catch (ExecutionException expected) {\n", "      NullPointerException cause = (NullPointerException) expected.getCause();\n", "      assertThat(cause).hasMessage(\"AsyncFunction.apply returned null instead of a Future. \"\n", "          + \"Did you mean to return immediateFuture(null)?\");\n", "    }\n", "  }\n", "\n", "  // catching tests cloned from the old withFallback tests:\n", "\n", "  public void testCatching_inputDoesNotRaiseException() throws Exception {\n", "    Function<Throwable, Integer> fallback = unexpectedFunction();\n", "    ListenableFuture<Integer> originalFuture = Futures.immediateFuture(7);\n", "    ListenableFuture<Integer> faultToleranteFuture =\n", "        Futures.catching(originalFuture, Throwable.class, fallback);\n", "    assertEquals(7, faultToleranteFuture.get().intValue());\n", "  }\n", "\n", "  public void testCatching_inputRaisesException() throws Exception {\n", "    final RuntimeException raisedException = new RuntimeException();\n", "    FunctionSpy<Throwable, Integer> fallback = spy(new Function<Throwable, Integer>() {\n", "      @Override\n", "      public Integer apply(Throwable t) {\n", "        assertThat(t).isSameAs(raisedException);\n", "        return 20;\n", "      }\n", "    });\n", "    ListenableFuture<Integer> failingFuture = Futures.immediateFailedFuture(raisedException);\n", "    ListenableFuture<Integer> faultTolerantFuture =\n", "        Futures.catching(failingFuture, Throwable.class, fallback);\n", "    assertEquals(20, faultTolerantFuture.get().intValue());\n", "    fallback.verifyCallCount(1);\n", "  }\n", "\n", "  public void testCatching_fallbackGeneratesRuntimeException() throws Exception {\n", "    RuntimeException expectedException = new RuntimeException();\n", "    runExpectedExceptionCatchingTest(expectedException);\n", "  }\n", "\n", "  /*\n", "   * catching() uses a plain Function, so there's no\n", "   * testCatching_fallbackGeneratesCheckedException().\n", "   */\n", "\n", "  public void testCatching_fallbackGeneratesError() throws Exception {\n", "    final Error error = new Error(\"deliberate\");\n", "    Function<Throwable, Integer> fallback = new Function<Throwable, Integer>() {\n", "      @Override\n", "      public Integer apply(Throwable t) {\n", "        throw error;\n", "      }\n", "    };\n", "    ListenableFuture<Integer> failingFuture = Futures.immediateFailedFuture(new RuntimeException());\n", "    try {\n", "      Futures.catching(failingFuture, Throwable.class, fallback).get();\n", "      fail(\"An Exception should have been thrown!\");\n", "    } catch (ExecutionException expected) {\n", "      assertSame(error, expected.getCause());\n", "    }\n", "  }\n", "\n", "  /*\n", "   * catching() uses a plain Function, so there's no testCatching_fallbackReturnsRuntimeException()\n", "   * or testCatching_fallbackReturnsCheckedException().\n", "   */\n", "\n", "  private void runExpectedExceptionCatchingTest(final RuntimeException expectedException)\n", "      throws Exception {\n", "    FunctionSpy<Throwable, Integer> fallback = spy(new Function<Throwable, Integer>() {\n", "      @Override\n", "      public Integer apply(Throwable t) {\n", "        throw expectedException;\n", "      }\n", "    });\n", "\n", "    ListenableFuture<Integer> failingFuture = Futures.immediateFailedFuture(new RuntimeException());\n", "\n", "    ListenableFuture<Integer> faultToleranteFuture =\n", "        Futures.catching(failingFuture, Throwable.class, fallback);\n", "    try {\n", "      faultToleranteFuture.get();\n", "      fail(\"An Exception should have been thrown!\");\n", "    } catch (ExecutionException ee) {\n", "      assertSame(expectedException, ee.getCause());\n", "    }\n", "    fallback.verifyCallCount(1);\n", "  }\n", "\n", "  // catching() uses a plain Function, so there's no testCatching_fallbackNotReady().\n", "\n", "  public void testCatching_resultInterruptedBeforeFallback() throws Exception {\n", "    SettableFuture<Integer> primary = SettableFuture.create();\n", "    Function<Throwable, Integer> fallback = unexpectedFunction();\n", "    ListenableFuture<Integer> derived = Futures.catching(primary, Throwable.class, fallback);\n", "    derived.cancel(true);\n", "    assertTrue(primary.isCancelled());\n", "    assertTrue(primary.wasInterrupted());\n", "  }\n", "\n", "  public void testCatching_resultCancelledBeforeFallback() throws Exception {\n", "    SettableFuture<Integer> primary = SettableFuture.create();\n", "    Function<Throwable, Integer> fallback = unexpectedFunction();\n", "    ListenableFuture<Integer> derived = Futures.catching(primary, Throwable.class, fallback);\n", "    derived.cancel(false);\n", "    assertTrue(primary.isCancelled());\n", "    assertFalse(primary.wasInterrupted());\n", "  }\n", "\n", "  // catching() uses a plain Function, so there's no testCatching_resultCancelledAfterFallback().\n", "\n", "  // catching() uses a plain Function, so there's no testCatching_nullInsteadOfFuture().\n", "\n", "  // Some tests of the exceptionType parameter:\n", "\n", "  public void testCatching_Throwable() throws Exception {\n", "    Function<Throwable, Integer> fallback = functionReturningOne();\n", "    ListenableFuture<Integer> originalFuture = immediateFailedFuture(new IOException());\n", "    ListenableFuture<Integer> faultTolerantFuture =\n", "        Futures.catching(originalFuture, Throwable.class, fallback);\n", "    assertEquals(1, (int) faultTolerantFuture.get());\n", "  }\n", "\n", "  public void testCatchingAsync_Throwable() throws Exception {\n", "    AsyncFunction<Throwable, Integer> fallback = asyncFunctionReturningOne();\n", "    ListenableFuture<Integer> originalFuture = immediateFailedFuture(new IOException());\n", "    ListenableFuture<Integer> faultTolerantFuture =\n", "        Futures.catchingAsync(originalFuture, Throwable.class, fallback);\n", "    assertEquals(1, (int) faultTolerantFuture.get());\n", "  }\n", "\n", "  private <X extends Throwable> Function<X, Integer> functionReturningOne() {\n", "    return new Function<X, Integer>() {\n", "      @Override\n", "      public Integer apply(X t) {\n", "        return 1;\n", "      }\n", "    };\n", "  }\n", "\n", "  private <X extends Throwable> AsyncFunction<X, Integer> asyncFunctionReturningOne() {\n", "    return new AsyncFunction<X, Integer>() {\n", "      @Override\n", "      public ListenableFuture<Integer> apply(X t) {\n", "        return immediateFuture(1);\n", "      }\n", "    };\n", "  }\n", "\n"]}, "removed": {"3": ["      public ListenableFuture<V> create(Throwable t) throws Exception {\n"]}, "added_lines": {"1": [31], "2": [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "3": [311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "4": [486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767]}, "removed_lines": {"3": [278]}}, {"4": "guava-gwt/test/com/google/common/util/concurrent/FuturesTest_gwt.java", "added": {"1": ["public void testCatchingAsync_Throwable() throws Exception {\n", "  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();\n", "  testCase.testCatchingAsync_Throwable();\n", "}\n", "\n", "public void testCatchingAsync_fallbackGeneratesCheckedException() throws Exception {\n", "  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();\n", "  testCase.testCatchingAsync_fallbackGeneratesCheckedException();\n", "}\n", "\n", "public void testCatchingAsync_fallbackGeneratesError() throws Exception {\n", "  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();\n", "  testCase.testCatchingAsync_fallbackGeneratesError();\n", "}\n", "\n", "public void testCatchingAsync_fallbackGeneratesRuntimeException() throws Exception {\n", "  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();\n", "  testCase.testCatchingAsync_fallbackGeneratesRuntimeException();\n", "}\n", "\n", "public void testCatchingAsync_fallbackNotReady() throws Exception {\n", "  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();\n", "  testCase.testCatchingAsync_fallbackNotReady();\n", "}\n", "\n", "public void testCatchingAsync_fallbackReturnsCheckedException() throws Exception {\n", "  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();\n", "  testCase.testCatchingAsync_fallbackReturnsCheckedException();\n", "}\n", "\n", "public void testCatchingAsync_fallbackReturnsRuntimeException() throws Exception {\n", "  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();\n", "  testCase.testCatchingAsync_fallbackReturnsRuntimeException();\n", "}\n", "\n", "public void testCatchingAsync_inputDoesNotRaiseException() throws Exception {\n", "  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();\n", "  testCase.testCatchingAsync_inputDoesNotRaiseException();\n", "}\n", "\n", "public void testCatchingAsync_inputRaisesException() throws Exception {\n", "  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();\n", "  testCase.testCatchingAsync_inputRaisesException();\n", "}\n", "\n", "public void testCatchingAsync_nullInsteadOfFuture() throws Exception {\n", "  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();\n", "  testCase.testCatchingAsync_nullInsteadOfFuture();\n", "}\n", "\n", "public void testCatchingAsync_resultCancelledBeforeFallback() throws Exception {\n", "  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();\n", "  testCase.testCatchingAsync_resultCancelledBeforeFallback();\n", "}\n", "\n", "public void testCatchingAsync_resultInterruptedBeforeFallback() throws Exception {\n", "  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();\n", "  testCase.testCatchingAsync_resultInterruptedBeforeFallback();\n", "}\n", "\n", "public void testCatching_Throwable() throws Exception {\n", "  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();\n", "  testCase.testCatching_Throwable();\n", "}\n", "\n", "public void testCatching_fallbackGeneratesError() throws Exception {\n", "  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();\n", "  testCase.testCatching_fallbackGeneratesError();\n", "}\n", "\n", "public void testCatching_fallbackGeneratesRuntimeException() throws Exception {\n", "  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();\n", "  testCase.testCatching_fallbackGeneratesRuntimeException();\n", "}\n", "\n", "public void testCatching_inputDoesNotRaiseException() throws Exception {\n", "  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();\n", "  testCase.testCatching_inputDoesNotRaiseException();\n", "}\n", "\n", "public void testCatching_inputRaisesException() throws Exception {\n", "  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();\n", "  testCase.testCatching_inputRaisesException();\n", "}\n", "\n", "public void testCatching_resultCancelledBeforeFallback() throws Exception {\n", "  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();\n", "  testCase.testCatching_resultCancelledBeforeFallback();\n", "}\n", "\n", "public void testCatching_resultInterruptedBeforeFallback() throws Exception {\n", "  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();\n", "  testCase.testCatching_resultInterruptedBeforeFallback();\n", "}\n", "\n"]}, "removed": {}, "added_lines": {"1": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160]}, "removed_lines": {}}, {"5": "guava-tests/test/com/google/common/util/concurrent/FuturesTest.java", "added": {"1": ["import java.io.FileNotFoundException;\n"], "2": ["    spy.verifyCallCount(0);\n", "    spy.verifyCallCount(1);\n", "    spy.verifyCallCount(2);\n"], "4": ["    void verifyCallCount(int expected) {\n", "      assertThat(applyCount).is(expected);\n", "  private static <I, O> FunctionSpy<I, O> spy(Function<I, O> delegate) {\n", "    return new FunctionSpy<I, O>(delegate);\n", "  }\n", "\n", "  private static <X extends Throwable, V> Function<X, V> unexpectedFunction() {\n", "    return new Function<X, V>() {\n", "      @Override\n", "      public V apply(X t) {\n", "        throw new AssertionError(\"Unexpected fallback\", t);\n", "      }\n", "    };\n", "  }\n", "\n"], "5": ["      public ListenableFuture<V> create(Throwable t) {\n", "        throw new AssertionError(\"Unexpected fallback\", t);\n", "      }\n", "    };\n", "  }\n", "\n", "  private static class AsyncFunctionSpy<X extends Throwable, V> implements AsyncFunction<X, V> {\n", "    private int count;\n", "    private final AsyncFunction<X, V> delegate;\n", "\n", "    public AsyncFunctionSpy(AsyncFunction<X, V> delegate) {\n", "      this.delegate = delegate;\n", "    }\n", "\n", "    @Override\n", "    public final ListenableFuture<V> apply(X t) throws Exception {\n", "      count++;\n", "      return delegate.apply(t);\n", "    }\n", "\n", "    void verifyCallCount(int expected) {\n", "      assertThat(count).is(expected);\n", "    }\n", "  }\n", "\n", "  private static <X extends Throwable, V> AsyncFunctionSpy<X, V> spy(AsyncFunction<X, V> delegate) {\n", "    return new AsyncFunctionSpy<X, V>(delegate);\n", "  }\n", "\n", "  private static <X extends Throwable, V> AsyncFunction<X, V> unexpectedAsyncFunction() {\n", "    return new AsyncFunction<X, V>() {\n", "      @Override\n", "      public ListenableFuture<V> apply(X t) {\n"], "6": ["  // catchingAsync tests cloned from the old withFallback tests:\n", "\n", "  public void testCatchingAsync_inputDoesNotRaiseException() throws Exception {\n", "    AsyncFunction<Throwable, Integer> fallback = unexpectedAsyncFunction();\n", "    ListenableFuture<Integer> originalFuture = Futures.immediateFuture(7);\n", "    ListenableFuture<Integer> faultToleranteFuture =\n", "        Futures.catchingAsync(originalFuture, Throwable.class, fallback);\n", "    assertEquals(7, faultToleranteFuture.get().intValue());\n", "  }\n", "\n", "  public void testCatchingAsync_inputRaisesException() throws Exception {\n", "    final RuntimeException raisedException = new RuntimeException();\n", "    AsyncFunctionSpy<Throwable, Integer> fallback = spy(new AsyncFunction<Throwable, Integer>() {\n", "      @Override\n", "      public ListenableFuture<Integer> apply(Throwable t) throws Exception {\n", "        assertThat(t).isSameAs(raisedException);\n", "        return Futures.immediateFuture(20);\n", "      }\n", "    });\n", "    ListenableFuture<Integer> failingFuture = Futures.immediateFailedFuture(raisedException);\n", "    ListenableFuture<Integer> faultTolerantFuture =\n", "        Futures.catchingAsync(failingFuture, Throwable.class, fallback);\n", "    assertEquals(20, faultTolerantFuture.get().intValue());\n", "    fallback.verifyCallCount(1);\n", "  }\n", "\n", "  public void testCatchingAsync_fallbackGeneratesRuntimeException() throws Exception {\n", "    RuntimeException expectedException = new RuntimeException();\n", "    runExpectedExceptionCatchingAsyncTest(expectedException, false);\n", "  }\n", "\n", "  public void testCatchingAsync_fallbackGeneratesCheckedException() throws Exception {\n", "    Exception expectedException = new Exception() {\n", "    };\n", "    runExpectedExceptionCatchingAsyncTest(expectedException, false);\n", "  }\n", "\n", "  public void testCatchingAsync_fallbackGeneratesError() throws Exception {\n", "    final Error error = new Error(\"deliberate\");\n", "    AsyncFunction<Throwable, Integer> fallback = new AsyncFunction<Throwable, Integer>() {\n", "      @Override\n", "      public ListenableFuture<Integer> apply(Throwable t) throws Exception {\n", "        throw error;\n", "      }\n", "    };\n", "    ListenableFuture<Integer> failingFuture = Futures.immediateFailedFuture(new RuntimeException());\n", "    try {\n", "      Futures.catchingAsync(failingFuture, Throwable.class, fallback).get();\n", "      fail(\"An Exception should have been thrown!\");\n", "    } catch (ExecutionException expected) {\n", "      assertSame(error, expected.getCause());\n", "    }\n", "  }\n", "\n", "  public void testCatchingAsync_fallbackReturnsRuntimeException() throws Exception {\n", "    RuntimeException expectedException = new RuntimeException();\n", "    runExpectedExceptionCatchingAsyncTest(expectedException, true);\n", "  }\n", "\n", "  public void testCatchingAsync_fallbackReturnsCheckedException() throws Exception {\n", "    Exception expectedException = new Exception() {\n", "    };\n", "    runExpectedExceptionCatchingAsyncTest(expectedException, true);\n", "  }\n", "\n", "  private void runExpectedExceptionCatchingAsyncTest(\n", "      final Exception expectedException, final boolean wrapInFuture) throws Exception {\n", "    AsyncFunctionSpy<Throwable, Integer> fallback = spy(new AsyncFunction<Throwable, Integer>() {\n", "      @Override\n", "      public ListenableFuture<Integer> apply(Throwable t) throws Exception {\n", "        if (!wrapInFuture) {\n", "          throw expectedException;\n", "        } else {\n", "          return Futures.immediateFailedFuture(expectedException);\n", "        }\n", "      }\n", "    });\n", "\n", "    ListenableFuture<Integer> failingFuture = Futures.immediateFailedFuture(new RuntimeException());\n", "\n", "    ListenableFuture<Integer> faultToleranteFuture =\n", "        Futures.catchingAsync(failingFuture, Throwable.class, fallback);\n", "    try {\n", "      faultToleranteFuture.get();\n", "      fail(\"An Exception should have been thrown!\");\n", "    } catch (ExecutionException ee) {\n", "      assertSame(expectedException, ee.getCause());\n", "    }\n", "    fallback.verifyCallCount(1);\n", "  }\n", "\n", "  public void testCatchingAsync_fallbackNotReady() throws Exception {\n", "    ListenableFuture<Integer> primary = immediateFailedFuture(new Exception());\n", "    final SettableFuture<Integer> secondary = SettableFuture.create();\n", "    AsyncFunction<Throwable, Integer> fallback = new AsyncFunction<Throwable, Integer>() {\n", "      @Override\n", "      public ListenableFuture<Integer> apply(Throwable t) {\n", "        return secondary;\n", "      }\n", "    };\n", "    ListenableFuture<Integer> derived = Futures.catchingAsync(primary, Throwable.class, fallback);\n", "    secondary.set(1);\n", "    assertEquals(1, (int) derived.get());\n", "  }\n", "\n", "  public void testCatchingAsync_resultInterruptedBeforeFallback() throws Exception {\n", "    SettableFuture<Integer> primary = SettableFuture.create();\n", "    AsyncFunction<Throwable, Integer> fallback = unexpectedAsyncFunction();\n", "    ListenableFuture<Integer> derived = Futures.catchingAsync(primary, Throwable.class, fallback);\n", "    derived.cancel(true);\n", "    assertTrue(primary.isCancelled());\n", "    assertTrue(primary.wasInterrupted());\n", "  }\n", "\n", "  public void testCatchingAsync_resultCancelledBeforeFallback() throws Exception {\n", "    SettableFuture<Integer> primary = SettableFuture.create();\n", "    AsyncFunction<Throwable, Integer> fallback = unexpectedAsyncFunction();\n", "    ListenableFuture<Integer> derived = Futures.catchingAsync(primary, Throwable.class, fallback);\n", "    derived.cancel(false);\n", "    assertTrue(primary.isCancelled());\n", "    assertFalse(primary.wasInterrupted());\n", "  }\n", "\n", "  @GwtIncompatible(\"mocks\")\n", "  @SuppressWarnings(\"unchecked\")\n", "  public void testCatchingAsync_resultCancelledAfterFallback() throws Exception {\n", "    final SettableFuture<Integer> secondary = SettableFuture.create();\n", "    final RuntimeException raisedException = new RuntimeException();\n", "    AsyncFunctionSpy<Throwable, Integer> fallback = spy(new AsyncFunction<Throwable, Integer>() {\n", "      @Override\n", "      public ListenableFuture<Integer> apply(Throwable t) throws Exception {\n", "        assertThat(t).isSameAs(raisedException);\n", "        return secondary;\n", "      }\n", "    });\n", "\n", "    ListenableFuture<Integer> failingFuture = Futures.immediateFailedFuture(raisedException);\n", "\n", "    ListenableFuture<Integer> derived =\n", "        Futures.catchingAsync(failingFuture, Throwable.class, fallback);\n", "    derived.cancel(false);\n", "    assertTrue(secondary.isCancelled());\n", "    assertFalse(secondary.wasInterrupted());\n", "    fallback.verifyCallCount(1);\n", "  }\n", "\n", "  public void testCatchingAsync_nullInsteadOfFuture() throws Exception {\n", "    ListenableFuture<Integer> inputFuture = immediateFailedFuture(new Exception());\n", "    ListenableFuture<?> chainedFuture = Futures.catchingAsync(inputFuture, Throwable.class,\n", "        new AsyncFunction<Throwable, Integer>() {\n", "          @Override\n", "          public ListenableFuture<Integer> apply(Throwable t) {\n", "            return null;\n", "          }\n", "        });\n", "    try {\n", "      chainedFuture.get();\n", "      fail();\n", "    } catch (ExecutionException expected) {\n", "      NullPointerException cause = (NullPointerException) expected.getCause();\n", "      assertThat(cause).hasMessage(\"AsyncFunction.apply returned null instead of a Future. \"\n", "          + \"Did you mean to return immediateFuture(null)?\");\n", "    }\n", "  }\n", "\n", "  // catching tests cloned from the old withFallback tests:\n", "\n", "  public void testCatching_inputDoesNotRaiseException() throws Exception {\n", "    Function<Throwable, Integer> fallback = unexpectedFunction();\n", "    ListenableFuture<Integer> originalFuture = Futures.immediateFuture(7);\n", "    ListenableFuture<Integer> faultToleranteFuture =\n", "        Futures.catching(originalFuture, Throwable.class, fallback);\n", "    assertEquals(7, faultToleranteFuture.get().intValue());\n", "  }\n", "\n", "  public void testCatching_inputRaisesException() throws Exception {\n", "    final RuntimeException raisedException = new RuntimeException();\n", "    FunctionSpy<Throwable, Integer> fallback = spy(new Function<Throwable, Integer>() {\n", "      @Override\n", "      public Integer apply(Throwable t) {\n", "        assertThat(t).isSameAs(raisedException);\n", "        return 20;\n", "      }\n", "    });\n", "    ListenableFuture<Integer> failingFuture = Futures.immediateFailedFuture(raisedException);\n", "    ListenableFuture<Integer> faultTolerantFuture =\n", "        Futures.catching(failingFuture, Throwable.class, fallback);\n", "    assertEquals(20, faultTolerantFuture.get().intValue());\n", "    fallback.verifyCallCount(1);\n", "  }\n", "\n", "  public void testCatching_fallbackGeneratesRuntimeException() throws Exception {\n", "    RuntimeException expectedException = new RuntimeException();\n", "    runExpectedExceptionCatchingTest(expectedException);\n", "  }\n", "\n", "  /*\n", "   * catching() uses a plain Function, so there's no\n", "   * testCatching_fallbackGeneratesCheckedException().\n", "   */\n", "\n", "  public void testCatching_fallbackGeneratesError() throws Exception {\n", "    final Error error = new Error(\"deliberate\");\n", "    Function<Throwable, Integer> fallback = new Function<Throwable, Integer>() {\n", "      @Override\n", "      public Integer apply(Throwable t) {\n", "        throw error;\n", "      }\n", "    };\n", "    ListenableFuture<Integer> failingFuture = Futures.immediateFailedFuture(new RuntimeException());\n", "    try {\n", "      Futures.catching(failingFuture, Throwable.class, fallback).get();\n", "      fail(\"An Exception should have been thrown!\");\n", "    } catch (ExecutionException expected) {\n", "      assertSame(error, expected.getCause());\n", "    }\n", "  }\n", "\n", "  /*\n", "   * catching() uses a plain Function, so there's no testCatching_fallbackReturnsRuntimeException()\n", "   * or testCatching_fallbackReturnsCheckedException().\n", "   */\n", "\n", "  private void runExpectedExceptionCatchingTest(final RuntimeException expectedException)\n", "      throws Exception {\n", "    FunctionSpy<Throwable, Integer> fallback = spy(new Function<Throwable, Integer>() {\n", "      @Override\n", "      public Integer apply(Throwable t) {\n", "        throw expectedException;\n", "      }\n", "    });\n", "\n", "    ListenableFuture<Integer> failingFuture = Futures.immediateFailedFuture(new RuntimeException());\n", "\n", "    ListenableFuture<Integer> faultToleranteFuture =\n", "        Futures.catching(failingFuture, Throwable.class, fallback);\n", "    try {\n", "      faultToleranteFuture.get();\n", "      fail(\"An Exception should have been thrown!\");\n", "    } catch (ExecutionException ee) {\n", "      assertSame(expectedException, ee.getCause());\n", "    }\n", "    fallback.verifyCallCount(1);\n", "  }\n", "\n", "  // catching() uses a plain Function, so there's no testCatching_fallbackNotReady().\n", "\n", "  public void testCatching_resultInterruptedBeforeFallback() throws Exception {\n", "    SettableFuture<Integer> primary = SettableFuture.create();\n", "    Function<Throwable, Integer> fallback = unexpectedFunction();\n", "    ListenableFuture<Integer> derived = Futures.catching(primary, Throwable.class, fallback);\n", "    derived.cancel(true);\n", "    assertTrue(primary.isCancelled());\n", "    assertTrue(primary.wasInterrupted());\n", "  }\n", "\n", "  public void testCatching_resultCancelledBeforeFallback() throws Exception {\n", "    SettableFuture<Integer> primary = SettableFuture.create();\n", "    Function<Throwable, Integer> fallback = unexpectedFunction();\n", "    ListenableFuture<Integer> derived = Futures.catching(primary, Throwable.class, fallback);\n", "    derived.cancel(false);\n", "    assertTrue(primary.isCancelled());\n", "    assertFalse(primary.wasInterrupted());\n", "  }\n", "\n", "  // catching() uses a plain Function, so there's no testCatching_resultCancelledAfterFallback().\n", "\n", "  // catching() uses a plain Function, so there's no testCatching_nullInsteadOfFuture().\n", "\n", "  // Some tests of the exceptionType parameter:\n", "\n", "  public void testCatching_Throwable() throws Exception {\n", "    Function<Throwable, Integer> fallback = functionReturningOne();\n", "    ListenableFuture<Integer> originalFuture = immediateFailedFuture(new IOException());\n", "    ListenableFuture<Integer> faultTolerantFuture =\n", "        Futures.catching(originalFuture, Throwable.class, fallback);\n", "    assertEquals(1, (int) faultTolerantFuture.get());\n", "  }\n", "\n", "  @GwtIncompatible(\"non-Throwable exceptionType\")\n", "  public void testCatching_customTypeMatch() throws Exception {\n", "    Function<IOException, Integer> fallback = functionReturningOne();\n", "    ListenableFuture<Integer> originalFuture = immediateFailedFuture(new FileNotFoundException());\n", "    ListenableFuture<Integer> faultTolerantFuture =\n", "        Futures.catching(originalFuture, IOException.class, fallback);\n", "    assertEquals(1, (int) faultTolerantFuture.get());\n", "  }\n", "\n", "  @GwtIncompatible(\"non-Throwable exceptionType\")\n", "  public void testCatching_customTypeNoMatch() throws Exception {\n", "    Function<IOException, Integer> fallback = functionReturningOne();\n", "    ListenableFuture<Integer> originalFuture = immediateFailedFuture(new RuntimeException());\n", "    ListenableFuture<Integer> faultTolerantFuture =\n", "        Futures.catching(originalFuture, IOException.class, fallback);\n", "    try {\n", "      faultTolerantFuture.get();\n", "      fail();\n", "    } catch (ExecutionException expected) {\n", "      assertTrue(expected.getCause() instanceof RuntimeException);\n", "    }\n", "  }\n", "\n", "  public void testCatchingAsync_Throwable() throws Exception {\n", "    AsyncFunction<Throwable, Integer> fallback = asyncFunctionReturningOne();\n", "    ListenableFuture<Integer> originalFuture = immediateFailedFuture(new IOException());\n", "    ListenableFuture<Integer> faultTolerantFuture =\n", "        Futures.catchingAsync(originalFuture, Throwable.class, fallback);\n", "    assertEquals(1, (int) faultTolerantFuture.get());\n", "  }\n", "\n", "  @GwtIncompatible(\"non-Throwable exceptionType\")\n", "  public void testCatchingAsync_customTypeMatch() throws Exception {\n", "    AsyncFunction<IOException, Integer> fallback = asyncFunctionReturningOne();\n", "    ListenableFuture<Integer> originalFuture = immediateFailedFuture(new FileNotFoundException());\n", "    ListenableFuture<Integer> faultTolerantFuture =\n", "        Futures.catchingAsync(originalFuture, IOException.class, fallback);\n", "    assertEquals(1, (int) faultTolerantFuture.get());\n", "  }\n", "\n", "  @GwtIncompatible(\"non-Throwable exceptionType\")\n", "  public void testCatchingAsync_customTypeNoMatch() throws Exception {\n", "    AsyncFunction<IOException, Integer> fallback = asyncFunctionReturningOne();\n", "    ListenableFuture<Integer> originalFuture = immediateFailedFuture(new RuntimeException());\n", "    ListenableFuture<Integer> faultTolerantFuture =\n", "        Futures.catchingAsync(originalFuture, IOException.class, fallback);\n", "    try {\n", "      faultTolerantFuture.get();\n", "      fail();\n", "    } catch (ExecutionException expected) {\n", "      assertTrue(expected.getCause() instanceof RuntimeException);\n", "    }\n", "  }\n", "\n", "  private <X extends Throwable> Function<X, Integer> functionReturningOne() {\n", "    return new Function<X, Integer>() {\n", "      @Override\n", "      public Integer apply(X t) {\n", "        return 1;\n", "      }\n", "    };\n", "  }\n", "\n", "  private <X extends Throwable> AsyncFunction<X, Integer> asyncFunctionReturningOne() {\n", "    return new AsyncFunction<X, Integer>() {\n", "      @Override\n", "      public ListenableFuture<Integer> apply(X t) {\n", "        return immediateFuture(1);\n", "      }\n", "    };\n", "  }\n", "\n"]}, "removed": {"2": ["    assertEquals(0, spy.getApplyCount());\n", "    assertEquals(1, spy.getApplyCount());\n", "    assertEquals(2, spy.getApplyCount());\n"], "3": ["  @GwtIncompatible(\"used only in GwtIncompatible tests\")\n", "\n"], "4": ["    public int getApplyCount() {\n", "      return applyCount;\n"], "5": ["      public ListenableFuture<V> create(Throwable t) throws Exception {\n"]}, "added_lines": {"1": [52], "2": [542, 544, 546], "4": [587, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "5": [632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664], "6": [829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179]}, "removed_lines": {"2": [541, 543, 545], "3": [572, 574], "4": [588, 589], "5": [620]}}, {"6": "guava/src/com/google/common/util/concurrent/Futures.java", "added": {"1": ["import static com.google.common.util.concurrent.Platform.isInstanceOfThrowableClass;\n"], "2": ["public final class Futures extends GwtFuturesCatchingSpecialization {\n"], "3": ["   * <b>To be deprecated:</b> Prefer {@link #catchingAsync(ListenableFuture,\n", "   * Class, AsyncFunction) catchingAsync(input, Throwable.class,\n", "   * fallbackImplementedAsAnAsyncFunction)}, usually replacing {@code\n", "   * Throwable.class} with the specific type you want to handle.\n", "   *\n", "   * <p>Returns a {@code Future} whose result is taken from the given primary\n"], "4": ["   * <p>Also note that, regardless of which thread executes {@code\n"], "5": ["   * <b>To be deprecated:</b> Prefer {@link #catchingAsync(ListenableFuture,\n", "   * Class, AsyncFunction, Executor) catchingAsync(input, Throwable.class,\n", "   * fallbackImplementedAsAnAsyncFunction, executor)}, usually replacing {@code\n", "   * Throwable.class} with the specific type you want to handle.\n", "   *\n", "   * <p>Returns a {@code Future} whose result is taken from the given primary\n"], "6": ["    return catchingAsync(\n", "        input, Throwable.class, asAsyncFunction(fallback), executor);\n", "  }\n", "\n", "  /**\n", "   * Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the\n", "   * primary input fails with the given {@code exceptionType}, from the result provided by the\n", "   * {@code fallback}. {@link Function#apply} is not invoked until the primary input has failed, so\n", "   * if the primary input succeeds, it is never invoked. If, during the invocation of {@code\n", "   * fallback}, an exception is thrown, this exception is used as the result of the output {@code\n", "   * Future}.\n", "   *\n", "   * <p>Usage example:\n", "   *\n", "   * <pre>   {@code\n", "   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n", "   *\n", "   *   // Falling back to a zero counter in case an exception happens when\n", "   *   // processing the RPC to fetch counters.\n", "   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n", "   *       fetchCounterFuture, FetchException.class,\n", "   *       new Function<FetchException, Integer>() {\n", "   *         public Integer apply(FetchException e) {\n", "   *           return 0;\n", "   *         }\n", "   *       });}</pre>\n", "   *\n", "   * <p>Note: If the derived {@code fallback} is slow or heavyweight, consider {@linkplain\n", "   * #catching(ListenableFuture, Class, Function, Executor) supplying an executor}. If you do not\n", "   * supply an executor, {@code catching} will use a {@linkplain MoreExecutors#directExecutor direct\n", "   * executor}, which carries some caveats for heavier operations. For example, the call to {@code\n", "   * fallback.apply} may run on an unpredictable or undesirable thread:\n", "   *\n", "   * <ul>\n", "   * <li>If the input {@code Future} is done at the time {@code catching} is called, {@code\n", "   * catching} will call {@code fallback.apply} inline.\n", "   * <li>If the input {@code Future} is not yet done, {@code catching} will schedule {@code\n", "   * fallback.apply} to be run by the thread that completes the input {@code Future}, which may be\n", "   * an internal system thread such as an RPC network thread.\n", "   * </ul>\n", "   *\n", "   * <p>Also note that, regardless of which thread executes {@code fallback.apply}, all other\n", "   * registered but unexecuted listeners are prevented from running during its execution, even if\n", "   * those listeners are to run in other executors.\n", "   *\n", "   * @param input the primary input {@code Future}\n", "   * @param fallback the {@link Function} implementation to be called if {@code input} fails with\n", "   *     the expected exception type\n", "   * @param exceptionType the exception type that triggers use of {@code fallback}\n", "   * @since 19.0\n", "   */\n", "  @GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n", "  public static <V, X extends Throwable> ListenableFuture<V> catching(\n", "      ListenableFuture<? extends V> input, Class<X> exceptionType,\n", "      Function<? super X, ? extends V> fallback) {\n", "    return catching(input, exceptionType, fallback, directExecutor());\n", "   * Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the\n", "   * primary input fails with the given {@code exceptionType}, from the result provided by the\n", "   * {@code fallback}. {@link Function#apply} is not invoked until the primary input has failed, so\n", "   * if the primary input succeeds, it is never invoked. If, during the invocation of {@code\n", "   * fallback}, an exception is thrown, this exception is used as the result of the output {@code\n", "   * Future}.\n", "   *\n", "   * <p>Usage example:\n", "   *\n", "   * <pre>   {@code\n", "   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n", "   *\n", "   *   // Falling back to a zero counter in case an exception happens when\n", "   *   // processing the RPC to fetch counters.\n", "   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n", "   *       fetchCounterFuture, FetchException.class,\n", "   *       new Function<FetchException, Integer>() {\n", "   *         public Integer apply(FetchException e) {\n", "   *           return 0;\n", "   *         }\n", "   *       }, directExecutor());}</pre>\n", "   *\n", "   * <p>When the execution of {@code fallback.apply} is fast and lightweight, consider {@linkplain\n", "   * #catching(ListenableFuture, Class, Function) omitting the executor} or explicitly specifying\n", "   * {@link MoreExecutors#directExecutor() directExecutor()}. However, be aware of the caveats\n", "   * documented in the link above.\n", "   *\n", "   * @param input the primary input {@code Future}\n", "   * @param fallback the {@link Function} implementation to be called if {@code input} fails with\n", "   *     the expected exception type\n", "   * @param exceptionType the exception type that triggers use of {@code fallback}\n", "   * @param executor the executor that runs {@code fallback} if {@code input} fails\n", "   * @since 19.0\n", "  @GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n", "  public static <V, X extends Throwable> ListenableFuture<V> catching(\n", "      ListenableFuture<? extends V> input, Class<X> exceptionType,\n", "      Function<? super X, ? extends V> fallback, Executor executor) {\n", "    return catchingAsync(input, exceptionType, asAsyncFunction(fallback), executor);\n", "  }\n", "\n", "  /**\n", "   * Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the\n", "   * primary input fails with the given {@code exceptionType}, from the result provided by the\n", "   * {@code fallback}. {@link AsyncFunction#apply} is not invoked until the primary input has\n", "   * failed, so if the primary input succeeds, it is never invoked. If, during the invocation of\n", "   * {@code fallback}, an exception is thrown, this exception is used as the result of the output\n", "   * {@code Future}.\n", "   *\n", "   * <p>Usage examples:\n", "   *\n", "   * <pre>   {@code\n", "   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n", "   *\n", "   *   // Falling back to a zero counter in case an exception happens when\n", "   *   // processing the RPC to fetch counters.\n", "   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n", "   *       fetchCounterFuture, FetchException.class,\n", "   *       new AsyncFunction<FetchException, Integer>() {\n", "   *         public ListenableFuture<Integer> apply(FetchException e) {\n", "   *           return immediateFuture(0);\n", "   *         }\n", "   *       });}</pre>\n", "   *\n", "   * <p>The fallback can also choose to propagate the original exception when desired:\n", "   *\n", "   * <pre>   {@code\n", "   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n", "   *\n", "   *   // Falling back to a zero counter only in case the exception was a\n", "   *   // TimeoutException.\n", "   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n", "   *       fetchCounterFuture, FetchException.class,\n", "   *       new AsyncFunction<FetchException, Integer>() {\n", "   *         public ListenableFuture<Integer> apply(FetchException e)\n", "   *             throws FetchException {\n", "   *           if (omitDataOnFetchFailure) {\n", "   *             return immediateFuture(0);\n", "   *           }\n", "   *           throw e;\n", "   *         }\n", "   *       });}</pre>\n", "   *\n", "   * <p>Note: If the derived {@code fallback} is slow or heavyweight in <i>creating</i> its {@code\n", "   * Future} (whether that derived {@code Future} itself is slow or heavyweight in <i>completing</i>\n", "   * is irrelevant), consider {@linkplain #catchingAsync(ListenableFuture, Class, AsyncFunction,\n", "   * Executor) supplying an executor}. If you do not supply an executor, {@code catchingAsync} will\n", "   * use a {@linkplain MoreExecutors#directExecutor direct executor}, which carries some caveats for\n", "   * heavier operations. For example, the call to {@code fallback.apply} may run on an unpredictable\n", "   * or undesirable thread:\n", "   *\n", "   * <ul>\n", "   * <li>If the input {@code Future} is done at the time {@code catchingAsync} is called, {@code\n", "   * catchingAsync} will call {@code fallback.apply} inline.\n", "   * <li>If the input {@code Future} is not yet done, {@code catchingAsync} will schedule {@code\n", "   * fallback.apply} to be run by the thread that completes the input {@code Future}, which may be\n", "   * an internal system thread such as an RPC network thread.\n", "   * </ul>\n", "   *\n", "   * <p>Also note that, regardless of which thread executes {@code fallback.apply}, all other\n", "   * registered but unexecuted listeners are prevented from running during its execution, even if\n", "   * those listeners are to run in other executors.\n", "   *\n", "   * @param input the primary input {@code Future}\n", "   * @param fallback the {@link AsyncFunction} implementation to be called if {@code input} fails\n", "   *     with the expected exception type\n", "   * @param exceptionType the exception type that triggers use of {@code fallback}\n", "   * @since 19.0\n", "   */\n", "  @GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n", "  public static <V, X extends Throwable> ListenableFuture<V> catchingAsync(\n", "      ListenableFuture<? extends V> input, Class<X> exceptionType,\n", "      AsyncFunction<? super X, ? extends V> fallback) {\n", "    return catchingAsync(input, exceptionType, fallback, directExecutor());\n", "  }\n", "\n", "  /**\n", "   * Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the\n", "   * primary input fails with the given {@code exceptionType}, from the result provided by the\n", "   * {@code fallback}. {@link AsyncFunction#apply} is not invoked until the primary input has\n", "   * failed, so if the primary input succeeds, it is never invoked. If, during the invocation of\n", "   * {@code fallback}, an exception is thrown, this exception is used as the result of the output\n", "   * {@code Future}.\n", "   *\n", "   * <p>Usage examples:\n", "   *\n", "   * <pre>   {@code\n", "   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n", "   *\n", "   *   // Falling back to a zero counter in case an exception happens when\n", "   *   // processing the RPC to fetch counters.\n", "   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n", "   *       fetchCounterFuture, FetchException.class,\n", "   *       new AsyncFunction<FetchException, Integer>() {\n", "   *         public ListenableFuture<Integer> apply(FetchException e) {\n", "   *           return immediateFuture(0);\n", "   *         }\n", "   *       }, directExecutor());}</pre>\n", "   *\n", "   * <p>The fallback can also choose to propagate the original exception when desired:\n", "   *\n", "   * <pre>   {@code\n", "   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n", "   *\n", "   *   // Falling back to a zero counter only in case the exception was a\n", "   *   // TimeoutException.\n", "   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n", "   *       fetchCounterFuture, FetchException.class,\n", "   *       new AsyncFunction<FetchException, Integer>() {\n", "   *         public ListenableFuture<Integer> apply(FetchException e)\n", "   *             throws FetchException {\n", "   *           if (omitDataOnFetchFailure) {\n", "   *             return immediateFuture(0);\n", "   *           }\n", "   *           throw e;\n", "   *         }\n", "   *       }, directExecutor());}</pre>\n", "   *\n", "   * <p>When the execution of {@code fallback.apply} is fast and lightweight (though the {@code\n", "   * Future} it returns need not meet these criteria), consider {@linkplain\n", "   * #catchingAsync(ListenableFuture, Class, AsyncFunction) omitting the executor} or explicitly\n", "   * specifying {@link MoreExecutors#directExecutor() directExecutor()}. However, be aware of the\n", "   * caveats documented in the link above.\n", "   *\n", "   * @param input the primary input {@code Future}\n", "   * @param fallback the {@link AsyncFunction} implementation to be called if {@code input} fails\n", "   *     with the expected exception type\n", "   * @param exceptionType the exception type that triggers use of {@code fallback}\n", "   * @param executor the executor that runs {@code fallback} if {@code input} fails\n", "   * @since 19.0\n", "   */\n", "  @GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n", "  public static <V, X extends Throwable> ListenableFuture<V> catchingAsync(\n", "      ListenableFuture<? extends V> input, Class<X> exceptionType,\n", "      AsyncFunction<? super X, ? extends V> fallback, Executor executor) {\n", "    return new CatchingFuture<V, X>(input, exceptionType, fallback, executor);\n", "  }\n", "\n", "  static <V> AsyncFunction<Throwable, V> asAsyncFunction(final FutureFallback<V> fallback) {\n", "    checkNotNull(fallback);\n", "    return new AsyncFunction<Throwable, V>() {\n", "      @Override\n", "      public ListenableFuture<V> apply(Throwable t) throws Exception {\n", "        return checkNotNull(fallback.create(t), \"FutureFallback.create returned null instead of a \"\n", "            + \"Future. Did you mean to return immediateFuture(null)?\");\n", "      }\n", "    };\n", "  }\n", "\n", "  static class CatchingFuture<V, X extends Throwable> extends AbstractFuture.TrustedFuture<V> {\n", "    CatchingFuture(ListenableFuture<? extends V> input,\n", "        final Class<X> exceptionType,\n", "        final AsyncFunction<? super X, ? extends V> fallback,\n", "      checkNotNull(exceptionType);\n", "      checkNotNull(fallback);\n", "\n"], "7": ["            if (isInstanceOfThrowableClass(throwable, exceptionType)) {\n", "              @SuppressWarnings(\"unchecked\") // verified safe by isInstance\n", "              X castThrowable = (X) throwable;\n", "              ListenableFuture<? extends V> replacement = fallback.apply(castThrowable);\n", "              checkNotNull(replacement, \"AsyncFunction.apply returned null instead of a Future. \"\n", "                  + \"Did you mean to return immediateFuture(null)?\");\n", "              setFuture(replacement);\n", "            } else {\n", "              setException(throwable);\n", "            }\n"], "8": ["   * <p>Also note that, regardless of which thread executes {@code\n"], "9": ["   * <p>Also note that, regardless of which thread executes {@code\n"], "10": ["  static <I, O> AsyncFunction<I, O> asAsyncFunction(\n", "    checkNotNull(function);\n"]}, "removed": {"2": ["public final class Futures {\n"], "3": ["   * Returns a {@code Future} whose result is taken from the given primary\n"], "4": ["   * <p>Also note that, regardless of which thread executes the {@code\n"], "5": ["   * Returns a {@code Future} whose result is taken from the given primary\n"], "6": ["    checkNotNull(fallback);\n", "    return new FallbackFuture<V>(input, fallback, executor);\n", "   * A future that falls back on a second, generated future, in case its\n", "   * original future fails.\n", "  private static class FallbackFuture<V> extends AbstractFuture.TrustedFuture<V> {\n", "    FallbackFuture(ListenableFuture<? extends V> input,\n", "        final FutureFallback<? extends V> fallback,\n"], "7": ["            ListenableFuture<? extends V> replacement = fallback.create(throwable);\n", "            checkNotNull(replacement, \"FutureFallback.create returned null instead of a Future. \"\n", "                + \"Did you mean to return immediateFuture(null)?\");\n", "            setFuture(replacement);\n"], "8": ["   * <p>Also note that, regardless of which thread executes the {@code\n"], "9": ["   * <p>Also note that, regardless of which thread executes the {@code\n"], "10": ["  private static <I, O> AsyncFunction<I, O> asAsyncFunction(\n"]}, "added_lines": {"1": [22], "2": [76], "3": [363, 364, 365, 366, 367, 368], "4": [429], "5": [446, 447, 448, 449, 450, 451], "6": [511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 762, 763, 764, 766, 767, 768], "7": [787, 788, 789, 790, 791, 792, 793, 794, 795, 796], "8": [996], "9": [1134], "10": [1208, 1210]}, "removed_lines": {"2": [75], "3": [362], "4": [423], "5": [440], "6": [500, 501, 505, 506, 508, 511, 512], "7": [532, 533, 534, 535], "8": [735], "9": [873], "10": [947]}}, {"7": "guava/src/com/google/common/util/concurrent/GwtFuturesCatchingSpecialization.java", "added": {"1": ["/*\n", " * Copyright (C) 2006 The Guava Authors\n", " *\n", " * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package com.google.common.util.concurrent;\n", "\n", "import com.google.common.annotations.GwtCompatible;\n", "\n", "/**\n", " * Hidden superclass of {@link Futures} that provides us a place to declare special GWT versions of\n", " * the {@link Futures#catching(ListenableFuture, Class, com.google.common.base.Function)\n", " * Futures.catching} family of methods. Those versions have slightly different signatures.\n", " */\n", "@GwtCompatible(emulated = true)\n", "abstract class GwtFuturesCatchingSpecialization {\n", "  /*\n", "   * This server copy of the class is empty. The corresponding GWT copy contains alternative\n", "   * versions of catching() and catchingAsync() with slightly different signatures from the ones\n", "   * found in Futures.java.\n", "   */\n", "}\n"]}, "removed": {}, "added_lines": {"1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]}, "removed_lines": {}}, {"8": "guava/src/com/google/common/util/concurrent/Platform.java", "added": {"1": ["/*\n", " * Copyright (C) 2015 The Guava Authors\n", " *\n", " * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package com.google.common.util.concurrent;\n", "\n", "import com.google.common.annotations.GwtCompatible;\n", "\n", "import javax.annotation.Nullable;\n", "\n", "/**\n", " * Methods factored out so that they can be emulated differently in GWT.\n", " */\n", "@GwtCompatible(emulated = true)\n", "final class Platform {\n", "  static boolean isInstanceOfThrowableClass(\n", "      @Nullable Throwable t, Class<? extends Throwable> expectedClass) {\n", "    return expectedClass.isInstance(t);\n", "  }\n", "\n", "  private Platform() {}\n", "}"]}, "removed": {}, "added_lines": {"1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]}, "removed_lines": {}}]}
