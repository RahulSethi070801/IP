{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2006 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.util.concurrent;\n",
        "18": "\n",
        "19": "import static com.google.common.util.concurrent.Futures.asAsyncFunction;\n",
        "20": "import static com.google.common.util.concurrent.MoreExecutors.directExecutor;\n",
        "21": "\n",
        "22": "import com.google.common.base.Function;\n",
        "23": "import com.google.common.util.concurrent.Futures.CatchingFuture;\n",
        "24": "\n",
        "25": "import java.util.concurrent.Executor;\n",
        "26": "\n",
        "27": "/**\n",
        "28": " * Hidden superclass of {@link Futures} that provides us a place to declare special GWT versions of\n",
        "29": " * the {@link Futures#catching(ListenableFuture, Class, com.google.common.base.Function)\n",
        "30": " * Futures.catching} family of methods. Those versions have slightly different signatures.\n",
        "31": " */\n",
        "32": "abstract class GwtFuturesCatchingSpecialization {\n",
        "33": "  /*\n",
        "34": "   * In the GWT versions of the methods (below), every exceptionType parameter is required to be\n",
        "35": "   * Class<Throwable>. To handle only certain kinds of exceptions under GWT, you'll need to write\n",
        "36": "   * your own instanceof tests.\n",
        "37": "   */\n",
        "38": "\n",
        "39": "  public static <V> ListenableFuture<V> catching(\n",
        "40": "      ListenableFuture<? extends V> input,\n",
        "41": "      Class<Throwable> exceptionType,\n",
        "42": "      Function<? super Throwable, ? extends V> fallback) {\n",
        "43": "    return catching(input, exceptionType, fallback, directExecutor());\n",
        "44": "  }\n",
        "45": "\n",
        "46": "  public static <V> ListenableFuture<V> catching(\n",
        "47": "      ListenableFuture<? extends V> input,\n",
        "48": "      Class<Throwable> exceptionType,\n",
        "49": "      Function<? super Throwable, ? extends V> fallback,\n",
        "50": "      Executor executor) {\n",
        "51": "    return catchingAsync(input, exceptionType, asAsyncFunction(fallback), executor);\n",
        "52": "  }\n",
        "53": "\n",
        "54": "  public static <V> ListenableFuture<V> catchingAsync(\n",
        "55": "      ListenableFuture<? extends V> input,\n",
        "56": "      Class<Throwable> exceptionType,\n",
        "57": "      AsyncFunction<? super Throwable, ? extends V> fallback) {\n",
        "58": "    return catchingAsync(input, exceptionType, fallback, directExecutor());\n",
        "59": "  }\n",
        "60": "\n",
        "61": "  public static <V> ListenableFuture<V> catchingAsync(\n",
        "62": "      ListenableFuture<? extends V> input,\n",
        "63": "      Class<Throwable> exceptionType,\n",
        "64": "      AsyncFunction<? super Throwable, ? extends V> fallback,\n",
        "65": "      Executor executor) {\n",
        "66": "    return new CatchingFuture<V, Throwable>(input, exceptionType, fallback, executor);\n",
        "67": "  }\n",
        "68": "}\n"
    },
    "removed": {}
}