{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "23": " * A {@link ListenableFuture} whose result can be set by a {@link #set(Object)}, {@link\n",
        "24": " * #setException(Throwable)} or {@link #setFuture(ListenableFuture)} call. It can also, like any\n",
        "25": " * other {@code Future}, be {@linkplain #cancel cancelled}.\n",
        "26": " *\n",
        "27": " * <p>{@code SettableFuture} is the recommended {@code ListenableFuture} implementation when your\n",
        "28": " * task is not a good fit for a {@link ListeningExecutorService} task. If your needs are more\n",
        "29": " * complex than {@code SettableFuture} supports, use {@link AbstractFuture}, which offers an\n",
        "30": " * extensible version of the API.\n",
        "38": "   * Creates a new {@code SettableFuture} that can be completed or cancelled by a later method call.\n",
        "57": "\n",
        "58": "  private SettableFuture() {}\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "25": " * A {@link ListenableFuture} whose result may be set by a {@link #set(Object)},\n",
        "26": " * {@link #setException(Throwable)} or {@link #setFuture(ListenableFuture)} call. \n",
        "27": " * It may also be cancelled.\n",
        "34": "\n",
        "36": "   * Creates a new {@code SettableFuture} in the default state.\n",
        "42": "  /**\n",
        "43": "   * Explicit private constructor, use the {@link #create} factory method to\n",
        "44": "   * create instances of {@code SettableFuture}.\n",
        "45": "   */\n",
        "46": "  private SettableFuture() {}\n",
        "47": "\n"
    }
}