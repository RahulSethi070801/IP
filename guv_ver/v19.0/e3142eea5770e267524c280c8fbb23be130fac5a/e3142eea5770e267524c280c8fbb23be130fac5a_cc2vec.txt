{"id": "e3142eea5770e267524c280c8fbb23be130fac5a", "code": [{"0": "guava/src/com/google/common/util/concurrent/SettableFuture.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * A {@link ListenableFuture} whose result can be set by a {@link #set(Object)}, {@link\n", " * #setException(Throwable)} or {@link #setFuture(ListenableFuture)} call. It can also, like any\n", " * other {@code Future}, be {@linkplain #cancel cancelled}.\n", " *\n", " * <p>{@code SettableFuture} is the recommended {@code ListenableFuture} implementation when your\n", " * task is not a good fit for a {@link ListeningExecutorService} task. If your needs are more\n", " * complex than {@code SettableFuture} supports, use {@link AbstractFuture}, which offers an\n", " * extensible version of the API.\n", "   * Creates a new {@code SettableFuture} that can be completed or cancelled by a later method call.\n"], "3": ["\n", "  private SettableFuture() {}\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * A {@link ListenableFuture} whose result may be set by a {@link #set(Object)},\n", " * {@link #setException(Throwable)} or {@link #setFuture(ListenableFuture)} call. \n", " * It may also be cancelled.\n", "\n", "   * Creates a new {@code SettableFuture} in the default state.\n", "  /**\n", "   * Explicit private constructor, use the {@link #create} factory method to\n", "   * create instances of {@code SettableFuture}.\n", "   */\n", "  private SettableFuture() {}\n", "\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [23, 24, 25, 26, 27, 28, 29, 30, 38], "3": [57, 58]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [25, 26, 27, 34, 36, 42, 43, 44, 45, 46, 47]}}]}
