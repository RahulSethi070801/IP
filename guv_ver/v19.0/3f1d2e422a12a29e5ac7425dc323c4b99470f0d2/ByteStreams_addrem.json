{
    "addition": {
        "707": "    long skipped = skipUpTo(in, n);\n",
        "708": "    if (skipped < n) {\n",
        "709": "      throw new EOFException(\"reached end of stream after skipping \"\n",
        "710": "          + skipped + \" bytes; \" + n + \" bytes expected\");\n",
        "711": "    }\n",
        "712": "  }\n",
        "713": "\n",
        "714": "  /**\n",
        "715": "   * Discards up to {@code n} bytes of data from the input stream. This method\n",
        "716": "   * will block until either the full amount has been skipped or until the end\n",
        "717": "   * of the stream is reached, whichever happens first. Returns the total number\n",
        "718": "   * of bytes skipped.\n",
        "719": "   */\n",
        "720": "  static long skipUpTo(InputStream in, final long n) throws IOException {\n",
        "721": "    long totalSkipped = 0;\n",
        "722": "\n",
        "723": "    while (totalSkipped < n) {\n",
        "724": "      long skipped = in.skip(n - totalSkipped);\n",
        "725": "\n",
        "726": "      if (skipped == 0) {\n",
        "729": "          // Reached EOF\n",
        "730": "          break;\n",
        "731": "        } else {\n",
        "732": "          skipped = 1;\n",
        "735": "\n",
        "736": "      totalSkipped += skipped;\n",
        "738": "\n",
        "739": "    return totalSkipped;\n"
    },
    "removed": {
        "707": "    long toSkip = n;\n",
        "708": "    while (n > 0) {\n",
        "709": "      long amt = in.skip(n);\n",
        "710": "      if (amt == 0) {\n",
        "713": "          long skipped = toSkip - n;\n",
        "714": "          throw new EOFException(\"reached end of stream after skipping \"\n",
        "715": "              + skipped + \" bytes; \" + toSkip + \" bytes expected\");\n",
        "717": "        n--;\n",
        "718": "      } else {\n",
        "719": "        n -= amt;\n"
    }
}