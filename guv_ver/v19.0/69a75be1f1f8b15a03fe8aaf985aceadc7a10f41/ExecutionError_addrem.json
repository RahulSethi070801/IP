{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "22": " * {@link Error} variant of {@link java.util.concurrent.ExecutionException}. As with {@code\n",
        "23": " * ExecutionException}, the error's {@linkplain #getCause() cause} comes from a failed task,\n",
        "24": " * possibly run in another thread. That cause should itself be an {@code Error}; if not, use {@code\n",
        "25": " * ExecutionException} or {@link UncheckedExecutionException}. This allows the client code to\n",
        "26": " * continue to distinguish between exceptions and errors, even when they come from other threads.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "24": " * {@link Error} variant of {@link java.util.concurrent.ExecutionException}. As\n",
        "25": " * with {@code ExecutionException}, the error's {@linkplain #getCause() cause}\n",
        "26": " * comes from a failed task, possibly run in another thread. That cause should\n",
        "27": " * itself be an {@code Error}; if not, use {@code ExecutionException} or {@link\n",
        "28": " * UncheckedExecutionException}. This allows the client code to continue to\n",
        "29": " * distinguish between exceptions and errors, even when they come from other\n",
        "30": " * threads.\n"
    }
}