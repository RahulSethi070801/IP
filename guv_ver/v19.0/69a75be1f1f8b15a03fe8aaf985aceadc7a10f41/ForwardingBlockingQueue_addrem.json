{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "24": " * A {@link BlockingQueue} which forwards all its method calls to another {@link BlockingQueue}.\n",
        "25": " * Subclasses should override one or more methods to modify the behavior of the backing collection\n",
        "26": " * as desired per the <a href=\"http://en.wikipedia.org/wiki/Decorator_pattern\">decorator\n",
        "27": " * pattern</a>.\n",
        "40": "  @Override\n",
        "41": "  protected abstract BlockingQueue<E> delegate();\n",
        "43": "  @Override\n",
        "44": "  public int drainTo(Collection<? super E> c, int maxElements) {\n",
        "48": "  @Override\n",
        "49": "  public int drainTo(Collection<? super E> c) {\n",
        "53": "  @Override\n",
        "54": "  public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException {\n",
        "58": "  @Override\n",
        "59": "  public E poll(long timeout, TimeUnit unit) throws InterruptedException {\n",
        "63": "  @Override\n",
        "64": "  public void put(E e) throws InterruptedException {\n",
        "68": "  @Override\n",
        "69": "  public int remainingCapacity() {\n",
        "73": "  @Override\n",
        "74": "  public E take() throws InterruptedException {\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "26": " * A {@link BlockingQueue} which forwards all its method calls to another\n",
        "27": " * {@link BlockingQueue}. Subclasses should override one or more methods to\n",
        "28": " * modify the behavior of the backing collection as desired per the <a\n",
        "29": " * href=\"http://en.wikipedia.org/wiki/Decorator_pattern\">decorator pattern</a>.\n",
        "42": "  @Override protected abstract BlockingQueue<E> delegate();\n",
        "44": "  @Override public int drainTo(\n",
        "45": "      Collection<? super E> c, int maxElements) {\n",
        "49": "  @Override public int drainTo(Collection<? super E> c) {\n",
        "53": "  @Override public boolean offer(E e, long timeout, TimeUnit unit)\n",
        "54": "      throws InterruptedException {\n",
        "58": "  @Override public E poll(long timeout, TimeUnit unit)\n",
        "59": "      throws InterruptedException {\n",
        "63": "  @Override public void put(E e) throws InterruptedException {\n",
        "67": "  @Override public int remainingCapacity() {\n",
        "71": "  @Override public E take() throws InterruptedException {\n"
    }
}