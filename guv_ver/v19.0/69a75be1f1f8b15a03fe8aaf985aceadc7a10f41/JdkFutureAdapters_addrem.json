{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "29": " * Utilities necessary for working with libraries that supply plain {@link Future} instances. Note\n",
        "30": " * that, whenver possible, it is strongly preferred to modify those libraries to return {@code\n",
        "31": " * ListenableFuture} directly.\n",
        "34": " * @since 10.0 (replacing {@code Futures.makeListenable}, which existed in 1.0)\n",
        "39": "   * Assigns a thread to the given {@link Future} to provide {@link ListenableFuture} functionality.\n",
        "41": "   * <p><b>Warning:</b> If the input future does not already implement {@code ListenableFuture}, the\n",
        "42": "   * returned future will emulate {@link ListenableFuture#addListener} by taking a thread from an\n",
        "43": "   * internal, unbounded pool at the first call to {@code addListener} and holding it until the\n",
        "44": "   * future is {@linkplain Future#isDone() done}.\n",
        "46": "   * <p>Prefer to create {@code ListenableFuture} instances with {@link SettableFuture}, {@link\n",
        "47": "   * MoreExecutors#listeningDecorator( java.util.concurrent.ExecutorService)}, {@link\n",
        "48": "   * ListenableFutureTask}, {@link AbstractFuture}, and other utilities over creating plain {@code\n",
        "49": "   * Future} instances to be upgraded to {@code ListenableFuture} after the fact.\n",
        "51": "  public static <V> ListenableFuture<V> listenInPoolThread(Future<V> future) {\n",
        "59": "   * Submits a blocking task for the given {@link Future} to provide {@link ListenableFuture}\n",
        "60": "   * functionality.\n",
        "62": "   * <p><b>Warning:</b> If the input future does not already implement {@code ListenableFuture}, the\n",
        "63": "   * returned future will emulate {@link ListenableFuture#addListener} by submitting a task to the\n",
        "64": "   * given executor at the first call to {@code addListener}. The task must be started by the\n",
        "65": "   * executor promptly, or else the returned {@code ListenableFuture} may fail to work.  The task's\n",
        "66": "   * execution consists of blocking until the input future is {@linkplain Future#isDone() done}, so\n",
        "67": "   * each call to this method may claim and hold a thread for an arbitrary length of time. Use of\n",
        "68": "   * bounded executors or other executors that may fail to execute a task promptly may result in\n",
        "69": "   * deadlocks.\n",
        "71": "   * <p>Prefer to create {@code ListenableFuture} instances with {@link SettableFuture}, {@link\n",
        "72": "   * MoreExecutors#listeningDecorator( java.util.concurrent.ExecutorService)}, {@link\n",
        "73": "   * ListenableFutureTask}, {@link AbstractFuture}, and other utilities over creating plain {@code\n",
        "74": "   * Future} instances to be upgraded to {@code ListenableFuture} after the fact.\n",
        "78": "  public static <V> ListenableFuture<V> listenInPoolThread(Future<V> future, Executor executor) {\n",
        "87": "   * An adapter to turn a {@link Future} into a {@link ListenableFuture}.  This will wait on the\n",
        "88": "   * future to finish, and when it completes, run the listeners.  This implementation will wait on\n",
        "89": "   * the source future indefinitely, so if the source future never completes, the adapter will never\n",
        "90": "   * complete either.\n",
        "92": "   * <p>If the delegate future is interrupted or throws an unexpected unchecked exception, the\n",
        "93": "   * listeners will not be invoked.\n",
        "111": "    // This allows us to only start up a thread waiting on the delegate future when the first\n",
        "112": "    // listener is added.\n",
        "136": "      // When a listener is first added, we run a task that will wait for the delegate to finish,\n",
        "137": "      // and when it is done will run the listeners.\n",
        "140": "          // If the delegate is already done, run the execution list immediately on the current\n",
        "141": "          // thread.\n",
        "147": "        adapterExecutor.execute(\n",
        "148": "            new Runnable() {\n",
        "149": "              @Override\n",
        "150": "              public void run() {\n",
        "151": "                try {\n",
        "152": "                  /*\n",
        "153": "                   * Threads from our private pool are never interrupted. Threads from a\n",
        "154": "                   * user-supplied executor might be, but... what can we do? This is another reason\n",
        "155": "                   * to return a proper ListenableFuture instead of using listenInPoolThread.\n",
        "156": "                   */\n",
        "157": "                  getUninterruptibly(delegate);\n",
        "158": "                } catch (Throwable e) {\n",
        "159": "                  // ExecutionException / CancellationException / RuntimeException / Error\n",
        "160": "                  // The task is presumably done, run the listeners.\n",
        "161": "                }\n",
        "162": "                executionList.execute();\n",
        "163": "              }\n",
        "164": "            });\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "31": " * Utilities necessary for working with libraries that supply plain {@link\n",
        "32": " * Future} instances. Note that, whenver possible, it is strongly preferred to\n",
        "33": " * modify those libraries to return {@code ListenableFuture} directly.\n",
        "36": " * @since 10.0 (replacing {@code Futures.makeListenable}, which\n",
        "37": " *     existed in 1.0)\n",
        "42": "   * Assigns a thread to the given {@link Future} to provide {@link\n",
        "43": "   * ListenableFuture} functionality.\n",
        "45": "   * <p><b>Warning:</b> If the input future does not already implement {@code\n",
        "46": "   * ListenableFuture}, the returned future will emulate {@link\n",
        "47": "   * ListenableFuture#addListener} by taking a thread from an internal,\n",
        "48": "   * unbounded pool at the first call to {@code addListener} and holding it\n",
        "49": "   * until the future is {@linkplain Future#isDone() done}.\n",
        "51": "   * <p>Prefer to create {@code ListenableFuture} instances with {@link\n",
        "52": "   * SettableFuture}, {@link MoreExecutors#listeningDecorator(\n",
        "53": "   * java.util.concurrent.ExecutorService)}, {@link ListenableFutureTask},\n",
        "54": "   * {@link AbstractFuture}, and other utilities over creating plain {@code\n",
        "55": "   * Future} instances to be upgraded to {@code ListenableFuture} after the\n",
        "56": "   * fact.\n",
        "58": "  public static <V> ListenableFuture<V> listenInPoolThread(\n",
        "59": "      Future<V> future) {\n",
        "67": "   * Submits a blocking task for the given {@link Future} to provide {@link\n",
        "68": "   * ListenableFuture} functionality.\n",
        "70": "   * <p><b>Warning:</b> If the input future does not already implement {@code\n",
        "71": "   * ListenableFuture}, the returned future will emulate {@link\n",
        "72": "   * ListenableFuture#addListener} by submitting a task to the given executor at\n",
        "73": "   * the first call to {@code addListener}. The task must be started by the\n",
        "74": "   * executor promptly, or else the returned {@code ListenableFuture} may fail\n",
        "75": "   * to work.  The task's execution consists of blocking until the input future\n",
        "76": "   * is {@linkplain Future#isDone() done}, so each call to this method may\n",
        "77": "   * claim and hold a thread for an arbitrary length of time. Use of bounded\n",
        "78": "   * executors or other executors that may fail to execute a task promptly may\n",
        "79": "   * result in deadlocks.\n",
        "81": "   * <p>Prefer to create {@code ListenableFuture} instances with {@link\n",
        "82": "   * SettableFuture}, {@link MoreExecutors#listeningDecorator(\n",
        "83": "   * java.util.concurrent.ExecutorService)}, {@link ListenableFutureTask},\n",
        "84": "   * {@link AbstractFuture}, and other utilities over creating plain {@code\n",
        "85": "   * Future} instances to be upgraded to {@code ListenableFuture} after the\n",
        "86": "   * fact.\n",
        "90": "  public static <V> ListenableFuture<V> listenInPoolThread(\n",
        "91": "      Future<V> future, Executor executor) {\n",
        "100": "   * An adapter to turn a {@link Future} into a {@link ListenableFuture}.  This\n",
        "101": "   * will wait on the future to finish, and when it completes, run the\n",
        "102": "   * listeners.  This implementation will wait on the source future\n",
        "103": "   * indefinitely, so if the source future never completes, the adapter will\n",
        "104": "   * never complete either.\n",
        "106": "   * <p>If the delegate future is interrupted or throws an unexpected unchecked\n",
        "107": "   * exception, the listeners will not be invoked.\n",
        "125": "    // This allows us to only start up a thread waiting on the delegate future\n",
        "126": "    // when the first listener is added.\n",
        "150": "      // When a listener is first added, we run a task that will wait for\n",
        "151": "      // the delegate to finish, and when it is done will run the listeners.\n",
        "154": "          // If the delegate is already done, run the execution list\n",
        "155": "          // immediately on the current thread.\n",
        "161": "        adapterExecutor.execute(new Runnable() {\n",
        "162": "          @Override\n",
        "163": "          public void run() {\n",
        "164": "            try {\n",
        "165": "              /*\n",
        "166": "               * Threads from our private pool are never interrupted. Threads\n",
        "167": "               * from a user-supplied executor might be, but... what can we do?\n",
        "168": "               * This is another reason to return a proper ListenableFuture\n",
        "169": "               * instead of using listenInPoolThread.\n",
        "170": "               */\n",
        "171": "              getUninterruptibly(delegate);\n",
        "172": "            } catch (Throwable e) {\n",
        "173": "              // ExecutionException / CancellationException / RuntimeException / Error\n",
        "174": "              // The task is presumably done, run the listeners.\n",
        "175": "            }\n",
        "176": "            executionList.execute();\n",
        "177": "          }\n",
        "178": "        });\n"
    }
}