{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "25": " * A delegating wrapper around a {@link ListenableFuture} that adds support for the {@link\n",
        "26": " * #checkedGet()} and {@link #checkedGet(long, TimeUnit)} methods.\n",
        "43": "   * Translates from an {@link InterruptedException}, {@link CancellationException} or {@link\n",
        "44": "   * ExecutionException} thrown by {@code get} to an exception of type {@code X} to be thrown by\n",
        "47": "   * <p>If {@code e} is an {@code InterruptedException}, the calling {@code checkedGet} method has\n",
        "48": "   * already restored the interrupt after catching the exception. If an implementation of {@link\n",
        "49": "   * #mapException(Exception)} wishes to swallow the interrupt, it can do so by calling {@link\n",
        "50": "   * Thread#interrupted()}.\n",
        "52": "   * <p>Subclasses may choose to throw, rather than return, a subclass of {@code RuntimeException}\n",
        "53": "   * to allow creating a CheckedFuture that throws both checked and unchecked exceptions.\n",
        "60": "   * <p>This implementation calls {@link #get()} and maps that method's standard exceptions to\n",
        "61": "   * instances of type {@code X} using {@link #mapException}.\n",
        "63": "   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this implementation will\n",
        "64": "   * set the current thread's interrupt status before calling {@code mapException}.\n",
        "66": "   * @throws X if {@link #get()} throws an {@link InterruptedException}, {@link\n",
        "67": "   *     CancellationException}, or {@link ExecutionException}\n",
        "86": "   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that method's standard\n",
        "87": "   * exceptions (excluding {@link TimeoutException}, which is propagated) to instances of type\n",
        "88": "   * {@code X} using {@link #mapException}.\n",
        "90": "   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this implementation will\n",
        "91": "   * set the current thread's interrupt status before calling {@code mapException}.\n",
        "93": "   * @throws X if {@link #get()} throws an {@link InterruptedException}, {@link\n",
        "94": "   *     CancellationException}, or {@link ExecutionException}\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "27": " * A delegating wrapper around a {@link ListenableFuture} that adds support for\n",
        "28": " * the {@link #checkedGet()} and {@link #checkedGet(long, TimeUnit)} methods.\n",
        "45": "   * Translates from an {@link InterruptedException},\n",
        "46": "   * {@link CancellationException} or {@link ExecutionException} thrown by\n",
        "47": "   * {@code get} to an exception of type {@code X} to be thrown by\n",
        "50": "   * <p>If {@code e} is an {@code InterruptedException}, the calling\n",
        "51": "   * {@code checkedGet} method has already restored the interrupt after catching\n",
        "52": "   * the exception. If an implementation of {@link #mapException(Exception)}\n",
        "53": "   * wishes to swallow the interrupt, it can do so by calling\n",
        "54": "   * {@link Thread#interrupted()}.\n",
        "56": "   * <p>Subclasses may choose to throw, rather than return, a subclass of\n",
        "57": "   * {@code RuntimeException} to allow creating a CheckedFuture that throws\n",
        "58": "   * both checked and unchecked exceptions.\n",
        "65": "   * <p>This implementation calls {@link #get()} and maps that method's standard\n",
        "66": "   * exceptions to instances of type {@code X} using {@link #mapException}.\n",
        "68": "   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this\n",
        "69": "   * implementation will set the current thread's interrupt status before\n",
        "70": "   * calling {@code mapException}.\n",
        "72": "   * @throws X if {@link #get()} throws an {@link InterruptedException},\n",
        "73": "   *         {@link CancellationException}, or {@link ExecutionException}\n",
        "92": "   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that\n",
        "93": "   * method's standard exceptions (excluding {@link TimeoutException}, which is\n",
        "94": "   * propagated) to instances of type {@code X} using {@link #mapException}.\n",
        "96": "   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this\n",
        "97": "   * implementation will set the current thread's interrupt status before\n",
        "98": "   * calling {@code mapException}.\n",
        "100": "   * @throws X if {@link #get()} throws an {@link InterruptedException},\n",
        "101": "   *         {@link CancellationException}, or {@link ExecutionException}\n",
        "102": "   * @throws TimeoutException {@inheritDoc}\n"
    }
}