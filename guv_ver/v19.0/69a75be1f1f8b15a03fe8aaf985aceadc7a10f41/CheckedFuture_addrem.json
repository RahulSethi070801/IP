{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "27": " * A {@code CheckedFuture} is a {@link ListenableFuture} that includes versions of the {@code get}\n",
        "28": " * methods that can throw a checked exception.  This makes it easier to create a future that\n",
        "29": " * executes logic which can throw an exception.\n",
        "31": " * <p><b>Warning:</b> We recommend against using {@code CheckedFuture} in new projects. {@code\n",
        "32": " * CheckedFuture} is difficult to build libraries atop. {@code CheckedFuture} ports of methods like\n",
        "33": " * {@link Futures#transformAsync} have historically had bugs, and some of these bugs are necessary,\n",
        "34": " * unavoidable consequences of the {@code CheckedFuture} API. Additionally, {@code CheckedFuture}\n",
        "35": " * encourages users to take exceptions from one thread and rethrow them in another, producing\n",
        "39": " * <p>Implementations of this interface must adapt the exceptions thrown by {@code Future#get()}:\n",
        "40": " * {@link CancellationException}, {@link ExecutionException} and {@link InterruptedException} into\n",
        "41": " * the type specified by the {@code X} type parameter.\n",
        "43": " * <p>This interface also extends the ListenableFuture interface to allow listeners to be added.\n",
        "44": " * This allows the future to be used as a normal {@link Future} or as an asynchronous callback\n",
        "45": " * mechanism as needed. This allows multiple callbacks to be registered for a particular task, and\n",
        "46": " * the future will guarantee execution of all listeners when the task completes.\n",
        "48": " * <p>For a simpler alternative to CheckedFuture, consider accessing Future values with {@link\n",
        "49": " * Futures#getChecked(Future, Class) Futures.getChecked()}.\n",
        "56": "public interface CheckedFuture<V, X extends Exception> extends ListenableFuture<V> {\n",
        "59": "   * Exception checking version of {@link Future#get()} that will translate {@link\n",
        "60": "   * InterruptedException}, {@link CancellationException} and {@link ExecutionException} into\n",
        "61": "   * application-specific exceptions.\n",
        "69": "   * Exception checking version of {@link Future#get(long, TimeUnit)} that will translate {@link\n",
        "70": "   * InterruptedException}, {@link CancellationException} and {@link ExecutionException} into\n",
        "71": "   * application-specific exceptions.  On timeout this method throws a normal {@link\n",
        "72": "   * TimeoutException}.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "29": " * A {@code CheckedFuture} is a {@link ListenableFuture} that includes versions\n",
        "30": " * of the {@code get} methods that can throw a checked exception.  This makes it\n",
        "31": " * easier to create a future that executes logic which can throw an exception.\n",
        "33": " * <p><b>Warning:</b> We recommend against using {@code CheckedFuture} in new\n",
        "34": " * projects. {@code CheckedFuture} is difficult to build libraries atop. {@code\n",
        "35": " * CheckedFuture} ports of methods like {@link Futures#transformAsync} have\n",
        "36": " * historically had bugs, and some of these bugs are necessary, unavoidable\n",
        "37": " * consequences of the {@code CheckedFuture} API. Additionally, {@code\n",
        "38": " * CheckedFuture} encourages users to take exceptions from one thread and\n",
        "39": " * rethrow them in another, producing confusing stack traces.\n",
        "43": " * <p>Implementations of this interface must adapt the exceptions thrown by\n",
        "44": " * {@code Future#get()}: {@link CancellationException},\n",
        "45": " * {@link ExecutionException} and {@link InterruptedException} into the type\n",
        "46": " * specified by the {@code X} type parameter.\n",
        "48": " * <p>This interface also extends the ListenableFuture interface to allow\n",
        "49": " * listeners to be added. This allows the future to be used as a normal\n",
        "50": " * {@link Future} or as an asynchronous callback mechanism as needed. This\n",
        "51": " * allows multiple callbacks to be registered for a particular task, and the\n",
        "52": " * future will guarantee execution of all listeners when the task completes.\n",
        "54": " * <p>For a simpler alternative to CheckedFuture, consider accessing Future\n",
        "55": " * values with {@link Futures#getChecked(Future, Class) Futures.getChecked()}.\n",
        "62": "public interface CheckedFuture<V, X extends Exception>\n",
        "63": "    extends ListenableFuture<V> {\n",
        "66": "   * Exception checking version of {@link Future#get()} that will translate\n",
        "67": "   * {@link InterruptedException}, {@link CancellationException} and\n",
        "68": "   * {@link ExecutionException} into application-specific exceptions.\n",
        "76": "   * Exception checking version of {@link Future#get(long, TimeUnit)} that will\n",
        "77": "   * translate {@link InterruptedException}, {@link CancellationException} and\n",
        "78": "   * {@link ExecutionException} into application-specific exceptions.  On\n",
        "79": "   * timeout this method throws a normal {@link TimeoutException}.\n"
    }
}