{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "26": " * A {@link Future} that accepts completion listeners.  Each listener has an associated executor,\n",
        "27": " * and it is invoked using this executor once the future's computation is {@linkplain\n",
        "28": " * Future#isDone() complete}.  If the computation has already completed when the listener is added,\n",
        "29": " * the listener will execute immediately.\n",
        "32": " * \"https://github.com/google/guava/wiki/ListenableFutureExplained\"> {@code ListenableFuture}</a>.\n",
        "36": " * <p>Most commonly, {@code ListenableFuture} is used as an input to another derived {@code Future},\n",
        "37": " * as in {@link Futures#allAsList(Iterable) Futures.allAsList}. Many such methods are impossible to\n",
        "38": " * implement efficiently without listener support.\n",
        "40": " * <p>It is possible to call {@link #addListener addListener} directly, but this is uncommon because\n",
        "41": " * the {@code Runnable} interface does not provide direct access to the {@code Future} result.\n",
        "42": " * (Users who want such access may prefer {@link Futures#addCallback Futures.addCallback}.) Still,\n",
        "43": " * direct {@code addListener} calls are occasionally useful:<pre>   {@code\n",
        "58": " * <p>Developers are encouraged to return {@code ListenableFuture} from their methods so that users\n",
        "59": " * can take advantages of the {@linkplain Futures utilities built atop the class}. The way that they\n",
        "60": " * will create {@code ListenableFuture} instances depends on how they currently create {@code\n",
        "61": " * Future} instances: <ul> <li>If they are returned from an {@code ExecutorService}, convert that\n",
        "63": " * MoreExecutors#listeningDecorator(ExecutorService) MoreExecutors.listeningDecorator}. (Custom\n",
        "64": " * executors may find it more convenient to use {@link ListenableFutureTask} directly.) <li>If they\n",
        "65": " * are manually filled in by a call to {@link FutureTask#set} or a similar method, create a {@link\n",
        "66": " * SettableFuture} instead. (Users with more complex needs may prefer {@link AbstractFuture}.) </ul>\n",
        "68": " * <p>Occasionally, an API will return a plain {@code Future} and it will be impossible to change\n",
        "69": " * the return type. For this case, we provide a more expensive workaround in {@code\n",
        "70": " * JdkFutureAdapters}. However, when possible, it is more efficient and reliable to create a {@code\n",
        "71": " * ListenableFuture} directly.\n",
        "80": "   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n",
        "81": "   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n",
        "82": "   * complete} or, if the computation is already complete, immediately.\n",
        "84": "   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n",
        "85": "   * this method is guaranteed to be called once the computation is complete.\n",
        "87": "   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n",
        "88": "   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n",
        "89": "   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n",
        "92": "   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n",
        "93": "   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n",
        "94": "   * listeners can cause problems, and these problems can be difficult to reproduce because they\n",
        "95": "   * depend on timing. For example:\n",
        "98": "   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n",
        "99": "   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n",
        "100": "   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n",
        "101": "   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n",
        "102": "   * progress of the whole system. It may even cause a deadlock.\n",
        "103": "   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n",
        "104": "   * directExecutor} listeners.\n",
        "107": "   * <p>This is the most general listener interface. For common operations performed using\n",
        "108": "   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n",
        "109": "   * Futures#addCallback addCallback()}.\n",
        "111": "   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n",
        "112": "   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n",
        "117": "   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n",
        "118": "   *     executor rejected it.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "28": " * A {@link Future} that accepts completion listeners.  Each listener has an\n",
        "29": " * associated executor, and it is invoked using this executor once the future's\n",
        "30": " * computation is {@linkplain Future#isDone() complete}.  If the computation has\n",
        "31": " * already completed when the listener is added, the listener will execute\n",
        "32": " * immediately.\n",
        "35": " * \"https://github.com/google/guava/wiki/ListenableFutureExplained\">\n",
        "36": " * {@code ListenableFuture}</a>.\n",
        "40": " * <p>Most commonly, {@code ListenableFuture} is used as an input to another\n",
        "41": " * derived {@code Future}, as in {@link Futures#allAsList(Iterable)\n",
        "42": " * Futures.allAsList}. Many such methods are impossible to implement efficiently\n",
        "43": " * without listener support.\n",
        "45": " * <p>It is possible to call {@link #addListener addListener} directly, but this\n",
        "46": " * is uncommon because the {@code Runnable} interface does not provide direct\n",
        "47": " * access to the {@code Future} result. (Users who want such access may prefer\n",
        "48": " * {@link Futures#addCallback Futures.addCallback}.) Still, direct {@code\n",
        "49": " * addListener} calls are occasionally useful:<pre>   {@code\n",
        "64": " * <p>Developers are encouraged to return {@code ListenableFuture} from their\n",
        "65": " * methods so that users can take advantages of the {@linkplain Futures\n",
        "66": " * utilities built atop the class}. The way that they will create {@code\n",
        "67": " * ListenableFuture} instances depends on how they currently create {@code\n",
        "68": " * Future} instances:\n",
        "69": " * <ul>\n",
        "70": " * <li>If they are returned from an {@code ExecutorService}, convert that\n",
        "72": " * MoreExecutors#listeningDecorator(ExecutorService)\n",
        "73": " * MoreExecutors.listeningDecorator}. (Custom executors may find it more\n",
        "74": " * convenient to use {@link ListenableFutureTask} directly.)\n",
        "75": " * <li>If they are manually filled in by a call to {@link FutureTask#set} or a\n",
        "76": " * similar method, create a {@link SettableFuture} instead. (Users with more\n",
        "77": " * complex needs may prefer {@link AbstractFuture}.)\n",
        "78": " * </ul>\n",
        "80": " * <p>Occasionally, an API will return a plain {@code Future} and it will be\n",
        "81": " * impossible to change the return type. For this case, we provide a more\n",
        "82": " * expensive workaround in {@code JdkFutureAdapters}. However, when possible, it\n",
        "83": " * is more efficient and reliable to create a {@code ListenableFuture} directly.\n",
        "92": "   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n",
        "93": "   * the given executor.  The listener will run when the {@code Future}'s\n",
        "94": "   * computation is {@linkplain Future#isDone() complete} or, if the computation\n",
        "95": "   * is already complete, immediately.\n",
        "97": "   * <p>There is no guaranteed ordering of execution of listeners, but any\n",
        "98": "   * listener added through this method is guaranteed to be called once the\n",
        "99": "   * computation is complete.\n",
        "101": "   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n",
        "102": "   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n",
        "103": "   * RejectedExecutionException} or an exception thrown by {@linkplain\n",
        "104": "   * MoreExecutors#directExecutor direct execution}) will be caught and\n",
        "107": "   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n",
        "108": "   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n",
        "109": "   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n",
        "110": "   * these problems can be difficult to reproduce because they depend on timing.\n",
        "111": "   * For example:\n",
        "114": "   * <li>The listener may be executed by the caller of {@code addListener}. That\n",
        "115": "   * caller may be a UI thread or other latency-sensitive thread. This can harm\n",
        "116": "   * UI responsiveness.\n",
        "117": "   * <li>The listener may be executed by the thread that completes this {@code\n",
        "118": "   * Future}. That thread may be an internal system thread such as an RPC\n",
        "119": "   * network thread. Blocking that thread may stall progress of the whole\n",
        "120": "   * system. It may even cause a deadlock.\n",
        "121": "   * <li>The listener may delay other listeners, even listeners that are not\n",
        "122": "   * themselves {@code directExecutor} listeners.\n",
        "125": "   * <p>This is the most general listener interface. For common operations\n",
        "126": "   * performed using listeners, see {@link Futures}. For a simplified but\n",
        "127": "   * general listener interface, see {@link Futures#addCallback addCallback()}.\n",
        "129": "   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n",
        "130": "   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n",
        "135": "   * @throws NullPointerException if the executor or listener was null\n",
        "136": "   * @throws RejectedExecutionException if we tried to execute the listener\n",
        "137": "   *         immediately but the executor rejected it.\n"
    }
}