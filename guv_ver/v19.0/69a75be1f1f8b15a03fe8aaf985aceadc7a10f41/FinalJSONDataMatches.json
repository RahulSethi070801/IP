[{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_1.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_1.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractScheduledService.java","addlines":[96,97,98,99,165,166,360,361,269,270,463,464,117,86,118,87],"dellines":[113,259,83,343,89,90,91,157,446],"addcode":["    @Override\n","    public String toString() {\n","  @Override\n","  public String toString() {\n","  @Override\n","  public String toString() {\n","        @Override\n","        public String toString() {\n","          return AbstractExecutionThreadService.this.toString();\n","        }\n","  @Override\n","  public String toString() {\n","    @Override\n","    public String toString() {\n","  @Override\n","  public String toString() {\n"],"delcode":["    @Override public String toString() {\n","  @Override public String toString() {\n","  @Override public String toString() {\n","    @Override public String toString() {\n","      return AbstractExecutionThreadService.this.toString();\n","    }\n","  @Override public String toString() {\n","    @Override public String toString() {\n","  @Override public String toString() {\n"],"methodSig":"public String toString()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_1.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_1.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_1.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractCheckedFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractCheckedFuture.java","addlines":[86,87,88,90,91,93,94],"dellines":[96,97,98,100,101,102,92,93,94],"addcode":["   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that method's standard\n","   * exceptions (excluding {@link TimeoutException}, which is propagated) to instances of type\n","   * {@code X} using {@link #mapException}.\n","   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this implementation will\n","   * set the current thread's interrupt status before calling {@code mapException}.\n","   * @throws X if {@link #get()} throws an {@link InterruptedException}, {@link\n","   *     CancellationException}, or {@link ExecutionException}\n"],"delcode":["   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that\n","   * method's standard exceptions (excluding {@link TimeoutException}, which is\n","   * propagated) to instances of type {@code X} using {@link #mapException}.\n","   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this\n","   * implementation will set the current thread's interrupt status before\n","   * calling {@code mapException}.\n","   * @throws X if {@link #get()} throws an {@link InterruptedException},\n","   *         {@link CancellationException}, or {@link ExecutionException}\n","   * @throws TimeoutException {@inheritDoc}\n"],"methodSig":"public V checkedGet(long timeout, TimeUnit unit) throws TimeoutException, X"},"id":5,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_2.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_2.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_2.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures","pathinproj":"guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java","addlines":[309,310,633,634],"dellines":[333,653,334,654],"addcode":["  public static <I, O> ListenableFuture<O> transform(\n","      ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function) {\n","  public static <I, O> ListenableFuture<O> transform(\n","      ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function) {\n"],"delcode":["  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n","      AsyncFunction<? super I, ? extends O> function) {\n","  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n","      AsyncFunction<? super I, ? extends O> function) {\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_2.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_2.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_2.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractCheckedFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractCheckedFuture.java","addlines":[86,87,88,90,91,93,94],"dellines":[96,97,98,100,101,102,92,93,94],"addcode":["   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that method's standard\n","   * exceptions (excluding {@link TimeoutException}, which is propagated) to instances of type\n","   * {@code X} using {@link #mapException}.\n","   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this implementation will\n","   * set the current thread's interrupt status before calling {@code mapException}.\n","   * @throws X if {@link #get()} throws an {@link InterruptedException}, {@link\n","   *     CancellationException}, or {@link ExecutionException}\n"],"delcode":["   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that\n","   * method's standard exceptions (excluding {@link TimeoutException}, which is\n","   * propagated) to instances of type {@code X} using {@link #mapException}.\n","   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this\n","   * implementation will set the current thread's interrupt status before\n","   * calling {@code mapException}.\n","   * @throws X if {@link #get()} throws an {@link InterruptedException},\n","   *         {@link CancellationException}, or {@link ExecutionException}\n","   * @throws TimeoutException {@inheritDoc}\n"],"methodSig":"public V checkedGet(long timeout, TimeUnit unit) throws TimeoutException, X"},"id":5,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_3.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_3.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_3.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures","pathinproj":"guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java","addlines":[355,356,679,680],"dellines":[383,703],"addcode":["  public static <I, O> ListenableFuture<O> transform(\n","      ListenableFuture<I> input,\n","  public static <I, O> ListenableFuture<O> transform(\n","      ListenableFuture<I> input,\n"],"delcode":["  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n","  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_3.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_3.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_3.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractCheckedFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractCheckedFuture.java","addlines":[86,87,88,90,91,93,94],"dellines":[96,97,98,100,101,102,92,93,94],"addcode":["   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that method's standard\n","   * exceptions (excluding {@link TimeoutException}, which is propagated) to instances of type\n","   * {@code X} using {@link #mapException}.\n","   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this implementation will\n","   * set the current thread's interrupt status before calling {@code mapException}.\n","   * @throws X if {@link #get()} throws an {@link InterruptedException}, {@link\n","   *     CancellationException}, or {@link ExecutionException}\n"],"delcode":["   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that\n","   * method's standard exceptions (excluding {@link TimeoutException}, which is\n","   * propagated) to instances of type {@code X} using {@link #mapException}.\n","   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this\n","   * implementation will set the current thread's interrupt status before\n","   * calling {@code mapException}.\n","   * @throws X if {@link #get()} throws an {@link InterruptedException},\n","   *         {@link CancellationException}, or {@link ExecutionException}\n","   * @throws TimeoutException {@inheritDoc}\n"],"methodSig":"public V checkedGet(long timeout, TimeUnit unit) throws TimeoutException, X"},"id":5,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_4.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_4.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_4.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_4.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFutureTask","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFutureTask.java","addlines":[62],"dellines":[68,69],"addcode":["  public static <V> ListenableFutureTask<V> create(Runnable runnable, @Nullable V result) {\n"],"delcode":["  public static <V> ListenableFutureTask<V> create(\n","      Runnable runnable, @Nullable V result) {\n"],"methodSig":"public static ListenableFutureTask<V> create(Runnable runnable, @Nullable V result)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_4.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_4.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_4.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_4.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractCheckedFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractCheckedFuture.java","addlines":[86,87,88,90,91,93,94],"dellines":[96,97,98,100,101,102,92,93,94],"addcode":["   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that method's standard\n","   * exceptions (excluding {@link TimeoutException}, which is propagated) to instances of type\n","   * {@code X} using {@link #mapException}.\n","   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this implementation will\n","   * set the current thread's interrupt status before calling {@code mapException}.\n","   * @throws X if {@link #get()} throws an {@link InterruptedException}, {@link\n","   *     CancellationException}, or {@link ExecutionException}\n"],"delcode":["   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that\n","   * method's standard exceptions (excluding {@link TimeoutException}, which is\n","   * propagated) to instances of type {@code X} using {@link #mapException}.\n","   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this\n","   * implementation will set the current thread's interrupt status before\n","   * calling {@code mapException}.\n","   * @throws X if {@link #get()} throws an {@link InterruptedException},\n","   *         {@link CancellationException}, or {@link ExecutionException}\n","   * @throws TimeoutException {@inheritDoc}\n"],"methodSig":"public V checkedGet(long timeout, TimeUnit unit) throws TimeoutException, X"},"id":5,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_5.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_5.txt","newdoc":" When a listener is first added, we run a task that will wait for the delegate to finish,\n and when it is done will run the listeners.\n If the delegate is already done, run the execution list immediately on the current\n thread.\n TODO(lukes): handle RejectedExecutionException\n\n                   * Threads from our private pool are never interrupted. Threads from a\n                   * user-supplied executor might be, but... what can we do? This is another reason\n                   * to return a proper ListenableFuture instead of using listenInPoolThread.\n                   \n ExecutionException / CancellationException / RuntimeException / Error\n The task is presumably done, run the listeners.\n","newJdoc":"","olddoc":" When a listener is first added, we run a task that will wait for\n the delegate to finish, and when it is done will run the listeners.\n If the delegate is already done, run the execution list\n immediately on the current thread.\n TODO(lukes): handle RejectedExecutionException\n\n               * Threads from our private pool are never interrupted. Threads\n               * from a user-supplied executor might be, but... what can we do?\n               * This is another reason to return a proper ListenableFuture\n               * instead of using listenInPoolThread.\n               \n ExecutionException / CancellationException / RuntimeException / Error\n The task is presumably done, run the listeners.\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/JdkFutureAdapters","pathinproj":"guava/src/com/google/common/util/concurrent/JdkFutureAdapters.java","addlines":[161,162,147,163,148,164,149,150,151,157,158],"dellines":[176,161,177,162,178,163,164,171,172,175],"addcode":["        adapterExecutor.execute(\n","            new Runnable() {\n","              @Override\n","              public void run() {\n","                try {\n","                  getUninterruptibly(delegate);\n","                } catch (Throwable e) {\n","                }\n","                executionList.execute();\n","              }\n","            });\n"],"delcode":["        adapterExecutor.execute(new Runnable() {\n","          @Override\n","          public void run() {\n","            try {\n","              getUninterruptibly(delegate);\n","            } catch (Throwable e) {\n","            }\n","            executionList.execute();\n","          }\n","        });\n"],"methodSig":"public void addListener(Runnable listener, Executor exec)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_5.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_5.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_5.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_5.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractCheckedFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractCheckedFuture.java","addlines":[86,87,88,90,91,93,94],"dellines":[96,97,98,100,101,102,92,93,94],"addcode":["   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that method's standard\n","   * exceptions (excluding {@link TimeoutException}, which is propagated) to instances of type\n","   * {@code X} using {@link #mapException}.\n","   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this implementation will\n","   * set the current thread's interrupt status before calling {@code mapException}.\n","   * @throws X if {@link #get()} throws an {@link InterruptedException}, {@link\n","   *     CancellationException}, or {@link ExecutionException}\n"],"delcode":["   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that\n","   * method's standard exceptions (excluding {@link TimeoutException}, which is\n","   * propagated) to instances of type {@code X} using {@link #mapException}.\n","   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this\n","   * implementation will set the current thread's interrupt status before\n","   * calling {@code mapException}.\n","   * @throws X if {@link #get()} throws an {@link InterruptedException},\n","   *         {@link CancellationException}, or {@link ExecutionException}\n","   * @throws TimeoutException {@inheritDoc}\n"],"methodSig":"public V checkedGet(long timeout, TimeUnit unit) throws TimeoutException, X"},"id":5,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_6.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_6.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[97,98],"dellines":[95],"addcode":["    @Override\n","    public final void addListener(Runnable listener, Executor executor) {\n"],"delcode":["    @Override public final void addListener(Runnable listener, Executor executor) {\n"],"methodSig":"public final void addListener(Runnable listener, Executor executor)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_6.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_6.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_6.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_6.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractCheckedFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractCheckedFuture.java","addlines":[86,87,88,90,91,93,94],"dellines":[96,97,98,100,101,102,92,93,94],"addcode":["   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that method's standard\n","   * exceptions (excluding {@link TimeoutException}, which is propagated) to instances of type\n","   * {@code X} using {@link #mapException}.\n","   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this implementation will\n","   * set the current thread's interrupt status before calling {@code mapException}.\n","   * @throws X if {@link #get()} throws an {@link InterruptedException}, {@link\n","   *     CancellationException}, or {@link ExecutionException}\n"],"delcode":["   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that\n","   * method's standard exceptions (excluding {@link TimeoutException}, which is\n","   * propagated) to instances of type {@code X} using {@link #mapException}.\n","   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this\n","   * implementation will set the current thread's interrupt status before\n","   * calling {@code mapException}.\n","   * @throws X if {@link #get()} throws an {@link InterruptedException},\n","   *         {@link CancellationException}, or {@link ExecutionException}\n","   * @throws TimeoutException {@inheritDoc}\n"],"methodSig":"public V checkedGet(long timeout, TimeUnit unit) throws TimeoutException, X"},"id":5,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_7.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_7.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_7.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_7.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractScheduledService.java","addlines":[183,135,184,136,378,379],"dellines":[128,358,172],"addcode":["  @Override\n","  public final void addListener(Listener listener, Executor executor) {\n","  @Override\n","  public final void addListener(Listener listener, Executor executor) {\n","  @Override\n","  public final void addListener(Listener listener, Executor executor) {\n"],"delcode":["  @Override public final void addListener(Listener listener, Executor executor) {\n","  @Override public final void addListener(Listener listener, Executor executor) {\n","  @Override public final void addListener(Listener listener, Executor executor) {\n"],"methodSig":"public final void addListener(Listener listener, Executor executor)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_7.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_7.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_7.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_7.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractCheckedFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractCheckedFuture.java","addlines":[86,87,88,90,91,93,94],"dellines":[96,97,98,100,101,102,92,93,94],"addcode":["   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that method's standard\n","   * exceptions (excluding {@link TimeoutException}, which is propagated) to instances of type\n","   * {@code X} using {@link #mapException}.\n","   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this implementation will\n","   * set the current thread's interrupt status before calling {@code mapException}.\n","   * @throws X if {@link #get()} throws an {@link InterruptedException}, {@link\n","   *     CancellationException}, or {@link ExecutionException}\n"],"delcode":["   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that\n","   * method's standard exceptions (excluding {@link TimeoutException}, which is\n","   * propagated) to instances of type {@code X} using {@link #mapException}.\n","   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this\n","   * implementation will set the current thread's interrupt status before\n","   * calling {@code mapException}.\n","   * @throws X if {@link #get()} throws an {@link InterruptedException},\n","   *         {@link CancellationException}, or {@link ExecutionException}\n","   * @throws TimeoutException {@inheritDoc}\n"],"methodSig":"public V checkedGet(long timeout, TimeUnit unit) throws TimeoutException, X"},"id":5,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_8.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_8.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Monitor","pathinproj":"guava/src/com/google/common/util/concurrent/Monitor.java","addlines":[1076],"dellines":[1079,1080],"addcode":["  private void await(Guard guard, boolean signalBeforeWaiting) throws InterruptedException {\n"],"delcode":["  private void await(Guard guard, boolean signalBeforeWaiting)\n","      throws InterruptedException {\n"],"methodSig":"private void await(Guard guard, boolean signalBeforeWaiting) throws InterruptedException"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_8.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_8.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_8.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_8.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractCheckedFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractCheckedFuture.java","addlines":[86,87,88,90,91,93,94],"dellines":[96,97,98,100,101,102,92,93,94],"addcode":["   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that method's standard\n","   * exceptions (excluding {@link TimeoutException}, which is propagated) to instances of type\n","   * {@code X} using {@link #mapException}.\n","   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this implementation will\n","   * set the current thread's interrupt status before calling {@code mapException}.\n","   * @throws X if {@link #get()} throws an {@link InterruptedException}, {@link\n","   *     CancellationException}, or {@link ExecutionException}\n"],"delcode":["   * <p>This implementation calls {@link #get(long, TimeUnit)} and maps that\n","   * method's standard exceptions (excluding {@link TimeoutException}, which is\n","   * propagated) to instances of type {@code X} using {@link #mapException}.\n","   * <p>In addition, if {@code get} throws an {@link InterruptedException}, this\n","   * implementation will set the current thread's interrupt status before\n","   * calling {@code mapException}.\n","   * @throws X if {@link #get()} throws an {@link InterruptedException},\n","   *         {@link CancellationException}, or {@link ExecutionException}\n","   * @throws TimeoutException {@inheritDoc}\n"],"methodSig":"public V checkedGet(long timeout, TimeUnit unit) throws TimeoutException, X"},"id":5,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_9.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_9.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractScheduledService.java","addlines":[96,97,98,99,165,166,360,361,269,270,463,464,117,86,118,87],"dellines":[113,259,83,343,89,90,91,157,446],"addcode":["    @Override\n","    public String toString() {\n","  @Override\n","  public String toString() {\n","  @Override\n","  public String toString() {\n","        @Override\n","        public String toString() {\n","          return AbstractExecutionThreadService.this.toString();\n","        }\n","  @Override\n","  public String toString() {\n","    @Override\n","    public String toString() {\n","  @Override\n","  public String toString() {\n"],"delcode":["    @Override public String toString() {\n","  @Override public String toString() {\n","  @Override public String toString() {\n","    @Override public String toString() {\n","      return AbstractExecutionThreadService.this.toString();\n","    }\n","  @Override public String toString() {\n","    @Override public String toString() {\n","  @Override public String toString() {\n"],"methodSig":"public String toString()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_9.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_9.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_9.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_9.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":5,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_10.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_10.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_10.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_10.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures","pathinproj":"guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java","addlines":[309,310,633,634],"dellines":[333,653,334,654],"addcode":["  public static <I, O> ListenableFuture<O> transform(\n","      ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function) {\n","  public static <I, O> ListenableFuture<O> transform(\n","      ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function) {\n"],"delcode":["  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n","      AsyncFunction<? super I, ? extends O> function) {\n","  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n","      AsyncFunction<? super I, ? extends O> function) {\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_10.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_10.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_10.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_10.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":5,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_11.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_11.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_11.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_11.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures","pathinproj":"guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java","addlines":[355,356,679,680],"dellines":[383,703],"addcode":["  public static <I, O> ListenableFuture<O> transform(\n","      ListenableFuture<I> input,\n","  public static <I, O> ListenableFuture<O> transform(\n","      ListenableFuture<I> input,\n"],"delcode":["  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n","  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_11.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_11.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_11.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_11.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":5,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_12.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_12.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_12.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_12.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFutureTask","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFutureTask.java","addlines":[62],"dellines":[68,69],"addcode":["  public static <V> ListenableFutureTask<V> create(Runnable runnable, @Nullable V result) {\n"],"delcode":["  public static <V> ListenableFutureTask<V> create(\n","      Runnable runnable, @Nullable V result) {\n"],"methodSig":"public static ListenableFutureTask<V> create(Runnable runnable, @Nullable V result)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_12.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_12.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_12.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_12.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":5,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_13.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_13.txt","newdoc":" When a listener is first added, we run a task that will wait for the delegate to finish,\n and when it is done will run the listeners.\n If the delegate is already done, run the execution list immediately on the current\n thread.\n TODO(lukes): handle RejectedExecutionException\n\n                   * Threads from our private pool are never interrupted. Threads from a\n                   * user-supplied executor might be, but... what can we do? This is another reason\n                   * to return a proper ListenableFuture instead of using listenInPoolThread.\n                   \n ExecutionException / CancellationException / RuntimeException / Error\n The task is presumably done, run the listeners.\n When a listener is first added, we run a task that will wait for the delegate to finish,\n and when it is done will run the listeners.\n If the delegate is already done, run the execution list immediately on the current\n thread.\n TODO(lukes): handle RejectedExecutionException\n\n                   * Threads from our private pool are never interrupted. Threads from a\n                   * user-supplied executor might be, but... what can we do? This is another reason\n                   * to return a proper ListenableFuture instead of using listenInPoolThread.\n                   \n ExecutionException / CancellationException / RuntimeException / Error\n The task is presumably done, run the listeners.\n","newJdoc":"","olddoc":" When a listener is first added, we run a task that will wait for\n the delegate to finish, and when it is done will run the listeners.\n If the delegate is already done, run the execution list\n immediately on the current thread.\n TODO(lukes): handle RejectedExecutionException\n\n               * Threads from our private pool are never interrupted. Threads\n               * from a user-supplied executor might be, but... what can we do?\n               * This is another reason to return a proper ListenableFuture\n               * instead of using listenInPoolThread.\n               \n ExecutionException / CancellationException / RuntimeException / Error\n The task is presumably done, run the listeners.\n When a listener is first added, we run a task that will wait for\n the delegate to finish, and when it is done will run the listeners.\n If the delegate is already done, run the execution list\n immediately on the current thread.\n TODO(lukes): handle RejectedExecutionException\n\n               * Threads from our private pool are never interrupted. Threads\n               * from a user-supplied executor might be, but... what can we do?\n               * This is another reason to return a proper ListenableFuture\n               * instead of using listenInPoolThread.\n               \n ExecutionException / CancellationException / RuntimeException / Error\n The task is presumably done, run the listeners.\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/JdkFutureAdapters","pathinproj":"guava/src/com/google/common/util/concurrent/JdkFutureAdapters.java","addlines":[161,162,147,163,148,164,149,150,151,157,158],"dellines":[176,161,177,162,178,163,164,171,172,175],"addcode":["        adapterExecutor.execute(\n","            new Runnable() {\n","              @Override\n","              public void run() {\n","                try {\n","                  getUninterruptibly(delegate);\n","                } catch (Throwable e) {\n","                }\n","                executionList.execute();\n","              }\n","            });\n"],"delcode":["        adapterExecutor.execute(new Runnable() {\n","          @Override\n","          public void run() {\n","            try {\n","              getUninterruptibly(delegate);\n","            } catch (Throwable e) {\n","            }\n","            executionList.execute();\n","          }\n","        });\n"],"methodSig":"public void addListener(Runnable listener, Executor exec)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_13.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_13.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_13.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_13.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":5,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_14.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_14.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[97,98],"dellines":[95],"addcode":["    @Override\n","    public final void addListener(Runnable listener, Executor executor) {\n"],"delcode":["    @Override public final void addListener(Runnable listener, Executor executor) {\n"],"methodSig":"public final void addListener(Runnable listener, Executor executor)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_14.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_14.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_14.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_14.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":5,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_15.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_15.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_15.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_15.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractScheduledService.java","addlines":[183,135,184,136,378,379],"dellines":[128,358,172],"addcode":["  @Override\n","  public final void addListener(Listener listener, Executor executor) {\n","  @Override\n","  public final void addListener(Listener listener, Executor executor) {\n","  @Override\n","  public final void addListener(Listener listener, Executor executor) {\n"],"delcode":["  @Override public final void addListener(Listener listener, Executor executor) {\n","  @Override public final void addListener(Listener listener, Executor executor) {\n","  @Override public final void addListener(Listener listener, Executor executor) {\n"],"methodSig":"public final void addListener(Listener listener, Executor executor)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_15.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_15.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_15.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_15.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":5,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_16.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_16.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Monitor","pathinproj":"guava/src/com/google/common/util/concurrent/Monitor.java","addlines":[1076],"dellines":[1079,1080],"addcode":["  private void await(Guard guard, boolean signalBeforeWaiting) throws InterruptedException {\n"],"delcode":["  private void await(Guard guard, boolean signalBeforeWaiting)\n","      throws InterruptedException {\n"],"methodSig":"private void await(Guard guard, boolean signalBeforeWaiting) throws InterruptedException"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_16.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_16.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_16.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_16.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":5,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_17.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_17.txt","newdoc":" TODO(kak): @CheckReturnValue\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_17.txt","olddoc":" TODO(kak): @CheckReturnValue\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_17.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2","pathinproj":"guava/src/com/google/common/util/concurrent/Futures.java","addlines":[483,484],"dellines":[506],"addcode":["      ListenableFuture<? extends V> input,\n","      Class<X> exceptionType,\n"],"delcode":["      ListenableFuture<? extends V> input, Class<X> exceptionType,\n"],"methodSig":"public static ListenableFuture<V> catchingAsync(ListenableFuture<? extends V> input, Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_17.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_17.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_17.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_17.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_18.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_18.txt","newdoc":" The only cases in which this Future should already be done are (a) if it was cancelled or\n (b) if an input failed and we propagated that immediately because of allMustSucceed.\n this.cancel propagates the cancellation to children; we use super.cancel to set our\n own state but let the input futures keep running as some of them may be used\n elsewhere.\n We always get the result so that we can have fail-fast, even if we don't collect\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_18.txt","olddoc":" The only cases in which this Future should already be done are (a) if\n it was cancelled or (b) if an input failed and we propagated that\n immediately because of allMustSucceed.\n this.cancel propagates the cancellation to children; we use super.cancel\n to set our own state but let the input futures keep running\n as some of them may be used elsewhere.\n We always get the result so that we can have fail-fast, even if we don't collect\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_18.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AggregateFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AggregateFuture.java","addlines":[211,212,216],"dellines":[209,213,214],"addcode":["      checkState(\n","          allMustSucceed || !isDone() || isCancelled(),\n","        checkState(future.isDone(), \"Tried to set value from future which is not done\");\n"],"delcode":["      checkState(allMustSucceed || !isDone() || isCancelled(),\n","        checkState(future.isDone(),\n","            \"Tried to set value from future which is not done\");\n"],"methodSig":"private void handleOneInputDone(int index, Future<? extends InputT> future)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_18.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_18.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_18.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_18.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_19.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_19.txt","newdoc":" Handle this specially so that we can include the failureCause, if there is one.\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_19.txt","olddoc":" Handle this specially so that we can include the failureCause, if there is one.\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_19.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractService.java","addlines":[325,326,327,329,330],"dellines":[310,311,313,314],"addcode":["        throw new IllegalStateException(\n","            \"Expected the service to be \" + expected + \", but the service has FAILED\",\n","            failureCause());\n","      throw new IllegalStateException(\n","          \"Expected the service to be \" + expected + \", but was \" + actual);\n"],"delcode":["        throw new IllegalStateException(\"Expected the service to be \" + expected \n","            + \", but the service has FAILED\", failureCause());\n","      throw new IllegalStateException(\"Expected the service to be \" + expected + \", but was \" \n","          + actual);\n"],"methodSig":"private void checkCurrentState(State expected)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_19.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_19.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_19.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_19.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_20.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_20.txt","newdoc":" atomic is now non-null; fall through\n value changed\n don't compareAndSet a zero\n atomic replaced\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_20.txt","olddoc":" atomic is now non-null; fall through\n value changed\n don't compareAndSet a zero\n atomic replaced\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_20.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[115,104,105],"dellines":[116,106],"addcode":["    outer:\n","    while (true) {\n","      while (true) {\n"],"delcode":["    outer: for (;;) {\n","      for (;;) {\n"],"methodSig":"public long addAndGet(K key, long delta)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_20.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_20.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_20.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_20.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_21.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_21.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_21.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_21.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractListeningExecutorService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractListeningExecutorService.java","addlines":[41,42],"dellines":[43],"addcode":["  @Override\n","  protected final <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value) {\n"],"delcode":["  @Override protected final <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value) {\n"],"methodSig":"protected final RunnableFuture<T> newTaskFor(Runnable runnable, T value)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_21.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_21.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_21.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_21.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_22.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_22.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingBlockingQueue","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingBlockingQueue.java","addlines":[64,63],"dellines":[63],"addcode":["  @Override\n","  public void put(E e) throws InterruptedException {\n"],"delcode":["  @Override public void put(E e) throws InterruptedException {\n"],"methodSig":"public void put(E e) throws InterruptedException"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_22.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_22.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_22.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_22.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_23.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_23.txt","newdoc":" This means that the state has changed since we were scheduled.  This implies\n that an execution of runOneIteration has thrown an exception and we have\n transitioned to a failed state, also this means that shutDown has already\n been called, so we do not want to call it again.\n","newJdoc":"","olddoc":" This means that the state has changed since we were scheduled.  This implies that\n an execution of runOneIteration has thrown an exception and we have transitioned\n to a failed state, also this means that shutDown has already been called, so we\n do not want to call it again.\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractScheduledService.java","addlines":[256,257,258,259,260,261,69,262,70,263,72,73,266,74,75,76,77,78,79,80,81,82,83,240,241,243,244,245,246,247,248,249,250,255],"dellines":[256,69,71,72,73,74,75,76,77,78,79,80,233,235,236,237,238,239,240,245,247,248,249,251,252,253,254,255],"addcode":["    @Override\n","    protected final void doStop() {\n","      executorService.execute(\n","          new Runnable() {\n","            @Override\n","            public void run() {\n","              try {\n","                lock.lock();\n","                try {\n","                  if (state() != State.STOPPING) {\n","                    return;\n","                  }\n","                  shutDown();\n","                } finally {\n","                  lock.unlock();\n","                }\n","                notifyStopped();\n","              } catch (Throwable t) {\n","                notifyFailed(t);\n","          });\n","    @Override\n","    protected final void doStop() {\n","          .execute(\n","              new Runnable() {\n","                @Override\n","                public void run() {\n","                  try {\n","                    shutDown();\n","                    notifyStopped();\n","                  } catch (Throwable t) {\n","                    notifyFailed(t);\n","                  }\n","                }\n","              });\n"],"delcode":["    @Override protected final void doStop() {\n","      executorService.execute(new Runnable() {\n","        @Override public void run() {\n","          try {\n","            lock.lock();\n","            try {\n","              if (state() != State.STOPPING) {\n","                return;\n","              shutDown();\n","            } finally {\n","              lock.unlock();\n","            notifyStopped();\n","          } catch (Throwable t) {\n","            notifyFailed(t);\n","          }\n","        }\n","      });\n","    @Override protected final void doStop() {\n","          .execute(new Runnable() {\n","            @Override public void run() {\n","              try {\n","                shutDown();\n","                notifyStopped();\n","              } catch (Throwable t) {\n","                notifyFailed(t);\n","              }\n","            }\n","          });\n"],"methodSig":"protected final void doStop()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_23.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_23.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_23.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_23.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_24.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_24.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_24.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_24.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Callables_2","pathinproj":"guava/src/com/google/common/util/concurrent/Callables.java","addlines":[64,65,59,60],"dellines":[66,61,62],"addcode":["  static <T> Callable<T> threadRenaming(\n","      final Callable<T> callable, final Supplier<String> nameSupplier) {\n","      @Override\n","      public T call() throws Exception {\n"],"delcode":["  static <T> Callable<T> threadRenaming(final Callable<T> callable,\n","      final Supplier<String> nameSupplier) {\n","      @Override public T call() throws Exception {\n"],"methodSig":" static Callable<T> threadRenaming(final Callable<T> callable, final Supplier<String> nameSupplier)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_24.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_24.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_24.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_24.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_25.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_25.txt","newdoc":" atomic is now non-null; fall through\n don't compareAndSet a zero\n atomic replaced\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_25.txt","olddoc":" atomic is now non-null; fall through\n don't compareAndSet a zero\n atomic replaced\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_25.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[371],"dellines":[368],"addcode":["    while (true) {\n"],"delcode":["    for (;;) {\n"],"methodSig":" long putIfAbsent(K key, long newValue)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_25.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_25.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_25.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_25.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_26.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_26.txt","newdoc":" Check interrupt status to get behavior consistent with fair case.\n Don't need to signal if timed out, but do if interrupted\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_26.txt","olddoc":" Check interrupt status to get behavior consistent with fair case.\n Don't need to signal if timed out, but do if interrupted\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_26.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Monitor","pathinproj":"guava/src/com/google/common/util/concurrent/Monitor.java","addlines":[496,497,516,517,518,519,520,521],"dellines":[500,519,520,521,522,523,524],"addcode":["    locked:\n","    {\n","      satisfied =\n","          guard.isSatisfied()\n","              || awaitNanos(\n","                  guard,\n","                  (startTime == 0L) ? timeoutNanos : remainingNanos(startTime, timeoutNanos),\n","                  reentrant);\n"],"delcode":[" locked: {\n","      satisfied = guard.isSatisfied()\n","          || awaitNanos(guard,\n","                        (startTime == 0L)\n","                            ? timeoutNanos\n","                            : remainingNanos(startTime, timeoutNanos),\n","                        reentrant);\n"],"methodSig":"public boolean enterWhen(Guard guard, long time, TimeUnit unit) throws InterruptedException"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_26.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_26.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_26.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_26.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_27.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_27.txt","newdoc":" re-read value, if we get here then we must have observed a TOMBSTONE while trying to add a\n we are on the stack, now wait for completion.\n Otherwise re-read and check doneness.  If we loop then it must have been a spurious\n Check interruption first, if we woke up due to interruption we need to honor that.\n wakeup\n re-read and loop.\n waiter.\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_27.txt","olddoc":" re-read value, if we get here then we must have observed a TOMBSTONE while trying to add a\n we are on the stack, now wait for completion.\n Otherwise re-read and check doneness.  If we loop then it must have been a spurious\n Check interruption first, if we woke up due to interruption we need to honor that.\n wakeup\n re-read and loop.\n waiter.\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_27.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[442,443],"dellines":[431],"addcode":["  @Override\n","  public V get() throws InterruptedException, ExecutionException {\n"],"delcode":["  @Override public V get() throws InterruptedException, ExecutionException {\n"],"methodSig":"public V get() throws InterruptedException, ExecutionException"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_27.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_27.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_27.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_27.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_28.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_28.txt","newdoc":" We have to examine the internal state of the snapshot here to properly handle the stop\n while starting case.\n We don't call listeners here because we already did that when we set the\n shutdownWhenStartupFinishes flag.\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_28.txt","olddoc":" We have to examine the internal state of the snapshot here to properly handle the stop \n while starting case.\n We don't call listeners here because we already did that when we set the \n shutdownWhenStartupFinishes flag.\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_28.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractService.java","addlines":[346,347,348],"dellines":[330,331],"addcode":["        IllegalStateException failure =\n","            new IllegalStateException(\n","                \"Cannot notifyStarted() when the service is \" + snapshot.state);\n"],"delcode":["        IllegalStateException failure = new IllegalStateException(\n","            \"Cannot notifyStarted() when the service is \" + snapshot.state);\n"],"methodSig":"protected final void notifyStarted()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_28.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_28.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_28.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_28.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_29.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_29.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_29.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_29.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractScheduledService.java","addlines":[208,160,209,161,403,404,222,223],"dellines":[194,150,216,380],"addcode":["  @Override\n","  public final Service stopAsync() {\n","  @Override\n","  public final Service stopAsync() {\n","  @Override\n","  public final Service stopAsync() {\n","  @Override\n","  public final Service stopAsync() {\n"],"delcode":["  @Override public final Service stopAsync() {\n","  @Override public final Service stopAsync() {\n","  @Override public final Service stopAsync() {\n","  @Override public final Service stopAsync() {\n"],"methodSig":"public final Service stopAsync()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_29.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_29.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_29.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_29.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_30.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_30.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingExecutorService","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingExecutorService.java","addlines":[69],"dellines":[73,74],"addcode":["  public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)\n"],"delcode":["  public <T> T invokeAny(\n","      Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)\n"],"methodSig":"public T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_30.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_30.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_30.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_30.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_31.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_31.txt","newdoc":" Must get a reference to the futures before we cancel, as they'll be cleared out.\n Cancel all the component futures.\n & is faster than the branch required for &&\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_31.txt","olddoc":" Must get a reference to the futures before we cancel, as they'll be cleared out.\n Cancel all the component futures.\n & is faster than the branch required for &&\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_31.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AggregateFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AggregateFuture.java","addlines":[56,57],"dellines":[58],"addcode":["  @Override\n","  public final boolean cancel(boolean mayInterruptIfRunning) {\n"],"delcode":["  @Override public final boolean cancel(boolean mayInterruptIfRunning) {\n"],"methodSig":"public final boolean cancel(boolean mayInterruptIfRunning)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_31.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_31.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_31.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_31.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_32.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_32.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[295,296,297,298,299,300,301,302],"dellines":[294,295,296,297,298,299],"addcode":["        Maps.transformValues(\n","            map,\n","            new Function<AtomicLong, Long>() {\n","              @Override\n","              public Long apply(AtomicLong atomic) {\n","                return atomic.get();\n","              }\n","            }));\n"],"delcode":["        Maps.transformValues(map, new Function<AtomicLong, Long>() {\n","          @Override\n","          public Long apply(AtomicLong atomic) {\n","            return atomic.get();\n","          }\n","        }));\n"],"methodSig":"private Map<K, Long> createAsMap()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_32.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_32.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_32.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_32.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_33.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_33.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_33.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_33.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2","pathinproj":"guava/src/com/google/common/util/concurrent/Futures.java","addlines":[1407],"dellines":[1474,1475],"addcode":["      Future<V> future, Class<X> exceptionClass, long timeout, TimeUnit unit) throws X {\n"],"delcode":["      Future<V> future, Class<X> exceptionClass, long timeout, TimeUnit unit)\n","      throws X {\n"],"methodSig":"public static V getChecked(Future<V> future, Class<X> exceptionClass, long timeout, TimeUnit unit) throws X"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_33.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_33.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_33.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_33.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_34.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_34.txt","newdoc":" ha ha\n","newJdoc":"","olddoc":" ha ha\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/FakeTimeLimiter","pathinproj":"guava/src/com/google/common/util/concurrent/FakeTimeLimiter.java","addlines":[36,37],"dellines":[39,40],"addcode":["  public <T> T newProxy(\n","      T target, Class<T> interfaceType, long timeoutDuration, TimeUnit timeoutUnit) {\n"],"delcode":["  public <T> T newProxy(T target, Class<T> interfaceType, long timeoutDuration,\n","      TimeUnit timeoutUnit) {\n"],"methodSig":"public T newProxy(T target, Class<T> interfaceType, long timeoutDuration, TimeUnit timeoutUnit)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_34.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_34.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_34.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_34.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_35.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_35.txt","newdoc":" Let go of the memory held by the running state\n","newJdoc":"","olddoc":" Let go of the memory held by the running state\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AggregateFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AggregateFuture.java","addlines":[48,47],"dellines":[50],"addcode":["  @Override\n","  final void done() {\n"],"delcode":["  @Override final void done() {\n"],"methodSig":" final void done()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_35.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_35.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_35.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_35.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_36.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_36.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingBlockingQueue","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingBlockingQueue.java","addlines":[73,74],"dellines":[71],"addcode":["  @Override\n","  public E take() throws InterruptedException {\n"],"delcode":["  @Override public E take() throws InterruptedException {\n"],"methodSig":"public E take() throws InterruptedException"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_36.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_36.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_36.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_36.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_37.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_37.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_37.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_37.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractListeningExecutorService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractListeningExecutorService.java","addlines":[48,47],"dellines":[48],"addcode":["  @Override\n","  protected final <T> RunnableFuture<T> newTaskFor(Callable<T> callable) {\n"],"delcode":["  @Override protected final <T> RunnableFuture<T> newTaskFor(Callable<T> callable) {\n"],"methodSig":"protected final RunnableFuture<T> newTaskFor(Callable<T> callable)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_37.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_37.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_37.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_37.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_38.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_38.txt","newdoc":" unlink guard from activeGuards\n help GC\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_38.txt","olddoc":" unlink guard from activeGuards\n help GC\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_38.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Monitor","pathinproj":"guava/src/com/google/common/util/concurrent/Monitor.java","addlines":[1055],"dellines":[1058],"addcode":["      for (Guard p = activeGuards, pred = null; ; pred = p, p = p.next) {\n"],"delcode":["      for (Guard p = activeGuards, pred = null;; pred = p, p = p.next) {\n"],"methodSig":"private void endWaitingFor(Guard guard)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_38.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_38.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_38.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_38.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_39.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_39.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_39.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_39.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractService.java","addlines":[592,593,590,591],"dellines":[568,569],"addcode":["      checkState(\n","          state == FAILED,\n","          \"failureCause() is only valid if the service has failed, service is %s\",\n","          state);\n"],"delcode":["      checkState(state == FAILED, \n","          \"failureCause() is only valid if the service has failed, service is %s\", state);\n"],"methodSig":" Throwable failureCause()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_39.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_39.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_39.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_39.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_40.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_40.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_40.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_40.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2","pathinproj":"guava/src/com/google/common/util/concurrent/Futures.java","addlines":[585,586,587,588,589],"dellines":[604,605],"addcode":["  public static <V> ListenableFuture<V> withTimeout(\n","      ListenableFuture<V> delegate,\n","      long time,\n","      TimeUnit unit,\n","      ScheduledExecutorService scheduledExecutor) {\n"],"delcode":["  public static <V> ListenableFuture<V> withTimeout(ListenableFuture<V> delegate,\n","      long time, TimeUnit unit, ScheduledExecutorService scheduledExecutor) {\n"],"methodSig":"public static ListenableFuture<V> withTimeout(ListenableFuture<V> delegate, long time, TimeUnit unit, ScheduledExecutorService scheduledExecutor)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_40.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_40.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_40.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_40.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_41.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_41.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_41.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_41.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/JdkFutureAdapters","pathinproj":"guava/src/com/google/common/util/concurrent/JdkFutureAdapters.java","addlines":[78],"dellines":[90,91],"addcode":["  public static <V> ListenableFuture<V> listenInPoolThread(Future<V> future, Executor executor) {\n"],"delcode":["  public static <V> ListenableFuture<V> listenInPoolThread(\n","      Future<V> future, Executor executor) {\n"],"methodSig":"public static ListenableFuture<V> listenInPoolThread(Future<V> future, Executor executor)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_41.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_41.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_41.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_41.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_42.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_42.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_42.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_42.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2","pathinproj":"guava/src/com/google/common/util/concurrent/Futures.java","addlines":[161,162],"dellines":[166,167],"addcode":["  public static <V, X extends Exception> CheckedFuture<V, X> immediateCheckedFuture(\n","      @Nullable V value) {\n"],"delcode":["  public static <V, X extends Exception> CheckedFuture<V, X>\n","      immediateCheckedFuture(@Nullable V value) {\n"],"methodSig":"public static CheckedFuture<V, X> immediateCheckedFuture(@Nullable V value)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_42.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_42.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_42.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_42.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_43.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_43.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_43.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_43.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2","pathinproj":"guava/src/com/google/common/util/concurrent/Futures.java","addlines":[371,372],"dellines":[397],"addcode":["      ListenableFuture<? extends V> input,\n","      Class<X> exceptionType,\n"],"delcode":["      ListenableFuture<? extends V> input, Class<X> exceptionType,\n"],"methodSig":"public static ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_43.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_43.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_43.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_43.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_44.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_44.txt","newdoc":" only remove after setting to zero, to avoid concurrent updates\n succeed even if the remove fails, since the value was already adjusted\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_44.txt","olddoc":" only remove after setting to zero, to avoid concurrent updates\n succeed even if the remove fails, since the value was already adjusted\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_44.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[242],"dellines":[241],"addcode":["    while (true) {\n"],"delcode":["    for (;;) {\n"],"methodSig":"public long remove(K key)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_44.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_44.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_44.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_44.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_45.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_45.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[97,98],"dellines":[95],"addcode":["    @Override\n","    public final void addListener(Runnable listener, Executor executor) {\n"],"delcode":["    @Override public final void addListener(Runnable listener, Executor executor) {\n"],"methodSig":"public final void addListener(Runnable listener, Executor executor)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_45.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_45.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_45.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_45.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_46.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_46.txt","newdoc":" atomic is now non-null; fall through\n value changed\n don't compareAndSet a zero\n atomic replaced\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_46.txt","olddoc":" atomic is now non-null; fall through\n value changed\n don't compareAndSet a zero\n atomic replaced\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_46.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[201,190,191],"dellines":[200,190],"addcode":["    outer:\n","    while (true) {\n","      while (true) {\n"],"delcode":["    outer: for (;;) {\n","      for (;;) {\n"],"methodSig":"public long put(K key, long newValue)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_46.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_46.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_46.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_46.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_47.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_47.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_47.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_47.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Monitor","pathinproj":"guava/src/com/google/common/util/concurrent/Monitor.java","addlines":[393],"dellines":[397],"addcode":["      for (long remainingNanos = timeoutNanos; ; ) {\n"],"delcode":["      for (long remainingNanos = timeoutNanos;;) {\n"],"methodSig":"public boolean enter(long time, TimeUnit unit)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_47.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_47.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_47.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_47.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_48.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_48.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_48.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_48.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListeningScheduledExecutorService","pathinproj":"guava/src/com/google/common/util/concurrent/ListeningScheduledExecutorService.java","addlines":[42],"dellines":[45,46],"addcode":["  <V> ListenableScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit);\n"],"delcode":["  <V> ListenableScheduledFuture<V> schedule(\n","      Callable<V> callable, long delay, TimeUnit unit);\n"],"methodSig":" ListenableScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_48.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_48.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_48.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_48.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_49.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_49.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingBlockingQueue","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingBlockingQueue.java","addlines":[48,49],"dellines":[49],"addcode":["  @Override\n","  public int drainTo(Collection<? super E> c) {\n"],"delcode":["  @Override public int drainTo(Collection<? super E> c) {\n"],"methodSig":"public int drainTo(Collection<? super E> c)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_49.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_49.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_49.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_49.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_50.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_50.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFuture.java","addlines":[39,40],"dellines":[44],"addcode":["  @Override\n","  protected abstract Future<V> delegate();\n"],"delcode":["  @Override protected abstract Future<V> delegate();\n"],"methodSig":"protected abstract Future<V> delegate()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_50.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_50.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_50.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_50.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_51.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_51.txt","newdoc":" Create a LockGraphNode for each enum value.\n Pre-populate all allowedPriorLocks with nodes of smaller ordinal.\n Pre-populate all disallowedPriorLocks with nodes of larger ordinal.\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_51.txt","olddoc":" Create a LockGraphNode for each enum value.\n Pre-populate all allowedPriorLocks with nodes of smaller ordinal.\n Pre-populate all disallowedPriorLocks with nodes of larger ordinal.\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_51.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory","pathinproj":"guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java","addlines":[337,324],"dellines":[344,345,330,331],"addcode":["    ArrayList<LockGraphNode> nodes = Lists.newArrayListWithCapacity(numKeys);\n","      nodes.get(i).checkAcquiredLocks(Policies.DISABLED, nodes.subList(i + 1, numKeys));\n"],"delcode":["    ArrayList<LockGraphNode> nodes =\n","        Lists.newArrayListWithCapacity(numKeys);\n","      nodes.get(i).checkAcquiredLocks(\n","          Policies.DISABLED, nodes.subList(i + 1, numKeys));\n"],"methodSig":" static Map<E, LockGraphNode> createNodes(Class<E> clazz)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_51.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_51.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_51.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_51.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_52.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_52.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractScheduledService.java","addlines":[96,97,98,99,165,166,360,361,269,270,463,464,117,86,118,87],"dellines":[113,259,83,343,89,90,91,157,446],"addcode":["    @Override\n","    public String toString() {\n","  @Override\n","  public String toString() {\n","  @Override\n","  public String toString() {\n","        @Override\n","        public String toString() {\n","          return AbstractExecutionThreadService.this.toString();\n","        }\n","  @Override\n","  public String toString() {\n","    @Override\n","    public String toString() {\n","  @Override\n","  public String toString() {\n"],"delcode":["    @Override public String toString() {\n","  @Override public String toString() {\n","  @Override public String toString() {\n","    @Override public String toString() {\n","      return AbstractExecutionThreadService.this.toString();\n","    }\n","  @Override public String toString() {\n","    @Override public String toString() {\n","  @Override public String toString() {\n"],"methodSig":"public String toString()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_52.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_52.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_52.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_52.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_53.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_53.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_53.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_53.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Callables_2","pathinproj":"guava/src/com/google/common/util/concurrent/Callables.java","addlines":[94,95],"dellines":[95],"addcode":["      @Override\n","      public void run() {\n"],"delcode":["      @Override public void run() {\n"],"methodSig":" static Runnable threadRenaming(final Runnable task, final Supplier<String> nameSupplier)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_53.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_53.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_53.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_53.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_54.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_54.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_54.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_54.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractIdleService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractIdleService.java","addlines":[110,111],"dellines":[107],"addcode":["      @Override\n","      public void execute(Runnable command) {\n"],"delcode":["      @Override public void execute(Runnable command) {\n"],"methodSig":"protected Executor executor()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_54.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_54.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_54.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_54.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_55.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_55.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_55.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_55.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory","pathinproj":"guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java","addlines":[262,263,264],"dellines":[263,264,265],"addcode":["    return policy == Policies.DISABLED\n","        ? new ReentrantLock(fair)\n","        : new CycleDetectingReentrantLock(new LockGraphNode(lockName), fair);\n"],"delcode":["    return policy == Policies.DISABLED ? new ReentrantLock(fair)\n","        : new CycleDetectingReentrantLock(\n","            new LockGraphNode(lockName), fair);\n"],"methodSig":"public ReentrantLock newReentrantLock(String lockName, boolean fair)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_55.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_55.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_55.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_55.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_56.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_56.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_56.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_56.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2","pathinproj":"guava/src/com/google/common/util/concurrent/Futures.java","addlines":[1261],"dellines":[1307,1308],"addcode":["  public static <V, X extends Exception> V get(Future<V> future, Class<X> exceptionClass) throws X {\n"],"delcode":["  public static <V, X extends Exception> V get(\n","      Future<V> future, Class<X> exceptionClass) throws X {\n"],"methodSig":"public static V get(Future<V> future, Class<X> exceptionClass) throws X"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_56.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_56.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_56.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_56.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_57.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_57.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingBlockingQueue","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingBlockingQueue.java","addlines":[43,44],"dellines":[44,45],"addcode":["  @Override\n","  public int drainTo(Collection<? super E> c, int maxElements) {\n"],"delcode":["  @Override public int drainTo(\n","      Collection<? super E> c, int maxElements) {\n"],"methodSig":"public int drainTo(Collection<? super E> c, int maxElements)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_57.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_57.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_57.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_57.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_58.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_58.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_58.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_58.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2","pathinproj":"guava/src/com/google/common/util/concurrent/Futures.java","addlines":[1358,1359],"dellines":[1419,1420],"addcode":["  public static <V, X extends Exception> V getChecked(Future<V> future, Class<X> exceptionClass)\n","      throws X {\n"],"delcode":["  public static <V, X extends Exception> V getChecked(\n","      Future<V> future, Class<X> exceptionClass) throws X {\n"],"methodSig":"public static V getChecked(Future<V> future, Class<X> exceptionClass) throws X"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_58.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_58.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_58.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_58.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_59.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_59.txt","newdoc":" Log it and keep going, bad runnable and/or executor.  Don't punish the other runnables if\n we're given a bad one.  We only catch RuntimeException because we want Errors to propagate\n up.\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_59.txt","olddoc":" Log it and keep going, bad runnable and/or executor.  Don't punish the other runnables if\n we're given a bad one.  We only catch RuntimeException because we want Errors to propagate\n up.\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_59.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ExecutionList","pathinproj":"guava/src/com/google/common/util/concurrent/ExecutionList.java","addlines":[147,148,149,150,827,828,829,830],"dellines":[816,148,149,815],"addcode":["      log.log(\n","          Level.SEVERE,\n","          \"RuntimeException while executing runnable \" + runnable + \" with executor \" + executor,\n","          e);\n","      log.log(\n","          Level.SEVERE,\n","          \"RuntimeException while executing runnable \" + runnable + \" with executor \" + executor,\n","          e);\n"],"delcode":["      log.log(Level.SEVERE, \"RuntimeException while executing runnable \"\n","          + runnable + \" with executor \" + executor, e);\n","      log.log(Level.SEVERE, \"RuntimeException while executing runnable \"\n","          + runnable + \" with executor \" + executor, e);\n"],"methodSig":"private static void executeListener(Runnable runnable, Executor executor)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_59.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_59.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_59.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_59.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_60.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_60.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_60.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_60.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractScheduledService.java","addlines":[154,155],"dellines":[157,158],"addcode":["    abstract Future<?> schedule(\n","        AbstractService service, ScheduledExecutorService executor, Runnable runnable);\n"],"delcode":["    abstract Future<?> schedule(AbstractService service, ScheduledExecutorService executor, \n","        Runnable runnable);\n"],"methodSig":" abstract Future<?> schedule(AbstractService service, ScheduledExecutorService executor, Runnable runnable)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_60.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_60.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_60.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_60.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_61.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_61.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[81,82],"dellines":[82],"addcode":["    @Override\n","    public final V get(long timeout, TimeUnit unit)\n"],"delcode":["    @Override public final V get(long timeout, TimeUnit unit)\n"],"methodSig":"public final V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_61.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_61.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_61.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_61.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_62.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_62.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_62.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_62.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractScheduledService.java","addlines":[259,260,217,169,218,170,412,413],"dellines":[388,202,252,158],"addcode":["  @Override\n","  public final void awaitRunning() {\n","  @Override\n","  public final void awaitRunning() {\n","  @Override\n","  public final void awaitRunning() {\n","  @Override\n","  public final void awaitRunning() {\n"],"delcode":["  @Override public final void awaitRunning() {\n","  @Override public final void awaitRunning() {\n","  @Override public final void awaitRunning() {\n","  @Override public final void awaitRunning() {\n"],"methodSig":"public final void awaitRunning()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_62.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_62.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_62.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_62.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_63.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_63.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory","pathinproj":"guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java","addlines":[825,987],"dellines":[1014,1015,845,846],"addcode":["    public boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException {\n","    public boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException {\n"],"delcode":["    public boolean tryLock(long timeout, TimeUnit unit)\n","        throws InterruptedException {\n","    public boolean tryLock(long timeout, TimeUnit unit)\n","        throws InterruptedException {\n"],"methodSig":"public boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_63.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_63.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_63.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_63.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_64.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_64.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractScheduledService.java","addlines":[176,128,370,371,175,127],"dellines":[165,121,351],"addcode":["  @Override\n","  public final State state() {\n","  @Override\n","  public final State state() {\n","  @Override\n","  public final State state() {\n"],"delcode":["  @Override public final State state() {\n","  @Override public final State state() {\n","  @Override public final State state() {\n"],"methodSig":"public final State state()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_64.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_64.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_64.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_64.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_65.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_65.txt","newdoc":" Already traversed this node.\n Found a path ending at the node!\n Recurse the edges.\n One of this node's allowedPriorLocks found a path. Prepend an\n ExampleStackTrace(preAcquiredLock, this) to the returned chain of\n ExampleStackTraces.\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_65.txt","olddoc":" Already traversed this node.\n Found a path ending at the node!\n Recurse the edges.\n One of this node's allowedPriorLocks found a path. Prepend an\n ExampleStackTrace(preAcquiredLock, this) to the returned chain of\n ExampleStackTraces.\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_65.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory","pathinproj":"guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java","addlines":[720,711,727],"dellines":[736,737,726,727,744,745],"addcode":["    private ExampleStackTrace findPathTo(LockGraphNode node, Set<LockGraphNode> seen) {\n","      for (Map.Entry<LockGraphNode, ExampleStackTrace> entry : allowedPriorLocks.entrySet()) {\n","          ExampleStackTrace path = new ExampleStackTrace(preAcquiredLock, this);\n"],"delcode":["    private ExampleStackTrace findPathTo(\n","        LockGraphNode node, Set<LockGraphNode> seen) {\n","      for (Map.Entry<LockGraphNode, ExampleStackTrace> entry :\n","               allowedPriorLocks.entrySet()) {\n","          ExampleStackTrace path =\n","              new ExampleStackTrace(preAcquiredLock, this);\n"],"methodSig":"private ExampleStackTrace findPathTo(LockGraphNode node, Set<LockGraphNode> seen)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_65.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_65.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_65.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_65.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_66.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_66.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractListeningExecutorService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractListeningExecutorService.java","addlines":[57,58],"dellines":[56],"addcode":["  @Override\n","  public <T> ListenableFuture<T> submit(Runnable task, @Nullable T result) {\n"],"delcode":["  @Override public <T> ListenableFuture<T> submit(Runnable task, @Nullable T result) {\n"],"methodSig":"public ListenableFuture<T> submit(Runnable task, @Nullable T result)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_66.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_66.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_66.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_66.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_67.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_67.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory","pathinproj":"guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java","addlines":[304,303],"dellines":[307,308,309,310],"addcode":["  private static Map<? extends Enum, LockGraphNode> getOrCreateNodes(Class<? extends Enum> clazz) {\n","    Map<? extends Enum, LockGraphNode> existing = lockGraphNodesPerType.get(clazz);\n"],"delcode":["  private static Map<? extends Enum, LockGraphNode> getOrCreateNodes(\n","      Class<? extends Enum> clazz) {\n","    Map<? extends Enum, LockGraphNode> existing =\n","        lockGraphNodesPerType.get(clazz);\n"],"methodSig":"private static Map<? extends Enum, LockGraphNode> getOrCreateNodes(Class<? extends Enum> clazz)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_67.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_67.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_67.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_67.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_68.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_68.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_68.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_68.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2","pathinproj":"guava/src/com/google/common/util/concurrent/Futures.java","addlines":[201,202],"dellines":[211,212],"addcode":["  public static <V, X extends Exception> CheckedFuture<V, X> immediateFailedCheckedFuture(\n","      X exception) {\n"],"delcode":["  public static <V, X extends Exception> CheckedFuture<V, X>\n","      immediateFailedCheckedFuture(X exception) {\n"],"methodSig":"public static CheckedFuture<V, X> immediateFailedCheckedFuture(X exception)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_68.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_68.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_68.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_68.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_69.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_69.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingExecutorService","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingExecutorService.java","addlines":[50,51],"dellines":[54,55],"addcode":["  public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)\n","      throws InterruptedException {\n"],"delcode":["  public <T> List<Future<T>> invokeAll(\n","      Collection<? extends Callable<T>> tasks) throws InterruptedException {\n"],"methodSig":"public List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) throws InterruptedException"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_69.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_69.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_69.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_69.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_70.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_70.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_70.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_70.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractScheduledService.java","addlines":[146,147,140,141],"dellines":[144,149,150,143],"addcode":["    public static Scheduler newFixedRateSchedule(\n","        final long initialDelay, final long period, final TimeUnit unit) {\n","        public Future<?> schedule(\n","            AbstractService service, ScheduledExecutorService executor, Runnable task) {\n"],"delcode":["    public static Scheduler newFixedRateSchedule(final long initialDelay, final long period, \n","        final TimeUnit unit) {\n","        public Future<?> schedule(AbstractService service, ScheduledExecutorService executor,\n","            Runnable task) {\n"],"methodSig":"public static Scheduler newFixedRateSchedule(final long initialDelay, final long period, final TimeUnit unit)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_70.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_70.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_70.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_70.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_71.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_71.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractScheduledService.java","addlines":[170,122,171,123,365,366],"dellines":[161,117,347],"addcode":["  @Override\n","  public final boolean isRunning() {\n","  @Override\n","  public final boolean isRunning() {\n","  @Override\n","  public final boolean isRunning() {\n"],"delcode":["  @Override public final boolean isRunning() {\n","  @Override public final boolean isRunning() {\n","  @Override public final boolean isRunning() {\n"],"methodSig":"public final boolean isRunning()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_71.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_71.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_71.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_71.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_72.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_72.txt","newdoc":" NOTE: If we ever want to use a custom executor here, have a look at CombinedFuture as we'll\n need to handle RejectedExecutionException\n Corner case: List is empty.\n We need fail fast, so we have to keep track of which future failed so we can propagate\n the exception immediately\n Register a listener on each Future in the list to update the state of this future.\n Note that if all the futures on the list are done prior to completing this loop, the last\n call to addListener() will callback to setOneValue(), transitively call our cleanup\n listener, and set this.futures to null.\n This is not actually a problem, since the foreach only needs this.futures to be non-null\n at the beginning of the loop.\n We'll only call the callback when all futures complete, regardless of whether some failed\n Hold off on calling setOneValue until all complete, so we can share the same listener\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_72.txt","olddoc":" NOTE: If we ever want to use a custom executor here, have a look at\n CombinedFuture as we'll need to handle RejectedExecutionException\n Corner case: List is empty.\n We need fail fast, so we have to keep track of which future failed so we can propagate\n the exception immediately\n Register a listener on each Future in the list to update\n the state of this future.\n Note that if all the futures on the list are done prior to completing\n this loop, the last call to addListener() will callback to\n setOneValue(), transitively call our cleanup listener, and set\n this.futures to null.\n This is not actually a problem, since the foreach only needs\n this.futures to be non-null at the beginning of the loop.\n We'll only call the callback when all futures complete, regardless of whether some failed\n Hold off on calling setOneValue until all complete, so we can share the same listener\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_72.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AggregateFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AggregateFuture.java","addlines":[144,145,146,147,148,149,150,151,152,141,142,143],"dellines":[144,145,146,147,148,149,140,141,142,143],"addcode":["          listenable.addListener(\n","              new Runnable() {\n","                @Override\n","                public void run() {\n","                  try {\n","                    handleOneInputDone(index, listenable);\n","                  } finally {\n","                    decrementCountAndMaybeComplete();\n","                  }\n","                }\n","              },\n","              directExecutor());\n"],"delcode":["          listenable.addListener(new Runnable() {\n","            @Override\n","            public void run() {\n","              try {\n","                handleOneInputDone(index, listenable);\n","              } finally {\n","                decrementCountAndMaybeComplete();\n","              }\n","            }\n","          }, directExecutor());\n"],"methodSig":"private void init()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_72.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_72.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_72.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_72.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_73.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_73.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_73.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_73.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractScheduledService.java","addlines":[183,135,184,136,378,379],"dellines":[128,358,172],"addcode":["  @Override\n","  public final void addListener(Listener listener, Executor executor) {\n","  @Override\n","  public final void addListener(Listener listener, Executor executor) {\n","  @Override\n","  public final void addListener(Listener listener, Executor executor) {\n"],"delcode":["  @Override public final void addListener(Listener listener, Executor executor) {\n","  @Override public final void addListener(Listener listener, Executor executor) {\n","  @Override public final void addListener(Listener listener, Executor executor) {\n"],"methodSig":"public final void addListener(Listener listener, Executor executor)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_73.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_73.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_73.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_73.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_74.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_74.txt","newdoc":" We check the internal state of the snapshot instead of state() directly so we don't allow\n notifyStopped() to be called while STARTING, even if stop() has already been called.\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_74.txt","olddoc":" We check the internal state of the snapshot instead of state() directly so we don't allow\n notifyStopped() to be called while STARTING, even if stop() has already been called.\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_74.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractService.java","addlines":[382,383],"dellines":[365,366],"addcode":["        IllegalStateException failure =\n","            new IllegalStateException(\"Cannot notifyStopped() when the service is \" + previous);\n"],"delcode":["        IllegalStateException failure = new IllegalStateException(\n","            \"Cannot notifyStopped() when the service is \" + previous);\n"],"methodSig":"protected final void notifyStopped()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_74.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_74.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_74.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_74.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_75.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_75.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[76,77],"dellines":[78],"addcode":["    @Override\n","    public final V get() throws InterruptedException, ExecutionException {\n"],"delcode":["    @Override public final V get() throws InterruptedException, ExecutionException {\n"],"methodSig":"public final V get() throws InterruptedException, ExecutionException"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_75.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_75.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_75.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_75.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_76.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_76.txt","newdoc":" No need to signal if timed out\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_76.txt","olddoc":" No need to signal if timed out\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_76.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Monitor","pathinproj":"guava/src/com/google/common/util/concurrent/Monitor.java","addlines":[556],"dellines":[559],"addcode":["        for (long remainingNanos = timeoutNanos; ; ) {\n"],"delcode":["        for (long remainingNanos = timeoutNanos;;) {\n"],"methodSig":"public boolean enterWhenUninterruptibly(Guard guard, long time, TimeUnit unit)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_76.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_76.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_76.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_76.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_77.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_77.txt","newdoc":" TODO(kak): @CheckReturnValue\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_77.txt","olddoc":" TODO(kak): @CheckReturnValue\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_77.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2","pathinproj":"guava/src/com/google/common/util/concurrent/Futures.java","addlines":[549,550,551,552],"dellines":[571,572],"addcode":["      ListenableFuture<? extends V> input,\n","      Class<X> exceptionType,\n","      AsyncFunction<? super X, ? extends V> fallback,\n","      Executor executor) {\n"],"delcode":["      ListenableFuture<? extends V> input, Class<X> exceptionType,\n","      AsyncFunction<? super X, ? extends V> fallback, Executor executor) {\n"],"methodSig":"public static ListenableFuture<V> catchingAsync(ListenableFuture<? extends V> input, Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_77.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_77.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_77.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_77.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_78.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_78.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[976,975],"dellines":[958],"addcode":["    @Override\n","    void putNext(Waiter waiter, Waiter next) {\n"],"delcode":["    @Override void putNext(Waiter waiter, Waiter next) {\n"],"methodSig":" void putNext(Waiter waiter, Waiter next)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_78.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_78.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_78.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_78.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_79.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_79.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_79.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_79.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractScheduledService.java","addlines":[192,144,386,387,191,143],"dellines":[179,135,365],"addcode":["  @Override\n","  public final Throwable failureCause() {\n","  @Override\n","  public final Throwable failureCause() {\n","  @Override\n","  public final Throwable failureCause() {\n"],"delcode":["  @Override public final Throwable failureCause() {\n","  @Override public final Throwable failureCause() {\n","  @Override public final Throwable failureCause() {\n"],"methodSig":"public final Throwable failureCause()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_79.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_79.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_79.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_79.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_80.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_80.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_80.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_80.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2","pathinproj":"guava/src/com/google/common/util/concurrent/Futures.java","addlines":[417,418,419,420],"dellines":[442,443],"addcode":["      ListenableFuture<? extends V> input,\n","      Class<X> exceptionType,\n","      Function<? super X, ? extends V> fallback,\n","      Executor executor) {\n"],"delcode":["      ListenableFuture<? extends V> input, Class<X> exceptionType,\n","      Function<? super X, ? extends V> fallback, Executor executor) {\n"],"methodSig":"public static ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_80.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_80.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_80.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_80.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_81.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_81.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[970,971],"dellines":[954],"addcode":["    @Override\n","    void putThread(Waiter waiter, Thread thread) {\n"],"delcode":["    @Override void putThread(Waiter waiter, Thread thread) {\n"],"methodSig":" void putThread(Waiter waiter, Thread thread)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_81.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_81.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_81.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_81.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_82.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_82.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingBlockingQueue","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingBlockingQueue.java","addlines":[53,54],"dellines":[53,54],"addcode":["  @Override\n","  public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException {\n"],"delcode":["  @Override public boolean offer(E e, long timeout, TimeUnit unit)\n","      throws InterruptedException {\n"],"methodSig":"public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_82.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_82.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_82.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_82.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_83.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_83.txt","newdoc":" The future has already been set to something.  If it is cancellation we should cancel the\n the listener is responsible for calling completeWithFuture, directExecutor is appropriate\n since all we are doing is unpacking a completed future which should be fast.\n addListener has thrown an exception!  SetFuture.run can't throw any exceptions so this\n must have been caused by addListener itself.  The most likely explanation is a\n misconfigured mock.  Try to switch to Failure.\n Note: The only way this CAS could fail is if cancel() has raced with us. That is ok.\n we lost the cas, fall through and maybe cancel\n incoming future.\n we don't care if it fails, this is best-effort.\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_83.txt","olddoc":" The future has already been set to something.  If it is cancellation we should cancel the\n the listener is responsible for calling completeWithFuture, directExecutor is appropriate\n since all we are doing is unpacking a completed future which should be fast.\n addListener has thrown an exception!  SetFuture.run can't throw any exceptions so this\n must have been caused by addListener itself.  The most likely explanation is a\n misconfigured mock.  Try to switch to Failure.\n Note: The only way this CAS could fail is if cancel() has raced with us. That is ok.\n we lost the cas, fall through and maybe cancel\n incoming future.\n we don't care if it fails, this is best-effort.\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_83.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[665,666],"dellines":[654],"addcode":["  @Beta\n","  protected boolean setFuture(ListenableFuture<? extends V> future) {\n"],"delcode":["  @Beta protected boolean setFuture(ListenableFuture<? extends V> future) {\n"],"methodSig":"protected boolean setFuture(ListenableFuture<? extends V> future)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_83.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_83.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_83.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_83.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_84.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_84.txt","newdoc":" A CLQ may be overkill here.  We could save some pointers/memory by synchronizing on an\n Using SerializingExecutor here will ensure that each CompletionOrderListener executes\n atomically and therefore that each returned future is guaranteed to be in completion order.\n N.B. there are some cases where the use of this executor could have possibly surprising\n effects when input futures finish at approximately the same time _and_ the output futures\n have directExecutor listeners. In this situation, the listeners may end up running on a\n different thread than if they were attached to the corresponding input future.  We believe\n this to be a negligible cost since:\n 1. Using the directExecutor implies that your callback is safe to run on any thread.\n 2. This would likely only be noticeable if you were doing something expensive or blocking on\n ArrayDeque\n    a directExecutor listener on one of the output futures which is an antipattern anyway.\n Must make sure to add the delegate to the queue first in case the future is already done\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_84.txt","olddoc":" A CLQ may be overkill here.  We could save some pointers/memory by synchronizing on an\n Using SerializingExecutor here will ensure that each CompletionOrderListener executes\n atomically and therefore that each returned future is guaranteed to be in completion order.\n N.B. there are some cases where the use of this executor could have possibly surprising\n effects when input futures finish at approximately the same time _and_ the output futures\n have directExecutor listeners. In this situation, the listeners may end up running on a\n different thread than if they were attached to the corresponding input future.  We believe\n this to be a negligible cost since:\n 1. Using the directExecutor implies that your callback is safe to run on any thread.\n 2. This would likely only be noticeable if you were doing something expensive or blocking on\n ArrayDeque\n    a directExecutor listener on one of the output futures which is an antipattern anyway.\n Must make sure to add the delegate to the queue first in case the future is already done\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_84.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2","pathinproj":"guava/src/com/google/common/util/concurrent/Futures.java","addlines":[1104,1105,1106,1107,1108,1109,1110,1086,1103],"dellines":[1127,1128,1145,1146,1147,1148,1149],"addcode":["    final ConcurrentLinkedQueue<SettableFuture<T>> delegates = Queues.newConcurrentLinkedQueue();\n","      future.addListener(\n","          new Runnable() {\n","            @Override\n","            public void run() {\n","              delegates.remove().setFuture(future);\n","            }\n","          },\n","          executor);\n"],"delcode":["    final ConcurrentLinkedQueue<SettableFuture<T>> delegates =\n","        Queues.newConcurrentLinkedQueue();\n","      future.addListener(new Runnable() {\n","        @Override public void run() {\n","          delegates.remove().setFuture(future);\n","        }\n","      }, executor);\n"],"methodSig":"public static ImmutableList<ListenableFuture<T>> inCompletionOrder(Iterable<? extends ListenableFuture<? extends T>> futures)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_84.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_84.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_84.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_84.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_85.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_85.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractListeningExecutorService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractListeningExecutorService.java","addlines":[52,53],"dellines":[52],"addcode":["  @Override\n","  public ListenableFuture<?> submit(Runnable task) {\n"],"delcode":["  @Override public ListenableFuture<?> submit(Runnable task) {\n"],"methodSig":"public ListenableFuture<?> submit(Runnable task)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_85.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_85.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_85.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_85.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_86.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_86.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_86.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_86.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Monitor","pathinproj":"guava/src/com/google/common/util/concurrent/Monitor.java","addlines":[925,926,927],"dellines":[928,929,930],"addcode":["    return (timeoutNanos <= 0L)\n","        ? 0L\n","        : (timeoutNanos > (Long.MAX_VALUE / 4) * 3) ? (Long.MAX_VALUE / 4) * 3 : timeoutNanos;\n"],"delcode":["    return (timeoutNanos <= 0L) ? 0L\n","        : (timeoutNanos > (Long.MAX_VALUE / 4) * 3) ? (Long.MAX_VALUE / 4) * 3\n","        : timeoutNanos;\n"],"methodSig":"private static long toSafeNanos(long time, TimeUnit unit)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_86.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_86.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_86.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_86.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_87.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_87.txt","newdoc":" fooled you\n","newJdoc":"","olddoc":" fooled you\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/FakeTimeLimiter","pathinproj":"guava/src/com/google/common/util/concurrent/FakeTimeLimiter.java","addlines":[45,46,47],"dellines":[48,49],"addcode":["  public <T> T callWithTimeout(\n","      Callable<T> callable, long timeoutDuration, TimeUnit timeoutUnit, boolean amInterruptible)\n","      throws Exception {\n"],"delcode":["  public <T> T callWithTimeout(Callable<T> callable, long timeoutDuration,\n","      TimeUnit timeoutUnit, boolean amInterruptible) throws Exception {\n"],"methodSig":"public T callWithTimeout(Callable<T> callable, long timeoutDuration, TimeUnit timeoutUnit, boolean amInterruptible) throws Exception"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_87.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_87.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_87.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_87.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_88.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_88.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_88.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_88.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractScheduledService.java","addlines":[233,185,234,186,428,429,286,287],"dellines":[402,277,216,172],"addcode":["  @Override\n","  public final void awaitTerminated() {\n","  @Override\n","  public final void awaitTerminated() {\n","  @Override\n","  public final void awaitTerminated() {\n","  @Override\n","  public final void awaitTerminated() {\n"],"delcode":["  @Override public final void awaitTerminated() {\n","  @Override public final void awaitTerminated() {\n","  @Override public final void awaitTerminated() {\n","  @Override public final void awaitTerminated() {\n"],"methodSig":"public final void awaitTerminated()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_88.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_88.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_88.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_88.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_89.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_89.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Monitor","pathinproj":"guava/src/com/google/common/util/concurrent/Monitor.java","addlines":[1076],"dellines":[1079,1080],"addcode":["  private void await(Guard guard, boolean signalBeforeWaiting) throws InterruptedException {\n"],"delcode":["  private void await(Guard guard, boolean signalBeforeWaiting)\n","      throws InterruptedException {\n"],"methodSig":"private void await(Guard guard, boolean signalBeforeWaiting) throws InterruptedException"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_89.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_89.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_89.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_89.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_90.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_90.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractService.java","addlines":[504],"dellines":[486],"addcode":["    switch (from) {\n"],"delcode":["    switch(from) {\n"],"methodSig":"private void terminated(final State from)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_90.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_90.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_90.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_90.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_91.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_91.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_91.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_91.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[564],"dellines":[552,553],"addcode":["  protected void interruptTask() {}\n"],"delcode":["  protected void interruptTask() {\n","  }\n"],"methodSig":"protected void interruptTask()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_91.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_91.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_91.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_91.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_92.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_92.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_92.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_92.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFutureTask","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFutureTask.java","addlines":[62],"dellines":[68,69],"addcode":["  public static <V> ListenableFutureTask<V> create(Runnable runnable, @Nullable V result) {\n"],"delcode":["  public static <V> ListenableFutureTask<V> create(\n","      Runnable runnable, @Nullable V result) {\n"],"methodSig":"public static ListenableFutureTask<V> create(Runnable runnable, @Nullable V result)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_92.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_92.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_92.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_92.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_93.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_93.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingBlockingQueue","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingBlockingQueue.java","addlines":[40,41],"dellines":[42],"addcode":["  @Override\n","  protected abstract BlockingQueue<E> delegate();\n"],"delcode":["  @Override protected abstract BlockingQueue<E> delegate();\n"],"methodSig":"protected abstract BlockingQueue<E> delegate()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_93.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_93.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_93.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_93.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_94.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_94.txt","newdoc":" Try to delay allocating the exception.  At this point we may still lose the CAS, but it is\n certainly less likely.\n TODO(lukes): this exception actually makes cancellation significantly more expensive :(\n I wonder if we should consider removing it or providing a mechanism to not do it.\n obj cannot be null at this point, because value can only change from null to non-null. So\n if value changed (and it did since we lost the CAS), then it cannot be null.\n We call interuptTask before calling complete(), first which is consistent with\n FutureTask\n propagate cancellation to the future set in setfuture, this is racy, and we don't\n care if we are successful or not.\n obj changed, reread\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_94.txt","olddoc":" Try to delay allocating the exception.  At this point we may still lose the CAS, but it is\n certainly less likely.\n TODO(lukes): this exception actually makes cancellation significantly more expensive :(\n I wonder if we should consider removing it or providing a mechanism to not do it.\n obj cannot be null at this point, because value can only change from null to non-null. So\n if value changed (and it did since we lost the CAS), then it cannot be null.\n We call interuptTask before calling complete(), first which is consistent with\n FutureTask\n propagate cancellation to the future set in setfuture, this is racy, and we don't\n care if we are successful or not.\n obj changed, reread\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_94.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[528,529,530,527],"dellines":[515,516,517],"addcode":["      Throwable cause =\n","          GENERATE_CANCELLATION_CAUSES\n","              ? new CancellationException(\"Future.cancel() was called.\")\n","              : null;\n"],"delcode":["      Throwable cause = GENERATE_CANCELLATION_CAUSES\n","          ? new CancellationException(\"Future.cancel() was called.\")\n","          : null;\n"],"methodSig":"public boolean cancel(boolean mayInterruptIfRunning)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_94.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_94.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_94.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_94.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_95.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_95.txt","newdoc":" Some other future failed or has been cancelled, causing this one to also be cancelled or\n have an exception set. This should only happen if allMustSucceed is true or if the output\n itself has been cancelled.\n","newJdoc":"","olddoc":" Some other future failed or has been cancelled, causing this one to\n also be cancelled or have an exception set. This should only happen\n if allMustSucceed is true or if the output itself has been\n cancelled.\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CollectionFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/CollectionFuture.java","addlines":[68,69],"dellines":[69,70],"addcode":["        checkState(\n","            allMustSucceed || isCancelled(), \"Future was done before all dependencies completed\");\n","        checkState(\n","            allMustSucceed || isCancelled(), \"Future was done before all dependencies completed\");\n"],"delcode":["        checkState(allMustSucceed || isCancelled(),\n","            \"Future was done before all dependencies completed\");\n","        checkState(allMustSucceed || isCancelled(),\n","            \"Future was done before all dependencies completed\");\n"],"methodSig":" final void collectOneValue(boolean allMustSucceed, int index, @Nullable V returnValue)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_95.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_95.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_95.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_95.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_96.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_96.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractScheduledService.java","addlines":[566,567],"dellines":[538,539],"addcode":["    final Future<?> schedule(\n","        AbstractService service, ScheduledExecutorService executor, Runnable runnable) {\n"],"delcode":["    final Future<?> schedule(AbstractService service, ScheduledExecutorService executor, \n","        Runnable runnable) {\n"],"methodSig":" final Future<?> schedule(AbstractService service, ScheduledExecutorService executor, Runnable runnable)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_96.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_96.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_96.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_96.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_97.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_97.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_97.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_97.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Monitor","pathinproj":"guava/src/com/google/common/util/concurrent/Monitor.java","addlines":[795],"dellines":[798],"addcode":["      for (long remainingNanos = timeoutNanos; ; ) {\n"],"delcode":["      for (long remainingNanos = timeoutNanos;;) {\n"],"methodSig":"public boolean waitForUninterruptibly(Guard guard, long time, TimeUnit unit)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_97.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_97.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_97.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_97.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_98.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_98.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[980,981],"dellines":[962],"addcode":["    @Override\n","    boolean casWaiters(AbstractFuture future, Waiter curr, Waiter next) {\n"],"delcode":["    @Override boolean casWaiters(AbstractFuture future, Waiter curr, Waiter next) {\n"],"methodSig":" boolean casWaiters(AbstractFuture future, Waiter curr, Waiter next)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_98.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_98.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_98.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_98.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_99.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_99.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_99.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_99.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractScheduledService.java","addlines":[193,194,296,297,241,242,436,437,309,310,311,312,313,314],"dellines":[179,409,298,299,286,223],"addcode":["  @Override\n","  public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n","  @Override\n","  public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n","      throw new TimeoutException(\n","          \"Timed out waiting for \"\n","              + this\n","              + \" to reach a terminal state. \"\n","              + \"Current state: \"\n","              + state());\n","  @Override\n","  public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n","  @Override\n","  public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n"],"delcode":["  @Override public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n","  @Override public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n","      throw new TimeoutException(\"Timed out waiting for \" + this + \" to reach a terminal state. \"\n","          + \"Current state: \" + state());\n","  @Override public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n","  @Override public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n"],"methodSig":"public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_99.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_99.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_99.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_99.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_100.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_100.txt","newdoc":" someone else has run or is running.\n We were interrupted, it is possible that the interrupted bit hasn't been set yet.  Wait\n for the interrupting thread to set 'doneInterrupting' to true. See interruptTask().\n We want to wait so that we don't interrupt the _next_ thing run on the thread.\n Note. We don't reset the interrupted bit, just wait for it to be set.\n If this is a thread pool thread, the thread pool will reset it for us.  Otherwise, the\n interrupted bit may have been intended for something else, so don't clear it.\n","newJdoc":"","olddoc":" someone else has run or is running.\n We were interrupted, it is possible that the interrupted bit hasn't been set yet.  Wait\n for the interrupting thread to set 'doneInterrupting' to true. See interruptTask().\n We want to wait so that we don't interrupt the _next_ thing run on the thread.\n Note. We don't reset the interrupted bit, just wait for it to be set.\n If this is a thread pool thread, the thread pool will reset it for us.  Otherwise, the\n interrupted bit may have been intended for something else, so don't clear it.\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/InterruptibleTask","pathinproj":"guava/src/com/google/common/util/concurrent/InterruptibleTask.java","addlines":[34,35,107,108],"dellines":[36,105],"addcode":["  @Override\n","  public final void run() {\n","    @Override\n","    public final void run() {\n"],"delcode":["  @Override public final void run() {\n","    @Override public final void run() {\n"],"methodSig":"public final void run()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_100.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_100.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_100.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_100.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_101.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_101.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[990,991],"dellines":[970],"addcode":["    @Override\n","    boolean casValue(AbstractFuture future, Object expected, Object v) {\n"],"delcode":["    @Override boolean casValue(AbstractFuture future, Object expected, Object v) {\n"],"methodSig":" boolean casValue(AbstractFuture future, Object expected, Object v)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_101.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_101.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_101.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_101.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_102.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_102.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingBlockingQueue","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingBlockingQueue.java","addlines":[68,69],"dellines":[67],"addcode":["  @Override\n","  public int remainingCapacity() {\n"],"delcode":["  @Override public int remainingCapacity() {\n"],"methodSig":"public int remainingCapacity()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_102.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_102.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_102.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_102.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_103.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_103.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_103.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_103.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory","pathinproj":"guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java","addlines":[464,465,462,463],"dellines":[470,471,472,473,474],"addcode":["    public ReentrantReadWriteLock newReentrantReadWriteLock(E rank, boolean fair) {\n","      return policy == Policies.DISABLED\n","          ? new ReentrantReadWriteLock(fair)\n","          : new CycleDetectingReentrantReadWriteLock(lockGraphNodes.get(rank), fair);\n"],"delcode":["    public ReentrantReadWriteLock newReentrantReadWriteLock(\n","        E rank, boolean fair) {\n","      return policy == Policies.DISABLED ? new ReentrantReadWriteLock(fair)\n","          : new CycleDetectingReentrantReadWriteLock(\n","              lockGraphNodes.get(rank), fair);\n"],"methodSig":"public ReentrantReadWriteLock newReentrantReadWriteLock(E rank, boolean fair)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_103.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_103.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_103.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_103.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_104.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_104.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_104.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_104.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractScheduledService.java","addlines":[199,151,200,152,394,395,203,204],"dellines":[372,198,186,142],"addcode":["  @Override\n","  public final Service startAsync() {\n","  @Override\n","  public final Service startAsync() {\n","  @Override\n","  public final Service startAsync() {\n","  @Override\n","  public final Service startAsync() {\n"],"delcode":["  @Override public final Service startAsync() {\n","  @Override public final Service startAsync() {\n","  @Override public final Service startAsync() {\n","  @Override public final Service startAsync() {\n"],"methodSig":"public final Service startAsync()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_104.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_104.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_104.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_104.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_105.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_105.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_105.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_105.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory","pathinproj":"guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java","addlines":[279,280,281,282],"dellines":[280,281,282,283,284],"addcode":["  public ReentrantReadWriteLock newReentrantReadWriteLock(String lockName, boolean fair) {\n","    return policy == Policies.DISABLED\n","        ? new ReentrantReadWriteLock(fair)\n","        : new CycleDetectingReentrantReadWriteLock(new LockGraphNode(lockName), fair);\n"],"delcode":["  public ReentrantReadWriteLock newReentrantReadWriteLock(\n","      String lockName, boolean fair) {\n","    return policy == Policies.DISABLED ? new ReentrantReadWriteLock(fair)\n","        : new CycleDetectingReentrantReadWriteLock(\n","            new LockGraphNode(lockName), fair);\n"],"methodSig":"public ReentrantReadWriteLock newReentrantReadWriteLock(String lockName, boolean fair)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_105.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_105.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_105.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_105.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_106.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_106.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory","pathinproj":"guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java","addlines":[632],"dellines":[646,647],"addcode":["    void checkAcquiredLocks(Policy policy, List<LockGraphNode> acquiredLocks) {\n"],"delcode":["    void checkAcquiredLocks(\n","        Policy policy, List<LockGraphNode> acquiredLocks) {\n"],"methodSig":" void checkAcquiredLocks(Policy policy, List<LockGraphNode> acquiredLocks)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_106.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_106.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_106.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_106.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_107.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_107.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_107.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_107.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2","pathinproj":"guava/src/com/google/common/util/concurrent/Futures.java","addlines":[872,873],"dellines":[903,904],"addcode":["  public static <I, O> Future<O> lazyTransform(\n","      final Future<I> input, final Function<? super I, ? extends O> function) {\n"],"delcode":["  public static <I, O> Future<O> lazyTransform(final Future<I> input,\n","      final Function<? super I, ? extends O> function) {\n"],"methodSig":"public static Future<O> lazyTransform(final Future<I> input, final Function<? super I, ? extends O> function)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_107.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_107.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_107.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_107.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_108.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_108.txt","newdoc":" prevent the task from running if possible\n","newJdoc":"","olddoc":" prevent the task from running if possible\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractScheduledService.java","addlines":[43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,73,74,75,76,77,78,207,79,208,80,209,81,210,82,211,83,212,84,213,85,214,86,215,216,88,217,218,219,220,221,222,223,224,225,226,227,228,229,231,232,233,234,235,237],"dellines":[44,45,46,47,48,49,50,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,207,79,208,80,209,210,82,211,83,212,213,214,215,216,217,218,219,220,221,222,224,226,227,228,229,230],"addcode":["    @Override\n","    protected final void doStart() {\n","      executorService =\n","          MoreExecutors.renamingDecorator(\n","              executor(),\n","              new Supplier<String>() {\n","                @Override\n","                public String get() {\n","                  return serviceName() + \" \" + state();\n","                }\n","              });\n","      executorService.execute(\n","          new Runnable() {\n","            @Override\n","            public void run() {\n","              lock.lock();\n","              try {\n","                startUp();\n","                runningTask = scheduler().schedule(delegate, executorService, task);\n","                notifyStarted();\n","              } catch (Throwable t) {\n","                notifyFailed(t);\n","                if (runningTask != null) {\n","                  runningTask.cancel(false);\n","                }\n","              } finally {\n","                lock.unlock();\n","              }\n","          });\n","        protected final void doStart() {\n","          Executor executor =\n","              MoreExecutors.renamingDecorator(\n","                  executor(),\n","                  new Supplier<String>() {\n","                    @Override\n","                    public String get() {\n","                      return serviceName();\n","                    }\n","                  });\n","          executor.execute(\n","              new Runnable() {\n","                @Override\n","                public void run() {\n","                  try {\n","                    startUp();\n","                    notifyStarted();\n","                    if (isRunning()) {\n","                      try {\n","                        AbstractExecutionThreadService.this.run();\n","                      } catch (Throwable t) {\n","                        try {\n","                          shutDown();\n","                        } catch (Exception ignored) {\n","                          logger.log(\n","                              Level.WARNING,\n","                              \"Error while attempting to shut down the service\" + \" after failure.\",\n","                              ignored);\n","                        }\n","                        notifyFailed(t);\n","                        return;\n","                      }\n","                    }\n","\n","                    shutDown();\n","                    notifyStopped();\n","                  } catch (Throwable t) {\n","                    notifyFailed(t);\n","                  }\n","              });\n","    @Override\n","    protected final void doStart() {\n","          .execute(\n","              new Runnable() {\n","                @Override\n","                public void run() {\n","                  try {\n","                    startUp();\n","                    notifyStarted();\n","                  } catch (Throwable t) {\n","                    notifyFailed(t);\n","                  }\n","                }\n","              });\n"],"delcode":["    @Override protected final void doStart() {\n","      executorService = MoreExecutors.renamingDecorator(executor(), new Supplier<String>() {\n","        @Override public String get() {\n","          return serviceName() + \" \" + state();\n","        }\n","      });\n","      executorService.execute(new Runnable() {\n","        @Override public void run() {\n","          lock.lock();\n","          try {\n","            startUp();\n","            runningTask = scheduler().schedule(delegate, executorService, task);\n","            notifyStarted();\n","          } catch (Throwable t) {\n","            notifyFailed(t);\n","            if (runningTask != null) {\n","              runningTask.cancel(false);\n","          } finally {\n","            lock.unlock();\n","          }\n","        }\n","      });\n","    @Override protected final void doStart() {\n","      Executor executor = MoreExecutors.renamingDecorator(executor(), new Supplier<String>() {\n","        @Override public String get() {\n","          return serviceName();\n","        }\n","      });\n","      executor.execute(new Runnable() {\n","        public void run() {\n","          try {\n","            startUp();\n","            notifyStarted();\n","            if (isRunning()) {\n","              try {\n","                AbstractExecutionThreadService.this.run();\n","              } catch (Throwable t) {\n","                try {\n","                  shutDown();\n","                } catch (Exception ignored) {\n","                  logger.log(Level.WARNING, \n","                      \"Error while attempting to shut down the service\"\n","                      + \" after failure.\", ignored);\n","                notifyFailed(t);\n","                return;\n","              }\n","            }\n","\n","            shutDown();\n","            notifyStopped();\n","          } catch (Throwable t) {\n","            notifyFailed(t);\n","          }\n","      });\n","    }\n","    @Override protected final void doStart() {\n","          .execute(new Runnable() {\n","            @Override public void run() {\n","              try {\n","                startUp();\n","                notifyStarted();\n","              } catch (Throwable t) {\n","                notifyFailed(t);\n","              }\n","            }\n","          });\n"],"methodSig":"protected final void doStart()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_108.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_108.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_108.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_108.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_109.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_109.txt","newdoc":" checkAcquiredLock() should never be invoked by a lock that has already\n been acquired. For unordered locks, aboutToAcquire() ensures this by\n checking isAcquiredByCurrentThread(). For ordered locks, however, this\n can happen because multiple locks may share the same LockGraphNode. In\n this situation, throw an IllegalStateException as defined by contract\n Otherwise, it's the first time seeing this lock relationship. Look for\n described in the documentation of WithExplicitOrdering.\n The acquisition ordering from \"acquiredLock\" to \"this\" has already\n been verified as safe. In a properly written application, this is\n the common case.\n Previously determined to be an unsafe lock acquisition.\n Create a new PotentialDeadlockException with the same causal chain\n (the example cycle) as that of the cached exception.\n a path from the acquiredLock to this.\n this can be safely acquired after the acquiredLock.\n\n Note that there is a race condition here which can result in missing\n a cyclic edge: it's possible for two threads to simultaneous find\n \"safe\" edges which together form a cycle. Preventing this race\n condition efficiently without _introducing_ deadlock is probably\n tricky. For now, just accept the race condition---missing a warning\n now and then is still better than having no deadlock detection.\n Unsafe acquisition order detected. Create and cache a\n PotentialDeadlockException.\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_109.txt","olddoc":" checkAcquiredLock() should never be invoked by a lock that has already\n been acquired. For unordered locks, aboutToAcquire() ensures this by\n checking isAcquiredByCurrentThread(). For ordered locks, however, this\n can happen because multiple locks may share the same LockGraphNode. In\n this situation, throw an IllegalStateException as defined by contract\n Otherwise, it's the first time seeing this lock relationship. Look for\n described in the documentation of WithExplicitOrdering.\n The acquisition ordering from \"acquiredLock\" to \"this\" has already\n been verified as safe. In a properly written application, this is\n the common case.\n Previously determined to be an unsafe lock acquisition.\n Create a new PotentialDeadlockException with the same causal chain\n (the example cycle) as that of the cached exception.\n a path from the acquiredLock to this.\n this can be safely acquired after the acquiredLock.\n\n Note that there is a race condition here which can result in missing\n a cyclic edge: it's possible for two threads to simultaneous find\n \"safe\" edges which together form a cycle. Preventing this race\n condition efficiently without _introducing_ deadlock is probably\n tricky. For now, just accept the race condition---missing a warning\n now and then is still better than having no deadlock detection.\n Unsafe acquisition order detected. Create and cache a\n PotentialDeadlockException.\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_109.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory","pathinproj":"guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java","addlines":[656,672,657,690,665,654,670,655,671],"dellines":[704,705,678,679,684,669,685,670,686],"addcode":["      Preconditions.checkState(\n","          this != acquiredLock,\n","          \"Attempted to acquire multiple locks with the same rank %s\",\n","          acquiredLock.getLockName());\n","      PotentialDeadlockException previousDeadlockException = disallowedPriorLocks.get(acquiredLock);\n","        PotentialDeadlockException exception =\n","            new PotentialDeadlockException(\n","                acquiredLock, this, previousDeadlockException.getConflictingStackTrace());\n","        allowedPriorLocks.put(acquiredLock, new ExampleStackTrace(acquiredLock, this));\n"],"delcode":["      Preconditions.checkState(this != acquiredLock,\n","          \"Attempted to acquire multiple locks with the same rank %s\", acquiredLock.getLockName());\n","      PotentialDeadlockException previousDeadlockException =\n","          disallowedPriorLocks.get(acquiredLock);\n","        PotentialDeadlockException exception = new PotentialDeadlockException(\n","            acquiredLock, this,\n","            previousDeadlockException.getConflictingStackTrace());\n","        allowedPriorLocks.put(\n","            acquiredLock, new ExampleStackTrace(acquiredLock, this));\n"],"methodSig":" void checkAcquiredLock(Policy policy, LockGraphNode acquiredLock)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_109.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_109.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_109.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_109.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_110.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_110.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingExecutorService","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingExecutorService.java","addlines":[45],"dellines":[48,49],"addcode":["  public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException {\n"],"delcode":["  public boolean awaitTermination(long timeout, TimeUnit unit)\n","      throws InterruptedException {\n"],"methodSig":"public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_110.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_110.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_110.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_110.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_111.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_111.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_111.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_111.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2","pathinproj":"guava/src/com/google/common/util/concurrent/Futures.java","addlines":[1312],"dellines":[1366,1367],"addcode":["      Future<V> future, long timeout, TimeUnit unit, Class<X> exceptionClass) throws X {\n"],"delcode":["      Future<V> future, long timeout, TimeUnit unit, Class<X> exceptionClass)\n","      throws X {\n"],"methodSig":"public static V get(Future<V> future, long timeout, TimeUnit unit, Class<X> exceptionClass) throws X"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_111.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_111.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_111.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_111.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_112.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_112.txt","newdoc":" createNodes maps each enumClass to a Map with the corresponding enum key\n type.\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_112.txt","olddoc":" createNodes maps each enumClass to a Map with the corresponding enum key\n type.\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_112.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory","pathinproj":"guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java","addlines":[292,293,299],"dellines":[295,296,302,303],"addcode":["  public static <E extends Enum<E>> WithExplicitOrdering<E> newInstanceWithExplicitOrdering(\n","      Class<E> enumClass, Policy policy) {\n","    Map<E, LockGraphNode> lockGraphNodes = (Map<E, LockGraphNode>) getOrCreateNodes(enumClass);\n"],"delcode":["  public static <E extends Enum<E>> WithExplicitOrdering<E>\n","      newInstanceWithExplicitOrdering(Class<E> enumClass, Policy policy) {\n","    Map<E, LockGraphNode> lockGraphNodes =\n","        (Map<E, LockGraphNode>) getOrCreateNodes(enumClass);\n"],"methodSig":"public static WithExplicitOrdering<E> newInstanceWithExplicitOrdering(Class<E> enumClass, Policy policy)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_112.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_112.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_112.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_112.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_113.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_113.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractListeningExecutorService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractListeningExecutorService.java","addlines":[62,63],"dellines":[60],"addcode":["  @Override\n","  public <T> ListenableFuture<T> submit(Callable<T> task) {\n"],"delcode":["  @Override public <T> ListenableFuture<T> submit(Callable<T> task) {\n"],"methodSig":"public ListenableFuture<T> submit(Callable<T> task)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_113.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_113.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_113.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_113.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_114.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_114.txt","newdoc":" reset state in case of an error so that later calls to execute will actually do something\n Log it and keep going.\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_114.txt","olddoc":" reset state in case of an error so that later calls to execute will actually do something\n Log it and keep going.\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_114.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenerCallQueue","pathinproj":"guava/src/com/google/common/util/concurrent/ListenerCallQueue.java","addlines":[94,95],"dellines":[93],"addcode":["        logger.log(\n","            Level.SEVERE,\n"],"delcode":["        logger.log(Level.SEVERE,\n"],"methodSig":" void execute()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_114.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_114.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_114.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_114.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_115.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_115.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_115.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_115.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListeningScheduledExecutorService","pathinproj":"guava/src/com/google/common/util/concurrent/ListeningScheduledExecutorService.java","addlines":[38],"dellines":[40,41],"addcode":["  ListenableScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit);\n"],"delcode":["  ListenableScheduledFuture<?> schedule(\n","      Runnable command, long delay, TimeUnit unit);\n"],"methodSig":" ListenableScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_115.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_115.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_115.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_115.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_116.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_116.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ForwardingBlockingQueue","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingBlockingQueue.java","addlines":[58,59],"dellines":[58,59],"addcode":["  @Override\n","  public E poll(long timeout, TimeUnit unit) throws InterruptedException {\n"],"delcode":["  @Override public E poll(long timeout, TimeUnit unit)\n","      throws InterruptedException {\n"],"methodSig":"public E poll(long timeout, TimeUnit unit) throws InterruptedException"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_116.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_116.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_116.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_116.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_117.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_117.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractService.java","addlines":[151,152,137,138,123,124,109,110],"dellines":[147,134,121,108],"addcode":["    @Override\n","    public boolean isSatisfied() {\n","    @Override\n","    public boolean isSatisfied() {\n","    @Override\n","    public boolean isSatisfied() {\n","    @Override\n","    public boolean isSatisfied() {\n"],"delcode":["    @Override public boolean isSatisfied() {\n","    @Override public boolean isSatisfied() {\n","    @Override public boolean isSatisfied() {\n","    @Override public boolean isSatisfied() {\n"],"methodSig":"public boolean isSatisfied()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_117.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_117.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_117.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_117.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_118.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_118.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_118.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_118.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractScheduledService.java","addlines":[225,177,226,178,420,421,269,270],"dellines":[209,261,165,395],"addcode":["  @Override\n","  public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n","  @Override\n","  public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n","  @Override\n","  public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n","  @Override\n","  public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n"],"delcode":["  @Override public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n","  @Override public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n","  @Override public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n","  @Override public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n"],"methodSig":"public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_118.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_118.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_118.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_118.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_119.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_119.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[87,88],"dellines":[87],"addcode":["    @Override\n","    public final boolean isDone() {\n"],"delcode":["    @Override public final boolean isDone() {\n"],"methodSig":"public final boolean isDone()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_119.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_119.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_119.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_119.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_120.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_120.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_120.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_120.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/JdkFutureAdapters","pathinproj":"guava/src/com/google/common/util/concurrent/JdkFutureAdapters.java","addlines":[51],"dellines":[58,59],"addcode":["  public static <V> ListenableFuture<V> listenInPoolThread(Future<V> future) {\n"],"delcode":["  public static <V> ListenableFuture<V> listenInPoolThread(\n","      Future<V> future) {\n"],"methodSig":"public static ListenableFuture<V> listenInPoolThread(Future<V> future)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_120.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_120.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_120.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_120.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_121.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_121.txt","newdoc":" Add a listener to shutdown the executor after the service is stopped.  This ensures that the\n JVM shutdown will not be prevented from exiting after this service has stopped or failed.\n Technically this listener is added after start() was called so it is a little gross, but it\n is called within doStart() so we know that the service cannot terminate or fail concurrently\n with adding this listener so it is impossible to miss an event that we are interested in.\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_121.txt","olddoc":" Add a listener to shutdown the executor after the service is stopped.  This ensures that the\n JVM shutdown will not be prevented from exiting after this service has stopped or failed.\n Technically this listener is added after start() was called so it is a little gross, but it\n is called within doStart() so we know that the service cannot terminate or fail concurrently\n with adding this listener so it is impossible to miss an event that we are interested in.\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_121.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractScheduledService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractScheduledService.java","addlines":[320,321,322,323,334,335,336,337,338,339,340,341,342,343,344,345,346],"dellines":[322,323,324,325,310,326,311,327,328,329],"addcode":["    @WeakOuter\n","    class ThreadFactoryImpl implements ThreadFactory {\n","      @Override\n","      public Thread newThread(Runnable runnable) {\n","    addListener(\n","        new Listener() {\n","          @Override\n","          public void terminated(State from) {\n","            executor.shutdown();\n","          }\n","\n","          @Override\n","          public void failed(State from, Throwable failure) {\n","            executor.shutdown();\n","          }\n","        },\n","        directExecutor());\n"],"delcode":["    @WeakOuter class ThreadFactoryImpl implements ThreadFactory {\n","      @Override public Thread newThread(Runnable runnable) {\n","    addListener(new Listener() {\n","      @Override public void terminated(State from) {\n","        executor.shutdown();\n","      }\n","      @Override public void failed(State from, Throwable failure) {\n","        executor.shutdown();\n","      }\n","    }, directExecutor());\n"],"methodSig":"protected ScheduledExecutorService executor()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_121.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_121.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_121.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_121.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_122.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_122.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_122.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_122.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Futures_2","pathinproj":"guava/src/com/google/common/util/concurrent/Futures.java","addlines":[1001],"dellines":[1040,1041],"addcode":["  public static <V> ListenableFuture<V> nonCancellationPropagating(ListenableFuture<V> future) {\n"],"delcode":["  public static <V> ListenableFuture<V> nonCancellationPropagating(\n","      ListenableFuture<V> future) {\n"],"methodSig":"public static ListenableFuture<V> nonCancellationPropagating(ListenableFuture<V> future)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_122.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_122.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_122.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_122.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_123.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_123.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AggregateFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AggregateFuture.java","addlines":[74,75],"dellines":[75],"addcode":["  @Override\n","  protected final void interruptTask() {\n"],"delcode":["  @Override protected final void interruptTask() {\n"],"methodSig":"protected final void interruptTask()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_123.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_123.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_123.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_123.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_124.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_124.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[985,986],"dellines":[966],"addcode":["    @Override\n","    boolean casListeners(AbstractFuture future, Listener curr, Listener next) {\n"],"delcode":["    @Override boolean casListeners(AbstractFuture future, Listener curr, Listener next) {\n"],"methodSig":" boolean casListeners(AbstractFuture future, Listener curr, Listener next)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_124.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_124.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_124.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_124.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_125.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_125.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[92,93],"dellines":[91],"addcode":["    @Override\n","    public final boolean isCancelled() {\n"],"delcode":["    @Override public final boolean isCancelled() {\n"],"methodSig":"public final boolean isCancelled()"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_125.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_125.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_125.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_125.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_126.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_126.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_126.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_126.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/CycleDetectingLockFactory","pathinproj":"guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java","addlines":[441,442],"dellines":[450],"addcode":["      return policy == Policies.DISABLED\n","          ? new ReentrantLock(fair)\n"],"delcode":["      return policy == Policies.DISABLED ? new ReentrantLock(fair)\n"],"methodSig":"public ReentrantLock newReentrantLock(E rank, boolean fair)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_126.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_126.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_126.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_126.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_127.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_127.txt","newdoc":" atomic is now non-null; fall through\n value changed\n don't compareAndSet a zero\n atomic replaced\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_127.txt","olddoc":" atomic is now non-null; fall through\n value changed\n don't compareAndSet a zero\n atomic replaced\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_127.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[165,154,155],"dellines":[165,155],"addcode":["    outer:\n","    while (true) {\n","      while (true) {\n"],"delcode":["    outer: for (;;) {\n","      for (;;) {\n"],"methodSig":"public long getAndAdd(K key, long delta)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_127.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_127.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_127.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_127.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"},{"func":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_128.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_128.txt","newdoc":" mark as 'deleted'\n give up if someone is calling complete\n we aren't unlinking this node, update pred.\n We are unlinking this node and it has a predecessor.\n We raced with another node that unlinked pred. Restart.\n We are unlinking head\n We raced with an add or complete\n","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newfuncnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_128.txt","olddoc":" mark as 'deleted'\n give up if someone is calling complete\n we aren't unlinking this node, update pred.\n We are unlinking this node and it has a predecessor.\n We raced with another node that unlinked pred. Restart.\n We are unlinking head\n We raced with an add or complete\n","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_oldfuncoldJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_128.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/AbstractFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[198,199],"dellines":[193],"addcode":["    restart:\n","    while (true) {\n"],"delcode":["    restart: while (true) {\n"],"methodSig":"private void removeWaiter(Waiter node)"},"doc":{"oldfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_128.txt","newfunccode":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocfunccode_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_128.txt","newdoc":"","newJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_newdocnewJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_128.txt","olddoc":"","oldJdoc":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/Codes/Match_olddocJdoc_69a75be1f1f8b15a03fe8aaf985aceadc7a10f41_128.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/69a75be1f1f8b15a03fe8aaf985aceadc7a10f41/ListenableFuture","pathinproj":"guava/src/com/google/common/util/concurrent/ListenableFuture.java","addlines":[80,81,82,84,85,87,88,89,92,93,94,95,98,99,100,101,102,103,104,107,108,109,111,112,117,118],"dellines":[129,130,135,136,137,92,93,94,95,97,98,99,101,102,103,104,107,108,109,110,111,114,115,116,117,118,119,120,121,122,125,126,127],"addcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\n","   * The listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\n","   * complete} or, if the computation is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through\n","   * this method is guaranteed to be called once the computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\n","   * thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\n","   * {@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\n","   * listeners can cause problems, and these problems can be difficult to reproduce because they\n","   * depend on timing. For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n","   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n","   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n","   * progress of the whole system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n","   * directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations performed using\n","   * listeners, see {@link Futures}. For a simplified but general listener interface, see {@link\n","   * Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener <a\n","   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws RejectedExecutionException if we tried to execute the listener immediately but the\n","   *     executor rejected it.\n"],"delcode":["   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on\n","   * the given executor.  The listener will run when the {@code Future}'s\n","   * computation is {@linkplain Future#isDone() complete} or, if the computation\n","   * is already complete, immediately.\n","   * <p>There is no guaranteed ordering of execution of listeners, but any\n","   * listener added through this method is guaranteed to be called once the\n","   * computation is complete.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor.\n","   * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n","   * RejectedExecutionException} or an exception thrown by {@linkplain\n","   * MoreExecutors#directExecutor direct execution}) will be caught and\n","   * <p>Note: For fast, lightweight listeners that would be safe to execute in\n","   * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid\n","   * it. Heavyweight {@code directExecutor} listeners can cause problems, and\n","   * these problems can be difficult to reproduce because they depend on timing.\n","   * For example:\n","   * <li>The listener may be executed by the caller of {@code addListener}. That\n","   * caller may be a UI thread or other latency-sensitive thread. This can harm\n","   * UI responsiveness.\n","   * <li>The listener may be executed by the thread that completes this {@code\n","   * Future}. That thread may be an internal system thread such as an RPC\n","   * network thread. Blocking that thread may stall progress of the whole\n","   * system. It may even cause a deadlock.\n","   * <li>The listener may delay other listeners, even listeners that are not\n","   * themselves {@code directExecutor} listeners.\n","   * <p>This is the most general listener interface. For common operations\n","   * performed using listeners, see {@link Futures}. For a simplified but\n","   * general listener interface, see {@link Futures#addCallback addCallback()}.\n","   * <p>Memory consistency effects: Actions in a thread prior to adding a listener\n","   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">\n","   * @throws NullPointerException if the executor or listener was null\n","   * @throws RejectedExecutionException if we tried to execute the listener\n","   *         immediately but the executor rejected it.\n"],"methodSig":" void addListener(Runnable listener, Executor executor)"},"id":3,"flag":1,"commit":"69a75be1f1f8b15a03fe8aaf985aceadc7a10f41"}]