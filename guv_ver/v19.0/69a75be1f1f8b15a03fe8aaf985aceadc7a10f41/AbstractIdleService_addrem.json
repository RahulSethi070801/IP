{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "26": " * Base class for services that do not need a thread while \"running\" but may need one during startup\n",
        "27": " * and shutdown. Subclasses can implement {@link #startUp} and {@link #shutDown} methods, each which\n",
        "28": " * run in a executor which by default uses a separate thread for each method.\n",
        "41": "    @Override\n",
        "42": "    public String get() {\n",
        "52": "    @Override\n",
        "53": "    protected final void doStart() {\n",
        "55": "          .execute(\n",
        "56": "              new Runnable() {\n",
        "57": "                @Override\n",
        "58": "                public void run() {\n",
        "59": "                  try {\n",
        "60": "                    startUp();\n",
        "61": "                    notifyStarted();\n",
        "62": "                  } catch (Throwable t) {\n",
        "63": "                    notifyFailed(t);\n",
        "64": "                  }\n",
        "65": "                }\n",
        "66": "              });\n",
        "69": "    @Override\n",
        "70": "    protected final void doStop() {\n",
        "72": "          .execute(\n",
        "73": "              new Runnable() {\n",
        "74": "                @Override\n",
        "75": "                public void run() {\n",
        "76": "                  try {\n",
        "77": "                    shutDown();\n",
        "78": "                    notifyStopped();\n",
        "79": "                  } catch (Throwable t) {\n",
        "80": "                    notifyFailed(t);\n",
        "81": "                  }\n",
        "82": "                }\n",
        "83": "              });\n",
        "86": "    @Override\n",
        "87": "    public String toString() {\n",
        "102": "   * Returns the {@link Executor} that will be used to run this service. Subclasses may override\n",
        "103": "   * this method to use a custom {@link Executor}, which may configure its worker thread with a\n",
        "104": "   * specific name, thread group or priority. The returned executor's {@link\n",
        "105": "   * Executor#execute(Runnable) execute()} method is called when this service is started and\n",
        "106": "   * stopped, and should return promptly.\n",
        "110": "      @Override\n",
        "111": "      public void execute(Runnable command) {\n",
        "117": "  @Override\n",
        "118": "  public String toString() {\n",
        "122": "  @Override\n",
        "123": "  public final boolean isRunning() {\n",
        "127": "  @Override\n",
        "128": "  public final State state() {\n",
        "135": "  @Override\n",
        "136": "  public final void addListener(Listener listener, Executor executor) {\n",
        "143": "  @Override\n",
        "144": "  public final Throwable failureCause() {\n",
        "151": "  @Override\n",
        "152": "  public final Service startAsync() {\n",
        "160": "  @Override\n",
        "161": "  public final Service stopAsync() {\n",
        "169": "  @Override\n",
        "170": "  public final void awaitRunning() {\n",
        "177": "  @Override\n",
        "178": "  public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n",
        "185": "  @Override\n",
        "186": "  public final void awaitTerminated() {\n",
        "193": "  @Override\n",
        "194": "  public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "28": " * Base class for services that do not need a thread while \"running\"\n",
        "29": " * but may need one during startup and shutdown. Subclasses can\n",
        "30": " * implement {@link #startUp} and {@link #shutDown} methods, each\n",
        "31": " * which run in a executor which by default uses a separate thread\n",
        "32": " * for each method.\n",
        "45": "    @Override public String get() {\n",
        "55": "    @Override protected final void doStart() {\n",
        "57": "          .execute(new Runnable() {\n",
        "58": "            @Override public void run() {\n",
        "59": "              try {\n",
        "60": "                startUp();\n",
        "61": "                notifyStarted();\n",
        "62": "              } catch (Throwable t) {\n",
        "63": "                notifyFailed(t);\n",
        "64": "              }\n",
        "65": "            }\n",
        "66": "          });\n",
        "69": "    @Override protected final void doStop() {\n",
        "71": "          .execute(new Runnable() {\n",
        "72": "            @Override public void run() {\n",
        "73": "              try {\n",
        "74": "                shutDown();\n",
        "75": "                notifyStopped();\n",
        "76": "              } catch (Throwable t) {\n",
        "77": "                notifyFailed(t);\n",
        "78": "              }\n",
        "79": "            }\n",
        "80": "          });\n",
        "83": "    @Override public String toString() {\n",
        "98": "   * Returns the {@link Executor} that will be used to run this service.\n",
        "99": "   * Subclasses may override this method to use a custom {@link Executor}, which\n",
        "100": "   * may configure its worker thread with a specific name, thread group or\n",
        "101": "   * priority. The returned executor's {@link Executor#execute(Runnable)\n",
        "102": "   * execute()} method is called when this service is started and stopped,\n",
        "103": "   * and should return promptly.\n",
        "107": "      @Override public void execute(Runnable command) {\n",
        "113": "  @Override public String toString() {\n",
        "117": "  @Override public final boolean isRunning() {\n",
        "121": "  @Override public final State state() {\n",
        "128": "  @Override public final void addListener(Listener listener, Executor executor) {\n",
        "135": "  @Override public final Throwable failureCause() {\n",
        "142": "  @Override public final Service startAsync() {\n",
        "150": "  @Override public final Service stopAsync() {\n",
        "158": "  @Override public final void awaitRunning() {\n",
        "165": "  @Override public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n",
        "172": "  @Override public final void awaitTerminated() {\n",
        "179": "  @Override public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n"
    }
}