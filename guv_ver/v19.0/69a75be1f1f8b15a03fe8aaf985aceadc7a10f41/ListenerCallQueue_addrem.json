{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "31": " * executor. Each callback task can be enqueued and executed as separate phases.\n",
        "33": " * <p>This class is very similar to {@link SerializingExecutor} with the exception that tasks can be\n",
        "34": " * enqueued without necessarily executing immediately.\n",
        "60": "  @GuardedBy(\"this\")\n",
        "61": "  private final Queue<Callback<L>> waitQueue = Queues.newArrayDeque();\n",
        "62": "\n",
        "63": "  @GuardedBy(\"this\")\n",
        "64": "  private boolean isThreadScheduled;\n",
        "94": "        logger.log(\n",
        "95": "            Level.SEVERE,\n",
        "103": "  @Override\n",
        "104": "  public void run() {\n",
        "124": "          logger.log(\n",
        "125": "              Level.SEVERE,\n",
        "132": "        // An Error is bubbling up. We should mark ourselves as no longer running. That way, if\n",
        "133": "        // anyone tries to keep using us, we won't be corrupted.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "33": " * executor.  Each callback task can be enqueued and executed as separate phases.\n",
        "35": " * <p>This class is very similar to {@link SerializingExecutor} with the exception that tasks can\n",
        "36": " * be enqueued without necessarily executing immediately.\n",
        "62": "  @GuardedBy(\"this\") private final Queue<Callback<L>> waitQueue = Queues.newArrayDeque();\n",
        "63": "  @GuardedBy(\"this\") private boolean isThreadScheduled;\n",
        "93": "        logger.log(Level.SEVERE,\n",
        "101": "  @Override public void run() {\n",
        "121": "          logger.log(Level.SEVERE, \n",
        "128": "        // An Error is bubbling up, we should mark ourselves as no longer\n",
        "129": "        // running, that way if anyone tries to keep using us we won't be\n",
        "130": "        // corrupted.\n"
    }
}