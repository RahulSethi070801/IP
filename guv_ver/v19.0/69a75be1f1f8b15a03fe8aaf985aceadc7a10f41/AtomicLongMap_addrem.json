{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "36": " * documented. Exceptions to this are {@link #containsKey}, {@link #size}, {@link #isEmpty}, {@link\n",
        "37": " * #asMap}, and {@link #toString}.\n",
        "43": " * {@link com.google.common.collect.Multiset} such as {@link\n",
        "44": " * com.google.common.collect.ConcurrentHashMultiset} instead.\n",
        "104": "    outer:\n",
        "105": "    while (true) {\n",
        "115": "      while (true) {\n",
        "154": "    outer:\n",
        "155": "    while (true) {\n",
        "165": "      while (true) {\n",
        "190": "    outer:\n",
        "191": "    while (true) {\n",
        "201": "      while (true) {\n",
        "233": "   * Removes and returns the value associated with {@code key}. If {@code key} is not in the map,\n",
        "234": "   * this method has no effect and returns zero.\n",
        "242": "    while (true) {\n",
        "256": "   * <p>This method is not atomic: the map may be visible in intermediate states, where some of the\n",
        "257": "   * zero values have been removed and others have not.\n",
        "295": "        Maps.transformValues(\n",
        "296": "            map,\n",
        "297": "            new Function<AtomicLong, Long>() {\n",
        "298": "              @Override\n",
        "299": "              public Long apply(AtomicLong atomic) {\n",
        "300": "                return atomic.get();\n",
        "301": "              }\n",
        "302": "            }));\n",
        "313": "   * Returns the number of key-value mappings in this map. If the map contains more than {@code\n",
        "314": "   * Integer.MAX_VALUE} elements, returns {@code Integer.MAX_VALUE}.\n",
        "367": "   * zero, associate it with {@code newValue}. Returns the previous value associated with {@code\n",
        "368": "   * key}, or zero if there was no mapping for {@code key}.\n",
        "371": "    while (true) {\n",
        "396": "   * If {@code (key, expectedOldValue)} is currently in the map, this method replaces {@code\n",
        "397": "   * expectedOldValue} with {@code newValue} and returns true; otherwise, this method returns false.\n",
        "399": "   * <p>If {@code expectedOldValue} is zero, this method will succeed if {@code (key, zero)} is\n",
        "400": "   * currently in the map, or if {@code key} is not in the map at all.\n",
        "412": "   * If {@code (key, value)} is currently in the map, this method removes it and returns true;\n",
        "413": "   * otherwise, this method returns false.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "38": " * documented. Exceptions to this are {@link #containsKey}, {@link #size}, {@link #isEmpty},\n",
        "39": " * {@link #asMap}, and {@link #toString}.\n",
        "45": " * {@link com.google.common.collect.Multiset} such as\n",
        "46": " * {@link com.google.common.collect.ConcurrentHashMultiset} instead.\n",
        "106": "    outer: for (;;) {\n",
        "116": "      for (;;) {\n",
        "155": "    outer: for (;;) {\n",
        "165": "      for (;;) {\n",
        "190": "    outer: for (;;) {\n",
        "200": "      for (;;) {\n",
        "232": "   * Removes and returns the value associated with {@code key}. If {@code key} is not\n",
        "233": "   * in the map, this method has no effect and returns zero.\n",
        "241": "    for (;;) {\n",
        "255": "   * <p>This method is not atomic: the map may be visible in intermediate states, where some\n",
        "256": "   * of the zero values have been removed and others have not.\n",
        "294": "        Maps.transformValues(map, new Function<AtomicLong, Long>() {\n",
        "295": "          @Override\n",
        "296": "          public Long apply(AtomicLong atomic) {\n",
        "297": "            return atomic.get();\n",
        "298": "          }\n",
        "299": "        }));\n",
        "310": "   * Returns the number of key-value mappings in this map. If the map contains more than\n",
        "311": "   * {@code Integer.MAX_VALUE} elements, returns {@code Integer.MAX_VALUE}.\n",
        "364": "   * zero, associate it with {@code newValue}. Returns the previous value associated with\n",
        "365": "   * {@code key}, or zero if there was no mapping for {@code key}.\n",
        "368": "    for (;;) {\n",
        "393": "   * If {@code (key, expectedOldValue)} is currently in the map, this method replaces\n",
        "394": "   * {@code expectedOldValue} with {@code newValue} and returns true; otherwise, this method\n",
        "395": "   * returns false.\n",
        "397": "   * <p>If {@code expectedOldValue} is zero, this method will succeed if {@code (key, zero)}\n",
        "398": "   * is currently in the map, or if {@code key} is not in the map at all.\n",
        "410": "   * If {@code (key, value)} is currently in the map, this method removes it and returns\n",
        "411": "   * true; otherwise, this method returns false.\n"
    }
}