{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "24": " * Transforms a value, possibly asynchronously. For an example usage and more information, see\n",
        "33": "   * Returns an output {@code Future} to use in place of the given {@code input}. The output {@code\n",
        "34": "   * Future} need not be {@linkplain Future#isDone done}, making {@code AsyncFunction} suitable for\n",
        "35": "   * asynchronous derivations.\n",
        "37": "   * <p>Throwing an exception from this method is equivalent to returning a failing {@code Future}.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "26": " * Transforms a value, possibly asynchronously. For an example usage and more\n",
        "27": " * information, see\n",
        "36": "   * Returns an output {@code Future} to use in place of the given {@code\n",
        "37": "   * input}. The output {@code Future} need not be {@linkplain Future#isDone\n",
        "38": "   * done}, making {@code AsyncFunction} suitable for asynchronous derivations.\n",
        "40": "   * <p>Throwing an exception from this method is equivalent to returning a\n",
        "41": "   * failing {@code Future}.\n"
    }
}