{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "24": " * A {@link FutureTask} that also implements the {@link ListenableFuture} interface.  Unlike {@code\n",
        "25": " * FutureTask}, {@code ListenableFutureTask} does not provide an overrideable {@link\n",
        "26": " * FutureTask#done() done()} method.  For similar functionality, call {@link #addListener}.\n",
        "33": "public class ListenableFutureTask<V> extends FutureTask<V> implements ListenableFuture<V> {\n",
        "34": "  // TODO(cpovirk): explore ways of making ListenableFutureTask final. There are some valid reasons\n",
        "35": "  // such as BoundedQueueExecutorService to allow extends but it would be nice to make it final to\n",
        "36": "  // avoid unintended usage.\n",
        "42": "   * Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code\n",
        "43": "   * Callable}.\n",
        "53": "   * Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code\n",
        "54": "   * Runnable}, and arrange that {@code get} will return the given result on successful completion.\n",
        "57": "   * @param result the result to return on successful completion. If you don't need a particular\n",
        "58": "   *     result, consider using constructions of the form: {@code ListenableFuture<?> f =\n",
        "59": "   *     ListenableFutureTask.create(runnable, null)}\n",
        "62": "  public static <V> ListenableFutureTask<V> create(Runnable runnable, @Nullable V result) {\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "26": " * A {@link FutureTask} that also implements the {@link ListenableFuture}\n",
        "27": " * interface.  Unlike {@code FutureTask}, {@code ListenableFutureTask} does not\n",
        "28": " * provide an overrideable {@link FutureTask#done() done()} method.  For similar\n",
        "29": " * functionality, call {@link #addListener}.\n",
        "36": "public class ListenableFutureTask<V> extends FutureTask<V>\n",
        "37": "    implements ListenableFuture<V> {\n",
        "38": "  // TODO(cpovirk): explore ways of making ListenableFutureTask final. There are\n",
        "39": "  // some valid reasons such as BoundedQueueExecutorService to allow extends but it\n",
        "40": "  // would be nice to make it final to avoid unintended usage.\n",
        "46": "   * Creates a {@code ListenableFutureTask} that will upon running, execute the\n",
        "47": "   * given {@code Callable}.\n",
        "57": "   * Creates a {@code ListenableFutureTask} that will upon running, execute the\n",
        "58": "   * given {@code Runnable}, and arrange that {@code get} will return the\n",
        "59": "   * given result on successful completion.\n",
        "62": "   * @param result the result to return on successful completion. If you don't\n",
        "63": "   *     need a particular result, consider using constructions of the form:\n",
        "64": "   *     {@code ListenableFuture<?> f = ListenableFutureTask.create(runnable,\n",
        "65": "   *     null)}\n",
        "68": "  public static <V> ListenableFutureTask<V> create(\n",
        "69": "      Runnable runnable, @Nullable V result) {\n"
    }
}