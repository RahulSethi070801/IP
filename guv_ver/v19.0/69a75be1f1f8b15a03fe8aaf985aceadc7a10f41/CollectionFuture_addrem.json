{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "47": "      this.values =\n",
        "48": "          futures.isEmpty()\n",
        "49": "              ? ImmutableList.<Optional<V>>of()\n",
        "50": "              : Lists.<Optional<V>>newArrayListWithCapacity(futures.size());\n",
        "65": "        // Some other future failed or has been cancelled, causing this one to also be cancelled or\n",
        "66": "        // have an exception set. This should only happen if allMustSucceed is true or if the output\n",
        "67": "        // itself has been cancelled.\n",
        "68": "        checkState(\n",
        "69": "            allMustSucceed || isCancelled(), \"Future was done before all dependencies completed\");\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "49": "      this.values = futures.isEmpty() ? ImmutableList.<Optional<V>>of()\n",
        "50": "          : Lists.<Optional<V>>newArrayListWithCapacity(futures.size());\n",
        "65": "        // Some other future failed or has been cancelled, causing this one to\n",
        "66": "        // also be cancelled or have an exception set. This should only happen\n",
        "67": "        // if allMustSucceed is true or if the output itself has been\n",
        "68": "        // cancelled.\n",
        "69": "        checkState(allMustSucceed || isCancelled(),\n",
        "70": "            \"Future was done before all dependencies completed\");\n"
    }
}