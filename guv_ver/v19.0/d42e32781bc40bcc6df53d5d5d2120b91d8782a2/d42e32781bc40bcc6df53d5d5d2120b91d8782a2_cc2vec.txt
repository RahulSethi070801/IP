{"id": "d42e32781bc40bcc6df53d5d5d2120b91d8782a2", "code": [{"0": "guava/src/com/google/common/collect/ImmutableCollection.java", "added": {"1": ["import java.util.ArrayList;\n", "import java.util.Collections;\n", "import java.util.List;\n", " * A subtype of {@link Collection} making additional guarantees: its contents will never change, it\n", " * will never contain {@code null}, and its iteration order is deterministic.\n", " * <p><b>Note:</b> {@code ImmutableCollection} itself exists primarily as a common supertype for\n", " * more useful types like {@link ImmutableSet} and {@link ImmutableList}. Like {@code Collection},\n", " * it has no defined {@link #equals} behavior, which can lead to surprises and bugs, so (like {@code\n", " * Collection}) it should not be used directly.\n", " * <p>Example usage: <pre>   {@code\n", " *\n", " *   class Foo {\n", " *     private static final ImmutableSet<String> RESERVED_CODES =\n", " *         ImmutableSet.of(\"AZ\", \"CQ\", \"ZX\");\n", " *\n", " *     private final ImmutableSet<String> codes;\n", " *\n", " *     public Foo(Iterable<String> codes) {\n", " *       this.codes = ImmutableSet.copyOf(codes);\n", " *       checkArgument(Collections.disjoint(this.codes, RESERVED_CODES));\n", " *   }\n", " *\n", " * <h3>About <i>all</i> public {@code Immutable-} types in this package</h3>\n", " *\n", " * <h4>Guarantees</h4>\n", " *\n", " * <p>Each makes the following guarantees:\n", " *\n", " * <ul>\n", " * <li>Its contents can never change. Any attempt to add, remove or replace an element results in an\n", " *     {@link UnsupportedOperationException}. Note that this guarantee of <i>immutability</i> is\n", " *     stronger than that of {@link Collections#unmodifiableCollection}, which only prevents\n", " *     modification operations from being invoked on the reference it returns, while any other code\n", " *     having a reference to the inner collection can still modify it at will.\n", " * <li>It can never contain {@code null} as an element, key or value. An attempt to do so results in\n", " *     a {@link NullPointerException}.\n", " * <li>Its iteration order is deterministic. What that order is, specifically, depends on how the\n", " *     collection was created. See the appropriate factory method for details.\n", " * <li>It cannot be subclassed outside this package (which would permit these guarantees to be\n", " *     violated).\n", " * <li>It is thread-safe.\n", " * </ul>\n", " *\n", " * <h4>Types, not implementations</h4>\n", " *\n", " * <p>Each of these public classes, such as {@code ImmutableList}, is a <i>type</i>, not a\n", " * specific <i>implementation</i> (unlike the case of, say, {@link ArrayList}). That is, they should\n", " * be thought of as interfaces in virtually every important sense, just ones that classes outside\n", " * this package can't implement.\n", " *\n", " * <p>For your field types and method return types, use the immutable type (like {@code\n", " * ImmutableList}) instead of the corresponding basic collection interface type (like {@link List})\n", " * unless the semantic guarantees listed above are not considered relevant. On the other hand, a\n", " * <i>parameter</i> type of {@code ImmutableList} can be a nuisance to callers; instead, accept\n", " * {@link List} (or even {@link Iterable}) and pass it to {@link ImmutableList#copyOf(Collection)}\n", " * yourself.\n", " *\n", " * <h4>Creation</h4>\n", " *\n", " * <p>With the exception of {@code ImmutableCollection} itself, each {@code Immutable} type provides\n", " * the static operations you need to obtain instances of that type:\n", " *\n", " * <ul>\n", " * <li>Static methods named {@code of} accepting an explicit list of elements or entries\n", " * <li>Static methods named {@code copyOf} accepting an existing collection (or similar) whose\n", " *     contents should be copied\n", " * <li>A static nested {@code Builder} class which can be used to progressively populate a new\n", " *     immutable instance\n", " * </ul>\n", " *\n", " * <h4>Other common properties</h4>\n", " *\n", " * <ul>\n", " * <li>View collections, such as {@link ImmutableMap#keySet} or {@link ImmutableList#subList},\n", " *     return the appropriate {@code Immutable} type. This is true even when the language does not\n", " *     permit the method's return type to express it (for example in the case of {@link\n", " *     ImmutableListMultimap#asMap}).\n", " *\n", " * <h4>Performance notes</h4>\n", " *\n", " * <ul>\n", " * <li>When a {@code copyOf} method is passed a collection that is already immutable, in most cases\n", " *     it can return quickly without actually copying anything. This means that making defensive\n", " *     copies at API boundaries as a habit is not necessarily expensive in the long run.\n", " * <li>Implementations can be generally assumed to prioritize memory efficiency and speed of access\n", " *     over speed of creation.\n", " * <li>The performance of using the associated {@code Builder} class can generally be assumed to be\n", " *     no worse, and possibly better, than creating a mutable collection and copying it.\n", " * <li>Implementations generally do not cache hash codes. If your key type has a slow {@code\n", " *     hashCode} implementation, it should cache it itself.\n", " * </ul>\n", " *\n", " * <h4>Notable subtypes (not exhaustive)</h4>\n", " *\n", " * <ul>\n", " * <li>{@code ImmutableCollection}\n", " *     <ul>\n", " *     <li>{@link ImmutableSet}\n", " *         <ul>\n", " *         <li>{@link ImmutableSortedSet}\n", " *         </ul>\n", " *     <li>{@link ImmutableList}\n", " *     <li>{@link ImmutableMultiset}\n", " *     </ul>\n", " * <li>{@link ImmutableMap}\n", " *     <ul>\n", " *     <li>{@link ImmutableSortedMap}\n", " *     <li>{@link ImmutableBiMap}\n", " *     </ul>\n", " * <li>{@link ImmutableMultimap}\n", " *     <ul>\n", " *     <li>{@link ImmutableListMultimap}\n", " *     <li>{@link ImmutableSetMultimap}\n", " *     </ul>\n", " * <li>{@link ImmutableTable}\n", " * <li>{@link ImmutableRangeSet}\n", " * <li>{@link ImmutableRangeMap}\n", " * </ul>\n", " *\n", " * <h3>See also</h3>\n", " *\n", " * <p>See the Guava User Guide article on <a href=\n", " * \"http://code.google.com/p/guava-libraries/wiki/ImmutableCollectionsExplained\">\n", " * immutable collections</a>.\n", "// TODO(kevinb): I think we should push everything down to \"BaseImmutableCollection\" or something,\n", "// just to do everything we can to emphasize the \"practically an interface\" nature of this class.\n"], "2": ["   * Returns an {@code ImmutableList} containing the same elements, in the same order, as this\n", "   * collection.\n", "   *\n", "   * <p><b>Performance note:</b> in most cases this method can return quickly without actually\n", "   * copying anything. The exact circumstances under which the copy is performed are undefined and\n", "   * subject to change.\n"]}, "removed": {"1": [" * An immutable collection. Does not permit null elements.\n", " * <p>In addition to the {@link Collection} methods, this class has an {@link\n", " * #asList()} method, which returns a list view of the collection's elements.\n", " * <p><b>Note:</b> Although this class is not final, it cannot be subclassed\n", " * outside of this package as it has no public or protected constructors. Thus,\n", " * instances of this type are guaranteed to be immutable.\n", " * @author Jesse Wilson\n"], "2": ["   * Returns a list view of the collection.\n"]}, "added_lines": {"1": [27, 29, 31, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 165], "2": [283, 284, 285, 286, 287, 288]}, "removed_lines": {"1": [33, 35, 36, 38, 39, 40, 42], "2": [164]}}, {"1": "guava/src/com/google/common/collect/ImmutableSet.java", "added": {"1": [" * An immutable collection that cannot contain duplicate elements and has order-independent\n", " * {@linkplain #equals equality}; <b>please see {@link ImmutableCollection}</b> for many important\n", " * details common to all immutable collection types.\n"], "2": ["   * Returns the empty immutable set. Preferred over {@link Collections#emptySet} for code\n", "   * consistency, and because the return type conveys the immutability guarantee.\n", "  @SuppressWarnings({\"unchecked\"}) // fully variant implementation (never actually produces any Es)\n", "   * Returns an immutable set containing {@code element}. Preferred over {@link\n", "   * Collections#singleton} for code consistency, {@code null} rejection, and because the return\n", "   * type conveys the immutability guarantee.\n", "   * Returns an immutable set containing the given elements, minus duplicates, in the order each was\n", "   * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except\n", "   * the first are ignored.\n", "   * Returns an immutable set containing the given elements, minus duplicates, in the order each was\n", "   * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except\n", "   * the first are ignored.\n", "   * Returns an immutable set containing the given elements, minus duplicates, in the order each was\n", "   * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except\n", "   * the first are ignored.\n", "   * Returns an immutable set containing the given elements, minus duplicates, in the order each was\n", "   * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except\n", "   * the first are ignored.\n", "   * Returns an immutable set containing the given elements, minus duplicates, in the order each was\n", "   * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except\n", "   * the first are ignored.\n"], "3": ["   * Returns an immutable set containing each of {@code elements}, minus duplicates, in the order\n", "   * each appears first in the source collection.\n", "   *\n", "   * <p><b>Performance note:</b> In certain cases when {@code elements} is an {@link\n", "   * ImmutableCollection}, its data will be reused directly without copying; the {@code elements}\n", "   * instance itself might even be returned. The specific circumstances in which these optimizations\n", "   * happen are undefined and subject to change.\n", "   * @since 7.0 (source-compatible since 2.0)\n", "  public static <E> ImmutableSet<E> copyOf(Collection<? extends E> elements) {\n", "    /*\n", "     * TODO(user): consider checking for ImmutableAsList here\n", "     * TODO(user): consider checking for Multiset here\n", "     */\n", "    if (elements instanceof ImmutableSet\n", "        && !(elements instanceof ImmutableSortedSet)) {\n", "      @SuppressWarnings(\"unchecked\") // all supported methods are covariant\n", "          ImmutableSet<E> set = (ImmutableSet<E>) elements;\n", "      if (!set.isPartialView()) {\n", "        return set;\n", "      }\n", "    } else if (elements instanceof EnumSet) {\n", "      return copyOfEnumSet((EnumSet) elements);\n", "    Object[] array = elements.toArray();\n", "    return construct(array.length, array);\n", "   * Returns an immutable set containing each of {@code elements}, minus duplicates, in the order\n", "   * each appears first in the source iterable. This method iterates over {@code elements} only\n", "   * once.\n", "   * <p><b>Performance note:</b> In certain cases when {@code elements} is an {@link\n", "   * ImmutableCollection}, its data will be reused directly without copying; the {@code elements}\n", "   * instance itself might even be returned. The specific circumstances in which these optimizations\n", "   * happen are undefined and subject to change.\n"], "4": ["   * Returns an immutable set containing each of {@code elements}, minus duplicates, in the order\n", "   * each appears first in the source iterator.\n"], "5": ["   * Returns an immutable set containing each of {@code elements}, minus duplicates, in the order\n", "   * each appears first in the source array.\n", "   * @since 3.0\n", "  public static <E> ImmutableSet<E> copyOf(E[] elements) {\n", "    switch (elements.length) {\n", "      case 0:\n", "        return of();\n", "      case 1:\n", "        return of(elements[0]);\n", "      default:\n", "        return construct(elements.length, elements.clone());\n"]}, "removed": {"1": ["import java.util.HashSet;\n", " * A high-performance, immutable {@code Set} with reliable, user-specified\n", " * iteration order. Does not permit null elements.\n", " * <p>Unlike {@link Collections#unmodifiableSet}, which is a <i>view</i> of a\n", " * separate collection that can still change, an instance of this class contains\n", " * its own private data and will <i>never</i> change. This class is convenient\n", " * for {@code public static final} sets (\"constant sets\") and also lets you\n", " * easily make a \"defensive copy\" of a set provided to your class by a caller.\n", " *\n", " * <p><b>Warning:</b> Like most sets, an {@code ImmutableSet} will not function\n", " * correctly if an element is modified after being placed in the set. For this\n", " * reason, and to avoid general confusion, it is strongly recommended to place\n", " * only immutable objects into this collection.\n", " *\n", " * <p>This class has been observed to perform significantly better than {@link\n", " * HashSet} for objects with very fast {@link Object#hashCode} implementations\n", " * (as a well-behaved immutable object should). While this class's factory\n", " * methods create hash-based instances, the {@link ImmutableSortedSet} subclass\n", " * performs binary searches instead.\n", " *\n", " * <p><b>Note:</b> Although this class is not final, it cannot be subclassed\n", " * outside its package as it has no public or protected constructors. Thus,\n", " * instances of this type are guaranteed to be immutable.\n", " *\n", " * <p>See the Guava User Guide article on <a href=\n", " * \"http://code.google.com/p/guava-libraries/wiki/ImmutableCollectionsExplained\">\n", " * immutable collections</a>.\n", " *\n", " * @see ImmutableList\n", " * @see ImmutableMap\n", " * @author Kevin Bourrillion\n", " * @author Nick Kralevich\n"], "2": ["   * Returns the empty immutable set. This set behaves and performs comparably\n", "   * to {@link Collections#emptySet}, and is preferable mainly for consistency\n", "   * and maintainability of your code.\n", "  // Casting to any type is safe because the set will never hold any elements.\n", "  @SuppressWarnings({\"unchecked\"})\n", "   * Returns an immutable set containing a single element. This set behaves and\n", "   * performs comparably to {@link Collections#singleton}, but will not accept\n", "   * a null element. It is preferable mainly for consistency and\n", "   * maintainability of your code.\n", "   * Returns an immutable set containing the given elements, in order. Repeated\n", "   * occurrences of an element (according to {@link Object#equals}) after the\n", "   * first are ignored.\n", "   *\n", "   * @throws NullPointerException if any element is null\n", "   * Returns an immutable set containing the given elements, in order. Repeated\n", "   * occurrences of an element (according to {@link Object#equals}) after the\n", "   * first are ignored.\n", "   *\n", "   * @throws NullPointerException if any element is null\n", "   * Returns an immutable set containing the given elements, in order. Repeated\n", "   * occurrences of an element (according to {@link Object#equals}) after the\n", "   * first are ignored.\n", "   *\n", "   * @throws NullPointerException if any element is null\n", "   * Returns an immutable set containing the given elements, in order. Repeated\n", "   * occurrences of an element (according to {@link Object#equals}) after the\n", "   * first are ignored.\n", "   *\n", "   * @throws NullPointerException if any element is null\n", "   * Returns an immutable set containing the given elements, in order. Repeated\n", "   * occurrences of an element (according to {@link Object#equals}) after the\n", "   * first are ignored.\n", "   * @throws NullPointerException if any element is null\n"], "3": ["   * Returns an immutable set containing the given elements, in order. Repeated\n", "   * occurrences of an element (according to {@link Object#equals}) after the\n", "   * first are ignored.\n", "   * @since 3.0\n", "  public static <E> ImmutableSet<E> copyOf(E[] elements) {\n", "    switch (elements.length) {\n", "      case 0:\n", "        return of();\n", "      case 1:\n", "        return of(elements[0]);\n", "      default:\n", "        return construct(elements.length, elements.clone());\n", "   * Returns an immutable set containing the given elements, in order. Repeated\n", "   * occurrences of an element (according to {@link Object#equals}) after the\n", "   * first are ignored. This method iterates over {@code elements} at most once.\n", "   *\n", "   * <p>Note that if {@code s} is a {@code Set<String>}, then {@code\n", "   * ImmutableSet.copyOf(s)} returns an {@code ImmutableSet<String>} containing\n", "   * each of the strings in {@code s}, while {@code ImmutableSet.of(s)} returns\n", "   * a {@code ImmutableSet<Set<String>>} containing one element (the given set\n", "   * itself).\n", "   * <p>Despite the method name, this method attempts to avoid actually copying\n", "   * the data when it is safe to do so. The exact circumstances under which a\n", "   * copy will or will not be performed are undocumented and subject to change.\n"], "4": ["   * Returns an immutable set containing the given elements, in order. Repeated\n", "   * occurrences of an element (according to {@link Object#equals}) after the\n", "   * first are ignored.\n"], "5": ["   * Returns an immutable set containing the given elements, in order. Repeated\n", "   * occurrences of an element (according to {@link Object#equals}) after the\n", "   * first are ignored. This method iterates over {@code elements} at most\n", "   * once.\n", "   *\n", "   * <p>Note that if {@code s} is a {@code Set<String>}, then {@code\n", "   * ImmutableSet.copyOf(s)} returns an {@code ImmutableSet<String>} containing\n", "   * each of the strings in {@code s}, while {@code ImmutableSet.of(s)} returns\n", "   * a {@code ImmutableSet<Set<String>>} containing one element (the given set\n", "   * itself).\n", "   *\n", "   * <p><b>Note:</b> Despite what the method name suggests, {@code copyOf} will\n", "   * return constant-space views, rather than linear-space copies, of some\n", "   * inputs known to be immutable. For some other immutable inputs, such as key\n", "   * sets of an {@code ImmutableMap}, it still performs a copy in order to avoid\n", "   * holding references to the values of the map. The heuristics used in this\n", "   * decision are undocumented and subject to change except that:\n", "   * <ul>\n", "   * <li>A full copy will be done of any {@code ImmutableSortedSet}.</li>\n", "   * <li>{@code ImmutableSet.copyOf()} is idempotent with respect to pointer\n", "   * equality.</li>\n", "   * </ul>\n", "   *\n", "   * <p>This method is safe to use even when {@code elements} is a synchronized\n", "   * or concurrent collection that is currently being modified by another\n", "   * thread.\n", "   * @since 7.0 (source-compatible since 2.0)\n", "  public static <E> ImmutableSet<E> copyOf(Collection<? extends E> elements) {\n", "    /*\n", "     * TODO(user): consider checking for ImmutableAsList here\n", "     * TODO(user): consider checking for Multiset here\n", "     */\n", "    if (elements instanceof ImmutableSet\n", "        && !(elements instanceof ImmutableSortedSet)) {\n", "      @SuppressWarnings(\"unchecked\") // all supported methods are covariant\n", "      ImmutableSet<E> set = (ImmutableSet<E>) elements;\n", "      if (!set.isPartialView()) {\n", "        return set;\n", "      }\n", "    } else if (elements instanceof EnumSet) {\n", "      return copyOfEnumSet((EnumSet) elements);\n", "    Object[] array = elements.toArray();\n", "    return construct(array.length, array);\n"]}, "added_lines": {"1": [37, 38, 39], "2": [48, 49, 51, 57, 58, 59, 66, 67, 68, 75, 76, 77, 84, 85, 86, 93, 94, 95, 102, 103, 104], "3": [223, 224, 225, 226, 227, 228, 229, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 254, 255, 256, 258, 259, 260, 261], "4": [272, 273], "5": [294, 295, 298, 300, 301, 302, 303, 304, 305, 306, 307]}, "removed_lines": {"1": [31, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], "2": [77, 78, 79, 81, 82, 88, 89, 90, 91, 98, 99, 100, 101, 102, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 131, 132, 133, 134, 135, 142, 143, 144, 146], "3": [264, 265, 266, 269, 271, 272, 273, 274, 275, 276, 277, 278, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295], "4": [306, 307, 308], "5": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375]}}]}
