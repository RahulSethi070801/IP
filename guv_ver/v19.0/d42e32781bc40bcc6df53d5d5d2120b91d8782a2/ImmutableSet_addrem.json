{
    "addition": {
        "37": " * An immutable collection that cannot contain duplicate elements and has order-independent\n",
        "38": " * {@linkplain #equals equality}; <b>please see {@link ImmutableCollection}</b> for many important\n",
        "39": " * details common to all immutable collection types.\n",
        "48": "   * Returns the empty immutable set. Preferred over {@link Collections#emptySet} for code\n",
        "49": "   * consistency, and because the return type conveys the immutability guarantee.\n",
        "51": "  @SuppressWarnings({\"unchecked\"}) // fully variant implementation (never actually produces any Es)\n",
        "57": "   * Returns an immutable set containing {@code element}. Preferred over {@link\n",
        "58": "   * Collections#singleton} for code consistency, {@code null} rejection, and because the return\n",
        "59": "   * type conveys the immutability guarantee.\n",
        "66": "   * Returns an immutable set containing the given elements, minus duplicates, in the order each was\n",
        "67": "   * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except\n",
        "68": "   * the first are ignored.\n",
        "75": "   * Returns an immutable set containing the given elements, minus duplicates, in the order each was\n",
        "76": "   * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except\n",
        "77": "   * the first are ignored.\n",
        "84": "   * Returns an immutable set containing the given elements, minus duplicates, in the order each was\n",
        "85": "   * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except\n",
        "86": "   * the first are ignored.\n",
        "93": "   * Returns an immutable set containing the given elements, minus duplicates, in the order each was\n",
        "94": "   * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except\n",
        "95": "   * the first are ignored.\n",
        "102": "   * Returns an immutable set containing the given elements, minus duplicates, in the order each was\n",
        "103": "   * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except\n",
        "104": "   * the first are ignored.\n",
        "223": "   * Returns an immutable set containing each of {@code elements}, minus duplicates, in the order\n",
        "224": "   * each appears first in the source collection.\n",
        "225": "   *\n",
        "226": "   * <p><b>Performance note:</b> In certain cases when {@code elements} is an {@link\n",
        "227": "   * ImmutableCollection}, its data will be reused directly without copying; the {@code elements}\n",
        "228": "   * instance itself might even be returned. The specific circumstances in which these optimizations\n",
        "229": "   * happen are undefined and subject to change.\n",
        "232": "   * @since 7.0 (source-compatible since 2.0)\n",
        "234": "  public static <E> ImmutableSet<E> copyOf(Collection<? extends E> elements) {\n",
        "235": "    /*\n",
        "236": "     * TODO(user): consider checking for ImmutableAsList here\n",
        "237": "     * TODO(user): consider checking for Multiset here\n",
        "238": "     */\n",
        "239": "    if (elements instanceof ImmutableSet\n",
        "240": "        && !(elements instanceof ImmutableSortedSet)) {\n",
        "241": "      @SuppressWarnings(\"unchecked\") // all supported methods are covariant\n",
        "242": "          ImmutableSet<E> set = (ImmutableSet<E>) elements;\n",
        "243": "      if (!set.isPartialView()) {\n",
        "244": "        return set;\n",
        "245": "      }\n",
        "246": "    } else if (elements instanceof EnumSet) {\n",
        "247": "      return copyOfEnumSet((EnumSet) elements);\n",
        "249": "    Object[] array = elements.toArray();\n",
        "250": "    return construct(array.length, array);\n",
        "254": "   * Returns an immutable set containing each of {@code elements}, minus duplicates, in the order\n",
        "255": "   * each appears first in the source iterable. This method iterates over {@code elements} only\n",
        "256": "   * once.\n",
        "258": "   * <p><b>Performance note:</b> In certain cases when {@code elements} is an {@link\n",
        "259": "   * ImmutableCollection}, its data will be reused directly without copying; the {@code elements}\n",
        "260": "   * instance itself might even be returned. The specific circumstances in which these optimizations\n",
        "261": "   * happen are undefined and subject to change.\n",
        "272": "   * Returns an immutable set containing each of {@code elements}, minus duplicates, in the order\n",
        "273": "   * each appears first in the source iterator.\n",
        "294": "   * Returns an immutable set containing each of {@code elements}, minus duplicates, in the order\n",
        "295": "   * each appears first in the source array.\n",
        "298": "   * @since 3.0\n",
        "300": "  public static <E> ImmutableSet<E> copyOf(E[] elements) {\n",
        "301": "    switch (elements.length) {\n",
        "302": "      case 0:\n",
        "303": "        return of();\n",
        "304": "      case 1:\n",
        "305": "        return of(elements[0]);\n",
        "306": "      default:\n",
        "307": "        return construct(elements.length, elements.clone());\n"
    },
    "removed": {
        "31": "import java.util.HashSet;\n",
        "38": " * A high-performance, immutable {@code Set} with reliable, user-specified\n",
        "39": " * iteration order. Does not permit null elements.\n",
        "41": " * <p>Unlike {@link Collections#unmodifiableSet}, which is a <i>view</i> of a\n",
        "42": " * separate collection that can still change, an instance of this class contains\n",
        "43": " * its own private data and will <i>never</i> change. This class is convenient\n",
        "44": " * for {@code public static final} sets (\"constant sets\") and also lets you\n",
        "45": " * easily make a \"defensive copy\" of a set provided to your class by a caller.\n",
        "46": " *\n",
        "47": " * <p><b>Warning:</b> Like most sets, an {@code ImmutableSet} will not function\n",
        "48": " * correctly if an element is modified after being placed in the set. For this\n",
        "49": " * reason, and to avoid general confusion, it is strongly recommended to place\n",
        "50": " * only immutable objects into this collection.\n",
        "51": " *\n",
        "52": " * <p>This class has been observed to perform significantly better than {@link\n",
        "53": " * HashSet} for objects with very fast {@link Object#hashCode} implementations\n",
        "54": " * (as a well-behaved immutable object should). While this class's factory\n",
        "55": " * methods create hash-based instances, the {@link ImmutableSortedSet} subclass\n",
        "56": " * performs binary searches instead.\n",
        "57": " *\n",
        "58": " * <p><b>Note:</b> Although this class is not final, it cannot be subclassed\n",
        "59": " * outside its package as it has no public or protected constructors. Thus,\n",
        "60": " * instances of this type are guaranteed to be immutable.\n",
        "61": " *\n",
        "62": " * <p>See the Guava User Guide article on <a href=\n",
        "63": " * \"http://code.google.com/p/guava-libraries/wiki/ImmutableCollectionsExplained\">\n",
        "64": " * immutable collections</a>.\n",
        "65": " *\n",
        "66": " * @see ImmutableList\n",
        "67": " * @see ImmutableMap\n",
        "68": " * @author Kevin Bourrillion\n",
        "69": " * @author Nick Kralevich\n",
        "77": "   * Returns the empty immutable set. This set behaves and performs comparably\n",
        "78": "   * to {@link Collections#emptySet}, and is preferable mainly for consistency\n",
        "79": "   * and maintainability of your code.\n",
        "81": "  // Casting to any type is safe because the set will never hold any elements.\n",
        "82": "  @SuppressWarnings({\"unchecked\"})\n",
        "88": "   * Returns an immutable set containing a single element. This set behaves and\n",
        "89": "   * performs comparably to {@link Collections#singleton}, but will not accept\n",
        "90": "   * a null element. It is preferable mainly for consistency and\n",
        "91": "   * maintainability of your code.\n",
        "98": "   * Returns an immutable set containing the given elements, in order. Repeated\n",
        "99": "   * occurrences of an element (according to {@link Object#equals}) after the\n",
        "100": "   * first are ignored.\n",
        "101": "   *\n",
        "102": "   * @throws NullPointerException if any element is null\n",
        "109": "   * Returns an immutable set containing the given elements, in order. Repeated\n",
        "110": "   * occurrences of an element (according to {@link Object#equals}) after the\n",
        "111": "   * first are ignored.\n",
        "112": "   *\n",
        "113": "   * @throws NullPointerException if any element is null\n",
        "120": "   * Returns an immutable set containing the given elements, in order. Repeated\n",
        "121": "   * occurrences of an element (according to {@link Object#equals}) after the\n",
        "122": "   * first are ignored.\n",
        "123": "   *\n",
        "124": "   * @throws NullPointerException if any element is null\n",
        "131": "   * Returns an immutable set containing the given elements, in order. Repeated\n",
        "132": "   * occurrences of an element (according to {@link Object#equals}) after the\n",
        "133": "   * first are ignored.\n",
        "134": "   *\n",
        "135": "   * @throws NullPointerException if any element is null\n",
        "142": "   * Returns an immutable set containing the given elements, in order. Repeated\n",
        "143": "   * occurrences of an element (according to {@link Object#equals}) after the\n",
        "144": "   * first are ignored.\n",
        "146": "   * @throws NullPointerException if any element is null\n",
        "264": "   * Returns an immutable set containing the given elements, in order. Repeated\n",
        "265": "   * occurrences of an element (according to {@link Object#equals}) after the\n",
        "266": "   * first are ignored.\n",
        "269": "   * @since 3.0\n",
        "271": "  public static <E> ImmutableSet<E> copyOf(E[] elements) {\n",
        "272": "    switch (elements.length) {\n",
        "273": "      case 0:\n",
        "274": "        return of();\n",
        "275": "      case 1:\n",
        "276": "        return of(elements[0]);\n",
        "277": "      default:\n",
        "278": "        return construct(elements.length, elements.clone());\n",
        "283": "   * Returns an immutable set containing the given elements, in order. Repeated\n",
        "284": "   * occurrences of an element (according to {@link Object#equals}) after the\n",
        "285": "   * first are ignored. This method iterates over {@code elements} at most once.\n",
        "286": "   *\n",
        "287": "   * <p>Note that if {@code s} is a {@code Set<String>}, then {@code\n",
        "288": "   * ImmutableSet.copyOf(s)} returns an {@code ImmutableSet<String>} containing\n",
        "289": "   * each of the strings in {@code s}, while {@code ImmutableSet.of(s)} returns\n",
        "290": "   * a {@code ImmutableSet<Set<String>>} containing one element (the given set\n",
        "291": "   * itself).\n",
        "293": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "294": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "295": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "306": "   * Returns an immutable set containing the given elements, in order. Repeated\n",
        "307": "   * occurrences of an element (according to {@link Object#equals}) after the\n",
        "308": "   * first are ignored.\n",
        "329": "   * Returns an immutable set containing the given elements, in order. Repeated\n",
        "330": "   * occurrences of an element (according to {@link Object#equals}) after the\n",
        "331": "   * first are ignored. This method iterates over {@code elements} at most\n",
        "332": "   * once.\n",
        "333": "   *\n",
        "334": "   * <p>Note that if {@code s} is a {@code Set<String>}, then {@code\n",
        "335": "   * ImmutableSet.copyOf(s)} returns an {@code ImmutableSet<String>} containing\n",
        "336": "   * each of the strings in {@code s}, while {@code ImmutableSet.of(s)} returns\n",
        "337": "   * a {@code ImmutableSet<Set<String>>} containing one element (the given set\n",
        "338": "   * itself).\n",
        "339": "   *\n",
        "340": "   * <p><b>Note:</b> Despite what the method name suggests, {@code copyOf} will\n",
        "341": "   * return constant-space views, rather than linear-space copies, of some\n",
        "342": "   * inputs known to be immutable. For some other immutable inputs, such as key\n",
        "343": "   * sets of an {@code ImmutableMap}, it still performs a copy in order to avoid\n",
        "344": "   * holding references to the values of the map. The heuristics used in this\n",
        "345": "   * decision are undocumented and subject to change except that:\n",
        "346": "   * <ul>\n",
        "347": "   * <li>A full copy will be done of any {@code ImmutableSortedSet}.</li>\n",
        "348": "   * <li>{@code ImmutableSet.copyOf()} is idempotent with respect to pointer\n",
        "349": "   * equality.</li>\n",
        "350": "   * </ul>\n",
        "351": "   *\n",
        "352": "   * <p>This method is safe to use even when {@code elements} is a synchronized\n",
        "353": "   * or concurrent collection that is currently being modified by another\n",
        "354": "   * thread.\n",
        "357": "   * @since 7.0 (source-compatible since 2.0)\n",
        "359": "  public static <E> ImmutableSet<E> copyOf(Collection<? extends E> elements) {\n",
        "360": "    /*\n",
        "361": "     * TODO(user): consider checking for ImmutableAsList here\n",
        "362": "     * TODO(user): consider checking for Multiset here\n",
        "363": "     */\n",
        "364": "    if (elements instanceof ImmutableSet\n",
        "365": "        && !(elements instanceof ImmutableSortedSet)) {\n",
        "366": "      @SuppressWarnings(\"unchecked\") // all supported methods are covariant\n",
        "367": "      ImmutableSet<E> set = (ImmutableSet<E>) elements;\n",
        "368": "      if (!set.isPartialView()) {\n",
        "369": "        return set;\n",
        "370": "      }\n",
        "371": "    } else if (elements instanceof EnumSet) {\n",
        "372": "      return copyOfEnumSet((EnumSet) elements);\n",
        "374": "    Object[] array = elements.toArray();\n",
        "375": "    return construct(array.length, array);\n"
    }
}