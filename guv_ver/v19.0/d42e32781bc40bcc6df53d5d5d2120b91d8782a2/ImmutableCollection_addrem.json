{
    "addition": {
        "27": "import java.util.ArrayList;\n",
        "29": "import java.util.Collections;\n",
        "31": "import java.util.List;\n",
        "36": " * A subtype of {@link Collection} making additional guarantees: its contents will never change, it\n",
        "37": " * will never contain {@code null}, and its iteration order is deterministic.\n",
        "39": " * <p><b>Note:</b> {@code ImmutableCollection} itself exists primarily as a common supertype for\n",
        "40": " * more useful types like {@link ImmutableSet} and {@link ImmutableList}. Like {@code Collection},\n",
        "41": " * it has no defined {@link #equals} behavior, which can lead to surprises and bugs, so (like {@code\n",
        "42": " * Collection}) it should not be used directly.\n",
        "44": " * <p>Example usage: <pre>   {@code\n",
        "45": " *\n",
        "46": " *   class Foo {\n",
        "47": " *     private static final ImmutableSet<String> RESERVED_CODES =\n",
        "48": " *         ImmutableSet.of(\"AZ\", \"CQ\", \"ZX\");\n",
        "49": " *\n",
        "50": " *     private final ImmutableSet<String> codes;\n",
        "51": " *\n",
        "52": " *     public Foo(Iterable<String> codes) {\n",
        "53": " *       this.codes = ImmutableSet.copyOf(codes);\n",
        "54": " *       checkArgument(Collections.disjoint(this.codes, RESERVED_CODES));\n",
        "55": " *   }\n",
        "56": " *\n",
        "57": " * <h3>About <i>all</i> public {@code Immutable-} types in this package</h3>\n",
        "58": " *\n",
        "59": " * <h4>Guarantees</h4>\n",
        "60": " *\n",
        "61": " * <p>Each makes the following guarantees:\n",
        "62": " *\n",
        "63": " * <ul>\n",
        "64": " * <li>Its contents can never change. Any attempt to add, remove or replace an element results in an\n",
        "65": " *     {@link UnsupportedOperationException}. Note that this guarantee of <i>immutability</i> is\n",
        "66": " *     stronger than that of {@link Collections#unmodifiableCollection}, which only prevents\n",
        "67": " *     modification operations from being invoked on the reference it returns, while any other code\n",
        "68": " *     having a reference to the inner collection can still modify it at will.\n",
        "69": " * <li>It can never contain {@code null} as an element, key or value. An attempt to do so results in\n",
        "70": " *     a {@link NullPointerException}.\n",
        "71": " * <li>Its iteration order is deterministic. What that order is, specifically, depends on how the\n",
        "72": " *     collection was created. See the appropriate factory method for details.\n",
        "73": " * <li>It cannot be subclassed outside this package (which would permit these guarantees to be\n",
        "74": " *     violated).\n",
        "75": " * <li>It is thread-safe.\n",
        "76": " * </ul>\n",
        "77": " *\n",
        "78": " * <h4>Types, not implementations</h4>\n",
        "79": " *\n",
        "80": " * <p>Each of these public classes, such as {@code ImmutableList}, is a <i>type</i>, not a\n",
        "81": " * specific <i>implementation</i> (unlike the case of, say, {@link ArrayList}). That is, they should\n",
        "82": " * be thought of as interfaces in virtually every important sense, just ones that classes outside\n",
        "83": " * this package can't implement.\n",
        "84": " *\n",
        "85": " * <p>For your field types and method return types, use the immutable type (like {@code\n",
        "86": " * ImmutableList}) instead of the corresponding basic collection interface type (like {@link List})\n",
        "87": " * unless the semantic guarantees listed above are not considered relevant. On the other hand, a\n",
        "88": " * <i>parameter</i> type of {@code ImmutableList} can be a nuisance to callers; instead, accept\n",
        "89": " * {@link List} (or even {@link Iterable}) and pass it to {@link ImmutableList#copyOf(Collection)}\n",
        "90": " * yourself.\n",
        "91": " *\n",
        "92": " * <h4>Creation</h4>\n",
        "93": " *\n",
        "94": " * <p>With the exception of {@code ImmutableCollection} itself, each {@code Immutable} type provides\n",
        "95": " * the static operations you need to obtain instances of that type:\n",
        "96": " *\n",
        "97": " * <ul>\n",
        "98": " * <li>Static methods named {@code of} accepting an explicit list of elements or entries\n",
        "99": " * <li>Static methods named {@code copyOf} accepting an existing collection (or similar) whose\n",
        "100": " *     contents should be copied\n",
        "101": " * <li>A static nested {@code Builder} class which can be used to progressively populate a new\n",
        "102": " *     immutable instance\n",
        "103": " * </ul>\n",
        "104": " *\n",
        "105": " * <h4>Other common properties</h4>\n",
        "106": " *\n",
        "107": " * <ul>\n",
        "108": " * <li>View collections, such as {@link ImmutableMap#keySet} or {@link ImmutableList#subList},\n",
        "109": " *     return the appropriate {@code Immutable} type. This is true even when the language does not\n",
        "110": " *     permit the method's return type to express it (for example in the case of {@link\n",
        "111": " *     ImmutableListMultimap#asMap}).\n",
        "112": " *\n",
        "113": " * <h4>Performance notes</h4>\n",
        "114": " *\n",
        "115": " * <ul>\n",
        "116": " * <li>When a {@code copyOf} method is passed a collection that is already immutable, in most cases\n",
        "117": " *     it can return quickly without actually copying anything. This means that making defensive\n",
        "118": " *     copies at API boundaries as a habit is not necessarily expensive in the long run.\n",
        "119": " * <li>Implementations can be generally assumed to prioritize memory efficiency and speed of access\n",
        "120": " *     over speed of creation.\n",
        "121": " * <li>The performance of using the associated {@code Builder} class can generally be assumed to be\n",
        "122": " *     no worse, and possibly better, than creating a mutable collection and copying it.\n",
        "123": " * <li>Implementations generally do not cache hash codes. If your key type has a slow {@code\n",
        "124": " *     hashCode} implementation, it should cache it itself.\n",
        "125": " * </ul>\n",
        "126": " *\n",
        "127": " * <h4>Notable subtypes (not exhaustive)</h4>\n",
        "128": " *\n",
        "129": " * <ul>\n",
        "130": " * <li>{@code ImmutableCollection}\n",
        "131": " *     <ul>\n",
        "132": " *     <li>{@link ImmutableSet}\n",
        "133": " *         <ul>\n",
        "134": " *         <li>{@link ImmutableSortedSet}\n",
        "135": " *         </ul>\n",
        "136": " *     <li>{@link ImmutableList}\n",
        "137": " *     <li>{@link ImmutableMultiset}\n",
        "138": " *     </ul>\n",
        "139": " * <li>{@link ImmutableMap}\n",
        "140": " *     <ul>\n",
        "141": " *     <li>{@link ImmutableSortedMap}\n",
        "142": " *     <li>{@link ImmutableBiMap}\n",
        "143": " *     </ul>\n",
        "144": " * <li>{@link ImmutableMultimap}\n",
        "145": " *     <ul>\n",
        "146": " *     <li>{@link ImmutableListMultimap}\n",
        "147": " *     <li>{@link ImmutableSetMultimap}\n",
        "148": " *     </ul>\n",
        "149": " * <li>{@link ImmutableTable}\n",
        "150": " * <li>{@link ImmutableRangeSet}\n",
        "151": " * <li>{@link ImmutableRangeMap}\n",
        "152": " * </ul>\n",
        "153": " *\n",
        "154": " * <h3>See also</h3>\n",
        "155": " *\n",
        "156": " * <p>See the Guava User Guide article on <a href=\n",
        "157": " * \"http://code.google.com/p/guava-libraries/wiki/ImmutableCollectionsExplained\">\n",
        "158": " * immutable collections</a>.\n",
        "164": "// TODO(kevinb): I think we should push everything down to \"BaseImmutableCollection\" or something,\n",
        "165": "// just to do everything we can to emphasize the \"practically an interface\" nature of this class.\n",
        "283": "   * Returns an {@code ImmutableList} containing the same elements, in the same order, as this\n",
        "284": "   * collection.\n",
        "285": "   *\n",
        "286": "   * <p><b>Performance note:</b> in most cases this method can return quickly without actually\n",
        "287": "   * copying anything. The exact circumstances under which the copy is performed are undefined and\n",
        "288": "   * subject to change.\n"
    },
    "removed": {
        "33": " * An immutable collection. Does not permit null elements.\n",
        "35": " * <p>In addition to the {@link Collection} methods, this class has an {@link\n",
        "36": " * #asList()} method, which returns a list view of the collection's elements.\n",
        "38": " * <p><b>Note:</b> Although this class is not final, it cannot be subclassed\n",
        "39": " * outside of this package as it has no public or protected constructors. Thus,\n",
        "40": " * instances of this type are guaranteed to be immutable.\n",
        "42": " * @author Jesse Wilson\n",
        "164": "   * Returns a list view of the collection.\n"
    }
}