[{"func":{"oldfunccode":"d42e32781bc40bcc6df53d5d5d2120b91d8782a2/Codes_neg/Match_oldfunccode_d42e32781bc40bcc6df53d5d5d2120b91d8782a2_1.txt","newfunccode":"d42e32781bc40bcc6df53d5d5d2120b91d8782a2/Codes_neg/Match_newfunccode_d42e32781bc40bcc6df53d5d5d2120b91d8782a2_1.txt","newdoc":" fully variant implementation (never actually produces any Es)\n","newJdoc":"d42e32781bc40bcc6df53d5d5d2120b91d8782a2/Codes_neg/Match_newfuncnewJdoc_d42e32781bc40bcc6df53d5d5d2120b91d8782a2_1.txt","olddoc":"","oldJdoc":"d42e32781bc40bcc6df53d5d5d2120b91d8782a2/Codes_neg/Match_oldfuncoldJdoc_d42e32781bc40bcc6df53d5d5d2120b91d8782a2_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/d42e32781bc40bcc6df53d5d5d2120b91d8782a2/ImmutableSet","pathinproj":"guava/src/com/google/common/collect/ImmutableSet.java","addlines":[],"dellines":[82],"addcode":[],"delcode":["  @SuppressWarnings({\"unchecked\"})\n"],"methodSig":"public static ImmutableSet<E> of()"},"doc":{"oldfunccode":"d42e32781bc40bcc6df53d5d5d2120b91d8782a2/Codes_neg/Match_olddocfunccode_d42e32781bc40bcc6df53d5d5d2120b91d8782a2_1.txt","newfunccode":"d42e32781bc40bcc6df53d5d5d2120b91d8782a2/Codes_neg/Match_newdocfunccode_d42e32781bc40bcc6df53d5d5d2120b91d8782a2_1.txt","newdoc":"","newJdoc":"d42e32781bc40bcc6df53d5d5d2120b91d8782a2/Codes_neg/Match_newdocnewJdoc_d42e32781bc40bcc6df53d5d5d2120b91d8782a2_1.txt","olddoc":"","oldJdoc":"d42e32781bc40bcc6df53d5d5d2120b91d8782a2/Codes_neg/Match_olddocJdoc_d42e32781bc40bcc6df53d5d5d2120b91d8782a2_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/d42e32781bc40bcc6df53d5d5d2120b91d8782a2/ImmutableSet","pathinproj":"guava/src/com/google/common/collect/ImmutableSet.java","addlines":[256,258,259,260,261,254,255],"dellines":[288,289,290,291,293,294,295,283,284,285,286,287],"addcode":["   * Returns an immutable set containing each of {@code elements}, minus duplicates, in the order\n","   * each appears first in the source iterable. This method iterates over {@code elements} only\n","   * once.\n","   * <p><b>Performance note:</b> In certain cases when {@code elements} is an {@link\n","   * ImmutableCollection}, its data will be reused directly without copying; the {@code elements}\n","   * instance itself might even be returned. The specific circumstances in which these optimizations\n","   * happen are undefined and subject to change.\n"],"delcode":["   * Returns an immutable set containing the given elements, in order. Repeated\n","   * occurrences of an element (according to {@link Object#equals}) after the\n","   * first are ignored. This method iterates over {@code elements} at most once.\n","   *\n","   * <p>Note that if {@code s} is a {@code Set<String>}, then {@code\n","   * ImmutableSet.copyOf(s)} returns an {@code ImmutableSet<String>} containing\n","   * each of the strings in {@code s}, while {@code ImmutableSet.of(s)} returns\n","   * a {@code ImmutableSet<Set<String>>} containing one element (the given set\n","   * itself).\n","   * <p>Despite the method name, this method attempts to avoid actually copying\n","   * the data when it is safe to do so. The exact circumstances under which a\n","   * copy will or will not be performed are undocumented and subject to change.\n"],"methodSig":"public static ImmutableSet<E> copyOf(Iterable<? extends E> elements)"},"id":1,"flag":1,"commit":"d42e32781bc40bcc6df53d5d5d2120b91d8782a2"},{"func":{"oldfunccode":"d42e32781bc40bcc6df53d5d5d2120b91d8782a2/Codes_neg/Match_oldfunccode_d42e32781bc40bcc6df53d5d5d2120b91d8782a2_2.txt","newfunccode":"d42e32781bc40bcc6df53d5d5d2120b91d8782a2/Codes_neg/Match_newfunccode_d42e32781bc40bcc6df53d5d5d2120b91d8782a2_2.txt","newdoc":"\n     * TODO(user): consider checking for ImmutableAsList here\n     * TODO(user): consider checking for Multiset here\n     \n all supported methods are covariant\n","newJdoc":"d42e32781bc40bcc6df53d5d5d2120b91d8782a2/Codes_neg/Match_newfuncnewJdoc_d42e32781bc40bcc6df53d5d5d2120b91d8782a2_2.txt","olddoc":"\n     * TODO(user): consider checking for ImmutableAsList here\n     * TODO(user): consider checking for Multiset here\n     \n all supported methods are covariant\n","oldJdoc":"d42e32781bc40bcc6df53d5d5d2120b91d8782a2/Codes_neg/Match_oldfuncoldJdoc_d42e32781bc40bcc6df53d5d5d2120b91d8782a2_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/d42e32781bc40bcc6df53d5d5d2120b91d8782a2/ImmutableSet","pathinproj":"guava/src/com/google/common/collect/ImmutableSet.java","addlines":[240,242,243,244,245,246,247,249,234,250,239],"dellines":[368,369,370,371,372,374,359,375,364,365,367],"addcode":["  public static <E> ImmutableSet<E> copyOf(Collection<? extends E> elements) {\n","    if (elements instanceof ImmutableSet\n","        && !(elements instanceof ImmutableSortedSet)) {\n","          ImmutableSet<E> set = (ImmutableSet<E>) elements;\n","      if (!set.isPartialView()) {\n","        return set;\n","      }\n","    } else if (elements instanceof EnumSet) {\n","      return copyOfEnumSet((EnumSet) elements);\n","    Object[] array = elements.toArray();\n","    return construct(array.length, array);\n"],"delcode":["  public static <E> ImmutableSet<E> copyOf(Collection<? extends E> elements) {\n","    if (elements instanceof ImmutableSet\n","        && !(elements instanceof ImmutableSortedSet)) {\n","      ImmutableSet<E> set = (ImmutableSet<E>) elements;\n","      if (!set.isPartialView()) {\n","        return set;\n","      }\n","    } else if (elements instanceof EnumSet) {\n","      return copyOfEnumSet((EnumSet) elements);\n","    Object[] array = elements.toArray();\n","    return construct(array.length, array);\n"],"methodSig":"public static ImmutableSet<E> copyOf(Collection<? extends E> elements)"},"doc":{"oldfunccode":"d42e32781bc40bcc6df53d5d5d2120b91d8782a2/Codes_neg/Match_olddocfunccode_d42e32781bc40bcc6df53d5d5d2120b91d8782a2_2.txt","newfunccode":"d42e32781bc40bcc6df53d5d5d2120b91d8782a2/Codes_neg/Match_newdocfunccode_d42e32781bc40bcc6df53d5d5d2120b91d8782a2_2.txt","newdoc":"","newJdoc":"d42e32781bc40bcc6df53d5d5d2120b91d8782a2/Codes_neg/Match_newdocnewJdoc_d42e32781bc40bcc6df53d5d5d2120b91d8782a2_2.txt","olddoc":"","oldJdoc":"d42e32781bc40bcc6df53d5d5d2120b91d8782a2/Codes_neg/Match_olddocJdoc_d42e32781bc40bcc6df53d5d5d2120b91d8782a2_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v19.0/d42e32781bc40bcc6df53d5d5d2120b91d8782a2/ImmutableSet","pathinproj":"guava/src/com/google/common/collect/ImmutableSet.java","addlines":[57,58,59],"dellines":[88,89,90,91],"addcode":["   * Returns an immutable set containing {@code element}. Preferred over {@link\n","   * Collections#singleton} for code consistency, {@code null} rejection, and because the return\n","   * type conveys the immutability guarantee.\n"],"delcode":["   * Returns an immutable set containing a single element. This set behaves and\n","   * performs comparably to {@link Collections#singleton}, but will not accept\n","   * a null element. It is preferable mainly for consistency and\n","   * maintainability of your code.\n"],"methodSig":"public static ImmutableSet<E> of(E element)"},"id":1,"flag":1,"commit":"d42e32781bc40bcc6df53d5d5d2120b91d8782a2"}]