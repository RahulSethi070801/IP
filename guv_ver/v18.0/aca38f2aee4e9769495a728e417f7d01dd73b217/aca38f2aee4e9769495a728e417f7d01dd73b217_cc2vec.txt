{"id": "aca38f2aee4e9769495a728e417f7d01dd73b217", "code": [{"0": "guava/src/com/google/common/cache/LongAdder.java", "added": {"1": [" * http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/jsr166e/LongAdder.java?revision=1.17\n"], "2": [" * <p>This class is usually preferable to {@link AtomicLong} when\n"], "3": [" * methods such as {@code equals}, {@code hashCode} and {@code\n", " * compareTo} because instances are expected to be mutated, and so are\n", " * not useful as collection keys.\n", " * java.util.concurrent.atomic.</em>\n"], "4": ["        Cell[] as; long b, v; int[] hc; Cell a; int n;\n", "            if ((hc = threadHashCode.get()) == null ||\n", "                as == null || (n = as.length) < 1 ||\n", "                (a = as[(n - 1) & hc[0]]) == null ||\n"], "5": ["     * atomic snapshot; invocation in the absence of concurrent\n"], "6": ["    private void writeObject(ObjectOutputStream s) throws IOException {\n", "            throws IOException, ClassNotFoundException {\n"]}, "removed": {"1": [" * http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/jsr166e/LongAdder.java?revision=1.8\n"], "2": [" * <p> This class is usually preferable to {@link AtomicLong} when\n"], "3": [" * methods such as {@code hashCode} and {@code compareTo} because\n", " * instances are expected to be mutated, and so are not useful as\n", " * collection keys.\n", " * java.util.concurrent.atomic<em>\n"], "4": ["        Cell[] as; long b, v; HashCode hc; Cell a; int n;\n", "            int h = (hc = threadHashCode.get()).code;\n", "            if (as == null || (n = as.length) < 1 ||\n", "                (a = as[(n - 1) & h]) == null ||\n"], "5": ["     * atomic snapshot: Invocation in the absence of concurrent\n"], "6": ["    private void writeObject(ObjectOutputStream s)\n", "        throws java.io.IOException {\n", "        throws IOException, ClassNotFoundException {\n"]}, "added_lines": {"1": [9], "2": [30], "3": [39, 40, 41, 44], "4": [70, 73, 74, 75], "5": [97], "6": [197, 203]}, "removed_lines": {"1": [9], "2": [30], "3": [39, 40, 41, 44], "4": [70, 73, 74, 75], "5": [97], "6": [197, 198, 204]}}, {"1": "guava/src/com/google/common/cache/Striped64.java", "added": {"1": [" * http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/jsr166e/Striped64.java?revision=1.9\n", "import javax.annotation.Nullable;\n", "\n"], "2": ["     * There is no need for a blocking lock; when the lock is not\n"], "3": ["     * ThreadLocal holding a single-slot int array holding hash code.\n", "     * Unlike the JDK8 version of this class, we use a suboptimal\n", "     * int[] representation to avoid introducing a new type that can\n", "     * impede class-unloading when ThreadLocals are not removed.\n", "    static final ThreadLocal<int[]> threadHashCode = new ThreadLocal<int[]>();\n", "     * Generator of new random hash codes\n", "    static final Random rng = new Random();\n"], "4": ["    final void retryUpdate(long x, @Nullable int[] hc, boolean wasUncontended) {\n", "        int h;\n", "        if (hc == null) {\n", "            threadHashCode.set(hc = new int[1]); // Initialize randomly\n", "            int r = rng.nextInt(); // Avoid zero to allow xorShift rehash\n", "            h = hc[0] = (r == 0) ? 1 : r;\n", "        }\n", "        else\n", "            h = hc[0];\n"], "5": ["                hc[0] = h;                      // Record index for next time\n"]}, "removed": {"1": [" * http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/jsr166e/Striped64.java?revision=1.7\n"], "2": ["     * There is no need for a blocking lock: When the lock is not\n"], "3": ["     * Holder for the thread-local hash code. The code is initially\n", "     * random, but may be set to a different value upon collisions.\n", "    static final class HashCode {\n", "        static final Random rng = new Random();\n", "        int code;\n", "        HashCode() {\n", "            int h = rng.nextInt(); // Avoid zero to allow xorShift rehash\n", "            code = (h == 0) ? 1 : h;\n", "        }\n", "    }\n", "     * The corresponding ThreadLocal class\n", "    static final class ThreadHashCode extends ThreadLocal<HashCode> {\n", "        public HashCode initialValue() { return new HashCode(); }\n", "    }\n", "\n", "    /**\n", "     * Static per-thread hash codes. Shared across all instances to\n", "     * reduce ThreadLocal pollution and because adjustments due to\n", "     * collisions in one table are likely to be appropriate for\n", "     * others.\n", "     */\n", "    static final ThreadHashCode threadHashCode = new ThreadHashCode();\n"], "4": ["    final void retryUpdate(long x, HashCode hc, boolean wasUncontended) {\n", "        int h = hc.code;\n"], "6": ["        hc.code = h;                            // Record index for next time\n"]}, "added_lines": {"1": [9, 16, 17], "2": [51], "3": [122, 123, 124, 125, 127, 130, 132], "4": [195, 196, 197, 198, 199, 200, 201, 202, 203], "5": [256]}, "removed_lines": {"1": [9], "2": [49], "3": [120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], "4": [208, 209], "6": [281]}}]}
