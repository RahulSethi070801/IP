{"id": "e0909001c161a50dd4d1dbb754b12d15dfda99b6", "code": [{"0": "guava-tests/test/com/google/common/io/ByteSourceTest.java", "added": {"1": ["import com.google.common.collect.Iterables;\n"], "2": ["  public void testConcat_infiniteIterable() throws IOException {\n", "    ByteSource source = ByteSource.wrap(new byte[] {0, 1, 2, 3});\n", "    Iterable<ByteSource> cycle = Iterables.cycle(ImmutableList.of(source));\n", "    ByteSource concatenated = ByteSource.concat(cycle);\n", "\n", "    byte[] expected = {0, 1, 2, 3, 0, 1, 2, 3};\n", "    assertArrayEquals(expected, concatenated.slice(0, 8).read());\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [31], "2": [257, 258, 259, 260, 261, 262, 263, 264, 265]}, "removed_lines": {}}, {"1": "guava-tests/test/com/google/common/io/CharSourceTest.java", "added": {"1": ["import com.google.common.collect.Iterables;\n", "import java.io.Reader;\n"], "2": ["  public void testConcat_infiniteIterable() throws IOException {\n", "    CharSource source = CharSource.wrap(\"abcd\");\n", "    Iterable<CharSource> cycle = Iterables.cycle(ImmutableList.of(source));\n", "    CharSource concatenated = CharSource.concat(cycle);\n", "\n", "    String expected = \"abcdabcd\";\n", "\n", "    // read the first 8 chars manually, since there's no equivalent to ByteSource.slice\n", "    // TODO(user): Add CharSource.slice?\n", "    StringBuilder builder = new StringBuilder();\n", "    Reader reader = concatenated.openStream(); // no need to worry about closing\n", "    for (int i = 0; i < 8; i++) {\n", "      builder.append((char) reader.read());\n", "    }\n", "    assertEquals(expected, builder.toString());\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [26, 33], "2": [182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198]}, "removed_lines": {}}, {"2": "guava/src/com/google/common/io/ByteSource.java", "added": {"1": ["   * Concatenates multiple {@link ByteSource} instances into a single source. Streams returned from\n", "   * the source will contain the concatenated data from the streams of the underlying sources.\n", "   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will\n", "   * close the open underlying stream.\n"], "2": ["   * Concatenates multiple {@link ByteSource} instances into a single source. Streams returned from\n", "   * the source will contain the concatenated data from the streams of the underlying sources.\n", "   *\n", "   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will\n", "   * close the open underlying stream.\n", "   * <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this\n", "   * method is called. This will fail if the iterator is infinite and may cause problems if the\n", "   * iterator eagerly fetches data for each source when iterated (rather than producing sources\n", "   * that only load data through their streams). Prefer using the {@link #concat(Iterable)}\n", "   * overload if possible.\n"], "3": ["   * Concatenates multiple {@link ByteSource} instances into a single source. Streams returned from\n", "   * the source will contain the concatenated data from the streams of the underlying sources.\n", "   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will\n", "   * close the open underlying stream.\n"], "4": ["    private final Iterable<? extends ByteSource> sources;\n", "      this.sources = checkNotNull(sources);\n"]}, "removed": {"1": ["   * Concatenates multiple {@link ByteSource} instances into a single source.\n", "   * Streams returned from the source will contain the concatenated data from\n", "   * the streams of the underlying sources.\n", "   * <p>Only one underlying stream will be open at a time. Closing the\n", "   * concatenated stream will close the open underlying stream.\n", "   * @throws NullPointerException if any of {@code sources} is {@code null}\n"], "2": ["   * Concatenates multiple {@link ByteSource} instances into a single source.\n", "   * Streams returned from the source will contain the concatenated data from\n", "   * the streams of the underlying sources.\n", "   * <p>Only one underlying stream will be open at a time. Closing the\n", "   * concatenated stream will close the open underlying stream.\n"], "3": ["   * Concatenates multiple {@link ByteSource} instances into a single source.\n", "   * Streams returned from the source will contain the concatenated data from\n", "   * the streams of the underlying sources.\n", "   * <p>Only one underlying stream will be open at a time. Closing the\n", "   * concatenated stream will close the open underlying stream.\n"], "4": ["    private final ImmutableList<ByteSource> sources;\n", "      this.sources = ImmutableList.copyOf(sources);\n"]}, "added_lines": {"1": [319, 320, 322, 323], "2": [334, 335, 336, 337, 338, 340, 341, 342, 343, 344], "3": [356, 357, 359, 360], "4": [553, 556]}, "removed_lines": {"1": [319, 320, 321, 323, 324, 328], "2": [336, 337, 338, 340, 341], "3": [353, 354, 355, 357, 358], "4": [551, 554]}}, {"3": "guava/src/com/google/common/io/ByteStreams.java", "added": {"1": ["  @SuppressWarnings(\"unchecked\") // suppress \"possible heap pollution\" warning in JDK7\n"]}, "removed": {}, "added_lines": {"1": [884]}, "removed_lines": {}}, {"4": "guava/src/com/google/common/io/CharSource.java", "added": {"1": ["   * Concatenates multiple {@link CharSource} instances into a single source. Streams returned from\n", "   * the source will contain the concatenated data from the streams of the underlying sources.\n", "   * <p>Only one underlying stream will be open at a time. Closing the  concatenated stream will\n", "   * close the open underlying stream.\n"], "2": ["   * Concatenates multiple {@link CharSource} instances into a single source. Streams returned from\n", "   * the source will contain the concatenated data from the streams of the underlying sources.\n", "   *\n", "   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will\n", "   * close the open underlying stream.\n", "   * <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this\n", "   * method is called. This will fail if the iterator is infinite and may cause problems if the\n", "   * iterator eagerly fetches data for each source when iterated (rather than producing sources\n", "   * that only load data through their streams). Prefer using the {@link #concat(Iterable)}\n", "   * overload if possible.\n"], "3": ["   * Concatenates multiple {@link CharSource} instances into a single source. Streams returned from\n", "   * the source will contain the concatenated data from the streams of the underlying sources.\n", "   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will\n", "   * close the open underlying stream.\n"], "4": ["    private final Iterable<? extends CharSource> sources;\n", "      this.sources = checkNotNull(sources);\n"]}, "removed": {"1": ["   * Concatenates multiple {@link CharSource} instances into a single source.\n", "   * Streams returned from the source will contain the concatenated data from\n", "   * the streams of the underlying sources.\n", "   * <p>Only one underlying stream will be open at a time. Closing the\n", "   * concatenated stream will close the open underlying stream.\n", "   * @throws NullPointerException if any of {@code sources} is {@code null}\n"], "2": ["   * Concatenates multiple {@link CharSource} instances into a single source.\n", "   * Streams returned from the source will contain the concatenated data from\n", "   * the streams of the underlying sources.\n", "   * <p>Only one underlying stream will be open at a time. Closing the\n", "   * concatenated stream will close the open underlying stream.\n"], "3": ["   * Concatenates multiple {@link CharSource} instances into a single source.\n", "   * Streams returned from the source will contain the concatenated data from\n", "   * the streams of the underlying sources.\n", "   * <p>Only one underlying stream will be open at a time. Closing the\n", "   * concatenated stream will close the open underlying stream.\n"], "4": ["    private final ImmutableList<CharSource> sources;\n", "      this.sources = ImmutableList.copyOf(sources);\n"]}, "added_lines": {"1": [232, 233, 235, 236], "2": [247, 248, 249, 250, 251, 253, 254, 255, 256, 257], "3": [269, 270, 272, 273], "4": [392, 395]}, "removed_lines": {"1": [232, 233, 234, 236, 237, 241], "2": [249, 250, 251, 253, 254], "3": [266, 267, 268, 270, 271], "4": [390, 393]}}, {"5": "guava/src/com/google/common/io/CharStreams.java", "added": {"1": ["  @SuppressWarnings(\"unchecked\") // suppress \"possible heap pollution\" warning in JDK7\n"]}, "removed": {}, "added_lines": {"1": [363]}, "removed_lines": {}}]}
