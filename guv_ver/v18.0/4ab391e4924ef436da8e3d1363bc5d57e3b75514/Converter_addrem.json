{
    "addition": {
        "103": "   * Returns a representation of {@code a} as an instance of type {@code B}. If {@code a} cannot be\n",
        "104": "   * converted, an unchecked exception (such as {@link IllegalArgumentException}) should be thrown.\n",
        "112": "   * Returns a representation of {@code b} as an instance of type {@code A}. If {@code b} cannot be\n",
        "113": "   * converted, an unchecked exception (such as {@link IllegalArgumentException}) should be thrown.\n",
        "117": "   * @throws UnsupportedOperationException if backward conversion is not implemented; this should be\n",
        "118": "   *     very rare. Note that if backward conversion is not only unimplemented but\n",
        "119": "   *     unimplement<i>able</i> (for example, consider a {@code Converter<Chicken, ChickenNugget>}),\n",
        "120": "   *     then this is not logically a {@code Converter} at all, and should just implement {@link\n",
        "121": "   *     Function}.\n",
        "138": "      // TODO(kevinb): we shouldn't be checking for a null result at runtime. Assert?\n",
        "147": "      // TODO(kevinb): we shouldn't be checking for a null result at runtime. Assert?\n",
        "345": "  // Static converters\n",
        "346": "\n",
        "347": "  private static final class FunctionBasedConverter<A, B>\n",
        "348": "      extends Converter<A, B> implements Serializable {\n",
        "349": "    private final Function<? super A, ? extends B> forwardFunction;\n",
        "350": "    private final Function<? super B, ? extends A> backwardFunction;\n",
        "351": "\n",
        "352": "    private FunctionBasedConverter(\n",
        "353": "        Function<? super A, ? extends B> forwardFunction,\n",
        "354": "        Function<? super B, ? extends A> backwardFunction) {\n",
        "355": "      this.forwardFunction = checkNotNull(forwardFunction);\n",
        "356": "      this.backwardFunction = checkNotNull(backwardFunction);\n",
        "357": "    }\n",
        "358": "\n",
        "359": "    @Override protected B doForward(A a) {\n",
        "360": "      return forwardFunction.apply(a);\n",
        "361": "    }\n",
        "362": "\n",
        "363": "    @Override protected A doBackward(B b) {\n",
        "364": "      return backwardFunction.apply(b);\n",
        "365": "    }\n",
        "366": "\n",
        "367": "    @Override public boolean equals(@Nullable Object object) {\n",
        "368": "      if (object instanceof FunctionBasedConverter) {\n",
        "369": "        FunctionBasedConverter<?, ?> that = (FunctionBasedConverter<?, ?>) object;\n",
        "370": "        return this.forwardFunction.equals(that.forwardFunction)\n",
        "371": "            && this.backwardFunction.equals(that.backwardFunction);\n",
        "372": "      }\n",
        "373": "      return false;\n",
        "374": "    }\n",
        "375": "\n",
        "376": "    @Override public int hashCode() {\n",
        "377": "      return forwardFunction.hashCode() * 31 + backwardFunction.hashCode();\n",
        "378": "    }\n",
        "379": "\n",
        "380": "    @Override public String toString() {\n",
        "381": "      return \"Converter.from(\" + forwardFunction + \", \" + backwardFunction + \")\";\n",
        "382": "    }\n",
        "383": "  }\n"
    },
    "removed": {
        "103": "   * Returns a representation of {@code a} as an instance of type {@code B}.\n",
        "111": "   * Returns a representation of {@code b} as an instance of type {@code A}.\n",
        "115": "   * @throws RuntimeException if {@code b} is not an instance this converter can convert; this\n",
        "116": "   *     should typically be an {@code IllegalArgumentException}\n",
        "117": "   * @throws UnsupportedOperationException if this converter cannot convert in the reverse\n",
        "118": "   *     direction. This should be very rare. Note that if backward conversion is not only\n",
        "119": "   *     unimplemented but unimplement<i>able</i> (for example, consider a {@code\n",
        "120": "   *     Converter<Chicken, ChickenNugget>}), then this is not logically a converter at all, and it\n",
        "121": "   *     would be misleading to extend this class.\n",
        "343": "  // Static singleton converters\n"
    }
}