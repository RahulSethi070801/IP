{"id": "90b6dbd70736b4426170f8fbab2e4a3c0a5b5a10", "code": [{"0": "guava-tests/test/com/google/common/io/FileBackedOutputStreamTest.java", "added": {"2": ["    ByteSource source = out.asByteSource();\n", "      assertTrue(ByteSource.wrap(data).slice(0, chunk1).contentEquals(source));\n"], "3": ["    // Check that source returns the right data\n", "    assertTrue(Arrays.equals(data, source.read()));\n"], "4": ["    ByteSource source = out.asByteSource();\n", "    assertTrue(Arrays.equals(data, source.read()));\n"], "5": ["    assertTrue(Arrays.equals(data, source.read()));\n", "    ByteSource source = out.asByteSource();\n", "    assertTrue(Arrays.equals(data, source.read()));\n", "    assertTrue(Arrays.equals(new byte[0], source.read()));\n", "    assertTrue(Arrays.equals(data, source.read()));\n"]}, "removed": {"1": ["import java.io.InputStream;\n"], "2": ["    InputSupplier<InputStream> supplier = out.getSupplier();\n", "      assertTrue(ByteStreams.equal(\n", "          ByteStreams.newInputStreamSupplier(data, 0, chunk1), supplier));\n"], "3": ["    // Check that supplier returns the right data\n", "    assertTrue(Arrays.equals(data, ByteStreams.toByteArray(supplier)));\n"], "4": ["    InputSupplier<InputStream> supplier = out.getSupplier();\n", "    assertTrue(Arrays.equals(data, ByteStreams.toByteArray(supplier)));\n"], "5": ["    assertTrue(Arrays.equals(data, ByteStreams.toByteArray(supplier)));\n", "    InputSupplier<InputStream> supplier = out.getSupplier();\n", "    assertTrue(Arrays.equals(data, ByteStreams.toByteArray(supplier)));\n", "    assertTrue(Arrays.equals(new byte[0], ByteStreams.toByteArray(supplier)));\n", "    assertTrue(Arrays.equals(data, ByteStreams.toByteArray(supplier)));\n"]}, "added_lines": {"2": [81, 88], "3": [102, 103], "4": [130, 133], "5": [144, 151, 154, 157, 160]}, "removed_lines": {"1": [23], "2": [82, 89, 90], "3": [104, 105], "4": [132, 135], "5": [146, 153, 156, 159, 162]}}, {"1": "guava/src/com/google/common/io/FileBackedOutputStream.java", "added": {"1": ["  private final ByteSource source;\n"], "2": ["   * not reset the data when the {@link ByteSource} returned by\n", "   * {@link #asByteSource} is finalized.\n"], "3": ["   * optionally resets the data when the {@link ByteSource} returned\n", "   * by {@link #asByteSource} is finalized.\n", "   *     be called when the {@link ByteSource} returned by {@link\n", "   *     #asByteSource} is finalized\n"], "4": ["      source = new ByteSource() {\n", "        public InputStream openStream() throws IOException {\n", "          return openInputStream();\n"], "5": ["      source = new ByteSource() {\n", "        public InputStream openStream() throws IOException {\n", "          return openInputStream();\n"], "6": ["   * by this stream. This method returns the same object as\n", "   * {@link #asByteSource()}.\n", "   *\n", "   * @deprecated Use {@link #asByteSource()} instead. This method is scheduled\n", "   *     to be removed in Guava 16.0.\n", "  @Deprecated\n", "    return asByteSource();\n", "  }\n", "\n", "  /**\n", "   * Returns a readable {@link ByteSource} view of the data that has been\n", "   * written to this stream.\n", "   *\n", "   * @since 15.0\n", "   */\n", "  public ByteSource asByteSource() {\n", "    return source;\n", "  private synchronized InputStream openInputStream() throws IOException {\n"]}, "removed": {"1": ["  private final InputSupplier<InputStream> supplier;\n"], "2": ["   * not reset the data when the {@link InputSupplier} returned by\n", "   * {@link #getSupplier} is finalized.\n"], "3": ["   * optionally resets the data when the {@link InputSupplier} returned\n", "   * by {@link #getSupplier} is finalized.\n", "   *     be called when the {@link InputSupplier} returned by {@link\n", "   *     #getSupplier} is finalized\n"], "4": ["      supplier = new InputSupplier<InputStream>() {\n", "        public InputStream getInput() throws IOException {\n", "          return openStream();\n"], "5": ["      supplier = new InputSupplier<InputStream>() {\n", "        public InputStream getInput() throws IOException {\n", "          return openStream();\n"], "6": ["   * by this stream.\n", "    return supplier;\n", "  private synchronized InputStream openStream() throws IOException {\n"]}, "added_lines": {"1": [45], "2": [69, 70], "3": [81, 82, 87, 88], "4": [97, 99, 100], "5": [112, 114, 115], "6": [123, 124, 125, 126, 127, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144]}, "removed_lines": {"1": [45], "2": [69, 70], "3": [81, 82, 87, 88], "4": [97, 99, 100], "5": [112, 114, 115], "6": [123, 126, 129]}}]}
