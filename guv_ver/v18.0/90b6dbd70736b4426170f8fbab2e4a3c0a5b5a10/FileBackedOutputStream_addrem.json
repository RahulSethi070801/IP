{
    "addition": {
        "45": "  private final ByteSource source;\n",
        "69": "   * not reset the data when the {@link ByteSource} returned by\n",
        "70": "   * {@link #asByteSource} is finalized.\n",
        "81": "   * optionally resets the data when the {@link ByteSource} returned\n",
        "82": "   * by {@link #asByteSource} is finalized.\n",
        "87": "   *     be called when the {@link ByteSource} returned by {@link\n",
        "88": "   *     #asByteSource} is finalized\n",
        "97": "      source = new ByteSource() {\n",
        "99": "        public InputStream openStream() throws IOException {\n",
        "100": "          return openInputStream();\n",
        "112": "      source = new ByteSource() {\n",
        "114": "        public InputStream openStream() throws IOException {\n",
        "115": "          return openInputStream();\n",
        "123": "   * by this stream. This method returns the same object as\n",
        "124": "   * {@link #asByteSource()}.\n",
        "125": "   *\n",
        "126": "   * @deprecated Use {@link #asByteSource()} instead. This method is scheduled\n",
        "127": "   *     to be removed in Guava 16.0.\n",
        "129": "  @Deprecated\n",
        "131": "    return asByteSource();\n",
        "132": "  }\n",
        "133": "\n",
        "134": "  /**\n",
        "135": "   * Returns a readable {@link ByteSource} view of the data that has been\n",
        "136": "   * written to this stream.\n",
        "137": "   *\n",
        "138": "   * @since 15.0\n",
        "139": "   */\n",
        "140": "  public ByteSource asByteSource() {\n",
        "141": "    return source;\n",
        "144": "  private synchronized InputStream openInputStream() throws IOException {\n"
    },
    "removed": {
        "45": "  private final InputSupplier<InputStream> supplier;\n",
        "69": "   * not reset the data when the {@link InputSupplier} returned by\n",
        "70": "   * {@link #getSupplier} is finalized.\n",
        "81": "   * optionally resets the data when the {@link InputSupplier} returned\n",
        "82": "   * by {@link #getSupplier} is finalized.\n",
        "87": "   *     be called when the {@link InputSupplier} returned by {@link\n",
        "88": "   *     #getSupplier} is finalized\n",
        "97": "      supplier = new InputSupplier<InputStream>() {\n",
        "99": "        public InputStream getInput() throws IOException {\n",
        "100": "          return openStream();\n",
        "112": "      supplier = new InputSupplier<InputStream>() {\n",
        "114": "        public InputStream getInput() throws IOException {\n",
        "115": "          return openStream();\n",
        "123": "   * by this stream.\n",
        "126": "    return supplier;\n",
        "129": "  private synchronized InputStream openStream() throws IOException {\n"
    }
}