{"id": "b8dc3cf5402498ec452f5d427122ae3686563ebc", "code": [{"0": "guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java", "added": {"1": ["    RateLimiter limiter = RateLimiter.createWithCapacity(ticker, 1.0, 10, TimeUnit.SECONDS);\n"]}, "removed": {"1": ["    RateLimiter limiter = RateLimiter.createBursty(ticker, 1.0, 10, TimeUnit.SECONDS);\n"]}, "added_lines": {"1": [156]}, "removed_lines": {"1": [156]}}, {"1": "guava/src/com/google/common/util/concurrent/RateLimiter.java", "added": {"1": ["  //                 {@code createWithCapacity(permitsPerSecond, 1, TimeUnit.SECONDS)}\".\n"], "2": ["  static RateLimiter createWithCapacity(\n"]}, "removed": {"1": ["  //                 {@code createBursty(permitsPerSecond, 1, TimeUnit.SECONDS)}\".\n"], "2": ["  /**\n", "   * Creates a {@code RateLimiter} with the specified stable throughput, given as\n", "   * \"permits per second\" (commonly referred to as <i>QPS</i>, queries per second),\n", "   * and the specified bursty behavior.\n", "   *\n", "   * <p>The returned {@code RateLimiter} ensures that on average no more than {@code\n", "   * permitsPerSecond} are issued during any given second, with sustained requests\n", "   * being smoothly spread over each second. When the incoming request rate exceeds\n", "   * {@code permitsPerSecond} the rate limiter will release one permit every {@code\n", "   * (1.0 / permitsPerSecond)} seconds.\n", "   *\n", "   * <p>When the rate limiter is unused, permits of up to {@code maxBurstBuildup} time\n", "   * period can be accumulated, and then produced upon request with no wait (in a burst).\n", "   * For example, {@code createBursty(2.0, 30, TimeUnit.SECONDS)} constructs a {@code RateLimiter}\n", "   * with a max rate of 2 qps, but if it is unused, it can save up permits that would have been\n", "   * produced in 30 seconds (at 2 qps rate, that's 60 permits), and give them to callers with no\n", "   * throttling. If the rate is changed to, say, 4 qps, then similarly the max saved permits\n", "   * will be {@code 4 * 30 = 120}.\n", "   *\n", "   * @param permitsPerSecond the rate of the returned {@code RateLimiter}, measured in\n", "   *        how many permits become available per second.\n", "   * @param maxBurstBuildup\n", "   * @param unit\n", "   */\n", "\n", "  /* public */ static RateLimiter createBursty(\n", "      double permitsPerSecond, long maxBurstBuildup, TimeUnit unit) {\n", "    return createBursty(SleepingTicker.SYSTEM_TICKER, permitsPerSecond, maxBurstBuildup, unit);\n", "  }\n", "\n", "  static RateLimiter createBursty(\n"]}, "added_lines": {"1": [227], "2": [287]}, "removed_lines": {"1": [227], "2": [286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317]}}]}
