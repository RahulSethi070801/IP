{"id": "050aca81c004448a4a86c2541466828e83d12ffb", "code": [{"0": "guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/MultisetsTest.java", "added": {"1": ["import java.util.List;\n"], "2": ["  public void testRemoveOccurrencesIterableEmpty() {\n", "    Multiset<String> multiset = HashMultiset.create();\n", "    Iterable<String> toRemove = Arrays.asList(\"a\", \"b\", \"a\");\n", "    assertFalse(Multisets.removeOccurrences(multiset, toRemove));\n", "    assertTrue(multiset.isEmpty());\n", "  }\n", "\n", "  public void testRemoveOccurrencesMultisetEmpty() {\n"], "3": ["  public void testRemoveEmptyOccurrencesMultiset() {\n"], "4": ["  public void testRemoveOccurrencesMultiset() {\n"], "5": ["  public void testRemoveEmptyOccurrencesIterable() {\n", "    Multiset<String> multiset =\n", "        TreeMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n", "    Iterable<String> toRemove = ImmutableList.of();\n", "    assertFalse(Multisets.removeOccurrences(multiset, toRemove));\n", "    ASSERT.that(multiset).has().exactly(\"a\", \"a\", \"b\").inOrder();\n", "  }\n", "\n", "  public void testRemoveOccurrencesMultisetIterable() {\n", "    Multiset<String> multiset =\n", "        TreeMultiset.create(Arrays.asList(\"a\", \"b\", \"a\", \"c\"));\n", "    List<String> toRemove = Arrays.asList(\"a\", \"b\", \"b\");\n", "    assertTrue(Multisets.removeOccurrences(multiset, toRemove));\n", "    ASSERT.that(multiset).has().exactly(\"a\", \"c\").inOrder();\n", "  }\n", "\n"]}, "removed": {"2": ["  public void testRemoveOccurrencesEmpty() {\n"], "3": ["  public void testRemoveEmptyOccurrences() {\n"], "4": ["  public void testRemoveOccurrences() {\n"]}, "added_lines": {"1": [28], "2": [78, 79, 80, 81, 82, 83, 84, 85], "3": [217], "4": [225], "5": [234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249]}, "removed_lines": {"2": [77], "3": [209], "4": [217]}}, {"1": "guava-gwt/test/com/google/common/collect/MultisetsTest_gwt.java", "added": {"1": ["public void testRemoveEmptyOccurrencesIterable() throws Exception {\n", "  testCase.testRemoveEmptyOccurrencesIterable();\n", "public void testRemoveEmptyOccurrencesMultiset() throws Exception {\n", "  testCase.testRemoveEmptyOccurrencesMultiset();\n", "public void testRemoveOccurrencesIterableEmpty() throws Exception {\n", "  testCase.testRemoveOccurrencesIterableEmpty();\n", "}\n", "\n", "public void testRemoveOccurrencesMultiset() throws Exception {\n", "  com.google.common.collect.MultisetsTest testCase = new com.google.common.collect.MultisetsTest();\n", "  testCase.testRemoveOccurrencesMultiset();\n", "}\n", "\n", "public void testRemoveOccurrencesMultisetEmpty() throws Exception {\n", "  com.google.common.collect.MultisetsTest testCase = new com.google.common.collect.MultisetsTest();\n", "  testCase.testRemoveOccurrencesMultisetEmpty();\n", "}\n", "\n", "public void testRemoveOccurrencesMultisetIterable() throws Exception {\n", "  com.google.common.collect.MultisetsTest testCase = new com.google.common.collect.MultisetsTest();\n", "  testCase.testRemoveOccurrencesMultisetIterable();\n"]}, "removed": {"1": ["public void testRemoveEmptyOccurrences() throws Exception {\n", "  testCase.testRemoveEmptyOccurrences();\n", "public void testRemoveOccurrences() throws Exception {\n", "  testCase.testRemoveOccurrences();\n", "public void testRemoveOccurrencesEmpty() throws Exception {\n", "  testCase.testRemoveOccurrencesEmpty();\n"]}, "added_lines": {"1": [86, 88, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113]}, "removed_lines": {"1": [86, 88, 91, 93, 96, 98]}}, {"2": "guava-tests/test/com/google/common/collect/MultisetsTest.java", "added": {"1": ["import java.util.List;\n"], "2": ["  public void testRemoveOccurrencesIterableEmpty() {\n", "    Multiset<String> multiset = HashMultiset.create();\n", "    Iterable<String> toRemove = Arrays.asList(\"a\", \"b\", \"a\");\n", "    assertFalse(Multisets.removeOccurrences(multiset, toRemove));\n", "    assertTrue(multiset.isEmpty());\n", "  }\n", "\n", "  public void testRemoveOccurrencesMultisetEmpty() {\n"], "3": ["  public void testRemoveEmptyOccurrencesMultiset() {\n"], "4": ["  public void testRemoveOccurrencesMultiset() {\n"], "5": ["  public void testRemoveEmptyOccurrencesIterable() {\n", "    Multiset<String> multiset =\n", "        TreeMultiset.create(Arrays.asList(\"a\", \"b\", \"a\"));\n", "    Iterable<String> toRemove = ImmutableList.of();\n", "    assertFalse(Multisets.removeOccurrences(multiset, toRemove));\n", "    ASSERT.that(multiset).has().exactly(\"a\", \"a\", \"b\").inOrder();\n", "  }\n", "\n", "  public void testRemoveOccurrencesMultisetIterable() {\n", "    Multiset<String> multiset =\n", "        TreeMultiset.create(Arrays.asList(\"a\", \"b\", \"a\", \"c\"));\n", "    List<String> toRemove = Arrays.asList(\"a\", \"b\", \"b\");\n", "    assertTrue(Multisets.removeOccurrences(multiset, toRemove));\n", "    ASSERT.that(multiset).has().exactly(\"a\", \"c\").inOrder();\n", "  }\n", "\n"]}, "removed": {"2": ["  public void testRemoveOccurrencesEmpty() {\n"], "3": ["  public void testRemoveEmptyOccurrences() {\n"], "4": ["  public void testRemoveOccurrences() {\n"]}, "added_lines": {"1": [30], "2": [80, 81, 82, 83, 84, 85, 86, 87], "3": [219], "4": [227], "5": [236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251]}, "removed_lines": {"2": [79], "3": [211], "4": [219]}}, {"3": "guava/src/com/google/common/collect/Multisets.java", "added": {"1": ["   * to, albeit sometimes more efficient than, the following: <pre>   {@code\n"], "2": ["      Multiset<?> multisetToModify, Iterable<?> occurrencesToRemove) {\n", "    if (occurrencesToRemove instanceof Multiset) {\n", "      return removeOccurrencesImpl(\n", "          multisetToModify, (Multiset<?>) occurrencesToRemove);\n", "    } else {\n", "      return removeOccurrencesImpl(multisetToModify, occurrencesToRemove);\n", "    }\n", "  }\n", "\n", "  private static boolean removeOccurrencesImpl(\n", "      Multiset<?> multisetToModify, Iterable<?> occurrencesToRemove) {\n", "    checkNotNull(multisetToModify);\n", "    checkNotNull(occurrencesToRemove);\n", "    boolean changed = false;\n", "    for (Object o : occurrencesToRemove) {\n", "      changed |= multisetToModify.remove(o);\n", "    }\n", "    return changed;\n", "   * Delegate that cares about the element types in multisetToModify.\n"]}, "removed": {"1": ["   * to, albeit more efficient than, the following: <pre>   {@code\n"], "2": ["      Multiset<?> multisetToModify, Multiset<?> occurrencesToRemove) {\n", "    return removeOccurrencesImpl(multisetToModify, occurrencesToRemove);\n", "   * Delegate that cares about the element types in occurrencesToRemove.\n"]}, "added_lines": {"1": [718], "2": [729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 750]}, "removed_lines": {"1": [718], "2": [729, 730, 734]}}]}
