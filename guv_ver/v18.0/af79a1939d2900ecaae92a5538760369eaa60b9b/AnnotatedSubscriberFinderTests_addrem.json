{
    "addition": {
        "30": " * Test that EventBus finds the correct subscribers.\n",
        "35": "public class AnnotatedSubscriberFinderTests {\n",
        "40": "    abstract H createSubscriber();\n",
        "42": "    private H subscriber;\n",
        "44": "    H getSubscriber() {\n",
        "45": "      return subscriber;\n",
        "50": "      subscriber = createSubscriber();\n",
        "52": "      bus.register(subscriber);\n",
        "58": "      subscriber = null;\n",
        "65": "  public static class BaseSubscriberFinderTest extends\n",
        "66": "      AbstractEventBusTest<BaseSubscriberFinderTest.Subscriber> {\n",
        "67": "    static class Subscriber {\n",
        "82": "      ASSERT.that(getSubscriber().nonSubscriberEvents).isEmpty();\n",
        "86": "      ASSERT.that(getSubscriber().subscriberEvents).has().item(EVENT);\n",
        "90": "    Subscriber createSubscriber() {\n",
        "91": "      return new Subscriber();\n",
        "122": "      ASSERT.that(getSubscriber().overriddenAndAnnotatedInSubclassEvents).has().item(EVENT);\n",
        "126": "      ASSERT.that(getSubscriber().overriddenInSubclassEvents).has().item(EVENT);\n",
        "130": "    SubClass createSubscriber() {\n",
        "202": "      ASSERT.that(getSubscriber().notOverriddenInSubclassEvents).has().item(EVENT);\n",
        "206": "      ASSERT.that(getSubscriber().overriddenNotAnnotatedInSubclassEvents).has().item(EVENT);\n",
        "211": "          .that(getSubscriber().differentlyOverriddenNotAnnotatedInSubclassGoodEvents)\n",
        "213": "      ASSERT.that(getSubscriber().differentlyOverriddenNotAnnotatedInSubclassBadEvents).isEmpty();\n",
        "217": "      ASSERT.that(getSubscriber().overriddenAndAnnotatedInSubclassEvents).has().item(EVENT);\n",
        "222": "          .that(getSubscriber().differentlyOverriddenAnnotatedInSubclassGoodEvents)\n",
        "224": "      ASSERT.that(getSubscriber().differentlyOverriddenAnnotatedInSubclassBadEvents).isEmpty();\n",
        "228": "    SubClass createSubscriber() {\n",
        "258": "      ASSERT.that(getSubscriber().overriddenAndAnnotatedInSubclassEvents).has().item(EVENT);\n",
        "262": "      ASSERT.that(getSubscriber().overriddenInSubclassNowhereAnnotatedEvents).isEmpty();\n",
        "266": "    SubClass createSubscriber() {\n",
        "305": "      ASSERT.that(getSubscriber().neitherOverriddenNorAnnotatedEvents).isEmpty();\n",
        "309": "      ASSERT.that(getSubscriber().overriddenInSubclassNowhereAnnotatedEvents).isEmpty();\n",
        "313": "      ASSERT.that(getSubscriber().overriddenAndAnnotatedInSubclassEvents).has().item(EVENT);\n",
        "317": "    SubClass createSubscriber() {\n",
        "323": "      AbstractEventBusTest<DeepInterfaceTest.SubscriberClass> {\n",
        "360": "    static class SubscriberClass implements Interface2 {\n",
        "415": "      ASSERT.that(getSubscriber().annotatedIn1Events).has().item(EVENT);\n",
        "419": "      ASSERT.that(getSubscriber().annotatedIn2Events).has().item(EVENT);\n",
        "423": "      ASSERT.that(getSubscriber().annotatedIn1And2Events).has().item(EVENT);\n",
        "427": "      ASSERT.that(getSubscriber().annotatedIn1And2AndClassEvents).has().item(EVENT);\n",
        "431": "      ASSERT.that(getSubscriber().declaredIn1AnnotatedIn2Events).has().item(EVENT);\n",
        "435": "      ASSERT.that(getSubscriber().declaredIn1AnnotatedInClassEvents).has().item(EVENT);\n",
        "439": "      ASSERT.that(getSubscriber().declaredIn2AnnotatedInClassEvents).has().item(EVENT);\n",
        "443": "      ASSERT.that(getSubscriber().nowhereAnnotatedEvents).isEmpty();\n",
        "447": "    SubscriberClass createSubscriber() {\n",
        "448": "      return new SubscriberClass();\n"
    },
    "removed": {
        "30": " * Test that EventBus finds the correct handlers.\n",
        "35": "public class AnnotatedHandlerFinderTests {\n",
        "40": "    abstract H createHandler();\n",
        "42": "    private H handler;\n",
        "44": "    H getHandler() {\n",
        "45": "      return handler;\n",
        "50": "      handler = createHandler();\n",
        "52": "      bus.register(handler);\n",
        "58": "      handler = null;\n",
        "65": "  public static class BaseHandlerFinderTest extends\n",
        "66": "      AbstractEventBusTest<BaseHandlerFinderTest.Handler> {\n",
        "67": "    static class Handler {\n",
        "82": "      ASSERT.that(getHandler().nonSubscriberEvents).isEmpty();\n",
        "86": "      ASSERT.that(getHandler().subscriberEvents).has().item(EVENT);\n",
        "90": "    Handler createHandler() {\n",
        "91": "      return new Handler();\n",
        "122": "      ASSERT.that(getHandler().overriddenAndAnnotatedInSubclassEvents).has().item(EVENT);\n",
        "126": "      ASSERT.that(getHandler().overriddenInSubclassEvents).has().item(EVENT);\n",
        "130": "    SubClass createHandler() {\n",
        "202": "      ASSERT.that(getHandler().notOverriddenInSubclassEvents).has().item(EVENT);\n",
        "206": "      ASSERT.that(getHandler().overriddenNotAnnotatedInSubclassEvents).has().item(EVENT);\n",
        "211": "          .that(getHandler().differentlyOverriddenNotAnnotatedInSubclassGoodEvents)\n",
        "213": "      ASSERT.that(getHandler().differentlyOverriddenNotAnnotatedInSubclassBadEvents).isEmpty();\n",
        "217": "      ASSERT.that(getHandler().overriddenAndAnnotatedInSubclassEvents).has().item(EVENT);\n",
        "222": "          .that(getHandler().differentlyOverriddenAnnotatedInSubclassGoodEvents)\n",
        "224": "      ASSERT.that(getHandler().differentlyOverriddenAnnotatedInSubclassBadEvents).isEmpty();\n",
        "228": "    SubClass createHandler() {\n",
        "258": "      ASSERT.that(getHandler().overriddenAndAnnotatedInSubclassEvents).has().item(EVENT);\n",
        "262": "      ASSERT.that(getHandler().overriddenInSubclassNowhereAnnotatedEvents).isEmpty();\n",
        "266": "    SubClass createHandler() {\n",
        "305": "      ASSERT.that(getHandler().neitherOverriddenNorAnnotatedEvents).isEmpty();\n",
        "309": "      ASSERT.that(getHandler().overriddenInSubclassNowhereAnnotatedEvents).isEmpty();\n",
        "313": "      ASSERT.that(getHandler().overriddenAndAnnotatedInSubclassEvents).has().item(EVENT);\n",
        "317": "    SubClass createHandler() {\n",
        "323": "      AbstractEventBusTest<DeepInterfaceTest.HandlerClass> {\n",
        "360": "    static class HandlerClass implements Interface2 {\n",
        "415": "      ASSERT.that(getHandler().annotatedIn1Events).has().item(EVENT);\n",
        "419": "      ASSERT.that(getHandler().annotatedIn2Events).has().item(EVENT);\n",
        "423": "      ASSERT.that(getHandler().annotatedIn1And2Events).has().item(EVENT);\n",
        "427": "      ASSERT.that(getHandler().annotatedIn1And2AndClassEvents).has().item(EVENT);\n",
        "431": "      ASSERT.that(getHandler().declaredIn1AnnotatedIn2Events).has().item(EVENT);\n",
        "435": "      ASSERT.that(getHandler().declaredIn1AnnotatedInClassEvents).has().item(EVENT);\n",
        "439": "      ASSERT.that(getHandler().declaredIn2AnnotatedInClassEvents).has().item(EVENT);\n",
        "443": "      ASSERT.that(getHandler().nowhereAnnotatedEvents).isEmpty();\n",
        "447": "    HandlerClass createHandler() {\n",
        "448": "      return new HandlerClass();\n"
    }
}