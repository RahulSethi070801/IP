{
    "addition": {
        "40": " * A {@link SubscriberFindingStrategy} for collecting all event subscriber methods that are marked\n",
        "41": " * with the {@link Subscribe} annotation.\n",
        "46": "class AnnotatedSubscriberFinder implements SubscriberFindingStrategy {\n",
        "53": "  private static final LoadingCache<Class<?>, ImmutableList<Method>> subscriberMethodsCache =\n",
        "69": "  public Multimap<Class<?>, EventSubscriber> findAllSubscribers(Object listener) {\n",
        "70": "    Multimap<Class<?>, EventSubscriber> methodsInListener = HashMultimap.create();\n",
        "75": "      EventSubscriber subscriber = makeSubscriber(listener, method);\n",
        "76": "      methodsInListener.put(eventType, subscriber);\n",
        "83": "      return subscriberMethodsCache.getUnchecked(clazz);\n",
        "123": "                + \" arguments.  Event subscriber methods must require a single argument.\");\n",
        "137": "   * Creates an {@code EventSubscriber} for subsequently calling {@code method} on\n",
        "139": "   * Selects an EventSubscriber implementation based on the annotations on\n",
        "142": "   * @param listener  object bearing the event subscriber method.\n",
        "143": "   * @param method  the event subscriber method to wrap in an EventSubscriber.\n",
        "144": "   * @return an EventSubscriber that will call {@code method} on {@code listener}\n",
        "147": "  private static EventSubscriber makeSubscriber(Object listener, Method method) {\n",
        "148": "    EventSubscriber wrapper;\n",
        "150": "      wrapper = new EventSubscriber(listener, method);\n",
        "152": "      wrapper = new SynchronizedEventSubscriber(listener, method);\n",
        "161": "   * @param method  subscriber method to check.\n",
        "162": "   * @return {@code true} if {@code subscriber} is marked as thread-safe,\n"
    },
    "removed": {
        "40": " * A {@link HandlerFindingStrategy} for collecting all event handler methods that are marked with\n",
        "41": " * the {@link Subscribe} annotation.\n",
        "46": "class AnnotatedHandlerFinder implements HandlerFindingStrategy {\n",
        "53": "  private static final LoadingCache<Class<?>, ImmutableList<Method>> handlerMethodsCache =\n",
        "69": "  public Multimap<Class<?>, EventHandler> findAllHandlers(Object listener) {\n",
        "70": "    Multimap<Class<?>, EventHandler> methodsInListener = HashMultimap.create();\n",
        "75": "      EventHandler handler = makeHandler(listener, method);\n",
        "76": "      methodsInListener.put(eventType, handler);\n",
        "83": "      return handlerMethodsCache.getUnchecked(clazz);\n",
        "123": "                + \" arguments.  Event handler methods must require a single argument.\");\n",
        "137": "   * Creates an {@code EventHandler} for subsequently calling {@code method} on\n",
        "139": "   * Selects an EventHandler implementation based on the annotations on\n",
        "142": "   * @param listener  object bearing the event handler method.\n",
        "143": "   * @param method  the event handler method to wrap in an EventHandler.\n",
        "144": "   * @return an EventHandler that will call {@code method} on {@code listener}\n",
        "147": "  private static EventHandler makeHandler(Object listener, Method method) {\n",
        "148": "    EventHandler wrapper;\n",
        "150": "      wrapper = new EventHandler(listener, method);\n",
        "152": "      wrapper = new SynchronizedEventHandler(listener, method);\n",
        "161": "   * @param method  handler method to check.\n",
        "162": "   * @return {@code true} if {@code handler} is marked as thread-safe,\n"
    }
}