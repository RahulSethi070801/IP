{
    "addition": {
        "100": " *     EventBus, so that its <em>subscriber methods</em> will receive events.</dd>\n",
        "102": " *     <em>subscriber methods</em>.</dt>\n",
        "103": " * <dt>Subscriber method</dt><dd>A public method that the EventBus should use to\n",
        "104": " *     deliver <em>posted</em> events.  Subscriber methods are marked by the\n",
        "126": " * <h3>Why use an annotation to mark subscriber methods, rather than requiring the\n",
        "130": " * so), while leaving you free to place event subscriber methods wherever you wish\n",
        "169": " * and the event subscriber has a clear and meaningful name.\n",
        "171": " * <h3>What about a generic {@code Subscriber<T>} interface?</h3>\n",
        "172": " * <p>Some have proposed a generic {@code Subscriber<T>} interface for EventBus\n",
        "177": " *   interface Subscriber<T> {\n",
        "196": " * <p>Event subscriber methods, on the other hand, must explicitly declare their\n",
        "198": " * searching for references to an event class will instantly find all subscriber\n",
        "199": " * methods for that event, and renaming the type will affect all subscriber methods\n",
        "202": " * <p>It's true that you can rename your {@code @Subscribed} event subscriber\n",
        "204": " * rename because, to Event Bus, the names of your subscriber methods are\n",
        "208": " * <h3>What happens if I {@code register} a listener without any subscriber\n",
        "218": " * hook into the system's event model simply by exposing subscriber methods.\n",
        "222": " * example, defining a subscriber method for a nonexistent event type.\n",
        "226": " * registered is checked for the <i>well-formedness</i> of its subscriber methods.\n",
        "245": " * <p>To handle such events, register a subscriber method for the {@code DeadEvent}\n",
        "246": " * class.  Whenever EventBus receives an event with no registered subscribers, it\n",
        "250": " * <h3>How do I test event listeners and their subscriber methods?</h3>\n",
        "251": " * <p>Because subscriber methods on your listener classes are normal methods, you can\n"
    },
    "removed": {
        "100": " *     EventBus, so that its <em>handler methods</em> will receive events.</dd>\n",
        "102": " *     <em>handler methods</em>.</dt>\n",
        "103": " * <dt>Handler method</dt><dd>A public method that the EventBus should use to\n",
        "104": " *     deliver <em>posted</em> events.  Handler methods are marked by the\n",
        "126": " * <h3>Why use an annotation to mark handler methods, rather than requiring the\n",
        "130": " * so), while leaving you free to place event handler methods wherever you wish\n",
        "169": " * and the event handler has a clear and meaningful name.\n",
        "171": " * <h3>What about a generic {@code Handler<T>} interface?</h3>\n",
        "172": " * <p>Some have proposed a generic {@code Handler<T>} interface for EventBus\n",
        "177": " *   interface Handler<T> {\n",
        "196": " * <p>Event handler methods, on the other hand, must explicitly declare their\n",
        "198": " * searching for references to an event class will instantly find all handler\n",
        "199": " * methods for that event, and renaming the type will affect all handler methods\n",
        "202": " * <p>It's true that you can rename your {@code @Subscribed} event handler\n",
        "204": " * rename because, to Event Bus, the names of your handler methods are\n",
        "208": " * <h3>What happens if I {@code register} a listener without any handler\n",
        "218": " * hook into the system's event model simply by exposing handler methods.\n",
        "222": " * example, defining a handler method for a nonexistent event type.\n",
        "226": " * registered is checked for the <i>well-formedness</i> of its handler methods.\n",
        "245": " * <p>To handle such events, register a handler method for the {@code DeadEvent}\n",
        "246": " * class.  Whenever EventBus receives an event with no registered handlers, it\n",
        "250": " * <h3>How do I test event listeners and their handler methods?</h3>\n",
        "251": " * <p>Because handler methods on your listener classes are normal methods, you can\n"
    }
}