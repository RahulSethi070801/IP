{"id": "9f7b2061de289f7167dbabf8fd48870b6f22f78d", "code": [{"0": "guava-tests/test/com/google/common/io/ResourcesTest.java", "added": {"1": ["import java.io.File;\n", "import java.io.PrintWriter;\n", "import java.net.URLClassLoader;\n"], "2": ["  public void testGetResource_contextClassLoader() throws IOException {\n", "    // Check that we can find a resource if it is visible to the context class\n", "    // loader, even if it is not visible to the loader of the Resources class.\n", "\n", "    File tempFile = createTempFile();\n", "    PrintWriter writer = new PrintWriter(tempFile, \"UTF-8\");\n", "    writer.println(\"rud a chur ar an m\u00e9ar fhada\");\n", "    writer.close();\n", "\n", "    // First check that we can't find it without setting the context loader.\n", "    // This is a sanity check that the test doesn't spuriously pass because\n", "    // the resource is visible to the system class loader.\n", "    try {\n", "      Resources.getResource(tempFile.getName());\n", "      fail(\"Should get IllegalArgumentException\");\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "\n", "    // Now set the context loader to one that should find the resource.\n", "    URL baseUrl = tempFile.getParentFile().toURI().toURL();\n", "    URLClassLoader loader = new URLClassLoader(new URL[] {baseUrl});\n", "    ClassLoader oldContextLoader =\n", "        Thread.currentThread().getContextClassLoader();\n", "    try {\n", "      Thread.currentThread().setContextClassLoader(loader);\n", "      URL url = Resources.getResource(tempFile.getName());\n", "      String text = Resources.toString(url, Charsets.UTF_8);\n", "      assertEquals(\"rud a chur ar an m\u00e9ar fhada\\n\", text);\n", "    } finally {\n", "      Thread.currentThread().setContextClassLoader(oldContextLoader);\n", "    }\n", "  }\n", "\n", "  public void testGetResource_contextClassLoaderNull() {\n", "    ClassLoader oldContextLoader =\n", "        Thread.currentThread().getContextClassLoader();\n", "    try {\n", "      Thread.currentThread().setContextClassLoader(null);\n", "      assertNotNull(\n", "          Resources.getResource(\"com/google/common/io/testdata/i18n.txt\"));\n", "      try {\n", "        Resources.getResource(\"no such resource\");\n", "        fail(\"Should get IllegalArgumentException\");\n", "      } catch (IllegalArgumentException expected) {\n", "      }\n", "    } finally {\n", "      Thread.currentThread().setContextClassLoader(oldContextLoader);\n", "    }\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [31, 33, 35], "2": [136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185]}, "removed_lines": {}}, {"1": "guava/src/com/google/common/io/Resources.java", "added": {"1": ["import com.google.common.base.Objects;\n"], "2": ["   * found using the {@linkplain Thread#getContextClassLoader() context class\n", "   * loader}. In simple environments, the context class loader will find\n", "   * resources from the class path. In environments where different threads can\n", "   * have different class loaders, for example app servers, the context class\n", "   * loader will typically have been set to an appropriate loader for the\n", "   * current thread.\n", "   * <p>In the unusual case where the context class loader is null, the class\n", "   * loader that loaded this class ({@code Resources}) will be used instead.\n", "   * \n", "   * @throws IllegalArgumentException if the resource is not found\n", "    ClassLoader loader = Objects.firstNonNull(\n", "        Thread.currentThread().getContextClassLoader(),\n", "        Resources.class.getClassLoader());\n", "    URL url = loader.getResource(resourceName);\n", "   * Given a {@code resourceName} that is relative to {@code contextClass},\n", "   * returns a {@code URL} pointing to the named resource.\n", "   * @throws IllegalArgumentException if the resource is not found\n"]}, "removed": {"2": ["   * found in the class path. {@code Resources.class.getClassLoader()} is used\n", "   * to locate the resource.\n", "   * @throws IllegalArgumentException if resource is not found\n", "    URL url = Resources.class.getClassLoader().getResource(resourceName);\n", "   * Returns a {@code URL} pointing to {@code resourceName} that is relative to\n", "   * {@code contextClass}, if the resource is found in the class path. \n", "   * @throws IllegalArgumentException if resource is not found\n"]}, "added_lines": {"1": [24], "2": [205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 218, 219, 220, 221, 227, 228, 230]}, "removed_lines": {"2": [204, 205, 207, 210, 216, 217, 219]}}]}
