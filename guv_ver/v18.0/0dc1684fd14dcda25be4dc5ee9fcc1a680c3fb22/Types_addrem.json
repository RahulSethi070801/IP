{
    "addition": {
        "53": "  private static final Function<Type, String> TYPE_TO_STRING =\n",
        "56": "          return Types.toString(from);\n",
        "289": "        builder.append(Types.toString(ownerType)).append('.');\n",
        "293": "          .append(COMMA_JOINER.join(transform(argumentsList, TYPE_TO_STRING)))\n",
        "409": "        builder.append(\" super \").append(Types.toString(lowerBound));\n",
        "412": "        builder.append(\" extends \").append(Types.toString(upperBound));\n",
        "447": "  // TODO(benyu): Once we are on Java 7, delete this abstraction\n",
        "479": "    static final JavaVersion CURRENT =\n",
        "480": "        (new TypeCapture<int[]>() {}.capture() instanceof Class)\n",
        "481": "        ? JAVA7 : JAVA6;\n"
    },
    "removed": {
        "32": "import java.lang.reflect.AnnotatedElement;\n",
        "36": "import java.lang.reflect.InvocationTargetException;\n",
        "37": "import java.lang.reflect.Method;\n",
        "56": "  private static final Function<Type, String> TYPE_NAME =\n",
        "59": "          return JavaVersion.CURRENT.typeName(from);\n",
        "292": "        builder.append(JavaVersion.CURRENT.typeName(ownerType)).append('.');\n",
        "296": "          .append(COMMA_JOINER.join(transform(argumentsList, TYPE_NAME)))\n",
        "412": "        builder.append(\" super \").append(JavaVersion.CURRENT.typeName(lowerBound));\n",
        "415": "        builder.append(\" extends \").append(JavaVersion.CURRENT.typeName(upperBound));\n",
        "450": "  // TODO(benyu): Once we are on Java 8, delete this abstraction\n",
        "479": "    },\n",
        "480": "    JAVA8 {\n",
        "481": "      @Override Type newArrayType(Type componentType) {\n",
        "482": "        return JAVA7.newArrayType(componentType);\n",
        "483": "      }\n",
        "484": "      @Override Type usedInGenericType(Type type) {\n",
        "485": "        return JAVA7.usedInGenericType(type);\n",
        "486": "      }\n",
        "487": "      @Override String typeName(Type type) {\n",
        "488": "        try {\n",
        "489": "          Method getTypeName = Type.class.getMethod(\"getTypeName\");\n",
        "490": "          return (String) getTypeName.invoke(type);\n",
        "491": "        } catch (NoSuchMethodException e) {\n",
        "492": "          throw new AssertionError(\"Type.getTypeName should be available in Java 8\");\n",
        "493": "        } catch (InvocationTargetException e) {\n",
        "494": "          throw new RuntimeException(e);\n",
        "495": "        } catch (IllegalAccessException e) {\n",
        "496": "          throw new RuntimeException(e);\n",
        "497": "        }\n",
        "498": "      }\n",
        "502": "    static final JavaVersion CURRENT;\n",
        "503": "    static {\n",
        "504": "      if (AnnotatedElement.class.isAssignableFrom(TypeVariable.class)) {\n",
        "505": "        CURRENT = JAVA8;\n",
        "506": "      } else if (new TypeCapture<int[]>() {}.capture() instanceof Class) {\n",
        "507": "        CURRENT = JAVA7;\n",
        "508": "      } else {\n",
        "509": "        CURRENT = JAVA6;\n",
        "510": "      }\n",
        "511": "    }\n",
        "512": "\n",
        "515": "    String typeName(Type type) {\n",
        "516": "      return Types.toString(type);\n",
        "517": "    }\n"
    }
}