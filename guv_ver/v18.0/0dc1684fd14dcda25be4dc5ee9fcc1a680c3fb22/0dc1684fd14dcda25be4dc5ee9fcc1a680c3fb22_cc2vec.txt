{"id": "0dc1684fd14dcda25be4dc5ee9fcc1a680c3fb22", "code": [{"0": "guava/src/com/google/common/reflect/Parameter.java", "added": {}, "removed": {"1": ["import com.google.common.collect.FluentIterable;\n"], "2": ["  /**\n", "   * @since 17.0\n", "   */\n", "  // @Override on JDK8\n", "  public <A extends Annotation> A[] getAnnotationsByType(Class<A> annotationType) {\n", "    return getDeclaredAnnotationsByType(annotationType);\n", "  }\n", "\n", "  /**\n", "   * @since 17.0\n", "   */\n", "  // @Override on JDK8\n", "  /**\n", "   * @since 17.0\n", "   */\n", "  // @Override on JDK8\n", "  @Nullable\n", "  public <A extends Annotation> A getDeclaredAnnotation(Class<A> annotationType) {\n", "    checkNotNull(annotationType);\n", "    return FluentIterable.from(annotations)\n", "        .filter(annotationType)\n", "        .first()\n", "        .orNull();\n", "  }\n", "\n", "  /**\n", "   * @since 17.0\n", "   */\n", "  // @Override on JDK8\n", "  public <A extends Annotation> A[]\n", "      getDeclaredAnnotationsByType(Class<A> annotationType) {\n", "    return FluentIterable.from(annotations)\n", "        .filter(annotationType)\n", "        .toArray(annotationType);\n", "  }\n", "\n"]}, "added_lines": {}, "removed_lines": {"1": [22], "2": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124]}}, {"1": "guava/src/com/google/common/reflect/Types.java", "added": {"2": ["  private static final Function<Type, String> TYPE_TO_STRING =\n", "          return Types.toString(from);\n"], "3": ["        builder.append(Types.toString(ownerType)).append('.');\n", "          .append(COMMA_JOINER.join(transform(argumentsList, TYPE_TO_STRING)))\n"], "4": ["        builder.append(\" super \").append(Types.toString(lowerBound));\n", "        builder.append(\" extends \").append(Types.toString(upperBound));\n"], "5": ["  // TODO(benyu): Once we are on Java 7, delete this abstraction\n"], "6": ["    static final JavaVersion CURRENT =\n", "        (new TypeCapture<int[]>() {}.capture() instanceof Class)\n", "        ? JAVA7 : JAVA6;\n"]}, "removed": {"1": ["import java.lang.reflect.AnnotatedElement;\n", "import java.lang.reflect.InvocationTargetException;\n", "import java.lang.reflect.Method;\n"], "2": ["  private static final Function<Type, String> TYPE_NAME =\n", "          return JavaVersion.CURRENT.typeName(from);\n"], "3": ["        builder.append(JavaVersion.CURRENT.typeName(ownerType)).append('.');\n", "          .append(COMMA_JOINER.join(transform(argumentsList, TYPE_NAME)))\n"], "4": ["        builder.append(\" super \").append(JavaVersion.CURRENT.typeName(lowerBound));\n", "        builder.append(\" extends \").append(JavaVersion.CURRENT.typeName(upperBound));\n"], "5": ["  // TODO(benyu): Once we are on Java 8, delete this abstraction\n"], "6": ["    },\n", "    JAVA8 {\n", "      @Override Type newArrayType(Type componentType) {\n", "        return JAVA7.newArrayType(componentType);\n", "      }\n", "      @Override Type usedInGenericType(Type type) {\n", "        return JAVA7.usedInGenericType(type);\n", "      }\n", "      @Override String typeName(Type type) {\n", "        try {\n", "          Method getTypeName = Type.class.getMethod(\"getTypeName\");\n", "          return (String) getTypeName.invoke(type);\n", "        } catch (NoSuchMethodException e) {\n", "          throw new AssertionError(\"Type.getTypeName should be available in Java 8\");\n", "        } catch (InvocationTargetException e) {\n", "          throw new RuntimeException(e);\n", "        } catch (IllegalAccessException e) {\n", "          throw new RuntimeException(e);\n", "        }\n", "      }\n", "    static final JavaVersion CURRENT;\n", "    static {\n", "      if (AnnotatedElement.class.isAssignableFrom(TypeVariable.class)) {\n", "        CURRENT = JAVA8;\n", "      } else if (new TypeCapture<int[]>() {}.capture() instanceof Class) {\n", "        CURRENT = JAVA7;\n", "      } else {\n", "        CURRENT = JAVA6;\n", "      }\n", "    }\n", "\n", "    String typeName(Type type) {\n", "      return Types.toString(type);\n", "    }\n"]}, "added_lines": {"2": [53, 56], "3": [289, 293], "4": [409, 412], "5": [447], "6": [479, 480, 481]}, "removed_lines": {"1": [32, 36, 37], "2": [56, 59], "3": [292, 296], "4": [412, 415], "5": [450], "6": [479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517]}}]}
