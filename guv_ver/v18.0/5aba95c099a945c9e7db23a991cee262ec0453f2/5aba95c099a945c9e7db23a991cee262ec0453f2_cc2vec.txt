{"id": "5aba95c099a945c9e7db23a991cee262ec0453f2", "code": [{"0": "guava/src/com/google/common/hash/Hashing.java", "added": {"1": ["   * Returns a general-purpose, <b>temporary-use</b>, non-cryptographic hash function. The algorithm\n", "   * the returned function implements is unspecified and subject to change without notice.\n", "   * <p><b>Warning:</b> a new random seed for these functions is chosen each time the {@code\n", "   * Hashing} class is loaded. <b>Do not use this method</b> if hash codes may escape the current\n", "   * process in any way, for example being sent over RPC, or saved to disk.\n", "   * <p>Repeated calls to this method on the same loaded {@code Hashing} class, using the same value\n", "   * for {@code minimumBits}, will return identically-behaving {@link HashFunction} instances.\n", "   * @param minimumBits a positive integer (can be arbitrarily large)\n", "   * @return a hash function, described above, that produces hash codes of length {@code\n", "   *     minimumBits} or greater\n"], "2": ["  /**\n", "   * Used to randomize {@link #goodFastHash} instances, so that programs which persist anything\n", "   * dependent on the hash codes they produce will fail sooner.\n", "   */\n", "  private static final int GOOD_FAST_HASH_SEED = (int) System.currentTimeMillis();\n", "\n", "  /** Returned by {@link #goodFastHash} when {@code minimumBits <= 32}. */\n", "  private static final HashFunction GOOD_FAST_HASH_FUNCTION_32 = murmur3_32(GOOD_FAST_HASH_SEED);\n", "\n", "  /** Returned by {@link #goodFastHash} when {@code 32 < minimumBits <= 128}. */\n", "  private static final HashFunction GOOD_FAST_HASH_FUNCTION_128 = murmur3_128(GOOD_FAST_HASH_SEED);\n", "\n"], "3": ["\n", "  private Hashing() {}\n"]}, "removed": {"1": ["  private Hashing() {}\n", "\n", "  /**\n", "   * Used to randomize {@link #goodFastHash} instances, so that programs which persist anything\n", "   * dependent on hashcodes of those, will fail sooner than later.\n", "   */\n", "  private static final int GOOD_FAST_HASH_SEED = (int) System.currentTimeMillis();\n", "\n", "  // Used by goodFastHash when minimumBits == 32.\n", "  private static final HashFunction GOOD_FAST_HASH_FUNCTION_32 = murmur3_32(GOOD_FAST_HASH_SEED);\n", "\n", "  // Used by goodFastHash when 32 < minimumBits <= 128.\n", "  private static final HashFunction GOOD_FAST_HASH_FUNCTION_128 = murmur3_128(GOOD_FAST_HASH_SEED);\n", "\n", "   * Returns a general-purpose, <b>non-cryptographic-strength</b>, streaming hash function that\n", "   * produces hash codes of length at least {@code minimumBits}. Users without specific\n", "   * compatibility requirements and who do not persist the hash codes are encouraged to\n", "   * choose this hash function.\n", "   * <p>Repeated calls to {@link #goodFastHash} with the same {@code minimumBits} value will\n", "   * return {@link HashFunction} instances with identical behavior (but not necessarily the\n", "   * same instance) for the duration of the current virtual machine.\n", "   * <p><b>Warning: the implementation is unspecified and is subject to change.</b>\n", "   * @throws IllegalArgumentException if {@code minimumBits} is not positive\n"]}, "added_lines": {"1": [47, 48, 50, 51, 52, 54, 55, 57, 58, 59], "2": [83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94], "3": [439, 440]}, "removed_lines": {"1": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 72]}}]}
