{
    "addition": {
        "47": "   * Returns a general-purpose, <b>temporary-use</b>, non-cryptographic hash function. The algorithm\n",
        "48": "   * the returned function implements is unspecified and subject to change without notice.\n",
        "50": "   * <p><b>Warning:</b> a new random seed for these functions is chosen each time the {@code\n",
        "51": "   * Hashing} class is loaded. <b>Do not use this method</b> if hash codes may escape the current\n",
        "52": "   * process in any way, for example being sent over RPC, or saved to disk.\n",
        "54": "   * <p>Repeated calls to this method on the same loaded {@code Hashing} class, using the same value\n",
        "55": "   * for {@code minimumBits}, will return identically-behaving {@link HashFunction} instances.\n",
        "57": "   * @param minimumBits a positive integer (can be arbitrarily large)\n",
        "58": "   * @return a hash function, described above, that produces hash codes of length {@code\n",
        "59": "   *     minimumBits} or greater\n",
        "83": "  /**\n",
        "84": "   * Used to randomize {@link #goodFastHash} instances, so that programs which persist anything\n",
        "85": "   * dependent on the hash codes they produce will fail sooner.\n",
        "86": "   */\n",
        "87": "  private static final int GOOD_FAST_HASH_SEED = (int) System.currentTimeMillis();\n",
        "88": "\n",
        "89": "  /** Returned by {@link #goodFastHash} when {@code minimumBits <= 32}. */\n",
        "90": "  private static final HashFunction GOOD_FAST_HASH_FUNCTION_32 = murmur3_32(GOOD_FAST_HASH_SEED);\n",
        "91": "\n",
        "92": "  /** Returned by {@link #goodFastHash} when {@code 32 < minimumBits <= 128}. */\n",
        "93": "  private static final HashFunction GOOD_FAST_HASH_FUNCTION_128 = murmur3_128(GOOD_FAST_HASH_SEED);\n",
        "94": "\n",
        "439": "\n",
        "440": "  private Hashing() {}\n"
    },
    "removed": {
        "46": "  private Hashing() {}\n",
        "47": "\n",
        "48": "  /**\n",
        "49": "   * Used to randomize {@link #goodFastHash} instances, so that programs which persist anything\n",
        "50": "   * dependent on hashcodes of those, will fail sooner than later.\n",
        "51": "   */\n",
        "52": "  private static final int GOOD_FAST_HASH_SEED = (int) System.currentTimeMillis();\n",
        "53": "\n",
        "54": "  // Used by goodFastHash when minimumBits == 32.\n",
        "55": "  private static final HashFunction GOOD_FAST_HASH_FUNCTION_32 = murmur3_32(GOOD_FAST_HASH_SEED);\n",
        "56": "\n",
        "57": "  // Used by goodFastHash when 32 < minimumBits <= 128.\n",
        "58": "  private static final HashFunction GOOD_FAST_HASH_FUNCTION_128 = murmur3_128(GOOD_FAST_HASH_SEED);\n",
        "59": "\n",
        "61": "   * Returns a general-purpose, <b>non-cryptographic-strength</b>, streaming hash function that\n",
        "62": "   * produces hash codes of length at least {@code minimumBits}. Users without specific\n",
        "63": "   * compatibility requirements and who do not persist the hash codes are encouraged to\n",
        "64": "   * choose this hash function.\n",
        "66": "   * <p>Repeated calls to {@link #goodFastHash} with the same {@code minimumBits} value will\n",
        "67": "   * return {@link HashFunction} instances with identical behavior (but not necessarily the\n",
        "68": "   * same instance) for the duration of the current virtual machine.\n",
        "70": "   * <p><b>Warning: the implementation is unspecified and is subject to change.</b>\n",
        "72": "   * @throws IllegalArgumentException if {@code minimumBits} is not positive\n"
    }
}