{
    "addition": {
        "640": "  private static final byte[] asciiDigits = new byte[128];\n",
        "641": "\n",
        "642": "  static {\n",
        "643": "    Arrays.fill(asciiDigits, (byte) -1);\n",
        "644": "    for (int i = 0; i <= 9; i++) {\n",
        "645": "      asciiDigits['0' + i] = (byte) i;\n",
        "646": "    }\n",
        "647": "    for (int i = 0; i <= 26; i++) {\n",
        "648": "      asciiDigits['A' + i] = (byte) (10 + i);\n",
        "649": "      asciiDigits['a' + i] = (byte) (10 + i);\n",
        "650": "    }\n",
        "651": "  }\n",
        "652": "\n",
        "653": "  private static int digit(char c) {\n",
        "654": "    return (c < 128) ? asciiDigits[c] : -1;\n",
        "655": "  }\n",
        "656": "\n",
        "664": "   * Additionally, this method only accepts ASCII digits, and returns\n",
        "665": "   * {@code null} if non-ASCII digits are present in the string.\n",
        "681": "    return tryParse(string, 10);\n",
        "682": "  }\n",
        "683": "\n",
        "684": "  /**\n",
        "685": "   * Parses the specified string as a signed integer value using the specified\n",
        "686": "   * radix. The ASCII character {@code '-'} (<code>'&#92;u002D'</code>) is\n",
        "687": "   * recognized as the minus sign.\n",
        "688": "   *\n",
        "689": "   * <p>Unlike {@link Integer#parseInt(String, int)}, this method returns\n",
        "690": "   * {@code null} instead of throwing an exception if parsing fails.\n",
        "691": "   * Additionally, this method only accepts ASCII digits, and returns\n",
        "692": "   * {@code null} if non-ASCII digits are present in the string.\n",
        "693": "   *\n",
        "694": "   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even\n",
        "695": "   * under JDK 7, despite the change to {@link Integer#parseInt(String, int)}\n",
        "696": "   * for that version.\n",
        "697": "   *\n",
        "698": "   * @param string the string representation of an integer value\n",
        "699": "   * @param radix the radix to use when parsing\n",
        "700": "   * @return the integer value represented by {@code string} using\n",
        "701": "   *     {@code radix}, or {@code null} if {@code string} has a length of zero\n",
        "702": "   *     or cannot be parsed as an integer value\n",
        "703": "   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or\n",
        "704": "   *     {@code radix > Character.MAX_RADIX}\n",
        "705": "   */\n",
        "706": "  @CheckForNull\n",
        "707": "  @GwtIncompatible(\"TODO\") static Integer tryParse(\n",
        "708": "      String string, int radix) {\n",
        "709": "    if (checkNotNull(string).isEmpty()) {\n",
        "710": "      return null;\n",
        "711": "    }\n",
        "712": "    if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX) {\n",
        "713": "      throw new IllegalArgumentException(\n",
        "714": "          \"radix must be between MIN_RADIX and MAX_RADIX but was \" + radix);\n",
        "715": "    }\n",
        "716": "    boolean negative = string.charAt(0) == '-';\n",
        "717": "    int index = negative ? 1 : 0;\n",
        "718": "    if (index == string.length()) {\n",
        "719": "      return null;\n",
        "720": "    }\n",
        "721": "    int digit = digit(string.charAt(index++));\n",
        "722": "    if (digit < 0 || digit >= radix) {\n",
        "723": "      return null;\n",
        "724": "    }\n",
        "725": "    int accum = -digit;\n",
        "726": "\n",
        "727": "    int cap = Integer.MIN_VALUE / radix;\n",
        "728": "\n",
        "729": "    while (index < string.length()) {\n",
        "730": "      digit = digit(string.charAt(index++));\n",
        "731": "      if (digit < 0 || digit >= radix || accum < cap) {\n",
        "732": "        return null;\n",
        "733": "      }\n",
        "734": "      accum *= radix;\n",
        "735": "      if (accum < Integer.MIN_VALUE + digit) {\n",
        "736": "        return null;\n",
        "737": "      }\n",
        "738": "      accum -= digit;\n",
        "739": "    }\n",
        "740": "\n",
        "741": "    if (negative) {\n",
        "742": "      return accum;\n",
        "743": "    } else if (accum == Integer.MIN_VALUE) {\n",
        "744": "      return null;\n",
        "745": "    } else {\n",
        "746": "      return -accum;\n",
        "747": "    }\n"
    },
    "removed": {
        "662": "    return AndroidInteger.tryParse(string, 10);\n"
    }
}