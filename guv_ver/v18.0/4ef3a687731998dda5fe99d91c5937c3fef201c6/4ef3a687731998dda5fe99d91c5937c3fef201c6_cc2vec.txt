{"id": "4ef3a687731998dda5fe99d91c5937c3fef201c6", "code": [{"0": "guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java", "added": {"1": ["        .setDefault(RateLimiter.class, RateLimiter.create(1.0))\n"]}, "removed": {}, "added_lines": {"1": [602]}, "removed_lines": {}}, {"1": "guava-tests/test/com/google/common/util/concurrent/PackageSanityTests.java", "added": {"1": ["public class PackageSanityTests extends AbstractPackageSanityTests {\n", "  public PackageSanityTests() {\n", "    setDefault(RateLimiter.class, RateLimiter.create(1.0));\n", "  }\n", "}\n"]}, "removed": {"1": ["public class PackageSanityTests extends AbstractPackageSanityTests {}\n"]}, "added_lines": {"1": [27, 28, 29, 30, 31]}, "removed_lines": {"1": [27]}}, {"2": "guava/src/com/google/common/util/concurrent/RateLimiter.java", "added": {"1": ["   * Acquires a single permit from this {@code RateLimiter}, blocking until the\n"], "2": ["    long microsToWait = reserve(permits);\n", "    ticker.sleepMicrosUninterruptibly(microsToWait);\n", "    return 1.0 * microsToWait / TimeUnit.SECONDS.toMicros(1L);\n", "  }\n", "\n", "  /**\n", "   * Reserves a single permit from this {@code RateLimiter} for future use, returning the number of\n", "   * microseconds until the reservation.\n", "   *\n", "   * <p>This method is equivalent to {@code reserve(1)}.\n", "   *\n", "   * @return time in microseconds to wait until the resource can be acquired.\n", "   */\n", "  long reserve() {\n", "    return reserve(1);\n", "  }\n", "\n", "  /**\n", "   * Reserves the given number of permits from this {@code RateLimiter} for future use, returning\n", "   * the number of microseconds until the reservation can be consumed.\n", "   *\n", "   * @return time in microseconds to wait until the resource can be acquired.\n", "   */\n", "  long reserve(int permits) {\n", "      return reserveNextTicket(permits, readSafeMicros());\n"], "3": ["   *\n", "   * <p>The return value is guaranteed to be non-negative.\n", "    long microsToNextFreeTicket = Math.max(0, nextFreeTicketMicros - nowMicros);\n"]}, "removed": {"1": ["   * Acquires the given number of permits from this {@code RateLimiter}, blocking until the\n"], "2": ["    long microsToWait;\n", "      microsToWait = reserveNextTicket(permits, readSafeMicros());\n", "    ticker.sleepMicrosUninterruptibly(microsToWait);\n", "    return 1.0 * microsToWait / TimeUnit.SECONDS.toMicros(1L);\n"], "3": ["    long microsToNextFreeTicket = nextFreeTicketMicros - nowMicros;\n"]}, "added_lines": {"1": [379], "2": [400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426], "3": [507, 508, 512]}, "removed_lines": {"1": [379], "2": [401, 403, 405, 406], "3": [489]}}]}
