{
    "addition": {
        "24": "import com.google.common.annotations.Beta;\n",
        "27": "import com.google.common.base.Converter;\n",
        "337": "  private static final class ShortConverter\n",
        "338": "      extends Converter<String, Short> implements Serializable {\n",
        "339": "    static final ShortConverter INSTANCE = new ShortConverter();\n",
        "340": "\n",
        "341": "    @Override\n",
        "342": "    protected Short doForward(String value) {\n",
        "343": "      // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n",
        "344": "      return value == null ? null : Short.decode(value);\n",
        "345": "    }\n",
        "346": "\n",
        "347": "    @Override\n",
        "348": "    protected String doBackward(Short value) {\n",
        "349": "      // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n",
        "350": "      return value == null ? null : value.toString();\n",
        "351": "    }\n",
        "352": "\n",
        "353": "    @Override\n",
        "354": "    public String toString() {\n",
        "355": "      return \"Shorts.stringConverter()\";\n",
        "356": "    }\n",
        "357": "\n",
        "358": "    private Object readResolve() {\n",
        "359": "      return INSTANCE;\n",
        "360": "    }\n",
        "361": "    private static final long serialVersionUID = 1;\n",
        "362": "  }\n",
        "363": "\n",
        "364": "  /**\n",
        "365": "   * Returns a serializable converter object that converts between strings and\n",
        "366": "   * shorts using {@link Short#decode} and {@link Short#toString()}.\n",
        "367": "   *\n",
        "368": "   * @since 16.0\n",
        "369": "   */\n",
        "370": "  @Beta\n",
        "371": "  public static Converter<String, Short> stringConverter() {\n",
        "372": "    return ShortConverter.INSTANCE;\n",
        "373": "  }\n",
        "374": "\n"
    },
    "removed": {}
}