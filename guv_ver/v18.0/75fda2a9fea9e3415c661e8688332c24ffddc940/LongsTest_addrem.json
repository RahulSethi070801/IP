{
    "addition": {
        "23": "import com.google.common.base.Converter;\n",
        "379": "  public void testStringConverter_convert() {\n",
        "380": "    Converter<String, Long> converter = Longs.stringConverter();\n",
        "381": "    assertEquals((Long) 1L, converter.convert(\"1\"));\n",
        "382": "    assertEquals((Long) 0L, converter.convert(\"0\"));\n",
        "383": "    assertEquals((Long) (-1L), converter.convert(\"-1\"));\n",
        "384": "    assertEquals((Long) 255L, converter.convert(\"0xff\"));\n",
        "385": "    assertEquals((Long) 255L, converter.convert(\"0xFF\"));\n",
        "386": "    assertEquals((Long) (-255L), converter.convert(\"-0xFF\"));\n",
        "387": "    assertEquals((Long) 255L, converter.convert(\"#0000FF\"));\n",
        "388": "    assertEquals((Long) 438L, converter.convert(\"0666\"));\n",
        "389": "  }\n",
        "390": "\n",
        "391": "  public void testStringConverter_convertError() {\n",
        "392": "    try {\n",
        "393": "      Longs.stringConverter().convert(\"notanumber\");\n",
        "394": "      fail();\n",
        "395": "    } catch (NumberFormatException expected) {\n",
        "396": "    }\n",
        "397": "  }\n",
        "398": "\n",
        "399": "  public void testStringConverter_nullConversions() {\n",
        "400": "    assertNull(Longs.stringConverter().convert(null));\n",
        "401": "    assertNull(Longs.stringConverter().reverse().convert(null));\n",
        "402": "  }\n",
        "403": "\n",
        "404": "  public void testStringConverter_reverse() {\n",
        "405": "    Converter<String, Long> converter = Longs.stringConverter();\n",
        "406": "    assertEquals(\"1\", converter.reverse().convert(1L));\n",
        "407": "    assertEquals(\"0\", converter.reverse().convert(0L));\n",
        "408": "    assertEquals(\"-1\", converter.reverse().convert(-1L));\n",
        "409": "    assertEquals(\"255\", converter.reverse().convert(0xffL));\n",
        "410": "    assertEquals(\"255\", converter.reverse().convert(0xFFL));\n",
        "411": "    assertEquals(\"-255\", converter.reverse().convert(-0xFFL));\n",
        "412": "    assertEquals(\"438\", converter.reverse().convert(0666L));\n",
        "413": "  }\n",
        "414": "\n"
    },
    "removed": {}
}