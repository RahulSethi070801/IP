{"id": "75fda2a9fea9e3415c661e8688332c24ffddc940", "code": [{"0": "guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Enums.java", "added": {"1": ["  // TODO(user): Deprecate in favor of Enums.stringConverter()\n"], "2": ["\n", "  /**\n", "   * Returns a converter that converts between strings and {@code enum} values\n", "   * of type {@code enumClass} using {@link Enum#valueOf(Class, String)} and\n", "   * {@link Enum#name()}.\n", "   * The converter will throw an {@code IllegalArgumentException} if the\n", "   * argument is not the name of any enum constant in the specified enum.\n", "   *\n", "   * @since 16.0\n", "   */\n", "  // TODO(user): Make this serializable.\n", "  public static <T extends Enum<T>> Converter<String, T> stringConverter(\n", "      final Class<T> enumClass) {\n", "    checkNotNull(enumClass);\n", "    return new Converter<String, T>() {\n", "      @Override\n", "      protected T doForward(String value) {\n", "        // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n", "        return value == null ? null : Enum.valueOf(enumClass, value);\n", "      }\n", "\n", "      @Override\n", "      protected String doBackward(T enumValue) {\n", "        // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n", "        return enumValue == null ? null : enumValue.name();\n", "      }\n", "      @Override public String toString() {\n", "        return \"Enums.stringConverter(\" + enumClass + \")\";\n", "      }\n", "    };\n", "  }\n"]}, "removed": {}, "added_lines": {"1": [49], "2": [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139]}, "removed_lines": {}}, {"1": "guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java", "added": {"1": ["import com.google.common.base.Converter;\n"], "2": ["  /**\n", "   * Returns a {@link Converter} that converts values using {@link BiMap#get bimap.get()},\n", "   * and whose inverse view converts values using\n", "   * {@link BiMap#inverse bimap.inverse()}{@code .get()}\n", "   *\n", "   * @param bimap the bimap to view as a converter\n", "   * @return a converter that is a view of the specified bimap\n", "   * @since 16.0\n", "   */\n", "  @Beta\n", "  public static <A, B> Converter<A, B> asConverter(final BiMap<A, B> bimap) {\n", "    checkNotNull(bimap);\n", "    return new Converter<A, B>() {\n", "      @Override\n", "      protected B doForward(A a) {\n", "        return convert(bimap, a);\n", "      }\n", "      @Override\n", "      protected A doBackward(B b) {\n", "        return convert(bimap.inverse(), b);\n", "      }\n", "\n", "      private /*static*/ <X, Y> Y convert(BiMap<X, Y> bimap, X input) {\n", "        // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n", "        if (input == null) {\n", "          return null;\n", "        }\n", "        Y output = bimap.get(input);\n", "        checkArgument(output != null, \"No non-null mapping present for input: %s\", input);\n", "        return output;\n", "      }\n", "    };\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [29], "2": [1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133]}, "removed_lines": {}}, {"2": "guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/Doubles.java", "added": {"1": ["import com.google.common.annotations.Beta;\n", "import com.google.common.base.Converter;\n"], "2": ["  private static final class DoubleConverter\n", "      extends Converter<String, Double> implements Serializable {\n", "    static final DoubleConverter INSTANCE = new DoubleConverter();\n", "\n", "    @Override\n", "    protected Double doForward(String value) {\n", "      // TODO(kevinb): remove null boilerplate (convert() will do it\n", "      // automatically)\n", "      return value == null ? null : Double.valueOf(value);\n", "    }\n", "\n", "    @Override\n", "    protected String doBackward(Double value) {\n", "      // TODO(kevinb): remove null boilerplate (convert() will do it\n", "      // automatically)\n", "      return value == null ? null : value.toString();\n", "    }\n", "\n", "    @Override\n", "    public String toString() {\n", "      return \"Doubles.stringConverter()\";\n", "    }\n", "\n", "    private Object readResolve() {\n", "      return INSTANCE;\n", "    }\n", "    private static final long serialVersionUID = 1;\n", "  }\n", "\n", "  /**\n", "   * Returns a serializable converter object that converts between strings and\n", "   * doubles using {@link Double#valueOf} and {@link Double#toString()}.\n", "   *\n", "   * @since 16.0\n", "   */\n", "  @Beta\n", "  public static Converter<String, Double> stringConverter() {\n", "    return DoubleConverter.INSTANCE;\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [26, 28], "2": [267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306]}, "removed_lines": {}}, {"3": "guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/Floats.java", "added": {"1": ["import com.google.common.annotations.Beta;\n", "import com.google.common.base.Converter;\n"], "2": ["  private static final class FloatConverter\n", "      extends Converter<String, Float> implements Serializable {\n", "    static final FloatConverter INSTANCE = new FloatConverter();\n", "\n", "    @Override\n", "    protected Float doForward(String value) {\n", "      // TODO(kevinb): remove null boilerplate (convert() will do it\n", "      // automatically)\n", "      return value == null ? null : Float.valueOf(value);\n", "    }\n", "\n", "    @Override\n", "    protected String doBackward(Float value) {\n", "      // TODO(kevinb): remove null boilerplate (convert() will do it\n", "      // automatically)\n", "      return value == null ? null : value.toString();\n", "    }\n", "\n", "    @Override\n", "    public String toString() {\n", "      return \"Floats.stringConverter()\";\n", "    }\n", "\n", "    private Object readResolve() {\n", "      return INSTANCE;\n", "    }\n", "    private static final long serialVersionUID = 1;\n", "  }\n", "\n", "  /**\n", "   * Returns a serializable converter object that converts between strings and\n", "   * floats using {@link Float#valueOf} and {@link Float#toString()}.\n", "   *\n", "   * @since 16.0\n", "   */\n", "  @Beta\n", "  public static Converter<String, Float> stringConverter() {\n", "    return FloatConverter.INSTANCE;\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [26, 28], "2": [264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303]}, "removed_lines": {}}, {"4": "guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/Ints.java", "added": {"1": ["import com.google.common.annotations.Beta;\n", "import com.google.common.base.Converter;\n"], "2": ["  private static final class IntConverter\n", "      extends Converter<String, Integer> implements Serializable {\n", "    static final IntConverter INSTANCE = new IntConverter();\n", "\n", "    @Override\n", "    // TODO(kevinb): remove null boilerplate (convert() will do it\n", "    // automatically)\n", "    protected Integer doForward(String value) {\n", "      return value == null ? null : Integer.decode(value);\n", "    }\n", "\n", "    @Override\n", "    protected String doBackward(Integer value) {\n", "      // TODO(kevinb): remove null boilerplate (convert() will do it\n", "      // automatically)\n", "      return value == null ? null : value.toString();\n", "    }\n", "\n", "    @Override\n", "    public String toString() {\n", "      return \"Ints.stringConverter()\";\n", "    }\n", "\n", "    private Object readResolve() {\n", "      return INSTANCE;\n", "    }\n", "    private static final long serialVersionUID = 1;\n", "  }\n", "\n", "  /**\n", "   * Returns a serializable converter object that converts between strings and\n", "   * integers using {@link Integer#decode} and {@link Integer#toString()}.\n", "   *\n", "   * @since 16.0\n", "   */\n", "  @Beta\n", "  public static Converter<String, Integer> stringConverter() {\n", "    return IntConverter.INSTANCE;\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [24, 26], "2": [284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323]}, "removed_lines": {}}, {"5": "guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/Shorts.java", "added": {"1": ["import com.google.common.annotations.Beta;\n", "import com.google.common.base.Converter;\n"], "2": ["  private static final class ShortConverter\n", "      extends Converter<String, Short> implements Serializable {\n", "    static final ShortConverter INSTANCE = new ShortConverter();\n", "\n", "    @Override\n", "    protected Short doForward(String value) {\n", "      // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n", "      return value == null ? null : Short.decode(value);\n", "    }\n", "\n", "    @Override\n", "    protected String doBackward(Short value) {\n", "      // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n", "      return value == null ? null : value.toString();\n", "    }\n", "\n", "    @Override\n", "    public String toString() {\n", "      return \"Shorts.stringConverter()\";\n", "    }\n", "\n", "    private Object readResolve() {\n", "      return INSTANCE;\n", "    }\n", "    private static final long serialVersionUID = 1;\n", "  }\n", "\n", "  /**\n", "   * Returns a serializable converter object that converts between strings and\n", "   * shorts using {@link Short#decode} and {@link Short#toString()}.\n", "   *\n", "   * @since 16.0\n", "   */\n", "  @Beta\n", "  public static Converter<String, Short> stringConverter() {\n", "    return ShortConverter.INSTANCE;\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [24, 26], "2": [285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322]}, "removed_lines": {}}, {"6": "guava-gwt/test-super/com/google/common/base/super/com/google/common/base/CaseFormatTest.java", "added": {"1": ["\n", "  public void testConverterToForward() {\n", "    assertEquals(\"FooBar\", UPPER_UNDERSCORE.converterTo(UPPER_CAMEL).convert(\"FOO_BAR\"));\n", "    assertEquals(\"fooBar\", UPPER_UNDERSCORE.converterTo(LOWER_CAMEL).convert(\"FOO_BAR\"));\n", "    assertEquals(\"FOO_BAR\", UPPER_CAMEL.converterTo(UPPER_UNDERSCORE).convert(\"FooBar\"));\n", "    assertEquals(\"FOO_BAR\", LOWER_CAMEL.converterTo(UPPER_UNDERSCORE).convert(\"fooBar\"));\n", "  }\n", "\n", "  public void testConverterToBackward() {\n", "    assertEquals(\"FOO_BAR\", UPPER_UNDERSCORE.converterTo(UPPER_CAMEL).reverse().convert(\"FooBar\"));\n", "    assertEquals(\"FOO_BAR\", UPPER_UNDERSCORE.converterTo(LOWER_CAMEL).reverse().convert(\"fooBar\"));\n", "    assertEquals(\"FooBar\", UPPER_CAMEL.converterTo(UPPER_UNDERSCORE).reverse().convert(\"FOO_BAR\"));\n", "    assertEquals(\"fooBar\", LOWER_CAMEL.converterTo(UPPER_UNDERSCORE).reverse().convert(\"FOO_BAR\"));\n", "  }\n", "\n", "  public void testConverter_nullConversions() {\n", "    for (CaseFormat outer : CaseFormat.values()) {\n", "      for (CaseFormat inner : CaseFormat.values()) {\n", "        assertNull(outer.converterTo(inner).convert(null));\n", "        assertNull(outer.converterTo(inner).reverse().convert(null));\n", "      }\n", "    }\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202]}, "removed_lines": {}}, {"7": "guava-gwt/test-super/com/google/common/base/super/com/google/common/base/EnumsTest.java", "added": {"1": ["  public void testStringConverter_convert() {\n", "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n", "    assertEquals(TestEnum.CHEETO, converter.convert(\"CHEETO\"));\n", "    assertEquals(TestEnum.HONDA, converter.convert(\"HONDA\"));\n", "    assertEquals(TestEnum.POODLE, converter.convert(\"POODLE\"));\n", "    assertNull(converter.convert(null));\n", "    assertNull(converter.reverse().convert(null));\n", "  }\n", "\n", "  public void testStringConverter_convertError() {\n", "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n", "    try {\n", "      converter.convert(\"xxx\");\n", "      fail();\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "  }\n", "\n", "  public void testStringConverter_reverse() {\n", "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n", "    assertEquals(\"CHEETO\", converter.reverse().convert(TestEnum.CHEETO));\n", "    assertEquals(\"HONDA\", converter.reverse().convert(TestEnum.HONDA));\n", "    assertEquals(\"POODLE\", converter.reverse().convert(TestEnum.POODLE));\n", "  }\n", "\n", "  public void testStringConverter_nullConversions() {\n", "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n", "    assertNull(converter.convert(null));\n", "    assertNull(converter.reverse().convert(null));\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124]}, "removed_lines": {}}, {"8": "guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/MapsTest.java", "added": {"1": ["import com.google.common.base.Converter;\n"], "2": ["  public void testAsConverter_nominal() throws Exception {\n", "    ImmutableBiMap<String, Integer> biMap = ImmutableBiMap.of(\n", "        \"one\", 1,\n", "        \"two\", 2);\n", "    Converter<String, Integer> converter = Maps.asConverter(biMap);\n", "    for (Entry<String, Integer> entry : biMap.entrySet()) {\n", "      assertSame(entry.getValue(), converter.convert(entry.getKey()));\n", "    }\n", "  }\n", "\n", "  public void testAsConverter_inverse() throws Exception {\n", "    ImmutableBiMap<String, Integer> biMap = ImmutableBiMap.of(\n", "        \"one\", 1,\n", "        \"two\", 2);\n", "    Converter<String, Integer> converter = Maps.asConverter(biMap);\n", "    for (Entry<String, Integer> entry : biMap.entrySet()) {\n", "      assertSame(entry.getKey(), converter.reverse().convert(entry.getValue()));\n", "    }\n", "  }\n", "\n", "  public void testAsConverter_noMapping() throws Exception {\n", "    ImmutableBiMap<String, Integer> biMap = ImmutableBiMap.of(\n", "        \"one\", 1,\n", "        \"two\", 2);\n", "    Converter<String, Integer> converter = Maps.asConverter(biMap);\n", "    try {\n", "      converter.convert(\"three\");\n", "      fail();\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "  }\n", "\n", "  public void testAsConverter_nullConversions() throws Exception {\n", "    ImmutableBiMap<String, Integer> biMap = ImmutableBiMap.of(\n", "        \"one\", 1,\n", "        \"two\", 2);\n", "    Converter<String, Integer> converter = Maps.asConverter(biMap);\n", "    assertNull(converter.convert(null));\n", "    assertNull(converter.reverse().convert(null));\n", "  }\n", "\n", "  public void testAsConverter_isAView() throws Exception {\n", "    BiMap<String, Integer> biMap = HashBiMap.create();\n", "    biMap.put(\"one\", 1);\n", "    biMap.put(\"two\", 2);\n", "    Converter<String, Integer> converter = Maps.asConverter(biMap);\n", "\n", "    assertSame(1, converter.convert(\"one\"));\n", "    assertSame(2, converter.convert(\"two\"));\n", "    try {\n", "      converter.convert(\"three\");\n", "      fail();\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "\n", "    biMap.put(\"three\", 3);\n", "\n", "    assertSame(1, converter.convert(\"one\"));\n", "    assertSame(2, converter.convert(\"two\"));\n", "    assertSame(3, converter.convert(\"three\"));\n", "  }\n", "\n", "  public void testAsConverter_withNullMapping() throws Exception {\n", "    BiMap<String, Integer> biMap = HashBiMap.create();\n", "    biMap.put(\"one\", 1);\n", "    biMap.put(\"two\", 2);\n", "    biMap.put(\"three\", null);\n", "    try {\n", "      Maps.asConverter(biMap).convert(\"three\");\n", "      fail();\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [25], "2": [843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916]}, "removed_lines": {}}, {"9": "guava-gwt/test-super/com/google/common/primitives/super/com/google/common/primitives/DoublesTest.java", "added": {"1": ["import com.google.common.base.Converter;\n"], "2": ["\n", "  public void testStringConverter_convert() {\n", "    Converter<String, Double> converter = Doubles.stringConverter();\n", "    assertEquals((Double) 1.0, converter.convert(\"1.0\"));\n", "    assertEquals((Double) 0.0, converter.convert(\"0.0\"));\n", "    assertEquals((Double) (-1.0), converter.convert(\"-1.0\"));\n", "    assertEquals((Double) 1.0, converter.convert(\"1\"));\n", "    assertEquals((Double) 0.0, converter.convert(\"0\"));\n", "    assertEquals((Double) (-1.0), converter.convert(\"-1\"));\n", "    assertEquals((Double) 1e6, converter.convert(\"1e6\"));\n", "    assertEquals((Double) 1e-6, converter.convert(\"1e-6\"));\n", "  }\n", "\n", "  public void testStringConverter_convertError() {\n", "    try {\n", "      Doubles.stringConverter().convert(\"notanumber\");\n", "      fail();\n", "    } catch (NumberFormatException expected) {\n", "    }\n", "  }\n", "\n", "  public void testStringConverter_nullConversions() {\n", "    assertNull(Doubles.stringConverter().convert(null));\n", "    assertNull(Doubles.stringConverter().reverse().convert(null));\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [23], "2": [396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422]}, "removed_lines": {}}, {"10": "guava-gwt/test-super/com/google/common/primitives/super/com/google/common/primitives/FloatsTest.java", "added": {"1": ["\n", "  public void testStringConverter_convertError() {\n", "    try {\n", "      Floats.stringConverter().convert(\"notanumber\");\n", "      fail();\n", "    } catch (NumberFormatException expected) {\n", "    }\n", "  }\n", "\n", "  public void testStringConverter_nullConversions() {\n", "    assertNull(Floats.stringConverter().convert(null));\n", "    assertNull(Floats.stringConverter().reverse().convert(null));\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400]}, "removed_lines": {}}, {"11": "guava-gwt/test-super/com/google/common/primitives/super/com/google/common/primitives/IntsTest.java", "added": {"1": ["import com.google.common.base.Converter;\n"], "2": ["\n", "  public void testStringConverter_convert() {\n", "    Converter<String, Integer> converter = Ints.stringConverter();\n", "    assertEquals((Integer) 1, converter.convert(\"1\"));\n", "    assertEquals((Integer) 0, converter.convert(\"0\"));\n", "    assertEquals((Integer) (-1), converter.convert(\"-1\"));\n", "    assertEquals((Integer) 255, converter.convert(\"0xff\"));\n", "    assertEquals((Integer) 255, converter.convert(\"0xFF\"));\n", "    assertEquals((Integer) (-255), converter.convert(\"-0xFF\"));\n", "    assertEquals((Integer) 255, converter.convert(\"#0000FF\"));\n", "    assertEquals((Integer) 438, converter.convert(\"0666\"));\n", "  }\n", "\n", "  public void testStringConverter_convertError() {\n", "    try {\n", "      Ints.stringConverter().convert(\"notanumber\");\n", "      fail();\n", "    } catch (NumberFormatException expected) {\n", "    }\n", "  }\n", "\n", "  public void testStringConverter_nullConversions() {\n", "    assertNull(Ints.stringConverter().convert(null));\n", "    assertNull(Ints.stringConverter().reverse().convert(null));\n", "  }\n", "\n", "  public void testStringConverter_reverse() {\n", "    Converter<String, Integer> converter = Ints.stringConverter();\n", "    assertEquals(\"1\", converter.reverse().convert(1));\n", "    assertEquals(\"0\", converter.reverse().convert(0));\n", "    assertEquals(\"-1\", converter.reverse().convert(-1));\n", "    assertEquals(\"255\", converter.reverse().convert(0xff));\n", "    assertEquals(\"255\", converter.reverse().convert(0xFF));\n", "    assertEquals(\"-255\", converter.reverse().convert(-0xFF));\n", "    assertEquals(\"438\", converter.reverse().convert(0666));\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [20], "2": [357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394]}, "removed_lines": {}}, {"12": "guava-gwt/test-super/com/google/common/primitives/super/com/google/common/primitives/LongsTest.java", "added": {"1": ["import com.google.common.base.Converter;\n"], "2": ["  public void testStringConverter_convert() {\n", "    Converter<String, Long> converter = Longs.stringConverter();\n", "    assertEquals((Long) 1L, converter.convert(\"1\"));\n", "    assertEquals((Long) 0L, converter.convert(\"0\"));\n", "    assertEquals((Long) (-1L), converter.convert(\"-1\"));\n", "    assertEquals((Long) 255L, converter.convert(\"0xff\"));\n", "    assertEquals((Long) 255L, converter.convert(\"0xFF\"));\n", "    assertEquals((Long) (-255L), converter.convert(\"-0xFF\"));\n", "    assertEquals((Long) 255L, converter.convert(\"#0000FF\"));\n", "    assertEquals((Long) 438L, converter.convert(\"0666\"));\n", "  }\n", "\n", "  public void testStringConverter_convertError() {\n", "    try {\n", "      Longs.stringConverter().convert(\"notanumber\");\n", "      fail();\n", "    } catch (NumberFormatException expected) {\n", "    }\n", "  }\n", "\n", "  public void testStringConverter_nullConversions() {\n", "    assertNull(Longs.stringConverter().convert(null));\n", "    assertNull(Longs.stringConverter().reverse().convert(null));\n", "  }\n", "\n", "  public void testStringConverter_reverse() {\n", "    Converter<String, Long> converter = Longs.stringConverter();\n", "    assertEquals(\"1\", converter.reverse().convert(1L));\n", "    assertEquals(\"0\", converter.reverse().convert(0L));\n", "    assertEquals(\"-1\", converter.reverse().convert(-1L));\n", "    assertEquals(\"255\", converter.reverse().convert(0xffL));\n", "    assertEquals(\"255\", converter.reverse().convert(0xFFL));\n", "    assertEquals(\"-255\", converter.reverse().convert(-0xFFL));\n", "    assertEquals(\"438\", converter.reverse().convert(0666L));\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [23], "2": [379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414]}, "removed_lines": {}}, {"13": "guava-gwt/test-super/com/google/common/primitives/super/com/google/common/primitives/ShortsTest.java", "added": {"1": ["import com.google.common.base.Converter;\n"], "2": ["\n", "  public void testStringConverter_convert() {\n", "    Converter<String, Short> converter = Shorts.stringConverter();\n", "    assertEquals((Short) (short) 1, converter.convert(\"1\"));\n", "    assertEquals((Short) (short) 0, converter.convert(\"0\"));\n", "    assertEquals((Short) (short) (-1), converter.convert(\"-1\"));\n", "    assertEquals((Short) (short) 255, converter.convert(\"0xff\"));\n", "    assertEquals((Short) (short) 255, converter.convert(\"0xFF\"));\n", "    assertEquals((Short) (short) (-255), converter.convert(\"-0xFF\"));\n", "    assertEquals((Short) (short) 255, converter.convert(\"#0000FF\"));\n", "    assertEquals((Short) (short) 438, converter.convert(\"0666\"));\n", "  }\n", "\n", "  public void testStringConverter_convertError() {\n", "    try {\n", "      Shorts.stringConverter().convert(\"notanumber\");\n", "      fail();\n", "    } catch (NumberFormatException expected) {\n", "    }\n", "  }\n", "\n", "  public void testStringConverter_nullConversions() {\n", "    assertNull(Shorts.stringConverter().convert(null));\n", "    assertNull(Shorts.stringConverter().reverse().convert(null));\n", "  }\n", "\n", "  public void testStringConverter_reverse() {\n", "    Converter<String, Short> converter = Shorts.stringConverter();\n", "    assertEquals(\"1\", converter.reverse().convert((short) 1));\n", "    assertEquals(\"0\", converter.reverse().convert((short) 0));\n", "    assertEquals(\"-1\", converter.reverse().convert((short) -1));\n", "    assertEquals(\"255\", converter.reverse().convert((short) 0xff));\n", "    assertEquals(\"255\", converter.reverse().convert((short) 0xFF));\n", "    assertEquals(\"-255\", converter.reverse().convert((short) -0xFF));\n", "    assertEquals(\"438\", converter.reverse().convert((short) 0666));\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [20], "2": [365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402]}, "removed_lines": {}}, {"14": "guava-gwt/test/com/google/common/base/CaseFormatTest_gwt.java", "added": {"1": ["public void testConverterToBackward() throws Exception {\n", "  com.google.common.base.CaseFormatTest testCase = new com.google.common.base.CaseFormatTest();\n", "  testCase.testConverterToBackward();\n", "}\n", "\n", "public void testConverterToForward() throws Exception {\n", "  com.google.common.base.CaseFormatTest testCase = new com.google.common.base.CaseFormatTest();\n", "  testCase.testConverterToForward();\n", "}\n", "\n", "public void testConverter_nullConversions() throws Exception {\n", "  com.google.common.base.CaseFormatTest testCase = new com.google.common.base.CaseFormatTest();\n", "  testCase.testConverter_nullConversions();\n", "}\n"]}, "removed": {}, "added_lines": {"1": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]}, "removed_lines": {}}, {"15": "guava-gwt/test/com/google/common/base/ConverterTest_gwt.java", "added": {"1": ["/*\n", " * Copyright (C) 2008 The Guava Authors\n", " *\n", " * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package com.google.common.base;\n", "public class ConverterTest_gwt extends com.google.gwt.junit.client.GWTTestCase {\n", "@Override public String getModuleName() {\n", "  return \"com.google.common.base.testModule\";\n", "}\n", "public void testAndThen() throws Exception {\n", "  com.google.common.base.ConverterTest testCase = new com.google.common.base.ConverterTest();\n", "  testCase.testAndThen();\n", "}\n", "\n", "public void testApply() throws Exception {\n", "  com.google.common.base.ConverterTest testCase = new com.google.common.base.ConverterTest();\n", "  testCase.testApply();\n", "}\n", "\n", "public void testConvertAllIsView() throws Exception {\n", "  com.google.common.base.ConverterTest testCase = new com.google.common.base.ConverterTest();\n", "  testCase.testConvertAllIsView();\n", "}\n", "\n", "public void testConverter() throws Exception {\n", "  com.google.common.base.ConverterTest testCase = new com.google.common.base.ConverterTest();\n", "  testCase.testConverter();\n", "}\n", "\n", "public void testIdentityConverter() throws Exception {\n", "  com.google.common.base.ConverterTest testCase = new com.google.common.base.ConverterTest();\n", "  testCase.testIdentityConverter();\n", "}\n", "\n", "public void testNullIsNotPassedThrough() throws Exception {\n", "  com.google.common.base.ConverterTest testCase = new com.google.common.base.ConverterTest();\n", "  testCase.testNullIsNotPassedThrough();\n", "}\n", "\n", "public void testNullIsPassedThrough() throws Exception {\n", "  com.google.common.base.ConverterTest testCase = new com.google.common.base.ConverterTest();\n", "  testCase.testNullIsPassedThrough();\n", "}\n", "\n", "public void testReverse() throws Exception {\n", "  com.google.common.base.ConverterTest testCase = new com.google.common.base.ConverterTest();\n", "  testCase.testReverse();\n", "}\n", "\n", "public void testSerialization_andThen() throws Exception {\n", "  com.google.common.base.ConverterTest testCase = new com.google.common.base.ConverterTest();\n", "  testCase.testSerialization_andThen();\n", "}\n", "\n", "public void testSerialization_identity() throws Exception {\n", "  com.google.common.base.ConverterTest testCase = new com.google.common.base.ConverterTest();\n", "  testCase.testSerialization_identity();\n", "}\n", "\n", "public void testSerialization_reverse() throws Exception {\n", "  com.google.common.base.ConverterTest testCase = new com.google.common.base.ConverterTest();\n", "  testCase.testSerialization_reverse();\n", "}\n", "}\n"]}, "removed": {}, "added_lines": {"1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75]}, "removed_lines": {}}, {"16": "guava-gwt/test/com/google/common/base/EnumsTest_gwt.java", "added": {"1": ["public void testStringConverter_convert() throws Exception {\n", "  com.google.common.base.EnumsTest testCase = new com.google.common.base.EnumsTest();\n", "  testCase.testStringConverter_convert();\n", "}\n", "\n", "public void testStringConverter_convertError() throws Exception {\n", "  com.google.common.base.EnumsTest testCase = new com.google.common.base.EnumsTest();\n", "  testCase.testStringConverter_convertError();\n", "}\n", "\n", "public void testStringConverter_nullConversions() throws Exception {\n", "  com.google.common.base.EnumsTest testCase = new com.google.common.base.EnumsTest();\n", "  testCase.testStringConverter_nullConversions();\n", "}\n", "\n", "public void testStringConverter_reverse() throws Exception {\n", "  com.google.common.base.EnumsTest testCase = new com.google.common.base.EnumsTest();\n", "  testCase.testStringConverter_reverse();\n", "}\n", "\n"]}, "removed": {}, "added_lines": {"1": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55]}, "removed_lines": {}}, {"17": "guava-gwt/test/com/google/common/collect/MapsTest_gwt.java", "added": {"1": ["public void testAsConverter_inverse() throws Exception {\n", "  com.google.common.collect.MapsTest testCase = new com.google.common.collect.MapsTest();\n", "  testCase.testAsConverter_inverse();\n", "}\n", "\n", "public void testAsConverter_isAView() throws Exception {\n", "  com.google.common.collect.MapsTest testCase = new com.google.common.collect.MapsTest();\n", "  testCase.testAsConverter_isAView();\n", "}\n", "\n", "public void testAsConverter_noMapping() throws Exception {\n", "  com.google.common.collect.MapsTest testCase = new com.google.common.collect.MapsTest();\n", "  testCase.testAsConverter_noMapping();\n", "}\n", "\n", "public void testAsConverter_nominal() throws Exception {\n", "  com.google.common.collect.MapsTest testCase = new com.google.common.collect.MapsTest();\n", "  testCase.testAsConverter_nominal();\n", "}\n", "\n", "public void testAsConverter_nullConversions() throws Exception {\n", "  com.google.common.collect.MapsTest testCase = new com.google.common.collect.MapsTest();\n", "  testCase.testAsConverter_nullConversions();\n", "}\n", "\n", "public void testAsConverter_withNullMapping() throws Exception {\n", "  com.google.common.collect.MapsTest testCase = new com.google.common.collect.MapsTest();\n", "  testCase.testAsConverter_withNullMapping();\n", "}\n"]}, "removed": {}, "added_lines": {"1": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]}, "removed_lines": {}}, {"18": "guava-gwt/test/com/google/common/primitives/DoublesTest_gwt.java", "added": {"1": ["public void testStringConverter_convert() throws Exception {\n", "  com.google.common.primitives.DoublesTest testCase = new com.google.common.primitives.DoublesTest();\n", "  testCase.testStringConverter_convert();\n", "}\n", "\n", "public void testStringConverter_convertError() throws Exception {\n", "  com.google.common.primitives.DoublesTest testCase = new com.google.common.primitives.DoublesTest();\n", "  testCase.testStringConverter_convertError();\n", "}\n", "\n", "public void testStringConverter_nullConversions() throws Exception {\n", "  com.google.common.primitives.DoublesTest testCase = new com.google.common.primitives.DoublesTest();\n", "  testCase.testStringConverter_nullConversions();\n", "}\n", "\n"]}, "removed": {}, "added_lines": {"1": [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135]}, "removed_lines": {}}, {"19": "guava-gwt/test/com/google/common/primitives/FloatsTest_gwt.java", "added": {"1": ["public void testStringConverter_convertError() throws Exception {\n", "  com.google.common.primitives.FloatsTest testCase = new com.google.common.primitives.FloatsTest();\n", "  testCase.testStringConverter_convertError();\n", "}\n", "\n", "public void testStringConverter_nullConversions() throws Exception {\n", "  com.google.common.primitives.FloatsTest testCase = new com.google.common.primitives.FloatsTest();\n", "  testCase.testStringConverter_nullConversions();\n", "}\n", "\n"]}, "removed": {}, "added_lines": {"1": [116, 117, 118, 119, 120, 121, 122, 123, 124, 125]}, "removed_lines": {}}, {"20": "guava-gwt/test/com/google/common/primitives/IntsTest_gwt.java", "added": {"1": ["public void testStringConverter_convert() throws Exception {\n", "  com.google.common.primitives.IntsTest testCase = new com.google.common.primitives.IntsTest();\n", "  testCase.testStringConverter_convert();\n", "}\n", "\n", "public void testStringConverter_convertError() throws Exception {\n", "  com.google.common.primitives.IntsTest testCase = new com.google.common.primitives.IntsTest();\n", "  testCase.testStringConverter_convertError();\n", "}\n", "\n", "public void testStringConverter_nullConversions() throws Exception {\n", "  com.google.common.primitives.IntsTest testCase = new com.google.common.primitives.IntsTest();\n", "  testCase.testStringConverter_nullConversions();\n", "}\n", "\n", "public void testStringConverter_reverse() throws Exception {\n", "  com.google.common.primitives.IntsTest testCase = new com.google.common.primitives.IntsTest();\n", "  testCase.testStringConverter_reverse();\n", "}\n", "\n"]}, "removed": {}, "added_lines": {"1": [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145]}, "removed_lines": {}}, {"21": "guava-gwt/test/com/google/common/primitives/LongsTest_gwt.java", "added": {"1": ["public void testStringConverter_convert() throws Exception {\n", "  com.google.common.primitives.LongsTest testCase = new com.google.common.primitives.LongsTest();\n", "  testCase.testStringConverter_convert();\n", "}\n", "\n", "public void testStringConverter_convertError() throws Exception {\n", "  com.google.common.primitives.LongsTest testCase = new com.google.common.primitives.LongsTest();\n", "  testCase.testStringConverter_convertError();\n", "}\n", "\n", "public void testStringConverter_nullConversions() throws Exception {\n", "  com.google.common.primitives.LongsTest testCase = new com.google.common.primitives.LongsTest();\n", "  testCase.testStringConverter_nullConversions();\n", "}\n", "\n", "public void testStringConverter_reverse() throws Exception {\n", "  com.google.common.primitives.LongsTest testCase = new com.google.common.primitives.LongsTest();\n", "  testCase.testStringConverter_reverse();\n", "}\n", "\n"]}, "removed": {}, "added_lines": {"1": [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145]}, "removed_lines": {}}, {"22": "guava-gwt/test/com/google/common/primitives/ShortsTest_gwt.java", "added": {"1": ["public void testStringConverter_convert() throws Exception {\n", "  com.google.common.primitives.ShortsTest testCase = new com.google.common.primitives.ShortsTest();\n", "  testCase.testStringConverter_convert();\n", "}\n", "\n", "public void testStringConverter_convertError() throws Exception {\n", "  com.google.common.primitives.ShortsTest testCase = new com.google.common.primitives.ShortsTest();\n", "  testCase.testStringConverter_convertError();\n", "}\n", "\n", "public void testStringConverter_nullConversions() throws Exception {\n", "  com.google.common.primitives.ShortsTest testCase = new com.google.common.primitives.ShortsTest();\n", "  testCase.testStringConverter_nullConversions();\n", "}\n", "\n", "public void testStringConverter_reverse() throws Exception {\n", "  com.google.common.primitives.ShortsTest testCase = new com.google.common.primitives.ShortsTest();\n", "  testCase.testStringConverter_reverse();\n", "}\n", "\n"]}, "removed": {}, "added_lines": {"1": [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145]}, "removed_lines": {}}, {"23": "guava-testlib/src/com/google/common/testing/NullPointerTester.java", "added": {"1": ["import com.google.common.base.Converter;\n"], "2": ["    if (type.getRawType() == Converter.class) {\n", "      TypeToken<?> convertFromType = type.resolveType(\n", "          Converter.class.getTypeParameters()[0]);\n", "      TypeToken<?> convertToType = type.resolveType(\n", "          Converter.class.getTypeParameters()[1]);\n", "      @SuppressWarnings(\"unchecked\") // returns default for both F and T\n", "      T defaultConverter = (T) defaultConverter(convertFromType, convertToType);\n", "      return defaultConverter;\n", "    }\n", "  private <F, T> Converter<F, T> defaultConverter(\n", "      final TypeToken<F> convertFromType, final TypeToken<T> convertToType) {\n", "    return new Converter<F, T>() {\n", "      @Override protected T doForward(F a) {\n", "        return doConvert(convertToType, a);\n", "      }\n", "      @Override protected F doBackward(T b) {\n", "        return doConvert(convertFromType, b);\n", "      }\n", "\n", "      private /*static*/ <S> S doConvert(TypeToken<S> type, Object in) {\n", "        // TODO(kevinb): remove null boilerplate (convert() will do it\n", "        // automatically)\n", "        return in == null ? null : checkNotNull(getDefaultValue(type));\n", "      }\n", "    };\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [23], "2": [400, 401, 402, 403, 404, 405, 406, 407, 408, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432]}, "removed_lines": {}}, {"24": "guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java", "added": {"1": ["import com.google.common.base.Converter;\n"], "2": ["  private static class ConverterDefaultValueChecker\n", "      extends DefaultValueChecker {\n", "\n", "    @SuppressWarnings(\"unused\") // called by NullPointerTester\n", "    public void checkArray(Converter<String, Integer> c, String s) {\n", "      calledWith(c, s);\n", "    }\n", "\n", "    void check() {\n", "      runTester();\n", "      @SuppressWarnings(\"unchecked\") // We are checking it anyway\n", "      Converter<String, Integer> defaultConverter = (Converter<String, Integer>)\n", "          getDefaultParameterValue(0);\n", "      assertEquals(Integer.valueOf(0), defaultConverter.convert(\"anything\"));\n", "      assertEquals(\"\", defaultConverter.reverse().convert(123));\n", "      assertNull(defaultConverter.convert(null));\n", "      assertNull(defaultConverter.reverse().convert(null));\n", "    }\n", "  }\n", "\n", "  public void testConverterDefaultValue() {\n", "    new ConverterDefaultValueChecker().check();\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [23], "2": [1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212]}, "removed_lines": {}}, {"25": "guava-tests/test/com/google/common/base/CaseFormatTest.java", "added": {"1": ["\n", "  public void testConverterToForward() {\n", "    assertEquals(\"FooBar\", UPPER_UNDERSCORE.converterTo(UPPER_CAMEL).convert(\"FOO_BAR\"));\n", "    assertEquals(\"fooBar\", UPPER_UNDERSCORE.converterTo(LOWER_CAMEL).convert(\"FOO_BAR\"));\n", "    assertEquals(\"FOO_BAR\", UPPER_CAMEL.converterTo(UPPER_UNDERSCORE).convert(\"FooBar\"));\n", "    assertEquals(\"FOO_BAR\", LOWER_CAMEL.converterTo(UPPER_UNDERSCORE).convert(\"fooBar\"));\n", "  }\n", "\n", "  public void testConverterToBackward() {\n", "    assertEquals(\"FOO_BAR\", UPPER_UNDERSCORE.converterTo(UPPER_CAMEL).reverse().convert(\"FooBar\"));\n", "    assertEquals(\"FOO_BAR\", UPPER_UNDERSCORE.converterTo(LOWER_CAMEL).reverse().convert(\"fooBar\"));\n", "    assertEquals(\"FooBar\", UPPER_CAMEL.converterTo(UPPER_UNDERSCORE).reverse().convert(\"FOO_BAR\"));\n", "    assertEquals(\"fooBar\", LOWER_CAMEL.converterTo(UPPER_UNDERSCORE).reverse().convert(\"FOO_BAR\"));\n", "  }\n", "\n", "  public void testConverter_nullConversions() {\n", "    for (CaseFormat outer : CaseFormat.values()) {\n", "      for (CaseFormat inner : CaseFormat.values()) {\n", "        assertNull(outer.converterTo(inner).convert(null));\n", "        assertNull(outer.converterTo(inner).reverse().convert(null));\n", "      }\n", "    }\n", "  }\n"]}, "removed": {}, "added_lines": {"1": [189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211]}, "removed_lines": {}}, {"26": "guava-tests/test/com/google/common/base/ConverterTest.java", "added": {"1": ["/*\n", " * Copyright (C) 2008 The Guava Authors\n", " *\n", " * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package com.google.common.base;\n", "\n", "import com.google.common.annotations.GwtCompatible;\n", "import com.google.common.collect.ImmutableList;\n", "import com.google.common.collect.Lists;\n", "import com.google.common.primitives.Longs;\n", "import com.google.common.testing.EqualsTester;\n", "import com.google.common.testing.SerializableTester;\n", "\n", "import junit.framework.TestCase;\n", "\n", "import java.util.Iterator;\n", "import java.util.List;\n", "\n", "/**\n", " * Unit tests for {@link Converter}.\n", " */\n", "@GwtCompatible\n", "public class ConverterTest extends TestCase {\n", "\n", "  private static final Converter<String, Long> STR_TO_LONG =\n", "      new Converter<String, Long>() {\n", "        @Override public Long doForward(String object) {\n", "          return Long.valueOf(object);\n", "        }\n", "\n", "        @Override public String doBackward(Long object) {\n", "          return String.valueOf(object);\n", "        }\n", "\n", "        @Override public String toString() {\n", "          return \"string2long\";\n", "        }\n", "      };\n", "\n", "  private static final Long LONG_VAL = 12345L;\n", "  private static final String STR_VAL = \"12345\";\n", "\n", "  private static final ImmutableList<String> STRINGS = ImmutableList.of(\"123\", \"456\");\n", "  private static final ImmutableList<Long> LONGS = ImmutableList.of(123L, 456L);\n", "\n", "  public void testConverter() {\n", "    assertEquals(LONG_VAL, STR_TO_LONG.convert(STR_VAL));\n", "    assertEquals(STR_VAL, STR_TO_LONG.reverse().convert(LONG_VAL));\n", "\n", "    Iterable<Long> convertedValues = STR_TO_LONG.convertAll(STRINGS);\n", "    assertEquals(LONGS, ImmutableList.copyOf(convertedValues));\n", "  }\n", "\n", "  public void testConvertAllIsView() {\n", "    List<String> mutableList = Lists.newArrayList(\"789\", \"123\");\n", "    Iterable<Long> convertedValues = STR_TO_LONG.convertAll(mutableList);\n", "    assertEquals(ImmutableList.of(789L, 123L), ImmutableList.copyOf(convertedValues));\n", "\n", "    Iterator<Long> iterator = convertedValues.iterator();\n", "    iterator.next();\n", "    iterator.remove();\n", "    assertEquals(ImmutableList.of(\"123\"), mutableList);\n", "  }\n", "\n", "  public void testReverse() {\n", "    Converter<Long, String> reverseConverter = STR_TO_LONG.reverse();\n", "\n", "    assertEquals(STR_VAL, reverseConverter.convert(LONG_VAL));\n", "    assertEquals(LONG_VAL, reverseConverter.reverse().convert(STR_VAL));\n", "\n", "    Iterable<String> convertedValues = reverseConverter.convertAll(LONGS);\n", "    assertEquals(STRINGS, ImmutableList.copyOf(convertedValues));\n", "\n", "    assertSame(STR_TO_LONG, reverseConverter.reverse());\n", "\n", "    assertEquals(\"string2long.reverse()\", reverseConverter.toString());\n", "\n", "    new EqualsTester()\n", "        .addEqualityGroup(STR_TO_LONG, STR_TO_LONG.reverse().reverse())\n", "        .addEqualityGroup(STR_TO_LONG.reverse(), STR_TO_LONG.reverse())\n", "        .testEquals();\n", "  }\n", "\n", "  public void testApply() {\n", "    assertEquals(LONG_VAL, STR_TO_LONG.apply(STR_VAL));\n", "  }\n", "\n", "  private static class StringWrapper {\n", "    private final String value;\n", "\n", "    public StringWrapper(String value) {\n", "      this.value = value;\n", "    }\n", "  }\n", "\n", "  public void testAndThen() {\n", "    Converter<StringWrapper, String> first = new Converter<StringWrapper, String>() {\n", "      @Override public String doForward(StringWrapper object) {\n", "        return object.value;\n", "      }\n", "\n", "      @Override public StringWrapper doBackward(String object) {\n", "        return new StringWrapper(object);\n", "      }\n", "\n", "      @Override public String toString() {\n", "        return \"StringWrapper\";\n", "      }\n", "    };\n", "\n", "    Converter<StringWrapper, Long> converter = first.andThen(STR_TO_LONG);\n", "\n", "    assertEquals(LONG_VAL, converter.convert(new StringWrapper(STR_VAL)));\n", "    assertEquals(STR_VAL, converter.reverse().convert(LONG_VAL).value);\n", "\n", "    assertEquals(\"StringWrapper.andThen(string2long)\", converter.toString());\n", "\n", "    assertEquals(first.andThen(STR_TO_LONG), first.andThen(STR_TO_LONG));\n", "  }\n", "\n", "  public void testIdentityConverter() {\n", "    Converter<String, String> stringIdentityConverter = Converter.identity();\n", "\n", "    assertSame(stringIdentityConverter, stringIdentityConverter.reverse());\n", "    assertSame(STR_TO_LONG, stringIdentityConverter.andThen(STR_TO_LONG));\n", "\n", "    assertSame(STR_VAL, stringIdentityConverter.convert(STR_VAL));\n", "    assertSame(STR_VAL, stringIdentityConverter.reverse().convert(STR_VAL));\n", "\n", "    assertEquals(\"Converter.identity()\", stringIdentityConverter.toString());\n", "\n", "    assertSame(Converter.identity(), Converter.identity());\n", "  }\n", "\n", "  public void testNullIsPassedThrough() {\n", "    Converter<String, String> nullsArePassed = sillyConverter(false);\n", "    assertEquals(\"forward\", nullsArePassed.convert(\"foo\"));\n", "    assertEquals(\"forward\", nullsArePassed.convert(null));\n", "    assertEquals(\"backward\", nullsArePassed.reverse().convert(\"foo\"));\n", "    assertEquals(\"backward\", nullsArePassed.reverse().convert(null));\n", "  }\n", "\n", "  public void testNullIsNotPassedThrough() {\n", "    Converter<String, String> nullsAreHandled = sillyConverter(true);\n", "    assertEquals(\"forward\", nullsAreHandled.convert(\"foo\"));\n", "    assertEquals(null, nullsAreHandled.convert(null));\n", "    assertEquals(\"backward\", nullsAreHandled.reverse().convert(\"foo\"));\n", "    assertEquals(null, nullsAreHandled.reverse().convert(null));\n", "  }\n", "\n", "  private static Converter<String, String> sillyConverter(final boolean handleNullAutomatically) {\n", "    return new Converter<String, String>(handleNullAutomatically) {\n", "      @Override public String doForward(String string) {\n", "        return \"forward\";\n", "      }\n", "      @Override public String doBackward(String string) {\n", "        return \"backward\";\n", "      }\n", "    };\n", "  }\n", "\n", "  public void testSerialization_identity() {\n", "    Converter<String, String> identityConverter = Converter.identity();\n", "    SerializableTester.reserializeAndAssert(identityConverter);\n", "  }\n", "\n", "  public void testSerialization_reverse() {\n", "    Converter<Long, String> reverseConverter = Longs.stringConverter().reverse();\n", "    SerializableTester.reserializeAndAssert(reverseConverter);\n", "  }\n", "\n", "  public void testSerialization_andThen() {\n", "    Converter<String, Long> converterA = Longs.stringConverter();\n", "    Converter<Long, String> reverseConverter = Longs.stringConverter().reverse();\n", "    Converter<String, String> composedConverter = converterA.andThen(reverseConverter);\n", "    SerializableTester.reserializeAndAssert(composedConverter);\n", "  }\n", "}\n"]}, "removed": {}, "added_lines": {"1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190]}, "removed_lines": {}}, {"27": "guava-tests/test/com/google/common/base/EnumsTest.java", "added": {"1": ["  public void testStringConverter_convert() {\n", "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n", "    assertEquals(TestEnum.CHEETO, converter.convert(\"CHEETO\"));\n", "    assertEquals(TestEnum.HONDA, converter.convert(\"HONDA\"));\n", "    assertEquals(TestEnum.POODLE, converter.convert(\"POODLE\"));\n", "    assertNull(converter.convert(null));\n", "    assertNull(converter.reverse().convert(null));\n", "  }\n", "\n", "  public void testStringConverter_convertError() {\n", "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n", "    try {\n", "      converter.convert(\"xxx\");\n", "      fail();\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "  }\n", "\n", "  public void testStringConverter_reverse() {\n", "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n", "    assertEquals(\"CHEETO\", converter.reverse().convert(TestEnum.CHEETO));\n", "    assertEquals(\"HONDA\", converter.reverse().convert(TestEnum.HONDA));\n", "    assertEquals(\"POODLE\", converter.reverse().convert(TestEnum.POODLE));\n", "  }\n", "\n", "  @GwtIncompatible(\"NullPointerTester\")\n", "  public void testStringConverter_nullPointerTester() throws Exception {\n", "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n", "    NullPointerTester tester = new NullPointerTester();\n", "    tester.testAllPublicInstanceMethods(converter);\n", "  }\n", "\n", "  public void testStringConverter_nullConversions() {\n", "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n", "    assertNull(converter.convert(null));\n", "    assertNull(converter.reverse().convert(null));\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141]}, "removed_lines": {}}, {"28": "guava-tests/test/com/google/common/collect/MapsTest.java", "added": {"1": ["import com.google.common.base.Converter;\n"], "2": ["  public void testAsConverter_nominal() throws Exception {\n", "    ImmutableBiMap<String, Integer> biMap = ImmutableBiMap.of(\n", "        \"one\", 1,\n", "        \"two\", 2);\n", "    Converter<String, Integer> converter = Maps.asConverter(biMap);\n", "    for (Entry<String, Integer> entry : biMap.entrySet()) {\n", "      assertSame(entry.getValue(), converter.convert(entry.getKey()));\n", "    }\n", "  }\n", "\n", "  public void testAsConverter_inverse() throws Exception {\n", "    ImmutableBiMap<String, Integer> biMap = ImmutableBiMap.of(\n", "        \"one\", 1,\n", "        \"two\", 2);\n", "    Converter<String, Integer> converter = Maps.asConverter(biMap);\n", "    for (Entry<String, Integer> entry : biMap.entrySet()) {\n", "      assertSame(entry.getKey(), converter.reverse().convert(entry.getValue()));\n", "    }\n", "  }\n", "\n", "  public void testAsConverter_noMapping() throws Exception {\n", "    ImmutableBiMap<String, Integer> biMap = ImmutableBiMap.of(\n", "        \"one\", 1,\n", "        \"two\", 2);\n", "    Converter<String, Integer> converter = Maps.asConverter(biMap);\n", "    try {\n", "      converter.convert(\"three\");\n", "      fail();\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "  }\n", "\n", "  public void testAsConverter_nullConversions() throws Exception {\n", "    ImmutableBiMap<String, Integer> biMap = ImmutableBiMap.of(\n", "        \"one\", 1,\n", "        \"two\", 2);\n", "    Converter<String, Integer> converter = Maps.asConverter(biMap);\n", "    assertNull(converter.convert(null));\n", "    assertNull(converter.reverse().convert(null));\n", "  }\n", "\n", "  public void testAsConverter_isAView() throws Exception {\n", "    BiMap<String, Integer> biMap = HashBiMap.create();\n", "    biMap.put(\"one\", 1);\n", "    biMap.put(\"two\", 2);\n", "    Converter<String, Integer> converter = Maps.asConverter(biMap);\n", "\n", "    assertSame(1, converter.convert(\"one\"));\n", "    assertSame(2, converter.convert(\"two\"));\n", "    try {\n", "      converter.convert(\"three\");\n", "      fail();\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "\n", "    biMap.put(\"three\", 3);\n", "\n", "    assertSame(1, converter.convert(\"one\"));\n", "    assertSame(2, converter.convert(\"two\"));\n", "    assertSame(3, converter.convert(\"three\"));\n", "  }\n", "\n", "  public void testAsConverter_withNullMapping() throws Exception {\n", "    BiMap<String, Integer> biMap = HashBiMap.create();\n", "    biMap.put(\"one\", 1);\n", "    biMap.put(\"two\", 2);\n", "    biMap.put(\"three\", null);\n", "    try {\n", "      Maps.asConverter(biMap).convert(\"three\");\n", "      fail();\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [28], "2": [1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224]}, "removed_lines": {}}, {"29": "guava-tests/test/com/google/common/primitives/DoublesTest.java", "added": {"1": ["import com.google.common.base.Converter;\n"], "2": ["  @GwtIncompatible(\"SerializableTester\")\n", "  public void testStringConverterSerialization() {\n", "    SerializableTester.reserializeAndAssert(Doubles.stringConverter());\n", "  }\n", "\n"], "3": ["\n", "  public void testStringConverter_convert() {\n", "    Converter<String, Double> converter = Doubles.stringConverter();\n", "    assertEquals((Double) 1.0, converter.convert(\"1.0\"));\n", "    assertEquals((Double) 0.0, converter.convert(\"0.0\"));\n", "    assertEquals((Double) (-1.0), converter.convert(\"-1.0\"));\n", "    assertEquals((Double) 1.0, converter.convert(\"1\"));\n", "    assertEquals((Double) 0.0, converter.convert(\"0\"));\n", "    assertEquals((Double) (-1.0), converter.convert(\"-1\"));\n", "    assertEquals((Double) 1e6, converter.convert(\"1e6\"));\n", "    assertEquals((Double) 1e-6, converter.convert(\"1e-6\"));\n", "  }\n", "\n", "  public void testStringConverter_convertError() {\n", "    try {\n", "      Doubles.stringConverter().convert(\"notanumber\");\n", "      fail();\n", "    } catch (NumberFormatException expected) {\n", "    }\n", "  }\n", "\n", "  public void testStringConverter_nullConversions() {\n", "    assertNull(Doubles.stringConverter().convert(null));\n", "    assertNull(Doubles.stringConverter().reverse().convert(null));\n", "  }\n", "\n", "  @GwtIncompatible(\"Double.toString returns different value in GWT.\")\n", "  public void testStringConverter_reverse() {\n", "    Converter<String, Double> converter = Doubles.stringConverter();\n", "    assertEquals(\"1.0\", converter.reverse().convert(1.0));\n", "    assertEquals(\"0.0\", converter.reverse().convert(0.0));\n", "    assertEquals(\"-1.0\", converter.reverse().convert(-1.0));\n", "    assertEquals(\"1000000.0\", converter.reverse().convert(1e6));\n", "    assertEquals(\"1.0E-6\", converter.reverse().convert(1e-6));\n", "  }\n", "\n", "  @GwtIncompatible(\"NullPointerTester\")\n", "  public void testStringConverter_nullPointerTester() throws Exception {\n", "    NullPointerTester tester = new NullPointerTester();\n", "    tester.testAllPublicInstanceMethods(Doubles.stringConverter());\n", "  }\n"]}, "removed": {}, "added_lines": {"1": [24], "2": [302, 303, 304, 305, 306], "3": [506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546]}, "removed_lines": {}}, {"30": "guava-tests/test/com/google/common/primitives/FloatsTest.java", "added": {"1": ["import com.google.common.base.Converter;\n"], "2": ["  @GwtIncompatible(\"SerializableTester\")\n", "  public void testStringConverterSerialization() {\n", "    SerializableTester.reserializeAndAssert(Floats.stringConverter());\n", "  }\n", "\n"], "3": ["\n", "  @GwtIncompatible(\"Float.toString returns different value in GWT.\")\n", "  public void testStringConverter_convert() {\n", "    Converter<String, Float> converter = Floats.stringConverter();\n", "    assertEquals((Float) 1.0f, converter.convert(\"1.0\"));\n", "    assertEquals((Float) 0.0f, converter.convert(\"0.0\"));\n", "    assertEquals((Float) (-1.0f), converter.convert(\"-1.0\"));\n", "    assertEquals((Float) 1.0f, converter.convert(\"1\"));\n", "    assertEquals((Float) 0.0f, converter.convert(\"0\"));\n", "    assertEquals((Float) (-1.0f), converter.convert(\"-1\"));\n", "    assertEquals((Float) 1e6f, converter.convert(\"1e6\"));\n", "    assertEquals((Float) 1e-6f, converter.convert(\"1e-6\"));\n", "  }\n", "\n", "  public void testStringConverter_convertError() {\n", "    try {\n", "      Floats.stringConverter().convert(\"notanumber\");\n", "      fail();\n", "    } catch (NumberFormatException expected) {\n", "    }\n", "  }\n", "\n", "  public void testStringConverter_nullConversions() {\n", "    assertNull(Floats.stringConverter().convert(null));\n", "    assertNull(Floats.stringConverter().reverse().convert(null));\n", "  }\n", "\n", "  @GwtIncompatible(\"Float.toString returns different value in GWT.\")\n", "  public void testStringConverter_reverse() {\n", "    Converter<String, Float> converter = Floats.stringConverter();\n", "    assertEquals(\"1.0\", converter.reverse().convert(1.0f));\n", "    assertEquals(\"0.0\", converter.reverse().convert(0.0f));\n", "    assertEquals(\"-1.0\", converter.reverse().convert(-1.0f));\n", "    assertEquals(\"1000000.0\", converter.reverse().convert(1e6f));\n", "    assertEquals(\"1.0E-6\", converter.reverse().convert(1e-6f));\n", "  }\n", "\n", "  @GwtIncompatible(\"NullPointerTester\")\n", "  public void testStringConverter_nullPointerTester() throws Exception {\n", "    NullPointerTester tester = new NullPointerTester();\n", "    tester.testAllPublicInstanceMethods(Floats.stringConverter());\n", "  }\n"]}, "removed": {}, "added_lines": {"1": [24], "2": [293, 294, 295, 296, 297], "3": [492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533]}, "removed_lines": {}}, {"31": "guava-tests/test/com/google/common/primitives/IntsTest.java", "added": {"1": ["import com.google.common.base.Converter;\n"], "2": ["  @GwtIncompatible(\"SerializableTester\")\n", "  public void testStringConverterSerialization() {\n", "    SerializableTester.reserializeAndAssert(Ints.stringConverter());\n", "  }\n", "\n"], "3": ["  public void testStringConverter_convert() {\n", "    Converter<String, Integer> converter = Ints.stringConverter();\n", "    assertEquals((Integer) 1, converter.convert(\"1\"));\n", "    assertEquals((Integer) 0, converter.convert(\"0\"));\n", "    assertEquals((Integer) (-1), converter.convert(\"-1\"));\n", "    assertEquals((Integer) 255, converter.convert(\"0xff\"));\n", "    assertEquals((Integer) 255, converter.convert(\"0xFF\"));\n", "    assertEquals((Integer) (-255), converter.convert(\"-0xFF\"));\n", "    assertEquals((Integer) 255, converter.convert(\"#0000FF\"));\n", "    assertEquals((Integer) 438, converter.convert(\"0666\"));\n", "  }\n", "\n", "  public void testStringConverter_convertError() {\n", "    try {\n", "      Ints.stringConverter().convert(\"notanumber\");\n", "      fail();\n", "    } catch (NumberFormatException expected) {\n", "    }\n", "  }\n", "\n", "  public void testStringConverter_nullConversions() {\n", "    assertNull(Ints.stringConverter().convert(null));\n", "    assertNull(Ints.stringConverter().reverse().convert(null));\n", "  }\n", "\n", "  public void testStringConverter_reverse() {\n", "    Converter<String, Integer> converter = Ints.stringConverter();\n", "    assertEquals(\"1\", converter.reverse().convert(1));\n", "    assertEquals(\"0\", converter.reverse().convert(0));\n", "    assertEquals(\"-1\", converter.reverse().convert(-1));\n", "    assertEquals(\"255\", converter.reverse().convert(0xff));\n", "    assertEquals(\"255\", converter.reverse().convert(0xFF));\n", "    assertEquals(\"-255\", converter.reverse().convert(-0xFF));\n", "    assertEquals(\"438\", converter.reverse().convert(0666));\n", "  }\n", "\n", "  @GwtIncompatible(\"NullPointerTester\")\n", "  public void testStringConverter_nullPointerTester() throws Exception {\n", "    NullPointerTester tester = new NullPointerTester();\n", "    tester.testAllPublicInstanceMethods(Ints.stringConverter());\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [21], "2": [319, 320, 321, 322, 323], "3": [424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465]}, "removed_lines": {}}, {"32": "guava-tests/test/com/google/common/primitives/LongsTest.java", "added": {"1": ["import com.google.common.base.Converter;\n"], "2": ["  @GwtIncompatible(\"SerializableTester\")\n", "  public void testStringConverterSerialization() {\n", "    SerializableTester.reserializeAndAssert(Longs.stringConverter());\n", "  }\n", "\n"], "3": ["  public void testStringConverter_convert() {\n", "    Converter<String, Long> converter = Longs.stringConverter();\n", "    assertEquals((Long) 1L, converter.convert(\"1\"));\n", "    assertEquals((Long) 0L, converter.convert(\"0\"));\n", "    assertEquals((Long) (-1L), converter.convert(\"-1\"));\n", "    assertEquals((Long) 255L, converter.convert(\"0xff\"));\n", "    assertEquals((Long) 255L, converter.convert(\"0xFF\"));\n", "    assertEquals((Long) (-255L), converter.convert(\"-0xFF\"));\n", "    assertEquals((Long) 255L, converter.convert(\"#0000FF\"));\n", "    assertEquals((Long) 438L, converter.convert(\"0666\"));\n", "  }\n", "\n", "  public void testStringConverter_convertError() {\n", "    try {\n", "      Longs.stringConverter().convert(\"notanumber\");\n", "      fail();\n", "    } catch (NumberFormatException expected) {\n", "    }\n", "  }\n", "\n", "  public void testStringConverter_nullConversions() {\n", "    assertNull(Longs.stringConverter().convert(null));\n", "    assertNull(Longs.stringConverter().reverse().convert(null));\n", "  }\n", "\n", "  public void testStringConverter_reverse() {\n", "    Converter<String, Long> converter = Longs.stringConverter();\n", "    assertEquals(\"1\", converter.reverse().convert(1L));\n", "    assertEquals(\"0\", converter.reverse().convert(0L));\n", "    assertEquals(\"-1\", converter.reverse().convert(-1L));\n", "    assertEquals(\"255\", converter.reverse().convert(0xffL));\n", "    assertEquals(\"255\", converter.reverse().convert(0xFFL));\n", "    assertEquals(\"-255\", converter.reverse().convert(-0xFFL));\n", "    assertEquals(\"438\", converter.reverse().convert(0666L));\n", "  }\n", "\n", "  @GwtIncompatible(\"NullPointerTester\")\n", "  public void testStringConverter_nullPointerTester() throws Exception {\n", "    NullPointerTester tester = new NullPointerTester();\n", "    tester.testAllPublicInstanceMethods(Longs.stringConverter());\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [24], "2": [302, 303, 304, 305, 306], "3": [407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448]}, "removed_lines": {}}, {"33": "guava-tests/test/com/google/common/primitives/ShortsTest.java", "added": {"1": ["import com.google.common.base.Converter;\n"], "2": ["  @GwtIncompatible(\"SerializableTester\")\n", "  public void testStringConverterSerialization() {\n", "    SerializableTester.reserializeAndAssert(Shorts.stringConverter());\n", "  }\n", "\n"], "3": ["\n", "  public void testStringConverter_convert() {\n", "    Converter<String, Short> converter = Shorts.stringConverter();\n", "    assertEquals((Short) (short) 1, converter.convert(\"1\"));\n", "    assertEquals((Short) (short) 0, converter.convert(\"0\"));\n", "    assertEquals((Short) (short) (-1), converter.convert(\"-1\"));\n", "    assertEquals((Short) (short) 255, converter.convert(\"0xff\"));\n", "    assertEquals((Short) (short) 255, converter.convert(\"0xFF\"));\n", "    assertEquals((Short) (short) (-255), converter.convert(\"-0xFF\"));\n", "    assertEquals((Short) (short) 255, converter.convert(\"#0000FF\"));\n", "    assertEquals((Short) (short) 438, converter.convert(\"0666\"));\n", "  }\n", "\n", "  public void testStringConverter_convertError() {\n", "    try {\n", "      Shorts.stringConverter().convert(\"notanumber\");\n", "      fail();\n", "    } catch (NumberFormatException expected) {\n", "    }\n", "  }\n", "\n", "  public void testStringConverter_nullConversions() {\n", "    assertNull(Shorts.stringConverter().convert(null));\n", "    assertNull(Shorts.stringConverter().reverse().convert(null));\n", "  }\n", "\n", "  public void testStringConverter_reverse() {\n", "    Converter<String, Short> converter = Shorts.stringConverter();\n", "    assertEquals(\"1\", converter.reverse().convert((short) 1));\n", "    assertEquals(\"0\", converter.reverse().convert((short) 0));\n", "    assertEquals(\"-1\", converter.reverse().convert((short) -1));\n", "    assertEquals(\"255\", converter.reverse().convert((short) 0xff));\n", "    assertEquals(\"255\", converter.reverse().convert((short) 0xFF));\n", "    assertEquals(\"-255\", converter.reverse().convert((short) -0xFF));\n", "    assertEquals(\"438\", converter.reverse().convert((short) 0666));\n", "  }\n", "\n", "  @GwtIncompatible(\"NullPointerTester\")\n", "  public void testStringConverter_nullPointerTester() throws Exception {\n", "    NullPointerTester tester = new NullPointerTester();\n", "    tester.testAllPublicInstanceMethods(Shorts.stringConverter());\n", "  }\n"]}, "removed": {}, "added_lines": {"1": [21], "2": [326, 327, 328, 329, 330], "3": [430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471]}, "removed_lines": {}}, {"34": "guava/src/com/google/common/base/CaseFormat.java", "added": {"1": ["import com.google.common.annotations.Beta;\n"], "2": ["  /**\n", "   * Returns a {@code Converter} that converts strings from this format to {@code targetFormat}.\n", "   *\n", "   * @since 16.0\n", "   */\n", "  @Beta\n", "  public Converter<String, String> converterTo(final CaseFormat targetFormat) {\n", "    checkNotNull(targetFormat);\n", "    return new Converter<String, String>() {\n", "      @Override protected String doForward(String s) {\n", "        // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n", "        return s == null ? null : to(targetFormat, s);\n", "      }\n", "\n", "      @Override protected String doBackward(String s) {\n", "        // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n", "        return s == null ? null : targetFormat.to(CaseFormat.this, s);\n", "      }\n", "    };\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [21], "2": [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168]}, "removed_lines": {}}, {"35": "guava/src/com/google/common/base/Converter.java", "added": {"1": ["/*\n", " * Copyright (C) 2008 The Guava Authors\n", " *\n", " * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package com.google.common.base;\n", "\n", "import static com.google.common.base.Preconditions.checkNotNull;\n", "\n", "import com.google.common.annotations.Beta;\n", "import com.google.common.annotations.GwtCompatible;\n", "\n", "import java.io.Serializable;\n", "import java.util.Iterator;\n", "\n", "import javax.annotation.Nullable;\n", "\n", "/**\n", " * A function from {@code A} to {@code B} with an associated <i>reverse</i> function from {@code B}\n", " * to {@code A}; used for converting back and forth between <i>different representations of the same\n", " * information</i>.\n", " *\n", " * <h3>Invertibility</h3>\n", " *\n", " * <p>The reverse operation <b>may</b> be a strict <i>inverse</i> (meaning that {@code\n", " * converter.reverse().convert(converter.convert(a)).equals(a)} is always true). However, it is\n", " * very common (perhaps <i>more</i> common) for round-trip conversion to be <i>lossy</i>. Consider\n", " * an example round-trip using {@link com.google.common.primitives.Doubles#stringConverter}:\n", " *\n", " * <ol>\n", " * <li>{@code stringConverter().convert(\"1.00\")} returns the {@code Double} value {@code 1.0}\n", " * <li>{@code stringConverter().reverse().convert(1.0)} returns the string {@code \"1.0\"} --\n", " *     <i>not</i> the same string ({@code \"1.00\"}) we started with\n", " * </ol>\n", " *\n", " * <p>Note that it should still be the case that the round-tripped and original objects are\n", " * <i>similar</i>.\n", " *\n", " * <h3>Nullability</h3>\n", " *\n", " * <p>A converter always converts {@code null} to {@code null} and non-null references to non-null\n", " * references. It would not make sense to consider {@code null} and a non-null reference to be\n", " * \"different representations of the same information\", since one is distinguishable from\n", " * <i>missing</i> information and the other is not. The {@link #convert} method handles this null\n", " * behavior for all converters; implementations of {@link #doForward} and {@link #doBackward} are\n", " * guaranteed to never be passed {@code null}, and must never return {@code null}.\n", " *\n", "\n", " * <h3>Common ways to use</h3>\n", " *\n", " * <p>Creating a converter:\n", " *\n", " * <ul>\n", " * <li>Extend this class and override {@link #doForward} and {@link #doBackward}\n", " * </ul>\n", " *\n", " * <p>Using a converter:\n", " *\n", " * <ul>\n", " * <li>Convert one instance in the \"forward\" direction using {@code converter.convert(a)}\n", " * <li>Convert multiple instances \"forward\" using {@code converter.convertAll(as)}\n", " * <li>Convert in the \"backward\" direction using {@code converter.reverse().convert(b)} or {@code\n", " *     converter.reverse().convertAll(bs)}\n", " * <li>Use {@code converter} or {@code converter.reverse()} anywhere a {@link Function} is accepted\n", " * </ul>\n", " *\n", " * @author Mike Ward\n", " * @author Kurt Alfred Kluever\n", " * @author Gregory Kick\n", " * @since 16.0\n", " */\n", "@Beta\n", "@GwtCompatible\n", "public abstract class Converter<A, B> implements Function<A, B> {\n", "  private final boolean handleNullAutomatically;\n", "\n", "  /** Constructor for use by subclasses. */\n", "  protected Converter() {\n", "    this(\n", "        true\n", "        );\n", "  }\n", "\n", "  /**\n", "   * Constructor used only by {@code LegacyConverter} to suspend automatic null-handling.\n", "   */\n", "  Converter(boolean handleNullAutomatically) {\n", "    this.handleNullAutomatically = handleNullAutomatically;\n", "  }\n", "\n", "  // SPI methods (what subclasses must implement)\n", "\n", "  /**\n", "   * Returns a representation of {@code a} as an instance of type {@code B}.\n", "   *\n", "   * @param a the instance to convert; will never be null\n", "   * @return the converted instance; <b>must not</b> be null\n", "   */\n", "  protected abstract B doForward(A a);\n", "\n", "  /**\n", "   * Returns a representation of {@code b} as an instance of type {@code A}.\n", "   *\n", "   * @param b the instance to convert; will never be null\n", "   * @return the converted instance; <b>must not</b> be null\n", "   * @throws RuntimeException if {@code b} is not an instance this converter can convert; this\n", "   *     should typically be an {@code IllegalArgumentException}\n", "   * @throws UnsupportedOperationException if this converter cannot convert in the reverse\n", "   *     direction. This should be very rare. Note that if backward conversion is not only\n", "   *     unimplemented but unimplement<i>able</i> (for example, consider a {@code\n", "   *     Converter<Chicken, ChickenNugget>}), then this is not logically a converter at all, and it\n", "   *     would be misleading to extend this class.\n", "   */\n", "  protected abstract A doBackward(B b);\n", "\n", "  // API (consumer-side) methods\n", "\n", "  /**\n", "   * Returns a representation of {@code a} as an instance of type {@code B}.\n", "   *\n", "   * @return the converted value; is null <i>if and only if</i> {@code a} is null\n", "   */\n", "  @Nullable public final B convert(@Nullable A a) {\n", "    return correctedDoForward(a);\n", "  }\n", "\n", "  B correctedDoForward(A a) {\n", "    if (handleNullAutomatically) {\n", "      return a == null ? null : checkNotNull(doForward(a));\n", "    } else {\n", "      return doForward(a);\n", "    }\n", "  }\n", "\n", "  A correctedDoBackward(B b) {\n", "    if (handleNullAutomatically) {\n", "      return b == null ? null : checkNotNull(doBackward(b));\n", "    } else {\n", "      return doBackward(b);\n", "    }\n", "  }\n", "\n", "  /**\n", "   * Returns an iterable that applies {@code convert} to each element of {@code fromIterable}. The\n", "   * conversion is done lazily.\n", "   *\n", "   * <p>The returned iterable's iterator supports {@code remove()} if the input iterator does. After\n", "   * a successful {@code remove()} call, {@code fromIterable} no longer contains the corresponding\n", "   * element.\n", "   */\n", "  public Iterable<B> convertAll(final Iterable<? extends A> fromIterable) {\n", "    checkNotNull(fromIterable, \"fromIterable\");\n", "    return new Iterable<B>() {\n", "      @Override public Iterator<B> iterator() {\n", "        return new Iterator<B>() {\n", "          private final Iterator<? extends A> fromIterator = fromIterable.iterator();\n", "          @Override public boolean hasNext() {\n", "            return fromIterator.hasNext();\n", "          }\n", "          @Override public B next() {\n", "            return convert(fromIterator.next());\n", "          }\n", "          @Override public void remove() {\n", "            fromIterator.remove();\n", "          }\n", "        };\n", "      }\n", "    };\n", "  }\n", "\n", "  /**\n", "   * Returns the reversed view of this converter, which converts {@code this.convert(a)} back to a\n", "   * value roughly equivalent to {@code a}.\n", "   *\n", "   * <p>The returned converter is serializable if {@code this} converter is.\n", "   */\n", "  public Converter<B, A> reverse() {\n", "    return new ReverseConverter<A, B>(this);\n", "  }\n", "\n", "  private static final class ReverseConverter<A, B>\n", "      extends Converter<B, A> implements Serializable {\n", "    final Converter<A, B> original;\n", "\n", "    ReverseConverter(Converter<A, B> original) {\n", "      // Rely on backing converter to handle null if desired, not us.\n", "      // Actually, since we override correctedDo*, nothing will use this field now anyway.\n", "      super(false);\n", "      this.original = original;\n", "    }\n", "\n", "    /*\n", "     * These gymnastics are a little confusing. Basically this class has neither legacy nor\n", "     * non-legacy behavior; it just needs to let the behavior of the backing converter shine\n", "     * through. So, we override the correctedDo* methods, after which the do* methods should never\n", "     * be reached.\n", "     */\n", "\n", "    @Override protected A doForward(@Nullable B b) {\n", "      throw new AssertionError();\n", "    }\n", "\n", "    @Override protected B doBackward(@Nullable A a) {\n", "      throw new AssertionError();\n", "    }\n", "\n", "    @Override A correctedDoForward(B b) {\n", "      return original.correctedDoBackward(b);\n", "    }\n", "\n", "    @Override B correctedDoBackward(A a) {\n", "      return original.correctedDoForward(a);\n", "    }\n", "\n", "    @Override public Converter<A, B> reverse() {\n", "      return original;\n", "    }\n", "\n", "    @Override public boolean equals(@Nullable Object object) {\n", "      if (object instanceof ReverseConverter) {\n", "        ReverseConverter<?, ?> that = (ReverseConverter<?, ?>) object;\n", "        return this.original.equals(that.original);\n", "      }\n", "      return false;\n", "    }\n", "\n", "    @Override public int hashCode() {\n", "      return ~original.hashCode();\n", "    }\n", "\n", "    @Override public String toString() {\n", "      return original + \".reverse()\";\n", "    }\n", "\n", "    private static final long serialVersionUID = 0L;\n", "  }\n", "\n", "  /**\n", "   * Returns a converter whose {@code convert} method applies {@code secondConverter} to the result\n", "   * of this converter. Its {@code reverse} method applies the converters in reverse order.\n", "   *\n", "   * <p>The returned converter is serializable if {@code this} converter and {@code secondConverter}\n", "   * are.\n", "   */\n", "  public <C> Converter<A, C> andThen(Converter<B, C> secondConverter) {\n", "    return ConverterComposition.of(this, checkNotNull(secondConverter, \"secondConverter\"));\n", "  }\n", "\n", "  private static final class ConverterComposition<A, B, C>\n", "      extends Converter<A, C> implements Serializable {\n", "    final Converter<A, B> first;\n", "    final Converter<B, C> second;\n", "\n", "    ConverterComposition(Converter<A, B> first, Converter<B, C> second) {\n", "      // Rely on backing converter to handle null if desired, not us.\n", "      // Actually, since we override correctedDo*, nothing will use this field now anyway.\n", "      super(false);\n", "      this.first = first;\n", "      this.second = second;\n", "    }\n", "\n", "    /*\n", "     * These gymnastics are a little confusing. Basically this class has neither legacy nor\n", "     * non-legacy behavior; it just needs to let the behaviors of the backing converters shine\n", "     * through (which might even differ from each other!). So, we override the correctedDo* methods,\n", "     * after which the do* methods should never be reached.\n", "     */\n", "\n", "    @Override protected C doForward(@Nullable A a) {\n", "      throw new AssertionError();\n", "    }\n", "\n", "    @Override protected A doBackward(@Nullable C c) {\n", "      throw new AssertionError();\n", "    }\n", "\n", "    @Override C correctedDoForward(@Nullable A a) {\n", "      return second.correctedDoForward(first.correctedDoForward(a));\n", "    }\n", "\n", "    @Override A correctedDoBackward(@Nullable C c) {\n", "      return first.correctedDoBackward(second.correctedDoBackward(c));\n", "    }\n", "\n", "    @Override public boolean equals(@Nullable Object object) {\n", "      if (object instanceof ConverterComposition) {\n", "        ConverterComposition<?, ?, ?> that = (ConverterComposition<?, ?, ?>) object;\n", "        return this.first.equals(that.first)\n", "            && this.second.equals(that.second);\n", "      }\n", "      return false;\n", "    }\n", "\n", "    @Override public int hashCode() {\n", "      return 31 * first.hashCode() + second.hashCode();\n", "    }\n", "\n", "    @Override public String toString() {\n", "      return first + \".andThen(\" + second + \")\";\n", "    }\n", "\n", "    static <A, B, C> Converter<A, C> of(Converter<A, B> first, Converter<B, C> second) {\n", "      return new ConverterComposition<A, B, C>(first, second);\n", "    }\n", "\n", "    private static final long serialVersionUID = 0L;\n", "  }\n", "\n", "  /**\n", "   * @deprecated Provided to satisfy the {@code Function} interface; use {@link #convert} instead.\n", "   */\n", "  @Deprecated\n", "  @Override\n", "  @Nullable public final B apply(@Nullable A a) {\n", "    return convert(a);\n", "  }\n", "\n", "  /**\n", "   * Indicates whether another object is equal to this converter.\n", "   *\n", "   * <p>Most implementations will have no reason to override the behavior of {@link Object#equals}.\n", "   * However, an implementation may also choose to return {@code true} whenever {@code object} is a\n", "   * {@link Converter} that it considers <i>interchangeable</i> with this one. \"Interchangeable\"\n", "   * <i>typically</i> means that {@code Objects.equal(this.convert(a), that.convert(a))} is true for\n", "   * all {@code a} of type {@code A} (and similarly for {@code reverse}). Note that a {@code false}\n", "   * result from this method does not imply that the converters are known <i>not</i> to be\n", "   * interchangeable.\n", "   */\n", "  @Override\n", "  public boolean equals(@Nullable Object object) {\n", "    return super.equals(object);\n", "  }\n", "\n", "  // Static singleton converters\n", "\n", "  /**\n", "   * Returns a serializable converter that always converts or reverses an object to itself.\n", "   */\n", "  @SuppressWarnings(\"unchecked\") // implementation is \"fully variant\"\n", "  public static <T> Converter<T, T> identity() {\n", "    return (IdentityConverter<T>) IdentityConverter.INSTANCE;\n", "  }\n", "\n", "  /**\n", "   * A converter that always converts or reverses an object to itself. Note that T is now a\n", "   * \"pass-through type\".\n", "   */\n", "  private static final class IdentityConverter<T> extends Converter<T, T> implements Serializable {\n", "    static final IdentityConverter INSTANCE = new IdentityConverter();\n", "\n", "    @Override protected T doForward(@Nullable T t) {\n", "      return t;\n", "    }\n", "\n", "    @Override protected T doBackward(@Nullable T t) {\n", "      return t;\n", "    }\n", "\n", "    @Override public IdentityConverter<T> reverse() {\n", "      return this;\n", "    }\n", "\n", "    @Override public <S> Converter<T, S> andThen(Converter<T, S> otherConverter) {\n", "      return checkNotNull(otherConverter, \"otherConverter\");\n", "    }\n", "\n", "    /*\n", "     * We *could* override convertAll() to return its input, but it's a rather pointless\n", "     * optimization and opened up a weird type-safety problem.\n", "     */\n", "\n", "    @Override public String toString() {\n", "      return \"Converter.identity()\";\n", "    }\n", "\n", "    private Object readResolve() {\n", "      return INSTANCE;\n", "    }\n", "\n", "    private static final long serialVersionUID = 0L;\n", "  }\n", "}\n"]}, "removed": {}, "added_lines": {"1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393]}, "removed_lines": {}}, {"36": "guava/src/com/google/common/base/Enums.java", "added": {"1": ["  // TODO(user): Deprecate in favor of Enums.stringConverter()\n"], "2": ["\n", "  /**\n", "   * Returns a converter that converts between strings and {@code enum} values\n", "   * of type {@code enumClass} using {@link Enum#valueOf(Class, String)} and\n", "   * {@link Enum#name()}.\n", "   * The converter will throw an {@code IllegalArgumentException} if the\n", "   * argument is not the name of any enum constant in the specified enum.\n", "   *\n", "   * @since 16.0\n", "   */\n", "  // TODO(user): Make this serializable.\n", "  public static <T extends Enum<T>> Converter<String, T> stringConverter(\n", "      final Class<T> enumClass) {\n", "    checkNotNull(enumClass);\n", "    return new Converter<String, T>() {\n", "      @Override\n", "      protected T doForward(String value) {\n", "        // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n", "        return value == null ? null : Enum.valueOf(enumClass, value);\n", "      }\n", "\n", "      @Override\n", "      protected String doBackward(T enumValue) {\n", "        // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n", "        return enumValue == null ? null : enumValue.name();\n", "      }\n", "      @Override public String toString() {\n", "        return \"Enums.stringConverter(\" + enumClass + \")\";\n", "      }\n", "    };\n", "  }\n"]}, "removed": {}, "added_lines": {"1": [69], "2": [129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159]}, "removed_lines": {}}, {"37": "guava/src/com/google/common/base/package-info.java", "added": {"1": [" * <li>{@link com.google.common.base.Converter}\n"]}, "removed": {}, "added_lines": {"1": [45]}, "removed_lines": {}}, {"38": "guava/src/com/google/common/collect/Maps.java", "added": {"1": ["import com.google.common.base.Converter;\n"], "2": ["  /**\n", "   * Returns a {@link Converter} that converts values using {@link BiMap#get bimap.get()},\n", "   * and whose inverse view converts values using\n", "   * {@link BiMap#inverse bimap.inverse()}{@code .get()}\n", "   *\n", "   * @param bimap the bimap to view as a converter\n", "   * @return a converter that is a view of the specified bimap\n", "   * @since 16.0\n", "   */\n", "  @Beta\n", "  public static <A, B> Converter<A, B> asConverter(final BiMap<A, B> bimap) {\n", "    checkNotNull(bimap);\n", "    return new Converter<A, B>() {\n", "      @Override\n", "      protected B doForward(A a) {\n", "        return convert(bimap, a);\n", "      }\n", "      @Override\n", "      protected A doBackward(B b) {\n", "        return convert(bimap.inverse(), b);\n", "      }\n", "\n", "      private /*static*/ <X, Y> Y convert(BiMap<X, Y> bimap, X input) {\n", "        // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n", "        if (input == null) {\n", "          return null;\n", "        }\n", "        Y output = bimap.get(input);\n", "        checkArgument(output != null, \"No non-null mapping present for input: %s\", input);\n", "        return output;\n", "      }\n", "    };\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [30], "2": [1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335]}, "removed_lines": {}}, {"39": "guava/src/com/google/common/primitives/Doubles.java", "added": {"1": ["import com.google.common.base.Converter;\n"], "2": ["  private static final class DoubleConverter\n", "      extends Converter<String, Double> implements Serializable {\n", "    static final DoubleConverter INSTANCE = new DoubleConverter();\n", "\n", "    @Override\n", "    protected Double doForward(String value) {\n", "      // TODO(kevinb): remove null boilerplate (convert() will do it\n", "      // automatically)\n", "      return value == null ? null : Double.valueOf(value);\n", "    }\n", "\n", "    @Override\n", "    protected String doBackward(Double value) {\n", "      // TODO(kevinb): remove null boilerplate (convert() will do it\n", "      // automatically)\n", "      return value == null ? null : value.toString();\n", "    }\n", "\n", "    @Override\n", "    public String toString() {\n", "      return \"Doubles.stringConverter()\";\n", "    }\n", "\n", "    private Object readResolve() {\n", "      return INSTANCE;\n", "    }\n", "    private static final long serialVersionUID = 1;\n", "  }\n", "\n", "  /**\n", "   * Returns a serializable converter object that converts between strings and\n", "   * doubles using {@link Double#valueOf} and {@link Double#toString()}.\n", "   *\n", "   * @since 16.0\n", "   */\n", "  @Beta\n", "  public static Converter<String, Double> stringConverter() {\n", "    return DoubleConverter.INSTANCE;\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [29], "2": [272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311]}, "removed_lines": {}}, {"40": "guava/src/com/google/common/primitives/Floats.java", "added": {"1": ["import com.google.common.base.Converter;\n"], "2": ["  private static final class FloatConverter\n", "      extends Converter<String, Float> implements Serializable {\n", "    static final FloatConverter INSTANCE = new FloatConverter();\n", "\n", "    @Override\n", "    protected Float doForward(String value) {\n", "      // TODO(kevinb): remove null boilerplate (convert() will do it\n", "      // automatically)\n", "      return value == null ? null : Float.valueOf(value);\n", "    }\n", "\n", "    @Override\n", "    protected String doBackward(Float value) {\n", "      // TODO(kevinb): remove null boilerplate (convert() will do it\n", "      // automatically)\n", "      return value == null ? null : value.toString();\n", "    }\n", "\n", "    @Override\n", "    public String toString() {\n", "      return \"Floats.stringConverter()\";\n", "    }\n", "\n", "    private Object readResolve() {\n", "      return INSTANCE;\n", "    }\n", "    private static final long serialVersionUID = 1;\n", "  }\n", "\n", "  /**\n", "   * Returns a serializable converter object that converts between strings and\n", "   * floats using {@link Float#valueOf} and {@link Float#toString()}.\n", "   *\n", "   * @since 16.0\n", "   */\n", "  @Beta\n", "  public static Converter<String, Float> stringConverter() {\n", "    return FloatConverter.INSTANCE;\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [29], "2": [268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307]}, "removed_lines": {}}, {"41": "guava/src/com/google/common/primitives/Ints.java", "added": {"1": ["import com.google.common.base.Converter;\n"], "2": ["  private static final class IntConverter\n", "      extends Converter<String, Integer> implements Serializable {\n", "    static final IntConverter INSTANCE = new IntConverter();\n", "\n", "    @Override\n", "    // TODO(kevinb): remove null boilerplate (convert() will do it\n", "    // automatically)\n", "    protected Integer doForward(String value) {\n", "      return value == null ? null : Integer.decode(value);\n", "    }\n", "\n", "    @Override\n", "    protected String doBackward(Integer value) {\n", "      // TODO(kevinb): remove null boilerplate (convert() will do it\n", "      // automatically)\n", "      return value == null ? null : value.toString();\n", "    }\n", "\n", "    @Override\n", "    public String toString() {\n", "      return \"Ints.stringConverter()\";\n", "    }\n", "\n", "    private Object readResolve() {\n", "      return INSTANCE;\n", "    }\n", "    private static final long serialVersionUID = 1;\n", "  }\n", "\n", "  /**\n", "   * Returns a serializable converter object that converts between strings and\n", "   * integers using {@link Integer#decode} and {@link Integer#toString()}.\n", "   *\n", "   * @since 16.0\n", "   */\n", "  @Beta\n", "  public static Converter<String, Integer> stringConverter() {\n", "    return IntConverter.INSTANCE;\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [27], "2": [339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378]}, "removed_lines": {}}, {"42": "guava/src/com/google/common/primitives/Longs.java", "added": {"1": ["import com.google.common.base.Converter;\n"], "2": ["  private static final class LongConverter extends Converter<String, Long> implements Serializable {\n", "    static final LongConverter INSTANCE = new LongConverter();\n", "\n", "    @Override\n", "    protected Long doForward(String value) {\n", "      // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n", "      return value == null ? null : Long.decode(value);\n", "    }\n", "\n", "    @Override\n", "    protected String doBackward(Long value) {\n", "      // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n", "      return value == null ? null : value.toString();\n", "    }\n", "\n", "    @Override\n", "    public String toString() {\n", "      return \"Longs.stringConverter()\";\n", "    }\n", "\n", "    private Object readResolve() {\n", "      return INSTANCE;\n", "    }\n", "    private static final long serialVersionUID = 1;\n", "  }\n", "\n", "  /**\n", "   * Returns a serializable converter object that converts between strings and\n", "   * longs using {@link Long#decode} and {@link Long#toString()}.\n", "   *\n", "   * @since 16.0\n", "   */\n", "  @Beta\n", "  public static Converter<String, Long> stringConverter() {\n", "    return LongConverter.INSTANCE;\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [26], "2": [370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406]}, "removed_lines": {}}, {"43": "guava/src/com/google/common/primitives/Shorts.java", "added": {"1": ["import com.google.common.annotations.Beta;\n", "import com.google.common.base.Converter;\n"], "2": ["  private static final class ShortConverter\n", "      extends Converter<String, Short> implements Serializable {\n", "    static final ShortConverter INSTANCE = new ShortConverter();\n", "\n", "    @Override\n", "    protected Short doForward(String value) {\n", "      // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n", "      return value == null ? null : Short.decode(value);\n", "    }\n", "\n", "    @Override\n", "    protected String doBackward(Short value) {\n", "      // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n", "      return value == null ? null : value.toString();\n", "    }\n", "\n", "    @Override\n", "    public String toString() {\n", "      return \"Shorts.stringConverter()\";\n", "    }\n", "\n", "    private Object readResolve() {\n", "      return INSTANCE;\n", "    }\n", "    private static final long serialVersionUID = 1;\n", "  }\n", "\n", "  /**\n", "   * Returns a serializable converter object that converts between strings and\n", "   * shorts using {@link Short#decode} and {@link Short#toString()}.\n", "   *\n", "   * @since 16.0\n", "   */\n", "  @Beta\n", "  public static Converter<String, Short> stringConverter() {\n", "    return ShortConverter.INSTANCE;\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [24, 27], "2": [337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374]}, "removed_lines": {}}]}
