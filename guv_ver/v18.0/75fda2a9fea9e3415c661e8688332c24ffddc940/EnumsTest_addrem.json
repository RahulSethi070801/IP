{
    "addition": {
        "94": "  public void testStringConverter_convert() {\n",
        "95": "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n",
        "96": "    assertEquals(TestEnum.CHEETO, converter.convert(\"CHEETO\"));\n",
        "97": "    assertEquals(TestEnum.HONDA, converter.convert(\"HONDA\"));\n",
        "98": "    assertEquals(TestEnum.POODLE, converter.convert(\"POODLE\"));\n",
        "99": "    assertNull(converter.convert(null));\n",
        "100": "    assertNull(converter.reverse().convert(null));\n",
        "101": "  }\n",
        "102": "\n",
        "103": "  public void testStringConverter_convertError() {\n",
        "104": "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n",
        "105": "    try {\n",
        "106": "      converter.convert(\"xxx\");\n",
        "107": "      fail();\n",
        "108": "    } catch (IllegalArgumentException expected) {\n",
        "109": "    }\n",
        "110": "  }\n",
        "111": "\n",
        "112": "  public void testStringConverter_reverse() {\n",
        "113": "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n",
        "114": "    assertEquals(\"CHEETO\", converter.reverse().convert(TestEnum.CHEETO));\n",
        "115": "    assertEquals(\"HONDA\", converter.reverse().convert(TestEnum.HONDA));\n",
        "116": "    assertEquals(\"POODLE\", converter.reverse().convert(TestEnum.POODLE));\n",
        "117": "  }\n",
        "118": "\n",
        "119": "  public void testStringConverter_nullConversions() {\n",
        "120": "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n",
        "121": "    assertNull(converter.convert(null));\n",
        "122": "    assertNull(converter.reverse().convert(null));\n",
        "123": "  }\n",
        "124": "\n"
    },
    "removed": {}
}