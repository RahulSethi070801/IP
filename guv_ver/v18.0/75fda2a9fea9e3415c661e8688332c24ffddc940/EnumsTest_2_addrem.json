{
    "addition": {
        "104": "  public void testStringConverter_convert() {\n",
        "105": "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n",
        "106": "    assertEquals(TestEnum.CHEETO, converter.convert(\"CHEETO\"));\n",
        "107": "    assertEquals(TestEnum.HONDA, converter.convert(\"HONDA\"));\n",
        "108": "    assertEquals(TestEnum.POODLE, converter.convert(\"POODLE\"));\n",
        "109": "    assertNull(converter.convert(null));\n",
        "110": "    assertNull(converter.reverse().convert(null));\n",
        "111": "  }\n",
        "112": "\n",
        "113": "  public void testStringConverter_convertError() {\n",
        "114": "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n",
        "115": "    try {\n",
        "116": "      converter.convert(\"xxx\");\n",
        "117": "      fail();\n",
        "118": "    } catch (IllegalArgumentException expected) {\n",
        "119": "    }\n",
        "120": "  }\n",
        "121": "\n",
        "122": "  public void testStringConverter_reverse() {\n",
        "123": "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n",
        "124": "    assertEquals(\"CHEETO\", converter.reverse().convert(TestEnum.CHEETO));\n",
        "125": "    assertEquals(\"HONDA\", converter.reverse().convert(TestEnum.HONDA));\n",
        "126": "    assertEquals(\"POODLE\", converter.reverse().convert(TestEnum.POODLE));\n",
        "127": "  }\n",
        "128": "\n",
        "129": "  @GwtIncompatible(\"NullPointerTester\")\n",
        "130": "  public void testStringConverter_nullPointerTester() throws Exception {\n",
        "131": "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n",
        "132": "    NullPointerTester tester = new NullPointerTester();\n",
        "133": "    tester.testAllPublicInstanceMethods(converter);\n",
        "134": "  }\n",
        "135": "\n",
        "136": "  public void testStringConverter_nullConversions() {\n",
        "137": "    Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);\n",
        "138": "    assertNull(converter.convert(null));\n",
        "139": "    assertNull(converter.reverse().convert(null));\n",
        "140": "  }\n",
        "141": "\n"
    },
    "removed": {}
}