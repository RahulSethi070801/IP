{
    "addition": {
        "29": "import com.google.common.base.Converter;\n",
        "1100": "  /**\n",
        "1101": "   * Returns a {@link Converter} that converts values using {@link BiMap#get bimap.get()},\n",
        "1102": "   * and whose inverse view converts values using\n",
        "1103": "   * {@link BiMap#inverse bimap.inverse()}{@code .get()}\n",
        "1104": "   *\n",
        "1105": "   * @param bimap the bimap to view as a converter\n",
        "1106": "   * @return a converter that is a view of the specified bimap\n",
        "1107": "   * @since 16.0\n",
        "1108": "   */\n",
        "1109": "  @Beta\n",
        "1110": "  public static <A, B> Converter<A, B> asConverter(final BiMap<A, B> bimap) {\n",
        "1111": "    checkNotNull(bimap);\n",
        "1112": "    return new Converter<A, B>() {\n",
        "1113": "      @Override\n",
        "1114": "      protected B doForward(A a) {\n",
        "1115": "        return convert(bimap, a);\n",
        "1116": "      }\n",
        "1117": "      @Override\n",
        "1118": "      protected A doBackward(B b) {\n",
        "1119": "        return convert(bimap.inverse(), b);\n",
        "1120": "      }\n",
        "1121": "\n",
        "1122": "      private /*static*/ <X, Y> Y convert(BiMap<X, Y> bimap, X input) {\n",
        "1123": "        // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n",
        "1124": "        if (input == null) {\n",
        "1125": "          return null;\n",
        "1126": "        }\n",
        "1127": "        Y output = bimap.get(input);\n",
        "1128": "        checkArgument(output != null, \"No non-null mapping present for input: %s\", input);\n",
        "1129": "        return output;\n",
        "1130": "      }\n",
        "1131": "    };\n",
        "1132": "  }\n",
        "1133": "\n"
    },
    "removed": {}
}