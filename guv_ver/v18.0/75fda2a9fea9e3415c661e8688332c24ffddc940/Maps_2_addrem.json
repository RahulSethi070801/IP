{
    "addition": {
        "30": "import com.google.common.base.Converter;\n",
        "1302": "  /**\n",
        "1303": "   * Returns a {@link Converter} that converts values using {@link BiMap#get bimap.get()},\n",
        "1304": "   * and whose inverse view converts values using\n",
        "1305": "   * {@link BiMap#inverse bimap.inverse()}{@code .get()}\n",
        "1306": "   *\n",
        "1307": "   * @param bimap the bimap to view as a converter\n",
        "1308": "   * @return a converter that is a view of the specified bimap\n",
        "1309": "   * @since 16.0\n",
        "1310": "   */\n",
        "1311": "  @Beta\n",
        "1312": "  public static <A, B> Converter<A, B> asConverter(final BiMap<A, B> bimap) {\n",
        "1313": "    checkNotNull(bimap);\n",
        "1314": "    return new Converter<A, B>() {\n",
        "1315": "      @Override\n",
        "1316": "      protected B doForward(A a) {\n",
        "1317": "        return convert(bimap, a);\n",
        "1318": "      }\n",
        "1319": "      @Override\n",
        "1320": "      protected A doBackward(B b) {\n",
        "1321": "        return convert(bimap.inverse(), b);\n",
        "1322": "      }\n",
        "1323": "\n",
        "1324": "      private /*static*/ <X, Y> Y convert(BiMap<X, Y> bimap, X input) {\n",
        "1325": "        // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n",
        "1326": "        if (input == null) {\n",
        "1327": "          return null;\n",
        "1328": "        }\n",
        "1329": "        Y output = bimap.get(input);\n",
        "1330": "        checkArgument(output != null, \"No non-null mapping present for input: %s\", input);\n",
        "1331": "        return output;\n",
        "1332": "      }\n",
        "1333": "    };\n",
        "1334": "  }\n",
        "1335": "\n"
    },
    "removed": {}
}