{
    "addition": {
        "20": "import com.google.common.base.Converter;\n",
        "357": "\n",
        "358": "  public void testStringConverter_convert() {\n",
        "359": "    Converter<String, Integer> converter = Ints.stringConverter();\n",
        "360": "    assertEquals((Integer) 1, converter.convert(\"1\"));\n",
        "361": "    assertEquals((Integer) 0, converter.convert(\"0\"));\n",
        "362": "    assertEquals((Integer) (-1), converter.convert(\"-1\"));\n",
        "363": "    assertEquals((Integer) 255, converter.convert(\"0xff\"));\n",
        "364": "    assertEquals((Integer) 255, converter.convert(\"0xFF\"));\n",
        "365": "    assertEquals((Integer) (-255), converter.convert(\"-0xFF\"));\n",
        "366": "    assertEquals((Integer) 255, converter.convert(\"#0000FF\"));\n",
        "367": "    assertEquals((Integer) 438, converter.convert(\"0666\"));\n",
        "368": "  }\n",
        "369": "\n",
        "370": "  public void testStringConverter_convertError() {\n",
        "371": "    try {\n",
        "372": "      Ints.stringConverter().convert(\"notanumber\");\n",
        "373": "      fail();\n",
        "374": "    } catch (NumberFormatException expected) {\n",
        "375": "    }\n",
        "376": "  }\n",
        "377": "\n",
        "378": "  public void testStringConverter_nullConversions() {\n",
        "379": "    assertNull(Ints.stringConverter().convert(null));\n",
        "380": "    assertNull(Ints.stringConverter().reverse().convert(null));\n",
        "381": "  }\n",
        "382": "\n",
        "383": "  public void testStringConverter_reverse() {\n",
        "384": "    Converter<String, Integer> converter = Ints.stringConverter();\n",
        "385": "    assertEquals(\"1\", converter.reverse().convert(1));\n",
        "386": "    assertEquals(\"0\", converter.reverse().convert(0));\n",
        "387": "    assertEquals(\"-1\", converter.reverse().convert(-1));\n",
        "388": "    assertEquals(\"255\", converter.reverse().convert(0xff));\n",
        "389": "    assertEquals(\"255\", converter.reverse().convert(0xFF));\n",
        "390": "    assertEquals(\"-255\", converter.reverse().convert(-0xFF));\n",
        "391": "    assertEquals(\"438\", converter.reverse().convert(0666));\n",
        "392": "  }\n",
        "394": "\n"
    },
    "removed": {}
}