{
    "addition": {
        "24": "import com.google.common.annotations.Beta;\n",
        "26": "import com.google.common.base.Converter;\n",
        "285": "  private static final class ShortConverter\n",
        "286": "      extends Converter<String, Short> implements Serializable {\n",
        "287": "    static final ShortConverter INSTANCE = new ShortConverter();\n",
        "288": "\n",
        "289": "    @Override\n",
        "290": "    protected Short doForward(String value) {\n",
        "291": "      // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n",
        "292": "      return value == null ? null : Short.decode(value);\n",
        "293": "    }\n",
        "294": "\n",
        "295": "    @Override\n",
        "296": "    protected String doBackward(Short value) {\n",
        "297": "      // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n",
        "298": "      return value == null ? null : value.toString();\n",
        "299": "    }\n",
        "300": "\n",
        "301": "    @Override\n",
        "302": "    public String toString() {\n",
        "303": "      return \"Shorts.stringConverter()\";\n",
        "304": "    }\n",
        "305": "\n",
        "306": "    private Object readResolve() {\n",
        "307": "      return INSTANCE;\n",
        "308": "    }\n",
        "309": "    private static final long serialVersionUID = 1;\n",
        "310": "  }\n",
        "311": "\n",
        "312": "  /**\n",
        "313": "   * Returns a serializable converter object that converts between strings and\n",
        "314": "   * shorts using {@link Short#decode} and {@link Short#toString()}.\n",
        "315": "   *\n",
        "316": "   * @since 16.0\n",
        "317": "   */\n",
        "318": "  @Beta\n",
        "319": "  public static Converter<String, Short> stringConverter() {\n",
        "320": "    return ShortConverter.INSTANCE;\n",
        "321": "  }\n",
        "322": "\n"
    },
    "removed": {}
}