{
    "addition": {
        "49": "  // TODO(user): Deprecate in favor of Enums.stringConverter()\n",
        "109": "\n",
        "110": "  /**\n",
        "111": "   * Returns a converter that converts between strings and {@code enum} values\n",
        "112": "   * of type {@code enumClass} using {@link Enum#valueOf(Class, String)} and\n",
        "113": "   * {@link Enum#name()}.\n",
        "114": "   * The converter will throw an {@code IllegalArgumentException} if the\n",
        "115": "   * argument is not the name of any enum constant in the specified enum.\n",
        "116": "   *\n",
        "117": "   * @since 16.0\n",
        "118": "   */\n",
        "119": "  // TODO(user): Make this serializable.\n",
        "120": "  public static <T extends Enum<T>> Converter<String, T> stringConverter(\n",
        "121": "      final Class<T> enumClass) {\n",
        "122": "    checkNotNull(enumClass);\n",
        "123": "    return new Converter<String, T>() {\n",
        "124": "      @Override\n",
        "125": "      protected T doForward(String value) {\n",
        "126": "        // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n",
        "127": "        return value == null ? null : Enum.valueOf(enumClass, value);\n",
        "128": "      }\n",
        "129": "\n",
        "130": "      @Override\n",
        "131": "      protected String doBackward(T enumValue) {\n",
        "132": "        // TODO(kevinb): remove null boilerplate (convert() will do it automatically)\n",
        "133": "        return enumValue == null ? null : enumValue.name();\n",
        "134": "      }\n",
        "135": "      @Override public String toString() {\n",
        "136": "        return \"Enums.stringConverter(\" + enumClass + \")\";\n",
        "137": "      }\n",
        "138": "    };\n",
        "139": "  }\n"
    },
    "removed": {}
}