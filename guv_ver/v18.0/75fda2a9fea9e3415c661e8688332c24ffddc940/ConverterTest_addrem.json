{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2008 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.base;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.collect.ImmutableList;\n",
        "21": "import com.google.common.collect.Lists;\n",
        "22": "import com.google.common.primitives.Longs;\n",
        "23": "import com.google.common.testing.EqualsTester;\n",
        "24": "import com.google.common.testing.SerializableTester;\n",
        "25": "\n",
        "26": "import junit.framework.TestCase;\n",
        "27": "\n",
        "28": "import java.util.Iterator;\n",
        "29": "import java.util.List;\n",
        "30": "\n",
        "31": "/**\n",
        "32": " * Unit tests for {@link Converter}.\n",
        "33": " */\n",
        "34": "@GwtCompatible\n",
        "35": "public class ConverterTest extends TestCase {\n",
        "36": "\n",
        "37": "  private static final Converter<String, Long> STR_TO_LONG =\n",
        "38": "      new Converter<String, Long>() {\n",
        "39": "        @Override public Long doForward(String object) {\n",
        "40": "          return Long.valueOf(object);\n",
        "41": "        }\n",
        "42": "\n",
        "43": "        @Override public String doBackward(Long object) {\n",
        "44": "          return String.valueOf(object);\n",
        "45": "        }\n",
        "46": "\n",
        "47": "        @Override public String toString() {\n",
        "48": "          return \"string2long\";\n",
        "49": "        }\n",
        "50": "      };\n",
        "51": "\n",
        "52": "  private static final Long LONG_VAL = 12345L;\n",
        "53": "  private static final String STR_VAL = \"12345\";\n",
        "54": "\n",
        "55": "  private static final ImmutableList<String> STRINGS = ImmutableList.of(\"123\", \"456\");\n",
        "56": "  private static final ImmutableList<Long> LONGS = ImmutableList.of(123L, 456L);\n",
        "57": "\n",
        "58": "  public void testConverter() {\n",
        "59": "    assertEquals(LONG_VAL, STR_TO_LONG.convert(STR_VAL));\n",
        "60": "    assertEquals(STR_VAL, STR_TO_LONG.reverse().convert(LONG_VAL));\n",
        "61": "\n",
        "62": "    Iterable<Long> convertedValues = STR_TO_LONG.convertAll(STRINGS);\n",
        "63": "    assertEquals(LONGS, ImmutableList.copyOf(convertedValues));\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  public void testConvertAllIsView() {\n",
        "67": "    List<String> mutableList = Lists.newArrayList(\"789\", \"123\");\n",
        "68": "    Iterable<Long> convertedValues = STR_TO_LONG.convertAll(mutableList);\n",
        "69": "    assertEquals(ImmutableList.of(789L, 123L), ImmutableList.copyOf(convertedValues));\n",
        "70": "\n",
        "71": "    Iterator<Long> iterator = convertedValues.iterator();\n",
        "72": "    iterator.next();\n",
        "73": "    iterator.remove();\n",
        "74": "    assertEquals(ImmutableList.of(\"123\"), mutableList);\n",
        "75": "  }\n",
        "76": "\n",
        "77": "  public void testReverse() {\n",
        "78": "    Converter<Long, String> reverseConverter = STR_TO_LONG.reverse();\n",
        "79": "\n",
        "80": "    assertEquals(STR_VAL, reverseConverter.convert(LONG_VAL));\n",
        "81": "    assertEquals(LONG_VAL, reverseConverter.reverse().convert(STR_VAL));\n",
        "82": "\n",
        "83": "    Iterable<String> convertedValues = reverseConverter.convertAll(LONGS);\n",
        "84": "    assertEquals(STRINGS, ImmutableList.copyOf(convertedValues));\n",
        "85": "\n",
        "86": "    assertSame(STR_TO_LONG, reverseConverter.reverse());\n",
        "87": "\n",
        "88": "    assertEquals(\"string2long.reverse()\", reverseConverter.toString());\n",
        "89": "\n",
        "90": "    new EqualsTester()\n",
        "91": "        .addEqualityGroup(STR_TO_LONG, STR_TO_LONG.reverse().reverse())\n",
        "92": "        .addEqualityGroup(STR_TO_LONG.reverse(), STR_TO_LONG.reverse())\n",
        "93": "        .testEquals();\n",
        "94": "  }\n",
        "95": "\n",
        "96": "  public void testApply() {\n",
        "97": "    assertEquals(LONG_VAL, STR_TO_LONG.apply(STR_VAL));\n",
        "98": "  }\n",
        "99": "\n",
        "100": "  private static class StringWrapper {\n",
        "101": "    private final String value;\n",
        "102": "\n",
        "103": "    public StringWrapper(String value) {\n",
        "104": "      this.value = value;\n",
        "105": "    }\n",
        "106": "  }\n",
        "107": "\n",
        "108": "  public void testAndThen() {\n",
        "109": "    Converter<StringWrapper, String> first = new Converter<StringWrapper, String>() {\n",
        "110": "      @Override public String doForward(StringWrapper object) {\n",
        "111": "        return object.value;\n",
        "112": "      }\n",
        "113": "\n",
        "114": "      @Override public StringWrapper doBackward(String object) {\n",
        "115": "        return new StringWrapper(object);\n",
        "116": "      }\n",
        "117": "\n",
        "118": "      @Override public String toString() {\n",
        "119": "        return \"StringWrapper\";\n",
        "120": "      }\n",
        "121": "    };\n",
        "122": "\n",
        "123": "    Converter<StringWrapper, Long> converter = first.andThen(STR_TO_LONG);\n",
        "124": "\n",
        "125": "    assertEquals(LONG_VAL, converter.convert(new StringWrapper(STR_VAL)));\n",
        "126": "    assertEquals(STR_VAL, converter.reverse().convert(LONG_VAL).value);\n",
        "127": "\n",
        "128": "    assertEquals(\"StringWrapper.andThen(string2long)\", converter.toString());\n",
        "129": "\n",
        "130": "    assertEquals(first.andThen(STR_TO_LONG), first.andThen(STR_TO_LONG));\n",
        "131": "  }\n",
        "132": "\n",
        "133": "  public void testIdentityConverter() {\n",
        "134": "    Converter<String, String> stringIdentityConverter = Converter.identity();\n",
        "135": "\n",
        "136": "    assertSame(stringIdentityConverter, stringIdentityConverter.reverse());\n",
        "137": "    assertSame(STR_TO_LONG, stringIdentityConverter.andThen(STR_TO_LONG));\n",
        "138": "\n",
        "139": "    assertSame(STR_VAL, stringIdentityConverter.convert(STR_VAL));\n",
        "140": "    assertSame(STR_VAL, stringIdentityConverter.reverse().convert(STR_VAL));\n",
        "141": "\n",
        "142": "    assertEquals(\"Converter.identity()\", stringIdentityConverter.toString());\n",
        "143": "\n",
        "144": "    assertSame(Converter.identity(), Converter.identity());\n",
        "145": "  }\n",
        "146": "\n",
        "147": "  public void testNullIsPassedThrough() {\n",
        "148": "    Converter<String, String> nullsArePassed = sillyConverter(false);\n",
        "149": "    assertEquals(\"forward\", nullsArePassed.convert(\"foo\"));\n",
        "150": "    assertEquals(\"forward\", nullsArePassed.convert(null));\n",
        "151": "    assertEquals(\"backward\", nullsArePassed.reverse().convert(\"foo\"));\n",
        "152": "    assertEquals(\"backward\", nullsArePassed.reverse().convert(null));\n",
        "153": "  }\n",
        "154": "\n",
        "155": "  public void testNullIsNotPassedThrough() {\n",
        "156": "    Converter<String, String> nullsAreHandled = sillyConverter(true);\n",
        "157": "    assertEquals(\"forward\", nullsAreHandled.convert(\"foo\"));\n",
        "158": "    assertEquals(null, nullsAreHandled.convert(null));\n",
        "159": "    assertEquals(\"backward\", nullsAreHandled.reverse().convert(\"foo\"));\n",
        "160": "    assertEquals(null, nullsAreHandled.reverse().convert(null));\n",
        "161": "  }\n",
        "162": "\n",
        "163": "  private static Converter<String, String> sillyConverter(final boolean handleNullAutomatically) {\n",
        "164": "    return new Converter<String, String>(handleNullAutomatically) {\n",
        "165": "      @Override public String doForward(String string) {\n",
        "166": "        return \"forward\";\n",
        "167": "      }\n",
        "168": "      @Override public String doBackward(String string) {\n",
        "169": "        return \"backward\";\n",
        "170": "      }\n",
        "171": "    };\n",
        "172": "  }\n",
        "173": "\n",
        "174": "  public void testSerialization_identity() {\n",
        "175": "    Converter<String, String> identityConverter = Converter.identity();\n",
        "176": "    SerializableTester.reserializeAndAssert(identityConverter);\n",
        "177": "  }\n",
        "178": "\n",
        "179": "  public void testSerialization_reverse() {\n",
        "180": "    Converter<Long, String> reverseConverter = Longs.stringConverter().reverse();\n",
        "181": "    SerializableTester.reserializeAndAssert(reverseConverter);\n",
        "182": "  }\n",
        "183": "\n",
        "184": "  public void testSerialization_andThen() {\n",
        "185": "    Converter<String, Long> converterA = Longs.stringConverter();\n",
        "186": "    Converter<Long, String> reverseConverter = Longs.stringConverter().reverse();\n",
        "187": "    Converter<String, String> composedConverter = converterA.andThen(reverseConverter);\n",
        "188": "    SerializableTester.reserializeAndAssert(composedConverter);\n",
        "189": "  }\n",
        "190": "}\n"
    },
    "removed": {}
}