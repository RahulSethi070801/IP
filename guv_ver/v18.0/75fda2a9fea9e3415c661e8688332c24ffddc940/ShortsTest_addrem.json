{
    "addition": {
        "20": "import com.google.common.base.Converter;\n",
        "365": "\n",
        "366": "  public void testStringConverter_convert() {\n",
        "367": "    Converter<String, Short> converter = Shorts.stringConverter();\n",
        "368": "    assertEquals((Short) (short) 1, converter.convert(\"1\"));\n",
        "369": "    assertEquals((Short) (short) 0, converter.convert(\"0\"));\n",
        "370": "    assertEquals((Short) (short) (-1), converter.convert(\"-1\"));\n",
        "371": "    assertEquals((Short) (short) 255, converter.convert(\"0xff\"));\n",
        "372": "    assertEquals((Short) (short) 255, converter.convert(\"0xFF\"));\n",
        "373": "    assertEquals((Short) (short) (-255), converter.convert(\"-0xFF\"));\n",
        "374": "    assertEquals((Short) (short) 255, converter.convert(\"#0000FF\"));\n",
        "375": "    assertEquals((Short) (short) 438, converter.convert(\"0666\"));\n",
        "376": "  }\n",
        "377": "\n",
        "378": "  public void testStringConverter_convertError() {\n",
        "379": "    try {\n",
        "380": "      Shorts.stringConverter().convert(\"notanumber\");\n",
        "381": "      fail();\n",
        "382": "    } catch (NumberFormatException expected) {\n",
        "383": "    }\n",
        "384": "  }\n",
        "385": "\n",
        "386": "  public void testStringConverter_nullConversions() {\n",
        "387": "    assertNull(Shorts.stringConverter().convert(null));\n",
        "388": "    assertNull(Shorts.stringConverter().reverse().convert(null));\n",
        "389": "  }\n",
        "390": "\n",
        "391": "  public void testStringConverter_reverse() {\n",
        "392": "    Converter<String, Short> converter = Shorts.stringConverter();\n",
        "393": "    assertEquals(\"1\", converter.reverse().convert((short) 1));\n",
        "394": "    assertEquals(\"0\", converter.reverse().convert((short) 0));\n",
        "395": "    assertEquals(\"-1\", converter.reverse().convert((short) -1));\n",
        "396": "    assertEquals(\"255\", converter.reverse().convert((short) 0xff));\n",
        "397": "    assertEquals(\"255\", converter.reverse().convert((short) 0xFF));\n",
        "398": "    assertEquals(\"-255\", converter.reverse().convert((short) -0xFF));\n",
        "399": "    assertEquals(\"438\", converter.reverse().convert((short) 0666));\n",
        "400": "  }\n",
        "402": "\n"
    },
    "removed": {}
}