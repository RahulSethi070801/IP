{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.util.concurrent;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.base.Preconditions;\n",
        "22": "import com.google.common.collect.Queues;\n",
        "23": "\n",
        "24": "import java.util.Queue;\n",
        "25": "import java.util.concurrent.Executor;\n",
        "26": "import java.util.logging.Level;\n",
        "27": "import java.util.logging.Logger;\n",
        "28": "\n",
        "29": "import javax.annotation.concurrent.GuardedBy;\n",
        "30": "\n",
        "31": "/**\n",
        "32": " * A special purpose queue/executor that executes listener callbacks serially on a configured\n",
        "33": " * executor.  Each callback task can be enqueued and executed as separate phases.\n",
        "34": " * \n",
        "35": " * <p>This class is very similar to {@link SerializingExecutor} with the exception that tasks can\n",
        "36": " * be enqueued without necessarily executing immediately.\n",
        "37": " */\n",
        "38": "final class ListenerCallQueue<L> implements Runnable {\n",
        "39": "  // TODO(cpovirk): consider using the logger associated with listener.getClass().\n",
        "40": "  private static final Logger logger = Logger.getLogger(ListenerCallQueue.class.getName());\n",
        "41": "\n",
        "42": "  abstract static class Callback<L> {\n",
        "43": "    private final String methodCall;\n",
        "44": "\n",
        "45": "    Callback(String methodCall) {\n",
        "46": "      this.methodCall = methodCall;\n",
        "47": "    }\n",
        "48": "\n",
        "49": "    abstract void call(L listener);\n",
        "50": "    \n",
        "51": "    /** Helper method to add this callback to all the queues. */\n",
        "52": "    void enqueueOn(Iterable<ListenerCallQueue<L>> queues) {\n",
        "53": "      for (ListenerCallQueue<L> queue : queues) {\n",
        "54": "        queue.add(this);\n",
        "55": "      }\n",
        "56": "    }\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  private final L listener;\n",
        "60": "  private final Executor executor;\n",
        "61": "\n",
        "62": "  @GuardedBy(\"this\") private final Queue<Callback<L>> waitQueue = Queues.newArrayDeque();\n",
        "63": "  @GuardedBy(\"this\") private boolean isThreadScheduled;\n",
        "64": "\n",
        "65": "  ListenerCallQueue(L listener, Executor executor) {\n",
        "66": "    this.listener = checkNotNull(listener);\n",
        "67": "    this.executor = checkNotNull(executor);\n",
        "68": "  }\n",
        "69": "\n",
        "70": "  /** Enqueues a task to be run. */\n",
        "71": "  synchronized void add(Callback<L> callback) {\n",
        "72": "    waitQueue.add(callback);\n",
        "73": "  }\n",
        "74": "\n",
        "75": "  /** Executes all listeners {@linkplain #add added} prior to this call, serially and in order.*/\n",
        "76": "  void execute() {\n",
        "77": "    boolean scheduleTaskRunner = false;\n",
        "78": "    synchronized (this) {\n",
        "79": "      if (!isThreadScheduled) {\n",
        "80": "        isThreadScheduled = true;\n",
        "81": "        scheduleTaskRunner = true;\n",
        "82": "      }\n",
        "83": "    }\n",
        "84": "    if (scheduleTaskRunner) {\n",
        "85": "      try {\n",
        "86": "        executor.execute(this);\n",
        "87": "      } catch (RuntimeException e) {\n",
        "88": "        // reset state in case of an error so that later calls to execute will actually do something\n",
        "89": "        synchronized (this) {\n",
        "90": "          isThreadScheduled = false;\n",
        "91": "        }\n",
        "92": "        // Log it and keep going.\n",
        "93": "        logger.log(Level.SEVERE,\n",
        "94": "            \"Exception while running callbacks for \" + listener + \" on \" + executor, \n",
        "95": "            e);\n",
        "96": "        throw e;\n",
        "97": "      }\n",
        "98": "    }\n",
        "99": "  }\n",
        "100": "\n",
        "101": "  @Override public void run() {\n",
        "102": "    boolean stillRunning = true;\n",
        "103": "    try {\n",
        "104": "      while (true) {\n",
        "105": "        Callback<L> nextToRun;\n",
        "106": "        synchronized (ListenerCallQueue.this) {\n",
        "107": "          Preconditions.checkState(isThreadScheduled);\n",
        "108": "          nextToRun = waitQueue.poll();\n",
        "109": "          if (nextToRun == null) {\n",
        "110": "            isThreadScheduled = false;\n",
        "111": "            stillRunning = false;\n",
        "112": "            break;\n",
        "113": "          }\n",
        "114": "        }\n",
        "115": "\n",
        "116": "        // Always run while _not_ holding the lock, to avoid deadlocks.\n",
        "117": "        try {\n",
        "118": "          nextToRun.call(listener);\n",
        "119": "        } catch (RuntimeException e) {\n",
        "120": "          // Log it and keep going.\n",
        "121": "          logger.log(Level.SEVERE, \n",
        "122": "              \"Exception while executing callback: \" + listener + \".\" + nextToRun.methodCall, \n",
        "123": "              e);\n",
        "124": "        }\n",
        "125": "      }\n",
        "126": "    } finally {\n",
        "127": "      if (stillRunning) {\n",
        "128": "        // An Error is bubbling up, we should mark ourselves as no longer\n",
        "129": "        // running, that way if anyone tries to keep using us we won't be\n",
        "130": "        // corrupted.\n",
        "131": "        synchronized (ListenerCallQueue.this) {\n",
        "132": "          isThreadScheduled = false;\n",
        "133": "        }\n",
        "134": "      }\n",
        "135": "    }\n",
        "136": "  }\n",
        "137": "}\n"
    },
    "removed": {}
}