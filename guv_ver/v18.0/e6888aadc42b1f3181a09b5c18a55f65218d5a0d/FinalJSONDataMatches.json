[{"func":{"oldfunccode":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_oldfunccode_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_1.txt","newfunccode":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_newfunccode_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_1.txt","newdoc":"","newJdoc":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_newfuncnewJdoc_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_1.txt","olddoc":"","oldJdoc":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_oldfuncoldJdoc_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v18.0/e6888aadc42b1f3181a09b5c18a55f65218d5a0d/AbstractService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractService.java","addlines":[413,414],"dellines":[377,378,379],"addcode":["      if (!state().isTerminal()) {\n","        listeners.add(new ListenerCallQueue<Listener>(listener, executor));\n"],"delcode":["      State currentState = state();\n","      if (currentState != TERMINATED && currentState != FAILED) {\n","        listeners.add(new ListenerExecutorPair(listener, executor));\n"],"methodSig":"public final void addListener(Listener listener, Executor executor)"},"doc":{"oldfunccode":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_olddocfunccode_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_1.txt","newfunccode":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_newdocfunccode_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_1.txt","newdoc":"","newJdoc":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_newdocnewJdoc_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_1.txt","olddoc":"","oldJdoc":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_olddocJdoc_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v18.0/e6888aadc42b1f3181a09b5c18a55f65218d5a0d/ServiceManager","pathinproj":"guava/src/com/google/common/util/concurrent/ServiceManager.java","addlines":[231,232,233,234,235,236,238,239],"dellines":[224,219,220,222,223],"addcode":["   * <p>{@code addListener} guarantees execution ordering across calls to a given listener but not\n","   * across calls to multiple listeners. Specifically, a given listener will have its callbacks\n","   * invoked in the same order as the underlying service enters those states. Additionally, at most\n","   * one of the listener's callbacks will execute at once. However, multiple listeners' callbacks\n","   * may execute concurrently, and listeners may execute in an order different from the one in which\n","   * they were registered.\n","   * <p>RuntimeExceptions thrown by a listener will be caught and logged. Any exception thrown \n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException}) will be caught and\n"],"delcode":["   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through \n","   * this method is guaranteed to be called whenever there is a state change.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown \n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception \n","   * thrown by {@linkplain MoreExecutors#sameThreadExecutor inline execution}) will be caught and\n"],"methodSig":"public void addListener(Listener listener, Executor executor)"},"id":1,"flag":1,"commit":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d"},{"func":{"oldfunccode":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_oldfunccode_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_2.txt","newfunccode":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_newfunccode_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_2.txt","newdoc":" no point in adding a listener that will never be called\n","newJdoc":"","olddoc":" no point in adding a listener that will never be called\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v18.0/e6888aadc42b1f3181a09b5c18a55f65218d5a0d/ServiceManager","pathinproj":"guava/src/com/google/common/util/concurrent/ServiceManager.java","addlines":[519],"dellines":[510],"addcode":["          listeners.add(new ListenerCallQueue<Listener>(listener, executor));\n"],"delcode":["          listeners.add(new ListenerExecutorPair(listener, executor));\n"],"methodSig":" void addListener(Listener listener, Executor executor)"},"doc":{"oldfunccode":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_olddocfunccode_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_2.txt","newfunccode":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_newdocfunccode_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_2.txt","newdoc":"","newJdoc":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_newdocnewJdoc_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_2.txt","olddoc":"","oldJdoc":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_olddocJdoc_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v18.0/e6888aadc42b1f3181a09b5c18a55f65218d5a0d/ServiceManager","pathinproj":"guava/src/com/google/common/util/concurrent/ServiceManager.java","addlines":[231,232,233,234,235,236,238,239],"dellines":[224,219,220,222,223],"addcode":["   * <p>{@code addListener} guarantees execution ordering across calls to a given listener but not\n","   * across calls to multiple listeners. Specifically, a given listener will have its callbacks\n","   * invoked in the same order as the underlying service enters those states. Additionally, at most\n","   * one of the listener's callbacks will execute at once. However, multiple listeners' callbacks\n","   * may execute concurrently, and listeners may execute in an order different from the one in which\n","   * they were registered.\n","   * <p>RuntimeExceptions thrown by a listener will be caught and logged. Any exception thrown \n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException}) will be caught and\n"],"delcode":["   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through \n","   * this method is guaranteed to be called whenever there is a state change.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown \n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception \n","   * thrown by {@linkplain MoreExecutors#sameThreadExecutor inline execution}) will be caught and\n"],"methodSig":"public void addListener(Listener listener, Executor executor)"},"id":5,"flag":1,"commit":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d"},{"func":{"oldfunccode":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_oldfunccode_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_3.txt","newfunccode":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_newfunccode_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_3.txt","newdoc":"","newJdoc":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_newfuncnewJdoc_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_3.txt","olddoc":"","oldJdoc":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_oldfuncoldJdoc_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v18.0/e6888aadc42b1f3181a09b5c18a55f65218d5a0d/AbstractService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractService.java","addlines":[413,414],"dellines":[377,378,379],"addcode":["      if (!state().isTerminal()) {\n","        listeners.add(new ListenerCallQueue<Listener>(listener, executor));\n"],"delcode":["      State currentState = state();\n","      if (currentState != TERMINATED && currentState != FAILED) {\n","        listeners.add(new ListenerExecutorPair(listener, executor));\n"],"methodSig":"public final void addListener(Listener listener, Executor executor)"},"doc":{"oldfunccode":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_olddocfunccode_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_3.txt","newfunccode":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_newdocfunccode_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_3.txt","newdoc":"","newJdoc":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_newdocnewJdoc_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_3.txt","olddoc":"","oldJdoc":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_olddocJdoc_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v18.0/e6888aadc42b1f3181a09b5c18a55f65218d5a0d/ServiceManager","pathinproj":"guava/src/com/google/common/util/concurrent/ServiceManager.java","addlines":[231,232,233,234,235,236,238,239],"dellines":[224,219,220,222,223],"addcode":["   * <p>{@code addListener} guarantees execution ordering across calls to a given listener but not\n","   * across calls to multiple listeners. Specifically, a given listener will have its callbacks\n","   * invoked in the same order as the underlying service enters those states. Additionally, at most\n","   * one of the listener's callbacks will execute at once. However, multiple listeners' callbacks\n","   * may execute concurrently, and listeners may execute in an order different from the one in which\n","   * they were registered.\n","   * <p>RuntimeExceptions thrown by a listener will be caught and logged. Any exception thrown \n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException}) will be caught and\n"],"delcode":["   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through \n","   * this method is guaranteed to be called whenever there is a state change.\n","   * <p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown \n","   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception \n","   * thrown by {@linkplain MoreExecutors#sameThreadExecutor inline execution}) will be caught and\n"],"methodSig":"public void addListener(Listener listener, Executor executor)"},"id":5,"flag":1,"commit":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d"},{"func":{"oldfunccode":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_oldfunccode_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_4.txt","newfunccode":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_newfunccode_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_4.txt","newdoc":" no point in adding a listener that will never be called\n no point in adding a listener that will never be called\n","newJdoc":"","olddoc":" no point in adding a listener that will never be called\n no point in adding a listener that will never be called\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v18.0/e6888aadc42b1f3181a09b5c18a55f65218d5a0d/ServiceManager","pathinproj":"guava/src/com/google/common/util/concurrent/ServiceManager.java","addlines":[519],"dellines":[510],"addcode":["          listeners.add(new ListenerCallQueue<Listener>(listener, executor));\n"],"delcode":["          listeners.add(new ListenerExecutorPair(listener, executor));\n"],"methodSig":" void addListener(Listener listener, Executor executor)"},"doc":{"oldfunccode":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_olddocfunccode_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_4.txt","newfunccode":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_newdocfunccode_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_4.txt","newdoc":"","newJdoc":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_newdocnewJdoc_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_4.txt","olddoc":"","oldJdoc":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_olddocJdoc_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_4.txt","path":"/home/pritish/Documents/IP work/guv_ver/v18.0/e6888aadc42b1f3181a09b5c18a55f65218d5a0d/ServiceManager","pathinproj":"guava/src/com/google/common/util/concurrent/ServiceManager.java","addlines":[257,258,259,260,261,262,264],"dellines":[242,243,245],"addcode":["   * <p>{@code addListener} guarantees execution ordering across calls to a given listener but not\n","   * across calls to multiple listeners. Specifically, a given listener will have its callbacks\n","   * invoked in the same order as the underlying service enters those states. Additionally, at most\n","   * one of the listener's callbacks will execute at once. However, multiple listeners' callbacks\n","   * may execute concurrently, and listeners may execute in an order different from the one in which\n","   * they were registered.\n","   * <p>RuntimeExceptions thrown by a listener will be caught and logged.\n"],"delcode":["   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through \n","   * this method is guaranteed to be called whenever there is a state change.\n","   * <p>Exceptions thrown by a listener will be will be caught and logged.\n"],"methodSig":"public void addListener(Listener listener)"},"id":5,"flag":1,"commit":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d"},{"func":{"oldfunccode":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_oldfunccode_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_5.txt","newfunccode":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_newfunccode_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_5.txt","newdoc":"","newJdoc":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_newfuncnewJdoc_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_5.txt","olddoc":"","oldJdoc":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_oldfuncoldJdoc_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_5.txt","path":"/home/pritish/Documents/IP work/guv_ver/v18.0/e6888aadc42b1f3181a09b5c18a55f65218d5a0d/AbstractService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractService.java","addlines":[413,414],"dellines":[377,378,379],"addcode":["      if (!state().isTerminal()) {\n","        listeners.add(new ListenerCallQueue<Listener>(listener, executor));\n"],"delcode":["      State currentState = state();\n","      if (currentState != TERMINATED && currentState != FAILED) {\n","        listeners.add(new ListenerExecutorPair(listener, executor));\n"],"methodSig":"public final void addListener(Listener listener, Executor executor)"},"doc":{"oldfunccode":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_olddocfunccode_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_5.txt","newfunccode":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_newdocfunccode_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_5.txt","newdoc":"","newJdoc":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_newdocnewJdoc_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_5.txt","olddoc":"","oldJdoc":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d/Codes/Match_olddocJdoc_e6888aadc42b1f3181a09b5c18a55f65218d5a0d_5.txt","path":"/home/pritish/Documents/IP work/guv_ver/v18.0/e6888aadc42b1f3181a09b5c18a55f65218d5a0d/ServiceManager","pathinproj":"guava/src/com/google/common/util/concurrent/ServiceManager.java","addlines":[257,258,259,260,261,262,264],"dellines":[242,243,245],"addcode":["   * <p>{@code addListener} guarantees execution ordering across calls to a given listener but not\n","   * across calls to multiple listeners. Specifically, a given listener will have its callbacks\n","   * invoked in the same order as the underlying service enters those states. Additionally, at most\n","   * one of the listener's callbacks will execute at once. However, multiple listeners' callbacks\n","   * may execute concurrently, and listeners may execute in an order different from the one in which\n","   * they were registered.\n","   * <p>RuntimeExceptions thrown by a listener will be caught and logged.\n"],"delcode":["   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through \n","   * this method is guaranteed to be called whenever there is a state change.\n","   * <p>Exceptions thrown by a listener will be will be caught and logged.\n"],"methodSig":"public void addListener(Listener listener)"},"id":5,"flag":1,"commit":"e6888aadc42b1f3181a09b5c18a55f65218d5a0d"}]