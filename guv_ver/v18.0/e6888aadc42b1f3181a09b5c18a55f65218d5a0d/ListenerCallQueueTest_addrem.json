{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.util.concurrent;\n",
        "18": "\n",
        "19": "import com.google.common.util.concurrent.ListenerCallQueue.Callback;\n",
        "20": "\n",
        "21": "import junit.framework.TestCase;\n",
        "22": "\n",
        "23": "import java.util.concurrent.CountDownLatch;\n",
        "24": "import java.util.concurrent.ExecutorService;\n",
        "25": "import java.util.concurrent.Executors;\n",
        "26": "import java.util.concurrent.atomic.AtomicInteger;\n",
        "27": "\n",
        "28": "/**\n",
        "29": " * Tests for {@link ListenerCallQueue}.\n",
        "30": " */\n",
        "31": "public class ListenerCallQueueTest extends TestCase {\n",
        "32": "\n",
        "33": "  private static final Callback<Object> THROWING_CALLBACK = new Callback<Object>(\"throwing()\") {\n",
        "34": "    @Override public void call(Object object) {\n",
        "35": "      throw new RuntimeException();\n",
        "36": "    }\n",
        "37": "  };\n",
        "38": "\n",
        "39": "  public void testAddAndExecute() {\n",
        "40": "    Object listenerInstance = new Object();\n",
        "41": "    ListenerCallQueue<Object> queue =\n",
        "42": "        new ListenerCallQueue<Object>(listenerInstance, MoreExecutors.sameThreadExecutor());\n",
        "43": "\n",
        "44": "    AtomicInteger counter = new AtomicInteger();\n",
        "45": "    queue.add(incrementingCallback(counter, 1));\n",
        "46": "    queue.add(incrementingCallback(counter, 2));\n",
        "47": "    queue.add(incrementingCallback(counter, 3));\n",
        "48": "    queue.add(incrementingCallback(counter, 4));\n",
        "49": "    assertEquals(0, counter.get());\n",
        "50": "    queue.execute();\n",
        "51": "    assertEquals(4, counter.get());\n",
        "52": "  }\n",
        "53": "\n",
        "54": "  public void testAddAndExecute_withExceptions() {\n",
        "55": "    Object listenerInstance = new Object();\n",
        "56": "    ListenerCallQueue<Object> queue =\n",
        "57": "        new ListenerCallQueue<Object>(listenerInstance, MoreExecutors.sameThreadExecutor());\n",
        "58": "\n",
        "59": "    AtomicInteger counter = new AtomicInteger();\n",
        "60": "    queue.add(incrementingCallback(counter, 1));\n",
        "61": "    queue.add(THROWING_CALLBACK);\n",
        "62": "    queue.add(incrementingCallback(counter, 2));\n",
        "63": "    queue.add(THROWING_CALLBACK);\n",
        "64": "    queue.add(incrementingCallback(counter, 3));\n",
        "65": "    queue.add(THROWING_CALLBACK);\n",
        "66": "    queue.add(incrementingCallback(counter, 4));\n",
        "67": "    queue.add(THROWING_CALLBACK);\n",
        "68": "    assertEquals(0, counter.get());\n",
        "69": "    queue.execute();\n",
        "70": "    assertEquals(4, counter.get());\n",
        "71": "  }\n",
        "72": "\n",
        "73": "  public void testAddAndExecute_multithreaded() throws InterruptedException {\n",
        "74": "    ExecutorService service = Executors.newFixedThreadPool(4);\n",
        "75": "    try {\n",
        "76": "      ListenerCallQueue<Object> queue =\n",
        "77": "          new ListenerCallQueue<Object>(new Object(), service);\n",
        "78": "\n",
        "79": "      final CountDownLatch latch = new CountDownLatch(1);\n",
        "80": "      AtomicInteger counter = new AtomicInteger();\n",
        "81": "      queue.add(incrementingCallback(counter, 1));\n",
        "82": "      queue.add(incrementingCallback(counter, 2));\n",
        "83": "      queue.add(incrementingCallback(counter, 3));\n",
        "84": "      queue.add(incrementingCallback(counter, 4));\n",
        "85": "      queue.add(countDownCallback(latch));\n",
        "86": "      assertEquals(0, counter.get());\n",
        "87": "      queue.execute();\n",
        "88": "      latch.await();\n",
        "89": "      assertEquals(4, counter.get());\n",
        "90": "    } finally {\n",
        "91": "      service.shutdown();\n",
        "92": "    }\n",
        "93": "  }\n",
        "94": "\n",
        "95": "  public void testAddAndExecute_multithreaded_withThrowingRunnable() throws InterruptedException {\n",
        "96": "    ExecutorService service = Executors.newFixedThreadPool(4);\n",
        "97": "    try {\n",
        "98": "      ListenerCallQueue<Object> queue =\n",
        "99": "          new ListenerCallQueue<Object>(new Object(), service);\n",
        "100": "\n",
        "101": "      final CountDownLatch latch = new CountDownLatch(1);\n",
        "102": "      AtomicInteger counter = new AtomicInteger();\n",
        "103": "      queue.add(incrementingCallback(counter, 1));\n",
        "104": "      queue.add(THROWING_CALLBACK);\n",
        "105": "      queue.add(incrementingCallback(counter, 2));\n",
        "106": "      queue.add(THROWING_CALLBACK);\n",
        "107": "      queue.add(incrementingCallback(counter, 3));\n",
        "108": "      queue.add(THROWING_CALLBACK);\n",
        "109": "      queue.add(incrementingCallback(counter, 4));\n",
        "110": "      queue.add(THROWING_CALLBACK);\n",
        "111": "      queue.add(countDownCallback(latch));\n",
        "112": "      assertEquals(0, counter.get());\n",
        "113": "      queue.execute();\n",
        "114": "      latch.await();\n",
        "115": "      assertEquals(4, counter.get());\n",
        "116": "    } finally {\n",
        "117": "      service.shutdown();\n",
        "118": "    }\n",
        "119": "  }\n",
        "120": "\n",
        "121": "  private Callback<Object> incrementingCallback(final AtomicInteger counter, final int expected) {\n",
        "122": "    return new Callback<Object>(\"incrementing\") {\n",
        "123": "      @Override void call(Object listener) {\n",
        "124": "        assertEquals(expected, counter.incrementAndGet());\n",
        "125": "      }\n",
        "126": "    };\n",
        "127": "  }\n",
        "128": "\n",
        "129": "  private Callback<Object> countDownCallback(final CountDownLatch latch) {\n",
        "130": "    return new Callback<Object>(\"countDown\") {\n",
        "131": "      @Override void call(Object listener) {\n",
        "132": "        latch.countDown();\n",
        "133": "      }\n",
        "134": "    };\n",
        "135": "  }\n",
        "136": "}\n"
    },
    "removed": {}
}