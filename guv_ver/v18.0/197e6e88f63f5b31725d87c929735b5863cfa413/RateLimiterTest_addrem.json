{
    "addition": {
        "79": "    } catch (IllegalArgumentException expected) {}\n",
        "83": "    } catch (IllegalArgumentException expected) {}\n",
        "84": "  }\n",
        "85": "\n",
        "86": "  public void testAcquireParameterValidation() {\n",
        "87": "    RateLimiter limiter = RateLimiter.create(999);\n",
        "88": "    try {\n",
        "89": "      limiter.acquire(0);\n",
        "90": "      fail();\n",
        "91": "    } catch (IllegalArgumentException expected) {\n",
        "92": "    }\n",
        "93": "    try {\n",
        "94": "      limiter.acquire(-1);\n",
        "95": "      fail();\n",
        "96": "    } catch (IllegalArgumentException expected) {\n",
        "97": "    }\n",
        "98": "    try {\n",
        "99": "      limiter.tryAcquire(0);\n",
        "100": "      fail();\n",
        "101": "    } catch (IllegalArgumentException expected) {\n",
        "102": "    }\n",
        "103": "    try {\n",
        "104": "      limiter.tryAcquire(-1);\n",
        "105": "      fail();\n",
        "106": "    } catch (IllegalArgumentException expected) {\n",
        "107": "    }\n",
        "108": "    try {\n",
        "109": "      limiter.tryAcquire(0, 1, SECONDS);\n",
        "110": "      fail();\n",
        "111": "    } catch (IllegalArgumentException expected) {\n",
        "112": "    }\n",
        "113": "    try {\n",
        "114": "      limiter.tryAcquire(-1, 1, SECONDS);\n",
        "115": "      fail();\n",
        "116": "    } catch (IllegalArgumentException expected) {\n",
        "117": "    }\n",
        "154": "  public void testCreateWarmupParameterValidation() {\n",
        "155": "    RateLimiter.create(1.0, 1, NANOSECONDS);\n",
        "156": "    RateLimiter.create(1.0, 0, NANOSECONDS);\n",
        "157": "\n",
        "158": "    try {\n",
        "159": "      RateLimiter.create(0.0, 1, NANOSECONDS);\n",
        "160": "      fail();\n",
        "161": "    } catch (IllegalArgumentException expected) {\n",
        "162": "    }\n",
        "163": "\n",
        "164": "    try {\n",
        "165": "      RateLimiter.create(1.0, -1, NANOSECONDS);\n",
        "166": "      fail();\n",
        "167": "    } catch (IllegalArgumentException expected) {\n",
        "168": "    }\n",
        "169": "  }\n",
        "170": "\n"
    },
    "removed": {
        "79": "    } catch (IllegalArgumentException ok) {}\n",
        "83": "    } catch (IllegalArgumentException ok) {}\n",
        "177": "  public void testBursty() {\n",
        "178": "    RateLimiter limiter = RateLimiter.createWithCapacity(stopwatch, 1.0, 10, SECONDS);\n",
        "179": "    stopwatch.sleepMillis(10000); // reach full capacity\n",
        "180": "    limiter.acquire(11); // all these are served in a burst (10 + 1 by borrowing from the future)\n",
        "181": "    limiter.acquire(1); // out of capacity, we have to wait\n",
        "182": "    limiter.acquire(1); // and wait\n",
        "183": "    stopwatch.sleepMillis(3000); // fill up 3 permits\n",
        "184": "    limiter.acquire(5); // we had 3 ready, thus we borrow 2 permits\n",
        "185": "    limiter.acquire(1); // this acquire() will also repay for the previous acquire()\n",
        "186": "    assertEvents(\n",
        "187": "        \"U10.00\",\n",
        "188": "        \"R0.00\", // 10 permits grabbed\n",
        "189": "        \"R1.00\", \"R1.00\", // 1 and 1\n",
        "190": "        \"U3.00\", \"R0.00\", // 5 grabbed\n",
        "191": "        \"R3.00\" // 1 grabbed\n",
        "192": "        );\n",
        "193": "  }\n",
        "194": "\n"
    }
}