{"id": "197e6e88f63f5b31725d87c929735b5863cfa413", "code": [{"0": "guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java", "added": {"1": ["    } catch (IllegalArgumentException expected) {}\n", "    } catch (IllegalArgumentException expected) {}\n", "  }\n", "\n", "  public void testAcquireParameterValidation() {\n", "    RateLimiter limiter = RateLimiter.create(999);\n", "    try {\n", "      limiter.acquire(0);\n", "      fail();\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "    try {\n", "      limiter.acquire(-1);\n", "      fail();\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "    try {\n", "      limiter.tryAcquire(0);\n", "      fail();\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "    try {\n", "      limiter.tryAcquire(-1);\n", "      fail();\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "    try {\n", "      limiter.tryAcquire(0, 1, SECONDS);\n", "      fail();\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "    try {\n", "      limiter.tryAcquire(-1, 1, SECONDS);\n", "      fail();\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n"], "2": ["  public void testCreateWarmupParameterValidation() {\n", "    RateLimiter.create(1.0, 1, NANOSECONDS);\n", "    RateLimiter.create(1.0, 0, NANOSECONDS);\n", "\n", "    try {\n", "      RateLimiter.create(0.0, 1, NANOSECONDS);\n", "      fail();\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "\n", "    try {\n", "      RateLimiter.create(1.0, -1, NANOSECONDS);\n", "      fail();\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "  }\n", "\n"]}, "removed": {"1": ["    } catch (IllegalArgumentException ok) {}\n", "    } catch (IllegalArgumentException ok) {}\n"], "3": ["  public void testBursty() {\n", "    RateLimiter limiter = RateLimiter.createWithCapacity(stopwatch, 1.0, 10, SECONDS);\n", "    stopwatch.sleepMillis(10000); // reach full capacity\n", "    limiter.acquire(11); // all these are served in a burst (10 + 1 by borrowing from the future)\n", "    limiter.acquire(1); // out of capacity, we have to wait\n", "    limiter.acquire(1); // and wait\n", "    stopwatch.sleepMillis(3000); // fill up 3 permits\n", "    limiter.acquire(5); // we had 3 ready, thus we borrow 2 permits\n", "    limiter.acquire(1); // this acquire() will also repay for the previous acquire()\n", "    assertEvents(\n", "        \"U10.00\",\n", "        \"R0.00\", // 10 permits grabbed\n", "        \"R1.00\", \"R1.00\", // 1 and 1\n", "        \"U3.00\", \"R0.00\", // 5 grabbed\n", "        \"R3.00\" // 1 grabbed\n", "        );\n", "  }\n", "\n"]}, "added_lines": {"1": [79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117], "2": [154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170]}, "removed_lines": {"1": [79, 83], "3": [177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194]}}, {"1": "guava/src/com/google/common/util/concurrent/RateLimiter.java", "added": {"1": ["   *        how many permits become available per second\n", "   * @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero\n"], "2": ["   *        how many permits become available per second\n", "   * @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero or\n", "   *     {@code warmupPeriod} is negative\n", "    checkArgument(warmupPeriod >= 0, \"warmupPeriod must not be negative: %s\", warmupPeriod);\n"], "4": ["   * @param permitsPerSecond the new stable rate of this {@code RateLimiter}\n", "   * @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero\n"], "5": ["   * @throws IllegalArgumentException if the requested number of permits is negative or zero\n"], "6": ["   * @param timeout the maximum time to wait for the permit. Negative values are treated as zero.\n", "   * @throws IllegalArgumentException if the requested number of permits is negative or zero\n"], "7": ["   * @throws IllegalArgumentException if the requested number of permits is negative or zero\n"], "8": ["   * @param timeout the maximum time to wait for the permits. Negative values are treated as zero.\n", "   * @throws IllegalArgumentException if the requested number of permits is negative or zero\n"]}, "removed": {"1": ["   *        how many permits become available per second. Must be positive\n"], "2": ["   *        how many permits become available per second. Must be positive\n"], "3": ["  @VisibleForTesting\n", "  static RateLimiter createWithCapacity(\n", "      SleepingStopwatch stopwatch, double permitsPerSecond, long maxBurstBuildup, TimeUnit unit) {\n", "    double maxBurstSeconds = unit.toNanos(maxBurstBuildup) / 1E+9;\n", "    SmoothBursty rateLimiter = new SmoothBursty(stopwatch, maxBurstSeconds);\n", "    rateLimiter.setRate(permitsPerSecond);\n", "    return rateLimiter;\n", "  }\n", "\n"], "4": ["   * @param permitsPerSecond the new stable rate of this {@code RateLimiter}. Must be positive\n"], "6": ["   * @param timeout the maximum time to wait for the permit\n"], "8": ["   * @param timeout the maximum time to wait for the permits\n"]}, "added_lines": {"1": [230, 231], "2": [280, 284, 285, 288], "4": [342, 343], "5": [389], "6": [431, 434], "7": [448], "8": [476, 479]}, "removed_lines": {"1": [230], "2": [279], "3": [296, 297, 298, 299, 300, 301, 302, 303, 304], "4": [347], "6": [434], "8": [477]}}]}
