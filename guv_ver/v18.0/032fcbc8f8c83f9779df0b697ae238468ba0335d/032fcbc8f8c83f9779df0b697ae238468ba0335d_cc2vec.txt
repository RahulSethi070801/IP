{"id": "032fcbc8f8c83f9779df0b697ae238468ba0335d", "code": [{"0": "guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java", "added": {"1": ["   * #notifyStopped} after calling {@link #startAsync} and {@link #stopAsync}.\n"]}, "removed": {"1": ["   * #notifyStopped} after calling {@link #start} and {@link #stop}.\n"]}, "added_lines": {"1": [328]}, "removed_lines": {"1": [328]}}, {"1": "guava-tests/test/com/google/common/util/concurrent/ServiceManagerTest.java", "added": {"1": ["      @Override public final ListenableFuture<State> start() {\n", "        return delegate.start();\n", "      }\n", "\n"]}, "removed": {"1": ["      @Override public final ListenableFuture<State> start() {\n", "        return delegate.start();\n", "      }\n", "\n"]}, "added_lines": {"1": [429, 430, 431, 432]}, "removed_lines": {"1": [425, 426, 427, 428]}}, {"2": "guava/src/com/google/common/util/concurrent/AbstractScheduledService.java", "added": {"1": [" * {@link Scheduler}. When this service is asked to stop via {@link #stopAsync} it will cancel the\n", " * periodic task (but not interrupt it) and wait for it to stop before running the\n", " * {@link #shutDown} method.\n"]}, "removed": {"1": [" * {@link Scheduler}. When this service is asked to stop via {@link #stop} or {@link #stopAndWait}, \n", " * it will cancel the periodic task (but not interrupt it) and wait for it to stop before running \n", " * the {@link #shutDown} method.  \n"]}, "added_lines": {"1": [46, 47, 48]}, "removed_lines": {"1": [46, 47, 48]}}, {"3": "guava/src/com/google/common/util/concurrent/AbstractService.java", "added": {"1": ["              case TERMINATED:  // fall-through\n", "              case FAILED:  // fall-through\n", "              case NEW:  // fall-through\n"], "2": ["   * This method is called by {@link #startAsync} to initiate service startup. The invocation of\n", "   * this method should cause a call to {@link #notifyStarted()}, either during this method's run,\n", "   * or after it has returned. If startup fails, the invocation should cause a call to\n", "   * convenient. It is invoked exactly once on service startup, even when {@link #startAsync} is\n", "   * called multiple times.\n"], "3": ["   * convenient. It is invoked exactly once on service shutdown, even when {@link #stopAsync} is\n", "   * called multiple times.\n"], "5": ["    return this;\n", "  }\n", "\n", "  @Deprecated\n", "  @Override\n", "  public final ListenableFuture<State> stop() {\n"], "7": ["  // A change from one service state to another, plus the result of the change.\n"]}, "removed": {"1": ["              case TERMINATED:  /* fall-through */\n", "              case FAILED:  /* fall-through */\n", "              case NEW:  /* fall-through */\n"], "2": ["   * This method is called by {@link #start} to initiate service startup. The invocation of this\n", "   * method should cause a call to {@link #notifyStarted()}, either during this method's run, or\n", "   * after it has returned. If startup fails, the invocation should cause a call to\n", "   * convenient. It is invoked exactly once on service startup, even when {@link #start} is called\n", "   * multiple times.\n"], "3": ["   * convenient. It is invoked exactly once on service shutdown, even when {@link #stop} is called\n", "   * multiple times.\n"], "4": ["    stop();\n", "    return this;\n", "  }\n", "\n", "  @Deprecated\n", "  @Override\n", "  public final ListenableFuture<State> stop() {\n"], "6": ["        State state = state();\n"], "7": ["  /**\n", "   * A change from one service state to another, plus the result of the change.\n", "   */\n"]}, "added_lines": {"1": [146, 147, 148], "2": [159, 160, 161, 165, 166], "3": [177, 178], "5": [254, 255, 256, 257, 258, 259], "7": [475]}, "removed_lines": {"1": [145, 146, 147], "2": [157, 158, 159, 163, 164], "3": [175, 176], "4": [218, 219, 220, 221, 222, 223, 224], "6": [312], "7": [475, 476, 477]}}, {"4": "guava/src/com/google/common/util/concurrent/Service.java", "added": {"2": ["     * {@linkplain State#STARTING STARTING}. This occurs when {@link Service#startAsync} is called\n", "     * the first time.\n"], "3": ["     * {@linkplain State#RUNNING RUNNING}.  This occurs when {@link Service#stopAsync} is called.\n"]}, "removed": {"1": ["import java.util.concurrent.ExecutionException;\n"], "2": ["     * {@linkplain State#STARTING STARTING}. This occurs when {@link Service#start} or\n", "     * {@link Service#startAndWait} is called the first time.\n"], "3": ["     * {@linkplain State#RUNNING RUNNING}.  This occurs when {@link Service#stop} is called.\n"]}, "added_lines": {"2": [325, 326], "3": [339]}, "removed_lines": {"1": [21], "2": [322, 323], "3": [336]}}, {"5": "guava/src/com/google/common/util/concurrent/ServiceManager.java", "added": {"1": ["   * {@linkplain Service#startAsync started}.\n"], "2": ["   * added before any of the managed services are {@linkplain Service#startAsync started}.\n"], "3": ["   * Initiates service {@linkplain Service#startAsync startup} on all the services being managed.  \n", "   * It is only valid to call this method if all of the services are {@linkplain State#NEW new}.\n"], "4": ["   * Initiates service {@linkplain Service#stopAsync shutdown} if necessary on all the services\n", "   * being managed. \n"]}, "removed": {"1": ["   * {@linkplain Service#start started}.\n"], "2": ["   * added before any of the managed services are {@linkplain Service#start started}.\n"], "3": ["   * Initiates service {@linkplain Service#start startup} on all the services being managed.  It is\n", "   * only valid to call this method if all of the services are {@linkplain State#NEW new}.\n"], "4": ["   * Initiates service {@linkplain Service#stop shutdown} if necessary on all the services being \n", "   * managed. \n"]}, "added_lines": {"1": [216], "2": [239], "3": [253, 254], "4": [307, 308]}, "removed_lines": {"1": [216], "2": [239], "3": [253, 254], "4": [307, 308]}}]}
