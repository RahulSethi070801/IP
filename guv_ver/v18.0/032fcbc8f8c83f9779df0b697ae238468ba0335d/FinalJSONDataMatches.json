[{"func":{"oldfunccode":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_oldfunccode_032fcbc8f8c83f9779df0b697ae238468ba0335d_1.txt","newfunccode":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_newfunccode_032fcbc8f8c83f9779df0b697ae238468ba0335d_1.txt","newdoc":" TODO(user): justify why we are catching Throwable and not RuntimeException.  Also, we\n may inadvertently catch our AssertionErrors.\n These cases are impossible due to the if statement above.\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v18.0/032fcbc8f8c83f9779df0b697ae238468ba0335d/AbstractService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractService.java","addlines":[254,255],"dellines":[218,219,220],"addcode":["    return this;\n","  }\n"],"delcode":["    stop();\n","    return this;\n","  }\n"],"methodSig":"public final Service stopAsync()"},"doc":{"oldfunccode":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_olddocfunccode_032fcbc8f8c83f9779df0b697ae238468ba0335d_1.txt","newfunccode":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_newdocfunccode_032fcbc8f8c83f9779df0b697ae238468ba0335d_1.txt","newdoc":"","newJdoc":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_newdocnewJdoc_032fcbc8f8c83f9779df0b697ae238468ba0335d_1.txt","olddoc":"","oldJdoc":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_olddocJdoc_032fcbc8f8c83f9779df0b697ae238468ba0335d_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v18.0/032fcbc8f8c83f9779df0b697ae238468ba0335d/AbstractService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractService.java","addlines":[177,178],"dellines":[176,175],"addcode":["   * convenient. It is invoked exactly once on service shutdown, even when {@link #stopAsync} is\n","   * called multiple times.\n"],"delcode":["   * convenient. It is invoked exactly once on service shutdown, even when {@link #stop} is called\n","   * multiple times.\n"],"methodSig":"protected abstract void doStop()"},"id":1,"flag":1,"commit":"032fcbc8f8c83f9779df0b697ae238468ba0335d"},{"func":{"oldfunccode":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_oldfunccode_032fcbc8f8c83f9779df0b697ae238468ba0335d_2.txt","newfunccode":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_newfunccode_032fcbc8f8c83f9779df0b697ae238468ba0335d_2.txt","newdoc":" TODO(user): justify why we are catching Throwable and not RuntimeException.  Also, we\n may inadvertently catch our AssertionErrors.\n These cases are impossible due to the if statement above.\n TODO(user): justify why we are catching Throwable and not RuntimeException.  Also, we\n may inadvertently catch our AssertionErrors.\n These cases are impossible due to the if statement above.\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v18.0/032fcbc8f8c83f9779df0b697ae238468ba0335d/AbstractService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractService.java","addlines":[254,255],"dellines":[218,219,220],"addcode":["    return this;\n","  }\n"],"delcode":["    stop();\n","    return this;\n","  }\n"],"methodSig":"public final Service stopAsync()"},"doc":{"oldfunccode":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_olddocfunccode_032fcbc8f8c83f9779df0b697ae238468ba0335d_2.txt","newfunccode":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_newdocfunccode_032fcbc8f8c83f9779df0b697ae238468ba0335d_2.txt","newdoc":"","newJdoc":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_newdocnewJdoc_032fcbc8f8c83f9779df0b697ae238468ba0335d_2.txt","olddoc":"","oldJdoc":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_olddocJdoc_032fcbc8f8c83f9779df0b697ae238468ba0335d_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v18.0/032fcbc8f8c83f9779df0b697ae238468ba0335d/ServiceManager","pathinproj":"guava/src/com/google/common/util/concurrent/ServiceManager.java","addlines":[307,308],"dellines":[307,308],"addcode":["   * Initiates service {@linkplain Service#stopAsync shutdown} if necessary on all the services\n","   * being managed. \n"],"delcode":["   * Initiates service {@linkplain Service#stop shutdown} if necessary on all the services being \n","   * managed. \n"],"methodSig":"public ServiceManager stopAsync()"},"id":5,"flag":1,"commit":"032fcbc8f8c83f9779df0b697ae238468ba0335d"},{"func":{"oldfunccode":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_oldfunccode_032fcbc8f8c83f9779df0b697ae238468ba0335d_3.txt","newfunccode":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_newfunccode_032fcbc8f8c83f9779df0b697ae238468ba0335d_3.txt","newdoc":" TODO(user): justify why we are catching Throwable and not RuntimeException.  Also, we\n may inadvertently catch our AssertionErrors.\n These cases are impossible due to the if statement above.\n TODO(user): justify why we are catching Throwable and not RuntimeException.  Also, we\n may inadvertently catch our AssertionErrors.\n These cases are impossible due to the if statement above.\n TODO(user): justify why we are catching Throwable and not RuntimeException.  Also, we\n may inadvertently catch our AssertionErrors.\n These cases are impossible due to the if statement above.\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v18.0/032fcbc8f8c83f9779df0b697ae238468ba0335d/AbstractService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractService.java","addlines":[254,255],"dellines":[218,219,220],"addcode":["    return this;\n","  }\n"],"delcode":["    stop();\n","    return this;\n","  }\n"],"methodSig":"public final Service stopAsync()"},"doc":{"oldfunccode":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_olddocfunccode_032fcbc8f8c83f9779df0b697ae238468ba0335d_3.txt","newfunccode":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_newdocfunccode_032fcbc8f8c83f9779df0b697ae238468ba0335d_3.txt","newdoc":"","newJdoc":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_newdocnewJdoc_032fcbc8f8c83f9779df0b697ae238468ba0335d_3.txt","olddoc":"","oldJdoc":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_olddocJdoc_032fcbc8f8c83f9779df0b697ae238468ba0335d_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v18.0/032fcbc8f8c83f9779df0b697ae238468ba0335d/ServiceManager","pathinproj":"guava/src/com/google/common/util/concurrent/ServiceManager.java","addlines":[216],"dellines":[216],"addcode":["   * {@linkplain Service#startAsync started}.\n"],"delcode":["   * {@linkplain Service#start started}.\n"],"methodSig":"public void addListener(Listener listener, Executor executor)"},"id":5,"flag":1,"commit":"032fcbc8f8c83f9779df0b697ae238468ba0335d"},{"func":{"oldfunccode":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_oldfunccode_032fcbc8f8c83f9779df0b697ae238468ba0335d_4.txt","newfunccode":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_newfunccode_032fcbc8f8c83f9779df0b697ae238468ba0335d_4.txt","newdoc":" TODO(user): justify why we are catching Throwable and not RuntimeException.  Also, we\n may inadvertently catch our AssertionErrors.\n These cases are impossible due to the if statement above.\n TODO(user): justify why we are catching Throwable and not RuntimeException.  Also, we\n may inadvertently catch our AssertionErrors.\n These cases are impossible due to the if statement above.\n TODO(user): justify why we are catching Throwable and not RuntimeException.  Also, we\n may inadvertently catch our AssertionErrors.\n These cases are impossible due to the if statement above.\n TODO(user): justify why we are catching Throwable and not RuntimeException.  Also, we\n may inadvertently catch our AssertionErrors.\n These cases are impossible due to the if statement above.\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v18.0/032fcbc8f8c83f9779df0b697ae238468ba0335d/AbstractService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractService.java","addlines":[254,255],"dellines":[218,219,220],"addcode":["    return this;\n","  }\n"],"delcode":["    stop();\n","    return this;\n","  }\n"],"methodSig":"public final Service stopAsync()"},"doc":{"oldfunccode":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_olddocfunccode_032fcbc8f8c83f9779df0b697ae238468ba0335d_4.txt","newfunccode":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_newdocfunccode_032fcbc8f8c83f9779df0b697ae238468ba0335d_4.txt","newdoc":"","newJdoc":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_newdocnewJdoc_032fcbc8f8c83f9779df0b697ae238468ba0335d_4.txt","olddoc":"","oldJdoc":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_olddocJdoc_032fcbc8f8c83f9779df0b697ae238468ba0335d_4.txt","path":"/home/pritish/Documents/IP work/guv_ver/v18.0/032fcbc8f8c83f9779df0b697ae238468ba0335d/AbstractService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractService.java","addlines":[160,161,165,166,159],"dellines":[163,164,157,158,159],"addcode":["   * This method is called by {@link #startAsync} to initiate service startup. The invocation of\n","   * this method should cause a call to {@link #notifyStarted()}, either during this method's run,\n","   * or after it has returned. If startup fails, the invocation should cause a call to\n","   * convenient. It is invoked exactly once on service startup, even when {@link #startAsync} is\n","   * called multiple times.\n"],"delcode":["   * This method is called by {@link #start} to initiate service startup. The invocation of this\n","   * method should cause a call to {@link #notifyStarted()}, either during this method's run, or\n","   * after it has returned. If startup fails, the invocation should cause a call to\n","   * convenient. It is invoked exactly once on service startup, even when {@link #start} is called\n","   * multiple times.\n"],"methodSig":"protected abstract void doStart()"},"id":5,"flag":1,"commit":"032fcbc8f8c83f9779df0b697ae238468ba0335d"},{"func":{"oldfunccode":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_oldfunccode_032fcbc8f8c83f9779df0b697ae238468ba0335d_5.txt","newfunccode":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_newfunccode_032fcbc8f8c83f9779df0b697ae238468ba0335d_5.txt","newdoc":" TODO(user): justify why we are catching Throwable and not RuntimeException.  Also, we\n may inadvertently catch our AssertionErrors.\n These cases are impossible due to the if statement above.\n TODO(user): justify why we are catching Throwable and not RuntimeException.  Also, we\n may inadvertently catch our AssertionErrors.\n These cases are impossible due to the if statement above.\n TODO(user): justify why we are catching Throwable and not RuntimeException.  Also, we\n may inadvertently catch our AssertionErrors.\n These cases are impossible due to the if statement above.\n TODO(user): justify why we are catching Throwable and not RuntimeException.  Also, we\n may inadvertently catch our AssertionErrors.\n These cases are impossible due to the if statement above.\n TODO(user): justify why we are catching Throwable and not RuntimeException.  Also, we\n may inadvertently catch our AssertionErrors.\n These cases are impossible due to the if statement above.\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v18.0/032fcbc8f8c83f9779df0b697ae238468ba0335d/AbstractService","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractService.java","addlines":[254,255],"dellines":[218,219,220],"addcode":["    return this;\n","  }\n"],"delcode":["    stop();\n","    return this;\n","  }\n"],"methodSig":"public final Service stopAsync()"},"doc":{"oldfunccode":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_olddocfunccode_032fcbc8f8c83f9779df0b697ae238468ba0335d_5.txt","newfunccode":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_newdocfunccode_032fcbc8f8c83f9779df0b697ae238468ba0335d_5.txt","newdoc":"","newJdoc":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_newdocnewJdoc_032fcbc8f8c83f9779df0b697ae238468ba0335d_5.txt","olddoc":"","oldJdoc":"032fcbc8f8c83f9779df0b697ae238468ba0335d/Codes/Match_olddocJdoc_032fcbc8f8c83f9779df0b697ae238468ba0335d_5.txt","path":"/home/pritish/Documents/IP work/guv_ver/v18.0/032fcbc8f8c83f9779df0b697ae238468ba0335d/ServiceManager","pathinproj":"guava/src/com/google/common/util/concurrent/ServiceManager.java","addlines":[239],"dellines":[239],"addcode":["   * added before any of the managed services are {@linkplain Service#startAsync started}.\n"],"delcode":["   * added before any of the managed services are {@linkplain Service#start started}.\n"],"methodSig":"public void addListener(Listener listener)"},"id":5,"flag":1,"commit":"032fcbc8f8c83f9779df0b697ae238468ba0335d"}]