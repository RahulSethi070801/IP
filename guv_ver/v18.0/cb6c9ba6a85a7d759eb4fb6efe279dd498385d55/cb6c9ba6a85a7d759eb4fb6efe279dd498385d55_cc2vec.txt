{"id": "cb6c9ba6a85a7d759eb4fb6efe279dd498385d55", "code": [{"0": "guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java", "added": {"1": ["  public void testSimpleAcquireEarliestAvailableIsInPast() {\n", "    RateLimiter limiter = RateLimiter.create(stopwatch, 5.0);\n", "    assertEquals(0.0, limiter.acquire(), EPSILON);\n", "    stopwatch.sleepMillis(400);\n", "    assertEquals(0.0, limiter.acquire(), EPSILON);\n", "    assertEquals(0.0, limiter.acquire(), EPSILON);\n", "    assertEquals(0.2, limiter.acquire(), EPSILON);\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [133, 134, 135, 136, 137, 138, 139, 140, 141]}, "removed_lines": {}}, {"1": "guava/src/com/google/common/util/concurrent/RateLimiter.java", "added": {"1": ["   * @return time in microseconds to wait until the resource can be acquired, never negative\n", "      return reserveAndGetWaitLength(permits, stopwatch.readMicros());\n"], "2": ["        microsToWait = reserveAndGetWaitLength(permits, nowMicros);\n"], "3": ["    return queryEarliestAvailable(nowMicros) - timeoutMicros <= nowMicros;\n", "  }\n", "\n", "  /**\n", "   * Reserves next ticket and returns the wait time that the caller must wait for.\n", "   *\n", "   * @return the required wait time, never negative\n", "   */\n", "  final long reserveAndGetWaitLength(int permits, long nowMicros) {\n", "    long momentAvailable = reserveEarliestAvailable(permits, nowMicros);\n", "    return max(momentAvailable - nowMicros, 0);\n", "  /**\n", "   * Returns the earliest time that permits are available (with one caveat).\n", "   *\n", "   * @return the time that permits are available, or, if permits are available immediately, an\n", "   *     arbitrary past or present time\n", "   */\n", "  abstract long queryEarliestAvailable(long nowMicros);\n", "  /**\n", "   * Reserves the requested number of permits and returns the time that those permits can be used\n", "   * (with one caveat).\n", "   *\n", "   * @return the time that the permits may be used, or, if the permits may be used immediately, an\n", "   *     arbitrary past or present time\n", "   */\n", "  abstract long reserveEarliestAvailable(int permits, long nowMicros);\n"], "4": ["    final long queryEarliestAvailable(long nowMicros) {\n", "    final long reserveEarliestAvailable(int requiredPermits, long nowMicros) {\n", "      long returnValue = nextFreeTicketMicros;\n"], "5": ["      return returnValue;\n"], "6": ["     * to guarantee that each call to reserveEarliestAvailable, etc. sees a value >= the previous?\n", "     * Also, is it OK that we don't hold the mutex when sleeping?\n"]}, "removed": {"1": ["  /**\n", "   * Reserves a single permit from this {@code RateLimiter} for future use, returning the number of\n", "   * microseconds until the reservation.\n", "   *\n", "   * <p>This method is equivalent to {@code reserve(1)}.\n", "   *\n", "   * @return time in microseconds to wait until the resource can be acquired.\n", "   */\n", "  long reserve() {\n", "    return reserve(1);\n", "  }\n", "\n", "   * @return time in microseconds to wait until the resource can be acquired.\n", "      return reserveNextTicket(permits, stopwatch.readMicros());\n"], "2": ["        microsToWait = reserveNextTicket(permits, nowMicros);\n"], "3": ["    return earliestAvailable(nowMicros) - timeoutMicros <= nowMicros;\n", "  abstract long earliestAvailable(long nowMicros);\n", "  abstract long reserveNextTicket(int requiredPermits, long nowMicros);\n"], "4": ["    final long earliestAvailable(long nowMicros) {\n", "    /**\n", "     * Reserves next ticket and returns the wait time that the caller must wait for.\n", "     *\n", "     * <p>The return value is guaranteed to be non-negative.\n", "     */\n", "    long reserveNextTicket(int requiredPermits, long nowMicros) {\n", "      long microsToNextFreeTicket = max(0, nextFreeTicketMicros - nowMicros);\n"], "5": ["      return microsToNextFreeTicket;\n"], "6": ["     * to guarantee that each call to reserveNextTicket, etc. sees a value >= the previous? Also, is\n", "     * it OK that we don't hold the mutex when sleeping?\n"]}, "added_lines": {"1": [402, 407], "2": [478], "3": [486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514], "4": [565, 570, 572], "5": [581], "6": [767, 768]}, "removed_lines": {"1": [398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 414, 419], "2": [490], "3": [498, 501, 503], "4": [554, 558, 559, 560, 561, 562, 564, 566], "5": [575], "6": [761, 762]}}]}
