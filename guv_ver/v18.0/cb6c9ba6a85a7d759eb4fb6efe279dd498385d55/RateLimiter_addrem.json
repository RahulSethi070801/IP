{
    "addition": {
        "402": "   * @return time in microseconds to wait until the resource can be acquired, never negative\n",
        "407": "      return reserveAndGetWaitLength(permits, stopwatch.readMicros());\n",
        "478": "        microsToWait = reserveAndGetWaitLength(permits, nowMicros);\n",
        "486": "    return queryEarliestAvailable(nowMicros) - timeoutMicros <= nowMicros;\n",
        "487": "  }\n",
        "488": "\n",
        "489": "  /**\n",
        "490": "   * Reserves next ticket and returns the wait time that the caller must wait for.\n",
        "491": "   *\n",
        "492": "   * @return the required wait time, never negative\n",
        "493": "   */\n",
        "494": "  final long reserveAndGetWaitLength(int permits, long nowMicros) {\n",
        "495": "    long momentAvailable = reserveEarliestAvailable(permits, nowMicros);\n",
        "496": "    return max(momentAvailable - nowMicros, 0);\n",
        "499": "  /**\n",
        "500": "   * Returns the earliest time that permits are available (with one caveat).\n",
        "501": "   *\n",
        "502": "   * @return the time that permits are available, or, if permits are available immediately, an\n",
        "503": "   *     arbitrary past or present time\n",
        "504": "   */\n",
        "505": "  abstract long queryEarliestAvailable(long nowMicros);\n",
        "507": "  /**\n",
        "508": "   * Reserves the requested number of permits and returns the time that those permits can be used\n",
        "509": "   * (with one caveat).\n",
        "510": "   *\n",
        "511": "   * @return the time that the permits may be used, or, if the permits may be used immediately, an\n",
        "512": "   *     arbitrary past or present time\n",
        "513": "   */\n",
        "514": "  abstract long reserveEarliestAvailable(int permits, long nowMicros);\n",
        "565": "    final long queryEarliestAvailable(long nowMicros) {\n",
        "570": "    final long reserveEarliestAvailable(int requiredPermits, long nowMicros) {\n",
        "572": "      long returnValue = nextFreeTicketMicros;\n",
        "581": "      return returnValue;\n",
        "767": "     * to guarantee that each call to reserveEarliestAvailable, etc. sees a value >= the previous?\n",
        "768": "     * Also, is it OK that we don't hold the mutex when sleeping?\n"
    },
    "removed": {
        "398": "  /**\n",
        "399": "   * Reserves a single permit from this {@code RateLimiter} for future use, returning the number of\n",
        "400": "   * microseconds until the reservation.\n",
        "401": "   *\n",
        "402": "   * <p>This method is equivalent to {@code reserve(1)}.\n",
        "403": "   *\n",
        "404": "   * @return time in microseconds to wait until the resource can be acquired.\n",
        "405": "   */\n",
        "406": "  long reserve() {\n",
        "407": "    return reserve(1);\n",
        "408": "  }\n",
        "409": "\n",
        "414": "   * @return time in microseconds to wait until the resource can be acquired.\n",
        "419": "      return reserveNextTicket(permits, stopwatch.readMicros());\n",
        "490": "        microsToWait = reserveNextTicket(permits, nowMicros);\n",
        "498": "    return earliestAvailable(nowMicros) - timeoutMicros <= nowMicros;\n",
        "501": "  abstract long earliestAvailable(long nowMicros);\n",
        "503": "  abstract long reserveNextTicket(int requiredPermits, long nowMicros);\n",
        "554": "    final long earliestAvailable(long nowMicros) {\n",
        "558": "    /**\n",
        "559": "     * Reserves next ticket and returns the wait time that the caller must wait for.\n",
        "560": "     *\n",
        "561": "     * <p>The return value is guaranteed to be non-negative.\n",
        "562": "     */\n",
        "564": "    long reserveNextTicket(int requiredPermits, long nowMicros) {\n",
        "566": "      long microsToNextFreeTicket = max(0, nextFreeTicketMicros - nowMicros);\n",
        "575": "      return microsToNextFreeTicket;\n",
        "761": "     * to guarantee that each call to reserveNextTicket, etc. sees a value >= the previous? Also, is\n",
        "762": "     * it OK that we don't hold the mutex when sleeping?\n"
    }
}