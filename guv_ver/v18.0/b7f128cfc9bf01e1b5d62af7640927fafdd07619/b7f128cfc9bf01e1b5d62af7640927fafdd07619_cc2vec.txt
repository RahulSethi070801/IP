{"id": "b7f128cfc9bf01e1b5d62af7640927fafdd07619", "code": [{"0": "guava-gwt/src-super/com/google/common/base/super/com/google/common/base/CharMatcher.java", "added": {"1": ["   * Determines whether a character is a digit according to {@linkplain Character#isDigit(char)\n", "   * Java's definition}. If you only care to match ASCII digits, you can use {@code\n", "   * inRange('0', '9')}.\n"], "2": ["   * Determines whether a character is a letter according to {@linkplain Character#isLetter(char)\n", "   * Java's definition}. If you only care to match letters of the Latin alphabet, you can use {@code\n"], "3": ["   * Determines whether a character is a letter or digit according to {@linkplain\n"], "4": ["   * Determines whether a character is upper case according to {@linkplain\n", "   * Character#isUpperCase(char) Java's definition}.\n"], "5": ["   * Determines whether a character is lower case according to {@linkplain\n", "   * Character#isLowerCase(char) Java's definition}.\n"]}, "removed": {"1": ["   * Determines whether a character is a digit according to {@link Character#isDigit(char) Java's\n", "   * definition}. If you only care to match ASCII digits, you can use {@code inRange('0', '9')}.\n"], "2": ["   * Determines whether a character is a letter according to {@link Character#isLetter(char) Java's\n", "   * definition}. If you only care to match letters of the Latin alphabet, you can use {@code\n"], "3": ["   * Determines whether a character is a letter or digit according to {@link\n"], "4": ["   * Determines whether a character is upper case according to {@link Character#isUpperCase(char)\n", "   * Java's definition}.\n"], "5": ["   * Determines whether a character is lower case according to {@link Character#isLowerCase(char)\n", "   * Java's definition}.\n"]}, "added_lines": {"1": [151, 152, 153], "2": [162, 163], "3": [173], "4": [184, 185], "5": [195, 196]}, "removed_lines": {"1": [151, 152], "2": [161, 162], "3": [172], "4": [183, 184], "5": [194, 195]}}, {"1": "guava-gwt/test/com/google/common/util/concurrent/RunnablesTest_gwt.java", "added": {"1": ["/*\n", " * Copyright (C) 2008 The Guava Authors\n", " *\n", " * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package com.google.common.util.concurrent;\n", "public class RunnablesTest_gwt extends com.google.gwt.junit.client.GWTTestCase {\n", "@Override public String getModuleName() {\n", "  return \"com.google.common.util.concurrent.testModule\";\n", "}\n", "public void testDoNothingRunnableIsSingleton() throws Exception {\n", "  com.google.common.util.concurrent.RunnablesTest testCase = new com.google.common.util.concurrent.RunnablesTest();\n", "  testCase.testDoNothingRunnableIsSingleton();\n", "}\n", "}\n"]}, "removed": {}, "added_lines": {"1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]}, "removed_lines": {}}, {"2": "guava-tests/test/com/google/common/util/concurrent/RunnablesTest.java", "added": {"1": ["import com.google.common.annotations.GwtCompatible;\n", "\n"], "2": ["@GwtCompatible\n"]}, "removed": {"2": ["\n"]}, "added_lines": {"1": [19, 20], "2": [28]}, "removed_lines": {"2": [27]}}, {"3": "guava/src/com/google/common/base/CharMatcher.java", "added": {"1": ["   * Determines whether a character is a digit according to {@linkplain Character#isDigit(char)\n", "   * Java's definition}. If you only care to match ASCII digits, you can use {@code\n", "   * inRange('0', '9')}.\n"], "2": ["   * Determines whether a character is a letter according to {@linkplain Character#isLetter(char)\n", "   * Java's definition}. If you only care to match letters of the Latin alphabet, you can use {@code\n"], "3": ["   * Determines whether a character is a letter or digit according to {@linkplain\n"], "4": ["   * Determines whether a character is upper case according to {@linkplain\n", "   * Character#isUpperCase(char) Java's definition}.\n"], "5": ["   * Determines whether a character is lower case according to {@linkplain\n", "   * Character#isLowerCase(char) Java's definition}.\n"]}, "removed": {"1": ["   * Determines whether a character is a digit according to {@link Character#isDigit(char) Java's\n", "   * definition}. If you only care to match ASCII digits, you can use {@code inRange('0', '9')}.\n"], "2": ["   * Determines whether a character is a letter according to {@link Character#isLetter(char) Java's\n", "   * definition}. If you only care to match letters of the Latin alphabet, you can use {@code\n"], "3": ["   * Determines whether a character is a letter or digit according to {@link\n"], "4": ["   * Determines whether a character is upper case according to {@link Character#isUpperCase(char)\n", "   * Java's definition}.\n"], "5": ["   * Determines whether a character is lower case according to {@link Character#isLowerCase(char)\n", "   * Java's definition}.\n"]}, "added_lines": {"1": [153, 154, 155], "2": [164, 165], "3": [175], "4": [186, 187], "5": [197, 198]}, "removed_lines": {"1": [153, 154], "2": [163, 164], "3": [174], "4": [185, 186], "5": [196, 197]}}, {"4": "guava/src/com/google/common/base/Converter.java", "added": {}, "removed": {"1": ["  private static final class FunctionBasedConverter<A, B>\n", "      extends Converter<A, B> implements Serializable {\n", "    private final Function<? super A, ? extends B> forwardFunction;\n", "    private final Function<? super B, ? extends A> backwardFunction;\n", "\n", "    private FunctionBasedConverter(\n", "        Function<? super A, ? extends B> forwardFunction,\n", "        Function<? super B, ? extends A> backwardFunction) {\n", "      this.forwardFunction = checkNotNull(forwardFunction);\n", "      this.backwardFunction = checkNotNull(backwardFunction);\n", "    }\n", "\n", "    @Override\n", "    protected B doForward(A a) {\n", "      return forwardFunction.apply(a);\n", "    }\n", "\n", "    @Override\n", "    protected A doBackward(B b) {\n", "      return backwardFunction.apply(b);\n", "    }\n", "\n", "    @Override\n", "    public boolean equals(@Nullable Object object) {\n", "      if (object instanceof FunctionBasedConverter) {\n", "        FunctionBasedConverter<?, ?> that = (FunctionBasedConverter<?, ?>) object;\n", "        return this.forwardFunction.equals(that.forwardFunction)\n", "            && this.backwardFunction.equals(that.backwardFunction);\n", "      }\n", "      return false;\n", "    }\n", "\n", "    @Override\n", "    public int hashCode() {\n", "      return forwardFunction.hashCode() * 31 + backwardFunction.hashCode();\n", "    }\n", "\n", "    @Override\n", "    public String toString() {\n", "      return \"Converter.from(\" + forwardFunction + \", \" + backwardFunction + \")\";\n", "    }\n", "  }\n", "\n"]}, "added_lines": {}, "removed_lines": {"1": [370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412]}}, {"5": "guava/src/com/google/common/base/SmallCharMatcher.java", "added": {}, "removed": {"1": ["  @GwtIncompatible(\"java.util.BitSet\")\n"], "2": ["  @GwtIncompatible(\"java.util.BitSet\")\n"]}, "added_lines": {}, "removed_lines": {"1": [90], "2": [143]}}, {"6": "guava/src/com/google/common/collect/ImmutableSortedMultiset.java", "added": {"1": ["      super(TreeMultiset.<E>create(checkNotNull(comparator)));\n"]}, "removed": {"1": ["    private final Comparator<? super E> comparator;\n", "\n", "      super(TreeMultiset.<E>create(comparator));\n", "      this.comparator = checkNotNull(comparator);\n"]}, "added_lines": {"1": [444]}, "removed_lines": {"1": [439, 440, 446, 447]}}, {"7": "guava/src/com/google/common/io/CharStreams.java", "added": {"1": ["   * @deprecated Use {@link CharSource#copyTo(CharSink)} instead. This method is\n"]}, "removed": {"1": ["   * @deprecated Use {@link CharSource#copyTo(CharSink) instead. This method is\n"]}, "added_lines": {"1": [140]}, "removed_lines": {"1": [140]}}, {"8": "guava/src/com/google/common/util/concurrent/ServiceManager.java", "added": {"1": [" * A manager for monitoring and controlling a set of {@linkplain Service services}. This class\n", " * provides methods for {@linkplain #startAsync() starting}, {@linkplain #stopAsync() stopping} and\n", " * Additionally, users can monitor state transitions with the {@linkplain Listener listener}\n", " * mechanism.\n", " * <p>Here is a simple example of how to use a {@code ServiceManager} to start a server.\n"], "2": ["   * that need to listen to more fine-grained events (such as when each particular {@linkplain\n", "   * Service service} starts, or terminates), should attach {@linkplain Service.Listener service\n"], "3": ["   * @throws IllegalArgumentException if not all services are {@linkplain State#NEW new} or if there\n", "   * are any duplicate services.\n"], "4": ["   * services will either be {@linkplain Service.State#TERMINATED terminated} or {@linkplain\n", "   * Service.State#FAILED failed}.\n"], "5": ["   * this method returns all services will either be {@linkplain Service.State#TERMINATED\n", "   * terminated} or {@linkplain Service.State#FAILED failed}.\n"]}, "removed": {"1": [" * A manager for monitoring and controlling a set of {@link Service services}. This class provides\n", " * methods for {@linkplain #startAsync() starting}, {@linkplain #stopAsync() stopping} and\n", " * Additionally, users can monitor state transitions with the {@link Listener listener} mechanism.\n", " * <p>Here is a simple example of how to use a {@link ServiceManager} to start a server.\n"], "2": ["   * that need to listen to more fine-grained events (such as when each particular\n", "   * {@link Service service} starts, or terminates), should attach {@link Service.Listener service\n"], "3": ["   * @throws IllegalArgumentException if not all services are {@link State#NEW new} or if there are\n", "   *     any duplicate services.\n"], "4": ["   * services will either be {@link Service.State#TERMINATED terminated} or \n", "   * {@link Service.State#FAILED failed}\n"], "5": ["   * this method returns all services will either be {@link Service.State#TERMINATED terminated} or \n", "   * {@link Service.State#FAILED failed}\n"]}, "added_lines": {"1": [72, 73, 75, 76, 83], "2": [129, 130], "3": [177, 178], "4": [322, 323], "5": [331, 332]}, "removed_lines": {"1": [72, 73, 75, 82], "2": [128, 129], "3": [176, 177], "4": [321, 322], "5": [330, 331]}}, {"9": "guava/src/com/google/common/util/concurrent/WrappingExecutorService.java", "added": {"1": ["   * Wraps a task before it is submitted to the underlying executor. Though\n", "   * specified in terms of {@link Callable}, this method is also applied to\n", "   * {@link Runnable} tasks (unless {@link #wrapTest(Runnable}} is overridden\n", "   * with different behavior).\n"]}, "removed": {"1": ["   * Wraps a task  before it is submitted to the underlying Executor.\n", "   * Though specified in terms of Callable, this method is also applied to\n", "   * Runnable tasks.\n"]}, "added_lines": {"1": [54, 55, 56, 57]}, "removed_lines": {"1": [54, 55, 56]}}]}
