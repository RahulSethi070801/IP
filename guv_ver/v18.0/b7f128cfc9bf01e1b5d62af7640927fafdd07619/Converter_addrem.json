{
    "addition": {},
    "removed": {
        "370": "  private static final class FunctionBasedConverter<A, B>\n",
        "371": "      extends Converter<A, B> implements Serializable {\n",
        "372": "    private final Function<? super A, ? extends B> forwardFunction;\n",
        "373": "    private final Function<? super B, ? extends A> backwardFunction;\n",
        "374": "\n",
        "375": "    private FunctionBasedConverter(\n",
        "376": "        Function<? super A, ? extends B> forwardFunction,\n",
        "377": "        Function<? super B, ? extends A> backwardFunction) {\n",
        "378": "      this.forwardFunction = checkNotNull(forwardFunction);\n",
        "379": "      this.backwardFunction = checkNotNull(backwardFunction);\n",
        "380": "    }\n",
        "381": "\n",
        "382": "    @Override\n",
        "383": "    protected B doForward(A a) {\n",
        "384": "      return forwardFunction.apply(a);\n",
        "385": "    }\n",
        "386": "\n",
        "387": "    @Override\n",
        "388": "    protected A doBackward(B b) {\n",
        "389": "      return backwardFunction.apply(b);\n",
        "390": "    }\n",
        "391": "\n",
        "392": "    @Override\n",
        "393": "    public boolean equals(@Nullable Object object) {\n",
        "394": "      if (object instanceof FunctionBasedConverter) {\n",
        "395": "        FunctionBasedConverter<?, ?> that = (FunctionBasedConverter<?, ?>) object;\n",
        "396": "        return this.forwardFunction.equals(that.forwardFunction)\n",
        "397": "            && this.backwardFunction.equals(that.backwardFunction);\n",
        "398": "      }\n",
        "399": "      return false;\n",
        "400": "    }\n",
        "401": "\n",
        "402": "    @Override\n",
        "403": "    public int hashCode() {\n",
        "404": "      return forwardFunction.hashCode() * 31 + backwardFunction.hashCode();\n",
        "405": "    }\n",
        "406": "\n",
        "407": "    @Override\n",
        "408": "    public String toString() {\n",
        "409": "      return \"Converter.from(\" + forwardFunction + \", \" + backwardFunction + \")\";\n",
        "410": "    }\n",
        "411": "  }\n",
        "412": "\n"
    }
}