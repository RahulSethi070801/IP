{"id": "fc8c61cf703155f85b00b30cd11fc11b53947953", "code": [{"0": "guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Predicates.java", "added": {"1": ["    @SuppressWarnings(\"unchecked\") // safe contravariant cast\n"], "2": ["    // TODO(kevinb): understand why we still get a warning despite @SafeVarargs!\n"]}, "removed": {"1": ["    @SuppressWarnings(\"unchecked\") // these Object predicates work for any T\n"], "2": ["  @SuppressWarnings(\"unchecked\")\n"]}, "added_lines": {"1": [234], "2": [439]}, "removed_lines": {"1": [234], "2": [437]}}, {"1": "guava-gwt/src/com/google/common/base/Absent_CustomFieldSerializer.java", "added": {"1": ["  public static void deserialize(SerializationStreamReader reader, Absent<?> instance) {}\n", "  public static Absent<?> instantiate(SerializationStreamReader reader) {\n", "  public static void serialize(SerializationStreamWriter writer, Absent<?> instance) {}\n"]}, "removed": {"1": ["  public static void deserialize(SerializationStreamReader reader, Absent instance) {}\n", "  public static Absent instantiate(SerializationStreamReader reader) {\n", "  public static void serialize(SerializationStreamWriter writer, Absent instance) {}\n"]}, "added_lines": {"1": [34, 36, 40]}, "removed_lines": {"1": [34, 36, 40]}}, {"2": "guava-gwt/src/com/google/common/base/GwtSerializationDependencies.java", "added": {}, "removed": {"1": ["// None of these classes are instantiated, let alone serialized:\n", "@SuppressWarnings(\"serial\")\n"]}, "added_lines": {}, "removed_lines": {"1": [35, 36]}}, {"3": "guava-gwt/test-super/com/google/common/base/super/com/google/common/base/AbstractIteratorTest.java", "added": {"2": ["      @SuppressWarnings(\"unchecked\") // intentionally unsafe for test\n"]}, "removed": {"1": ["@SuppressWarnings(\"serial\") // No serialization is used in this test\n"], "2": ["      @SuppressWarnings(\"unchecked\") // not really safe, but that's the point\n"]}, "added_lines": {"2": [184]}, "removed_lines": {"1": [31], "2": [185]}}, {"4": "guava-gwt/test-super/com/google/common/base/super/com/google/common/base/EquivalenceTest.java", "added": {"1": ["  @SuppressWarnings(\"unchecked\") // varargs\n"]}, "removed": {"1": ["\n", "  @SuppressWarnings(\"unchecked\") // Iterable<String>...\n"]}, "added_lines": {"1": [34]}, "removed_lines": {"1": [34, 35]}}, {"5": "guava-gwt/test-super/com/google/common/base/super/com/google/common/base/JoinerTest.java", "added": {"1": ["  @SuppressWarnings(\"ReturnValueIgnored\") // testing for exception\n"]}, "removed": {"1": ["  @SuppressWarnings(\"ReturnValueIgnored\")\n"]}, "added_lines": {"1": [297]}, "removed_lines": {"1": [297]}}, {"6": "guava-gwt/test-super/com/google/common/base/super/com/google/common/base/OptionalTest.java", "added": {"1": ["  @SuppressWarnings(\"unused\") // compilation test\n", "  @SuppressWarnings(\"unused\") // compilation test\n", "  @SuppressWarnings(\"unused\") // compilation test\n", "    Optional<Number> optionalInt = Optional.of((Number) 1);\n", "  @SuppressWarnings(\"unused\") // compilation test\n", "\n", "    // Sadly, the following is what users will have to do in some circumstances.\n", "\n", "    @SuppressWarnings(\"unchecked\") // safe covariant cast\n"]}, "removed": {"1": ["  @SuppressWarnings(\"unchecked\") // safe covariant cast\n", "    Optional<Number> optionalInt = (Optional) getSomeOptionalInt();\n", "  @SuppressWarnings(\"unchecked\") // safe covariant cast\n"]}, "added_lines": {"1": [264, 270, 277, 279, 283, 286, 287, 288, 289]}, "removed_lines": {"1": [275, 277, 281]}}, {"7": "guava-gwt/test-super/com/google/common/base/super/com/google/common/base/PredicatesTest.java", "added": {"1": ["  @SuppressWarnings(\"unchecked\") // varargs\n", "  @SuppressWarnings(\"unchecked\") // varargs\n"], "2": ["  @SuppressWarnings(\"unchecked\") // varargs\n", "  @SuppressWarnings(\"unchecked\") // varargs\n"], "3": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "4": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "5": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "6": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "7": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "8": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "9": ["  @SuppressWarnings(\"unchecked\") // varargs\n", "  @SuppressWarnings(\"unchecked\") // varargs\n"], "10": ["  @SuppressWarnings(\"unchecked\") // varargs\n", "  @SuppressWarnings(\"unchecked\") // varargs\n"], "11": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "12": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "13": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "14": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "15": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "16": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "17": ["  @SuppressWarnings(\"unused\") // compilation test\n"]}, "removed": {"1": ["  @SuppressWarnings(\"unchecked\")\n", "  @SuppressWarnings(\"unchecked\")\n"], "2": ["  @SuppressWarnings(\"unchecked\")\n", "  @SuppressWarnings(\"unchecked\")\n"], "3": ["  @SuppressWarnings(\"unchecked\")\n"], "4": ["  @SuppressWarnings(\"unchecked\")\n"], "5": ["  @SuppressWarnings(\"unchecked\")\n"], "6": ["  @SuppressWarnings(\"unchecked\")\n"], "7": ["  @SuppressWarnings(\"unchecked\")\n"], "8": ["  @SuppressWarnings(\"unchecked\")\n"], "9": ["  @SuppressWarnings(\"unchecked\")\n", "  @SuppressWarnings(\"unchecked\")\n"], "10": ["  @SuppressWarnings(\"unchecked\")\n", "  @SuppressWarnings(\"unchecked\")\n"], "11": ["  @SuppressWarnings(\"unchecked\")\n"], "12": ["  @SuppressWarnings(\"unchecked\")\n"], "13": ["  @SuppressWarnings(\"unchecked\")\n"], "14": ["  @SuppressWarnings(\"unchecked\")\n"], "15": ["  @SuppressWarnings(\"unchecked\")\n"], "16": ["  @SuppressWarnings(\"unchecked\")\n"], "17": ["  @SuppressWarnings(\"unused\")\n"]}, "added_lines": {"1": [162, 167], "2": [176, 181], "3": [200], "4": [212], "5": [220], "6": [232], "7": [241], "8": [253], "9": [288, 293], "10": [302, 308], "11": [330], "12": [342], "13": [350], "14": [362], "15": [378], "16": [390], "17": [539]}, "removed_lines": {"1": [162, 167], "2": [176, 181], "3": [200], "4": [212], "5": [220], "6": [232], "7": [241], "8": [253], "9": [288, 293], "10": [302, 308], "11": [330], "12": [342], "13": [350], "14": [362], "15": [378], "16": [390], "17": [539]}}, {"8": "guava-gwt/test-super/com/google/common/base/super/com/google/common/base/SplitterTest.java", "added": {"1": ["  @SuppressWarnings(\"ReturnValueIgnored\") // testing for exception\n"], "2": ["  @SuppressWarnings(\"ReturnValueIgnored\") // testing for exception\n"]}, "removed": {"1": ["  @SuppressWarnings(\"ReturnValueIgnored\")\n"], "2": ["  @SuppressWarnings(\"ReturnValueIgnored\")\n"]}, "added_lines": {"1": [475], "2": [556]}, "removed_lines": {"1": [475], "2": [556]}}, {"9": "guava-tests/test/com/google/common/base/AbstractIteratorTest.java", "added": {"2": ["      @SuppressWarnings(\"unchecked\") // intentionally unsafe for test\n"]}, "removed": {"1": ["@SuppressWarnings(\"serial\") // No serialization is used in this test\n"], "2": ["      @SuppressWarnings(\"unchecked\") // not really safe, but that's the point\n"]}, "added_lines": {"2": [198]}, "removed_lines": {"1": [34], "2": [199]}}, {"10": "guava-tests/test/com/google/common/base/EquivalenceTest.java", "added": {"1": ["  @SuppressWarnings(\"unchecked\") // varargs\n"]}, "removed": {"1": ["\n", "  @SuppressWarnings(\"unchecked\") // Iterable<String>...\n"]}, "added_lines": {"1": [37]}, "removed_lines": {"1": [37, 38]}}, {"11": "guava-tests/test/com/google/common/base/FinalizableReferenceQueueClassLoaderUnloadingTest.java", "added": {"1": ["    Class<?> sepFwrC = sepLoader.loadClass(MyFinalizableWeakReference.class.getName());\n", "    Constructor<?> sepFwrCons = sepFwrC.getConstructor(Object.class, sepFrqC);\n", "    AtomicReference<WeakReference<?>> sepStopwatchRef = new AtomicReference<WeakReference<?>>(\n", "        (WeakReference<?>) sepFwrCons.newInstance(sepStopwatchA.get(), sepFrqA.get()));\n"], "2": ["    Callable<?> sepFrqUser = (Callable<?>) sepFrqUserC.newInstance();\n", "    WeakReference<?> finalizableWeakReference = (WeakReference<?>) sepFrqUser.call();\n"]}, "removed": {"1": ["    @SuppressWarnings(\"unchecked\")\n", "    Class<? extends WeakReference<?>> sepFwrC = (Class<? extends WeakReference<?>>)\n", "        sepLoader.loadClass(MyFinalizableWeakReference.class.getName());\n", "    Constructor<? extends WeakReference<?>> sepFwrCons =\n", "        sepFwrC.getConstructor(Object.class, sepFrqC);\n", "    AtomicReference<WeakReference<?>> sepStopwatchRef =\n", "        new AtomicReference<WeakReference<?>>(\n", "            sepFwrCons.newInstance(sepStopwatchA.get(), sepFrqA.get()));\n"], "2": ["    @SuppressWarnings(\"unchecked\")\n", "    Callable<WeakReference<Object>> sepFrqUser =\n", "        (Callable<WeakReference<Object>>) sepFrqUserC.newInstance();\n", "    WeakReference<Object> finalizableWeakReference = sepFrqUser.call();\n"]}, "added_lines": {"1": [110, 111, 117, 118], "2": [224, 225]}, "removed_lines": {"1": [110, 111, 112, 113, 114, 120, 121, 122], "2": [228, 229, 230, 231]}}, {"12": "guava-tests/test/com/google/common/base/JoinerTest.java", "added": {"1": ["  @SuppressWarnings(\"ReturnValueIgnored\") // testing for exception\n"]}, "removed": {"1": ["  @SuppressWarnings(\"ReturnValueIgnored\")\n"]}, "added_lines": {"1": [300]}, "removed_lines": {"1": [300]}}, {"13": "guava-tests/test/com/google/common/base/OptionalTest.java", "added": {"1": ["  @SuppressWarnings(\"unused\") // compilation test\n", "  @SuppressWarnings(\"unused\") // compilation test\n", "  @SuppressWarnings(\"unused\") // compilation test\n", "    Optional<Number> optionalInt = Optional.of((Number) 1);\n", "  @SuppressWarnings(\"unused\") // compilation test\n", "\n", "    // Sadly, the following is what users will have to do in some circumstances.\n", "\n", "    @SuppressWarnings(\"unchecked\") // safe covariant cast\n"]}, "removed": {"1": ["  @SuppressWarnings(\"unchecked\") // safe covariant cast\n", "    Optional<Number> optionalInt = (Optional) getSomeOptionalInt();\n", "  @SuppressWarnings(\"unchecked\") // safe covariant cast\n"]}, "added_lines": {"1": [267, 273, 280, 282, 286, 289, 290, 291, 292]}, "removed_lines": {"1": [278, 280, 284]}}, {"14": "guava-tests/test/com/google/common/base/PredicatesTest.java", "added": {"1": ["  @SuppressWarnings(\"unchecked\") // varargs\n", "  @SuppressWarnings(\"unchecked\") // varargs\n"], "2": ["  @SuppressWarnings(\"unchecked\") // varargs\n", "  @SuppressWarnings(\"unchecked\") // varargs\n", "  @SuppressWarnings(\"unchecked\") // varargs\n"], "3": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "4": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "5": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "6": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "7": ["  @SuppressWarnings(\"unchecked\") // varargs\n", "  @SuppressWarnings(\"unchecked\") // varargs\n"], "8": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "9": ["  @SuppressWarnings(\"unchecked\") // varargs\n", "  @SuppressWarnings(\"unchecked\") // varargs\n"], "10": ["  @SuppressWarnings(\"unchecked\") // varargs\n", "  @SuppressWarnings(\"unchecked\") // varargs\n"], "11": ["  @SuppressWarnings(\"unchecked\") // varargs\n", "  @SuppressWarnings(\"unchecked\") // varargs\n", "  @SuppressWarnings(\"unchecked\") // varargs\n"], "12": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "13": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "14": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "15": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "16": ["  @SuppressWarnings(\"unchecked\") // varargs\n", "  @SuppressWarnings(\"unchecked\") // varargs\n"], "17": ["  @SuppressWarnings(\"unchecked\") // varargs\n"], "18": ["  @SuppressWarnings(\"unchecked\") // varargs\n", "  @SuppressWarnings(\"unchecked\") // varargs\n"], "19": ["  @SuppressWarnings(\"unused\") // compilation test\n"]}, "removed": {"1": ["  @SuppressWarnings(\"unchecked\")\n", "  @SuppressWarnings(\"unchecked\")\n"], "2": ["  @SuppressWarnings(\"unchecked\")\n", "  @SuppressWarnings(\"unchecked\")\n", "  @SuppressWarnings(\"unchecked\")\n"], "3": ["  @SuppressWarnings(\"unchecked\")\n"], "4": ["  @SuppressWarnings(\"unchecked\")\n"], "5": ["  @SuppressWarnings(\"unchecked\")\n"], "6": ["  @SuppressWarnings(\"unchecked\")\n"], "7": ["  @SuppressWarnings(\"unchecked\")\n", "  @SuppressWarnings(\"unchecked\")\n"], "8": ["  @SuppressWarnings(\"unchecked\")\n"], "9": ["  @SuppressWarnings(\"unchecked\")\n", "  @SuppressWarnings(\"unchecked\")\n"], "10": ["  @SuppressWarnings(\"unchecked\")\n", "  @SuppressWarnings(\"unchecked\")\n"], "11": ["  @SuppressWarnings(\"unchecked\")\n", "  @SuppressWarnings(\"unchecked\")\n", "  @SuppressWarnings(\"unchecked\")\n"], "12": ["  @SuppressWarnings(\"unchecked\")\n"], "13": ["  @SuppressWarnings(\"unchecked\")\n"], "14": ["  @SuppressWarnings(\"unchecked\")\n"], "15": ["  @SuppressWarnings(\"unchecked\")\n"], "16": ["  @SuppressWarnings(\"unchecked\")\n", "  @SuppressWarnings(\"unchecked\")\n"], "17": ["  @SuppressWarnings(\"unchecked\")\n"], "18": ["  @SuppressWarnings(\"unchecked\")\n", "  @SuppressWarnings(\"unchecked\")\n"], "19": ["  @SuppressWarnings(\"unused\")\n"]}, "added_lines": {"1": [182, 187], "2": [197, 202, 207], "3": [221], "4": [232], "5": [249], "6": [257], "7": [270, 275], "8": [284], "9": [297, 302], "10": [337, 342], "11": [352, 357, 363], "12": [376], "13": [391], "14": [408], "15": [416], "16": [429, 434], "17": [450], "18": [463, 470], "19": [753]}, "removed_lines": {"1": [182, 187], "2": [197, 202, 207], "3": [221], "4": [232], "5": [249], "6": [257], "7": [270, 275], "8": [284], "9": [297, 302], "10": [337, 342], "11": [352, 357, 363], "12": [376], "13": [391], "14": [408], "15": [416], "16": [429, 434], "17": [450], "18": [463, 470], "19": [753]}}, {"15": "guava-tests/test/com/google/common/base/SplitterTest.java", "added": {"1": ["  @SuppressWarnings(\"ReturnValueIgnored\") // testing for exception\n"], "2": ["  @SuppressWarnings(\"ReturnValueIgnored\") // testing for exception\n"]}, "removed": {"1": ["  @SuppressWarnings(\"ReturnValueIgnored\")\n"], "2": ["  @SuppressWarnings(\"ReturnValueIgnored\")\n"]}, "added_lines": {"1": [639], "2": [728]}, "removed_lines": {"1": [639], "2": [728]}}, {"16": "guava-tests/test/com/google/common/base/ThrowablesTest.java", "added": {}, "removed": {"1": ["@SuppressWarnings(\"serial\") // this warning is silly for exceptions in tests\n"], "2": ["    /*\n", "     * Subclasses of Sample will define methods with these signatures that throw\n", "     * these exceptions, so we must declare them in the throws clause here.\n", "     * Eclipse doesn't think being thrown from a subclass's non-public,\n", "     * non-protected method with the same signature counts as being \"used.\"\n", "     */\n", "    @SuppressWarnings(\"unused\")\n", "    @SuppressWarnings(\"unused\")\n"]}, "added_lines": {}, "removed_lines": {"1": [36], "2": [458, 459, 460, 461, 462, 463, 464, 466]}}, {"17": "guava/src/com/google/common/base/Absent.java", "added": {"1": ["final class Absent<T> extends Optional<T> {\n", "  static final Absent<Object> INSTANCE = new Absent<Object>();\n", "\n", "  @SuppressWarnings(\"unchecked\") // implementation is \"fully variant\"\n", "  static <T> Optional<T> withType() {\n", "    return (Optional<T>) INSTANCE;\n", "  }\n"], "2": ["  @Override public T get() {\n", "  @Override public T or(T defaultValue) {\n", "  @Override public Optional<T> or(Optional<? extends T> secondChoice) {\n", "    return (Optional<T>) checkNotNull(secondChoice);\n", "  @Override public T or(Supplier<? extends T> supplier) {\n", "  @Override @Nullable public T orNull() {\n", "  @Override public Set<T> asSet() {\n", "  @Override public <V> Optional<V> transform(Function<? super T, V> function) {\n"]}, "removed": {"1": ["final class Absent extends Optional<Object> {\n", "  static final Absent INSTANCE = new Absent();\n"], "2": ["  @Override public Object get() {\n", "  @Override public Object or(Object defaultValue) {\n", "  @Override public Optional<Object> or(Optional<?> secondChoice) {\n", "    return (Optional) checkNotNull(secondChoice);\n", "  @Override public Object or(Supplier<?> supplier) {\n", "  @Override @Nullable public Object orNull() {\n", "  @Override public Set<Object> asSet() {\n", "  @Override public <V> Optional<V> transform(Function<Object, V> function) {\n"]}, "added_lines": {"1": [32, 33, 34, 35, 36, 37, 38], "2": [46, 50, 55, 56, 59, 64, 68, 72]}, "removed_lines": {"1": [32, 33], "2": [41, 45, 50, 51, 54, 59, 63, 67]}}, {"18": "guava/src/com/google/common/base/Defaults.java", "added": {"1": ["    // Only add to this map via put(Map, Class<T>, T)\n"], "2": ["    // Primitives.wrap(type).cast(...) would avoid the warning, but we can't use that from here\n", "    @SuppressWarnings(\"unchecked\") // the put method enforces this key-value relationship\n", "    T t = (T) DEFAULTS.get(checkNotNull(type));\n", "    return t;\n"]}, "removed": {"2": ["  @SuppressWarnings(\"unchecked\")\n", "    return (T) DEFAULTS.get(checkNotNull(type));\n"]}, "added_lines": {"1": [37], "2": [60, 61, 62, 63]}, "removed_lines": {"2": [58, 60]}}, {"19": "guava/src/com/google/common/base/Equivalence.java", "added": {"1": ["      if (obj instanceof Wrapper) {\n", "        Wrapper<?> that = (Wrapper<?>) obj; // note: not necessarily a Wrapper<T>\n", "\n", "        if (this.equivalence.equals(that.equivalence)) {\n", "          /*\n", "           * We'll accept that as sufficient \"proof\" that either equivalence should be able to\n", "           * handle either reference, so it's safe to circumvent compile-time type checking.\n", "           */\n", "          @SuppressWarnings(\"unchecked\")\n", "          Equivalence<Object> equivalence = (Equivalence<Object>) this.equivalence;\n", "          return equivalence.equivalent(this.reference, that.reference);\n", "        }\n", "      }\n", "      return false;\n"]}, "removed": {"1": ["      } else if (obj instanceof Wrapper) {\n", "        Wrapper<?> that = (Wrapper<?>) obj;\n", "        /*\n", "         * We cast to Equivalence<Object> here because we can't check the type of the reference held\n", "         * by the other wrapper.  But, by checking that the Equivalences are equal, we know that\n", "         * whatever type it is, it is assignable to the type handled by this wrapper's equivalence.\n", "         */\n", "        @SuppressWarnings(\"unchecked\")\n", "        Equivalence<Object> equivalence = (Equivalence<Object>) this.equivalence;\n", "        return equivalence.equals(that.equivalence)\n", "            && equivalence.equivalent(this.reference, that.reference);\n", "      } else {\n", "        return false;\n"]}, "added_lines": {"1": [195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208]}, "removed_lines": {"1": [194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206]}}, {"20": "guava/src/com/google/common/base/FinalizableReferenceQueue.java", "added": {}, "removed": {"1": ["  @SuppressWarnings(\"unchecked\")\n"]}, "added_lines": {}, "removed_lines": {"1": [108]}}, {"21": "guava/src/com/google/common/base/Functions.java", "added": {"1": ["  // implementation is \"fully variant\"; E has become a \"pass-through\" type\n"]}, "removed": {}, "added_lines": {"1": [77]}, "removed_lines": {}}, {"22": "guava/src/com/google/common/base/Optional.java", "added": {"1": ["    return Absent.withType();\n"]}, "removed": {"1": ["  @SuppressWarnings(\"unchecked\")\n", "    return (Optional<T>) Absent.INSTANCE;\n"]}, "added_lines": {"1": [78]}, "removed_lines": {"1": [77, 79]}}, {"23": "guava/src/com/google/common/base/Predicates.java", "added": {"1": ["    @SuppressWarnings(\"unchecked\") // safe contravariant cast\n"], "2": ["    // TODO(kevinb): understand why we still get a warning despite @SafeVarargs!\n"]}, "removed": {"1": ["    @SuppressWarnings(\"unchecked\") // these Object predicates work for any T\n"], "2": ["  @SuppressWarnings(\"unchecked\")\n"]}, "added_lines": {"1": [297], "2": [611]}, "removed_lines": {"1": [297], "2": [609]}}, {"24": "guava/src/com/google/common/base/Suppliers.java", "added": {"1": ["    @SuppressWarnings(\"unchecked\") // implementation is \"fully variant\"\n", "    SupplierFunction<T> sf = (SupplierFunction<T>) SupplierFunctionImpl.INSTANCE;\n", "    return sf;\n", "  private interface SupplierFunction<T> extends Function<Supplier<T>, T> {}\n", "\n", "  private enum SupplierFunctionImpl implements SupplierFunction<Object> {\n", "    // Note: This makes T a \"pass-through type\"\n", "    @Override public Object apply(Supplier<Object> input) {\n"]}, "removed": {"1": ["  //SupplierFunction works for any T.\n", "  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n", "    return (Function) SupplierFunction.INSTANCE;\n", "  private enum SupplierFunction implements Function<Supplier<?>, Object> {\n", "    @Override public Object apply(Supplier<?> input) {\n"]}, "added_lines": {"1": [290, 291, 292, 295, 296, 297, 300, 301]}, "removed_lines": {"1": [289, 290, 292, 295, 298]}}]}
