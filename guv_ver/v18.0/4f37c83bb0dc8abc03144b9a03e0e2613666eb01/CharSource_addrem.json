{
    "addition": {
        "21": "import com.google.common.annotations.Beta;\n",
        "88": "   *     instead. This method is scheduled for removal in Guava 18.0.\n",
        "218": "  /**\n",
        "219": "   * Reads lines of text from this source, processing each line as it is read using the given\n",
        "220": "   * {@link LineProcessor processor}. Stops when all lines have been processed or the processor\n",
        "221": "   * returns {@code false} and returns the result produced by the processor.\n",
        "222": "   *\n",
        "223": "   * <p>Like {@link BufferedReader}, this method breaks lines on any of {@code \\n}, {@code \\r} or\n",
        "224": "   * {@code \\r\\n}, does not include the line separator in the lines passed to the {@code processor}\n",
        "225": "   * and does not consider there to be an extra empty line at the end if the content is terminated\n",
        "226": "   * with a line separator.\n",
        "227": "   *\n",
        "228": "   * @throws IOException if an I/O error occurs in the process of reading from this source or if\n",
        "229": "   *     {@code processor} throws an {@code IOException}\n",
        "230": "   * @since 16.0\n",
        "231": "   */\n",
        "232": "  @Beta\n",
        "233": "  public <T> T readLines(LineProcessor<T> processor) throws IOException {\n",
        "234": "    checkNotNull(processor);\n",
        "235": "\n",
        "236": "    Closer closer = Closer.create();\n",
        "237": "    try {\n",
        "238": "      Reader reader = closer.register(openStream());\n",
        "239": "      return CharStreams.readLines(reader, processor);\n",
        "240": "    } catch (Throwable e) {\n",
        "241": "      throw closer.rethrow(e);\n",
        "242": "    } finally {\n",
        "243": "      closer.close();\n",
        "244": "    }\n",
        "245": "  }\n",
        "246": "\n",
        "404": "    @Override\n",
        "405": "    public <T> T readLines(LineProcessor<T> processor) throws IOException {\n",
        "406": "      for (String line : lines()) {\n",
        "407": "        if (!processor.processLine(line)) {\n",
        "408": "          break;\n",
        "409": "        }\n",
        "410": "      }\n",
        "411": "      return processor.getResult();\n",
        "412": "    }\n",
        "413": "\n"
    },
    "removed": {
        "87": "   *     instead.\n"
    }
}