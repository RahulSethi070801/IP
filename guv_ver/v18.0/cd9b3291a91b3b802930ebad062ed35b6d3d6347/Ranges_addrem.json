{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2009 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.Beta;\n",
        "20": "import com.google.common.annotations.GwtCompatible;\n",
        "21": "\n",
        "22": "import java.util.NoSuchElementException;\n",
        "23": "\n",
        "24": "/**\n",
        "25": " * Static methods pertaining to {@link Range} instances.  Each of the\n",
        "26": " * {@link Range nine types of ranges} can be constructed with a corresponding\n",
        "27": " * factory method:\n",
        "28": " *\n",
        "29": " * <dl>\n",
        "30": " * <dt>{@code (a..b)}\n",
        "31": " * <dd>{@link #open}\n",
        "32": " * <dt>{@code [a..b]}\n",
        "33": " * <dd>{@link #closed}\n",
        "34": " * <dt>{@code [a..b)}\n",
        "35": " * <dd>{@link #closedOpen}\n",
        "36": " * <dt>{@code (a..b]}\n",
        "37": " * <dd>{@link #openClosed}\n",
        "38": " * <dt>{@code (a..+\u221e)}\n",
        "39": " * <dd>{@link #greaterThan}\n",
        "40": " * <dt>{@code [a..+\u221e)}\n",
        "41": " * <dd>{@link #atLeast}\n",
        "42": " * <dt>{@code (-\u221e..b)}\n",
        "43": " * <dd>{@link #lessThan}\n",
        "44": " * <dt>{@code (-\u221e..b]}\n",
        "45": " * <dd>{@link #atMost}\n",
        "46": " * <dt>{@code (-\u221e..+\u221e)}\n",
        "47": " * <dd>{@link #all}\n",
        "48": " * </dl>\n",
        "49": " *\n",
        "50": " * <p>Additionally, {@link Range} instances can be constructed by passing the\n",
        "51": " * {@link BoundType bound types} explicitly.\n",
        "52": " *\n",
        "53": " * <dl>\n",
        "54": " * <dt>Bounded on both ends\n",
        "55": " * <dd>{@link #range}\n",
        "56": " * <dt>Unbounded on top ({@code (a..+\u221e)} or {@code (a..+\u221e)})\n",
        "57": " * <dd>{@link #downTo}\n",
        "58": " * <dt>Unbounded on bottom ({@code (-\u221e..b)} or {@code (-\u221e..b]})\n",
        "59": " * <dd>{@link #upTo}\n",
        "60": " * </dl>\n",
        "61": " *\n",
        "62": " * <p>See the Guava User Guide article on <a href=\n",
        "63": " * \"http://code.google.com/p/guava-libraries/wiki/RangesExplained\">\n",
        "64": " * {@code Range}</a>.\n",
        "65": " *\n",
        "66": " * @author Kevin Bourrillion\n",
        "67": " * @author Gregory Kick\n",
        "68": " * @since 10.0\n",
        "69": " * @deprecated Use the corresponding method in {@link Range}.\n",
        "70": " */\n",
        "71": "@Deprecated\n",
        "72": "@GwtCompatible\n",
        "73": "@Beta\n",
        "74": "public final class Ranges {\n",
        "75": "  private Ranges() {}\n",
        "76": "\n",
        "77": "  /**\n",
        "78": "   * Returns a range that contains all values strictly greater than {@code\n",
        "79": "   * lower} and strictly less than {@code upper}.\n",
        "80": "   *\n",
        "81": "   * @throws IllegalArgumentException if {@code lower} is greater than <i>or\n",
        "82": "   *     equal to</i> {@code upper}\n",
        "83": "   */\n",
        "84": "  public static <C extends Comparable<?>> Range<C> open(C lower, C upper) {\n",
        "85": "    return Range.open(lower, upper);\n",
        "86": "  }\n",
        "87": "\n",
        "88": "  /**\n",
        "89": "   * Returns a range that contains all values greater than or equal to\n",
        "90": "   * {@code lower} and less than or equal to {@code upper}.\n",
        "91": "   *\n",
        "92": "   * @throws IllegalArgumentException if {@code lower} is greater than {@code\n",
        "93": "   *     upper}\n",
        "94": "   */\n",
        "95": "  public static <C extends Comparable<?>> Range<C> closed(C lower, C upper) {\n",
        "96": "    return Range.closed(lower, upper);\n",
        "97": "  }\n",
        "98": "\n",
        "99": "  /**\n",
        "100": "   * Returns a range that contains all values greater than or equal to\n",
        "101": "   * {@code lower} and strictly less than {@code upper}.\n",
        "102": "   *\n",
        "103": "   * @throws IllegalArgumentException if {@code lower} is greater than {@code\n",
        "104": "   *     upper}\n",
        "105": "   */\n",
        "106": "  public static <C extends Comparable<?>> Range<C> closedOpen(\n",
        "107": "      C lower, C upper) {\n",
        "108": "    return Range.closedOpen(lower, upper);\n",
        "109": "  }\n",
        "110": "\n",
        "111": "  /**\n",
        "112": "   * Returns a range that contains all values strictly greater than {@code\n",
        "113": "   * lower} and less than or equal to {@code upper}.\n",
        "114": "   *\n",
        "115": "   * @throws IllegalArgumentException if {@code lower} is greater than {@code\n",
        "116": "   *     upper}\n",
        "117": "   */\n",
        "118": "  public static <C extends Comparable<?>> Range<C> openClosed(\n",
        "119": "      C lower, C upper) {\n",
        "120": "    return Range.openClosed(lower, upper);\n",
        "121": "  }\n",
        "122": "\n",
        "123": "  /**\n",
        "124": "   * Returns a range that contains any value from {@code lower} to {@code\n",
        "125": "   * upper}, where each endpoint may be either inclusive (closed) or exclusive\n",
        "126": "   * (open).\n",
        "127": "   *\n",
        "128": "   * @throws IllegalArgumentException if {@code lower} is greater than {@code\n",
        "129": "   *     upper}\n",
        "130": "   */\n",
        "131": "  public static <C extends Comparable<?>> Range<C> range(\n",
        "132": "      C lower, BoundType lowerType, C upper, BoundType upperType) {\n",
        "133": "    return Range.range(lower, lowerType, upper, upperType);\n",
        "134": "  }\n",
        "135": "\n",
        "136": "  /**\n",
        "137": "   * Returns a range that contains all values strictly less than {@code\n",
        "138": "   * endpoint}.\n",
        "139": "   */\n",
        "140": "  public static <C extends Comparable<?>> Range<C> lessThan(C endpoint) {\n",
        "141": "    return Range.lessThan(endpoint);\n",
        "142": "  }\n",
        "143": "\n",
        "144": "  /**\n",
        "145": "   * Returns a range that contains all values less than or equal to\n",
        "146": "   * {@code endpoint}.\n",
        "147": "   */\n",
        "148": "  public static <C extends Comparable<?>> Range<C> atMost(C endpoint) {\n",
        "149": "    return Range.atMost(endpoint);\n",
        "150": "  }\n",
        "151": "\n",
        "152": "  /**\n",
        "153": "   * Returns a range with no lower bound up to the given endpoint, which may be\n",
        "154": "   * either inclusive (closed) or exclusive (open).\n",
        "155": "   */\n",
        "156": "  public static <C extends Comparable<?>> Range<C> upTo(\n",
        "157": "      C endpoint, BoundType boundType) {\n",
        "158": "    return Range.upTo(endpoint, boundType);\n",
        "159": "  }\n",
        "160": "\n",
        "161": "  /**\n",
        "162": "   * Returns a range that contains all values strictly greater than {@code\n",
        "163": "   * endpoint}.\n",
        "164": "   */\n",
        "165": "  public static <C extends Comparable<?>> Range<C> greaterThan(C endpoint) {\n",
        "166": "    return Range.greaterThan(endpoint);\n",
        "167": "  }\n",
        "168": "\n",
        "169": "  /**\n",
        "170": "   * Returns a range that contains all values greater than or equal to\n",
        "171": "   * {@code endpoint}.\n",
        "172": "   */\n",
        "173": "  public static <C extends Comparable<?>> Range<C> atLeast(C endpoint) {\n",
        "174": "    return Range.atLeast(endpoint);\n",
        "175": "  }\n",
        "176": "\n",
        "177": "  /**\n",
        "178": "   * Returns a range from the given endpoint, which may be either inclusive\n",
        "179": "   * (closed) or exclusive (open), with no upper bound.\n",
        "180": "   */\n",
        "181": "  public static <C extends Comparable<?>> Range<C> downTo(\n",
        "182": "      C endpoint, BoundType boundType) {\n",
        "183": "    return Range.downTo(endpoint, boundType);\n",
        "184": "  }\n",
        "185": "\n",
        "186": "  /** Returns a range that contains every value of type {@code C}. */\n",
        "187": "  public static <C extends Comparable<?>> Range<C> all() {\n",
        "188": "    return Range.all();\n",
        "189": "  }\n",
        "190": "\n",
        "191": "  /**\n",
        "192": "   * Returns a range that {@linkplain Range#contains(Comparable) contains} only\n",
        "193": "   * the given value. The returned range is {@linkplain BoundType#CLOSED closed}\n",
        "194": "   * on both ends.\n",
        "195": "   */\n",
        "196": "  public static <C extends Comparable<?>> Range<C> singleton(C value) {\n",
        "197": "    return Range.singleton(value);\n",
        "198": "  }\n",
        "199": "\n",
        "200": "  /**\n",
        "201": "   * Returns the minimal range that\n",
        "202": "   * {@linkplain Range#contains(Comparable) contains} all of the given values.\n",
        "203": "   * The returned range is {@linkplain BoundType#CLOSED closed} on both ends.\n",
        "204": "   *\n",
        "205": "   * @throws ClassCastException if the parameters are not <i>mutually\n",
        "206": "   *     comparable</i>\n",
        "207": "   * @throws NoSuchElementException if {@code values} is empty\n",
        "208": "   * @throws NullPointerException if any of {@code values} is null\n",
        "209": "   */\n",
        "210": "  public static <C extends Comparable<?>> Range<C> encloseAll(\n",
        "211": "      Iterable<C> values) {\n",
        "212": "    return Range.encloseAll(values);\n",
        "213": "  }\n",
        "214": "}"
    }
}