{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2011 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.BoundType.CLOSED;\n",
        "20": "import static com.google.common.collect.BoundType.OPEN;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import com.google.common.testing.EqualsTester;\n",
        "24": "\n",
        "25": "import junit.framework.TestCase;\n",
        "26": "\n",
        "27": "import java.util.Arrays;\n",
        "28": "import java.util.List;\n",
        "29": "import java.util.NoSuchElementException;\n",
        "30": "\n",
        "31": "/**\n",
        "32": " * @author Gregory Kick\n",
        "33": " */\n",
        "34": "@GwtCompatible\n",
        "35": "@SuppressWarnings(\"deprecation\") // since Ranges is deprecated\n",
        "36": "public class RangesTest extends TestCase {\n",
        "37": "  public void testSingleton() {\n",
        "38": "    assertEquals(Ranges.closed(0, 0), Ranges.singleton(0));\n",
        "39": "    assertEquals(Ranges.closed(9, 9), Ranges.singleton(9));\n",
        "40": "  }\n",
        "41": "\n",
        "42": "  public void testEncloseAll() {\n",
        "43": "    assertEquals(Ranges.closed(0, 0), Ranges.encloseAll(Arrays.asList(0)));\n",
        "44": "    assertEquals(Ranges.closed(-3, 5), Ranges.encloseAll(Arrays.asList(5, -3)));\n",
        "45": "    assertEquals(Ranges.closed(-3, 5), Ranges.encloseAll(Arrays.asList(1, 2, 2, 2, 5, -3, 0, -1)));\n",
        "46": "  }\n",
        "47": "\n",
        "48": "  public void testEncloseAll_empty() {\n",
        "49": "    try {\n",
        "50": "      Ranges.encloseAll(ImmutableSet.<Integer>of());\n",
        "51": "      fail();\n",
        "52": "    } catch (NoSuchElementException expected) {}\n",
        "53": "  }\n",
        "54": "\n",
        "55": "  public void testEncloseAll_nullValue() {\n",
        "56": "    List<Integer> nullFirst = Lists.newArrayList(null, 0);\n",
        "57": "    try {\n",
        "58": "      Ranges.encloseAll(nullFirst);\n",
        "59": "      fail();\n",
        "60": "    } catch (NullPointerException expected) {}\n",
        "61": "    List<Integer> nullNotFirst = Lists.newArrayList(0, null);\n",
        "62": "    try {\n",
        "63": "      Ranges.encloseAll(nullNotFirst);\n",
        "64": "      fail();\n",
        "65": "    } catch (NullPointerException expected) {}\n",
        "66": "  }\n",
        "67": "\n",
        "68": "  public void testEquivalentFactories() {\n",
        "69": "    new EqualsTester()\n",
        "70": "        .addEqualityGroup(Ranges.all())\n",
        "71": "        .addEqualityGroup(\n",
        "72": "            Ranges.atLeast(1),\n",
        "73": "            Ranges.downTo(1, CLOSED))\n",
        "74": "        .addEqualityGroup(\n",
        "75": "            Ranges.greaterThan(1),\n",
        "76": "            Ranges.downTo(1, OPEN))\n",
        "77": "        .addEqualityGroup(\n",
        "78": "            Ranges.atMost(7),\n",
        "79": "            Ranges.upTo(7, CLOSED))\n",
        "80": "        .addEqualityGroup(\n",
        "81": "            Ranges.lessThan(7),\n",
        "82": "            Ranges.upTo(7, OPEN))\n",
        "83": "        .addEqualityGroup(\n",
        "84": "            Ranges.open(1, 7),\n",
        "85": "            Ranges.range(1, OPEN, 7, OPEN))\n",
        "86": "        .addEqualityGroup(\n",
        "87": "            Ranges.openClosed(1, 7),\n",
        "88": "            Ranges.range(1, OPEN, 7, CLOSED))\n",
        "89": "        .addEqualityGroup(\n",
        "90": "            Ranges.closed(1, 7),\n",
        "91": "            Ranges.range(1, CLOSED, 7, CLOSED))\n",
        "92": "        .addEqualityGroup(\n",
        "93": "            Ranges.closedOpen(1, 7),\n",
        "94": "            Ranges.range(1, CLOSED, 7, OPEN))\n",
        "95": "        .testEquals();\n",
        "96": "  }\n",
        "97": "}\n"
    }
}