{"id": "cd9b3291a91b3b802930ebad062ed35b6d3d6347", "code": [{"0": "guava-gwt/test/com/google/common/collect/RangesTest_gwt.java", "added": {}, "removed": {"1": ["/*\n", " * Copyright (C) 2008 The Guava Authors\n", " *\n", " * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package com.google.common.collect;\n", "public class RangesTest_gwt extends com.google.gwt.junit.client.GWTTestCase {\n", "@Override public String getModuleName() {\n", "  return \"com.google.common.collect.testModule\";\n", "}\n", "public void testEncloseAll() throws Exception {\n", "  com.google.common.collect.RangesTest testCase = new com.google.common.collect.RangesTest();\n", "  testCase.testEncloseAll();\n", "}\n", "\n", "public void testEncloseAll_empty() throws Exception {\n", "  com.google.common.collect.RangesTest testCase = new com.google.common.collect.RangesTest();\n", "  testCase.testEncloseAll_empty();\n", "}\n", "\n", "public void testEncloseAll_nullValue() throws Exception {\n", "  com.google.common.collect.RangesTest testCase = new com.google.common.collect.RangesTest();\n", "  testCase.testEncloseAll_nullValue();\n", "}\n", "\n", "public void testEquivalentFactories() throws Exception {\n", "  com.google.common.collect.RangesTest testCase = new com.google.common.collect.RangesTest();\n", "  testCase.testEquivalentFactories();\n", "}\n", "\n", "public void testSingleton() throws Exception {\n", "  com.google.common.collect.RangesTest testCase = new com.google.common.collect.RangesTest();\n", "  testCase.testSingleton();\n", "}\n", "}\n"]}, "added_lines": {}, "removed_lines": {"1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]}}, {"1": "guava-tests/test/com/google/common/collect/RangesTest.java", "added": {}, "removed": {"1": ["/*\n", " * Copyright (C) 2011 The Guava Authors\n", " *\n", " * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package com.google.common.collect;\n", "\n", "import static com.google.common.collect.BoundType.CLOSED;\n", "import static com.google.common.collect.BoundType.OPEN;\n", "\n", "import com.google.common.annotations.GwtCompatible;\n", "import com.google.common.testing.EqualsTester;\n", "\n", "import junit.framework.TestCase;\n", "\n", "import java.util.Arrays;\n", "import java.util.List;\n", "import java.util.NoSuchElementException;\n", "\n", "/**\n", " * @author Gregory Kick\n", " */\n", "@GwtCompatible\n", "@SuppressWarnings(\"deprecation\") // since Ranges is deprecated\n", "public class RangesTest extends TestCase {\n", "  public void testSingleton() {\n", "    assertEquals(Ranges.closed(0, 0), Ranges.singleton(0));\n", "    assertEquals(Ranges.closed(9, 9), Ranges.singleton(9));\n", "  }\n", "\n", "  public void testEncloseAll() {\n", "    assertEquals(Ranges.closed(0, 0), Ranges.encloseAll(Arrays.asList(0)));\n", "    assertEquals(Ranges.closed(-3, 5), Ranges.encloseAll(Arrays.asList(5, -3)));\n", "    assertEquals(Ranges.closed(-3, 5), Ranges.encloseAll(Arrays.asList(1, 2, 2, 2, 5, -3, 0, -1)));\n", "  }\n", "\n", "  public void testEncloseAll_empty() {\n", "    try {\n", "      Ranges.encloseAll(ImmutableSet.<Integer>of());\n", "      fail();\n", "    } catch (NoSuchElementException expected) {}\n", "  }\n", "\n", "  public void testEncloseAll_nullValue() {\n", "    List<Integer> nullFirst = Lists.newArrayList(null, 0);\n", "    try {\n", "      Ranges.encloseAll(nullFirst);\n", "      fail();\n", "    } catch (NullPointerException expected) {}\n", "    List<Integer> nullNotFirst = Lists.newArrayList(0, null);\n", "    try {\n", "      Ranges.encloseAll(nullNotFirst);\n", "      fail();\n", "    } catch (NullPointerException expected) {}\n", "  }\n", "\n", "  public void testEquivalentFactories() {\n", "    new EqualsTester()\n", "        .addEqualityGroup(Ranges.all())\n", "        .addEqualityGroup(\n", "            Ranges.atLeast(1),\n", "            Ranges.downTo(1, CLOSED))\n", "        .addEqualityGroup(\n", "            Ranges.greaterThan(1),\n", "            Ranges.downTo(1, OPEN))\n", "        .addEqualityGroup(\n", "            Ranges.atMost(7),\n", "            Ranges.upTo(7, CLOSED))\n", "        .addEqualityGroup(\n", "            Ranges.lessThan(7),\n", "            Ranges.upTo(7, OPEN))\n", "        .addEqualityGroup(\n", "            Ranges.open(1, 7),\n", "            Ranges.range(1, OPEN, 7, OPEN))\n", "        .addEqualityGroup(\n", "            Ranges.openClosed(1, 7),\n", "            Ranges.range(1, OPEN, 7, CLOSED))\n", "        .addEqualityGroup(\n", "            Ranges.closed(1, 7),\n", "            Ranges.range(1, CLOSED, 7, CLOSED))\n", "        .addEqualityGroup(\n", "            Ranges.closedOpen(1, 7),\n", "            Ranges.range(1, CLOSED, 7, OPEN))\n", "        .testEquals();\n", "  }\n", "}\n"]}, "added_lines": {}, "removed_lines": {"1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97]}}, {"2": "guava/src/com/google/common/collect/RangeSet.java", "added": {"1": ["   * {@code RangeSet} consisted of {@code Range.closed(1, 3)} and {@code Range.greaterThan(4)},\n"]}, "removed": {"1": ["   * {@code RangeSet} consisted of {@code Ranges.closed(1, 3)} and {@code Ranges.greaterThan(4)},\n"]}, "added_lines": {"1": [201]}, "removed_lines": {"1": [201]}}, {"3": "guava/src/com/google/common/collect/Ranges.java", "added": {}, "removed": {"1": ["/*\n", " * Copyright (C) 2009 The Guava Authors\n", " *\n", " * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package com.google.common.collect;\n", "\n", "import com.google.common.annotations.Beta;\n", "import com.google.common.annotations.GwtCompatible;\n", "\n", "import java.util.NoSuchElementException;\n", "\n", "/**\n", " * Static methods pertaining to {@link Range} instances.  Each of the\n", " * {@link Range nine types of ranges} can be constructed with a corresponding\n", " * factory method:\n", " *\n", " * <dl>\n", " * <dt>{@code (a..b)}\n", " * <dd>{@link #open}\n", " * <dt>{@code [a..b]}\n", " * <dd>{@link #closed}\n", " * <dt>{@code [a..b)}\n", " * <dd>{@link #closedOpen}\n", " * <dt>{@code (a..b]}\n", " * <dd>{@link #openClosed}\n", " * <dt>{@code (a..+\u221e)}\n", " * <dd>{@link #greaterThan}\n", " * <dt>{@code [a..+\u221e)}\n", " * <dd>{@link #atLeast}\n", " * <dt>{@code (-\u221e..b)}\n", " * <dd>{@link #lessThan}\n", " * <dt>{@code (-\u221e..b]}\n", " * <dd>{@link #atMost}\n", " * <dt>{@code (-\u221e..+\u221e)}\n", " * <dd>{@link #all}\n", " * </dl>\n", " *\n", " * <p>Additionally, {@link Range} instances can be constructed by passing the\n", " * {@link BoundType bound types} explicitly.\n", " *\n", " * <dl>\n", " * <dt>Bounded on both ends\n", " * <dd>{@link #range}\n", " * <dt>Unbounded on top ({@code (a..+\u221e)} or {@code (a..+\u221e)})\n", " * <dd>{@link #downTo}\n", " * <dt>Unbounded on bottom ({@code (-\u221e..b)} or {@code (-\u221e..b]})\n", " * <dd>{@link #upTo}\n", " * </dl>\n", " *\n", " * <p>See the Guava User Guide article on <a href=\n", " * \"http://code.google.com/p/guava-libraries/wiki/RangesExplained\">\n", " * {@code Range}</a>.\n", " *\n", " * @author Kevin Bourrillion\n", " * @author Gregory Kick\n", " * @since 10.0\n", " * @deprecated Use the corresponding method in {@link Range}.\n", " */\n", "@Deprecated\n", "@GwtCompatible\n", "@Beta\n", "public final class Ranges {\n", "  private Ranges() {}\n", "\n", "  /**\n", "   * Returns a range that contains all values strictly greater than {@code\n", "   * lower} and strictly less than {@code upper}.\n", "   *\n", "   * @throws IllegalArgumentException if {@code lower} is greater than <i>or\n", "   *     equal to</i> {@code upper}\n", "   */\n", "  public static <C extends Comparable<?>> Range<C> open(C lower, C upper) {\n", "    return Range.open(lower, upper);\n", "  }\n", "\n", "  /**\n", "   * Returns a range that contains all values greater than or equal to\n", "   * {@code lower} and less than or equal to {@code upper}.\n", "   *\n", "   * @throws IllegalArgumentException if {@code lower} is greater than {@code\n", "   *     upper}\n", "   */\n", "  public static <C extends Comparable<?>> Range<C> closed(C lower, C upper) {\n", "    return Range.closed(lower, upper);\n", "  }\n", "\n", "  /**\n", "   * Returns a range that contains all values greater than or equal to\n", "   * {@code lower} and strictly less than {@code upper}.\n", "   *\n", "   * @throws IllegalArgumentException if {@code lower} is greater than {@code\n", "   *     upper}\n", "   */\n", "  public static <C extends Comparable<?>> Range<C> closedOpen(\n", "      C lower, C upper) {\n", "    return Range.closedOpen(lower, upper);\n", "  }\n", "\n", "  /**\n", "   * Returns a range that contains all values strictly greater than {@code\n", "   * lower} and less than or equal to {@code upper}.\n", "   *\n", "   * @throws IllegalArgumentException if {@code lower} is greater than {@code\n", "   *     upper}\n", "   */\n", "  public static <C extends Comparable<?>> Range<C> openClosed(\n", "      C lower, C upper) {\n", "    return Range.openClosed(lower, upper);\n", "  }\n", "\n", "  /**\n", "   * Returns a range that contains any value from {@code lower} to {@code\n", "   * upper}, where each endpoint may be either inclusive (closed) or exclusive\n", "   * (open).\n", "   *\n", "   * @throws IllegalArgumentException if {@code lower} is greater than {@code\n", "   *     upper}\n", "   */\n", "  public static <C extends Comparable<?>> Range<C> range(\n", "      C lower, BoundType lowerType, C upper, BoundType upperType) {\n", "    return Range.range(lower, lowerType, upper, upperType);\n", "  }\n", "\n", "  /**\n", "   * Returns a range that contains all values strictly less than {@code\n", "   * endpoint}.\n", "   */\n", "  public static <C extends Comparable<?>> Range<C> lessThan(C endpoint) {\n", "    return Range.lessThan(endpoint);\n", "  }\n", "\n", "  /**\n", "   * Returns a range that contains all values less than or equal to\n", "   * {@code endpoint}.\n", "   */\n", "  public static <C extends Comparable<?>> Range<C> atMost(C endpoint) {\n", "    return Range.atMost(endpoint);\n", "  }\n", "\n", "  /**\n", "   * Returns a range with no lower bound up to the given endpoint, which may be\n", "   * either inclusive (closed) or exclusive (open).\n", "   */\n", "  public static <C extends Comparable<?>> Range<C> upTo(\n", "      C endpoint, BoundType boundType) {\n", "    return Range.upTo(endpoint, boundType);\n", "  }\n", "\n", "  /**\n", "   * Returns a range that contains all values strictly greater than {@code\n", "   * endpoint}.\n", "   */\n", "  public static <C extends Comparable<?>> Range<C> greaterThan(C endpoint) {\n", "    return Range.greaterThan(endpoint);\n", "  }\n", "\n", "  /**\n", "   * Returns a range that contains all values greater than or equal to\n", "   * {@code endpoint}.\n", "   */\n", "  public static <C extends Comparable<?>> Range<C> atLeast(C endpoint) {\n", "    return Range.atLeast(endpoint);\n", "  }\n", "\n", "  /**\n", "   * Returns a range from the given endpoint, which may be either inclusive\n", "   * (closed) or exclusive (open), with no upper bound.\n", "   */\n", "  public static <C extends Comparable<?>> Range<C> downTo(\n", "      C endpoint, BoundType boundType) {\n", "    return Range.downTo(endpoint, boundType);\n", "  }\n", "\n", "  /** Returns a range that contains every value of type {@code C}. */\n", "  public static <C extends Comparable<?>> Range<C> all() {\n", "    return Range.all();\n", "  }\n", "\n", "  /**\n", "   * Returns a range that {@linkplain Range#contains(Comparable) contains} only\n", "   * the given value. The returned range is {@linkplain BoundType#CLOSED closed}\n", "   * on both ends.\n", "   */\n", "  public static <C extends Comparable<?>> Range<C> singleton(C value) {\n", "    return Range.singleton(value);\n", "  }\n", "\n", "  /**\n", "   * Returns the minimal range that\n", "   * {@linkplain Range#contains(Comparable) contains} all of the given values.\n", "   * The returned range is {@linkplain BoundType#CLOSED closed} on both ends.\n", "   *\n", "   * @throws ClassCastException if the parameters are not <i>mutually\n", "   *     comparable</i>\n", "   * @throws NoSuchElementException if {@code values} is empty\n", "   * @throws NullPointerException if any of {@code values} is null\n", "   */\n", "  public static <C extends Comparable<?>> Range<C> encloseAll(\n", "      Iterable<C> values) {\n", "    return Range.encloseAll(values);\n", "  }\n", "}"]}, "added_lines": {}, "removed_lines": {"1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214]}}]}
