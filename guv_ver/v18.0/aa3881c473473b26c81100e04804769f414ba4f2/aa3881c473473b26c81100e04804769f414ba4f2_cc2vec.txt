{"id": "aa3881c473473b26c81100e04804769f414ba4f2", "code": [{"0": "guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheBuilder.java", "added": {"1": [" * entries may be counted by {@link Cache#size}, but will never be visible to read or write\n"]}, "removed": {"1": [" * entries may be counted in {@link Cache#size}, but will never be visible to read or write\n"]}, "added_lines": {"1": [113]}, "removed_lines": {"1": [113]}}, {"1": "guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedSetTest.java", "added": {"1": ["  private static <E> Iterator<E> asIterator(E... elements) {\n"]}, "removed": {"1": ["  private static final <E> Iterator<E> asIterator(E... elements) {\n"]}, "added_lines": {"1": [717]}, "removed_lines": {"1": [717]}}, {"2": "guava-tests/benchmark/com/google/common/base/StringsRepeatBenchmark.java", "added": {"1": ["  private static String mikeRepeat(String string, int count) {\n"], "2": ["  private static String oldRepeat(String string, int count) {\n"], "3": ["  private static String martinRepeat(String string, int count) {\n"]}, "removed": {"1": ["  private static final String mikeRepeat(String string, int count) {\n"], "2": ["  private static final String oldRepeat(String string, int count) {\n"], "3": ["  private static final String martinRepeat(String string, int count) {\n"]}, "added_lines": {"1": [64], "2": [87], "3": [99]}, "removed_lines": {"1": [64], "2": [87], "3": [99]}}, {"3": "guava-tests/test/com/google/common/cache/PopulatedCachesTest.java", "added": {"1": ["      ASSERT.that(entries).has().exactlyAs((Collection<Entry<Object, Object>>) expected);\n", "      ASSERT.that(entries.toArray()).has().exactlyAs((Collection<Object>) expected);\n", "      ASSERT.that(entries.toArray(new Entry[0])).has().exactlyAs((Collection<Entry>) expected);\n"]}, "removed": {"1": ["      ASSERT.that(entries).has().exactlyAs((Collection<Entry<Object, Object>>)expected);\n", "      ASSERT.that(entries.toArray()).has().exactlyAs((Collection<Object>)expected);\n", "      ASSERT.that(entries.toArray(new Entry[0])).has().exactlyAs((Collection<Entry>)expected);\n"]}, "added_lines": {"1": [250, 251, 252]}, "removed_lines": {"1": [250, 251, 252]}}, {"4": "guava-tests/test/com/google/common/collect/ImmutableListTest.java", "added": {"1": ["    static ListFrobber add(final int element) {\n"], "2": ["    static ListFrobber remove() {\n"], "3": ["    static ListFrobber nop() {\n"]}, "removed": {"1": ["    static final ListFrobber add(final int element) {\n"], "2": ["    static final ListFrobber remove() {\n"], "3": ["    static final ListFrobber nop() {\n"]}, "added_lines": {"1": [539], "2": [548], "3": [557]}, "removed_lines": {"1": [539], "2": [548], "3": [557]}}, {"5": "guava-tests/test/com/google/common/collect/ImmutableSortedSetTest.java", "added": {"1": ["  private static <E> Iterator<E> asIterator(E... elements) {\n"]}, "removed": {"1": ["  private static final <E> Iterator<E> asIterator(E... elements) {\n"]}, "added_lines": {"1": [904]}, "removed_lines": {"1": [904]}}, {"6": "guava/src/com/google/common/cache/CacheBuilder.java", "added": {"1": [" * entries may be counted by {@link Cache#size}, but will never be visible to read or write\n"]}, "removed": {"1": [" * entries may be counted in {@link Cache#size}, but will never be visible to read or write\n"]}, "added_lines": {"1": [119]}, "removed_lines": {"1": [119]}}, {"7": "guava/src/com/google/common/collect/ImmutableRangeMap.java", "added": {"1": ["  public static <K extends Comparable<?>, V> ImmutableRangeMap<K, V> of() {\n", "  public static <K extends Comparable<?>, V> ImmutableRangeMap<K, V> of(\n", "  public static <K extends Comparable<?>, V> ImmutableRangeMap<K, V> copyOf(\n"]}, "removed": {"1": ["  public static final <K extends Comparable<?>, V> ImmutableRangeMap<K, V> of() {\n", "  public static final <K extends Comparable<?>, V> ImmutableRangeMap<K, V> of(\n", "  public static final <K extends Comparable<?>, V> ImmutableRangeMap<K, V> copyOf(\n"]}, "added_lines": {"1": [52, 59, 65]}, "removed_lines": {"1": [52, 59, 65]}}, {"8": "guava/src/com/google/common/collect/ImmutableTable.java", "added": {"1": ["  public static <R, C, V> ImmutableTable<R, C, V> of() {\n", "  public static <R, C, V> ImmutableTable<R, C, V> of(R rowKey,\n"], "2": ["  public static <R, C, V> ImmutableTable<R, C, V> copyOf(\n"], "3": ["  public static <R, C, V> Builder<R, C, V> builder() {\n"]}, "removed": {"1": ["  public static final <R, C, V> ImmutableTable<R, C, V> of() {\n", "  public static final <R, C, V> ImmutableTable<R, C, V> of(R rowKey,\n"], "2": ["  public static final <R, C, V> ImmutableTable<R, C, V> copyOf(\n"], "3": ["  public static final <R, C, V> Builder<R, C, V> builder() {\n"]}, "added_lines": {"1": [56, 61], "2": [80], "3": [118]}, "removed_lines": {"1": [56, 61], "2": [80], "3": [118]}}, {"9": "guava/src/com/google/common/collect/RegularImmutableTable.java", "added": {"1": ["  static <R, C, V> RegularImmutableTable<R, C, V> forCells(\n"], "2": ["  static <R, C, V> RegularImmutableTable<R, C, V> forCells(\n"]}, "removed": {"1": ["  static final <R, C, V> RegularImmutableTable<R, C, V> forCells(\n"], "2": ["  static final <R, C, V> RegularImmutableTable<R, C, V> forCells(\n"]}, "added_lines": {"1": [110], "2": [139]}, "removed_lines": {"1": [110], "2": [139]}}, {"10": "guava/src/com/google/common/html/HtmlEscapers.java", "added": {"1": ["   * other Unicode encodings can).\n", "   *\n"]}, "removed": {"1": ["   * other Unicode encodings can). For documents encoded in ASCII for\n", "   * compatibility reasons, use {@link LegacyHtmlEscapers#asciiHtmlEscaper},\n", "   * which also escapes non-ASCII code points.\n"]}, "added_lines": {"1": [54, 55]}, "removed_lines": {"1": [54, 55, 56]}}, {"11": "guava/src/com/google/common/reflect/AbstractInvocationHandler.java", "added": {"1": [" *   protected Object handleInvocation(\n", " *       Object proxy, Method method, Object[] args) {\n"]}, "removed": {"1": [" *   @Override protected Object handleInvocation(Object proxy, Method method, Object[] args) {\n"]}, "added_lines": {"1": [31, 32]}, "removed_lines": {"1": [31]}}]}
