{
    "addition": {
        "36": "import java.util.stream.Collector;\n",
        "296": "   * Returns a {@code Collector} expecting the specified number of insertions, and yielding a {@link\n",
        "297": "   * BloomFilter} with false positive probability 3%.\n",
        "298": "   *\n",
        "299": "   * <p>Note that if the {@code Collector} receives significantly more elements than specified, the\n",
        "300": "   * resulting {@code BloomFilter} will suffer a sharp deterioration of its false positive\n",
        "301": "   * probability.\n",
        "302": "   *\n",
        "303": "   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code\n",
        "304": "   * Funnel<T>} is.\n",
        "305": "   *\n",
        "306": "   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of\n",
        "307": "   * ensuring proper serialization and deserialization, which is important since {@link #equals}\n",
        "308": "   * also relies on object identity of funnels.\n",
        "309": "   *\n",
        "310": "   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use\n",
        "311": "   * @param expectedInsertions the number of expected insertions to the constructed {@code\n",
        "312": "   *     BloomFilter}; must be positive\n",
        "313": "   * @return a {@code Collector} generating a {@code BloomFilter} of the received elements\n",
        "314": "   * @since 23.0\n",
        "315": "   */\n",
        "316": "  public static <T> Collector<T, ?, BloomFilter<T>> toBloomFilter(\n",
        "317": "      Funnel<? super T> funnel, long expectedInsertions) {\n",
        "318": "    return toBloomFilter(funnel, expectedInsertions, 0.03);\n",
        "319": "  }\n",
        "320": "\n",
        "321": "  /**\n",
        "322": "   * Returns a {@code Collector} expecting the specified number of insertions, and yielding a {@link\n",
        "323": "   * BloomFilter} with the specified expected false positive probability.\n",
        "324": "   *\n",
        "325": "   * <p>Note that if the {@code Collector} receives significantly more elements than specified, the\n",
        "326": "   * resulting {@code BloomFilter} will suffer a sharp deterioration of its false positive\n",
        "327": "   * probability.\n",
        "328": "   *\n",
        "329": "   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code\n",
        "330": "   * Funnel<T>} is.\n",
        "331": "   *\n",
        "332": "   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of\n",
        "333": "   * ensuring proper serialization and deserialization, which is important since {@link #equals}\n",
        "334": "   * also relies on object identity of funnels.\n",
        "335": "   *\n",
        "336": "   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use\n",
        "337": "   * @param expectedInsertions the number of expected insertions to the constructed {@code\n",
        "338": "   *     BloomFilter}; must be positive\n",
        "339": "   * @param fpp the desired false positive probability (must be positive and less than 1.0)\n",
        "340": "   * @return a {@code Collector} generating a {@code BloomFilter} of the received elements\n",
        "341": "   * @since 23.0\n",
        "342": "   */\n",
        "343": "  public static <T> Collector<T, ?, BloomFilter<T>> toBloomFilter(\n",
        "344": "      Funnel<? super T> funnel, long expectedInsertions, double fpp) {\n",
        "345": "    checkNotNull(funnel);\n",
        "346": "    checkArgument(\n",
        "347": "        expectedInsertions >= 0, \"Expected insertions (%s) must be >= 0\", expectedInsertions);\n",
        "348": "    checkArgument(fpp > 0.0, \"False positive probability (%s) must be > 0.0\", fpp);\n",
        "349": "    checkArgument(fpp < 1.0, \"False positive probability (%s) must be < 1.0\", fpp);\n",
        "350": "    return Collector.of(\n",
        "351": "        () -> BloomFilter.create(funnel, expectedInsertions, fpp),\n",
        "352": "        BloomFilter::put,\n",
        "353": "        (bf1, bf2) -> {\n",
        "354": "          bf1.putAll(bf2);\n",
        "355": "          return bf1;\n",
        "356": "        },\n",
        "357": "        Collector.Characteristics.UNORDERED,\n",
        "358": "        Collector.Characteristics.CONCURRENT);\n",
        "359": "  }\n",
        "360": "\n",
        "361": "  /**\n",
        "362": "   * Creates a {@link BloomFilter} with the expected number of insertions and\n",
        "368": "   * <p>The constructed {@code BloomFilter} will be serializable if the provided\n",
        "375": "   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use\n",
        "377": "   *     {@code BloomFilter}; must be positive\n",
        "387": "   * Creates a {@link BloomFilter} with the expected number of insertions and\n",
        "393": "   * <p>The constructed {@code BloomFilter} will be serializable if the provided\n",
        "400": "   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use\n",
        "402": "   *     {@code BloomFilter}; must be positive\n",
        "440": "   * Creates a {@link BloomFilter} with the expected number of insertions and a\n",
        "446": "   * <p>The constructed {@code BloomFilter} will be serializable if the provided\n",
        "453": "   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use\n",
        "455": "   *     {@code BloomFilter}; must be positive\n",
        "463": "   * Creates a {@link BloomFilter} with the expected number of insertions and a\n",
        "469": "   * <p>The constructed {@code BloomFilter} will be serializable if the provided\n",
        "476": "   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use\n",
        "478": "   *     {@code BloomFilter}; must be positive\n",
        "578": "   * {@code BloomFilter}.\n"
    },
    "removed": {
        "295": "   * Creates a {@link BloomFilter}{@code <T>} with the expected number of insertions and\n",
        "301": "   * <p>The constructed {@code BloomFilter<T>} will be serializable if the provided\n",
        "308": "   * @param funnel the funnel of T's that the constructed {@code BloomFilter<T>} will use\n",
        "310": "   *     {@code BloomFilter<T>}; must be positive\n",
        "320": "   * Creates a {@link BloomFilter}{@code <T>} with the expected number of insertions and\n",
        "326": "   * <p>The constructed {@code BloomFilter<T>} will be serializable if the provided\n",
        "333": "   * @param funnel the funnel of T's that the constructed {@code BloomFilter<T>} will use\n",
        "335": "   *     {@code BloomFilter<T>}; must be positive\n",
        "373": "   * Creates a {@link BloomFilter}{@code <T>} with the expected number of insertions and a\n",
        "379": "   * <p>The constructed {@code BloomFilter<T>} will be serializable if the provided\n",
        "386": "   * @param funnel the funnel of T's that the constructed {@code BloomFilter<T>} will use\n",
        "388": "   *     {@code BloomFilter<T>}; must be positive\n",
        "396": "   * Creates a {@link BloomFilter}{@code <T>} with the expected number of insertions and a\n",
        "402": "   * <p>The constructed {@code BloomFilter<T>} will be serializable if the provided\n",
        "409": "   * @param funnel the funnel of T's that the constructed {@code BloomFilter<T>} will use\n",
        "411": "   *     {@code BloomFilter<T>}; must be positive\n",
        "511": "   * {@code BloomFilter<T>}.\n"
    }
}