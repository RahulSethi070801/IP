{"id": "2daf6f6d1668b44d0d489b936db50ecf2b358160", "code": [{"0": "guava-tests/test/com/google/common/hash/BloomFilterTest.java", "added": {"1": ["import java.util.stream.Stream;\n"], "2": ["  public void testCollector() {\n", "    BloomFilter<String> bf1 = BloomFilter.create(Funnels.unencodedCharsFunnel(), 100);\n", "    bf1.put(\"1\");\n", "    bf1.put(\"2\");\n", "\n", "    assertEquals(\n", "        bf1,\n", "        Stream.of(\"1\", \"2\")\n", "            .collect(BloomFilter.toBloomFilter(Funnels.unencodedCharsFunnel(), 100)));\n", "    assertEquals(\n", "        bf1,\n", "        Stream.of(\"2\", \"1\")\n", "            .collect(BloomFilter.toBloomFilter(Funnels.unencodedCharsFunnel(), 100)));\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [39], "2": [369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383]}, "removed_lines": {}}, {"1": "guava/src/com/google/common/hash/BloomFilter.java", "added": {"1": ["import java.util.stream.Collector;\n"], "2": ["   * Returns a {@code Collector} expecting the specified number of insertions, and yielding a {@link\n", "   * BloomFilter} with false positive probability 3%.\n", "   *\n", "   * <p>Note that if the {@code Collector} receives significantly more elements than specified, the\n", "   * resulting {@code BloomFilter} will suffer a sharp deterioration of its false positive\n", "   * probability.\n", "   *\n", "   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code\n", "   * Funnel<T>} is.\n", "   *\n", "   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of\n", "   * ensuring proper serialization and deserialization, which is important since {@link #equals}\n", "   * also relies on object identity of funnels.\n", "   *\n", "   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use\n", "   * @param expectedInsertions the number of expected insertions to the constructed {@code\n", "   *     BloomFilter}; must be positive\n", "   * @return a {@code Collector} generating a {@code BloomFilter} of the received elements\n", "   * @since 23.0\n", "   */\n", "  public static <T> Collector<T, ?, BloomFilter<T>> toBloomFilter(\n", "      Funnel<? super T> funnel, long expectedInsertions) {\n", "    return toBloomFilter(funnel, expectedInsertions, 0.03);\n", "  }\n", "\n", "  /**\n", "   * Returns a {@code Collector} expecting the specified number of insertions, and yielding a {@link\n", "   * BloomFilter} with the specified expected false positive probability.\n", "   *\n", "   * <p>Note that if the {@code Collector} receives significantly more elements than specified, the\n", "   * resulting {@code BloomFilter} will suffer a sharp deterioration of its false positive\n", "   * probability.\n", "   *\n", "   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code\n", "   * Funnel<T>} is.\n", "   *\n", "   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of\n", "   * ensuring proper serialization and deserialization, which is important since {@link #equals}\n", "   * also relies on object identity of funnels.\n", "   *\n", "   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use\n", "   * @param expectedInsertions the number of expected insertions to the constructed {@code\n", "   *     BloomFilter}; must be positive\n", "   * @param fpp the desired false positive probability (must be positive and less than 1.0)\n", "   * @return a {@code Collector} generating a {@code BloomFilter} of the received elements\n", "   * @since 23.0\n", "   */\n", "  public static <T> Collector<T, ?, BloomFilter<T>> toBloomFilter(\n", "      Funnel<? super T> funnel, long expectedInsertions, double fpp) {\n", "    checkNotNull(funnel);\n", "    checkArgument(\n", "        expectedInsertions >= 0, \"Expected insertions (%s) must be >= 0\", expectedInsertions);\n", "    checkArgument(fpp > 0.0, \"False positive probability (%s) must be > 0.0\", fpp);\n", "    checkArgument(fpp < 1.0, \"False positive probability (%s) must be < 1.0\", fpp);\n", "    return Collector.of(\n", "        () -> BloomFilter.create(funnel, expectedInsertions, fpp),\n", "        BloomFilter::put,\n", "        (bf1, bf2) -> {\n", "          bf1.putAll(bf2);\n", "          return bf1;\n", "        },\n", "        Collector.Characteristics.UNORDERED,\n", "        Collector.Characteristics.CONCURRENT);\n", "  }\n", "\n", "  /**\n", "   * Creates a {@link BloomFilter} with the expected number of insertions and\n", "   * <p>The constructed {@code BloomFilter} will be serializable if the provided\n", "   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use\n", "   *     {@code BloomFilter}; must be positive\n"], "3": ["   * Creates a {@link BloomFilter} with the expected number of insertions and\n", "   * <p>The constructed {@code BloomFilter} will be serializable if the provided\n", "   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use\n", "   *     {@code BloomFilter}; must be positive\n"], "4": ["   * Creates a {@link BloomFilter} with the expected number of insertions and a\n", "   * <p>The constructed {@code BloomFilter} will be serializable if the provided\n", "   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use\n", "   *     {@code BloomFilter}; must be positive\n"], "5": ["   * Creates a {@link BloomFilter} with the expected number of insertions and a\n", "   * <p>The constructed {@code BloomFilter} will be serializable if the provided\n", "   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use\n", "   *     {@code BloomFilter}; must be positive\n"], "6": ["   * {@code BloomFilter}.\n"]}, "removed": {"2": ["   * Creates a {@link BloomFilter}{@code <T>} with the expected number of insertions and\n", "   * <p>The constructed {@code BloomFilter<T>} will be serializable if the provided\n", "   * @param funnel the funnel of T's that the constructed {@code BloomFilter<T>} will use\n", "   *     {@code BloomFilter<T>}; must be positive\n"], "3": ["   * Creates a {@link BloomFilter}{@code <T>} with the expected number of insertions and\n", "   * <p>The constructed {@code BloomFilter<T>} will be serializable if the provided\n", "   * @param funnel the funnel of T's that the constructed {@code BloomFilter<T>} will use\n", "   *     {@code BloomFilter<T>}; must be positive\n"], "4": ["   * Creates a {@link BloomFilter}{@code <T>} with the expected number of insertions and a\n", "   * <p>The constructed {@code BloomFilter<T>} will be serializable if the provided\n", "   * @param funnel the funnel of T's that the constructed {@code BloomFilter<T>} will use\n", "   *     {@code BloomFilter<T>}; must be positive\n"], "5": ["   * Creates a {@link BloomFilter}{@code <T>} with the expected number of insertions and a\n", "   * <p>The constructed {@code BloomFilter<T>} will be serializable if the provided\n", "   * @param funnel the funnel of T's that the constructed {@code BloomFilter<T>} will use\n", "   *     {@code BloomFilter<T>}; must be positive\n"], "6": ["   * {@code BloomFilter<T>}.\n"]}, "added_lines": {"1": [36], "2": [296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 368, 375, 377], "3": [387, 393, 400, 402], "4": [440, 446, 453, 455], "5": [463, 469, 476, 478], "6": [578]}, "removed_lines": {"2": [295, 301, 308, 310], "3": [320, 326, 333, 335], "4": [373, 379, 386, 388], "5": [396, 402, 409, 411], "6": [511]}}]}
