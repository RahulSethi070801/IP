{
    "addition": {
        "17": "package com.google.common.collect;\n",
        "60": "   * <i>should</i> hold {@code expectedSize} elements without rebuilding internal data structures.\n",
        "97": "    this(expectedSize, false);\n",
        "100": "  CompactLinkedHashMap(int expectedSize, boolean accessOrder) {\n",
        "101": "    super(expectedSize);\n",
        "106": "  void init(int expectedSize) {\n",
        "107": "    super.init(expectedSize);\n",
        "108": "    this.firstEntry = ENDPOINT;\n",
        "109": "    this.lastEntry = ENDPOINT;\n",
        "116": "    this.links = new long[expectedSize];\n",
        "175": "    super.moveLastEntry(dstIndex);\n",
        "176": "\n"
    },
    "removed": {
        "16": "package com.google.common.collect;\n",
        "18": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "28": "import java.util.function.BiConsumer;\n",
        "29": "import java.util.function.Consumer;\n",
        "63": "   * <i>should</i> hold {@code expectedSize} elements without growth.\n",
        "100": "    this(expectedSize, DEFAULT_LOAD_FACTOR, false);\n",
        "103": "  CompactLinkedHashMap(int expectedSize, float loadFactor, boolean accessOrder) {\n",
        "104": "    super(expectedSize, loadFactor);\n",
        "109": "  void init(int expectedSize, float loadFactor) {\n",
        "110": "    super.init(expectedSize, loadFactor);\n",
        "111": "    firstEntry = ENDPOINT;\n",
        "112": "    lastEntry = ENDPOINT;\n",
        "119": "    links = new long[expectedSize];\n",
        "183": "    super.moveLastEntry(dstIndex);\n",
        "206": "  @Override\n",
        "207": "  public void forEach(BiConsumer<? super K, ? super V> action) {\n",
        "208": "    checkNotNull(action);\n",
        "209": "    for (int i = firstEntry; i != ENDPOINT; i = getSuccessor(i)) {\n",
        "210": "      action.accept((K) keys[i], (V) values[i]);\n",
        "211": "    }\n",
        "212": "  }\n",
        "213": "\n",
        "244": "\n",
        "245": "      @Override\n",
        "246": "      public void forEach(Consumer<? super K> action) {\n",
        "247": "        checkNotNull(action);\n",
        "248": "        for (int i = firstEntry; i != ENDPOINT; i = getSuccessor(i)) {\n",
        "249": "          action.accept((K) keys[i]);\n",
        "250": "        }\n",
        "251": "      }\n",
        "274": "\n",
        "275": "      @Override\n",
        "276": "      public void forEach(Consumer<? super V> action) {\n",
        "277": "        checkNotNull(action);\n",
        "278": "        for (int i = firstEntry; i != ENDPOINT; i = getSuccessor(i)) {\n",
        "279": "          action.accept((V) values[i]);\n",
        "280": "        }\n",
        "281": "      }\n"
    }
}