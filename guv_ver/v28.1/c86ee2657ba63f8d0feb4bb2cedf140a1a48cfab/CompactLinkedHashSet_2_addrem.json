{
    "addition": {
        "53": "    return new CompactLinkedHashSet<>();\n",
        "92": "    return new CompactLinkedHashSet<>(expectedSize);\n",
        "113": "  /** Pointer to the first node in the linked list, or {@code ENDPOINT} if there are no entries. */\n",
        "115": "\n",
        "116": "  /** Pointer to the last node in the linked list, or {@code ENDPOINT} if there are no entries. */\n",
        "128": "  void init(int expectedSize) {\n",
        "129": "    super.init(expectedSize);\n",
        "130": "    this.firstEntry = ENDPOINT;\n",
        "131": "    this.lastEntry = ENDPOINT;\n",
        "144": "  private int getPredecessor(int entry) {\n",
        "145": "    return predecessor[entry];\n",
        "146": "  }\n",
        "147": "\n",
        "148": "  @Override\n",
        "149": "  int getSuccessor(int entry) {\n",
        "150": "    return successor[entry];\n",
        "151": "  }\n",
        "152": "\n",
        "153": "  private void setSuccessor(int entry, int succ) {\n",
        "154": "    successor[entry] = succ;\n",
        "155": "  }\n",
        "156": "\n",
        "157": "  private void setPredecessor(int entry, int pred) {\n",
        "158": "    predecessor[entry] = pred;\n",
        "159": "  }\n",
        "160": "\n",
        "161": "  private void setSucceeds(int pred, int succ) {\n",
        "165": "      setSuccessor(pred, succ);\n",
        "171": "      setPredecessor(succ, pred);\n",
        "178": "    setSucceeds(lastEntry, entryIndex);\n",
        "179": "    setSucceeds(entryIndex, ENDPOINT);\n",
        "183": "  void moveLastEntry(int dstIndex) {\n",
        "185": "    super.moveLastEntry(dstIndex);\n",
        "187": "    setSucceeds(getPredecessor(dstIndex), getSuccessor(dstIndex));\n",
        "188": "    if (dstIndex < srcIndex) {\n",
        "189": "      setSucceeds(getPredecessor(srcIndex), dstIndex);\n",
        "190": "      setSucceeds(dstIndex, getSuccessor(srcIndex));\n",
        "215": "    return (indexBeforeRemove >= size()) ? indexRemoved : indexBeforeRemove;\n",
        "219": "  public Object[] toArray() {\n",
        "220": "    return ObjectArrays.toArrayImpl(this);\n",
        "221": "  }\n",
        "222": "\n",
        "223": "  @Override\n",
        "224": "  public <T> T[] toArray(T[] a) {\n",
        "225": "    return ObjectArrays.toArrayImpl(this, a);\n",
        "234": "  public void clear() {\n",
        "235": "    if (needsAllocArrays()) {\n",
        "236": "      return;\n",
        "238": "    this.firstEntry = ENDPOINT;\n",
        "239": "    this.lastEntry = ENDPOINT;\n",
        "240": "    Arrays.fill(predecessor, 0, size(), UNSET);\n",
        "241": "    Arrays.fill(successor, 0, size(), UNSET);\n",
        "242": "    super.clear();\n"
    },
    "removed": {
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "27": "import java.util.function.Consumer;\n",
        "56": "    return new CompactLinkedHashSet<E>();\n",
        "95": "    return new CompactLinkedHashSet<E>(expectedSize);\n",
        "128": "  void init(int expectedSize, float loadFactor) {\n",
        "129": "    super.init(expectedSize, loadFactor);\n",
        "130": "    firstEntry = ENDPOINT;\n",
        "131": "    lastEntry = ENDPOINT;\n",
        "145": "  private void succeeds(int pred, int succ) {\n",
        "149": "      successor[pred] = succ;\n",
        "155": "      predecessor[succ] = pred;\n",
        "162": "    succeeds(lastEntry, entryIndex);\n",
        "163": "    succeeds(entryIndex, ENDPOINT);\n",
        "167": "  void moveEntry(int dstIndex) {\n",
        "169": "    super.moveEntry(dstIndex);\n",
        "171": "    succeeds(predecessor[dstIndex], successor[dstIndex]);\n",
        "172": "    if (srcIndex != dstIndex) {\n",
        "173": "      succeeds(predecessor[srcIndex], dstIndex);\n",
        "174": "      succeeds(dstIndex, successor[srcIndex]);\n",
        "180": "  @Override\n",
        "181": "  public void clear() {\n",
        "182": "    if (needsAllocArrays()) {\n",
        "183": "      return;\n",
        "184": "    }\n",
        "185": "    firstEntry = ENDPOINT;\n",
        "186": "    lastEntry = ENDPOINT;\n",
        "187": "    Arrays.fill(predecessor, 0, size(), UNSET);\n",
        "188": "    Arrays.fill(successor, 0, size(), UNSET);\n",
        "189": "    super.clear();\n",
        "190": "  }\n",
        "191": "\n",
        "205": "  @Override\n",
        "206": "  public Object[] toArray() {\n",
        "207": "    return ObjectArrays.toArrayImpl(this);\n",
        "208": "  }\n",
        "209": "\n",
        "210": "  @Override\n",
        "211": "  public <T> T[] toArray(T[] a) {\n",
        "212": "    return ObjectArrays.toArrayImpl(this, a);\n",
        "213": "  }\n",
        "214": "\n",
        "222": "    return (indexBeforeRemove == size()) ? indexRemoved : indexBeforeRemove;\n",
        "226": "  int getSuccessor(int entryIndex) {\n",
        "227": "    return successor[entryIndex];\n",
        "236": "  public void forEach(Consumer<? super E> action) {\n",
        "237": "    checkNotNull(action);\n",
        "238": "    for (int i = firstEntry; i != ENDPOINT; i = successor[i]) {\n",
        "239": "      action.accept((E) elements[i]);\n"
    }
}