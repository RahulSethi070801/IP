{
    "addition": {
        "51": "    return new CompactLinkedHashSet<>();\n",
        "90": "    return new CompactLinkedHashSet<>(expectedSize);\n",
        "111": "  /** Pointer to the first node in the linked list, or {@code ENDPOINT} if there are no entries. */\n",
        "113": "\n",
        "114": "  /** Pointer to the last node in the linked list, or {@code ENDPOINT} if there are no entries. */\n",
        "126": "  void init(int expectedSize) {\n",
        "127": "    super.init(expectedSize);\n",
        "128": "    this.firstEntry = ENDPOINT;\n",
        "129": "    this.lastEntry = ENDPOINT;\n",
        "142": "  private int getPredecessor(int entry) {\n",
        "143": "    return predecessor[entry];\n",
        "144": "  }\n",
        "145": "\n",
        "146": "  @Override\n",
        "147": "  int getSuccessor(int entry) {\n",
        "148": "    return successor[entry];\n",
        "149": "  }\n",
        "150": "\n",
        "151": "  private void setSuccessor(int entry, int succ) {\n",
        "152": "    successor[entry] = succ;\n",
        "153": "  }\n",
        "154": "\n",
        "155": "  private void setPredecessor(int entry, int pred) {\n",
        "156": "    predecessor[entry] = pred;\n",
        "157": "  }\n",
        "158": "\n",
        "159": "  private void setSucceeds(int pred, int succ) {\n",
        "163": "      setSuccessor(pred, succ);\n",
        "169": "      setPredecessor(succ, pred);\n",
        "176": "    setSucceeds(lastEntry, entryIndex);\n",
        "177": "    setSucceeds(entryIndex, ENDPOINT);\n",
        "181": "  void moveLastEntry(int dstIndex) {\n",
        "183": "    super.moveLastEntry(dstIndex);\n",
        "185": "    setSucceeds(getPredecessor(dstIndex), getSuccessor(dstIndex));\n",
        "186": "    if (dstIndex < srcIndex) {\n",
        "187": "      setSucceeds(getPredecessor(srcIndex), dstIndex);\n",
        "188": "      setSucceeds(dstIndex, getSuccessor(srcIndex));\n",
        "207": "  int firstEntryIndex() {\n",
        "208": "    return firstEntry;\n",
        "212": "  int adjustAfterRemove(int indexBeforeRemove, int indexRemoved) {\n",
        "213": "    return (indexBeforeRemove >= size()) ? indexRemoved : indexBeforeRemove;\n",
        "217": "  public Object[] toArray() {\n",
        "218": "    return ObjectArrays.toArrayImpl(this);\n",
        "222": "  public <T> T[] toArray(T[] a) {\n",
        "223": "    return ObjectArrays.toArrayImpl(this, a);\n",
        "227": "  public void clear() {\n",
        "228": "    if (needsAllocArrays()) {\n",
        "229": "      return;\n",
        "230": "    }\n",
        "231": "    this.firstEntry = ENDPOINT;\n",
        "232": "    this.lastEntry = ENDPOINT;\n",
        "233": "    Arrays.fill(predecessor, 0, size(), UNSET);\n",
        "234": "    Arrays.fill(successor, 0, size(), UNSET);\n",
        "235": "    super.clear();\n"
    },
    "removed": {
        "51": "    return new CompactLinkedHashSet<E>();\n",
        "90": "    return new CompactLinkedHashSet<E>(expectedSize);\n",
        "123": "  void init(int expectedSize, float loadFactor) {\n",
        "124": "    super.init(expectedSize, loadFactor);\n",
        "125": "    firstEntry = ENDPOINT;\n",
        "126": "    lastEntry = ENDPOINT;\n",
        "140": "  private void succeeds(int pred, int succ) {\n",
        "144": "      successor[pred] = succ;\n",
        "150": "      predecessor[succ] = pred;\n",
        "157": "    succeeds(lastEntry, entryIndex);\n",
        "158": "    succeeds(entryIndex, ENDPOINT);\n",
        "162": "  void moveEntry(int dstIndex) {\n",
        "164": "    super.moveEntry(dstIndex);\n",
        "166": "    succeeds(predecessor[dstIndex], successor[dstIndex]);\n",
        "167": "    if (srcIndex != dstIndex) {\n",
        "168": "      succeeds(predecessor[srcIndex], dstIndex);\n",
        "169": "      succeeds(dstIndex, successor[srcIndex]);\n",
        "175": "  @Override\n",
        "176": "  public void clear() {\n",
        "177": "    if (needsAllocArrays()) {\n",
        "178": "      return;\n",
        "179": "    }\n",
        "180": "    firstEntry = ENDPOINT;\n",
        "181": "    lastEntry = ENDPOINT;\n",
        "182": "    Arrays.fill(predecessor, 0, size(), UNSET);\n",
        "183": "    Arrays.fill(successor, 0, size(), UNSET);\n",
        "184": "    super.clear();\n",
        "185": "  }\n",
        "186": "\n",
        "201": "  public Object[] toArray() {\n",
        "202": "    return ObjectArrays.toArrayImpl(this);\n",
        "206": "  public <T> T[] toArray(T[] a) {\n",
        "207": "    return ObjectArrays.toArrayImpl(this, a);\n",
        "211": "  int firstEntryIndex() {\n",
        "212": "    return firstEntry;\n",
        "216": "  int adjustAfterRemove(int indexBeforeRemove, int indexRemoved) {\n",
        "217": "    return (indexBeforeRemove == size()) ? indexRemoved : indexBeforeRemove;\n",
        "221": "  int getSuccessor(int entryIndex) {\n",
        "222": "    return successor[entryIndex];\n"
    }
}