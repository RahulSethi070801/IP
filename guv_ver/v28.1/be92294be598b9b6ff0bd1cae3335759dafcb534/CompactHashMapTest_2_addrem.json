{
    "addition": {
        "88": "\n",
        "89": "  public void testAllocArraysDefault() {\n",
        "90": "    CompactHashMap<Integer, String> map = CompactHashMap.create();\n",
        "91": "    assertThat(map.needsAllocArrays()).isTrue();\n",
        "92": "    assertThat(map.entries).isNull();\n",
        "93": "    assertThat(map.keys).isNull();\n",
        "94": "    assertThat(map.values).isNull();\n",
        "95": "\n",
        "96": "    map.put(1, \"1\");\n",
        "97": "    assertThat(map.needsAllocArrays()).isFalse();\n",
        "98": "    assertThat(map.entries).hasLength(CompactHashMap.DEFAULT_SIZE);\n",
        "99": "    assertThat(map.keys).hasLength(CompactHashMap.DEFAULT_SIZE);\n",
        "100": "    assertThat(map.values).hasLength(CompactHashMap.DEFAULT_SIZE);\n",
        "101": "  }\n",
        "102": "\n",
        "103": "  public void testAllocArraysExpectedSize() {\n",
        "104": "    for (int i = 0; i <= CompactHashMap.DEFAULT_SIZE; i++) {\n",
        "105": "      CompactHashMap<Integer, String> map = CompactHashMap.createWithExpectedSize(i);\n",
        "106": "      assertThat(map.needsAllocArrays()).isTrue();\n",
        "107": "      assertThat(map.entries).isNull();\n",
        "108": "      assertThat(map.keys).isNull();\n",
        "109": "      assertThat(map.values).isNull();\n",
        "110": "\n",
        "111": "      map.put(1, \"1\");\n",
        "112": "      assertThat(map.needsAllocArrays()).isFalse();\n",
        "113": "      int expectedSize = Math.max(1, i);\n",
        "114": "      assertThat(map.entries).hasLength(expectedSize);\n",
        "115": "      assertThat(map.keys).hasLength(expectedSize);\n",
        "116": "      assertThat(map.values).hasLength(expectedSize);\n",
        "117": "    }\n",
        "118": "  }\n"
    },
    "removed": {}
}