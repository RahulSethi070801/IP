{"id": "be92294be598b9b6ff0bd1cae3335759dafcb534", "code": [{"0": "android/guava-tests/test/com/google/common/collect/CompactHashMapTest.java", "added": {"1": ["\n", "  public void testAllocArraysDefault() {\n", "    CompactHashMap<Integer, String> map = CompactHashMap.create();\n", "    assertThat(map.needsAllocArrays()).isTrue();\n", "    assertThat(map.entries).isNull();\n", "    assertThat(map.keys).isNull();\n", "    assertThat(map.values).isNull();\n", "\n", "    map.put(1, \"1\");\n", "    assertThat(map.needsAllocArrays()).isFalse();\n", "    assertThat(map.entries).hasLength(CompactHashMap.DEFAULT_SIZE);\n", "    assertThat(map.keys).hasLength(CompactHashMap.DEFAULT_SIZE);\n", "    assertThat(map.values).hasLength(CompactHashMap.DEFAULT_SIZE);\n", "  }\n", "\n", "  public void testAllocArraysExpectedSize() {\n", "    for (int i = 0; i <= CompactHashMap.DEFAULT_SIZE; i++) {\n", "      CompactHashMap<Integer, String> map = CompactHashMap.createWithExpectedSize(i);\n", "      assertThat(map.needsAllocArrays()).isTrue();\n", "      assertThat(map.entries).isNull();\n", "      assertThat(map.keys).isNull();\n", "      assertThat(map.values).isNull();\n", "\n", "      map.put(1, \"1\");\n", "      assertThat(map.needsAllocArrays()).isFalse();\n", "      int expectedSize = Math.max(1, i);\n", "      assertThat(map.entries).hasLength(expectedSize);\n", "      assertThat(map.keys).hasLength(expectedSize);\n", "      assertThat(map.values).hasLength(expectedSize);\n", "    }\n", "  }\n"]}, "removed": {}, "added_lines": {"1": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118]}, "removed_lines": {}}, {"1": "android/guava-tests/test/com/google/common/collect/CompactHashSetTest.java", "added": {"1": ["import static com.google.common.truth.Truth.assertThat;\n", "\n"], "2": ["  public void testAllocArraysDefault() {\n", "    CompactHashSet<Integer> set = CompactHashSet.create();\n", "    assertThat(set.needsAllocArrays()).isTrue();\n", "    assertThat(set.elements).isNull();\n", "\n", "    set.add(1);\n", "    assertThat(set.needsAllocArrays()).isFalse();\n", "    assertThat(set.elements).hasLength(CompactHashSet.DEFAULT_SIZE);\n", "  }\n", "\n", "  public void testAllocArraysExpectedSize() {\n", "    for (int i = 0; i <= CompactHashSet.DEFAULT_SIZE; i++) {\n", "      CompactHashSet<Integer> set = CompactHashSet.createWithExpectedSize(i);\n", "      assertThat(set.needsAllocArrays()).isTrue();\n", "      assertThat(set.elements).isNull();\n", "\n", "      set.add(1);\n", "      assertThat(set.needsAllocArrays()).isFalse();\n", "      int expectedSize = Math.max(1, i);\n", "      assertThat(set.elements).hasLength(expectedSize);\n", "    }\n"]}, "removed": {"2": ["  public void testDummyMethod() {\n", "    // Just make sure the test runner doesn't complain about no test methods.\n"]}, "added_lines": {"1": [19, 20], "2": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108]}, "removed_lines": {"2": [86, 87]}}, {"2": "android/guava-tests/test/com/google/common/collect/CompactLinkedHashMapTest.java", "added": {"1": ["\n", "  public void testAllocArraysDefault() {\n", "    CompactLinkedHashMap<Integer, String> map = CompactLinkedHashMap.create();\n", "    assertThat(map.needsAllocArrays()).isTrue();\n", "    assertThat(map.entries).isNull();\n", "    assertThat(map.keys).isNull();\n", "    assertThat(map.values).isNull();\n", "    assertThat(map.links).isNull();\n", "\n", "    map.put(1, Integer.toString(1));\n", "    assertThat(map.needsAllocArrays()).isFalse();\n", "    assertThat(map.entries).hasLength(CompactLinkedHashMap.DEFAULT_SIZE);\n", "    assertThat(map.keys).hasLength(CompactLinkedHashMap.DEFAULT_SIZE);\n", "    assertThat(map.values).hasLength(CompactLinkedHashMap.DEFAULT_SIZE);\n", "    assertThat(map.links).hasLength(CompactLinkedHashMap.DEFAULT_SIZE);\n", "  }\n", "\n", "  public void testAllocArraysExpectedSize() {\n", "    for (int i = 0; i <= CompactLinkedHashMap.DEFAULT_SIZE; i++) {\n", "      CompactLinkedHashMap<Integer, String> map = CompactLinkedHashMap.createWithExpectedSize(i);\n", "      assertThat(map.needsAllocArrays()).isTrue();\n", "      assertThat(map.entries).isNull();\n", "      assertThat(map.keys).isNull();\n", "      assertThat(map.values).isNull();\n", "      assertThat(map.links).isNull();\n", "\n", "      map.put(1, Integer.toString(1));\n", "      assertThat(map.needsAllocArrays()).isFalse();\n", "      int expectedSize = Math.max(1, i);\n", "      assertThat(map.entries).hasLength(expectedSize);\n", "      assertThat(map.keys).hasLength(expectedSize);\n", "      assertThat(map.values).hasLength(expectedSize);\n", "      assertThat(map.links).hasLength(expectedSize);\n", "    }\n", "  }\n"]}, "removed": {}, "added_lines": {"1": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178]}, "removed_lines": {}}, {"3": "android/guava-tests/test/com/google/common/collect/CompactLinkedHashSetTest.java", "added": {"1": ["import static com.google.common.truth.Truth.assertThat;\n", "\n"], "2": ["  public void testAllocArraysDefault() {\n", "    CompactHashSet<Integer> set = CompactHashSet.create();\n", "    assertThat(set.needsAllocArrays()).isTrue();\n", "    assertThat(set.elements).isNull();\n", "\n", "    set.add(1);\n", "    assertThat(set.needsAllocArrays()).isFalse();\n", "    assertThat(set.elements).hasLength(CompactHashSet.DEFAULT_SIZE);\n", "  }\n", "\n", "  public void testAllocArraysExpectedSize() {\n", "    for (int i = 0; i <= CompactHashSet.DEFAULT_SIZE; i++) {\n", "      CompactHashSet<Integer> set = CompactHashSet.createWithExpectedSize(i);\n", "      assertThat(set.needsAllocArrays()).isTrue();\n", "      assertThat(set.elements).isNull();\n", "\n", "      set.add(1);\n", "      assertThat(set.needsAllocArrays()).isFalse();\n", "      int expectedSize = Math.max(1, i);\n", "      assertThat(set.elements).hasLength(expectedSize);\n", "    }\n"]}, "removed": {"2": ["  public void testDummyMethod() {\n", "    // Just make sure the test runner doesn't complain about no test methods.\n"]}, "added_lines": {"1": [19, 20], "2": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]}, "removed_lines": {"2": [68, 69]}}, {"4": "android/guava/src/com/google/common/collect/CompactHashMap.java", "added": {"1": ["import java.io.InvalidObjectException;\n"], "2": ["    init(capacity, DEFAULT_LOAD_FACTOR);\n", "  /**\n", "   * Constructs a new instance of {@code CompactHashMap} with the specified capacity and load\n", "   * factor.\n", "   *\n", "   * @param capacity the initial capacity of this {@code CompactHashMap}.\n", "   * @param loadFactor the load factor of this {@code CompactHashMap}.\n", "   */\n", "  CompactHashMap(int capacity, float loadFactor) {\n", "    init(capacity, loadFactor);\n", "    this.loadFactor = loadFactor;\n", "    this.threshold = Math.max(1, expectedSize); // Save expectedSize for use in allocArrays()\n", "  }\n", "\n", "  /** Returns whether arrays need to be allocated. */\n", "  boolean needsAllocArrays() {\n", "    return table == null;\n", "  }\n", "\n", "  /** Handle lazy allocation of arrays. */\n", "  void allocArrays() {\n", "    Preconditions.checkState(needsAllocArrays(), \"Arrays already allocated\");\n", "\n", "    int expectedSize = threshold;\n"], "3": ["    if (needsAllocArrays()) {\n", "      allocArrays();\n", "    }\n"], "4": ["  /** Resizes the entries storage if necessary. */\n"], "5": ["    if (needsAllocArrays()) {\n", "      return -1;\n", "    }\n"], "6": ["    if (needsAllocArrays()) {\n", "      return null;\n", "    }\n"], "7": ["    if (needsAllocArrays()) {\n", "      return;\n", "    }\n"], "8": ["    if (needsAllocArrays()) {\n", "      return;\n", "    }\n", "    Arrays.fill(entries, 0, size, UNSET);\n"], "9": ["    for (int i = firstEntryIndex(); i >= 0; i = getSuccessor(i)) {\n"], "10": ["    if (elementCount < 0) {\n", "      throw new InvalidObjectException(\"Invalid size: \" + elementCount);\n", "    }\n", "    init(elementCount, DEFAULT_LOAD_FACTOR);\n", "    for (int i = 0; i < elementCount; i++) {\n"]}, "removed": {"2": ["    this(capacity, DEFAULT_LOAD_FACTOR);\n", "  CompactHashMap(int expectedSize, float loadFactor) {\n", "    init(expectedSize, loadFactor);\n", "    this.loadFactor = loadFactor;\n"], "4": ["  /** Returns currentSize + 1, after resizing the entries storage if necessary. */\n"], "8": ["    Arrays.fill(entries, UNSET);\n"], "9": ["    for (int i = 0; i < size; i++) {\n"], "10": ["    init(DEFAULT_SIZE, DEFAULT_LOAD_FACTOR);\n", "    for (int i = elementCount; --i >= 0; ) {\n"]}, "added_lines": {"1": [29], "2": [173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204], "3": [257, 258, 259], "4": [312], "5": [368, 369, 370], "6": [400, 401, 402], "7": [773, 774, 775], "8": [799, 800, 801, 806], "9": [817], "10": [827, 828, 829, 830, 831]}, "removed_lines": {"2": [172, 175, 176, 185], "4": [288], "8": [770], "9": [781], "10": [790, 792]}}, {"5": "android/guava/src/com/google/common/collect/CompactHashSet.java", "added": {"1": ["import com.google.common.annotations.VisibleForTesting;\n", "import java.io.InvalidObjectException;\n"], "2": ["  @VisibleForTesting static final int DEFAULT_SIZE = 3;\n"], "3": ["    this.loadFactor = loadFactor;\n", "    this.threshold = Math.max(1, expectedSize); // Save expectedSize for use in allocArrays()\n", "  }\n", "\n", "  /** Returns whether arrays need to be allocated. */\n", "  boolean needsAllocArrays() {\n", "    return table == null;\n", "  }\n", "\n", "  /** Handle lazy allocation of arrays. */\n", "  void allocArrays() {\n", "    Preconditions.checkState(needsAllocArrays(), \"Arrays already allocated\");\n", "\n", "    int expectedSize = threshold;\n", "\n", "\n"], "4": ["    if (needsAllocArrays()) {\n", "      allocArrays();\n", "    }\n"], "5": ["  /** Resizes the entries storage if necessary. */\n"], "6": ["    if (needsAllocArrays()) {\n", "      return false;\n", "    }\n"], "7": ["    if (needsAllocArrays()) {\n", "      return false;\n", "    }\n"], "8": ["    if (needsAllocArrays()) {\n", "      return new Object[0];\n", "    }\n", "    if (needsAllocArrays()) {\n", "      if (a.length > 0) {\n", "        a[0] = null;\n", "      }\n", "      return a;\n", "    }\n"], "9": ["    if (needsAllocArrays()) {\n", "      return;\n", "    }\n"], "10": ["    if (needsAllocArrays()) {\n", "      return;\n", "    }\n", "    Arrays.fill(entries, 0, size, UNSET);\n"], "11": ["    for (int i = firstEntryIndex(); i >= 0; i = getSuccessor(i)) {\n", "      stream.writeObject(elements[i]);\n", "    if (elementCount < 0) {\n", "      throw new InvalidObjectException(\"Invalid size: \" + elementCount);\n", "    }\n", "    init(elementCount, DEFAULT_LOAD_FACTOR);\n", "    for (int i = 0; i < elementCount; i++) {\n"]}, "removed": {"2": ["  private static final int DEFAULT_SIZE = 3;\n"], "3": ["    this.loadFactor = loadFactor;\n"], "5": ["  /** Returns currentSize + 1, after resizing the entries storage if necessary. */\n"], "10": ["    Arrays.fill(entries, UNSET);\n"], "11": ["    for (E e : this) {\n", "      stream.writeObject(e);\n", "    init(DEFAULT_SIZE, DEFAULT_LOAD_FACTOR);\n", "    for (int i = elementCount; --i >= 0; ) {\n"]}, "added_lines": {"1": [23, 28], "2": [128], "3": [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 205], "4": [243, 244, 245], "5": [289], "6": [345, 346, 347], "7": [363, 364, 365], "8": [509, 510, 511, 518, 519, 520, 521, 522, 523], "9": [532, 533, 534], "10": [558, 559, 560, 564], "11": [575, 576, 584, 585, 586, 587, 588]}, "removed_lines": {"2": [126], "3": [187], "5": [269], "10": [523], "11": [534, 535, 542, 544]}}, {"6": "android/guava/src/com/google/common/collect/CompactLinkedHashMap.java", "added": {"1": ["  }\n", "\n", "  @Override\n", "  void allocArrays() {\n", "    super.allocArrays();\n", "    int expectedSize = keys.length; // allocated size may be different than initial capacity\n"], "2": ["    links[srcIndex] = UNSET;\n", "    int oldCapacity = links.length;\n", "    if (oldCapacity < newCapacity) {\n", "      Arrays.fill(links, oldCapacity, newCapacity, UNSET);\n", "    }\n"], "3": ["    if (needsAllocArrays()) {\n", "      return;\n", "    }\n", "    Arrays.fill(links, 0, size(), UNSET);\n", "    super.clear();\n"]}, "removed": {"3": ["    super.clear();\n"]}, "added_lines": {"1": [104, 105, 106, 107, 108, 109], "2": [173, 180, 182, 183, 184], "3": [199, 200, 201, 204, 205]}, "removed_lines": {"3": [188]}}, {"7": "android/guava/src/com/google/common/collect/CompactLinkedHashSet.java", "added": {"1": ["    firstEntry = ENDPOINT;\n", "    lastEntry = ENDPOINT;\n", "  }\n", "\n", "  @Override\n", "  void allocArrays() {\n", "    super.allocArrays();\n", "    int expectedSize = elements.length; // allocated size may be different than initial capacity\n"], "2": ["    if (needsAllocArrays()) {\n", "      return;\n", "    }\n", "    Arrays.fill(predecessor, 0, size(), UNSET);\n", "    Arrays.fill(successor, 0, size(), UNSET);\n", "    super.clear();\n"]}, "removed": {"1": ["    firstEntry = ENDPOINT;\n", "    lastEntry = ENDPOINT;\n"], "2": ["    super.clear();\n", "    Arrays.fill(predecessor, UNSET);\n", "    Arrays.fill(successor, UNSET);\n"]}, "added_lines": {"1": [125, 126, 127, 128, 129, 130, 131, 132], "2": [177, 178, 179, 182, 183, 184]}, "removed_lines": {"1": [130, 131], "2": [171, 174, 175]}}, {"8": "guava-tests/test/com/google/common/collect/CompactHashMapTest.java", "added": {"1": ["\n", "  public void testAllocArraysDefault() {\n", "    CompactHashMap<Integer, String> map = CompactHashMap.create();\n", "    assertThat(map.needsAllocArrays()).isTrue();\n", "    assertThat(map.entries).isNull();\n", "    assertThat(map.keys).isNull();\n", "    assertThat(map.values).isNull();\n", "\n", "    map.put(1, \"1\");\n", "    assertThat(map.needsAllocArrays()).isFalse();\n", "    assertThat(map.entries).hasLength(CompactHashMap.DEFAULT_SIZE);\n", "    assertThat(map.keys).hasLength(CompactHashMap.DEFAULT_SIZE);\n", "    assertThat(map.values).hasLength(CompactHashMap.DEFAULT_SIZE);\n", "  }\n", "\n", "  public void testAllocArraysExpectedSize() {\n", "    for (int i = 0; i <= CompactHashMap.DEFAULT_SIZE; i++) {\n", "      CompactHashMap<Integer, String> map = CompactHashMap.createWithExpectedSize(i);\n", "      assertThat(map.needsAllocArrays()).isTrue();\n", "      assertThat(map.entries).isNull();\n", "      assertThat(map.keys).isNull();\n", "      assertThat(map.values).isNull();\n", "\n", "      map.put(1, \"1\");\n", "      assertThat(map.needsAllocArrays()).isFalse();\n", "      int expectedSize = Math.max(1, i);\n", "      assertThat(map.entries).hasLength(expectedSize);\n", "      assertThat(map.keys).hasLength(expectedSize);\n", "      assertThat(map.values).hasLength(expectedSize);\n", "    }\n", "  }\n"]}, "removed": {}, "added_lines": {"1": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118]}, "removed_lines": {}}, {"9": "guava-tests/test/com/google/common/collect/CompactHashSetTest.java", "added": {"1": ["import static com.google.common.truth.Truth.assertThat;\n", "\n"], "2": ["  public void testAllocArraysDefault() {\n", "    CompactHashSet<Integer> set = CompactHashSet.create();\n", "    assertThat(set.needsAllocArrays()).isTrue();\n", "    assertThat(set.elements).isNull();\n", "\n", "    set.add(1);\n", "    assertThat(set.needsAllocArrays()).isFalse();\n", "    assertThat(set.elements).hasLength(CompactHashSet.DEFAULT_SIZE);\n", "  }\n", "\n", "  public void testAllocArraysExpectedSize() {\n", "    for (int i = 0; i <= CompactHashSet.DEFAULT_SIZE; i++) {\n", "      CompactHashSet<Integer> set = CompactHashSet.createWithExpectedSize(i);\n", "      assertThat(set.needsAllocArrays()).isTrue();\n", "      assertThat(set.elements).isNull();\n", "\n", "      set.add(1);\n", "      assertThat(set.needsAllocArrays()).isFalse();\n", "      int expectedSize = Math.max(1, i);\n", "      assertThat(set.elements).hasLength(expectedSize);\n", "    }\n"]}, "removed": {"2": ["  public void testDummyMethod() {\n", "    // Just make sure the test runner doesn't complain about no test methods.\n"]}, "added_lines": {"1": [19, 20], "2": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108]}, "removed_lines": {"2": [86, 87]}}, {"10": "guava-tests/test/com/google/common/collect/CompactLinkedHashMapTest.java", "added": {"1": ["\n", "  public void testAllocArraysDefault() {\n", "    CompactLinkedHashMap<Integer, String> map = CompactLinkedHashMap.create();\n", "    assertThat(map.needsAllocArrays()).isTrue();\n", "    assertThat(map.entries).isNull();\n", "    assertThat(map.keys).isNull();\n", "    assertThat(map.values).isNull();\n", "    assertThat(map.links).isNull();\n", "\n", "    map.put(1, Integer.toString(1));\n", "    assertThat(map.needsAllocArrays()).isFalse();\n", "    assertThat(map.entries).hasLength(CompactLinkedHashMap.DEFAULT_SIZE);\n", "    assertThat(map.keys).hasLength(CompactLinkedHashMap.DEFAULT_SIZE);\n", "    assertThat(map.values).hasLength(CompactLinkedHashMap.DEFAULT_SIZE);\n", "    assertThat(map.links).hasLength(CompactLinkedHashMap.DEFAULT_SIZE);\n", "  }\n", "\n", "  public void testAllocArraysExpectedSize() {\n", "    for (int i = 0; i <= CompactLinkedHashMap.DEFAULT_SIZE; i++) {\n", "      CompactLinkedHashMap<Integer, String> map = CompactLinkedHashMap.createWithExpectedSize(i);\n", "      assertThat(map.needsAllocArrays()).isTrue();\n", "      assertThat(map.entries).isNull();\n", "      assertThat(map.keys).isNull();\n", "      assertThat(map.values).isNull();\n", "      assertThat(map.links).isNull();\n", "\n", "      map.put(1, Integer.toString(1));\n", "      assertThat(map.needsAllocArrays()).isFalse();\n", "      int expectedSize = Math.max(1, i);\n", "      assertThat(map.entries).hasLength(expectedSize);\n", "      assertThat(map.keys).hasLength(expectedSize);\n", "      assertThat(map.values).hasLength(expectedSize);\n", "      assertThat(map.links).hasLength(expectedSize);\n", "    }\n", "  }\n"]}, "removed": {}, "added_lines": {"1": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178]}, "removed_lines": {}}, {"11": "guava-tests/test/com/google/common/collect/CompactLinkedHashSetTest.java", "added": {"1": ["import static com.google.common.truth.Truth.assertThat;\n", "\n"], "2": ["  public void testAllocArraysDefault() {\n", "    CompactHashSet<Integer> set = CompactHashSet.create();\n", "    assertThat(set.needsAllocArrays()).isTrue();\n", "    assertThat(set.elements).isNull();\n", "\n", "    set.add(1);\n", "    assertThat(set.needsAllocArrays()).isFalse();\n", "    assertThat(set.elements).hasLength(CompactHashSet.DEFAULT_SIZE);\n", "  }\n", "\n", "  public void testAllocArraysExpectedSize() {\n", "    for (int i = 0; i <= CompactHashSet.DEFAULT_SIZE; i++) {\n", "      CompactHashSet<Integer> set = CompactHashSet.createWithExpectedSize(i);\n", "      assertThat(set.needsAllocArrays()).isTrue();\n", "      assertThat(set.elements).isNull();\n", "\n", "      set.add(1);\n", "      assertThat(set.needsAllocArrays()).isFalse();\n", "      int expectedSize = Math.max(1, i);\n", "      assertThat(set.elements).hasLength(expectedSize);\n", "    }\n"]}, "removed": {"2": ["  public void testDummyMethod() {\n", "    // Just make sure the test runner doesn't complain about no test methods.\n"]}, "added_lines": {"1": [19, 20], "2": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]}, "removed_lines": {"2": [68, 69]}}, {"12": "guava/src/com/google/common/collect/CompactHashMap.java", "added": {"1": ["import java.io.InvalidObjectException;\n"], "2": ["    init(capacity, DEFAULT_LOAD_FACTOR);\n", "  /**\n", "   * Constructs a new instance of {@code CompactHashMap} with the specified capacity and load\n", "   * factor.\n", "   *\n", "   * @param capacity the initial capacity of this {@code CompactHashMap}.\n", "   * @param loadFactor the load factor of this {@code CompactHashMap}.\n", "   */\n", "  CompactHashMap(int capacity, float loadFactor) {\n", "    init(capacity, loadFactor);\n", "    this.loadFactor = loadFactor;\n", "    this.threshold = Math.max(1, expectedSize); // Save expectedSize for use in allocArrays()\n", "  }\n", "\n", "  /** Returns whether arrays need to be allocated. */\n", "  boolean needsAllocArrays() {\n", "    return table == null;\n", "  }\n", "\n", "  /** Handle lazy allocation of arrays. */\n", "  void allocArrays() {\n", "    Preconditions.checkState(needsAllocArrays(), \"Arrays already allocated\");\n", "\n", "    int expectedSize = threshold;\n"], "3": ["    if (needsAllocArrays()) {\n", "      allocArrays();\n", "    }\n"], "4": ["  /** Resizes the entries storage if necessary. */\n"], "5": ["    if (needsAllocArrays()) {\n", "      return -1;\n", "    }\n"], "6": ["    if (needsAllocArrays()) {\n", "      return null;\n", "    }\n"], "7": ["      if (needsAllocArrays()) {\n", "        return new Object[0];\n", "      }\n", "      if (needsAllocArrays()) {\n", "        if (a.length > 0) {\n", "          a[0] = null;\n", "        }\n", "        return a;\n", "      }\n"], "8": ["      if (needsAllocArrays()) {\n", "        return Spliterators.spliterator(new Object[0], Spliterator.DISTINCT | Spliterator.ORDERED);\n", "      }\n"], "9": ["      if (needsAllocArrays()) {\n", "        return Spliterators.spliterator(new Object[0], Spliterator.ORDERED);\n", "      }\n", "      if (needsAllocArrays()) {\n", "        return new Object[0];\n", "      }\n", "      if (needsAllocArrays()) {\n", "        if (a.length > 0) {\n", "          a[0] = null;\n", "        }\n", "        return a;\n", "      }\n"], "10": ["    if (needsAllocArrays()) {\n", "      return;\n", "    }\n"], "11": ["    if (needsAllocArrays()) {\n", "      return;\n", "    }\n", "    Arrays.fill(entries, 0, size, UNSET);\n"], "12": ["    for (int i = firstEntryIndex(); i >= 0; i = getSuccessor(i)) {\n"], "13": ["    if (elementCount < 0) {\n", "      throw new InvalidObjectException(\"Invalid size: \" + elementCount);\n", "    }\n", "    init(elementCount, DEFAULT_LOAD_FACTOR);\n", "    for (int i = 0; i < elementCount; i++) {\n"]}, "removed": {"2": ["    this(capacity, DEFAULT_LOAD_FACTOR);\n", "  CompactHashMap(int expectedSize, float loadFactor) {\n", "    init(expectedSize, loadFactor);\n", "    this.loadFactor = loadFactor;\n"], "4": ["  /** Returns currentSize + 1, after resizing the entries storage if necessary. */\n"], "11": ["    Arrays.fill(entries, UNSET);\n"], "12": ["    for (int i = 0; i < size; i++) {\n"], "13": ["    init(DEFAULT_SIZE, DEFAULT_LOAD_FACTOR);\n", "    for (int i = elementCount; --i >= 0; ) {\n"]}, "added_lines": {"1": [30], "2": [178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "3": [261, 262, 263], "4": [316], "5": [372, 373, 374], "6": [403, 404, 405], "7": [575, 576, 577, 583, 584, 585, 586, 587, 588], "8": [610, 611, 612], "9": [803, 804, 805, 811, 812, 813, 819, 820, 821, 822, 823, 824], "10": [844, 845, 846], "11": [870, 871, 872, 877], "12": [888], "13": [898, 899, 900, 901, 902]}, "removed_lines": {"2": [177, 180, 181, 190], "4": [292], "11": [817], "12": [828], "13": [837, 839]}}, {"13": "guava/src/com/google/common/collect/CompactHashSet.java", "added": {"1": ["import com.google.common.annotations.VisibleForTesting;\n", "import java.io.InvalidObjectException;\n"], "2": ["  @VisibleForTesting static final int DEFAULT_SIZE = 3;\n"], "3": ["    this.loadFactor = loadFactor;\n", "    this.threshold = Math.max(1, expectedSize); // Save expectedSize for use in allocArrays()\n", "  }\n", "\n", "  /** Returns whether arrays need to be allocated. */\n", "  boolean needsAllocArrays() {\n", "    return table == null;\n", "  }\n", "\n", "  /** Handle lazy allocation of arrays. */\n", "  void allocArrays() {\n", "    Preconditions.checkState(needsAllocArrays(), \"Arrays already allocated\");\n", "\n", "    int expectedSize = threshold;\n", "\n", "\n"], "4": ["    if (needsAllocArrays()) {\n", "      allocArrays();\n", "    }\n"], "5": ["  /** Resizes the entries storage if necessary. */\n"], "6": ["    if (needsAllocArrays()) {\n", "      return false;\n", "    }\n"], "7": ["    if (needsAllocArrays()) {\n", "      return false;\n", "    }\n"], "8": ["    if (needsAllocArrays()) {\n", "      return Spliterators.spliterator(new Object[0], Spliterator.DISTINCT | Spliterator.ORDERED);\n", "    }\n"], "9": ["    if (needsAllocArrays()) {\n", "      return new Object[0];\n", "    }\n", "    if (needsAllocArrays()) {\n", "      if (a.length > 0) {\n", "        a[0] = null;\n", "      }\n", "      return a;\n", "    }\n"], "10": ["    if (needsAllocArrays()) {\n", "      return;\n", "    }\n"], "11": ["    if (needsAllocArrays()) {\n", "      return;\n", "    }\n", "    Arrays.fill(entries, 0, size, UNSET);\n"], "12": ["    for (int i = firstEntryIndex(); i >= 0; i = getSuccessor(i)) {\n", "      stream.writeObject(elements[i]);\n", "    if (elementCount < 0) {\n", "      throw new InvalidObjectException(\"Invalid size: \" + elementCount);\n", "    }\n", "    init(elementCount, DEFAULT_LOAD_FACTOR);\n", "    for (int i = 0; i < elementCount; i++) {\n"]}, "removed": {"2": ["  private static final int DEFAULT_SIZE = 3;\n"], "3": ["    this.loadFactor = loadFactor;\n"], "5": ["  /** Returns currentSize + 1, after resizing the entries storage if necessary. */\n"], "11": ["    Arrays.fill(entries, UNSET);\n"], "12": ["    for (E e : this) {\n", "      stream.writeObject(e);\n", "    init(DEFAULT_SIZE, DEFAULT_LOAD_FACTOR);\n", "    for (int i = elementCount; --i >= 0; ) {\n"]}, "added_lines": {"1": [24, 29], "2": [132], "3": [191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 209], "4": [247, 248, 249], "5": [293], "6": [349, 350, 351], "7": [367, 368, 369], "8": [503, 504, 505], "9": [529, 530, 531, 538, 539, 540, 541, 542, 543], "10": [552, 553, 554], "11": [578, 579, 580, 584], "12": [595, 596, 604, 605, 606, 607, 608]}, "removed_lines": {"2": [130], "3": [191], "5": [273], "11": [540], "12": [551, 552, 559, 561]}}, {"14": "guava/src/com/google/common/collect/CompactLinkedHashMap.java", "added": {"1": ["  }\n", "\n", "  @Override\n", "  void allocArrays() {\n", "    super.allocArrays();\n", "    int expectedSize = keys.length; // allocated size may be different than initial capacity\n"], "2": ["    links[srcIndex] = UNSET;\n", "    int oldCapacity = links.length;\n", "    if (oldCapacity < newCapacity) {\n", "      Arrays.fill(links, oldCapacity, newCapacity, UNSET);\n", "    }\n"], "3": ["    if (needsAllocArrays()) {\n", "      return;\n", "    }\n", "    Arrays.fill(links, 0, size(), UNSET);\n", "    super.clear();\n"]}, "removed": {"3": ["    super.clear();\n"]}, "added_lines": {"1": [113, 114, 115, 116, 117, 118], "2": [182, 189, 191, 192, 193], "3": [288, 289, 290, 293, 294]}, "removed_lines": {"3": [277]}}, {"15": "guava/src/com/google/common/collect/CompactLinkedHashSet.java", "added": {"1": ["    firstEntry = ENDPOINT;\n", "    lastEntry = ENDPOINT;\n", "  }\n", "\n", "  @Override\n", "  void allocArrays() {\n", "    super.allocArrays();\n", "    int expectedSize = elements.length; // allocated size may be different than initial capacity\n"], "2": ["    if (needsAllocArrays()) {\n", "      return;\n", "    }\n", "    Arrays.fill(predecessor, 0, size(), UNSET);\n", "    Arrays.fill(successor, 0, size(), UNSET);\n", "    super.clear();\n"]}, "removed": {"1": ["    firstEntry = ENDPOINT;\n", "    lastEntry = ENDPOINT;\n"], "2": ["    super.clear();\n", "    Arrays.fill(predecessor, UNSET);\n", "    Arrays.fill(successor, UNSET);\n"]}, "added_lines": {"1": [130, 131, 132, 133, 134, 135, 136, 137], "2": [182, 183, 184, 187, 188, 189]}, "removed_lines": {"1": [135, 136], "2": [176, 179, 180]}}]}
