{
    "addition": {
        "23": "import com.google.common.annotations.VisibleForTesting;\n",
        "28": "import java.io.InvalidObjectException;\n",
        "128": "  @VisibleForTesting static final int DEFAULT_SIZE = 3;\n",
        "187": "    this.loadFactor = loadFactor;\n",
        "188": "    this.threshold = Math.max(1, expectedSize); // Save expectedSize for use in allocArrays()\n",
        "189": "  }\n",
        "190": "\n",
        "191": "  /** Returns whether arrays need to be allocated. */\n",
        "192": "  boolean needsAllocArrays() {\n",
        "193": "    return table == null;\n",
        "194": "  }\n",
        "195": "\n",
        "196": "  /** Handle lazy allocation of arrays. */\n",
        "197": "  void allocArrays() {\n",
        "198": "    Preconditions.checkState(needsAllocArrays(), \"Arrays already allocated\");\n",
        "199": "\n",
        "200": "    int expectedSize = threshold;\n",
        "203": "\n",
        "205": "\n",
        "243": "    if (needsAllocArrays()) {\n",
        "244": "      allocArrays();\n",
        "245": "    }\n",
        "289": "  /** Resizes the entries storage if necessary. */\n",
        "345": "    if (needsAllocArrays()) {\n",
        "346": "      return false;\n",
        "347": "    }\n",
        "363": "    if (needsAllocArrays()) {\n",
        "364": "      return false;\n",
        "365": "    }\n",
        "509": "    if (needsAllocArrays()) {\n",
        "510": "      return new Object[0];\n",
        "511": "    }\n",
        "518": "    if (needsAllocArrays()) {\n",
        "519": "      if (a.length > 0) {\n",
        "520": "        a[0] = null;\n",
        "521": "      }\n",
        "522": "      return a;\n",
        "523": "    }\n",
        "532": "    if (needsAllocArrays()) {\n",
        "533": "      return;\n",
        "534": "    }\n",
        "558": "    if (needsAllocArrays()) {\n",
        "559": "      return;\n",
        "560": "    }\n",
        "564": "    Arrays.fill(entries, 0, size, UNSET);\n",
        "575": "    for (int i = firstEntryIndex(); i >= 0; i = getSuccessor(i)) {\n",
        "576": "      stream.writeObject(elements[i]);\n",
        "584": "    if (elementCount < 0) {\n",
        "585": "      throw new InvalidObjectException(\"Invalid size: \" + elementCount);\n",
        "586": "    }\n",
        "587": "    init(elementCount, DEFAULT_LOAD_FACTOR);\n",
        "588": "    for (int i = 0; i < elementCount; i++) {\n"
    },
    "removed": {
        "126": "  private static final int DEFAULT_SIZE = 3;\n",
        "187": "    this.loadFactor = loadFactor;\n",
        "269": "  /** Returns currentSize + 1, after resizing the entries storage if necessary. */\n",
        "523": "    Arrays.fill(entries, UNSET);\n",
        "534": "    for (E e : this) {\n",
        "535": "      stream.writeObject(e);\n",
        "542": "    init(DEFAULT_SIZE, DEFAULT_LOAD_FACTOR);\n",
        "544": "    for (int i = elementCount; --i >= 0; ) {\n"
    }
}