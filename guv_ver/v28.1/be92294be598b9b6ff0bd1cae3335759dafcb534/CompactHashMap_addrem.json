{
    "addition": {
        "29": "import java.io.InvalidObjectException;\n",
        "173": "    init(capacity, DEFAULT_LOAD_FACTOR);\n",
        "176": "  /**\n",
        "177": "   * Constructs a new instance of {@code CompactHashMap} with the specified capacity and load\n",
        "178": "   * factor.\n",
        "179": "   *\n",
        "180": "   * @param capacity the initial capacity of this {@code CompactHashMap}.\n",
        "181": "   * @param loadFactor the load factor of this {@code CompactHashMap}.\n",
        "182": "   */\n",
        "183": "  CompactHashMap(int capacity, float loadFactor) {\n",
        "184": "    init(capacity, loadFactor);\n",
        "191": "    this.loadFactor = loadFactor;\n",
        "192": "    this.threshold = Math.max(1, expectedSize); // Save expectedSize for use in allocArrays()\n",
        "193": "  }\n",
        "194": "\n",
        "195": "  /** Returns whether arrays need to be allocated. */\n",
        "196": "  boolean needsAllocArrays() {\n",
        "197": "    return table == null;\n",
        "198": "  }\n",
        "199": "\n",
        "200": "  /** Handle lazy allocation of arrays. */\n",
        "201": "  void allocArrays() {\n",
        "202": "    Preconditions.checkState(needsAllocArrays(), \"Arrays already allocated\");\n",
        "203": "\n",
        "204": "    int expectedSize = threshold;\n",
        "257": "    if (needsAllocArrays()) {\n",
        "258": "      allocArrays();\n",
        "259": "    }\n",
        "312": "  /** Resizes the entries storage if necessary. */\n",
        "368": "    if (needsAllocArrays()) {\n",
        "369": "      return -1;\n",
        "370": "    }\n",
        "400": "    if (needsAllocArrays()) {\n",
        "401": "      return null;\n",
        "402": "    }\n",
        "773": "    if (needsAllocArrays()) {\n",
        "774": "      return;\n",
        "775": "    }\n",
        "799": "    if (needsAllocArrays()) {\n",
        "800": "      return;\n",
        "801": "    }\n",
        "806": "    Arrays.fill(entries, 0, size, UNSET);\n",
        "817": "    for (int i = firstEntryIndex(); i >= 0; i = getSuccessor(i)) {\n",
        "827": "    if (elementCount < 0) {\n",
        "828": "      throw new InvalidObjectException(\"Invalid size: \" + elementCount);\n",
        "829": "    }\n",
        "830": "    init(elementCount, DEFAULT_LOAD_FACTOR);\n",
        "831": "    for (int i = 0; i < elementCount; i++) {\n"
    },
    "removed": {
        "172": "    this(capacity, DEFAULT_LOAD_FACTOR);\n",
        "175": "  CompactHashMap(int expectedSize, float loadFactor) {\n",
        "176": "    init(expectedSize, loadFactor);\n",
        "185": "    this.loadFactor = loadFactor;\n",
        "288": "  /** Returns currentSize + 1, after resizing the entries storage if necessary. */\n",
        "770": "    Arrays.fill(entries, UNSET);\n",
        "781": "    for (int i = 0; i < size; i++) {\n",
        "790": "    init(DEFAULT_SIZE, DEFAULT_LOAD_FACTOR);\n",
        "792": "    for (int i = elementCount; --i >= 0; ) {\n"
    }
}