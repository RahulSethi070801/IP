{
    "addition": {
        "30": "import java.io.InvalidObjectException;\n",
        "178": "    init(capacity, DEFAULT_LOAD_FACTOR);\n",
        "181": "  /**\n",
        "182": "   * Constructs a new instance of {@code CompactHashMap} with the specified capacity and load\n",
        "183": "   * factor.\n",
        "184": "   *\n",
        "185": "   * @param capacity the initial capacity of this {@code CompactHashMap}.\n",
        "186": "   * @param loadFactor the load factor of this {@code CompactHashMap}.\n",
        "187": "   */\n",
        "188": "  CompactHashMap(int capacity, float loadFactor) {\n",
        "189": "    init(capacity, loadFactor);\n",
        "196": "    this.loadFactor = loadFactor;\n",
        "197": "    this.threshold = Math.max(1, expectedSize); // Save expectedSize for use in allocArrays()\n",
        "198": "  }\n",
        "199": "\n",
        "200": "  /** Returns whether arrays need to be allocated. */\n",
        "201": "  boolean needsAllocArrays() {\n",
        "202": "    return table == null;\n",
        "203": "  }\n",
        "204": "\n",
        "205": "  /** Handle lazy allocation of arrays. */\n",
        "206": "  void allocArrays() {\n",
        "207": "    Preconditions.checkState(needsAllocArrays(), \"Arrays already allocated\");\n",
        "208": "\n",
        "209": "    int expectedSize = threshold;\n",
        "261": "    if (needsAllocArrays()) {\n",
        "262": "      allocArrays();\n",
        "263": "    }\n",
        "316": "  /** Resizes the entries storage if necessary. */\n",
        "372": "    if (needsAllocArrays()) {\n",
        "373": "      return -1;\n",
        "374": "    }\n",
        "403": "    if (needsAllocArrays()) {\n",
        "404": "      return null;\n",
        "405": "    }\n",
        "575": "      if (needsAllocArrays()) {\n",
        "576": "        return new Object[0];\n",
        "577": "      }\n",
        "583": "      if (needsAllocArrays()) {\n",
        "584": "        if (a.length > 0) {\n",
        "585": "          a[0] = null;\n",
        "586": "        }\n",
        "587": "        return a;\n",
        "588": "      }\n",
        "610": "      if (needsAllocArrays()) {\n",
        "611": "        return Spliterators.spliterator(new Object[0], Spliterator.DISTINCT | Spliterator.ORDERED);\n",
        "612": "      }\n",
        "803": "      if (needsAllocArrays()) {\n",
        "804": "        return Spliterators.spliterator(new Object[0], Spliterator.ORDERED);\n",
        "805": "      }\n",
        "811": "      if (needsAllocArrays()) {\n",
        "812": "        return new Object[0];\n",
        "813": "      }\n",
        "819": "      if (needsAllocArrays()) {\n",
        "820": "        if (a.length > 0) {\n",
        "821": "          a[0] = null;\n",
        "822": "        }\n",
        "823": "        return a;\n",
        "824": "      }\n",
        "844": "    if (needsAllocArrays()) {\n",
        "845": "      return;\n",
        "846": "    }\n",
        "870": "    if (needsAllocArrays()) {\n",
        "871": "      return;\n",
        "872": "    }\n",
        "877": "    Arrays.fill(entries, 0, size, UNSET);\n",
        "888": "    for (int i = firstEntryIndex(); i >= 0; i = getSuccessor(i)) {\n",
        "898": "    if (elementCount < 0) {\n",
        "899": "      throw new InvalidObjectException(\"Invalid size: \" + elementCount);\n",
        "900": "    }\n",
        "901": "    init(elementCount, DEFAULT_LOAD_FACTOR);\n",
        "902": "    for (int i = 0; i < elementCount; i++) {\n"
    },
    "removed": {
        "177": "    this(capacity, DEFAULT_LOAD_FACTOR);\n",
        "180": "  CompactHashMap(int expectedSize, float loadFactor) {\n",
        "181": "    init(expectedSize, loadFactor);\n",
        "190": "    this.loadFactor = loadFactor;\n",
        "292": "  /** Returns currentSize + 1, after resizing the entries storage if necessary. */\n",
        "817": "    Arrays.fill(entries, UNSET);\n",
        "828": "    for (int i = 0; i < size; i++) {\n",
        "837": "    init(DEFAULT_SIZE, DEFAULT_LOAD_FACTOR);\n",
        "839": "    for (int i = elementCount; --i >= 0; ) {\n"
    }
}