{
    "addition": {
        "46": " *   <li>Test cases related to whether the graph is directed, undirected, mutable, or immutable.\n",
        "47": " *   <li>Test cases related to the specific implementation of the {@link Network} interface.\n",
        "219": "          case 0:\n",
        "220": "            assertThat(network.edgeConnectingOrNull(node, otherNode)).isNull();\n",
        "221": "            assertThat(network.edgeConnecting(node, otherNode).isPresent()).isFalse();\n",
        "222": "            assertThat(network.hasEdgeConnecting(node, otherNode)).isFalse();\n",
        "223": "            break;\n",
        "224": "          case 1:\n",
        "225": "            E edge = edgesConnecting.iterator().next();\n",
        "226": "            assertThat(network.edgeConnectingOrNull(node, otherNode)).isEqualTo(edge);\n",
        "227": "            assertThat(network.edgeConnecting(node, otherNode).get()).isEqualTo(edge);\n",
        "228": "            assertThat(network.hasEdgeConnecting(node, otherNode)).isTrue();\n",
        "229": "            break;\n",
        "230": "          default:\n",
        "231": "            assertThat(network.hasEdgeConnecting(node, otherNode)).isTrue();\n",
        "232": "            try {\n",
        "233": "              network.edgeConnectingOrNull(node, otherNode);\n",
        "234": "              fail();\n",
        "235": "            } catch (IllegalArgumentException expected) {\n",
        "236": "            }\n",
        "237": "            try {\n",
        "238": "              network.edgeConnecting(node, otherNode);\n",
        "239": "              fail();\n",
        "240": "            } catch (IllegalArgumentException expected) {\n",
        "241": "            }\n"
    },
    "removed": {
        "46": " * <li>Test cases related to whether the graph is directed, undirected, mutable, or immutable.\n",
        "47": " * <li>Test cases related to the specific implementation of the {@link Network} interface.\n",
        "219": "            case 0:\n",
        "220": "              assertThat(network.edgeConnectingOrNull(node, otherNode)).isNull();\n",
        "221": "              assertThat(network.edgeConnecting(node, otherNode).isPresent()).isFalse();\n",
        "222": "              assertThat(network.hasEdgeConnecting(node, otherNode)).isFalse();\n",
        "223": "              break;\n",
        "224": "            case 1:\n",
        "225": "              E edge = edgesConnecting.iterator().next();\n",
        "226": "              assertThat(network.edgeConnectingOrNull(node, otherNode)).isEqualTo(edge);\n",
        "227": "              assertThat(network.edgeConnecting(node, otherNode).get()).isEqualTo(edge);\n",
        "228": "              assertThat(network.hasEdgeConnecting(node, otherNode)).isTrue();\n",
        "229": "              break;\n",
        "230": "            default:\n",
        "231": "              assertThat(network.hasEdgeConnecting(node, otherNode)).isTrue();\n",
        "232": "              try {\n",
        "233": "                network.edgeConnectingOrNull(node, otherNode);\n",
        "234": "                fail();\n",
        "235": "              } catch (IllegalArgumentException expected) {}\n",
        "236": "              try {\n",
        "237": "                network.edgeConnecting(node, otherNode);\n",
        "238": "                fail();\n",
        "239": "              } catch (IllegalArgumentException expected) {}\n"
    }
}