{
    "addition": {
        "35": "  private static final String ALPHA = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n",
        "36": "  private static final String NONALPHA = \"0123456789`~-_=+[]{}|;:',.<>/?!@#$%^&*()\\\"\\\\\";\n",
        "37": "\n",
        "38": "  @Param({\"20\", \"2000\"})\n",
        "39": "  int size;\n",
        "40": "\n",
        "41": "  @Param({\"2\", \"20\"})\n",
        "42": "  int nonAlphaRatio; // one non-alpha char per this many chars\n",
        "49": "  @BeforeExperiment\n",
        "50": "  void setUp() {\n",
        "51": "    random = new Random(0xdeadbeef); // fix the seed so results are comparable across runs\n",
        "76": "  @Benchmark\n",
        "77": "  int asciiStringToUpperCase(int reps) {\n",
        "78": "    String string = noWorkToDo ? Ascii.toUpperCase(testString) : testString;\n",
        "87": "  @Benchmark\n",
        "88": "  int asciiCharSequenceToUpperCase(int reps) {\n",
        "89": "    String string = noWorkToDo ? charSequenceToUpperCase(testString) : testString;\n",
        "98": "  @Benchmark\n",
        "99": "  int stringToUpperCase(int reps) {\n",
        "100": "    String string = noWorkToDo ? testString.toUpperCase(Locale.US) : testString;\n",
        "109": "  @Benchmark\n",
        "110": "  boolean equalsIgnoreCaseCharSequence(int reps) {\n",
        "115": "    CharSequence[] lhs = new CharSequence[] {testString, testSeq, testString, testSeq};\n",
        "116": "    CharSequence[] rhs = new CharSequence[] {upperString, upperString, upperSeq, upperSeq};\n",
        "125": "  @Benchmark\n",
        "126": "  boolean equalsIgnoreCaseStringOnly(int reps) {\n",
        "138": "  @Benchmark\n",
        "139": "  boolean equalsIgnoreCaseJDK(int reps) {\n",
        "146": "      dummy ^= lhs.equalsIgnoreCase(rhs);\n",
        "151": "  @Benchmark\n",
        "152": "  boolean isUpperCase(int reps) {\n"
    },
    "removed": {
        "35": "  private static final String ALPHA =\n",
        "36": "      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n",
        "37": "  private static final String NONALPHA =\n",
        "38": "      \"0123456789`~-_=+[]{}|;:',.<>/?!@#$%^&*()\\\"\\\\\";\n",
        "40": "  @Param({\"20\", \"2000\"}) int size;\n",
        "41": "  @Param({\"2\", \"20\"}) int nonAlphaRatio; // one non-alpha char per this many chars\n",
        "47": "  @BeforeExperiment void setUp() {\n",
        "48": "    random = new Random(0xdeadbeef);  // fix the seed so results are comparable across runs\n",
        "73": "  @Benchmark int asciiStringToUpperCase(int reps) {\n",
        "74": "    String string = noWorkToDo\n",
        "75": "        ? Ascii.toUpperCase(testString)\n",
        "76": "        : testString;\n",
        "85": "  @Benchmark int asciiCharSequenceToUpperCase(int reps) {\n",
        "86": "    String string = noWorkToDo\n",
        "87": "        ? charSequenceToUpperCase(testString)\n",
        "88": "        : testString;\n",
        "97": "  @Benchmark int stringToUpperCase(int reps) {\n",
        "98": "    String string = noWorkToDo\n",
        "99": "        ? testString.toUpperCase(Locale.US)\n",
        "100": "        : testString;\n",
        "109": "  @Benchmark boolean equalsIgnoreCaseCharSequence(int reps) {\n",
        "114": "    CharSequence[] lhs = new CharSequence[] { testString, testSeq, testString, testSeq };\n",
        "115": "    CharSequence[] rhs = new CharSequence[] { upperString, upperString, upperSeq, upperSeq };\n",
        "124": "  @Benchmark boolean equalsIgnoreCaseStringOnly(int reps) {\n",
        "136": "  @Benchmark boolean equalsIgnoreCaseJDK(int reps) {\n",
        "143": "        dummy ^= lhs.equalsIgnoreCase(rhs);\n",
        "148": "  @Benchmark boolean isUpperCase(int reps) {\n"
    }
}