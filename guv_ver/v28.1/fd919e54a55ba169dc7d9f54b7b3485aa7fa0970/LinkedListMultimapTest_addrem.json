{
    "addition": {
        "62": "    suite.addTest(\n",
        "63": "        ListMultimapTestSuiteBuilder.using(\n",
        "64": "                new TestStringListMultimapGenerator() {\n",
        "65": "                  @Override\n",
        "66": "                  protected ListMultimap<String, String> create(Entry<String, String>[] entries) {\n",
        "67": "                    ListMultimap<String, String> multimap = LinkedListMultimap.create();\n",
        "68": "                    for (Entry<String, String> entry : entries) {\n",
        "69": "                      multimap.put(entry.getKey(), entry.getValue());\n",
        "70": "                    }\n",
        "71": "                    return multimap;\n",
        "72": "                  }\n",
        "73": "                })\n",
        "74": "            .named(\"LinkedListMultimap\")\n",
        "75": "            .withFeatures(\n",
        "76": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "77": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "78": "                MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "79": "                MapFeature.GENERAL_PURPOSE,\n",
        "80": "                CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "81": "                CollectionFeature.SERIALIZABLE,\n",
        "82": "                CollectionFeature.KNOWN_ORDER,\n",
        "83": "                CollectionSize.ANY)\n",
        "84": "            .createTestSuite());\n",
        "93": "  /** Confirm that get() returns a List that doesn't implement RandomAccess. */\n",
        "103": "   * Confirm that removeAll() returns a List that implements RandomAccess, even though get()\n",
        "104": "   * doesn't.\n",
        "115": "   * Confirm that replaceValues() returns a List that implements RandomAccess, even though get()\n",
        "116": "   * doesn't.\n",
        "122": "    assertTrue(multimap.replaceValues(\"foo\", Arrays.asList(2, 4)) instanceof RandomAccess);\n",
        "123": "    assertTrue(multimap.replaceValues(\"bar\", Arrays.asList(2, 4)) instanceof RandomAccess);\n",
        "131": "    LinkedListMultimap<String, Integer> copy = LinkedListMultimap.create(multimap);\n",
        "137": "    LinkedListMultimap<String, Integer> multimap = LinkedListMultimap.create(20);\n",
        "148": "    } catch (IllegalArgumentException expected) {\n",
        "149": "    }\n",
        "161": "    assertEquals(\"[bar=1, foo=2, foo=3, bar=4, foo=5]\", map.entries().toString());\n",
        "173": "    assertEquals(\"[bar=1, foo=3, foo=2, bar=4, foo=5]\", map.entries().toString());\n",
        "250": "    assertEquals(\"[bar=1, foo=2, bar=3, bar=4]\", map.entries().toString());\n",
        "293": "    Iterator<Entry<String, Collection<Integer>>> entries = map.asMap().entrySet().iterator();\n",
        "300": "    } catch (UnsupportedOperationException expected) {\n",
        "301": "    }\n",
        "337": "    List<Entry<String, Integer>> addItems =\n",
        "338": "        ImmutableList.of(\n",
        "339": "            Maps.immutableEntry(\"foo\", 99),\n",
        "340": "            Maps.immutableEntry(\"foo\", 88),\n",
        "341": "            Maps.immutableEntry(\"bar\", 77));\n",
        "344": "      List<Entry<String, Integer>> list =\n",
        "345": "          Lists.newArrayList(\n",
        "346": "              Maps.immutableEntry(\"foo\", 2),\n",
        "347": "              Maps.immutableEntry(\"foo\", 3),\n",
        "348": "              Maps.immutableEntry(\"bar\", 4),\n",
        "349": "              Maps.immutableEntry(\"bar\", 5),\n",
        "350": "              Maps.immutableEntry(\"foo\", 6));\n",
        "351": "      new ListIteratorTester<Entry<String, Integer>>(\n",
        "352": "          3, addItems, ImmutableList.of(SUPPORTS_REMOVE), list, startIndex) {\n",
        "355": "        @Override\n",
        "356": "        protected ListIterator<Entry<String, Integer>> newTargetIterator() {\n",
        "364": "        @Override\n",
        "365": "        protected void verify(List<Entry<String, Integer>> elements) {\n",
        "374": "    new IteratorTester<String>(\n",
        "375": "        6,\n",
        "376": "        MODIFIABLE,\n",
        "377": "        newArrayList(\"foo\", \"foo\", \"bar\", \"bar\", \"foo\"),\n",
        "378": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "381": "      @Override\n",
        "382": "      protected Iterator<String> newTargetIterator() {\n",
        "390": "      @Override\n",
        "391": "      protected void verify(List<String> elements) {\n",
        "402": "      new ListIteratorTester<Integer>(\n",
        "403": "          3,\n",
        "404": "          addItems,\n",
        "406": "          Lists.newArrayList(2, 3, 4, 5, 6),\n",
        "407": "          startIndex) {\n",
        "410": "        @Override\n",
        "411": "        protected ListIterator<Integer> newTargetIterator() {\n",
        "420": "        @Override\n",
        "421": "        protected void verify(List<Integer> elements) {\n",
        "430": "    new IteratorTester<String>(\n",
        "431": "        6,\n",
        "432": "        MODIFIABLE,\n",
        "433": "        newLinkedHashSet(asList(\"foo\", \"bar\", \"baz\", \"dog\", \"cat\")),\n",
        "437": "      @Override\n",
        "438": "      protected Iterator<String> newTargetIterator() {\n",
        "450": "      @Override\n",
        "451": "      protected void verify(List<String> elements) {\n",
        "460": "    Set<Entry<String, Collection<Integer>>> set =\n",
        "461": "        Sets.newLinkedHashSet(\n",
        "462": "            asList(\n",
        "463": "                Maps.immutableEntry(\"foo\", (Collection<Integer>) asList(2, 3, 6)),\n",
        "464": "                Maps.immutableEntry(\"bar\", (Collection<Integer>) asList(4, 5, 10, 11)),\n",
        "465": "                Maps.immutableEntry(\"baz\", (Collection<Integer>) asList(7, 8)),\n",
        "466": "                Maps.immutableEntry(\"dog\", (Collection<Integer>) asList(9)),\n",
        "467": "                Maps.immutableEntry(\"cat\", (Collection<Integer>) asList(12, 13, 14))));\n",
        "468": "\n",
        "469": "    new IteratorTester<Entry<String, Collection<Integer>>>(\n",
        "470": "        6, MODIFIABLE, set, IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "473": "      @Override\n",
        "474": "      protected Iterator<Entry<String, Collection<Integer>>> newTargetIterator() {\n",
        "486": "      @Override\n",
        "487": "      protected void verify(List<Entry<String, Collection<Integer>>> elements) {\n",
        "496": "            LinkedListMultimap.create(), LinkedListMultimap.create(), LinkedListMultimap.create(1))\n"
    },
    "removed": {
        "62": "    suite.addTest(ListMultimapTestSuiteBuilder.using(new TestStringListMultimapGenerator() {\n",
        "63": "        @Override\n",
        "64": "        protected ListMultimap<String, String> create(Entry<String, String>[] entries) {\n",
        "65": "          ListMultimap<String, String> multimap = LinkedListMultimap.create();\n",
        "66": "          for (Entry<String, String> entry : entries) {\n",
        "67": "            multimap.put(entry.getKey(), entry.getValue());\n",
        "68": "          }\n",
        "69": "          return multimap;\n",
        "70": "        }\n",
        "71": "      })\n",
        "72": "      .named(\"LinkedListMultimap\")\n",
        "73": "      .withFeatures(\n",
        "74": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "75": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "76": "          MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "77": "          MapFeature.GENERAL_PURPOSE,\n",
        "78": "          CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "79": "          CollectionFeature.SERIALIZABLE,\n",
        "80": "          CollectionFeature.KNOWN_ORDER,\n",
        "81": "          CollectionSize.ANY)\n",
        "82": "      .createTestSuite());\n",
        "91": "  /**\n",
        "92": "   * Confirm that get() returns a List that doesn't implement RandomAccess.\n",
        "93": "   */\n",
        "103": "   * Confirm that removeAll() returns a List that implements RandomAccess, even\n",
        "104": "   * though get() doesn't.\n",
        "115": "   * Confirm that replaceValues() returns a List that implements RandomAccess,\n",
        "116": "   * even though get() doesn't.\n",
        "122": "    assertTrue(multimap.replaceValues(\"foo\", Arrays.asList(2, 4))\n",
        "123": "        instanceof RandomAccess);\n",
        "124": "    assertTrue(multimap.replaceValues(\"bar\", Arrays.asList(2, 4))\n",
        "125": "        instanceof RandomAccess);\n",
        "133": "    LinkedListMultimap<String, Integer> copy =\n",
        "134": "        LinkedListMultimap.create(multimap);\n",
        "140": "    LinkedListMultimap<String, Integer> multimap\n",
        "141": "        = LinkedListMultimap.create(20);\n",
        "152": "    } catch (IllegalArgumentException expected) {}\n",
        "164": "    assertEquals(\"[bar=1, foo=2, foo=3, bar=4, foo=5]\",\n",
        "165": "        map.entries().toString());\n",
        "177": "    assertEquals(\"[bar=1, foo=3, foo=2, bar=4, foo=5]\",\n",
        "178": "        map.entries().toString());\n",
        "255": "    assertEquals(\"[bar=1, foo=2, bar=3, bar=4]\",\n",
        "256": "        map.entries().toString());\n",
        "299": "    Iterator<Entry<String, Collection<Integer>>> entries\n",
        "300": "        = map.asMap().entrySet().iterator();\n",
        "307": "    } catch (UnsupportedOperationException expected) {}\n",
        "343": "    List<Entry<String, Integer>> addItems = ImmutableList.of(\n",
        "344": "        Maps.immutableEntry(\"foo\", 99),\n",
        "345": "        Maps.immutableEntry(\"foo\", 88),\n",
        "346": "        Maps.immutableEntry(\"bar\", 77));\n",
        "349": "      List<Entry<String, Integer>> list = Lists.newArrayList(\n",
        "350": "          Maps.immutableEntry(\"foo\", 2),\n",
        "351": "          Maps.immutableEntry(\"foo\", 3),\n",
        "352": "          Maps.immutableEntry(\"bar\", 4),\n",
        "353": "          Maps.immutableEntry(\"bar\", 5),\n",
        "354": "          Maps.immutableEntry(\"foo\", 6));\n",
        "355": "      new ListIteratorTester<Entry<String, Integer>>(3, addItems,\n",
        "356": "          ImmutableList.of(SUPPORTS_REMOVE), list, startIndex) {\n",
        "359": "        @Override protected ListIterator<Entry<String, Integer>> newTargetIterator() {\n",
        "367": "        @Override protected void verify(List<Entry<String, Integer>> elements) {\n",
        "376": "    new IteratorTester<String>(6, MODIFIABLE, newArrayList(\"foo\", \"foo\", \"bar\",\n",
        "377": "        \"bar\", \"foo\"), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "380": "      @Override protected Iterator<String> newTargetIterator() {\n",
        "388": "      @Override protected void verify(List<String> elements) {\n",
        "399": "      new ListIteratorTester<Integer>(3, addItems,\n",
        "401": "          Lists.newArrayList(2, 3, 4, 5, 6), startIndex) {\n",
        "404": "        @Override protected ListIterator<Integer> newTargetIterator() {\n",
        "413": "        @Override protected void verify(List<Integer> elements) {\n",
        "422": "    new IteratorTester<String>(6, MODIFIABLE, newLinkedHashSet(asList(\n",
        "423": "        \"foo\", \"bar\", \"baz\", \"dog\", \"cat\")),\n",
        "427": "      @Override protected Iterator<String> newTargetIterator() {\n",
        "439": "      @Override protected void verify(List<String> elements) {\n",
        "448": "    Set<Entry<String, Collection<Integer>>> set = Sets.newLinkedHashSet(asList(\n",
        "449": "        Maps.immutableEntry(\"foo\",\n",
        "450": "            (Collection<Integer>) asList(2, 3, 6)),\n",
        "451": "        Maps.immutableEntry(\"bar\",\n",
        "452": "            (Collection<Integer>) asList(4, 5, 10, 11)),\n",
        "453": "        Maps.immutableEntry(\"baz\",\n",
        "454": "            (Collection<Integer>) asList(7, 8)),\n",
        "455": "        Maps.immutableEntry(\"dog\",\n",
        "456": "            (Collection<Integer>) asList(9)),\n",
        "457": "        Maps.immutableEntry(\"cat\",\n",
        "458": "            (Collection<Integer>) asList(12, 13, 14))\n",
        "459": "    ));\n",
        "460": "\n",
        "461": "    new IteratorTester<Entry<String, Collection<Integer>>>(6, MODIFIABLE, set,\n",
        "462": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "465": "      @Override protected Iterator<Entry<String, Collection<Integer>>>\n",
        "466": "          newTargetIterator() {\n",
        "478": "      @Override protected void verify(\n",
        "479": "          List<Entry<String, Collection<Integer>>> elements) {\n",
        "488": "            LinkedListMultimap.create(),\n",
        "489": "            LinkedListMultimap.create(),\n",
        "490": "            LinkedListMultimap.create(1))\n"
    }
}