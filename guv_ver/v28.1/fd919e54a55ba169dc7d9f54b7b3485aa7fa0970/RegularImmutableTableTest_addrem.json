{
    "addition": {
        "24": "/** @author Gregory Kick */\n",
        "28": "      ImmutableSet.of(\n",
        "29": "          Tables.immutableCell('a', 1, \"foo\"),\n",
        "30": "          Tables.immutableCell('b', 1, \"bar\"),\n",
        "31": "          Tables.immutableCell('a', 2, \"baz\"));\n",
        "33": "  private static final ImmutableSet<Character> ROW_SPACE = ImmutableSet.of('a', 'b');\n",
        "35": "  private static final ImmutableSet<Integer> COLUMN_SPACE = ImmutableSet.of(1, 2);\n",
        "43": "  @Override\n",
        "44": "  Iterable<ImmutableTable<Character, Integer, String>> getTestInstances() {\n",
        "45": "    return ImmutableList.<ImmutableTable<Character, Integer, String>>of(SPARSE, DENSE);\n",
        "49": "    for (ImmutableTable<Character, Integer, String> testInstance : getTestInstances()) {\n",
        "55": "    for (ImmutableTable<Character, Integer, String> testInstance : getTestInstances()) {\n",
        "56": "      assertThat(testInstance.values()).containsExactly(\"foo\", \"bar\", \"baz\").inOrder();\n",
        "61": "    for (ImmutableTable<Character, Integer, String> testInstance : getTestInstances()) {\n",
        "67": "    for (ImmutableTable<Character, Integer, String> testInstance : getTestInstances()) {\n",
        "76": "    for (ImmutableTable<Character, Integer, String> testInstance : getTestInstances()) {\n",
        "82": "    assertTrue(RegularImmutableTable.forCells(CELLS) instanceof DenseImmutableTable<?, ?, ?>);\n",
        "83": "    assertTrue(\n",
        "84": "        RegularImmutableTable.forCells(\n",
        "85": "                ImmutableSet.of(\n",
        "86": "                    Tables.immutableCell('a', 1, \"blah\"),\n",
        "87": "                    Tables.immutableCell('b', 2, \"blah\"),\n",
        "88": "                    Tables.immutableCell('c', 3, \"blah\")))\n",
        "89": "            instanceof SparseImmutableTable<?, ?, ?>);\n",
        "93": "    for (ImmutableTable<Character, Integer, String> testInstance : getTestInstances()) {\n",
        "103": "    for (ImmutableTable<Character, Integer, String> testInstance : getTestInstances()) {\n",
        "104": "      assertEquals(ImmutableMap.of('a', \"foo\", 'b', \"bar\"), testInstance.column(1));\n",
        "111": "    for (ImmutableTable<Character, Integer, String> testInstance : getTestInstances()) {\n",
        "117": "    for (ImmutableTable<Character, Integer, String> testInstance : getTestInstances()) {\n",
        "118": "      assertEquals(\n",
        "119": "          ImmutableMap.of(\n",
        "120": "              1, ImmutableMap.of('a', \"foo\", 'b', \"bar\"), 2, ImmutableMap.of('a', \"baz\")),\n",
        "121": "          testInstance.columnMap());\n",
        "126": "    for (ImmutableTable<Character, Integer, String> testInstance : getTestInstances()) {\n",
        "136": "    for (ImmutableTable<Character, Integer, String> testInstance : getTestInstances()) {\n",
        "144": "    for (ImmutableTable<Character, Integer, String> testInstance : getTestInstances()) {\n",
        "152": "    for (ImmutableTable<Character, Integer, String> testInstance : getTestInstances()) {\n",
        "153": "      assertEquals(ImmutableMap.of(1, \"foo\", 2, \"baz\"), testInstance.row('a'));\n",
        "160": "    for (ImmutableTable<Character, Integer, String> testInstance : getTestInstances()) {\n",
        "166": "    for (ImmutableTable<Character, Integer, String> testInstance : getTestInstances()) {\n",
        "167": "      assertEquals(\n",
        "168": "          ImmutableMap.of('a', ImmutableMap.of(1, \"foo\", 2, \"baz\"), 'b', ImmutableMap.of(1, \"bar\")),\n",
        "169": "          testInstance.rowMap());\n"
    },
    "removed": {
        "24": "/**\n",
        "25": " * @author Gregory Kick\n",
        "26": " */\n",
        "30": "    ImmutableSet.of(\n",
        "31": "        Tables.immutableCell('a', 1, \"foo\"),\n",
        "32": "        Tables.immutableCell('b', 1, \"bar\"),\n",
        "33": "        Tables.immutableCell('a', 2, \"baz\"));\n",
        "35": "  private static final ImmutableSet<Character> ROW_SPACE =\n",
        "36": "      ImmutableSet.of('a', 'b');\n",
        "38": "  private static final ImmutableSet<Integer> COLUMN_SPACE =\n",
        "39": "      ImmutableSet.of(1, 2);\n",
        "47": "  @Override Iterable<ImmutableTable<Character, Integer, String>>\n",
        "48": "      getTestInstances() {\n",
        "49": "    return ImmutableList.<ImmutableTable<Character, Integer, String>>of(SPARSE,\n",
        "50": "        DENSE);\n",
        "54": "    for (ImmutableTable<Character, Integer, String> testInstance :\n",
        "55": "        getTestInstances()) {\n",
        "61": "    for (ImmutableTable<Character, Integer, String> testInstance :\n",
        "62": "        getTestInstances()) {\n",
        "63": "      assertThat(testInstance.values())\n",
        "64": "          .containsExactly(\"foo\", \"bar\", \"baz\")\n",
        "65": "          .inOrder();\n",
        "70": "    for (ImmutableTable<Character, Integer, String> testInstance :\n",
        "71": "        getTestInstances()) {\n",
        "77": "    for (ImmutableTable<Character, Integer, String> testInstance :\n",
        "78": "        getTestInstances()) {\n",
        "87": "    for (ImmutableTable<Character, Integer, String> testInstance :\n",
        "88": "        getTestInstances()) {\n",
        "94": "    assertTrue(RegularImmutableTable.forCells(CELLS) instanceof\n",
        "95": "        DenseImmutableTable<?, ?, ?>);\n",
        "96": "    assertTrue(RegularImmutableTable.forCells(ImmutableSet.of(\n",
        "97": "        Tables.immutableCell('a', 1, \"blah\"),\n",
        "98": "        Tables.immutableCell('b', 2, \"blah\"),\n",
        "99": "        Tables.immutableCell('c', 3, \"blah\"))) instanceof\n",
        "100": "        SparseImmutableTable<?, ?, ?>);\n",
        "104": "    for (ImmutableTable<Character, Integer, String> testInstance :\n",
        "105": "        getTestInstances()) {\n",
        "115": "    for (ImmutableTable<Character, Integer, String> testInstance :\n",
        "116": "        getTestInstances()) {\n",
        "117": "      assertEquals(ImmutableMap.of('a', \"foo\", 'b', \"bar\"),\n",
        "118": "          testInstance.column(1));\n",
        "125": "    for (ImmutableTable<Character, Integer, String> testInstance :\n",
        "126": "        getTestInstances()) {\n",
        "132": "    for (ImmutableTable<Character, Integer, String> testInstance :\n",
        "133": "        getTestInstances()) {\n",
        "134": "      assertEquals(ImmutableMap.of(1, ImmutableMap.of('a', \"foo\", 'b', \"bar\"),\n",
        "135": "          2, ImmutableMap.of('a', \"baz\")), testInstance.columnMap());\n",
        "140": "    for (ImmutableTable<Character, Integer, String> testInstance :\n",
        "141": "        getTestInstances()) {\n",
        "151": "    for (ImmutableTable<Character, Integer, String> testInstance :\n",
        "152": "        getTestInstances()) {\n",
        "160": "    for (ImmutableTable<Character, Integer, String> testInstance :\n",
        "161": "        getTestInstances()) {\n",
        "169": "    for (ImmutableTable<Character, Integer, String> testInstance :\n",
        "170": "        getTestInstances()) {\n",
        "171": "      assertEquals(ImmutableMap.of(1, \"foo\", 2, \"baz\"),\n",
        "172": "          testInstance.row('a'));\n",
        "179": "    for (ImmutableTable<Character, Integer, String> testInstance :\n",
        "180": "        getTestInstances()) {\n",
        "186": "    for (ImmutableTable<Character, Integer, String> testInstance :\n",
        "187": "        getTestInstances()) {\n",
        "188": "      assertEquals(ImmutableMap.of('a', ImmutableMap.of(1, \"foo\", 2, \"baz\"),\n",
        "189": "          'b', ImmutableMap.of(1, \"bar\")), testInstance.rowMap());\n"
    }
}