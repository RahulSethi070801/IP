{
    "addition": {
        "26": " * Contains dummy collection implementations to convince GWT that part of serializing a collection\n",
        "27": " * is serializing its elements.\n",
        "29": " * <p>Because of our use of final fields in our collections, GWT's normal heuristic for determining\n",
        "30": " * which classes might be serialized fails. That heuristic is, roughly speaking, to look at each\n",
        "31": " * parameter and return type of each RPC interface and to assume that implementations of those types\n",
        "32": " * might be serialized. Those types have their own dependencies -- their fields -- which are\n",
        "33": " * analyzed recursively and analogously.\n",
        "35": " * <p>For classes with final fields, GWT assumes that the class itself might be serialized but\n",
        "36": " * doesn't assume the same about its final fields. To work around this, we provide dummy\n",
        "37": " * implementations of our collections with their dependencies as non-final fields. Even though these\n",
        "38": " * implementations are never instantiated, they are visible to GWT when it performs its\n",
        "39": " * serialization analysis, and it assumes that their fields may be serialized.\n",
        "41": " * <p>Currently we provide dummy implementations of all the immutable collection classes necessary\n",
        "42": " * to support declarations like {@code ImmutableMultiset<String>} in RPC interfaces. Support for\n",
        "43": " * {@code ImmutableMultiset} in the interface is support for {@code Multiset}, so there is nothing\n",
        "44": " * further to be done to support the new collection interfaces. It is not support, however, for an\n",
        "45": " * RPC interface in terms of {@code HashMultiset}. It is still possible to send a {@code\n",
        "46": " * HashMultiset} over GWT RPC; it is only the declaration of an interface in terms of {@code\n",
        "47": " * HashMultiset} that we haven't tried to support. (We may wish to revisit this decision in the\n",
        "48": " * future.)\n"
    },
    "removed": {
        "26": " * Contains dummy collection implementations to convince GWT that part of\n",
        "27": " * serializing a collection is serializing its elements.\n",
        "29": " * <p>Because of our use of final fields in our collections, GWT's normal\n",
        "30": " * heuristic for determining which classes might be serialized fails. That\n",
        "31": " * heuristic is, roughly speaking, to look at each parameter and return type of\n",
        "32": " * each RPC interface and to assume that implementations of those types might be\n",
        "33": " * serialized. Those types have their own dependencies -- their fields -- which\n",
        "34": " * are analyzed recursively and analogously.\n",
        "36": " * <p>For classes with final fields, GWT assumes that the class itself might be\n",
        "37": " * serialized but doesn't assume the same about its final fields. To work around\n",
        "38": " * this, we provide dummy implementations of our collections with their\n",
        "39": " * dependencies as non-final fields. Even though these implementations are never\n",
        "40": " * instantiated, they are visible to GWT when it performs its serialization\n",
        "41": " * analysis, and it assumes that their fields may be serialized.\n",
        "43": " * <p>Currently we provide dummy implementations of all the immutable\n",
        "44": " * collection classes necessary to support declarations like\n",
        "45": " * {@code ImmutableMultiset<String>} in RPC interfaces. Support for\n",
        "46": " * {@code ImmutableMultiset} in the interface is support for {@code Multiset},\n",
        "47": " * so there is nothing further to be done to support the new collection\n",
        "48": " * interfaces. It is not support, however, for an RPC interface in terms of\n",
        "49": " * {@code HashMultiset}. It is still possible to send a {@code HashMultiset}\n",
        "50": " * over GWT RPC; it is only the declaration of an interface in terms of\n",
        "51": " * {@code HashMultiset} that we haven't tried to support. (We may wish to\n",
        "52": " * revisit this decision in the future.)\n"
    }
}