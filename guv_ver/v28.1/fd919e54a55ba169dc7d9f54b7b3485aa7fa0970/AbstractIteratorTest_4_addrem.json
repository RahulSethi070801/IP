{
    "addition": {
        "41": "    Iterator<Integer> iter =\n",
        "42": "        new AbstractIterator<Integer>() {\n",
        "43": "          private int rep;\n",
        "44": "\n",
        "45": "          @Override\n",
        "46": "          public Integer computeNext() {\n",
        "47": "            switch (rep++) {\n",
        "48": "              case 0:\n",
        "49": "                return 0;\n",
        "50": "              case 1:\n",
        "51": "                return 1;\n",
        "52": "              case 2:\n",
        "53": "                return endOfData();\n",
        "54": "              default:\n",
        "55": "                fail(\"Should not have been invoked again\");\n",
        "56": "                return null;\n",
        "57": "            }\n",
        "58": "          }\n",
        "59": "        };\n",
        "87": "    AbstractIterator<Integer> iter =\n",
        "88": "        new AbstractIterator<Integer>() {\n",
        "89": "          private int rep;\n",
        "90": "\n",
        "91": "          @Override\n",
        "92": "          public Integer computeNext() {\n",
        "93": "            switch (rep++) {\n",
        "94": "              case 0:\n",
        "95": "                return 0;\n",
        "96": "              case 1:\n",
        "97": "                return 1;\n",
        "98": "              case 2:\n",
        "99": "                return endOfData();\n",
        "100": "              default:\n",
        "101": "                fail(\"Should not have been invoked again\");\n",
        "102": "                return null;\n",
        "103": "            }\n",
        "104": "          }\n",
        "105": "        };\n",
        "143": "    Iterator<Object> itr =\n",
        "144": "        new AbstractIterator<Object>() {\n",
        "145": "          @Override\n",
        "146": "          public Object computeNext() {\n",
        "147": "            return new Object();\n",
        "148": "          }\n",
        "149": "        };\n",
        "156": "    AbstractIterator<Integer> empty =\n",
        "157": "        new AbstractIterator<Integer>() {\n",
        "158": "          private boolean alreadyCalledEndOfData;\n",
        "159": "\n",
        "160": "          @Override\n",
        "161": "          public Integer computeNext() {\n",
        "162": "            if (alreadyCalledEndOfData) {\n",
        "163": "              fail(\"Should not have been invoked again\");\n",
        "164": "            }\n",
        "165": "            alreadyCalledEndOfData = true;\n",
        "166": "            return endOfData();\n",
        "167": "          }\n",
        "168": "        };\n",
        "184": "    Iterator<Integer> iter =\n",
        "185": "        new AbstractIterator<Integer>() {\n",
        "186": "          boolean haveBeenCalled;\n",
        "187": "\n",
        "188": "          @Override\n",
        "189": "          public Integer computeNext() {\n",
        "190": "            if (haveBeenCalled) {\n",
        "191": "              fail(\"Should not have been called again\");\n",
        "192": "            } else {\n",
        "193": "              haveBeenCalled = true;\n",
        "194": "              sneakyThrow(new SomeCheckedException());\n",
        "195": "            }\n",
        "196": "            return null; // never reached\n",
        "197": "          }\n",
        "198": "        };\n",
        "220": "    Iterator<Integer> iter =\n",
        "221": "        new AbstractIterator<Integer>() {\n",
        "222": "          @Override\n",
        "223": "          public Integer computeNext() {\n",
        "224": "            throw exception;\n",
        "225": "          }\n",
        "226": "        };\n",
        "238": "    Iterator<Integer> iter =\n",
        "239": "        new AbstractIterator<Integer>() {\n",
        "240": "          @Override\n",
        "241": "          public Integer computeNext() {\n",
        "242": "            endOfData();\n",
        "243": "            throw new SomeUncheckedException();\n",
        "244": "          }\n",
        "245": "        };\n",
        "254": "    Iterator<Integer> iter =\n",
        "255": "        new AbstractIterator<Integer>() {\n",
        "256": "          boolean haveBeenCalled;\n",
        "257": "\n",
        "258": "          @Override\n",
        "259": "          public Integer computeNext() {\n",
        "260": "            if (haveBeenCalled) {\n",
        "261": "              endOfData();\n",
        "262": "            }\n",
        "263": "            haveBeenCalled = true;\n",
        "264": "            return 0;\n",
        "265": "          }\n",
        "266": "        };\n",
        "297": "  /** Throws a undeclared checked exception. */\n",
        "308": "  private static class SomeCheckedException extends Exception {}\n",
        "310": "  private static class SomeUncheckedException extends RuntimeException {}\n"
    },
    "removed": {
        "41": "    Iterator<Integer> iter = new AbstractIterator<Integer>() {\n",
        "42": "      private int rep;\n",
        "43": "      @Override public Integer computeNext() {\n",
        "44": "        switch (rep++) {\n",
        "45": "          case 0:\n",
        "46": "            return 0;\n",
        "47": "          case 1:\n",
        "48": "            return 1;\n",
        "49": "          case 2:\n",
        "50": "            return endOfData();\n",
        "51": "          default:\n",
        "52": "            fail(\"Should not have been invoked again\");\n",
        "53": "            return null;\n",
        "54": "        }\n",
        "55": "      }\n",
        "56": "    };\n",
        "84": "    AbstractIterator<Integer> iter = new AbstractIterator<Integer>() {\n",
        "85": "      private int rep;\n",
        "86": "      @Override public Integer computeNext() {\n",
        "87": "        switch (rep++) {\n",
        "88": "          case 0:\n",
        "89": "            return 0;\n",
        "90": "          case 1:\n",
        "91": "            return 1;\n",
        "92": "          case 2:\n",
        "93": "            return endOfData();\n",
        "94": "          default:\n",
        "95": "            fail(\"Should not have been invoked again\");\n",
        "96": "            return null;\n",
        "97": "        }\n",
        "98": "      }\n",
        "99": "    };\n",
        "137": "    Iterator<Object> itr = new AbstractIterator<Object>() {\n",
        "138": "      @Override public Object computeNext() {\n",
        "139": "        return new Object();\n",
        "140": "      }\n",
        "141": "    };\n",
        "148": "    AbstractIterator<Integer> empty = new AbstractIterator<Integer>() {\n",
        "149": "      private boolean alreadyCalledEndOfData;\n",
        "150": "      @Override public Integer computeNext() {\n",
        "151": "        if (alreadyCalledEndOfData) {\n",
        "152": "          fail(\"Should not have been invoked again\");\n",
        "153": "        }\n",
        "154": "        alreadyCalledEndOfData = true;\n",
        "155": "        return endOfData();\n",
        "156": "      }\n",
        "157": "    };\n",
        "173": "    Iterator<Integer> iter = new AbstractIterator<Integer>() {\n",
        "174": "      boolean haveBeenCalled;\n",
        "175": "      @Override public Integer computeNext() {\n",
        "176": "        if (haveBeenCalled) {\n",
        "177": "          fail(\"Should not have been called again\");\n",
        "178": "        } else {\n",
        "179": "          haveBeenCalled = true;\n",
        "180": "          sneakyThrow(new SomeCheckedException());\n",
        "181": "        }\n",
        "182": "        return null; // never reached\n",
        "183": "      }\n",
        "184": "    };\n",
        "206": "    Iterator<Integer> iter = new AbstractIterator<Integer>() {\n",
        "207": "      @Override public Integer computeNext() {\n",
        "208": "        throw exception;\n",
        "209": "      }\n",
        "210": "    };\n",
        "222": "    Iterator<Integer> iter = new AbstractIterator<Integer>() {\n",
        "223": "      @Override public Integer computeNext() {\n",
        "224": "        endOfData();\n",
        "225": "        throw new SomeUncheckedException();\n",
        "226": "      }\n",
        "227": "    };\n",
        "236": "    Iterator<Integer> iter = new AbstractIterator<Integer>() {\n",
        "237": "      boolean haveBeenCalled;\n",
        "238": "      @Override public Integer computeNext() {\n",
        "239": "        if (haveBeenCalled) {\n",
        "240": "          endOfData();\n",
        "241": "        }\n",
        "242": "        haveBeenCalled = true;\n",
        "243": "        return 0;\n",
        "244": "      }\n",
        "245": "    };\n",
        "276": "  /**\n",
        "277": "   * Throws a undeclared checked exception.\n",
        "278": "   */\n",
        "289": "  private static class SomeCheckedException extends Exception {\n",
        "290": "  }\n",
        "292": "  private static class SomeUncheckedException extends RuntimeException {\n",
        "293": "  }\n"
    }
}