{
    "addition": {
        "54": "   * For example, a lexicographical natural ordering over integers considers {@code [] < [1] < [1,\n",
        "55": "   * 1] < [1, 2] < [2]}.\n",
        "57": "   * <p>Note that {@code Collections.reverseOrder(lexicographical(comparator))} is not equivalent to\n",
        "58": "   * {@code lexicographical(Collections.reverseOrder(comparator))} (consider how each would order\n",
        "59": "   * {@code [1]} and {@code [1, 1]}).\n",
        "70": "   * equal to the element that preceded it, according to the specified comparator. Note that this is\n",
        "71": "   * always true when the iterable has fewer than two elements.\n",
        "113": "   * {@code Comparator}) input elements, in ascending order, as an unmodifiable {@code List}. Ties\n",
        "114": "   * are broken arbitrarily.\n",
        "116": "   * <p>For example:\n",
        "118": "   * <pre>{@code\n",
        "119": "   * Stream.of(\"foo\", \"quux\", \"banana\", \"elephant\")\n",
        "120": "   *     .collect(least(2, comparingInt(String::length)))\n",
        "121": "   * // returns {\"foo\", \"quux\"}\n",
        "122": "   * }</pre>\n",
        "124": "   * <p>This {@code Collector} uses O(k) memory and takes expected time O(n) (worst-case O(n log\n",
        "125": "   * k)), as opposed to e.g. {@code Stream.sorted(comparator).limit(k)}, which currently takes O(n\n",
        "126": "   * log n) time and O(n) space.\n",
        "144": "   * {@code Comparator}) input elements, in descending order, as an unmodifiable {@code List}. Ties\n",
        "145": "   * are broken arbitrarily.\n",
        "147": "   * <p>For example:\n",
        "149": "   * <pre>{@code\n",
        "150": "   * Stream.of(\"foo\", \"quux\", \"banana\", \"elephant\")\n",
        "151": "   *     .collect(greatest(2, comparingInt(String::length)))\n",
        "152": "   * // returns {\"elephant\", \"banana\"}\n",
        "153": "   * }</pre>\n",
        "155": "   * <p>This {@code Collector} uses O(k) memory and takes expected time O(n) (worst-case O(n log\n",
        "156": "   * k)), as opposed to e.g. {@code Stream.sorted(comparator.reversed()).limit(k)}, which currently\n",
        "157": "   * takes O(n log n) time and O(n) space.\n"
    },
    "removed": {
        "54": "   * For example, a lexicographical natural ordering over integers considers {@code\n",
        "55": "   * [] < [1] < [1, 1] < [1, 2] < [2]}.\n",
        "57": "   * <p>Note that {@code Collections.reverseOrder(lexicographical(comparator))} is not\n",
        "58": "   * equivalent to {@code lexicographical(Collections.reverseOrder(comparator))} (consider how each\n",
        "59": "   * would order {@code [1]} and {@code [1, 1]}).\n",
        "70": "   * equal to the element that preceded it, according to the specified comparator. Note that this\n",
        "71": "   * is always true when the iterable has fewer than two elements.\n",
        "113": "   * {@code Comparator}) input elements, in ascending order, as an unmodifiable {@code List}.\n",
        "114": "   * Ties are broken arbitrarily.\n",
        "116": "   * For example:\n",
        "117": "   *  <pre>   {@code\n",
        "119": "   *   Stream.of(\"foo\", \"quux\", \"banana\", \"elephant\")\n",
        "120": "   *       .collect(least(2, comparingInt(String::length)))\n",
        "121": "   *   // returns {\"foo\", \"quux\"}}</pre>\n",
        "123": "   * <p>This {@code Collector} uses O(k) memory and takes expected time O(n)\n",
        "124": "   * (worst-case O(n log k)), as opposed to e.g. {@code Stream.sorted(comparator).limit(k)}, which\n",
        "125": "   * currently takes O(n log n) time and O(n) space.\n",
        "143": "   * {@code Comparator}) input elements, in descending order, as an unmodifiable {@code List}.\n",
        "144": "   * Ties are broken arbitrarily.\n",
        "146": "   * For example:\n",
        "147": "   *  <pre>   {@code\n",
        "149": "   *   Stream.of(\"foo\", \"quux\", \"banana\", \"elephant\")\n",
        "150": "   *       .collect(greatest(2, comparingInt(String::length)))\n",
        "151": "   *   // returns {\"elephant\", \"banana\"}}</pre>\n",
        "153": "   * <p>This {@code Collector} uses O(k) memory and takes expected time O(n)\n",
        "154": "   * (worst-case O(n log k)), as opposed to e.g.\n",
        "155": "   * {@code Stream.sorted(comparator.reversed()).limit(k)}, which currently takes O(n log n) time\n",
        "156": "   * and O(n) space.\n"
    }
}