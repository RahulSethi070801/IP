{
    "addition": {
        "40": " * A readable source of characters, such as a text file. Unlike a {@link Reader}, a {@code\n",
        "41": " * CharSource} is not an open, stateful stream of characters that can be read and closed. Instead,\n",
        "42": " * it is an immutable <i>supplier</i> of {@code Reader} instances.\n",
        "45": " *\n",
        "47": " *   <li><b>Methods that return a reader:</b> These methods should return a <i>new</i>, independent\n",
        "48": " *       instance each time they are called. The caller is responsible for ensuring that the\n",
        "49": " *       returned reader is closed.\n",
        "50": " *   <li><b>Convenience methods:</b> These are implementations of common operations that are\n",
        "51": " *       typically implemented by opening a reader using one of the methods in the first category,\n",
        "52": " *       doing something and finally closing the reader that was opened.\n",
        "56": " * into lines. Like {@link BufferedReader}, these methods break lines on any of {@code \\n}, {@code\n",
        "57": " * \\r} or {@code \\r\\n}, do not include the line separator in each line and do not consider there to\n",
        "58": " * be an empty line at the end if the contents are terminated with a line separator.\n",
        "69": "  /** Constructor for use by subclasses. */\n",
        "117": "   * <p>The default implementation returns {@link Optional#absent}. Some sources, such as a {@code\n",
        "118": "   * CharSequence}, may return a non-absent value. Note that in such cases, it is <i>possible</i>\n",
        "119": "   * that this method will return a different number of chars than would be returned by reading all\n",
        "120": "   * of the chars.\n",
        "137": "   * absent, it will fall back to a heavyweight operation that will open a stream, {@link\n",
        "138": "   * Reader#skip(long) skip} to the end of the stream, and return the total number of chars that\n",
        "139": "   * were skipped.\n",
        "183": "   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code\n",
        "184": "   *     appendable}\n",
        "205": "   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code\n",
        "206": "   *     sink}\n",
        "245": "   * text that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or {@code\n",
        "246": "   * \\n}. If the source's content does not end in a line termination sequence, it is treated as if\n",
        "247": "   * it does.\n",
        "269": "   * text that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or {@code\n",
        "270": "   * \\n}. If the source's content does not end in a line termination sequence, it is treated as if\n",
        "271": "   * it does.\n",
        "293": "   * Reads lines of text from this source, processing each line as it is read using the given {@link\n",
        "294": "   * LineProcessor processor}. Stops when all lines have been processed or the processor returns\n",
        "295": "   * {@code false} and returns the result produced by the processor.\n",
        "298": "   * text that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or {@code\n",
        "299": "   * \\n}. If the source's content does not end in a line termination sequence, it is treated as if\n",
        "300": "   * it does.\n",
        "302": "   * @throws IOException if an I/O error occurs while reading from this source or if {@code\n",
        "303": "   *     processor} throws an {@code IOException}\n",
        "323": "   * Returns whether the source has zero chars. The default implementation first checks {@link\n",
        "324": "   * #lengthIfKnown}, returning true if it's known to be zero and false if it's known to be\n",
        "425": "  /** A byte source that reads chars from this source and encodes them as bytes using a charset. */\n"
    },
    "removed": {
        "40": " * A readable source of characters, such as a text file. Unlike a {@link Reader}, a\n",
        "41": " * {@code CharSource} is not an open, stateful stream of characters that can be read and closed.\n",
        "42": " * Instead, it is an immutable <i>supplier</i> of {@code Reader} instances.\n",
        "46": " * <li><b>Methods that return a reader:</b> These methods should return a <i>new</i>, independent\n",
        "47": " *     instance each time they are called. The caller is responsible for ensuring that the returned\n",
        "48": " *     reader is closed.\n",
        "49": " * <li><b>Convenience methods:</b> These are implementations of common operations that are typically\n",
        "50": " *     implemented by opening a reader using one of the methods in the first category, doing\n",
        "51": " *     something and finally closing the reader that was opened.\n",
        "55": " * into lines. Like {@link BufferedReader}, these methods break lines on any of {@code \\n},\n",
        "56": " * {@code \\r} or {@code \\r\\n}, do not include the line separator in each line and do not consider\n",
        "57": " * there to be an empty line at the end if the contents are terminated with a line separator.\n",
        "68": "  /**\n",
        "69": "   * Constructor for use by subclasses.\n",
        "70": "   */\n",
        "118": "   * <p>The default implementation returns {@link Optional#absent}. Some sources, such as a\n",
        "119": "   * {@code CharSequence}, may return a non-absent value. Note that in such cases, it is\n",
        "120": "   * <i>possible</i> that this method will return a different number of chars than would be returned\n",
        "121": "   * by reading all of the chars.\n",
        "138": "   * absent, it will fall back to a heavyweight operation that will open a stream,\n",
        "139": "   * {@link Reader#skip(long) skip} to the end of the stream, and return the total number of chars\n",
        "140": "   * that were skipped.\n",
        "184": "   * @throws IOException if an I/O error occurs while reading from this source or writing to\n",
        "185": "   *     {@code appendable}\n",
        "206": "   * @throws IOException if an I/O error occurs while reading from this source or writing to\n",
        "207": "   *     {@code sink}\n",
        "246": "   * text that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or\n",
        "247": "   * {@code \\n}. If the source's content does not end in a line termination sequence, it is treated\n",
        "248": "   * as if it does.\n",
        "270": "   * text that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or\n",
        "271": "   * {@code \\n}. If the source's content does not end in a line termination sequence, it is treated\n",
        "272": "   * as if it does.\n",
        "294": "   * Reads lines of text from this source, processing each line as it is read using the given\n",
        "295": "   * {@link LineProcessor processor}. Stops when all lines have been processed or the processor\n",
        "296": "   * returns {@code false} and returns the result produced by the processor.\n",
        "299": "   * text that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or\n",
        "300": "   * {@code \\n}. If the source's content does not end in a line termination sequence, it is treated\n",
        "301": "   * as if it does.\n",
        "303": "   * @throws IOException if an I/O error occurs while reading from this source or if\n",
        "304": "   *     {@code processor} throws an {@code IOException}\n",
        "324": "   * Returns whether the source has zero chars. The default implementation first checks\n",
        "325": "   * {@link #lengthIfKnown}, returning true if it's known to be zero and false if it's known to be\n",
        "426": "  /**\n",
        "427": "   * A byte source that reads chars from this source and encodes them as bytes using a charset.\n",
        "428": "   */\n"
    }
}