{
    "addition": {
        "38": "  // ----------------------------------------------------------------\n",
        "40": "  // ----------------------------------------------------------------\n",
        "44": "    Object x =\n",
        "45": "        new Object() {\n",
        "46": "          @Override\n",
        "47": "          protected void finalize() {\n",
        "48": "            latch.countDown();\n",
        "49": "          }\n",
        "50": "        };\n",
        "51": "    x = null; // Hint to the JIT that x is unreachable\n",
        "58": "    Object x =\n",
        "59": "        new Object() {\n",
        "60": "          @Override\n",
        "61": "          protected void finalize() {\n",
        "62": "            future.set(null);\n",
        "63": "          }\n",
        "64": "        };\n",
        "65": "    x = null; // Hint to the JIT that x is unreachable\n",
        "73": "    Object x =\n",
        "74": "        new Object() {\n",
        "75": "          @Override\n",
        "76": "          protected void finalize() {\n",
        "77": "            future.cancel(false);\n",
        "78": "          }\n",
        "79": "        };\n",
        "80": "    x = null; // Hint to the JIT that x is unreachable\n",
        "95": "    GcFinalization.awaitDone(\n",
        "96": "        new FinalizationPredicate() {\n",
        "97": "          public boolean isDone() {\n",
        "98": "            return map.isEmpty();\n",
        "99": "          }\n",
        "100": "        });\n",
        "104": "  // ----------------------------------------------------------------\n",
        "107": "  // ----------------------------------------------------------------\n",
        "115": "\n",
        "116": "    Interruptenator(final Thread interruptee, final AtomicBoolean shutdown) {\n",
        "117": "      super(\n",
        "118": "          new Runnable() {\n",
        "119": "            public void run() {\n",
        "120": "              while (!shutdown.get()) {\n",
        "121": "                interruptee.interrupt();\n",
        "122": "                Thread.yield();\n",
        "123": "              }\n",
        "124": "            }\n",
        "125": "          });\n",
        "195": "        GcFinalization.awaitDone(\n",
        "196": "            new FinalizationPredicate() {\n",
        "197": "              public boolean isDone() {\n",
        "198": "                return false;\n",
        "199": "              }\n",
        "200": "            });\n",
        "212": "   * awaitFullGc() is not quite as reliable a way to ensure calling of a specific finalize method as\n",
        "213": "   * the more direct await* methods, but should be reliable enough in practice to avoid flakiness of\n",
        "214": "   * this test. (And if it isn't, we'd like to know about it first!)\n",
        "218": "    final WeakReference<Object> ref =\n",
        "219": "        new WeakReference<Object>(\n",
        "220": "            new Object() {\n",
        "221": "              @Override\n",
        "222": "              protected void finalize() {\n",
        "223": "                finalizerRan.countDown();\n",
        "224": "              }\n",
        "225": "            });\n"
    },
    "removed": {
        "38": "  //----------------------------------------------------------------\n",
        "40": "  //----------------------------------------------------------------\n",
        "44": "    Object x = new Object() {\n",
        "45": "      @Override protected void finalize() { latch.countDown(); }\n",
        "46": "    };\n",
        "47": "    x = null;  // Hint to the JIT that x is unreachable\n",
        "54": "    Object x = new Object() {\n",
        "55": "      @Override protected void finalize() { future.set(null); }\n",
        "56": "    };\n",
        "57": "    x = null;  // Hint to the JIT that x is unreachable\n",
        "65": "    Object x = new Object() {\n",
        "66": "      @Override protected void finalize() { future.cancel(false); }\n",
        "67": "    };\n",
        "68": "    x = null;  // Hint to the JIT that x is unreachable\n",
        "83": "    GcFinalization.awaitDone(new FinalizationPredicate() {\n",
        "84": "      public boolean isDone() {\n",
        "85": "        return map.isEmpty();\n",
        "86": "      }\n",
        "87": "    });\n",
        "91": "  //----------------------------------------------------------------\n",
        "94": "  //----------------------------------------------------------------\n",
        "101": "    Interruptenator(final Thread interruptee,\n",
        "102": "                    final AtomicBoolean shutdown) {\n",
        "103": "      super(new Runnable() {\n",
        "104": "          public void run() {\n",
        "105": "            while (!shutdown.get()) {\n",
        "106": "              interruptee.interrupt();\n",
        "107": "              Thread.yield();\n",
        "108": "            }}});\n",
        "177": "        GcFinalization.awaitDone(new FinalizationPredicate() {\n",
        "178": "            public boolean isDone() {\n",
        "179": "              return false;\n",
        "180": "            }\n",
        "181": "          });\n",
        "193": "   * awaitFullGc() is not quite as reliable a way to ensure calling of a\n",
        "194": "   * specific finalize method as the more direct await* methods, but should be\n",
        "195": "   * reliable enough in practice to avoid flakiness of this test.  (And if it\n",
        "196": "   * isn't, we'd like to know about it first!)\n",
        "200": "    final WeakReference<Object> ref = new WeakReference<Object>(\n",
        "201": "        new Object() {\n",
        "202": "          @Override protected void finalize() { finalizerRan.countDown(); }\n",
        "203": "        });\n"
    }
}