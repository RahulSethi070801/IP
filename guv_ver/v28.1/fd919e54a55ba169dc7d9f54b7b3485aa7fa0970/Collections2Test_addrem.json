{
    "addition": {
        "65": "  static final Predicate<String> NOT_YYY_ZZZ =\n",
        "66": "      new Predicate<String>() {\n",
        "67": "        @Override\n",
        "68": "        public boolean apply(String input) {\n",
        "69": "          return !\"yyy\".equals(input) && !\"zzz\".equals(input);\n",
        "70": "        }\n",
        "71": "      };\n",
        "73": "  static final Predicate<String> LENGTH_1 =\n",
        "74": "      new Predicate<String>() {\n",
        "75": "        @Override\n",
        "76": "        public boolean apply(String input) {\n",
        "77": "          return input.length() == 1;\n",
        "78": "        }\n",
        "79": "      };\n",
        "80": "\n",
        "81": "  static final Predicate<String> STARTS_WITH_VOWEL =\n",
        "82": "      new Predicate<String>() {\n",
        "83": "        @Override\n",
        "84": "        public boolean apply(String input) {\n",
        "85": "          return asList('a', 'e', 'i', 'o', 'u').contains(input.charAt(0));\n",
        "86": "        }\n",
        "87": "      };\n",
        "92": "            new TestStringCollectionGenerator() {\n",
        "93": "              @Override\n",
        "94": "              public Collection<String> create(String[] elements) {\n",
        "95": "                List<String> unfiltered = newArrayList();\n",
        "96": "                unfiltered.add(\"yyy\");\n",
        "97": "                Collections.addAll(unfiltered, elements);\n",
        "98": "                unfiltered.add(\"zzz\");\n",
        "99": "                return Collections2.filter(unfiltered, NOT_YYY_ZZZ);\n",
        "100": "              }\n",
        "101": "            })\n",
        "115": "            new TestStringCollectionGenerator() {\n",
        "116": "              @Override\n",
        "117": "              public Collection<String> create(String[] elements) {\n",
        "118": "                List<String> unfiltered = newArrayList();\n",
        "119": "                Collections.addAll(unfiltered, elements);\n",
        "120": "                return Collections2.filter(unfiltered, NOT_YYY_ZZZ);\n",
        "121": "              }\n",
        "122": "            })\n",
        "136": "            new TestStringCollectionGenerator() {\n",
        "137": "              @Override\n",
        "138": "              public Collection<String> create(String[] elements) {\n",
        "139": "                List<String> unfiltered = newLinkedList();\n",
        "140": "                unfiltered.add(\"yyy\");\n",
        "141": "                Collections.addAll(unfiltered, elements);\n",
        "142": "                unfiltered.add(\"zzz\");\n",
        "143": "                return Collections2.filter(unfiltered, NOT_YYY_ZZZ);\n",
        "144": "              }\n",
        "145": "            })\n",
        "159": "            new TestStringCollectionGenerator() {\n",
        "160": "              @Override\n",
        "161": "              public Collection<String> create(String[] elements) {\n",
        "162": "                List<String> unfiltered = newArrayList();\n",
        "163": "                unfiltered.add(\"yyy\");\n",
        "164": "                unfiltered.addAll(ImmutableList.copyOf(elements));\n",
        "165": "                unfiltered.add(\"zzz\");\n",
        "166": "                return Collections2.filter(unfiltered, LENGTH_1);\n",
        "167": "              }\n",
        "168": "            })\n",
        "182": "            new TestStringCollectionGenerator() {\n",
        "183": "              @Override\n",
        "184": "              public Collection<String> create(String[] elements) {\n",
        "185": "                List<String> unfiltered = newArrayList();\n",
        "186": "                unfiltered.add(\"yyy\");\n",
        "187": "                unfiltered.addAll(ImmutableList.copyOf(elements));\n",
        "188": "                unfiltered.add(\"zzz\");\n",
        "189": "                unfiltered.add(\"abc\");\n",
        "190": "                return Collections2.filter(Collections2.filter(unfiltered, LENGTH_1), NOT_YYY_ZZZ);\n",
        "191": "              }\n",
        "192": "            })\n",
        "203": "  private static final Function<String, String> REMOVE_FIRST_CHAR =\n",
        "204": "      new Function<String, String>() {\n",
        "207": "          return ((from == null) || \"\".equals(from)) ? null : from.substring(1);\n",
        "214": "            new TestStringCollectionGenerator() {\n",
        "215": "              @Override\n",
        "216": "              public Collection<String> create(String[] elements) {\n",
        "217": "                List<String> list = newArrayList();\n",
        "218": "                for (String element : elements) {\n",
        "219": "                  list.add((element == null) ? null : \"q\" + element);\n",
        "220": "                }\n",
        "221": "                return Collections2.transform(list, REMOVE_FIRST_CHAR);\n",
        "222": "              }\n",
        "223": "            })\n",
        "241": "    Collection<List<Integer>> permutationSet = Collections2.orderedPermutations(list);\n",
        "254": "    Iterator<List<Integer>> permutations = Collections2.orderedPermutations(list).iterator();\n",
        "262": "    Iterator<List<String>> permutations = Collections2.orderedPermutations(list).iterator();\n",
        "297": "    assertEquals(\n",
        "298": "        479001600 /*12!*/,\n",
        "299": "        Collections2.orderedPermutations(newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n",
        "300": "            .size());\n",
        "302": "    assertEquals(\n",
        "303": "        Integer.MAX_VALUE,\n",
        "304": "        Collections2.orderedPermutations(newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))\n",
        "305": "            .size());\n",
        "307": "    assertEquals(\n",
        "308": "        Integer.MAX_VALUE,\n",
        "309": "        Collections2.orderedPermutations(\n",
        "310": "                newArrayList(\n",
        "311": "                    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))\n",
        "312": "            .size());\n",
        "315": "    assertEquals(\n",
        "316": "        1391975640 /*C(34,14)*/,\n",
        "317": "        Collections2.orderedPermutations(concat(nCopies(20, 1), nCopies(14, 2))).size());\n",
        "319": "    assertEquals(\n",
        "320": "        Integer.MAX_VALUE,\n",
        "321": "        Collections2.orderedPermutations(concat(nCopies(21, 1), nCopies(14, 2))).size());\n",
        "326": "    Collection<List<Integer>> permutationSet = Collections2.orderedPermutations(list);\n",
        "341": "    assertTrue(permutationSet.contains(Collections.<Integer>emptyList()));\n",
        "344": "    assertNextPermutation(Collections.<Integer>emptyList(), permutations);\n",
        "350": "        Collections2.permutations(Collections.<Integer>singletonList(1)).iterator();\n",
        "356": "    Iterator<List<Integer>> permutations = Collections2.permutations(newArrayList(1, 2)).iterator();\n",
        "363": "    Iterator<List<Integer>> permutations =\n",
        "364": "        Collections2.permutations(newArrayList(1, 2, 3)).iterator();\n",
        "376": "    Iterator<List<Integer>> permutations =\n",
        "377": "        Collections2.permutations(newArrayList(3, 2, 1)).iterator();\n",
        "389": "    Iterator<List<Integer>> permutations =\n",
        "390": "        Collections2.permutations(newArrayList(1, 1, 2)).iterator();\n",
        "401": "    Iterator<List<Integer>> permutations =\n",
        "402": "        Collections2.permutations(newArrayList(1, 2, 3, 4)).iterator();\n",
        "436": "    assertPermutationsCount(1, Collections2.permutations(Collections.<Integer>emptyList()));\n",
        "439": "    assertPermutationsCount(6, Collections2.permutations(newArrayList(1, 2, 3)));\n",
        "440": "    assertPermutationsCount(5040, Collections2.permutations(newArrayList(1, 2, 3, 4, 5, 6, 7)));\n",
        "441": "    assertPermutationsCount(40320, Collections2.permutations(newArrayList(1, 2, 3, 4, 5, 6, 7, 8)));\n",
        "446": "    assertEquals(\n",
        "447": "        Integer.MAX_VALUE,\n",
        "448": "        Collections2.permutations(newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)).size());\n",
        "450": "    assertEquals(\n",
        "451": "        Integer.MAX_VALUE,\n",
        "452": "        Collections2.orderedPermutations(\n",
        "453": "                newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))\n",
        "454": "            .size());\n",
        "455": "    assertEquals(\n",
        "456": "        Integer.MAX_VALUE,\n",
        "457": "        Collections2.orderedPermutations(\n",
        "458": "                newArrayList(\n",
        "459": "                    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))\n",
        "460": "            .size());\n",
        "465": "    Collection<List<Integer>> permutationSet = Collections2.permutations(list);\n",
        "475": "  private <T> void assertNextPermutation(\n",
        "476": "      List<T> expectedPermutation, Iterator<List<T>> permutations) {\n",
        "477": "    assertTrue(\"Expected another permutation, but there was none.\", permutations.hasNext());\n",
        "481": "  private <T> void assertNoMorePermutations(Iterator<List<T>> permutations) {\n",
        "482": "    assertFalse(\"Expected no more permutations, but there was one.\", permutations.hasNext());\n",
        "486": "    } catch (NoSuchElementException expected) {\n",
        "487": "    }\n",
        "490": "  private <T> void assertPermutationsCount(int expected, Collection<List<T>> permutationSet) {\n"
    },
    "removed": {
        "65": "  static final Predicate<String> NOT_YYY_ZZZ = new Predicate<String>() {\n",
        "66": "      @Override\n",
        "67": "      public boolean apply(String input) {\n",
        "68": "        return !\"yyy\".equals(input) && !\"zzz\".equals(input);\n",
        "69": "      }\n",
        "70": "  };\n",
        "71": "\n",
        "72": "  static final Predicate<String> LENGTH_1 = new Predicate<String>() {\n",
        "73": "    @Override\n",
        "74": "    public boolean apply(String input) {\n",
        "75": "      return input.length() == 1;\n",
        "76": "    }\n",
        "77": "  };\n",
        "79": "  static final Predicate<String> STARTS_WITH_VOWEL = new Predicate<String>() {\n",
        "80": "    @Override\n",
        "81": "    public boolean apply(String input) {\n",
        "82": "      return asList('a', 'e', 'i', 'o', 'u').contains(input.charAt(0));\n",
        "83": "    }\n",
        "84": "  };\n",
        "89": "        new TestStringCollectionGenerator() {\n",
        "90": "          @Override public Collection<String> create(String[] elements) {\n",
        "91": "            List<String> unfiltered = newArrayList();\n",
        "92": "            unfiltered.add(\"yyy\");\n",
        "93": "            Collections.addAll(unfiltered, elements);\n",
        "94": "            unfiltered.add(\"zzz\");\n",
        "95": "            return Collections2.filter(unfiltered, NOT_YYY_ZZZ);\n",
        "96": "          }\n",
        "97": "        })\n",
        "111": "        new TestStringCollectionGenerator() {\n",
        "112": "          @Override public Collection<String> create(String[] elements) {\n",
        "113": "            List<String> unfiltered = newArrayList();\n",
        "114": "            Collections.addAll(unfiltered, elements);\n",
        "115": "            return Collections2.filter(unfiltered, NOT_YYY_ZZZ);\n",
        "116": "          }\n",
        "117": "        })\n",
        "131": "        new TestStringCollectionGenerator() {\n",
        "132": "          @Override public Collection<String> create(String[] elements) {\n",
        "133": "            List<String> unfiltered = newLinkedList();\n",
        "134": "            unfiltered.add(\"yyy\");\n",
        "135": "            Collections.addAll(unfiltered, elements);\n",
        "136": "            unfiltered.add(\"zzz\");\n",
        "137": "            return Collections2.filter(unfiltered, NOT_YYY_ZZZ);\n",
        "138": "          }\n",
        "139": "        })\n",
        "153": "        new TestStringCollectionGenerator() {\n",
        "154": "          @Override public Collection<String> create(String[] elements) {\n",
        "155": "            List<String> unfiltered = newArrayList();\n",
        "156": "            unfiltered.add(\"yyy\");\n",
        "157": "            unfiltered.addAll(ImmutableList.copyOf(elements));\n",
        "158": "            unfiltered.add(\"zzz\");\n",
        "159": "            return Collections2.filter(unfiltered, LENGTH_1);\n",
        "160": "          }\n",
        "161": "        })\n",
        "175": "        new TestStringCollectionGenerator() {\n",
        "176": "          @Override public Collection<String> create(String[] elements) {\n",
        "177": "            List<String> unfiltered = newArrayList();\n",
        "178": "            unfiltered.add(\"yyy\");\n",
        "179": "            unfiltered.addAll(ImmutableList.copyOf(elements));\n",
        "180": "            unfiltered.add(\"zzz\");\n",
        "181": "            unfiltered.add(\"abc\");\n",
        "182": "            return Collections2.filter(\n",
        "183": "                Collections2.filter(unfiltered, LENGTH_1), NOT_YYY_ZZZ);\n",
        "184": "          }\n",
        "185": "        })\n",
        "196": "  private static final Function<String, String> REMOVE_FIRST_CHAR\n",
        "197": "      = new Function<String, String>() {\n",
        "200": "          return ((from == null) || \"\".equals(from))\n",
        "201": "              ? null : from.substring(1);\n",
        "208": "        new TestStringCollectionGenerator() {\n",
        "209": "          @Override public Collection<String> create(String[] elements) {\n",
        "210": "            List<String> list = newArrayList();\n",
        "211": "            for (String element : elements) {\n",
        "212": "              list.add((element == null) ? null : \"q\" + element);\n",
        "213": "            }\n",
        "214": "            return Collections2.transform(list, REMOVE_FIRST_CHAR);\n",
        "215": "          }\n",
        "216": "        })\n",
        "234": "    Collection<List<Integer>> permutationSet =\n",
        "235": "        Collections2.orderedPermutations(list);\n",
        "248": "    Iterator<List<Integer>> permutations =\n",
        "249": "        Collections2.orderedPermutations(list).iterator();\n",
        "257": "    Iterator<List<String>> permutations =\n",
        "258": "        Collections2.orderedPermutations(list).iterator();\n",
        "293": "    assertEquals(479001600 /*12!*/, Collections2.orderedPermutations(\n",
        "294": "        newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).size());\n",
        "296": "    assertEquals(Integer.MAX_VALUE, Collections2.orderedPermutations(\n",
        "297": "        newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)).size());\n",
        "299": "    assertEquals(Integer.MAX_VALUE, Collections2.orderedPermutations(\n",
        "300": "        newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n",
        "301": "            16, 17, 18, 19, 20, 21)).size());\n",
        "304": "    assertEquals(1391975640 /*C(34,14)*/, Collections2.orderedPermutations(\n",
        "305": "        concat(nCopies(20, 1), nCopies(14, 2))).size());\n",
        "307": "    assertEquals(Integer.MAX_VALUE, Collections2.orderedPermutations(\n",
        "308": "        concat(nCopies(21, 1), nCopies(14, 2))).size());\n",
        "313": "    Collection<List<Integer>> permutationSet =\n",
        "314": "        Collections2.orderedPermutations(list);\n",
        "329": "    assertTrue(permutationSet.contains(Collections.<Integer> emptyList()));\n",
        "332": "    assertNextPermutation(Collections.<Integer> emptyList(), permutations);\n",
        "338": "        Collections2.permutations(Collections.<Integer> singletonList(1))\n",
        "339": "        .iterator();\n",
        "345": "    Iterator<List<Integer>> permutations = Collections2.permutations(\n",
        "346": "        newArrayList(1, 2)).iterator();\n",
        "353": "    Iterator<List<Integer>> permutations = Collections2.permutations(\n",
        "354": "        newArrayList(1, 2, 3)).iterator();\n",
        "366": "    Iterator<List<Integer>> permutations = Collections2.permutations(\n",
        "367": "        newArrayList(3, 2, 1)).iterator();\n",
        "379": "    Iterator<List<Integer>> permutations = Collections2.permutations(\n",
        "380": "        newArrayList(1, 1, 2)).iterator();\n",
        "391": "    Iterator<List<Integer>> permutations = Collections2.permutations(\n",
        "392": "        newArrayList(1, 2, 3, 4)).iterator();\n",
        "426": "    assertPermutationsCount(1,\n",
        "427": "        Collections2.permutations(Collections.<Integer>emptyList()));\n",
        "430": "    assertPermutationsCount(6,\n",
        "431": "        Collections2.permutations(newArrayList(1, 2, 3)));\n",
        "432": "    assertPermutationsCount(5040,\n",
        "433": "        Collections2.permutations(newArrayList(1, 2, 3, 4, 5, 6, 7)));\n",
        "434": "    assertPermutationsCount(40320,\n",
        "435": "        Collections2.permutations(newArrayList(1, 2, 3, 4, 5, 6, 7, 8)));\n",
        "440": "    assertEquals(Integer.MAX_VALUE, Collections2.permutations(newArrayList(\n",
        "441": "        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)).size());\n",
        "443": "    assertEquals(Integer.MAX_VALUE, Collections2.orderedPermutations(\n",
        "444": "        newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n",
        "445": "            16, 17, 18, 19, 20)).size());\n",
        "446": "    assertEquals(Integer.MAX_VALUE, Collections2.orderedPermutations(\n",
        "447": "        newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n",
        "448": "            16, 17, 18, 19, 20, 21)).size());\n",
        "453": "    Collection<List<Integer>> permutationSet =\n",
        "454": "        Collections2.permutations(list);\n",
        "464": "  private <T> void assertNextPermutation(List<T> expectedPermutation,\n",
        "465": "      Iterator<List<T>> permutations) {\n",
        "466": "    assertTrue(\"Expected another permutation, but there was none.\",\n",
        "467": "        permutations.hasNext());\n",
        "471": "  private <T> void assertNoMorePermutations(\n",
        "472": "      Iterator<List<T>> permutations) {\n",
        "473": "    assertFalse(\"Expected no more permutations, but there was one.\",\n",
        "474": "        permutations.hasNext());\n",
        "478": "    } catch (NoSuchElementException expected) {}\n",
        "481": "  private <T> void assertPermutationsCount(int expected,\n",
        "482": "      Collection<List<T>> permutationSet) {\n"
    }
}