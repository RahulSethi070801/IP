{
    "addition": {
        "46": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\"> immutable collections</a>.\n",
        "57": "   * Returns a {@code Collector} that accumulates the input elements into a new {@code\n",
        "58": "   * ImmutableMultiset}. Elements are sorted by the specified comparator.\n",
        "60": "   * <p><b>Warning:</b> {@code comparator} should be <i>consistent with {@code equals}</i> as\n",
        "61": "   * explained in the {@link Comparator} documentation.\n",
        "100": "  /** Returns the empty immutable sorted multiset. */\n",
        "106": "  /** Returns an immutable sorted multiset containing a single element. */\n",
        "188": "   * ordering. To create a copy of a {@code SortedMultiset} that preserves the comparator, call\n",
        "189": "   * {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once.\n",
        "276": "   * the same {@code Comparator}. That behavior differs from {@link #copyOf(Iterable)}, which always\n",
        "277": "   * uses the natural ordering of the elements.\n",
        "332": "  @LazyInit transient ImmutableSortedMultiset<E> descendingMultiset;\n",
        "396": "   * SortedMultiset<Integer>} with a {@code Comparator<Number>}, use the {@link Builder} constructor\n",
        "397": "   * instead.\n",
        "435": "   * <pre>{@code\n",
        "436": "   * public static final ImmutableSortedMultiset<Bean> BEANS =\n",
        "437": "   *     new ImmutableSortedMultiset.Builder<Bean>(colorComparator())\n",
        "438": "   *         .addCopies(Bean.COCOA, 4)\n",
        "439": "   *         .addCopies(Bean.GARDEN, 6)\n",
        "440": "   *         .addCopies(Bean.RED, 8)\n",
        "441": "   *         .addCopies(Bean.BLACK_EYED, 10)\n",
        "442": "   *         .build();\n",
        "443": "   * }</pre>\n",
        "452": "     * Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n",
        "453": "     * ImmutableSortedMultiset#orderedBy(Comparator)}.\n",
        "478": "     *     case no change will be made.\n",
        "482": "     *     would result in more than {@link Integer#MAX_VALUE} occurrences of the element\n"
    },
    "removed": {
        "46": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\">\n",
        "47": " * immutable collections</a>.\n",
        "58": "   * Returns a {@code Collector} that accumulates the input elements into a new\n",
        "59": "   * {@code ImmutableMultiset}.  Elements are sorted by the specified comparator.\n",
        "61": "   * <p><b>Warning:</b> {@code comparator} should be <i>consistent with {@code\n",
        "62": "   * equals}</i> as explained in the {@link Comparator} documentation.\n",
        "101": "  /**\n",
        "102": "   * Returns the empty immutable sorted multiset.\n",
        "103": "   */\n",
        "109": "  /**\n",
        "110": "   * Returns an immutable sorted multiset containing a single element.\n",
        "111": "   */\n",
        "193": "   * ordering. To create a copy of a {@code SortedMultiset} that preserves the\n",
        "194": "   * comparator, call {@link #copyOfSorted} instead. This method iterates over {@code elements} at\n",
        "195": "   * most once.\n",
        "282": "   * the same {@code Comparator}. That behavior differs from {@link #copyOf(Iterable)}, which\n",
        "283": "   * always uses the natural ordering of the elements.\n",
        "338": "  @LazyInit\n",
        "339": "  transient ImmutableSortedMultiset<E> descendingMultiset;\n",
        "403": "   * SortedMultiset<Integer>} with a {@code Comparator<Number>}, use the {@link Builder}\n",
        "404": "   * constructor instead.\n",
        "442": "   * <pre> {@code\n",
        "443": "   *\n",
        "444": "   *   public static final ImmutableSortedMultiset<Bean> BEANS =\n",
        "445": "   *       new ImmutableSortedMultiset.Builder<Bean>(colorComparator())\n",
        "446": "   *           .addCopies(Bean.COCOA, 4)\n",
        "447": "   *           .addCopies(Bean.GARDEN, 6)\n",
        "448": "   *           .addCopies(Bean.RED, 8)\n",
        "449": "   *           .addCopies(Bean.BLACK_EYED, 10)\n",
        "450": "   *           .build();}</pre>\n",
        "459": "     * Creates a new builder. The returned builder is equivalent to the builder generated by\n",
        "460": "     * {@link ImmutableSortedMultiset#orderedBy(Comparator)}.\n",
        "485": "     *        case no change will be made.\n",
        "489": "     *         would result in more than {@link Integer#MAX_VALUE} occurrences of the element\n"
    }
}