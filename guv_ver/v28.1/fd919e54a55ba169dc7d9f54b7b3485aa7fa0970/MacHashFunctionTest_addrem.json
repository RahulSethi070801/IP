{
    "addition": {
        "63": "    NullPointerTester tester =\n",
        "64": "        new NullPointerTester().setDefault(String.class, \"HmacMD5\").setDefault(Key.class, MD5_KEY);\n",
        "101": "        Hashing.hmacSha1(SHA1_KEY)\n",
        "102": "            .newHasher()\n",
        "116": "        Hashing.hmacSha1(SHA1_KEY)\n",
        "117": "            .newHasher()\n",
        "125": "    SecretKey customKey =\n",
        "126": "        new SecretKey() {\n",
        "127": "          @Override\n",
        "128": "          public String getAlgorithm() {\n",
        "129": "            return \"HmacMD5\";\n",
        "130": "          }\n",
        "131": "\n",
        "132": "          @Override\n",
        "133": "          public byte[] getEncoded() {\n",
        "134": "            return new byte[8];\n",
        "135": "          }\n",
        "136": "\n",
        "137": "          @Override\n",
        "138": "          public String getFormat() {\n",
        "139": "            return \"RAW\";\n",
        "140": "          }\n",
        "141": "        };\n",
        "142": "    assertEquals(\n",
        "143": "        \"ad262969c53bc16032f160081c4a07a0\",\n",
        "150": "    SecretKey badKey =\n",
        "151": "        new SecretKey() {\n",
        "152": "          @Override\n",
        "153": "          public String getAlgorithm() {\n",
        "154": "            return \"HmacMD5\";\n",
        "155": "          }\n",
        "156": "\n",
        "157": "          @Override\n",
        "158": "          public byte[] getEncoded() {\n",
        "159": "            return null;\n",
        "160": "          }\n",
        "161": "\n",
        "162": "          @Override\n",
        "163": "          public String getFormat() {\n",
        "164": "            return \"RAW\";\n",
        "165": "          }\n",
        "166": "        };\n",
        "217": "    assertEquals(\n",
        "218": "        knownOutput, Hashing.hmacMd5(SHA1_KEY).hashBytes(input.getBytes(UTF_8)).toString());\n",
        "224": "    assertEquals(\n",
        "225": "        \"9753980fe94daa8ecaa82216519393a9\",\n",
        "237": "    assertEquals(\n",
        "238": "        \"9753980fe94daa8ecaa82216519393a9\",\n",
        "251": "        \"Hashing.hmacMd5(Key[algorithm=HmacMD5, format=RAW])\", Hashing.hmacMd5(MD5_KEY).toString());\n",
        "253": "        \"Hashing.hmacMd5(Key[algorithm=HmacMD5, format=RAW])\", Hashing.hmacMd5(keyData).toString());\n"
    },
    "removed": {
        "63": "    NullPointerTester tester = new NullPointerTester()\n",
        "64": "        .setDefault(String.class, \"HmacMD5\")\n",
        "65": "        .setDefault(Key.class, MD5_KEY);\n",
        "102": "        Hashing.hmacSha1(SHA1_KEY).newHasher()\n",
        "116": "        Hashing.hmacSha1(SHA1_KEY).newHasher()\n",
        "124": "    SecretKey customKey = new SecretKey() {\n",
        "125": "      @Override public String getAlgorithm() {\n",
        "126": "        return \"HmacMD5\";\n",
        "127": "      }\n",
        "128": "      @Override public byte[] getEncoded() {\n",
        "129": "        return new byte[8];\n",
        "130": "      }\n",
        "131": "      @Override public String getFormat() {\n",
        "132": "        return \"RAW\";\n",
        "133": "      }\n",
        "134": "    };\n",
        "135": "    assertEquals(\"ad262969c53bc16032f160081c4a07a0\",\n",
        "142": "    SecretKey badKey = new SecretKey() {\n",
        "143": "      @Override public String getAlgorithm() {\n",
        "144": "        return \"HmacMD5\";\n",
        "145": "      }\n",
        "146": "      @Override public byte[] getEncoded() {\n",
        "147": "        return null;\n",
        "148": "      }\n",
        "149": "      @Override public String getFormat() {\n",
        "150": "        return \"RAW\";\n",
        "151": "      }\n",
        "152": "    };\n",
        "203": "    assertEquals(knownOutput,\n",
        "204": "        Hashing.hmacMd5(SHA1_KEY).hashBytes(input.getBytes(UTF_8)).toString());\n",
        "210": "    assertEquals(\"9753980fe94daa8ecaa82216519393a9\",\n",
        "222": "    assertEquals(\"9753980fe94daa8ecaa82216519393a9\",\n",
        "235": "        \"Hashing.hmacMd5(Key[algorithm=HmacMD5, format=RAW])\",\n",
        "236": "        Hashing.hmacMd5(MD5_KEY).toString());\n",
        "238": "        \"Hashing.hmacMd5(Key[algorithm=HmacMD5, format=RAW])\",\n",
        "239": "        Hashing.hmacMd5(keyData).toString());\n"
    }
}