{
    "addition": {
        "41": " * {@link java.net.ServerSocket ServerSocket}, and you would like to ensure that the {@code\n",
        "42": " * ServerSocket} is closed even if the {@code MyServer} object is garbage-collected without calling\n",
        "43": " * its {@code close} method. You <em>could</em> use a finalizer to accomplish this, but that has a\n",
        "44": " * number of well-known problems. Here is how you might use this class instead:\n",
        "46": " * <pre>{@code\n",
        "85": " * }\n",
        "86": " * }</pre>\n",
        "142": "  /** The actual reference queue that our background thread will poll. */\n",
        "147": "  /** Whether or not the background thread started successfully. */\n",
        "150": "  /** Constructs a new queue. */\n",
        "179": "   * Repeatedly dequeues references from the queue and invokes {@link\n",
        "180": "   * FinalizableReference#finalizeReferent()} on them until the queue is empty. This method is a\n",
        "181": "   * no-op if the background thread was created successfully.\n",
        "219": "  /** Loads Finalizer.class. */\n",
        "299": "    /** Gets URL for base of path containing Finalizer.class. */\n",
        "341": "  /** Looks up Finalizer.startFinalizer(). */\n"
    },
    "removed": {
        "41": " * {@link java.net.ServerSocket ServerSocket}, and you would like to ensure that the\n",
        "42": " * {@code ServerSocket} is closed even if the {@code MyServer} object is garbage-collected without\n",
        "43": " * calling its {@code close} method. You <em>could</em> use a finalizer to accomplish this, but that\n",
        "44": " * has a number of well-known problems. Here is how you might use this class instead:\n",
        "46": " * <pre>   {@code\n",
        "85": " * }}</pre>\n",
        "141": "  /**\n",
        "142": "   * The actual reference queue that our background thread will poll.\n",
        "143": "   */\n",
        "148": "  /**\n",
        "149": "   * Whether or not the background thread started successfully.\n",
        "150": "   */\n",
        "153": "  /**\n",
        "154": "   * Constructs a new queue.\n",
        "155": "   */\n",
        "184": "   * Repeatedly dequeues references from the queue and invokes\n",
        "185": "   * {@link FinalizableReference#finalizeReferent()} on them until the queue is empty. This method\n",
        "186": "   * is a no-op if the background thread was created successfully.\n",
        "224": "  /**\n",
        "225": "   * Loads Finalizer.class.\n",
        "226": "   */\n",
        "306": "    /**\n",
        "307": "     * Gets URL for base of path containing Finalizer.class.\n",
        "308": "     */\n",
        "350": "  /**\n",
        "351": "   * Looks up Finalizer.startFinalizer().\n",
        "352": "   */\n"
    }
}