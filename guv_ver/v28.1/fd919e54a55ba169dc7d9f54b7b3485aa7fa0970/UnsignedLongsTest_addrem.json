{
    "addition": {
        "73": "    assertEquals(\n",
        "74": "        0xff1a618b7f65ea12L,\n",
        "75": "        UnsignedLongs.max(\n",
        "76": "            0x5a4316b8c153ac4dL, 8L, 100L, 0L, 0x6cf78a4b139a4e2aL, 0xff1a618b7f65ea12L));\n",
        "90": "    assertEquals(\n",
        "91": "        0L,\n",
        "92": "        UnsignedLongs.min(\n",
        "93": "            0x5a4316b8c153ac4dL, 8L, 100L, 0L, 0x6cf78a4b139a4e2aL, 0xff1a618b7f65ea12L));\n",
        "97": "    List<long[]> ordered =\n",
        "98": "        Arrays.asList(\n",
        "99": "            new long[] {},\n",
        "100": "            new long[] {LEAST},\n",
        "101": "            new long[] {LEAST, LEAST},\n",
        "102": "            new long[] {LEAST, (long) 1},\n",
        "103": "            new long[] {(long) 1},\n",
        "104": "            new long[] {(long) 1, LEAST},\n",
        "105": "            new long[] {GREATEST, GREATEST - (long) 1},\n",
        "106": "            new long[] {GREATEST, GREATEST},\n",
        "107": "            new long[] {GREATEST, GREATEST, GREATEST});\n",
        "189": "    assertEquals(\n",
        "190": "        0xfffffffffffffffdL, UnsignedLongs.remainder(0xfffffffffffffffdL, 0xfffffffffffffffeL));\n",
        "204": "      assertEquals(\n",
        "205": "          0,\n",
        "206": "          dividend\n",
        "207": "              - (divisor * UnsignedLongs.divide(dividend, divisor)\n",
        "208": "                  + UnsignedLongs.remainder(dividend, divisor)));\n",
        "335": "    int[] bases = {2, 5, 7, 8, 10, 16};\n",
        "349": "    assertEquals(\n",
        "350": "        \"18446744073709551615,9223372036854775808\", UnsignedLongs.join(\",\", -1, Long.MIN_VALUE));\n",
        "352": "    assertEquals(\n",
        "353": "        \"184467440737095516159223372036854775808\", UnsignedLongs.join(\"\", -1, Long.MIN_VALUE));\n"
    },
    "removed": {
        "73": "    assertEquals(0xff1a618b7f65ea12L, UnsignedLongs.max(\n",
        "74": "        0x5a4316b8c153ac4dL, 8L, 100L,\n",
        "75": "        0L, 0x6cf78a4b139a4e2aL, 0xff1a618b7f65ea12L));\n",
        "89": "    assertEquals(0L, UnsignedLongs.min(\n",
        "90": "        0x5a4316b8c153ac4dL, 8L, 100L,\n",
        "91": "        0L, 0x6cf78a4b139a4e2aL, 0xff1a618b7f65ea12L));\n",
        "95": "    List<long[]> ordered = Arrays.asList(\n",
        "96": "        new long[] {},\n",
        "97": "        new long[] {LEAST},\n",
        "98": "        new long[] {LEAST, LEAST},\n",
        "99": "        new long[] {LEAST, (long) 1},\n",
        "100": "        new long[] {(long) 1},\n",
        "101": "        new long[] {(long) 1, LEAST},\n",
        "102": "        new long[] {GREATEST, GREATEST - (long) 1},\n",
        "103": "        new long[] {GREATEST, GREATEST},\n",
        "104": "        new long[] {GREATEST, GREATEST, GREATEST});\n",
        "186": "    assertEquals(0xfffffffffffffffdL,\n",
        "187": "        UnsignedLongs.remainder(0xfffffffffffffffdL, 0xfffffffffffffffeL));\n",
        "201": "      assertEquals(0,\n",
        "202": "          dividend - (divisor * UnsignedLongs.divide(dividend, divisor)\n",
        "203": "          + UnsignedLongs.remainder(dividend, divisor)));\n",
        "330": "    int[] bases = { 2, 5, 7, 8, 10, 16 };\n",
        "344": "    assertEquals(\"18446744073709551615,9223372036854775808\",\n",
        "345": "        UnsignedLongs.join(\",\", -1, Long.MIN_VALUE));\n",
        "347": "    assertEquals(\"184467440737095516159223372036854775808\",\n",
        "348": "        UnsignedLongs.join(\"\", -1, Long.MIN_VALUE));\n"
    }
}