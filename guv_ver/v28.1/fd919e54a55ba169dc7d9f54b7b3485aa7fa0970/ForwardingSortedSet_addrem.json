{
    "addition": {
        "28": " * A sorted set which forwards all its method calls to another sorted set. Subclasses should\n",
        "29": " * override one or more methods to modify the behavior of the backing sorted set as desired per the\n",
        "30": " * <a href=\"http://en.wikipedia.org/wiki/Decorator_pattern\">decorator pattern</a>.\n",
        "32": " * <p><b>Warning:</b> The methods of {@code ForwardingSortedSet} forward <i>indiscriminately</i> to\n",
        "33": " * the methods of the delegate. For example, overriding {@link #add} alone <i>will not</i> change\n",
        "34": " * the behavior of {@link #addAll}, which can lead to unexpected behavior. In this case, you should\n",
        "35": " * override {@code addAll} as well, either providing your own implementation, or delegating to the\n",
        "36": " * provided {@code standardAddAll} method.\n",
        "42": " * <p>Each of the {@code standard} methods, where appropriate, uses the set's comparator (or the\n",
        "43": " * natural ordering of the elements, if there is no comparator) to test element equality. As a\n",
        "44": " * result, if the comparator is not consistent with equals, some of the standard implementations may\n",
        "45": " * violate the {@code Set} contract.\n",
        "47": " * <p>The {@code standard} methods and the collection views they return are not guaranteed to be\n",
        "48": " * thread-safe, even when all of the methods that they depend on are thread-safe.\n",
        "103": "   * A sensible definition of {@link #contains} in terms of the {@code first()} method of {@link\n",
        "104": "   * #tailSet}. If you override {@link #tailSet}, you may wish to override {@link #contains} to\n",
        "105": "   * forward to this implementation.\n",
        "124": "   * A sensible definition of {@link #remove} in terms of the {@code iterator()} method of {@link\n",
        "125": "   * #tailSet}. If you override {@link #tailSet}, you may wish to override {@link #remove} to\n",
        "126": "   * forward to this implementation.\n",
        "152": "   * A sensible default implementation of {@link #subSet(Object, Object)} in terms of {@link\n",
        "153": "   * #headSet(Object)} and {@link #tailSet(Object)}. In some situations, you may wish to override\n",
        "154": "   * {@link #subSet(Object, Object)} to forward to this implementation.\n"
    },
    "removed": {
        "28": " * A sorted set which forwards all its method calls to another sorted set.\n",
        "29": " * Subclasses should override one or more methods to modify the behavior of the\n",
        "30": " * backing sorted set as desired per the <a\n",
        "31": " * href=\"http://en.wikipedia.org/wiki/Decorator_pattern\">decorator pattern</a>.\n",
        "33": " * <p><b>Warning:</b> The methods of {@code ForwardingSortedSet} forward\n",
        "34": " * <i>indiscriminately</i> to the methods of the delegate. For example,\n",
        "35": " * overriding {@link #add} alone <i>will not</i> change the behavior of {@link\n",
        "36": " * #addAll}, which can lead to unexpected behavior. In this case, you should\n",
        "37": " * override {@code addAll} as well, either providing your own implementation, or\n",
        "38": " * delegating to the provided {@code standardAddAll} method.\n",
        "44": " * <p>Each of the {@code standard} methods, where appropriate, uses the set's\n",
        "45": " * comparator (or the natural ordering of the elements, if there is no\n",
        "46": " * comparator) to test element equality. As a result, if the comparator is not\n",
        "47": " * consistent with equals, some of the standard implementations may violate the\n",
        "48": " * {@code Set} contract.\n",
        "50": " * <p>The {@code standard} methods and the collection views they return are not\n",
        "51": " * guaranteed to be thread-safe, even when all of the methods that they depend\n",
        "52": " * on are thread-safe.\n",
        "107": "   * A sensible definition of {@link #contains} in terms of the {@code first()}\n",
        "108": "   * method of {@link #tailSet}. If you override {@link #tailSet}, you may wish\n",
        "109": "   * to override {@link #contains} to forward to this implementation.\n",
        "128": "   * A sensible definition of {@link #remove} in terms of the {@code iterator()}\n",
        "129": "   * method of {@link #tailSet}. If you override {@link #tailSet}, you may wish\n",
        "130": "   * to override {@link #remove} to forward to this implementation.\n",
        "156": "   * A sensible default implementation of {@link #subSet(Object, Object)} in\n",
        "157": "   * terms of {@link #headSet(Object)} and {@link #tailSet(Object)}. In some\n",
        "158": "   * situations, you may wish to override {@link #subSet(Object, Object)} to\n",
        "159": "   * forward to this implementation.\n"
    }
}