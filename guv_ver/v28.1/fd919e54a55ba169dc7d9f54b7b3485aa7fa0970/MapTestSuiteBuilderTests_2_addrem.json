{
    "addition": {
        "41": " * Tests {@link MapTestSuiteBuilder} by using it against maps that have various negative behaviors.\n",
        "49": "    TestSuite suite = new TestSuite(MapTestSuiteBuilderTests.class.getSimpleName());\n",
        "55": "  private abstract static class WrappedHashMapGenerator extends TestStringMapGenerator {\n",
        "56": "    @Override\n",
        "57": "    protected final Map<String, String> create(Entry<String, String>[] entries) {\n",
        "71": "    Collections.addAll(\n",
        "72": "        featuresList,\n",
        "85": "    return wrappedHashMapTests(\n",
        "86": "        new WrappedHashMapGenerator() {\n",
        "87": "          @Override\n",
        "88": "          Map<String, String> wrap(final HashMap<String, String> map) {\n",
        "89": "            if (map.containsKey(null)) {\n",
        "90": "              throw new NullPointerException();\n",
        "91": "            }\n",
        "92": "            return new AbstractMap<String, String>() {\n",
        "93": "              @Override\n",
        "94": "              public Set<Entry<String, String>> entrySet() {\n",
        "95": "                return map.entrySet();\n",
        "96": "              }\n",
        "97": "\n",
        "98": "              @Override\n",
        "99": "              public String put(String key, String value) {\n",
        "100": "                checkNotNull(key);\n",
        "101": "                return map.put(key, value);\n",
        "102": "              }\n",
        "103": "            };\n",
        "105": "        },\n",
        "106": "        \"HashMap w/out null keys\",\n",
        "107": "        ALLOWS_NULL_VALUES);\n",
        "111": "    return wrappedHashMapTests(\n",
        "112": "        new WrappedHashMapGenerator() {\n",
        "113": "          @Override\n",
        "114": "          Map<String, String> wrap(final HashMap<String, String> map) {\n",
        "115": "            if (map.containsValue(null)) {\n",
        "116": "              throw new NullPointerException();\n",
        "117": "            }\n",
        "118": "            return new AbstractMap<String, String>() {\n",
        "119": "              @Override\n",
        "120": "              public Set<Entry<String, String>> entrySet() {\n",
        "121": "                return map.entrySet();\n",
        "122": "              }\n",
        "123": "\n",
        "124": "              @Override\n",
        "125": "              public String put(String key, String value) {\n",
        "126": "                checkNotNull(value);\n",
        "127": "                return map.put(key, value);\n",
        "128": "              }\n",
        "129": "            };\n",
        "131": "        },\n",
        "132": "        \"HashMap w/out null values\",\n",
        "133": "        ALLOWS_NULL_KEYS);\n"
    },
    "removed": {
        "41": " * Tests {@link MapTestSuiteBuilder} by using it against maps that have various\n",
        "42": " * negative behaviors.\n",
        "50": "    TestSuite suite = new TestSuite(\n",
        "51": "        MapTestSuiteBuilderTests.class.getSimpleName());\n",
        "57": "  private abstract static class WrappedHashMapGenerator\n",
        "58": "      extends TestStringMapGenerator {\n",
        "59": "    @Override protected final Map<String, String> create(\n",
        "60": "        Entry<String, String>[] entries) {\n",
        "74": "    Collections.addAll(featuresList,\n",
        "87": "    return wrappedHashMapTests(new WrappedHashMapGenerator() {\n",
        "88": "      @Override Map<String, String> wrap(final HashMap<String, String> map) {\n",
        "89": "        if (map.containsKey(null)) {\n",
        "90": "          throw new NullPointerException();\n",
        "91": "        }\n",
        "92": "        return new AbstractMap<String, String>() {\n",
        "93": "          @Override public Set<Entry<String, String>> entrySet() {\n",
        "94": "            return map.entrySet();\n",
        "95": "          }\n",
        "96": "          @Override public String put(String key, String value) {\n",
        "97": "            checkNotNull(key);\n",
        "98": "            return map.put(key, value);\n",
        "100": "        };\n",
        "101": "      }\n",
        "102": "    }, \"HashMap w/out null keys\", ALLOWS_NULL_VALUES);\n",
        "106": "    return wrappedHashMapTests(new WrappedHashMapGenerator() {\n",
        "107": "      @Override Map<String, String> wrap(final HashMap<String, String> map) {\n",
        "108": "        if (map.containsValue(null)) {\n",
        "109": "          throw new NullPointerException();\n",
        "110": "        }\n",
        "111": "        return new AbstractMap<String, String>() {\n",
        "112": "          @Override public Set<Entry<String, String>> entrySet() {\n",
        "113": "            return map.entrySet();\n",
        "114": "          }\n",
        "115": "          @Override public String put(String key, String value) {\n",
        "116": "            checkNotNull(value);\n",
        "117": "            return map.put(key, value);\n",
        "119": "        };\n",
        "120": "      }\n",
        "121": "    }, \"HashMap w/out null values\", ALLOWS_NULL_KEYS);\n"
    }
}