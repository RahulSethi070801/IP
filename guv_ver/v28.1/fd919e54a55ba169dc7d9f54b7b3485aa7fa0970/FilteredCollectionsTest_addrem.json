{
    "addition": {
        "40": "  private static final Predicate<Integer> EVEN =\n",
        "41": "      new Predicate<Integer>() {\n",
        "42": "        @Override\n",
        "43": "        public boolean apply(Integer input) {\n",
        "44": "          return input % 2 == 0;\n",
        "45": "        }\n",
        "46": "      };\n",
        "48": "  private static final Predicate<Integer> PRIME_DIGIT = Predicates.in(ImmutableSet.of(2, 3, 5, 7));\n",
        "51": "      ImmutableList.of(\n",
        "52": "          ImmutableList.<Integer>of(),\n",
        "67": "  public abstract static class AbstractFilteredIterableTest<C extends Iterable<Integer>>\n",
        "90": "  public abstract static class AbstractFilteredCollectionTest<C extends Collection<Integer>>\n",
        "95": "        C unfiltered = createUnfiltered(contents);\n",
        "126": "          assertEquals(\n",
        "127": "              contents.contains(toRemove) && EVEN.apply(toRemove),\n",
        "136": "          assertEquals(\n",
        "137": "              EVEN.apply(i) && contents.contains(i),\n",
        "174": "        } catch (IllegalArgumentException expected) {\n",
        "175": "        }\n",
        "180": "        } catch (IllegalArgumentException expected) {\n",
        "181": "        }\n",
        "193": "        C inverseFiltered =\n",
        "194": "            filter(createUnfiltered(contents), Predicates.not(Predicates.and(EVEN, PRIME_DIGIT)));\n",
        "202": "  public abstract static class AbstractFilteredSetTest<C extends Set<Integer>>\n",
        "212": "        new EqualsTester()\n",
        "213": "            .addEqualityGroup(expected, filter(createUnfiltered(contents), EVEN))\n",
        "219": "  public abstract static class AbstractFilteredSortedSetTest<C extends SortedSet<Integer>>\n",
        "253": "          assertEquals(\n",
        "254": "              filter((C) createUnfiltered(contents).headSet(i), EVEN),\n",
        "255": "              filter(createUnfiltered(contents), EVEN).headSet(i));\n",
        "276": "            assertEquals(\n",
        "277": "                filter((C) createUnfiltered(contents).subSet(i, j), EVEN),\n",
        "278": "                filter(createUnfiltered(contents), EVEN).subSet(i, j));\n",
        "285": "  public abstract static class AbstractFilteredNavigableSetTest\n",
        "318": "                NavigableSet<Integer> filterSubset =\n",
        "319": "                    filter(\n",
        "320": "                        createUnfiltered(contents).subSet(i, fromInclusive, j, toInclusive), EVEN);\n",
        "321": "                NavigableSet<Integer> subsetFilter =\n",
        "322": "                    filter(createUnfiltered(contents), EVEN)\n",
        "323": "                        .subSet(i, fromInclusive, j, toInclusive);\n",
        "405": "  public static final class SetsFilterHashSetTest extends AbstractFilteredSetTest<Set<Integer>> {\n",
        "451": "  public void testNoop() {}\n"
    },
    "removed": {
        "40": "  private static final Predicate<Integer> EVEN = new Predicate<Integer>() {\n",
        "41": "    @Override\n",
        "42": "    public boolean apply(Integer input) {\n",
        "43": "      return input % 2 == 0;\n",
        "44": "    }\n",
        "45": "  };\n",
        "47": "  private static final Predicate<Integer> PRIME_DIGIT =\n",
        "48": "      Predicates.in(ImmutableSet.of(2, 3, 5, 7));\n",
        "51": "      ImmutableList.of(ImmutableList.<Integer>of(),\n",
        "66": "  public static abstract class AbstractFilteredIterableTest<C extends Iterable<Integer>>\n",
        "89": "  public static abstract class AbstractFilteredCollectionTest<C extends Collection<Integer>>\n",
        "94": "        C unfiltered  = createUnfiltered(contents);\n",
        "125": "          assertEquals(contents.contains(toRemove) && EVEN.apply(toRemove),\n",
        "134": "          assertEquals(EVEN.apply(i) && contents.contains(i),\n",
        "171": "        } catch (IllegalArgumentException expected) {}\n",
        "176": "        } catch (IllegalArgumentException expected) {}\n",
        "188": "        C inverseFiltered = filter(createUnfiltered(contents),\n",
        "189": "            Predicates.not(Predicates.and(EVEN, PRIME_DIGIT)));\n",
        "197": "  public static abstract class AbstractFilteredSetTest<C extends Set<Integer>>\n",
        "207": "        new EqualsTester().addEqualityGroup(expected, filter(createUnfiltered(contents), EVEN))\n",
        "213": "  public static abstract class AbstractFilteredSortedSetTest<C extends SortedSet<Integer>>\n",
        "247": "            assertEquals(\n",
        "248": "                filter((C) createUnfiltered(contents).headSet(i), EVEN),\n",
        "249": "                filter(createUnfiltered(contents), EVEN).headSet(i));\n",
        "270": "          assertEquals(\n",
        "271": "              filter((C) createUnfiltered(contents).subSet(i, j), EVEN),\n",
        "272": "              filter(createUnfiltered(contents), EVEN).subSet(i, j));\n",
        "279": "  public static abstract class AbstractFilteredNavigableSetTest\n",
        "312": "                NavigableSet<Integer> filterSubset = filter(\n",
        "313": "                    createUnfiltered(contents).subSet(i, fromInclusive, j, toInclusive), EVEN);\n",
        "314": "                NavigableSet<Integer> subsetFilter = filter(createUnfiltered(contents), EVEN)\n",
        "315": "                    .subSet(i, fromInclusive, j, toInclusive);\n",
        "397": "  public static final class SetsFilterHashSetTest\n",
        "398": "      extends AbstractFilteredSetTest<Set<Integer>> {\n",
        "444": "  public void testNoop() {\n",
        "445": "  }\n"
    }
}