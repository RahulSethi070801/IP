{
    "addition": {
        "29": " * A collection that associates an ordered pair of keys, called a row key and a column key, with a\n",
        "30": " * single value. A table may be sparse, with only a small fraction of row key / column key pairs\n",
        "31": " * possessing a corresponding value.\n",
        "33": " * <p>The mappings corresponding to a given row key may be viewed as a {@link Map} whose keys are\n",
        "34": " * the columns. The reverse is also available, associating a column with a row key / value map. Note\n",
        "35": " * that, in some implementations, data access by column key may have fewer supported operations or\n",
        "36": " * worse performance than data access by row key.\n",
        "38": " * <p>The methods returning collections or maps always return views of the underlying table.\n",
        "39": " * Updating the table can change the contents of those collections, and updating the collections\n",
        "40": " * will change the table.\n",
        "42": " * <p>All methods that modify the table are optional, and the views returned by the table may or may\n",
        "43": " * not be modifiable. When modification isn't supported, those methods will throw an {@link\n",
        "44": " * UnsupportedOperationException}.\n",
        "47": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#table\"> {@code Table}</a>.\n",
        "106": "  /** Returns the number of row key / column key / value mappings in the table. */\n",
        "110": "   * Compares the specified object with this table for equality. Two tables are equal when their\n",
        "111": "   * cell views, as returned by {@link #cellSet}, are equal.\n",
        "117": "   * Returns the hash code for this table. The hash code of a table is defined as the hash code of\n",
        "118": "   * its cell view, as returned by {@link #cellSet}.\n",
        "129": "   * Associates the specified value with the specified keys. If the table already contained a\n",
        "130": "   * mapping for those keys, the old value is replaced with the specified value.\n",
        "135": "   * @return the value previously associated with the keys, or {@code null} if no mapping existed\n",
        "136": "   *     for the keys\n",
        "143": "   * Copies all mappings from the specified table to this table. The effect is equivalent to calling\n",
        "144": "   * {@link #put} with each row key / column key / value mapping in {@code table}.\n",
        "166": "   * Returns a view of all mappings that have the given row key. For each row key / column key /\n",
        "167": "   * value mapping in the table with that row key, the returned map associates the column key with\n",
        "168": "   * the value. If no mappings in the table have the provided row key, an empty map is returned.\n",
        "170": "   * <p>Changes to the returned map will update the underlying table, and vice versa.\n",
        "178": "   * Returns a view of all mappings that have the given column key. For each row key / column key /\n",
        "179": "   * value mapping in the table with that column key, the returned map associates the row key with\n",
        "180": "   * the value. If no mappings in the table have the provided column key, an empty map is returned.\n",
        "182": "   * <p>Changes to the returned map will update the underlying table, and vice versa.\n",
        "190": "   * Returns a set of all row key / column key / value triplets. Changes to the returned set will\n",
        "191": "   * update the underlying table, and vice versa. The cell set does not support the {@code add} or\n",
        "192": "   * {@code addAll} methods.\n",
        "194": "   * @return set of table cells consisting of row key / column key / value triplets\n",
        "199": "   * Returns a set of row keys that have one or more values in the table. Changes to the set will\n",
        "200": "   * update the underlying table, and vice versa.\n",
        "207": "   * Returns a set of column keys that have one or more values in the table. Changes to the set will\n",
        "208": "   * update the underlying table, and vice versa.\n",
        "215": "   * Returns a collection of all values, which may contain duplicates. Changes to the returned\n",
        "216": "   * collection will update the underlying table, and vice versa.\n",
        "223": "   * Returns a view that associates each row key with the corresponding map from column keys to\n",
        "224": "   * values. Changes to the returned map will update this table. The returned map does not support\n",
        "225": "   * {@code put()} or {@code putAll()}, or {@code setValue()} on its entries.\n",
        "227": "   * <p>In contrast, the maps returned by {@code rowMap().get()} have the same behavior as those\n",
        "228": "   * returned by {@link #row}. Those maps may support {@code setValue()}, {@code put()}, and {@code\n",
        "229": "   * putAll()}.\n",
        "231": "   * @return a map view from each row key to a secondary map from column keys to values\n",
        "236": "   * Returns a view that associates each column key with the corresponding map from row keys to\n",
        "237": "   * values. Changes to the returned map will update this table. The returned map does not support\n",
        "238": "   * {@code put()} or {@code putAll()}, or {@code setValue()} on its entries.\n",
        "240": "   * <p>In contrast, the maps returned by {@code columnMap().get()} have the same behavior as those\n",
        "241": "   * returned by {@link #column}. Those maps may support {@code setValue()}, {@code put()}, and\n",
        "242": "   * {@code putAll()}.\n",
        "244": "   * @return a map view from each column key to a secondary map from row keys to values\n",
        "254": "    /** Returns the row key of this cell. */\n",
        "258": "    /** Returns the column key of this cell. */\n",
        "262": "    /** Returns the value of this cell. */\n",
        "267": "     * Compares the specified object with this cell for equality. Two cells are equal when they have\n",
        "268": "     * equal row keys, column keys, and values.\n",
        "276": "     * <p>The hash code of a table cell is equal to {@link Objects#hashCode}{@code (e.getRowKey(),\n",
        "277": "     * e.getColumnKey(), e.getValue())}.\n"
    },
    "removed": {
        "29": " * A collection that associates an ordered pair of keys, called a row key and a\n",
        "30": " * column key, with a single value. A table may be sparse, with only a small\n",
        "31": " * fraction of row key / column key pairs possessing a corresponding value.\n",
        "33": " * <p>The mappings corresponding to a given row key may be viewed as a {@link\n",
        "34": " * Map} whose keys are the columns. The reverse is also available, associating a\n",
        "35": " * column with a row key / value map. Note that, in some implementations, data\n",
        "36": " * access by column key may have fewer supported operations or worse performance\n",
        "37": " * than data access by row key.\n",
        "39": " * <p>The methods returning collections or maps always return views of the\n",
        "40": " * underlying table. Updating the table can change the contents of those\n",
        "41": " * collections, and updating the collections will change the table.\n",
        "43": " * <p>All methods that modify the table are optional, and the views returned by\n",
        "44": " * the table may or may not be modifiable. When modification isn't supported,\n",
        "45": " * those methods will throw an {@link UnsupportedOperationException}.\n",
        "48": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#table\">\n",
        "49": " * {@code Table}</a>.\n",
        "108": "  /**\n",
        "109": "   * Returns the number of row key / column key / value mappings in the table.\n",
        "110": "   */\n",
        "114": "   * Compares the specified object with this table for equality. Two tables are\n",
        "115": "   * equal when their cell views, as returned by {@link #cellSet}, are equal.\n",
        "121": "   * Returns the hash code for this table. The hash code of a table is defined\n",
        "122": "   * as the hash code of its cell view, as returned by {@link #cellSet}.\n",
        "133": "   * Associates the specified value with the specified keys. If the table\n",
        "134": "   * already contained a mapping for those keys, the old value is replaced with\n",
        "135": "   * the specified value.\n",
        "140": "   * @return the value previously associated with the keys, or {@code null} if\n",
        "141": "   *     no mapping existed for the keys\n",
        "148": "   * Copies all mappings from the specified table to this table. The effect is\n",
        "149": "   * equivalent to calling {@link #put} with each row key / column key / value\n",
        "150": "   * mapping in {@code table}.\n",
        "172": "   * Returns a view of all mappings that have the given row key. For each row\n",
        "173": "   * key / column key / value mapping in the table with that row key, the\n",
        "174": "   * returned map associates the column key with the value. If no mappings in\n",
        "175": "   * the table have the provided row key, an empty map is returned.\n",
        "177": "   * <p>Changes to the returned map will update the underlying table, and vice\n",
        "178": "   * versa.\n",
        "186": "   * Returns a view of all mappings that have the given column key. For each row\n",
        "187": "   * key / column key / value mapping in the table with that column key, the\n",
        "188": "   * returned map associates the row key with the value. If no mappings in the\n",
        "189": "   * table have the provided column key, an empty map is returned.\n",
        "191": "   * <p>Changes to the returned map will update the underlying table, and vice\n",
        "192": "   * versa.\n",
        "200": "   * Returns a set of all row key / column key / value triplets. Changes to the\n",
        "201": "   * returned set will update the underlying table, and vice versa. The cell set\n",
        "202": "   * does not support the {@code add} or {@code addAll} methods.\n",
        "204": "   * @return set of table cells consisting of row key / column key / value\n",
        "205": "   *     triplets\n",
        "210": "   * Returns a set of row keys that have one or more values in the table.\n",
        "211": "   * Changes to the set will update the underlying table, and vice versa.\n",
        "218": "   * Returns a set of column keys that have one or more values in the table.\n",
        "219": "   * Changes to the set will update the underlying table, and vice versa.\n",
        "226": "   * Returns a collection of all values, which may contain duplicates. Changes\n",
        "227": "   * to the returned collection will update the underlying table, and vice\n",
        "228": "   * versa.\n",
        "235": "   * Returns a view that associates each row key with the corresponding map from\n",
        "236": "   * column keys to values. Changes to the returned map will update this table.\n",
        "237": "   * The returned map does not support {@code put()} or {@code putAll()}, or\n",
        "238": "   * {@code setValue()} on its entries.\n",
        "240": "   * <p>In contrast, the maps returned by {@code rowMap().get()} have the same\n",
        "241": "   * behavior as those returned by {@link #row}. Those maps may support {@code\n",
        "242": "   * setValue()}, {@code put()}, and {@code putAll()}.\n",
        "244": "   * @return a map view from each row key to a secondary map from column keys to\n",
        "245": "   *     values\n",
        "250": "   * Returns a view that associates each column key with the corresponding map\n",
        "251": "   * from row keys to values. Changes to the returned map will update this\n",
        "252": "   * table. The returned map does not support {@code put()} or {@code putAll()},\n",
        "253": "   * or {@code setValue()} on its entries.\n",
        "255": "   * <p>In contrast, the maps returned by {@code columnMap().get()} have the\n",
        "256": "   * same behavior as those returned by {@link #column}. Those maps may support\n",
        "257": "   * {@code setValue()}, {@code put()}, and {@code putAll()}.\n",
        "259": "   * @return a map view from each column key to a secondary map from row keys to\n",
        "260": "   *     values\n",
        "270": "    /**\n",
        "271": "     * Returns the row key of this cell.\n",
        "272": "     */\n",
        "276": "    /**\n",
        "277": "     * Returns the column key of this cell.\n",
        "278": "     */\n",
        "282": "    /**\n",
        "283": "     * Returns the value of this cell.\n",
        "284": "     */\n",
        "289": "     * Compares the specified object with this cell for equality. Two cells are\n",
        "290": "     * equal when they have equal row keys, column keys, and values.\n",
        "298": "     * <p>The hash code of a table cell is equal to {@link\n",
        "299": "     * Objects#hashCode}{@code (e.getRowKey(), e.getColumnKey(), e.getValue())}.\n"
    }
}