{
    "addition": {
        "28": " * Since annotations have some reusability issues that force copy and paste all over the place, it's\n",
        "29": " * worth having a test to ensure that all our Feature enums have their annotations correctly set up.\n",
        "34": "  private static void assertGoodTesterAnnotation(Class<? extends Annotation> annotationClass) {\n",
        "36": "        rootLocaleFormat(\"%s must be annotated with @TesterAnnotation.\", annotationClass),\n",
        "38": "    final Retention retentionPolicy = annotationClass.getAnnotation(Retention.class);\n",
        "44": "        RetentionPolicy.RUNTIME,\n",
        "45": "        retentionPolicy.value());\n",
        "50": "    for (String propertyName : new String[] {\"value\", \"absent\"}) {\n",
        "55": "        fail(\n",
        "56": "            rootLocaleFormat(\"%s must have a property named '%s'.\", annotationClass, propertyName));\n",
        "59": "      assertTrue(\n",
        "60": "          rootLocaleFormat(\"%s.%s() must return an array.\", annotationClass, propertyName),\n",
        "62": "      assertSame(\n",
        "63": "          rootLocaleFormat(\n",
        "64": "              \"%s.%s() must return an array of %s.\",\n",
        "65": "              annotationClass, propertyName, annotationClass.getDeclaringClass()),\n",
        "66": "          annotationClass.getDeclaringClass(),\n",
        "67": "          returnType.getComponentType());\n",
        "81": "          fail(\n",
        "82": "              rootLocaleFormat(\n",
        "83": "                  \"Feature enum %s contains a class named \"\n",
        "84": "                      + \"'Require' but it is not an annotation.\",\n",
        "85": "                  featureEnumClass));\n",
        "90": "    fail(\n",
        "91": "        rootLocaleFormat(\n",
        "92": "            \"Feature enum %s should contain an \" + \"annotation named 'Require'.\",\n",
        "93": "            featureEnumClass));\n",
        "101": "      throw new IllegalArgumentException(rootLocaleFormat(\"%s is not an annotation.\", clazz));\n"
    },
    "removed": {
        "28": " * Since annotations have some reusability issues that force copy and paste\n",
        "29": " * all over the place, it's worth having a test to ensure that all our Feature\n",
        "30": " * enums have their annotations correctly set up.\n",
        "35": "  private static void assertGoodTesterAnnotation(\n",
        "36": "      Class<? extends Annotation> annotationClass) {\n",
        "38": "        rootLocaleFormat(\"%s must be annotated with @TesterAnnotation.\",\n",
        "39": "            annotationClass),\n",
        "41": "    final Retention retentionPolicy =\n",
        "42": "        annotationClass.getAnnotation(Retention.class);\n",
        "48": "        RetentionPolicy.RUNTIME, retentionPolicy.value());\n",
        "53": "    for (String propertyName : new String[]{\"value\", \"absent\"}) {\n",
        "58": "        fail(rootLocaleFormat(\"%s must have a property named '%s'.\",\n",
        "59": "            annotationClass, propertyName));\n",
        "62": "      assertTrue(rootLocaleFormat(\"%s.%s() must return an array.\",\n",
        "63": "          annotationClass, propertyName),\n",
        "65": "      assertSame(rootLocaleFormat(\"%s.%s() must return an array of %s.\",\n",
        "66": "          annotationClass, propertyName, annotationClass.getDeclaringClass()),\n",
        "67": "          annotationClass.getDeclaringClass(), returnType.getComponentType());\n",
        "81": "          fail(rootLocaleFormat(\"Feature enum %s contains a class named \"\n",
        "82": "              + \"'Require' but it is not an annotation.\", featureEnumClass));\n",
        "87": "    fail(rootLocaleFormat(\"Feature enum %s should contain an \"\n",
        "88": "        + \"annotation named 'Require'.\", featureEnumClass));\n",
        "96": "      throw new IllegalArgumentException(\n",
        "97": "          rootLocaleFormat(\"%s is not an annotation.\", clazz));\n"
    }
}