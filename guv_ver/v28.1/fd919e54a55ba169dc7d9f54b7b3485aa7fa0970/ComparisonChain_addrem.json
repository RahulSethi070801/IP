{
    "addition": {
        "29": " * <pre>{@code\n",
        "30": " * public int compareTo(Foo that) {\n",
        "31": " *   return ComparisonChain.start()\n",
        "32": " *       .compare(this.aString, that.aString)\n",
        "33": " *       .compare(this.anInt, that.anInt)\n",
        "34": " *       .compare(this.anEnum, that.anEnum, Ordering.natural().nullsLast())\n",
        "35": " *       .result();\n",
        "36": " * }\n",
        "37": " * }</pre>\n",
        "39": " * <p>The value of this expression will have the same sign as the <i>first nonzero</i> comparison\n",
        "40": " * result in the chain, or will be zero if every comparison result was zero.\n",
        "42": " * <p><b>Note:</b> {@code ComparisonChain} instances are <b>immutable</b>. For this utility to work\n",
        "43": " * correctly, calls must be chained as illustrated above.\n",
        "45": " * <p>Performance note: Even though the {@code ComparisonChain} caller always invokes its {@code\n",
        "46": " * compare} methods unconditionally, the {@code ComparisonChain} implementation stops calling its\n",
        "47": " * inputs' {@link Comparable#compareTo compareTo} and {@link Comparator#compare compare} methods as\n",
        "48": " * soon as one of them returns a nonzero result. This optimization is typically important only in\n",
        "49": " * the presence of expensive {@code compareTo} and {@code compare} implementations.\n",
        "52": " * \"https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained#comparecompareto\"> {@code\n",
        "53": " * ComparisonChain}</a>.\n",
        "63": "  /** Begins a new chained comparison statement. See example in the class documentation. */\n",
        "181": "   * Compares two comparable objects as specified by {@link Comparable#compareTo}, <i>if</i> the\n",
        "182": "   * result of this comparison chain has not already been determined.\n",
        "187": "   * Compares two objects using a comparator, <i>if</i> the result of this comparison chain has not\n",
        "188": "   * already been determined.\n",
        "194": "   * Compares two {@code int} values as specified by {@link Ints#compare}, <i>if</i> the result of\n",
        "195": "   * this comparison chain has not already been determined.\n",
        "200": "   * Compares two {@code long} values as specified by {@link Longs#compare}, <i>if</i> the result of\n",
        "201": "   * this comparison chain has not already been determined.\n",
        "206": "   * Compares two {@code float} values as specified by {@link Float#compare}, <i>if</i> the result\n",
        "207": "   * of this comparison chain has not already been determined.\n",
        "212": "   * Compares two {@code double} values as specified by {@link Double#compare}, <i>if</i> the result\n",
        "213": "   * of this comparison chain has not already been determined.\n",
        "220": "   * @deprecated Use {@link #compareFalseFirst}; or, if the parameters passed are being either\n",
        "221": "   *     negated or reversed, undo the negation or reversal and use {@link #compareTrueFirst}.\n",
        "230": "   * Compares two {@code boolean} values, considering {@code true} to be less than {@code false},\n",
        "231": "   * <i>if</i> the result of this comparison chain has not already been determined.\n",
        "238": "   * Compares two {@code boolean} values, considering {@code false} to be less than {@code true},\n",
        "239": "   * <i>if</i> the result of this comparison chain has not already been determined.\n",
        "246": "   * Ends this comparison chain and returns its result: a value having the same sign as the first\n",
        "247": "   * nonzero comparison result in the chain, or zero if every result was zero.\n"
    },
    "removed": {
        "28": " * <pre>   {@code\n",
        "30": " *   public int compareTo(Foo that) {\n",
        "31": " *     return ComparisonChain.start()\n",
        "32": " *         .compare(this.aString, that.aString)\n",
        "33": " *         .compare(this.anInt, that.anInt)\n",
        "34": " *         .compare(this.anEnum, that.anEnum, Ordering.natural().nullsLast())\n",
        "35": " *         .result();\n",
        "36": " *   }}</pre>\n",
        "38": " * <p>The value of this expression will have the same sign as the <i>first\n",
        "39": " * nonzero</i> comparison result in the chain, or will be zero if every\n",
        "40": " * comparison result was zero.\n",
        "42": " * <p><b>Note:</b> {@code ComparisonChain} instances are <b>immutable</b>. For\n",
        "43": " * this utility to work correctly, calls must be chained as illustrated above.\n",
        "45": " * <p>Performance note: Even though the {@code ComparisonChain} caller always\n",
        "46": " * invokes its {@code compare} methods unconditionally, the {@code\n",
        "47": " * ComparisonChain} implementation stops calling its inputs' {@link\n",
        "48": " * Comparable#compareTo compareTo} and {@link Comparator#compare compare}\n",
        "49": " * methods as soon as one of them returns a nonzero result. This optimization is\n",
        "50": " * typically important only in the presence of expensive {@code compareTo} and\n",
        "51": " * {@code compare} implementations.\n",
        "54": " * \"https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained#comparecompareto\">\n",
        "55": " * {@code ComparisonChain}</a>.\n",
        "65": "  /**\n",
        "66": "   * Begins a new chained comparison statement. See example in the class\n",
        "67": "   * documentation.\n",
        "68": "   */\n",
        "186": "   * Compares two comparable objects as specified by {@link\n",
        "187": "   * Comparable#compareTo}, <i>if</i> the result of this comparison chain\n",
        "188": "   * has not already been determined.\n",
        "193": "   * Compares two objects using a comparator, <i>if</i> the result of this\n",
        "194": "   * comparison chain has not already been determined.\n",
        "200": "   * Compares two {@code int} values as specified by {@link Ints#compare},\n",
        "201": "   * <i>if</i> the result of this comparison chain has not already been\n",
        "202": "   * determined.\n",
        "207": "   * Compares two {@code long} values as specified by {@link Longs#compare},\n",
        "208": "   * <i>if</i> the result of this comparison chain has not already been\n",
        "209": "   * determined.\n",
        "214": "   * Compares two {@code float} values as specified by {@link\n",
        "215": "   * Float#compare}, <i>if</i> the result of this comparison chain has not\n",
        "216": "   * already been determined.\n",
        "221": "   * Compares two {@code double} values as specified by {@link\n",
        "222": "   * Double#compare}, <i>if</i> the result of this comparison chain has not\n",
        "223": "   * already been determined.\n",
        "230": "   * @deprecated Use {@link #compareFalseFirst}; or, if the parameters passed\n",
        "231": "   *     are being either negated or reversed, undo the negation or reversal and\n",
        "232": "   *     use {@link #compareTrueFirst}.\n",
        "241": "   * Compares two {@code boolean} values, considering {@code true} to be less\n",
        "242": "   * than {@code false}, <i>if</i> the result of this comparison chain has not\n",
        "243": "   * already been determined.\n",
        "250": "   * Compares two {@code boolean} values, considering {@code false} to be less\n",
        "251": "   * than {@code true}, <i>if</i> the result of this comparison chain has not\n",
        "252": "   * already been determined.\n",
        "259": "   * Ends this comparison chain and returns its result: a value having the\n",
        "260": "   * same sign as the first nonzero comparison result in the chain, or zero if\n",
        "261": "   * every result was zero.\n"
    }
}