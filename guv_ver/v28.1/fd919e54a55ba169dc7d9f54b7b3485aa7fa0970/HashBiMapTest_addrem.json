{
    "addition": {
        "58": "    suite.addTest(\n",
        "59": "        BiMapTestSuiteBuilder.using(new HashBiMapGenerator())\n",
        "60": "            .named(\"HashBiMap\")\n",
        "61": "            .withFeatures(\n",
        "62": "                CollectionSize.ANY,\n",
        "63": "                CollectionFeature.SERIALIZABLE,\n",
        "64": "                CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "65": "                CollectionFeature.KNOWN_ORDER,\n",
        "66": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "67": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "68": "                MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "69": "                MapFeature.GENERAL_PURPOSE)\n",
        "70": "            .createTestSuite());\n",
        "77": "    Map<String, String> map =\n",
        "78": "        ImmutableMap.of(\n",
        "79": "            \"canada\", \"dollar\",\n",
        "80": "            \"chile\", \"peso\",\n",
        "81": "            \"switzerland\", \"franc\");\n",
        "139": "    assertThat(map.entrySet())\n",
        "140": "        .containsExactly(\n",
        "141": "            Maps.immutableEntry(\"foo\", 1),\n",
        "142": "            Maps.immutableEntry(\"bar\", 2),\n",
        "143": "            Maps.immutableEntry(\"quux\", 3))\n",
        "144": "        .inOrder();\n",
        "154": "    assertThat(map.entrySet())\n",
        "155": "        .containsExactly(Maps.immutableEntry(\"bar\", 2), Maps.immutableEntry(\"quux\", 3))\n",
        "156": "        .inOrder();\n",
        "166": "    assertThat(map.entrySet())\n",
        "167": "        .containsExactly(Maps.immutableEntry(\"foo\", 1), Maps.immutableEntry(\"quux\", 3))\n",
        "168": "        .inOrder();\n",
        "178": "    assertThat(map.entrySet())\n",
        "179": "        .containsExactly(Maps.immutableEntry(\"foo\", 1), Maps.immutableEntry(\"bar\", 2))\n",
        "180": "        .inOrder();\n",
        "190": "    assertThat(map.entrySet())\n",
        "191": "        .containsExactly(Maps.immutableEntry(\"bar\", 2), Maps.immutableEntry(\"quux\", 1))\n",
        "192": "        .inOrder();\n",
        "202": "    assertThat(map.entrySet())\n",
        "203": "        .containsExactly(Maps.immutableEntry(\"bar\", 2), Maps.immutableEntry(\"quux\", 1))\n",
        "204": "        .inOrder();\n",
        "224": "    assertThat(map.inverse().entrySet())\n",
        "225": "        .containsExactly(Maps.immutableEntry(2, \"bar\"), Maps.immutableEntry(1, \"quux\"))\n",
        "226": "        .inOrder();\n"
    },
    "removed": {
        "58": "    suite.addTest(BiMapTestSuiteBuilder.using(new HashBiMapGenerator())\n",
        "59": "      .named(\"HashBiMap\")\n",
        "60": "      .withFeatures(CollectionSize.ANY,\n",
        "61": "          CollectionFeature.SERIALIZABLE,\n",
        "62": "          CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "63": "          CollectionFeature.KNOWN_ORDER,\n",
        "64": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "65": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "66": "          MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "67": "          MapFeature.GENERAL_PURPOSE)\n",
        "68": "      .createTestSuite());\n",
        "75": "    Map<String, String> map = ImmutableMap.of(\n",
        "76": "        \"canada\", \"dollar\",\n",
        "77": "        \"chile\", \"peso\",\n",
        "78": "        \"switzerland\", \"franc\");\n",
        "136": "    assertThat(map.entrySet()).containsExactly(\n",
        "137": "        Maps.immutableEntry(\"foo\", 1),\n",
        "138": "        Maps.immutableEntry(\"bar\", 2),\n",
        "139": "        Maps.immutableEntry(\"quux\", 3)).inOrder();\n",
        "149": "    assertThat(map.entrySet()).containsExactly(\n",
        "150": "        Maps.immutableEntry(\"bar\", 2),\n",
        "151": "        Maps.immutableEntry(\"quux\", 3)).inOrder();\n",
        "161": "    assertThat(map.entrySet()).containsExactly(\n",
        "162": "        Maps.immutableEntry(\"foo\", 1),\n",
        "163": "        Maps.immutableEntry(\"quux\", 3)).inOrder();\n",
        "173": "    assertThat(map.entrySet()).containsExactly(\n",
        "174": "        Maps.immutableEntry(\"foo\", 1),\n",
        "175": "        Maps.immutableEntry(\"bar\", 2)).inOrder();\n",
        "185": "    assertThat(map.entrySet()).containsExactly(\n",
        "186": "        Maps.immutableEntry(\"bar\", 2),\n",
        "187": "        Maps.immutableEntry(\"quux\", 1)).inOrder();\n",
        "197": "    assertThat(map.entrySet()).containsExactly(\n",
        "198": "        Maps.immutableEntry(\"bar\", 2),\n",
        "199": "        Maps.immutableEntry(\"quux\", 1)).inOrder();\n",
        "219": "    assertThat(map.inverse().entrySet()).containsExactly(\n",
        "220": "        Maps.immutableEntry(2, \"bar\"),\n",
        "221": "        Maps.immutableEntry(1, \"quux\")).inOrder();\n"
    }
}