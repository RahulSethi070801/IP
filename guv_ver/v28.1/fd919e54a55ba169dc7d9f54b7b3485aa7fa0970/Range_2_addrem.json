{
    "addition": {
        "159": "   * Returns a range that contains all values strictly greater than {@code lower} and strictly less\n",
        "160": "   * than {@code upper}.\n",
        "162": "   * @throws IllegalArgumentException if {@code lower} is greater than <i>or equal to</i> {@code\n",
        "163": "   *     upper}\n",
        "171": "   * Returns a range that contains all values greater than or equal to {@code lower} and less than\n",
        "172": "   * or equal to {@code upper}.\n",
        "174": "   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}\n",
        "182": "   * Returns a range that contains all values greater than or equal to {@code lower} and strictly\n",
        "183": "   * less than {@code upper}.\n",
        "185": "   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}\n",
        "193": "   * Returns a range that contains all values strictly greater than {@code lower} and less than or\n",
        "194": "   * equal to {@code upper}.\n",
        "196": "   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}\n",
        "204": "   * Returns a range that contains any value from {@code lower} to {@code upper}, where each\n",
        "205": "   * endpoint may be either inclusive (closed) or exclusive (open).\n",
        "207": "   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}\n",
        "223": "   * Returns a range that contains all values strictly less than {@code endpoint}.\n",
        "232": "   * Returns a range that contains all values less than or equal to {@code endpoint}.\n",
        "241": "   * Returns a range with no lower bound up to the given endpoint, which may be either inclusive\n",
        "242": "   * (closed) or exclusive (open).\n",
        "258": "   * Returns a range that contains all values strictly greater than {@code endpoint}.\n",
        "267": "   * Returns a range that contains all values greater than or equal to {@code endpoint}.\n",
        "276": "   * Returns a range from the given endpoint, which may be either inclusive (closed) or exclusive\n",
        "277": "   * (open), with no upper bound.\n",
        "305": "   * Returns a range that {@linkplain Range#contains(Comparable) contains} only the given value. The\n",
        "306": "   * returned range is {@linkplain BoundType#CLOSED closed} on both ends.\n",
        "315": "   * Returns the minimal range that {@linkplain Range#contains(Comparable) contains} all of the\n",
        "316": "   * given values. The returned range is {@linkplain BoundType#CLOSED closed} on both ends.\n",
        "318": "   * @throws ClassCastException if the parameters are not <i>mutually comparable</i>\n",
        "356": "  /** Returns {@code true} if this range has a lower endpoint. */\n",
        "382": "  /** Returns {@code true} if this range has an upper endpoint. */\n",
        "414": "   * considered empty, even though they contain no actual values. In these cases, it may be helpful\n",
        "415": "   * to preprocess ranges with {@link #canonical(DiscreteDomain)}.\n",
        "473": "   *   <li>{@code [3..6]} encloses {@code [4..5]}\n",
        "474": "   *   <li>{@code (3..6)} encloses {@code (3..6)}\n",
        "475": "   *   <li>{@code [3..6]} encloses {@code [4..4)} (even though the latter is empty)\n",
        "476": "   *   <li>{@code (3..6]} does not enclose {@code [3..6]}\n",
        "477": "   *   <li>{@code [4..5]} does not enclose {@code (3..6)} (even though it contains every value\n",
        "478": "   *       contained by the latter range)\n",
        "479": "   *   <li>{@code [3..6]} does not enclose {@code (1..1]} (even though it contains every value\n",
        "480": "   *       contained by the latter range)\n",
        "483": "   * <p>Note that if {@code a.encloses(b)}, then {@code b.contains(v)} implies {@code\n",
        "484": "   * a.contains(v)}, but as the last two examples illustrate, the converse is not always true.\n",
        "501": "   *\n",
        "503": "   *   <li>{@code [2, 4)} and {@code [5, 7)} are not connected\n",
        "504": "   *   <li>{@code [2, 4)} and {@code [3, 5)} are connected, because both enclose {@code [3, 4)}\n",
        "505": "   *   <li>{@code [2, 4)} and {@code [4, 6)} are connected, because both enclose the empty range\n",
        "506": "   *       {@code [4, 4)}\n",
        "517": "   * elements \"between them.\" For example, {@code [3, 5]} is not considered connected to {@code [6,\n",
        "518": "   * 10]}. In these cases, it may be desirable for both input ranges to be preprocessed with {@link\n",
        "519": "   * #canonical(DiscreteDomain)} before testing for connectedness.\n",
        "586": "   *   <li>equivalence: {@code a.canonical().contains(v) == a.contains(v)} for all {@code v} (in\n",
        "587": "   *       other words, {@code ContiguousSet.create(a.canonical(domain), domain).equals(\n",
        "588": "   *       ContiguousSet.create(a, domain))}\n",
        "589": "   *   <li>uniqueness: unless {@code a.isEmpty()}, {@code ContiguousSet.create(a,\n",
        "590": "   *       domain).equals(ContiguousSet.create(b, domain))} implies {@code\n",
        "591": "   *       a.canonical(domain).equals(b.canonical(domain))}\n",
        "592": "   *   <li>idempotence: {@code a.canonical(domain).canonical(domain).equals(a.canonical(domain))}\n",
        "599": "   *   <li>[start..end)\n",
        "600": "   *   <li>[start..+\u221e)\n",
        "601": "   *   <li>(-\u221e..end) (only if type {@code C} is unbounded below)\n",
        "602": "   *   <li>(-\u221e..+\u221e) (only if type {@code C} is unbounded below)\n",
        "651": "  /** Used to avoid http://bugs.sun.com/view_bug.do?bug_id=6558557 */\n",
        "669": "  /** Needed to serialize sorted collections of Ranges. */\n"
    },
    "removed": {
        "157": "   * Returns a range that contains all values strictly greater than {@code\n",
        "158": "   * lower} and strictly less than {@code upper}.\n",
        "160": "   * @throws IllegalArgumentException if {@code lower} is greater than <i>or\n",
        "161": "   *     equal to</i> {@code upper}\n",
        "169": "   * Returns a range that contains all values greater than or equal to\n",
        "170": "   * {@code lower} and less than or equal to {@code upper}.\n",
        "172": "   * @throws IllegalArgumentException if {@code lower} is greater than {@code\n",
        "173": "   *     upper}\n",
        "181": "   * Returns a range that contains all values greater than or equal to\n",
        "182": "   * {@code lower} and strictly less than {@code upper}.\n",
        "184": "   * @throws IllegalArgumentException if {@code lower} is greater than {@code\n",
        "185": "   *     upper}\n",
        "193": "   * Returns a range that contains all values strictly greater than {@code\n",
        "194": "   * lower} and less than or equal to {@code upper}.\n",
        "196": "   * @throws IllegalArgumentException if {@code lower} is greater than {@code\n",
        "197": "   *     upper}\n",
        "205": "   * Returns a range that contains any value from {@code lower} to {@code\n",
        "206": "   * upper}, where each endpoint may be either inclusive (closed) or exclusive\n",
        "207": "   * (open).\n",
        "209": "   * @throws IllegalArgumentException if {@code lower} is greater than {@code\n",
        "210": "   *     upper}\n",
        "226": "   * Returns a range that contains all values strictly less than {@code\n",
        "227": "   * endpoint}.\n",
        "236": "   * Returns a range that contains all values less than or equal to\n",
        "237": "   * {@code endpoint}.\n",
        "246": "   * Returns a range with no lower bound up to the given endpoint, which may be\n",
        "247": "   * either inclusive (closed) or exclusive (open).\n",
        "263": "   * Returns a range that contains all values strictly greater than {@code\n",
        "264": "   * endpoint}.\n",
        "273": "   * Returns a range that contains all values greater than or equal to\n",
        "274": "   * {@code endpoint}.\n",
        "283": "   * Returns a range from the given endpoint, which may be either inclusive\n",
        "284": "   * (closed) or exclusive (open), with no upper bound.\n",
        "312": "   * Returns a range that {@linkplain Range#contains(Comparable) contains} only\n",
        "313": "   * the given value. The returned range is {@linkplain BoundType#CLOSED closed}\n",
        "314": "   * on both ends.\n",
        "323": "   * Returns the minimal range that\n",
        "324": "   * {@linkplain Range#contains(Comparable) contains} all of the given values.\n",
        "325": "   * The returned range is {@linkplain BoundType#CLOSED closed} on both ends.\n",
        "327": "   * @throws ClassCastException if the parameters are not <i>mutually\n",
        "328": "   *     comparable</i>\n",
        "366": "  /**\n",
        "367": "   * Returns {@code true} if this range has a lower endpoint.\n",
        "368": "   */\n",
        "394": "  /**\n",
        "395": "   * Returns {@code true} if this range has an upper endpoint.\n",
        "396": "   */\n",
        "428": "   * considered empty, even though they contain no actual values.  In these cases, it may be\n",
        "429": "   * helpful to preprocess ranges with {@link #canonical(DiscreteDomain)}.\n",
        "487": "   * <li>{@code [3..6]} encloses {@code [4..5]}\n",
        "488": "   * <li>{@code (3..6)} encloses {@code (3..6)}\n",
        "489": "   * <li>{@code [3..6]} encloses {@code [4..4)} (even though the latter is empty)\n",
        "490": "   * <li>{@code (3..6]} does not enclose {@code [3..6]}\n",
        "491": "   * <li>{@code [4..5]} does not enclose {@code (3..6)} (even though it contains every value\n",
        "492": "   *     contained by the latter range)\n",
        "493": "   * <li>{@code [3..6]} does not enclose {@code (1..1]} (even though it contains every value\n",
        "494": "   *     contained by the latter range)\n",
        "497": "   * <p>Note that if {@code a.encloses(b)}, then {@code b.contains(v)} implies\n",
        "498": "   * {@code a.contains(v)}, but as the last two examples illustrate, the converse is not always\n",
        "499": "   * true.\n",
        "517": "   * <li>{@code [2, 4)} and {@code [5, 7)} are not connected\n",
        "518": "   * <li>{@code [2, 4)} and {@code [3, 5)} are connected, because both enclose {@code [3, 4)}\n",
        "519": "   * <li>{@code [2, 4)} and {@code [4, 6)} are connected, because both enclose the empty range\n",
        "520": "   *     {@code [4, 4)}\n",
        "531": "   * elements \"between them.\"  For example, {@code [3, 5]} is not considered connected to {@code\n",
        "532": "   * [6, 10]}.  In these cases, it may be desirable for both input ranges to be preprocessed with\n",
        "533": "   * {@link #canonical(DiscreteDomain)} before testing for connectedness.\n",
        "600": "   * <li>equivalence: {@code a.canonical().contains(v) == a.contains(v)} for all {@code v} (in other\n",
        "601": "   *     words, {@code ContiguousSet.create(a.canonical(domain), domain).equals(\n",
        "602": "   *     ContiguousSet.create(a, domain))}\n",
        "603": "   * <li>uniqueness: unless {@code a.isEmpty()},\n",
        "604": "   *     {@code ContiguousSet.create(a, domain).equals(ContiguousSet.create(b, domain))} implies\n",
        "605": "   *     {@code a.canonical(domain).equals(b.canonical(domain))}\n",
        "606": "   * <li>idempotence: {@code a.canonical(domain).canonical(domain).equals(a.canonical(domain))}\n",
        "613": "   * <li>[start..end)\n",
        "614": "   * <li>[start..+\u221e)\n",
        "615": "   * <li>(-\u221e..end) (only if type {@code C} is unbounded below)\n",
        "616": "   * <li>(-\u221e..+\u221e) (only if type {@code C} is unbounded below)\n",
        "665": "  /**\n",
        "666": "   * Used to avoid http://bugs.sun.com/view_bug.do?bug_id=6558557\n",
        "667": "   */\n",
        "685": "  /**\n",
        "686": "   * Needed to serialize sorted collections of Ranges.\n",
        "687": "   */\n"
    }
}