{
    "addition": {
        "48": "    suite.addTest(\n",
        "49": "        ListMultimapTestSuiteBuilder.using(\n",
        "50": "                new TestStringListMultimapGenerator() {\n",
        "51": "                  @Override\n",
        "52": "                  protected ListMultimap<String, String> create(Entry<String, String>[] entries) {\n",
        "53": "                    ListMultimap<String, String> multimap = ArrayListMultimap.create();\n",
        "54": "                    for (Entry<String, String> entry : entries) {\n",
        "55": "                      multimap.put(entry.getKey(), entry.getValue());\n",
        "56": "                    }\n",
        "57": "                    return multimap;\n",
        "58": "                  }\n",
        "59": "                })\n",
        "60": "            .named(\"ArrayListMultimap\")\n",
        "61": "            .withFeatures(\n",
        "62": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "63": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "64": "                MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "65": "                MapFeature.GENERAL_PURPOSE,\n",
        "66": "                MapFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,\n",
        "67": "                CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "68": "                CollectionFeature.SERIALIZABLE,\n",
        "69": "                CollectionSize.ANY)\n",
        "70": "            .createTestSuite());\n",
        "79": "  /** Confirm that get() returns a List implementing RandomAccess. */\n",
        "88": "  /** Confirm that removeAll() returns a List implementing RandomAccess. */\n",
        "97": "  /** Confirm that replaceValues() returns a List implementing RandomAccess. */\n",
        "102": "    assertTrue(multimap.replaceValues(\"foo\", asList(2, 4)) instanceof RandomAccess);\n",
        "103": "    assertTrue(multimap.replaceValues(\"bar\", asList(2, 4)) instanceof RandomAccess);\n",
        "106": "  /** Test throwing ConcurrentModificationException when a sublist's ancestor's delegate changes. */\n",
        "122": "    } catch (ConcurrentModificationException expected) {\n",
        "123": "    }\n",
        "131": "    ArrayListMultimap<String, Integer> copy = ArrayListMultimap.create(multimap);\n",
        "136": "    ArrayListMultimap<String, Integer> multimap = ArrayListMultimap.create();\n",
        "141": "    ArrayListMultimap<String, Integer> multimap = ArrayListMultimap.create(15, 20);\n",
        "149": "    } catch (IllegalArgumentException expected) {\n",
        "150": "    }\n",
        "155": "    } catch (IllegalArgumentException expected) {\n",
        "156": "    }\n",
        "161": "    ArrayListMultimap<String, Integer> multimap = ArrayListMultimap.create(original);\n",
        "166": "    ArrayListMultimap<String, Integer> original = ArrayListMultimap.create(15, 20);\n",
        "167": "    ArrayListMultimap<String, Integer> multimap = ArrayListMultimap.create(original);\n",
        "172": "    ArrayListMultimap<String, Integer> multimap = ArrayListMultimap.create();\n"
    },
    "removed": {
        "48": "    suite.addTest(ListMultimapTestSuiteBuilder.using(new TestStringListMultimapGenerator() {\n",
        "49": "        @Override\n",
        "50": "        protected ListMultimap<String, String> create(Entry<String, String>[] entries) {\n",
        "51": "          ListMultimap<String, String> multimap = ArrayListMultimap.create();\n",
        "52": "          for (Entry<String, String> entry : entries) {\n",
        "53": "            multimap.put(entry.getKey(), entry.getValue());\n",
        "54": "          }\n",
        "55": "          return multimap;\n",
        "56": "        }\n",
        "57": "      })\n",
        "58": "      .named(\"ArrayListMultimap\")\n",
        "59": "      .withFeatures(\n",
        "60": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "61": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "62": "          MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "63": "          MapFeature.GENERAL_PURPOSE,\n",
        "64": "          MapFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,\n",
        "65": "          CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "66": "          CollectionFeature.SERIALIZABLE,\n",
        "67": "          CollectionSize.ANY)\n",
        "68": "      .createTestSuite());\n",
        "77": "  /**\n",
        "78": "   * Confirm that get() returns a List implementing RandomAccess.\n",
        "79": "   */\n",
        "88": "  /**\n",
        "89": "   * Confirm that removeAll() returns a List implementing RandomAccess.\n",
        "90": "   */\n",
        "99": "  /**\n",
        "100": "   * Confirm that replaceValues() returns a List implementing RandomAccess.\n",
        "101": "   */\n",
        "106": "    assertTrue(multimap.replaceValues(\"foo\", asList(2, 4))\n",
        "107": "        instanceof RandomAccess);\n",
        "108": "    assertTrue(multimap.replaceValues(\"bar\", asList(2, 4))\n",
        "109": "        instanceof RandomAccess);\n",
        "112": "  /**\n",
        "113": "   * Test throwing ConcurrentModificationException when a sublist's ancestor's\n",
        "114": "   * delegate changes.\n",
        "115": "   */\n",
        "131": "    } catch (ConcurrentModificationException expected) {}\n",
        "139": "    ArrayListMultimap<String, Integer> copy\n",
        "140": "        = ArrayListMultimap.create(multimap);\n",
        "145": "    ArrayListMultimap<String, Integer> multimap\n",
        "146": "        = ArrayListMultimap.create();\n",
        "151": "    ArrayListMultimap<String, Integer> multimap\n",
        "152": "        = ArrayListMultimap.create(15, 20);\n",
        "160": "    } catch (IllegalArgumentException expected) {}\n",
        "165": "    } catch (IllegalArgumentException expected) {}\n",
        "170": "    ArrayListMultimap<String, Integer> multimap\n",
        "171": "        = ArrayListMultimap.create(original);\n",
        "176": "    ArrayListMultimap<String, Integer> original\n",
        "177": "        = ArrayListMultimap.create(15, 20);\n",
        "178": "    ArrayListMultimap<String, Integer> multimap\n",
        "179": "        = ArrayListMultimap.create(original);\n",
        "184": "    ArrayListMultimap<String, Integer> multimap\n",
        "185": "        = ArrayListMultimap.create();\n"
    }
}