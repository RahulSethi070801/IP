{
    "addition": {
        "55": "    assertSame(\n",
        "56": "        value,\n",
        "57": "        new AbstractFuture<Object>() {\n",
        "58": "          {\n",
        "59": "            set(value);\n",
        "60": "          }\n",
        "61": "        }.get());\n",
        "66": "    AbstractFuture<String> future =\n",
        "67": "        new AbstractFuture<String>() {\n",
        "68": "          {\n",
        "69": "            setException(failure);\n",
        "70": "          }\n",
        "71": "        };\n",
        "119": "    AbstractFuture<String> future =\n",
        "120": "        new AbstractFuture<String>() {\n",
        "121": "          {\n",
        "122": "            set(\"foo\");\n",
        "123": "          }\n",
        "124": "        };\n",
        "131": "    AbstractFuture<String> future =\n",
        "132": "        new AbstractFuture<String>() {\n",
        "133": "          {\n",
        "134": "            set(\"foo\");\n",
        "135": "          }\n",
        "136": "        };\n",
        "142": "    AbstractFuture<String> evilFuture =\n",
        "143": "        new AbstractFuture<String>() {\n",
        "144": "          @Override\n",
        "145": "          public void addListener(Runnable r, Executor e) {\n",
        "146": "            throw exception;\n",
        "147": "          }\n",
        "148": "        };\n",
        "175": "    waiter2.awaitWaiting(); // should still be blocked\n",
        "177": "    LockSupport.unpark(waiter2); // spurious wakeup\n",
        "178": "    waiter2.awaitWaiting(); // should eventually re-park\n",
        "280": "      executor.execute(\n",
        "281": "          new Runnable() {\n",
        "282": "            @Override\n",
        "283": "            public void run() {\n",
        "284": "              future.set(\"success\");\n",
        "285": "              if (!future.isDone()) {\n",
        "286": "                errorMessage.set(\"Set call exited before future was complete.\");\n",
        "287": "              }\n",
        "288": "            }\n",
        "289": "          });\n",
        "290": "      executor.execute(\n",
        "291": "          new Runnable() {\n",
        "292": "            @Override\n",
        "293": "            public void run() {\n",
        "294": "              future.setException(new IllegalArgumentException(\"failure\"));\n",
        "295": "              if (!future.isDone()) {\n",
        "296": "                errorMessage.set(\"SetException call exited before future was complete.\");\n",
        "297": "              }\n",
        "298": "            }\n",
        "299": "          });\n",
        "300": "      executor.execute(\n",
        "301": "          new Runnable() {\n",
        "302": "            @Override\n",
        "303": "            public void run() {\n",
        "304": "              future.cancel(true);\n",
        "305": "              if (!future.isDone()) {\n",
        "306": "                errorMessage.set(\"Cancel call exited before future was complete.\");\n",
        "307": "              }\n",
        "308": "            }\n",
        "309": "          });\n",
        "322": "   * He did the bash, he did the future bash The future bash, it was a concurrency smash He did the\n",
        "323": "   * bash, it caught on in a flash He did the bash, he did the future bash\n",
        "327": "    final CyclicBarrier barrier =\n",
        "328": "        new CyclicBarrier(\n",
        "329": "            6 // for the setter threads\n",
        "330": "                + 50 // for the listeners\n",
        "331": "                + 50 // for the blocking get threads,\n",
        "332": "                + 1); // for the main thread\n",
        "336": "    Callable<Void> completeSucessFullyRunnable =\n",
        "337": "        new Callable<Void>() {\n",
        "338": "          @Override\n",
        "339": "          public Void call() {\n",
        "340": "            if (currentFuture.get().set(\"set\")) {\n",
        "341": "              numSuccessfulSetCalls.incrementAndGet();\n",
        "342": "            }\n",
        "343": "            awaitUnchecked(barrier);\n",
        "344": "            return null;\n",
        "345": "          }\n",
        "346": "        };\n",
        "347": "    Callable<Void> completeExceptionallyRunnable =\n",
        "348": "        new Callable<Void>() {\n",
        "349": "          Exception failureCause = new Exception(\"setException\");\n",
        "350": "\n",
        "351": "          @Override\n",
        "352": "          public Void call() {\n",
        "353": "            if (currentFuture.get().setException(failureCause)) {\n",
        "354": "              numSuccessfulSetCalls.incrementAndGet();\n",
        "355": "            }\n",
        "356": "            awaitUnchecked(barrier);\n",
        "357": "            return null;\n",
        "358": "          }\n",
        "359": "        };\n",
        "360": "    Callable<Void> cancelRunnable =\n",
        "361": "        new Callable<Void>() {\n",
        "362": "          @Override\n",
        "363": "          public Void call() {\n",
        "364": "            if (currentFuture.get().cancel(true)) {\n",
        "365": "              numSuccessfulSetCalls.incrementAndGet();\n",
        "366": "            }\n",
        "367": "            awaitUnchecked(barrier);\n",
        "368": "            return null;\n",
        "369": "          }\n",
        "370": "        };\n",
        "371": "    Callable<Void> setFutureCompleteSucessFullyRunnable =\n",
        "372": "        new Callable<Void>() {\n",
        "373": "          ListenableFuture<String> future = Futures.immediateFuture(\"setFuture\");\n",
        "374": "\n",
        "375": "          @Override\n",
        "376": "          public Void call() {\n",
        "377": "            if (currentFuture.get().setFuture(future)) {\n",
        "378": "              numSuccessfulSetCalls.incrementAndGet();\n",
        "379": "            }\n",
        "380": "            awaitUnchecked(barrier);\n",
        "381": "            return null;\n",
        "382": "          }\n",
        "383": "        };\n",
        "384": "    Callable<Void> setFutureCompleteExceptionallyRunnable =\n",
        "385": "        new Callable<Void>() {\n",
        "386": "          ListenableFuture<String> future =\n",
        "387": "              Futures.immediateFailedFuture(new Exception(\"setFuture\"));\n",
        "388": "\n",
        "389": "          @Override\n",
        "390": "          public Void call() {\n",
        "391": "            if (currentFuture.get().setFuture(future)) {\n",
        "392": "              numSuccessfulSetCalls.incrementAndGet();\n",
        "393": "            }\n",
        "394": "            awaitUnchecked(barrier);\n",
        "395": "            return null;\n",
        "396": "          }\n",
        "397": "        };\n",
        "398": "    Callable<Void> setFutureCancelRunnable =\n",
        "399": "        new Callable<Void>() {\n",
        "400": "          ListenableFuture<String> future = Futures.immediateCancelledFuture();\n",
        "401": "\n",
        "402": "          @Override\n",
        "403": "          public Void call() {\n",
        "404": "            if (currentFuture.get().setFuture(future)) {\n",
        "405": "              numSuccessfulSetCalls.incrementAndGet();\n",
        "406": "            }\n",
        "407": "            awaitUnchecked(barrier);\n",
        "408": "            return null;\n",
        "409": "          }\n",
        "410": "        };\n",
        "462": "      final Runnable listener =\n",
        "463": "          k % 2 == 0 ? collectResultsRunnable : collectResultsTimedGetRunnable;\n",
        "465": "      allTasks.add(\n",
        "466": "          new Callable<Void>() {\n",
        "467": "            @Override\n",
        "468": "            public Void call() throws Exception {\n",
        "469": "              currentFuture.get().addListener(listener, executor);\n",
        "470": "              return null;\n",
        "471": "            }\n",
        "472": "          });\n",
        "509": "    final CyclicBarrier barrier =\n",
        "510": "        new CyclicBarrier(\n",
        "511": "            2 // for the setter threads\n",
        "512": "                + size // for the listeners\n",
        "513": "                + size // for the get threads,\n",
        "514": "                + 1); // for the main thread\n",
        "521": "    Runnable cancelRunnable =\n",
        "522": "        new Runnable() {\n",
        "523": "          @Override\n",
        "524": "          public void run() {\n",
        "525": "            cancellationSucess.set(currentFuture.get().cancel(true));\n",
        "526": "            awaitUnchecked(barrier);\n",
        "527": "          }\n",
        "528": "        };\n",
        "529": "    Runnable setFutureCompleteSucessFullyRunnable =\n",
        "530": "        new Runnable() {\n",
        "531": "          @Override\n",
        "532": "          public void run() {\n",
        "533": "            AbstractFuture<String> future = setFutureFuture.get();\n",
        "534": "            setFutureSetSucess.set(currentFuture.get().setFuture(future));\n",
        "535": "            setFutureCompletionSucess.set(future.set(\"hello-async-world\"));\n",
        "536": "            awaitUnchecked(barrier);\n",
        "537": "          }\n",
        "538": "        };\n",
        "540": "    Runnable collectResultsRunnable =\n",
        "541": "        new Runnable() {\n",
        "542": "          @Override\n",
        "543": "          public void run() {\n",
        "544": "            try {\n",
        "545": "              String result = Uninterruptibles.getUninterruptibly(currentFuture.get());\n",
        "546": "              finalResults.add(result);\n",
        "547": "            } catch (ExecutionException e) {\n",
        "548": "              finalResults.add(e.getCause());\n",
        "549": "            } catch (CancellationException e) {\n",
        "550": "              finalResults.add(CancellationException.class);\n",
        "551": "            } finally {\n",
        "552": "              awaitUnchecked(barrier);\n",
        "553": "            }\n",
        "555": "        };\n",
        "556": "    Runnable collectResultsTimedGetRunnable =\n",
        "557": "        new Runnable() {\n",
        "558": "          @Override\n",
        "559": "          public void run() {\n",
        "560": "            Future<String> future = currentFuture.get();\n",
        "561": "            while (true) {\n",
        "562": "              try {\n",
        "563": "                String result = Uninterruptibles.getUninterruptibly(future, 0, TimeUnit.SECONDS);\n",
        "564": "                finalResults.add(result);\n",
        "565": "                break;\n",
        "566": "              } catch (ExecutionException e) {\n",
        "567": "                finalResults.add(e.getCause());\n",
        "568": "                break;\n",
        "569": "              } catch (CancellationException e) {\n",
        "570": "                finalResults.add(CancellationException.class);\n",
        "571": "                break;\n",
        "572": "              } catch (TimeoutException e) {\n",
        "573": "                // loop\n",
        "574": "              }\n",
        "575": "            }\n",
        "576": "            awaitUnchecked(barrier);\n",
        "577": "          }\n",
        "578": "        };\n",
        "586": "      final Runnable listener =\n",
        "587": "          k % 2 == 0 ? collectResultsRunnable : collectResultsTimedGetRunnable;\n",
        "589": "      allTasks.add(\n",
        "590": "          new Runnable() {\n",
        "591": "            @Override\n",
        "592": "            public void run() {\n",
        "593": "              currentFuture.get().addListener(listener, executor);\n",
        "594": "            }\n",
        "595": "          });\n",
        "597": "    assertEquals(allTasks.size() + 1, barrier.getParties()); // sanity check\n",
        "623": "          assertTrue(setFuture.wasInterrupted()); // we only call cancel(true)\n",
        "643": "    final CyclicBarrier barrier =\n",
        "644": "        new CyclicBarrier(\n",
        "645": "            2 // for the setter threads\n",
        "646": "                + 1 // for the blocking get thread,\n",
        "647": "                + 1); // for the main thread\n",
        "652": "    Callable<Void> cancelRunnable =\n",
        "653": "        new Callable<Void>() {\n",
        "654": "          @Override\n",
        "655": "          public Void call() {\n",
        "656": "            cancellationSucess.set(currentFuture.get().cancel(true));\n",
        "657": "            awaitUnchecked(barrier);\n",
        "658": "            return null;\n",
        "659": "          }\n",
        "660": "        };\n",
        "661": "    Callable<Void> setFutureCompleteSucessFullyRunnable =\n",
        "662": "        new Callable<Void>() {\n",
        "663": "          final ListenableFuture<String> future = Futures.immediateFuture(\"hello\");\n",
        "664": "\n",
        "665": "          @Override\n",
        "666": "          public Void call() {\n",
        "667": "            setFutureSuccess.set(currentFuture.get().setFuture(future));\n",
        "668": "            awaitUnchecked(barrier);\n",
        "669": "            return null;\n",
        "670": "          }\n",
        "671": "        };\n",
        "673": "    final Runnable collectResultsRunnable =\n",
        "674": "        new Runnable() {\n",
        "675": "          @Override\n",
        "676": "          public void run() {\n",
        "677": "            try {\n",
        "678": "              String result = Uninterruptibles.getUninterruptibly(currentFuture.get());\n",
        "679": "              finalResults.add(result);\n",
        "680": "            } catch (ExecutionException e) {\n",
        "681": "              finalResults.add(e.getCause());\n",
        "682": "            } catch (CancellationException e) {\n",
        "683": "              finalResults.add(CancellationException.class);\n",
        "684": "            } finally {\n",
        "685": "              awaitUnchecked(barrier);\n",
        "686": "            }\n",
        "687": "          }\n",
        "688": "        };\n",
        "693": "    assertEquals(allTasks.size() + 1, barrier.getParties()); // sanity check\n",
        "763": "    int index = findStackFrame(e, getClass().getName(), \"getExpectingExecutionException\");\n",
        "772": "  private static int findStackFrame(ExecutionException e, String clazz, String method) {\n",
        "776": "      if (element.getClassName().equals(clazz) && element.getMethodName().equals(method)) {\n",
        "781": "        new AssertionFailedError(\n",
        "782": "            \"Expected element \" + clazz + \".\" + method + \" not found in stack trace\");\n",
        "787": "  private ExecutionException getExpectingExecutionException(AbstractFuture<String> future)\n",
        "788": "      throws InterruptedException {\n",
        "807": "    @Override\n",
        "808": "    public void run() {\n",
        "837": "    @Override\n",
        "838": "    public void run() {\n",
        "864": "    @Override\n",
        "865": "    public void run() {\n",
        "885": "  private static final class InterruptibleFuture extends AbstractFuture<String> {\n",
        "888": "    @Override\n",
        "889": "    protected void interruptTask() {\n"
    },
    "removed": {
        "55": "    assertSame(value, new AbstractFuture<Object>() {\n",
        "56": "      {\n",
        "57": "        set(value);\n",
        "58": "      }\n",
        "59": "    }.get());\n",
        "64": "    AbstractFuture<String> future = new AbstractFuture<String>() {\n",
        "65": "      {\n",
        "66": "        setException(failure);\n",
        "67": "      }\n",
        "68": "    };\n",
        "116": "    AbstractFuture<String> future = new AbstractFuture<String>() {\n",
        "117": "      {\n",
        "118": "        set(\"foo\");\n",
        "119": "      }\n",
        "120": "    };\n",
        "127": "    AbstractFuture<String> future = new AbstractFuture<String>() {\n",
        "128": "      {\n",
        "129": "        set(\"foo\");\n",
        "130": "      }\n",
        "131": "    };\n",
        "137": "    AbstractFuture<String> evilFuture = new AbstractFuture<String>() {\n",
        "138": "      @Override public void addListener(Runnable r, Executor e) {\n",
        "139": "        throw exception;\n",
        "140": "      }\n",
        "141": "    };\n",
        "168": "    waiter2.awaitWaiting();  // should still be blocked\n",
        "170": "    LockSupport.unpark(waiter2);  // spurious wakeup\n",
        "171": "    waiter2.awaitWaiting();  // should eventually re-park\n",
        "273": "      executor.execute(new Runnable() {\n",
        "274": "        @Override\n",
        "275": "        public void run() {\n",
        "276": "          future.set(\"success\");\n",
        "277": "          if (!future.isDone()) {\n",
        "278": "            errorMessage.set(\"Set call exited before future was complete.\");\n",
        "279": "          }\n",
        "280": "        }\n",
        "281": "      });\n",
        "282": "      executor.execute(new Runnable() {\n",
        "283": "        @Override\n",
        "284": "        public void run() {\n",
        "285": "          future.setException(new IllegalArgumentException(\"failure\"));\n",
        "286": "          if (!future.isDone()) {\n",
        "287": "            errorMessage.set(\"SetException call exited before future was complete.\");\n",
        "288": "          }\n",
        "289": "        }\n",
        "290": "      });\n",
        "291": "      executor.execute(new Runnable() {\n",
        "292": "        @Override\n",
        "293": "        public void run() {\n",
        "294": "          future.cancel(true);\n",
        "295": "          if (!future.isDone()) {\n",
        "296": "            errorMessage.set(\"Cancel call exited before future was complete.\");\n",
        "297": "          }\n",
        "298": "        }\n",
        "299": "      });\n",
        "312": "   * He did the bash, he did the future bash\n",
        "313": "   * The future bash, it was a concurrency smash\n",
        "314": "   * He did the bash, it caught on in a flash\n",
        "315": "   * He did the bash, he did the future bash\n",
        "319": "    final CyclicBarrier barrier = new CyclicBarrier(\n",
        "320": "        6  // for the setter threads\n",
        "321": "        + 50 // for the listeners\n",
        "322": "        + 50 // for the blocking get threads,\n",
        "323": "        + 1); // for the main thread\n",
        "327": "    Callable<Void> completeSucessFullyRunnable = new Callable<Void>() {\n",
        "328": "      @Override public Void call() {\n",
        "329": "        if (currentFuture.get().set(\"set\")) {\n",
        "330": "          numSuccessfulSetCalls.incrementAndGet();\n",
        "331": "        }\n",
        "332": "        awaitUnchecked(barrier);\n",
        "333": "        return null;\n",
        "334": "      }\n",
        "335": "    };\n",
        "336": "    Callable<Void> completeExceptionallyRunnable = new Callable<Void>() {\n",
        "337": "      Exception failureCause = new Exception(\"setException\");\n",
        "338": "      @Override public Void call() {\n",
        "339": "        if (currentFuture.get().setException(failureCause)) {\n",
        "340": "          numSuccessfulSetCalls.incrementAndGet();\n",
        "341": "        }\n",
        "342": "        awaitUnchecked(barrier);\n",
        "343": "        return null;\n",
        "344": "      }\n",
        "345": "    };\n",
        "346": "    Callable<Void> cancelRunnable = new Callable<Void>() {\n",
        "347": "      @Override public Void call() {\n",
        "348": "        if (currentFuture.get().cancel(true)) {\n",
        "349": "          numSuccessfulSetCalls.incrementAndGet();\n",
        "350": "        }\n",
        "351": "        awaitUnchecked(barrier);\n",
        "352": "        return null;\n",
        "353": "      }\n",
        "354": "    };\n",
        "355": "    Callable<Void> setFutureCompleteSucessFullyRunnable = new Callable<Void>() {\n",
        "356": "      ListenableFuture<String> future = Futures.immediateFuture(\"setFuture\");\n",
        "357": "      @Override public Void call() {\n",
        "358": "        if (currentFuture.get().setFuture(future)) {\n",
        "359": "          numSuccessfulSetCalls.incrementAndGet();\n",
        "360": "        }\n",
        "361": "        awaitUnchecked(barrier);\n",
        "362": "        return null;\n",
        "363": "      }\n",
        "364": "    };\n",
        "365": "    Callable<Void> setFutureCompleteExceptionallyRunnable = new Callable<Void>() {\n",
        "366": "      ListenableFuture<String> future = Futures.immediateFailedFuture(new Exception(\"setFuture\"));\n",
        "367": "      @Override public Void call() {\n",
        "368": "        if (currentFuture.get().setFuture(future)) {\n",
        "369": "          numSuccessfulSetCalls.incrementAndGet();\n",
        "370": "        }\n",
        "371": "        awaitUnchecked(barrier);\n",
        "372": "        return null;\n",
        "373": "      }\n",
        "374": "    };\n",
        "375": "    Callable<Void> setFutureCancelRunnable = new Callable<Void>() {\n",
        "376": "      ListenableFuture<String> future = Futures.immediateCancelledFuture();\n",
        "377": "      @Override public Void call() {\n",
        "378": "        if (currentFuture.get().setFuture(future)) {\n",
        "379": "          numSuccessfulSetCalls.incrementAndGet();\n",
        "380": "        }\n",
        "381": "        awaitUnchecked(barrier);\n",
        "382": "        return null;\n",
        "383": "      }\n",
        "384": "    };\n",
        "436": "      final Runnable listener = k % 2 == 0\n",
        "437": "          ? collectResultsRunnable\n",
        "438": "          : collectResultsTimedGetRunnable;\n",
        "440": "      allTasks.add(new Callable<Void>() {\n",
        "441": "        @Override public Void call() throws Exception {\n",
        "442": "          currentFuture.get().addListener(listener, executor);\n",
        "443": "          return null;\n",
        "444": "        }\n",
        "445": "      });\n",
        "482": "    final CyclicBarrier barrier = new CyclicBarrier(\n",
        "483": "        2  // for the setter threads\n",
        "484": "        + size // for the listeners\n",
        "485": "        + size // for the get threads,\n",
        "486": "        + 1); // for the main thread\n",
        "493": "    Runnable cancelRunnable = new Runnable() {\n",
        "494": "      @Override public void run() {\n",
        "495": "        cancellationSucess.set(currentFuture.get().cancel(true));\n",
        "496": "        awaitUnchecked(barrier);\n",
        "497": "      }\n",
        "498": "    };\n",
        "499": "    Runnable setFutureCompleteSucessFullyRunnable = new Runnable() {\n",
        "500": "      @Override public void run() {\n",
        "501": "        AbstractFuture<String> future = setFutureFuture.get();\n",
        "502": "        setFutureSetSucess.set(currentFuture.get().setFuture(future));\n",
        "503": "        setFutureCompletionSucess.set(future.set(\"hello-async-world\"));\n",
        "504": "        awaitUnchecked(barrier);\n",
        "505": "      }\n",
        "506": "    };\n",
        "508": "    Runnable collectResultsRunnable = new Runnable() {\n",
        "509": "      @Override public void run() {\n",
        "510": "        try {\n",
        "511": "          String result = Uninterruptibles.getUninterruptibly(currentFuture.get());\n",
        "512": "          finalResults.add(result);\n",
        "513": "        } catch (ExecutionException e) {\n",
        "514": "          finalResults.add(e.getCause());\n",
        "515": "        } catch (CancellationException e) {\n",
        "516": "          finalResults.add(CancellationException.class);\n",
        "517": "        } finally {\n",
        "518": "          awaitUnchecked(barrier);\n",
        "519": "        }\n",
        "520": "      }\n",
        "521": "    };\n",
        "522": "    Runnable collectResultsTimedGetRunnable = new Runnable() {\n",
        "523": "      @Override public void run() {\n",
        "524": "        Future<String> future = currentFuture.get();\n",
        "525": "        while (true) {\n",
        "526": "          try {\n",
        "527": "            String result = Uninterruptibles.getUninterruptibly(future, 0, TimeUnit.SECONDS);\n",
        "528": "            finalResults.add(result);\n",
        "529": "            break;\n",
        "530": "          } catch (ExecutionException e) {\n",
        "531": "            finalResults.add(e.getCause());\n",
        "532": "            break;\n",
        "533": "          } catch (CancellationException e) {\n",
        "534": "            finalResults.add(CancellationException.class);\n",
        "535": "            break;\n",
        "536": "          } catch (TimeoutException e) {\n",
        "537": "            // loop\n",
        "539": "        }\n",
        "540": "        awaitUnchecked(barrier);\n",
        "541": "      }\n",
        "542": "    };\n",
        "550": "      final Runnable listener = k % 2 == 0\n",
        "551": "          ? collectResultsRunnable\n",
        "552": "          : collectResultsTimedGetRunnable;\n",
        "554": "      allTasks.add(new Runnable() {\n",
        "555": "        @Override public void run() {\n",
        "556": "          currentFuture.get().addListener(listener, executor);\n",
        "557": "        }\n",
        "558": "      });\n",
        "560": "    assertEquals(allTasks.size() + 1, barrier.getParties());  // sanity check\n",
        "586": "          assertTrue(setFuture.wasInterrupted());  // we only call cancel(true)\n",
        "606": "    final CyclicBarrier barrier = new CyclicBarrier(\n",
        "607": "        2  // for the setter threads\n",
        "608": "        + 1 // for the blocking get thread,\n",
        "609": "        + 1); // for the main thread\n",
        "614": "    Callable<Void> cancelRunnable = new Callable<Void>() {\n",
        "615": "      @Override public Void call() {\n",
        "616": "        cancellationSucess.set(currentFuture.get().cancel(true));\n",
        "617": "        awaitUnchecked(barrier);\n",
        "618": "        return null;\n",
        "619": "      }\n",
        "620": "    };\n",
        "621": "    Callable<Void> setFutureCompleteSucessFullyRunnable = new Callable<Void>() {\n",
        "622": "      final ListenableFuture<String> future = Futures.immediateFuture(\"hello\");\n",
        "623": "      @Override public Void call() {\n",
        "624": "        setFutureSuccess.set(currentFuture.get().setFuture(future));\n",
        "625": "        awaitUnchecked(barrier);\n",
        "626": "        return null;\n",
        "627": "      }\n",
        "628": "    };\n",
        "630": "    final Runnable collectResultsRunnable = new Runnable() {\n",
        "631": "      @Override public void run() {\n",
        "632": "        try {\n",
        "633": "          String result = Uninterruptibles.getUninterruptibly(currentFuture.get());\n",
        "634": "          finalResults.add(result);\n",
        "635": "        } catch (ExecutionException e) {\n",
        "636": "          finalResults.add(e.getCause());\n",
        "637": "        } catch (CancellationException e) {\n",
        "638": "          finalResults.add(CancellationException.class);\n",
        "639": "        } finally {\n",
        "640": "          awaitUnchecked(barrier);\n",
        "641": "        }\n",
        "642": "      }\n",
        "643": "    };\n",
        "648": "    assertEquals(allTasks.size() + 1, barrier.getParties());  // sanity check\n",
        "718": "    int index = findStackFrame(\n",
        "719": "        e, getClass().getName(), \"getExpectingExecutionException\");\n",
        "728": "  private static int findStackFrame(\n",
        "729": "      ExecutionException e, String clazz, String method) {\n",
        "733": "      if (element.getClassName().equals(clazz)\n",
        "734": "          && element.getMethodName().equals(method)) {\n",
        "739": "        new AssertionFailedError(\"Expected element \" + clazz + \".\" + method\n",
        "740": "            + \" not found in stack trace\");\n",
        "745": "  private ExecutionException getExpectingExecutionException(\n",
        "746": "      AbstractFuture<String> future) throws InterruptedException {\n",
        "765": "    @Override public void run() {\n",
        "794": "    @Override public void run() {\n",
        "820": "    @Override public void run() {\n",
        "840": "  private static final class InterruptibleFuture\n",
        "841": "      extends AbstractFuture<String> {\n",
        "844": "    @Override protected void interruptTask() {\n"
    }
}