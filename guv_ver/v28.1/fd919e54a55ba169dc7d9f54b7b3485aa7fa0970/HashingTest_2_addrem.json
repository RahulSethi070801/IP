{
    "addition": {
        "123": "    assertEquals(\n",
        "124": "        \"Hashing.sipHash24(506097522914230528, 1084818905618843912)\",\n",
        "165": "    long[] interestingValues = {-1, 0, 1, 2, Long.MAX_VALUE, Long.MIN_VALUE};\n",
        "231": "   * Check a few \"golden\" values to see that implementations across languages are equivalent.\n",
        "232": "   *\n",
        "235": "    int[] golden100 = {\n",
        "236": "      0, 55, 62, 8, 45, 59, 86, 97, 82, 59,\n",
        "237": "      73, 37, 17, 56, 86, 21, 90, 37, 38, 83\n",
        "238": "    };\n",
        "274": "    assertEquals(\n",
        "275": "        HashCode.fromBytes(new byte[] {(byte) 0x80, 0, 0, 0}),\n",
        "277": "    assertEquals(\n",
        "278": "        HashCode.fromBytes(new byte[] {(byte) 0xa0, 0, 0, 0}),\n",
        "281": "        Hashing.combineOrdered(ImmutableList.of(hash31, hash32))\n",
        "282": "            .equals(Hashing.combineOrdered(ImmutableList.of(hash32, hash31))));\n",
        "320": "    assertEquals(\n",
        "321": "        HashCode.fromInt(96), Hashing.combineUnordered(ImmutableList.of(hash32, hash32, hash32)));\n",
        "366": "        Hashing.concatenating(asList(Hashing.md5(), Hashing.murmur3_32(), Hashing.murmur3_128()))\n",
        "367": "            .bits());\n",
        "391": "    assertEquals(\n",
        "392": "        expected, Hashing.concatenating(Hashing.md5(), Hashing.murmur3_32()).hashLong(42L));\n",
        "393": "    assertEquals(\n",
        "394": "        expected, Hashing.concatenating(asList(Hashing.md5(), Hashing.murmur3_32())).hashLong(42L));\n",
        "503": "        assertTrue(\n",
        "504": "            \"There should be at least 3 entries in KNOWN_HASHES for \" + hashFunction,\n",
        "523": "    NullPointerTester tester =\n",
        "524": "        new NullPointerTester()\n",
        "525": "            .setDefault(byte[].class, \"secret key\".getBytes(UTF_8))\n",
        "526": "            .setDefault(HashCode.class, HashCode.fromLong(0));\n",
        "576": "        new EqualsTester().addEqualityGroup(hashFunction1a, hashFunction1b).testEquals();\n"
    },
    "removed": {
        "123": "    assertEquals(\"Hashing.sipHash24(506097522914230528, 1084818905618843912)\",\n",
        "164": "    long[] interestingValues = { -1, 0, 1, 2, Long.MAX_VALUE, Long.MIN_VALUE };\n",
        "230": "   * Check a few \"golden\" values to see that implementations across languages\n",
        "231": "   * are equivalent.\n",
        "234": "    int[] golden100 =\n",
        "235": "        { 0, 55, 62, 8, 45, 59, 86, 97, 82, 59,\n",
        "236": "          73, 37, 17, 56, 86, 21, 90, 37, 38, 83 };\n",
        "272": "    assertEquals(HashCode.fromBytes(new byte[] { (byte) 0x80, 0, 0, 0 }),\n",
        "274": "    assertEquals(HashCode.fromBytes(new byte[] { (byte) 0xa0, 0, 0, 0 }),\n",
        "277": "        Hashing.combineOrdered(ImmutableList.of(hash31, hash32)).equals(\n",
        "278": "        Hashing.combineOrdered(ImmutableList.of(hash32, hash31))));\n",
        "316": "    assertEquals(HashCode.fromInt(96),\n",
        "317": "        Hashing.combineUnordered(ImmutableList.of(hash32, hash32, hash32)));\n",
        "362": "        Hashing.concatenating(\n",
        "363": "            asList(Hashing.md5(), Hashing.murmur3_32(), Hashing.murmur3_128())).bits());\n",
        "387": "    assertEquals(expected,\n",
        "388": "        Hashing.concatenating(Hashing.md5(), Hashing.murmur3_32()).hashLong(42L));\n",
        "389": "    assertEquals(expected,\n",
        "390": "        Hashing.concatenating(asList(Hashing.md5(), Hashing.murmur3_32())).hashLong(42L));\n",
        "499": "        assertTrue(\"There should be at least 3 entries in KNOWN_HASHES for \" + hashFunction,\n",
        "518": "    NullPointerTester tester = new NullPointerTester()\n",
        "519": "        .setDefault(byte[].class, \"secret key\".getBytes(UTF_8))\n",
        "520": "        .setDefault(HashCode.class, HashCode.fromLong(0));\n",
        "570": "        new EqualsTester()\n",
        "571": "            .addEqualityGroup(hashFunction1a, hashFunction1b)\n",
        "572": "            .testEquals();\n"
    }
}