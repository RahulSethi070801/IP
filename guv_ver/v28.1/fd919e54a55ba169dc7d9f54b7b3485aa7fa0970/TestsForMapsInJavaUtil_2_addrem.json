{
    "addition": {
        "46": " * Generates a test suite covering the {@link Map} implementations in the {@link java.util} package.\n",
        "47": " * Can be subclassed to specify tests that should be suppressed.\n",
        "161": "            new TestStringMapGenerator() {\n",
        "162": "              @Override\n",
        "163": "              protected Map<String, String> create(Entry<String, String>[] entries) {\n",
        "164": "                Map<String, String> map = populate(new HashMap<String, String>(), entries);\n",
        "165": "                return Collections.checkedMap(map, String.class, String.class);\n",
        "166": "              }\n",
        "167": "            })\n",
        "186": "            new TestStringSortedMapGenerator() {\n",
        "187": "              @Override\n",
        "188": "              protected NavigableMap<String, String> create(Entry<String, String>[] entries) {\n",
        "189": "                NavigableMap<String, String> map = populate(new TreeMap<String, String>(), entries);\n",
        "190": "                return Collections.checkedNavigableMap(map, String.class, String.class);\n",
        "191": "              }\n",
        "192": "            })\n",
        "210": "            new TestStringSortedMapGenerator() {\n",
        "211": "              @Override\n",
        "212": "              protected SortedMap<String, String> create(Entry<String, String>[] entries) {\n",
        "213": "                SortedMap<String, String> map = populate(new TreeMap<String, String>(), entries);\n",
        "214": "                return Collections.checkedSortedMap(map, String.class, String.class);\n",
        "215": "              }\n",
        "216": "            })\n",
        "248": "            new TestStringSortedMapGenerator() {\n",
        "249": "              @Override\n",
        "250": "              protected NavigableMap<String, String> create(Entry<String, String>[] entries) {\n",
        "251": "                return Collections.emptyNavigableMap();\n",
        "252": "              }\n",
        "253": "            })\n",
        "262": "            new TestStringSortedMapGenerator() {\n",
        "263": "              @Override\n",
        "264": "              protected SortedMap<String, String> create(Entry<String, String>[] entries) {\n",
        "265": "                return Collections.emptySortedMap();\n",
        "266": "              }\n",
        "267": "            })\n",
        "316": "    return MapTestSuiteBuilder.using(\n",
        "317": "            new TestStringMapGenerator() {\n",
        "318": "              @Override\n",
        "319": "              protected Map<String, String> create(Entry<String, String>[] entries) {\n",
        "320": "                return populate(new Hashtable<String, String>(), entries);\n",
        "321": "              }\n",
        "322": "            })\n",
        "323": "        .withFeatures(\n",
        "324": "            MapFeature.GENERAL_PURPOSE,\n",
        "325": "            MapFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,\n",
        "326": "            MapFeature.RESTRICTS_KEYS,\n",
        "327": "            MapFeature.SUPPORTS_REMOVE,\n",
        "328": "            CollectionFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,\n",
        "329": "            CollectionFeature.SERIALIZABLE,\n",
        "330": "            CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "331": "            CollectionFeature.SUPPORTS_REMOVE,\n",
        "332": "            CollectionSize.ANY)\n",
        "333": "        .named(\"Hashtable\")\n",
        "334": "        .suppressing(suppressForHashtable())\n",
        "335": "        .createTestSuite();\n",
        "362": "   * Tests regular NavigableMap behavior of synchronizedNavigableMap(treeMap); does not test the\n",
        "363": "   * fact that it's synchronized.\n",
        "438": "            new TestStringMapGenerator() {\n",
        "439": "              @Override\n",
        "440": "              protected Map<String, String> create(Entry<String, String>[] entries) {\n",
        "441": "                return Collections.unmodifiableMap(toHashMap(entries));\n",
        "442": "              }\n",
        "443": "            })\n",
        "457": "            new TestStringSortedMapGenerator() {\n",
        "458": "              @Override\n",
        "459": "              protected NavigableMap<String, String> create(Entry<String, String>[] entries) {\n",
        "460": "                return Collections.unmodifiableNavigableMap(populate(new TreeMap<>(), entries));\n",
        "461": "              }\n",
        "462": "            })\n",
        "475": "            new TestStringSortedMapGenerator() {\n",
        "476": "              @Override\n",
        "477": "              protected SortedMap<String, String> create(Entry<String, String>[] entries) {\n",
        "478": "                SortedMap<String, String> map = populate(new TreeMap<String, String>(), entries);\n",
        "479": "                return Collections.unmodifiableSortedMap(map);\n",
        "480": "              }\n",
        "481": "            })\n"
    },
    "removed": {
        "46": " * Generates a test suite covering the {@link Map} implementations in the\n",
        "47": " * {@link java.util} package. Can be subclassed to specify tests that should\n",
        "48": " * be suppressed.\n",
        "162": "        new TestStringMapGenerator() {\n",
        "163": "          @Override\n",
        "164": "          protected Map<String, String> create(Entry<String, String>[] entries) {\n",
        "165": "            Map<String, String> map = populate(new HashMap<String, String>(), entries);\n",
        "166": "            return Collections.checkedMap(map, String.class, String.class);\n",
        "167": "          }\n",
        "168": "        })\n",
        "187": "        new TestStringSortedMapGenerator() {\n",
        "188": "          @Override\n",
        "189": "          protected NavigableMap<String, String> create(Entry<String, String>[] entries) {\n",
        "190": "            NavigableMap<String, String> map = populate(new TreeMap<String, String>(), entries);\n",
        "191": "            return Collections.checkedNavigableMap(map, String.class, String.class);\n",
        "192": "          }\n",
        "193": "        })\n",
        "211": "        new TestStringSortedMapGenerator() {\n",
        "212": "          @Override\n",
        "213": "          protected SortedMap<String, String> create(Entry<String, String>[] entries) {\n",
        "214": "            SortedMap<String, String> map = populate(new TreeMap<String, String>(), entries);\n",
        "215": "            return Collections.checkedSortedMap(map, String.class, String.class);\n",
        "216": "          }\n",
        "217": "        })\n",
        "249": "        new TestStringSortedMapGenerator() {\n",
        "250": "          @Override\n",
        "251": "          protected NavigableMap<String, String> create(Entry<String, String>[] entries) {\n",
        "252": "            return Collections.emptyNavigableMap();\n",
        "253": "          }\n",
        "254": "        })\n",
        "264": "        new TestStringSortedMapGenerator() {\n",
        "265": "          @Override\n",
        "266": "          protected SortedMap<String, String> create(Entry<String, String>[] entries) {\n",
        "267": "            return Collections.emptySortedMap();\n",
        "268": "          }\n",
        "269": "        })\n",
        "319": "      return MapTestSuiteBuilder.using(\n",
        "320": "          new TestStringMapGenerator() {\n",
        "321": "            @Override\n",
        "322": "            protected Map<String, String> create(Entry<String, String>[] entries) {\n",
        "323": "              return populate(new Hashtable<String, String>(), entries);\n",
        "324": "            }\n",
        "325": "          })\n",
        "326": "          .withFeatures(\n",
        "327": "              MapFeature.GENERAL_PURPOSE,\n",
        "328": "              MapFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,\n",
        "329": "              MapFeature.RESTRICTS_KEYS,\n",
        "330": "              MapFeature.SUPPORTS_REMOVE,\n",
        "331": "              CollectionFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,\n",
        "332": "              CollectionFeature.SERIALIZABLE,\n",
        "333": "              CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "334": "              CollectionFeature.SUPPORTS_REMOVE,\n",
        "335": "              CollectionSize.ANY\n",
        "336": "          )\n",
        "337": "          .named(\"Hashtable\")\n",
        "338": "          .suppressing(suppressForHashtable())\n",
        "339": "          .createTestSuite();\n",
        "366": "   * Tests regular NavigableMap behavior of synchronizedNavigableMap(treeMap);\n",
        "367": "   * does not test the fact that it's synchronized.\n",
        "442": "        new TestStringMapGenerator() {\n",
        "443": "          @Override\n",
        "444": "          protected Map<String, String> create(Entry<String, String>[] entries) {\n",
        "445": "            return Collections.unmodifiableMap(toHashMap(entries));\n",
        "446": "          }\n",
        "447": "        })\n",
        "461": "        new TestStringSortedMapGenerator() {\n",
        "462": "          @Override\n",
        "463": "          protected NavigableMap<String, String> create(Entry<String, String>[] entries) {\n",
        "464": "            return Collections.unmodifiableNavigableMap(populate(new TreeMap<>(), entries));\n",
        "465": "          }\n",
        "466": "        })\n",
        "479": "        new TestStringSortedMapGenerator() {\n",
        "480": "          @Override\n",
        "481": "          protected SortedMap<String, String> create(Entry<String, String>[] entries) {\n",
        "482": "            SortedMap<String, String> map = populate(new TreeMap<String, String>(), entries);\n",
        "483": "            return Collections.unmodifiableSortedMap(map);\n",
        "484": "          }\n",
        "485": "        })\n"
    }
}