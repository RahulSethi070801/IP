{
    "addition": {
        "30": " * <i>unsigned</i> (that is, any negative value {@code x} is treated as the positive value {@code\n",
        "31": " * 2^64 + x}). The methods for which signedness is not an issue are in {@link Longs}, as well as\n",
        "32": " * signed versions of methods for which signedness is an issue.\n",
        "42": " * <p>See the Guava User Guide article on <a\n",
        "43": " * href=\"https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support\">unsigned\n",
        "68": "   * Compares the two specified {@code long} values, treating them as unsigned values between {@code\n",
        "69": "   * 0} and {@code 2^64 - 1} inclusive.\n",
        "123": "   * Returns a string containing the supplied unsigned {@code long} values separated by {@code\n",
        "124": "   * separator}. For example, {@code join(\"-\", 1, 2, 3)} returns the string {@code \"1-2-3\"}.\n",
        "153": "   * support only identity equality), but it is consistent with {@link Arrays#equals(long[],\n",
        "154": "   * long[])}.\n",
        "315": "   * @throws NullPointerException if {@code string} is null (in contrast to {@link\n",
        "316": "   *     Long#parseLong(String)})\n",
        "326": "   * <p>Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix:\n",
        "329": "   *   <li>{@code 0x}<i>HexDigits</i>\n",
        "330": "   *   <li>{@code 0X}<i>HexDigits</i>\n",
        "331": "   *   <li>{@code #}<i>HexDigits</i>\n",
        "332": "   *   <li>{@code 0}<i>OctalDigits</i>\n",
        "361": "   *     the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX} and {@link\n",
        "362": "   *     Character#MAX_RADIX}.\n",
        "363": "   * @throws NullPointerException if {@code string} is null (in contrast to {@link\n",
        "364": "   *     Long#parseLong(String)})\n"
    },
    "removed": {
        "30": " * <i>unsigned</i> (that is, any negative value {@code x} is treated as the positive value\n",
        "31": " * {@code 2^64 + x}). The methods for which signedness is not an issue are in {@link Longs}, as well\n",
        "32": " * as signed versions of methods for which signedness is an issue.\n",
        "42": " * <p>See the Guava User Guide article on\n",
        "43": " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support\">unsigned\n",
        "68": "   * Compares the two specified {@code long} values, treating them as unsigned values between\n",
        "69": "   * {@code 0} and {@code 2^64 - 1} inclusive.\n",
        "123": "   * Returns a string containing the supplied unsigned {@code long} values separated by\n",
        "124": "   * {@code separator}. For example, {@code join(\"-\", 1, 2, 3)} returns the string {@code \"1-2-3\"}.\n",
        "153": "   * support only identity equality), but it is consistent with\n",
        "154": "   * {@link Arrays#equals(long[], long[])}.\n",
        "314": "   * @throws NullPointerException if {@code string} is null (in contrast to\n",
        "315": "   *     {@link Long#parseLong(String)})\n",
        "325": "   * Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix:\n",
        "328": "   * <li>{@code 0x}<i>HexDigits</i>\n",
        "329": "   * <li>{@code 0X}<i>HexDigits</i>\n",
        "330": "   * <li>{@code #}<i>HexDigits</i>\n",
        "331": "   * <li>{@code 0}<i>OctalDigits</i>\n",
        "360": "   *     the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX} and\n",
        "361": "   *     {@link Character#MAX_RADIX}.\n",
        "362": "   * @throws NullPointerException if {@code string} is null (in contrast to\n",
        "363": "   *     {@link Long#parseLong(String)})\n"
    }
}