{
    "addition": {
        "25": " * An object with an operational state, plus asynchronous {@link #startAsync()} and {@link\n",
        "26": " * #stopAsync()} lifecycle methods to transition between states. Example services include\n",
        "30": " *\n",
        "32": " *   <li>{@linkplain State#NEW NEW} -&gt;\n",
        "33": " *   <li>{@linkplain State#STARTING STARTING} -&gt;\n",
        "34": " *   <li>{@linkplain State#RUNNING RUNNING} -&gt;\n",
        "35": " *   <li>{@linkplain State#STOPPING STOPPING} -&gt;\n",
        "36": " *   <li>{@linkplain State#TERMINATED TERMINATED}\n",
        "68": "  /** Returns {@code true} if this service is {@linkplain State#RUNNING running}. */\n",
        "71": "  /** Returns the lifecycle state of the service. */\n",
        "76": "   * this initiates service shutdown and returns immediately. If the service is {@linkplain\n",
        "77": "   * State#NEW new}, it is {@linkplain State#TERMINATED terminated} without having been started nor\n",
        "78": "   * stopped. If the service has already been stopped, this method returns immediately without\n",
        "79": "   * taking action.\n",
        "91": "   *     enter the {@link State#RUNNING} state. e.g. if the {@code state} is {@code\n",
        "92": "   *     State#TERMINATED} when this method is called then this will throw an IllegalStateException.\n",
        "105": "   *     enter the {@link State#RUNNING RUNNING} state. e.g. if the {@code state} is {@code\n",
        "106": "   *     State#TERMINATED} when this method is called then this will throw an IllegalStateException.\n",
        "158": "   *     lightweight listeners that would be safe to execute in any thread, consider {@link\n",
        "159": "   *     MoreExecutors#directExecutor}.\n",
        "176": "    /** A service in this state is inactive. It does minimal work and consumes minimal resources. */\n",
        "184": "    /** A service in this state is transitioning to {@link #RUNNING}. */\n",
        "192": "    /** A service in this state is operational. */\n",
        "200": "    /** A service in this state is transitioning to {@link #TERMINATED}. */\n",
        "245": "     * Called when the service transitions from {@linkplain State#NEW NEW} to {@linkplain\n",
        "246": "     * State#STARTING STARTING}. This occurs when {@link Service#startAsync} is called the first\n",
        "247": "     * time.\n",
        "252": "     * Called when the service transitions from {@linkplain State#STARTING STARTING} to {@linkplain\n",
        "253": "     * State#RUNNING RUNNING}. This occurs when a service has successfully started.\n",
        "259": "     * only valid values for {@code from} are {@linkplain State#STARTING STARTING} or {@linkplain\n",
        "260": "     * State#RUNNING RUNNING}. This occurs when {@link Service#stopAsync} is called.\n",
        "269": "     * diagram. Therefore, if this method is called, no other methods will be called on the {@link\n",
        "270": "     * Listener}.\n",
        "273": "     *     this are {@linkplain State#NEW NEW}, {@linkplain State#RUNNING RUNNING} or {@linkplain\n",
        "274": "     *     State#STOPPING STOPPING}.\n"
    },
    "removed": {
        "25": " * An object with an operational state, plus asynchronous {@link #startAsync()} and\n",
        "26": " * {@link #stopAsync()} lifecycle methods to transition between states. Example services include\n",
        "31": " * <li>{@linkplain State#NEW NEW} -&gt;\n",
        "32": " * <li>{@linkplain State#STARTING STARTING} -&gt;\n",
        "33": " * <li>{@linkplain State#RUNNING RUNNING} -&gt;\n",
        "34": " * <li>{@linkplain State#STOPPING STOPPING} -&gt;\n",
        "35": " * <li>{@linkplain State#TERMINATED TERMINATED}\n",
        "62": "   *\n",
        "68": "  /**\n",
        "69": "   * Returns {@code true} if this service is {@linkplain State#RUNNING running}.\n",
        "70": "   */\n",
        "73": "  /**\n",
        "74": "   * Returns the lifecycle state of the service.\n",
        "75": "   */\n",
        "80": "   * this initiates service shutdown and returns immediately. If the service is\n",
        "81": "   * {@linkplain State#NEW new}, it is {@linkplain State#TERMINATED terminated} without having been\n",
        "82": "   * started nor stopped. If the service has already been stopped, this method returns immediately\n",
        "83": "   * without taking action.\n",
        "95": "   *     enter the {@link State#RUNNING} state. e.g. if the {@code state} is\n",
        "96": "   *     {@code State#TERMINATED} when this method is called then this will throw an\n",
        "97": "   *     IllegalStateException.\n",
        "98": "   *\n",
        "111": "   *     enter the {@link State#RUNNING RUNNING} state. e.g. if the {@code state} is\n",
        "112": "   *     {@code State#TERMINATED} when this method is called then this will throw an\n",
        "113": "   *     IllegalStateException.\n",
        "114": "   *\n",
        "123": "   *\n",
        "144": "   *\n",
        "168": "   *     lightweight listeners that would be safe to execute in any thread, consider\n",
        "169": "   *     {@link MoreExecutors#directExecutor}.\n",
        "186": "    /**\n",
        "187": "     * A service in this state is inactive. It does minimal work and consumes minimal resources.\n",
        "188": "     */\n",
        "196": "    /**\n",
        "197": "     * A service in this state is transitioning to {@link #RUNNING}.\n",
        "198": "     */\n",
        "206": "    /**\n",
        "207": "     * A service in this state is operational.\n",
        "208": "     */\n",
        "216": "    /**\n",
        "217": "     * A service in this state is transitioning to {@link #TERMINATED}.\n",
        "218": "     */\n",
        "263": "     * Called when the service transitions from {@linkplain State#NEW NEW} to\n",
        "264": "     * {@linkplain State#STARTING STARTING}. This occurs when {@link Service#startAsync} is called\n",
        "265": "     * the first time.\n",
        "270": "     * Called when the service transitions from {@linkplain State#STARTING STARTING} to\n",
        "271": "     * {@linkplain State#RUNNING RUNNING}. This occurs when a service has successfully started.\n",
        "277": "     * only valid values for {@code from} are {@linkplain State#STARTING STARTING} or\n",
        "278": "     * {@linkplain State#RUNNING RUNNING}. This occurs when {@link Service#stopAsync} is called.\n",
        "287": "     * diagram. Therefore, if this method is called, no other methods will be called on the\n",
        "288": "     * {@link Listener}.\n",
        "291": "     *     this are {@linkplain State#NEW NEW}, {@linkplain State#RUNNING RUNNING} or\n",
        "292": "     *     {@linkplain State#STOPPING STOPPING}.\n"
    }
}