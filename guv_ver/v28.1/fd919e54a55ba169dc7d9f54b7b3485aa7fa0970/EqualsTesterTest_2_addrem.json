{
    "addition": {
        "50": "  /** Test null reference yields error */\n",
        "55": "    } catch (NullPointerException e) {\n",
        "56": "    }\n",
        "59": "  /** Test equalObjects after adding multiple instances at once with a null */\n",
        "64": "    } catch (NullPointerException e) {\n",
        "65": "    }\n",
        "68": "  /** Test adding null equal object yields error */\n",
        "73": "    } catch (NullPointerException e) {\n",
        "74": "    }\n",
        "78": "   * Test adding objects only by addEqualityGroup, with no reference object specified in the\n",
        "79": "   * constructor.\n",
        "87": "          e,\n",
        "88": "          equalObject1\n",
        "89": "              + \" [group 1, item 1] must be Object#equals to \"\n",
        "90": "              + notEqualObject1\n",
        "91": "              + \" [group 1, item 2]\");\n",
        "98": "   * Test EqualsTester with no equals or not equals objects. This checks proper handling of null,\n",
        "99": "   * incompatible class and reflexive tests\n",
        "107": "   * Test EqualsTester after populating equalObjects. This checks proper handling of equality and\n",
        "108": "   * verifies hashCode for valid objects\n",
        "115": "  /** Test proper handling of case where an object is not equal to itself */\n",
        "122": "      assertErrorMessage(e, obj + \" must be Object#equals to itself\");\n",
        "128": "  /** Test proper handling where an object tests equal to null */\n",
        "135": "      assertErrorMessage(e, obj + \" must not be Object#equals to null\");\n",
        "141": "  /** Test proper handling where an object incorrectly tests for an incompatible class */\n",
        "149": "          e, obj + \" must not be Object#equals to an arbitrary object of another class\");\n",
        "155": "  /** Test proper handling where an object is not equal to one the user has said should be equal */\n",
        "169": "   * Test for an invalid hashCode method, i.e., one that returns different value for objects that\n",
        "170": "   * are equal according to the equals method\n",
        "180": "          e,\n",
        "181": "          \"the Object#hashCode (\"\n",
        "182": "              + a.hashCode()\n",
        "183": "              + \") of \"\n",
        "184": "              + a\n",
        "185": "              + \" [group 1, item 1] must be equal to the Object#hashCode (\"\n",
        "186": "              + b.hashCode()\n",
        "187": "              + \") of \"\n",
        "188": "              + b);\n",
        "199": "    } catch (NullPointerException e) {\n",
        "200": "    }\n",
        "214": "    EqualsTester tester =\n",
        "215": "        new EqualsTester().addEqualityGroup(named(\"foo\").addPeers(\"bar\"), named(\"bar\"));\n",
        "219": "      assertErrorMessage(e, \"bar [group 1, item 2] must be Object#equals to foo [group 1, item 1]\");\n",
        "226": "    EqualsTester tester =\n",
        "227": "        new EqualsTester()\n",
        "228": "            .addEqualityGroup(\n",
        "229": "                named(\"foo\").addPeers(\"bar\", \"baz\"),\n",
        "230": "                named(\"bar\").addPeers(\"foo\"),\n",
        "231": "                named(\"baz\").addPeers(\"foo\"));\n",
        "235": "      assertErrorMessage(e, \"bar [group 1, item 2] must be Object#equals to baz [group 1, item 3]\");\n",
        "242": "    EqualsTester tester = new EqualsTester().addEqualityGroup(named(\"foo\"), named(\"bar\"));\n",
        "246": "      assertErrorMessage(e, \"foo [group 1, item 1] must be Object#equals to bar [group 1, item 2]\");\n",
        "253": "    EqualsTester tester =\n",
        "254": "        new EqualsTester()\n",
        "255": "            .addEqualityGroup(named(\"foo\").addPeers(\"bar\"), named(\"bar\").addPeers(\"foo\", \"x\"))\n",
        "256": "            .addEqualityGroup(named(\"baz\").addPeers(\"x\"), named(\"x\").addPeers(\"baz\", \"bar\"));\n",
        "261": "          e, \"bar [group 1, item 2] must not be Object#equals to x [group 2, item 2]\");\n",
        "269": "        .addEqualityGroup(named(\"foo\").addPeers(\"bar\"), named(\"bar\").addPeers(\"foo\"))\n",
        "282": "   * Test class with valid equals and hashCode methods. Testers created with instances of this class\n",
        "283": "   * should always pass.\n",
        "294": "    @Override\n",
        "295": "    public boolean equals(Object o) {\n",
        "309": "    @Override\n",
        "310": "    public int hashCode() {\n",
        "328": "    @Override\n",
        "329": "    public boolean equals(Object o) {\n",
        "344": "  /** Test class that violates reflexivity. It is not equal to itself */\n",
        "347": "    @Override\n",
        "348": "    public boolean equals(Object o) {\n",
        "352": "    @Override\n",
        "353": "    public int hashCode() {\n",
        "361": "    @Override\n",
        "362": "    public boolean equals(Object o) {\n",
        "366": "    @Override\n",
        "367": "    public int hashCode() {\n",
        "372": "  /** Test class that returns true even if the test object is of the wrong class */\n",
        "375": "    @Override\n",
        "376": "    public boolean equals(Object o) {\n",
        "380": "    @Override\n",
        "381": "    public int hashCode() {\n",
        "404": "    @Override\n",
        "405": "    public boolean equals(Object obj) {\n",
        "413": "    @Override\n",
        "414": "    public int hashCode() {\n",
        "418": "    @Override\n",
        "419": "    public String toString() {\n"
    },
    "removed": {
        "50": "  /**\n",
        "51": "   * Test null reference yields error\n",
        "52": "   */\n",
        "57": "    } catch (NullPointerException e) {}\n",
        "60": "  /**\n",
        "61": "   * Test equalObjects after adding multiple instances at once with a null\n",
        "62": "   */\n",
        "67": "    } catch (NullPointerException e) {}\n",
        "70": "  /**\n",
        "71": "   * Test adding null equal object yields error\n",
        "72": "   */\n",
        "77": "    } catch (NullPointerException e) {}\n",
        "81": "   * Test adding objects only by addEqualityGroup, with no reference object\n",
        "82": "   * specified in the constructor.\n",
        "90": "        e,\n",
        "91": "        equalObject1 + \" [group 1, item 1] must be Object#equals to \"\n",
        "92": "            + notEqualObject1 + \" [group 1, item 2]\");\n",
        "99": "   * Test EqualsTester with no equals or not equals objects.  This checks\n",
        "100": "   * proper handling of null, incompatible class and reflexive tests\n",
        "108": "   * Test EqualsTester after populating equalObjects.  This checks proper\n",
        "109": "   * handling of equality and verifies hashCode for valid objects\n",
        "116": "  /**\n",
        "117": "   * Test proper handling of case where an object is not equal to itself\n",
        "118": "   */\n",
        "125": "      assertErrorMessage(\n",
        "126": "          e, obj + \" must be Object#equals to itself\");\n",
        "132": "  /**\n",
        "133": "   * Test proper handling where an object tests equal to null\n",
        "134": "   */\n",
        "141": "      assertErrorMessage(\n",
        "142": "          e, obj + \" must not be Object#equals to null\");\n",
        "148": "  /**\n",
        "149": "   * Test proper handling where an object incorrectly tests for an\n",
        "150": "   * incompatible class\n",
        "151": "   */\n",
        "159": "          e,\n",
        "160": "          obj\n",
        "161": "          + \" must not be Object#equals to an arbitrary object of another class\");\n",
        "167": "  /**\n",
        "168": "   * Test proper handling where an object is not equal to one the user has\n",
        "169": "   * said should be equal\n",
        "170": "   */\n",
        "184": "   * Test for an invalid hashCode method, i.e., one that returns different\n",
        "185": "   * value for objects that are equal according to the equals method\n",
        "195": "          e, \"the Object#hashCode (\" + a.hashCode() + \") of \" + a\n",
        "196": "          + \" [group 1, item 1] must be equal to the Object#hashCode (\"\n",
        "197": "          + b.hashCode() + \") of \" + b);\n",
        "208": "    } catch (NullPointerException e) {}\n",
        "222": "    EqualsTester tester = new EqualsTester()\n",
        "223": "        .addEqualityGroup(named(\"foo\").addPeers(\"bar\"), named(\"bar\"));\n",
        "227": "      assertErrorMessage(\n",
        "228": "          e,\n",
        "229": "          \"bar [group 1, item 2] must be Object#equals to foo [group 1, item 1]\");\n",
        "236": "    EqualsTester tester = new EqualsTester()\n",
        "237": "        .addEqualityGroup(\n",
        "238": "            named(\"foo\").addPeers(\"bar\", \"baz\"),\n",
        "239": "            named(\"bar\").addPeers(\"foo\"),\n",
        "240": "            named(\"baz\").addPeers(\"foo\"));\n",
        "244": "      assertErrorMessage(\n",
        "245": "          e,\n",
        "246": "          \"bar [group 1, item 2] must be Object#equals to baz [group 1, item 3]\");\n",
        "253": "    EqualsTester tester = new EqualsTester()\n",
        "254": "        .addEqualityGroup(named(\"foo\"), named(\"bar\"));\n",
        "258": "      assertErrorMessage(\n",
        "259": "          e,\n",
        "260": "          \"foo [group 1, item 1] must be Object#equals to bar [group 1, item 2]\");\n",
        "267": "    EqualsTester tester = new EqualsTester()\n",
        "268": "        .addEqualityGroup(\n",
        "269": "            named(\"foo\").addPeers(\"bar\"),\n",
        "270": "            named(\"bar\").addPeers(\"foo\", \"x\"))\n",
        "271": "        .addEqualityGroup(\n",
        "272": "            named(\"baz\").addPeers(\"x\"),\n",
        "273": "            named(\"x\").addPeers(\"baz\", \"bar\"));\n",
        "278": "          e,\n",
        "279": "          \"bar [group 1, item 2] must not be Object#equals to x [group 2, item 2]\");\n",
        "287": "        .addEqualityGroup(\n",
        "288": "            named(\"foo\").addPeers(\"bar\"), named(\"bar\").addPeers(\"foo\"))\n",
        "301": "   * Test class with valid equals and hashCode methods.  Testers created\n",
        "302": "   * with instances of this class should always pass.\n",
        "313": "    @Override public boolean equals(Object o) {\n",
        "327": "    @Override public int hashCode() {\n",
        "345": "    @Override public boolean equals(Object o) {\n",
        "360": "  /** Test class that violates reflexivity.  It is not equal to itself */\n",
        "363": "    @Override public boolean equals(Object o) {\n",
        "367": "    @Override public int hashCode() {\n",
        "375": "    @Override public boolean equals(Object o) {\n",
        "379": "    @Override public int hashCode() {\n",
        "384": "  /**\n",
        "385": "   * Test class that returns true even if the test object is of the wrong class\n",
        "386": "   */\n",
        "389": "    @Override public boolean equals(Object o) {\n",
        "393": "    @Override public int hashCode() {\n",
        "416": "    @Override public boolean equals(Object obj) {\n",
        "424": "    @Override public int hashCode() {\n",
        "428": "    @Override public String toString() {\n"
    }
}