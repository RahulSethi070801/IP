{
    "addition": {
        "19": " * A package-local class holding common representation and mechanics for classes supporting dynamic\n",
        "20": " * striping on 64bit values. The class extends Number so that concrete subclasses must publicly do\n",
        "21": " * so.\n",
        "25": "  /*\n",
        "26": "   * This class maintains a lazily-initialized table of atomically\n",
        "27": "   * updated variables, plus an extra \"base\" field. The table size\n",
        "28": "   * is a power of two. Indexing uses masked per-thread hash codes.\n",
        "29": "   * Nearly all declarations in this class are package-private,\n",
        "30": "   * accessed directly by subclasses.\n",
        "31": "   *\n",
        "32": "   * Table entries are of class Cell; a variant of AtomicLong padded\n",
        "33": "   * to reduce cache contention on most processors. Padding is\n",
        "34": "   * overkill for most Atomics because they are usually irregularly\n",
        "35": "   * scattered in memory and thus don't interfere much with each\n",
        "36": "   * other. But Atomic objects residing in arrays will tend to be\n",
        "37": "   * placed adjacent to each other, and so will most often share\n",
        "38": "   * cache lines (with a huge negative performance impact) without\n",
        "39": "   * this precaution.\n",
        "40": "   *\n",
        "41": "   * In part because Cells are relatively large, we avoid creating\n",
        "42": "   * them until they are needed.  When there is no contention, all\n",
        "43": "   * updates are made to the base field.  Upon first contention (a\n",
        "44": "   * failed CAS on base update), the table is initialized to size 2.\n",
        "45": "   * The table size is doubled upon further contention until\n",
        "46": "   * reaching the nearest power of two greater than or equal to the\n",
        "47": "   * number of CPUS. Table slots remain empty (null) until they are\n",
        "48": "   * needed.\n",
        "49": "   *\n",
        "50": "   * A single spinlock (\"busy\") is used for initializing and\n",
        "51": "   * resizing the table, as well as populating slots with new Cells.\n",
        "52": "   * There is no need for a blocking lock; when the lock is not\n",
        "53": "   * available, threads try other slots (or the base).  During these\n",
        "54": "   * retries, there is increased contention and reduced locality,\n",
        "55": "   * which is still better than alternatives.\n",
        "56": "   *\n",
        "57": "   * Per-thread hash codes are initialized to random values.\n",
        "58": "   * Contention and/or table collisions are indicated by failed\n",
        "59": "   * CASes when performing an update operation (see method\n",
        "60": "   * retryUpdate). Upon a collision, if the table size is less than\n",
        "61": "   * the capacity, it is doubled in size unless some other thread\n",
        "62": "   * holds the lock. If a hashed slot is empty, and lock is\n",
        "63": "   * available, a new Cell is created. Otherwise, if the slot\n",
        "64": "   * exists, a CAS is tried.  Retries proceed by \"double hashing\",\n",
        "65": "   * using a secondary hash (Marsaglia XorShift) to try to find a\n",
        "66": "   * free slot.\n",
        "67": "   *\n",
        "68": "   * The table size is capped because, when there are more threads\n",
        "69": "   * than CPUs, supposing that each thread were bound to a CPU,\n",
        "70": "   * there would exist a perfect hash function mapping threads to\n",
        "71": "   * slots that eliminates collisions. When we reach capacity, we\n",
        "72": "   * search for this mapping by randomly varying the hash codes of\n",
        "73": "   * colliding threads.  Because search is random, and collisions\n",
        "74": "   * only become known via CAS failures, convergence can be slow,\n",
        "75": "   * and because threads are typically not bound to CPUS forever,\n",
        "76": "   * may not occur at all. However, despite these limitations,\n",
        "77": "   * observed contention rates are typically low in these cases.\n",
        "78": "   *\n",
        "79": "   * It is possible for a Cell to become unused when threads that\n",
        "80": "   * once hashed to it terminate, as well as in the case where\n",
        "81": "   * doubling the table causes no thread to hash to it under\n",
        "82": "   * expanded mask.  We do not try to detect or remove such cells,\n",
        "83": "   * under the assumption that for long-running instances, observed\n",
        "84": "   * contention levels will recur, so the cells will eventually be\n",
        "85": "   * needed again; and for short-lived ones, it does not matter.\n",
        "86": "   */\n",
        "88": "  /**\n",
        "89": "   * Padded variant of AtomicLong supporting only raw accesses plus CAS. The value field is placed\n",
        "90": "   * between pads, hoping that the JVM doesn't reorder them.\n",
        "91": "   *\n",
        "92": "   * <p>JVM intrinsics note: It would be possible to use a release-only form of CAS here, if it were\n",
        "93": "   * provided.\n",
        "94": "   */\n",
        "95": "  static final class Cell {\n",
        "96": "    volatile long p0, p1, p2, p3, p4, p5, p6;\n",
        "97": "    volatile long value;\n",
        "98": "    volatile long q0, q1, q2, q3, q4, q5, q6;\n",
        "100": "    Cell(long x) {\n",
        "101": "      value = x;\n",
        "102": "    }\n",
        "104": "    final boolean cas(long cmp, long val) {\n",
        "105": "      return UNSAFE.compareAndSwapLong(this, valueOffset, cmp, val);\n",
        "106": "    }\n",
        "108": "    // Unsafe mechanics\n",
        "109": "    private static final sun.misc.Unsafe UNSAFE;\n",
        "110": "    private static final long valueOffset;\n",
        "111": "\n",
        "112": "    static {\n",
        "113": "      try {\n",
        "114": "        UNSAFE = getUnsafe();\n",
        "115": "        Class<?> ak = Cell.class;\n",
        "116": "        valueOffset = UNSAFE.objectFieldOffset(ak.getDeclaredField(\"value\"));\n",
        "117": "      } catch (Exception e) {\n",
        "118": "        throw new Error(e);\n",
        "119": "      }\n",
        "121": "  }\n",
        "130": "  /** Generator of new random hash codes */\n",
        "131": "  static final Random rng = new Random();\n",
        "133": "  /** Number of CPUS, to place bound on table size */\n",
        "134": "  static final int NCPU = Runtime.getRuntime().availableProcessors();\n",
        "136": "  /** Table of cells. When non-null, size is a power of 2. */\n",
        "137": "  transient volatile Cell[] cells;\n",
        "139": "  /**\n",
        "140": "   * Base value, used mainly when there is no contention, but also as a fallback during table\n",
        "141": "   * initialization races. Updated via CAS.\n",
        "142": "   */\n",
        "143": "  transient volatile long base;\n",
        "145": "  /** Spinlock (locked via CAS) used when resizing and/or creating Cells. */\n",
        "146": "  transient volatile int busy;\n",
        "148": "  /** Package-private default constructor */\n",
        "149": "  Striped64() {}\n",
        "151": "  /** CASes the base field. */\n",
        "152": "  final boolean casBase(long cmp, long val) {\n",
        "153": "    return UNSAFE.compareAndSwapLong(this, baseOffset, cmp, val);\n",
        "154": "  }\n",
        "156": "  /** CASes the busy field from 0 to 1 to acquire lock. */\n",
        "157": "  final boolean casBusy() {\n",
        "158": "    return UNSAFE.compareAndSwapInt(this, busyOffset, 0, 1);\n",
        "159": "  }\n",
        "161": "  /**\n",
        "162": "   * Computes the function of current and new value. Subclasses should open-code this update\n",
        "163": "   * function for most uses, but the virtualized form is needed within retryUpdate.\n",
        "164": "   *\n",
        "165": "   * @param currentValue the current value (of either base or a cell)\n",
        "166": "   * @param newValue the argument from a user update call\n",
        "167": "   * @return result of the update function\n",
        "168": "   */\n",
        "169": "  abstract long fn(long currentValue, long newValue);\n",
        "171": "  /**\n",
        "172": "   * Handles cases of updates involving initialization, resizing, creating new Cells, and/or\n",
        "173": "   * contention. See above for explanation. This method suffers the usual non-modularity problems of\n",
        "174": "   * optimistic retry code, relying on rechecked sets of reads.\n",
        "175": "   *\n",
        "176": "   * @param x the value\n",
        "177": "   * @param hc the hash code holder\n",
        "178": "   * @param wasUncontended false if CAS failed before call\n",
        "179": "   */\n",
        "180": "  final void retryUpdate(long x, @Nullable int[] hc, boolean wasUncontended) {\n",
        "181": "    int h;\n",
        "182": "    if (hc == null) {\n",
        "183": "      threadHashCode.set(hc = new int[1]); // Initialize randomly\n",
        "184": "      int r = rng.nextInt(); // Avoid zero to allow xorShift rehash\n",
        "185": "      h = hc[0] = (r == 0) ? 1 : r;\n",
        "186": "    } else h = hc[0];\n",
        "187": "    boolean collide = false; // True if last slot nonempty\n",
        "188": "    for (; ; ) {\n",
        "189": "      Cell[] as;\n",
        "190": "      Cell a;\n",
        "191": "      int n;\n",
        "192": "      long v;\n",
        "193": "      if ((as = cells) != null && (n = as.length) > 0) {\n",
        "194": "        if ((a = as[(n - 1) & h]) == null) {\n",
        "195": "          if (busy == 0) { // Try to attach new Cell\n",
        "196": "            Cell r = new Cell(x); // Optimistically create\n",
        "197": "            if (busy == 0 && casBusy()) {\n",
        "198": "              boolean created = false;\n",
        "199": "              try { // Recheck under lock\n",
        "200": "                Cell[] rs;\n",
        "201": "                int m, j;\n",
        "202": "                if ((rs = cells) != null && (m = rs.length) > 0 && rs[j = (m - 1) & h] == null) {\n",
        "203": "                  rs[j] = r;\n",
        "204": "                  created = true;\n",
        "206": "              } finally {\n",
        "207": "                busy = 0;\n",
        "208": "              }\n",
        "209": "              if (created) break;\n",
        "210": "              continue; // Slot is now non-empty\n",
        "212": "          }\n",
        "213": "          collide = false;\n",
        "214": "        } else if (!wasUncontended) // CAS already known to fail\n",
        "215": "        wasUncontended = true; // Continue after rehash\n",
        "216": "        else if (a.cas(v = a.value, fn(v, x))) break;\n",
        "217": "        else if (n >= NCPU || cells != as) collide = false; // At max size or stale\n",
        "218": "        else if (!collide) collide = true;\n",
        "219": "        else if (busy == 0 && casBusy()) {\n",
        "220": "          try {\n",
        "221": "            if (cells == as) { // Expand table unless stale\n",
        "222": "              Cell[] rs = new Cell[n << 1];\n",
        "223": "              for (int i = 0; i < n; ++i) rs[i] = as[i];\n",
        "224": "              cells = rs;\n",
        "226": "          } finally {\n",
        "227": "            busy = 0;\n",
        "228": "          }\n",
        "229": "          collide = false;\n",
        "230": "          continue; // Retry with expanded table\n",
        "232": "        h ^= h << 13; // Rehash\n",
        "233": "        h ^= h >>> 17;\n",
        "234": "        h ^= h << 5;\n",
        "235": "        hc[0] = h; // Record index for next time\n",
        "236": "      } else if (busy == 0 && cells == as && casBusy()) {\n",
        "237": "        boolean init = false;\n",
        "238": "        try { // Initialize table\n",
        "239": "          if (cells == as) {\n",
        "240": "            Cell[] rs = new Cell[2];\n",
        "241": "            rs[h & 1] = new Cell(x);\n",
        "242": "            cells = rs;\n",
        "243": "            init = true;\n",
        "244": "          }\n",
        "245": "        } finally {\n",
        "246": "          busy = 0;\n",
        "247": "        }\n",
        "248": "        if (init) break;\n",
        "249": "      } else if (casBase(v = base, fn(v, x))) break; // Fall back on using base\n",
        "251": "  }\n",
        "253": "  /** Sets base and all cells to the given value. */\n",
        "254": "  final void internalReset(long initialValue) {\n",
        "255": "    Cell[] as = cells;\n",
        "256": "    base = initialValue;\n",
        "257": "    if (as != null) {\n",
        "258": "      int n = as.length;\n",
        "259": "      for (int i = 0; i < n; ++i) {\n",
        "260": "        Cell a = as[i];\n",
        "261": "        if (a != null) a.value = initialValue;\n",
        "262": "      }\n",
        "264": "  }\n",
        "266": "  // Unsafe mechanics\n",
        "267": "  private static final sun.misc.Unsafe UNSAFE;\n",
        "268": "  private static final long baseOffset;\n",
        "269": "  private static final long busyOffset;\n",
        "270": "\n",
        "271": "  static {\n",
        "272": "    try {\n",
        "273": "      UNSAFE = getUnsafe();\n",
        "274": "      Class<?> sk = Striped64.class;\n",
        "275": "      baseOffset = UNSAFE.objectFieldOffset(sk.getDeclaredField(\"base\"));\n",
        "276": "      busyOffset = UNSAFE.objectFieldOffset(sk.getDeclaredField(\"busy\"));\n",
        "277": "    } catch (Exception e) {\n",
        "278": "      throw new Error(e);\n",
        "280": "  }\n",
        "282": "  /**\n",
        "283": "   * Returns a sun.misc.Unsafe. Suitable for use in a 3rd party package. Replace with a simple call\n",
        "284": "   * to Unsafe.getUnsafe when integrating into a jdk.\n",
        "285": "   *\n",
        "286": "   * @return a sun.misc.Unsafe\n",
        "287": "   */\n",
        "288": "  private static sun.misc.Unsafe getUnsafe() {\n",
        "289": "    try {\n",
        "290": "      return sun.misc.Unsafe.getUnsafe();\n",
        "291": "    } catch (SecurityException tryReflectionInstead) {\n",
        "292": "    }\n",
        "293": "    try {\n",
        "294": "      return java.security.AccessController.doPrivileged(\n",
        "295": "          new java.security.PrivilegedExceptionAction<sun.misc.Unsafe>() {\n",
        "296": "            public sun.misc.Unsafe run() throws Exception {\n",
        "297": "              Class<sun.misc.Unsafe> k = sun.misc.Unsafe.class;\n",
        "298": "              for (java.lang.reflect.Field f : k.getDeclaredFields()) {\n",
        "299": "                f.setAccessible(true);\n",
        "300": "                Object x = f.get(null);\n",
        "301": "                if (k.isInstance(x)) return k.cast(x);\n",
        "302": "              }\n",
        "303": "              throw new NoSuchFieldError(\"the Unsafe\");\n",
        "304": "            }\n",
        "305": "          });\n",
        "306": "    } catch (java.security.PrivilegedActionException e) {\n",
        "307": "      throw new RuntimeException(\"Could not initialize intrinsics\", e.getCause());\n",
        "309": "  }\n"
    },
    "removed": {
        "19": " * A package-local class holding common representation and mechanics\n",
        "20": " * for classes supporting dynamic striping on 64bit values. The class\n",
        "21": " * extends Number so that concrete subclasses must publicly do so.\n",
        "25": "    /*\n",
        "26": "     * This class maintains a lazily-initialized table of atomically\n",
        "27": "     * updated variables, plus an extra \"base\" field. The table size\n",
        "28": "     * is a power of two. Indexing uses masked per-thread hash codes.\n",
        "29": "     * Nearly all declarations in this class are package-private,\n",
        "30": "     * accessed directly by subclasses.\n",
        "31": "     *\n",
        "32": "     * Table entries are of class Cell; a variant of AtomicLong padded\n",
        "33": "     * to reduce cache contention on most processors. Padding is\n",
        "34": "     * overkill for most Atomics because they are usually irregularly\n",
        "35": "     * scattered in memory and thus don't interfere much with each\n",
        "36": "     * other. But Atomic objects residing in arrays will tend to be\n",
        "37": "     * placed adjacent to each other, and so will most often share\n",
        "38": "     * cache lines (with a huge negative performance impact) without\n",
        "39": "     * this precaution.\n",
        "40": "     *\n",
        "41": "     * In part because Cells are relatively large, we avoid creating\n",
        "42": "     * them until they are needed.  When there is no contention, all\n",
        "43": "     * updates are made to the base field.  Upon first contention (a\n",
        "44": "     * failed CAS on base update), the table is initialized to size 2.\n",
        "45": "     * The table size is doubled upon further contention until\n",
        "46": "     * reaching the nearest power of two greater than or equal to the\n",
        "47": "     * number of CPUS. Table slots remain empty (null) until they are\n",
        "48": "     * needed.\n",
        "49": "     *\n",
        "50": "     * A single spinlock (\"busy\") is used for initializing and\n",
        "51": "     * resizing the table, as well as populating slots with new Cells.\n",
        "52": "     * There is no need for a blocking lock; when the lock is not\n",
        "53": "     * available, threads try other slots (or the base).  During these\n",
        "54": "     * retries, there is increased contention and reduced locality,\n",
        "55": "     * which is still better than alternatives.\n",
        "56": "     *\n",
        "57": "     * Per-thread hash codes are initialized to random values.\n",
        "58": "     * Contention and/or table collisions are indicated by failed\n",
        "59": "     * CASes when performing an update operation (see method\n",
        "60": "     * retryUpdate). Upon a collision, if the table size is less than\n",
        "61": "     * the capacity, it is doubled in size unless some other thread\n",
        "62": "     * holds the lock. If a hashed slot is empty, and lock is\n",
        "63": "     * available, a new Cell is created. Otherwise, if the slot\n",
        "64": "     * exists, a CAS is tried.  Retries proceed by \"double hashing\",\n",
        "65": "     * using a secondary hash (Marsaglia XorShift) to try to find a\n",
        "66": "     * free slot.\n",
        "67": "     *\n",
        "68": "     * The table size is capped because, when there are more threads\n",
        "69": "     * than CPUs, supposing that each thread were bound to a CPU,\n",
        "70": "     * there would exist a perfect hash function mapping threads to\n",
        "71": "     * slots that eliminates collisions. When we reach capacity, we\n",
        "72": "     * search for this mapping by randomly varying the hash codes of\n",
        "73": "     * colliding threads.  Because search is random, and collisions\n",
        "74": "     * only become known via CAS failures, convergence can be slow,\n",
        "75": "     * and because threads are typically not bound to CPUS forever,\n",
        "76": "     * may not occur at all. However, despite these limitations,\n",
        "77": "     * observed contention rates are typically low in these cases.\n",
        "78": "     *\n",
        "79": "     * It is possible for a Cell to become unused when threads that\n",
        "80": "     * once hashed to it terminate, as well as in the case where\n",
        "81": "     * doubling the table causes no thread to hash to it under\n",
        "82": "     * expanded mask.  We do not try to detect or remove such cells,\n",
        "83": "     * under the assumption that for long-running instances, observed\n",
        "84": "     * contention levels will recur, so the cells will eventually be\n",
        "85": "     * needed again; and for short-lived ones, it does not matter.\n",
        "86": "     */\n",
        "88": "    /**\n",
        "89": "     * Padded variant of AtomicLong supporting only raw accesses plus CAS.\n",
        "90": "     * The value field is placed between pads, hoping that the JVM doesn't\n",
        "91": "     * reorder them.\n",
        "92": "     *\n",
        "93": "     * JVM intrinsics note: It would be possible to use a release-only\n",
        "94": "     * form of CAS here, if it were provided.\n",
        "95": "     */\n",
        "96": "    static final class Cell {\n",
        "97": "        volatile long p0, p1, p2, p3, p4, p5, p6;\n",
        "98": "        volatile long value;\n",
        "99": "        volatile long q0, q1, q2, q3, q4, q5, q6;\n",
        "100": "        Cell(long x) { value = x; }\n",
        "102": "        final boolean cas(long cmp, long val) {\n",
        "103": "            return UNSAFE.compareAndSwapLong(this, valueOffset, cmp, val);\n",
        "104": "        }\n",
        "106": "        // Unsafe mechanics\n",
        "107": "        private static final sun.misc.Unsafe UNSAFE;\n",
        "108": "        private static final long valueOffset;\n",
        "109": "        static {\n",
        "110": "            try {\n",
        "111": "                UNSAFE = getUnsafe();\n",
        "112": "                Class<?> ak = Cell.class;\n",
        "113": "                valueOffset = UNSAFE.objectFieldOffset\n",
        "114": "                    (ak.getDeclaredField(\"value\"));\n",
        "115": "            } catch (Exception e) {\n",
        "116": "                throw new Error(e);\n",
        "117": "            }\n",
        "118": "        }\n",
        "129": "    /**\n",
        "130": "     * Generator of new random hash codes\n",
        "131": "     */\n",
        "132": "    static final Random rng = new Random();\n",
        "134": "    /** Number of CPUS, to place bound on table size */\n",
        "135": "    static final int NCPU = Runtime.getRuntime().availableProcessors();\n",
        "137": "    /**\n",
        "138": "     * Table of cells. When non-null, size is a power of 2.\n",
        "139": "     */\n",
        "140": "    transient volatile Cell[] cells;\n",
        "142": "    /**\n",
        "143": "     * Base value, used mainly when there is no contention, but also as\n",
        "144": "     * a fallback during table initialization races. Updated via CAS.\n",
        "145": "     */\n",
        "146": "    transient volatile long base;\n",
        "148": "    /**\n",
        "149": "     * Spinlock (locked via CAS) used when resizing and/or creating Cells.\n",
        "150": "     */\n",
        "151": "    transient volatile int busy;\n",
        "153": "    /**\n",
        "154": "     * Package-private default constructor\n",
        "155": "     */\n",
        "156": "    Striped64() {\n",
        "157": "    }\n",
        "159": "    /**\n",
        "160": "     * CASes the base field.\n",
        "161": "     */\n",
        "162": "    final boolean casBase(long cmp, long val) {\n",
        "163": "        return UNSAFE.compareAndSwapLong(this, baseOffset, cmp, val);\n",
        "164": "    }\n",
        "166": "    /**\n",
        "167": "     * CASes the busy field from 0 to 1 to acquire lock.\n",
        "168": "     */\n",
        "169": "    final boolean casBusy() {\n",
        "170": "        return UNSAFE.compareAndSwapInt(this, busyOffset, 0, 1);\n",
        "171": "    }\n",
        "173": "    /**\n",
        "174": "     * Computes the function of current and new value. Subclasses\n",
        "175": "     * should open-code this update function for most uses, but the\n",
        "176": "     * virtualized form is needed within retryUpdate.\n",
        "177": "     *\n",
        "178": "     * @param currentValue the current value (of either base or a cell)\n",
        "179": "     * @param newValue the argument from a user update call\n",
        "180": "     * @return result of the update function\n",
        "181": "     */\n",
        "182": "    abstract long fn(long currentValue, long newValue);\n",
        "184": "    /**\n",
        "185": "     * Handles cases of updates involving initialization, resizing,\n",
        "186": "     * creating new Cells, and/or contention. See above for\n",
        "187": "     * explanation. This method suffers the usual non-modularity\n",
        "188": "     * problems of optimistic retry code, relying on rechecked sets of\n",
        "189": "     * reads.\n",
        "190": "     *\n",
        "191": "     * @param x the value\n",
        "192": "     * @param hc the hash code holder\n",
        "193": "     * @param wasUncontended false if CAS failed before call\n",
        "194": "     */\n",
        "195": "    final void retryUpdate(long x, @Nullable int[] hc, boolean wasUncontended) {\n",
        "196": "        int h;\n",
        "197": "        if (hc == null) {\n",
        "198": "            threadHashCode.set(hc = new int[1]); // Initialize randomly\n",
        "199": "            int r = rng.nextInt(); // Avoid zero to allow xorShift rehash\n",
        "200": "            h = hc[0] = (r == 0) ? 1 : r;\n",
        "201": "        }\n",
        "202": "        else\n",
        "203": "            h = hc[0];\n",
        "204": "        boolean collide = false;                // True if last slot nonempty\n",
        "205": "        for (;;) {\n",
        "206": "            Cell[] as; Cell a; int n; long v;\n",
        "207": "            if ((as = cells) != null && (n = as.length) > 0) {\n",
        "208": "                if ((a = as[(n - 1) & h]) == null) {\n",
        "209": "                    if (busy == 0) {            // Try to attach new Cell\n",
        "210": "                        Cell r = new Cell(x);   // Optimistically create\n",
        "211": "                        if (busy == 0 && casBusy()) {\n",
        "212": "                            boolean created = false;\n",
        "213": "                            try {               // Recheck under lock\n",
        "214": "                                Cell[] rs; int m, j;\n",
        "215": "                                if ((rs = cells) != null &&\n",
        "216": "                                    (m = rs.length) > 0 &&\n",
        "217": "                                    rs[j = (m - 1) & h] == null) {\n",
        "218": "                                    rs[j] = r;\n",
        "219": "                                    created = true;\n",
        "220": "                                }\n",
        "221": "                            } finally {\n",
        "222": "                                busy = 0;\n",
        "223": "                            }\n",
        "224": "                            if (created)\n",
        "225": "                                break;\n",
        "226": "                            continue;           // Slot is now non-empty\n",
        "227": "                        }\n",
        "228": "                    }\n",
        "229": "                    collide = false;\n",
        "230": "                }\n",
        "231": "                else if (!wasUncontended)       // CAS already known to fail\n",
        "232": "                    wasUncontended = true;      // Continue after rehash\n",
        "233": "                else if (a.cas(v = a.value, fn(v, x)))\n",
        "234": "                    break;\n",
        "235": "                else if (n >= NCPU || cells != as)\n",
        "236": "                    collide = false;            // At max size or stale\n",
        "237": "                else if (!collide)\n",
        "238": "                    collide = true;\n",
        "239": "                else if (busy == 0 && casBusy()) {\n",
        "240": "                    try {\n",
        "241": "                        if (cells == as) {      // Expand table unless stale\n",
        "242": "                            Cell[] rs = new Cell[n << 1];\n",
        "243": "                            for (int i = 0; i < n; ++i)\n",
        "244": "                                rs[i] = as[i];\n",
        "245": "                            cells = rs;\n",
        "246": "                        }\n",
        "247": "                    } finally {\n",
        "248": "                        busy = 0;\n",
        "249": "                    }\n",
        "250": "                    collide = false;\n",
        "251": "                    continue;                   // Retry with expanded table\n",
        "253": "                h ^= h << 13;                   // Rehash\n",
        "254": "                h ^= h >>> 17;\n",
        "255": "                h ^= h << 5;\n",
        "256": "                hc[0] = h;                      // Record index for next time\n",
        "258": "            else if (busy == 0 && cells == as && casBusy()) {\n",
        "259": "                boolean init = false;\n",
        "260": "                try {                           // Initialize table\n",
        "261": "                    if (cells == as) {\n",
        "262": "                        Cell[] rs = new Cell[2];\n",
        "263": "                        rs[h & 1] = new Cell(x);\n",
        "264": "                        cells = rs;\n",
        "265": "                        init = true;\n",
        "266": "                    }\n",
        "267": "                } finally {\n",
        "268": "                    busy = 0;\n",
        "269": "                }\n",
        "270": "                if (init)\n",
        "271": "                    break;\n",
        "273": "            else if (casBase(v = base, fn(v, x)))\n",
        "274": "                break;                          // Fall back on using base\n",
        "278": "    /**\n",
        "279": "     * Sets base and all cells to the given value.\n",
        "280": "     */\n",
        "281": "    final void internalReset(long initialValue) {\n",
        "282": "        Cell[] as = cells;\n",
        "283": "        base = initialValue;\n",
        "284": "        if (as != null) {\n",
        "285": "            int n = as.length;\n",
        "286": "            for (int i = 0; i < n; ++i) {\n",
        "287": "                Cell a = as[i];\n",
        "288": "                if (a != null)\n",
        "289": "                    a.value = initialValue;\n",
        "290": "            }\n",
        "291": "        }\n",
        "294": "    // Unsafe mechanics\n",
        "295": "    private static final sun.misc.Unsafe UNSAFE;\n",
        "296": "    private static final long baseOffset;\n",
        "297": "    private static final long busyOffset;\n",
        "298": "    static {\n",
        "299": "        try {\n",
        "300": "            UNSAFE = getUnsafe();\n",
        "301": "            Class<?> sk = Striped64.class;\n",
        "302": "            baseOffset = UNSAFE.objectFieldOffset\n",
        "303": "                (sk.getDeclaredField(\"base\"));\n",
        "304": "            busyOffset = UNSAFE.objectFieldOffset\n",
        "305": "                (sk.getDeclaredField(\"busy\"));\n",
        "306": "        } catch (Exception e) {\n",
        "307": "            throw new Error(e);\n",
        "308": "        }\n",
        "311": "    /**\n",
        "312": "     * Returns a sun.misc.Unsafe.  Suitable for use in a 3rd party package.\n",
        "313": "     * Replace with a simple call to Unsafe.getUnsafe when integrating\n",
        "314": "     * into a jdk.\n",
        "315": "     *\n",
        "316": "     * @return a sun.misc.Unsafe\n",
        "317": "     */\n",
        "318": "    private static sun.misc.Unsafe getUnsafe() {\n",
        "319": "        try {\n",
        "320": "            return sun.misc.Unsafe.getUnsafe();\n",
        "321": "        } catch (SecurityException tryReflectionInstead) {}\n",
        "322": "        try {\n",
        "323": "            return java.security.AccessController.doPrivileged\n",
        "324": "            (new java.security.PrivilegedExceptionAction<sun.misc.Unsafe>() {\n",
        "325": "                public sun.misc.Unsafe run() throws Exception {\n",
        "326": "                    Class<sun.misc.Unsafe> k = sun.misc.Unsafe.class;\n",
        "327": "                    for (java.lang.reflect.Field f : k.getDeclaredFields()) {\n",
        "328": "                        f.setAccessible(true);\n",
        "329": "                        Object x = f.get(null);\n",
        "330": "                        if (k.isInstance(x))\n",
        "331": "                            return k.cast(x);\n",
        "332": "                    }\n",
        "333": "                    throw new NoSuchFieldError(\"the Unsafe\");\n",
        "334": "                }});\n",
        "335": "        } catch (java.security.PrivilegedActionException e) {\n",
        "336": "            throw new RuntimeException(\"Could not initialize intrinsics\",\n",
        "337": "                                       e.getCause());\n",
        "338": "        }\n"
    }
}