{
    "addition": {
        "33": " * <p>When evaluated as a {@link Function}, a cache yields the same result as invoking {@link\n",
        "34": " * #getUnchecked}.\n",
        "51": "   * into the cache. Newly loaded values are added to the cache using {@code\n",
        "52": "   * Cache.asMap().putIfAbsent} after loading has completed; if another value was associated with\n",
        "53": "   * {@code key} while the new value was loading then a removal notification will be sent for the\n",
        "54": "   * new value.\n",
        "60": "   *     ExecutionException} is thrown <a\n",
        "61": "   *     href=\"https://github.com/google/guava/wiki/CachesExplained#interruption\">even if\n",
        "80": "   * into the cache. Newly loaded values are added to the cache using {@code\n",
        "81": "   * Cache.asMap().putIfAbsent} after loading has completed; if another value was associated with\n",
        "82": "   * {@code key} while the new value was loading then a removal notification will be sent for the\n",
        "83": "   * new value.\n",
        "100": "   * <p>Caches loaded by a {@link CacheLoader} will issue a single request to {@link\n",
        "101": "   * CacheLoader#loadAll} for all keys which are not already present in the cache. All entries\n",
        "102": "   * returned by {@link CacheLoader#loadAll} will be stored in the cache, over-writing any\n",
        "111": "   *     ExecutionException} is thrown <a\n",
        "112": "   *     href=\"https://github.com/google/guava/wiki/CachesExplained#interruption\">even if\n",
        "122": "   * @deprecated Provided to satisfy the {@code Function} interface; use {@link #get} or {@link\n",
        "123": "   *     #getUnchecked} instead.\n",
        "144": "   * <p>Returns without doing anything if another thread is currently loading the value for {@code\n",
        "145": "   * key}. If the cache loader associated with this cache performs refresh asynchronously then this\n",
        "146": "   * method may return before refresh completes.\n"
    },
    "removed": {
        "33": " * <p>When evaluated as a {@link Function}, a cache yields the same result as invoking\n",
        "34": " * {@link #getUnchecked}.\n",
        "51": "   * into the cache. Newly loaded values are added to the cache using\n",
        "52": "   * {@code Cache.asMap().putIfAbsent} after loading has completed; if another value was associated\n",
        "53": "   * with {@code key} while the new value was loading then a removal notification will be sent for\n",
        "54": "   * the new value.\n",
        "60": "   *     ExecutionException} is thrown\n",
        "61": "   *     <a href=\"https://github.com/google/guava/wiki/CachesExplained#interruption\">even if\n",
        "80": "   * into the cache. Newly loaded values are added to the cache using\n",
        "81": "   * {@code Cache.asMap().putIfAbsent} after loading has completed; if another value was associated\n",
        "82": "   * with {@code key} while the new value was loading then a removal notification will be sent for\n",
        "83": "   * the new value.\n",
        "100": "   * <p>Caches loaded by a {@link CacheLoader} will issue a single request to\n",
        "101": "   * {@link CacheLoader#loadAll} for all keys which are not already present in the cache. All\n",
        "102": "   * entries returned by {@link CacheLoader#loadAll} will be stored in the cache, over-writing any\n",
        "111": "   *     ExecutionException} is thrown\n",
        "112": "   *     <a href=\"https://github.com/google/guava/wiki/CachesExplained#interruption\">even if\n",
        "122": "   * @deprecated Provided to satisfy the {@code Function} interface; use {@link #get} or\n",
        "123": "   *     {@link #getUnchecked} instead.\n",
        "144": "   * <p>Returns without doing anything if another thread is currently loading the value for\n",
        "145": "   * {@code key}. If the cache loader associated with this cache performs refresh asynchronously\n",
        "146": "   * then this method may return before refresh completes.\n"
    }
}