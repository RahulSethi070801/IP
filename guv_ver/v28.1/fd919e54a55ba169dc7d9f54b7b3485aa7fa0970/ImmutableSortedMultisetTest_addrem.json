{
    "addition": {
        "53": "    suite.addTest(\n",
        "54": "        SortedMultisetTestSuiteBuilder.using(\n",
        "55": "                new TestStringMultisetGenerator() {\n",
        "56": "                  @Override\n",
        "57": "                  protected Multiset<String> create(String[] elements) {\n",
        "58": "                    return ImmutableSortedMultiset.copyOf(elements);\n",
        "59": "                  }\n",
        "60": "\n",
        "61": "                  @Override\n",
        "62": "                  public List<String> order(List<String> insertionOrder) {\n",
        "63": "                    return Ordering.natural().sortedCopy(insertionOrder);\n",
        "64": "                  }\n",
        "65": "                })\n",
        "66": "            .named(\"ImmutableSortedMultiset\")\n",
        "67": "            .withFeatures(\n",
        "68": "                CollectionSize.ANY,\n",
        "69": "                CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "70": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "71": "            .createTestSuite());\n",
        "72": "\n",
        "73": "    suite.addTest(\n",
        "74": "        ListTestSuiteBuilder.using(\n",
        "75": "                new TestStringListGenerator() {\n",
        "76": "                  @Override\n",
        "77": "                  protected List<String> create(String[] elements) {\n",
        "78": "                    return ImmutableSortedMultiset.copyOf(elements).asList();\n",
        "79": "                  }\n",
        "80": "\n",
        "81": "                  @Override\n",
        "82": "                  public List<String> order(List<String> insertionOrder) {\n",
        "83": "                    return Ordering.natural().sortedCopy(insertionOrder);\n",
        "84": "                  }\n",
        "85": "                })\n",
        "86": "            .named(\"ImmutableSortedMultiset.asList\")\n",
        "87": "            .withFeatures(\n",
        "88": "                CollectionSize.ANY,\n",
        "89": "                CollectionFeature.SERIALIZABLE,\n",
        "90": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "91": "            .createTestSuite());\n",
        "92": "\n",
        "93": "    suite.addTest(\n",
        "94": "        ListTestSuiteBuilder.using(\n",
        "95": "                new TestStringListGenerator() {\n",
        "96": "                  @Override\n",
        "97": "                  protected List<String> create(String[] elements) {\n",
        "98": "                    Set<String> set = Sets.newHashSet();\n",
        "99": "                    ImmutableSortedMultiset.Builder<String> builder =\n",
        "100": "                        ImmutableSortedMultiset.naturalOrder();\n",
        "101": "                    for (String s : elements) {\n",
        "102": "                      checkArgument(set.add(s));\n",
        "103": "                      builder.addCopies(s, 2);\n",
        "104": "                    }\n",
        "105": "                    return builder.build().elementSet().asList();\n",
        "106": "                  }\n",
        "107": "\n",
        "108": "                  @Override\n",
        "109": "                  public List<String> order(List<String> insertionOrder) {\n",
        "110": "                    return Ordering.natural().sortedCopy(insertionOrder);\n",
        "111": "                  }\n",
        "112": "                })\n",
        "113": "            .named(\"ImmutableSortedMultiset.elementSet.asList\")\n",
        "114": "            .withFeatures(\n",
        "115": "                CollectionSize.ANY,\n",
        "116": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "117": "                CollectionFeature.SERIALIZABLE,\n",
        "118": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "119": "            .createTestSuite());\n",
        "178": "        Ordering.natural()\n",
        "179": "            .lexicographical()\n",
        "180": "            .onResultOf(\n",
        "181": "                new Function<String[], Iterable<Comparable>>() {\n",
        "182": "                  @Override\n",
        "183": "                  public Iterable<Comparable> apply(String[] input) {\n",
        "184": "                    return Arrays.<Comparable>asList(input);\n",
        "185": "                  }\n",
        "186": "                });\n",
        "199": "    } catch (NullPointerException expected) {\n",
        "200": "    }\n",
        "227": "    } catch (NullPointerException expected) {\n",
        "228": "    }\n",
        "254": "    } catch (NullPointerException expected) {\n",
        "255": "    }\n",
        "281": "    } catch (NullPointerException expected) {\n",
        "282": "    }\n",
        "324": "    Builder<String> builder =\n",
        "325": "        ImmutableSortedMultiset.<String>naturalOrder().add(\"a\").add(\"b\").add(\"a\").add(\"c\");\n",
        "326": "    ImmutableSortedMultiset<String> multiset1 = builder.build();\n",
        "363": "        ImmutableSortedMultiset.<String>naturalOrder()\n",
        "364": "            .addCopies(\"a\", 2)\n",
        "365": "            .addCopies(\"b\", 3)\n",
        "366": "            .addCopies(\"c\", 0)\n",
        "367": "            .build();\n",
        "373": "        ImmutableSortedMultiset.<String>naturalOrder()\n",
        "374": "            .add(\"a\")\n",
        "375": "            .setCount(\"a\", 2)\n",
        "376": "            .setCount(\"b\", 3)\n",
        "383": "        ImmutableSortedMultiset.<String>naturalOrder()\n",
        "384": "            .add(\"a\")\n",
        "385": "            .setCount(\"a\", 2)\n",
        "386": "            .setCount(\"b\", 3)\n",
        "387": "            .setCount(\"a\", 0)\n",
        "409": "    } catch (NullPointerException expected) {\n",
        "410": "    }\n",
        "418": "    } catch (NullPointerException expected) {\n",
        "419": "    }\n",
        "426": "    } catch (NullPointerException expected) {\n",
        "427": "    }\n",
        "434": "    } catch (NullPointerException expected) {\n",
        "435": "    }\n",
        "443": "    } catch (NullPointerException expected) {\n",
        "444": "    }\n",
        "452": "    } catch (IllegalArgumentException expected) {\n",
        "453": "    }\n",
        "462": "    } catch (NullPointerException expected) {\n",
        "463": "    }\n",
        "471": "    } catch (IllegalArgumentException expected) {\n",
        "472": "    }\n",
        "540": "    @Override\n",
        "541": "    public String toString() {\n"
    },
    "removed": {
        "53": "    suite.addTest(SortedMultisetTestSuiteBuilder.using(new TestStringMultisetGenerator() {\n",
        "54": "        @Override\n",
        "55": "        protected Multiset<String> create(String[] elements) {\n",
        "56": "          return ImmutableSortedMultiset.copyOf(elements);\n",
        "57": "        }\n",
        "58": "\n",
        "59": "        @Override\n",
        "60": "        public List<String> order(List<String> insertionOrder) {\n",
        "61": "          return Ordering.natural().sortedCopy(insertionOrder);\n",
        "62": "        }\n",
        "63": "      })\n",
        "64": "      .named(\"ImmutableSortedMultiset\")\n",
        "65": "      .withFeatures(CollectionSize.ANY,\n",
        "66": "          CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "67": "          CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "68": "        .createTestSuite());\n",
        "69": "\n",
        "70": "    suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator() {\n",
        "71": "        @Override\n",
        "72": "        protected List<String> create(String[] elements) {\n",
        "73": "          return ImmutableSortedMultiset.copyOf(elements).asList();\n",
        "74": "        }\n",
        "75": "\n",
        "76": "        @Override\n",
        "77": "        public List<String> order(List<String> insertionOrder) {\n",
        "78": "          return Ordering.natural().sortedCopy(insertionOrder);\n",
        "79": "        }\n",
        "80": "      })\n",
        "81": "      .named(\"ImmutableSortedMultiset.asList\")\n",
        "82": "      .withFeatures(CollectionSize.ANY,\n",
        "83": "          CollectionFeature.SERIALIZABLE,\n",
        "84": "          CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "85": "        .createTestSuite());\n",
        "86": "\n",
        "87": "    suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator() {\n",
        "88": "        @Override\n",
        "89": "        protected List<String> create(String[] elements) {\n",
        "90": "          Set<String> set = Sets.newHashSet();\n",
        "91": "          ImmutableSortedMultiset.Builder<String> builder = ImmutableSortedMultiset.naturalOrder();\n",
        "92": "          for (String s : elements) {\n",
        "93": "            checkArgument(set.add(s));\n",
        "94": "            builder.addCopies(s, 2);\n",
        "95": "          }\n",
        "96": "          return builder.build().elementSet().asList();\n",
        "97": "        }\n",
        "98": "\n",
        "99": "        @Override\n",
        "100": "        public List<String> order(List<String> insertionOrder) {\n",
        "101": "          return Ordering.natural().sortedCopy(insertionOrder);\n",
        "102": "        }\n",
        "103": "      })\n",
        "104": "      .named(\"ImmutableSortedMultiset.elementSet.asList\")\n",
        "105": "      .withFeatures(CollectionSize.ANY,\n",
        "106": "          CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "107": "          CollectionFeature.SERIALIZABLE,\n",
        "108": "          CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "109": "        .createTestSuite());\n",
        "168": "        Ordering.natural().lexicographical()\n",
        "169": "            .onResultOf(new Function<String[], Iterable<Comparable>>() {\n",
        "170": "              @Override\n",
        "171": "              public Iterable<Comparable> apply(String[] input) {\n",
        "172": "                return Arrays.<Comparable>asList(input);\n",
        "173": "              }\n",
        "174": "            });\n",
        "187": "    } catch (NullPointerException expected) {}\n",
        "214": "    } catch (NullPointerException expected) {}\n",
        "240": "    } catch (NullPointerException expected) {}\n",
        "266": "    } catch (NullPointerException expected) {}\n",
        "308": "    Builder<String> builder = ImmutableSortedMultiset.<String>naturalOrder().add(\"a\").add(\"b\").add(\"a\").add(\"c\");\n",
        "309": "    ImmutableSortedMultiset<String> multiset1 =\n",
        "310": "        builder.build();\n",
        "347": "        ImmutableSortedMultiset.<String>naturalOrder().addCopies(\"a\", 2).addCopies(\"b\", 3)\n",
        "348": "            .addCopies(\"c\", 0).build();\n",
        "354": "        ImmutableSortedMultiset.<String>naturalOrder().add(\"a\").setCount(\"a\", 2).setCount(\"b\", 3)\n",
        "361": "        ImmutableSortedMultiset.<String>naturalOrder().add(\"a\").setCount(\"a\", 2).setCount(\"b\", 3)\n",
        "362": "        .setCount(\"a\", 0)\n",
        "384": "    } catch (NullPointerException expected) {}\n",
        "392": "    } catch (NullPointerException expected) {}\n",
        "399": "    } catch (NullPointerException expected) {}\n",
        "406": "    } catch (NullPointerException expected) {}\n",
        "414": "    } catch (NullPointerException expected) {}\n",
        "422": "    } catch (IllegalArgumentException expected) {}\n",
        "431": "    } catch (NullPointerException expected) {}\n",
        "439": "    } catch (IllegalArgumentException expected) {}\n",
        "507": "    @Override public String toString() {\n"
    }
}