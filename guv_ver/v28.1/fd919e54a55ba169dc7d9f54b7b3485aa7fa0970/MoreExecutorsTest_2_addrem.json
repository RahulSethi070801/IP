{
    "addition": {
        "85": "  private static final Runnable EMPTY_RUNNABLE =\n",
        "86": "      new Runnable() {\n",
        "87": "        @Override\n",
        "88": "        public void run() {}\n",
        "89": "      };\n",
        "91": "  public void testDirectExecutorServiceServiceInThreadExecution() throws Exception {\n",
        "93": "    final ThreadLocal<Integer> threadLocalCount =\n",
        "94": "        new ThreadLocal<Integer>() {\n",
        "95": "          @Override\n",
        "96": "          protected Integer initialValue() {\n",
        "97": "            return 0;\n",
        "98": "          }\n",
        "99": "        };\n",
        "109": "    Thread otherThread =\n",
        "110": "        new Thread(\n",
        "111": "            new Runnable() {\n",
        "112": "              @Override\n",
        "113": "              public void run() {\n",
        "114": "                try {\n",
        "115": "                  Future<?> future = executor.submit(incrementTask);\n",
        "116": "                  assertTrue(future.isDone());\n",
        "117": "                  assertEquals(1, threadLocalCount.get().intValue());\n",
        "118": "                } catch (Throwable t) {\n",
        "119": "                  throwableFromOtherThread.set(t);\n",
        "120": "                }\n",
        "121": "              }\n",
        "122": "            });\n",
        "133": "    assertNull(\n",
        "134": "        \"Throwable from other thread: \"\n",
        "135": "            + (throwable == null ? null : Throwables.getStackTraceAsString(throwable)),\n",
        "141": "    final ThreadLocal<Integer> threadLocalCount =\n",
        "142": "        new ThreadLocal<Integer>() {\n",
        "143": "          @Override\n",
        "144": "          protected Integer initialValue() {\n",
        "145": "            return 0;\n",
        "146": "          }\n",
        "147": "        };\n",
        "149": "    final Callable<Integer> incrementTask =\n",
        "150": "        new Callable<Integer>() {\n",
        "151": "          @Override\n",
        "152": "          public Integer call() {\n",
        "153": "            int i = threadLocalCount.get();\n",
        "154": "            threadLocalCount.set(i + 1);\n",
        "155": "            return i;\n",
        "156": "          }\n",
        "157": "        };\n",
        "158": "\n",
        "159": "    List<Future<Integer>> futures = executor.invokeAll(Collections.nCopies(10, incrementTask));\n",
        "170": "  public void testDirectExecutorServiceServiceTermination() throws Exception {\n",
        "174": "    final Runnable doNothingRunnable =\n",
        "175": "        new Runnable() {\n",
        "176": "          @Override\n",
        "177": "          public void run() {}\n",
        "178": "        };\n",
        "179": "\n",
        "180": "    Thread otherThread =\n",
        "181": "        new Thread(\n",
        "182": "            new Runnable() {\n",
        "183": "              @Override\n",
        "184": "              public void run() {\n",
        "185": "                try {\n",
        "186": "                  Future<?> future =\n",
        "187": "                      executor.submit(\n",
        "188": "                          new Callable<Void>() {\n",
        "189": "                            @Override\n",
        "190": "                            public Void call() throws Exception {\n",
        "191": "                              // WAIT #1\n",
        "192": "                              barrier.await(1, TimeUnit.SECONDS);\n",
        "193": "\n",
        "194": "                              // WAIT #2\n",
        "195": "                              barrier.await(1, TimeUnit.SECONDS);\n",
        "196": "                              assertTrue(executor.isShutdown());\n",
        "197": "                              assertFalse(executor.isTerminated());\n",
        "198": "\n",
        "199": "                              // WAIT #3\n",
        "200": "                              barrier.await(1, TimeUnit.SECONDS);\n",
        "201": "                              return null;\n",
        "202": "                            }\n",
        "203": "                          });\n",
        "204": "                  assertTrue(future.isDone());\n",
        "205": "                  assertTrue(executor.isShutdown());\n",
        "206": "                  assertTrue(executor.isTerminated());\n",
        "207": "                } catch (Throwable t) {\n",
        "208": "                  throwableFromOtherThread.set(t);\n",
        "209": "                }\n",
        "210": "              }\n",
        "211": "            });\n",
        "250": "    assertNull(\n",
        "251": "        \"Throwable from other thread: \"\n",
        "252": "            + (throwable == null ? null : Throwables.getStackTraceAsString(throwable)),\n",
        "257": "   * Test for a bug where threads weren't getting signaled when shutdown was called, only when tasks\n",
        "258": "   * completed.\n",
        "263": "    Thread waiter =\n",
        "264": "        new Thread() {\n",
        "265": "          @Override\n",
        "266": "          public void run() {\n",
        "267": "            try {\n",
        "268": "              service.awaitTermination(1, TimeUnit.DAYS);\n",
        "269": "            } catch (InterruptedException e) {\n",
        "270": "              return;\n",
        "271": "            }\n",
        "272": "          }\n",
        "273": "        };\n",
        "315": "    } catch (RejectedExecutionException expected) {\n",
        "316": "    }\n",
        "319": "  public <T> void testListeningExecutorServiceInvokeAllJavadocCodeCompiles() throws Exception {\n",
        "326": "    ListeningExecutorService service = listeningDecorator(newDirectExecutorService());\n",
        "328": "    List<Callable<String>> callables = ImmutableList.of(Callables.returning(\"x\"));\n",
        "346": "    Runnable task =\n",
        "347": "        new Runnable() {\n",
        "348": "          @Override\n",
        "349": "          public void run() {}\n",
        "350": "        };\n",
        "357": "    ScheduledThreadPoolExecutor delegate =\n",
        "358": "        new ScheduledThreadPoolExecutor(1) {\n",
        "359": "          @Override\n",
        "360": "          protected void afterExecute(Runnable r, Throwable t) {\n",
        "361": "            completed.countDown();\n",
        "362": "          }\n",
        "363": "        };\n",
        "417": "    Runnable runnable =\n",
        "418": "        new Runnable() {\n",
        "419": "          @Override\n",
        "420": "          public void run() {}\n",
        "421": "        };\n",
        "474": "  /** invokeAny(null) throws NPE */\n",
        "486": "  /** invokeAny(empty collection) throws IAE */\n",
        "498": "  /** invokeAny(c) throws NPE if c has null elements */\n",
        "502": "    l.add(\n",
        "503": "        new Callable<Integer>() {\n",
        "504": "          @Override\n",
        "505": "          public Integer call() {\n",
        "506": "            throw new ArithmeticException(\"/ by zero\");\n",
        "507": "          }\n",
        "508": "        });\n",
        "519": "  /** invokeAny(c) throws ExecutionException if no task in c completes */\n",
        "534": "  /** invokeAny(c) returns result of some task in c if at least one completes */\n",
        "585": "    ThreadPoolExecutor executor =\n",
        "586": "        new ThreadPoolExecutor(1, 2, 3, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(1));\n",
        "645": "    Executor renamingExecutor =\n",
        "646": "        renamingDecorator(newDirectExecutorService(), Suppliers.ofInstance(\"FooBar\"));\n",
        "648": "    renamingExecutor.execute(\n",
        "649": "        new Runnable() {\n",
        "650": "          @Override\n",
        "651": "          public void run() {\n",
        "652": "            assertEquals(\"FooBar\", Thread.currentThread().getName());\n",
        "653": "          }\n",
        "654": "        });\n",
        "669": "    @Override\n",
        "670": "    synchronized void addShutdownHook(Thread hook) {\n",
        "705": "        .thenReturn(false)\n",
        "706": "        .thenReturn(true);\n",
        "717": "        .thenReturn(false)\n",
        "718": "        .thenReturn(false);\n",
        "735": "    Thread thread =\n",
        "736": "        new Thread(\n",
        "737": "            new Runnable() {\n",
        "738": "              @Override\n",
        "739": "              public void run() {\n",
        "740": "                terminated.set(shutdownAndAwaitTermination(service, 1L, SECONDS));\n",
        "741": "                interrupted.set(Thread.currentThread().isInterrupted());\n",
        "742": "              }\n",
        "743": "            });\n"
    },
    "removed": {
        "85": "  private static final Runnable EMPTY_RUNNABLE = new Runnable() {\n",
        "86": "    @Override public void run() {}\n",
        "87": "  };\n",
        "89": "  public void testDirectExecutorServiceServiceInThreadExecution()\n",
        "90": "      throws Exception {\n",
        "92": "    final ThreadLocal<Integer> threadLocalCount = new ThreadLocal<Integer>() {\n",
        "93": "      @Override\n",
        "94": "      protected Integer initialValue() {\n",
        "95": "        return 0;\n",
        "96": "      }\n",
        "97": "    };\n",
        "107": "    Thread otherThread = new Thread(\n",
        "108": "        new Runnable() {\n",
        "109": "          @Override\n",
        "110": "          public void run() {\n",
        "111": "            try {\n",
        "112": "              Future<?> future = executor.submit(incrementTask);\n",
        "113": "              assertTrue(future.isDone());\n",
        "114": "              assertEquals(1, threadLocalCount.get().intValue());\n",
        "115": "            } catch (Throwable t) {\n",
        "116": "              throwableFromOtherThread.set(t);\n",
        "117": "            }\n",
        "118": "          }\n",
        "119": "        });\n",
        "130": "    assertNull(\"Throwable from other thread: \"\n",
        "131": "        + (throwable == null ? null : Throwables.getStackTraceAsString(throwable)),\n",
        "137": "    final ThreadLocal<Integer> threadLocalCount = new ThreadLocal<Integer>() {\n",
        "138": "      @Override\n",
        "139": "      protected Integer initialValue() {\n",
        "140": "        return 0;\n",
        "141": "      }\n",
        "142": "    };\n",
        "143": "\n",
        "144": "    final Callable<Integer> incrementTask = new Callable<Integer>() {\n",
        "145": "      @Override\n",
        "146": "      public Integer call() {\n",
        "147": "        int i = threadLocalCount.get();\n",
        "148": "        threadLocalCount.set(i + 1);\n",
        "149": "        return i;\n",
        "150": "      }\n",
        "151": "    };\n",
        "153": "    List<Future<Integer>> futures =\n",
        "154": "        executor.invokeAll(Collections.nCopies(10, incrementTask));\n",
        "165": "  public void testDirectExecutorServiceServiceTermination()\n",
        "166": "      throws Exception {\n",
        "170": "    final Runnable doNothingRunnable = new Runnable() {\n",
        "171": "        @Override public void run() {\n",
        "172": "        }};\n",
        "173": "\n",
        "174": "    Thread otherThread = new Thread(new Runnable() {\n",
        "175": "      @Override\n",
        "176": "      public void run() {\n",
        "177": "        try {\n",
        "178": "          Future<?> future = executor.submit(new Callable<Void>() {\n",
        "179": "            @Override\n",
        "180": "            public Void call() throws Exception {\n",
        "181": "              // WAIT #1\n",
        "182": "              barrier.await(1, TimeUnit.SECONDS);\n",
        "183": "\n",
        "184": "              // WAIT #2\n",
        "185": "              barrier.await(1, TimeUnit.SECONDS);\n",
        "186": "              assertTrue(executor.isShutdown());\n",
        "187": "              assertFalse(executor.isTerminated());\n",
        "188": "\n",
        "189": "              // WAIT #3\n",
        "190": "              barrier.await(1, TimeUnit.SECONDS);\n",
        "191": "              return null;\n",
        "192": "            }\n",
        "193": "          });\n",
        "194": "          assertTrue(future.isDone());\n",
        "195": "          assertTrue(executor.isShutdown());\n",
        "196": "          assertTrue(executor.isTerminated());\n",
        "197": "        } catch (Throwable t) {\n",
        "198": "          throwableFromOtherThread.set(t);\n",
        "199": "        }\n",
        "200": "      }});\n",
        "239": "    assertNull(\"Throwable from other thread: \"\n",
        "240": "        + (throwable == null ? null : Throwables.getStackTraceAsString(throwable)),\n",
        "245": "   * Test for a bug where threads weren't getting signaled when shutdown was called, only when\n",
        "246": "   * tasks completed.\n",
        "251": "    Thread waiter = new Thread() {\n",
        "252": "      @Override public void run() {\n",
        "253": "        try {\n",
        "254": "          service.awaitTermination(1, TimeUnit.DAYS);\n",
        "255": "        } catch (InterruptedException e) {\n",
        "256": "          return;\n",
        "257": "        }\n",
        "258": "      }\n",
        "259": "    };\n",
        "301": "    } catch (RejectedExecutionException expected) {}\n",
        "304": "  public <T> void testListeningExecutorServiceInvokeAllJavadocCodeCompiles()\n",
        "305": "      throws Exception {\n",
        "312": "    ListeningExecutorService service =\n",
        "313": "        listeningDecorator(newDirectExecutorService());\n",
        "315": "    List<Callable<String>> callables =\n",
        "316": "        ImmutableList.of(Callables.returning(\"x\"));\n",
        "334": "    Runnable task = new Runnable() {\n",
        "335": "      @Override\n",
        "336": "      public void run() {}\n",
        "337": "    };\n",
        "344": "    ScheduledThreadPoolExecutor delegate = new ScheduledThreadPoolExecutor(1) {\n",
        "345": "      @Override\n",
        "346": "      protected void afterExecute(Runnable r, Throwable t) {\n",
        "347": "        completed.countDown();\n",
        "348": "      }\n",
        "349": "    };\n",
        "403": "    Runnable runnable = new Runnable() {\n",
        "404": "      @Override public void run() {}\n",
        "405": "    };\n",
        "458": "  /**\n",
        "459": "   * invokeAny(null) throws NPE\n",
        "460": "   */\n",
        "472": "  /**\n",
        "473": "   * invokeAny(empty collection) throws IAE\n",
        "474": "   */\n",
        "486": "  /**\n",
        "487": "   * invokeAny(c) throws NPE if c has null elements\n",
        "488": "   */\n",
        "492": "    l.add(new Callable<Integer>() {\n",
        "493": "      @Override public Integer call() {\n",
        "494": "          throw new ArithmeticException(\"/ by zero\");\n",
        "495": "      }\n",
        "496": "    });\n",
        "507": "  /**\n",
        "508": "   * invokeAny(c) throws ExecutionException if no task in c completes\n",
        "509": "   */\n",
        "524": "  /**\n",
        "525": "   * invokeAny(c) returns result of some task in c if at least one completes\n",
        "526": "   */\n",
        "577": "    ThreadPoolExecutor executor = new ThreadPoolExecutor(\n",
        "578": "        1, 2, 3, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(1));\n",
        "637": "    Executor renamingExecutor = renamingDecorator(newDirectExecutorService(),\n",
        "638": "        Suppliers.ofInstance(\"FooBar\"));\n",
        "640": "    renamingExecutor.execute(new Runnable() {\n",
        "641": "      @Override public void run() {\n",
        "642": "        assertEquals(\"FooBar\", Thread.currentThread().getName());\n",
        "643": "      }});\n",
        "658": "    @Override synchronized void addShutdownHook(Thread hook) {\n",
        "693": "        .thenReturn(false).thenReturn(true);\n",
        "704": "        .thenReturn(false).thenReturn(false);\n",
        "721": "    Thread thread = new Thread(new Runnable() {\n",
        "722": "      @Override\n",
        "723": "      public void run() {\n",
        "724": "        terminated.set(shutdownAndAwaitTermination(service, 1L, SECONDS));\n",
        "725": "        interrupted.set(Thread.currentThread().isInterrupted());\n",
        "726": "      }\n",
        "727": "    });\n"
    }
}