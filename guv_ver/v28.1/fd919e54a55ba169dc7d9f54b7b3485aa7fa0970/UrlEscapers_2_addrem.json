{
    "addition": {
        "24": " * escaping with {@link com.google.common.html.HtmlEscapers} or {@link\n",
        "25": " * com.google.common.xml.XmlEscapers}.\n",
        "47": "   * Returns an {@link Escaper} instance that escapes strings so they can be safely included in <a\n",
        "48": "   * href=\"https://goo.gl/MplK6I\">URL form parameter names and values</a>. Escaping is performed\n",
        "49": "   * with the UTF-8 character encoding. The caller is responsible for <a\n",
        "50": "   * href=\"https://goo.gl/9EfkM1\">replacing any unpaired carriage return or line feed characters\n",
        "54": "   *\n",
        "56": "   *   <li>The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\" through \"9\" remain\n",
        "57": "   *       the same.\n",
        "58": "   *   <li>The special characters \".\", \"-\", \"*\", and \"_\" remain the same.\n",
        "59": "   *   <li>The space character \" \" is converted into a plus sign \"+\".\n",
        "60": "   *   <li>All other characters are converted into one or more bytes using UTF-8 encoding and each\n",
        "61": "   *       byte is then represented by the 3-character string \"%XY\", where \"XY\" is the two-digit,\n",
        "62": "   *       uppercase, hexadecimal representation of the byte value.\n",
        "65": "   * <p>This escaper is suitable for escaping parameter names and values even when <a\n",
        "66": "   * href=\"https://goo.gl/utn6M\">using the non-standard semicolon</a>, rather than the ampersand, as\n",
        "67": "   * a parameter delimiter. Nevertheless, we recommend using the ampersand unless you must\n",
        "82": "   * Returns an {@link Escaper} instance that escapes strings so they can be safely included in <a\n",
        "83": "   * href=\"https://goo.gl/m2MIf0\">URL path segments</a>. The returned escaper escapes all non-ASCII\n",
        "84": "   * characters, even though <a href=\"https://goo.gl/e7E0In\">many of these are accepted in modern\n",
        "85": "   * URLs</a>. (<a href=\"https://goo.gl/jfVxXW\">If the escaper were to leave these characters\n",
        "93": "   *\n",
        "95": "   *   <li>The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\" through \"9\" remain\n",
        "96": "   *       the same.\n",
        "97": "   *   <li>The unreserved characters \".\", \"-\", \"~\", and \"_\" remain the same.\n",
        "98": "   *   <li>The general delimiters \"@\" and \":\" remain the same.\n",
        "99": "   *   <li>The subdelimiters \"!\", \"$\", \"&amp;\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", and \"=\" remain\n",
        "100": "   *       the same.\n",
        "101": "   *   <li>The space character \" \" is converted into %20.\n",
        "102": "   *   <li>All other characters are converted into one or more bytes using UTF-8 encoding and each\n",
        "103": "   *       byte is then represented by the 3-character string \"%XY\", where \"XY\" is the two-digit,\n",
        "104": "   *       uppercase, hexadecimal representation of the byte value.\n",
        "118": "   * Returns an {@link Escaper} instance that escapes strings so they can be safely included in a <a\n",
        "119": "   * href=\"https://goo.gl/xXEq4p\">URL fragment</a>. The returned escaper escapes all non-ASCII\n",
        "124": "   *\n",
        "126": "   *   <li>The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\" through \"9\" remain\n",
        "127": "   *       the same.\n",
        "128": "   *   <li>The unreserved characters \".\", \"-\", \"~\", and \"_\" remain the same.\n",
        "129": "   *   <li>The general delimiters \"@\" and \":\" remain the same.\n",
        "130": "   *   <li>The subdelimiters \"!\", \"$\", \"&amp;\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", and \"=\" remain\n",
        "131": "   *       the same.\n",
        "132": "   *   <li>The space character \" \" is converted into %20.\n",
        "133": "   *   <li>Fragments allow unescaped \"/\" and \"?\", so they remain the same.\n",
        "134": "   *   <li>All other characters are converted into one or more bytes using UTF-8 encoding and each\n",
        "135": "   *       byte is then represented by the 3-character string \"%XY\", where \"XY\" is the two-digit,\n",
        "136": "   *       uppercase, hexadecimal representation of the byte value.\n"
    },
    "removed": {
        "24": " * escaping with {@link com.google.common.html.HtmlEscapers} or\n",
        "25": " * {@link com.google.common.xml.XmlEscapers}.\n",
        "47": "   * Returns an {@link Escaper} instance that escapes strings so they can be safely included in\n",
        "48": "   * <a href=\"https://goo.gl/MplK6I\">URL form parameter names and values</a>. Escaping is performed\n",
        "49": "   * with the UTF-8 character encoding. The caller is responsible for\n",
        "50": "   * <a href=\"https://goo.gl/9EfkM1\">replacing any unpaired carriage return or line feed characters\n",
        "55": "   * <li>The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\" through \"9\" remain the\n",
        "56": "   *     same.\n",
        "57": "   * <li>The special characters \".\", \"-\", \"*\", and \"_\" remain the same.\n",
        "58": "   * <li>The space character \" \" is converted into a plus sign \"+\".\n",
        "59": "   * <li>All other characters are converted into one or more bytes using UTF-8 encoding and each\n",
        "60": "   *     byte is then represented by the 3-character string \"%XY\", where \"XY\" is the two-digit,\n",
        "61": "   *     uppercase, hexadecimal representation of the byte value.\n",
        "64": "   * <p>This escaper is suitable for escaping parameter names and values even when\n",
        "65": "   * <a href=\"https://goo.gl/utn6M\">using the non-standard semicolon</a>, rather than the ampersand,\n",
        "66": "   * as a parameter delimiter. Nevertheless, we recommend using the ampersand unless you must\n",
        "81": "   * Returns an {@link Escaper} instance that escapes strings so they can be safely included in\n",
        "82": "   * <a href=\"https://goo.gl/m2MIf0\">URL path segments</a>. The returned escaper escapes all\n",
        "83": "   * non-ASCII characters, even though <a href=\"https://goo.gl/e7E0In\">many of these are accepted in\n",
        "84": "   * modern URLs</a>. (<a href=\"https://goo.gl/jfVxXW\">If the escaper were to leave these characters\n",
        "93": "   * <li>The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\" through \"9\" remain the\n",
        "94": "   *     same.\n",
        "95": "   * <li>The unreserved characters \".\", \"-\", \"~\", and \"_\" remain the same.\n",
        "96": "   * <li>The general delimiters \"@\" and \":\" remain the same.\n",
        "97": "   * <li>The subdelimiters \"!\", \"$\", \"&amp;\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", and \"=\" remain the\n",
        "98": "   *     same.\n",
        "99": "   * <li>The space character \" \" is converted into %20.\n",
        "100": "   * <li>All other characters are converted into one or more bytes using UTF-8 encoding and each\n",
        "101": "   *     byte is then represented by the 3-character string \"%XY\", where \"XY\" is the two-digit,\n",
        "102": "   *     uppercase, hexadecimal representation of the byte value.\n",
        "116": "   * Returns an {@link Escaper} instance that escapes strings so they can be safely included in a\n",
        "117": "   * <a href=\"https://goo.gl/xXEq4p\">URL fragment</a>. The returned escaper escapes all non-ASCII\n",
        "123": "   * <li>The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\" through \"9\" remain the\n",
        "124": "   *     same.\n",
        "125": "   * <li>The unreserved characters \".\", \"-\", \"~\", and \"_\" remain the same.\n",
        "126": "   * <li>The general delimiters \"@\" and \":\" remain the same.\n",
        "127": "   * <li>The subdelimiters \"!\", \"$\", \"&amp;\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", and \"=\" remain the\n",
        "128": "   *     same.\n",
        "129": "   * <li>The space character \" \" is converted into %20.\n",
        "130": "   * <li>Fragments allow unescaped \"/\" and \"?\", so they remain the same.\n",
        "131": "   * <li>All other characters are converted into one or more bytes using UTF-8 encoding and each\n",
        "132": "   *     byte is then represented by the 3-character string \"%XY\", where \"XY\" is the two-digit,\n",
        "133": "   *     uppercase, hexadecimal representation of the byte value.\n"
    }
}