{
    "addition": {
        "38": " * splitting an existing long string into short strings adaptively around {@linkplain\n",
        "39": " * Character#isHighSurrogate surrogate} {@linkplain Character#isLowSurrogate pairs}, or by starting\n",
        "40": " * with short strings already known to be free of unpaired surrogates.\n",
        "42": " * <p>The two primary implementations of this interface are {@link CharEscaper} and {@link\n",
        "43": " * UnicodeEscaper}. They are heavily optimized for performance and greatly simplify the task of\n",
        "44": " * implementing new escapers. It is strongly recommended that when implementing a new escaper you\n",
        "48": " * <p>Popular escapers are defined as constants in classes like {@link\n",
        "49": " * com.google.common.html.HtmlEscapers} and {@link com.google.common.xml.XmlEscapers}. To create\n",
        "50": " * your own escapers, use {@link CharEscaperBuilder}, or extend {@code CharEscaper} or {@code\n",
        "51": " * UnicodeEscaper}.\n",
        "69": "   *   <li>{@link UnicodeEscaper} handles <a href=\"http://en.wikipedia.org/wiki/UTF-16\">UTF-16</a>\n",
        "70": "   *       correctly, including surrogate character pairs. If the input is badly formed the escaper\n",
        "71": "   *       should throw {@link IllegalArgumentException}.\n",
        "72": "   *   <li>{@link CharEscaper} handles Java characters independently and does not verify the input\n",
        "73": "   *       for well formed characters. A {@code CharEscaper} should not be used in situations where\n",
        "74": "   *       input is not guaranteed to be restricted to the Basic Multilingual Plane (BMP).\n",
        "93": "  /** Returns a {@link Function} that invokes {@link #escape(String)} on this escaper. */\n"
    },
    "removed": {
        "38": " * splitting an existing long string into short strings adaptively around\n",
        "39": " * {@linkplain Character#isHighSurrogate surrogate} {@linkplain Character#isLowSurrogate pairs}, or\n",
        "40": " * by starting with short strings already known to be free of unpaired surrogates.\n",
        "42": " * <p>The two primary implementations of this interface are {@link CharEscaper} and\n",
        "43": " * {@link UnicodeEscaper}. They are heavily optimized for performance and greatly simplify the task\n",
        "44": " * of implementing new escapers. It is strongly recommended that when implementing a new escaper you\n",
        "48": " * <p>Popular escapers are defined as constants in classes like\n",
        "49": " * {@link com.google.common.html.HtmlEscapers} and {@link com.google.common.xml.XmlEscapers}. To\n",
        "50": " * create your own escapers, use {@link CharEscaperBuilder}, or extend {@code CharEscaper} or\n",
        "51": " * {@code UnicodeEscaper}.\n",
        "69": "   * <li>{@link UnicodeEscaper} handles <a href=\"http://en.wikipedia.org/wiki/UTF-16\">UTF-16</a>\n",
        "70": "   * correctly, including surrogate character pairs. If the input is badly formed the escaper should\n",
        "71": "   * throw {@link IllegalArgumentException}.\n",
        "72": "   * <li>{@link CharEscaper} handles Java characters independently and does not verify the input for\n",
        "73": "   * well formed characters. A {@code CharEscaper} should not be used in situations where input is\n",
        "74": "   * not guaranteed to be restricted to the Basic Multilingual Plane (BMP).\n",
        "93": "  /**\n",
        "94": "   * Returns a {@link Function} that invokes {@link #escape(String)} on this escaper.\n",
        "95": "   */\n"
    }
}