{
    "addition": {
        "40": "  @Override\n",
        "41": "  public void setUp() throws Exception {\n",
        "52": "    } catch (NullPointerException expected) {\n",
        "53": "    }\n",
        "86": "    tester\n",
        "87": "        .addEquivalenceGroup(group1Item1, group1Item2)\n",
        "107": "      assertThat(expected.getMessage())\n",
        "108": "          .contains(\n",
        "109": "              \"TestObject{group=1, item=2} [group 1, item 2] must be equivalent to \"\n",
        "110": "                  + \"TestObject{group=1, item=1} [group 1, item 1]\");\n",
        "137": "      assertThat(expected.getMessage())\n",
        "138": "          .contains(\n",
        "139": "              \"TestObject{group=1, item=2} [group 1, item 2] must be equivalent to \"\n",
        "140": "                  + \"TestObject{group=1, item=3} [group 1, item 3]\");\n",
        "161": "      assertThat(expected.getMessage())\n",
        "162": "          .contains(\n",
        "163": "              \"TestObject{group=1, item=1} [group 1, item 1] must not be equivalent to \"\n",
        "164": "                  + \"TestObject{group=2, item=1} [group 2, item 1]\");\n",
        "187": "              + \"equal to the hash (2) of TestObject{group=1, item=2} [group 1, item 2]\";\n",
        "201": "    TestObject(int group, int item) {\n",
        "206": "    @Override\n",
        "207": "    public String toString() {\n",
        "218": "    final ImmutableMap.Builder<Object, Integer> hashExpectationsBuilder = ImmutableMap.builder();\n",
        "243": "    @Override\n",
        "244": "    protected boolean doEquivalent(Object a, Object b) {\n",
        "248": "    @Override\n",
        "249": "    protected int doHash(Object object) {\n"
    },
    "removed": {
        "40": "  @Override public void setUp() throws Exception {\n",
        "51": "    } catch (NullPointerException expected) {}\n",
        "84": "    tester.addEquivalenceGroup(group1Item1, group1Item2)\n",
        "104": "      assertThat(expected.getMessage()).contains(\n",
        "105": "          \"TestObject{group=1, item=2} [group 1, item 2] must be equivalent to \"\n",
        "106": "          + \"TestObject{group=1, item=1} [group 1, item 1]\");\n",
        "133": "      assertThat(expected.getMessage()).contains(\n",
        "134": "          \"TestObject{group=1, item=2} [group 1, item 2] must be equivalent to \"\n",
        "135": "          + \"TestObject{group=1, item=3} [group 1, item 3]\");\n",
        "156": "      assertThat(expected.getMessage()).contains(\n",
        "157": "          \"TestObject{group=1, item=1} [group 1, item 1] must not be equivalent to \"\n",
        "158": "          + \"TestObject{group=2, item=1} [group 2, item 1]\");\n",
        "181": "          + \"equal to the hash (2) of TestObject{group=1, item=2} [group 1, item 2]\";\n",
        "195": "    TestObject(int group , int item) {\n",
        "200": "    @Override public String toString() {\n",
        "211": "    final ImmutableMap.Builder<Object, Integer> hashExpectationsBuilder =\n",
        "212": "        ImmutableMap.builder();\n",
        "237": "    @Override protected boolean doEquivalent(Object a, Object b) {\n",
        "241": "    @Override protected int doHash(Object object) {\n"
    }
}