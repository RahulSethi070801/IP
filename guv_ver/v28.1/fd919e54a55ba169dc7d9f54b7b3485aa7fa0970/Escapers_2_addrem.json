{
    "addition": {
        "67": "   *\n",
        "69": "   *   <li>There are no replacement mappings\n",
        "70": "   *   <li>{@code safeMin == Character.MIN_VALUE}\n",
        "71": "   *   <li>{@code safeMax == Character.MAX_VALUE}\n",
        "72": "   *   <li>{@code unsafeReplacement == null}\n",
        "74": "   *\n",
        "86": "   * points. In these cases it is necessary to extend either {@link ArrayBasedCharEscaper} or {@link\n",
        "87": "   * ArrayBasedUnicodeEscaper} to provide the desired behavior. However this builder is suitable for\n",
        "88": "   * creating escapers that replace a relative small set of characters.\n",
        "105": "     * explicit replacement are considered 'safe' and remain unescaped in the output. If {@code\n",
        "106": "     * safeMax < safeMin} then the safe range is empty.\n",
        "151": "    /** Returns a new escaper based on the current state of the builder. */\n",
        "171": "   * respect to the well-formedness of Unicode character sequences and will throw {@link\n",
        "172": "   * IllegalArgumentException} when given bad input.\n",
        "193": "   * Returns a string that would replace the given character in the specified escaper, or {@code\n",
        "194": "   * null} if no replacement should be made. This method is intended for use in tests through the\n",
        "195": "   * {@code EscaperAsserts} class; production users of {@link CharEscaper} should limit themselves\n",
        "196": "   * to its public interface.\n",
        "206": "   * Returns a string that would replace the given character in the specified escaper, or {@code\n",
        "207": "   * null} if no replacement should be made. This method is intended for use in tests through the\n",
        "208": "   * {@code EscaperAsserts} class; production users of {@link UnicodeEscaper} should limit\n"
    },
    "removed": {
        "68": "   * <li>There are no replacement mappings\n",
        "69": "   * <li>{@code safeMin == Character.MIN_VALUE}\n",
        "70": "   * <li>{@code safeMax == Character.MAX_VALUE}\n",
        "71": "   * <li>{@code unsafeReplacement == null}\n",
        "84": "   * points. In these cases it is necessary to extend either {@link ArrayBasedCharEscaper} or\n",
        "85": "   * {@link ArrayBasedUnicodeEscaper} to provide the desired behavior. However this builder is\n",
        "86": "   * suitable for creating escapers that replace a relative small set of characters.\n",
        "103": "     * explicit replacement are considered 'safe' and remain unescaped in the output. If\n",
        "104": "     * {@code safeMax < safeMin} then the safe range is empty.\n",
        "149": "    /**\n",
        "150": "     * Returns a new escaper based on the current state of the builder.\n",
        "151": "     */\n",
        "171": "   * respect to the well-formedness of Unicode character sequences and will throw\n",
        "172": "   * {@link IllegalArgumentException} when given bad input.\n",
        "193": "   * Returns a string that would replace the given character in the specified escaper, or\n",
        "194": "   * {@code null} if no replacement should be made. This method is intended for use in tests through\n",
        "195": "   * the {@code EscaperAsserts} class; production users of {@link CharEscaper} should limit\n",
        "196": "   * themselves to its public interface.\n",
        "206": "   * Returns a string that would replace the given character in the specified escaper, or\n",
        "207": "   * {@code null} if no replacement should be made. This method is intended for use in tests through\n",
        "208": "   * the {@code EscaperAsserts} class; production users of {@link UnicodeEscaper} should limit\n"
    }
}