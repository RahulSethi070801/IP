{
    "addition": {
        "30": " * A map which forwards all its method calls to another map. Subclasses should override one or more\n",
        "31": " * methods to modify the behavior of the backing map as desired per the <a\n",
        "34": " * <p><b>Warning:</b> The methods of {@code ForwardingMap} forward <i>indiscriminately</i> to the\n",
        "35": " * methods of the delegate. For example, overriding {@link #put} alone <i>will not</i> change the\n",
        "36": " * behavior of {@link #putAll}, which can lead to unexpected behavior. In this case, you should\n",
        "37": " * override {@code putAll} as well, either providing your own implementation, or delegating to the\n",
        "38": " * provided {@code standardPutAll} method.\n",
        "44": " * <p>Each of the {@code standard} methods, where appropriate, use {@link Objects#equal} to test\n",
        "45": " * equality for both keys and values. This may not be the desired behavior for map implementations\n",
        "46": " * that use non-standard notions of key equality, such as a {@code SortedMap} whose comparator is\n",
        "47": " * not consistent with {@code equals}.\n",
        "49": " * <p>The {@code standard} methods and the collection views they return are not guaranteed to be\n",
        "50": " * thread-safe, even when all of the methods that they depend on are thread-safe.\n",
        "140": "   * A sensible definition of {@link #putAll(Map)} in terms of {@link #put(Object, Object)}. If you\n",
        "141": "   * override {@link #put(Object, Object)}, you may wish to override {@link #putAll(Map)} to forward\n",
        "142": "   * to this implementation.\n",
        "151": "   * A sensible, albeit inefficient, definition of {@link #remove} in terms of the {@code iterator}\n",
        "152": "   * method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link\n",
        "153": "   * #remove} to forward to this implementation.\n",
        "155": "   * <p>Alternately, you may wish to override {@link #remove} with {@code keySet().remove}, assuming\n",
        "156": "   * that approach would not lead to an infinite loop.\n",
        "175": "   * A sensible definition of {@link #clear} in terms of the {@code iterator} method of {@link\n",
        "176": "   * #entrySet}. In many cases, you may wish to override {@link #clear} to forward to this\n",
        "177": "   * implementation.\n",
        "186": "   * A sensible implementation of {@link Map#keySet} in terms of the following methods: {@link\n",
        "187": "   * ForwardingMap#clear}, {@link ForwardingMap#containsKey}, {@link ForwardingMap#isEmpty}, {@link\n",
        "188": "   * ForwardingMap#remove}, {@link ForwardingMap#size}, and the {@link Set#iterator} method of\n",
        "189": "   * {@link ForwardingMap#entrySet}. In many cases, you may wish to override {@link\n",
        "190": "   * ForwardingMap#keySet} to forward to this implementation or a subclass thereof.\n",
        "203": "   * A sensible, albeit inefficient, definition of {@link #containsKey} in terms of the {@code\n",
        "204": "   * iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to\n",
        "205": "   * override {@link #containsKey} to forward to this implementation.\n",
        "215": "   * A sensible implementation of {@link Map#values} in terms of the following methods: {@link\n",
        "216": "   * ForwardingMap#clear}, {@link ForwardingMap#containsValue}, {@link ForwardingMap#isEmpty},\n",
        "217": "   * {@link ForwardingMap#size}, and the {@link Set#iterator} method of {@link\n",
        "218": "   * ForwardingMap#entrySet}. In many cases, you may wish to override {@link ForwardingMap#values}\n",
        "219": "   * to forward to this implementation or a subclass thereof.\n",
        "232": "   * A sensible definition of {@link #containsValue} in terms of the {@code iterator} method of\n",
        "233": "   * {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link\n",
        "234": "   * #containsValue} to forward to this implementation.\n",
        "243": "   * A sensible implementation of {@link Map#entrySet} in terms of the following methods: {@link\n",
        "244": "   * ForwardingMap#clear}, {@link ForwardingMap#containsKey}, {@link ForwardingMap#get}, {@link\n",
        "245": "   * ForwardingMap#isEmpty}, {@link ForwardingMap#remove}, and {@link ForwardingMap#size}. In many\n",
        "246": "   * cases, you may wish to override {@link #entrySet} to forward to this implementation or a\n",
        "247": "   * subclass thereof.\n",
        "263": "   * A sensible definition of {@link #isEmpty} in terms of the {@code iterator} method of {@link\n",
        "264": "   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #isEmpty} to\n",
        "265": "   * forward to this implementation.\n",
        "274": "   * A sensible definition of {@link #equals} in terms of the {@code equals} method of {@link\n",
        "275": "   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #equals} to\n",
        "276": "   * forward to this implementation.\n",
        "285": "   * A sensible definition of {@link #hashCode} in terms of the {@code iterator} method of {@link\n",
        "286": "   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #hashCode} to\n",
        "287": "   * forward to this implementation.\n",
        "296": "   * A sensible definition of {@link #toString} in terms of the {@code iterator} method of {@link\n",
        "297": "   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #toString} to\n",
        "298": "   * forward to this implementation.\n"
    },
    "removed": {
        "30": " * A map which forwards all its method calls to another map. Subclasses should\n",
        "31": " * override one or more methods to modify the behavior of the backing map as\n",
        "32": " * desired per the <a\n",
        "35": " * <p><b>Warning:</b> The methods of {@code ForwardingMap} forward\n",
        "36": " * <i>indiscriminately</i> to the methods of the delegate. For example,\n",
        "37": " * overriding {@link #put} alone <i>will not</i> change the behavior of {@link\n",
        "38": " * #putAll}, which can lead to unexpected behavior. In this case, you should\n",
        "39": " * override {@code putAll} as well, either providing your own implementation, or\n",
        "40": " * delegating to the provided {@code standardPutAll} method.\n",
        "46": " * <p>Each of the {@code standard} methods, where appropriate, use {@link\n",
        "47": " * Objects#equal} to test equality for both keys and values. This may not be\n",
        "48": " * the desired behavior for map implementations that use non-standard notions of\n",
        "49": " * key equality, such as a {@code SortedMap} whose comparator is not consistent\n",
        "50": " * with {@code equals}.\n",
        "52": " * <p>The {@code standard} methods and the collection views they return are not\n",
        "53": " * guaranteed to be thread-safe, even when all of the methods that they depend\n",
        "54": " * on are thread-safe.\n",
        "144": "   * A sensible definition of {@link #putAll(Map)} in terms of {@link\n",
        "145": "   * #put(Object, Object)}. If you override {@link #put(Object, Object)}, you\n",
        "146": "   * may wish to override {@link #putAll(Map)} to forward to this\n",
        "147": "   * implementation.\n",
        "156": "   * A sensible, albeit inefficient, definition of {@link #remove} in terms of\n",
        "157": "   * the {@code iterator} method of {@link #entrySet}. If you override {@link\n",
        "158": "   * #entrySet}, you may wish to override {@link #remove} to forward to this\n",
        "159": "   * implementation.\n",
        "161": "   * <p>Alternately, you may wish to override {@link #remove} with {@code\n",
        "162": "   * keySet().remove}, assuming that approach would not lead to an infinite\n",
        "163": "   * loop.\n",
        "182": "   * A sensible definition of {@link #clear} in terms of the {@code iterator}\n",
        "183": "   * method of {@link #entrySet}. In many cases, you may wish to override\n",
        "184": "   * {@link #clear} to forward to this implementation.\n",
        "193": "   * A sensible implementation of {@link Map#keySet} in terms of the following\n",
        "194": "   * methods: {@link ForwardingMap#clear}, {@link ForwardingMap#containsKey},\n",
        "195": "   * {@link ForwardingMap#isEmpty}, {@link ForwardingMap#remove}, {@link\n",
        "196": "   * ForwardingMap#size}, and the {@link Set#iterator} method of {@link\n",
        "197": "   * ForwardingMap#entrySet}. In many cases, you may wish to override {@link\n",
        "198": "   * ForwardingMap#keySet} to forward to this implementation or a subclass\n",
        "199": "   * thereof.\n",
        "212": "   * A sensible, albeit inefficient, definition of {@link #containsKey} in terms\n",
        "213": "   * of the {@code iterator} method of {@link #entrySet}. If you override {@link\n",
        "214": "   * #entrySet}, you may wish to override {@link #containsKey} to forward to\n",
        "215": "   * this implementation.\n",
        "225": "   * A sensible implementation of {@link Map#values} in terms of the following\n",
        "226": "   * methods: {@link ForwardingMap#clear}, {@link ForwardingMap#containsValue},\n",
        "227": "   * {@link ForwardingMap#isEmpty}, {@link ForwardingMap#size}, and the {@link\n",
        "228": "   * Set#iterator} method of {@link ForwardingMap#entrySet}. In many cases, you\n",
        "229": "   * may wish to override {@link ForwardingMap#values} to forward to this\n",
        "230": "   * implementation or a subclass thereof.\n",
        "243": "   * A sensible definition of {@link #containsValue} in terms of the {@code\n",
        "244": "   * iterator} method of {@link #entrySet}. If you override {@link #entrySet},\n",
        "245": "   * you may wish to override {@link #containsValue} to forward to this\n",
        "246": "   * implementation.\n",
        "255": "   * A sensible implementation of {@link Map#entrySet} in terms of the following\n",
        "256": "   * methods: {@link ForwardingMap#clear}, {@link ForwardingMap#containsKey},\n",
        "257": "   * {@link ForwardingMap#get}, {@link ForwardingMap#isEmpty}, {@link\n",
        "258": "   * ForwardingMap#remove}, and {@link ForwardingMap#size}. In many cases, you\n",
        "259": "   * may wish to override {@link #entrySet} to forward to this implementation\n",
        "260": "   * or a subclass thereof.\n",
        "276": "   * A sensible definition of {@link #isEmpty} in terms of the {@code iterator}\n",
        "277": "   * method of {@link #entrySet}. If you override {@link #entrySet}, you may\n",
        "278": "   * wish to override {@link #isEmpty} to forward to this implementation.\n",
        "287": "   * A sensible definition of {@link #equals} in terms of the {@code equals}\n",
        "288": "   * method of {@link #entrySet}. If you override {@link #entrySet}, you may\n",
        "289": "   * wish to override {@link #equals} to forward to this implementation.\n",
        "298": "   * A sensible definition of {@link #hashCode} in terms of the {@code iterator}\n",
        "299": "   * method of {@link #entrySet}. If you override {@link #entrySet}, you may\n",
        "300": "   * wish to override {@link #hashCode} to forward to this implementation.\n",
        "309": "   * A sensible definition of {@link #toString} in terms of the {@code iterator}\n",
        "310": "   * method of {@link #entrySet}. If you override {@link #entrySet}, you may\n",
        "311": "   * wish to override {@link #toString} to forward to this implementation.\n"
    }
}