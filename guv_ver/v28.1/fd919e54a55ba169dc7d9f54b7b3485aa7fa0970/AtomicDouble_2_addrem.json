{
    "addition": {
        "75": "  /** Creates a new {@code AtomicDouble} with initial value {@code 0.0}. */\n",
        "121": "   * Atomically sets the value to the given updated value if the current value is <a\n",
        "122": "   * href=\"#bitEquals\">bitwise equal</a> to the expected value.\n",
        "126": "   * @return {@code true} if successful. False return indicates that the actual value was not\n",
        "127": "   *     bitwise equal to the expected value.\n",
        "130": "    return updater.compareAndSet(this, doubleToRawLongBits(expect), doubleToRawLongBits(update));\n",
        "134": "   * Atomically sets the value to the given updated value if the current value is <a\n",
        "135": "   * href=\"#bitEquals\">bitwise equal</a> to the expected value.\n",
        "139": "   * fail spuriously</a> and does not provide ordering guarantees, so is only rarely an appropriate\n",
        "140": "   * alternative to {@code compareAndSet}.\n",
        "147": "    return updater.weakCompareAndSet(\n",
        "148": "        this, doubleToRawLongBits(expect), doubleToRawLongBits(update));\n",
        "191": "   *\n",
        "199": "   * Returns the value of this {@code AtomicDouble} as an {@code int} after a narrowing primitive\n",
        "200": "   * conversion.\n",
        "207": "   * Returns the value of this {@code AtomicDouble} as a {@code long} after a narrowing primitive\n",
        "208": "   * conversion.\n",
        "215": "   * Returns the value of this {@code AtomicDouble} as a {@code float} after a narrowing primitive\n",
        "216": "   * conversion.\n",
        "222": "  /** Returns the value of this {@code AtomicDouble} as a {@code double}. */\n",
        "232": "  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {\n",
        "238": "  /** Reconstitutes the instance from a stream (that is, deserializes it). */\n"
    },
    "removed": {
        "75": "  /**\n",
        "76": "   * Creates a new {@code AtomicDouble} with initial value {@code 0.0}.\n",
        "77": "   */\n",
        "123": "   * Atomically sets the value to the given updated value\n",
        "124": "   * if the current value is <a href=\"#bitEquals\">bitwise equal</a>\n",
        "125": "   * to the expected value.\n",
        "129": "   * @return {@code true} if successful. False return indicates that\n",
        "130": "   * the actual value was not bitwise equal to the expected value.\n",
        "133": "    return updater.compareAndSet(this,\n",
        "134": "                                 doubleToRawLongBits(expect),\n",
        "135": "                                 doubleToRawLongBits(update));\n",
        "139": "   * Atomically sets the value to the given updated value\n",
        "140": "   * if the current value is <a href=\"#bitEquals\">bitwise equal</a>\n",
        "141": "   * to the expected value.\n",
        "145": "   * fail spuriously</a>\n",
        "146": "   * and does not provide ordering guarantees, so is only rarely an\n",
        "147": "   * appropriate alternative to {@code compareAndSet}.\n",
        "154": "    return updater.weakCompareAndSet(this,\n",
        "155": "                                     doubleToRawLongBits(expect),\n",
        "156": "                                     doubleToRawLongBits(update));\n",
        "206": "   * Returns the value of this {@code AtomicDouble} as an {@code int}\n",
        "207": "   * after a narrowing primitive conversion.\n",
        "214": "   * Returns the value of this {@code AtomicDouble} as a {@code long}\n",
        "215": "   * after a narrowing primitive conversion.\n",
        "222": "   * Returns the value of this {@code AtomicDouble} as a {@code float}\n",
        "223": "   * after a narrowing primitive conversion.\n",
        "229": "  /**\n",
        "230": "   * Returns the value of this {@code AtomicDouble} as a {@code double}.\n",
        "231": "   */\n",
        "241": "  private void writeObject(java.io.ObjectOutputStream s)\n",
        "242": "      throws java.io.IOException {\n",
        "248": "  /**\n",
        "249": "   * Reconstitutes the instance from a stream (that is, deserializes it).\n",
        "250": "   */\n"
    }
}