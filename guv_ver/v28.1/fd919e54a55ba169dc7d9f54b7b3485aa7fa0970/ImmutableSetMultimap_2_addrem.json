{
    "addition": {
        "50": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\"> immutable collections</a>.\n",
        "66": "   * <p>Example:\n",
        "68": "   * <pre>{@code\n",
        "69": "   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =\n",
        "70": "   *     Stream.of(\"banana\", \"apple\", \"carrot\", \"asparagus\", \"cherry\")\n",
        "71": "   *         .collect(toImmutableSetMultimap(str -> str.charAt(0), str -> str.substring(1)));\n",
        "73": "   * // is equivalent to\n",
        "74": "   *\n",
        "75": "   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =\n",
        "76": "   *     new ImmutableSetMultimap.Builder<Character, String>()\n",
        "77": "   *         .put('b', \"anana\")\n",
        "78": "   *         .putAll('a', \"pple\", \"sparagus\")\n",
        "79": "   *         .putAll('c', \"arrot\", \"herry\")\n",
        "80": "   *         .build();\n",
        "81": "   * }</pre>\n",
        "160": "  /** Returns an immutable multimap containing a single entry. */\n",
        "168": "   * Returns an immutable multimap containing the given entries, in order. Repeated occurrences of\n",
        "169": "   * an entry (according to {@link Object#equals}) after the first are ignored.\n",
        "179": "   * Returns an immutable multimap containing the given entries, in order. Repeated occurrences of\n",
        "180": "   * an entry (according to {@link Object#equals}) after the first are ignored.\n",
        "191": "   * Returns an immutable multimap containing the given entries, in order. Repeated occurrences of\n",
        "192": "   * an entry (according to {@link Object#equals}) after the first are ignored.\n",
        "205": "   * Returns an immutable multimap containing the given entries, in order. Repeated occurrences of\n",
        "206": "   * an entry (according to {@link Object#equals}) after the first are ignored.\n",
        "221": "  /** Returns a new {@link Builder}. */\n",
        "227": "   * A builder for creating immutable {@code SetMultimap} instances, especially {@code public static\n",
        "228": "   * final} multimaps (\"constant multimaps\"). Example:\n",
        "230": "   * <pre>{@code\n",
        "231": "   * static final Multimap<String, Integer> STRING_TO_INTEGER_MULTIMAP =\n",
        "232": "   *     new ImmutableSetMultimap.Builder<String, Integer>()\n",
        "233": "   *         .put(\"one\", 1)\n",
        "234": "   *         .putAll(\"several\", 1, 2, 3)\n",
        "235": "   *         .putAll(\"many\", 1, 2, 3, 4, 5)\n",
        "236": "   *         .build();\n",
        "237": "   * }</pre>\n",
        "239": "   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build\n",
        "240": "   * multiple multimaps in series. Each multimap contains the key-value mappings in the previously\n",
        "241": "   * created multimaps.\n",
        "247": "     * Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n",
        "248": "     * ImmutableSetMultimap#builder}.\n",
        "254": "    /** Adds a key-value mapping to the built multimap if it is not already present. */\n",
        "335": "     * <p>If this method is called, the sets returned by the {@code get()} method of the generated\n",
        "336": "     * multimap and its {@link Multimap#asMap()} view are {@link ImmutableSortedSet} instances.\n",
        "337": "     * However, serialization does not preserve that property, though it does maintain the key and\n",
        "338": "     * value ordering.\n",
        "350": "    /** Returns a newly-created immutable set multimap. */\n",
        "370": "   * Returns an immutable set multimap containing the same mappings as {@code multimap}. The\n",
        "371": "   * generated multimap's key and value orderings correspond to the iteration ordering of the {@code\n",
        "372": "   * multimap.asMap()} view. Repeated occurrences of an entry in the multimap after the first are\n",
        "375": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "376": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "377": "   * undocumented and subject to change.\n",
        "379": "   * @throws NullPointerException if any key or value in {@code multimap} is null\n",
        "420": "   * Returns an immutable multimap containing the specified entries. The returned multimap iterates\n",
        "421": "   * over keys in the order they were first encountered in the input, and the values for each key\n",
        "422": "   * are iterated in the order they were encountered. If two values for the same key are {@linkplain\n",
        "423": "   * Object#equals equal}, the first value encountered is used.\n",
        "435": "   * Returned by get() when a missing key is provided. Also holds the comparator, if any, used for\n",
        "436": "   * values.\n",
        "451": "   * Returns an immutable set of the values for the given key. If no mappings in the multimap have\n",
        "452": "   * the provided key, an empty immutable set is returned. The values are in the same order as the\n",
        "453": "   * parameters used to build this multimap.\n",
        "462": "  @LazyInit @RetainedWith private transient ImmutableSetMultimap<V, K> inverse;\n",
        "467": "   * <p>Because an inverse of a set multimap cannot contain multiple pairs with the same key and\n",
        "468": "   * value, this method returns an {@code ImmutableSetMultimap} rather than the {@code\n",
        "469": "   * ImmutableMultimap} specified in the {@code ImmutableMultimap} class.\n",
        "517": "   * Returns an immutable collection of all key-value pairs in the multimap. Its iterator traverses\n",
        "518": "   * the values for the first key, the values for the second key, and so on.\n",
        "579": "   * @serialData number of distinct keys, and then for each distinct key: the key, the number of\n",
        "580": "   *     values for that key, and the key's values\n"
    },
    "removed": {
        "50": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\">\n",
        "51": " * immutable collections</a>.\n",
        "67": "   * Example:\n",
        "68": "   * <pre>   {@code\n",
        "70": "   *   static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =\n",
        "71": "   *       Stream.of(\"banana\", \"apple\", \"carrot\", \"asparagus\", \"cherry\")\n",
        "72": "   *           .collect(toImmutableSetMultimap(str -> str.charAt(0), str -> str.substring(1)));\n",
        "74": "   *   // is equivalent to\n",
        "76": "   *   static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =\n",
        "77": "   *       new ImmutableSetMultimap.Builder<Character, String>()\n",
        "78": "   *           .put('b', \"anana\")\n",
        "79": "   *           .putAll('a', \"pple\", \"sparagus\")\n",
        "80": "   *           .putAll('c', \"arrot\", \"herry\")\n",
        "81": "   *           .build();}</pre>\n",
        "159": "  /**\n",
        "160": "   * Returns an immutable multimap containing a single entry.\n",
        "161": "   */\n",
        "169": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "170": "   * Repeated occurrences of an entry (according to {@link Object#equals}) after\n",
        "171": "   * the first are ignored.\n",
        "181": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "182": "   * Repeated occurrences of an entry (according to {@link Object#equals}) after\n",
        "183": "   * the first are ignored.\n",
        "194": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "195": "   * Repeated occurrences of an entry (according to {@link Object#equals}) after\n",
        "196": "   * the first are ignored.\n",
        "209": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "210": "   * Repeated occurrences of an entry (according to {@link Object#equals}) after\n",
        "211": "   * the first are ignored.\n",
        "226": "  /**\n",
        "227": "   * Returns a new {@link Builder}.\n",
        "228": "   */\n",
        "234": "   * A builder for creating immutable {@code SetMultimap} instances, especially\n",
        "235": "   * {@code public static final} multimaps (\"constant multimaps\"). Example:\n",
        "236": "   * <pre>   {@code\n",
        "238": "   *   static final Multimap<String, Integer> STRING_TO_INTEGER_MULTIMAP =\n",
        "239": "   *       new ImmutableSetMultimap.Builder<String, Integer>()\n",
        "240": "   *           .put(\"one\", 1)\n",
        "241": "   *           .putAll(\"several\", 1, 2, 3)\n",
        "242": "   *           .putAll(\"many\", 1, 2, 3, 4, 5)\n",
        "243": "   *           .build();}</pre>\n",
        "245": "   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple\n",
        "246": "   * times to build multiple multimaps in series. Each multimap contains the\n",
        "247": "   * key-value mappings in the previously created multimaps.\n",
        "253": "     * Creates a new builder. The returned builder is equivalent to the builder\n",
        "254": "     * generated by {@link ImmutableSetMultimap#builder}.\n",
        "260": "    /**\n",
        "261": "     * Adds a key-value mapping to the built multimap if it is not already\n",
        "262": "     * present.\n",
        "263": "     */\n",
        "344": "     * <p>If this method is called, the sets returned by the {@code get()}\n",
        "345": "     * method of the generated multimap and its {@link Multimap#asMap()} view\n",
        "346": "     * are {@link ImmutableSortedSet} instances. However, serialization does not\n",
        "347": "     * preserve that property, though it does maintain the key and value\n",
        "348": "     * ordering.\n",
        "360": "    /**\n",
        "361": "     * Returns a newly-created immutable set multimap.\n",
        "362": "     */\n",
        "382": "   * Returns an immutable set multimap containing the same mappings as\n",
        "383": "   * {@code multimap}. The generated multimap's key and value orderings\n",
        "384": "   * correspond to the iteration ordering of the {@code multimap.asMap()} view.\n",
        "385": "   * Repeated occurrences of an entry in the multimap after the first are\n",
        "388": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "389": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "390": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "392": "   * @throws NullPointerException if any key or value in {@code multimap} is\n",
        "393": "   *     null\n",
        "434": "   * Returns an immutable multimap containing the specified entries.  The\n",
        "435": "   * returned multimap iterates over keys in the order they were first\n",
        "436": "   * encountered in the input, and the values for each key are iterated in the\n",
        "437": "   * order they were encountered.  If two values for the same key are\n",
        "438": "   * {@linkplain Object#equals equal}, the first value encountered is used.\n",
        "450": "   * Returned by get() when a missing key is provided. Also holds the\n",
        "451": "   * comparator, if any, used for values.\n",
        "466": "   * Returns an immutable set of the values for the given key.  If no mappings\n",
        "467": "   * in the multimap have the provided key, an empty immutable set is returned.\n",
        "468": "   * The values are in the same order as the parameters used to build this\n",
        "469": "   * multimap.\n",
        "478": "  @LazyInit\n",
        "479": "  @RetainedWith\n",
        "480": "  private transient ImmutableSetMultimap<V, K> inverse;\n",
        "485": "   * <p>Because an inverse of a set multimap cannot contain multiple pairs with\n",
        "486": "   * the same key and value, this method returns an {@code ImmutableSetMultimap}\n",
        "487": "   * rather than the {@code ImmutableMultimap} specified in the {@code\n",
        "488": "   * ImmutableMultimap} class.\n",
        "536": "   * Returns an immutable collection of all key-value pairs in the multimap.\n",
        "537": "   * Its iterator traverses the values for the first key, the values for the\n",
        "538": "   * second key, and so on.\n",
        "599": "   * @serialData number of distinct keys, and then for each distinct key: the\n",
        "600": "   *     key, the number of values for that key, and the key's values\n"
    }
}