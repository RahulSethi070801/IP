{
    "addition": {
        "59": "   * Returns the elements of {@code unfiltered} that satisfy a predicate. The returned collection is\n",
        "60": "   * a live view of {@code unfiltered}; changes to one affect the other.\n",
        "62": "   * <p>The resulting collection's iterator does not support {@code remove()}, but all other\n",
        "63": "   * collection methods are supported. When given an element that doesn't satisfy the predicate, the\n",
        "64": "   * collection's {@code add()} and {@code addAll()} methods throw an {@link\n",
        "65": "   * IllegalArgumentException}. When methods such as {@code removeAll()} and {@code clear()} are\n",
        "66": "   * called on the filtered collection, only elements that satisfy the filter will be removed from\n",
        "67": "   * the underlying collection.\n",
        "69": "   * <p>The returned collection isn't threadsafe or serializable, even if {@code unfiltered} is.\n",
        "71": "   * <p>Many of the filtered collection's methods, such as {@code size()}, iterate across every\n",
        "72": "   * element in the underlying collection and determine which elements satisfy the filter. When a\n",
        "73": "   * live view is <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered,\n",
        "74": "   * predicate)} and use the copy.\n",
        "76": "   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at\n",
        "77": "   * {@link Predicate#apply}. Do not provide a predicate such as {@code\n",
        "78": "   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link\n",
        "79": "   * Iterables#filter(Iterable, Class)} for related functionality.)\n",
        "96": "   * Delegates to {@link Collection#contains}. Returns {@code false} if the {@code contains} method\n",
        "97": "   * throws a {@code ClassCastException} or {@code NullPointerException}.\n",
        "109": "   * Delegates to {@link Collection#remove}. Returns {@code false} if the {@code remove} method\n",
        "110": "   * throws a {@code ClassCastException} or {@code NullPointerException}.\n",
        "236": "   * Returns a collection that applies {@code function} to each element of {@code fromCollection}.\n",
        "237": "   * The returned collection is a live view of {@code fromCollection}; changes to one affect the\n",
        "238": "   * other.\n",
        "240": "   * <p>The returned collection's {@code add()} and {@code addAll()} methods throw an {@link\n",
        "241": "   * UnsupportedOperationException}. All other collection methods are supported, as long as {@code\n",
        "242": "   * fromCollection} supports them.\n",
        "244": "   * <p>The returned collection isn't threadsafe or serializable, even if {@code fromCollection} is.\n",
        "246": "   * <p>When a live view is <i>not</i> needed, it may be faster to copy the transformed collection\n",
        "247": "   * and use the copy.\n",
        "249": "   * <p>If the input {@code Collection} is known to be a {@code List}, consider {@link\n",
        "250": "   * Lists#transform}. If only an {@code Iterable} is available, use {@link Iterables#transform}.\n",
        "290": "   * Returns {@code true} if the collection {@code self} contains all of the elements in the\n",
        "291": "   * collection {@code c}.\n",
        "293": "   * <p>This method iterates over the specified collection {@code c}, checking each element returned\n",
        "294": "   * by the iterator in turn to see if it is contained in the specified collection {@code self}. If\n",
        "295": "   * all elements are so contained, {@code true} is returned, otherwise {@code false}.\n",
        "309": "  /** An implementation of {@link Collection#toString()}. */\n",
        "327": "  /** Returns best-effort-sized StringBuilder based on the given collection size. */\n",
        "333": "  /** Used to avoid http://bugs.sun.com/view_bug.do?bug_id=6558557 */\n",
        "339": "   * Returns a {@link Collection} of all the permutations of the specified {@link Iterable}.\n",
        "341": "   * <p><i>Notes:</i> This is an implementation of the algorithm for Lexicographical Permutations\n",
        "342": "   * Generation, described in Knuth's \"The Art of Computer Programming\", Volume 4, Chapter 7,\n",
        "343": "   * Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the\n",
        "344": "   * first permutation will be in ascending order, and the last will be in descending order.\n",
        "346": "   * <p>Duplicate elements are considered equal. For example, the list [1, 1] will have only one\n",
        "347": "   * permutation, instead of two. This is why the elements have to implement {@link Comparable}.\n",
        "351": "   * <p>This method is equivalent to {@code Collections2.orderedPermutations(list,\n",
        "352": "   * Ordering.natural())}.\n",
        "355": "   * @return an immutable {@link Collection} containing all the different permutations of the\n",
        "356": "   *     original iterable.\n",
        "357": "   * @throws NullPointerException if the specified iterable is null or has any null elements.\n",
        "367": "   * Returns a {@link Collection} of all the permutations of the specified {@link Iterable} using\n",
        "368": "   * the specified {@link Comparator} for establishing the lexicographical ordering.\n",
        "370": "   * <p>Examples:\n",
        "372": "   * <pre>{@code\n",
        "373": "   * for (List<String> perm : orderedPermutations(asList(\"b\", \"c\", \"a\"))) {\n",
        "374": "   *   println(perm);\n",
        "375": "   * }\n",
        "376": "   * // -> [\"a\", \"b\", \"c\"]\n",
        "377": "   * // -> [\"a\", \"c\", \"b\"]\n",
        "378": "   * // -> [\"b\", \"a\", \"c\"]\n",
        "379": "   * // -> [\"b\", \"c\", \"a\"]\n",
        "380": "   * // -> [\"c\", \"a\", \"b\"]\n",
        "381": "   * // -> [\"c\", \"b\", \"a\"]\n",
        "383": "   * for (List<Integer> perm : orderedPermutations(asList(1, 2, 2, 1))) {\n",
        "384": "   *   println(perm);\n",
        "385": "   * }\n",
        "386": "   * // -> [1, 1, 2, 2]\n",
        "387": "   * // -> [1, 2, 1, 2]\n",
        "388": "   * // -> [1, 2, 2, 1]\n",
        "389": "   * // -> [2, 1, 1, 2]\n",
        "390": "   * // -> [2, 1, 2, 1]\n",
        "391": "   * // -> [2, 2, 1, 1]\n",
        "392": "   * }</pre>\n",
        "394": "   * <p><i>Notes:</i> This is an implementation of the algorithm for Lexicographical Permutations\n",
        "395": "   * Generation, described in Knuth's \"The Art of Computer Programming\", Volume 4, Chapter 7,\n",
        "396": "   * Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the\n",
        "397": "   * first permutation will be in ascending order, and the last will be in descending order.\n",
        "399": "   * <p>Elements that compare equal are considered equal and no new permutations are created by\n",
        "400": "   * swapping them.\n",
        "406": "   * @return an immutable {@link Collection} containing all the different permutations of the\n",
        "407": "   *     original iterable.\n",
        "408": "   * @throws NullPointerException If the specified iterable is null, has any null elements, or if\n",
        "409": "   *     the specified comparator is null.\n",
        "430": "     * The number of permutations with repeated elements is calculated as follows:\n",
        "431": "     *\n",
        "433": "     *   <li>For an empty list, it is 1 (base case).\n",
        "434": "     *   <li>When r numbers are added to a list of n-r elements, the number of permutations is\n",
        "435": "     *       increased by a factor of (n choose r).\n",
        "543": "   * Returns a {@link Collection} of all the permutations of the specified {@link Collection}.\n",
        "545": "   * <p><i>Notes:</i> This is an implementation of the Plain Changes algorithm for permutations\n",
        "546": "   * generation, described in Knuth's \"The Art of Computer Programming\", Volume 4, Chapter 7,\n",
        "547": "   * Section 7.2.1.2.\n",
        "549": "   * <p>If the input list contains equal elements, some of the generated permutations will be equal.\n",
        "554": "   * @return an immutable {@link Collection} containing all the different permutations of the\n",
        "555": "   *     original collection.\n",
        "556": "   * @throws NullPointerException if the specified collection is null or has any null elements.\n",
        "664": "  /** Returns {@code true} if the second list is a permutation of the first. */\n"
    },
    "removed": {
        "59": "   * Returns the elements of {@code unfiltered} that satisfy a predicate. The\n",
        "60": "   * returned collection is a live view of {@code unfiltered}; changes to one\n",
        "61": "   * affect the other.\n",
        "63": "   * <p>The resulting collection's iterator does not support {@code remove()},\n",
        "64": "   * but all other collection methods are supported. When given an element that\n",
        "65": "   * doesn't satisfy the predicate, the collection's {@code add()} and {@code\n",
        "66": "   * addAll()} methods throw an {@link IllegalArgumentException}. When methods\n",
        "67": "   * such as {@code removeAll()} and {@code clear()} are called on the filtered\n",
        "68": "   * collection, only elements that satisfy the filter will be removed from the\n",
        "69": "   * underlying collection.\n",
        "71": "   * <p>The returned collection isn't threadsafe or serializable, even if\n",
        "72": "   * {@code unfiltered} is.\n",
        "74": "   * <p>Many of the filtered collection's methods, such as {@code size()},\n",
        "75": "   * iterate across every element in the underlying collection and determine\n",
        "76": "   * which elements satisfy the filter. When a live view is <i>not</i> needed,\n",
        "77": "   * it may be faster to copy {@code Iterables.filter(unfiltered, predicate)}\n",
        "78": "   * and use the copy.\n",
        "80": "   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>,\n",
        "81": "   * as documented at {@link Predicate#apply}. Do not provide a predicate such\n",
        "82": "   * as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent\n",
        "83": "   * with equals. (See {@link Iterables#filter(Iterable, Class)} for related\n",
        "84": "   * functionality.)\n",
        "101": "   * Delegates to {@link Collection#contains}. Returns {@code false} if the\n",
        "102": "   * {@code contains} method throws a {@code ClassCastException} or\n",
        "103": "   * {@code NullPointerException}.\n",
        "115": "   * Delegates to {@link Collection#remove}. Returns {@code false} if the\n",
        "116": "   * {@code remove} method throws a {@code ClassCastException} or\n",
        "117": "   * {@code NullPointerException}.\n",
        "243": "   * Returns a collection that applies {@code function} to each element of\n",
        "244": "   * {@code fromCollection}. The returned collection is a live view of {@code\n",
        "245": "   * fromCollection}; changes to one affect the other.\n",
        "247": "   * <p>The returned collection's {@code add()} and {@code addAll()} methods\n",
        "248": "   * throw an {@link UnsupportedOperationException}. All other collection\n",
        "249": "   * methods are supported, as long as {@code fromCollection} supports them.\n",
        "251": "   * <p>The returned collection isn't threadsafe or serializable, even if\n",
        "252": "   * {@code fromCollection} is.\n",
        "254": "   * <p>When a live view is <i>not</i> needed, it may be faster to copy the\n",
        "255": "   * transformed collection and use the copy.\n",
        "257": "   * <p>If the input {@code Collection} is known to be a {@code List}, consider\n",
        "258": "   * {@link Lists#transform}. If only an {@code Iterable} is available, use\n",
        "259": "   * {@link Iterables#transform}.\n",
        "299": "   * Returns {@code true} if the collection {@code self} contains all of the\n",
        "300": "   * elements in the collection {@code c}.\n",
        "302": "   * <p>This method iterates over the specified collection {@code c}, checking\n",
        "303": "   * each element returned by the iterator in turn to see if it is contained in\n",
        "304": "   * the specified collection {@code self}. If all elements are so contained,\n",
        "305": "   * {@code true} is returned, otherwise {@code false}.\n",
        "319": "  /**\n",
        "320": "   * An implementation of {@link Collection#toString()}.\n",
        "321": "   */\n",
        "339": "  /**\n",
        "340": "   * Returns best-effort-sized StringBuilder based on the given collection size.\n",
        "341": "   */\n",
        "347": "  /**\n",
        "348": "   * Used to avoid http://bugs.sun.com/view_bug.do?bug_id=6558557\n",
        "349": "   */\n",
        "355": "   * Returns a {@link Collection} of all the permutations of the specified\n",
        "356": "   * {@link Iterable}.\n",
        "358": "   * <p><i>Notes:</i> This is an implementation of the algorithm for\n",
        "359": "   * Lexicographical Permutations Generation, described in Knuth's \"The Art of\n",
        "360": "   * Computer Programming\", Volume 4, Chapter 7, Section 7.2.1.2. The\n",
        "361": "   * iteration order follows the lexicographical order. This means that\n",
        "362": "   * the first permutation will be in ascending order, and the last will be in\n",
        "363": "   * descending order.\n",
        "365": "   * <p>Duplicate elements are considered equal. For example, the list [1, 1]\n",
        "366": "   * will have only one permutation, instead of two. This is why the elements\n",
        "367": "   * have to implement {@link Comparable}.\n",
        "371": "   * <p>This method is equivalent to\n",
        "372": "   * {@code Collections2.orderedPermutations(list, Ordering.natural())}.\n",
        "375": "   * @return an immutable {@link Collection} containing all the different\n",
        "376": "   *     permutations of the original iterable.\n",
        "377": "   * @throws NullPointerException if the specified iterable is null or has any\n",
        "378": "   *     null elements.\n",
        "388": "   * Returns a {@link Collection} of all the permutations of the specified\n",
        "389": "   * {@link Iterable} using the specified {@link Comparator} for establishing\n",
        "390": "   * the lexicographical ordering.\n",
        "392": "   * <p>Examples: <pre>   {@code\n",
        "394": "   *   for (List<String> perm : orderedPermutations(asList(\"b\", \"c\", \"a\"))) {\n",
        "395": "   *     println(perm);\n",
        "396": "   *   }\n",
        "397": "   *   // -> [\"a\", \"b\", \"c\"]\n",
        "398": "   *   // -> [\"a\", \"c\", \"b\"]\n",
        "399": "   *   // -> [\"b\", \"a\", \"c\"]\n",
        "400": "   *   // -> [\"b\", \"c\", \"a\"]\n",
        "401": "   *   // -> [\"c\", \"a\", \"b\"]\n",
        "402": "   *   // -> [\"c\", \"b\", \"a\"]\n",
        "404": "   *   for (List<Integer> perm : orderedPermutations(asList(1, 2, 2, 1))) {\n",
        "405": "   *     println(perm);\n",
        "406": "   *   }\n",
        "407": "   *   // -> [1, 1, 2, 2]\n",
        "408": "   *   // -> [1, 2, 1, 2]\n",
        "409": "   *   // -> [1, 2, 2, 1]\n",
        "410": "   *   // -> [2, 1, 1, 2]\n",
        "411": "   *   // -> [2, 1, 2, 1]\n",
        "412": "   *   // -> [2, 2, 1, 1]}</pre>\n",
        "414": "   * <p><i>Notes:</i> This is an implementation of the algorithm for\n",
        "415": "   * Lexicographical Permutations Generation, described in Knuth's \"The Art of\n",
        "416": "   * Computer Programming\", Volume 4, Chapter 7, Section 7.2.1.2. The\n",
        "417": "   * iteration order follows the lexicographical order. This means that\n",
        "418": "   * the first permutation will be in ascending order, and the last will be in\n",
        "419": "   * descending order.\n",
        "421": "   * <p>Elements that compare equal are considered equal and no new permutations\n",
        "422": "   * are created by swapping them.\n",
        "428": "   * @return an immutable {@link Collection} containing all the different\n",
        "429": "   *     permutations of the original iterable.\n",
        "430": "   * @throws NullPointerException If the specified iterable is null, has any\n",
        "431": "   *     null elements, or if the specified comparator is null.\n",
        "452": "     * The number of permutations with repeated elements is calculated as\n",
        "453": "     * follows:\n",
        "455": "     * <li>For an empty list, it is 1 (base case).</li>\n",
        "456": "     * <li>When r numbers are added to a list of n-r elements, the number of\n",
        "457": "     * permutations is increased by a factor of (n choose r).</li>\n",
        "565": "   * Returns a {@link Collection} of all the permutations of the specified\n",
        "566": "   * {@link Collection}.\n",
        "568": "   * <p><i>Notes:</i> This is an implementation of the Plain Changes algorithm\n",
        "569": "   * for permutations generation, described in Knuth's \"The Art of Computer\n",
        "570": "   * Programming\", Volume 4, Chapter 7, Section 7.2.1.2.\n",
        "572": "   * <p>If the input list contains equal elements, some of the generated\n",
        "573": "   * permutations will be equal.\n",
        "578": "   * @return an immutable {@link Collection} containing all the different\n",
        "579": "   *     permutations of the original collection.\n",
        "580": "   * @throws NullPointerException if the specified collection is null or has any\n",
        "581": "   *     null elements.\n",
        "689": "  /**\n",
        "690": "   * Returns {@code true} if the second list is a permutation of the first.\n",
        "691": "   */\n"
    }
}