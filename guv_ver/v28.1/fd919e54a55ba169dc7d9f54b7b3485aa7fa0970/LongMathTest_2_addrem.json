{
    "addition": {
        "137": "    } catch (ArithmeticException expected) {\n",
        "138": "    }\n",
        "144": "      assertEquals(\n",
        "145": "          BigIntegerMath.sqrt(BigInteger.TEN.pow(2 * i + 1), FLOOR),\n",
        "170": "    } catch (ArithmeticException expect) {\n",
        "171": "    }\n",
        "178": "      assertTrue(\n",
        "179": "          LongMath.biggestBinomials[k] == Integer.MAX_VALUE\n",
        "180": "              || !fitsInLong(BigIntegerMath.binomial(LongMath.biggestBinomials[k] + 1, k)));\n",
        "199": "        } catch (ArithmeticException expected) {\n",
        "200": "        }\n",
        "208": "    } catch (ArithmeticException expected) {\n",
        "209": "    }\n",
        "252": "      } catch (IllegalArgumentException expected) {\n",
        "253": "      }\n",
        "263": "        } catch (IllegalArgumentException expected) {\n",
        "264": "        }\n",
        "299": "      } catch (IllegalArgumentException expected) {\n",
        "300": "      }\n",
        "311": "        } catch (IllegalArgumentException expected) {\n",
        "312": "        }\n",
        "359": "        } catch (IllegalArgumentException expected) {\n",
        "360": "        }\n",
        "397": "        assertEquals(LongMath.pow(i, exp), valueOf(i).pow(exp).longValue());\n",
        "455": "        } catch (ArithmeticException expected) {\n",
        "456": "        }\n",
        "465": "        assertEquals(valueOf(x).mod(valueOf(m)).intValue(), LongMath.mod(x, m));\n",
        "477": "        } catch (ArithmeticException expected) {\n",
        "478": "        }\n",
        "489": "      } catch (ArithmeticException expected) {\n",
        "490": "      }\n",
        "499": "        assertEquals(valueOf(x).mod(valueOf(m)).longValue(), LongMath.mod(x, m));\n",
        "511": "        } catch (ArithmeticException expected) {\n",
        "512": "        }\n",
        "540": "      } catch (IllegalArgumentException expected) {\n",
        "541": "      }\n",
        "545": "      } catch (IllegalArgumentException expected) {\n",
        "546": "      }\n",
        "556": "      } catch (IllegalArgumentException expected) {\n",
        "557": "      }\n",
        "561": "      } catch (IllegalArgumentException expected) {\n",
        "562": "      }\n",
        "600": "                a, b, expectedResult);\n",
        "632": "                a, b, expectedResult);\n",
        "652": "                b, exp, expectedResult);\n",
        "732": "      } catch (IllegalArgumentException expected) {\n",
        "733": "      }\n",
        "764": "      } catch (IllegalArgumentException expected) {\n",
        "765": "      }\n",
        "769": "      } catch (IllegalArgumentException expected) {\n",
        "770": "      }\n",
        "779": "      } catch (IllegalArgumentException expected) {\n",
        "780": "      }\n",
        "833": "  /** Helper method that asserts the arithmetic mean of x and y is equal to the expectedMean. */\n",
        "835": "    assertEquals(\n",
        "836": "        \"The expectedMean should be the same as computeMeanSafely\",\n",
        "837": "        expectedMean,\n",
        "838": "        computeMeanSafely(x, y));\n",
        "843": "   * Helper method that asserts the arithmetic mean of x and y is equal to the result of\n",
        "844": "   * computeMeanSafely.\n",
        "849": "    assertEquals(\n",
        "850": "        \"The mean of x and y should equal the mean of y and x\", expectedMean, LongMath.mean(y, x));\n",
        "854": "   * Computes the mean in a way that is obvious and resilient to overflow by using BigInteger\n",
        "855": "   * arithmetic.\n",
        "860": "    BigDecimal bigMean =\n",
        "861": "        new BigDecimal(bigX.add(bigY)).divide(BigDecimal.valueOf(2), BigDecimal.ROUND_FLOOR);\n",
        "948": "    } catch (IllegalArgumentException expected) {\n",
        "949": "    }\n"
    },
    "removed": {
        "138": "    } catch (ArithmeticException expected) {}\n",
        "144": "      assertEquals(BigIntegerMath.sqrt(BigInteger.TEN.pow(2 * i + 1), FLOOR),\n",
        "169": "    } catch (ArithmeticException expect) {}\n",
        "176": "      assertTrue(LongMath.biggestBinomials[k] == Integer.MAX_VALUE\n",
        "177": "          || !fitsInLong(BigIntegerMath.binomial(LongMath.biggestBinomials[k] + 1, k)));\n",
        "196": "        } catch (ArithmeticException expected) {}\n",
        "204": "    } catch (ArithmeticException expected) {}\n",
        "247": "      } catch (IllegalArgumentException expected) {}\n",
        "257": "        } catch (IllegalArgumentException expected) {}\n",
        "292": "      } catch (IllegalArgumentException expected) {}\n",
        "303": "        } catch (IllegalArgumentException expected) {}\n",
        "350": "        } catch (IllegalArgumentException expected) {}\n",
        "387": "        assertEquals(LongMath.pow(i, exp), valueOf(i)\n",
        "388": "            .pow(exp)\n",
        "389": "            .longValue());\n",
        "447": "        } catch (ArithmeticException expected) {}\n",
        "456": "        assertEquals(valueOf(x)\n",
        "457": "            .mod(valueOf(m))\n",
        "458": "            .intValue(), LongMath.mod(x, m));\n",
        "470": "        } catch (ArithmeticException expected) {}\n",
        "481": "      } catch (ArithmeticException expected) {}\n",
        "490": "        assertEquals(valueOf(x)\n",
        "491": "            .mod(valueOf(m))\n",
        "492": "            .longValue(), LongMath.mod(x, m));\n",
        "504": "        } catch (ArithmeticException expected) {}\n",
        "532": "      } catch (IllegalArgumentException expected) {}\n",
        "536": "      } catch (IllegalArgumentException expected) {}\n",
        "546": "      } catch (IllegalArgumentException expected) {}\n",
        "550": "      } catch (IllegalArgumentException expected) {}\n",
        "588": "                a,\n",
        "589": "                b,\n",
        "590": "                expectedResult);\n",
        "622": "                a,\n",
        "623": "                b,\n",
        "624": "                expectedResult);\n",
        "644": "                b,\n",
        "645": "                exp,\n",
        "646": "                expectedResult);\n",
        "726": "      } catch (IllegalArgumentException expected) {}\n",
        "757": "      } catch (IllegalArgumentException expected) {}\n",
        "761": "      } catch (IllegalArgumentException expected) {}\n",
        "770": "      } catch (IllegalArgumentException expected) {}\n",
        "823": "  /**\n",
        "824": "   * Helper method that asserts the arithmetic mean of x and y is equal\n",
        "825": "   * to the expectedMean.\n",
        "826": "   */\n",
        "828": "    assertEquals(\"The expectedMean should be the same as computeMeanSafely\",\n",
        "829": "        expectedMean, computeMeanSafely(x, y));\n",
        "834": "   * Helper method that asserts the arithmetic mean of x and y is equal\n",
        "835": "   *to the result of computeMeanSafely.\n",
        "840": "    assertEquals(\"The mean of x and y should equal the mean of y and x\",\n",
        "841": "        expectedMean, LongMath.mean(y, x));\n",
        "845": "   * Computes the mean in a way that is obvious and resilient to\n",
        "846": "   * overflow by using BigInteger arithmetic.\n",
        "851": "    BigDecimal bigMean = new BigDecimal(bigX.add(bigY))\n",
        "852": "        .divide(BigDecimal.valueOf(2), BigDecimal.ROUND_FLOOR);\n",
        "939": "    } catch (IllegalArgumentException expected) {}\n"
    }
}