{
    "addition": {
        "43": "      \"\",\n",
        "44": "      \"016.016.016.016\",\n",
        "45": "      \"016.016.016\",\n",
        "46": "      \"016.016\",\n",
        "47": "      \"016\",\n",
        "48": "      \"000.000.000.000\",\n",
        "49": "      \"000\",\n",
        "50": "      \"0x0a.0x0a.0x0a.0x0a\",\n",
        "51": "      \"0x0a.0x0a.0x0a\",\n",
        "52": "      \"0x0a.0x0a\",\n",
        "53": "      \"0x0a\",\n",
        "54": "      \"42.42.42.42.42\",\n",
        "55": "      \"42.42.42\",\n",
        "56": "      \"42.42\",\n",
        "57": "      \"42\",\n",
        "58": "      \"42..42.42\",\n",
        "59": "      \"42..42.42.42\",\n",
        "60": "      \"42.42.42.42.\",\n",
        "61": "      \"42.42.42.42...\",\n",
        "62": "      \".42.42.42.42\",\n",
        "63": "      \"...42.42.42.42\",\n",
        "64": "      \"42.42.42.-0\",\n",
        "65": "      \"42.42.42.+0\",\n",
        "66": "      \".\",\n",
        "67": "      \"...\",\n",
        "68": "      \"bogus\",\n",
        "69": "      \"bogus.com\",\n",
        "70": "      \"192.168.0.1.com\",\n",
        "71": "      \"12345.67899.-54321.-98765\",\n",
        "72": "      \"257.0.0.0\",\n",
        "73": "      \"42.42.42.-42\",\n",
        "74": "      \"3ffe::1.net\",\n",
        "75": "      \"3ffe::1::1\",\n",
        "76": "      \"1::2::3::4:5\",\n",
        "77": "      \"::7:6:5:4:3:2:\", // should end with \":0\"\n",
        "78": "      \":6:5:4:3:2:1::\", // should begin with \"0:\"\n",
        "79": "      \"2001::db:::1\",\n",
        "80": "      \"FEDC:9878\",\n",
        "81": "      \"+1.+2.+3.4\",\n",
        "82": "      \"1.2.3.4e0\",\n",
        "83": "      \"::7:6:5:4:3:2:1:0\", // too many parts\n",
        "84": "      \"7:6:5:4:3:2:1:0::\", // too many parts\n",
        "85": "      \"9:8:7:6:5:4:3::2:1\", // too many parts\n",
        "86": "      \"0:1:2:3::4:5:6:7\", // :: must remove at least one 0.\n",
        "87": "      \"3ffe:0:0:0:0:0:0:0:1\", // too many parts (9 instead of 8)\n",
        "88": "      \"3ffe::10000\", // hextet exceeds 16 bits\n",
        "89": "      \"3ffe::goog\",\n",
        "90": "      \"3ffe::-0\",\n",
        "91": "      \"3ffe::+0\",\n",
        "92": "      \"3ffe::-1\",\n",
        "93": "      \":\",\n",
        "94": "      \":::\",\n",
        "95": "      \"::1.2.3\",\n",
        "96": "      \"::1.2.3.4.5\",\n",
        "97": "      \"::1.2.3.4:\",\n",
        "98": "      \"1.2.3.4::\",\n",
        "99": "      \"2001:db8::1:\",\n",
        "100": "      \":2001:db8::1\",\n",
        "101": "      \":1:2:3:4:5:6:7\",\n",
        "102": "      \"1:2:3:4:5:6:7:\",\n",
        "103": "      \":1:2:3:4:5:6:\"\n",
        "145": "      \"::7:6:5:4:3:2:1\", \"::7:6:5:4:3:2:0\", \"7:6:5:4:3:2:1::\", \"0:6:5:4:3:2:1::\",\n",
        "158": "    String[] ipStrings = {\n",
        "159": "      \"7::0.128.0.127\", \"7::0.128.0.128\", \"7::128.128.0.127\", \"7::0.128.128.127\"\n",
        "160": "    };\n",
        "172": "    assertEquals(\"1.2.3.4\", InetAddresses.toAddrString(InetAddresses.forString(\"1.2.3.4\")));\n",
        "176": "    assertEquals(\n",
        "177": "        \"1:2:3:4:5:6:7:8\", InetAddresses.toAddrString(InetAddresses.forString(\"1:2:3:4:5:6:7:8\")));\n",
        "178": "    assertEquals(\n",
        "179": "        \"2001:0:0:4::8\", InetAddresses.toAddrString(InetAddresses.forString(\"2001:0:0:4:0:0:0:8\")));\n",
        "180": "    assertEquals(\n",
        "181": "        \"2001::4:5:6:7:8\",\n",
        "182": "        InetAddresses.toAddrString(InetAddresses.forString(\"2001:0:0:4:5:6:7:8\")));\n",
        "183": "    assertEquals(\n",
        "184": "        \"2001:0:3:4:5:6:7:8\",\n",
        "185": "        InetAddresses.toAddrString(InetAddresses.forString(\"2001:0:3:4:5:6:7:8\")));\n",
        "186": "    assertEquals(\n",
        "187": "        \"0:0:3::ffff\", InetAddresses.toAddrString(InetAddresses.forString(\"0:0:3:0:0:0:0:ffff\")));\n",
        "188": "    assertEquals(\n",
        "189": "        \"::4:0:0:0:ffff\",\n",
        "190": "        InetAddresses.toAddrString(InetAddresses.forString(\"0:0:0:4:0:0:0:ffff\")));\n",
        "191": "    assertEquals(\n",
        "192": "        \"::5:0:0:ffff\", InetAddresses.toAddrString(InetAddresses.forString(\"0:0:0:0:5:0:0:ffff\")));\n",
        "193": "    assertEquals(\n",
        "194": "        \"1::4:0:0:7:8\", InetAddresses.toAddrString(InetAddresses.forString(\"1:0:0:4:0:0:7:8\")));\n",
        "195": "    assertEquals(\"::\", InetAddresses.toAddrString(InetAddresses.forString(\"0:0:0:0:0:0:0:0\")));\n",
        "196": "    assertEquals(\"::1\", InetAddresses.toAddrString(InetAddresses.forString(\"0:0:0:0:0:0:0:1\")));\n",
        "197": "    assertEquals(\n",
        "198": "        \"2001:658:22a:cafe::\",\n",
        "199": "        InetAddresses.toAddrString(InetAddresses.forString(\"2001:0658:022a:cafe::\")));\n",
        "200": "    assertEquals(\"::102:304\", InetAddresses.toAddrString(InetAddresses.forString(\"::1.2.3.4\")));\n",
        "252": "      fail(\"expected IllegalArgumentException\"); // COV_NF_LINE\n",
        "258": "      fail(\"expected IllegalArgumentException\"); // COV_NF_LINE\n",
        "264": "      fail(\"expected IllegalArgumentException\"); // COV_NF_LINE\n",
        "270": "      fail(\"expected IllegalArgumentException\"); // COV_NF_LINE\n",
        "276": "      fail(\"expected IllegalArgumentException\"); // COV_NF_LINE\n",
        "282": "      fail(\"expected IllegalArgumentException\"); // COV_NF_LINE\n",
        "288": "      fail(\"expected IllegalArgumentException\"); // COV_NF_LINE\n",
        "294": "      fail(\"expected IllegalArgumentException\"); // COV_NF_LINE\n",
        "300": "      fail(\"expected IllegalArgumentException\"); // COV_NF_LINE\n",
        "306": "      fail(\"expected IllegalArgumentException\"); // COV_NF_LINE\n",
        "312": "      fail(\"expected IllegalArgumentException\"); // COV_NF_LINE\n",
        "319": "      \"3ffe::1\", \"::\", \"::1\",\n",
        "327": "        fail(\"IllegalArgumentException expected for '\" + nonCompatAddresses[i] + \"'\");\n",
        "333": "      \"::1.2.3.4\", \"::102:304\",\n",
        "341": "      assertTrue(\n",
        "342": "          \"checking '\" + validCompatAddresses[i] + \"'\",\n",
        "344": "      assertEquals(\n",
        "345": "          \"checking '\" + validCompatAddresses[i] + \"'\",\n",
        "346": "          compat,\n",
        "347": "          InetAddresses.getCompatIPv4Address((Inet6Address) ip));\n",
        "393": "      \"::1.2.3.4\", \"3ffe::1\", \"::\", \"::1\",\n",
        "400": "        InetAddresses.get6to4IPv4Address((Inet6Address) ip);\n",
        "401": "        fail(\"IllegalArgumentException expected for '\" + non6to4Addresses[i] + \"'\");\n",
        "417": "      \"::1.2.3.4\", \"3ffe::1\", \"::\", \"::1\",\n",
        "425": "        fail(\"IllegalArgumentException expected for '\" + nonTeredoAddresses[i] + \"'\");\n",
        "438": "    InetAddresses.TeredoInfo teredo = InetAddresses.getTeredoInfo((Inet6Address) ip);\n",
        "461": "      \"2001:db8::5efe:102:304\",\n",
        "462": "      \"2001:db8::100:5efe:102:304\", // Private Multicast? Not likely.\n",
        "463": "      \"2001:db8::200:5efe:102:304\",\n",
        "464": "      \"2001:db8::300:5efe:102:304\" // Public Multicast? Also unlikely.\n",
        "467": "      \"::1.2.3.4\",\n",
        "468": "      \"3ffe::1\",\n",
        "469": "      \"::\",\n",
        "470": "      \"::1\",\n",
        "471": "      \"2001:db8::0040:5efe:102:304\",\n",
        "472": "      \"2001:db8::5ffe:102:304\",\n",
        "473": "      \"2001:db8::5eff:102:304\",\n",
        "474": "      \"2001:0:102:203:200:5efe:506:708\", // Teredo address; not ISATAP\n",
        "480": "      assertEquals(\n",
        "481": "          \"checking '\" + validIsatapAddresses[i] + \"'\",\n",
        "482": "          ipv4,\n",
        "483": "          InetAddresses.getIsatapIPv4Address((Inet6Address) ip));\n",
        "490": "        fail(\"IllegalArgumentException expected for '\" + nonIsatapAddresses[i] + \"'\");\n",
        "520": "    testIp = (Inet6Address) InetAddresses.forString(\"2001:0000:4136:e378:8000:63bf:3fff:fdd2\");\n",
        "529": "    assertEquals(localHost4, InetAddresses.getCoercedIPv4Address(localHost4));\n",
        "532": "    assertEquals(localHost4, InetAddresses.getCoercedIPv4Address(InetAddresses.forString(\"::1\")));\n",
        "535": "    assertEquals(\n",
        "536": "        InetAddresses.forString(\"0.0.0.0\"),\n",
        "537": "        InetAddresses.getCoercedIPv4Address(InetAddresses.forString(\"::\")));\n",
        "540": "    assertTrue(\n",
        "541": "        InetAddresses.forString(\"1.2.3.4\")\n",
        "542": "            != InetAddresses.getCoercedIPv4Address(InetAddresses.forString(\"::1.2.3.4\")));\n",
        "545": "    assertTrue(\n",
        "546": "        InetAddresses.forString(\"1.2.3.4\")\n",
        "547": "            != InetAddresses.getCoercedIPv4Address(InetAddresses.forString(\"2002:0102:0304::1\")));\n",
        "551": "    assertTrue(\n",
        "552": "        InetAddresses.getCoercedIPv4Address(InetAddresses.forString(\"2002:0102:0304::1\"))\n",
        "553": "            != InetAddresses.getCoercedIPv4Address(InetAddresses.forString(\"2002:0506:0708::1\")));\n",
        "557": "    assertTrue(\n",
        "558": "        InetAddresses.getCoercedIPv4Address(InetAddresses.forString(\"2002:0102:0304::1\"))\n",
        "559": "            != InetAddresses.getCoercedIPv4Address(InetAddresses.forString(\"2002:0102:0304::2\")));\n",
        "562": "    assertTrue(\n",
        "563": "        InetAddresses.forString(\"192.0.2.45\")\n",
        "564": "            != InetAddresses.getCoercedIPv4Address(\n",
        "565": "                InetAddresses.forString(\"2001:0000:4136:e378:8000:63bf:3fff:fdd2\")));\n",
        "569": "    assertTrue(\n",
        "570": "        InetAddresses.getCoercedIPv4Address(\n",
        "571": "                InetAddresses.forString(\"2001:0000:4136:e378:8000:63bf:3fff:fdd2\"))\n",
        "572": "            != InetAddresses.getCoercedIPv4Address(\n",
        "573": "                InetAddresses.forString(\"2001:0000:4136:e379:8000:63bf:3fff:fdd2\")));\n",
        "577": "    assertEquals(\n",
        "578": "        InetAddresses.getCoercedIPv4Address(\n",
        "579": "            InetAddresses.forString(\"2001:0000:4136:e378:8000:63bf:3fff:fdd2\")),\n",
        "580": "        InetAddresses.getCoercedIPv4Address(\n",
        "581": "            InetAddresses.forString(\"2001:0000:4136:e378:9000:63bf:3fff:fdd2\")));\n",
        "584": "    InetAddress coerced =\n",
        "585": "        InetAddresses.getCoercedIPv4Address(InetAddresses.forString(\"2001:4860::1\"));\n",
        "596": "    assertEquals(InetAddresses.fromInteger(0x7f000001), InetAddresses.forString(\"127.0.0.1\"));\n",
        "651": "    } catch (IllegalArgumentException expected) {\n",
        "652": "    }\n",
        "669": "    InetAddress addressV6_ffffff = InetAddress.getByName(\"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\");\n",
        "674": "    } catch (IllegalArgumentException expected) {\n",
        "675": "    }\n",
        "698": "    } catch (IllegalArgumentException expected) {\n",
        "699": "    }\n",
        "717": "    InetAddress addressV6000000 = InetAddress.getByName(\"0:0:0:0:0:0:0:0\");\n",
        "722": "    } catch (IllegalArgumentException expected) {\n",
        "723": "    }\n"
    },
    "removed": {
        "43": "        \"\",\n",
        "44": "        \"016.016.016.016\",\n",
        "45": "        \"016.016.016\",\n",
        "46": "        \"016.016\",\n",
        "47": "        \"016\",\n",
        "48": "        \"000.000.000.000\",\n",
        "49": "        \"000\",\n",
        "50": "        \"0x0a.0x0a.0x0a.0x0a\",\n",
        "51": "        \"0x0a.0x0a.0x0a\",\n",
        "52": "        \"0x0a.0x0a\",\n",
        "53": "        \"0x0a\",\n",
        "54": "        \"42.42.42.42.42\",\n",
        "55": "        \"42.42.42\",\n",
        "56": "        \"42.42\",\n",
        "57": "        \"42\",\n",
        "58": "        \"42..42.42\",\n",
        "59": "        \"42..42.42.42\",\n",
        "60": "        \"42.42.42.42.\",\n",
        "61": "        \"42.42.42.42...\",\n",
        "62": "        \".42.42.42.42\",\n",
        "63": "        \"...42.42.42.42\",\n",
        "64": "        \"42.42.42.-0\",\n",
        "65": "        \"42.42.42.+0\",\n",
        "66": "        \".\",\n",
        "67": "        \"...\",\n",
        "68": "        \"bogus\",\n",
        "69": "        \"bogus.com\",\n",
        "70": "        \"192.168.0.1.com\",\n",
        "71": "        \"12345.67899.-54321.-98765\",\n",
        "72": "        \"257.0.0.0\",\n",
        "73": "        \"42.42.42.-42\",\n",
        "74": "        \"3ffe::1.net\",\n",
        "75": "        \"3ffe::1::1\",\n",
        "76": "        \"1::2::3::4:5\",\n",
        "77": "        \"::7:6:5:4:3:2:\",  // should end with \":0\"\n",
        "78": "        \":6:5:4:3:2:1::\",  // should begin with \"0:\"\n",
        "79": "        \"2001::db:::1\",\n",
        "80": "        \"FEDC:9878\",\n",
        "81": "        \"+1.+2.+3.4\",\n",
        "82": "        \"1.2.3.4e0\",\n",
        "83": "        \"::7:6:5:4:3:2:1:0\",  // too many parts\n",
        "84": "        \"7:6:5:4:3:2:1:0::\",  // too many parts\n",
        "85": "        \"9:8:7:6:5:4:3::2:1\",  // too many parts\n",
        "86": "        \"0:1:2:3::4:5:6:7\",  // :: must remove at least one 0.\n",
        "87": "        \"3ffe:0:0:0:0:0:0:0:1\",  // too many parts (9 instead of 8)\n",
        "88": "        \"3ffe::10000\",  // hextet exceeds 16 bits\n",
        "89": "        \"3ffe::goog\",\n",
        "90": "        \"3ffe::-0\",\n",
        "91": "        \"3ffe::+0\",\n",
        "92": "        \"3ffe::-1\",\n",
        "93": "        \":\",\n",
        "94": "        \":::\",\n",
        "95": "        \"::1.2.3\",\n",
        "96": "        \"::1.2.3.4.5\",\n",
        "97": "        \"::1.2.3.4:\",\n",
        "98": "        \"1.2.3.4::\",\n",
        "99": "        \"2001:db8::1:\",\n",
        "100": "        \":2001:db8::1\",\n",
        "101": "        \":1:2:3:4:5:6:7\",\n",
        "102": "        \"1:2:3:4:5:6:7:\",\n",
        "103": "        \":1:2:3:4:5:6:\"\n",
        "145": "      \"::7:6:5:4:3:2:1\",\n",
        "146": "      \"::7:6:5:4:3:2:0\",\n",
        "147": "      \"7:6:5:4:3:2:1::\",\n",
        "148": "      \"0:6:5:4:3:2:1::\",\n",
        "161": "    String[] ipStrings = {\"7::0.128.0.127\", \"7::0.128.0.128\",\n",
        "162": "        \"7::128.128.0.127\", \"7::0.128.128.127\"};\n",
        "174": "    assertEquals(\"1.2.3.4\",\n",
        "175": "                 InetAddresses.toAddrString(\n",
        "176": "                     InetAddresses.forString(\"1.2.3.4\")));\n",
        "180": "    assertEquals(\"1:2:3:4:5:6:7:8\",\n",
        "181": "                 InetAddresses.toAddrString(\n",
        "182": "                     InetAddresses.forString(\"1:2:3:4:5:6:7:8\")));\n",
        "183": "    assertEquals(\"2001:0:0:4::8\",\n",
        "184": "                 InetAddresses.toAddrString(\n",
        "185": "                     InetAddresses.forString(\"2001:0:0:4:0:0:0:8\")));\n",
        "186": "    assertEquals(\"2001::4:5:6:7:8\",\n",
        "187": "                 InetAddresses.toAddrString(\n",
        "188": "                     InetAddresses.forString(\"2001:0:0:4:5:6:7:8\")));\n",
        "189": "    assertEquals(\"2001:0:3:4:5:6:7:8\",\n",
        "190": "                 InetAddresses.toAddrString(\n",
        "191": "                     InetAddresses.forString(\"2001:0:3:4:5:6:7:8\")));\n",
        "192": "    assertEquals(\"0:0:3::ffff\",\n",
        "193": "                 InetAddresses.toAddrString(\n",
        "194": "                     InetAddresses.forString(\"0:0:3:0:0:0:0:ffff\")));\n",
        "195": "    assertEquals(\"::4:0:0:0:ffff\",\n",
        "196": "                 InetAddresses.toAddrString(\n",
        "197": "                     InetAddresses.forString(\"0:0:0:4:0:0:0:ffff\")));\n",
        "198": "    assertEquals(\"::5:0:0:ffff\",\n",
        "199": "                 InetAddresses.toAddrString(\n",
        "200": "                     InetAddresses.forString(\"0:0:0:0:5:0:0:ffff\")));\n",
        "201": "    assertEquals(\"1::4:0:0:7:8\",\n",
        "202": "                 InetAddresses.toAddrString(\n",
        "203": "                     InetAddresses.forString(\"1:0:0:4:0:0:7:8\")));\n",
        "204": "    assertEquals(\"::\",\n",
        "205": "                 InetAddresses.toAddrString(\n",
        "206": "                     InetAddresses.forString(\"0:0:0:0:0:0:0:0\")));\n",
        "207": "    assertEquals(\"::1\",\n",
        "208": "                 InetAddresses.toAddrString(\n",
        "209": "                     InetAddresses.forString(\"0:0:0:0:0:0:0:1\")));\n",
        "210": "    assertEquals(\"2001:658:22a:cafe::\",\n",
        "211": "                 InetAddresses.toAddrString(\n",
        "212": "                     InetAddresses.forString(\"2001:0658:022a:cafe::\")));\n",
        "213": "    assertEquals(\"::102:304\",\n",
        "214": "                 InetAddresses.toAddrString(\n",
        "215": "                     InetAddresses.forString(\"::1.2.3.4\")));\n",
        "267": "      fail(\"expected IllegalArgumentException\");  // COV_NF_LINE\n",
        "273": "      fail(\"expected IllegalArgumentException\");  // COV_NF_LINE\n",
        "279": "      fail(\"expected IllegalArgumentException\");  // COV_NF_LINE\n",
        "285": "      fail(\"expected IllegalArgumentException\");  // COV_NF_LINE\n",
        "291": "      fail(\"expected IllegalArgumentException\");  // COV_NF_LINE\n",
        "297": "      fail(\"expected IllegalArgumentException\");  // COV_NF_LINE\n",
        "303": "      fail(\"expected IllegalArgumentException\");  // COV_NF_LINE\n",
        "309": "      fail(\"expected IllegalArgumentException\");  // COV_NF_LINE\n",
        "315": "      fail(\"expected IllegalArgumentException\");  // COV_NF_LINE\n",
        "321": "      fail(\"expected IllegalArgumentException\");  // COV_NF_LINE\n",
        "327": "      fail(\"expected IllegalArgumentException\");  // COV_NF_LINE\n",
        "334": "        \"3ffe::1\",\n",
        "335": "        \"::\",\n",
        "336": "        \"::1\",\n",
        "344": "        fail(\"IllegalArgumentException expected for '\" +\n",
        "345": "             nonCompatAddresses[i] + \"'\");\n",
        "351": "        \"::1.2.3.4\",\n",
        "352": "        \"::102:304\",\n",
        "360": "      assertTrue(\"checking '\" + validCompatAddresses[i] + \"'\",\n",
        "362": "      assertEquals(\"checking '\" + validCompatAddresses[i] + \"'\", compat,\n",
        "363": "                   InetAddresses.getCompatIPv4Address((Inet6Address) ip));\n",
        "409": "        \"::1.2.3.4\",\n",
        "410": "        \"3ffe::1\",\n",
        "411": "        \"::\",\n",
        "412": "        \"::1\",\n",
        "419": "        InetAddresses.get6to4IPv4Address(\n",
        "420": "            (Inet6Address) ip);\n",
        "421": "        fail(\"IllegalArgumentException expected for '\" +\n",
        "422": "             non6to4Addresses[i] + \"'\");\n",
        "438": "        \"::1.2.3.4\",\n",
        "439": "        \"3ffe::1\",\n",
        "440": "        \"::\",\n",
        "441": "        \"::1\",\n",
        "449": "        fail(\"IllegalArgumentException expected for '\" +\n",
        "450": "             nonTeredoAddresses[i] + \"'\");\n",
        "463": "    InetAddresses.TeredoInfo teredo =\n",
        "464": "        InetAddresses.getTeredoInfo((Inet6Address) ip);\n",
        "487": "        \"2001:db8::5efe:102:304\",\n",
        "488": "        \"2001:db8::100:5efe:102:304\",  // Private Multicast? Not likely.\n",
        "489": "        \"2001:db8::200:5efe:102:304\",\n",
        "490": "        \"2001:db8::300:5efe:102:304\"   // Public Multicast? Also unlikely.\n",
        "493": "        \"::1.2.3.4\",\n",
        "494": "        \"3ffe::1\",\n",
        "495": "        \"::\",\n",
        "496": "        \"::1\",\n",
        "497": "        \"2001:db8::0040:5efe:102:304\",\n",
        "498": "        \"2001:db8::5ffe:102:304\",\n",
        "499": "        \"2001:db8::5eff:102:304\",\n",
        "500": "        \"2001:0:102:203:200:5efe:506:708\",  // Teredo address; not ISATAP\n",
        "506": "      assertEquals(\"checking '\" + validIsatapAddresses[i] + \"'\", ipv4,\n",
        "507": "                   InetAddresses.getIsatapIPv4Address((Inet6Address) ip));\n",
        "514": "        fail(\"IllegalArgumentException expected for '\" +\n",
        "515": "             nonIsatapAddresses[i] + \"'\");\n",
        "545": "    testIp = (Inet6Address) InetAddresses.forString(\n",
        "546": "        \"2001:0000:4136:e378:8000:63bf:3fff:fdd2\");\n",
        "555": "    assertEquals(localHost4,\n",
        "556": "                 InetAddresses.getCoercedIPv4Address(localHost4));\n",
        "559": "    assertEquals(localHost4,\n",
        "560": "                 InetAddresses.getCoercedIPv4Address(\n",
        "561": "                     InetAddresses.forString(\"::1\")));\n",
        "564": "    assertEquals(InetAddresses.forString(\"0.0.0.0\"),\n",
        "565": "                 InetAddresses.getCoercedIPv4Address(\n",
        "566": "                     InetAddresses.forString(\"::\")));\n",
        "569": "    assertTrue(InetAddresses.forString(\"1.2.3.4\") !=\n",
        "570": "               InetAddresses.getCoercedIPv4Address(\n",
        "571": "                   InetAddresses.forString(\"::1.2.3.4\")));\n",
        "574": "    assertTrue(InetAddresses.forString(\"1.2.3.4\") !=\n",
        "575": "               InetAddresses.getCoercedIPv4Address(\n",
        "576": "                   InetAddresses.forString(\"2002:0102:0304::1\")));\n",
        "580": "    assertTrue(InetAddresses.getCoercedIPv4Address(\n",
        "581": "                   InetAddresses.forString(\"2002:0102:0304::1\")) !=\n",
        "582": "               InetAddresses.getCoercedIPv4Address(\n",
        "583": "                   InetAddresses.forString(\"2002:0506:0708::1\")));\n",
        "587": "    assertTrue(InetAddresses.getCoercedIPv4Address(\n",
        "588": "                   InetAddresses.forString(\"2002:0102:0304::1\")) !=\n",
        "589": "               InetAddresses.getCoercedIPv4Address(\n",
        "590": "                   InetAddresses.forString(\"2002:0102:0304::2\")));\n",
        "593": "    assertTrue(InetAddresses.forString(\"192.0.2.45\") !=\n",
        "594": "               InetAddresses.getCoercedIPv4Address(\n",
        "595": "                   InetAddresses.forString(\n",
        "596": "                       \"2001:0000:4136:e378:8000:63bf:3fff:fdd2\")));\n",
        "600": "    assertTrue(InetAddresses.getCoercedIPv4Address(\n",
        "601": "                   InetAddresses.forString(\n",
        "602": "                       \"2001:0000:4136:e378:8000:63bf:3fff:fdd2\")) !=\n",
        "603": "               InetAddresses.getCoercedIPv4Address(\n",
        "604": "                   InetAddresses.forString(\n",
        "605": "                       \"2001:0000:4136:e379:8000:63bf:3fff:fdd2\")));\n",
        "609": "    assertEquals(InetAddresses.getCoercedIPv4Address(\n",
        "610": "                     InetAddresses.forString(\n",
        "611": "                         \"2001:0000:4136:e378:8000:63bf:3fff:fdd2\")),\n",
        "612": "                 InetAddresses.getCoercedIPv4Address(\n",
        "613": "                     InetAddresses.forString(\n",
        "614": "                         \"2001:0000:4136:e378:9000:63bf:3fff:fdd2\")));\n",
        "617": "    InetAddress coerced = InetAddresses.getCoercedIPv4Address(\n",
        "618": "                              InetAddresses.forString(\"2001:4860::1\"));\n",
        "629": "    assertEquals(InetAddresses.fromInteger(0x7f000001),\n",
        "630": "                 InetAddresses.forString(\"127.0.0.1\"));\n",
        "685": "    } catch (IllegalArgumentException expected) {}\n",
        "702": "    InetAddress addressV6_ffffff =\n",
        "703": "        InetAddress.getByName(\"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\");\n",
        "708": "    } catch (IllegalArgumentException expected) {}\n",
        "731": "    } catch (IllegalArgumentException expected) {}\n",
        "749": "    InetAddress addressV6000000 =\n",
        "750": "        InetAddress.getByName(\"0:0:0:0:0:0:0:0\");\n",
        "755": "    } catch (IllegalArgumentException expected) {}\n"
    }
}