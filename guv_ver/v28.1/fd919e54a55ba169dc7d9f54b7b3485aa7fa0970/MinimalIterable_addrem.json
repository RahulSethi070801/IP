{
    "addition": {
        "25": " * An implementation of {@code Iterable} which throws an exception on all invocations of the {@link\n",
        "26": " * #iterator()} method after the first, and whose iterator is always unmodifiable.\n",
        "28": " * <p>The {@code Iterable} specification does not make it absolutely clear what should happen on a\n",
        "29": " * second invocation, so implementors have made various choices, including:\n",
        "32": " *   <li>returning the same iterator again\n",
        "33": " *   <li>throwing an exception of some kind\n",
        "34": " *   <li>or the usual, <i>robust</i> behavior, which all known {@link Collection} implementations\n",
        "35": " *       have, of returning a new, independent iterator\n",
        "38": " * <p>Because of this situation, any public method accepting an iterable should invoke the {@code\n",
        "39": " * iterator} method only once, and should be tested using this class. Exceptions to this rule should\n",
        "40": " * be clearly documented.\n",
        "42": " * <p>Note that although your APIs should be liberal in what they accept, your methods which\n",
        "43": " * <i>return</i> iterables should make every attempt to return ones of the robust variety.\n",
        "51": "  /** Returns an iterable whose iterator returns the given elements in order. */\n",
        "58": "   * Returns an iterable whose iterator returns the given elements in order. The elements are copied\n",
        "59": "   * out of the source collection at the time this method is called.\n"
    },
    "removed": {
        "25": " * An implementation of {@code Iterable} which throws an exception on all\n",
        "26": " * invocations of the {@link #iterator()} method after the first, and whose\n",
        "27": " * iterator is always unmodifiable.\n",
        "29": " * <p>The {@code Iterable} specification does not make it absolutely clear what\n",
        "30": " * should happen on a second invocation, so implementors have made various\n",
        "31": " * choices, including:\n",
        "34": " * <li>returning the same iterator again\n",
        "35": " * <li>throwing an exception of some kind\n",
        "36": " * <li>or the usual, <i>robust</i> behavior, which all known {@link Collection}\n",
        "37": " *     implementations have, of returning a new, independent iterator\n",
        "40": " * <p>Because of this situation, any public method accepting an iterable should\n",
        "41": " * invoke the {@code iterator} method only once, and should be tested using this\n",
        "42": " * class. Exceptions to this rule should be clearly documented.\n",
        "44": " * <p>Note that although your APIs should be liberal in what they accept, your\n",
        "45": " * methods which <i>return</i> iterables should make every attempt to return\n",
        "46": " * ones of the robust variety.\n",
        "54": "  /**\n",
        "55": "   * Returns an iterable whose iterator returns the given elements in order.\n",
        "56": "   */\n",
        "63": "   * Returns an iterable whose iterator returns the given elements in order.\n",
        "64": "   * The elements are copied out of the source collection at the time this\n",
        "65": "   * method is called.\n"
    }
}