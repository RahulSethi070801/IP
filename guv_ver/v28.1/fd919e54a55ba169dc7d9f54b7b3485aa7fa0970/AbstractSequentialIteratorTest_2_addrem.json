{
    "addition": {
        "35": "    new IteratorTester<Integer>(\n",
        "36": "        3, UNMODIFIABLE, ImmutableList.of(1, 2), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "45": "    Iterable<Integer> doubled =\n",
        "46": "        new Iterable<Integer>() {\n",
        "47": "          @Override\n",
        "48": "          public Iterator<Integer> iterator() {\n",
        "49": "            return newDoubler(2, 32);\n",
        "50": "          }\n",
        "51": "        };\n",
        "56": "    Iterable<Integer> actual =\n",
        "57": "        new Iterable<Integer>() {\n",
        "58": "          @Override\n",
        "59": "          public Iterator<Integer> iterator() {\n",
        "60": "            Iterator<Integer> powersOfTwo =\n",
        "61": "                new AbstractSequentialIterator<Integer>(1) {\n",
        "62": "                  protected Integer computeNext(Integer previous) {\n",
        "63": "                    return (previous == 1 << 30) ? null : previous * 2;\n",
        "64": "                  }\n",
        "65": "                };\n",
        "66": "            return powersOfTwo;\n",
        "70": "        .containsExactly(\n",
        "71": "            1,\n",
        "72": "            2,\n",
        "73": "            4,\n",
        "74": "            8,\n",
        "75": "            16,\n",
        "76": "            32,\n",
        "77": "            64,\n",
        "78": "            128,\n",
        "79": "            256,\n",
        "80": "            512,\n",
        "81": "            1024,\n",
        "82": "            2048,\n",
        "83": "            4096,\n",
        "84": "            8192,\n",
        "85": "            16384,\n",
        "86": "            32768,\n",
        "87": "            65536,\n",
        "88": "            131072,\n",
        "89": "            262144,\n",
        "90": "            524288,\n",
        "91": "            1048576,\n",
        "92": "            2097152,\n",
        "93": "            4194304,\n",
        "94": "            8388608,\n",
        "95": "            16777216,\n",
        "96": "            33554432,\n",
        "97": "            67108864,\n",
        "98": "            134217728,\n",
        "99": "            268435456,\n",
        "100": "            536870912,\n",
        "101": "            1073741824)\n"
    },
    "removed": {
        "35": "    new IteratorTester<Integer>(3, UNMODIFIABLE, ImmutableList.of(1, 2),\n",
        "36": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "45": "    Iterable<Integer> doubled = new Iterable<Integer>() {\n",
        "46": "      @Override\n",
        "47": "      public Iterator<Integer> iterator() {\n",
        "48": "        return newDoubler(2, 32);\n",
        "49": "      }\n",
        "50": "    };\n",
        "55": "    Iterable<Integer> actual = new Iterable<Integer>() {\n",
        "56": "      @Override\n",
        "57": "      public Iterator<Integer> iterator() {\n",
        "58": "        Iterator<Integer> powersOfTwo = new AbstractSequentialIterator<Integer>(1) {\n",
        "59": "          protected Integer computeNext(Integer previous) {\n",
        "60": "            return (previous == 1 << 30) ? null : previous * 2;\n",
        "63": "        return powersOfTwo;\n",
        "64": "      }\n",
        "65": "    };\n",
        "67": "        .containsExactly(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384,\n",
        "68": "            32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216,\n",
        "69": "            33554432, 67108864, 134217728, 268435456, 536870912, 1073741824)\n"
    }
}