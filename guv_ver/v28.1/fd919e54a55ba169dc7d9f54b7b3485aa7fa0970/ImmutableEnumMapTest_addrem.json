{
    "addition": {
        "59": "    suite.addTest(\n",
        "60": "        MapTestSuiteBuilder.using(new ImmutableEnumMapGenerator())\n",
        "61": "            .named(\"Maps.immutableEnumMap\")\n",
        "62": "            .withFeatures(CollectionSize.ANY, SERIALIZABLE, ALLOWS_NULL_QUERIES)\n",
        "63": "            .createTestSuite());\n",
        "69": "    Map<AnEnum, AnEnum> map =\n",
        "70": "        Maps.asMap(\n",
        "71": "            ImmutableSet.of(AnEnum.A),\n",
        "72": "            new Function<AnEnum, AnEnum>() {\n",
        "73": "              boolean used = false;\n",
        "75": "              @Override\n",
        "76": "              public AnEnum apply(AnEnum ae) {\n",
        "77": "                checkState(!used, \"should not be applied more than once\");\n",
        "78": "                used = true;\n",
        "79": "                return ae;\n",
        "80": "              }\n",
        "81": "            });\n",
        "92": "    ImmutableMap<AnEnum, String> map =\n",
        "93": "        Maps.immutableEnumMap(ImmutableMap.of(AnEnum.C, \"c\", AnEnum.A, \"a\", AnEnum.E, \"e\"));\n",
        "95": "    assertThat(map.entrySet())\n",
        "96": "        .containsExactly(\n",
        "97": "            Helpers.mapEntry(AnEnum.A, \"a\"),\n",
        "98": "            Helpers.mapEntry(AnEnum.C, \"c\"),\n",
        "99": "            Helpers.mapEntry(AnEnum.E, \"e\"))\n",
        "100": "        .inOrder();\n"
    },
    "removed": {
        "20": "import static com.google.common.collect.testing.Helpers.mapEntry;\n",
        "60": "    suite.addTest(MapTestSuiteBuilder.using(new ImmutableEnumMapGenerator())\n",
        "61": "      .named(\"Maps.immutableEnumMap\")\n",
        "62": "      .withFeatures(CollectionSize.ANY,\n",
        "63": "          SERIALIZABLE,\n",
        "64": "          ALLOWS_NULL_QUERIES)\n",
        "65": "      .createTestSuite());\n",
        "71": "    Map<AnEnum, AnEnum> map = Maps.asMap(ImmutableSet.of(AnEnum.A), new Function<AnEnum, AnEnum>() {\n",
        "72": "      boolean used = false;\n",
        "74": "      @Override public AnEnum apply(AnEnum ae) {\n",
        "75": "        checkState(!used, \"should not be applied more than once\");\n",
        "76": "        used = true;\n",
        "77": "        return ae;\n",
        "78": "      }\n",
        "79": "    });\n",
        "90": "    ImmutableMap<AnEnum, String> map = Maps.immutableEnumMap(\n",
        "91": "        ImmutableMap.of(AnEnum.C, \"c\", AnEnum.A, \"a\", AnEnum.E, \"e\"));\n",
        "93": "    assertThat(map.entrySet()).containsExactly(\n",
        "94": "        Helpers.mapEntry(AnEnum.A, \"a\"),\n",
        "95": "        Helpers.mapEntry(AnEnum.C, \"c\"),\n",
        "96": "        Helpers.mapEntry(AnEnum.E, \"e\")).inOrder();\n"
    }
}