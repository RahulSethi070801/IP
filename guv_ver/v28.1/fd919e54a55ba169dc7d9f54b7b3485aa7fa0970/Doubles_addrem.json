{
    "addition": {
        "44": " * <p>See the Guava User Guide article on <a\n",
        "45": " * href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n",
        "64": "   * Returns a hash code for {@code value}; equal to the result of invoking {@code ((Double)\n",
        "65": "   * value).hashCode()}.\n",
        "115": "   * @return {@code true} if {@code array[i] == target} for some value of {@code i}\n",
        "150": "   * Returns the start position of the first occurrence of the specified {@code target} within\n",
        "151": "   * {@code array}, or {@code -1} if there is no such occurrence.\n",
        "153": "   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,\n",
        "154": "   * i, i + target.length)} contains exactly the same elements as {@code target}.\n",
        "204": "   * Returns the least value present in {@code array}, using the same rules of comparison as {@link\n",
        "205": "   * Math#min(double, double)}.\n",
        "243": "   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code\n",
        "244": "   * value} is greater than {@code max}, {@code max} is returned.\n",
        "259": "   * Returns the values from each provided array combined into a single array. For example, {@code\n",
        "260": "   * concat(new double[] {a, b}, new double[] {}, new double[] {c}} returns the array {@code {a, b,\n",
        "261": "   * c}}.\n",
        "307": "   * Returns a serializable converter object that converts between strings and doubles using {@link\n",
        "308": "   * Double#valueOf} and {@link Double#toString()}.\n",
        "327": "   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code\n",
        "328": "   *     minLength}\n",
        "371": "   * support only identity equality), but it is consistent with {@link Arrays#equals(double[],\n",
        "372": "   * double[])}.\n",
        "465": "   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.\n",
        "466": "   * Calling this method is as thread-safe as calling that method.\n",
        "667": "   * throwing an exception if parsing fails. Valid inputs are exactly those accepted by {@link\n",
        "668": "   * Double#valueOf(String)}, except that leading and trailing whitespace is not permitted.\n",
        "670": "   * <p>This implementation is likely to be faster than {@code Double.parseDouble} if many failures\n",
        "671": "   * are expected.\n",
        "674": "   * @return the floating point value represented by {@code string}, or {@code null} if {@code\n",
        "675": "   *     string} has a length of zero or cannot be parsed as a {@code double} value\n"
    },
    "removed": {
        "44": " * <p>See the Guava User Guide article on\n",
        "45": " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n",
        "64": "   * Returns a hash code for {@code value}; equal to the result of invoking\n",
        "65": "   * {@code ((Double) value).hashCode()}.\n",
        "115": "   * @return {@code true} if {@code array[i] == target} for some value of {@code\n",
        "116": "   *     i}\n",
        "151": "   * Returns the start position of the first occurrence of the specified {@code\n",
        "152": "   * target} within {@code array}, or {@code -1} if there is no such occurrence.\n",
        "154": "   * <p>More formally, returns the lowest index {@code i} such that\n",
        "155": "   * {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as\n",
        "156": "   * {@code target}.\n",
        "206": "   * Returns the least value present in {@code array}, using the same rules of comparison as\n",
        "207": "   * {@link Math#min(double, double)}.\n",
        "245": "   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if\n",
        "246": "   * {@code value} is greater than {@code max}, {@code max} is returned.\n",
        "261": "   * Returns the values from each provided array combined into a single array. For example,\n",
        "262": "   * {@code concat(new double[] {a, b}, new double[] {}, new double[] {c}} returns the array\n",
        "263": "   * {@code {a, b, c}}.\n",
        "309": "   * Returns a serializable converter object that converts between strings and doubles using\n",
        "310": "   * {@link Double#valueOf} and {@link Double#toString()}.\n",
        "329": "   * @return an array containing the values of {@code array}, with guaranteed minimum length\n",
        "330": "   *     {@code minLength}\n",
        "373": "   * support only identity equality), but it is consistent with\n",
        "374": "   * {@link Arrays#equals(double[], double[])}.\n",
        "467": "   * <p>Elements are copied from the argument collection as if by {@code\n",
        "468": "   * collection.toArray()}. Calling this method is as thread-safe as calling that method.\n",
        "669": "   * throwing an exception if parsing fails. Valid inputs are exactly those accepted by\n",
        "670": "   * {@link Double#valueOf(String)}, except that leading and trailing whitespace is not permitted.\n",
        "672": "   * <p>This implementation is likely to be faster than {@code\n",
        "673": "   * Double.parseDouble} if many failures are expected.\n",
        "676": "   * @return the floating point value represented by {@code string}, or {@code null} if\n",
        "677": "   *     {@code string} has a length of zero or cannot be parsed as a {@code double} value\n"
    }
}