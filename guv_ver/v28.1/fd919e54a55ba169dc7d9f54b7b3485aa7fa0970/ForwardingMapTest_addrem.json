{
    "addition": {
        "63": "    @Override\n",
        "64": "    protected Map<K, V> delegate() {\n",
        "68": "    @Override\n",
        "69": "    public boolean containsKey(Object key) {\n",
        "73": "    @Override\n",
        "74": "    public boolean containsValue(Object value) {\n",
        "78": "    @Override\n",
        "79": "    public void putAll(Map<? extends K, ? extends V> map) {\n",
        "83": "    @Override\n",
        "84": "    public V remove(Object object) {\n",
        "88": "    @Override\n",
        "89": "    public boolean equals(Object object) {\n",
        "93": "    @Override\n",
        "94": "    public int hashCode() {\n",
        "98": "    @Override\n",
        "99": "    public Set<K> keySet() {\n",
        "103": "    @Override\n",
        "104": "    public Collection<V> values() {\n",
        "108": "    @Override\n",
        "109": "    public String toString() {\n",
        "113": "    @Override\n",
        "114": "    public Set<Entry<K, V>> entrySet() {\n",
        "118": "          return delegate().entrySet().iterator();\n",
        "123": "    @Override\n",
        "124": "    public void clear() {\n",
        "128": "    @Override\n",
        "129": "    public boolean isEmpty() {\n",
        "188": "        .testForwarding(\n",
        "189": "            Map.class,\n",
        "190": "            new Function<Map, Map>() {\n",
        "191": "              @Override\n",
        "192": "              public Map apply(Map delegate) {\n",
        "193": "                return wrap(delegate);\n",
        "194": "              }\n",
        "195": "            });\n",
        "244": "    Map<String, Boolean> forward =\n",
        "245": "        new ForwardingMap<String, Boolean>() {\n",
        "246": "          @Override\n",
        "247": "          protected Map<String, Boolean> delegate() {\n",
        "248": "            return map;\n",
        "249": "          }\n",
        "251": "          @Override\n",
        "252": "          public Set<String> keySet() {\n",
        "253": "            return new StandardKeySet();\n",
        "254": "          }\n",
        "255": "        };\n",
        "272": "    Map<String, Boolean> forward =\n",
        "273": "        new ForwardingMap<String, Boolean>() {\n",
        "274": "          @Override\n",
        "275": "          protected Map<String, Boolean> delegate() {\n",
        "276": "            return map;\n",
        "277": "          }\n",
        "279": "          @Override\n",
        "280": "          public Collection<Boolean> values() {\n",
        "281": "            return new StandardValues();\n",
        "282": "          }\n",
        "283": "        };\n",
        "323": "      @Override\n",
        "324": "      protected Map<K, V> delegate() {\n",
        "340": "      return Reflection.newProxy(\n",
        "341": "          returnType,\n",
        "342": "          new AbstractInvocationHandler() {\n",
        "343": "            @Override\n",
        "344": "            public Object handleInvocation(Object proxy, Method method, Object[] args) {\n",
        "345": "              // Crude, but acceptable until we can use Java 8.  Other\n",
        "346": "              // methods have default implementations, and it is hard to\n",
        "347": "              // distinguish.\n",
        "348": "              if (\"test\".equals(method.getName()) || \"accept\".equals(method.getName())) {\n",
        "349": "                return getDefaultValue(method.getReturnType());\n",
        "350": "              }\n",
        "351": "              throw new IllegalStateException(\"Unexpected \" + method + \" invoked on \" + proxy);\n",
        "352": "            }\n",
        "353": "          });\n",
        "381": "        throw new InvocationTargetException(\n",
        "382": "            cause, method + \" with args: \" + Arrays.toString(parameters));\n"
    },
    "removed": {
        "63": "    @Override protected Map<K, V> delegate() {\n",
        "67": "    @Override public boolean containsKey(Object key) {\n",
        "71": "    @Override public boolean containsValue(Object value) {\n",
        "75": "    @Override public void putAll(Map<? extends K, ? extends V> map) {\n",
        "79": "    @Override public V remove(Object object) {\n",
        "83": "    @Override public boolean equals(Object object) {\n",
        "87": "    @Override public int hashCode() {\n",
        "91": "    @Override public Set<K> keySet() {\n",
        "95": "    @Override public Collection<V> values() {\n",
        "99": "    @Override public String toString() {\n",
        "103": "    @Override public Set<Entry<K, V>> entrySet() {\n",
        "107": "          return delegate()\n",
        "108": "              .entrySet()\n",
        "109": "              .iterator();\n",
        "114": "    @Override public void clear() {\n",
        "118": "    @Override public boolean isEmpty() {\n",
        "177": "        .testForwarding(Map.class, new Function<Map, Map>() {\n",
        "178": "          @Override public Map apply(Map delegate) {\n",
        "179": "            return wrap(delegate);\n",
        "180": "          }\n",
        "181": "        });\n",
        "230": "    Map<String, Boolean> forward = new ForwardingMap<String, Boolean>() {\n",
        "231": "      @Override protected Map<String, Boolean> delegate() {\n",
        "232": "        return map;\n",
        "233": "      }\n",
        "235": "      @Override public Set<String> keySet() {\n",
        "236": "        return new StandardKeySet();\n",
        "237": "      }\n",
        "238": "    };\n",
        "255": "    Map<String, Boolean> forward = new ForwardingMap<String, Boolean>() {\n",
        "256": "      @Override protected Map<String, Boolean> delegate() {\n",
        "257": "        return map;\n",
        "258": "      }\n",
        "260": "      @Override public Collection<Boolean> values() {\n",
        "261": "        return new StandardValues();\n",
        "262": "      }\n",
        "263": "    };\n",
        "303": "      @Override protected Map<K, V> delegate() {\n",
        "319": "      return Reflection.newProxy(returnType, new AbstractInvocationHandler() {\n",
        "320": "        @Override public Object handleInvocation(Object proxy, Method method, Object[] args) {\n",
        "321": "          // Crude, but acceptable until we can use Java 8.  Other\n",
        "322": "          // methods have default implementations, and it is hard to\n",
        "323": "          // distinguish.\n",
        "324": "          if (\"test\".equals(method.getName()) || \"accept\".equals(method.getName())) {\n",
        "325": "            return getDefaultValue(method.getReturnType());\n",
        "326": "          }\n",
        "327": "          throw new IllegalStateException(\"Unexpected \" + method + \" invoked on \" + proxy);\n",
        "328": "        }\n",
        "329": "      });\n",
        "357": "        throw new InvocationTargetException(cause,\n",
        "358": "            method + \" with args: \" + Arrays.toString(parameters));\n"
    }
}