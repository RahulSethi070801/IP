{
    "addition": {
        "46": "  static class StandardImplForwardingSortedMap<K, V> extends ForwardingSortedMap<K, V> {\n",
        "53": "    @Override\n",
        "54": "    protected SortedMap<K, V> delegate() {\n",
        "58": "    @Override\n",
        "59": "    public boolean containsKey(Object key) {\n",
        "63": "    @Override\n",
        "64": "    public boolean containsValue(Object value) {\n",
        "68": "    @Override\n",
        "69": "    public void putAll(Map<? extends K, ? extends V> map) {\n",
        "73": "    @Override\n",
        "74": "    public V remove(Object object) {\n",
        "78": "    @Override\n",
        "79": "    public boolean equals(Object object) {\n",
        "83": "    @Override\n",
        "84": "    public int hashCode() {\n",
        "88": "    @Override\n",
        "89": "    public Set<K> keySet() {\n",
        "93": "    @Override\n",
        "94": "    public Collection<V> values() {\n",
        "98": "    @Override\n",
        "99": "    public String toString() {\n",
        "103": "    @Override\n",
        "104": "    public Set<Entry<K, V>> entrySet() {\n",
        "113": "    @Override\n",
        "114": "    public void clear() {\n",
        "118": "    @Override\n",
        "119": "    public boolean isEmpty() {\n",
        "123": "    @Override\n",
        "124": "    public SortedMap<K, V> subMap(K fromKey, K toKey) {\n",
        "207": "        .testForwarding(\n",
        "208": "            SortedMap.class,\n",
        "209": "            new Function<SortedMap, SortedMap>() {\n",
        "210": "              @Override\n",
        "211": "              public SortedMap apply(SortedMap delegate) {\n",
        "212": "                return wrap(delegate);\n",
        "213": "              }\n",
        "214": "            });\n",
        "228": "      @Override\n",
        "229": "      protected SortedMap<K, V> delegate() {\n"
    },
    "removed": {
        "46": "  static class StandardImplForwardingSortedMap<K, V>\n",
        "47": "      extends ForwardingSortedMap<K, V> {\n",
        "54": "    @Override protected SortedMap<K, V> delegate() {\n",
        "58": "    @Override public boolean containsKey(Object key) {\n",
        "62": "    @Override public boolean containsValue(Object value) {\n",
        "66": "    @Override public void putAll(Map<? extends K, ? extends V> map) {\n",
        "70": "    @Override public V remove(Object object) {\n",
        "74": "    @Override public boolean equals(Object object) {\n",
        "78": "    @Override public int hashCode() {\n",
        "82": "    @Override public Set<K> keySet() {\n",
        "86": "    @Override public Collection<V> values() {\n",
        "90": "    @Override public String toString() {\n",
        "94": "    @Override public Set<Entry<K, V>> entrySet() {\n",
        "103": "    @Override public void clear() {\n",
        "107": "    @Override public boolean isEmpty() {\n",
        "111": "    @Override public SortedMap<K, V> subMap(K fromKey, K toKey) {\n",
        "194": "        .testForwarding(SortedMap.class, new Function<SortedMap, SortedMap>() {\n",
        "195": "          @Override public SortedMap apply(SortedMap delegate) {\n",
        "196": "            return wrap(delegate);\n",
        "197": "          }\n",
        "198": "        });\n",
        "212": "      @Override protected SortedMap<K, V> delegate() {\n"
    }
}