{
    "addition": {
        "38": " * consecutively when iterating. Elements iterate in order by the <i>first</i> appearance of that\n",
        "39": " * element when the multiset was created.\n",
        "42": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\"> immutable collections</a>.\n",
        "52": "  /** Returns the empty immutable multiset. */\n",
        "210": "  @LazyInit private transient ImmutableList<E> asList;\n",
        "304": "  @LazyInit private transient ImmutableSet<Entry<E>> entrySet;\n",
        "410": "   * Returns a new builder. The generated builder is equivalent to the builder created by the {@link\n",
        "411": "   * Builder} constructor.\n",
        "418": "   * A builder for creating immutable multiset instances, especially {@code public static final}\n",
        "419": "   * multisets (\"constant multisets\"). Example:\n",
        "421": "   * <pre>{@code\n",
        "422": "   * public static final ImmutableMultiset<Bean> BEANS =\n",
        "423": "   *     new ImmutableMultiset.Builder<Bean>()\n",
        "424": "   *         .addCopies(Bean.COCOA, 4)\n",
        "425": "   *         .addCopies(Bean.GARDEN, 6)\n",
        "426": "   *         .addCopies(Bean.RED, 8)\n",
        "427": "   *         .addCopies(Bean.BLACK_EYED, 10)\n",
        "428": "   *         .build();\n",
        "429": "   * }</pre>\n",
        "431": "   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build\n",
        "432": "   * multiple multisets in series.\n",
        "440": "     * If build() has been called on the current contents multiset, we need to copy it on any future\n",
        "441": "     * modifications, or we'll modify the already-built ImmutableMultiset.\n",
        "446": "     * insertion order property of ObjectCountHashMap. In that event, we need to convert to a\n",
        "452": "     * Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n",
        "453": "     * ImmutableMultiset#builder}.\n",
        "482": "     * Adds a number of occurrences of an element to this {@code ImmutableMultiset}.\n",
        "485": "     * @param occurrences the number of occurrences of the element to add. May be zero, in which\n",
        "486": "     *     case no change will be made.\n",
        "489": "     * @throws IllegalArgumentException if {@code occurrences} is negative, or if this operation\n",
        "490": "     *     would result in more than {@link Integer#MAX_VALUE} occurrences of the element\n",
        "508": "     * Adds or removes the necessary occurrences of an element such that the element attains the\n",
        "509": "     * desired count.\n",
        "543": "     * @throws NullPointerException if {@code elements} is null or contains a null element\n",
        "555": "     * @param elements the {@code Iterable} to add to the {@code ImmutableMultiset}\n",
        "557": "     * @throws NullPointerException if {@code elements} is null or contains a null element\n",
        "578": "     * @throws NullPointerException if {@code elements} is null or contains a null element\n",
        "588": "     * Returns a newly-created {@code ImmutableMultiset} based on the contents of the {@code\n",
        "589": "     * Builder}.\n"
    },
    "removed": {
        "38": " * consecutively when iterating. Elements iterate in order by the <i>first</i> appearance of\n",
        "39": " * that element when the multiset was created.\n",
        "42": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\">\n",
        "43": " * immutable collections</a>.\n",
        "53": "  /**\n",
        "54": "   * Returns the empty immutable multiset.\n",
        "55": "   */\n",
        "213": "  @LazyInit\n",
        "214": "  private transient ImmutableList<E> asList;\n",
        "308": "  @LazyInit\n",
        "309": "  private transient ImmutableSet<Entry<E>> entrySet;\n",
        "415": "   * Returns a new builder. The generated builder is equivalent to the builder\n",
        "416": "   * created by the {@link Builder} constructor.\n",
        "423": "   * A builder for creating immutable multiset instances, especially {@code\n",
        "424": "   * public static final} multisets (\"constant multisets\"). Example:\n",
        "425": "   * <pre> {@code\n",
        "427": "   *   public static final ImmutableMultiset<Bean> BEANS =\n",
        "428": "   *       new ImmutableMultiset.Builder<Bean>()\n",
        "429": "   *           .addCopies(Bean.COCOA, 4)\n",
        "430": "   *           .addCopies(Bean.GARDEN, 6)\n",
        "431": "   *           .addCopies(Bean.RED, 8)\n",
        "432": "   *           .addCopies(Bean.BLACK_EYED, 10)\n",
        "433": "   *           .build();}</pre>\n",
        "435": "   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple\n",
        "436": "   * times to build multiple multisets in series.\n",
        "444": "     * If build() has been called on the current contents multiset, we need to copy it on any\n",
        "445": "     * future modifications, or we'll modify the already-built ImmutableMultiset.\n",
        "450": "     * insertion order property of ObjectCountHashMap.  In that event, we need to convert to a\n",
        "456": "     * Creates a new builder. The returned builder is equivalent to the builder\n",
        "457": "     * generated by {@link ImmutableMultiset#builder}.\n",
        "486": "     * Adds a number of occurrences of an element to this {@code\n",
        "487": "     * ImmutableMultiset}.\n",
        "490": "     * @param occurrences the number of occurrences of the element to add. May\n",
        "491": "     *     be zero, in which case no change will be made.\n",
        "494": "     * @throws IllegalArgumentException if {@code occurrences} is negative, or\n",
        "495": "     *     if this operation would result in more than {@link Integer#MAX_VALUE}\n",
        "496": "     *     occurrences of the element\n",
        "514": "     * Adds or removes the necessary occurrences of an element such that the\n",
        "515": "     * element attains the desired count.\n",
        "549": "     * @throws NullPointerException if {@code elements} is null or contains a\n",
        "550": "     *     null element\n",
        "562": "     * @param elements the {@code Iterable} to add to the {@code\n",
        "563": "     *     ImmutableMultiset}\n",
        "565": "     * @throws NullPointerException if {@code elements} is null or contains a\n",
        "566": "     *     null element\n",
        "587": "     * @throws NullPointerException if {@code elements} is null or contains a\n",
        "588": "     *     null element\n",
        "598": "     * Returns a newly-created {@code ImmutableMultiset} based on the contents\n",
        "599": "     * of the {@code Builder}.\n"
    }
}