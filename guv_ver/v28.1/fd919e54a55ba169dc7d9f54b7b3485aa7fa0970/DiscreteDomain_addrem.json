{
    "addition": {
        "30": " * A descriptor for a <i>discrete</i> {@code Comparable} domain such as all {@link Integer}\n",
        "31": " * instances. A discrete domain is one that supports the three basic operations: {@link #next},\n",
        "32": " * {@link #previous} and {@link #distance}, according to their specifications. The methods {@link\n",
        "33": " * #minValue} and {@link #maxValue} should also be overridden for bounded types.\n",
        "35": " * <p>A discrete domain always represents the <i>entire</i> set of values of its type; it cannot\n",
        "36": " * represent partial domains such as \"prime integers\" or \"strings of length 5.\"\n",
        "39": " * \"https://github.com/google/guava/wiki/RangesExplained#discrete-domains\"> {@code\n",
        "40": " * DiscreteDomain}</a>.\n",
        "247": "   * Returns, conceptually, \"origin + distance\", or equivalently, the result of calling {@link\n",
        "248": "   * #next} on {@code origin} {@code distance} times.\n",
        "259": "   * Returns the unique least value of type {@code C} that is greater than {@code value}, or {@code\n",
        "260": "   * null} if none exists. Inverse operation to {@link #previous}.\n",
        "263": "   * @return the least value greater than {@code value}, or {@code null} if {@code value} is {@code\n",
        "264": "   *     maxValue()}\n",
        "269": "   * Returns the unique greatest value of type {@code C} that is less than {@code value}, or {@code\n",
        "270": "   * null} if none exists. Inverse operation to {@link #next}.\n",
        "273": "   * @return the greatest value less than {@code value}, or {@code null} if {@code value} is {@code\n",
        "274": "   *     minValue()}\n",
        "279": "   * Returns a signed value indicating how many nested invocations of {@link #next} (if positive) or\n",
        "280": "   * {@link #previous} (if negative) are needed to reach {@code end} starting from {@code start}.\n",
        "281": "   * For example, if {@code end = next(next(next(start)))}, then {@code distance(start, end) == 3}\n",
        "282": "   * and {@code distance(end, start) == -3}. As well, {@code distance(a, a)} is always zero.\n",
        "284": "   * <p>Note that this function is necessarily well-defined for any discrete type.\n",
        "286": "   * @return the distance as described above, or {@link Long#MIN_VALUE} or {@link Long#MAX_VALUE} if\n",
        "287": "   *     the distance is too small or too large, respectively.\n",
        "292": "   * Returns the minimum value of type {@code C}, if it has one. The minimum value is the unique\n",
        "293": "   * value for which {@link Comparable#compareTo(Object)} never returns a positive value for any\n",
        "294": "   * input of type {@code C}.\n",
        "299": "   * @throws NoSuchElementException if the type has no (practical) minimum value; for example,\n",
        "300": "   *     {@link java.math.BigInteger}\n",
        "308": "   * Returns the maximum value of type {@code C}, if it has one. The maximum value is the unique\n",
        "309": "   * value for which {@link Comparable#compareTo(Object)} never returns a negative value for any\n",
        "310": "   * input of type {@code C}.\n",
        "315": "   * @throws NoSuchElementException if the type has no (practical) maximum value; for example,\n",
        "316": "   *     {@link java.math.BigInteger}\n"
    },
    "removed": {
        "30": " * A descriptor for a <i>discrete</i> {@code Comparable} domain such as all\n",
        "31": " * {@link Integer} instances. A discrete domain is one that supports the three basic\n",
        "32": " * operations: {@link #next}, {@link #previous} and {@link #distance}, according\n",
        "33": " * to their specifications. The methods {@link #minValue} and {@link #maxValue}\n",
        "34": " * should also be overridden for bounded types.\n",
        "36": " * <p>A discrete domain always represents the <i>entire</i> set of values of its\n",
        "37": " * type; it cannot represent partial domains such as \"prime integers\" or\n",
        "38": " * \"strings of length 5.\"\n",
        "41": " * \"https://github.com/google/guava/wiki/RangesExplained#discrete-domains\">\n",
        "42": " * {@code DiscreteDomain}</a>.\n",
        "249": "   * Returns, conceptually, \"origin + distance\", or equivalently, the result of calling\n",
        "250": "   * {@link #next} on {@code origin} {@code distance} times.\n",
        "261": "   * Returns the unique least value of type {@code C} that is greater than\n",
        "262": "   * {@code value}, or {@code null} if none exists. Inverse operation to {@link\n",
        "263": "   * #previous}.\n",
        "266": "   * @return the least value greater than {@code value}, or {@code null} if\n",
        "267": "   *     {@code value} is {@code maxValue()}\n",
        "272": "   * Returns the unique greatest value of type {@code C} that is less than\n",
        "273": "   * {@code value}, or {@code null} if none exists. Inverse operation to {@link\n",
        "274": "   * #next}.\n",
        "277": "   * @return the greatest value less than {@code value}, or {@code null} if\n",
        "278": "   *     {@code value} is {@code minValue()}\n",
        "283": "   * Returns a signed value indicating how many nested invocations of {@link\n",
        "284": "   * #next} (if positive) or {@link #previous} (if negative) are needed to reach\n",
        "285": "   * {@code end} starting from {@code start}. For example, if {@code end =\n",
        "286": "   * next(next(next(start)))}, then {@code distance(start, end) == 3} and {@code\n",
        "287": "   * distance(end, start) == -3}. As well, {@code distance(a, a)} is always\n",
        "288": "   * zero.\n",
        "290": "   * <p>Note that this function is necessarily well-defined for any discrete\n",
        "291": "   * type.\n",
        "293": "   * @return the distance as described above, or {@link Long#MIN_VALUE} or\n",
        "294": "   *     {@link Long#MAX_VALUE} if the distance is too small or too large,\n",
        "295": "   *     respectively.\n",
        "300": "   * Returns the minimum value of type {@code C}, if it has one. The minimum\n",
        "301": "   * value is the unique value for which {@link Comparable#compareTo(Object)}\n",
        "302": "   * never returns a positive value for any input of type {@code C}.\n",
        "307": "   * @throws NoSuchElementException if the type has no (practical) minimum\n",
        "308": "   *     value; for example, {@link java.math.BigInteger}\n",
        "316": "   * Returns the maximum value of type {@code C}, if it has one. The maximum\n",
        "317": "   * value is the unique value for which {@link Comparable#compareTo(Object)}\n",
        "318": "   * never returns a negative value for any input of type {@code C}.\n",
        "323": "   * @throws NoSuchElementException if the type has no (practical) maximum\n",
        "324": "   *     value; for example, {@link java.math.BigInteger}\n"
    }
}