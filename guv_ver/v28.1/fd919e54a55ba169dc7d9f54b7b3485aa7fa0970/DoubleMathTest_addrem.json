{
    "addition": {
        "87": "        boolean isInBounds =\n",
        "88": "            expected.compareTo(MAX_INT_AS_BIG_DECIMAL) <= 0\n",
        "89": "                & expected.compareTo(MIN_INT_AS_BIG_DECIMAL) >= 0;\n",
        "106": "        boolean isInBounds =\n",
        "107": "            expected.compareTo(MAX_INT_AS_BIG_DECIMAL) <= 0\n",
        "108": "                & expected.compareTo(MIN_INT_AS_BIG_DECIMAL) >= 0;\n",
        "127": "      boolean isInBounds =\n",
        "128": "          expected.compareTo(MAX_INT_AS_BIG_DECIMAL) <= 0\n",
        "129": "              & expected.compareTo(MIN_INT_AS_BIG_DECIMAL) >= 0;\n",
        "146": "      } catch (ArithmeticException expected) {\n",
        "147": "      }\n",
        "157": "      } catch (ArithmeticException expected) {\n",
        "158": "      }\n",
        "168": "      } catch (ArithmeticException expected) {\n",
        "169": "      }\n",
        "173": "      } catch (ArithmeticException expected) {\n",
        "174": "      }\n",
        "183": "        boolean isInBounds =\n",
        "184": "            expected.compareTo(MAX_LONG_AS_BIG_DECIMAL) <= 0\n",
        "185": "                & expected.compareTo(MIN_LONG_AS_BIG_DECIMAL) >= 0;\n",
        "202": "        boolean isInBounds =\n",
        "203": "            expected.compareTo(MAX_LONG_AS_BIG_DECIMAL) <= 0\n",
        "204": "                & expected.compareTo(MIN_LONG_AS_BIG_DECIMAL) >= 0;\n",
        "221": "      boolean isInBounds =\n",
        "222": "          expected.compareTo(MAX_LONG_AS_BIG_DECIMAL) <= 0\n",
        "223": "              & expected.compareTo(MIN_LONG_AS_BIG_DECIMAL) >= 0;\n",
        "240": "      } catch (ArithmeticException expected) {\n",
        "241": "      }\n",
        "251": "      } catch (ArithmeticException expected) {\n",
        "252": "      }\n",
        "262": "      } catch (ArithmeticException expected) {\n",
        "263": "      }\n",
        "267": "      } catch (ArithmeticException expected) {\n",
        "268": "      }\n",
        "306": "      } catch (ArithmeticException expected) {\n",
        "307": "      }\n",
        "317": "      } catch (ArithmeticException expected) {\n",
        "318": "      }\n",
        "328": "      } catch (ArithmeticException expected) {\n",
        "329": "      }\n",
        "333": "      } catch (ArithmeticException expected) {\n",
        "334": "      }\n",
        "429": "        } catch (IllegalArgumentException expected) {\n",
        "430": "        }\n",
        "442": "        } catch (IllegalArgumentException expected) {\n",
        "443": "        }\n",
        "458": "      boolean expected =\n",
        "459": "          x > 0\n",
        "460": "              && !Double.isInfinite(x)\n",
        "461": "              && !Double.isNaN(x)\n",
        "462": "              && StrictMath.pow(2.0, DoubleMath.log2(x, FLOOR)) == x;\n",
        "533": "    for (double d : Arrays.asList(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NaN)) {\n",
        "557": "      } catch (IllegalArgumentException expected) {\n",
        "558": "      }\n",
        "569": "      Doubles.asList(\n",
        "570": "          -Double.MIN_VALUE,\n",
        "571": "          -Double.MIN_NORMAL,\n",
        "572": "          -1,\n",
        "573": "          -20,\n",
        "574": "          Double.NaN,\n",
        "575": "          Double.NEGATIVE_INFINITY,\n",
        "576": "          -0.001);\n",
        "582": "          assertEquals(Math.abs(a - b) <= tolerance, DoubleMath.fuzzyEquals(a, b, tolerance));\n",
        "636": "          assertEquals(\n",
        "637": "              a == b || (Double.isNaN(a) && Double.isNaN(b)), DoubleMath.fuzzyEquals(a, b, zero));\n",
        "806": "    assertEquals(\n",
        "807": "        -13.75, DoubleMath.mean(ImmutableList.of(11L, -22L, 44L, -88L).iterator()), 1.0e-10);\n"
    },
    "removed": {
        "87": "        boolean isInBounds = expected.compareTo(MAX_INT_AS_BIG_DECIMAL) <= 0\n",
        "88": "            & expected.compareTo(MIN_INT_AS_BIG_DECIMAL) >= 0;\n",
        "105": "        boolean isInBounds = expected.compareTo(MAX_INT_AS_BIG_DECIMAL) <= 0\n",
        "106": "            & expected.compareTo(MIN_INT_AS_BIG_DECIMAL) >= 0;\n",
        "125": "      boolean isInBounds = expected.compareTo(MAX_INT_AS_BIG_DECIMAL) <= 0\n",
        "126": "          & expected.compareTo(MIN_INT_AS_BIG_DECIMAL) >= 0;\n",
        "143": "      } catch (ArithmeticException expected) {}\n",
        "153": "      } catch (ArithmeticException expected) {}\n",
        "163": "      } catch (ArithmeticException expected) {}\n",
        "167": "      } catch (ArithmeticException expected) {}\n",
        "176": "        boolean isInBounds = expected.compareTo(MAX_LONG_AS_BIG_DECIMAL) <= 0\n",
        "177": "            & expected.compareTo(MIN_LONG_AS_BIG_DECIMAL) >= 0;\n",
        "194": "        boolean isInBounds = expected.compareTo(MAX_LONG_AS_BIG_DECIMAL) <= 0\n",
        "195": "            & expected.compareTo(MIN_LONG_AS_BIG_DECIMAL) >= 0;\n",
        "212": "      boolean isInBounds = expected.compareTo(MAX_LONG_AS_BIG_DECIMAL) <= 0\n",
        "213": "          & expected.compareTo(MIN_LONG_AS_BIG_DECIMAL) >= 0;\n",
        "230": "      } catch (ArithmeticException expected) {}\n",
        "240": "      } catch (ArithmeticException expected) {}\n",
        "250": "      } catch (ArithmeticException expected) {}\n",
        "254": "      } catch (ArithmeticException expected) {}\n",
        "292": "      } catch (ArithmeticException expected) {}\n",
        "302": "      } catch (ArithmeticException expected) {}\n",
        "312": "      } catch (ArithmeticException expected) {}\n",
        "316": "      } catch (ArithmeticException expected) {}\n",
        "411": "        } catch (IllegalArgumentException expected) {}\n",
        "423": "        } catch (IllegalArgumentException expected) {}\n",
        "438": "      boolean expected = x > 0 && !Double.isInfinite(x) && !Double.isNaN(x)\n",
        "439": "          && StrictMath.pow(2.0, DoubleMath.log2(x, FLOOR)) == x;\n",
        "510": "    for (double d :\n",
        "511": "        Arrays.asList(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NaN)) {\n",
        "535": "      } catch (IllegalArgumentException expected) {}\n",
        "546": "      Doubles.asList(-Double.MIN_VALUE, -Double.MIN_NORMAL, -1, -20, Double.NaN,\n",
        "547": "          Double.NEGATIVE_INFINITY, -0.001);\n",
        "553": "          assertEquals(\n",
        "554": "              Math.abs(a - b) <= tolerance,\n",
        "555": "              DoubleMath.fuzzyEquals(a, b, tolerance));\n",
        "609": "          assertEquals(a == b || (Double.isNaN(a) && Double.isNaN(b)),\n",
        "610": "              DoubleMath.fuzzyEquals(a, b, zero));\n",
        "779": "    assertEquals(-13.75, DoubleMath.mean(ImmutableList.of(11L, -22L, 44L, -88L).iterator()),\n",
        "780": "        1.0e-10);\n"
    }
}