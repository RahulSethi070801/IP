{
    "addition": {
        "78": "    assertEquals(\n",
        "79": "        ImmutableList.of(1, 2, 3, 4),\n",
        "90": "    assertEquals(ImmutableList.of(1, 2, 3, 4), Lists.newArrayList(FluentIterable.of(1, 2, 3, 4)));\n",
        "94": "    assertEquals(\n",
        "95": "        ImmutableList.of(\"1\", \"2\", \"3\", \"4\"),\n",
        "165": "   * returns a {@link FluentIterable} of elements of an anonymous type whose supertypes are the <a\n",
        "166": "   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.9\">intersection</a> of\n",
        "167": "   * the supertypes of {@code A} and the supertypes of {@code B}.\n",
        "204": "    Iterable<Integer> iterable =\n",
        "205": "        new Iterable<Integer>() {\n",
        "206": "          @Override\n",
        "207": "          public Iterator<Integer> iterator() {\n",
        "208": "            return asList(0, 1).iterator();\n",
        "209": "          }\n",
        "210": "        };\n",
        "216": "    List<Integer> collection =\n",
        "217": "        new ArrayList<Integer>(nums) {\n",
        "218": "          @Override\n",
        "219": "          public Iterator<Integer> iterator() {\n",
        "220": "            throw new AssertionFailedError(\"Don't iterate me!\");\n",
        "221": "          }\n",
        "222": "        };\n",
        "267": "    assertEquals(\"[yam, bam, jam, ham]\", FluentIterable.of(\"yam\", \"bam\", \"jam\", \"ham\").toString());\n",
        "274": "    assertEquals(\n",
        "275": "        \"[yam, bam, jam, ham]\", FluentIterable.from(asList(\"yam\", \"bam\", \"jam\", \"ham\")).toString());\n",
        "418": "    Iterable<Integer> iterable = FluentIterable.from(input).transform(new IntegerValueOfFunction());\n",
        "427": "    Iterable<Integer> iterable = FluentIterable.from(input).transform(new IntegerValueOfFunction());\n",
        "564": "    assertEquals(\n",
        "565": "        Lists.newArrayList(\"c\", \"d\", \"e\"), Lists.newArrayList(FluentIterable.from(set).skip(2)));\n",
        "571": "    assertEquals(\n",
        "572": "        Lists.newArrayList(\"c\", \"d\", \"e\"), Lists.newArrayList(FluentIterable.from(list).skip(2)));\n",
        "588": "    assertEquals(\n",
        "589": "        Lists.newArrayList(\"a\", \"b\"), Lists.newArrayList(FluentIterable.from(set).skip(0)));\n",
        "594": "    assertEquals(\n",
        "595": "        Lists.newArrayList(\"a\", \"b\"), Lists.newArrayList(FluentIterable.from(list).skip(0)));\n",
        "599": "    new IteratorTester<Integer>(\n",
        "600": "        5,\n",
        "601": "        IteratorFeature.MODIFIABLE,\n",
        "602": "        Lists.newArrayList(2, 3),\n",
        "604": "      @Override\n",
        "605": "      protected Iterator<Integer> newTargetIterator() {\n",
        "614": "    new IteratorTester<Integer>(\n",
        "615": "        5,\n",
        "616": "        IteratorFeature.MODIFIABLE,\n",
        "617": "        Lists.newArrayList(2, 3),\n",
        "619": "      @Override\n",
        "620": "      protected Iterator<Integer> newTargetIterator() {\n",
        "709": "    assertEquals(\n",
        "710": "        Lists.newArrayList(4, 3, 2, 1),\n",
        "715": "    assertEquals(\n",
        "716": "        Lists.newArrayList(4, 3, 1, 1),\n",
        "734": "        .containsExactly(4, 3, 2, 1)\n",
        "735": "        .inOrder();\n",
        "740": "        .containsExactly(4, 3, 1)\n",
        "741": "        .inOrder();\n",
        "755": "            Maps.immutableEntry(1, \"1\"), Maps.immutableEntry(2, \"2\"), Maps.immutableEntry(3, \"3\"))\n",
        "756": "        .inOrder();\n",
        "783": "        FluentIterable.from(asList(\"one\", \"two\", \"three\", \"four\"))\n",
        "784": "            .index(\n",
        "785": "                new Function<String, Integer>() {\n",
        "786": "                  @Override\n",
        "787": "                  public Integer apply(String input) {\n",
        "788": "                    return input.length();\n",
        "789": "                  }\n",
        "790": "                });\n",
        "813": "    ImmutableMap<Integer, String> expected = ImmutableMap.of(3, \"two\", 5, \"three\", 4, \"four\");\n",
        "815": "        FluentIterable.from(asList(\"two\", \"three\", \"four\"))\n",
        "816": "            .uniqueIndex(\n",
        "817": "                new Function<String, Integer>() {\n",
        "818": "                  @Override\n",
        "819": "                  public Integer apply(String input) {\n",
        "820": "                    return input.length();\n",
        "821": "                  }\n",
        "822": "                });\n",
        "868": "        .containsExactly(1, 2, 1, 3, 5)\n",
        "869": "        .inOrder();\n",
        "873": "    assertThat(fluent(1, 3, 5).copyInto(Sets.newHashSet(1, 2))).containsExactly(1, 2, 3, 5);\n",
        "877": "    assertThat(fluent(1, 3, 5).copyInto(Sets.newHashSet(1, 2, 3, 5))).containsExactly(1, 2, 3, 5);\n",
        "884": "    Iterable<Integer> iterable =\n",
        "885": "        new Iterable<Integer>() {\n",
        "886": "          @Override\n",
        "887": "          public Iterator<Integer> iterator() {\n",
        "888": "            return iterList.iterator();\n",
        "889": "          }\n",
        "890": "        };\n",
        "893": "        .containsExactly(1, 2, 3, 9, 8, 7)\n",
        "894": "        .inOrder();\n",
        "906": "    assertEquals(\"a\", FluentIterable.from(Lists.newArrayList(\"a\", \"b\", \"c\")).get(0));\n",
        "907": "    assertEquals(\"b\", FluentIterable.from(Lists.newArrayList(\"a\", \"b\", \"c\")).get(1));\n",
        "908": "    assertEquals(\"c\", FluentIterable.from(Lists.newArrayList(\"a\", \"b\", \"c\")).get(2));\n"
    },
    "removed": {
        "78": "    assertEquals(ImmutableList.of(1, 2, 3, 4),\n",
        "89": "    assertEquals(ImmutableList.of(1, 2, 3, 4),\n",
        "90": "        Lists.newArrayList(FluentIterable.of(1, 2, 3, 4)));\n",
        "94": "    assertEquals(ImmutableList.of(\"1\", \"2\", \"3\", \"4\"),\n",
        "164": "   * returns a {@link FluentIterable} of elements of an anonymous type whose supertypes are the\n",
        "165": "   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.9\">intersection</a>\n",
        "166": "   * of the supertypes of {@code A} and the supertypes of {@code B}.\n",
        "203": "    Iterable<Integer> iterable = new Iterable<Integer>() {\n",
        "204": "      @Override\n",
        "205": "      public Iterator<Integer> iterator() {\n",
        "206": "        return asList(0, 1).iterator();\n",
        "207": "      }\n",
        "208": "    };\n",
        "214": "    List<Integer> collection = new ArrayList<Integer>(nums) {\n",
        "215": "      @Override public Iterator<Integer> iterator() {\n",
        "216": "        throw new AssertionFailedError(\"Don't iterate me!\");\n",
        "217": "      }\n",
        "218": "    };\n",
        "263": "    assertEquals(\"[yam, bam, jam, ham]\",\n",
        "264": "        FluentIterable.of(\"yam\", \"bam\", \"jam\", \"ham\").toString());\n",
        "271": "    assertEquals(\"[yam, bam, jam, ham]\",\n",
        "272": "        FluentIterable.from(asList(\"yam\", \"bam\", \"jam\", \"ham\")).toString());\n",
        "413": "    Iterable<Integer> iterable =\n",
        "414": "        FluentIterable.from(input).transform(new IntegerValueOfFunction());\n",
        "423": "    Iterable<Integer> iterable =\n",
        "424": "        FluentIterable.from(input).transform(new IntegerValueOfFunction());\n",
        "561": "    assertEquals(Lists.newArrayList(\"c\", \"d\", \"e\"),\n",
        "562": "        Lists.newArrayList(FluentIterable.from(set).skip(2)));\n",
        "568": "    assertEquals(Lists.newArrayList(\"c\", \"d\", \"e\"),\n",
        "569": "        Lists.newArrayList(FluentIterable.from(list).skip(2)));\n",
        "585": "    assertEquals(Lists.newArrayList(\"a\", \"b\"),\n",
        "586": "        Lists.newArrayList(FluentIterable.from(set).skip(0)));\n",
        "591": "    assertEquals(Lists.newArrayList(\"a\", \"b\"),\n",
        "592": "        Lists.newArrayList(FluentIterable.from(list).skip(0)));\n",
        "596": "    new IteratorTester<Integer>(5, IteratorFeature.MODIFIABLE, Lists.newArrayList(2, 3),\n",
        "598": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "607": "    new IteratorTester<Integer>(5, IteratorFeature.MODIFIABLE, Lists.newArrayList(2, 3),\n",
        "609": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "698": "    assertEquals(Lists.newArrayList(4, 3, 2, 1),\n",
        "703": "    assertEquals(Lists.newArrayList(4, 3, 1, 1),\n",
        "721": "        .containsExactly(4, 3, 2, 1).inOrder();\n",
        "726": "        .containsExactly(4, 3, 1).inOrder();\n",
        "740": "            Maps.immutableEntry(1, \"1\"),\n",
        "741": "            Maps.immutableEntry(2, \"2\"),\n",
        "742": "            Maps.immutableEntry(3, \"3\")).inOrder();\n",
        "769": "        FluentIterable.from(asList(\"one\", \"two\", \"three\", \"four\")).index(\n",
        "770": "            new Function<String, Integer>() {\n",
        "771": "              @Override\n",
        "772": "              public Integer apply(String input) {\n",
        "773": "                return input.length();\n",
        "774": "              }\n",
        "775": "            });\n",
        "798": "    ImmutableMap<Integer, String> expected =\n",
        "799": "        ImmutableMap.of(3, \"two\", 5, \"three\", 4, \"four\");\n",
        "801": "        FluentIterable.from(asList(\"two\", \"three\", \"four\")).uniqueIndex(\n",
        "802": "            new Function<String, Integer>() {\n",
        "803": "              @Override\n",
        "804": "              public Integer apply(String input) {\n",
        "805": "                return input.length();\n",
        "806": "              }\n",
        "807": "            });\n",
        "853": "        .containsExactly(1, 2, 1, 3, 5).inOrder();\n",
        "857": "    assertThat(fluent(1, 3, 5).copyInto(Sets.newHashSet(1, 2)))\n",
        "858": "        .containsExactly(1, 2, 3, 5);\n",
        "862": "    assertThat(fluent(1, 3, 5).copyInto(Sets.newHashSet(1, 2, 3, 5)))\n",
        "863": "        .containsExactly(1, 2, 3, 5);\n",
        "870": "    Iterable<Integer> iterable = new Iterable<Integer>() {\n",
        "871": "      @Override\n",
        "872": "      public Iterator<Integer> iterator() {\n",
        "873": "        return iterList.iterator();\n",
        "874": "      }\n",
        "875": "    };\n",
        "878": "        .containsExactly(1, 2, 3, 9, 8, 7).inOrder();\n",
        "890": "    assertEquals(\"a\", FluentIterable\n",
        "891": "        .from(Lists.newArrayList(\"a\", \"b\", \"c\")).get(0));\n",
        "892": "    assertEquals(\"b\", FluentIterable\n",
        "893": "        .from(Lists.newArrayList(\"a\", \"b\", \"c\")).get(1));\n",
        "894": "    assertEquals(\"c\", FluentIterable\n",
        "895": "        .from(Lists.newArrayList(\"a\", \"b\", \"c\")).get(2));\n"
    }
}