{
    "addition": {
        "71": "    Iterable<Integer> iterable =\n",
        "72": "        new Iterable<Integer>() {\n",
        "73": "          @Override\n",
        "74": "          public Iterator<Integer> iterator() {\n",
        "75": "            return asList(0, 1).iterator();\n",
        "76": "          }\n",
        "77": "        };\n",
        "84": "    List<Integer> collection =\n",
        "85": "        new ArrayList<Integer>(nums) {\n",
        "86": "          @Override\n",
        "87": "          public Iterator<Integer> iterator() {\n",
        "88": "            throw new AssertionFailedError(\"Don't iterate me!\");\n",
        "89": "          }\n",
        "90": "        };\n",
        "250": "    assertEquals(\"cool\", Iterables.find(list, Predicates.equalTo(\"cool\"), \"woot\"));\n",
        "251": "    assertEquals(\"pants\", Iterables.find(list, Predicates.equalTo(\"pants\"), \"woot\"));\n",
        "252": "    assertEquals(\"woot\", Iterables.find(list, Predicates.alwaysFalse(), \"woot\"));\n",
        "254": "    assertEquals(\"cool\", Iterables.find(list, Predicates.alwaysTrue(), \"woot\"));\n",
        "276": "    Iterable<TypeA> alist = Lists.newArrayList(new TypeA(), new TypeA(), hasBoth, new TypeA());\n",
        "283": "    Iterable<Integer> result =\n",
        "284": "        Iterables.transform(\n",
        "285": "            input,\n",
        "286": "            new Function<String, Integer>() {\n",
        "287": "              @Override\n",
        "288": "              public Integer apply(String from) {\n",
        "289": "                return Integer.valueOf(from);\n",
        "290": "              }\n",
        "291": "            });\n",
        "302": "    Iterable<Integer> result =\n",
        "303": "        Iterables.transform(\n",
        "304": "            input,\n",
        "305": "            new Function<String, Integer>() {\n",
        "306": "              @Override\n",
        "307": "              public Integer apply(String from) {\n",
        "308": "                return Integer.valueOf(from);\n",
        "309": "              }\n",
        "310": "            });\n",
        "324": "    Iterable<String> result =\n",
        "325": "        Iterables.transform(\n",
        "326": "            input,\n",
        "327": "            new Function<Integer, String>() {\n",
        "328": "              @Override\n",
        "329": "              public String apply(Integer from) {\n",
        "330": "                return String.valueOf(from);\n",
        "331": "              }\n",
        "332": "            });\n",
        "390": "    Iterable<Integer> result = Iterables.concat(list1, list2, list3, list4, list5);\n",
        "402": "    } catch (NullPointerException expected) {\n",
        "403": "    }\n",
        "409": "    Iterable<Integer> repeated = Iterables.concat(Collections.nCopies(n, iterable));\n",
        "508": "    assertThat(alreadyThere).containsExactly(\"already\", \"there\", \"freshly\", \"added\").inOrder();\n",
        "513": "    for (@SuppressWarnings(\"unused\") Object obj : iterable) {}\n",
        "574": "    } catch (IllegalArgumentException expected) {\n",
        "575": "    }\n",
        "629": "    } catch (IllegalStateException expected) {\n",
        "630": "    }\n",
        "639": "    } catch (IllegalStateException expected) {\n",
        "640": "    }\n",
        "649": "    } catch (UnsupportedOperationException expected) {\n",
        "650": "    }\n",
        "655": "    new IteratorTester<Integer>(\n",
        "656": "        5, MODIFIABLE, newArrayList(2, 3), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "657": "      @Override\n",
        "658": "      protected Iterator<Integer> newTargetIterator() {\n",
        "666": "    new IteratorTester<Integer>(\n",
        "667": "        5, MODIFIABLE, newArrayList(2, 3), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "668": "      @Override\n",
        "669": "      protected Iterator<Integer> newTargetIterator() {\n",
        "721": "    } catch (IllegalArgumentException expected) {\n",
        "722": "    }\n",
        "729": "    } catch (IndexOutOfBoundsException expected) {\n",
        "730": "    }\n",
        "737": "    } catch (IndexOutOfBoundsException nsee) {\n",
        "738": "    }\n",
        "742": "    } catch (IndexOutOfBoundsException nsee) {\n",
        "743": "    }\n",
        "750": "    } catch (IndexOutOfBoundsException expected) {\n",
        "751": "    }\n",
        "843": "    } catch (NoSuchElementException e) {\n",
        "844": "    }\n",
        "873": "   * {@link ArrayList} extension that forbids the use of {@link Collection#iterator} for tests that\n",
        "874": "   * need to prove that it isn't called.\n",
        "877": "    /** @throws UnsupportedOperationException all the time */\n",
        "897": "    } catch (NoSuchElementException e) {\n",
        "898": "    }\n",
        "911": "    } catch (NoSuchElementException e) {\n",
        "912": "    }\n",
        "923": "    } catch (UnsupportedOperationException expected) {\n",
        "924": "    }\n",
        "936": "    assertSame(immutableList, Iterables.unmodifiableIterable((List<String>) immutableList));\n",
        "940": "    Multiset<String> multiset = ImmutableMultiset.of(\"a\", \"b\", \"a\", \"c\", \"b\", \"a\");\n",
        "979": "    Iterable<String> iterable =\n",
        "980": "        new Iterable<String>() {\n",
        "981": "          @Override\n",
        "982": "          public Iterator<String> iterator() {\n",
        "983": "            return list.iterator();\n",
        "984": "          }\n",
        "985": "        };\n",
        "1002": "    Iterable<String> iterable =\n",
        "1003": "        new Iterable<String>() {\n",
        "1004": "          @Override\n",
        "1005": "          public Iterator<String> iterator() {\n",
        "1006": "            return list.iterator();\n",
        "1007": "          }\n",
        "1008": "        };\n",
        "1017": "    assertTrue(\n",
        "1018": "        Iterables.removeIf(\n",
        "1019": "            list,\n",
        "1020": "            new Predicate<String>() {\n",
        "1021": "              @Override\n",
        "1022": "              public boolean apply(String s) {\n",
        "1023": "                return s.equals(\"b\") || s.equals(\"d\") || s.equals(\"f\");\n",
        "1024": "              }\n",
        "1025": "            }));\n",
        "1027": "    assertFalse(\n",
        "1028": "        Iterables.removeIf(\n",
        "1029": "            list,\n",
        "1030": "            new Predicate<String>() {\n",
        "1031": "              @Override\n",
        "1032": "              public boolean apply(String s) {\n",
        "1033": "                return s.equals(\"x\") || s.equals(\"y\") || s.equals(\"z\");\n",
        "1034": "              }\n",
        "1035": "            }));\n",
        "1045": "    assertTrue(\n",
        "1046": "        Iterables.removeIf(\n",
        "1047": "            uniqueList,\n",
        "1048": "            new Predicate<String>() {\n",
        "1049": "              @Override\n",
        "1050": "              public boolean apply(String s) {\n",
        "1051": "                return s.equals(\"b\") || s.equals(\"d\") || s.equals(\"f\");\n",
        "1052": "              }\n",
        "1053": "            }));\n",
        "1055": "    assertFalse(\n",
        "1056": "        Iterables.removeIf(\n",
        "1057": "            uniqueList,\n",
        "1058": "            new Predicate<String>() {\n",
        "1059": "              @Override\n",
        "1060": "              public boolean apply(String s) {\n",
        "1061": "                return s.equals(\"x\") || s.equals(\"y\") || s.equals(\"z\");\n",
        "1062": "              }\n",
        "1063": "            }));\n",
        "1069": "    List<Integer> transformed =\n",
        "1070": "        Lists.transform(\n",
        "1071": "            list,\n",
        "1072": "            new Function<String, Integer>() {\n",
        "1073": "              @Override\n",
        "1074": "              public Integer apply(String s) {\n",
        "1075": "                return Integer.valueOf(s);\n",
        "1076": "              }\n",
        "1077": "            });\n",
        "1078": "    assertTrue(\n",
        "1079": "        Iterables.removeIf(\n",
        "1080": "            transformed,\n",
        "1081": "            new Predicate<Integer>() {\n",
        "1082": "              @Override\n",
        "1083": "              public boolean apply(Integer n) {\n",
        "1084": "                return (n & 1) == 0; // isEven()\n",
        "1085": "              }\n",
        "1086": "            }));\n",
        "1088": "    assertFalse(\n",
        "1089": "        Iterables.removeIf(\n",
        "1090": "            transformed,\n",
        "1091": "            new Predicate<Integer>() {\n",
        "1092": "              @Override\n",
        "1093": "              public boolean apply(Integer n) {\n",
        "1094": "                return (n & 1) == 0; // isEven()\n",
        "1095": "              }\n",
        "1096": "            }));\n",
        "1102": "    assertTrue(\n",
        "1103": "        Iterables.removeIf(\n",
        "1104": "            list,\n",
        "1105": "            new Predicate<String>() {\n",
        "1106": "              @Override\n",
        "1107": "              public boolean apply(String s) {\n",
        "1108": "                return s.equals(\"b\") || s.equals(\"d\") || s.equals(\"f\");\n",
        "1109": "              }\n",
        "1110": "            }));\n",
        "1112": "    assertFalse(\n",
        "1113": "        Iterables.removeIf(\n",
        "1114": "            list,\n",
        "1115": "            new Predicate<String>() {\n",
        "1116": "              @Override\n",
        "1117": "              public boolean apply(String s) {\n",
        "1118": "                return s.equals(\"x\") || s.equals(\"y\") || s.equals(\"z\");\n",
        "1119": "              }\n",
        "1120": "            }));\n",
        "1228": "    new IteratorTester<Integer>(3, UNMODIFIABLE, items, IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "1229": "      @Override\n",
        "1230": "      protected Iterator<Integer> newTargetIterator() {\n",
        "1231": "        return Iterables.consumingIterable(Lists.newLinkedList(items)).iterator();\n",
        "1239": "    Iterator<Integer> consumingIterator = Iterables.consumingIterable(queue).iterator();\n",
        "1250": "    Queue<Integer> queue = new UnIterableQueue<>(Lists.newLinkedList(asList(5, 14)));\n",
        "1252": "    Iterator<Integer> consumingIterator = Iterables.consumingIterable(queue).iterator();\n",
        "1267": "    @Override\n",
        "1268": "    public Iterator<T> iterator() {\n",
        "1272": "    @Override\n",
        "1273": "    protected Queue<T> delegate() {\n",
        "1297": "    List<String> list = Lists.newArrayList(\"mary\", \"bob\", \"bob\", \"bob\", \"sam\");\n",
        "1306": "        @Override\n",
        "1307": "        public boolean apply(CharSequence input) {\n",
        "1324": "    List<String> sequences = Lists.newArrayList(\"bob\", \"charlie\", \"henry\", \"apple\", \"lemon\");\n",
        "1333": "    Iterable<Integer> iterable = Iterables.mergeSorted(elements, Ordering.natural());\n",
        "1406": "  private static void verifyMergeSorted(\n",
        "1407": "      Iterable<Iterable<Integer>> iterables, Iterable<Integer> unsortedExpected) {\n",
        "1408": "    Iterable<Integer> expected = Ordering.natural().sortedCopy(unsortedExpected);\n",
        "1410": "    Iterable<Integer> mergedIterator = Iterables.mergeSorted(iterables, Ordering.natural());\n",
        "1412": "    assertEquals(Lists.newLinkedList(expected), Lists.newLinkedList(mergedIterator));\n"
    },
    "removed": {
        "71": "    Iterable<Integer> iterable = new Iterable<Integer>() {\n",
        "72": "      @Override\n",
        "73": "      public Iterator<Integer> iterator() {\n",
        "74": "        return asList(0, 1).iterator();\n",
        "75": "      }\n",
        "76": "    };\n",
        "83": "    List<Integer> collection = new ArrayList<Integer>(nums) {\n",
        "84": "      @Override public Iterator<Integer> iterator() {\n",
        "85": "        throw new AssertionFailedError(\"Don't iterate me!\");\n",
        "86": "      }\n",
        "87": "    };\n",
        "247": "    assertEquals(\"cool\",\n",
        "248": "        Iterables.find(list, Predicates.equalTo(\"cool\"), \"woot\"));\n",
        "249": "    assertEquals(\"pants\",\n",
        "250": "        Iterables.find(list, Predicates.equalTo(\"pants\"), \"woot\"));\n",
        "251": "    assertEquals(\"woot\", Iterables.find(list,\n",
        "252": "        Predicates.alwaysFalse(), \"woot\"));\n",
        "254": "    assertEquals(\"cool\",\n",
        "255": "        Iterables.find(list, Predicates.alwaysTrue(), \"woot\"));\n",
        "275": "    Iterable<TypeA> alist = Lists\n",
        "276": "        .newArrayList(new TypeA(), new TypeA(), hasBoth, new TypeA());\n",
        "283": "    Iterable<Integer> result = Iterables.transform(input,\n",
        "284": "        new Function<String, Integer>() {\n",
        "285": "          @Override\n",
        "286": "          public Integer apply(String from) {\n",
        "287": "            return Integer.valueOf(from);\n",
        "288": "          }\n",
        "289": "        });\n",
        "300": "    Iterable<Integer> result = Iterables.transform(input,\n",
        "301": "        new Function<String, Integer>() {\n",
        "302": "          @Override\n",
        "303": "          public Integer apply(String from) {\n",
        "304": "            return Integer.valueOf(from);\n",
        "305": "          }\n",
        "306": "        });\n",
        "320": "    Iterable<String> result = Iterables.transform(input,\n",
        "321": "        new Function<Integer, String>() {\n",
        "322": "          @Override\n",
        "323": "          public String apply(Integer from) {\n",
        "324": "            return String.valueOf(from);\n",
        "325": "          }\n",
        "326": "        });\n",
        "384": "    Iterable<Integer> result =\n",
        "385": "        Iterables.concat(list1, list2, list3, list4, list5);\n",
        "397": "    } catch (NullPointerException expected) {}\n",
        "403": "    Iterable<Integer> repeated\n",
        "404": "        = Iterables.concat(Collections.nCopies(n, iterable));\n",
        "503": "    assertThat(alreadyThere).containsExactly(\n",
        "504": "        \"already\", \"there\", \"freshly\", \"added\").inOrder();\n",
        "509": "    for (@SuppressWarnings(\"unused\") Object obj : iterable) {\n",
        "510": "    }\n",
        "571": "    } catch (IllegalArgumentException expected) {}\n",
        "625": "    } catch (IllegalStateException expected) {}\n",
        "634": "    } catch (IllegalStateException expected) {}\n",
        "643": "    } catch (UnsupportedOperationException expected) {}\n",
        "648": "    new IteratorTester<Integer>(5, MODIFIABLE, newArrayList(2, 3),\n",
        "649": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "650": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "658": "    new IteratorTester<Integer>(5, MODIFIABLE, newArrayList(2, 3),\n",
        "659": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "660": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "712": "    } catch (IllegalArgumentException expected) {}\n",
        "719": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "726": "    } catch (IndexOutOfBoundsException nsee) {}\n",
        "730": "    } catch (IndexOutOfBoundsException nsee) {}\n",
        "737": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "829": "    } catch (NoSuchElementException e) {}\n",
        "858": "   * {@link ArrayList} extension that forbids the use of\n",
        "859": "   * {@link Collection#iterator} for tests that need to prove that it isn't\n",
        "860": "   * called.\n",
        "863": "    /**\n",
        "864": "     * @throws UnsupportedOperationException all the time\n",
        "865": "     */\n",
        "885": "    } catch (NoSuchElementException e) {}\n",
        "898": "    } catch (NoSuchElementException e) {}\n",
        "909": "    } catch (UnsupportedOperationException expected) {}\n",
        "921": "    assertSame(immutableList,\n",
        "922": "        Iterables.unmodifiableIterable((List<String>) immutableList));\n",
        "926": "    Multiset<String> multiset\n",
        "927": "        = ImmutableMultiset.of(\"a\", \"b\", \"a\", \"c\", \"b\", \"a\");\n",
        "966": "    Iterable<String> iterable = new Iterable<String>() {\n",
        "967": "      @Override\n",
        "968": "      public Iterator<String> iterator() {\n",
        "969": "        return list.iterator();\n",
        "970": "      }\n",
        "971": "    };\n",
        "988": "    Iterable<String> iterable = new Iterable<String>() {\n",
        "989": "      @Override\n",
        "990": "      public Iterator<String> iterator() {\n",
        "991": "        return list.iterator();\n",
        "992": "      }\n",
        "993": "    };\n",
        "1002": "    assertTrue(Iterables.removeIf(list,\n",
        "1003": "        new Predicate<String>() {\n",
        "1004": "          @Override\n",
        "1005": "          public boolean apply(String s) {\n",
        "1006": "            return s.equals(\"b\") || s.equals(\"d\") || s.equals(\"f\");\n",
        "1007": "          }\n",
        "1008": "        }));\n",
        "1010": "    assertFalse(Iterables.removeIf(list,\n",
        "1011": "        new Predicate<String>() {\n",
        "1012": "          @Override\n",
        "1013": "          public boolean apply(String s) {\n",
        "1014": "            return s.equals(\"x\") || s.equals(\"y\") || s.equals(\"z\");\n",
        "1015": "          }\n",
        "1016": "        }));\n",
        "1026": "    assertTrue(Iterables.removeIf(uniqueList,\n",
        "1027": "        new Predicate<String>() {\n",
        "1028": "          @Override\n",
        "1029": "          public boolean apply(String s) {\n",
        "1030": "            return s.equals(\"b\") || s.equals(\"d\") || s.equals(\"f\");\n",
        "1031": "          }\n",
        "1032": "        }));\n",
        "1034": "    assertFalse(Iterables.removeIf(uniqueList,\n",
        "1035": "        new Predicate<String>() {\n",
        "1036": "          @Override\n",
        "1037": "          public boolean apply(String s) {\n",
        "1038": "            return s.equals(\"x\") || s.equals(\"y\") || s.equals(\"z\");\n",
        "1039": "          }\n",
        "1040": "        }));\n",
        "1046": "    List<Integer> transformed = Lists.transform(list,\n",
        "1047": "        new Function<String, Integer>() {\n",
        "1048": "          @Override\n",
        "1049": "          public Integer apply(String s) {\n",
        "1050": "            return Integer.valueOf(s);\n",
        "1051": "          }\n",
        "1052": "        });\n",
        "1053": "    assertTrue(Iterables.removeIf(transformed,\n",
        "1054": "        new Predicate<Integer>() {\n",
        "1055": "          @Override\n",
        "1056": "          public boolean apply(Integer n) {\n",
        "1057": "            return (n & 1) == 0;  // isEven()\n",
        "1058": "          }\n",
        "1059": "        }));\n",
        "1061": "    assertFalse(Iterables.removeIf(transformed,\n",
        "1062": "        new Predicate<Integer>() {\n",
        "1063": "          @Override\n",
        "1064": "          public boolean apply(Integer n) {\n",
        "1065": "            return (n & 1) == 0;  // isEven()\n",
        "1066": "          }\n",
        "1067": "        }));\n",
        "1073": "    assertTrue(Iterables.removeIf(list,\n",
        "1074": "        new Predicate<String>() {\n",
        "1075": "          @Override\n",
        "1076": "          public boolean apply(String s) {\n",
        "1077": "            return s.equals(\"b\") || s.equals(\"d\") || s.equals(\"f\");\n",
        "1078": "          }\n",
        "1079": "        }));\n",
        "1081": "    assertFalse(Iterables.removeIf(list,\n",
        "1082": "        new Predicate<String>() {\n",
        "1083": "          @Override\n",
        "1084": "          public boolean apply(String s) {\n",
        "1085": "            return s.equals(\"x\") || s.equals(\"y\") || s.equals(\"z\");\n",
        "1086": "          }\n",
        "1087": "        }));\n",
        "1195": "    new IteratorTester<Integer>(\n",
        "1196": "        3,\n",
        "1197": "        UNMODIFIABLE,\n",
        "1198": "        items,\n",
        "1199": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "1200": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "1201": "        return Iterables.consumingIterable(Lists.newLinkedList(items))\n",
        "1202": "            .iterator();\n",
        "1210": "    Iterator<Integer> consumingIterator =\n",
        "1211": "        Iterables.consumingIterable(queue).iterator();\n",
        "1222": "    Queue<Integer> queue =\n",
        "1223": "        new UnIterableQueue<>(Lists.newLinkedList(asList(5, 14)));\n",
        "1225": "    Iterator<Integer> consumingIterator =\n",
        "1226": "        Iterables.consumingIterable(queue).iterator();\n",
        "1241": "    @Override public Iterator<T> iterator() {\n",
        "1245": "    @Override protected Queue<T> delegate() {\n",
        "1269": "    List<String> list =\n",
        "1270": "        Lists.newArrayList(\"mary\", \"bob\", \"bob\", \"bob\", \"sam\");\n",
        "1279": "        @Override public boolean apply(CharSequence input) {\n",
        "1296": "    List<String> sequences =\n",
        "1297": "        Lists.newArrayList(\"bob\", \"charlie\", \"henry\", \"apple\", \"lemon\");\n",
        "1306": "    Iterable<Integer> iterable =\n",
        "1307": "        Iterables.mergeSorted(elements, Ordering.natural());\n",
        "1380": "  private static void verifyMergeSorted(Iterable<Iterable<Integer>> iterables,\n",
        "1381": "      Iterable<Integer> unsortedExpected) {\n",
        "1382": "    Iterable<Integer> expected =\n",
        "1383": "        Ordering.natural().sortedCopy(unsortedExpected);\n",
        "1385": "    Iterable<Integer> mergedIterator =\n",
        "1386": "        Iterables.mergeSorted(iterables, Ordering.natural());\n",
        "1388": "    assertEquals(Lists.newLinkedList(expected),\n",
        "1389": "        Lists.newLinkedList(mergedIterator));\n"
    }
}