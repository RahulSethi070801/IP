{
    "addition": {
        "36": " * An unbounded {@linkplain BlockingQueue blocking queue} that uses the same ordering rules as class\n",
        "37": " * {@link PriorityQueue} and supplies blocking retrieval operations. While this queue is logically\n",
        "38": " * unbounded, attempted additions may fail due to resource exhaustion (causing\n",
        "39": " * <tt>OutOfMemoryError</tt>). This class does not permit <tt>null</tt> elements. A priority queue\n",
        "40": " * relying on {@linkplain Comparable natural ordering} also does not permit insertion of\n",
        "41": " * non-comparable objects (doing so results in <tt>ClassCastException</tt>).\n",
        "43": " * <p>This class and its iterator implement all of the <em>optional</em> methods of the {@link\n",
        "44": " * Collection} and {@link Iterator} interfaces. The Iterator provided in method {@link #iterator()}\n",
        "45": " * is <em>not</em> guaranteed to traverse the elements of the MonitorBasedPriorityBlockingQueue in\n",
        "46": " * any particular order. If you need ordered traversal, consider using\n",
        "47": " * <tt>Arrays.sort(pq.toArray())</tt>. Also, method <tt>drainTo</tt> can be used to <em>remove</em>\n",
        "48": " * some or all elements in priority order and place them in another collection.\n",
        "50": " * <p>Operations on this class make no guarantees about the ordering of elements with equal\n",
        "51": " * priority. If you need to enforce an ordering, you can define custom classes or comparators that\n",
        "52": " * use a secondary key to break ties in primary priority values. For example, here is a class that\n",
        "53": " * applies first-in-first-out tie-breaking to comparable elements. To use it, you would insert a\n",
        "83": "  // Based on revision 1.55 of PriorityBlockingQueue by Doug Lea, from\n",
        "84": "  // http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/main/java/util/concurrent/\n",
        "86": "  private static final long serialVersionUID = 5595510919245408276L;\n",
        "88": "  final PriorityQueue<E> q;\n",
        "89": "  final Monitor monitor = new Monitor(true);\n",
        "90": "  private final Monitor.Guard notEmpty =\n",
        "91": "      new Monitor.Guard(monitor) {\n",
        "92": "        @Override\n",
        "93": "        public boolean isSatisfied() {\n",
        "94": "          return !q.isEmpty();\n",
        "96": "      };\n",
        "97": "\n",
        "98": "  /**\n",
        "99": "   * Creates a <tt>MonitorBasedPriorityBlockingQueue</tt> with the default initial capacity (11)\n",
        "100": "   * that orders its elements according to their {@linkplain Comparable natural ordering}.\n",
        "101": "   */\n",
        "102": "  public MonitorBasedPriorityBlockingQueue() {\n",
        "103": "    q = new PriorityQueue<E>();\n",
        "104": "  }\n",
        "105": "\n",
        "106": "  /**\n",
        "107": "   * Creates a <tt>MonitorBasedPriorityBlockingQueue</tt> with the specified initial capacity that\n",
        "108": "   * orders its elements according to their {@linkplain Comparable natural ordering}.\n",
        "109": "   *\n",
        "110": "   * @param initialCapacity the initial capacity for this priority queue\n",
        "111": "   * @throws IllegalArgumentException if <tt>initialCapacity</tt> is less than 1\n",
        "112": "   */\n",
        "113": "  public MonitorBasedPriorityBlockingQueue(int initialCapacity) {\n",
        "114": "    q = new PriorityQueue<E>(initialCapacity, null);\n",
        "115": "  }\n",
        "116": "\n",
        "117": "  /**\n",
        "118": "   * Creates a <tt>MonitorBasedPriorityBlockingQueue</tt> with the specified initial capacity that\n",
        "119": "   * orders its elements according to the specified comparator.\n",
        "120": "   *\n",
        "121": "   * @param initialCapacity the initial capacity for this priority queue\n",
        "122": "   * @param comparator the comparator that will be used to order this priority queue. If {@code\n",
        "123": "   *     null}, the {@linkplain Comparable natural ordering} of the elements will be used.\n",
        "124": "   * @throws IllegalArgumentException if <tt>initialCapacity</tt> is less than 1\n",
        "125": "   */\n",
        "126": "  public MonitorBasedPriorityBlockingQueue(\n",
        "127": "      int initialCapacity, @Nullable Comparator<? super E> comparator) {\n",
        "128": "    q = new PriorityQueue<E>(initialCapacity, comparator);\n",
        "129": "  }\n",
        "130": "\n",
        "131": "  /**\n",
        "132": "   * Creates a <tt>MonitorBasedPriorityBlockingQueue</tt> containing the elements in the specified\n",
        "133": "   * collection. If the specified collection is a {@link SortedSet} or a {@link PriorityQueue}, this\n",
        "134": "   * priority queue will be ordered according to the same ordering. Otherwise, this priority queue\n",
        "135": "   * will be ordered according to the {@linkplain Comparable natural ordering} of its elements.\n",
        "136": "   *\n",
        "137": "   * @param c the collection whose elements are to be placed into this priority queue\n",
        "138": "   * @throws ClassCastException if elements of the specified collection cannot be compared to one\n",
        "139": "   *     another according to the priority queue's ordering\n",
        "140": "   * @throws NullPointerException if the specified collection or any of its elements are null\n",
        "141": "   */\n",
        "142": "  public MonitorBasedPriorityBlockingQueue(Collection<? extends E> c) {\n",
        "143": "    q = new PriorityQueue<E>(c);\n",
        "144": "  }\n",
        "145": "\n",
        "146": "  /**\n",
        "147": "   * Inserts the specified element into this priority queue.\n",
        "148": "   *\n",
        "149": "   * @param e the element to add\n",
        "150": "   * @return <tt>true</tt> (as specified by {@link Collection#add})\n",
        "151": "   * @throws ClassCastException if the specified element cannot be compared with elements currently\n",
        "152": "   *     in the priority queue according to the priority queue's ordering\n",
        "153": "   * @throws NullPointerException if the specified element is null\n",
        "154": "   */\n",
        "155": "  @Override\n",
        "156": "  public boolean add(E e) {\n",
        "157": "    return offer(e);\n",
        "158": "  }\n",
        "159": "\n",
        "160": "  /**\n",
        "161": "   * Inserts the specified element into this priority queue.\n",
        "162": "   *\n",
        "163": "   * @param e the element to add\n",
        "164": "   * @return <tt>true</tt> (as specified by {@link Queue#offer})\n",
        "165": "   * @throws ClassCastException if the specified element cannot be compared with elements currently\n",
        "166": "   *     in the priority queue according to the priority queue's ordering\n",
        "167": "   * @throws NullPointerException if the specified element is null\n",
        "168": "   */\n",
        "169": "  @Override\n",
        "170": "  public boolean offer(E e) {\n",
        "171": "    final Monitor monitor = this.monitor;\n",
        "172": "    monitor.enter();\n",
        "173": "    try {\n",
        "174": "      boolean ok = q.offer(e);\n",
        "175": "      if (!ok) {\n",
        "176": "        throw new AssertionError();\n",
        "177": "      }\n",
        "178": "      return true;\n",
        "179": "    } finally {\n",
        "180": "      monitor.leave();\n",
        "182": "  }\n",
        "183": "\n",
        "184": "  /**\n",
        "185": "   * Inserts the specified element into this priority queue. As the queue is unbounded this method\n",
        "186": "   * will never block.\n",
        "187": "   *\n",
        "188": "   * @param e the element to add\n",
        "189": "   * @throws ClassCastException if the specified element cannot be compared with elements currently\n",
        "190": "   *     in the priority queue according to the priority queue's ordering\n",
        "191": "   * @throws NullPointerException if the specified element is null\n",
        "192": "   */\n",
        "193": "  @Override\n",
        "194": "  public void put(E e) {\n",
        "195": "    offer(e); // never need to block\n",
        "196": "  }\n",
        "197": "\n",
        "198": "  /**\n",
        "199": "   * Inserts the specified element into this priority queue. As the queue is unbounded this method\n",
        "200": "   * will never block.\n",
        "201": "   *\n",
        "202": "   * @param e the element to add\n",
        "203": "   * @param timeout This parameter is ignored as the method never blocks\n",
        "204": "   * @param unit This parameter is ignored as the method never blocks\n",
        "205": "   * @return <tt>true</tt>\n",
        "206": "   * @throws ClassCastException if the specified element cannot be compared with elements currently\n",
        "207": "   *     in the priority queue according to the priority queue's ordering\n",
        "208": "   * @throws NullPointerException if the specified element is null\n",
        "209": "   */\n",
        "210": "  @Override\n",
        "211": "  public boolean offer(E e, long timeout, TimeUnit unit) {\n",
        "212": "    checkNotNull(unit);\n",
        "213": "    return offer(e); // never need to block\n",
        "214": "  }\n",
        "215": "\n",
        "216": "  @Override\n",
        "217": "  public E poll() {\n",
        "218": "    final Monitor monitor = this.monitor;\n",
        "219": "    monitor.enter();\n",
        "220": "    try {\n",
        "221": "      return q.poll();\n",
        "222": "    } finally {\n",
        "223": "      monitor.leave();\n",
        "225": "  }\n",
        "226": "\n",
        "227": "  @Override\n",
        "228": "  public E take() throws InterruptedException {\n",
        "229": "    final Monitor monitor = this.monitor;\n",
        "230": "    monitor.enterWhen(notEmpty);\n",
        "231": "    try {\n",
        "232": "      return q.poll();\n",
        "233": "    } finally {\n",
        "234": "      monitor.leave();\n",
        "236": "  }\n",
        "237": "\n",
        "238": "  @Override\n",
        "239": "  public E poll(long timeout, TimeUnit unit) throws InterruptedException {\n",
        "240": "    final Monitor monitor = this.monitor;\n",
        "241": "    if (monitor.enterWhen(notEmpty, timeout, unit)) {\n",
        "242": "      try {\n",
        "243": "        return q.poll();\n",
        "244": "      } finally {\n",
        "245": "        monitor.leave();\n",
        "246": "      }\n",
        "247": "    } else {\n",
        "248": "      return null;\n",
        "250": "  }\n",
        "251": "\n",
        "252": "  @Override\n",
        "253": "  public E peek() {\n",
        "254": "    final Monitor monitor = this.monitor;\n",
        "255": "    monitor.enter();\n",
        "256": "    try {\n",
        "257": "      return q.peek();\n",
        "258": "    } finally {\n",
        "259": "      monitor.leave();\n",
        "261": "  }\n",
        "262": "\n",
        "263": "  /**\n",
        "264": "   * Returns the comparator used to order the elements in this queue, or <tt>null</tt> if this queue\n",
        "265": "   * uses the {@linkplain Comparable natural ordering} of its elements.\n",
        "266": "   *\n",
        "267": "   * @return the comparator used to order the elements in this queue, or <tt>null</tt> if this queue\n",
        "268": "   *     uses the natural ordering of its elements\n",
        "269": "   */\n",
        "270": "  public Comparator<? super E> comparator() {\n",
        "271": "    return q.comparator();\n",
        "272": "  }\n",
        "273": "\n",
        "274": "  @Override\n",
        "275": "  public int size() {\n",
        "276": "    final Monitor monitor = this.monitor;\n",
        "277": "    monitor.enter();\n",
        "278": "    try {\n",
        "279": "      return q.size();\n",
        "280": "    } finally {\n",
        "281": "      monitor.leave();\n",
        "283": "  }\n",
        "284": "\n",
        "285": "  /**\n",
        "286": "   * Always returns <tt>Integer.MAX_VALUE</tt> because a <tt>MonitorBasedPriorityBlockingQueue</tt>\n",
        "287": "   * is not capacity constrained.\n",
        "288": "   *\n",
        "289": "   * @return <tt>Integer.MAX_VALUE</tt>\n",
        "290": "   */\n",
        "291": "  @Override\n",
        "292": "  public int remainingCapacity() {\n",
        "293": "    return Integer.MAX_VALUE;\n",
        "294": "  }\n",
        "295": "\n",
        "296": "  /**\n",
        "297": "   * Removes a single instance of the specified element from this queue, if it is present. More\n",
        "298": "   * formally, removes an element {@code e} such that {@code o.equals(e)}, if this queue contains\n",
        "299": "   * one or more such elements. Returns {@code true} if and only if this queue contained the\n",
        "300": "   * specified element (or equivalently, if this queue changed as a result of the call).\n",
        "301": "   *\n",
        "302": "   * @param o element to be removed from this queue, if present\n",
        "303": "   * @return <tt>true</tt> if this queue changed as a result of the call\n",
        "304": "   */\n",
        "305": "  @Override\n",
        "306": "  public boolean remove(@Nullable Object o) {\n",
        "307": "    final Monitor monitor = this.monitor;\n",
        "308": "    monitor.enter();\n",
        "309": "    try {\n",
        "310": "      return q.remove(o);\n",
        "311": "    } finally {\n",
        "312": "      monitor.leave();\n",
        "314": "  }\n",
        "315": "\n",
        "316": "  /**\n",
        "317": "   * Returns {@code true} if this queue contains the specified element. More formally, returns\n",
        "318": "   * {@code true} if and only if this queue contains at least one element {@code e} such that {@code\n",
        "319": "   * o.equals(e)}.\n",
        "320": "   *\n",
        "321": "   * @param o object to be checked for containment in this queue\n",
        "322": "   * @return <tt>true</tt> if this queue contains the specified element\n",
        "323": "   */\n",
        "324": "  @Override\n",
        "325": "  public boolean contains(@Nullable Object o) {\n",
        "326": "    final Monitor monitor = this.monitor;\n",
        "327": "    monitor.enter();\n",
        "328": "    try {\n",
        "329": "      return q.contains(o);\n",
        "330": "    } finally {\n",
        "331": "      monitor.leave();\n",
        "333": "  }\n",
        "334": "\n",
        "335": "  /**\n",
        "336": "   * Returns an array containing all of the elements in this queue. The returned array elements are\n",
        "337": "   * in no particular order.\n",
        "338": "   *\n",
        "339": "   * <p>The returned array will be \"safe\" in that no references to it are maintained by this queue.\n",
        "340": "   * (In other words, this method must allocate a new array). The caller is thus free to modify the\n",
        "341": "   * returned array.\n",
        "342": "   *\n",
        "343": "   * <p>This method acts as bridge between array-based and collection-based APIs.\n",
        "344": "   *\n",
        "345": "   * @return an array containing all of the elements in this queue\n",
        "346": "   */\n",
        "347": "  @Override\n",
        "348": "  public Object[] toArray() {\n",
        "349": "    final Monitor monitor = this.monitor;\n",
        "350": "    monitor.enter();\n",
        "351": "    try {\n",
        "352": "      return q.toArray();\n",
        "353": "    } finally {\n",
        "354": "      monitor.leave();\n",
        "356": "  }\n",
        "357": "\n",
        "358": "  @Override\n",
        "359": "  public String toString() {\n",
        "360": "    final Monitor monitor = this.monitor;\n",
        "361": "    monitor.enter();\n",
        "362": "    try {\n",
        "363": "      return q.toString();\n",
        "364": "    } finally {\n",
        "365": "      monitor.leave();\n",
        "367": "  }\n",
        "368": "\n",
        "369": "  /**\n",
        "370": "   * @throws UnsupportedOperationException {@inheritDoc}\n",
        "371": "   * @throws ClassCastException {@inheritDoc}\n",
        "372": "   * @throws NullPointerException {@inheritDoc}\n",
        "373": "   * @throws IllegalArgumentException {@inheritDoc}\n",
        "374": "   */\n",
        "375": "  @Override\n",
        "376": "  public int drainTo(Collection<? super E> c) {\n",
        "377": "    if (c == null) throw new NullPointerException();\n",
        "378": "    if (c == this) throw new IllegalArgumentException();\n",
        "379": "    final Monitor monitor = this.monitor;\n",
        "380": "    monitor.enter();\n",
        "381": "    try {\n",
        "382": "      int n = 0;\n",
        "383": "      E e;\n",
        "384": "      while ((e = q.poll()) != null) {\n",
        "385": "        c.add(e);\n",
        "386": "        ++n;\n",
        "387": "      }\n",
        "388": "      return n;\n",
        "389": "    } finally {\n",
        "390": "      monitor.leave();\n",
        "392": "  }\n",
        "393": "\n",
        "394": "  /**\n",
        "395": "   * @throws UnsupportedOperationException {@inheritDoc}\n",
        "396": "   * @throws ClassCastException {@inheritDoc}\n",
        "397": "   * @throws NullPointerException {@inheritDoc}\n",
        "398": "   * @throws IllegalArgumentException {@inheritDoc}\n",
        "399": "   */\n",
        "400": "  @Override\n",
        "401": "  public int drainTo(Collection<? super E> c, int maxElements) {\n",
        "402": "    if (c == null) throw new NullPointerException();\n",
        "403": "    if (c == this) throw new IllegalArgumentException();\n",
        "404": "    if (maxElements <= 0) return 0;\n",
        "405": "    final Monitor monitor = this.monitor;\n",
        "406": "    monitor.enter();\n",
        "407": "    try {\n",
        "408": "      int n = 0;\n",
        "409": "      E e;\n",
        "410": "      while (n < maxElements && (e = q.poll()) != null) {\n",
        "411": "        c.add(e);\n",
        "412": "        ++n;\n",
        "413": "      }\n",
        "414": "      return n;\n",
        "415": "    } finally {\n",
        "416": "      monitor.leave();\n",
        "418": "  }\n",
        "419": "\n",
        "420": "  /**\n",
        "421": "   * Atomically removes all of the elements from this queue. The queue will be empty after this call\n",
        "422": "   * returns.\n",
        "423": "   */\n",
        "424": "  @Override\n",
        "425": "  public void clear() {\n",
        "426": "    final Monitor monitor = this.monitor;\n",
        "427": "    monitor.enter();\n",
        "428": "    try {\n",
        "429": "      q.clear();\n",
        "430": "    } finally {\n",
        "431": "      monitor.leave();\n",
        "433": "  }\n",
        "434": "\n",
        "435": "  /**\n",
        "436": "   * Returns an array containing all of the elements in this queue; the runtime type of the returned\n",
        "437": "   * array is that of the specified array. The returned array elements are in no particular order.\n",
        "438": "   * If the queue fits in the specified array, it is returned therein. Otherwise, a new array is\n",
        "439": "   * allocated with the runtime type of the specified array and the size of this queue.\n",
        "440": "   *\n",
        "441": "   * <p>If this queue fits in the specified array with room to spare (i.e., the array has more\n",
        "442": "   * elements than this queue), the element in the array immediately following the end of the queue\n",
        "443": "   * is set to <tt>null</tt>.\n",
        "444": "   *\n",
        "445": "   * <p>Like the {@link #toArray()} method, this method acts as bridge between array-based and\n",
        "446": "   * collection-based APIs. Further, this method allows precise control over the runtime type of the\n",
        "447": "   * output array, and may, under certain circumstances, be used to save allocation costs.\n",
        "448": "   *\n",
        "449": "   * <p>Suppose <tt>x</tt> is a queue known to contain only strings. The following code can be used\n",
        "450": "   * to dump the queue into a newly allocated array of <tt>String</tt>:\n",
        "451": "   *\n",
        "452": "   * <pre>\n",
        "453": "   *     String[] y = x.toArray(new String[0]);</pre>\n",
        "454": "   *\n",
        "455": "   * <p>Note that <tt>toArray(new Object[0])</tt> is identical in function to <tt>toArray()</tt>.\n",
        "456": "   *\n",
        "457": "   * @param a the array into which the elements of the queue are to be stored, if it is big enough;\n",
        "458": "   *     otherwise, a new array of the same runtime type is allocated for this purpose\n",
        "459": "   * @return an array containing all of the elements in this queue\n",
        "460": "   * @throws ArrayStoreException if the runtime type of the specified array is not a supertype of\n",
        "461": "   *     the runtime type of every element in this queue\n",
        "462": "   * @throws NullPointerException if the specified array is null\n",
        "463": "   */\n",
        "464": "  @Override\n",
        "465": "  public <T> T[] toArray(T[] a) {\n",
        "466": "    final Monitor monitor = this.monitor;\n",
        "467": "    monitor.enter();\n",
        "468": "    try {\n",
        "469": "      return q.toArray(a);\n",
        "470": "    } finally {\n",
        "471": "      monitor.leave();\n",
        "473": "  }\n",
        "474": "\n",
        "475": "  /**\n",
        "476": "   * Returns an iterator over the elements in this queue. The iterator does not return the elements\n",
        "477": "   * in any particular order. The returned <tt>Iterator</tt> is a \"weakly consistent\" iterator that\n",
        "478": "   * will never throw {@link ConcurrentModificationException}, and guarantees to traverse elements\n",
        "479": "   * as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect\n",
        "480": "   * any modifications subsequent to construction.\n",
        "481": "   *\n",
        "482": "   * @return an iterator over the elements in this queue\n",
        "483": "   */\n",
        "484": "  @Override\n",
        "485": "  public Iterator<E> iterator() {\n",
        "486": "    return new Itr(toArray());\n",
        "487": "  }\n",
        "488": "\n",
        "489": "  /** Snapshot iterator that works off copy of underlying q array. */\n",
        "490": "  private class Itr implements Iterator<E> {\n",
        "491": "    final Object[] array; // Array of all elements\n",
        "492": "    int cursor; // index of next element to return;\n",
        "493": "    int lastRet; // index of last element, or -1 if no such\n",
        "494": "\n",
        "495": "    Itr(Object[] array) {\n",
        "496": "      lastRet = -1;\n",
        "497": "      this.array = array;\n",
        "501": "    public boolean hasNext() {\n",
        "502": "      return cursor < array.length;\n",
        "505": "    @Override\n",
        "506": "    public E next() {\n",
        "507": "      if (cursor >= array.length) throw new NoSuchElementException();\n",
        "508": "      lastRet = cursor;\n",
        "509": "\n",
        "510": "      // array comes from q.toArray() and so should have only E's in it\n",
        "511": "      @SuppressWarnings(\"unchecked\")\n",
        "512": "      E e = (E) array[cursor++];\n",
        "513": "      return e;\n",
        "516": "    @Override\n",
        "517": "    public void remove() {\n",
        "518": "      if (lastRet < 0) throw new IllegalStateException();\n",
        "519": "      Object x = array[lastRet];\n",
        "520": "      lastRet = -1;\n",
        "521": "      // Traverse underlying queue to find == element,\n",
        "522": "      // not just a .equals element.\n",
        "523": "      monitor.enter();\n",
        "524": "      try {\n",
        "525": "        for (Iterator<E> it = q.iterator(); it.hasNext(); ) {\n",
        "526": "          if (it.next() == x) {\n",
        "527": "            it.remove();\n",
        "528": "            return;\n",
        "529": "          }\n",
        "531": "      } finally {\n",
        "532": "        monitor.leave();\n",
        "533": "      }\n",
        "535": "  }\n",
        "536": "\n",
        "537": "  /**\n",
        "538": "   * Saves the state to a stream (that is, serializes it). This merely wraps default serialization\n",
        "539": "   * within the monitor. The serialization strategy for items is left to underlying Queue. Note that\n",
        "540": "   * locking is not needed on deserialization, so readObject is not defined, just relying on\n",
        "541": "   * default.\n",
        "542": "   */\n",
        "543": "  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {\n",
        "544": "    monitor.enter();\n",
        "545": "    try {\n",
        "546": "      s.defaultWriteObject();\n",
        "547": "    } finally {\n",
        "548": "      monitor.leave();\n",
        "550": "  }\n"
    },
    "removed": {
        "36": " * An unbounded {@linkplain BlockingQueue blocking queue} that uses\n",
        "37": " * the same ordering rules as class {@link PriorityQueue} and supplies\n",
        "38": " * blocking retrieval operations.  While this queue is logically\n",
        "39": " * unbounded, attempted additions may fail due to resource exhaustion\n",
        "40": " * (causing <tt>OutOfMemoryError</tt>). This class does not permit\n",
        "41": " * <tt>null</tt> elements.  A priority queue relying on {@linkplain\n",
        "42": " * Comparable natural ordering} also does not permit insertion of\n",
        "43": " * non-comparable objects (doing so results in\n",
        "44": " * <tt>ClassCastException</tt>).\n",
        "46": " * <p>This class and its iterator implement all of the\n",
        "47": " * <em>optional</em> methods of the {@link Collection} and {@link\n",
        "48": " * Iterator} interfaces.  The Iterator provided in method {@link\n",
        "49": " * #iterator()} is <em>not</em> guaranteed to traverse the elements of\n",
        "50": " * the MonitorBasedPriorityBlockingQueue in any particular order. If you need\n",
        "51": " * ordered traversal, consider using\n",
        "52": " * <tt>Arrays.sort(pq.toArray())</tt>.  Also, method <tt>drainTo</tt>\n",
        "53": " * can be used to <em>remove</em> some or all elements in priority\n",
        "54": " * order and place them in another collection.\n",
        "56": " * <p>Operations on this class make no guarantees about the ordering\n",
        "57": " * of elements with equal priority. If you need to enforce an\n",
        "58": " * ordering, you can define custom classes or comparators that use a\n",
        "59": " * secondary key to break ties in primary priority values.  For\n",
        "60": " * example, here is a class that applies first-in-first-out\n",
        "61": " * tie-breaking to comparable elements. To use it, you would insert a\n",
        "91": "    // Based on revision 1.55 of PriorityBlockingQueue by Doug Lea, from\n",
        "92": "    // http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/main/java/util/concurrent/\n",
        "93": "\n",
        "94": "    private static final long serialVersionUID = 5595510919245408276L;\n",
        "95": "\n",
        "96": "    final PriorityQueue<E> q;\n",
        "97": "    final Monitor monitor = new Monitor(true);\n",
        "98": "    private final Monitor.Guard notEmpty =\n",
        "99": "        new Monitor.Guard(monitor) {\n",
        "100": "            @Override public boolean isSatisfied() {\n",
        "101": "              return !q.isEmpty();\n",
        "102": "            }\n",
        "103": "        };\n",
        "104": "\n",
        "105": "    /**\n",
        "106": "     * Creates a <tt>MonitorBasedPriorityBlockingQueue</tt> with the default\n",
        "107": "     * initial capacity (11) that orders its elements according to\n",
        "108": "     * their {@linkplain Comparable natural ordering}.\n",
        "109": "     */\n",
        "110": "    public MonitorBasedPriorityBlockingQueue() {\n",
        "111": "        q = new PriorityQueue<E>();\n",
        "112": "    }\n",
        "113": "\n",
        "114": "    /**\n",
        "115": "     * Creates a <tt>MonitorBasedPriorityBlockingQueue</tt> with the specified\n",
        "116": "     * initial capacity that orders its elements according to their\n",
        "117": "     * {@linkplain Comparable natural ordering}.\n",
        "118": "     *\n",
        "119": "     * @param initialCapacity the initial capacity for this priority queue\n",
        "120": "     * @throws IllegalArgumentException if <tt>initialCapacity</tt> is less\n",
        "121": "     *         than 1\n",
        "122": "     */\n",
        "123": "    public MonitorBasedPriorityBlockingQueue(int initialCapacity) {\n",
        "124": "        q = new PriorityQueue<E>(initialCapacity, null);\n",
        "125": "    }\n",
        "126": "\n",
        "127": "    /**\n",
        "128": "     * Creates a <tt>MonitorBasedPriorityBlockingQueue</tt> with the specified initial\n",
        "129": "     * capacity that orders its elements according to the specified\n",
        "130": "     * comparator.\n",
        "131": "     *\n",
        "132": "     * @param initialCapacity the initial capacity for this priority queue\n",
        "133": "     * @param  comparator the comparator that will be used to order this\n",
        "134": "     *         priority queue.  If {@code null}, the {@linkplain Comparable\n",
        "135": "     *         natural ordering} of the elements will be used.\n",
        "136": "     * @throws IllegalArgumentException if <tt>initialCapacity</tt> is less\n",
        "137": "     *         than 1\n",
        "138": "     */\n",
        "139": "    public MonitorBasedPriorityBlockingQueue(int initialCapacity,\n",
        "140": "                                 @Nullable Comparator<? super E> comparator) {\n",
        "141": "        q = new PriorityQueue<E>(initialCapacity, comparator);\n",
        "142": "    }\n",
        "143": "\n",
        "144": "    /**\n",
        "145": "     * Creates a <tt>MonitorBasedPriorityBlockingQueue</tt> containing the elements\n",
        "146": "     * in the specified collection.  If the specified collection is a\n",
        "147": "     * {@link SortedSet} or a {@link PriorityQueue},  this\n",
        "148": "     * priority queue will be ordered according to the same ordering.\n",
        "149": "     * Otherwise, this priority queue will be ordered according to the\n",
        "150": "     * {@linkplain Comparable natural ordering} of its elements.\n",
        "151": "     *\n",
        "152": "     * @param  c the collection whose elements are to be placed\n",
        "153": "     *         into this priority queue\n",
        "154": "     * @throws ClassCastException if elements of the specified collection\n",
        "155": "     *         cannot be compared to one another according to the priority\n",
        "156": "     *         queue's ordering\n",
        "157": "     * @throws NullPointerException if the specified collection or any\n",
        "158": "     *         of its elements are null\n",
        "159": "     */\n",
        "160": "    public MonitorBasedPriorityBlockingQueue(Collection<? extends E> c) {\n",
        "161": "        q = new PriorityQueue<E>(c);\n",
        "162": "    }\n",
        "164": "    /**\n",
        "165": "     * Inserts the specified element into this priority queue.\n",
        "166": "     *\n",
        "167": "     * @param e the element to add\n",
        "168": "     * @return <tt>true</tt> (as specified by {@link Collection#add})\n",
        "169": "     * @throws ClassCastException if the specified element cannot be compared\n",
        "170": "     *         with elements currently in the priority queue according to the\n",
        "171": "     *         priority queue's ordering\n",
        "172": "     * @throws NullPointerException if the specified element is null\n",
        "173": "     */\n",
        "174": "    @Override public boolean add(E e) {\n",
        "175": "        return offer(e);\n",
        "176": "    }\n",
        "178": "    /**\n",
        "179": "     * Inserts the specified element into this priority queue.\n",
        "180": "     *\n",
        "181": "     * @param e the element to add\n",
        "182": "     * @return <tt>true</tt> (as specified by {@link Queue#offer})\n",
        "183": "     * @throws ClassCastException if the specified element cannot be compared\n",
        "184": "     *         with elements currently in the priority queue according to the\n",
        "185": "     *         priority queue's ordering\n",
        "186": "     * @throws NullPointerException if the specified element is null\n",
        "187": "     */\n",
        "188": "    @Override\n",
        "189": "    public boolean offer(E e) {\n",
        "190": "        final Monitor monitor = this.monitor;\n",
        "191": "        monitor.enter();\n",
        "192": "        try {\n",
        "193": "            boolean ok = q.offer(e);\n",
        "194": "            if (!ok) {\n",
        "195": "              throw new AssertionError();\n",
        "196": "            }\n",
        "197": "            return true;\n",
        "198": "        } finally {\n",
        "199": "            monitor.leave();\n",
        "202": "\n",
        "203": "    /**\n",
        "204": "     * Inserts the specified element into this priority queue. As the queue is\n",
        "205": "     * unbounded this method will never block.\n",
        "206": "     *\n",
        "207": "     * @param e the element to add\n",
        "208": "     * @throws ClassCastException if the specified element cannot be compared\n",
        "209": "     *         with elements currently in the priority queue according to the\n",
        "210": "     *         priority queue's ordering\n",
        "211": "     * @throws NullPointerException if the specified element is null\n",
        "212": "     */\n",
        "213": "    @Override\n",
        "214": "    public void put(E e) {\n",
        "215": "        offer(e); // never need to block\n",
        "217": "\n",
        "218": "    /**\n",
        "219": "     * Inserts the specified element into this priority queue. As the queue is\n",
        "220": "     * unbounded this method will never block.\n",
        "221": "     *\n",
        "222": "     * @param e the element to add\n",
        "223": "     * @param timeout This parameter is ignored as the method never blocks\n",
        "224": "     * @param unit This parameter is ignored as the method never blocks\n",
        "225": "     * @return <tt>true</tt>\n",
        "226": "     * @throws ClassCastException if the specified element cannot be compared\n",
        "227": "     *         with elements currently in the priority queue according to the\n",
        "228": "     *         priority queue's ordering\n",
        "229": "     * @throws NullPointerException if the specified element is null\n",
        "230": "     */\n",
        "231": "    @Override\n",
        "232": "    public boolean offer(E e, long timeout, TimeUnit unit) {\n",
        "233": "        checkNotNull(unit);\n",
        "234": "        return offer(e); // never need to block\n",
        "236": "\n",
        "237": "    @Override\n",
        "238": "    public E poll() {\n",
        "239": "        final Monitor monitor = this.monitor;\n",
        "240": "        monitor.enter();\n",
        "241": "        try {\n",
        "242": "            return q.poll();\n",
        "243": "        } finally {\n",
        "244": "            monitor.leave();\n",
        "245": "        }\n",
        "247": "\n",
        "248": "    @Override\n",
        "249": "    public E take() throws InterruptedException {\n",
        "250": "        final Monitor monitor = this.monitor;\n",
        "251": "        monitor.enterWhen(notEmpty);\n",
        "252": "        try {\n",
        "253": "            return q.poll();\n",
        "254": "        } finally {\n",
        "255": "            monitor.leave();\n",
        "256": "        }\n",
        "258": "\n",
        "259": "    @Override\n",
        "260": "    public E poll(long timeout, TimeUnit unit) throws InterruptedException {\n",
        "261": "        final Monitor monitor = this.monitor;\n",
        "262": "        if (monitor.enterWhen(notEmpty, timeout, unit)) {\n",
        "263": "            try {\n",
        "264": "                return q.poll();\n",
        "265": "            } finally {\n",
        "266": "                monitor.leave();\n",
        "267": "            }\n",
        "268": "        } else {\n",
        "269": "            return null;\n",
        "270": "        }\n",
        "272": "\n",
        "273": "    @Override\n",
        "274": "    public E peek() {\n",
        "275": "        final Monitor monitor = this.monitor;\n",
        "276": "        monitor.enter();\n",
        "277": "        try {\n",
        "278": "            return q.peek();\n",
        "279": "        } finally {\n",
        "280": "            monitor.leave();\n",
        "281": "        }\n",
        "283": "\n",
        "284": "    /**\n",
        "285": "     * Returns the comparator used to order the elements in this queue,\n",
        "286": "     * or <tt>null</tt> if this queue uses the {@linkplain Comparable\n",
        "287": "     * natural ordering} of its elements.\n",
        "288": "     *\n",
        "289": "     * @return the comparator used to order the elements in this queue,\n",
        "290": "     *         or <tt>null</tt> if this queue uses the natural\n",
        "291": "     *         ordering of its elements\n",
        "292": "     */\n",
        "293": "    public Comparator<? super E> comparator() {\n",
        "294": "        return q.comparator();\n",
        "296": "\n",
        "297": "    @Override public int size() {\n",
        "298": "        final Monitor monitor = this.monitor;\n",
        "299": "        monitor.enter();\n",
        "300": "        try {\n",
        "301": "            return q.size();\n",
        "302": "        } finally {\n",
        "303": "            monitor.leave();\n",
        "304": "        }\n",
        "306": "\n",
        "307": "    /**\n",
        "308": "     * Always returns <tt>Integer.MAX_VALUE</tt> because\n",
        "309": "     * a <tt>MonitorBasedPriorityBlockingQueue</tt> is not capacity constrained.\n",
        "310": "     * @return <tt>Integer.MAX_VALUE</tt>\n",
        "311": "     */\n",
        "312": "    @Override\n",
        "313": "    public int remainingCapacity() {\n",
        "314": "        return Integer.MAX_VALUE;\n",
        "316": "\n",
        "317": "    /**\n",
        "318": "     * Removes a single instance of the specified element from this queue,\n",
        "319": "     * if it is present.  More formally, removes an element {@code e} such\n",
        "320": "     * that {@code o.equals(e)}, if this queue contains one or more such\n",
        "321": "     * elements.  Returns {@code true} if and only if this queue contained\n",
        "322": "     * the specified element (or equivalently, if this queue changed as a\n",
        "323": "     * result of the call).\n",
        "324": "     *\n",
        "325": "     * @param o element to be removed from this queue, if present\n",
        "326": "     * @return <tt>true</tt> if this queue changed as a result of the call\n",
        "327": "     */\n",
        "328": "    @Override public boolean remove(@Nullable Object o) {\n",
        "329": "        final Monitor monitor = this.monitor;\n",
        "330": "        monitor.enter();\n",
        "331": "        try {\n",
        "332": "            return q.remove(o);\n",
        "333": "        } finally {\n",
        "334": "            monitor.leave();\n",
        "335": "        }\n",
        "337": "\n",
        "338": "    /**\n",
        "339": "     * Returns {@code true} if this queue contains the specified element.\n",
        "340": "     * More formally, returns {@code true} if and only if this queue contains\n",
        "341": "     * at least one element {@code e} such that {@code o.equals(e)}.\n",
        "342": "     *\n",
        "343": "     * @param o object to be checked for containment in this queue\n",
        "344": "     * @return <tt>true</tt> if this queue contains the specified element\n",
        "345": "     */\n",
        "346": "    @Override public boolean contains(@Nullable Object o) {\n",
        "347": "        final Monitor monitor = this.monitor;\n",
        "348": "        monitor.enter();\n",
        "349": "        try {\n",
        "350": "            return q.contains(o);\n",
        "351": "        } finally {\n",
        "352": "            monitor.leave();\n",
        "353": "        }\n",
        "355": "\n",
        "356": "    /**\n",
        "357": "     * Returns an array containing all of the elements in this queue.\n",
        "358": "     * The returned array elements are in no particular order.\n",
        "359": "     *\n",
        "360": "     * <p>The returned array will be \"safe\" in that no references to it are\n",
        "361": "     * maintained by this queue.  (In other words, this method must allocate\n",
        "362": "     * a new array).  The caller is thus free to modify the returned array.\n",
        "363": "     *\n",
        "364": "     * <p>This method acts as bridge between array-based and collection-based\n",
        "365": "     * APIs.\n",
        "366": "     *\n",
        "367": "     * @return an array containing all of the elements in this queue\n",
        "368": "     */\n",
        "369": "    @Override public Object[] toArray() {\n",
        "370": "        final Monitor monitor = this.monitor;\n",
        "371": "        monitor.enter();\n",
        "372": "        try {\n",
        "373": "            return q.toArray();\n",
        "374": "        } finally {\n",
        "375": "            monitor.leave();\n",
        "376": "        }\n",
        "378": "\n",
        "379": "    @Override public String toString() {\n",
        "380": "        final Monitor monitor = this.monitor;\n",
        "381": "        monitor.enter();\n",
        "382": "        try {\n",
        "383": "            return q.toString();\n",
        "384": "        } finally {\n",
        "385": "            monitor.leave();\n",
        "386": "        }\n",
        "388": "\n",
        "389": "    /**\n",
        "390": "     * @throws UnsupportedOperationException {@inheritDoc}\n",
        "391": "     * @throws ClassCastException            {@inheritDoc}\n",
        "392": "     * @throws NullPointerException          {@inheritDoc}\n",
        "393": "     * @throws IllegalArgumentException      {@inheritDoc}\n",
        "394": "     */\n",
        "395": "    @Override\n",
        "396": "    public int drainTo(Collection<? super E> c) {\n",
        "397": "        if (c == null)\n",
        "398": "            throw new NullPointerException();\n",
        "399": "        if (c == this)\n",
        "400": "            throw new IllegalArgumentException();\n",
        "401": "        final Monitor monitor = this.monitor;\n",
        "402": "        monitor.enter();\n",
        "403": "        try {\n",
        "404": "            int n = 0;\n",
        "405": "            E e;\n",
        "406": "            while ( (e = q.poll()) != null) {\n",
        "407": "                c.add(e);\n",
        "408": "                ++n;\n",
        "409": "            }\n",
        "410": "            return n;\n",
        "411": "        } finally {\n",
        "412": "            monitor.leave();\n",
        "413": "        }\n",
        "416": "    /**\n",
        "417": "     * @throws UnsupportedOperationException {@inheritDoc}\n",
        "418": "     * @throws ClassCastException            {@inheritDoc}\n",
        "419": "     * @throws NullPointerException          {@inheritDoc}\n",
        "420": "     * @throws IllegalArgumentException      {@inheritDoc}\n",
        "421": "     */\n",
        "423": "    public int drainTo(Collection<? super E> c, int maxElements) {\n",
        "424": "        if (c == null)\n",
        "425": "            throw new NullPointerException();\n",
        "426": "        if (c == this)\n",
        "427": "            throw new IllegalArgumentException();\n",
        "428": "        if (maxElements <= 0)\n",
        "429": "            return 0;\n",
        "430": "        final Monitor monitor = this.monitor;\n",
        "431": "        monitor.enter();\n",
        "432": "        try {\n",
        "433": "            int n = 0;\n",
        "434": "            E e;\n",
        "435": "            while (n < maxElements && (e = q.poll()) != null) {\n",
        "436": "                c.add(e);\n",
        "437": "                ++n;\n",
        "438": "            }\n",
        "439": "            return n;\n",
        "440": "        } finally {\n",
        "441": "            monitor.leave();\n",
        "442": "        }\n",
        "443": "    }\n",
        "444": "\n",
        "445": "    /**\n",
        "446": "     * Atomically removes all of the elements from this queue.\n",
        "447": "     * The queue will be empty after this call returns.\n",
        "448": "     */\n",
        "449": "    @Override public void clear() {\n",
        "450": "        final Monitor monitor = this.monitor;\n",
        "451": "        monitor.enter();\n",
        "452": "        try {\n",
        "453": "            q.clear();\n",
        "454": "        } finally {\n",
        "455": "            monitor.leave();\n",
        "456": "        }\n",
        "459": "    /**\n",
        "460": "     * Returns an array containing all of the elements in this queue; the\n",
        "461": "     * runtime type of the returned array is that of the specified array.\n",
        "462": "     * The returned array elements are in no particular order.\n",
        "463": "     * If the queue fits in the specified array, it is returned therein.\n",
        "464": "     * Otherwise, a new array is allocated with the runtime type of the\n",
        "465": "     * specified array and the size of this queue.\n",
        "466": "     *\n",
        "467": "     * <p>If this queue fits in the specified array with room to spare\n",
        "468": "     * (i.e., the array has more elements than this queue), the element in\n",
        "469": "     * the array immediately following the end of the queue is set to\n",
        "470": "     * <tt>null</tt>.\n",
        "471": "     *\n",
        "472": "     * <p>Like the {@link #toArray()} method, this method acts as bridge between\n",
        "473": "     * array-based and collection-based APIs.  Further, this method allows\n",
        "474": "     * precise control over the runtime type of the output array, and may,\n",
        "475": "     * under certain circumstances, be used to save allocation costs.\n",
        "476": "     *\n",
        "477": "     * <p>Suppose <tt>x</tt> is a queue known to contain only strings.\n",
        "478": "     * The following code can be used to dump the queue into a newly\n",
        "479": "     * allocated array of <tt>String</tt>:\n",
        "480": "     *\n",
        "481": "     * <pre>\n",
        "482": "     *     String[] y = x.toArray(new String[0]);</pre>\n",
        "483": "     *\n",
        "484": "     * <p>Note that <tt>toArray(new Object[0])</tt> is identical in function to\n",
        "485": "     * <tt>toArray()</tt>.\n",
        "486": "     *\n",
        "487": "     * @param a the array into which the elements of the queue are to\n",
        "488": "     *          be stored, if it is big enough; otherwise, a new array of the\n",
        "489": "     *          same runtime type is allocated for this purpose\n",
        "490": "     * @return an array containing all of the elements in this queue\n",
        "491": "     * @throws ArrayStoreException if the runtime type of the specified array\n",
        "492": "     *         is not a supertype of the runtime type of every element in\n",
        "493": "     *         this queue\n",
        "494": "     * @throws NullPointerException if the specified array is null\n",
        "495": "     */\n",
        "496": "    @Override public <T> T[] toArray(T[] a) {\n",
        "497": "        final Monitor monitor = this.monitor;\n",
        "498": "        monitor.enter();\n",
        "499": "        try {\n",
        "500": "            return q.toArray(a);\n",
        "501": "        } finally {\n",
        "502": "            monitor.leave();\n",
        "503": "        }\n",
        "504": "    }\n",
        "505": "\n",
        "506": "    /**\n",
        "507": "     * Returns an iterator over the elements in this queue. The\n",
        "508": "     * iterator does not return the elements in any particular order.\n",
        "509": "     * The returned <tt>Iterator</tt> is a \"weakly consistent\"\n",
        "510": "     * iterator that will never throw {@link\n",
        "511": "     * ConcurrentModificationException}, and guarantees to traverse\n",
        "512": "     * elements as they existed upon construction of the iterator, and\n",
        "513": "     * may (but is not guaranteed to) reflect any modifications\n",
        "514": "     * subsequent to construction.\n",
        "515": "     *\n",
        "516": "     * @return an iterator over the elements in this queue\n",
        "517": "     */\n",
        "518": "    @Override public Iterator<E> iterator() {\n",
        "519": "        return new Itr(toArray());\n",
        "522": "    /**\n",
        "523": "     * Snapshot iterator that works off copy of underlying q array.\n",
        "524": "     */\n",
        "525": "    private class Itr implements Iterator<E> {\n",
        "526": "        final Object[] array; // Array of all elements\n",
        "527": "        int cursor;           // index of next element to return;\n",
        "528": "        int lastRet;          // index of last element, or -1 if no such\n",
        "529": "\n",
        "530": "        Itr(Object[] array) {\n",
        "531": "            lastRet = -1;\n",
        "532": "            this.array = array;\n",
        "533": "        }\n",
        "534": "\n",
        "535": "        @Override\n",
        "536": "        public boolean hasNext() {\n",
        "537": "            return cursor < array.length;\n",
        "538": "        }\n",
        "539": "\n",
        "540": "        @Override\n",
        "541": "        public E next() {\n",
        "542": "            if (cursor >= array.length)\n",
        "543": "                throw new NoSuchElementException();\n",
        "544": "            lastRet = cursor;\n",
        "545": "\n",
        "546": "            // array comes from q.toArray() and so should have only E's in it\n",
        "547": "            @SuppressWarnings(\"unchecked\")\n",
        "548": "            E e = (E) array[cursor++];\n",
        "549": "            return e;\n",
        "550": "        }\n",
        "551": "\n",
        "552": "        @Override\n",
        "553": "        public void remove() {\n",
        "554": "            if (lastRet < 0)\n",
        "555": "                throw new IllegalStateException();\n",
        "556": "            Object x = array[lastRet];\n",
        "557": "            lastRet = -1;\n",
        "558": "            // Traverse underlying queue to find == element,\n",
        "559": "            // not just a .equals element.\n",
        "560": "            monitor.enter();\n",
        "561": "            try {\n",
        "562": "                for (Iterator<E> it = q.iterator(); it.hasNext(); ) {\n",
        "563": "                    if (it.next() == x) {\n",
        "564": "                        it.remove();\n",
        "565": "                        return;\n",
        "566": "                    }\n",
        "567": "                }\n",
        "568": "            } finally {\n",
        "569": "                monitor.leave();\n",
        "570": "            }\n",
        "573": "\n",
        "574": "    /**\n",
        "575": "     * Saves the state to a stream (that is, serializes it).  This\n",
        "576": "     * merely wraps default serialization within the monitor.  The\n",
        "577": "     * serialization strategy for items is left to underlying\n",
        "578": "     * Queue. Note that locking is not needed on deserialization, so\n",
        "579": "     * readObject is not defined, just relying on default.\n",
        "580": "     */\n",
        "581": "    private void writeObject(java.io.ObjectOutputStream s)\n",
        "582": "        throws java.io.IOException {\n",
        "583": "        monitor.enter();\n",
        "584": "        try {\n",
        "585": "            s.defaultWriteObject();\n",
        "586": "        } finally {\n",
        "587": "            monitor.leave();\n",
        "588": "        }\n",
        "590": "\n"
    }
}