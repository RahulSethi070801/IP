{
    "addition": {
        "40": "    Runnable task =\n",
        "41": "        new Runnable() {\n",
        "42": "          @Override\n",
        "43": "          public void run() {\n",
        "44": "            taskDone = true;\n",
        "45": "          }\n",
        "46": "        };\n",
        "47": "    ScheduledFuture<?> future =\n",
        "48": "        TestingExecutors.noOpScheduledExecutor().schedule(task, 10, TimeUnit.MILLISECONDS);\n",
        "66": "    Callable<Boolean> task =\n",
        "67": "        new Callable<Boolean>() {\n",
        "68": "          @Override\n",
        "69": "          public Boolean call() {\n",
        "70": "            taskDone = true;\n",
        "71": "            return taskDone;\n",
        "72": "          }\n",
        "73": "        };\n",
        "74": "    List<Future<Boolean>> futureList =\n",
        "75": "        executor.invokeAll(ImmutableList.of(task), 10, TimeUnit.MILLISECONDS);\n",
        "89": "    Callable<Integer> task =\n",
        "90": "        new Callable<Integer>() {\n",
        "91": "          @Override\n",
        "92": "          public Integer call() {\n",
        "93": "            taskDone = true;\n",
        "94": "            return 6;\n",
        "95": "          }\n",
        "96": "        };\n",
        "97": "    Future<Integer> future =\n",
        "98": "        TestingExecutors.sameThreadScheduledExecutor().schedule(task, 10000, TimeUnit.MILLISECONDS);\n",
        "104": "    Runnable runnable =\n",
        "105": "        new Runnable() {\n",
        "106": "          @Override\n",
        "107": "          public void run() {\n",
        "108": "            throw new RuntimeException(\"Oh no!\");\n",
        "109": "          }\n",
        "110": "        };\n"
    },
    "removed": {
        "21": "import java.lang.InterruptedException;\n",
        "41": "    Runnable task = new Runnable() {\n",
        "42": "      @Override public void run() {\n",
        "43": "        taskDone = true;\n",
        "44": "      }\n",
        "45": "    };\n",
        "46": "    ScheduledFuture<?> future = TestingExecutors.noOpScheduledExecutor().schedule(\n",
        "47": "        task, 10, TimeUnit.MILLISECONDS);\n",
        "65": "    Callable<Boolean> task = new Callable<Boolean>() {\n",
        "66": "      @Override public Boolean call() {\n",
        "67": "        taskDone = true;\n",
        "68": "        return taskDone;\n",
        "69": "      }\n",
        "70": "    };\n",
        "71": "    List<Future<Boolean>> futureList = executor.invokeAll(\n",
        "72": "        ImmutableList.of(task), 10, TimeUnit.MILLISECONDS);\n",
        "86": "    Callable<Integer> task = new Callable<Integer>() {\n",
        "87": "      @Override public Integer call() {\n",
        "88": "        taskDone = true;\n",
        "89": "        return 6;\n",
        "90": "      }\n",
        "91": "    };\n",
        "92": "    Future<Integer> future = TestingExecutors.sameThreadScheduledExecutor().schedule(\n",
        "93": "        task, 10000, TimeUnit.MILLISECONDS);\n",
        "99": "    Runnable runnable = new Runnable() {\n",
        "100": "      @Override public void run() {\n",
        "101": "        throw new RuntimeException(\"Oh no!\");\n",
        "102": "      }\n",
        "103": "    };\n"
    }
}