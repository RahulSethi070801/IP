{
    "addition": {
        "26": " * A bimap (or \"bidirectional map\") is a map that preserves the uniqueness of its values as well as\n",
        "27": " * that of its keys. This constraint enables bimaps to support an \"inverse view\", which is another\n",
        "28": " * bimap containing the same entries as this bimap but with reversed keys and values.\n",
        "31": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#bimap\"> {@code BiMap}</a>.\n",
        "43": "   * @throws IllegalArgumentException if the given value is already bound to a different key in this\n",
        "44": "   *     bimap. The bimap will remain unmodified in this event. To avoid this exception, call {@link\n",
        "45": "   *     #forcePut} instead.\n",
        "53": "   * An alternate form of {@code put} that silently removes any existing entry with the value {@code\n",
        "54": "   * value} before proceeding with the {@link #put} operation. If the bimap previously contained the\n",
        "55": "   * provided key-value mapping, this method has no effect.\n",
        "57": "   * <p>Note that a successful call to this method could cause the size of the bimap to increase by\n",
        "58": "   * one, stay the same, or even decrease by one.\n",
        "60": "   * <p><b>Warning:</b> If an existing entry with this value is removed, the key for that entry is\n",
        "61": "   * discarded and not returned.\n",
        "65": "   * @return the value which was previously associated with the key, which may be {@code null}, or\n",
        "66": "   *     {@code null} if there was no previous entry\n",
        "77": "   * <p><b>Warning:</b> the results of calling this method may vary depending on the iteration order\n",
        "78": "   * of {@code map}.\n",
        "80": "   * @throws IllegalArgumentException if an attempt to {@code put} any entry fails. Note that some\n",
        "81": "   *     map entries may have been added to the bimap before the exception was thrown.\n",
        "91": "   * <p>Because a bimap has unique values, this method returns a {@link Set}, instead of the {@link\n",
        "92": "   * java.util.Collection} specified in the {@link Map} interface.\n",
        "98": "   * Returns the inverse view of this bimap, which maps each of this bimap's values to its\n",
        "99": "   * associated key. The two bimaps are backed by the same data; any changes to one will appear in\n",
        "100": "   * the other.\n",
        "102": "   * <p><b>Note:</b>There is no guaranteed correspondence between the iteration order of a bimap and\n",
        "103": "   * that of its inverse.\n"
    },
    "removed": {
        "26": " * A bimap (or \"bidirectional map\") is a map that preserves the uniqueness of\n",
        "27": " * its values as well as that of its keys. This constraint enables bimaps to\n",
        "28": " * support an \"inverse view\", which is another bimap containing the same entries\n",
        "29": " * as this bimap but with reversed keys and values.\n",
        "32": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#bimap\">\n",
        "33": " * {@code BiMap}</a>.\n",
        "45": "   * @throws IllegalArgumentException if the given value is already bound to a\n",
        "46": "   *     different key in this bimap. The bimap will remain unmodified in this\n",
        "47": "   *     event. To avoid this exception, call {@link #forcePut} instead.\n",
        "55": "   * An alternate form of {@code put} that silently removes any existing entry\n",
        "56": "   * with the value {@code value} before proceeding with the {@link #put}\n",
        "57": "   * operation. If the bimap previously contained the provided key-value\n",
        "58": "   * mapping, this method has no effect.\n",
        "60": "   * <p>Note that a successful call to this method could cause the size of the\n",
        "61": "   * bimap to increase by one, stay the same, or even decrease by one.\n",
        "63": "   * <p><b>Warning:</b> If an existing entry with this value is removed, the key\n",
        "64": "   * for that entry is discarded and not returned.\n",
        "68": "   * @return the value which was previously associated with the key, which may\n",
        "69": "   *     be {@code null}, or {@code null} if there was no previous entry\n",
        "80": "   * <p><b>Warning:</b> the results of calling this method may vary depending on\n",
        "81": "   * the iteration order of {@code map}.\n",
        "83": "   * @throws IllegalArgumentException if an attempt to {@code put} any\n",
        "84": "   *     entry fails. Note that some map entries may have been added to the\n",
        "85": "   *     bimap before the exception was thrown.\n",
        "95": "   * <p>Because a bimap has unique values, this method returns a {@link Set},\n",
        "96": "   * instead of the {@link java.util.Collection} specified in the {@link Map}\n",
        "97": "   * interface.\n",
        "103": "   * Returns the inverse view of this bimap, which maps each of this bimap's\n",
        "104": "   * values to its associated key. The two bimaps are backed by the same data;\n",
        "105": "   * any changes to one will appear in the other.\n",
        "107": "   * <p><b>Note:</b>There is no guaranteed correspondence between the iteration\n",
        "108": "   * order of a bimap and that of its inverse.\n"
    }
}