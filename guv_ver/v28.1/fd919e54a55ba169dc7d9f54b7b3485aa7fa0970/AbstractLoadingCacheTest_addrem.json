{
    "addition": {
        "35": "    LoadingCache<Object, Object> cache =\n",
        "36": "        new AbstractLoadingCache<Object, Object>() {\n",
        "37": "          @Override\n",
        "38": "          public Object get(Object key) throws ExecutionException {\n",
        "39": "            Object v = valueRef.get();\n",
        "40": "            if (v == null) {\n",
        "41": "              throw new ExecutionException(cause);\n",
        "42": "            }\n",
        "43": "            return v;\n",
        "44": "          }\n",
        "45": "\n",
        "46": "          @Override\n",
        "47": "          public Object getIfPresent(Object key) {\n",
        "48": "            return valueRef.get();\n",
        "49": "          }\n",
        "50": "        };\n",
        "67": "    LoadingCache<Object, Object> cache =\n",
        "68": "        new AbstractLoadingCache<Object, Object>() {\n",
        "69": "          @Override\n",
        "70": "          public Object get(Object key) throws ExecutionException {\n",
        "71": "            Object v = valueRef.get();\n",
        "72": "            if (v == null) {\n",
        "73": "              throw new ExecutionException(cause);\n",
        "74": "            }\n",
        "75": "            return v;\n",
        "76": "          }\n",
        "77": "\n",
        "78": "          @Override\n",
        "79": "          public Object getIfPresent(Object key) {\n",
        "80": "            return valueRef.get();\n",
        "81": "          }\n",
        "82": "        };\n",
        "99": "    LoadingCache<Object, Object> cache =\n",
        "100": "        new AbstractLoadingCache<Object, Object>() {\n",
        "101": "          @Override\n",
        "102": "          public Object get(Object key) throws ExecutionException {\n",
        "103": "            Object v = valueRef.get();\n",
        "104": "            if (v == null) {\n",
        "105": "              throw new ExecutionError(cause);\n",
        "106": "            }\n",
        "107": "            return v;\n",
        "108": "          }\n",
        "109": "\n",
        "110": "          @Override\n",
        "111": "          public Object getIfPresent(Object key) {\n",
        "112": "            return valueRef.get();\n",
        "113": "          }\n",
        "114": "        };\n",
        "131": "    LoadingCache<Object, Object> cache =\n",
        "132": "        new AbstractLoadingCache<Object, Object>() {\n",
        "133": "          @Override\n",
        "134": "          public Object get(Object key) throws ExecutionException {\n",
        "135": "            Object v = valueRef.get();\n",
        "136": "            if (v == null) {\n",
        "137": "              throw new ExecutionException(cause);\n",
        "138": "            }\n",
        "139": "            return v;\n",
        "140": "          }\n",
        "141": "\n",
        "142": "          @Override\n",
        "143": "          public Object getIfPresent(Object key) {\n",
        "144": "            return valueRef.get();\n",
        "145": "          }\n",
        "146": "        };\n"
    },
    "removed": {
        "35": "    LoadingCache<Object, Object> cache = new AbstractLoadingCache<Object, Object>() {\n",
        "36": "      @Override\n",
        "37": "      public Object get(Object key) throws ExecutionException {\n",
        "38": "        Object v = valueRef.get();\n",
        "39": "        if (v == null) {\n",
        "40": "          throw new ExecutionException(cause);\n",
        "41": "        }\n",
        "42": "        return v;\n",
        "43": "      }\n",
        "44": "\n",
        "45": "      @Override\n",
        "46": "      public Object getIfPresent(Object key) {\n",
        "47": "        return valueRef.get();\n",
        "48": "      }\n",
        "49": "    };\n",
        "66": "    LoadingCache<Object, Object> cache = new AbstractLoadingCache<Object, Object>() {\n",
        "67": "      @Override\n",
        "68": "      public Object get(Object key) throws ExecutionException {\n",
        "69": "        Object v = valueRef.get();\n",
        "70": "        if (v == null) {\n",
        "71": "          throw new ExecutionException(cause);\n",
        "72": "        }\n",
        "73": "        return v;\n",
        "74": "      }\n",
        "75": "\n",
        "76": "      @Override\n",
        "77": "      public Object getIfPresent(Object key) {\n",
        "78": "        return valueRef.get();\n",
        "79": "      }\n",
        "80": "    };\n",
        "97": "    LoadingCache<Object, Object> cache = new AbstractLoadingCache<Object, Object>() {\n",
        "98": "      @Override\n",
        "99": "      public Object get(Object key) throws ExecutionException {\n",
        "100": "        Object v = valueRef.get();\n",
        "101": "        if (v == null) {\n",
        "102": "          throw new ExecutionError(cause);\n",
        "103": "        }\n",
        "104": "        return v;\n",
        "105": "      }\n",
        "106": "\n",
        "107": "      @Override\n",
        "108": "      public Object getIfPresent(Object key) {\n",
        "109": "        return valueRef.get();\n",
        "110": "      }\n",
        "111": "    };\n",
        "128": "    LoadingCache<Object, Object> cache = new AbstractLoadingCache<Object, Object>() {\n",
        "129": "      @Override\n",
        "130": "      public Object get(Object key) throws ExecutionException {\n",
        "131": "        Object v = valueRef.get();\n",
        "132": "        if (v == null) {\n",
        "133": "          throw new ExecutionException(cause);\n",
        "134": "        }\n",
        "135": "        return v;\n",
        "136": "      }\n",
        "137": "\n",
        "138": "      @Override\n",
        "139": "      public Object getIfPresent(Object key) {\n",
        "140": "        return valueRef.get();\n",
        "141": "      }\n",
        "142": "    };\n"
    }
}