{
    "addition": {
        "47": "  private static final ImmutableList<Method> testMethods = getTestMethods(CharSourceTester.class);\n",
        "53": "        suite.addTest(\n",
        "54": "            suiteForBytes(\n",
        "55": "                factory, entry.getValue().getBytes(Charsets.UTF_8), name, entry.getKey(), true));\n",
        "63": "  static TestSuite suiteForBytes(\n",
        "64": "      CharSourceFactory factory, byte[] bytes, String name, String desc, boolean slice) {\n",
        "65": "    TestSuite suite = suiteForString(factory, new String(bytes, Charsets.UTF_8), name, desc);\n",
        "67": "    suite.addTest(\n",
        "68": "        ByteSourceTester.suiteForBytes(\n",
        "69": "            byteSourceFactory, bytes, name + \".asByteSource[Charset]\", desc, slice));\n",
        "73": "  static TestSuite suiteForString(\n",
        "74": "      CharSourceFactory factory, String string, String name, String desc) {\n",
        "86": "  public CharSourceTester(\n",
        "87": "      CharSourceFactory factory, String string, String suiteName, String caseDesc, Method method) {\n",
        "182": "    List<String> list =\n",
        "183": "        source.readLines(\n",
        "184": "            new LineProcessor<List<String>>() {\n",
        "185": "              List<String> list = Lists.newArrayList();\n",
        "186": "\n",
        "187": "              @Override\n",
        "188": "              public boolean processLine(String line) throws IOException {\n",
        "189": "                list.add(line);\n",
        "190": "                return true;\n",
        "191": "              }\n",
        "192": "\n",
        "193": "              @Override\n",
        "194": "              public List<String> getResult() {\n",
        "195": "                return list;\n",
        "196": "              }\n",
        "197": "            });\n",
        "203": "    List<String> list =\n",
        "204": "        source.readLines(\n",
        "205": "            new LineProcessor<List<String>>() {\n",
        "206": "              List<String> list = Lists.newArrayList();\n",
        "207": "\n",
        "208": "              @Override\n",
        "209": "              public boolean processLine(String line) throws IOException {\n",
        "210": "                list.add(line);\n",
        "211": "                return false;\n",
        "212": "              }\n",
        "213": "\n",
        "214": "              @Override\n",
        "215": "              public List<String> getResult() {\n",
        "216": "                return list;\n",
        "217": "              }\n",
        "218": "            });\n"
    },
    "removed": {
        "47": "  private static final ImmutableList<Method> testMethods\n",
        "48": "      = getTestMethods(CharSourceTester.class);\n",
        "54": "        suite.addTest(suiteForBytes(factory,\n",
        "55": "            entry.getValue().getBytes(Charsets.UTF_8), name, entry.getKey(), true));\n",
        "63": "  static TestSuite suiteForBytes(CharSourceFactory factory, byte[] bytes,\n",
        "64": "      String name, String desc, boolean slice) {\n",
        "65": "    TestSuite suite = suiteForString(\n",
        "66": "        factory, new String(bytes, Charsets.UTF_8), name, desc);\n",
        "68": "    suite.addTest(ByteSourceTester.suiteForBytes(byteSourceFactory, bytes,\n",
        "69": "        name + \".asByteSource[Charset]\", desc, slice));\n",
        "73": "  static TestSuite suiteForString(CharSourceFactory factory, String string,\n",
        "74": "      String name, String desc) {\n",
        "86": "  public CharSourceTester(CharSourceFactory factory, String string,\n",
        "87": "      String suiteName, String caseDesc, Method method) {\n",
        "182": "    List<String> list = source.readLines(new LineProcessor<List<String>>() {\n",
        "183": "      List<String> list = Lists.newArrayList();\n",
        "184": "\n",
        "185": "      @Override\n",
        "186": "      public boolean processLine(String line) throws IOException {\n",
        "187": "        list.add(line);\n",
        "188": "        return true;\n",
        "189": "      }\n",
        "190": "\n",
        "191": "      @Override\n",
        "192": "      public List<String> getResult() {\n",
        "193": "        return list;\n",
        "194": "      }\n",
        "195": "    });\n",
        "201": "    List<String> list = source.readLines(new LineProcessor<List<String>>() {\n",
        "202": "      List<String> list = Lists.newArrayList();\n",
        "203": "\n",
        "204": "      @Override\n",
        "205": "      public boolean processLine(String line) throws IOException {\n",
        "206": "        list.add(line);\n",
        "207": "        return false;\n",
        "208": "      }\n",
        "209": "\n",
        "210": "      @Override\n",
        "211": "      public List<String> getResult() {\n",
        "212": "        return list;\n",
        "213": "      }\n",
        "214": "    });\n"
    }
}