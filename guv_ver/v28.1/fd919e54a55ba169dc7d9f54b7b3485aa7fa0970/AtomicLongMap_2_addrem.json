{
    "addition": {
        "40": " * documented. Exceptions to this are {@link #containsKey}, {@link #size}, {@link #isEmpty}, {@link\n",
        "41": " * #asMap}, and {@link #toString}.\n",
        "47": " * {@link com.google.common.collect.Multiset} such as {@link\n",
        "48": " * com.google.common.collect.ConcurrentHashMultiset} instead.\n",
        "50": " * <p><b>Warning:</b> Unlike {@code Multiset}, entries whose values are zero are not automatically\n",
        "64": "  /** Creates an {@code AtomicLongMap}. */\n",
        "69": "  /** Creates an {@code AtomicLongMap} with the same mappings as the specified {@code Map}. */\n",
        "135": "   * Updates the value currently associated with {@code key} with the specified function, and\n",
        "136": "   * returns the new value. If there is not currently a value associated with {@code key}, the\n",
        "137": "   * function is applied to {@code 0L}.\n",
        "149": "   * Updates the value currently associated with {@code key} with the specified function, and\n",
        "150": "   * returns the old value. If there is not currently a value associated with {@code key}, the\n",
        "151": "   * function is applied to {@code 0L}.\n",
        "170": "   * Updates the value currently associated with {@code key} by combining it with {@code x} via the\n",
        "171": "   * specified accumulator function, returning the new value. The previous value associated with\n",
        "172": "   * {@code key} (or zero, if there is none) is passed as the first argument to {@code\n",
        "173": "   * accumulatorFunction}, and {@code x} is passed as the second argument.\n",
        "184": "   * Updates the value currently associated with {@code key} by combining it with {@code x} via the\n",
        "185": "   * specified accumulator function, returning the old value. The previous value associated with\n",
        "186": "   * {@code key} (or zero, if there is none) is passed as the first argument to {@code\n",
        "187": "   * accumulatorFunction}, and {@code x} is passed as the second argument.\n",
        "217": "   * Removes and returns the value associated with {@code key}. If {@code key} is not in the map,\n",
        "218": "   * this method has no effect and returns zero.\n",
        "240": "   * <p>This method is not atomic: the map may be visible in intermediate states, where some of the\n",
        "241": "   * zero values have been removed and others have not.\n",
        "258": "  /** Returns a live, read-only view of the map backing this {@code AtomicLongMap}. */\n",
        "268": "  /** Returns true if this map contains a mapping for the specified key. */\n",
        "274": "   * Returns the number of key-value mappings in this map. If the map contains more than {@code\n",
        "275": "   * Integer.MAX_VALUE} elements, returns {@code Integer.MAX_VALUE}.\n",
        "281": "  /** Returns {@code true} if this map contains no key-value mappings. */\n",
        "303": "   * zero, associate it with {@code newValue}. Returns the previous value associated with {@code\n",
        "304": "   * key}, or zero if there was no mapping for {@code key}.\n",
        "323": "   * If {@code (key, expectedOldValue)} is currently in the map, this method replaces {@code\n",
        "324": "   * expectedOldValue} with {@code newValue} and returns true; otherwise, this method returns false.\n",
        "326": "   * <p>If {@code expectedOldValue} is zero, this method will succeed if {@code (key, zero)} is\n",
        "327": "   * currently in the map, or if {@code key} is not in the map at all.\n",
        "338": "   * If {@code (key, value)} is currently in the map, this method removes it and returns true;\n",
        "339": "   * otherwise, this method returns false.\n"
    },
    "removed": {
        "40": " * documented. Exceptions to this are {@link #containsKey}, {@link #size}, {@link #isEmpty},\n",
        "41": " * {@link #asMap}, and {@link #toString}.\n",
        "47": " * {@link com.google.common.collect.Multiset} such as\n",
        "48": " * {@link com.google.common.collect.ConcurrentHashMultiset} instead.\n",
        "50": " * <b>Warning:</b> Unlike {@code Multiset}, entries whose values are zero are not automatically\n",
        "64": "  /**\n",
        "65": "   * Creates an {@code AtomicLongMap}.\n",
        "66": "   */\n",
        "71": "  /**\n",
        "72": "   * Creates an {@code AtomicLongMap} with the same mappings as the specified {@code Map}.\n",
        "73": "   */\n",
        "139": "   * Updates the value currently associated with {@code key} with the specified function,\n",
        "140": "   * and returns the new value.  If there is not currently a value associated with {@code key},\n",
        "141": "   * the function is applied to {@code 0L}.\n",
        "153": "   * Updates the value currently associated with {@code key} with the specified function,\n",
        "154": "   * and returns the old value.  If there is not currently a value associated with {@code key},\n",
        "155": "   * the function is applied to {@code 0L}.\n",
        "174": "   * Updates the value currently associated with {@code key} by combining it with {@code x}\n",
        "175": "   * via the specified accumulator function, returning the new value.  The previous value\n",
        "176": "   * associated with {@code key} (or zero, if there is none) is passed as the first argument\n",
        "177": "   * to {@code accumulatorFunction}, and {@code x} is passed as the second argument.\n",
        "188": "   * Updates the value currently associated with {@code key} by combining it with {@code x}\n",
        "189": "   * via the specified accumulator function, returning the old value.  The previous value\n",
        "190": "   * associated with {@code key} (or zero, if there is none) is passed as the first argument\n",
        "191": "   * to {@code accumulatorFunction}, and {@code x} is passed as the second argument.\n",
        "221": "   * Removes and returns the value associated with {@code key}. If {@code key} is not\n",
        "222": "   * in the map, this method has no effect and returns zero.\n",
        "244": "   * <p>This method is not atomic: the map may be visible in intermediate states, where some\n",
        "245": "   * of the zero values have been removed and others have not.\n",
        "262": "  /**\n",
        "263": "   * Returns a live, read-only view of the map backing this {@code AtomicLongMap}.\n",
        "264": "   */\n",
        "274": "  /**\n",
        "275": "   * Returns true if this map contains a mapping for the specified key.\n",
        "276": "   */\n",
        "282": "   * Returns the number of key-value mappings in this map. If the map contains more than\n",
        "283": "   * {@code Integer.MAX_VALUE} elements, returns {@code Integer.MAX_VALUE}.\n",
        "289": "  /**\n",
        "290": "   * Returns {@code true} if this map contains no key-value mappings.\n",
        "291": "   */\n",
        "313": "   * zero, associate it with {@code newValue}. Returns the previous value associated with\n",
        "314": "   * {@code key}, or zero if there was no mapping for {@code key}.\n",
        "333": "   * If {@code (key, expectedOldValue)} is currently in the map, this method replaces\n",
        "334": "   * {@code expectedOldValue} with {@code newValue} and returns true; otherwise, this method\n",
        "335": "   * returns false.\n",
        "337": "   * <p>If {@code expectedOldValue} is zero, this method will succeed if {@code (key, zero)}\n",
        "338": "   * is currently in the map, or if {@code key} is not in the map at all.\n",
        "349": "   * If {@code (key, value)} is currently in the map, this method removes it and returns\n",
        "350": "   * true; otherwise, this method returns false.\n"
    }
}