{
    "addition": {
        "48": "  private static final class ImmutableSetMultimapGenerator extends TestStringSetMultimapGenerator {\n",
        "59": "  private static final class ImmutableSetMultimapCopyOfEntriesGenerator\n",
        "60": "      extends TestStringSetMultimapGenerator {\n",
        "71": "    suite.addTest(\n",
        "72": "        SetMultimapTestSuiteBuilder.using(new ImmutableSetMultimapGenerator())\n",
        "73": "            .named(\"ImmutableSetMultimap\")\n",
        "74": "            .withFeatures(ALLOWS_ANY_NULL_QUERIES, KNOWN_ORDER, SERIALIZABLE, CollectionSize.ANY)\n",
        "75": "            .createTestSuite());\n",
        "76": "    suite.addTest(\n",
        "77": "        SetMultimapTestSuiteBuilder.using(new ImmutableSetMultimapCopyOfEntriesGenerator())\n",
        "78": "            .named(\"ImmutableSetMultimap.copyOf[Iterable<Entry>]\")\n",
        "79": "            .withFeatures(ALLOWS_ANY_NULL_QUERIES, KNOWN_ORDER, SERIALIZABLE, CollectionSize.ANY)\n",
        "85": "    ImmutableSetMultimap<String, Integer> multimap =\n",
        "86": "        new Builder<String, Integer>().put(Maps.immutableEntry(\"one\", 1)).build();\n",
        "112": "    Entry<String, Integer> entry =\n",
        "113": "        new AbstractMapEntry<String, Integer>() {\n",
        "114": "          @Override\n",
        "115": "          public String getKey() {\n",
        "116": "            return holder.string;\n",
        "117": "          }\n",
        "118": "\n",
        "119": "          @Override\n",
        "120": "          public Integer getValue() {\n",
        "121": "            return 1;\n",
        "122": "          }\n",
        "123": "        };\n",
        "131": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "142": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "162": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "172": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "181": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "196": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "205": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "209": "    } catch (NullPointerException expected) {\n",
        "210": "    }\n",
        "214": "    } catch (NullPointerException expected) {\n",
        "215": "    }\n",
        "219": "    } catch (NullPointerException expected) {\n",
        "220": "    }\n",
        "224": "    } catch (NullPointerException expected) {\n",
        "225": "    }\n",
        "231": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "235": "    } catch (NullPointerException expected) {\n",
        "236": "    }\n",
        "240": "    } catch (NullPointerException expected) {\n",
        "241": "    }\n",
        "245": "    } catch (NullPointerException expected) {\n",
        "246": "    }\n",
        "250": "    } catch (NullPointerException expected) {\n",
        "251": "    }\n",
        "255": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "274": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "278": "    builder.orderKeysBy(\n",
        "279": "        new Ordering<String>() {\n",
        "280": "          @Override\n",
        "281": "          public int compare(String left, String right) {\n",
        "282": "            return left.length() - right.length();\n",
        "283": "          }\n",
        "284": "        });\n",
        "299": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "313": "    assertEquals(\n",
        "314": "        Collections.reverseOrder(), ((ImmutableSortedSet<Integer>) multimap.get(\"a\")).comparator());\n",
        "316": "    assertEquals(\n",
        "317": "        Collections.reverseOrder(), ((ImmutableSortedSet<Integer>) multimap.get(\"x\")).comparator());\n",
        "319": "    assertEquals(\n",
        "320": "        Collections.reverseOrder(),\n",
        "325": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "340": "    assertEquals(\n",
        "341": "        Collections.reverseOrder(), ((ImmutableSortedSet<Integer>) multimap.get(\"a\")).comparator());\n",
        "343": "    assertEquals(\n",
        "344": "        Collections.reverseOrder(), ((ImmutableSortedSet<Integer>) multimap.get(\"x\")).comparator());\n",
        "346": "    assertEquals(\n",
        "347": "        Collections.reverseOrder(),\n",
        "367": "    ImmutableSetMultimap<Object, Object> copy = ImmutableSetMultimap.copyOf(input);\n",
        "389": "    } catch (NullPointerException expected) {\n",
        "390": "    }\n",
        "399": "    } catch (NullPointerException expected) {\n",
        "400": "    }\n",
        "422": "    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(multimap, \"foo\", 1);\n",
        "442": "    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(multimap, \"bar\", 2);\n",
        "457": "                .put(\"bar\", 2)\n",
        "458": "                .put(\"foo\", 1)\n",
        "459": "                .put(\"foo\", 3)\n",
        "460": "                .build(),\n",
        "462": "                .put(\"bar\", 2)\n",
        "463": "                .put(\"foo\", 3)\n",
        "464": "                .put(\"foo\", 1)\n",
        "465": "                .build())\n",
        "466": "        .addEqualityGroup(\n",
        "467": "            ImmutableSetMultimap.<String, Integer>builder()\n",
        "468": "                .put(\"foo\", 2)\n",
        "469": "                .put(\"foo\", 3)\n",
        "470": "                .put(\"foo\", 1)\n",
        "471": "                .build())\n",
        "472": "        .addEqualityGroup(\n",
        "473": "            ImmutableSetMultimap.<String, Integer>builder().put(\"bar\", 2).put(\"foo\", 3).build())\n",
        "478": "    assertMultimapEquals(ImmutableSetMultimap.of(\"one\", 1), \"one\", 1);\n",
        "479": "    assertMultimapEquals(ImmutableSetMultimap.of(\"one\", 1, \"two\", 2), \"one\", 1, \"two\", 2);\n",
        "481": "        ImmutableSetMultimap.of(\"one\", 1, \"two\", 2, \"three\", 3), \"one\", 1, \"two\", 2, \"three\", 3);\n",
        "484": "        \"one\",\n",
        "485": "        1,\n",
        "486": "        \"two\",\n",
        "487": "        2,\n",
        "488": "        \"three\",\n",
        "489": "        3,\n",
        "490": "        \"four\",\n",
        "491": "        4);\n",
        "493": "        ImmutableSetMultimap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5),\n",
        "494": "        \"one\",\n",
        "495": "        1,\n",
        "496": "        \"two\",\n",
        "497": "        2,\n",
        "498": "        \"three\",\n",
        "499": "        3,\n",
        "500": "        \"four\",\n",
        "501": "        4,\n",
        "502": "        \"five\",\n",
        "503": "        5);\n",
        "510": "    assertEquals(ImmutableSetMultimap.of(1, \"one\"), ImmutableSetMultimap.of(\"one\", 1).inverse());\n",
        "526": "  private static <K, V> void assertMultimapEquals(\n",
        "527": "      Multimap<K, V> multimap, Object... alternatingKeysAndValues) {\n",
        "540": "    assertEquals(multimap.size(), SerializableTester.reserialize(multimap).size());\n",
        "545": "    Collection<Integer> valuesCopy = SerializableTester.reserialize(multimap.values());\n",
        "546": "    assertEquals(HashMultiset.create(multimap.values()), HashMultiset.create(valuesCopy));\n",
        "557": "    Multimap<String, Integer> multimap =\n",
        "558": "        new ImmutableSetMultimap.Builder<String, Integer>()\n",
        "559": "            .orderKeysBy(Ordering.natural().reverse())\n",
        "560": "            .orderValuesBy(Ordering.usingToString())\n",
        "561": "            .put(\"a\", 2)\n",
        "562": "            .put(\"a\", 10)\n",
        "563": "            .put(\"b\", 1)\n",
        "564": "            .build();\n",
        "568": "    assertEquals(\n",
        "569": "        Ordering.usingToString(), ((ImmutableSortedSet<Integer>) multimap.get(\"a\")).comparator());\n",
        "570": "    assertEquals(\n",
        "571": "        Ordering.usingToString(), ((ImmutableSortedSet<Integer>) multimap.get(\"z\")).comparator());\n",
        "576": "        .put(\"foo\", 1)\n",
        "577": "        .put(\"bar\", 2)\n",
        "578": "        .put(\"foo\", 3)\n",
        "579": "        .build();\n"
    },
    "removed": {
        "49": "  private static final class ImmutableSetMultimapGenerator extends\n",
        "50": "      TestStringSetMultimapGenerator {\n",
        "61": "  private static final class ImmutableSetMultimapCopyOfEntriesGenerator extends\n",
        "62": "      TestStringSetMultimapGenerator {\n",
        "73": "    suite.addTest(SetMultimapTestSuiteBuilder.using(new ImmutableSetMultimapGenerator())\n",
        "74": "        .named(\"ImmutableSetMultimap\")\n",
        "75": "        .withFeatures(\n",
        "76": "            ALLOWS_ANY_NULL_QUERIES,\n",
        "77": "            KNOWN_ORDER,\n",
        "78": "            SERIALIZABLE,\n",
        "79": "            CollectionSize.ANY)\n",
        "80": "        .createTestSuite());\n",
        "81": "    suite.addTest(SetMultimapTestSuiteBuilder.using(\n",
        "82": "            new ImmutableSetMultimapCopyOfEntriesGenerator())\n",
        "83": "        .named(\"ImmutableSetMultimap.copyOf[Iterable<Entry>]\")\n",
        "84": "        .withFeatures(\n",
        "85": "            ALLOWS_ANY_NULL_QUERIES,\n",
        "86": "            KNOWN_ORDER,\n",
        "87": "            SERIALIZABLE,\n",
        "88": "            CollectionSize.ANY)\n",
        "94": "    ImmutableSetMultimap<String, Integer> multimap = new Builder<String, Integer>()\n",
        "95": "        .put(Maps.immutableEntry(\"one\", 1))\n",
        "96": "        .build();\n",
        "122": "    Entry<String, Integer> entry = new AbstractMapEntry<String, Integer>() {\n",
        "123": "      @Override public String getKey() {\n",
        "124": "        return holder.string;\n",
        "125": "      }\n",
        "126": "      @Override public Integer getValue() {\n",
        "127": "        return 1;\n",
        "128": "      }\n",
        "129": "    };\n",
        "137": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "138": "        = ImmutableSetMultimap.builder();\n",
        "149": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "150": "        = ImmutableSetMultimap.builder();\n",
        "170": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "171": "        = ImmutableSetMultimap.builder();\n",
        "181": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "182": "        = ImmutableSetMultimap.builder();\n",
        "191": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "192": "        = ImmutableSetMultimap.builder();\n",
        "207": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "208": "        = ImmutableSetMultimap.builder();\n",
        "217": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "218": "        = ImmutableSetMultimap.builder();\n",
        "222": "    } catch (NullPointerException expected) {}\n",
        "226": "    } catch (NullPointerException expected) {}\n",
        "230": "    } catch (NullPointerException expected) {}\n",
        "234": "    } catch (NullPointerException expected) {}\n",
        "240": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "241": "        = ImmutableSetMultimap.builder();\n",
        "245": "    } catch (NullPointerException expected) {}\n",
        "249": "    } catch (NullPointerException expected) {}\n",
        "253": "    } catch (NullPointerException expected) {}\n",
        "257": "    } catch (NullPointerException expected) {}\n",
        "261": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "262": "        = ImmutableSetMultimap.builder();\n",
        "281": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "282": "        = ImmutableSetMultimap.builder();\n",
        "286": "    builder.orderKeysBy(new Ordering<String>() {\n",
        "287": "      @Override\n",
        "288": "      public int compare(String left, String right) {\n",
        "289": "        return left.length() - right.length();\n",
        "290": "      }\n",
        "291": "    });\n",
        "306": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "307": "        = ImmutableSetMultimap.builder();\n",
        "321": "    assertEquals(Collections.reverseOrder(),\n",
        "322": "        ((ImmutableSortedSet<Integer>) multimap.get(\"a\")).comparator());\n",
        "324": "    assertEquals(Collections.reverseOrder(),\n",
        "325": "        ((ImmutableSortedSet<Integer>) multimap.get(\"x\")).comparator());\n",
        "327": "    assertEquals(Collections.reverseOrder(),\n",
        "332": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "333": "        = ImmutableSetMultimap.builder();\n",
        "348": "    assertEquals(Collections.reverseOrder(),\n",
        "349": "        ((ImmutableSortedSet<Integer>) multimap.get(\"a\")).comparator());\n",
        "351": "    assertEquals(Collections.reverseOrder(),\n",
        "352": "        ((ImmutableSortedSet<Integer>) multimap.get(\"x\")).comparator());\n",
        "354": "    assertEquals(Collections.reverseOrder(),\n",
        "374": "    ImmutableSetMultimap<Object, Object> copy\n",
        "375": "        = ImmutableSetMultimap.copyOf(input);\n",
        "397": "    } catch (NullPointerException expected) {}\n",
        "406": "    } catch (NullPointerException expected) {}\n",
        "428": "    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(\n",
        "429": "        multimap, \"foo\", 1);\n",
        "449": "    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(\n",
        "450": "        multimap, \"bar\", 2);\n",
        "465": "                .put(\"bar\", 2).put(\"foo\", 1).put(\"foo\", 3).build(),\n",
        "467": "                .put(\"bar\", 2).put(\"foo\", 3).put(\"foo\", 1).build())\n",
        "468": "        .addEqualityGroup(ImmutableSetMultimap.<String, Integer>builder()\n",
        "469": "            .put(\"foo\", 2).put(\"foo\", 3).put(\"foo\", 1).build())\n",
        "470": "        .addEqualityGroup(ImmutableSetMultimap.<String, Integer>builder()\n",
        "471": "            .put(\"bar\", 2).put(\"foo\", 3).build())\n",
        "477": "        ImmutableSetMultimap.of(\"one\", 1),\n",
        "478": "        \"one\", 1);\n",
        "479": "    assertMultimapEquals(\n",
        "480": "        ImmutableSetMultimap.of(\"one\", 1, \"two\", 2),\n",
        "481": "        \"one\", 1, \"two\", 2);\n",
        "482": "    assertMultimapEquals(\n",
        "483": "        ImmutableSetMultimap.of(\"one\", 1, \"two\", 2, \"three\", 3),\n",
        "484": "        \"one\", 1, \"two\", 2, \"three\", 3);\n",
        "487": "        \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4);\n",
        "489": "        ImmutableSetMultimap.of(\n",
        "490": "            \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5),\n",
        "491": "        \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "498": "    assertEquals(\n",
        "499": "        ImmutableSetMultimap.of(1, \"one\"),\n",
        "500": "        ImmutableSetMultimap.of(\"one\", 1).inverse());\n",
        "516": "  private static <K, V> void assertMultimapEquals(Multimap<K, V> multimap,\n",
        "517": "      Object... alternatingKeysAndValues) {\n",
        "530": "    assertEquals(multimap.size(),\n",
        "531": "        SerializableTester.reserialize(multimap).size());\n",
        "536": "    Collection<Integer> valuesCopy\n",
        "537": "        = SerializableTester.reserialize(multimap.values());\n",
        "538": "    assertEquals(HashMultiset.create(multimap.values()),\n",
        "539": "        HashMultiset.create(valuesCopy));\n",
        "550": "    Multimap<String, Integer> multimap = new ImmutableSetMultimap.Builder<String, Integer>()\n",
        "551": "        .orderKeysBy(Ordering.natural().reverse())\n",
        "552": "        .orderValuesBy(Ordering.usingToString())\n",
        "553": "        .put(\"a\", 2)\n",
        "554": "        .put(\"a\", 10)\n",
        "555": "        .put(\"b\", 1)\n",
        "556": "        .build();\n",
        "560": "    assertEquals(Ordering.usingToString(),\n",
        "561": "        ((ImmutableSortedSet<Integer>) multimap.get(\"a\")).comparator());\n",
        "562": "    assertEquals(Ordering.usingToString(),\n",
        "563": "        ((ImmutableSortedSet<Integer>) multimap.get(\"z\")).comparator());\n",
        "568": "        .put(\"foo\", 1).put(\"bar\", 2).put(\"foo\", 3).build();\n"
    }
}