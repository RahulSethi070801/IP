{
    "addition": {
        "36": "  private static final Logger logger = Logger.getLogger(InterruptionUtil.class.getName());\n",
        "38": "  /** Runnable which will interrupt the target thread repeatedly when run. */\n",
        "69": "  /** Interrupts the current thread after sleeping for the specified delay. */\n",
        "73": "    new Thread(\n",
        "74": "            new Runnable() {\n",
        "75": "              @Override\n",
        "76": "              public void run() {\n",
        "77": "                try {\n",
        "78": "                  unit.sleep(time);\n",
        "79": "                } catch (InterruptedException wontHappen) {\n",
        "80": "                  throw new AssertionError(wontHappen);\n",
        "81": "                }\n",
        "82": "                interruptee.interrupt();\n",
        "83": "              }\n",
        "84": "            })\n",
        "85": "        .start();\n",
        "94": "    tearDownAccepter.addTearDown(\n",
        "95": "        new TearDown() {\n",
        "96": "          @Override\n",
        "97": "          public void tearDown() throws Exception {\n",
        "98": "            interruptingTask.stopInterrupting();\n",
        "99": "            interruptingThread.interrupt();\n",
        "100": "            joinUninterruptibly(interruptingThread, 2500, MILLISECONDS);\n",
        "101": "            Thread.interrupted();\n",
        "102": "            if (interruptingThread.isAlive()) {\n",
        "103": "              // This will be hidden by test-output redirection:\n",
        "104": "              logger.severe(\"InterruptenatorTask did not exit; future tests may be affected\");\n",
        "105": "              /*\n",
        "106": "               * This won't do any good under JUnit 3, but I'll leave it around in\n",
        "107": "               * case we ever switch to JUnit 4:\n",
        "108": "               */\n",
        "109": "              fail();\n",
        "110": "            }\n",
        "111": "          }\n",
        "112": "        });\n",
        "116": "  private static void joinUninterruptibly(Thread thread, long timeout, TimeUnit unit) {\n"
    },
    "removed": {
        "36": "  private static final Logger logger =\n",
        "37": "      Logger.getLogger(InterruptionUtil.class.getName());\n",
        "39": "  /**\n",
        "40": "   * Runnable which will interrupt the target thread repeatedly when run.\n",
        "41": "   */\n",
        "72": "  /**\n",
        "73": "   * Interrupts the current thread after sleeping for the specified delay.\n",
        "74": "   */\n",
        "78": "    new Thread(new Runnable() {\n",
        "79": "      @Override\n",
        "80": "      public void run() {\n",
        "81": "        try {\n",
        "82": "          unit.sleep(time);\n",
        "83": "        } catch (InterruptedException wontHappen) {\n",
        "84": "          throw new AssertionError(wontHappen);\n",
        "85": "        }\n",
        "86": "        interruptee.interrupt();\n",
        "87": "      }\n",
        "88": "    }).start();\n",
        "97": "    tearDownAccepter.addTearDown(new TearDown() {\n",
        "98": "      @Override public void tearDown() throws Exception {\n",
        "99": "        interruptingTask.stopInterrupting();\n",
        "100": "        interruptingThread.interrupt();\n",
        "101": "        joinUninterruptibly(interruptingThread, 2500, MILLISECONDS);\n",
        "102": "        Thread.interrupted();\n",
        "103": "        if (interruptingThread.isAlive()) {\n",
        "104": "          // This will be hidden by test-output redirection:\n",
        "105": "          logger.severe(\n",
        "106": "              \"InterruptenatorTask did not exit; future tests may be affected\");\n",
        "107": "          /*\n",
        "108": "           * This won't do any good under JUnit 3, but I'll leave it around in\n",
        "109": "           * case we ever switch to JUnit 4:\n",
        "110": "           */\n",
        "111": "          fail();\n",
        "112": "        }\n",
        "113": "      }\n",
        "114": "    });\n",
        "118": "  private static void joinUninterruptibly(\n",
        "119": "      Thread thread, long timeout, TimeUnit unit) {\n"
    }
}