{
    "addition": {
        "72": "    suite.addTest(\n",
        "73": "        MapTestSuiteBuilder.using(new ImmutableMapGenerator())\n",
        "74": "            .withFeatures(\n",
        "75": "                CollectionSize.ANY,\n",
        "76": "                CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "77": "                CollectionFeature.KNOWN_ORDER,\n",
        "78": "                MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "79": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "80": "            .named(\"ImmutableMap\")\n",
        "81": "            .createTestSuite());\n",
        "82": "\n",
        "83": "    suite.addTest(\n",
        "84": "        MapTestSuiteBuilder.using(new ImmutableMapCopyOfGenerator())\n",
        "85": "            .withFeatures(\n",
        "86": "                CollectionSize.ANY,\n",
        "87": "                CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "88": "                CollectionFeature.KNOWN_ORDER,\n",
        "89": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "90": "            .named(\"ImmutableMap.copyOf[Map]\")\n",
        "91": "            .createTestSuite());\n",
        "92": "\n",
        "93": "    suite.addTest(\n",
        "94": "        MapTestSuiteBuilder.using(new ImmutableMapCopyOfEntriesGenerator())\n",
        "95": "            .withFeatures(\n",
        "96": "                CollectionSize.ANY,\n",
        "97": "                MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "98": "                CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "99": "                CollectionFeature.KNOWN_ORDER,\n",
        "100": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "101": "            .named(\"ImmutableMap.copyOf[Iterable<Entry>]\")\n",
        "102": "            .createTestSuite());\n",
        "103": "\n",
        "104": "    suite.addTest(\n",
        "105": "        MapTestSuiteBuilder.using(new ImmutableMapCopyOfEnumMapGenerator())\n",
        "106": "            .withFeatures(\n",
        "107": "                CollectionSize.ANY,\n",
        "108": "                CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "109": "                CollectionFeature.KNOWN_ORDER,\n",
        "110": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "111": "            .named(\"ImmutableMap.copyOf[EnumMap]\")\n",
        "112": "            .createTestSuite());\n",
        "113": "\n",
        "114": "    suite.addTest(\n",
        "115": "        MapTestSuiteBuilder.using(new ImmutableMapValuesAsSingletonSetGenerator())\n",
        "116": "            .withFeatures(\n",
        "117": "                CollectionSize.ANY,\n",
        "118": "                MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "119": "                CollectionFeature.KNOWN_ORDER,\n",
        "120": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "121": "            .named(\"ImmutableMap.asMultimap.asMap\")\n",
        "122": "            .createTestSuite());\n",
        "123": "\n",
        "124": "    suite.addTest(\n",
        "125": "        CollectionTestSuiteBuilder.using(new ImmutableMapUnhashableValuesGenerator())\n",
        "126": "            .withFeatures(\n",
        "127": "                CollectionSize.ANY,\n",
        "128": "                CollectionFeature.KNOWN_ORDER,\n",
        "129": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "130": "            .named(\"ImmutableMap.values, unhashable\")\n",
        "131": "            .createTestSuite());\n",
        "132": "\n",
        "133": "    suite.addTest(\n",
        "134": "        ListTestSuiteBuilder.using(new ImmutableMapKeyListGenerator())\n",
        "135": "            .named(\"ImmutableMap.keySet.asList\")\n",
        "136": "            .withFeatures(\n",
        "137": "                CollectionSize.ANY,\n",
        "138": "                CollectionFeature.SERIALIZABLE,\n",
        "139": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "140": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "141": "            .createTestSuite());\n",
        "142": "\n",
        "143": "    suite.addTest(\n",
        "144": "        ListTestSuiteBuilder.using(new ImmutableMapEntryListGenerator())\n",
        "145": "            .named(\"ImmutableMap.entrySet.asList\")\n",
        "146": "            .withFeatures(\n",
        "147": "                CollectionSize.ANY,\n",
        "148": "                CollectionFeature.SERIALIZABLE,\n",
        "149": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "150": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "151": "            .createTestSuite());\n",
        "152": "\n",
        "153": "    suite.addTest(\n",
        "154": "        ListTestSuiteBuilder.using(new ImmutableMapValueListGenerator())\n",
        "155": "            .named(\"ImmutableMap.values.asList\")\n",
        "156": "            .withFeatures(\n",
        "157": "                CollectionSize.ANY,\n",
        "158": "                CollectionFeature.SERIALIZABLE,\n",
        "159": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "160": "            .createTestSuite());\n",
        "165": "  public abstract static class AbstractMapTests<K, V> extends MapInterfaceTest<K, V> {\n",
        "170": "    @Override\n",
        "171": "    protected Map<K, V> makeEmptyMap() {\n",
        "177": "    @Override\n",
        "178": "    protected void assertMoreInvariants(Map<K, V> map) {\n",
        "181": "        assertEquals(entry.getKey() + \"=\" + entry.getValue(), entry.toString());\n",
        "184": "      assertEquals(\"{\" + joiner.join(map.entrySet()) + \"}\", map.toString());\n",
        "185": "      assertEquals(\"[\" + joiner.join(map.entrySet()) + \"]\", map.entrySet().toString());\n",
        "186": "      assertEquals(\"[\" + joiner.join(map.keySet()) + \"]\", map.keySet().toString());\n",
        "187": "      assertEquals(\"[\" + joiner.join(map.values()) + \"]\", map.values().toString());\n",
        "195": "    @Override\n",
        "196": "    protected Map<String, Integer> makeEmptyMap() {\n",
        "200": "    @Override\n",
        "201": "    protected Map<String, Integer> makePopulatedMap() {\n",
        "205": "    @Override\n",
        "206": "    protected String getKeyNotInPopulatedMap() {\n",
        "210": "    @Override\n",
        "211": "    protected Integer getValueNotInPopulatedMap() {\n",
        "216": "  public static class SingletonMapTests extends AbstractMapTests<String, Integer> {\n",
        "217": "    @Override\n",
        "218": "    protected Map<String, Integer> makePopulatedMap() {\n",
        "222": "    @Override\n",
        "223": "    protected String getKeyNotInPopulatedMap() {\n",
        "227": "    @Override\n",
        "228": "    protected Integer getValueNotInPopulatedMap() {\n",
        "235": "    @Override\n",
        "236": "    protected Map<String, Integer> makePopulatedMap() {\n",
        "237": "      return SerializableTester.reserialize(ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3));\n",
        "240": "    @Override\n",
        "241": "    protected String getKeyNotInPopulatedMap() {\n",
        "245": "    @Override\n",
        "246": "    protected Integer getValueNotInPopulatedMap() {\n",
        "251": "  public static class MapTestsWithBadHashes extends AbstractMapTests<Object, Integer> {\n",
        "253": "    @Override\n",
        "254": "    protected Map<Object, Integer> makeEmptyMap() {\n",
        "258": "    @Override\n",
        "259": "    protected Map<Object, Integer> makePopulatedMap() {\n",
        "268": "    @Override\n",
        "269": "    protected Object getKeyNotInPopulatedMap() {\n",
        "273": "    @Override\n",
        "274": "    protected Integer getValueNotInPopulatedMap() {\n",
        "282": "    @Override\n",
        "283": "    protected Map<Integer, UnhashableObject> makeEmptyMap() {\n",
        "287": "    @Override\n",
        "288": "    protected Map<Integer, UnhashableObject> makePopulatedMap() {\n",
        "290": "      return ImmutableMap.of(0, unhashables.e0(), 1, unhashables.e1(), 2, unhashables.e2());\n",
        "293": "    @Override\n",
        "294": "    protected Integer getKeyNotInPopulatedMap() {\n",
        "298": "    @Override\n",
        "299": "    protected UnhashableObject getValueNotInPopulatedMap() {\n",
        "306": "    @Override\n",
        "307": "    protected Map<Integer, UnhashableObject> makePopulatedMap() {\n",
        "315": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>().build();\n",
        "320": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>().put(\"one\", 1).build();\n",
        "325": "      ImmutableMap<String, Integer> map =\n",
        "326": "          new Builder<String, Integer>()\n",
        "327": "              .put(\"one\", 1)\n",
        "328": "              .put(\"two\", 2)\n",
        "329": "              .put(\"three\", 3)\n",
        "330": "              .put(\"four\", 4)\n",
        "331": "              .put(\"five\", 5)\n",
        "332": "              .build();\n",
        "333": "      assertMapEquals(map, \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "352": "      ImmutableMap<String, Integer> map =\n",
        "353": "          new Builder<String, Integer>()\n",
        "354": "              .orderEntriesByValue(Ordering.natural())\n",
        "355": "              .put(\"three\", 3)\n",
        "356": "              .put(\"one\", 1)\n",
        "357": "              .put(\"five\", 5)\n",
        "358": "              .put(\"four\", 4)\n",
        "359": "              .put(\"two\", 2)\n",
        "360": "              .build();\n",
        "361": "      assertMapEquals(map, \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "365": "      Builder<String, Integer> builder =\n",
        "366": "          new Builder<String, Integer>(2).put(\"four\", 4).put(\"one\", 1);\n",
        "375": "      ImmutableMap.Builder<String, Integer> builder =\n",
        "376": "          new Builder<String, Integer>().orderEntriesByValue(Ordering.natural());\n",
        "380": "      } catch (IllegalStateException expected) {\n",
        "381": "      }\n",
        "385": "      ImmutableMap<String, Integer> map =\n",
        "386": "          new Builder<String, Integer>().put(Maps.immutableEntry(\"one\", 1)).build();\n",
        "412": "      Entry<String, Integer> entry =\n",
        "413": "          new AbstractMapEntry<String, Integer>() {\n",
        "414": "            @Override\n",
        "415": "            public String getKey() {\n",
        "416": "              return holder.string;\n",
        "417": "            }\n",
        "418": "\n",
        "419": "            @Override\n",
        "420": "            public Integer getValue() {\n",
        "421": "              return 1;\n",
        "422": "            }\n",
        "423": "          };\n",
        "431": "      ImmutableMap<String, Integer> map =\n",
        "432": "          new Builder<String, Integer>().putAll(Collections.<String, Integer>emptyMap()).build();\n",
        "445": "      ImmutableMap<String, Integer> map =\n",
        "446": "          new Builder<String, Integer>().putAll(toPut).putAll(moreToPut).build();\n",
        "447": "      assertMapEquals(map, \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "452": "      ImmutableMap<String, Integer> mapOne = builder.put(\"one\", 1).put(\"two\", 2).build();\n",
        "453": "      ImmutableMap<String, Integer> mapTwo = builder.put(\"three\", 3).put(\"four\", 4).build();\n",
        "464": "      } catch (NullPointerException expected) {\n",
        "465": "      }\n",
        "475": "      } catch (NullPointerException expected) {\n",
        "476": "      }\n",
        "507": "      } catch (NullPointerException expected) {\n",
        "508": "      }\n",
        "550": "      Builder<String, Integer> builder =\n",
        "551": "          new Builder<String, Integer>()\n",
        "552": "              .put(\"one\", 1)\n",
        "553": "              .put(\"one\", 1); // throwing on this line would be even better\n",
        "563": "      assertMapEquals(ImmutableMap.of(\"one\", 1), \"one\", 1);\n",
        "564": "      assertMapEquals(ImmutableMap.of(\"one\", 1, \"two\", 2), \"one\", 1, \"two\", 2);\n",
        "566": "          ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3), \"one\", 1, \"two\", 2, \"three\", 3);\n",
        "569": "          \"one\",\n",
        "570": "          1,\n",
        "571": "          \"two\",\n",
        "572": "          2,\n",
        "573": "          \"three\",\n",
        "574": "          3,\n",
        "575": "          \"four\",\n",
        "576": "          4);\n",
        "579": "          \"one\",\n",
        "580": "          1,\n",
        "581": "          \"two\",\n",
        "582": "          2,\n",
        "583": "          \"three\",\n",
        "584": "          3,\n",
        "585": "          \"four\",\n",
        "586": "          4,\n",
        "587": "          \"five\",\n",
        "588": "          5);\n",
        "628": "      ImmutableMap<String, Integer> copy =\n",
        "629": "          ImmutableMap.copyOf(Collections.<String, Integer>emptyMap());\n",
        "635": "      ImmutableMap<String, Integer> copy = ImmutableMap.copyOf(Collections.singletonMap(\"one\", 1));\n",
        "658": "    ImmutableMap<String, Integer> map =\n",
        "659": "        ImmutableMap.of(\"one\", 1, \"won\", 1, \"two\", 2, \"too\", 2, \"three\", 3);\n",
        "660": "    ImmutableSetMultimap<String, Integer> expected =\n",
        "661": "        ImmutableSetMultimap.of(\"one\", 1, \"won\", 1, \"two\", 2, \"too\", 2, \"three\", 3);\n",
        "683": "    tester.testAllPublicInstanceMethods(new ImmutableMap.Builder<Object, Object>());\n",
        "686": "    tester.testAllPublicInstanceMethods(ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3));\n",
        "689": "  private static <K, V> void assertMapEquals(Map<K, V> map, Object... alternatingKeysAndValues) {\n",
        "705": "    @Override\n",
        "706": "    public boolean equals(Object o) {\n",
        "710": "    @Override\n",
        "711": "    public int hashCode() {\n",
        "723": "    assertTrue(map.entrySet().contains(Maps.immutableEntry(\"a\", new IntHolder(3))));\n",
        "736": "    assertEquals(Lists.newArrayList(map.values()), Lists.newArrayList(reserializedValues));\n"
    },
    "removed": {
        "72": "    suite.addTest(MapTestSuiteBuilder.using(new ImmutableMapGenerator())\n",
        "73": "        .withFeatures(\n",
        "74": "            CollectionSize.ANY,\n",
        "75": "            CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "76": "            CollectionFeature.KNOWN_ORDER,\n",
        "77": "            MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "78": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "79": "        .named(\"ImmutableMap\")\n",
        "80": "        .createTestSuite());\n",
        "81": "\n",
        "82": "    suite.addTest(MapTestSuiteBuilder.using(new ImmutableMapCopyOfGenerator())\n",
        "83": "        .withFeatures(\n",
        "84": "            CollectionSize.ANY,\n",
        "85": "            CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "86": "            CollectionFeature.KNOWN_ORDER,\n",
        "87": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "88": "        .named(\"ImmutableMap.copyOf[Map]\")\n",
        "89": "        .createTestSuite());\n",
        "90": "\n",
        "91": "    suite.addTest(MapTestSuiteBuilder.using(new ImmutableMapCopyOfEntriesGenerator())\n",
        "92": "        .withFeatures(\n",
        "93": "            CollectionSize.ANY,\n",
        "94": "            MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "95": "            CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "96": "            CollectionFeature.KNOWN_ORDER,\n",
        "97": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "98": "        .named(\"ImmutableMap.copyOf[Iterable<Entry>]\")\n",
        "99": "        .createTestSuite());\n",
        "100": "\n",
        "101": "    suite.addTest(MapTestSuiteBuilder.using(new ImmutableMapCopyOfEnumMapGenerator())\n",
        "102": "        .withFeatures(\n",
        "103": "            CollectionSize.ANY,\n",
        "104": "            CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "105": "            CollectionFeature.KNOWN_ORDER,\n",
        "106": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "107": "        .named(\"ImmutableMap.copyOf[EnumMap]\")\n",
        "108": "        .createTestSuite());\n",
        "109": "\n",
        "110": "    suite.addTest(MapTestSuiteBuilder.using(new ImmutableMapValuesAsSingletonSetGenerator())\n",
        "111": "        .withFeatures(\n",
        "112": "            CollectionSize.ANY,\n",
        "113": "            MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "114": "            CollectionFeature.KNOWN_ORDER,\n",
        "115": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "116": "        .named(\"ImmutableMap.asMultimap.asMap\")\n",
        "117": "        .createTestSuite());\n",
        "118": "\n",
        "119": "   suite.addTest(CollectionTestSuiteBuilder.using(\n",
        "120": "            new ImmutableMapUnhashableValuesGenerator())\n",
        "121": "        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "122": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "123": "        .named(\"ImmutableMap.values, unhashable\")\n",
        "124": "        .createTestSuite());\n",
        "125": "\n",
        "126": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "127": "        new ImmutableMapKeyListGenerator())\n",
        "128": "        .named(\"ImmutableMap.keySet.asList\")\n",
        "129": "        .withFeatures(CollectionSize.ANY,\n",
        "130": "            CollectionFeature.SERIALIZABLE,\n",
        "131": "            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "132": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "133": "        .createTestSuite());\n",
        "134": "\n",
        "135": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "136": "        new ImmutableMapEntryListGenerator())\n",
        "137": "        .named(\"ImmutableMap.entrySet.asList\")\n",
        "138": "        .withFeatures(CollectionSize.ANY,\n",
        "139": "            CollectionFeature.SERIALIZABLE,\n",
        "140": "            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "141": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "142": "        .createTestSuite());\n",
        "143": "\n",
        "144": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "145": "        new ImmutableMapValueListGenerator())\n",
        "146": "        .named(\"ImmutableMap.values.asList\")\n",
        "147": "        .withFeatures(CollectionSize.ANY,\n",
        "148": "            CollectionFeature.SERIALIZABLE,\n",
        "149": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "150": "        .createTestSuite());\n",
        "155": "  public abstract static class AbstractMapTests<K, V>\n",
        "156": "      extends MapInterfaceTest<K, V> {\n",
        "161": "    @Override protected Map<K, V> makeEmptyMap() {\n",
        "167": "    @Override protected void assertMoreInvariants(Map<K, V> map) {\n",
        "170": "        assertEquals(entry.getKey() + \"=\" + entry.getValue(),\n",
        "171": "            entry.toString());\n",
        "174": "      assertEquals(\"{\" + joiner.join(map.entrySet()) + \"}\",\n",
        "175": "          map.toString());\n",
        "176": "      assertEquals(\"[\" + joiner.join(map.entrySet()) + \"]\",\n",
        "177": "          map.entrySet().toString());\n",
        "178": "      assertEquals(\"[\" + joiner.join(map.keySet()) + \"]\",\n",
        "179": "          map.keySet().toString());\n",
        "180": "      assertEquals(\"[\" + joiner.join(map.values()) + \"]\",\n",
        "181": "          map.values().toString());\n",
        "189": "    @Override protected Map<String, Integer> makeEmptyMap() {\n",
        "193": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "197": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "201": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "206": "  public static class SingletonMapTests\n",
        "207": "      extends AbstractMapTests<String, Integer> {\n",
        "208": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "212": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "216": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "223": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "224": "      return SerializableTester.reserialize(\n",
        "225": "          ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3));\n",
        "228": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "232": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "237": "  public static class MapTestsWithBadHashes\n",
        "238": "      extends AbstractMapTests<Object, Integer> {\n",
        "240": "    @Override protected Map<Object, Integer> makeEmptyMap() {\n",
        "244": "    @Override protected Map<Object, Integer> makePopulatedMap() {\n",
        "253": "    @Override protected Object getKeyNotInPopulatedMap() {\n",
        "257": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "265": "    @Override protected Map<Integer, UnhashableObject> makeEmptyMap() {\n",
        "269": "    @Override protected Map<Integer, UnhashableObject> makePopulatedMap() {\n",
        "271": "      return ImmutableMap.of(\n",
        "272": "          0, unhashables.e0(), 1, unhashables.e1(), 2, unhashables.e2());\n",
        "275": "    @Override protected Integer getKeyNotInPopulatedMap() {\n",
        "279": "    @Override protected UnhashableObject getValueNotInPopulatedMap() {\n",
        "286": "    @Override protected Map<Integer, UnhashableObject> makePopulatedMap() {\n",
        "294": "      ImmutableMap<String, Integer> map\n",
        "295": "          = new Builder<String, Integer>().build();\n",
        "300": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>()\n",
        "301": "          .put(\"one\", 1)\n",
        "302": "          .build();\n",
        "307": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>()\n",
        "308": "          .put(\"one\", 1)\n",
        "309": "          .put(\"two\", 2)\n",
        "310": "          .put(\"three\", 3)\n",
        "311": "          .put(\"four\", 4)\n",
        "312": "          .put(\"five\", 5)\n",
        "313": "          .build();\n",
        "314": "      assertMapEquals(map,\n",
        "315": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "334": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>()\n",
        "335": "          .orderEntriesByValue(Ordering.natural())\n",
        "336": "          .put(\"three\", 3)\n",
        "337": "          .put(\"one\", 1)\n",
        "338": "          .put(\"five\", 5)\n",
        "339": "          .put(\"four\", 4)\n",
        "340": "          .put(\"two\", 2)\n",
        "341": "          .build();\n",
        "342": "      assertMapEquals(map,\n",
        "343": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "347": "      Builder<String, Integer> builder = new Builder<String, Integer>(2)\n",
        "348": "          .put(\"four\", 4)\n",
        "349": "          .put(\"one\", 1);\n",
        "358": "      ImmutableMap.Builder<String, Integer> builder = new Builder<String, Integer>()\n",
        "359": "          .orderEntriesByValue(Ordering.natural());\n",
        "363": "      } catch (IllegalStateException expected) {}\n",
        "367": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>()\n",
        "368": "          .put(Maps.immutableEntry(\"one\", 1))\n",
        "369": "          .build();\n",
        "395": "      Entry<String, Integer> entry = new AbstractMapEntry<String, Integer>() {\n",
        "396": "        @Override public String getKey() {\n",
        "397": "          return holder.string;\n",
        "398": "        }\n",
        "399": "        @Override public Integer getValue() {\n",
        "400": "          return 1;\n",
        "401": "        }\n",
        "402": "      };\n",
        "410": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>()\n",
        "411": "          .putAll(Collections.<String, Integer>emptyMap())\n",
        "412": "          .build();\n",
        "425": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>()\n",
        "426": "          .putAll(toPut)\n",
        "427": "          .putAll(moreToPut)\n",
        "428": "          .build();\n",
        "429": "      assertMapEquals(map,\n",
        "430": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "435": "      ImmutableMap<String, Integer> mapOne = builder\n",
        "436": "          .put(\"one\", 1)\n",
        "437": "          .put(\"two\", 2)\n",
        "438": "          .build();\n",
        "439": "      ImmutableMap<String, Integer> mapTwo = builder\n",
        "440": "          .put(\"three\", 3)\n",
        "441": "          .put(\"four\", 4)\n",
        "442": "          .build();\n",
        "453": "      } catch (NullPointerException expected) {}\n",
        "463": "      } catch (NullPointerException expected) {}\n",
        "494": "      } catch (NullPointerException expected) {}\n",
        "536": "      Builder<String, Integer> builder = new Builder<String, Integer>()\n",
        "537": "          .put(\"one\", 1)\n",
        "538": "          .put(\"one\", 1); // throwing on this line would be even better\n",
        "549": "          ImmutableMap.of(\"one\", 1),\n",
        "550": "          \"one\", 1);\n",
        "551": "      assertMapEquals(\n",
        "552": "          ImmutableMap.of(\"one\", 1, \"two\", 2),\n",
        "553": "          \"one\", 1, \"two\", 2);\n",
        "554": "      assertMapEquals(\n",
        "555": "          ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3),\n",
        "556": "          \"one\", 1, \"two\", 2, \"three\", 3);\n",
        "559": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4);\n",
        "562": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "602": "      ImmutableMap<String, Integer> copy\n",
        "603": "          = ImmutableMap.copyOf(Collections.<String, Integer>emptyMap());\n",
        "609": "      ImmutableMap<String, Integer> copy\n",
        "610": "          = ImmutableMap.copyOf(Collections.singletonMap(\"one\", 1));\n",
        "633": "    ImmutableMap<String, Integer> map = ImmutableMap.of(\n",
        "634": "        \"one\", 1, \"won\", 1, \"two\", 2, \"too\", 2, \"three\", 3);\n",
        "635": "    ImmutableSetMultimap<String, Integer> expected = ImmutableSetMultimap.of(\n",
        "636": "        \"one\", 1, \"won\", 1, \"two\", 2, \"too\", 2, \"three\", 3);\n",
        "658": "    tester.testAllPublicInstanceMethods(\n",
        "659": "        new ImmutableMap.Builder<Object, Object>());\n",
        "662": "    tester.testAllPublicInstanceMethods(\n",
        "663": "        ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3));\n",
        "666": "  private static <K, V> void assertMapEquals(Map<K, V> map,\n",
        "667": "      Object... alternatingKeysAndValues) {\n",
        "683": "    @Override public boolean equals(Object o) {\n",
        "687": "    @Override public int hashCode() {\n",
        "699": "    assertTrue(map.entrySet().contains(\n",
        "700": "        Maps.immutableEntry(\"a\", new IntHolder(3))));\n",
        "713": "    assertEquals(Lists.newArrayList(map.values()),\n",
        "714": "        Lists.newArrayList(reserializedValues));\n"
    }
}