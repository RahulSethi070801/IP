{
    "addition": {
        "50": "  static class StandardImplForwardingNavigableMap<K, V> extends ForwardingNavigableMap<K, V> {\n",
        "57": "    @Override\n",
        "58": "    protected NavigableMap<K, V> delegate() {\n",
        "62": "    @Override\n",
        "63": "    public boolean containsKey(Object key) {\n",
        "67": "    @Override\n",
        "68": "    public boolean containsValue(Object value) {\n",
        "72": "    @Override\n",
        "73": "    public void putAll(Map<? extends K, ? extends V> map) {\n",
        "77": "    @Override\n",
        "78": "    public V remove(Object object) {\n",
        "82": "    @Override\n",
        "83": "    public boolean equals(Object object) {\n",
        "87": "    @Override\n",
        "88": "    public int hashCode() {\n",
        "92": "    @Override\n",
        "93": "    public Set<K> keySet() {\n",
        "101": "    @Override\n",
        "102": "    public Collection<V> values() {\n",
        "106": "    @Override\n",
        "107": "    public String toString() {\n",
        "111": "    @Override\n",
        "112": "    public Set<Entry<K, V>> entrySet() {\n",
        "121": "    @Override\n",
        "122": "    public void clear() {\n",
        "126": "    @Override\n",
        "127": "    public boolean isEmpty() {\n",
        "131": "    @Override\n",
        "132": "    public SortedMap<K, V> subMap(K fromKey, K toKey) {\n",
        "232": "  static class StandardLastEntryForwardingNavigableMap<K, V> extends ForwardingNavigableMap<K, V> {\n",
        "239": "    @Override\n",
        "240": "    protected NavigableMap<K, V> delegate() {\n",
        "305": "        .testForwarding(\n",
        "306": "            NavigableMap.class,\n",
        "307": "            new Function<NavigableMap, NavigableMap>() {\n",
        "308": "              @Override\n",
        "309": "              public NavigableMap apply(NavigableMap delegate) {\n",
        "310": "                return wrap(delegate);\n",
        "311": "              }\n",
        "312": "            });\n",
        "315": "  public void testEquals() {\n",
        "326": "      @Override\n",
        "327": "      protected NavigableMap<K, V> delegate() {\n"
    },
    "removed": {
        "50": "  static class StandardImplForwardingNavigableMap<K, V>\n",
        "51": "      extends ForwardingNavigableMap<K, V> {\n",
        "58": "    @Override protected NavigableMap<K, V> delegate() {\n",
        "62": "    @Override public boolean containsKey(Object key) {\n",
        "66": "    @Override public boolean containsValue(Object value) {\n",
        "70": "    @Override public void putAll(Map<? extends K, ? extends V> map) {\n",
        "74": "    @Override public V remove(Object object) {\n",
        "78": "    @Override public boolean equals(Object object) {\n",
        "82": "    @Override public int hashCode() {\n",
        "86": "    @Override public Set<K> keySet() {\n",
        "94": "    @Override public Collection<V> values() {\n",
        "98": "    @Override public String toString() {\n",
        "102": "    @Override public Set<Entry<K, V>> entrySet() {\n",
        "111": "    @Override public void clear() {\n",
        "115": "    @Override public boolean isEmpty() {\n",
        "119": "    @Override public SortedMap<K, V> subMap(K fromKey, K toKey) {\n",
        "219": "  static class StandardLastEntryForwardingNavigableMap<K, V>\n",
        "220": "      extends ForwardingNavigableMap<K, V> {\n",
        "227": "    @Override protected NavigableMap<K, V> delegate() {\n",
        "292": "        .testForwarding(NavigableMap.class, new Function<NavigableMap, NavigableMap>() {\n",
        "293": "          @Override public NavigableMap apply(NavigableMap delegate) {\n",
        "294": "            return wrap(delegate);\n",
        "295": "          }\n",
        "296": "        });\n",
        "299": "   public void testEquals() {\n",
        "310": "      @Override protected NavigableMap<K, V> delegate() {\n"
    }
}