{
    "addition": {
        "38": "    ImmutableMultimap<String, Integer> multimap =\n",
        "39": "        new Builder<String, Integer>().put(Maps.immutableEntry(\"one\", 1)).build();\n",
        "65": "    Entry<String, Integer> entry =\n",
        "66": "        new AbstractMapEntry<String, Integer>() {\n",
        "67": "          @Override\n",
        "68": "          public String getKey() {\n",
        "69": "            return holder.string;\n",
        "70": "          }\n",
        "71": "\n",
        "72": "          @Override\n",
        "73": "          public Integer getValue() {\n",
        "74": "            return 1;\n",
        "75": "          }\n",
        "76": "        };\n",
        "86": "    ImmutableSetMultimap<String, String> setMultimap = ImmutableSetMultimap.of(\"k1\", \"v1\");\n",
        "87": "    ImmutableMultimap<String, String> setMultimapCopy = ImmutableMultimap.copyOf(setMultimap);\n",
        "88": "    assertSame(\n",
        "89": "        \"copyOf(ImmutableSetMultimap) should not create a new instance\",\n",
        "90": "        setMultimap,\n",
        "91": "        setMultimapCopy);\n",
        "93": "    ImmutableListMultimap<String, String> listMultimap = ImmutableListMultimap.of(\"k1\", \"v1\");\n",
        "94": "    ImmutableMultimap<String, String> listMultimapCopy = ImmutableMultimap.copyOf(listMultimap);\n",
        "95": "    assertSame(\n",
        "96": "        \"copyOf(ImmutableListMultimap) should not create a new instance\",\n",
        "97": "        listMultimap,\n",
        "98": "        listMultimapCopy);\n",
        "103": "    Multimap<Integer, UnhashableObject> multimap = ImmutableMultimap.of(0, unhashables.e0());\n",
        "110": "    Multimap<Integer, Object> multimap =\n",
        "111": "        ImmutableMultimap.<Integer, Object>of(\n",
        "112": "            0, unhashables.e0(), 2, \"hey you\", 0, unhashables.e1());\n",
        "124": "            ImmutableMultimap.of(1, \"a\", 2, \"b\"), ImmutableMultimap.of(2, \"b\", 1, \"a\"))\n"
    },
    "removed": {
        "38": "    ImmutableMultimap<String, Integer> multimap = new Builder<String, Integer>()\n",
        "39": "        .put(Maps.immutableEntry(\"one\", 1))\n",
        "40": "        .build();\n",
        "66": "    Entry<String, Integer> entry = new AbstractMapEntry<String, Integer>() {\n",
        "67": "      @Override public String getKey() {\n",
        "68": "        return holder.string;\n",
        "69": "      }\n",
        "70": "      @Override public Integer getValue() {\n",
        "71": "        return 1;\n",
        "72": "      }\n",
        "73": "    };\n",
        "83": "    ImmutableSetMultimap<String, String> setMultimap\n",
        "84": "        = ImmutableSetMultimap.of(\"k1\", \"v1\");\n",
        "85": "    ImmutableMultimap<String, String> setMultimapCopy\n",
        "86": "        = ImmutableMultimap.copyOf(setMultimap);\n",
        "87": "    assertSame(\"copyOf(ImmutableSetMultimap) should not create a new instance\",\n",
        "88": "        setMultimap, setMultimapCopy);\n",
        "90": "    ImmutableListMultimap<String, String> listMultimap\n",
        "91": "        = ImmutableListMultimap.of(\"k1\", \"v1\");\n",
        "92": "    ImmutableMultimap<String, String> listMultimapCopy\n",
        "93": "        = ImmutableMultimap.copyOf(listMultimap);\n",
        "94": "    assertSame(\"copyOf(ImmutableListMultimap) should not create a new instance\",\n",
        "95": "        listMultimap, listMultimapCopy);\n",
        "100": "    Multimap<Integer, UnhashableObject> multimap = ImmutableMultimap.of(\n",
        "101": "        0, unhashables.e0());\n",
        "108": "    Multimap<Integer, Object> multimap = ImmutableMultimap.<Integer, Object>of(\n",
        "109": "        0, unhashables.e0(), 2, \"hey you\", 0, unhashables.e1());\n",
        "121": "            ImmutableMultimap.of(1, \"a\", 2, \"b\"),\n",
        "122": "            ImmutableMultimap.of(2, \"b\", 1, \"a\"))\n"
    }
}