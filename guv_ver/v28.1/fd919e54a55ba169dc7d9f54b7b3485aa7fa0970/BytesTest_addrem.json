{
    "addition": {
        "38": "  private static final byte[] ARRAY234 = {(byte) 2, (byte) 3, (byte) 4};\n",
        "40": "  private static final byte[] VALUES = {Byte.MIN_VALUE, -1, 0, 1, Byte.MAX_VALUE};\n",
        "62": "    assertEquals(0, Bytes.indexOf(new byte[] {(byte) -1}, (byte) -1));\n",
        "66": "    assertEquals(1, Bytes.indexOf(new byte[] {(byte) 2, (byte) 3, (byte) 2, (byte) 3}, (byte) 3));\n",
        "77": "    assertEquals(0, Bytes.indexOf(ARRAY234, new byte[] {(byte) 2, (byte) 3}));\n",
        "78": "    assertEquals(1, Bytes.indexOf(ARRAY234, new byte[] {(byte) 3, (byte) 4}));\n",
        "79": "    assertEquals(1, Bytes.indexOf(ARRAY234, new byte[] {(byte) 3}));\n",
        "80": "    assertEquals(2, Bytes.indexOf(ARRAY234, new byte[] {(byte) 4}));\n",
        "81": "    assertEquals(\n",
        "82": "        1,\n",
        "83": "        Bytes.indexOf(\n",
        "84": "            new byte[] {(byte) 2, (byte) 3, (byte) 3, (byte) 3, (byte) 3}, new byte[] {(byte) 3}));\n",
        "85": "    assertEquals(\n",
        "86": "        2,\n",
        "87": "        Bytes.indexOf(\n",
        "88": "            new byte[] {(byte) 2, (byte) 3, (byte) 2, (byte) 3, (byte) 4, (byte) 2, (byte) 3},\n",
        "89": "            new byte[] {(byte) 2, (byte) 3, (byte) 4}));\n",
        "90": "    assertEquals(\n",
        "91": "        1,\n",
        "92": "        Bytes.indexOf(\n",
        "93": "            new byte[] {(byte) 2, (byte) 2, (byte) 3, (byte) 4, (byte) 2, (byte) 3, (byte) 4},\n",
        "94": "            new byte[] {(byte) 2, (byte) 3, (byte) 4}));\n",
        "95": "    assertEquals(\n",
        "96": "        -1,\n",
        "97": "        Bytes.indexOf(\n",
        "98": "            new byte[] {(byte) 4, (byte) 3, (byte) 2}, new byte[] {(byte) 2, (byte) 3, (byte) 4}));\n",
        "105": "    assertEquals(0, Bytes.lastIndexOf(new byte[] {(byte) -1}, (byte) -1));\n",
        "109": "    assertEquals(\n",
        "110": "        3, Bytes.lastIndexOf(new byte[] {(byte) 2, (byte) 3, (byte) 2, (byte) 3}, (byte) 3));\n",
        "120": "    assertTrue(\n",
        "121": "        Arrays.equals(\n",
        "122": "            new byte[] {(byte) 1, (byte) 1, (byte) 1}, Bytes.concat(ARRAY1, ARRAY1, ARRAY1)));\n",
        "123": "    assertTrue(\n",
        "124": "        Arrays.equals(\n",
        "125": "            new byte[] {(byte) 1, (byte) 2, (byte) 3, (byte) 4}, Bytes.concat(ARRAY1, ARRAY234)));\n",
        "132": "    assertTrue(\n",
        "133": "        Arrays.equals(\n",
        "134": "            new byte[] {(byte) 1, (byte) 0, (byte) 0}, Bytes.ensureCapacity(ARRAY1, 2, 1)));\n",
        "168": "    for (int delta : new int[] {+1, 0, -1}) {\n",
        "171": "        Collection<Byte> misleadingSize = Helpers.misleadingSizeCollection(delta);\n",
        "219": "    byte[] array = {(byte) 0, (byte) 1, (byte) 2};\n",
        "225": "    assertTrue(Arrays.equals(new byte[] {(byte) 0, (byte) 1, (byte) 2}, newArray));\n",
        "232": "    byte[] array = {(byte) 0, (byte) 1, (byte) 2, (byte) 3};\n",
        "234": "    assertTrue(Arrays.equals(new byte[] {(byte) 1, (byte) 2}, Bytes.toArray(list.subList(1, 3))));\n",
        "235": "    assertTrue(Arrays.equals(new byte[] {}, Bytes.toArray(list.subList(2, 2))));\n"
    },
    "removed": {
        "38": "  private static final byte[] ARRAY234\n",
        "39": "      = {(byte) 2, (byte) 3, (byte) 4};\n",
        "41": "  private static final byte[] VALUES =\n",
        "42": "      { Byte.MIN_VALUE, -1, 0, 1, Byte.MAX_VALUE };\n",
        "64": "    assertEquals(0, Bytes.indexOf(\n",
        "65": "        new byte[] {(byte) -1}, (byte) -1));\n",
        "69": "    assertEquals(1, Bytes.indexOf(\n",
        "70": "        new byte[] { (byte) 2, (byte) 3, (byte) 2, (byte) 3 },\n",
        "71": "        (byte) 3));\n",
        "82": "    assertEquals(0, Bytes.indexOf(\n",
        "83": "        ARRAY234, new byte[] { (byte) 2, (byte) 3 }));\n",
        "84": "    assertEquals(1, Bytes.indexOf(\n",
        "85": "        ARRAY234, new byte[] { (byte) 3, (byte) 4 }));\n",
        "86": "    assertEquals(1, Bytes.indexOf(ARRAY234, new byte[] { (byte) 3 }));\n",
        "87": "    assertEquals(2, Bytes.indexOf(ARRAY234, new byte[] { (byte) 4 }));\n",
        "88": "    assertEquals(1, Bytes.indexOf(new byte[] { (byte) 2, (byte) 3,\n",
        "89": "        (byte) 3, (byte) 3, (byte) 3 },\n",
        "90": "        new byte[] { (byte) 3 }\n",
        "91": "    ));\n",
        "92": "    assertEquals(2, Bytes.indexOf(\n",
        "93": "        new byte[] { (byte) 2, (byte) 3, (byte) 2,\n",
        "94": "            (byte) 3, (byte) 4, (byte) 2, (byte) 3},\n",
        "95": "        new byte[] { (byte) 2, (byte) 3, (byte) 4}\n",
        "96": "    ));\n",
        "97": "    assertEquals(1, Bytes.indexOf(\n",
        "98": "        new byte[] { (byte) 2, (byte) 2, (byte) 3,\n",
        "99": "            (byte) 4, (byte) 2, (byte) 3, (byte) 4},\n",
        "100": "        new byte[] { (byte) 2, (byte) 3, (byte) 4}\n",
        "101": "    ));\n",
        "102": "    assertEquals(-1, Bytes.indexOf(\n",
        "103": "        new byte[] { (byte) 4, (byte) 3, (byte) 2},\n",
        "104": "        new byte[] { (byte) 2, (byte) 3, (byte) 4}\n",
        "105": "    ));\n",
        "112": "    assertEquals(0, Bytes.lastIndexOf(\n",
        "113": "        new byte[] {(byte) -1}, (byte) -1));\n",
        "117": "    assertEquals(3, Bytes.lastIndexOf(\n",
        "118": "        new byte[] { (byte) 2, (byte) 3, (byte) 2, (byte) 3 },\n",
        "119": "        (byte) 3));\n",
        "129": "    assertTrue(Arrays.equals(\n",
        "130": "        new byte[] {(byte) 1, (byte) 1, (byte) 1},\n",
        "131": "        Bytes.concat(ARRAY1, ARRAY1, ARRAY1)));\n",
        "132": "    assertTrue(Arrays.equals(\n",
        "133": "        new byte[] {(byte) 1, (byte) 2, (byte) 3, (byte) 4},\n",
        "134": "        Bytes.concat(ARRAY1, ARRAY234)));\n",
        "141": "    assertTrue(Arrays.equals(\n",
        "142": "        new byte[] {(byte) 1, (byte) 0, (byte) 0},\n",
        "143": "        Bytes.ensureCapacity(ARRAY1, 2, 1)));\n",
        "177": "    for (int delta : new int[] { +1, 0, -1 }) {\n",
        "180": "        Collection<Byte> misleadingSize =\n",
        "181": "            Helpers.misleadingSizeCollection(delta);\n",
        "229": "    byte[] array = { (byte) 0, (byte) 1, (byte) 2 };\n",
        "235": "    assertTrue(Arrays.equals(\n",
        "236": "        new byte[] { (byte) 0, (byte) 1, (byte) 2 }, newArray));\n",
        "243": "    byte[] array = { (byte) 0, (byte) 1, (byte) 2, (byte) 3 };\n",
        "245": "    assertTrue(Arrays.equals(new byte[] { (byte) 1, (byte) 2 },\n",
        "246": "        Bytes.toArray(list.subList(1, 3))));\n",
        "247": "    assertTrue(Arrays.equals(new byte[] {},\n",
        "248": "        Bytes.toArray(list.subList(2, 2))));\n"
    }
}