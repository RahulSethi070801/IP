{
    "addition": {
        "32": " * A generic JUnit test which tests {@link Map#computeIfAbsent}. Can't be invoked directly; please\n",
        "33": " * see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.\n",
        "42": "    assertEquals(\n",
        "43": "        \"computeIfAbsent(notPresent, function) should return new value\",\n",
        "45": "        getMap()\n",
        "46": "            .computeIfAbsent(\n",
        "47": "                k3(),\n",
        "48": "                k -> {\n",
        "49": "                  assertEquals(k3(), k);\n",
        "50": "                  return v3();\n",
        "51": "                }));\n",
        "58": "    assertEquals(\n",
        "59": "        \"computeIfAbsent(present, function) should return existing value\",\n",
        "60": "        v0(),\n",
        "61": "        getMap()\n",
        "62": "            .computeIfAbsent(\n",
        "63": "                k0(),\n",
        "64": "                k -> {\n",
        "65": "                  throw new AssertionFailedError();\n",
        "66": "                }));\n",
        "72": "    assertNull(\n",
        "73": "        \"computeIfAbsent(absent, returnsNull) should return null\",\n",
        "74": "        getMap()\n",
        "75": "            .computeIfAbsent(\n",
        "76": "                k3(),\n",
        "77": "                k -> {\n",
        "78": "                  assertEquals(k3(), k);\n",
        "79": "                  return null;\n",
        "80": "                }));\n",
        "88": "    assertEquals(\n",
        "89": "        \"computeIfAbsent(presentAssignedToNull, function) should return newValue\",\n",
        "91": "        getMap()\n",
        "92": "            .computeIfAbsent(\n",
        "93": "                getKeyForNullValue(),\n",
        "94": "                k -> {\n",
        "95": "                  assertEquals(getKeyForNullValue(), k);\n",
        "96": "                  return getValueForNullKey();\n",
        "97": "                }));\n",
        "103": "    getMap()\n",
        "104": "        .computeIfAbsent(\n",
        "105": "            null,\n",
        "106": "            k -> {\n",
        "107": "              assertNull(k);\n",
        "108": "              return v3();\n",
        "109": "            });\n",
        "134": "      getMap()\n",
        "135": "          .computeIfAbsent(\n",
        "136": "              k3(),\n",
        "137": "              k -> {\n",
        "138": "                // allowed to be called\n",
        "139": "                assertEquals(k3(), k);\n",
        "140": "                return v3();\n",
        "141": "              });\n",
        "143": "    } catch (UnsupportedOperationException expected) {\n",
        "144": "    }\n",
        "155": "          getMap()\n",
        "156": "              .computeIfAbsent(\n",
        "157": "                  k0(),\n",
        "158": "                  k -> {\n",
        "159": "                    assertEquals(k0(), k);\n",
        "160": "                    return v0();\n",
        "161": "                  }));\n",
        "162": "    } catch (UnsupportedOperationException tolerated) {\n",
        "163": "    }\n",
        "173": "          v0(),\n",
        "174": "          getMap()\n",
        "175": "              .computeIfAbsent(\n",
        "176": "                  k0(),\n",
        "177": "                  k -> {\n",
        "178": "                    assertEquals(k0(), k);\n",
        "179": "                    return v3();\n",
        "180": "                  }));\n",
        "181": "    } catch (UnsupportedOperationException tolerated) {\n",
        "182": "    }\n",
        "189": "      getMap()\n",
        "190": "          .computeIfAbsent(\n",
        "191": "              null,\n",
        "192": "              k -> {\n",
        "193": "                assertNull(k);\n",
        "194": "                return v3();\n",
        "195": "              });\n",
        "197": "    } catch (NullPointerException expected) {\n",
        "198": "    }\n"
    },
    "removed": {
        "32": " * A generic JUnit test which tests {@link Map#computeIfAbsent}. Can't be\n",
        "33": " * invoked directly; please see\n",
        "34": " * {@link com.google.common.collect.testing.MapTestSuiteBuilder}.\n",
        "43": "    assertEquals(\"computeIfAbsent(notPresent, function) should return new value\",\n",
        "45": "        getMap().computeIfAbsent(k3(), k -> {\n",
        "46": "          assertEquals(k3(), k);\n",
        "47": "          return v3();\n",
        "48": "        }));\n",
        "55": "    assertEquals(\"computeIfAbsent(present, function) should return existing value\", \n",
        "56": "        v0(), getMap().computeIfAbsent(k0(), k -> { throw new AssertionFailedError(); }));\n",
        "62": "    assertNull(\"computeIfAbsent(absent, returnsNull) should return null\", \n",
        "63": "        getMap().computeIfAbsent(k3(), k -> { \n",
        "64": "          assertEquals(k3(), k);\n",
        "65": "          return null;\n",
        "66": "        }));\n",
        "74": "    assertEquals(\"computeIfAbsent(presentAssignedToNull, function) should return newValue\",\n",
        "76": "        getMap().computeIfAbsent(getKeyForNullValue(), k -> {\n",
        "77": "          assertEquals(getKeyForNullValue(), k);\n",
        "78": "          return getValueForNullKey();\n",
        "79": "        }));\n",
        "85": "    getMap().computeIfAbsent(null, k -> {\n",
        "86": "      assertNull(k);\n",
        "87": "      return v3();\n",
        "88": "    });\n",
        "113": "      getMap().computeIfAbsent(k3(), k -> {\n",
        "114": "        // allowed to be called\n",
        "115": "        assertEquals(k3(), k);\n",
        "116": "        return v3();\n",
        "117": "      });\n",
        "119": "    } catch (UnsupportedOperationException expected) {}\n",
        "130": "          getMap().computeIfAbsent(k0(), k -> {\n",
        "131": "            assertEquals(k0(), k);\n",
        "132": "            return v0();\n",
        "133": "          }));\n",
        "134": "    } catch (UnsupportedOperationException tolerated) {}\n",
        "144": "          v0(), getMap().computeIfAbsent(k0(), k -> {\n",
        "145": "            assertEquals(k0(), k);\n",
        "146": "            return v3();\n",
        "147": "          }));\n",
        "148": "    } catch (UnsupportedOperationException tolerated) {}\n",
        "155": "      getMap().computeIfAbsent(null, k -> {\n",
        "156": "        assertNull(k);\n",
        "157": "        return v3();\n",
        "158": "      });\n",
        "160": "    } catch (NullPointerException expected) {}\n"
    }
}