{
    "addition": {
        "28": " * <p>See the Guava User Guide article on <a\n",
        "29": " * href=\"https://github.com/google/guava/wiki/ListenableFutureExplained\">{@code\n",
        "30": " * ListenableFuture}</a>.\n",
        "35": " * asynchronous operations. You can chain them together manually with calls to methods like {@link\n",
        "36": " * Futures#transform(ListenableFuture, com.google.common.base.Function, Executor)\n",
        "42": " *   <li><a href=\"http://google.github.io/dagger/producers.html\">Dagger Producers</a>\n",
        "50": " * <pre>{@code\n",
        "51": " * final String name = ...;\n",
        "52": " * inFlight.add(name);\n",
        "53": " * ListenableFuture<Result> future = service.query(name);\n",
        "54": " * future.addListener(new Runnable() {\n",
        "55": " *   public void run() {\n",
        "56": " *     processedCount.incrementAndGet();\n",
        "57": " *     inFlight.remove(name);\n",
        "58": " *     lastProcessed.set(name);\n",
        "59": " *     logger.info(\"Done with {0}\", name);\n",
        "60": " *   }\n",
        "61": " * }, executor);\n",
        "62": " * }</pre>\n",
        "70": " *\n",
        "72": " *   <li>If you receive them from an {@code java.util.concurrent.ExecutorService}, convert that\n",
        "73": " *       service to a {@link ListeningExecutorService}, usually by calling {@link\n",
        "74": " *       MoreExecutors#listeningDecorator(java.util.concurrent.ExecutorService)\n",
        "75": " *       MoreExecutors.listeningDecorator}.\n",
        "76": " *   <li>If you manually call {@link java.util.concurrent.FutureTask#set} or a similar method,\n",
        "77": " *       create a {@link SettableFuture} instead. (If your needs are more complex, you may prefer\n",
        "78": " *       {@link AbstractFuture}.)\n",
        "121": "   *   <li>The listener may be executed by the caller of {@code addListener}. That caller may be a\n",
        "122": "   *       UI thread or other latency-sensitive thread. This can harm UI responsiveness.\n",
        "123": "   *   <li>The listener may be executed by the thread that completes this {@code Future}. That\n",
        "124": "   *       thread may be an internal system thread such as an RPC network thread. Blocking that\n",
        "125": "   *       thread may stall progress of the whole system. It may even cause a deadlock.\n",
        "126": "   *   <li>The listener may delay other listeners, even listeners that are not themselves {@code\n",
        "127": "   *       directExecutor} listeners.\n"
    },
    "removed": {
        "28": " * <p>See the Guava User Guide article on\n",
        "29": " * <a href=\"https://github.com/google/guava/wiki/ListenableFutureExplained\">\n",
        "30": " * {@code ListenableFuture}</a>.\n",
        "35": " * asynchronous operations. You can chain them together manually with calls to methods like\n",
        "36": " * {@link Futures#transform(ListenableFuture, com.google.common.base.Function, Executor)\n",
        "42": " * <li><a href=\"http://google.github.io/dagger/producers.html\">Dagger Producers</a>\n",
        "50": " * <pre>   {@code\n",
        "51": " *   final String name = ...;\n",
        "52": " *   inFlight.add(name);\n",
        "53": " *   ListenableFuture<Result> future = service.query(name);\n",
        "54": " *   future.addListener(new Runnable() {\n",
        "55": " *     public void run() {\n",
        "56": " *       processedCount.incrementAndGet();\n",
        "57": " *       inFlight.remove(name);\n",
        "58": " *       lastProcessed.set(name);\n",
        "59": " *       logger.info(\"Done with {0}\", name);\n",
        "60": " *     }\n",
        "61": " *   }, executor);}</pre>\n",
        "70": " * <li>If you receive them from an {@code java.util.concurrent.ExecutorService}, convert that\n",
        "71": " *     service to a {@link ListeningExecutorService}, usually by calling\n",
        "72": " *     {@link MoreExecutors#listeningDecorator(java.util.concurrent.ExecutorService)\n",
        "73": " *     MoreExecutors.listeningDecorator}.\n",
        "74": " * <li>If you manually call {@link java.util.concurrent.FutureTask#set} or a similar method, create\n",
        "75": " *     a {@link SettableFuture} instead. (If your needs are more complex, you may prefer\n",
        "76": " *     {@link AbstractFuture}.)\n",
        "119": "   * <li>The listener may be executed by the caller of {@code addListener}. That caller may be a UI\n",
        "120": "   * thread or other latency-sensitive thread. This can harm UI responsiveness.\n",
        "121": "   * <li>The listener may be executed by the thread that completes this {@code Future}. That thread\n",
        "122": "   * may be an internal system thread such as an RPC network thread. Blocking that thread may stall\n",
        "123": "   * progress of the whole system. It may even cause a deadlock.\n",
        "124": "   * <li>The listener may delay other listeners, even listeners that are not themselves {@code\n",
        "125": "   * directExecutor} listeners.\n"
    }
}