{
    "addition": {
        "35": " * Unit tests for {@link Sets#union}, {@link Sets#intersection} and {@link Sets#difference}.\n",
        "45": "    suite.addTest(\n",
        "46": "        SetTestSuiteBuilder.using(\n",
        "47": "                new TestStringSetGenerator() {\n",
        "48": "                  @Override\n",
        "49": "                  protected Set<String> create(String[] elements) {\n",
        "50": "                    return Sets.union(Sets.<String>newHashSet(), Sets.<String>newHashSet());\n",
        "51": "                  }\n",
        "52": "                })\n",
        "53": "            .named(\"empty U empty\")\n",
        "54": "            .withFeatures(\n",
        "55": "                CollectionSize.ZERO, CollectionFeature.NONE, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "56": "            .createTestSuite());\n",
        "57": "\n",
        "58": "    suite.addTest(\n",
        "59": "        SetTestSuiteBuilder.using(\n",
        "60": "                new TestStringSetGenerator() {\n",
        "61": "                  @Override\n",
        "62": "                  protected Set<String> create(String[] elements) {\n",
        "63": "                    checkArgument(elements.length == 1);\n",
        "64": "                    return Sets.union(Sets.<String>newHashSet(elements), Sets.newHashSet(elements));\n",
        "65": "                  }\n",
        "66": "                })\n",
        "67": "            .named(\"singleton U itself\")\n",
        "68": "            .withFeatures(CollectionSize.ONE, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "69": "            .createTestSuite());\n",
        "70": "\n",
        "71": "    suite.addTest(\n",
        "72": "        SetTestSuiteBuilder.using(\n",
        "73": "                new TestStringSetGenerator() {\n",
        "74": "                  @Override\n",
        "75": "                  protected Set<String> create(String[] elements) {\n",
        "76": "                    return Sets.union(Sets.<String>newHashSet(), Sets.newHashSet(elements));\n",
        "77": "                  }\n",
        "78": "                })\n",
        "79": "            .named(\"empty U set\")\n",
        "80": "            .withFeatures(\n",
        "81": "                CollectionSize.ONE, CollectionSize.SEVERAL, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "82": "            .createTestSuite());\n",
        "83": "\n",
        "84": "    suite.addTest(\n",
        "85": "        SetTestSuiteBuilder.using(\n",
        "86": "                new TestStringSetGenerator() {\n",
        "87": "                  @Override\n",
        "88": "                  protected Set<String> create(String[] elements) {\n",
        "89": "                    return Sets.union(Sets.newHashSet(elements), Sets.<String>newHashSet());\n",
        "90": "                  }\n",
        "91": "                })\n",
        "92": "            .named(\"set U empty\")\n",
        "93": "            .withFeatures(\n",
        "94": "                CollectionSize.ONE, CollectionSize.SEVERAL, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "95": "            .createTestSuite());\n",
        "96": "\n",
        "97": "    suite.addTest(\n",
        "98": "        SetTestSuiteBuilder.using(\n",
        "99": "                new TestStringSetGenerator() {\n",
        "100": "                  @Override\n",
        "101": "                  protected Set<String> create(String[] elements) {\n",
        "102": "                    checkArgument(elements.length == 3);\n",
        "103": "                    // Put the sets in different orders for the hell of it\n",
        "104": "                    return Sets.union(\n",
        "105": "                        Sets.newLinkedHashSet(asList(elements)),\n",
        "106": "                        Sets.newLinkedHashSet(asList(elements[1], elements[0], elements[2])));\n",
        "107": "                  }\n",
        "108": "                })\n",
        "109": "            .named(\"set U itself\")\n",
        "110": "            .withFeatures(CollectionSize.SEVERAL, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "111": "            .createTestSuite());\n",
        "112": "\n",
        "113": "    suite.addTest(\n",
        "114": "        SetTestSuiteBuilder.using(\n",
        "115": "                new TestStringSetGenerator() {\n",
        "116": "                  @Override\n",
        "117": "                  protected Set<String> create(String[] elements) {\n",
        "118": "                    checkArgument(elements.length == 3);\n",
        "119": "                    return Sets.union(\n",
        "120": "                        Sets.newHashSet(elements[0]), Sets.newHashSet(elements[1], elements[2]));\n",
        "121": "                  }\n",
        "122": "                })\n",
        "123": "            .named(\"union of disjoint\")\n",
        "124": "            .withFeatures(CollectionSize.SEVERAL, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "125": "            .createTestSuite());\n",
        "126": "\n",
        "127": "    suite.addTest(\n",
        "128": "        SetTestSuiteBuilder.using(\n",
        "129": "                new TestStringSetGenerator() {\n",
        "130": "                  @Override\n",
        "131": "                  protected Set<String> create(String[] elements) {\n",
        "132": "                    return Sets.union(\n",
        "133": "                        Sets.<String>newHashSet(elements[0], elements[1]),\n",
        "134": "                        Sets.newHashSet(elements[1], elements[2]));\n",
        "135": "                  }\n",
        "136": "                })\n",
        "137": "            .named(\"venn\")\n",
        "138": "            .withFeatures(CollectionSize.SEVERAL, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "139": "            .createTestSuite());\n",
        "140": "\n",
        "141": "    suite.addTest(\n",
        "142": "        SetTestSuiteBuilder.using(\n",
        "143": "                new TestStringSetGenerator() {\n",
        "144": "                  @Override\n",
        "145": "                  protected Set<String> create(String[] elements) {\n",
        "146": "                    return Sets.intersection(Sets.<String>newHashSet(), Sets.<String>newHashSet());\n",
        "147": "                  }\n",
        "148": "                })\n",
        "149": "            .named(\"empty & empty\")\n",
        "150": "            .withFeatures(\n",
        "151": "                CollectionSize.ZERO, CollectionFeature.NONE, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "152": "            .createTestSuite());\n",
        "153": "\n",
        "154": "    suite.addTest(\n",
        "155": "        SetTestSuiteBuilder.using(\n",
        "156": "                new TestStringSetGenerator() {\n",
        "157": "                  @Override\n",
        "158": "                  protected Set<String> create(String[] elements) {\n",
        "159": "                    return Sets.intersection(\n",
        "160": "                        Sets.<String>newHashSet(), Sets.newHashSet((String) null));\n",
        "161": "                  }\n",
        "162": "                })\n",
        "163": "            .named(\"empty & singleton\")\n",
        "164": "            .withFeatures(\n",
        "165": "                CollectionSize.ZERO, CollectionFeature.NONE, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "166": "            .createTestSuite());\n",
        "167": "\n",
        "168": "    suite.addTest(\n",
        "169": "        SetTestSuiteBuilder.using(\n",
        "170": "                new TestStringSetGenerator() {\n",
        "171": "                  @Override\n",
        "172": "                  protected Set<String> create(String[] elements) {\n",
        "173": "                    return Sets.intersection(Sets.newHashSet(\"a\", \"b\"), Sets.newHashSet(\"c\", \"d\"));\n",
        "174": "                  }\n",
        "175": "                })\n",
        "176": "            .named(\"intersection of disjoint\")\n",
        "177": "            .withFeatures(\n",
        "178": "                CollectionSize.ZERO, CollectionFeature.NONE, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "179": "            .createTestSuite());\n",
        "180": "\n",
        "181": "    suite.addTest(\n",
        "182": "        SetTestSuiteBuilder.using(\n",
        "183": "                new TestStringSetGenerator() {\n",
        "184": "                  @Override\n",
        "185": "                  protected Set<String> create(String[] elements) {\n",
        "186": "                    return Sets.intersection(Sets.newHashSet(elements), Sets.newHashSet(elements));\n",
        "187": "                  }\n",
        "188": "                })\n",
        "189": "            .named(\"set & itself\")\n",
        "190": "            .withFeatures(\n",
        "191": "                CollectionSize.ONE, CollectionSize.SEVERAL, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "192": "            .createTestSuite());\n",
        "193": "\n",
        "194": "    suite.addTest(\n",
        "195": "        SetTestSuiteBuilder.using(\n",
        "196": "                new TestStringSetGenerator() {\n",
        "197": "                  @Override\n",
        "198": "                  protected Set<String> create(String[] elements) {\n",
        "199": "                    return Sets.intersection(\n",
        "200": "                        Sets.newHashSet(\"a\", elements[0], \"b\"),\n",
        "201": "                        Sets.newHashSet(\"c\", elements[0], \"d\"));\n",
        "202": "                  }\n",
        "203": "                })\n",
        "204": "            .named(\"intersection with overlap of one\")\n",
        "205": "            .withFeatures(CollectionSize.ONE, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "206": "            .createTestSuite());\n",
        "207": "\n",
        "208": "    suite.addTest(\n",
        "209": "        SetTestSuiteBuilder.using(\n",
        "210": "                new TestStringSetGenerator() {\n",
        "211": "                  @Override\n",
        "212": "                  protected Set<String> create(String[] elements) {\n",
        "213": "                    return Sets.difference(Sets.<String>newHashSet(), Sets.<String>newHashSet());\n",
        "214": "                  }\n",
        "215": "                })\n",
        "216": "            .named(\"empty - empty\")\n",
        "217": "            .withFeatures(\n",
        "218": "                CollectionSize.ZERO, CollectionFeature.NONE, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "219": "            .createTestSuite());\n",
        "220": "\n",
        "221": "    suite.addTest(\n",
        "222": "        SetTestSuiteBuilder.using(\n",
        "223": "                new TestStringSetGenerator() {\n",
        "224": "                  @Override\n",
        "225": "                  protected Set<String> create(String[] elements) {\n",
        "226": "                    return Sets.difference(Sets.newHashSet(\"a\"), Sets.newHashSet(\"a\"));\n",
        "227": "                  }\n",
        "228": "                })\n",
        "229": "            .named(\"singleton - itself\")\n",
        "230": "            .withFeatures(\n",
        "231": "                CollectionSize.ZERO, CollectionFeature.NONE, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "232": "            .createTestSuite());\n",
        "233": "\n",
        "234": "    suite.addTest(\n",
        "235": "        SetTestSuiteBuilder.using(\n",
        "236": "                new TestStringSetGenerator() {\n",
        "237": "                  @Override\n",
        "238": "                  protected Set<String> create(String[] elements) {\n",
        "239": "                    Set<String> set = Sets.newHashSet(\"b\", \"c\");\n",
        "240": "                    Set<String> other = Sets.newHashSet(\"a\", \"b\", \"c\", \"d\");\n",
        "241": "                    return Sets.difference(set, other);\n",
        "242": "                  }\n",
        "243": "                })\n",
        "244": "            .named(\"set - superset\")\n",
        "245": "            .withFeatures(\n",
        "246": "                CollectionSize.ZERO, CollectionFeature.NONE, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "247": "            .createTestSuite());\n",
        "248": "\n",
        "249": "    suite.addTest(\n",
        "250": "        SetTestSuiteBuilder.using(\n",
        "251": "                new TestStringSetGenerator() {\n",
        "252": "                  @Override\n",
        "253": "                  protected Set<String> create(String[] elements) {\n",
        "254": "                    Set<String> set = Sets.newHashSet(elements);\n",
        "255": "                    Set<String> other = Sets.newHashSet(\"wz\", \"xq\");\n",
        "256": "                    set.addAll(other);\n",
        "257": "                    other.add(\"pq\");\n",
        "258": "                    return Sets.difference(set, other);\n",
        "259": "                  }\n",
        "260": "                })\n",
        "261": "            .named(\"set - set\")\n",
        "262": "            .withFeatures(\n",
        "263": "                CollectionSize.ANY,\n",
        "264": "                CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "265": "                CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "266": "            .createTestSuite());\n",
        "267": "\n",
        "268": "    suite.addTest(\n",
        "269": "        SetTestSuiteBuilder.using(\n",
        "270": "                new TestStringSetGenerator() {\n",
        "271": "                  @Override\n",
        "272": "                  protected Set<String> create(String[] elements) {\n",
        "273": "                    return Sets.difference(Sets.newHashSet(elements), Sets.newHashSet());\n",
        "274": "                  }\n",
        "275": "                })\n",
        "276": "            .named(\"set - empty\")\n",
        "277": "            .withFeatures(\n",
        "278": "                CollectionSize.ONE, CollectionSize.SEVERAL, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "279": "            .createTestSuite());\n",
        "280": "\n",
        "281": "    suite.addTest(\n",
        "282": "        SetTestSuiteBuilder.using(\n",
        "283": "                new TestStringSetGenerator() {\n",
        "284": "                  @Override\n",
        "285": "                  protected Set<String> create(String[] elements) {\n",
        "286": "                    return Sets.difference(\n",
        "287": "                        Sets.<String>newHashSet(elements), Sets.newHashSet(\"xx\", \"xq\"));\n",
        "288": "                  }\n",
        "289": "                })\n",
        "290": "            .named(\"set - disjoint\")\n",
        "291": "            .withFeatures(CollectionSize.ANY, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "292": "            .createTestSuite());\n",
        "302": "    @Override\n",
        "303": "    public void setUp() {\n",
        "313": "      HashSet<String> mut = Sets.union(friends, enemies).copyInto(new HashSet<String>());\n",
        "328": "      ImmutableSet<String> immut = Sets.intersection(friends, enemies).immutableCopy();\n",
        "329": "      HashSet<String> mut = Sets.intersection(friends, enemies).copyInto(new HashSet<String>());\n",
        "344": "      ImmutableSet<String> immut = Sets.difference(friends, enemies).immutableCopy();\n",
        "345": "      HashSet<String> mut = Sets.difference(friends, enemies).copyInto(new HashSet<String>());\n",
        "357": "      Set<String> symmetricDifferenceFriendsFirst = Sets.symmetricDifference(friends, enemies);\n",
        "360": "      Set<String> symmetricDifferenceEnemiesFirst = Sets.symmetricDifference(enemies, friends);\n",
        "363": "      assertEquals(symmetricDifferenceFriendsFirst, symmetricDifferenceEnemiesFirst);\n",
        "365": "      ImmutableSet<String> immut = Sets.symmetricDifference(friends, enemies).immutableCopy();\n",
        "366": "      HashSet<String> mut =\n",
        "367": "          Sets.symmetricDifference(friends, enemies).copyInto(new HashSet<String>());\n",
        "375": "      mut = Sets.symmetricDifference(enemies, friends).copyInto(new HashSet<String>());\n"
    },
    "removed": {
        "35": " * Unit tests for {@link Sets#union}, {@link Sets#intersection} and\n",
        "36": " * {@link Sets#difference}.\n",
        "46": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "47": "          @Override protected Set<String> create(String[] elements) {\n",
        "48": "            return Sets.union(\n",
        "49": "                Sets.<String>newHashSet(), Sets.<String>newHashSet());\n",
        "50": "          }\n",
        "51": "        })\n",
        "52": "        .named(\"empty U empty\")\n",
        "53": "        .withFeatures(CollectionSize.ZERO, CollectionFeature.NONE,\n",
        "54": "            CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "55": "        .createTestSuite());\n",
        "56": "\n",
        "57": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "58": "          @Override protected Set<String> create(String[] elements) {\n",
        "59": "            checkArgument(elements.length == 1);\n",
        "60": "            return Sets.union(\n",
        "61": "                Sets.<String>newHashSet(elements), Sets.newHashSet(elements));\n",
        "62": "          }\n",
        "63": "        })\n",
        "64": "        .named(\"singleton U itself\")\n",
        "65": "        .withFeatures(CollectionSize.ONE, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "66": "        .createTestSuite());\n",
        "67": "\n",
        "68": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "69": "          @Override protected Set<String> create(String[] elements) {\n",
        "70": "            return Sets.union(\n",
        "71": "                Sets.<String>newHashSet(), Sets.newHashSet(elements));\n",
        "72": "          }\n",
        "73": "        })\n",
        "74": "        .named(\"empty U set\")\n",
        "75": "        .withFeatures(CollectionSize.ONE, CollectionSize.SEVERAL,\n",
        "76": "            CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "77": "        .createTestSuite());\n",
        "78": "\n",
        "79": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "80": "          @Override protected Set<String> create(String[] elements) {\n",
        "81": "            return Sets.union(\n",
        "82": "                Sets.newHashSet(elements), Sets.<String>newHashSet());\n",
        "83": "          }\n",
        "84": "        })\n",
        "85": "        .named(\"set U empty\")\n",
        "86": "        .withFeatures(CollectionSize.ONE, CollectionSize.SEVERAL,\n",
        "87": "            CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "88": "        .createTestSuite());\n",
        "89": "\n",
        "90": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "91": "          @Override protected Set<String> create(String[] elements) {\n",
        "92": "            checkArgument(elements.length == 3);\n",
        "93": "            // Put the sets in different orders for the hell of it\n",
        "94": "            return Sets.union(\n",
        "95": "                Sets.newLinkedHashSet(asList(elements)),\n",
        "96": "                Sets.newLinkedHashSet(\n",
        "97": "                    asList(elements[1], elements[0], elements[2])));\n",
        "98": "          }\n",
        "99": "        })\n",
        "100": "        .named(\"set U itself\")\n",
        "101": "        .withFeatures(CollectionSize.SEVERAL,\n",
        "102": "            CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "103": "        .createTestSuite());\n",
        "104": "\n",
        "105": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "106": "          @Override protected Set<String> create(String[] elements) {\n",
        "107": "            checkArgument(elements.length == 3);\n",
        "108": "            return Sets.union(\n",
        "109": "                Sets.newHashSet(elements[0]),\n",
        "110": "                Sets.newHashSet(elements[1], elements[2]));\n",
        "111": "          }\n",
        "112": "        })\n",
        "113": "        .named(\"union of disjoint\")\n",
        "114": "        .withFeatures(CollectionSize.SEVERAL,\n",
        "115": "            CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "116": "        .createTestSuite());\n",
        "117": "\n",
        "118": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "119": "          @Override protected Set<String> create(String[] elements) {\n",
        "120": "            return Sets.union(\n",
        "121": "                Sets.<String>newHashSet(elements[0], elements[1]),\n",
        "122": "                Sets.newHashSet(elements[1], elements[2]));\n",
        "123": "          }\n",
        "124": "        })\n",
        "125": "        .named(\"venn\")\n",
        "126": "        .withFeatures(CollectionSize.SEVERAL,\n",
        "127": "            CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "128": "        .createTestSuite());\n",
        "129": "\n",
        "130": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "131": "          @Override protected Set<String> create(String[] elements) {\n",
        "132": "            return Sets.intersection(\n",
        "133": "                Sets.<String>newHashSet(), Sets.<String>newHashSet());\n",
        "134": "          }\n",
        "135": "        })\n",
        "136": "        .named(\"empty & empty\")\n",
        "137": "        .withFeatures(CollectionSize.ZERO, CollectionFeature.NONE,\n",
        "138": "            CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "139": "        .createTestSuite());\n",
        "140": "\n",
        "141": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "142": "          @Override protected Set<String> create(String[] elements) {\n",
        "143": "            return Sets.intersection(\n",
        "144": "                Sets.<String>newHashSet(), Sets.newHashSet((String) null));\n",
        "145": "          }\n",
        "146": "        })\n",
        "147": "        .named(\"empty & singleton\")\n",
        "148": "        .withFeatures(CollectionSize.ZERO, CollectionFeature.NONE,\n",
        "149": "            CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "150": "        .createTestSuite());\n",
        "151": "\n",
        "152": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "153": "          @Override protected Set<String> create(String[] elements) {\n",
        "154": "            return Sets.intersection(\n",
        "155": "                Sets.newHashSet(\"a\", \"b\"), Sets.newHashSet(\"c\", \"d\"));\n",
        "156": "          }\n",
        "157": "        })\n",
        "158": "        .named(\"intersection of disjoint\")\n",
        "159": "        .withFeatures(CollectionSize.ZERO, CollectionFeature.NONE,\n",
        "160": "            CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "161": "        .createTestSuite());\n",
        "162": "\n",
        "163": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "164": "          @Override protected Set<String> create(String[] elements) {\n",
        "165": "            return Sets.intersection(\n",
        "166": "                Sets.newHashSet(elements), Sets.newHashSet(elements));\n",
        "167": "          }\n",
        "168": "        })\n",
        "169": "        .named(\"set & itself\")\n",
        "170": "        .withFeatures(CollectionSize.ONE, CollectionSize.SEVERAL,\n",
        "171": "            CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "172": "        .createTestSuite());\n",
        "173": "\n",
        "174": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "175": "          @Override protected Set<String> create(String[] elements) {\n",
        "176": "            return Sets.intersection(\n",
        "177": "                Sets.newHashSet(\"a\", elements[0], \"b\"),\n",
        "178": "                Sets.newHashSet(\"c\", elements[0], \"d\"));\n",
        "179": "          }\n",
        "180": "        })\n",
        "181": "        .named(\"intersection with overlap of one\")\n",
        "182": "        .withFeatures(CollectionSize.ONE, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "183": "        .createTestSuite());\n",
        "184": "\n",
        "185": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "186": "          @Override protected Set<String> create(String[] elements) {\n",
        "187": "            return Sets.difference(\n",
        "188": "                Sets.<String>newHashSet(), Sets.<String>newHashSet());\n",
        "189": "          }\n",
        "190": "        })\n",
        "191": "        .named(\"empty - empty\")\n",
        "192": "        .withFeatures(CollectionSize.ZERO, CollectionFeature.NONE,\n",
        "193": "            CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "194": "        .createTestSuite());\n",
        "195": "\n",
        "196": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "197": "          @Override protected Set<String> create(String[] elements) {\n",
        "198": "            return Sets.difference(Sets.newHashSet(\"a\"), Sets.newHashSet(\"a\"));\n",
        "199": "          }\n",
        "200": "        })\n",
        "201": "        .named(\"singleton - itself\")\n",
        "202": "        .withFeatures(CollectionSize.ZERO, CollectionFeature.NONE,\n",
        "203": "            CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "204": "        .createTestSuite());\n",
        "205": "\n",
        "206": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "207": "          @Override protected Set<String> create(String[] elements) {\n",
        "208": "            Set<String> set = Sets.newHashSet(\"b\", \"c\");\n",
        "209": "            Set<String> other = Sets.newHashSet(\"a\", \"b\", \"c\", \"d\");\n",
        "210": "            return Sets.difference(set, other);\n",
        "211": "          }\n",
        "212": "        })\n",
        "213": "        .named(\"set - superset\")\n",
        "214": "        .withFeatures(CollectionSize.ZERO, CollectionFeature.NONE,\n",
        "215": "            CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "216": "        .createTestSuite());\n",
        "217": "\n",
        "218": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "219": "          @Override protected Set<String> create(String[] elements) {\n",
        "220": "            Set<String> set = Sets.newHashSet(elements);\n",
        "221": "            Set<String> other = Sets.newHashSet(\"wz\", \"xq\");\n",
        "222": "            set.addAll(other);\n",
        "223": "            other.add(\"pq\");\n",
        "224": "            return Sets.difference(set, other);\n",
        "225": "          }\n",
        "226": "        })\n",
        "227": "        .named(\"set - set\")\n",
        "228": "        .withFeatures(CollectionSize.ANY, CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "229": "            CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "230": "        .createTestSuite());\n",
        "231": "\n",
        "232": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "233": "          @Override protected Set<String> create(String[] elements) {\n",
        "234": "            return Sets.difference(\n",
        "235": "                Sets.newHashSet(elements), Sets.newHashSet());\n",
        "236": "          }\n",
        "237": "        })\n",
        "238": "        .named(\"set - empty\")\n",
        "239": "        .withFeatures(CollectionSize.ONE, CollectionSize.SEVERAL,\n",
        "240": "            CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "241": "        .createTestSuite());\n",
        "242": "\n",
        "243": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "244": "          @Override protected Set<String> create(String[] elements) {\n",
        "245": "            return Sets.difference(\n",
        "246": "                Sets.<String>newHashSet(elements), Sets.newHashSet(\"xx\", \"xq\"));\n",
        "247": "          }\n",
        "248": "        })\n",
        "249": "        .named(\"set - disjoint\")\n",
        "250": "        .withFeatures(CollectionSize.ANY, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "251": "        .createTestSuite());\n",
        "261": "    @Override public void setUp() {\n",
        "271": "      HashSet<String> mut\n",
        "272": "          = Sets.union(friends, enemies).copyInto(new HashSet<String>());\n",
        "287": "      ImmutableSet<String> immut\n",
        "288": "          = Sets.intersection(friends, enemies).immutableCopy();\n",
        "289": "      HashSet<String> mut\n",
        "290": "          = Sets.intersection(friends, enemies).copyInto(new HashSet<String>());\n",
        "305": "      ImmutableSet<String> immut\n",
        "306": "          = Sets.difference(friends, enemies).immutableCopy();\n",
        "307": "      HashSet<String> mut\n",
        "308": "          = Sets.difference(friends, enemies).copyInto(new HashSet<String>());\n",
        "320": "      Set<String> symmetricDifferenceFriendsFirst = Sets.symmetricDifference(\n",
        "321": "          friends, enemies);\n",
        "324": "      Set<String> symmetricDifferenceEnemiesFirst = Sets.symmetricDifference(\n",
        "325": "          enemies, friends);\n",
        "328": "      assertEquals(symmetricDifferenceFriendsFirst,\n",
        "329": "          symmetricDifferenceEnemiesFirst);\n",
        "331": "      ImmutableSet<String> immut\n",
        "332": "          = Sets.symmetricDifference(friends, enemies).immutableCopy();\n",
        "333": "      HashSet<String> mut = Sets.symmetricDifference(friends, enemies)\n",
        "334": "          .copyInto(new HashSet<String>());\n",
        "342": "      mut = Sets.symmetricDifference(enemies, friends).\n",
        "343": "          copyInto(new HashSet<String>());\n"
    }
}