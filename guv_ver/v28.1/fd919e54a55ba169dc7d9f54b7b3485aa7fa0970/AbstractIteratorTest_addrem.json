{
    "addition": {
        "40": "    Iterator<Integer> iter =\n",
        "41": "        new AbstractIterator<Integer>() {\n",
        "42": "          private int rep;\n",
        "43": "\n",
        "44": "          @Override\n",
        "45": "          public Integer computeNext() {\n",
        "46": "            switch (rep++) {\n",
        "47": "              case 0:\n",
        "48": "                return 0;\n",
        "49": "              case 1:\n",
        "50": "                return 1;\n",
        "51": "              case 2:\n",
        "52": "                return endOfData();\n",
        "53": "              default:\n",
        "54": "                fail(\"Should not have been invoked again\");\n",
        "55": "                return null;\n",
        "56": "            }\n",
        "57": "          }\n",
        "58": "        };\n",
        "82": "    Iterator<Integer> iter =\n",
        "83": "        new AbstractIterator<Integer>() {\n",
        "84": "          boolean haveBeenCalled;\n",
        "85": "\n",
        "86": "          @Override\n",
        "87": "          public Integer computeNext() {\n",
        "88": "            if (haveBeenCalled) {\n",
        "89": "              fail(\"Should not have been called again\");\n",
        "90": "            } else {\n",
        "91": "              haveBeenCalled = true;\n",
        "92": "              sneakyThrow(new SomeCheckedException());\n",
        "93": "            }\n",
        "94": "            return null; // never reached\n",
        "95": "          }\n",
        "96": "        };\n",
        "118": "    Iterator<Integer> iter =\n",
        "119": "        new AbstractIterator<Integer>() {\n",
        "120": "          @Override\n",
        "121": "          public Integer computeNext() {\n",
        "122": "            throw exception;\n",
        "123": "          }\n",
        "124": "        };\n",
        "177": "    Iterator<Object> itr =\n",
        "178": "        new AbstractIterator<Object>() {\n",
        "179": "          @Override\n",
        "180": "          public Object computeNext() {\n",
        "181": "            return new Object();\n",
        "182": "          }\n",
        "183": "        };\n",
        "208": "  /** Throws a undeclared checked exception. */\n",
        "219": "  private static class SomeCheckedException extends Exception {}\n",
        "221": "  private static class SomeUncheckedException extends RuntimeException {}\n"
    },
    "removed": {
        "40": "    Iterator<Integer> iter = new AbstractIterator<Integer>() {\n",
        "41": "      private int rep;\n",
        "42": "      @Override public Integer computeNext() {\n",
        "43": "        switch (rep++) {\n",
        "44": "          case 0:\n",
        "45": "            return 0;\n",
        "46": "          case 1:\n",
        "47": "            return 1;\n",
        "48": "          case 2:\n",
        "49": "            return endOfData();\n",
        "50": "          default:\n",
        "51": "            fail(\"Should not have been invoked again\");\n",
        "52": "            return null;\n",
        "53": "        }\n",
        "54": "      }\n",
        "55": "    };\n",
        "79": "    Iterator<Integer> iter = new AbstractIterator<Integer>() {\n",
        "80": "      boolean haveBeenCalled;\n",
        "81": "      @Override public Integer computeNext() {\n",
        "82": "        if (haveBeenCalled) {\n",
        "83": "          fail(\"Should not have been called again\");\n",
        "84": "        } else {\n",
        "85": "          haveBeenCalled = true;\n",
        "86": "          sneakyThrow(new SomeCheckedException());\n",
        "87": "        }\n",
        "88": "        return null; // never reached\n",
        "89": "      }\n",
        "90": "    };\n",
        "112": "    Iterator<Integer> iter = new AbstractIterator<Integer>() {\n",
        "113": "      @Override public Integer computeNext() {\n",
        "114": "        throw exception;\n",
        "115": "      }\n",
        "116": "    };\n",
        "169": "    Iterator<Object> itr = new AbstractIterator<Object>() {\n",
        "170": "      @Override public Object computeNext() {\n",
        "171": "        return new Object();\n",
        "172": "      }\n",
        "173": "    };\n",
        "198": "  /**\n",
        "199": "   * Throws a undeclared checked exception.\n",
        "200": "   */\n",
        "211": "  private static class SomeCheckedException extends Exception {\n",
        "212": "  }\n",
        "214": "  private static class SomeUncheckedException extends RuntimeException {\n",
        "215": "  }\n"
    }
}