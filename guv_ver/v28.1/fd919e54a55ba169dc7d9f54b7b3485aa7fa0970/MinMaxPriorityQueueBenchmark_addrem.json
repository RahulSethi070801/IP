{
    "addition": {
        "39": "  @Param({\"100\", \"10000\"})\n",
        "40": "  private int size;\n",
        "48": "  @BeforeExperiment\n",
        "49": "  void setUp() {\n",
        "56": "  @Benchmark\n",
        "57": "  void pollAndAdd(int reps) {\n",
        "64": "  @Benchmark\n",
        "65": "  void populate(int reps) {\n",
        "76": "   * Implementation of the InvertedMinMaxPriorityQueue which forwards all calls to a\n",
        "77": "   * MinMaxPriorityQueue, except poll, which is forwarded to pollMax. That way we can benchmark\n",
        "78": "   * pollMax using the same code that benchmarks poll.\n",
        "80": "  static final class InvertedMinMaxPriorityQueue<T> extends ForwardingQueue<T> {\n",
        "82": "\n",
        "100": "      @Override\n",
        "101": "      public Queue<Integer> create(Comparator<Integer> comparator) {\n",
        "106": "      @Override\n",
        "107": "      public Queue<Integer> create(Comparator<Integer> comparator) {\n",
        "112": "      @Override\n",
        "113": "      public Queue<Integer> create(Comparator<Integer> comparator) {\n",
        "122": "   * Does a CPU intensive operation on Integer and returns a BigInteger Used to implement an\n",
        "123": "   * ordering that spends a lot of cpu.\n",
        "132": "        v =\n",
        "133": "            v.add(\n",
        "134": "                v.multiply(\n",
        "135": "                    BigInteger.valueOf(((Double) Math.abs(Math.sin(i) * 10.0)).longValue())));\n",
        "143": "      @Override\n",
        "144": "      public Comparator<Integer> get() {\n",
        "149": "      @Override\n",
        "150": "      public Comparator<Integer> get() {\n"
    },
    "removed": {
        "39": "  @Param({\"100\", \"10000\"}) private int size;\n",
        "47": "  @BeforeExperiment void setUp() {\n",
        "54": "  @Benchmark void pollAndAdd(int reps) {\n",
        "61": "  @Benchmark void populate(int reps) {\n",
        "72": "   * Implementation of the InvertedMinMaxPriorityQueue which forwards all calls to\n",
        "73": "   * a MinMaxPriorityQueue, except poll, which is forwarded to pollMax. That way\n",
        "74": "   * we can benchmark pollMax using the same code that benchmarks poll.\n",
        "76": "  static final class InvertedMinMaxPriorityQueue <T> extends ForwardingQueue<T> {\n",
        "96": "      @Override public Queue<Integer> create(Comparator<Integer> comparator) {\n",
        "101": "      @Override public Queue<Integer> create(Comparator<Integer> comparator) {\n",
        "106": "      @Override public Queue<Integer> create(Comparator<Integer> comparator) {\n",
        "115": "   * Does a CPU intensive operation on Integer and returns a BigInteger\n",
        "116": "   * Used to implement an ordering that spends a lot of cpu.\n",
        "125": "        v = v.add(v.multiply(\n",
        "126": "            BigInteger.valueOf(\n",
        "127": "                ((Double) Math.abs(Math.sin(i) * 10.0)).longValue())));\n",
        "135": "      @Override public Comparator<Integer> get() {\n",
        "140": "      @Override public Comparator<Integer> get() {\n"
    }
}