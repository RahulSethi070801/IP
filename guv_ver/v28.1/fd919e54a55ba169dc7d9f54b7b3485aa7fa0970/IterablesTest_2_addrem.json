{
    "addition": {
        "71": "    Iterable<Integer> iterable =\n",
        "72": "        new Iterable<Integer>() {\n",
        "73": "          @Override\n",
        "74": "          public Iterator<Integer> iterator() {\n",
        "75": "            return asList(0, 1).iterator();\n",
        "76": "          }\n",
        "77": "        };\n",
        "84": "    List<Integer> collection =\n",
        "85": "        new ArrayList<Integer>(nums) {\n",
        "86": "          @Override\n",
        "87": "          public Iterator<Integer> iterator() {\n",
        "88": "            throw new AssertionFailedError(\"Don't iterate me!\");\n",
        "89": "          }\n",
        "90": "        };\n",
        "250": "    assertEquals(\"cool\", Iterables.find(list, Predicates.equalTo(\"cool\"), \"woot\"));\n",
        "251": "    assertEquals(\"pants\", Iterables.find(list, Predicates.equalTo(\"pants\"), \"woot\"));\n",
        "252": "    assertEquals(\"woot\", Iterables.find(list, Predicates.alwaysFalse(), \"woot\"));\n",
        "254": "    assertEquals(\"cool\", Iterables.find(list, Predicates.alwaysTrue(), \"woot\"));\n",
        "276": "    Iterable<TypeA> alist = Lists.newArrayList(new TypeA(), new TypeA(), hasBoth, new TypeA());\n",
        "285": "    Iterable<TypeA> alist = Lists.newArrayList(hasBoth1, new TypeA(), hasBoth2, new TypeA());\n",
        "295": "    Iterable<Integer> result =\n",
        "296": "        Iterables.transform(\n",
        "297": "            input,\n",
        "298": "            new Function<String, Integer>() {\n",
        "299": "              @Override\n",
        "300": "              public Integer apply(String from) {\n",
        "301": "                return Integer.valueOf(from);\n",
        "302": "              }\n",
        "303": "            });\n",
        "314": "    Iterable<String> result =\n",
        "315": "        Iterables.transform(\n",
        "316": "            input,\n",
        "317": "            new Function<Integer, String>() {\n",
        "318": "              @Override\n",
        "319": "              public String apply(Integer from) {\n",
        "320": "                return Integer.toBinaryString(from);\n",
        "321": "              }\n",
        "322": "            });\n",
        "331": "    Iterable<Integer> result =\n",
        "332": "        Iterables.transform(\n",
        "333": "            input,\n",
        "334": "            new Function<String, Integer>() {\n",
        "335": "              @Override\n",
        "336": "              public Integer apply(String from) {\n",
        "337": "                return Integer.valueOf(from);\n",
        "338": "              }\n",
        "339": "            });\n",
        "353": "    Iterable<String> result =\n",
        "354": "        Iterables.transform(\n",
        "355": "            input,\n",
        "356": "            new Function<Integer, String>() {\n",
        "357": "              @Override\n",
        "358": "              public String apply(Integer from) {\n",
        "359": "                return String.valueOf(from);\n",
        "360": "              }\n",
        "361": "            });\n",
        "419": "    Iterable<Integer> result = Iterables.concat(list1, list2, list3, list4, list5);\n",
        "431": "    } catch (NullPointerException expected) {\n",
        "432": "    }\n",
        "438": "    Iterable<Integer> repeated = Iterables.concat(Collections.nCopies(n, iterable));\n",
        "537": "    assertThat(alreadyThere).containsExactly(\"already\", \"there\", \"freshly\", \"added\").inOrder();\n",
        "542": "    for (@SuppressWarnings(\"unused\") Object obj : iterable) {}\n",
        "603": "    } catch (IllegalArgumentException expected) {\n",
        "604": "    }\n",
        "658": "    } catch (IllegalStateException expected) {\n",
        "659": "    }\n",
        "668": "    } catch (IllegalStateException expected) {\n",
        "669": "    }\n",
        "678": "    } catch (UnsupportedOperationException expected) {\n",
        "679": "    }\n",
        "684": "    new IteratorTester<Integer>(\n",
        "685": "        5, MODIFIABLE, newArrayList(2, 3), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "686": "      @Override\n",
        "687": "      protected Iterator<Integer> newTargetIterator() {\n",
        "695": "    new IteratorTester<Integer>(\n",
        "696": "        5, MODIFIABLE, newArrayList(2, 3), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "697": "      @Override\n",
        "698": "      protected Iterator<Integer> newTargetIterator() {\n",
        "750": "    } catch (IllegalArgumentException expected) {\n",
        "751": "    }\n",
        "758": "    } catch (IndexOutOfBoundsException expected) {\n",
        "759": "    }\n",
        "766": "    } catch (IndexOutOfBoundsException nsee) {\n",
        "767": "    }\n",
        "771": "    } catch (IndexOutOfBoundsException nsee) {\n",
        "772": "    }\n",
        "779": "    } catch (IndexOutOfBoundsException expected) {\n",
        "780": "    }\n",
        "872": "    } catch (NoSuchElementException e) {\n",
        "873": "    }\n",
        "902": "   * {@link ArrayList} extension that forbids the use of {@link Collection#iterator} for tests that\n",
        "903": "   * need to prove that it isn't called.\n",
        "906": "    /** @throws UnsupportedOperationException all the time */\n",
        "926": "    } catch (NoSuchElementException e) {\n",
        "927": "    }\n",
        "940": "    } catch (NoSuchElementException e) {\n",
        "941": "    }\n",
        "952": "    } catch (UnsupportedOperationException expected) {\n",
        "953": "    }\n",
        "973": "    assertSame(immutableList, Iterables.unmodifiableIterable((List<String>) immutableList));\n",
        "977": "    Multiset<String> multiset = ImmutableMultiset.of(\"a\", \"b\", \"a\", \"c\", \"b\", \"a\");\n",
        "1016": "    Iterable<String> iterable =\n",
        "1017": "        new Iterable<String>() {\n",
        "1018": "          @Override\n",
        "1019": "          public Iterator<String> iterator() {\n",
        "1020": "            return list.iterator();\n",
        "1021": "          }\n",
        "1022": "        };\n",
        "1039": "    Iterable<String> iterable =\n",
        "1040": "        new Iterable<String>() {\n",
        "1041": "          @Override\n",
        "1042": "          public Iterator<String> iterator() {\n",
        "1043": "            return list.iterator();\n",
        "1044": "          }\n",
        "1045": "        };\n",
        "1054": "    assertTrue(\n",
        "1055": "        Iterables.removeIf(\n",
        "1056": "            list,\n",
        "1057": "            new Predicate<String>() {\n",
        "1058": "              @Override\n",
        "1059": "              public boolean apply(String s) {\n",
        "1060": "                return s.equals(\"b\") || s.equals(\"d\") || s.equals(\"f\");\n",
        "1061": "              }\n",
        "1062": "            }));\n",
        "1064": "    assertFalse(\n",
        "1065": "        Iterables.removeIf(\n",
        "1066": "            list,\n",
        "1067": "            new Predicate<String>() {\n",
        "1068": "              @Override\n",
        "1069": "              public boolean apply(String s) {\n",
        "1070": "                return s.equals(\"x\") || s.equals(\"y\") || s.equals(\"z\");\n",
        "1071": "              }\n",
        "1072": "            }));\n",
        "1082": "    assertTrue(\n",
        "1083": "        Iterables.removeIf(\n",
        "1084": "            uniqueList,\n",
        "1085": "            new Predicate<String>() {\n",
        "1086": "              @Override\n",
        "1087": "              public boolean apply(String s) {\n",
        "1088": "                return s.equals(\"b\") || s.equals(\"d\") || s.equals(\"f\");\n",
        "1089": "              }\n",
        "1090": "            }));\n",
        "1092": "    assertFalse(\n",
        "1093": "        Iterables.removeIf(\n",
        "1094": "            uniqueList,\n",
        "1095": "            new Predicate<String>() {\n",
        "1096": "              @Override\n",
        "1097": "              public boolean apply(String s) {\n",
        "1098": "                return s.equals(\"x\") || s.equals(\"y\") || s.equals(\"z\");\n",
        "1099": "              }\n",
        "1100": "            }));\n",
        "1106": "    List<Integer> transformed =\n",
        "1107": "        Lists.transform(\n",
        "1108": "            list,\n",
        "1109": "            new Function<String, Integer>() {\n",
        "1110": "              @Override\n",
        "1111": "              public Integer apply(String s) {\n",
        "1112": "                return Integer.valueOf(s);\n",
        "1113": "              }\n",
        "1114": "            });\n",
        "1115": "    assertTrue(\n",
        "1116": "        Iterables.removeIf(\n",
        "1117": "            transformed,\n",
        "1118": "            new Predicate<Integer>() {\n",
        "1119": "              @Override\n",
        "1120": "              public boolean apply(Integer n) {\n",
        "1121": "                return (n & 1) == 0; // isEven()\n",
        "1122": "              }\n",
        "1123": "            }));\n",
        "1125": "    assertFalse(\n",
        "1126": "        Iterables.removeIf(\n",
        "1127": "            transformed,\n",
        "1128": "            new Predicate<Integer>() {\n",
        "1129": "              @Override\n",
        "1130": "              public boolean apply(Integer n) {\n",
        "1131": "                return (n & 1) == 0; // isEven()\n",
        "1132": "              }\n",
        "1133": "            }));\n",
        "1139": "    assertTrue(\n",
        "1140": "        Iterables.removeIf(\n",
        "1141": "            list,\n",
        "1142": "            new Predicate<String>() {\n",
        "1143": "              @Override\n",
        "1144": "              public boolean apply(String s) {\n",
        "1145": "                return s.equals(\"b\") || s.equals(\"d\") || s.equals(\"f\");\n",
        "1146": "              }\n",
        "1147": "            }));\n",
        "1149": "    assertFalse(\n",
        "1150": "        Iterables.removeIf(\n",
        "1151": "            list,\n",
        "1152": "            new Predicate<String>() {\n",
        "1153": "              @Override\n",
        "1154": "              public boolean apply(String s) {\n",
        "1155": "                return s.equals(\"x\") || s.equals(\"y\") || s.equals(\"z\");\n",
        "1156": "              }\n",
        "1157": "            }));\n",
        "1265": "    new IteratorTester<Integer>(3, UNMODIFIABLE, items, IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "1266": "      @Override\n",
        "1267": "      protected Iterator<Integer> newTargetIterator() {\n",
        "1268": "        return Iterables.consumingIterable(Lists.newLinkedList(items)).iterator();\n",
        "1276": "    Iterator<Integer> consumingIterator = Iterables.consumingIterable(queue).iterator();\n",
        "1287": "    Queue<Integer> queue = new UnIterableQueue<>(Lists.newLinkedList(asList(5, 14)));\n",
        "1289": "    Iterator<Integer> consumingIterator = Iterables.consumingIterable(queue).iterator();\n",
        "1304": "    @Override\n",
        "1305": "    public Iterator<T> iterator() {\n",
        "1309": "    @Override\n",
        "1310": "    protected Queue<T> delegate() {\n",
        "1334": "    List<String> list = Lists.newArrayList(\"mary\", \"bob\", \"bob\", \"bob\", \"sam\");\n",
        "1343": "        @Override\n",
        "1344": "        public boolean apply(CharSequence input) {\n",
        "1361": "    List<String> sequences = Lists.newArrayList(\"bob\", \"charlie\", \"henry\", \"apple\", \"lemon\");\n",
        "1370": "    Iterable<Integer> iterable = Iterables.mergeSorted(elements, Ordering.natural());\n",
        "1443": "  private static void verifyMergeSorted(\n",
        "1444": "      Iterable<Iterable<Integer>> iterables, Iterable<Integer> unsortedExpected) {\n",
        "1445": "    Iterable<Integer> expected = Ordering.natural().sortedCopy(unsortedExpected);\n",
        "1447": "    Iterable<Integer> mergedIterator = Iterables.mergeSorted(iterables, Ordering.natural());\n",
        "1449": "    assertEquals(Lists.newLinkedList(expected), Lists.newLinkedList(mergedIterator));\n"
    },
    "removed": {
        "71": "    Iterable<Integer> iterable = new Iterable<Integer>() {\n",
        "72": "      @Override\n",
        "73": "      public Iterator<Integer> iterator() {\n",
        "74": "        return asList(0, 1).iterator();\n",
        "75": "      }\n",
        "76": "    };\n",
        "83": "    List<Integer> collection = new ArrayList<Integer>(nums) {\n",
        "84": "      @Override public Iterator<Integer> iterator() {\n",
        "85": "        throw new AssertionFailedError(\"Don't iterate me!\");\n",
        "86": "      }\n",
        "87": "    };\n",
        "247": "    assertEquals(\"cool\",\n",
        "248": "        Iterables.find(list, Predicates.equalTo(\"cool\"), \"woot\"));\n",
        "249": "    assertEquals(\"pants\",\n",
        "250": "        Iterables.find(list, Predicates.equalTo(\"pants\"), \"woot\"));\n",
        "251": "    assertEquals(\"woot\", Iterables.find(list,\n",
        "252": "        Predicates.alwaysFalse(), \"woot\"));\n",
        "254": "    assertEquals(\"cool\",\n",
        "255": "        Iterables.find(list, Predicates.alwaysTrue(), \"woot\"));\n",
        "275": "    Iterable<TypeA> alist = Lists\n",
        "276": "        .newArrayList(new TypeA(), new TypeA(), hasBoth, new TypeA());\n",
        "285": "    Iterable<TypeA> alist = Lists\n",
        "286": "        .newArrayList(hasBoth1, new TypeA(), hasBoth2, new TypeA());\n",
        "296": "    Iterable<Integer> result = Iterables.transform(input,\n",
        "297": "        new Function<String, Integer>() {\n",
        "298": "          @Override\n",
        "299": "          public Integer apply(String from) {\n",
        "300": "            return Integer.valueOf(from);\n",
        "301": "          }\n",
        "302": "        });\n",
        "313": "    Iterable<String> result = Iterables.transform(input,\n",
        "314": "        new Function<Integer, String>() {\n",
        "315": "          @Override\n",
        "316": "          public String apply(Integer from) {\n",
        "317": "            return Integer.toBinaryString(from);\n",
        "318": "          }\n",
        "319": "        });\n",
        "328": "    Iterable<Integer> result = Iterables.transform(input,\n",
        "329": "        new Function<String, Integer>() {\n",
        "330": "          @Override\n",
        "331": "          public Integer apply(String from) {\n",
        "332": "            return Integer.valueOf(from);\n",
        "333": "          }\n",
        "334": "        });\n",
        "348": "    Iterable<String> result = Iterables.transform(input,\n",
        "349": "        new Function<Integer, String>() {\n",
        "350": "          @Override\n",
        "351": "          public String apply(Integer from) {\n",
        "352": "            return String.valueOf(from);\n",
        "353": "          }\n",
        "354": "        });\n",
        "412": "    Iterable<Integer> result =\n",
        "413": "        Iterables.concat(list1, list2, list3, list4, list5);\n",
        "425": "    } catch (NullPointerException expected) {}\n",
        "431": "    Iterable<Integer> repeated\n",
        "432": "        = Iterables.concat(Collections.nCopies(n, iterable));\n",
        "531": "    assertThat(alreadyThere).containsExactly(\n",
        "532": "        \"already\", \"there\", \"freshly\", \"added\").inOrder();\n",
        "537": "    for (@SuppressWarnings(\"unused\") Object obj : iterable) {\n",
        "538": "    }\n",
        "599": "    } catch (IllegalArgumentException expected) {}\n",
        "653": "    } catch (IllegalStateException expected) {}\n",
        "662": "    } catch (IllegalStateException expected) {}\n",
        "671": "    } catch (UnsupportedOperationException expected) {}\n",
        "676": "    new IteratorTester<Integer>(5, MODIFIABLE, newArrayList(2, 3),\n",
        "677": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "678": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "686": "    new IteratorTester<Integer>(5, MODIFIABLE, newArrayList(2, 3),\n",
        "687": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "688": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "740": "    } catch (IllegalArgumentException expected) {}\n",
        "747": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "754": "    } catch (IndexOutOfBoundsException nsee) {}\n",
        "758": "    } catch (IndexOutOfBoundsException nsee) {}\n",
        "765": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "857": "    } catch (NoSuchElementException e) {}\n",
        "886": "   * {@link ArrayList} extension that forbids the use of\n",
        "887": "   * {@link Collection#iterator} for tests that need to prove that it isn't\n",
        "888": "   * called.\n",
        "891": "    /**\n",
        "892": "     * @throws UnsupportedOperationException all the time\n",
        "893": "     */\n",
        "913": "    } catch (NoSuchElementException e) {}\n",
        "926": "    } catch (NoSuchElementException e) {}\n",
        "937": "    } catch (UnsupportedOperationException expected) {}\n",
        "957": "    assertSame(immutableList,\n",
        "958": "        Iterables.unmodifiableIterable((List<String>) immutableList));\n",
        "962": "    Multiset<String> multiset\n",
        "963": "        = ImmutableMultiset.of(\"a\", \"b\", \"a\", \"c\", \"b\", \"a\");\n",
        "1002": "    Iterable<String> iterable = new Iterable<String>() {\n",
        "1003": "      @Override\n",
        "1004": "      public Iterator<String> iterator() {\n",
        "1005": "        return list.iterator();\n",
        "1006": "      }\n",
        "1007": "    };\n",
        "1024": "    Iterable<String> iterable = new Iterable<String>() {\n",
        "1025": "      @Override\n",
        "1026": "      public Iterator<String> iterator() {\n",
        "1027": "        return list.iterator();\n",
        "1028": "      }\n",
        "1029": "    };\n",
        "1038": "    assertTrue(Iterables.removeIf(list,\n",
        "1039": "        new Predicate<String>() {\n",
        "1040": "          @Override\n",
        "1041": "          public boolean apply(String s) {\n",
        "1042": "            return s.equals(\"b\") || s.equals(\"d\") || s.equals(\"f\");\n",
        "1043": "          }\n",
        "1044": "        }));\n",
        "1046": "    assertFalse(Iterables.removeIf(list,\n",
        "1047": "        new Predicate<String>() {\n",
        "1048": "          @Override\n",
        "1049": "          public boolean apply(String s) {\n",
        "1050": "            return s.equals(\"x\") || s.equals(\"y\") || s.equals(\"z\");\n",
        "1051": "          }\n",
        "1052": "        }));\n",
        "1062": "    assertTrue(Iterables.removeIf(uniqueList,\n",
        "1063": "        new Predicate<String>() {\n",
        "1064": "          @Override\n",
        "1065": "          public boolean apply(String s) {\n",
        "1066": "            return s.equals(\"b\") || s.equals(\"d\") || s.equals(\"f\");\n",
        "1067": "          }\n",
        "1068": "        }));\n",
        "1070": "    assertFalse(Iterables.removeIf(uniqueList,\n",
        "1071": "        new Predicate<String>() {\n",
        "1072": "          @Override\n",
        "1073": "          public boolean apply(String s) {\n",
        "1074": "            return s.equals(\"x\") || s.equals(\"y\") || s.equals(\"z\");\n",
        "1075": "          }\n",
        "1076": "        }));\n",
        "1082": "    List<Integer> transformed = Lists.transform(list,\n",
        "1083": "        new Function<String, Integer>() {\n",
        "1084": "          @Override\n",
        "1085": "          public Integer apply(String s) {\n",
        "1086": "            return Integer.valueOf(s);\n",
        "1087": "          }\n",
        "1088": "        });\n",
        "1089": "    assertTrue(Iterables.removeIf(transformed,\n",
        "1090": "        new Predicate<Integer>() {\n",
        "1091": "          @Override\n",
        "1092": "          public boolean apply(Integer n) {\n",
        "1093": "            return (n & 1) == 0;  // isEven()\n",
        "1094": "          }\n",
        "1095": "        }));\n",
        "1097": "    assertFalse(Iterables.removeIf(transformed,\n",
        "1098": "        new Predicate<Integer>() {\n",
        "1099": "          @Override\n",
        "1100": "          public boolean apply(Integer n) {\n",
        "1101": "            return (n & 1) == 0;  // isEven()\n",
        "1102": "          }\n",
        "1103": "        }));\n",
        "1109": "    assertTrue(Iterables.removeIf(list,\n",
        "1110": "        new Predicate<String>() {\n",
        "1111": "          @Override\n",
        "1112": "          public boolean apply(String s) {\n",
        "1113": "            return s.equals(\"b\") || s.equals(\"d\") || s.equals(\"f\");\n",
        "1114": "          }\n",
        "1115": "        }));\n",
        "1117": "    assertFalse(Iterables.removeIf(list,\n",
        "1118": "        new Predicate<String>() {\n",
        "1119": "          @Override\n",
        "1120": "          public boolean apply(String s) {\n",
        "1121": "            return s.equals(\"x\") || s.equals(\"y\") || s.equals(\"z\");\n",
        "1122": "          }\n",
        "1123": "        }));\n",
        "1231": "    new IteratorTester<Integer>(\n",
        "1232": "        3,\n",
        "1233": "        UNMODIFIABLE,\n",
        "1234": "        items,\n",
        "1235": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "1236": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "1237": "        return Iterables.consumingIterable(Lists.newLinkedList(items))\n",
        "1238": "            .iterator();\n",
        "1246": "    Iterator<Integer> consumingIterator =\n",
        "1247": "        Iterables.consumingIterable(queue).iterator();\n",
        "1258": "    Queue<Integer> queue =\n",
        "1259": "        new UnIterableQueue<>(Lists.newLinkedList(asList(5, 14)));\n",
        "1261": "    Iterator<Integer> consumingIterator =\n",
        "1262": "        Iterables.consumingIterable(queue).iterator();\n",
        "1277": "    @Override public Iterator<T> iterator() {\n",
        "1281": "    @Override protected Queue<T> delegate() {\n",
        "1305": "    List<String> list =\n",
        "1306": "        Lists.newArrayList(\"mary\", \"bob\", \"bob\", \"bob\", \"sam\");\n",
        "1315": "        @Override public boolean apply(CharSequence input) {\n",
        "1332": "    List<String> sequences =\n",
        "1333": "        Lists.newArrayList(\"bob\", \"charlie\", \"henry\", \"apple\", \"lemon\");\n",
        "1342": "    Iterable<Integer> iterable =\n",
        "1343": "        Iterables.mergeSorted(elements, Ordering.natural());\n",
        "1416": "  private static void verifyMergeSorted(Iterable<Iterable<Integer>> iterables,\n",
        "1417": "      Iterable<Integer> unsortedExpected) {\n",
        "1418": "    Iterable<Integer> expected =\n",
        "1419": "        Ordering.natural().sortedCopy(unsortedExpected);\n",
        "1421": "    Iterable<Integer> mergedIterator =\n",
        "1422": "        Iterables.mergeSorted(iterables, Ordering.natural());\n",
        "1424": "    assertEquals(Lists.newLinkedList(expected),\n",
        "1425": "        Lists.newLinkedList(mergedIterator));\n"
    }
}