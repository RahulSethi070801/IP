{
    "addition": {
        "72": "    suite.addTest(\n",
        "73": "        ListTestSuiteBuilder.using(new ImmutableListOfGenerator())\n",
        "74": "            .named(\"ImmutableList\")\n",
        "75": "            .withFeatures(CollectionSize.ANY, SERIALIZABLE, ALLOWS_NULL_QUERIES)\n",
        "76": "            .createTestSuite());\n",
        "77": "    suite.addTest(\n",
        "78": "        ListTestSuiteBuilder.using(new BuilderAddAllListGenerator())\n",
        "79": "            .named(\"ImmutableList, built with Builder.add\")\n",
        "80": "            .withFeatures(CollectionSize.ANY, SERIALIZABLE, ALLOWS_NULL_QUERIES)\n",
        "81": "            .createTestSuite());\n",
        "82": "    suite.addTest(\n",
        "83": "        ListTestSuiteBuilder.using(new BuilderAddAllListGenerator())\n",
        "84": "            .named(\"ImmutableList, built with Builder.addAll\")\n",
        "85": "            .withFeatures(CollectionSize.ANY, SERIALIZABLE, ALLOWS_NULL_QUERIES)\n",
        "86": "            .createTestSuite());\n",
        "87": "    suite.addTest(\n",
        "88": "        ListTestSuiteBuilder.using(new BuilderReversedListGenerator())\n",
        "89": "            .named(\"ImmutableList, reversed\")\n",
        "90": "            .withFeatures(CollectionSize.ANY, SERIALIZABLE, ALLOWS_NULL_QUERIES)\n",
        "91": "            .createTestSuite());\n",
        "92": "    suite.addTest(\n",
        "93": "        ListTestSuiteBuilder.using(new ImmutableListHeadSubListGenerator())\n",
        "94": "            .named(\"ImmutableList, head subList\")\n",
        "95": "            .withFeatures(CollectionSize.ANY, SERIALIZABLE, ALLOWS_NULL_QUERIES)\n",
        "96": "            .createTestSuite());\n",
        "97": "    suite.addTest(\n",
        "98": "        ListTestSuiteBuilder.using(new ImmutableListTailSubListGenerator())\n",
        "99": "            .named(\"ImmutableList, tail subList\")\n",
        "100": "            .withFeatures(CollectionSize.ANY, SERIALIZABLE, ALLOWS_NULL_QUERIES)\n",
        "101": "            .createTestSuite());\n",
        "102": "    suite.addTest(\n",
        "103": "        ListTestSuiteBuilder.using(new ImmutableListMiddleSubListGenerator())\n",
        "104": "            .named(\"ImmutableList, middle subList\")\n",
        "105": "            .withFeatures(CollectionSize.ANY, SERIALIZABLE, ALLOWS_NULL_QUERIES)\n",
        "106": "            .createTestSuite());\n",
        "107": "    suite.addTest(\n",
        "108": "        ListTestSuiteBuilder.using(new UnhashableElementsImmutableListGenerator())\n",
        "109": "            .suppressing(ListHashCodeTester.getHashCodeMethod())\n",
        "110": "            .named(\"ImmutableList, unhashable values\")\n",
        "111": "            .withFeatures(CollectionSize.ANY, ALLOWS_NULL_QUERIES)\n",
        "112": "            .createTestSuite());\n",
        "158": "      List<String> list = ImmutableList.of(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\");\n",
        "159": "      assertEquals(Lists.newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"), list);\n",
        "163": "      List<String> list = ImmutableList.of(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\");\n",
        "164": "      assertEquals(Lists.newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"), list);\n",
        "168": "      List<String> list = ImmutableList.of(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\");\n",
        "169": "      assertEquals(Lists.newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"), list);\n",
        "173": "      List<String> list = ImmutableList.of(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\");\n",
        "174": "      assertEquals(Lists.newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"), list);\n",
        "180": "      List<String> list =\n",
        "181": "          ImmutableList.of(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\");\n",
        "182": "      assertEquals(\n",
        "183": "          Lists.newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"), list);\n",
        "187": "      List<String> list =\n",
        "188": "          ImmutableList.of(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\");\n",
        "189": "      assertEquals(\n",
        "190": "          Lists.newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"),\n",
        "195": "      List<String> list =\n",
        "196": "          ImmutableList.of(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\");\n",
        "197": "      assertEquals(\n",
        "198": "          Lists.newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"),\n",
        "225": "      String[] array = new String[] {\"a\"};\n",
        "237": "      String[] array = new String[] {\"a\"};\n",
        "251": "      String[] array = new String[] {null};\n",
        "330": "          Collection<String> misleading = Helpers.misleadingSizeCollection(delta);\n",
        "334": "          assertEquals(expected, ImmutableList.copyOf((Iterable<String>) misleading));\n",
        "381": "        fail(\"Expected NullPointerException\");\n",
        "402": "        fail(\"Expected NullPointerException\");\n",
        "472": "    enum WrapWithIterable {\n",
        "473": "      WRAP,\n",
        "474": "      NO_WRAP\n",
        "475": "    }\n",
        "482": "          newConcurrentlyMutatedList(initialContents, actionsToPerformConcurrently);\n",
        "484": "      Iterable<Integer> iterableToCopy =\n",
        "485": "          wrap == WrapWithIterable.WRAP\n",
        "486": "              ? unmodifiableIterable(concurrentlyMutatedList)\n",
        "487": "              : concurrentlyMutatedList;\n",
        "489": "      ImmutableList<Integer> copyOfIterable = ImmutableList.copyOf(iterableToCopy);\n",
        "491": "      assertTrue(concurrentlyMutatedList.getAllStates().contains(copyOfIterable));\n",
        "499": "      runConcurrentlyMutatedTest(elements(), ops(add(1), add(2)), wrap);\n",
        "500": "\n",
        "501": "      runConcurrentlyMutatedTest(elements(), ops(add(1), nop()), wrap);\n",
        "502": "\n",
        "503": "      runConcurrentlyMutatedTest(elements(), ops(add(1), remove()), wrap);\n",
        "504": "\n",
        "505": "      runConcurrentlyMutatedTest(elements(), ops(nop(), add(1)), wrap);\n",
        "506": "\n",
        "507": "      runConcurrentlyMutatedTest(elements(1), ops(remove(), nop()), wrap);\n",
        "508": "\n",
        "509": "      runConcurrentlyMutatedTest(elements(1), ops(remove(), add(2)), wrap);\n",
        "510": "\n",
        "511": "      runConcurrentlyMutatedTest(elements(1, 2), ops(remove(), remove()), wrap);\n",
        "512": "\n",
        "513": "      runConcurrentlyMutatedTest(elements(1, 2), ops(remove(), nop()), wrap);\n",
        "514": "\n",
        "515": "      runConcurrentlyMutatedTest(elements(1, 2), ops(remove(), add(3)), wrap);\n",
        "516": "\n",
        "517": "      runConcurrentlyMutatedTest(elements(1, 2), ops(nop(), remove()), wrap);\n",
        "518": "\n",
        "519": "      runConcurrentlyMutatedTest(elements(1, 2, 3), ops(remove(), remove()), wrap);\n",
        "564": "        public void perform(List<Integer> list) {}\n",
        "568": "    /** A list that mutates itself after every call to each of its {@link List} methods. */\n",
        "571": "       * The elements of a {@link ConcurrentlyMutatedList} are added and removed over time. This\n",
        "572": "       * method returns every state that the list has passed through at some point.\n",
        "578": "     * Returns a {@link ConcurrentlyMutatedList} that performs the given operations as its\n",
        "579": "     * concurrent modifications. The mutations occur in the same thread as the triggering method\n",
        "580": "     * call.\n",
        "629": "          (ConcurrentlyMutatedList<Integer>)\n",
        "630": "              newProxyInstance(\n",
        "631": "                  ImmutableListTest.CreationTests.class.getClassLoader(),\n",
        "632": "                  new Class[] {ConcurrentlyMutatedList.class},\n",
        "633": "                  invocationHandler);\n",
        "674": "      ImmutableList<String> list =\n",
        "675": "          new ImmutableList.Builder<String>().add(\"a\").add(\"b\").add(\"a\").add(\"c\").build();\n",
        "706": "      ImmutableList<String> list =\n",
        "707": "          new ImmutableList.Builder<String>().add(\"a\", \"b\", \"a\", \"c\").build();\n",
        "714": "      ImmutableList<String> list = new ImmutableList.Builder<String>().addAll(a).addAll(b).build();\n",
        "715": "      assertEquals(asList(\"a\", \"b\", \"c\", \"d\"), list);\n",
        "717": "      assertEquals(asList(\"a\", \"b\", \"c\", \"d\"), list);\n",
        "723": "      ImmutableList<String> list =\n",
        "724": "          new ImmutableList.Builder<String>().addAll(a.iterator()).addAll(b.iterator()).build();\n",
        "725": "      assertEquals(asList(\"a\", \"b\", \"c\", \"d\"), list);\n",
        "727": "      assertEquals(asList(\"a\", \"b\", \"c\", \"d\"), list);\n",
        "732": "      ImmutableList.Builder<Integer> webSafeColorsBuilder = ImmutableList.builder();\n",
        "742": "      Integer[] webSafeColorArray = webSafeColors.toArray(new Integer[webSafeColors.size()]);\n",
        "750": "      ImmutableList<Integer> addedColor = webSafeColorsBuilder.add(0x00BFFF).build();\n",
        "751": "      assertEquals(\n",
        "752": "          \"Modifying the builder should not have changed any already\" + \" built sets\",\n",
        "753": "          216,\n",
        "754": "          webSafeColors.size());\n",
        "755": "      assertEquals(\"the new array should be one bigger than webSafeColors\", 217, addedColor.size());\n",
        "756": "      Integer[] appendColorArray = addedColor.toArray(new Integer[addedColor.size()]);\n"
    },
    "removed": {
        "72": "    suite.addTest(ListTestSuiteBuilder.using(new ImmutableListOfGenerator())\n",
        "73": "        .named(\"ImmutableList\")\n",
        "74": "        .withFeatures(CollectionSize.ANY,\n",
        "75": "            SERIALIZABLE,\n",
        "76": "            ALLOWS_NULL_QUERIES)\n",
        "77": "        .createTestSuite());\n",
        "78": "    suite.addTest(ListTestSuiteBuilder.using(new BuilderAddAllListGenerator())\n",
        "79": "        .named(\"ImmutableList, built with Builder.add\")\n",
        "80": "        .withFeatures(CollectionSize.ANY,\n",
        "81": "            SERIALIZABLE,\n",
        "82": "            ALLOWS_NULL_QUERIES)\n",
        "83": "        .createTestSuite());\n",
        "84": "    suite.addTest(ListTestSuiteBuilder.using(new BuilderAddAllListGenerator())\n",
        "85": "        .named(\"ImmutableList, built with Builder.addAll\")\n",
        "86": "        .withFeatures(CollectionSize.ANY,\n",
        "87": "            SERIALIZABLE,\n",
        "88": "            ALLOWS_NULL_QUERIES)\n",
        "89": "        .createTestSuite());\n",
        "90": "    suite.addTest(ListTestSuiteBuilder.using(new BuilderReversedListGenerator())\n",
        "91": "        .named(\"ImmutableList, reversed\")\n",
        "92": "        .withFeatures(CollectionSize.ANY,\n",
        "93": "            SERIALIZABLE,\n",
        "94": "            ALLOWS_NULL_QUERIES)\n",
        "95": "        .createTestSuite());\n",
        "96": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "97": "        new ImmutableListHeadSubListGenerator())\n",
        "98": "        .named(\"ImmutableList, head subList\")\n",
        "99": "        .withFeatures(CollectionSize.ANY,\n",
        "100": "            SERIALIZABLE,\n",
        "101": "            ALLOWS_NULL_QUERIES)\n",
        "102": "        .createTestSuite());\n",
        "103": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "104": "        new ImmutableListTailSubListGenerator())\n",
        "105": "        .named(\"ImmutableList, tail subList\")\n",
        "106": "        .withFeatures(CollectionSize.ANY,\n",
        "107": "            SERIALIZABLE,\n",
        "108": "            ALLOWS_NULL_QUERIES)\n",
        "109": "        .createTestSuite());\n",
        "110": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "111": "        new ImmutableListMiddleSubListGenerator())\n",
        "112": "        .named(\"ImmutableList, middle subList\")\n",
        "113": "        .withFeatures(CollectionSize.ANY,\n",
        "114": "            SERIALIZABLE,\n",
        "115": "            ALLOWS_NULL_QUERIES)\n",
        "116": "        .createTestSuite());\n",
        "117": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "118": "        new UnhashableElementsImmutableListGenerator())\n",
        "119": "        .suppressing(ListHashCodeTester.getHashCodeMethod())\n",
        "120": "        .named(\"ImmutableList, unhashable values\")\n",
        "121": "        .withFeatures(CollectionSize.ANY,\n",
        "122": "            ALLOWS_NULL_QUERIES)\n",
        "123": "        .createTestSuite());\n",
        "169": "      List<String> list = ImmutableList.of(\n",
        "170": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\");\n",
        "171": "      assertEquals(Lists.newArrayList(\n",
        "172": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"), list);\n",
        "176": "      List<String> list = ImmutableList.of(\n",
        "177": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\");\n",
        "178": "      assertEquals(Lists.newArrayList(\n",
        "179": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"), list);\n",
        "183": "      List<String> list = ImmutableList.of(\n",
        "184": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\");\n",
        "185": "      assertEquals(Lists.newArrayList(\n",
        "186": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"), list);\n",
        "190": "      List<String> list = ImmutableList.of(\n",
        "191": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\");\n",
        "192": "      assertEquals(Lists.newArrayList(\n",
        "193": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"), list);\n",
        "199": "      List<String> list = ImmutableList.of(\n",
        "200": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\");\n",
        "201": "      assertEquals(Lists.newArrayList(\n",
        "202": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"), list);\n",
        "206": "      List<String> list = ImmutableList.of(\n",
        "207": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\");\n",
        "208": "      assertEquals(Lists.newArrayList(\n",
        "209": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"),\n",
        "214": "      List<String> list = ImmutableList.of(\n",
        "215": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\");\n",
        "216": "      assertEquals(Lists.newArrayList(\n",
        "217": "          \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"),\n",
        "244": "      String[] array = new String[] { \"a\" };\n",
        "256": "      String[] array = new String[] { \"a\" };\n",
        "270": "      String[] array = new String[] { null };\n",
        "349": "          Collection<String> misleading =\n",
        "350": "              Helpers.misleadingSizeCollection(delta);\n",
        "354": "          assertEquals(expected,\n",
        "355": "              ImmutableList.copyOf((Iterable<String>) misleading));\n",
        "401": "        fail (\"Expected NullPointerException\");\n",
        "422": "        fail (\"Expected NullPointerException\");\n",
        "492": "    enum WrapWithIterable { WRAP, NO_WRAP }\n",
        "499": "          newConcurrentlyMutatedList(\n",
        "500": "              initialContents, actionsToPerformConcurrently);\n",
        "502": "      Iterable<Integer> iterableToCopy = wrap == WrapWithIterable.WRAP\n",
        "503": "          ? unmodifiableIterable(concurrentlyMutatedList)\n",
        "504": "          : concurrentlyMutatedList;\n",
        "506": "      ImmutableList<Integer> copyOfIterable =\n",
        "507": "          ImmutableList.copyOf(iterableToCopy);\n",
        "509": "      assertTrue(concurrentlyMutatedList.getAllStates()\n",
        "510": "          .contains(copyOfIterable));\n",
        "518": "      runConcurrentlyMutatedTest(\n",
        "519": "          elements(),\n",
        "520": "          ops(add(1), add(2)),\n",
        "521": "          wrap);\n",
        "522": "\n",
        "523": "      runConcurrentlyMutatedTest(\n",
        "524": "          elements(),\n",
        "525": "          ops(add(1), nop()),\n",
        "526": "          wrap);\n",
        "527": "\n",
        "528": "      runConcurrentlyMutatedTest(\n",
        "529": "          elements(),\n",
        "530": "          ops(add(1), remove()),\n",
        "531": "          wrap);\n",
        "532": "\n",
        "533": "      runConcurrentlyMutatedTest(\n",
        "534": "          elements(),\n",
        "535": "          ops(nop(), add(1)),\n",
        "536": "          wrap);\n",
        "537": "\n",
        "538": "      runConcurrentlyMutatedTest(\n",
        "539": "          elements(1),\n",
        "540": "          ops(remove(), nop()),\n",
        "541": "          wrap);\n",
        "542": "\n",
        "543": "      runConcurrentlyMutatedTest(\n",
        "544": "          elements(1),\n",
        "545": "          ops(remove(), add(2)),\n",
        "546": "          wrap);\n",
        "547": "\n",
        "548": "      runConcurrentlyMutatedTest(\n",
        "549": "          elements(1, 2),\n",
        "550": "          ops(remove(), remove()),\n",
        "551": "          wrap);\n",
        "552": "\n",
        "553": "      runConcurrentlyMutatedTest(\n",
        "554": "          elements(1, 2),\n",
        "555": "          ops(remove(), nop()),\n",
        "556": "          wrap);\n",
        "557": "\n",
        "558": "      runConcurrentlyMutatedTest(\n",
        "559": "          elements(1, 2),\n",
        "560": "          ops(remove(), add(3)),\n",
        "561": "          wrap);\n",
        "562": "\n",
        "563": "      runConcurrentlyMutatedTest(\n",
        "564": "          elements(1, 2),\n",
        "565": "          ops(nop(), remove()),\n",
        "566": "          wrap);\n",
        "567": "\n",
        "568": "      runConcurrentlyMutatedTest(\n",
        "569": "          elements(1, 2, 3),\n",
        "570": "          ops(remove(), remove()),\n",
        "571": "          wrap);\n",
        "616": "        public void perform(List<Integer> list) {\n",
        "617": "        }\n",
        "621": "    /**\n",
        "622": "     * A list that mutates itself after every call to each of its {@link List}\n",
        "623": "     * methods.\n",
        "624": "     */\n",
        "627": "       * The elements of a {@link ConcurrentlyMutatedList} are added and removed\n",
        "628": "       * over time. This method returns every state that the list has passed\n",
        "629": "       * through at some point.\n",
        "635": "     * Returns a {@link ConcurrentlyMutatedList} that performs the given\n",
        "636": "     * operations as its concurrent modifications. The mutations occur in the\n",
        "637": "     * same thread as the triggering method call.\n",
        "686": "          (ConcurrentlyMutatedList<Integer>) newProxyInstance(\n",
        "687": "              ImmutableListTest.CreationTests.class.getClassLoader(),\n",
        "688": "              new Class[] {ConcurrentlyMutatedList.class}, invocationHandler);\n",
        "729": "      ImmutableList<String> list = new ImmutableList.Builder<String>()\n",
        "730": "          .add(\"a\")\n",
        "731": "          .add(\"b\")\n",
        "732": "          .add(\"a\")\n",
        "733": "          .add(\"c\")\n",
        "734": "          .build();\n",
        "765": "      ImmutableList<String> list = new ImmutableList.Builder<String>()\n",
        "766": "          .add(\"a\", \"b\", \"a\", \"c\")\n",
        "767": "          .build();\n",
        "774": "      ImmutableList<String> list = new ImmutableList.Builder<String>()\n",
        "775": "          .addAll(a)\n",
        "776": "          .addAll(b)\n",
        "777": "          .build();\n",
        "778": "      assertEquals(asList( \"a\", \"b\", \"c\", \"d\"), list);\n",
        "780": "      assertEquals(asList( \"a\", \"b\", \"c\", \"d\"), list);\n",
        "786": "      ImmutableList<String> list = new ImmutableList.Builder<String>()\n",
        "787": "          .addAll(a.iterator())\n",
        "788": "          .addAll(b.iterator())\n",
        "789": "          .build();\n",
        "790": "      assertEquals(asList( \"a\", \"b\", \"c\", \"d\"), list);\n",
        "792": "      assertEquals(asList( \"a\", \"b\", \"c\", \"d\"), list);\n",
        "797": "      ImmutableList.Builder<Integer> webSafeColorsBuilder\n",
        "798": "          = ImmutableList.builder();\n",
        "808": "      Integer[] webSafeColorArray =\n",
        "809": "          webSafeColors.toArray(new Integer[webSafeColors.size()]);\n",
        "817": "      ImmutableList<Integer> addedColor\n",
        "818": "          = webSafeColorsBuilder.add(0x00BFFF).build();\n",
        "819": "      assertEquals(\"Modifying the builder should not have changed any already\"\n",
        "820": "          + \" built sets\", 216, webSafeColors.size());\n",
        "821": "      assertEquals(\"the new array should be one bigger than webSafeColors\",\n",
        "822": "          217, addedColor.size());\n",
        "823": "      Integer[] appendColorArray =\n",
        "824": "          addedColor.toArray(new Integer[addedColor.size()]);\n"
    }
}