{
    "addition": {
        "39": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\"> immutable collections</a>.\n",
        "55": "  /** Returns an immutable multimap containing a single entry. */\n",
        "62": "  /** Returns an immutable multimap containing the given entries, in order. */\n",
        "70": "  /** Returns an immutable multimap containing the given entries, in order. */\n",
        "79": "  /** Returns an immutable multimap containing the given entries, in order. */\n",
        "90": "  /** Returns an immutable multimap containing the given entries, in order. */\n",
        "105": "   * Returns a new builder. The generated builder is equivalent to the builder created by the {@link\n",
        "106": "   * Builder} constructor.\n",
        "113": "   * A builder for creating immutable {@code ListMultimap} instances, especially {@code public\n",
        "114": "   * static final} multimaps (\"constant multimaps\"). Example:\n",
        "116": "   * <pre>{@code\n",
        "117": "   * static final Multimap<String, Integer> STRING_TO_INTEGER_MULTIMAP =\n",
        "118": "   *     new ImmutableListMultimap.Builder<String, Integer>()\n",
        "119": "   *         .put(\"one\", 1)\n",
        "120": "   *         .putAll(\"several\", 1, 2, 3)\n",
        "121": "   *         .putAll(\"many\", 1, 2, 3, 4, 5)\n",
        "122": "   *         .build();\n",
        "123": "   * }</pre>\n",
        "125": "   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build\n",
        "126": "   * multiple multimaps in series. Each multimap contains the key-value mappings in the previously\n",
        "127": "   * created multimaps.\n",
        "133": "     * Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n",
        "134": "     * ImmutableListMultimap#builder}.\n",
        "215": "    /** Returns a newly-created immutable list multimap. */\n",
        "223": "   * Returns an immutable multimap containing the same mappings as {@code multimap}. The generated\n",
        "224": "   * multimap's key and value orderings correspond to the iteration ordering of the {@code\n",
        "225": "   * multimap.asMap()} view.\n",
        "227": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "228": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "229": "   * undocumented and subject to change.\n",
        "231": "   * @throws NullPointerException if any key or value in {@code multimap} is null\n",
        "265": "   * Returns an immutable multimap containing the specified entries. The returned multimap iterates\n",
        "266": "   * over keys in the order they were first encountered in the input, and the values for each key\n",
        "267": "   * are iterated in the order they were encountered.\n",
        "285": "   * Returns an immutable list of the values for the given key. If no mappings in the multimap have\n",
        "286": "   * the provided key, an empty immutable list is returned. The values are in the same order as the\n",
        "287": "   * parameters used to build this multimap.\n",
        "296": "  @LazyInit @RetainedWith private transient ImmutableListMultimap<V, K> inverse;\n",
        "301": "   * <p>Because an inverse of a list multimap can contain multiple pairs with the same key and\n",
        "302": "   * value, this method returns an {@code ImmutableListMultimap} rather than the {@code\n",
        "303": "   * ImmutableMultimap} specified in the {@code ImmutableMultimap} class.\n",
        "350": "   * @serialData number of distinct keys, and then for each distinct key: the key, the number of\n",
        "351": "   *     values for that key, and the key's values\n"
    },
    "removed": {
        "39": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\">\n",
        "40": " * immutable collections</a>.\n",
        "56": "  /**\n",
        "57": "   * Returns an immutable multimap containing a single entry.\n",
        "58": "   */\n",
        "65": "  /**\n",
        "66": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "67": "   */\n",
        "75": "  /**\n",
        "76": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "77": "   */\n",
        "86": "  /**\n",
        "87": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "88": "   */\n",
        "99": "  /**\n",
        "100": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "101": "   */\n",
        "116": "   * Returns a new builder. The generated builder is equivalent to the builder\n",
        "117": "   * created by the {@link Builder} constructor.\n",
        "124": "   * A builder for creating immutable {@code ListMultimap} instances, especially\n",
        "125": "   * {@code public static final} multimaps (\"constant multimaps\"). Example:\n",
        "126": "   * <pre>   {@code\n",
        "128": "   *   static final Multimap<String, Integer> STRING_TO_INTEGER_MULTIMAP =\n",
        "129": "   *       new ImmutableListMultimap.Builder<String, Integer>()\n",
        "130": "   *           .put(\"one\", 1)\n",
        "131": "   *           .putAll(\"several\", 1, 2, 3)\n",
        "132": "   *           .putAll(\"many\", 1, 2, 3, 4, 5)\n",
        "133": "   *           .build();}</pre>\n",
        "135": "   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple\n",
        "136": "   * times to build multiple multimaps in series. Each multimap contains the\n",
        "137": "   * key-value mappings in the previously created multimaps.\n",
        "143": "     * Creates a new builder. The returned builder is equivalent to the builder\n",
        "144": "     * generated by {@link ImmutableListMultimap#builder}.\n",
        "225": "    /**\n",
        "226": "     * Returns a newly-created immutable list multimap.\n",
        "227": "     */\n",
        "235": "   * Returns an immutable multimap containing the same mappings as {@code\n",
        "236": "   * multimap}. The generated multimap's key and value orderings correspond to\n",
        "237": "   * the iteration ordering of the {@code multimap.asMap()} view.\n",
        "239": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "240": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "241": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "243": "   * @throws NullPointerException if any key or value in {@code multimap} is\n",
        "244": "   *         null\n",
        "278": "   * Returns an immutable multimap containing the specified entries.  The\n",
        "279": "   * returned multimap iterates over keys in the order they were first\n",
        "280": "   * encountered in the input, and the values for each key are iterated in the\n",
        "281": "   * order they were encountered.\n",
        "299": "   * Returns an immutable list of the values for the given key.  If no mappings\n",
        "300": "   * in the multimap have the provided key, an empty immutable list is\n",
        "301": "   * returned. The values are in the same order as the parameters used to build\n",
        "302": "   * this multimap.\n",
        "311": "  @LazyInit\n",
        "312": "  @RetainedWith\n",
        "313": "  private transient ImmutableListMultimap<V, K> inverse;\n",
        "318": "   * <p>Because an inverse of a list multimap can contain multiple pairs with\n",
        "319": "   * the same key and value, this method returns an {@code\n",
        "320": "   * ImmutableListMultimap} rather than the {@code ImmutableMultimap} specified\n",
        "321": "   * in the {@code ImmutableMultimap} class.\n",
        "368": "   * @serialData number of distinct keys, and then for each distinct key: the\n",
        "369": "   *     key, the number of values for that key, and the key's values\n"
    }
}