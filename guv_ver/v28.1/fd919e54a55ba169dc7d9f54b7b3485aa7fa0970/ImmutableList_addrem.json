{
    "addition": {
        "47": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\"> immutable collections</a>.\n",
        "59": "   * Returns the empty immutable list. This list behaves and performs comparably to {@link\n",
        "60": "   * Collections#emptyList}, and is preferable mainly for consistency and maintainability of your\n",
        "61": "   * code.\n",
        "70": "   * Returns an immutable list containing a single element. This list behaves and performs\n",
        "71": "   * comparably to {@link Collections#singleton}, but will not accept a null element. It is\n",
        "72": "   * preferable mainly for consistency and maintainability of your code.\n",
        "202": "   * Returns an immutable list containing the given elements, in order. If {@code elements} is a\n",
        "203": "   * {@link Collection}, this method behaves exactly as {@link #copyOf(Collection)}; otherwise, it\n",
        "204": "   * behaves exactly as {@code copyOf(elements.iterator()}.\n",
        "218": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "219": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "220": "   * undocumented and subject to change.\n",
        "222": "   * <p>Note that if {@code list} is a {@code List<String>}, then {@code ImmutableList.copyOf(list)}\n",
        "223": "   * returns an {@code ImmutableList<String>} containing each of the strings in {@code list}, while\n",
        "224": "   * ImmutableList.of(list)} returns an {@code ImmutableList<List<String>>} containing one element\n",
        "225": "   * (the given list itself).\n",
        "227": "   * <p>This method is safe to use even when {@code elements} is a synchronized or concurrent\n",
        "228": "   * collection that is currently being modified by another thread.\n",
        "319": "  /** Views the array as an immutable list. Checks for nulls; does not copy. */\n",
        "325": "   * Views the array as an immutable list. Does not check for nulls; does not copy.\n",
        "402": "   * Returns an immutable list of the elements between the specified {@code fromIndex}, inclusive,\n",
        "403": "   * and {@code toIndex}, exclusive. (If {@code fromIndex} and {@code toIndex} are equal, the empty\n",
        "404": "   * immutable list is returned.)\n",
        "420": "   * Called by the default implementation of {@link #subList} when {@code toIndex - fromIndex > 1},\n",
        "421": "   * after index validation has already been performed.\n",
        "531": "   * Returns a view of this immutable list in reverse order. For example, {@code ImmutableList.of(1,\n",
        "532": "   * 2, 3).reverse()} is equivalent to {@code ImmutableList.of(3, 2, 1)}.\n",
        "647": "   * Returns a new builder. The generated builder is equivalent to the builder created by the {@link\n",
        "648": "   * Builder} constructor.\n",
        "673": "   * A builder for creating immutable list instances, especially {@code public static final} lists\n",
        "674": "   * (\"constant lists\"). Example:\n",
        "676": "   * <pre>{@code\n",
        "677": "   * public static final ImmutableList<Color> GOOGLE_COLORS\n",
        "678": "   *     = new ImmutableList.Builder<Color>()\n",
        "679": "   *         .addAll(WEBSAFE_COLORS)\n",
        "680": "   *         .add(new Color(0, 191, 255))\n",
        "681": "   *         .build();\n",
        "682": "   * }</pre>\n",
        "684": "   * <p>Elements appear in the resulting list in the same order they were added to the builder.\n",
        "686": "   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build\n",
        "687": "   * multiple lists in series. Each new list contains all the elements of the ones created before\n",
        "688": "   * it.\n",
        "694": "     * Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n",
        "695": "     * ImmutableList#builder}.\n",
        "724": "     * @throws NullPointerException if {@code elements} is null or contains a null element\n",
        "738": "     * @throws NullPointerException if {@code elements} is null or contains a null element\n",
        "752": "     * @throws NullPointerException if {@code elements} is null or contains a null element\n",
        "762": "     * Returns a newly-created {@code ImmutableList} based on the contents of the {@code Builder}.\n"
    },
    "removed": {
        "47": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\">\n",
        "48": " * immutable collections</a>.\n",
        "60": "   * Returns the empty immutable list. This list behaves and performs comparably\n",
        "61": "   * to {@link Collections#emptyList}, and is preferable mainly for consistency\n",
        "62": "   * and maintainability of your code.\n",
        "71": "   * Returns an immutable list containing a single element. This list behaves\n",
        "72": "   * and performs comparably to {@link Collections#singleton}, but will not\n",
        "73": "   * accept a null element. It is preferable mainly for consistency and\n",
        "74": "   * maintainability of your code.\n",
        "204": "   * Returns an immutable list containing the given elements, in order. If\n",
        "205": "   * {@code elements} is a {@link Collection}, this method behaves exactly as\n",
        "206": "   * {@link #copyOf(Collection)}; otherwise, it behaves exactly as {@code\n",
        "207": "   * copyOf(elements.iterator()}.\n",
        "221": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "222": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "223": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "225": "   * <p>Note that if {@code list} is a {@code List<String>}, then {@code\n",
        "226": "   * ImmutableList.copyOf(list)} returns an {@code ImmutableList<String>}\n",
        "227": "   * containing each of the strings in {@code list}, while\n",
        "228": "   * ImmutableList.of(list)} returns an {@code ImmutableList<List<String>>}\n",
        "229": "   * containing one element (the given list itself).\n",
        "231": "   * <p>This method is safe to use even when {@code elements} is a synchronized\n",
        "232": "   * or concurrent collection that is currently being modified by another\n",
        "233": "   * thread.\n",
        "324": "  /**\n",
        "325": "   * Views the array as an immutable list.  Checks for nulls; does not copy.\n",
        "326": "   */\n",
        "332": "   * Views the array as an immutable list.  Does not check for nulls; does not copy.\n",
        "409": "   * Returns an immutable list of the elements between the specified {@code\n",
        "410": "   * fromIndex}, inclusive, and {@code toIndex}, exclusive. (If {@code\n",
        "411": "   * fromIndex} and {@code toIndex} are equal, the empty immutable list is\n",
        "412": "   * returned.)\n",
        "428": "   * Called by the default implementation of {@link #subList} when {@code\n",
        "429": "   * toIndex - fromIndex > 1}, after index validation has already been\n",
        "430": "   * performed.\n",
        "540": "   * Returns a view of this immutable list in reverse order. For example, {@code\n",
        "541": "   * ImmutableList.of(1, 2, 3).reverse()} is equivalent to {@code\n",
        "542": "   * ImmutableList.of(3, 2, 1)}.\n",
        "657": "   * Returns a new builder. The generated builder is equivalent to the builder\n",
        "658": "   * created by the {@link Builder} constructor.\n",
        "683": "   * A builder for creating immutable list instances, especially {@code public\n",
        "684": "   * static final} lists (\"constant lists\"). Example: <pre>   {@code\n",
        "686": "   *   public static final ImmutableList<Color> GOOGLE_COLORS\n",
        "687": "   *       = new ImmutableList.Builder<Color>()\n",
        "688": "   *           .addAll(WEBSAFE_COLORS)\n",
        "689": "   *           .add(new Color(0, 191, 255))\n",
        "690": "   *           .build();}</pre>\n",
        "692": "   * <p>Elements appear in the resulting list in the same order they were added\n",
        "693": "   * to the builder.\n",
        "695": "   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple\n",
        "696": "   * times to build multiple lists in series. Each new list contains all the\n",
        "697": "   * elements of the ones created before it.\n",
        "703": "     * Creates a new builder. The returned builder is equivalent to the builder\n",
        "704": "     * generated by {@link ImmutableList#builder}.\n",
        "733": "     * @throws NullPointerException if {@code elements} is null or contains a\n",
        "734": "     *     null element\n",
        "748": "     * @throws NullPointerException if {@code elements} is null or contains a\n",
        "749": "     *     null element\n",
        "763": "     * @throws NullPointerException if {@code elements} is null or contains a\n",
        "764": "     *     null element\n",
        "774": "     * Returns a newly-created {@code ImmutableList} based on the contents of\n",
        "775": "     * the {@code Builder}.\n"
    }
}