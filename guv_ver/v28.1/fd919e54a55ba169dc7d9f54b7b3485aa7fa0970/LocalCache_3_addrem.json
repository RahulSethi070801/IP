{
    "addition": {
        "93": " * <p>This implementation is heavily derived from revision 1.96 of <a\n",
        "94": " * href=\"http://tinyurl.com/ConcurrentHashMap\">ConcurrentHashMap.java</a>.\n",
        "231": "  /** The default cache loader to use on loading operations. */\n",
        "425": "    /** Creates a reference for the given value according to this value strength. */\n",
        "437": "  /** Creates new entries. */\n",
        "552": "    /** Look-up table for factories. */\n",
        "621": "  /** A reference to a value. */\n",
        "623": "    /** Returns the value. Does not block or throw exceptions. */\n",
        "636": "    /** Returns the weight of this entry. This is assumed to be static between calls to setValue. */\n",
        "677": "  /** Placeholder. Indicates that the value hasn't been set yet. */\n",
        "722": "  /** Singleton placeholder that indicates a value is being loaded. */\n",
        "923": "  /** Queue that discards all elements. */\n",
        "937": "  /** Used for strongly-referenced keys. */\n",
        "1157": "  /** Used for weakly-referenced keys. */\n",
        "1445": "  /** References a weak value. */\n",
        "1489": "  /** References a soft value. */\n",
        "1533": "  /** References a strong value. */\n",
        "1581": "  /** References a weak value. */\n",
        "1603": "  /** References a soft value. */\n",
        "1625": "  /** References a strong value. */\n",
        "1759": "  /** Returns true if the entry has expired. */\n",
        "1864": "    /** The number of live elements in this segment's region. */\n",
        "1867": "    /** The weight of the live elements in this segment's region. */\n",
        "1885": "    /** The per-segment table. */\n",
        "1888": "    /** The maximum weight of this segment. UNSET_INT if there is no maximum. */\n",
        "2004": "    /** Sets a new value of an entry. Adds newly created entries at the end of the access queue. */\n",
        "2273": "    /** Waits uninterruptibly for {@code newValue} to be loaded, and then records loading stats. */\n",
        "2397": "    /** Cleanup collected entries when the lock is available. */\n",
        "2450": "    /** Clears all entries from the key and value reference queues. */\n",
        "2541": "    /** Cleanup expired entries when the lock is available. */\n",
        "2627": "    /** Returns first entry of bin for given hash. */\n",
        "2836": "    /** Expands the table if possible. */\n",
        "3266": "    /** Removes an entry whose key has been garbage collected. */\n",
        "3301": "    /** Removes an entry whose value has been garbage collected. */\n",
        "3429": "    /** Performs routine cleanup following a write. */\n",
        "3734": "   * A custom queue for managing access order. Note that this is tightly integrated with {@code\n",
        "3735": "   * ReferenceEntry}, upon which it relies to perform its linking.\n",
        "4343": "    /** Finds the next entry in the current chain. Returns true if an entry was found. */\n",
        "4355": "    /** Finds the next entry in the current table. Returns true if an entry was found. */\n",
        "4673": "   * <p>Unfortunately, readResolve() doesn't get called when a circular dependency is present, so\n",
        "4674": "   * the proxy must be able to behave as the cache itself.\n",
        "4791": "   * <p>Unfortunately, readResolve() doesn't get called when a circular dependency is present, so\n",
        "4792": "   * the proxy must be able to behave as the cache itself.\n"
    },
    "removed": {
        "93": " * <p>This implementation is heavily derived from revision 1.96 of\n",
        "94": " * <a href=\"http://tinyurl.com/ConcurrentHashMap\">ConcurrentHashMap.java</a>.\n",
        "231": "  /**\n",
        "232": "   * The default cache loader to use on loading operations.\n",
        "233": "   */\n",
        "427": "    /**\n",
        "428": "     * Creates a reference for the given value according to this value strength.\n",
        "429": "     */\n",
        "441": "  /**\n",
        "442": "   * Creates new entries.\n",
        "443": "   */\n",
        "558": "    /**\n",
        "559": "     * Look-up table for factories.\n",
        "560": "     */\n",
        "629": "  /**\n",
        "630": "   * A reference to a value.\n",
        "631": "   */\n",
        "633": "    /**\n",
        "634": "     * Returns the value. Does not block or throw exceptions.\n",
        "635": "     */\n",
        "648": "    /**\n",
        "649": "     * Returns the weight of this entry. This is assumed to be static between calls to setValue.\n",
        "650": "     */\n",
        "691": "  /**\n",
        "692": "   * Placeholder. Indicates that the value hasn't been set yet.\n",
        "693": "   */\n",
        "738": "  /**\n",
        "739": "   * Singleton placeholder that indicates a value is being loaded.\n",
        "740": "   */\n",
        "941": "  /**\n",
        "942": "   * Queue that discards all elements.\n",
        "943": "   */\n",
        "957": "  /**\n",
        "958": "   * Used for strongly-referenced keys.\n",
        "959": "   */\n",
        "1179": "  /**\n",
        "1180": "   * Used for weakly-referenced keys.\n",
        "1181": "   */\n",
        "1469": "  /**\n",
        "1470": "   * References a weak value.\n",
        "1471": "   */\n",
        "1515": "  /**\n",
        "1516": "   * References a soft value.\n",
        "1517": "   */\n",
        "1561": "  /**\n",
        "1562": "   * References a strong value.\n",
        "1563": "   */\n",
        "1611": "  /**\n",
        "1612": "   * References a weak value.\n",
        "1613": "   */\n",
        "1635": "  /**\n",
        "1636": "   * References a soft value.\n",
        "1637": "   */\n",
        "1659": "  /**\n",
        "1660": "   * References a strong value.\n",
        "1661": "   */\n",
        "1795": "  /**\n",
        "1796": "   * Returns true if the entry has expired.\n",
        "1797": "   */\n",
        "1902": "    /**\n",
        "1903": "     * The number of live elements in this segment's region.\n",
        "1904": "     */\n",
        "1907": "    /**\n",
        "1908": "     * The weight of the live elements in this segment's region.\n",
        "1909": "     */\n",
        "1927": "    /**\n",
        "1928": "     * The per-segment table.\n",
        "1929": "     */\n",
        "1932": "    /**\n",
        "1933": "     * The maximum weight of this segment. UNSET_INT if there is no maximum.\n",
        "1934": "     */\n",
        "2050": "    /**\n",
        "2051": "     * Sets a new value of an entry. Adds newly created entries at the end of the access queue.\n",
        "2052": "     */\n",
        "2321": "    /**\n",
        "2322": "     * Waits uninterruptibly for {@code newValue} to be loaded, and then records loading stats.\n",
        "2323": "     */\n",
        "2447": "    /**\n",
        "2448": "     * Cleanup collected entries when the lock is available.\n",
        "2449": "     */\n",
        "2502": "    /**\n",
        "2503": "     * Clears all entries from the key and value reference queues.\n",
        "2504": "     */\n",
        "2595": "    /**\n",
        "2596": "     * Cleanup expired entries when the lock is available.\n",
        "2597": "     */\n",
        "2683": "    /**\n",
        "2684": "     * Returns first entry of bin for given hash.\n",
        "2685": "     */\n",
        "2894": "    /**\n",
        "2895": "     * Expands the table if possible.\n",
        "2896": "     */\n",
        "3326": "    /**\n",
        "3327": "     * Removes an entry whose key has been garbage collected.\n",
        "3328": "     */\n",
        "3363": "    /**\n",
        "3364": "     * Removes an entry whose value has been garbage collected.\n",
        "3365": "     */\n",
        "3493": "    /**\n",
        "3494": "     * Performs routine cleanup following a write.\n",
        "3495": "     */\n",
        "3800": "   * A custom queue for managing access order. Note that this is tightly integrated with\n",
        "3801": "   * {@code ReferenceEntry}, upon which it relies to perform its linking.\n",
        "4409": "    /**\n",
        "4410": "     * Finds the next entry in the current chain. Returns true if an entry was found.\n",
        "4411": "     */\n",
        "4423": "    /**\n",
        "4424": "     * Finds the next entry in the current table. Returns true if an entry was found.\n",
        "4425": "     */\n",
        "4743": "   * Unfortunately, readResolve() doesn't get called when a circular dependency is present, so the\n",
        "4744": "   * proxy must be able to behave as the cache itself.\n",
        "4861": "   * Unfortunately, readResolve() doesn't get called when a circular dependency is present, so the\n",
        "4862": "   * proxy must be able to behave as the cache itself.\n"
    }
}