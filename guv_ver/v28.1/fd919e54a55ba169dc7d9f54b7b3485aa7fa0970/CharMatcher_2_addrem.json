{
    "addition": {
        "35": " * <p><b>Warning:</b> This class deals only with {@code char} values, that is, <a\n",
        "36": " * href=\"http://www.unicode.org/glossary/#BMP_character\">BMP characters</a>. It does not understand\n",
        "37": " * <a href=\"http://www.unicode.org/glossary/#supplementary_code_point\">supplementary Unicode code\n",
        "38": " * points</a> in the range {@code 0x10000} to {@code 0x10FFFF} which includes the majority of\n",
        "39": " * assigned characters, including important CJK characters and emoji.\n",
        "41": " * <p>Supplementary characters are <a\n",
        "42": " * href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#supplementary\">encoded\n",
        "43": " * into a {@code String} using surrogate pairs</a>, and a {@code CharMatcher} treats these just as\n",
        "44": " * two separate characters. {@link #countIn} counts each supplementary character as 2 {@code char}s.\n",
        "47": " * supplementary code points, use ICU4J UCharacter and UnicodeSet (freeze() after building). For\n",
        "48": " * basic text processing based on UnicodeSet use the ICU4J UnicodeSetSpanner.\n",
        "132": "   * illustrated <a\n",
        "133": "   * href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bwhitespace%7D\">here</a>.\n",
        "134": "   * This is not the same definition used by other Java APIs. (See a <a\n",
        "135": "   * href=\"https://goo.gl/Y6SLWx\">comparison of several definitions of \"whitespace\"</a>.)\n",
        "169": "   * Determines whether a character is a BMP digit according to <a\n",
        "170": "   * href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bdigit%7D\">Unicode</a>. If\n",
        "195": "   * Determines whether a character is a BMP letter according to {@linkplain\n",
        "196": "   * Character#isLetter(char) Java's definition}. If you only care to match letters of the Latin\n",
        "197": "   * alphabet, you can use {@code inRange('a', 'z').or(inRange('A', 'Z'))}.\n",
        "208": "   * Determines whether a character is a BMP letter or digit according to {@linkplain\n",
        "209": "   * Character#isLetterOrDigit(char) Java's definition}.\n",
        "220": "   * Determines whether a BMP character is upper case according to {@linkplain\n",
        "221": "   * Character#isUpperCase(char) Java's definition}.\n",
        "223": "   * @deprecated Some uppercase characters are supplementary characters; see the class\n",
        "224": "   *     documentation.\n",
        "233": "   * Determines whether a BMP character is lower case according to {@linkplain\n",
        "234": "   * Character#isLowerCase(char) Java's definition}.\n",
        "236": "   * @deprecated Some lowercase characters are supplementary characters; see the class\n",
        "237": "   *     documentation.\n",
        "246": "   * Determines whether a character is an ISO control character as specified by {@link\n",
        "247": "   * Character#isISOControl(char)}.\n",
        "264": "   * @deprecated Most invisible characters are supplementary characters; see the class\n",
        "265": "   *     documentation.\n",
        "296": "   * <a\n",
        "297": "  // href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bwhitespace%7D\">here</a>.\n",
        "475": "  /** Returns a {@code char} matcher that matches only one specified BMP character. */\n",
        "538": "   * Constructor for use by subclasses. When subclassing, you may want to override {@code\n",
        "539": "   * toString()} to provide a useful description.\n",
        "550": "  /** Returns a matcher that matches any character not matched by this matcher. */\n",
        "651": "  /** Sets bits in {@code table} matched by this matcher. */\n",
        "705": "   * @return {@code true} if this matcher matches no characters in the sequence, including when the\n",
        "706": "   *     sequence is empty\n",
        "713": "   * Returns the index of the first matching BMP character in a character sequence, or {@code -1} if\n",
        "714": "   * no matching character is present.\n",
        "716": "   * <p>The default implementation iterates over the sequence in forward order calling {@link\n",
        "717": "   * #matches} for each character.\n",
        "735": "   *     sequence.length()}\n",
        "739": "   *     sequence.length()}\n",
        "753": "   * Returns the index of the last matching BMP character in a character sequence, or {@code -1} if\n",
        "754": "   * no matching character is present.\n",
        "756": "   * <p>The default implementation iterates over the sequence in reverse order calling {@link\n",
        "757": "   * #matches} for each character.\n",
        "788": "   * example:\n",
        "790": "   * <pre>{@code\n",
        "791": "   * CharMatcher.is('a').removeFrom(\"bazaar\")\n",
        "792": "   * }</pre>\n",
        "827": "   * example:\n",
        "829": "   * <pre>{@code\n",
        "830": "   * CharMatcher.is('a').retainFrom(\"bazaar\")\n",
        "831": "   * }</pre>\n",
        "841": "   * replaced by a given replacement character. For example:\n",
        "843": "   * <pre>{@code\n",
        "844": "   * CharMatcher.is('a').replaceFrom(\"radar\", 'o')\n",
        "845": "   * }</pre>\n",
        "876": "   * replaced by a given replacement sequence. For example:\n",
        "878": "   * <pre>{@code\n",
        "879": "   * CharMatcher.is('a').replaceFrom(\"yaha\", \"oo\")\n",
        "880": "   * }</pre>\n",
        "923": "   * Returns a substring of the input character sequence that omits all matching BMP characters from\n",
        "924": "   * the beginning and from the end of the string. For example:\n",
        "926": "   * <pre>{@code\n",
        "927": "   * CharMatcher.anyOf(\"ab\").trimFrom(\"abacatbab\")\n",
        "928": "   * }</pre>\n",
        "932": "   * <p>Note that:\n",
        "934": "   * <pre>{@code\n",
        "935": "   * CharMatcher.inRange('\\0', ' ').trimFrom(str)\n",
        "936": "   * }</pre>\n",
        "960": "   * Returns a substring of the input character sequence that omits all matching BMP characters from\n",
        "961": "   * the beginning of the string. For example:\n",
        "963": "   * <pre>{@code\n",
        "964": "   * CharMatcher.anyOf(\"ab\").trimLeadingFrom(\"abacatbab\")\n",
        "965": "   * }</pre>\n",
        "980": "   * Returns a substring of the input character sequence that omits all matching BMP characters from\n",
        "981": "   * the end of the string. For example:\n",
        "983": "   * <pre>{@code\n",
        "984": "   * CharMatcher.anyOf(\"ab\").trimTrailingFrom(\"abacatbab\")\n",
        "985": "   * }</pre>\n",
        "1000": "   * Returns a string copy of the input character sequence, with each group of consecutive matching\n",
        "1001": "   * BMP characters replaced by a single replacement character. For example:\n",
        "1003": "   * <pre>{@code\n",
        "1004": "   * CharMatcher.anyOf(\"eko\").collapseFrom(\"bookkeeper\", '-')\n",
        "1005": "   * }</pre>\n",
        "1095": "   * Returns a string representation of this {@code CharMatcher}, such as {@code\n",
        "1096": "   * CharMatcher.or(WHITESPACE, JAVA_DIGIT)}.\n",
        "1104": "   * Returns the Java Unicode escape sequence for the given {@code char}, in the form \"\\u12AB\" where\n",
        "1105": "   * \"12AB\" is the four hexadecimal digits representing the 16-bit code unit.\n",
        "1643": "    private static final String RANGE_ENDS = // inclusive ends\n"
    },
    "removed": {
        "35": " * <p><b>Warning:</b> This class deals only with {@code char} values, that is,\n",
        "36": " * <a href=\"http://www.unicode.org/glossary/#BMP_character\">BMP characters</a>.\n",
        "37": " * It does not understand\n",
        "38": " * <a href=\"http://www.unicode.org/glossary/#supplementary_code_point\">supplementary Unicode\n",
        "39": " * code points</a> in the range {@code 0x10000} to {@code 0x10FFFF}\n",
        "40": " * which includes the majority of assigned characters, including important CJK characters and emoji.\n",
        "42": " * <p>Supplementary characters are\n",
        "43": " * <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#supplementary\">\n",
        "44": " * encoded into a {@code String} using surrogate pairs</a>,\n",
        "45": " * and a {@code CharMatcher} treats these just as two separate characters.\n",
        "46": " * {@link #countIn} counts each supplementary character as 2 {@code char}s.\n",
        "49": " * supplementary code points, use ICU4J UCharacter and UnicodeSet (freeze() after building).\n",
        "50": " * For basic text processing based on UnicodeSet use the ICU4J UnicodeSetSpanner.\n",
        "134": "   * illustrated\n",
        "135": "   * <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bwhitespace%7D\">here</a>.\n",
        "136": "   * This is not the same definition used by other Java APIs. (See a\n",
        "137": "   * <a href=\"https://goo.gl/Y6SLWx\">comparison of several definitions of\n",
        "138": "   * \"whitespace\"</a>.)\n",
        "172": "   * Determines whether a character is a BMP digit according to\n",
        "173": "   * <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bdigit%7D\">Unicode</a>. If\n",
        "198": "   * Determines whether a character is a BMP letter according to\n",
        "199": "   * {@linkplain Character#isLetter(char) Java's definition}.\n",
        "200": "   * If you only care to match letters of the Latin alphabet, you can use\n",
        "201": "   * {@code inRange('a', 'z').or(inRange('A', 'Z'))}.\n",
        "212": "   * Determines whether a character is a BMP letter or digit according to\n",
        "213": "   * {@linkplain Character#isLetterOrDigit(char) Java's definition}.\n",
        "224": "   * Determines whether a BMP character is upper case according to\n",
        "225": "   * {@linkplain Character#isUpperCase(char) Java's definition}.\n",
        "227": "   * @deprecated Some uppercase characters are supplementary characters;\n",
        "228": "   *     see the class documentation.\n",
        "237": "   * Determines whether a BMP character is lower case according to\n",
        "238": "   * {@linkplain Character#isLowerCase(char) Java's definition}.\n",
        "240": "   * @deprecated Some lowercase characters are supplementary characters;\n",
        "241": "   *     see the class documentation.\n",
        "250": "   * Determines whether a character is an ISO control character as specified by\n",
        "251": "   * {@link Character#isISOControl(char)}.\n",
        "268": "   * @deprecated Most invisible characters are supplementary characters;\n",
        "269": "   *     see the class documentation.\n",
        "300": "   * <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bwhitespace%7D\">here</a>.\n",
        "478": "  /**\n",
        "479": "   * Returns a {@code char} matcher that matches only one specified BMP character.\n",
        "480": "   */\n",
        "543": "   * Constructor for use by subclasses. When subclassing, you may want to override\n",
        "544": "   * {@code toString()} to provide a useful description.\n",
        "555": "  /**\n",
        "556": "   * Returns a matcher that matches any character not matched by this matcher.\n",
        "557": "   */\n",
        "658": "  /**\n",
        "659": "   * Sets bits in {@code table} matched by this matcher.\n",
        "660": "   */\n",
        "714": "   * @return {@code true} if this matcher matches no characters in the sequence, including when\n",
        "715": "   *     the sequence is empty\n",
        "722": "   * Returns the index of the first matching BMP character in a character sequence,\n",
        "723": "   * or {@code -1} if no matching character is present.\n",
        "725": "   * <p>The default implementation iterates over the sequence in forward order calling\n",
        "726": "   * {@link #matches} for each character.\n",
        "744": "   *        sequence.length()}\n",
        "748": "   *         sequence.length()}\n",
        "762": "   * Returns the index of the last matching BMP character in a character sequence,\n",
        "763": "   * or {@code -1} if no matching character is present.\n",
        "765": "   * <p>The default implementation iterates over the sequence in reverse order calling\n",
        "766": "   * {@link #matches} for each character.\n",
        "797": "   * example: <pre>   {@code\n",
        "799": "   *   CharMatcher.is('a').removeFrom(\"bazaar\")}</pre>\n",
        "834": "   * example: <pre>   {@code\n",
        "836": "   *   CharMatcher.is('a').retainFrom(\"bazaar\")}</pre>\n",
        "846": "   * replaced by a given replacement character. For example: <pre>   {@code\n",
        "848": "   *   CharMatcher.is('a').replaceFrom(\"radar\", 'o')}</pre>\n",
        "879": "   * replaced by a given replacement sequence. For example: <pre>   {@code\n",
        "881": "   *   CharMatcher.is('a').replaceFrom(\"yaha\", \"oo\")}</pre>\n",
        "924": "   * Returns a substring of the input character sequence that omits all matching BMP characters\n",
        "925": "   * from the beginning and from the end of the string. For example: <pre>   {@code\n",
        "927": "   *   CharMatcher.anyOf(\"ab\").trimFrom(\"abacatbab\")}</pre>\n",
        "931": "   * <p>Note that: <pre>   {@code\n",
        "933": "   *   CharMatcher.inRange('\\0', ' ').trimFrom(str)}</pre>\n",
        "957": "   * Returns a substring of the input character sequence that omits all matching BMP characters\n",
        "958": "   * from the beginning of the string. For example: <pre> {@code\n",
        "960": "   *   CharMatcher.anyOf(\"ab\").trimLeadingFrom(\"abacatbab\")}</pre>\n",
        "975": "   * Returns a substring of the input character sequence that omits all matching BMP characters\n",
        "976": "   * from the end of the string. For example: <pre> {@code\n",
        "978": "   *   CharMatcher.anyOf(\"ab\").trimTrailingFrom(\"abacatbab\")}</pre>\n",
        "993": "   * Returns a string copy of the input character sequence, with each group of consecutive\n",
        "994": "   * matching BMP characters replaced by a single replacement character. For example:\n",
        "995": "   * <pre>   {@code\n",
        "997": "   *   CharMatcher.anyOf(\"eko\").collapseFrom(\"bookkeeper\", '-')}</pre>\n",
        "1087": "   * Returns a string representation of this {@code CharMatcher}, such as\n",
        "1088": "   * {@code CharMatcher.or(WHITESPACE, JAVA_DIGIT)}.\n",
        "1096": "   * Returns the Java Unicode escape sequence for the given {@code char}, in the form \"\\u12AB\"\n",
        "1097": "   * where \"12AB\" is the four hexadecimal digits representing the 16-bit code unit.\n",
        "1635": "    private static final String RANGE_ENDS =  // inclusive ends\n"
    }
}