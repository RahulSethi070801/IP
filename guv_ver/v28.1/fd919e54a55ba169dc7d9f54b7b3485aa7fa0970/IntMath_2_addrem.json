{
    "addition": {
        "43": " * <p>Similar functionality for {@code long} and for {@link BigInteger} can be found in {@link\n",
        "44": " * LongMath} and {@link BigIntegerMath} respectively. For other common operations on {@code int}\n",
        "45": " * values, see {@link com.google.common.primitives.Ints}.\n",
        "57": "   * Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to\n",
        "61": "   * @throws ArithmeticException of the next-higher power of two is not representable as an {@code\n",
        "62": "   *     int}, i.e. when {@code x > 2^30}\n",
        "75": "   * Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code\n",
        "76": "   * checkedPow(2, log2(x, FLOOR))}.\n",
        "90": "   * <p>This differs from {@code Integer.bitCount(x) == 1}, because {@code\n",
        "91": "   * Integer.bitCount(Integer.MIN_VALUE) == 1}, but {@link Integer#MIN_VALUE} is not a power of two.\n",
        "264": "   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code\n",
        "265": "   *     sqrt(x)} is not an integer\n",
        "309": "   * Returns the result of dividing {@code p} by {@code q}, rounding using the specified {@code\n",
        "310": "   * RoundingMode}.\n",
        "373": "   * Returns {@code x mod m}, a non-negative value less than {@code m}. This differs from {@code x %\n",
        "374": "   * m}, which might be negative.\n",
        "376": "   * <p>For example:\n",
        "378": "   * <pre>{@code\n",
        "383": "   * mod(8, 4) == 0\n",
        "384": "   * }</pre>\n",
        "399": "   * Returns the greatest common divisor of {@code a, b}. Returns {@code 0} if {@code a == 0 && b ==\n",
        "400": "   * 0}.\n",
        "487": "   * @throws ArithmeticException if {@code b} to the {@code k}th power overflows in signed {@code\n",
        "488": "   *     int} arithmetic\n",
        "710": "   * Returns {@code true} if {@code n} is a <a\n",
        "711": "   * href=\"http://mathworld.wolfram.com/PrimeNumber.html\">prime number</a>: an integer <i>greater\n",
        "713": "   * Returns {@code false} if {@code n} is zero, one, or a composite number (one which <i>can</i> be\n",
        "714": "   * factored into smaller positive integers).\n"
    },
    "removed": {
        "43": " * <p>Similar functionality for {@code long} and for {@link BigInteger} can be found in\n",
        "44": " * {@link LongMath} and {@link BigIntegerMath} respectively. For other common operations on\n",
        "45": " * {@code int} values, see {@link com.google.common.primitives.Ints}.\n",
        "57": "   * Returns the smallest power of two greater than or equal to {@code x}.  This is equivalent to\n",
        "61": "   * @throws ArithmeticException of the next-higher power of two is not representable as an\n",
        "62": "   *         {@code int}, i.e. when {@code x > 2^30}\n",
        "75": "   * Returns the largest power of two less than or equal to {@code x}.  This is equivalent to\n",
        "76": "   * {@code checkedPow(2, log2(x, FLOOR))}.\n",
        "90": "   * <p>This differs from {@code Integer.bitCount(x) == 1}, because\n",
        "91": "   * {@code Integer.bitCount(Integer.MIN_VALUE) == 1}, but {@link Integer#MIN_VALUE} is not a power\n",
        "92": "   * of two.\n",
        "265": "   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and\n",
        "266": "   *     {@code sqrt(x)} is not an integer\n",
        "310": "   * Returns the result of dividing {@code p} by {@code q}, rounding using the specified\n",
        "311": "   * {@code RoundingMode}.\n",
        "374": "   * Returns {@code x mod m}, a non-negative value less than {@code m}. This differs from\n",
        "375": "   * {@code x % m}, which might be negative.\n",
        "377": "   * <p>For example:<pre> {@code\n",
        "383": "   * mod(8, 4) == 0}</pre>\n",
        "398": "   * Returns the greatest common divisor of {@code a, b}. Returns {@code 0} if\n",
        "399": "   * {@code a == 0 && b == 0}.\n",
        "486": "   * @throws ArithmeticException if {@code b} to the {@code k}th power overflows in signed\n",
        "487": "   *     {@code int} arithmetic\n",
        "709": "   * Returns {@code true} if {@code n} is a\n",
        "710": "   * <a href=\"http://mathworld.wolfram.com/PrimeNumber.html\">prime number</a>: an integer <i>greater\n",
        "712": "   * Returns {@code false} if {@code n} is zero, one, or a composite number (one which <i>can</i>\n",
        "713": "   * be factored into smaller positive integers).\n"
    }
}