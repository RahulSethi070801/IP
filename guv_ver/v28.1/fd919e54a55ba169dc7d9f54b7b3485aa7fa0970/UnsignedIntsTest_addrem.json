{
    "addition": {
        "37": "    0L,\n",
        "38": "    1L,\n",
        "39": "    2L,\n",
        "40": "    3L,\n",
        "41": "    0x12345678L,\n",
        "42": "    0x5a4316b8L,\n",
        "43": "    0x6cf78a4bL,\n",
        "44": "    0xff1a618bL,\n",
        "45": "    0xfffffffdL,\n",
        "46": "    0xfffffffeL,\n",
        "47": "    0xffffffffL\n",
        "48": "  };\n",
        "109": "    assertEquals(\n",
        "110": "        (int) 0xff1a618bL,\n",
        "111": "        UnsignedInts.max(\n",
        "112": "            (int) 8L,\n",
        "113": "            (int) 6L,\n",
        "114": "            (int) 7L,\n",
        "115": "            (int) 0x12345678L,\n",
        "116": "            (int) 0x5a4316b8L,\n",
        "117": "            (int) 0xff1a618bL,\n",
        "118": "            (int) 0L));\n",
        "132": "    assertEquals(\n",
        "133": "        (int) 0L,\n",
        "134": "        UnsignedInts.min(\n",
        "135": "            (int) 8L,\n",
        "136": "            (int) 6L,\n",
        "137": "            (int) 7L,\n",
        "138": "            (int) 0x12345678L,\n",
        "139": "            (int) 0x5a4316b8L,\n",
        "140": "            (int) 0xff1a618bL,\n",
        "141": "            (int) 0L));\n",
        "145": "    List<int[]> ordered =\n",
        "146": "        Arrays.asList(\n",
        "147": "            new int[] {},\n",
        "148": "            new int[] {LEAST},\n",
        "149": "            new int[] {LEAST, LEAST},\n",
        "150": "            new int[] {LEAST, (int) 1L},\n",
        "151": "            new int[] {(int) 1L},\n",
        "152": "            new int[] {(int) 1L, LEAST},\n",
        "153": "            new int[] {GREATEST, (GREATEST - (int) 1L)},\n",
        "154": "            new int[] {GREATEST, GREATEST},\n",
        "155": "            new int[] {GREATEST, GREATEST, GREATEST});\n",
        "256": "      assertTrue(\n",
        "257": "          dividend\n",
        "258": "                  - (divisor * UnsignedInts.divide(dividend, divisor)\n",
        "259": "                      + UnsignedInts.remainder(dividend, divisor))\n",
        "260": "              == 0);\n",
        "274": "    } catch (NumberFormatException expected) {\n",
        "275": "    }\n",
        "299": "      } catch (NumberFormatException expected) {\n",
        "300": "      }\n",
        "310": "    } catch (NumberFormatException expected) {\n",
        "311": "    }\n",
        "316": "    } catch (NumberFormatException expected) {\n",
        "317": "    }\n",
        "323": "    } catch (NumberFormatException expected) {\n",
        "324": "    }\n"
    },
    "removed": {
        "37": "      0L,\n",
        "38": "      1L,\n",
        "39": "      2L,\n",
        "40": "      3L,\n",
        "41": "      0x12345678L,\n",
        "42": "      0x5a4316b8L,\n",
        "43": "      0x6cf78a4bL,\n",
        "44": "      0xff1a618bL,\n",
        "45": "      0xfffffffdL,\n",
        "46": "      0xfffffffeL,\n",
        "47": "      0xffffffffL};\n",
        "108": "    assertEquals((int) 0xff1a618bL, UnsignedInts.max(\n",
        "109": "        (int) 8L, (int) 6L, (int) 7L,\n",
        "110": "        (int) 0x12345678L, (int) 0x5a4316b8L,\n",
        "111": "        (int) 0xff1a618bL, (int) 0L));\n",
        "125": "    assertEquals((int) 0L, UnsignedInts.min(\n",
        "126": "        (int) 8L, (int) 6L, (int) 7L,\n",
        "127": "        (int) 0x12345678L, (int) 0x5a4316b8L,\n",
        "128": "        (int) 0xff1a618bL, (int) 0L));\n",
        "132": "    List<int[]> ordered = Arrays.asList(\n",
        "133": "        new int[] {},\n",
        "134": "        new int[] {LEAST},\n",
        "135": "        new int[] {LEAST, LEAST},\n",
        "136": "        new int[] {LEAST, (int) 1L},\n",
        "137": "        new int[] {(int) 1L},\n",
        "138": "        new int[] {(int) 1L, LEAST},\n",
        "139": "        new int[] {GREATEST, (GREATEST - (int) 1L)},\n",
        "140": "        new int[] {GREATEST, GREATEST},\n",
        "141": "        new int[] {GREATEST, GREATEST, GREATEST}\n",
        "142": "        );\n",
        "243": "      assertTrue(dividend\n",
        "244": "          - (divisor * UnsignedInts.divide(dividend, divisor) + UnsignedInts.remainder(dividend,\n",
        "245": "              divisor)) == 0);\n",
        "259": "    } catch (NumberFormatException expected) {}\n",
        "283": "      } catch (NumberFormatException expected) {}\n",
        "293": "    } catch (NumberFormatException expected) {}\n",
        "298": "    } catch (NumberFormatException expected) {}\n",
        "304": "    } catch (NumberFormatException expected) {}\n"
    }
}