{
    "addition": {
        "41": "    Funnels.byteArrayFunnel().funnel(new byte[] {4, 3, 2, 1}, primitiveSink);\n",
        "42": "    verify(primitiveSink).putBytes(new byte[] {4, 3, 2, 1});\n",
        "109": "    PrimitiveSink primitiveSink =\n",
        "110": "        new AbstractStreamingHasher(4, 4) {\n",
        "111": "          @Override\n",
        "112": "          protected HashCode makeHash() {\n",
        "113": "            throw new UnsupportedOperationException();\n",
        "114": "          }\n",
        "115": "\n",
        "116": "          @Override\n",
        "117": "          protected void process(ByteBuffer bb) {\n",
        "118": "            while (bb.hasRemaining()) {\n",
        "119": "              bb.get();\n",
        "120": "            }\n",
        "121": "          }\n",
        "122": "        };\n",
        "126": "    } catch (NullPointerException ok) {\n",
        "127": "    }\n",
        "133": "    byte[] bytes = {1, 2, 3, 4};\n",
        "144": "        Funnels.byteArrayFunnel(), SerializableTester.reserialize(Funnels.byteArrayFunnel()));\n",
        "145": "    assertSame(Funnels.integerFunnel(), SerializableTester.reserialize(Funnels.integerFunnel()));\n",
        "146": "    assertSame(Funnels.longFunnel(), SerializableTester.reserialize(Funnels.longFunnel()));\n",
        "159": "    new EqualsTester()\n",
        "160": "        .addEqualityGroup(Funnels.byteArrayFunnel())\n",
        "161": "        .addEqualityGroup(Funnels.integerFunnel())\n",
        "162": "        .addEqualityGroup(Funnels.longFunnel())\n",
        "163": "        .addEqualityGroup(Funnels.unencodedCharsFunnel())\n",
        "164": "        .addEqualityGroup(Funnels.stringFunnel(Charsets.UTF_8))\n",
        "165": "        .addEqualityGroup(Funnels.stringFunnel(Charsets.US_ASCII))\n",
        "166": "        .addEqualityGroup(\n",
        "167": "            Funnels.sequentialFunnel(Funnels.integerFunnel()),\n",
        "168": "            SerializableTester.reserialize(Funnels.sequentialFunnel(Funnels.integerFunnel())))\n",
        "169": "        .addEqualityGroup(Funnels.sequentialFunnel(Funnels.longFunnel()))\n",
        "170": "        .testEquals();\n"
    },
    "removed": {
        "41": "    Funnels.byteArrayFunnel().funnel(new byte[] { 4, 3, 2, 1 }, primitiveSink);\n",
        "42": "    verify(primitiveSink).putBytes(new byte[] { 4, 3, 2, 1 });\n",
        "109": "    PrimitiveSink primitiveSink = new AbstractStreamingHasher(4, 4) {\n",
        "110": "      @Override protected HashCode makeHash() { throw new UnsupportedOperationException(); }\n",
        "111": "\n",
        "112": "      @Override protected void process(ByteBuffer bb) {\n",
        "113": "        while (bb.hasRemaining()) {\n",
        "114": "          bb.get();\n",
        "115": "        }\n",
        "116": "      }\n",
        "117": "    };\n",
        "121": "    } catch (NullPointerException ok) {}\n",
        "127": "    byte[] bytes = { 1, 2, 3, 4 };\n",
        "138": "        Funnels.byteArrayFunnel(),\n",
        "139": "        SerializableTester.reserialize(Funnels.byteArrayFunnel()));\n",
        "140": "    assertSame(\n",
        "141": "        Funnels.integerFunnel(),\n",
        "142": "        SerializableTester.reserialize(Funnels.integerFunnel()));\n",
        "143": "    assertSame(\n",
        "144": "        Funnels.longFunnel(),\n",
        "145": "        SerializableTester.reserialize(Funnels.longFunnel()));\n",
        "158": "     new EqualsTester()\n",
        "159": "       .addEqualityGroup(Funnels.byteArrayFunnel())\n",
        "160": "       .addEqualityGroup(Funnels.integerFunnel())\n",
        "161": "       .addEqualityGroup(Funnels.longFunnel())\n",
        "162": "       .addEqualityGroup(Funnels.unencodedCharsFunnel())\n",
        "163": "       .addEqualityGroup(Funnels.stringFunnel(Charsets.UTF_8))\n",
        "164": "       .addEqualityGroup(Funnels.stringFunnel(Charsets.US_ASCII))\n",
        "165": "       .addEqualityGroup(Funnels.sequentialFunnel(Funnels.integerFunnel()),\n",
        "166": "           SerializableTester.reserialize(Funnels.sequentialFunnel(\n",
        "167": "               Funnels.integerFunnel())))\n",
        "168": "       .addEqualityGroup(Funnels.sequentialFunnel(Funnels.longFunnel()))\n",
        "169": "       .testEquals();\n"
    }
}