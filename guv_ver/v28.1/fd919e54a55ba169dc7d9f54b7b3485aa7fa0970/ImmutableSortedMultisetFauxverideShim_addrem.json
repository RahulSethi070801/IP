{
    "addition": {
        "20": " * \"Overrides\" the {@link ImmutableMultiset} static methods that lack {@link\n",
        "21": " * ImmutableSortedMultiset} equivalents with deprecated, exception-throwing versions. This prevents\n",
        "22": " * accidents like the following:\n",
        "24": " * <pre>{@code\n",
        "25": " * List<Object> objects = ...;\n",
        "26": " * // Sort them:\n",
        "27": " * Set<Object> sorted = ImmutableSortedMultiset.copyOf(objects);\n",
        "28": " * // BAD CODE! The returned multiset is actually an unsorted ImmutableMultiset!\n",
        "29": " * }</pre>\n",
        "57": "   * @deprecated <b>Pass a parameter of type {@code Comparable} to use {@link\n",
        "58": "   *     ImmutableSortedMultiset#of(Comparable)}.</b>\n",
        "71": "   * @deprecated <b>Pass the parameters of type {@code Comparable} to use {@link\n",
        "72": "   *     ImmutableSortedMultiset#of(Comparable, Comparable)}.</b>\n",
        "85": "   * @deprecated <b>Pass the parameters of type {@code Comparable} to use {@link\n",
        "86": "   *     ImmutableSortedMultiset#of(Comparable, Comparable, Comparable)}.</b>\n",
        "100": "   *     ImmutableSortedMultiset#of(Comparable, Comparable, Comparable, Comparable)}. </b>\n",
        "114": "   *     ImmutableSortedMultiset#of(Comparable, Comparable, Comparable, Comparable, Comparable)} .\n",
        "115": "   *     </b>\n",
        "129": "   *     ImmutableSortedMultiset#of(Comparable, Comparable, Comparable, Comparable, Comparable,\n",
        "130": "   *     Comparable, Comparable...)} . </b>\n",
        "144": "   * @deprecated <b>Pass parameters of type {@code Comparable} to use {@link\n",
        "145": "   *     ImmutableSortedMultiset#copyOf(Comparable[])}.</b>\n"
    },
    "removed": {
        "20": " * \"Overrides\" the {@link ImmutableMultiset} static methods that lack\n",
        "21": " * {@link ImmutableSortedMultiset} equivalents with deprecated, exception-throwing versions. This\n",
        "22": " * prevents accidents like the following:\n",
        "24": " * <pre>   {@code\n",
        "25": " *\n",
        "26": " *   List<Object> objects = ...;\n",
        "27": " *   // Sort them:\n",
        "28": " *   Set<Object> sorted = ImmutableSortedMultiset.copyOf(objects);\n",
        "29": " *   // BAD CODE! The returned multiset is actually an unsorted ImmutableMultiset!}</pre>\n",
        "57": "   * @deprecated <b>Pass a parameter of type {@code Comparable} to use\n",
        "58": "   *             {@link ImmutableSortedMultiset#of(Comparable)}.</b>\n",
        "71": "   * @deprecated <b>Pass the parameters of type {@code Comparable} to use\n",
        "72": "   *             {@link ImmutableSortedMultiset#of(Comparable, Comparable)}.</b>\n",
        "85": "   * @deprecated <b>Pass the parameters of type {@code Comparable} to use\n",
        "86": "   *             {@link ImmutableSortedMultiset#of(Comparable, Comparable, Comparable)}.</b>\n",
        "100": "   *             ImmutableSortedMultiset#of(Comparable, Comparable, Comparable, Comparable)}. </b>\n",
        "114": "   *             ImmutableSortedMultiset#of(Comparable, Comparable, Comparable, Comparable,\n",
        "115": "   *             Comparable)} . </b>\n",
        "129": "   *             ImmutableSortedMultiset#of(Comparable, Comparable, Comparable, Comparable,\n",
        "130": "   *             Comparable, Comparable, Comparable...)} . </b>\n",
        "144": "   * @deprecated <b>Pass parameters of type {@code Comparable} to use\n",
        "145": "   *             {@link ImmutableSortedMultiset#copyOf(Comparable[])}.</b>\n"
    }
}