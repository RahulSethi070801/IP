{
    "addition": {
        "58": "  final ScheduledExecutorService executor =\n",
        "59": "      new ScheduledThreadPoolExecutor(10) {\n",
        "60": "        @Override\n",
        "61": "        public ScheduledFuture<?> scheduleWithFixedDelay(\n",
        "62": "            Runnable command, long initialDelay, long delay, TimeUnit unit) {\n",
        "63": "          return future = super.scheduleWithFixedDelay(command, initialDelay, delay, unit);\n",
        "64": "        }\n",
        "65": "      };\n",
        "76": "    @Override\n",
        "77": "    protected void runOneIteration() throws Exception {}\n",
        "78": "\n",
        "79": "    @Override\n",
        "80": "    protected Scheduler scheduler() {\n",
        "81": "      return configuration;\n",
        "82": "    }\n",
        "83": "\n",
        "84": "    @Override\n",
        "85": "    protected ScheduledExecutorService executor() {\n",
        "86": "      return executor;\n",
        "87": "    }\n",
        "124": "    service.addListener(\n",
        "125": "        new Service.Listener() {\n",
        "126": "          @Override\n",
        "127": "          public void running() {\n",
        "128": "            throw error;\n",
        "129": "          }\n",
        "130": "\n",
        "131": "          @Override\n",
        "132": "          public void failed(State from, Throwable failure) {\n",
        "133": "            assertEquals(State.RUNNING, from);\n",
        "134": "            assertEquals(error, failure);\n",
        "135": "            latch.countDown();\n",
        "136": "          }\n",
        "137": "        },\n",
        "138": "        directExecutor());\n",
        "196": "    AbstractScheduledService service =\n",
        "197": "        new AbstractScheduledService() {\n",
        "198": "          @Override\n",
        "199": "          protected void runOneIteration() throws Exception {}\n",
        "201": "          @Override\n",
        "202": "          protected ScheduledExecutorService executor() {\n",
        "203": "            executor.set(super.executor());\n",
        "204": "            return executor.get();\n",
        "205": "          }\n",
        "207": "          @Override\n",
        "208": "          protected Scheduler scheduler() {\n",
        "209": "            return newFixedDelaySchedule(0, 1, TimeUnit.MILLISECONDS);\n",
        "210": "          }\n",
        "211": "        };\n",
        "223": "    AbstractScheduledService service =\n",
        "224": "        new AbstractScheduledService() {\n",
        "225": "          @Override\n",
        "226": "          protected void startUp() throws Exception {\n",
        "227": "            throw new Exception(\"Failed\");\n",
        "228": "          }\n",
        "230": "          @Override\n",
        "231": "          protected void runOneIteration() throws Exception {}\n",
        "233": "          @Override\n",
        "234": "          protected ScheduledExecutorService executor() {\n",
        "235": "            executor.set(super.executor());\n",
        "236": "            return executor.get();\n",
        "237": "          }\n",
        "239": "          @Override\n",
        "240": "          protected Scheduler scheduler() {\n",
        "241": "            return newFixedDelaySchedule(0, 1, TimeUnit.MILLISECONDS);\n",
        "242": "          }\n",
        "243": "        };\n",
        "248": "    } catch (IllegalStateException expected) {\n",
        "249": "    }\n",
        "274": "    Service service =\n",
        "275": "        new AbstractScheduledService() {\n",
        "276": "          @Override\n",
        "277": "          protected Scheduler scheduler() {\n",
        "278": "            return Scheduler.newFixedDelaySchedule(0, 1, TimeUnit.NANOSECONDS);\n",
        "279": "          }\n",
        "281": "          @Override\n",
        "282": "          protected ScheduledExecutorService executor() {\n",
        "283": "            return TestingExecutors.noOpScheduledExecutor();\n",
        "284": "          }\n",
        "286": "          @Override\n",
        "287": "          protected void runOneIteration() throws Exception {}\n",
        "289": "          @Override\n",
        "290": "          protected String serviceName() {\n",
        "291": "            return \"Foo\";\n",
        "292": "          }\n",
        "293": "        };\n",
        "370": "    final Runnable testRunnable =\n",
        "371": "        new Runnable() {\n",
        "372": "          @Override\n",
        "373": "          public void run() {}\n",
        "374": "        };\n",
        "377": "    private void assertSingleCallWithCorrectParameters(\n",
        "378": "        Runnable command, long initialDelay, long delay, TimeUnit unit) {\n",
        "379": "      assertFalse(called); // only called once.\n",
        "423": "      TestAbstractScheduledCustomService service =\n",
        "424": "          new TestAbstractScheduledCustomService() {\n",
        "425": "            @Override\n",
        "426": "            protected Scheduler scheduler() {\n",
        "427": "              return newFixedDelaySchedule(Long.MAX_VALUE, Long.MAX_VALUE, SECONDS);\n",
        "428": "            }\n",
        "429": "          };\n",
        "443": "      TestAbstractScheduledCustomService service =\n",
        "444": "          new TestAbstractScheduledCustomService() {\n",
        "446": "            protected Scheduler scheduler() {\n",
        "447": "              return new AbstractScheduledService.CustomScheduler() {\n",
        "448": "                @Override\n",
        "449": "                protected Schedule getNextSchedule() throws Exception {\n",
        "450": "                  return new Schedule(Long.MAX_VALUE, SECONDS);\n",
        "451": "                }\n",
        "452": "              };\n",
        "480": "      Runnable task =\n",
        "481": "          new Runnable() {\n",
        "482": "            @Override\n",
        "483": "            public void run() {\n",
        "484": "              try {\n",
        "485": "                if (shouldWait.get()) {\n",
        "486": "                  firstBarrier.await();\n",
        "487": "                  secondBarrier.await();\n",
        "488": "                }\n",
        "489": "              } catch (Exception e) {\n",
        "490": "                throw new RuntimeException(e);\n",
        "491": "              }\n",
        "493": "          };\n",
        "523": "        Service service =\n",
        "524": "            new AbstractScheduledService() {\n",
        "525": "              @Override\n",
        "526": "              protected void runOneIteration() {}\n",
        "527": "\n",
        "528": "              @Override\n",
        "529": "              protected Scheduler scheduler() {\n",
        "530": "                return new CustomScheduler() {\n",
        "531": "                  @Override\n",
        "532": "                  protected Schedule getNextSchedule() throws Exception {\n",
        "533": "                    if (state() != State.STARTING) {\n",
        "534": "                      inGetNextSchedule.await();\n",
        "535": "                      Thread.yield();\n",
        "536": "                      throw new RuntimeException(\"boom\");\n",
        "537": "                    }\n",
        "538": "                    return new Schedule(0, TimeUnit.NANOSECONDS);\n",
        "539": "                  }\n",
        "540": "                };\n",
        "550": "      TestAbstractScheduledCustomService service =\n",
        "551": "          new TestAbstractScheduledCustomService() {\n",
        "553": "            protected Scheduler scheduler() {\n",
        "554": "              return new AbstractScheduledService.CustomScheduler() {\n",
        "555": "                @Override\n",
        "556": "                protected Schedule getNextSchedule() throws Exception {\n",
        "557": "                  // Explicitly yield to increase the probability of a pathological scheduling.\n",
        "558": "                  Thread.yield();\n",
        "559": "                  return new Schedule(0, TimeUnit.SECONDS);\n",
        "560": "                }\n",
        "561": "              };\n",
        "582": "      @Override\n",
        "583": "      protected void runOneIteration() throws Exception {\n",
        "591": "      @Override\n",
        "592": "      protected ScheduledExecutorService executor() {\n",
        "597": "      @Override\n",
        "598": "      protected Scheduler scheduler() {\n",
        "603": "          }\n",
        "604": "        };\n",
        "630": "      @Override\n",
        "631": "      protected void runOneIteration() throws Exception {\n",
        "637": "      @Override\n",
        "638": "      protected ScheduledExecutorService executor() {\n",
        "643": "      @Override\n",
        "644": "      protected Scheduler scheduler() {\n",
        "652": "          }\n",
        "653": "        };\n"
    },
    "removed": {
        "58": "  final ScheduledExecutorService executor = new ScheduledThreadPoolExecutor(10) {\n",
        "59": "    @Override\n",
        "60": "    public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay,\n",
        "61": "        long delay, TimeUnit unit) {\n",
        "62": "      return future = super.scheduleWithFixedDelay(command, initialDelay, delay, unit);\n",
        "63": "    }\n",
        "64": "  };\n",
        "75": "    @Override protected void runOneIteration() throws Exception {}\n",
        "76": "    @Override protected Scheduler scheduler() { return configuration; }\n",
        "77": "    @Override protected ScheduledExecutorService executor() { return executor; }\n",
        "114": "    service.addListener(new Service.Listener() {\n",
        "115": "      @Override public void running() {\n",
        "116": "        throw error;\n",
        "117": "      }\n",
        "118": "      @Override public void failed(State from, Throwable failure) {\n",
        "119": "        assertEquals(State.RUNNING, from);\n",
        "120": "        assertEquals(error, failure);\n",
        "121": "        latch.countDown();\n",
        "122": "      }\n",
        "123": "    }, directExecutor());\n",
        "181": "    AbstractScheduledService service = new AbstractScheduledService() {\n",
        "182": "      @Override protected void runOneIteration() throws Exception {}\n",
        "184": "      @Override protected ScheduledExecutorService executor() {\n",
        "185": "        executor.set(super.executor());\n",
        "186": "        return executor.get();\n",
        "187": "      }\n",
        "189": "      @Override protected Scheduler scheduler() {\n",
        "190": "        return newFixedDelaySchedule(0, 1, TimeUnit.MILLISECONDS);\n",
        "191": "      }\n",
        "192": "    };\n",
        "204": "    AbstractScheduledService service = new AbstractScheduledService() {\n",
        "205": "      @Override protected void startUp() throws Exception {\n",
        "206": "        throw new Exception(\"Failed\");\n",
        "207": "      }\n",
        "209": "      @Override protected void runOneIteration() throws Exception {}\n",
        "211": "      @Override protected ScheduledExecutorService executor() {\n",
        "212": "        executor.set(super.executor());\n",
        "213": "        return executor.get();\n",
        "214": "      }\n",
        "216": "      @Override protected Scheduler scheduler() {\n",
        "217": "        return newFixedDelaySchedule(0, 1, TimeUnit.MILLISECONDS);\n",
        "218": "      }\n",
        "219": "    };\n",
        "224": "    } catch (IllegalStateException expected) {}\n",
        "249": "    Service service = new AbstractScheduledService() {\n",
        "250": "      @Override protected Scheduler scheduler() {\n",
        "251": "        return Scheduler.newFixedDelaySchedule(0, 1, TimeUnit.NANOSECONDS);\n",
        "252": "      }\n",
        "254": "      @Override protected ScheduledExecutorService executor() {\n",
        "255": "        return TestingExecutors.noOpScheduledExecutor();\n",
        "256": "      }\n",
        "258": "      @Override protected void runOneIteration() throws Exception {}\n",
        "260": "      @Override protected String serviceName() {\n",
        "261": "        return \"Foo\";\n",
        "262": "      }\n",
        "263": "    };\n",
        "340": "    final Runnable testRunnable = new Runnable() {@Override public void run() {}};\n",
        "343": "    private void assertSingleCallWithCorrectParameters(Runnable command, long initialDelay,\n",
        "344": "        long delay, TimeUnit unit) {\n",
        "345": "      assertFalse(called);  // only called once.\n",
        "389": "      TestAbstractScheduledCustomService service = new TestAbstractScheduledCustomService() {\n",
        "390": "        @Override protected Scheduler scheduler() {\n",
        "391": "          return newFixedDelaySchedule(Long.MAX_VALUE, Long.MAX_VALUE, SECONDS);\n",
        "392": "        }\n",
        "393": "      };\n",
        "407": "      TestAbstractScheduledCustomService service = new TestAbstractScheduledCustomService() {\n",
        "408": "        @Override protected Scheduler scheduler() {\n",
        "409": "          return new AbstractScheduledService.CustomScheduler() {\n",
        "411": "            protected Schedule getNextSchedule() throws Exception {\n",
        "412": "              return new Schedule(Long.MAX_VALUE, SECONDS);\n",
        "415": "        }\n",
        "416": "      };\n",
        "441": "      Runnable task = new Runnable() {\n",
        "442": "        @Override public void run() {\n",
        "443": "          try {\n",
        "444": "            if (shouldWait.get()) {\n",
        "445": "              firstBarrier.await();\n",
        "446": "              secondBarrier.await();\n",
        "448": "          } catch (Exception e) {\n",
        "449": "            throw new RuntimeException(e);\n",
        "450": "          }\n",
        "451": "        }\n",
        "452": "      };\n",
        "482": "        Service service = new AbstractScheduledService() {\n",
        "483": "          @Override protected void runOneIteration() {}\n",
        "484": "          @Override protected Scheduler scheduler() {\n",
        "485": "            return new CustomScheduler() {\n",
        "486": "              @Override protected Schedule getNextSchedule() throws Exception {\n",
        "487": "                if (state() != State.STARTING) {\n",
        "488": "                  inGetNextSchedule.await();\n",
        "489": "                  Thread.yield();\n",
        "490": "                  throw new RuntimeException(\"boom\");\n",
        "491": "                }\n",
        "492": "                return new Schedule(0, TimeUnit.NANOSECONDS);\n",
        "495": "          }\n",
        "496": "        };\n",
        "504": "      TestAbstractScheduledCustomService service = new TestAbstractScheduledCustomService() {\n",
        "505": "        @Override protected Scheduler scheduler() {\n",
        "506": "          return new AbstractScheduledService.CustomScheduler() {\n",
        "508": "            protected Schedule getNextSchedule() throws Exception {\n",
        "509": "              // Explicitly yield to increase the probability of a pathological scheduling.\n",
        "510": "              Thread.yield();\n",
        "511": "              return new Schedule(0, TimeUnit.SECONDS);\n",
        "514": "        }\n",
        "515": "      };\n",
        "534": "      @Override protected void runOneIteration() throws Exception {\n",
        "542": "      @Override protected ScheduledExecutorService executor() {\n",
        "547": "      @Override protected Scheduler scheduler() {\n",
        "552": "          }};\n",
        "578": "      @Override protected void runOneIteration() throws Exception {\n",
        "584": "      @Override protected ScheduledExecutorService executor() {\n",
        "589": "      @Override protected Scheduler scheduler() {\n",
        "597": "          }};\n"
    }
}