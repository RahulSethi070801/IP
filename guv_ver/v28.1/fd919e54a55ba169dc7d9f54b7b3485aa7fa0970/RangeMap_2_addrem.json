{
    "addition": {
        "28": " * A mapping from disjoint nonempty ranges to non-null values. Queries look up the value associated\n",
        "29": " * with the range (if any) that contains a specified key.\n",
        "41": "   * Returns the value associated with the specified key, or {@code null} if there is no such value.\n",
        "50": "   * Returns the range containing this key and its associated value, if such a range is present in\n",
        "51": "   * the range map, or {@code null} otherwise.\n",
        "57": "   * Returns the minimal range {@linkplain Range#encloses(Range) enclosing} the ranges in this\n",
        "58": "   * {@code RangeMap}.\n",
        "67": "   * <p>Specifically, after a call to {@code put(range, value)}, if {@link\n",
        "68": "   * Range#contains(Comparable) range.contains(k)}, then {@link #get(Comparable) get(k)} will return\n",
        "69": "   * {@code value}.\n",
        "95": "  /** Puts all the associations from {@code rangeMap} into this range map (optional operation). */\n",
        "98": "  /** Removes all associations from this range map (optional operation). */\n",
        "105": "   * before and after a call to {@code remove(range)}. If {@code range.contains(k)}, then after a\n",
        "106": "   * call to {@code remove(range)}, {@code get(k)} will return {@code null}.\n",
        "111": "   * Returns a view of this range map as an unmodifiable {@code Map<Range<K>, V>}. Modifications to\n",
        "112": "   * this range map are guaranteed to read through to the returned {@code Map}.\n",
        "122": "   * Returns a view of this range map as an unmodifiable {@code Map<Range<K>, V>}. Modifications to\n",
        "123": "   * this range map are guaranteed to read through to the returned {@code Map}.\n",
        "137": "   * <p>For example, if {@code rangeMap} had the entries {@code [1, 5] => \"foo\", (6, 8) => \"bar\",\n",
        "138": "   * (10, \u221e) => \"baz\"} then {@code rangeMap.subRangeMap(Range.open(3, 12))} would return a range map\n",
        "141": "   * <p>The returned range map supports all optional operations that this range map supports, except\n",
        "142": "   * for {@code asMapOfRanges().iterator().remove()}.\n",
        "150": "   * Returns {@code true} if {@code obj} is another {@code RangeMap} that has an equivalent {@link\n",
        "151": "   * #asMapOfRanges()}.\n",
        "156": "  /** Returns {@code asMapOfRanges().hashCode()}. */\n",
        "160": "  /** Returns a readable string representation of this range map. */\n"
    },
    "removed": {
        "28": " * A mapping from disjoint nonempty ranges to non-null values. Queries look up the value\n",
        "29": " * associated with the range (if any) that contains a specified key.\n",
        "41": "   * Returns the value associated with the specified key, or {@code null} if there is no\n",
        "42": "   * such value.\n",
        "51": "   * Returns the range containing this key and its associated value, if such a range is present\n",
        "52": "   * in the range map, or {@code null} otherwise.\n",
        "58": "   * Returns the minimal range {@linkplain Range#encloses(Range) enclosing} the ranges\n",
        "59": "   * in this {@code RangeMap}.\n",
        "68": "   * <p>Specifically, after a call to {@code put(range, value)}, if\n",
        "69": "   * {@link Range#contains(Comparable) range.contains(k)}, then {@link #get(Comparable) get(k)}\n",
        "70": "   * will return {@code value}.\n",
        "96": "  /**\n",
        "97": "   * Puts all the associations from {@code rangeMap} into this range map (optional operation).\n",
        "98": "   */\n",
        "101": "  /**\n",
        "102": "   * Removes all associations from this range map (optional operation).\n",
        "103": "   */\n",
        "110": "   * before and after a call to {@code remove(range)}.  If {@code range.contains(k)}, then\n",
        "111": "   * after a call to {@code remove(range)}, {@code get(k)} will return {@code null}.\n",
        "116": "   * Returns a view of this range map as an unmodifiable {@code Map<Range<K>, V>}.\n",
        "117": "   * Modifications to this range map are guaranteed to read through to the returned {@code Map}.\n",
        "127": "   * Returns a view of this range map as an unmodifiable {@code Map<Range<K>, V>}.\n",
        "128": "   * Modifications to this range map are guaranteed to read through to the returned {@code Map}.\n",
        "142": "   * <p>For example, if {@code rangeMap} had the entries\n",
        "143": "   * {@code [1, 5] => \"foo\", (6, 8) => \"bar\", (10, \u221e) => \"baz\"}\n",
        "144": "   * then {@code rangeMap.subRangeMap(Range.open(3, 12))} would return a range map\n",
        "147": "   * <p>The returned range map supports all optional operations that this range map supports,\n",
        "148": "   * except for {@code asMapOfRanges().iterator().remove()}.\n",
        "156": "   * Returns {@code true} if {@code obj} is another {@code RangeMap} that has an equivalent\n",
        "157": "   * {@link #asMapOfRanges()}.\n",
        "162": "  /**\n",
        "163": "   * Returns {@code asMapOfRanges().hashCode()}.\n",
        "164": "   */\n",
        "168": "  /**\n",
        "169": "   * Returns a readable string representation of this range map.\n",
        "170": "   */\n"
    }
}