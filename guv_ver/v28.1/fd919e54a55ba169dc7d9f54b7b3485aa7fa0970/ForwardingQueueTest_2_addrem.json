{
    "addition": {
        "41": "  static final class StandardImplForwardingQueue<T> extends ForwardingQueue<T> {\n",
        "48": "    @Override\n",
        "49": "    protected Queue<T> delegate() {\n",
        "53": "    @Override\n",
        "54": "    public boolean addAll(Collection<? extends T> collection) {\n",
        "58": "    @Override\n",
        "59": "    public void clear() {\n",
        "63": "    @Override\n",
        "64": "    public boolean contains(Object object) {\n",
        "68": "    @Override\n",
        "69": "    public boolean containsAll(Collection<?> collection) {\n",
        "73": "    @Override\n",
        "74": "    public boolean remove(Object object) {\n",
        "78": "    @Override\n",
        "79": "    public boolean removeAll(Collection<?> collection) {\n",
        "83": "    @Override\n",
        "84": "    public boolean retainAll(Collection<?> collection) {\n",
        "88": "    @Override\n",
        "89": "    public Object[] toArray() {\n",
        "93": "    @Override\n",
        "94": "    public <T> T[] toArray(T[] array) {\n",
        "98": "    @Override\n",
        "99": "    public String toString() {\n",
        "103": "    @Override\n",
        "104": "    public boolean offer(T o) {\n",
        "108": "    @Override\n",
        "109": "    public T peek() {\n",
        "113": "    @Override\n",
        "114": "    public T poll() {\n",
        "145": "        .testForwarding(\n",
        "146": "            Queue.class,\n",
        "147": "            new Function<Queue, Queue>() {\n",
        "148": "              @Override\n",
        "149": "              public Queue apply(Queue delegate) {\n",
        "150": "                return wrap(delegate);\n",
        "151": "              }\n",
        "152": "            });\n",
        "157": "      @Override\n",
        "158": "      protected Queue<T> delegate() {\n"
    },
    "removed": {
        "41": "  static final class StandardImplForwardingQueue<T>\n",
        "42": "      extends ForwardingQueue<T> {\n",
        "49": "    @Override protected Queue<T> delegate() {\n",
        "53": "    @Override public boolean addAll(Collection<? extends T> collection) {\n",
        "57": "    @Override public void clear() {\n",
        "61": "    @Override public boolean contains(Object object) {\n",
        "65": "    @Override public boolean containsAll(Collection<?> collection) {\n",
        "69": "    @Override public boolean remove(Object object) {\n",
        "73": "    @Override public boolean removeAll(Collection<?> collection) {\n",
        "77": "    @Override public boolean retainAll(Collection<?> collection) {\n",
        "81": "    @Override public Object[] toArray() {\n",
        "85": "    @Override public <T> T[] toArray(T[] array) {\n",
        "89": "    @Override public String toString() {\n",
        "93": "    @Override public boolean offer(T o) {\n",
        "97": "    @Override public T peek() {\n",
        "101": "    @Override public T poll() {\n",
        "132": "        .testForwarding(Queue.class, new Function<Queue, Queue>() {\n",
        "133": "          @Override public Queue apply(Queue delegate) {\n",
        "134": "            return wrap(delegate);\n",
        "135": "          }\n",
        "136": "        });\n",
        "141": "      @Override protected Queue<T> delegate() {\n"
    }
}