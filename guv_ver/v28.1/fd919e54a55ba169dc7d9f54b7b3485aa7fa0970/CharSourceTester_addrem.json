{
    "addition": {
        "44": "  private static final ImmutableList<Method> testMethods = getTestMethods(CharSourceTester.class);\n",
        "50": "        suite.addTest(\n",
        "51": "            suiteForBytes(\n",
        "52": "                factory, entry.getValue().getBytes(Charsets.UTF_8), name, entry.getKey(), true));\n",
        "60": "  static TestSuite suiteForBytes(\n",
        "61": "      CharSourceFactory factory, byte[] bytes, String name, String desc, boolean slice) {\n",
        "62": "    TestSuite suite = suiteForString(factory, new String(bytes, Charsets.UTF_8), name, desc);\n",
        "64": "    suite.addTest(\n",
        "65": "        ByteSourceTester.suiteForBytes(\n",
        "66": "            byteSourceFactory, bytes, name + \".asByteSource[Charset]\", desc, slice));\n",
        "70": "  static TestSuite suiteForString(\n",
        "71": "      CharSourceFactory factory, String string, String name, String desc) {\n",
        "83": "  public CharSourceTester(\n",
        "84": "      CharSourceFactory factory, String string, String suiteName, String caseDesc, Method method) {\n",
        "173": "    List<String> list =\n",
        "174": "        source.readLines(\n",
        "175": "            new LineProcessor<List<String>>() {\n",
        "176": "              List<String> list = Lists.newArrayList();\n",
        "177": "\n",
        "178": "              @Override\n",
        "179": "              public boolean processLine(String line) throws IOException {\n",
        "180": "                list.add(line);\n",
        "181": "                return true;\n",
        "182": "              }\n",
        "183": "\n",
        "184": "              @Override\n",
        "185": "              public List<String> getResult() {\n",
        "186": "                return list;\n",
        "187": "              }\n",
        "188": "            });\n",
        "194": "    List<String> list =\n",
        "195": "        source.readLines(\n",
        "196": "            new LineProcessor<List<String>>() {\n",
        "197": "              List<String> list = Lists.newArrayList();\n",
        "198": "\n",
        "199": "              @Override\n",
        "200": "              public boolean processLine(String line) throws IOException {\n",
        "201": "                list.add(line);\n",
        "202": "                return false;\n",
        "203": "              }\n",
        "204": "\n",
        "205": "              @Override\n",
        "206": "              public List<String> getResult() {\n",
        "207": "                return list;\n",
        "208": "              }\n",
        "209": "            });\n"
    },
    "removed": {
        "44": "  private static final ImmutableList<Method> testMethods\n",
        "45": "      = getTestMethods(CharSourceTester.class);\n",
        "51": "        suite.addTest(suiteForBytes(factory,\n",
        "52": "            entry.getValue().getBytes(Charsets.UTF_8), name, entry.getKey(), true));\n",
        "60": "  static TestSuite suiteForBytes(CharSourceFactory factory, byte[] bytes,\n",
        "61": "      String name, String desc, boolean slice) {\n",
        "62": "    TestSuite suite = suiteForString(\n",
        "63": "        factory, new String(bytes, Charsets.UTF_8), name, desc);\n",
        "65": "    suite.addTest(ByteSourceTester.suiteForBytes(byteSourceFactory, bytes,\n",
        "66": "        name + \".asByteSource[Charset]\", desc, slice));\n",
        "70": "  static TestSuite suiteForString(CharSourceFactory factory, String string,\n",
        "71": "      String name, String desc) {\n",
        "83": "  public CharSourceTester(CharSourceFactory factory, String string,\n",
        "84": "      String suiteName, String caseDesc, Method method) {\n",
        "173": "    List<String> list = source.readLines(new LineProcessor<List<String>>() {\n",
        "174": "      List<String> list = Lists.newArrayList();\n",
        "175": "\n",
        "176": "      @Override\n",
        "177": "      public boolean processLine(String line) throws IOException {\n",
        "178": "        list.add(line);\n",
        "179": "        return true;\n",
        "180": "      }\n",
        "181": "\n",
        "182": "      @Override\n",
        "183": "      public List<String> getResult() {\n",
        "184": "        return list;\n",
        "185": "      }\n",
        "186": "    });\n",
        "192": "    List<String> list = source.readLines(new LineProcessor<List<String>>() {\n",
        "193": "      List<String> list = Lists.newArrayList();\n",
        "194": "\n",
        "195": "      @Override\n",
        "196": "      public boolean processLine(String line) throws IOException {\n",
        "197": "        list.add(line);\n",
        "198": "        return false;\n",
        "199": "      }\n",
        "200": "\n",
        "201": "      @Override\n",
        "202": "      public List<String> getResult() {\n",
        "203": "        return list;\n",
        "204": "      }\n",
        "205": "    });\n"
    }
}