{
    "addition": {
        "39": " * @param <I> the type of the iterator ({@link Iterator} or {@link ListIterator})\n",
        "116": "   * Quasi-implementation of {@link ListIterator} that works from a list of elements and a set of\n",
        "117": "   * features to support (from the enclosing {@link AbstractIteratorTester} instance). Instead of\n",
        "118": "   * throwing exceptions like {@link NoSuchElementException} at the appropriate times, it throws\n",
        "119": "   * {@link PermittedMetaException} instances, which wrap a set of all exceptions that the iterator\n",
        "120": "   * could throw during the invocation of that method. This is necessary because, e.g., a call to\n",
        "121": "   * {@code iterator().remove()} of an unmodifiable list could throw either {@link\n",
        "122": "   * IllegalStateException} or {@link UnsupportedOperationException}. Note that iterator\n",
        "123": "   * implementations should always throw one of the exceptions in a {@code PermittedExceptions}\n",
        "124": "   * instance, since {@code PermittedExceptions} is thrown only when a method call is invalid.\n",
        "126": "   * <p>This class is accessible but not supported in GWT as it references {@link\n",
        "127": "   * PermittedMetaException}.\n",
        "135": "     * The elements to be returned by future calls to {@code next()}, with the first at the top of\n",
        "136": "     * the stack.\n",
        "140": "     * The elements to be returned by future calls to {@code previous()}, with the first at the top\n",
        "141": "     * of the stack.\n",
        "145": "     * {@link #nextElements} if {@code next()} was called more recently then {@code previous},\n",
        "146": "     * {@link #previousElements} if the reverse is true, or -- overriding both of these -- {@code\n",
        "147": "     * null} if {@code remove()} or {@code add()} has been called more recently than either. We use\n",
        "148": "     * this to determine which stack to pop from on a call to {@code remove()} (or to pop from and\n",
        "149": "     * push to on a call to {@code set()}.\n",
        "217": "     * Moves the given element from its current position in {@link #nextElements} to the top of the\n",
        "218": "     * stack so that it is returned by the next call to {@link Iterator#next()}. If the element is\n",
        "219": "     * not in {@link #nextElements}, this method throws an {@link UnknownElementException}.\n",
        "221": "     * <p>This method is used when testing iterators without a known ordering. We poll the target\n",
        "222": "     * iterator's next element and pass it to the reference iterator through this method so it can\n",
        "223": "     * return the same element. This enables the assertion to pass and the reference iterator to\n",
        "224": "     * properly update its state.\n",
        "291": "   * I'd like to make this a parameter to the constructor, but I can't because the stimulus\n",
        "292": "   * instances refer to {@code this}.\n",
        "297": "   * Returns a new target iterator each time it's called. This is the iterator you are trying to\n",
        "298": "   * test. This must return an Iterator that returns the expected elements passed to the constructor\n",
        "299": "   * in the given order. Warning: it is not enough to simply pull multiple iterators from the same\n",
        "300": "   * source Iterable, unless that Iterator is unmodifiable.\n",
        "307": "   * <p>For example, verify that calls to remove() actually removed the correct elements.\n",
        "309": "   * @param elements the expected elements passed to the constructor, as mutated by {@code\n",
        "310": "   *     remove()}, {@code set()}, and {@code add()} calls\n",
        "314": "  /** Executes the test. */\n",
        "370": "   * Apply this method to both iterators and return normally only if both produce the same response.\n",
        "508": "     * Send this stimulus to both iterators and return normally only if both produce the same\n",
        "509": "     * response.\n"
    },
    "removed": {
        "39": " * @param <I> the type of the iterator ({@link Iterator} or\n",
        "40": " *     {@link ListIterator})\n",
        "41": " *\n",
        "118": "   * Quasi-implementation of {@link ListIterator} that works from a list of\n",
        "119": "   * elements and a set of features to support (from the enclosing\n",
        "120": "   * {@link AbstractIteratorTester} instance). Instead of throwing exceptions\n",
        "121": "   * like {@link NoSuchElementException} at the appropriate times, it throws\n",
        "122": "   * {@link PermittedMetaException} instances, which wrap a set of all\n",
        "123": "   * exceptions that the iterator could throw during the invocation of that\n",
        "124": "   * method. This is necessary because, e.g., a call to\n",
        "125": "   * {@code iterator().remove()} of an unmodifiable list could throw either\n",
        "126": "   * {@link IllegalStateException} or {@link UnsupportedOperationException}.\n",
        "127": "   * Note that iterator implementations should always throw one of the\n",
        "128": "   * exceptions in a {@code PermittedExceptions} instance, since\n",
        "129": "   * {@code PermittedExceptions} is thrown only when a method call is invalid.\n",
        "131": "   * <p>This class is accessible but not supported in GWT as it references\n",
        "132": "   * {@link PermittedMetaException}.\n",
        "140": "     * The elements to be returned by future calls to {@code next()}, with the\n",
        "141": "     * first at the top of the stack.\n",
        "145": "     * The elements to be returned by future calls to {@code previous()}, with\n",
        "146": "     * the first at the top of the stack.\n",
        "150": "     * {@link #nextElements} if {@code next()} was called more recently then\n",
        "151": "     * {@code previous}, {@link #previousElements} if the reverse is true, or --\n",
        "152": "     * overriding both of these -- {@code null} if {@code remove()} or\n",
        "153": "     * {@code add()} has been called more recently than either. We use this to\n",
        "154": "     * determine which stack to pop from on a call to {@code remove()} (or to\n",
        "155": "     * pop from and push to on a call to {@code set()}.\n",
        "223": "     * Moves the given element from its current position in\n",
        "224": "     * {@link #nextElements} to the top of the stack so that it is returned by\n",
        "225": "     * the next call to {@link Iterator#next()}. If the element is not in\n",
        "226": "     * {@link #nextElements}, this method throws an\n",
        "227": "     * {@link UnknownElementException}.\n",
        "229": "     * <p>This method is used when testing iterators without a known ordering.\n",
        "230": "     * We poll the target iterator's next element and pass it to the reference\n",
        "231": "     * iterator through this method so it can return the same element. This\n",
        "232": "     * enables the assertion to pass and the reference iterator to properly\n",
        "233": "     * update its state.\n",
        "300": "   * I'd like to make this a parameter to the constructor, but I can't because\n",
        "301": "   * the stimulus instances refer to {@code this}.\n",
        "306": "   * Returns a new target iterator each time it's called. This is the iterator\n",
        "307": "   * you are trying to test. This must return an Iterator that returns the\n",
        "308": "   * expected elements passed to the constructor in the given order. Warning: it\n",
        "309": "   * is not enough to simply pull multiple iterators from the same source\n",
        "310": "   * Iterable, unless that Iterator is unmodifiable.\n",
        "317": "   * <p>For example, verify that calls to remove() actually removed\n",
        "318": "   * the correct elements.\n",
        "320": "   * @param elements the expected elements passed to the constructor, as mutated\n",
        "321": "   *     by {@code remove()}, {@code set()}, and {@code add()} calls\n",
        "325": "  /**\n",
        "326": "   * Executes the test.\n",
        "327": "   */\n",
        "383": "   * Apply this method to both iterators and return normally only if both\n",
        "384": "   * produce the same response.\n",
        "522": "     * Send this stimulus to both iterators and return normally only if both\n",
        "523": "     * produce the same response.\n"
    }
}