{
    "addition": {
        "46": "  private static final double[] ARRAY234 = {(double) 2, (double) 3, (double) 4};\n",
        "51": "  private static final double[] NUMBERS =\n",
        "52": "      new double[] {\n",
        "53": "        LEAST,\n",
        "54": "        -Double.MAX_VALUE,\n",
        "55": "        -1.0,\n",
        "56": "        -0.5,\n",
        "57": "        -0.1,\n",
        "58": "        -0.0,\n",
        "59": "        0.0,\n",
        "60": "        0.1,\n",
        "61": "        0.5,\n",
        "62": "        1.0,\n",
        "63": "        Double.MAX_VALUE,\n",
        "64": "        GREATEST,\n",
        "65": "        Double.MIN_NORMAL,\n",
        "66": "        -Double.MIN_NORMAL,\n",
        "67": "        Double.MIN_VALUE,\n",
        "68": "        -Double.MIN_VALUE,\n",
        "69": "        Integer.MIN_VALUE,\n",
        "70": "        Integer.MAX_VALUE,\n",
        "71": "        Long.MIN_VALUE,\n",
        "72": "        Long.MAX_VALUE\n",
        "73": "      };\n",
        "74": "\n",
        "75": "  private static final double[] VALUES = Doubles.concat(NUMBERS, new double[] {NaN});\n",
        "93": "        assertEquals(x + \", \" + y, Double.valueOf(x).compareTo(y), Doubles.compare(x, y));\n",
        "108": "      assertTrue(\"\" + value, Doubles.contains(new double[] {5.0, value}, value));\n",
        "117": "    assertEquals(0, Doubles.indexOf(new double[] {(double) -1}, (double) -1));\n",
        "121": "    assertEquals(\n",
        "122": "        1,\n",
        "123": "        Doubles.indexOf(new double[] {(double) 2, (double) 3, (double) 2, (double) 3}, (double) 3));\n",
        "126": "      assertEquals(\"\" + value, 1, Doubles.indexOf(new double[] {5.0, value}, value));\n",
        "139": "    assertEquals(0, Doubles.indexOf(ARRAY234, new double[] {(double) 2, (double) 3}));\n",
        "140": "    assertEquals(1, Doubles.indexOf(ARRAY234, new double[] {(double) 3, (double) 4}));\n",
        "141": "    assertEquals(1, Doubles.indexOf(ARRAY234, new double[] {(double) 3}));\n",
        "142": "    assertEquals(2, Doubles.indexOf(ARRAY234, new double[] {(double) 4}));\n",
        "143": "    assertEquals(\n",
        "144": "        1,\n",
        "145": "        Doubles.indexOf(\n",
        "146": "            new double[] {(double) 2, (double) 3, (double) 3, (double) 3, (double) 3},\n",
        "147": "            new double[] {(double) 3}));\n",
        "148": "    assertEquals(\n",
        "149": "        2,\n",
        "150": "        Doubles.indexOf(\n",
        "151": "            new double[] {\n",
        "152": "              (double) 2, (double) 3, (double) 2, (double) 3, (double) 4, (double) 2, (double) 3\n",
        "153": "            },\n",
        "154": "            new double[] {(double) 2, (double) 3, (double) 4}));\n",
        "155": "    assertEquals(\n",
        "156": "        1,\n",
        "157": "        Doubles.indexOf(\n",
        "158": "            new double[] {\n",
        "159": "              (double) 2, (double) 2, (double) 3, (double) 4, (double) 2, (double) 3, (double) 4\n",
        "160": "            },\n",
        "161": "            new double[] {(double) 2, (double) 3, (double) 4}));\n",
        "162": "    assertEquals(\n",
        "163": "        -1,\n",
        "164": "        Doubles.indexOf(\n",
        "165": "            new double[] {(double) 4, (double) 3, (double) 2},\n",
        "166": "            new double[] {(double) 2, (double) 3, (double) 4}));\n",
        "169": "      assertEquals(\n",
        "170": "          \"\" + value,\n",
        "171": "          1,\n",
        "172": "          Doubles.indexOf(new double[] {5.0, value, value, 5.0}, new double[] {value, value}));\n",
        "174": "    assertEquals(-1, Doubles.indexOf(new double[] {5.0, NaN, NaN, 5.0}, new double[] {NaN, NaN}));\n",
        "181": "    assertEquals(0, Doubles.lastIndexOf(new double[] {(double) -1}, (double) -1));\n",
        "185": "    assertEquals(\n",
        "186": "        3,\n",
        "187": "        Doubles.lastIndexOf(\n",
        "188": "            new double[] {(double) 2, (double) 3, (double) 2, (double) 3}, (double) 3));\n",
        "191": "      assertEquals(\"\" + value, 0, Doubles.lastIndexOf(new double[] {value, 5.0}, value));\n",
        "207": "    assertEquals(\n",
        "208": "        (double) 9,\n",
        "209": "        Doubles.max(\n",
        "210": "            (double) 8, (double) 6, (double) 7, (double) 5, (double) 3, (double) 0, (double) 9));\n",
        "229": "    assertEquals(\n",
        "230": "        (double) 0,\n",
        "231": "        Doubles.min(\n",
        "232": "            (double) 8, (double) 6, (double) 7, (double) 5, (double) 3, (double) 0, (double) 9));\n",
        "266": "    assertTrue(\n",
        "267": "        Arrays.equals(\n",
        "268": "            new double[] {(double) 1, (double) 1, (double) 1},\n",
        "269": "            Doubles.concat(ARRAY1, ARRAY1, ARRAY1)));\n",
        "270": "    assertTrue(\n",
        "271": "        Arrays.equals(\n",
        "272": "            new double[] {(double) 1, (double) 2, (double) 3, (double) 4},\n",
        "273": "            Doubles.concat(ARRAY1, ARRAY234)));\n",
        "280": "    assertTrue(\n",
        "281": "        Arrays.equals(\n",
        "282": "            new double[] {(double) 1, (double) 0, (double) 0},\n",
        "283": "            Doubles.ensureCapacity(ARRAY1, 2, 1)));\n",
        "305": "    assertEquals(\"1.02.03.0\", Doubles.join(\"\", (double) 1, (double) 2, (double) 3));\n",
        "316": "    List<double[]> ordered =\n",
        "317": "        Arrays.asList(\n",
        "318": "            new double[] {},\n",
        "319": "            new double[] {LEAST},\n",
        "320": "            new double[] {LEAST, LEAST},\n",
        "321": "            new double[] {LEAST, (double) 1},\n",
        "322": "            new double[] {(double) 1},\n",
        "323": "            new double[] {(double) 1, LEAST},\n",
        "324": "            new double[] {GREATEST, Double.MAX_VALUE},\n",
        "325": "            new double[] {GREATEST, GREATEST},\n",
        "326": "            new double[] {GREATEST, GREATEST, GREATEST});\n",
        "431": "    for (int delta : new int[] {+1, 0, -1}) {\n",
        "434": "        Collection<Double> misleadingSize = Helpers.misleadingSizeCollection(delta);\n",
        "482": "    double[] array = {(double) 0, (double) 1, (double) 2};\n",
        "488": "    assertTrue(Arrays.equals(new double[] {(double) 0, (double) 1, (double) 2}, newArray));\n",
        "495": "    double[] array = {(double) 0, (double) 1, (double) 2, (double) 3};\n",
        "497": "    assertTrue(\n",
        "498": "        Arrays.equals(new double[] {(double) 1, (double) 2}, Doubles.toArray(list.subList(1, 3))));\n",
        "499": "    assertTrue(Arrays.equals(new double[] {}, Doubles.toArray(list.subList(2, 2))));\n",
        "507": "   * A reference implementation for {@code tryParse} that just catches the exception from {@link\n",
        "508": "   * Double#valueOf}.\n",
        "604": "  private static final String[] BAD_TRY_PARSE_INPUTS = {\n",
        "605": "    \"\",\n",
        "606": "    \"+-\",\n",
        "607": "    \"+-0\",\n",
        "608": "    \" 5\",\n",
        "609": "    \"32 \",\n",
        "610": "    \" 55 \",\n",
        "611": "    \"infinity\",\n",
        "612": "    \"POSITIVE_INFINITY\",\n",
        "613": "    \"0x9A\",\n",
        "614": "    \"0x9A.bE-5\",\n",
        "615": "    \".\",\n",
        "616": "    \".e5\",\n",
        "617": "    \"NaNd\",\n",
        "618": "    \"InfinityF\"\n",
        "619": "  };\n"
    },
    "removed": {
        "46": "  private static final double[] ARRAY234\n",
        "47": "      = {(double) 2, (double) 3, (double) 4};\n",
        "52": "  private static final double[] NUMBERS = new double[] {\n",
        "53": "      LEAST, -Double.MAX_VALUE, -1.0, -0.5, -0.1, -0.0, 0.0, 0.1, 0.5, 1.0,\n",
        "54": "      Double.MAX_VALUE, GREATEST, Double.MIN_NORMAL, -Double.MIN_NORMAL,\n",
        "55": "      Double.MIN_VALUE, -Double.MIN_VALUE, Integer.MIN_VALUE,\n",
        "56": "      Integer.MAX_VALUE, Long.MIN_VALUE, Long.MAX_VALUE\n",
        "57": "  };\n",
        "58": "\n",
        "59": "  private static final double[] VALUES\n",
        "60": "      = Doubles.concat(NUMBERS, new double[] {NaN});\n",
        "78": "        assertEquals(x + \", \" + y,\n",
        "79": "                     Double.valueOf(x).compareTo(y),\n",
        "80": "                     Doubles.compare(x, y));\n",
        "95": "      assertTrue(\"\" + value,\n",
        "96": "          Doubles.contains(new double[] {5.0, value}, value));\n",
        "105": "    assertEquals(0, Doubles.indexOf(\n",
        "106": "        new double[] {(double) -1}, (double) -1));\n",
        "110": "    assertEquals(1, Doubles.indexOf(\n",
        "111": "        new double[] { (double) 2, (double) 3, (double) 2, (double) 3 },\n",
        "112": "        (double) 3));\n",
        "115": "      assertEquals(\"\" + value,\n",
        "116": "          1, Doubles.indexOf(new double[] {5.0, value}, value));\n",
        "129": "    assertEquals(0, Doubles.indexOf(\n",
        "130": "        ARRAY234, new double[] { (double) 2, (double) 3 }));\n",
        "131": "    assertEquals(1, Doubles.indexOf(\n",
        "132": "        ARRAY234, new double[] { (double) 3, (double) 4 }));\n",
        "133": "    assertEquals(1, Doubles.indexOf(ARRAY234, new double[] { (double) 3 }));\n",
        "134": "    assertEquals(2, Doubles.indexOf(ARRAY234, new double[] { (double) 4 }));\n",
        "135": "    assertEquals(1, Doubles.indexOf(new double[] { (double) 2, (double) 3,\n",
        "136": "        (double) 3, (double) 3, (double) 3 },\n",
        "137": "        new double[] { (double) 3 }\n",
        "138": "    ));\n",
        "139": "    assertEquals(2, Doubles.indexOf(\n",
        "140": "        new double[] { (double) 2, (double) 3, (double) 2,\n",
        "141": "            (double) 3, (double) 4, (double) 2, (double) 3},\n",
        "142": "        new double[] { (double) 2, (double) 3, (double) 4}\n",
        "143": "    ));\n",
        "144": "    assertEquals(1, Doubles.indexOf(\n",
        "145": "        new double[] { (double) 2, (double) 2, (double) 3,\n",
        "146": "            (double) 4, (double) 2, (double) 3, (double) 4},\n",
        "147": "        new double[] { (double) 2, (double) 3, (double) 4}\n",
        "148": "    ));\n",
        "149": "    assertEquals(-1, Doubles.indexOf(\n",
        "150": "        new double[] { (double) 4, (double) 3, (double) 2},\n",
        "151": "        new double[] { (double) 2, (double) 3, (double) 4}\n",
        "152": "    ));\n",
        "155": "      assertEquals(\"\" + value, 1, Doubles.indexOf(\n",
        "156": "          new double[] {5.0, value, value, 5.0}, new double[] {value, value}));\n",
        "158": "    assertEquals(-1, Doubles.indexOf(\n",
        "159": "        new double[] {5.0, NaN, NaN, 5.0}, new double[] {NaN, NaN}));\n",
        "166": "    assertEquals(0, Doubles.lastIndexOf(\n",
        "167": "        new double[] {(double) -1}, (double) -1));\n",
        "171": "    assertEquals(3, Doubles.lastIndexOf(\n",
        "172": "        new double[] { (double) 2, (double) 3, (double) 2, (double) 3 },\n",
        "173": "        (double) 3));\n",
        "176": "      assertEquals(\"\" + value,\n",
        "177": "          0, Doubles.lastIndexOf(new double[] {value, 5.0}, value));\n",
        "193": "    assertEquals((double) 9, Doubles.max(\n",
        "194": "        (double) 8, (double) 6, (double) 7,\n",
        "195": "        (double) 5, (double) 3, (double) 0, (double) 9));\n",
        "214": "    assertEquals((double) 0, Doubles.min(\n",
        "215": "        (double) 8, (double) 6, (double) 7,\n",
        "216": "        (double) 5, (double) 3, (double) 0, (double) 9));\n",
        "250": "    assertTrue(Arrays.equals(\n",
        "251": "        new double[] {(double) 1, (double) 1, (double) 1},\n",
        "252": "        Doubles.concat(ARRAY1, ARRAY1, ARRAY1)));\n",
        "253": "    assertTrue(Arrays.equals(\n",
        "254": "        new double[] {(double) 1, (double) 2, (double) 3, (double) 4},\n",
        "255": "        Doubles.concat(ARRAY1, ARRAY234)));\n",
        "262": "    assertTrue(Arrays.equals(\n",
        "263": "        new double[] {(double) 1, (double) 0, (double) 0},\n",
        "264": "        Doubles.ensureCapacity(ARRAY1, 2, 1)));\n",
        "286": "    assertEquals(\"1.02.03.0\",\n",
        "287": "        Doubles.join(\"\", (double) 1, (double) 2, (double) 3));\n",
        "298": "    List<double[]> ordered = Arrays.asList(\n",
        "299": "        new double[] {},\n",
        "300": "        new double[] {LEAST},\n",
        "301": "        new double[] {LEAST, LEAST},\n",
        "302": "        new double[] {LEAST, (double) 1},\n",
        "303": "        new double[] {(double) 1},\n",
        "304": "        new double[] {(double) 1, LEAST},\n",
        "305": "        new double[] {GREATEST, Double.MAX_VALUE},\n",
        "306": "        new double[] {GREATEST, GREATEST},\n",
        "307": "        new double[] {GREATEST, GREATEST, GREATEST});\n",
        "412": "    for (int delta : new int[] { +1, 0, -1 }) {\n",
        "415": "        Collection<Double> misleadingSize =\n",
        "416": "            Helpers.misleadingSizeCollection(delta);\n",
        "464": "    double[] array = { (double) 0, (double) 1, (double) 2 };\n",
        "470": "    assertTrue(Arrays.equals(\n",
        "471": "        new double[] { (double) 0, (double) 1, (double) 2 }, newArray));\n",
        "478": "    double[] array = { (double) 0, (double) 1, (double) 2, (double) 3 };\n",
        "480": "    assertTrue(Arrays.equals(new double[] { (double) 1, (double) 2 },\n",
        "481": "        Doubles.toArray(list.subList(1, 3))));\n",
        "482": "    assertTrue(Arrays.equals(new double[] {},\n",
        "483": "        Doubles.toArray(list.subList(2, 2))));\n",
        "491": "   * A reference implementation for {@code tryParse} that just catches the exception from\n",
        "492": "   * {@link Double#valueOf}.\n",
        "588": "  private static final String[] BAD_TRY_PARSE_INPUTS =\n",
        "589": "    { \"\", \"+-\", \"+-0\", \" 5\", \"32 \", \" 55 \", \"infinity\", \"POSITIVE_INFINITY\", \"0x9A\", \"0x9A.bE-5\",\n",
        "590": "      \".\", \".e5\", \"NaNd\", \"InfinityF\" };\n"
    }
}