{
    "addition": {
        "40": "    assertEquals(\n",
        "41": "        0,\n",
        "42": "        ComparisonChain.start()\n",
        "43": "            .compare(true, true)\n",
        "44": "            .compare(true, Boolean.TRUE)\n",
        "45": "            .compare(Boolean.TRUE, true)\n",
        "46": "            .compare(Boolean.TRUE, Boolean.TRUE)\n",
        "47": "            .result());\n",
        "56": "    assertEquals(0, ComparisonChain.start().compare(\"a\", \"a\").result());\n",
        "60": "    assertEquals(\n",
        "61": "        0, ComparisonChain.start().compare(\"a\", \"A\", String.CASE_INSENSITIVE_ORDER).result());\n",
        "65": "    assertEquals(\n",
        "66": "        0,\n",
        "67": "        ComparisonChain.start()\n",
        "68": "            .compare(1, 1)\n",
        "69": "            .compare(1L, 1L)\n",
        "70": "            .compareFalseFirst(true, true)\n",
        "71": "            .compare(1.0, 1.0)\n",
        "72": "            .compare(1.0f, 1.0f)\n",
        "73": "            .compare(\"a\", \"a\", Ordering.usingToString())\n",
        "74": "            .result());\n",
        "78": "    assertTrue(\n",
        "79": "        ComparisonChain.start().compare(\"a\", \"b\").compare(DONT_COMPARE_ME, DONT_COMPARE_ME).result()\n",
        "80": "            < 0);\n",
        "84": "    assertTrue(\n",
        "85": "        ComparisonChain.start().compare(\"b\", \"a\").compare(DONT_COMPARE_ME, DONT_COMPARE_ME).result()\n",
        "86": "            > 0);\n",
        "90": "    assertTrue(\n",
        "91": "        ComparisonChain.start()\n",
        "92": "                .compare(\"a\", \"a\")\n",
        "93": "                .compare(\"a\", \"b\")\n",
        "94": "                .compare(DONT_COMPARE_ME, DONT_COMPARE_ME)\n",
        "95": "                .result()\n",
        "96": "            < 0);\n"
    },
    "removed": {
        "40": "    assertEquals(0, ComparisonChain.start()\n",
        "41": "        .compare(true, true)\n",
        "42": "        .compare(true, Boolean.TRUE)\n",
        "43": "        .compare(Boolean.TRUE, true)\n",
        "44": "        .compare(Boolean.TRUE, Boolean.TRUE)\n",
        "45": "        .result());\n",
        "54": "    assertEquals(0, ComparisonChain.start()\n",
        "55": "        .compare(\"a\", \"a\")\n",
        "56": "        .result());\n",
        "60": "    assertEquals(0, ComparisonChain.start()\n",
        "61": "        .compare(\"a\", \"A\", String.CASE_INSENSITIVE_ORDER)\n",
        "62": "        .result());\n",
        "66": "    assertEquals(0, ComparisonChain.start()\n",
        "67": "        .compare(1, 1)\n",
        "68": "        .compare(1L, 1L)\n",
        "69": "        .compareFalseFirst(true, true)\n",
        "70": "        .compare(1.0, 1.0)\n",
        "71": "        .compare(1.0f, 1.0f)\n",
        "72": "        .compare(\"a\", \"a\", Ordering.usingToString())\n",
        "73": "        .result());\n",
        "77": "    assertTrue(ComparisonChain.start()\n",
        "78": "        .compare(\"a\", \"b\")\n",
        "79": "        .compare(DONT_COMPARE_ME, DONT_COMPARE_ME)\n",
        "80": "        .result() < 0);\n",
        "84": "    assertTrue(ComparisonChain.start()\n",
        "85": "        .compare(\"b\", \"a\")\n",
        "86": "        .compare(DONT_COMPARE_ME, DONT_COMPARE_ME)\n",
        "87": "        .result() > 0);\n",
        "91": "    assertTrue(ComparisonChain.start()\n",
        "92": "        .compare(\"a\", \"a\")\n",
        "93": "        .compare(\"a\", \"b\")\n",
        "94": "        .compare(DONT_COMPARE_ME, DONT_COMPARE_ME)\n",
        "95": "        .result() < 0);\n"
    }
}