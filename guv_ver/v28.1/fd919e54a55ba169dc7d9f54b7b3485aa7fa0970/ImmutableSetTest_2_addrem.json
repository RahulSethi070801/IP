{
    "addition": {
        "62": "    suite.addTest(\n",
        "63": "        SetTestSuiteBuilder.using(new ImmutableSetCopyOfGenerator())\n",
        "64": "            .named(ImmutableSetTest.class.getName())\n",
        "65": "            .withFeatures(\n",
        "66": "                CollectionSize.ANY,\n",
        "67": "                CollectionFeature.KNOWN_ORDER,\n",
        "68": "                CollectionFeature.SERIALIZABLE,\n",
        "69": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "70": "            .createTestSuite());\n",
        "71": "\n",
        "72": "    suite.addTest(\n",
        "73": "        SetTestSuiteBuilder.using(new ImmutableSetUnsizedBuilderGenerator())\n",
        "74": "            .named(ImmutableSetTest.class.getName() + \", with unsized builder\")\n",
        "75": "            .withFeatures(\n",
        "76": "                CollectionSize.ANY,\n",
        "77": "                CollectionFeature.KNOWN_ORDER,\n",
        "78": "                CollectionFeature.SERIALIZABLE,\n",
        "79": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "80": "            .createTestSuite());\n",
        "81": "\n",
        "82": "    suite.addTest(\n",
        "83": "        SetTestSuiteBuilder.using(new ImmutableSetSizedBuilderGenerator())\n",
        "84": "            .named(ImmutableSetTest.class.getName() + \", with exactly sized builder\")\n",
        "85": "            .withFeatures(\n",
        "86": "                CollectionSize.ANY,\n",
        "87": "                CollectionFeature.KNOWN_ORDER,\n",
        "88": "                CollectionFeature.SERIALIZABLE,\n",
        "89": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "90": "            .createTestSuite());\n",
        "91": "\n",
        "92": "    suite.addTest(\n",
        "93": "        SetTestSuiteBuilder.using(new ImmutableSetTooBigBuilderGenerator())\n",
        "94": "            .named(ImmutableSetTest.class.getName() + \", with oversized builder\")\n",
        "95": "            .withFeatures(\n",
        "96": "                CollectionSize.ANY,\n",
        "97": "                CollectionFeature.KNOWN_ORDER,\n",
        "98": "                CollectionFeature.SERIALIZABLE,\n",
        "99": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "100": "            .createTestSuite());\n",
        "101": "\n",
        "102": "    suite.addTest(\n",
        "103": "        SetTestSuiteBuilder.using(new ImmutableSetTooSmallBuilderGenerator())\n",
        "104": "            .named(ImmutableSetTest.class.getName() + \", with undersized builder\")\n",
        "105": "            .withFeatures(\n",
        "106": "                CollectionSize.ANY,\n",
        "107": "                CollectionFeature.KNOWN_ORDER,\n",
        "108": "                CollectionFeature.SERIALIZABLE,\n",
        "109": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "110": "            .createTestSuite());\n",
        "111": "\n",
        "112": "    suite.addTest(\n",
        "113": "        SetTestSuiteBuilder.using(new ImmutableSetWithBadHashesGenerator())\n",
        "114": "            .named(ImmutableSetTest.class.getName() + \", with bad hashes\")\n",
        "115": "            .withFeatures(\n",
        "116": "                CollectionSize.ANY,\n",
        "117": "                CollectionFeature.KNOWN_ORDER,\n",
        "118": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "119": "            .createTestSuite());\n",
        "120": "\n",
        "121": "    suite.addTest(\n",
        "122": "        SetTestSuiteBuilder.using(new DegeneratedImmutableSetGenerator())\n",
        "123": "            .named(ImmutableSetTest.class.getName() + \", degenerate\")\n",
        "124": "            .withFeatures(\n",
        "125": "                CollectionSize.ONE,\n",
        "126": "                CollectionFeature.KNOWN_ORDER,\n",
        "127": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "128": "            .createTestSuite());\n",
        "129": "\n",
        "130": "    suite.addTest(\n",
        "131": "        ListTestSuiteBuilder.using(new ImmutableSetAsListGenerator())\n",
        "132": "            .named(\"ImmutableSet.asList\")\n",
        "133": "            .withFeatures(\n",
        "134": "                CollectionSize.ANY,\n",
        "135": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "136": "                CollectionFeature.SERIALIZABLE,\n",
        "137": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "138": "            .createTestSuite());\n",
        "145": "  @Override\n",
        "146": "  protected <E extends Comparable<? super E>> Set<E> of() {\n",
        "150": "  @Override\n",
        "151": "  protected <E extends Comparable<? super E>> Set<E> of(E e) {\n",
        "155": "  @Override\n",
        "156": "  protected <E extends Comparable<? super E>> Set<E> of(E e1, E e2) {\n",
        "160": "  @Override\n",
        "161": "  protected <E extends Comparable<? super E>> Set<E> of(E e1, E e2, E e3) {\n",
        "165": "  @Override\n",
        "166": "  protected <E extends Comparable<? super E>> Set<E> of(E e1, E e2, E e3, E e4) {\n",
        "170": "  @Override\n",
        "171": "  protected <E extends Comparable<? super E>> Set<E> of(E e1, E e2, E e3, E e4, E e5) {\n",
        "176": "  @Override\n",
        "177": "  protected <E extends Comparable<? super E>> Set<E> of(\n",
        "182": "  @Override\n",
        "183": "  protected <E extends Comparable<? super E>> Set<E> copyOf(E[] elements) {\n",
        "187": "  @Override\n",
        "188": "  protected <E extends Comparable<? super E>> Set<E> copyOf(Collection<? extends E> elements) {\n",
        "192": "  @Override\n",
        "193": "  protected <E extends Comparable<? super E>> Set<E> copyOf(Iterable<? extends E> elements) {\n",
        "197": "  @Override\n",
        "198": "  protected <E extends Comparable<? super E>> Set<E> copyOf(Iterator<? extends E> elements) {\n",
        "210": "    ImmutableSet<String> set =\n",
        "211": "        ImmutableSet.of(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"a\");\n",
        "212": "    assertEquals(\n",
        "213": "        Lists.newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"),\n",
        "219": "    ImmutableSet<String> set =\n",
        "220": "        ImmutableSet.of(\"a\", \"b\", \"c\", \"c\", \"c\", \"c\", \"b\", \"b\", \"a\", \"a\", \"c\", \"c\", \"c\", \"a\");\n",
        "268": "    String[] array = new String[] {\"a\"};\n",
        "311": "    assertEquals(\n",
        "312": "        \"Input size \" + inputSize + \" and set size \" + setSize,\n",
        "313": "        tableSize,\n",
        "314": "        ((RegularImmutableSet<Integer>) set).table.length);\n",
        "383": "  @Override\n",
        "384": "  <E extends Comparable<E>> Builder<E> builder() {\n",
        "388": "  @Override\n",
        "389": "  int getComplexBuilderSetLastElement() {\n"
    },
    "removed": {
        "62": "    suite.addTest(SetTestSuiteBuilder.using(new ImmutableSetCopyOfGenerator())\n",
        "63": "        .named(ImmutableSetTest.class.getName())\n",
        "64": "        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "65": "            CollectionFeature.SERIALIZABLE,\n",
        "66": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "67": "        .createTestSuite());\n",
        "68": "\n",
        "69": "    suite.addTest(SetTestSuiteBuilder.using(new ImmutableSetUnsizedBuilderGenerator())\n",
        "70": "        .named(ImmutableSetTest.class.getName() + \", with unsized builder\")\n",
        "71": "        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "72": "            CollectionFeature.SERIALIZABLE,\n",
        "73": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "74": "        .createTestSuite());\n",
        "75": "\n",
        "76": "    suite.addTest(SetTestSuiteBuilder.using(new ImmutableSetSizedBuilderGenerator())\n",
        "77": "        .named(ImmutableSetTest.class.getName() + \", with exactly sized builder\")\n",
        "78": "        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "79": "            CollectionFeature.SERIALIZABLE,\n",
        "80": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "81": "        .createTestSuite());\n",
        "82": "\n",
        "83": "    suite.addTest(SetTestSuiteBuilder.using(new ImmutableSetTooBigBuilderGenerator())\n",
        "84": "        .named(ImmutableSetTest.class.getName() + \", with oversized builder\")\n",
        "85": "        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "86": "            CollectionFeature.SERIALIZABLE,\n",
        "87": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "88": "        .createTestSuite());\n",
        "89": "\n",
        "90": "    suite.addTest(SetTestSuiteBuilder.using(new ImmutableSetTooSmallBuilderGenerator())\n",
        "91": "        .named(ImmutableSetTest.class.getName() + \", with undersized builder\")\n",
        "92": "        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "93": "            CollectionFeature.SERIALIZABLE,\n",
        "94": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "95": "        .createTestSuite());\n",
        "96": "\n",
        "97": "    suite.addTest(SetTestSuiteBuilder.using(\n",
        "98": "        new ImmutableSetWithBadHashesGenerator())\n",
        "99": "        .named(ImmutableSetTest.class.getName() + \", with bad hashes\")\n",
        "100": "        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "101": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "102": "        .createTestSuite());\n",
        "103": "\n",
        "104": "    suite.addTest(SetTestSuiteBuilder.using(\n",
        "105": "        new DegeneratedImmutableSetGenerator())\n",
        "106": "        .named(ImmutableSetTest.class.getName() + \", degenerate\")\n",
        "107": "        .withFeatures(CollectionSize.ONE, CollectionFeature.KNOWN_ORDER,\n",
        "108": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "109": "        .createTestSuite());\n",
        "110": "\n",
        "111": "    suite.addTest(ListTestSuiteBuilder.using(new ImmutableSetAsListGenerator())\n",
        "112": "        .named(\"ImmutableSet.asList\")\n",
        "113": "        .withFeatures(CollectionSize.ANY,\n",
        "114": "            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "115": "            CollectionFeature.SERIALIZABLE,\n",
        "116": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "117": "        .createTestSuite());\n",
        "124": "  @Override protected <E extends Comparable<? super E>> Set<E> of() {\n",
        "128": "  @Override protected <E extends Comparable<? super E>> Set<E> of(E e) {\n",
        "132": "  @Override protected <E extends Comparable<? super E>> Set<E> of(E e1, E e2) {\n",
        "136": "  @Override protected <E extends Comparable<? super E>> Set<E> of(E e1, E e2, E e3) {\n",
        "140": "  @Override protected <E extends Comparable<? super E>> Set<E> of(E e1, E e2, E e3, E e4) {\n",
        "144": "  @Override protected <E extends Comparable<? super E>> Set<E> of(E e1, E e2, E e3, E e4, E e5) {\n",
        "149": "  @Override protected <E extends Comparable<? super E>> Set<E> of(\n",
        "154": "  @Override protected <E extends Comparable<? super E>> Set<E> copyOf(E[] elements) {\n",
        "158": "  @Override protected <E extends Comparable<? super E>> Set<E> copyOf(\n",
        "159": "      Collection<? extends E> elements) {\n",
        "163": "  @Override protected <E extends Comparable<? super E>> Set<E> copyOf(\n",
        "164": "      Iterable<? extends E> elements) {\n",
        "168": "  @Override protected <E extends Comparable<? super E>> Set<E> copyOf(\n",
        "169": "      Iterator<? extends E> elements) {\n",
        "181": "    ImmutableSet<String> set = ImmutableSet.of(\n",
        "182": "        \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"a\");\n",
        "183": "    assertEquals(Lists.newArrayList(\n",
        "184": "        \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"),\n",
        "190": "    ImmutableSet<String> set = ImmutableSet.of(\n",
        "191": "        \"a\", \"b\", \"c\", \"c\", \"c\", \"c\", \"b\", \"b\", \"a\", \"a\", \"c\", \"c\", \"c\", \"a\");\n",
        "239": "    String[] array = new String[] { \"a\" };\n",
        "282": "    assertEquals(\"Input size \" + inputSize + \" and set size \" + setSize,\n",
        "283": "        tableSize, ((RegularImmutableSet<Integer>) set).table.length);\n",
        "352": "  @Override <E extends Comparable<E>> Builder<E> builder() {\n",
        "356": "  @Override int getComplexBuilderSetLastElement() {\n"
    }
}