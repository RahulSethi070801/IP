{
    "addition": {
        "51": " * <pre>{@code\n",
        "52": " * ListMultimap<String, Integer> treeListMultimap =\n",
        "53": " *     MultimapBuilder.treeKeys().arrayListValues().build();\n",
        "54": " * SetMultimap<Integer, MyEnum> hashEnumMultimap =\n",
        "55": " *     MultimapBuilder.hashKeys().enumSetValues(MyEnum.class).build();\n",
        "56": " * }</pre>\n",
        "58": " * <p>{@code MultimapBuilder} instances are immutable. Invoking a configuration method has no effect\n",
        "59": " * on the receiving instance; you must store and use the new builder instance it returns instead.\n",
        "61": " * <p>The generated multimaps are serializable if the key and value types are serializable, unless\n",
        "62": " * stated otherwise in one of the configuration methods.\n",
        "81": "  /** Uses a {@link HashMap} to map keys to value collections. */\n",
        "105": "   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link\n",
        "106": "   * Multimap#asMap()} will iterate through the keys in the order that they were first added to the\n",
        "107": "   * multimap, save that if all values associated with a key are removed and then the key is added\n",
        "108": "   * back into the multimap, that key will come last in the key iteration order.\n",
        "118": "   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link\n",
        "119": "   * Multimap#asMap()} will iterate through the keys in the order that they were first added to the\n",
        "120": "   * multimap, save that if all values associated with a key are removed and then the key is added\n",
        "121": "   * back into the multimap, that key will come last in the key iteration order.\n",
        "136": "   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link\n",
        "137": "   * Multimap#asMap()} will iterate through the keys in sorted order.\n",
        "151": "   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link\n",
        "152": "   * Multimap#asMap()} will iterate through the keys in sorted order.\n",
        "287": "    /** Uses an {@link ArrayList} to store value collections. */\n",
        "310": "    /** Uses a {@link LinkedList} to store value collections. */\n",
        "321": "    /** Uses a {@link HashSet} to store value collections. */\n",
        "344": "    /** Uses a {@link LinkedHashSet} to store value collections. */\n",
        "367": "    /** Uses a naturally-ordered {@link TreeSet} to store value collections. */\n",
        "376": "     * <p>Multimaps generated by the resulting builder will not be serializable if {@code\n",
        "377": "     * comparator} is not serializable.\n",
        "390": "    /** Uses an {@link EnumSet} to store value collections. */\n",
        "407": "  /** Returns a new, empty {@code Multimap} with the specified implementation. */\n"
    },
    "removed": {
        "51": " * <pre>   {@code\n",
        "52": " *   ListMultimap<String, Integer> treeListMultimap =\n",
        "53": " *       MultimapBuilder.treeKeys().arrayListValues().build();\n",
        "54": " *   SetMultimap<Integer, MyEnum> hashEnumMultimap =\n",
        "55": " *       MultimapBuilder.hashKeys().enumSetValues(MyEnum.class).build();}</pre>\n",
        "57": " * <p>{@code MultimapBuilder} instances are immutable.  Invoking a configuration method has no\n",
        "58": " * effect on the receiving instance; you must store and use the new builder instance it returns\n",
        "59": " * instead.\n",
        "61": " * <p>The generated multimaps are serializable if the key and value types are serializable,\n",
        "62": " * unless stated otherwise in one of the configuration methods.\n",
        "81": "  /**\n",
        "82": "   * Uses a {@link HashMap} to map keys to value collections.\n",
        "83": "   */\n",
        "107": "   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and\n",
        "108": "   * {@link Multimap#asMap()} will iterate through the keys in the order that they were first added\n",
        "109": "   * to the multimap, save that if all values associated with a key are removed and then the key is\n",
        "110": "   * added back into the multimap, that key will come last in the key iteration order.\n",
        "120": "   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and\n",
        "121": "   * {@link Multimap#asMap()} will iterate through the keys in the order that they were first added\n",
        "122": "   * to the multimap, save that if all values associated with a key are removed and then the key is\n",
        "123": "   * added back into the multimap, that key will come last in the key iteration order.\n",
        "138": "   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and\n",
        "139": "   * {@link Multimap#asMap()} will iterate through the keys in sorted order.\n",
        "153": "   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and\n",
        "154": "   * {@link Multimap#asMap()} will iterate through the keys in sorted order.\n",
        "279": "   *\n",
        "290": "    /**\n",
        "291": "     * Uses an {@link ArrayList} to store value collections.\n",
        "292": "     */\n",
        "315": "    /**\n",
        "316": "     * Uses a {@link LinkedList} to store value collections.\n",
        "317": "     */\n",
        "328": "    /**\n",
        "329": "     * Uses a {@link HashSet} to store value collections.\n",
        "330": "     */\n",
        "353": "    /**\n",
        "354": "     * Uses a {@link LinkedHashSet} to store value collections.\n",
        "355": "     */\n",
        "378": "    /**\n",
        "379": "     * Uses a naturally-ordered {@link TreeSet} to store value collections.\n",
        "380": "     */\n",
        "389": "     * <p>Multimaps generated by the resulting builder will not be serializable if\n",
        "390": "     * {@code comparator} is not serializable.\n",
        "403": "    /**\n",
        "404": "     * Uses an {@link EnumSet} to store value collections.\n",
        "405": "     */\n",
        "422": "  /**\n",
        "423": "   * Returns a new, empty {@code Multimap} with the specified implementation.\n",
        "424": "   */\n"
    }
}