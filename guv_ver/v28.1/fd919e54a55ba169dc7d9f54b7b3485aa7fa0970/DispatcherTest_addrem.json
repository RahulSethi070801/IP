{
    "addition": {
        "42": "  private final ImmutableList<Subscriber> integerSubscribers =\n",
        "43": "      ImmutableList.of(\n",
        "44": "          subscriber(bus, i1, \"handleInteger\", Integer.class),\n",
        "45": "          subscriber(bus, i2, \"handleInteger\", Integer.class),\n",
        "46": "          subscriber(bus, i3, \"handleInteger\", Integer.class));\n",
        "50": "  private final ImmutableList<Subscriber> stringSubscribers =\n",
        "51": "      ImmutableList.of(\n",
        "52": "          subscriber(bus, s1, \"handleString\", String.class),\n",
        "53": "          subscriber(bus, s2, \"handleString\", String.class));\n",
        "55": "  private final ConcurrentLinkedQueue<Object> dispatchedSubscribers =\n",
        "56": "      Queues.newConcurrentLinkedQueue();\n",
        "66": "            i1,\n",
        "67": "            i2,\n",
        "68": "            i3, // Integer subscribers are dispatched to first.\n",
        "69": "            s1,\n",
        "70": "            s2, // Though each integer subscriber dispatches to all string subscribers,\n",
        "71": "            s1,\n",
        "72": "            s2, // those string subscribers aren't actually dispatched to until all integer\n",
        "73": "            s1,\n",
        "74": "            s2 // subscribers have finished.\n",
        "75": "            )\n",
        "76": "        .inOrder();\n",
        "85": "    new Thread(\n",
        "86": "            new Runnable() {\n",
        "87": "              @Override\n",
        "88": "              public void run() {\n",
        "89": "                try {\n",
        "90": "                  barrier.await();\n",
        "91": "                } catch (Exception e) {\n",
        "92": "                  throw new AssertionError(e);\n",
        "93": "                }\n",
        "94": "\n",
        "95": "                dispatcher.dispatch(2, integerSubscribers.iterator());\n",
        "96": "                latch.countDown();\n",
        "97": "              }\n",
        "98": "            })\n",
        "99": "        .start();\n",
        "100": "\n",
        "101": "    new Thread(\n",
        "102": "            new Runnable() {\n",
        "103": "              @Override\n",
        "104": "              public void run() {\n",
        "105": "                try {\n",
        "106": "                  barrier.await();\n",
        "107": "                } catch (Exception e) {\n",
        "108": "                  throw new AssertionError(e);\n",
        "109": "                }\n",
        "110": "\n",
        "111": "                dispatcher.dispatch(\"foo\", stringSubscribers.iterator());\n",
        "112": "                latch.countDown();\n",
        "113": "              }\n",
        "114": "            })\n",
        "115": "        .start();\n",
        "122": "    assertThat(dispatchedSubscribers).containsExactly(i1, i2, i3, s1, s1, s1, s1, s2, s2, s2, s2);\n",
        "131": "            i1, s1, s2, // Each integer subscriber immediately dispatches to 2 string subscribers.\n",
        "132": "            i2, s1, s2, i3, s1, s2)\n",
        "133": "        .inOrder();\n",
        "137": "      EventBus bus, Object target, String methodName, Class<?> eventType) {\n"
    },
    "removed": {
        "42": "  private final ImmutableList<Subscriber> integerSubscribers = ImmutableList.of(\n",
        "43": "      subscriber(bus, i1, \"handleInteger\", Integer.class),\n",
        "44": "      subscriber(bus, i2, \"handleInteger\", Integer.class),\n",
        "45": "      subscriber(bus, i3, \"handleInteger\", Integer.class));\n",
        "49": "  private final ImmutableList<Subscriber> stringSubscribers = ImmutableList.of(\n",
        "50": "      subscriber(bus, s1, \"handleString\", String.class),\n",
        "51": "      subscriber(bus, s2, \"handleString\", String.class));\n",
        "53": "  private final ConcurrentLinkedQueue<Object> dispatchedSubscribers\n",
        "54": "      = Queues.newConcurrentLinkedQueue();\n",
        "64": "            i1, i2, i3, // Integer subscribers are dispatched to first.\n",
        "65": "            s1, s2,     // Though each integer subscriber dispatches to all string subscribers,\n",
        "66": "            s1, s2,     // those string subscribers aren't actually dispatched to until all integer\n",
        "67": "            s1, s2      // subscribers have finished.\n",
        "68": "        ).inOrder();\n",
        "77": "    new Thread(new Runnable() {\n",
        "78": "      @Override\n",
        "79": "      public void run() {\n",
        "80": "        try {\n",
        "81": "          barrier.await();\n",
        "82": "        } catch (Exception e) {\n",
        "83": "          throw new AssertionError(e);\n",
        "84": "        }\n",
        "85": "\n",
        "86": "        dispatcher.dispatch(2, integerSubscribers.iterator());\n",
        "87": "        latch.countDown();\n",
        "88": "      }\n",
        "89": "    }).start();\n",
        "90": "\n",
        "91": "    new Thread(new Runnable() {\n",
        "92": "      @Override\n",
        "93": "      public void run() {\n",
        "94": "        try {\n",
        "95": "          barrier.await();\n",
        "96": "        } catch (Exception e) {\n",
        "97": "          throw new AssertionError(e);\n",
        "98": "        }\n",
        "99": "\n",
        "100": "        dispatcher.dispatch(\"foo\", stringSubscribers.iterator());\n",
        "101": "        latch.countDown();\n",
        "102": "      }\n",
        "103": "    }).start();\n",
        "110": "    assertThat(dispatchedSubscribers)\n",
        "111": "        .containsExactly(\n",
        "112": "            i1, i2, i3,\n",
        "113": "            s1, s1, s1, s1,\n",
        "114": "            s2, s2, s2, s2);\n",
        "123": "            i1, s1, s2,  // Each integer subscriber immediately dispatches to 2 string subscribers.\n",
        "124": "            i2, s1, s2,\n",
        "125": "            i3, s1, s2\n",
        "126": "        ).inOrder();\n",
        "130": "      EventBus bus, Object target,\n",
        "131": "      String methodName, Class<?> eventType) {\n"
    }
}