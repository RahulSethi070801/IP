{
    "addition": {
        "46": "          .add(i)\n",
        "47": "          .add(force32(Integer.MIN_VALUE + i))\n",
        "48": "          .add(force32(Integer.MAX_VALUE + i));\n",
        "50": "          .add((long) i)\n",
        "51": "          .add((long) Integer.MIN_VALUE + i)\n",
        "52": "          .add((long) Integer.MAX_VALUE + i)\n",
        "53": "          .add((1L << 32) + i);\n",
        "61": "      assertEquals(\n",
        "62": "          UnsignedInts.toString(value), value, UnsignedInteger.fromIntBits(value).intValue());\n",
        "69": "      assertEquals(\n",
        "70": "          UnsignedInts.toString(value), expected, UnsignedInteger.fromIntBits(value).longValue());\n",
        "94": "        assertEquals(value, UnsignedInteger.valueOf(BigInteger.valueOf(value)).longValue());\n",
        "188": "          int expected = aUnsigned.bigIntegerValue().divide(bUnsigned.bigIntegerValue()).intValue();\n",
        "199": "        UnsignedInteger unused = UnsignedInteger.fromIntBits(a).dividedBy(UnsignedInteger.ZERO);\n",
        "201": "      } catch (ArithmeticException expected) {\n",
        "202": "      }\n",
        "212": "          int expected = aUnsigned.bigIntegerValue().mod(bUnsigned.bigIntegerValue()).intValue();\n",
        "225": "      } catch (ArithmeticException expected) {\n",
        "226": "      }\n",
        "235": "        assertEquals(\n",
        "236": "            aUnsigned.bigIntegerValue().compareTo(bUnsigned.bigIntegerValue()),\n",
        "247": "      equalsTester.addEqualityGroup(\n",
        "248": "          UnsignedInteger.fromIntBits(a),\n",
        "249": "          UnsignedInteger.valueOf(value),\n"
    },
    "removed": {
        "46": "        .add(i)\n",
        "47": "        .add(force32(Integer.MIN_VALUE + i))\n",
        "48": "        .add(force32(Integer.MAX_VALUE + i));\n",
        "50": "        .add((long) i)\n",
        "51": "        .add((long) Integer.MIN_VALUE + i)\n",
        "52": "        .add((long) Integer.MAX_VALUE + i)\n",
        "53": "        .add((1L << 32) + i);\n",
        "61": "      assertEquals(UnsignedInts.toString(value), value, UnsignedInteger.fromIntBits(value)\n",
        "62": "          .intValue());\n",
        "69": "      assertEquals(UnsignedInts.toString(value), expected, UnsignedInteger.fromIntBits(value)\n",
        "70": "          .longValue());\n",
        "94": "        assertEquals(value, UnsignedInteger.valueOf(BigInteger.valueOf(value))\n",
        "95": "            .longValue());\n",
        "189": "          int expected =\n",
        "190": "              aUnsigned.bigIntegerValue().divide(bUnsigned.bigIntegerValue()).intValue();\n",
        "201": "        UnsignedInteger unused =\n",
        "202": "            UnsignedInteger.fromIntBits(a).dividedBy(UnsignedInteger.ZERO);\n",
        "204": "      } catch (ArithmeticException expected) {}\n",
        "214": "          int expected =\n",
        "215": "              aUnsigned.bigIntegerValue().mod(bUnsigned.bigIntegerValue()).intValue();\n",
        "228": "      } catch (ArithmeticException expected) {}\n",
        "237": "        assertEquals(aUnsigned.bigIntegerValue().compareTo(bUnsigned.bigIntegerValue()),\n",
        "248": "      equalsTester.addEqualityGroup(UnsignedInteger.fromIntBits(a), UnsignedInteger.valueOf(value),\n"
    }
}