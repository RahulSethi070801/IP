{
    "addition": {
        "55": "    list.add(\n",
        "56": "        new Runnable() {\n",
        "57": "          @Override\n",
        "58": "          public void run() {\n",
        "59": "            runCalled.getAndIncrement();\n",
        "60": "          }\n",
        "61": "        },\n",
        "62": "        directExecutor());\n",
        "72": "    list.add(\n",
        "73": "        new Runnable() {\n",
        "74": "          @Override\n",
        "75": "          public void run() {\n",
        "76": "            try {\n",
        "77": "              okayToRun.await();\n",
        "78": "            } catch (InterruptedException e) {\n",
        "79": "              Thread.currentThread().interrupt();\n",
        "80": "              throw new RuntimeException(e);\n",
        "81": "            }\n",
        "82": "            runCalled.getAndIncrement();\n",
        "83": "          }\n",
        "84": "        },\n",
        "85": "        directExecutor());\n",
        "86": "    Runnable execute =\n",
        "87": "        new Runnable() {\n",
        "88": "          @Override\n",
        "89": "          public void run() {\n",
        "90": "            list.execute();\n",
        "91": "          }\n",
        "92": "        };\n",
        "110": "    list.add(new MockRunnable(countDownLatch), Executors.newCachedThreadPool());\n",
        "120": "            @Override\n",
        "121": "            public void run() {\n",
        "138": "    @Override\n",
        "139": "    public void run() {\n",
        "154": "  private static final Runnable THROWING_RUNNABLE =\n",
        "155": "      new Runnable() {\n",
        "156": "        @Override\n",
        "157": "        public void run() {\n",
        "158": "          throw new RuntimeException();\n",
        "159": "        }\n",
        "160": "      };\n"
    },
    "removed": {
        "55": "    list.add(new Runnable() {\n",
        "56": "      @Override public void run() {\n",
        "57": "        runCalled.getAndIncrement();\n",
        "58": "      }\n",
        "59": "    }, directExecutor());\n",
        "69": "    list.add(new Runnable() {\n",
        "70": "      @Override public void run() {\n",
        "71": "        try {\n",
        "72": "          okayToRun.await();\n",
        "73": "        } catch (InterruptedException e) {\n",
        "74": "          Thread.currentThread().interrupt();\n",
        "75": "          throw new RuntimeException(e);\n",
        "76": "        }\n",
        "77": "        runCalled.getAndIncrement();\n",
        "78": "      }\n",
        "79": "    }, directExecutor());\n",
        "80": "    Runnable execute = new Runnable() {\n",
        "81": "      @Override public void run() {\n",
        "82": "        list.execute();\n",
        "83": "      }\n",
        "84": "    };\n",
        "102": "    list.add(new MockRunnable(countDownLatch),  Executors.newCachedThreadPool());\n",
        "112": "            @Override public void run() {\n",
        "129": "    @Override public void run() {\n",
        "144": "  private static final Runnable THROWING_RUNNABLE = new Runnable() {\n",
        "145": "    @Override public void run() {\n",
        "146": "      throw new RuntimeException();\n",
        "147": "    }\n",
        "148": "  };\n"
    }
}