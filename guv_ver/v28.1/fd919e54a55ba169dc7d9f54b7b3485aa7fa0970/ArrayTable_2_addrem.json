{
    "addition": {
        "43": " * <p>The allowed row and column keys must be supplied when the table is created. The table always\n",
        "44": " * contains a mapping for every row key / column pair. The value corresponding to a given row and\n",
        "45": " * column is null unless another value is provided.\n",
        "47": " * <p>The table's size is constant: the product of the number of supplied row keys and the number of\n",
        "48": " * supplied column keys. The {@code remove} and {@code clear} methods are not supported by the table\n",
        "49": " * or its views. The {@link #erase} and {@link #eraseAll} methods may be used instead.\n",
        "51": " * <p>The ordering of the row and column keys provided when the table is constructed determines the\n",
        "52": " * iteration ordering across rows and columns in the table's views. None of the view iterators\n",
        "53": " * support {@link Iterator#remove}. If the table is modified after an iterator is created, the\n",
        "54": " * iterator remains valid.\n",
        "56": " * <p>This class requires less memory than the {@link HashBasedTable} and {@link TreeBasedTable}\n",
        "57": " * implementations, except when the table is sparse.\n",
        "61": " * <p>This class provides methods involving the underlying array structure, where the array indices\n",
        "62": " * correspond to the position of a row or column in the lists of allowed keys and values. See the\n",
        "63": " * {@link #at}, {@link #set}, {@link #toArray}, {@link #rowKeyList}, and {@link #columnKeyList}\n",
        "64": " * methods for more details.\n",
        "66": " * <p>Note that this implementation is not synchronized. If multiple threads access the same cell of\n",
        "67": " * an {@code ArrayTable} concurrently and one of the threads modifies its value, there is no\n",
        "68": " * guarantee that the new value will be fully visible to the other threads. To guarantee that\n",
        "69": " * modifications are visible, synchronize access to the table. Unlike other {@code Table}\n",
        "70": " * implementations, synchronization is unnecessary between a thread that writes to one cell and a\n",
        "71": " * thread that reads from another.\n",
        "74": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#table\"> {@code Table}</a>.\n",
        "89": "   * @throws IllegalArgumentException if {@code rowKeys} or {@code columnKeys} contains duplicates\n",
        "90": "   *     or if exactly one of {@code rowKeys} or {@code columnKeys} is empty.\n",
        "107": "   * <p>If {@code table} includes a mapping with row key {@code r} and a separate mapping with\n",
        "108": "   * column key {@code c}, the returned table contains a mapping with row key {@code r} and column\n",
        "109": "   * key {@code c}. If that row key / column key pair in not in {@code table}, the pair maps to\n",
        "110": "   * {@code null} in the generated table.\n",
        "112": "   * <p>The returned table allows subsequent {@code put} calls with the row keys in {@code\n",
        "113": "   * table.rowKeySet()} and the column keys in {@code table.columnKeySet()}. Calling {@link #put}\n",
        "114": "   * with other keys leads to an {@code IllegalArgumentException}.\n",
        "116": "   * <p>The ordering of {@code table.rowKeySet()} and {@code table.columnKeySet()} determines the\n",
        "117": "   * row and column iteration ordering of the returned table.\n",
        "282": "   * Returns, as an immutable list, the row keys provided when the table was constructed, including\n",
        "283": "   * those that are mapped to null values only.\n",
        "290": "   * Returns, as an immutable list, the column keys provided when the table was constructed,\n",
        "291": "   * including those that are mapped to null values only.\n",
        "298": "   * Returns the value corresponding to the specified row and column indices. The same value is\n",
        "299": "   * returned by {@code get(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex))}, but this\n",
        "300": "   * method runs more quickly.\n",
        "305": "   * @throws IndexOutOfBoundsException if either index is negative, {@code rowIndex} is greater than\n",
        "306": "   *     or equal to the number of allowed row keys, or {@code columnIndex} is greater than or equal\n",
        "307": "   *     to the number of allowed column keys\n",
        "317": "   * Associates {@code value} with the specified row and column indices. The logic {@code\n",
        "318": "   * put(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex), value)} has the same\n",
        "319": "   * behavior, but this method runs more quickly.\n",
        "325": "   * @throws IndexOutOfBoundsException if either index is negative, {@code rowIndex} is greater than\n",
        "326": "   *     or equal to the number of allowed row keys, or {@code columnIndex} is greater than or equal\n",
        "327": "   *     to the number of allowed column keys\n",
        "340": "   * Returns a two-dimensional array with the table contents. The row and column indices correspond\n",
        "341": "   * to the positions of the row and column in the iterables provided during table construction. If\n",
        "342": "   * the table lacks a mapping for a given row and column, the corresponding array element is null.\n",
        "370": "  /** Associates the value {@code null} with every pair of allowed row and column keys. */\n",
        "378": "   * Returns {@code true} if the provided keys are among the keys provided when the table was\n",
        "379": "   * constructed.\n",
        "387": "   * Returns {@code true} if the provided column key is among the column keys provided when the\n",
        "388": "   * table was constructed.\n",
        "396": "   * Returns {@code true} if the provided row key is among the row keys provided when the table was\n",
        "397": "   * constructed.\n",
        "424": "   * Returns {@code true} if {@code rowKeyList().size == 0} or {@code columnKeyList().size() == 0}.\n",
        "434": "   * @throws IllegalArgumentException if {@code rowKey} is not in {@link #rowKeySet()} or {@code\n",
        "435": "   *     columnKey} is not in {@link #columnKeySet()}.\n",
        "457": "   * <p>If {@code table} is an {@code ArrayTable}, its null values will be stored in this table,\n",
        "458": "   * possibly replacing values that were previously non-null.\n",
        "461": "   * @throws IllegalArgumentException if any of the provided table's row keys or column keys is not\n",
        "462": "   *     in {@link #rowKeySet()} or {@link #columnKeySet()}\n",
        "483": "   * Associates the value {@code null} with the specified keys, assuming both keys are valid. If\n",
        "484": "   * either key is null or isn't among the keys provided during construction, this method has no\n",
        "485": "   * effect.\n",
        "487": "   * <p>This method is equivalent to {@code put(rowKey, columnKey, null)} when both provided keys\n",
        "488": "   * are valid.\n",
        "492": "   * @return the value previously associated with the keys, or {@code null} if no mapping existed\n",
        "493": "   *     for the keys\n",
        "513": "   * Returns an unmodifiable set of all row key / column key / value triplets. Changes to the table\n",
        "514": "   * will update the returned set.\n",
        "516": "   * <p>The returned set's iterator traverses the mappings with the first row key, the mappings with\n",
        "517": "   * the second row key, and so on.\n",
        "519": "   * <p>The value in the returned cells may change if the table subsequently changes.\n",
        "521": "   * @return set of table cells consisting of row key / column key / value triplets\n",
        "573": "   * Returns a view of all mappings that have the given column key. If the column key isn't in\n",
        "574": "   * {@link #columnKeySet()}, an empty immutable map is returned.\n",
        "576": "   * <p>Otherwise, for each row key in {@link #rowKeySet()}, the returned map associates the row key\n",
        "577": "   * with the corresponding value in the table. Changes to the returned map will update the\n",
        "578": "   * underlying table, and vice versa.\n",
        "615": "   * Returns an immutable set of the valid column keys, including those that are associated with\n",
        "616": "   * null values only.\n",
        "661": "   * Returns a view of all mappings that have the given row key. If the row key isn't in {@link\n",
        "662": "   * #rowKeySet()}, an empty immutable map is returned.\n",
        "664": "   * <p>Otherwise, for each column key in {@link #columnKeySet()}, the returned map associates the\n",
        "665": "   * column key with the corresponding value in the table. Changes to the returned map will update\n",
        "666": "   * the underlying table, and vice versa.\n",
        "703": "   * Returns an immutable set of the valid row keys, including those that are associated with null\n",
        "704": "   * values only.\n",
        "749": "   * Returns an unmodifiable collection of all values, which may contain duplicates. Changes to the\n",
        "750": "   * table will update the returned collection.\n",
        "752": "   * <p>The returned collection's iterator traverses the values of the first row key, the values of\n",
        "753": "   * the second row key, and so on.\n"
    },
    "removed": {
        "43": " * <p>The allowed row and column keys must be supplied when the table is\n",
        "44": " * created. The table always contains a mapping for every row key / column pair.\n",
        "45": " * The value corresponding to a given row and column is null unless another\n",
        "46": " * value is provided.\n",
        "48": " * <p>The table's size is constant: the product of the number of supplied row\n",
        "49": " * keys and the number of supplied column keys. The {@code remove} and {@code\n",
        "50": " * clear} methods are not supported by the table or its views. The {@link\n",
        "51": " * #erase} and {@link #eraseAll} methods may be used instead.\n",
        "53": " * <p>The ordering of the row and column keys provided when the table is\n",
        "54": " * constructed determines the iteration ordering across rows and columns in the\n",
        "55": " * table's views. None of the view iterators support {@link Iterator#remove}.\n",
        "56": " * If the table is modified after an iterator is created, the iterator remains\n",
        "57": " * valid.\n",
        "59": " * <p>This class requires less memory than the {@link HashBasedTable} and {@link\n",
        "60": " * TreeBasedTable} implementations, except when the table is sparse.\n",
        "64": " * <p>This class provides methods involving the underlying array structure,\n",
        "65": " * where the array indices correspond to the position of a row or column in the\n",
        "66": " * lists of allowed keys and values. See the {@link #at}, {@link #set}, {@link\n",
        "67": " * #toArray}, {@link #rowKeyList}, and {@link #columnKeyList} methods for more\n",
        "68": " * details.\n",
        "70": " * <p>Note that this implementation is not synchronized. If multiple threads\n",
        "71": " * access the same cell of an {@code ArrayTable} concurrently and one of the\n",
        "72": " * threads modifies its value, there is no guarantee that the new value will be\n",
        "73": " * fully visible to the other threads. To guarantee that modifications are\n",
        "74": " * visible, synchronize access to the table. Unlike other {@code Table}\n",
        "75": " * implementations, synchronization is unnecessary between a thread that writes\n",
        "76": " * to one cell and a thread that reads from another.\n",
        "79": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#table\">\n",
        "80": " * {@code Table}</a>.\n",
        "95": "   * @throws IllegalArgumentException if {@code rowKeys} or {@code columnKeys}\n",
        "96": "   *     contains duplicates or if exactly one of {@code rowKeys} or {@code\n",
        "97": "   *     columnKeys} is empty.\n",
        "114": "   * <p>If {@code table} includes a mapping with row key {@code r} and a\n",
        "115": "   * separate mapping with column key {@code c}, the returned table contains a\n",
        "116": "   * mapping with row key {@code r} and column key {@code c}. If that row key /\n",
        "117": "   * column key pair in not in {@code table}, the pair maps to {@code null} in\n",
        "118": "   * the generated table.\n",
        "120": "   * <p>The returned table allows subsequent {@code put} calls with the row keys\n",
        "121": "   * in {@code table.rowKeySet()} and the column keys in {@code\n",
        "122": "   * table.columnKeySet()}. Calling {@link #put} with other keys leads to an\n",
        "123": "   * {@code IllegalArgumentException}.\n",
        "125": "   * <p>The ordering of {@code table.rowKeySet()} and {@code\n",
        "126": "   * table.columnKeySet()} determines the row and column iteration ordering of\n",
        "127": "   * the returned table.\n",
        "292": "   * Returns, as an immutable list, the row keys provided when the table was\n",
        "293": "   * constructed, including those that are mapped to null values only.\n",
        "300": "   * Returns, as an immutable list, the column keys provided when the table was\n",
        "301": "   * constructed, including those that are mapped to null values only.\n",
        "308": "   * Returns the value corresponding to the specified row and column indices.\n",
        "309": "   * The same value is returned by {@code\n",
        "310": "   * get(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex))}, but\n",
        "311": "   * this method runs more quickly.\n",
        "316": "   * @throws IndexOutOfBoundsException if either index is negative, {@code\n",
        "317": "   *     rowIndex} is greater than or equal to the number of allowed row keys,\n",
        "318": "   *     or {@code columnIndex} is greater than or equal to the number of\n",
        "319": "   *     allowed column keys\n",
        "329": "   * Associates {@code value} with the specified row and column indices. The\n",
        "330": "   * logic {@code\n",
        "331": "   * put(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex), value)}\n",
        "332": "   * has the same behavior, but this method runs more quickly.\n",
        "338": "   * @throws IndexOutOfBoundsException if either index is negative, {@code\n",
        "339": "   *     rowIndex} is greater than or equal to the number of allowed row keys,\n",
        "340": "   *     or {@code columnIndex} is greater than or equal to the number of\n",
        "341": "   *     allowed column keys\n",
        "354": "   * Returns a two-dimensional array with the table contents. The row and column\n",
        "355": "   * indices correspond to the positions of the row and column in the iterables\n",
        "356": "   * provided during table construction. If the table lacks a mapping for a\n",
        "357": "   * given row and column, the corresponding array element is null.\n",
        "385": "  /**\n",
        "386": "   * Associates the value {@code null} with every pair of allowed row and column\n",
        "387": "   * keys.\n",
        "388": "   */\n",
        "396": "   * Returns {@code true} if the provided keys are among the keys provided\n",
        "397": "   * when the table was constructed.\n",
        "405": "   * Returns {@code true} if the provided column key is among the column keys\n",
        "406": "   * provided when the table was constructed.\n",
        "414": "   * Returns {@code true} if the provided row key is among the row keys\n",
        "415": "   * provided when the table was constructed.\n",
        "442": "   * Returns {@code true} if {@code rowKeyList().size == 0} or {@code\n",
        "443": "   * columnKeyList().size() == 0}.\n",
        "453": "   * @throws IllegalArgumentException if {@code rowKey} is not in {@link\n",
        "454": "   *     #rowKeySet()} or {@code columnKey} is not in {@link #columnKeySet()}.\n",
        "476": "   * <p>If {@code table} is an {@code ArrayTable}, its null values will be\n",
        "477": "   * stored in this table, possibly replacing values that were previously\n",
        "478": "   * non-null.\n",
        "481": "   * @throws IllegalArgumentException if any of the provided table's row keys or\n",
        "482": "   *     column keys is not in {@link #rowKeySet()} or {@link #columnKeySet()}\n",
        "503": "   * Associates the value {@code null} with the specified keys, assuming both\n",
        "504": "   * keys are valid. If either key is null or isn't among the keys provided\n",
        "505": "   * during construction, this method has no effect.\n",
        "507": "   * <p>This method is equivalent to {@code put(rowKey, columnKey, null)} when\n",
        "508": "   * both provided keys are valid.\n",
        "512": "   * @return the value previously associated with the keys, or {@code null} if\n",
        "513": "   *     no mapping existed for the keys\n",
        "533": "   * Returns an unmodifiable set of all row key / column key / value\n",
        "534": "   * triplets. Changes to the table will update the returned set.\n",
        "536": "   * <p>The returned set's iterator traverses the mappings with the first row\n",
        "537": "   * key, the mappings with the second row key, and so on.\n",
        "539": "   * <p>The value in the returned cells may change if the table subsequently\n",
        "540": "   * changes.\n",
        "542": "   * @return set of table cells consisting of row key / column key / value\n",
        "543": "   *     triplets\n",
        "595": "   * Returns a view of all mappings that have the given column key. If the\n",
        "596": "   * column key isn't in {@link #columnKeySet()}, an empty immutable map is\n",
        "597": "   * returned.\n",
        "599": "   * <p>Otherwise, for each row key in {@link #rowKeySet()}, the returned map\n",
        "600": "   * associates the row key with the corresponding value in the table. Changes\n",
        "601": "   * to the returned map will update the underlying table, and vice versa.\n",
        "638": "   * Returns an immutable set of the valid column keys, including those that\n",
        "639": "   * are associated with null values only.\n",
        "684": "   * Returns a view of all mappings that have the given row key. If the\n",
        "685": "   * row key isn't in {@link #rowKeySet()}, an empty immutable map is\n",
        "686": "   * returned.\n",
        "688": "   * <p>Otherwise, for each column key in {@link #columnKeySet()}, the returned\n",
        "689": "   * map associates the column key with the corresponding value in the\n",
        "690": "   * table. Changes to the returned map will update the underlying table, and\n",
        "691": "   * vice versa.\n",
        "728": "   * Returns an immutable set of the valid row keys, including those that are\n",
        "729": "   * associated with null values only.\n",
        "774": "   * Returns an unmodifiable collection of all values, which may contain\n",
        "775": "   * duplicates. Changes to the table will update the returned collection.\n",
        "777": "   * <p>The returned collection's iterator traverses the values of the first row\n",
        "778": "   * key, the values of the second row key, and so on.\n"
    }
}