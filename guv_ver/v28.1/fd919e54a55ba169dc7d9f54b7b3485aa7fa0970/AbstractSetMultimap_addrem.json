{
    "addition": {
        "28": " * Basic implementation of the {@link SetMultimap} interface. It's a wrapper around {@link\n",
        "29": " * AbstractMapBasedMultimap} that converts the returned collections into {@code Sets}. The {@link\n",
        "30": " * #createCollection} method must return a {@code Set}.\n",
        "40": "   * @param map place to store the mapping from each key to its corresponding values\n",
        "59": "   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a\n",
        "60": "   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.\n",
        "70": "   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a\n",
        "71": "   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.\n",
        "81": "   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a\n",
        "82": "   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.\n",
        "93": "   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a\n",
        "94": "   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.\n",
        "107": "   * <p>Though the method signature doesn't say so explicitly, the returned map has {@link Set}\n",
        "108": "   * values.\n",
        "120": "   * @return {@code true} if the method increased the size of the multimap, or {@code false} if the\n",
        "121": "   *     multimap already contained the key-value pair\n",
        "132": "   * <p>Two {@code SetMultimap} instances are equal if, for each key, they contain the same values.\n",
        "133": "   * Equality does not depend on the ordering of keys or values.\n"
    },
    "removed": {
        "28": " * Basic implementation of the {@link SetMultimap} interface. It's a wrapper\n",
        "29": " * around {@link AbstractMapBasedMultimap} that converts the returned collections into\n",
        "30": " * {@code Sets}. The {@link #createCollection} method must return a {@code Set}.\n",
        "40": "   * @param map place to store the mapping from each key to its corresponding\n",
        "41": "   *     values\n",
        "60": "   * <p>Because a {@code SetMultimap} has unique values for a given key, this\n",
        "61": "   * method returns a {@link Set}, instead of the {@link Collection} specified\n",
        "62": "   * in the {@link Multimap} interface.\n",
        "72": "   * <p>Because a {@code SetMultimap} has unique values for a given key, this\n",
        "73": "   * method returns a {@link Set}, instead of the {@link Collection} specified\n",
        "74": "   * in the {@link Multimap} interface.\n",
        "84": "   * <p>Because a {@code SetMultimap} has unique values for a given key, this\n",
        "85": "   * method returns a {@link Set}, instead of the {@link Collection} specified\n",
        "86": "   * in the {@link Multimap} interface.\n",
        "97": "   * <p>Because a {@code SetMultimap} has unique values for a given key, this\n",
        "98": "   * method returns a {@link Set}, instead of the {@link Collection} specified\n",
        "99": "   * in the {@link Multimap} interface.\n",
        "112": "   * <p>Though the method signature doesn't say so explicitly, the returned map\n",
        "113": "   * has {@link Set} values.\n",
        "125": "   * @return {@code true} if the method increased the size of the multimap, or\n",
        "126": "   *     {@code false} if the multimap already contained the key-value pair\n",
        "137": "   * <p>Two {@code SetMultimap} instances are equal if, for each key, they\n",
        "138": "   * contain the same values. Equality does not depend on the ordering of keys\n",
        "139": "   * or values.\n"
    }
}