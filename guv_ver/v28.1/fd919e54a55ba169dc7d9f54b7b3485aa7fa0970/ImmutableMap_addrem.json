{
    "addition": {
        "130": "   * Verifies that {@code key} and {@code value} are non-null, and returns a new immutable entry\n",
        "131": "   * with those values.\n",
        "132": "   *\n",
        "133": "   * <p>A call to {@link Entry#setValue} on the returned entry will always throw {@link\n",
        "134": "   * UnsupportedOperationException}.\n",
        "176": "   * A builder for creating immutable map instances, especially {@code public static final} maps\n",
        "177": "   * (\"constant maps\"). Example:\n",
        "179": "   * <pre>{@code\n",
        "191": "   * <p>By default, a {@code Builder} will generate maps that iterate over entries in the order they\n",
        "192": "   * were inserted into the builder, equivalently to {@code LinkedHashMap}. For example, in the\n",
        "193": "   * above example, {@code WORD_TO_INT.entrySet()} is guaranteed to iterate over the entries in the\n",
        "194": "   * order {@code \"one\"=1, \"two\"=2, \"three\"=3}, and {@code keySet()} and {@code values()} respect\n",
        "195": "   * the same order. If you want a different order, consider using {@link ImmutableSortedMap} to\n",
        "196": "   * sort by keys, or call {@link #orderEntriesByValue(Comparator)}, which changes this builder to\n",
        "197": "   * sort entries by value.\n",
        "199": "   * <p>Builder instances can be reused - it is safe to call {@link #build} multiple times to build\n",
        "200": "   * multiple maps in series. Each map is a superset of the maps created before it.\n",
        "315": "     * Returns a newly-created immutable map. The iteration order of the returned map is the order\n",
        "316": "     * in which entries were inserted into the builder, unless {@link #orderEntriesByValue} was\n",
        "317": "     * called, in which case entries are sorted by value.\n",
        "358": "   * over entries in the same order as the {@code entrySet} of the original map. If {@code map}\n",
        "359": "   * somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose\n",
        "360": "   * comparator is not <i>consistent with equals</i>), the results of this method are undefined.\n",
        "362": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "363": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "364": "   * undocumented and subject to change.\n",
        "523": "   * Returns an immutable set of the mappings in this map. The iteration order is specified by the\n",
        "524": "   * method used to create this map. Typically, this is insertion order.\n",
        "537": "   * Returns an immutable set of the keys in this map, in the same order that they appear in {@link\n",
        "538": "   * #entrySet}.\n"
    },
    "removed": {
        "130": "   * Verifies that {@code key} and {@code value} are non-null, and returns a new\n",
        "131": "   * immutable entry with those values.\n",
        "132": "   * <p>A call to {@link Entry#setValue} on the returned entry will always\n",
        "133": "   * throw {@link UnsupportedOperationException}.\n",
        "175": "   * A builder for creating immutable map instances, especially {@code public\n",
        "176": "   * static final} maps (\"constant maps\"). Example: <pre>   {@code\n",
        "189": "   * <p>By default, a {@code Builder} will generate maps that iterate over entries in the order\n",
        "190": "   * they were inserted into the builder, equivalently to {@code LinkedHashMap}.  For example, in\n",
        "191": "   * the above example, {@code WORD_TO_INT.entrySet()} is guaranteed to iterate over the entries in\n",
        "192": "   * the order {@code \"one\"=1, \"two\"=2, \"three\"=3}, and {@code keySet()} and {@code values()}\n",
        "193": "   * respect the same order.   If you want a different order, consider using \n",
        "194": "   * {@link ImmutableSortedMap} to sort by keys, or call {@link #orderEntriesByValue(Comparator)}, \n",
        "195": "   * which changes this builder to sort entries by value.\n",
        "197": "   * <p>Builder instances can be reused - it is safe to call {@link #build}\n",
        "198": "   * multiple times to build multiple maps in series. Each map is a superset of\n",
        "199": "   * the maps created before it.\n",
        "314": "     * Returns a newly-created immutable map.  The iteration order of the returned map is\n",
        "315": "     * the order in which entries were inserted into the builder, unless\n",
        "316": "     * {@link #orderEntriesByValue} was called, in which case entries are sorted by value.\n",
        "357": "   * over entries in the same order as the {@code entrySet} of the original map.  If {@code map}\n",
        "358": "   * somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap}\n",
        "359": "   * whose comparator is not <i>consistent with equals</i>), the results of this method are\n",
        "360": "   * undefined.\n",
        "362": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "363": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "364": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "523": "   * Returns an immutable set of the mappings in this map.  The iteration order is specified by\n",
        "524": "   * the method used to create this map.  Typically, this is insertion order.\n",
        "537": "   * Returns an immutable set of the keys in this map, in the same order that they appear in\n",
        "538": "   * {@link #entrySet}.\n"
    }
}