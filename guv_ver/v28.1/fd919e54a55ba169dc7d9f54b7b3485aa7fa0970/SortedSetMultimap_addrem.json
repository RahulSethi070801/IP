{
    "addition": {
        "29": " * A {@code SetMultimap} whose set of values for a given key are kept sorted; that is, they comprise\n",
        "30": " * a {@link SortedSet}. It cannot hold duplicate key-value pairs; adding a key-value pair that's\n",
        "31": " * already in the multimap has no effect. This interface does not specify the ordering of the\n",
        "32": " * multimap's keys. See the {@link Multimap} documentation for information common to all multimaps.\n",
        "34": " * <p>The {@link #get}, {@link #removeAll}, and {@link #replaceValues} methods each return a {@link\n",
        "35": " * SortedSet} of values, while {@link Multimap#entries()} returns a {@link Set} of map entries.\n",
        "36": " * Though the method signature doesn't say so explicitly, the map returned by {@link #asMap} has\n",
        "37": " * {@code SortedSet} values.\n",
        "40": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap\"> {@code\n",
        "41": " * Multimap}</a>.\n",
        "51": "   * Returns a collection view of all values associated with a key. If no mappings in the multimap\n",
        "52": "   * have the provided key, an empty collection is returned.\n",
        "54": "   * <p>Changes to the returned collection will update the underlying multimap, and vice versa.\n",
        "56": "   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method\n",
        "57": "   * returns a {@link SortedSet}, instead of the {@link java.util.Collection} specified in the\n",
        "58": "   * {@link Multimap} interface.\n",
        "66": "   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method\n",
        "67": "   * returns a {@link SortedSet}, instead of the {@link java.util.Collection} specified in the\n",
        "68": "   * {@link Multimap} interface.\n",
        "75": "   * Stores a collection of values with the same key, replacing any existing values for that key.\n",
        "77": "   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method\n",
        "78": "   * returns a {@link SortedSet}, instead of the {@link java.util.Collection} specified in the\n",
        "79": "   * {@link Multimap} interface.\n",
        "88": "   * Returns a map view that associates each key with the corresponding values in the multimap.\n",
        "89": "   * Changes to the returned map, such as element removal, will update the underlying multimap. The\n",
        "90": "   * map does not support {@code setValue()} on its entries, {@code put}, or {@code putAll}.\n",
        "92": "   * <p>When passed a key that is present in the map, {@code asMap().get(Object)} has the same\n",
        "93": "   * behavior as {@link #get}, returning a live collection. When passed a key that is not present,\n",
        "94": "   * however, {@code asMap().get(Object)} returns {@code null} instead of an empty collection.\n",
        "96": "   * <p><b>Note:</b> The returned map's values are guaranteed to be of type {@link SortedSet}. To\n",
        "97": "   * obtain this map with the more specific generic type {@code Map<K, SortedSet<V>>}, call {@link\n",
        "98": "   * Multimaps#asMap(SortedSetMultimap)} instead.\n",
        "104": "   * Returns the comparator that orders the multimap values, with {@code null} indicating that\n",
        "105": "   * natural ordering is used.\n"
    },
    "removed": {
        "29": " * A {@code SetMultimap} whose set of values for a given key are kept sorted;\n",
        "30": " * that is, they comprise a {@link SortedSet}. It cannot hold duplicate\n",
        "31": " * key-value pairs; adding a key-value pair that's already in the multimap has\n",
        "32": " * no effect. This interface does not specify the ordering of the multimap's\n",
        "33": " * keys. See the {@link Multimap} documentation for information common to all\n",
        "34": " * multimaps.\n",
        "36": " * <p>The {@link #get}, {@link #removeAll}, and {@link #replaceValues} methods\n",
        "37": " * each return a {@link SortedSet} of values, while {@link Multimap#entries()}\n",
        "38": " * returns a {@link Set} of map entries. Though the method signature doesn't say\n",
        "39": " * so explicitly, the map returned by {@link #asMap} has {@code SortedSet}\n",
        "40": " * values.\n",
        "43": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap\">\n",
        "44": " * {@code Multimap}</a>.\n",
        "54": "   * Returns a collection view of all values associated with a key. If no\n",
        "55": "   * mappings in the multimap have the provided key, an empty collection is\n",
        "56": "   * returned.\n",
        "58": "   * <p>Changes to the returned collection will update the underlying multimap,\n",
        "59": "   * and vice versa.\n",
        "61": "   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given\n",
        "62": "   * key, this method returns a {@link SortedSet}, instead of the\n",
        "63": "   * {@link java.util.Collection} specified in the {@link Multimap} interface.\n",
        "71": "   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given\n",
        "72": "   * key, this method returns a {@link SortedSet}, instead of the\n",
        "73": "   * {@link java.util.Collection} specified in the {@link Multimap} interface.\n",
        "80": "   * Stores a collection of values with the same key, replacing any existing\n",
        "81": "   * values for that key.\n",
        "83": "   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given\n",
        "84": "   * key, this method returns a {@link SortedSet}, instead of the\n",
        "85": "   * {@link java.util.Collection} specified in the {@link Multimap} interface.\n",
        "94": "   * Returns a map view that associates each key with the corresponding values\n",
        "95": "   * in the multimap. Changes to the returned map, such as element removal, will\n",
        "96": "   * update the underlying multimap. The map does not support {@code setValue()}\n",
        "97": "   * on its entries, {@code put}, or {@code putAll}.\n",
        "99": "   * <p>When passed a key that is present in the map, {@code\n",
        "100": "   * asMap().get(Object)} has the same behavior as {@link #get}, returning a\n",
        "101": "   * live collection. When passed a key that is not present, however, {@code\n",
        "102": "   * asMap().get(Object)} returns {@code null} instead of an empty collection.\n",
        "104": "   * <p><b>Note:</b> The returned map's values are guaranteed to be of type\n",
        "105": "   * {@link SortedSet}. To obtain this map with the more specific generic type\n",
        "106": "   * {@code Map<K, SortedSet<V>>}, call\n",
        "107": "   * {@link Multimaps#asMap(SortedSetMultimap)} instead.\n",
        "113": "   * Returns the comparator that orders the multimap values, with {@code null}\n",
        "114": "   * indicating that natural ordering is used.\n"
    }
}