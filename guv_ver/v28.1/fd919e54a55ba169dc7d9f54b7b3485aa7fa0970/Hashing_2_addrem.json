{
    "addition": {
        "37": " * <p>A comparison of the various hash functions can be found <a\n",
        "38": " * href=\"http://goo.gl/jS7HH\">here</a>.\n",
        "93": "   * Returns a hash function implementing the <a\n",
        "94": "   * href=\"https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp\">32-bit murmur3\n",
        "104": "   * Returns a hash function implementing the <a\n",
        "105": "   * href=\"https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp\">32-bit murmur3\n",
        "115": "   * Returns a hash function implementing the <a\n",
        "116": "   * href=\"https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp\">128-bit murmur3\n",
        "126": "   * Returns a hash function implementing the <a\n",
        "127": "   * href=\"https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp\">128-bit murmur3\n",
        "339": "        methodName, key.getAlgorithm(), key.getFormat());\n",
        "418": "   * farmhash::Fingerprint64() would for the same input (when compared using {@link\n",
        "419": "   * com.google.common.primitives.UnsignedLongs}'s encoding of 64-bit unsigned numbers).\n",
        "437": "   *   <li>{@code n - 1}, with approximate probability {@code 1/n}\n",
        "438": "   *   <li>{@code consistentHash(h, n - 1)}, otherwise (probability {@code 1 - 1/n})\n",
        "445": "   *   <li>You want to assign the same fraction of inputs to each bucket.\n",
        "446": "   *   <li>When you reduce the number of buckets, you can accept that the most recently added\n",
        "447": "   *       buckets will be removed first. More concretely, if you are dividing traffic among tasks,\n",
        "448": "   *       you can decrease the number of tasks from 15 and 10, killing off the final 5 tasks, and\n",
        "449": "   *       {@code consistentHash} will handle it. If, however, you are dividing traffic among\n",
        "450": "   *       servers {@code alpha}, {@code bravo}, and {@code charlie} and you occasionally need to\n",
        "451": "   *       take each of the servers offline, {@code consistentHash} will be a poor fit: It provides\n",
        "452": "   *       no way for you to specify which of the three buckets is disappearing. Thus, if your\n",
        "453": "   *       buckets change from {@code [alpha, bravo, charlie]} to {@code [bravo, charlie]}, it will\n",
        "454": "   *       assign all the old {@code alpha} traffic to {@code bravo} and all the old {@code bravo}\n",
        "455": "   *       traffic to {@code charlie}, rather than letting {@code bravo} keep its traffic.\n",
        "472": "   *   <li>{@code n - 1}, with approximate probability {@code 1/n}\n",
        "473": "   *   <li>{@code consistentHash(h, n - 1)}, otherwise (probability {@code 1 - 1/n})\n",
        "480": "   *   <li>You want to assign the same fraction of inputs to each bucket.\n",
        "481": "   *   <li>When you reduce the number of buckets, you can accept that the most recently added\n",
        "482": "   *       buckets will be removed first. More concretely, if you are dividing traffic among tasks,\n",
        "483": "   *       you can decrease the number of tasks from 15 and 10, killing off the final 5 tasks, and\n",
        "484": "   *       {@code consistentHash} will handle it. If, however, you are dividing traffic among\n",
        "485": "   *       servers {@code alpha}, {@code bravo}, and {@code charlie} and you occasionally need to\n",
        "486": "   *       take each of the servers offline, {@code consistentHash} will be a poor fit: It provides\n",
        "487": "   *       no way for you to specify which of the three buckets is disappearing. Thus, if your\n",
        "488": "   *       buckets change from {@code [alpha, bravo, charlie]} to {@code [bravo, charlie]}, it will\n",
        "489": "   *       assign all the old {@code alpha} traffic to {@code bravo} and all the old {@code bravo}\n",
        "490": "   *       traffic to {@code charlie}, rather than letting {@code bravo} keep its traffic.\n",
        "563": "  /** Checks that the passed argument is positive, and ceils it to a multiple of 32. */\n"
    },
    "removed": {
        "37": " * <p>A comparison of the various hash functions can be found\n",
        "38": " * <a href=\"http://goo.gl/jS7HH\">here</a>.\n",
        "93": "   * Returns a hash function implementing the\n",
        "94": "   * <a href=\"https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp\">32-bit murmur3\n",
        "104": "   * Returns a hash function implementing the\n",
        "105": "   * <a href=\"https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp\">32-bit murmur3\n",
        "115": "   * Returns a hash function implementing the\n",
        "116": "   * <a href=\"https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp\">128-bit murmur3\n",
        "126": "   * Returns a hash function implementing the\n",
        "127": "   * <a href=\"https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp\">128-bit murmur3\n",
        "339": "        methodName,\n",
        "340": "        key.getAlgorithm(),\n",
        "341": "        key.getFormat());\n",
        "420": "   * farmhash::Fingerprint64() would for the same input (when compared using\n",
        "421": "   * {@link com.google.common.primitives.UnsignedLongs}'s encoding of 64-bit unsigned numbers).\n",
        "439": "   * <li>{@code n - 1}, with approximate probability {@code 1/n}\n",
        "440": "   * <li>{@code consistentHash(h, n - 1)}, otherwise (probability {@code 1 - 1/n})\n",
        "447": "   * <li>You want to assign the same fraction of inputs to each bucket.\n",
        "448": "   * <li>When you reduce the number of buckets, you can accept that the most recently added buckets\n",
        "449": "   * will be removed first. More concretely, if you are dividing traffic among tasks, you can\n",
        "450": "   * decrease the number of tasks from 15 and 10, killing off the final 5 tasks, and {@code\n",
        "451": "   * consistentHash} will handle it. If, however, you are dividing traffic among servers {@code\n",
        "452": "   * alpha}, {@code bravo}, and {@code charlie} and you occasionally need to take each of the\n",
        "453": "   * servers offline, {@code consistentHash} will be a poor fit: It provides no way for you to\n",
        "454": "   * specify which of the three buckets is disappearing. Thus, if your buckets change from {@code\n",
        "455": "   * [alpha, bravo, charlie]} to {@code [bravo, charlie]}, it will assign all the old {@code alpha}\n",
        "456": "   * traffic to {@code bravo} and all the old {@code bravo} traffic to {@code charlie}, rather than\n",
        "457": "   * letting {@code bravo} keep its traffic.\n",
        "474": "   * <li>{@code n - 1}, with approximate probability {@code 1/n}\n",
        "475": "   * <li>{@code consistentHash(h, n - 1)}, otherwise (probability {@code 1 - 1/n})\n",
        "482": "   * <li>You want to assign the same fraction of inputs to each bucket.\n",
        "483": "   * <li>When you reduce the number of buckets, you can accept that the most recently added buckets\n",
        "484": "   * will be removed first. More concretely, if you are dividing traffic among tasks, you can\n",
        "485": "   * decrease the number of tasks from 15 and 10, killing off the final 5 tasks, and {@code\n",
        "486": "   * consistentHash} will handle it. If, however, you are dividing traffic among servers {@code\n",
        "487": "   * alpha}, {@code bravo}, and {@code charlie} and you occasionally need to take each of the\n",
        "488": "   * servers offline, {@code consistentHash} will be a poor fit: It provides no way for you to\n",
        "489": "   * specify which of the three buckets is disappearing. Thus, if your buckets change from {@code\n",
        "490": "   * [alpha, bravo, charlie]} to {@code [bravo, charlie]}, it will assign all the old {@code alpha}\n",
        "491": "   * traffic to {@code bravo} and all the old {@code bravo} traffic to {@code charlie}, rather than\n",
        "492": "   * letting {@code bravo} keep its traffic.\n",
        "565": "  /**\n",
        "566": "   * Checks that the passed argument is positive, and ceils it to a multiple of 32.\n",
        "567": "   */\n"
    }
}