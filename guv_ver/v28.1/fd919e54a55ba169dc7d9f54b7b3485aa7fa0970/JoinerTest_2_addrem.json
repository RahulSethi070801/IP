{
    "addition": {
        "52": "  private static final Iterable<Integer> ITERABLE_NULL_NULL = Arrays.asList((Integer) null, null);\n",
        "56": "  private static final Iterable<Integer> ITERABLE_FOUR_NULLS =\n",
        "57": "      Arrays.asList((Integer) null, null, null, null);\n",
        "162": "  private static final Appendable NASTY_APPENDABLE =\n",
        "163": "      new Appendable() {\n",
        "164": "        @Override\n",
        "165": "        public Appendable append(CharSequence csq) throws IOException {\n",
        "166": "          throw new IOException();\n",
        "167": "        }\n",
        "168": "\n",
        "169": "        @Override\n",
        "170": "        public Appendable append(CharSequence csq, int start, int end) throws IOException {\n",
        "171": "          throw new IOException();\n",
        "172": "        }\n",
        "173": "\n",
        "174": "        @Override\n",
        "175": "        public Appendable append(char c) throws IOException {\n",
        "176": "          throw new IOException();\n",
        "177": "        }\n",
        "178": "      };\n",
        "325": "\n",
        "326": "    @Override\n",
        "327": "    public String toString() {\n",
        "340": "\n",
        "341": "    @Override\n",
        "342": "    public Iterator<Integer> iterator() {\n",
        "345": "\n",
        "346": "    @Override\n",
        "347": "    public boolean hasNext() {\n",
        "350": "\n",
        "351": "    @Override\n",
        "352": "    public Integer next() {\n",
        "355": "\n",
        "356": "    @Override\n",
        "357": "    public void remove() {\n",
        "364": "    assertEquals(\"foo,foo\", Joiner.on(\",\").join(new DontStringMeBro(), new DontStringMeBro()));\n",
        "365": "    assertEquals(\n",
        "366": "        \"foo,bar,foo\",\n",
        "367": "        Joiner.on(\",\").useForNull(\"bar\").join(new DontStringMeBro(), null, new DontStringMeBro()));\n"
    },
    "removed": {
        "52": "  private static final Iterable<Integer> ITERABLE_NULL_NULL\n",
        "53": "      = Arrays.asList((Integer) null, null);\n",
        "57": "  private static final Iterable<Integer> ITERABLE_FOUR_NULLS\n",
        "58": "      = Arrays.asList((Integer) null, null, null, null);\n",
        "163": "  private static final Appendable NASTY_APPENDABLE = new Appendable() {\n",
        "164": "    @Override\n",
        "165": "    public Appendable append(CharSequence csq) throws IOException {\n",
        "166": "      throw new IOException();\n",
        "167": "    }\n",
        "168": "    @Override\n",
        "169": "    public Appendable append(CharSequence csq, int start, int end) throws IOException {\n",
        "170": "      throw new IOException();\n",
        "171": "    }\n",
        "172": "    @Override\n",
        "173": "    public Appendable append(char c) throws IOException {\n",
        "174": "      throw new IOException();\n",
        "175": "    }\n",
        "176": "  };\n",
        "321": "    @Override public String toString() {\n",
        "333": "    @Override public Iterator<Integer> iterator() {\n",
        "336": "    @Override public boolean hasNext() {\n",
        "339": "    @Override public Integer next() {\n",
        "342": "    @Override public void remove() {\n",
        "349": "    assertEquals(\"foo,foo\", Joiner.on(\",\").join(\n",
        "350": "        new DontStringMeBro(), new DontStringMeBro()));\n",
        "351": "    assertEquals(\"foo,bar,foo\", Joiner.on(\",\").useForNull(\"bar\").join(\n",
        "352": "        new DontStringMeBro(), null, new DontStringMeBro()));\n"
    }
}