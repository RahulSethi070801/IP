{
    "addition": {
        "51": " * This class contains static utility methods that operate on or return objects of type {@link\n",
        "52": " * Iterator}. Except as noted, each method has a corresponding {@link Iterable}-based method in the\n",
        "53": " * {@link Iterables} class.\n",
        "55": " * <p><i>Performance notes:</i> Unless otherwise noted, all of the iterators produced in this class\n",
        "56": " * are <i>lazy</i>, which means that they only advance the backing iteration when absolutely\n",
        "57": " * necessary.\n",
        "60": " * \"https://github.com/google/guava/wiki/CollectionUtilitiesExplained#iterables\"> {@code\n",
        "61": " * Iterators}</a>.\n",
        "74": "   * <p>The {@link Iterable} equivalent of this method is {@link ImmutableSet#of()}.\n",
        "83": "   * <p>The {@link Iterable} equivalent of this method is {@link ImmutableSet#of()}.\n",
        "115": "   * Returns the empty {@code Iterator} that throws {@link IllegalStateException} instead of {@link\n",
        "116": "   * UnsupportedOperationException} on a call to {@link Iterator#remove()}.\n",
        "158": "   * Returns the number of elements remaining in {@code iterator}. The iterator will be left\n",
        "159": "   * exhausted: its {@code hasNext()} method will return {@code false}.\n",
        "170": "  /** Returns {@code true} if {@code iterator} contains {@code element}. */\n",
        "189": "   * Traverses an iterator and removes every element that belongs to the provided collection. The\n",
        "190": "   * iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.\n",
        "210": "   * Removes every element that satisfies the provided predicate from the iterator. The iterator\n",
        "211": "   * will be left exhausted: its {@code hasNext()} method will return {@code false}.\n",
        "214": "   * @param predicate a predicate that determines whether an element should be removed\n",
        "232": "   * Traverses an iterator and removes every element that does not belong to the provided\n",
        "233": "   * collection. The iterator will be left exhausted: its {@code hasNext()} method will return\n",
        "234": "   * {@code false}.\n",
        "254": "   * Determines whether two iterators contain equal elements in the same order. More specifically,\n",
        "255": "   * this method returns {@code true} if {@code iterator1} and {@code iterator2} contain the same\n",
        "256": "   * number of elements and every element of {@code iterator1} is equal to the corresponding element\n",
        "257": "   * of {@code iterator2}.\n",
        "259": "   * <p>Note that this will modify the supplied iterators, since they will have been advanced some\n",
        "260": "   * number of elements forward.\n",
        "277": "   * Returns a string representation of {@code iterator}, with the format {@code [e1, e2, ..., en]}.\n",
        "278": "   * The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.\n",
        "297": "   * @throws IllegalArgumentException if the iterator contains multiple elements. The state of the\n",
        "298": "   *     iterator is unspecified.\n",
        "320": "   * Returns the single element contained in {@code iterator}, or {@code defaultValue} if the\n",
        "321": "   * iterator is empty.\n",
        "323": "   * @throws IllegalArgumentException if the iterator contains multiple elements. The state of the\n",
        "324": "   *     iterator is unspecified.\n",
        "333": "   * Copies an iterator's elements into an array. The iterator will be left exhausted: its {@code\n",
        "334": "   * hasNext()} method will return {@code false}.\n",
        "338": "   * @return a newly-allocated array into which all the elements of the iterator have been copied\n",
        "347": "   * Adds all elements in {@code iterator} to {@code collection}. The iterator will be left\n",
        "348": "   * exhausted: its {@code hasNext()} method will return {@code false}.\n",
        "350": "   * @return {@code true} if {@code collection} was modified as a result of this operation\n",
        "364": "   * Returns the number of elements in the specified iterator that equal the specified object. The\n",
        "365": "   * iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.\n",
        "380": "   * Returns an iterator that cycles indefinitely over the elements of {@code iterable}.\n",
        "382": "   * <p>The returned iterator supports {@code remove()} if the provided iterator does. After {@code\n",
        "383": "   * remove()} is called, subsequent cycles omit the removed element, which is no longer in {@code\n",
        "384": "   * iterable}. The iterator's {@code hasNext()} method returns {@code true} until {@code iterable}\n",
        "385": "   * is empty.\n",
        "387": "   * <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You\n",
        "388": "   * should use an explicit {@code break} or be certain that you will eventually remove all the\n",
        "389": "   * elements.\n",
        "431": "   * <p>The returned iterator supports {@code remove()}. After {@code remove()} is called,\n",
        "432": "   * subsequent cycles omit the removed element, but {@code elements} does not change. The\n",
        "433": "   * iterator's {@code hasNext()} method returns {@code true} until all of the original elements\n",
        "434": "   * have been removed.\n",
        "436": "   * <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You\n",
        "437": "   * should use an explicit {@code break} or be certain that you will eventually remove all the\n",
        "438": "   * elements.\n",
        "446": "   * Returns an Iterator that walks the specified array, nulling out elements behind it. This can\n",
        "447": "   * avoid memory leaks when an element is no longer necessary.\n",
        "449": "   * <p>This is mainly just to avoid the intermediate ArrayDeque in ConsumingQueueIterator.\n",
        "474": "   * Combines two iterators into a single iterator. The returned iterator iterates across the\n",
        "475": "   * elements in {@code a}, followed by the elements in {@code b}. The source iterators are not\n",
        "476": "   * polled until necessary.\n",
        "478": "   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator\n",
        "479": "   * supports it.\n",
        "488": "   * Combines three iterators into a single iterator. The returned iterator iterates across the\n",
        "489": "   * elements in {@code a}, followed by the elements in {@code b}, followed by the elements in\n",
        "490": "   * {@code c}. The source iterators are not polled until necessary.\n",
        "492": "   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator\n",
        "493": "   * supports it.\n",
        "504": "   * Combines four iterators into a single iterator. The returned iterator iterates across the\n",
        "505": "   * elements in {@code a}, followed by the elements in {@code b}, followed by the elements in\n",
        "506": "   * {@code c}, followed by the elements in {@code d}. The source iterators are not polled until\n",
        "507": "   * necessary.\n",
        "509": "   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator\n",
        "510": "   * supports it.\n",
        "525": "   * Combines multiple iterators into a single iterator. The returned iterator iterates across the\n",
        "526": "   * elements of each iterator in {@code inputs}. The input iterators are not polled until\n",
        "527": "   * necessary.\n",
        "529": "   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator\n",
        "530": "   * supports it.\n",
        "538": "  /** Concats a varargs array of iterators without making a defensive copy of the array. */\n",
        "547": "   * Combines multiple iterators into a single iterator. The returned iterator iterates across the\n",
        "548": "   * elements of each iterator in {@code inputs}. The input iterators are not polled until\n",
        "549": "   * necessary.\n",
        "551": "   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator\n",
        "552": "   * supports it. The methods of the returned iterator may throw {@code NullPointerException} if any\n",
        "553": "   * of the input iterators is null.\n",
        "560": "   * Divides an iterator into unmodifiable sublists of the given size (the final list may be\n",
        "561": "   * smaller). For example, partitioning an iterator containing {@code [a, b, c, d, e]} with a\n",
        "562": "   * partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer iterator containing two\n",
        "563": "   * inner lists of three and two elements, all in the original order.\n",
        "569": "   * @return an iterator of immutable lists containing the elements of {@code iterator} divided into\n",
        "570": "   *     partitions\n",
        "578": "   * Divides an iterator into unmodifiable sublists of the given size, padding the final iterator\n",
        "579": "   * with null values if necessary. For example, partitioning an iterator containing {@code [a, b,\n",
        "580": "   * c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e, null]]} -- an outer\n",
        "581": "   * iterator containing two inner lists of three elements each, all in the original order.\n",
        "587": "   * @return an iterator of immutable lists containing the elements of {@code iterator} divided into\n",
        "588": "   *     partitions (the final iterable may have trailing null elements)\n",
        "627": "   * Returns a view of {@code unfiltered} containing all elements that satisfy the input predicate\n",
        "628": "   * {@code retainIfTrue}.\n",
        "649": "   * Returns a view of {@code unfiltered} containing all elements that are of the type {@code\n",
        "650": "   * desiredType}.\n",
        "659": "   * Returns {@code true} if one or more elements returned by {@code iterator} satisfy the given\n",
        "660": "   * predicate.\n",
        "667": "   * Returns {@code true} if every element returned by {@code iterator} satisfies the given\n",
        "668": "   * predicate. If {@code iterator} is empty, {@code true} is returned.\n",
        "682": "   * Returns the first element in {@code iterator} that satisfies the given predicate; use this\n",
        "683": "   * method only when such an element is known to exist. If no such element is found, the iterator\n",
        "684": "   * will be left exhausted: its {@code hasNext()} method will return {@code false}. If it is\n",
        "685": "   * possible that <i>no</i> element will match, use {@link #tryFind} or {@link #find(Iterator,\n",
        "686": "   * Predicate, Object)} instead.\n",
        "688": "   * @throws NoSuchElementException if no element in {@code iterator} matches the given predicate\n",
        "703": "   * Returns the first element in {@code iterator} that satisfies the given predicate. If no such\n",
        "704": "   * element is found, {@code defaultValue} will be returned from this method and the iterator will\n",
        "705": "   * be left exhausted: its {@code hasNext()} method will return {@code false}. Note that this can\n",
        "706": "   * usually be handled more naturally using {@code tryFind(iterator, predicate).or(defaultValue)}.\n",
        "725": "   * Returns an {@link Optional} containing the first element in {@code iterator} that satisfies the\n",
        "726": "   * given predicate, if such an element exists. If no such element is found, an empty {@link\n",
        "727": "   * Optional} will be returned from this method and the iterator will be left exhausted: its {@code\n",
        "730": "   * <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null}\n",
        "731": "   * is matched in {@code iterator}, a NullPointerException will be thrown.\n",
        "748": "   * Returns the index in {@code iterator} of the first element that satisfies the provided {@code\n",
        "749": "   * predicate}, or {@code -1} if the Iterator has no such elements.\n",
        "751": "   * <p>More formally, returns the lowest index {@code i} such that {@code\n",
        "752": "   * predicate.apply(Iterators.get(iterator, i))} returns {@code true}, or {@code -1} if there is no\n",
        "753": "   * such index.\n",
        "755": "   * <p>If -1 is returned, the iterator will be left exhausted: its {@code hasNext()} method will\n",
        "756": "   * return {@code false}. Otherwise, the iterator will be set to the element which satisfies the\n",
        "773": "   * Returns a view containing the result of applying {@code function} to each element of {@code\n",
        "774": "   * fromIterator}.\n",
        "776": "   * <p>The returned iterator supports {@code remove()} if {@code fromIterator} does. After a\n",
        "777": "   * successful {@code remove()} call, {@code fromIterator} no longer contains the corresponding\n",
        "778": "   * element.\n",
        "792": "   * Advances {@code iterator} {@code position + 1} times, returning the element at the {@code\n",
        "793": "   * position}th position.\n",
        "797": "   * @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to\n",
        "798": "   *     the number of elements remaining in {@code iterator}\n",
        "821": "   * Advances {@code iterator} {@code position + 1} times, returning the element at the {@code\n",
        "822": "   * position}th position or {@code defaultValue} otherwise.\n",
        "825": "   * @param defaultValue the default value to return if the iterator is empty or if {@code position}\n",
        "826": "   *     is greater than the number of elements remaining in {@code iterator}\n",
        "827": "   * @return the element at the specified position in {@code iterator} or {@code defaultValue} if\n",
        "828": "   *     {@code iterator} produces fewer than {@code position + 1} elements.\n",
        "840": "   * Returns the next element in {@code iterator} or {@code defaultValue} if the iterator is empty.\n",
        "841": "   * The {@link Iterables} analog to this method is {@link Iterables#getFirst}.\n",
        "868": "   * Advances {@code iterator} to the end, returning the last element or {@code defaultValue} if the\n",
        "869": "   * iterator is empty.\n",
        "881": "   * Calls {@code next()} on {@code iterator}, either {@code numberToAdvance} times or until {@code\n",
        "882": "   * hasNext()} returns {@code false}, whichever comes first.\n",
        "900": "   * Returns a view containing the first {@code limitSize} elements of {@code iterator}. If {@code\n",
        "901": "   * iterator} contains fewer than {@code limitSize} elements, the returned view contains all of its\n",
        "902": "   * elements. The returned iterator supports {@code remove()} if {@code iterator} does.\n",
        "937": "   * Returns a view of the supplied {@code iterator} that removes each element from the supplied\n",
        "938": "   * {@code iterator} as it is returned.\n",
        "940": "   * <p>The provided iterator must support {@link Iterator#remove()} or else the returned iterator\n",
        "941": "   * will fail on the first call to {@code next}.\n",
        "944": "   * @return an iterator that removes and returns elements from the supplied iterator\n",
        "970": "   * Deletes and returns the next value from the iterator, or returns {@code null} if there is no\n",
        "971": "   * such value.\n",
        "986": "  /** Clears the iterator using its remove method. */\n",
        "996": "   * Returns an iterator containing the elements of {@code array} in order. The returned iterator is\n",
        "997": "   * a view of the array; subsequent changes to the array will be reflected in the iterator.\n",
        "999": "   * <p><b>Note:</b> It is often preferable to represent your data using a collection type, for\n",
        "1000": "   * example using {@link Arrays#asList(Object[])}, making this method unnecessary.\n",
        "1002": "   * <p>The {@code Iterable} equivalent of this method is either {@link Arrays#asList(Object[])},\n",
        "1003": "   * {@link ImmutableList#copyOf(Object[])}}, or {@link ImmutableList#of}.\n",
        "1029": "   * Returns a list iterator containing the elements in the specified range of {@code array} in\n",
        "1030": "   * order, starting at the specified index.\n",
        "1052": "   * <p>The {@link Iterable} equivalent of this method is {@link Collections#singleton}.\n",
        "1077": "   * <p>This method has no equivalent in {@link Iterables} because viewing an {@code Enumeration} as\n",
        "1078": "   * an {@code Iterable} is impossible. However, the contents can be <i>copied</i> into a collection\n",
        "1079": "   * using {@link Collections#list}.\n",
        "1099": "   * <p>The {@code Iterable} equivalent of this method is either {@link Collections#enumeration} (if\n",
        "1100": "   * you have a {@link Collection}), or {@code Iterators.asEnumeration(collection.iterator())}.\n",
        "1117": "  /** Implementation of PeekingIterator that avoids peeking unless necessary. */\n",
        "1163": "   * <p>Calls to the {@code peek} method with no intervening calls to {@code next} do not affect the\n",
        "1164": "   * iteration, and hence return the same object each time. A subsequent call to {@code next} is\n",
        "1165": "   * guaranteed to return the same object again. For example:\n",
        "1167": "   * <pre>{@code\n",
        "1168": "   * PeekingIterator<String> peekingIterator =\n",
        "1169": "   *     Iterators.peekingIterator(Iterators.forArray(\"a\", \"b\"));\n",
        "1170": "   * String a1 = peekingIterator.peek(); // returns \"a\"\n",
        "1171": "   * String a2 = peekingIterator.peek(); // also returns \"a\"\n",
        "1172": "   * String a3 = peekingIterator.next(); // also returns \"a\"\n",
        "1173": "   * }</pre>\n",
        "1175": "   * <p>Any structural changes to the underlying iteration (aside from those performed by the\n",
        "1176": "   * iterator's own {@link PeekingIterator#remove()} method) will leave the iterator in an undefined\n",
        "1177": "   * state.\n",
        "1179": "   * <p>The returned iterator does not support removal after peeking, as explained by {@link\n",
        "1180": "   * PeekingIterator#remove()}.\n",
        "1182": "   * <p>Note: If the given iterator is already a {@code PeekingIterator}, it <i>might</i> be\n",
        "1183": "   * returned to the caller, although this is neither guaranteed to occur nor required to be\n",
        "1184": "   * consistent. For example, this method <i>might</i> choose to pass through recognized\n",
        "1185": "   * implementations of {@code PeekingIterator} when the behavior of the implementation is known to\n",
        "1186": "   * meet the contract guaranteed by this method.\n",
        "1188": "   * <p>There is no {@link Iterable} equivalent to this method, so use this method to wrap each\n",
        "1189": "   * individual iterator as it is generated.\n",
        "1191": "   * @param iterator the backing iterator. The {@link PeekingIterator} assumes ownership of this\n",
        "1192": "   *     iterator, so users should cease making direct calls to it after calling this method.\n",
        "1193": "   * @return a peeking iterator backed by that iterator. Apart from the additional {@link\n",
        "1194": "   *     PeekingIterator#peek()} method, this iterator behaves exactly the same as {@code iterator}.\n",
        "1219": "   * Returns an iterator over the merged contents of all given {@code iterators}, traversing every\n",
        "1220": "   * element of the input iterators. Equivalent entries will not be de-duplicated.\n",
        "1222": "   * <p>Callers must ensure that the source {@code iterators} are in non-descending order as this\n",
        "1223": "   * method does not sort its input.\n",
        "1225": "   * <p>For any equivalent elements across all {@code iterators}, it is undefined which element is\n",
        "1226": "   * returned first.\n",
        "1240": "   * An iterator that performs a lazy N-way merge, calculating the next value each time the iterator\n",
        "1241": "   * is polled. This amortizes the sorting cost over the iteration and requires less memory than\n",
        "1242": "   * sorting all elements at once.\n",
        "1244": "   * <p>Retrieving a single element takes approximately O(log(M)) time, where M is the number of\n",
        "1245": "   * iterators. (Retrieving all elements takes approximately O(N*log(M)) time, where N is the total\n",
        "1246": "   * number of elements.)\n",
        "1306": "    @Nullable private Deque<Iterator<? extends Iterator<? extends T>>> metaIterators;\n",
        "1382": "  /** Used to avoid http://bugs.sun.com/view_bug.do?bug_id=6558557 */\n"
    },
    "removed": {
        "51": " * This class contains static utility methods that operate on or return objects\n",
        "52": " * of type {@link Iterator}. Except as noted, each method has a corresponding\n",
        "53": " * {@link Iterable}-based method in the {@link Iterables} class.\n",
        "55": " * <p><i>Performance notes:</i> Unless otherwise noted, all of the iterators\n",
        "56": " * produced in this class are <i>lazy</i>, which means that they only advance\n",
        "57": " * the backing iteration when absolutely necessary.\n",
        "60": " * \"https://github.com/google/guava/wiki/CollectionUtilitiesExplained#iterables\">\n",
        "61": " * {@code Iterators}</a>.\n",
        "74": "   * <p>The {@link Iterable} equivalent of this method is {@link\n",
        "75": "   * ImmutableSet#of()}.\n",
        "84": "   * <p>The {@link Iterable} equivalent of this method is {@link\n",
        "85": "   * ImmutableSet#of()}.\n",
        "117": "   * Returns the empty {@code Iterator} that throws\n",
        "118": "   * {@link IllegalStateException} instead of\n",
        "119": "   * {@link UnsupportedOperationException} on a call to\n",
        "120": "   * {@link Iterator#remove()}.\n",
        "162": "   * Returns the number of elements remaining in {@code iterator}. The iterator\n",
        "163": "   * will be left exhausted: its {@code hasNext()} method will return\n",
        "164": "   * {@code false}.\n",
        "175": "  /**\n",
        "176": "   * Returns {@code true} if {@code iterator} contains {@code element}.\n",
        "177": "   */\n",
        "196": "   * Traverses an iterator and removes every element that belongs to the\n",
        "197": "   * provided collection. The iterator will be left exhausted: its\n",
        "198": "   * {@code hasNext()} method will return {@code false}.\n",
        "218": "   * Removes every element that satisfies the provided predicate from the\n",
        "219": "   * iterator. The iterator will be left exhausted: its {@code hasNext()}\n",
        "220": "   * method will return {@code false}.\n",
        "223": "   * @param predicate a predicate that determines whether an element should\n",
        "224": "   *     be removed\n",
        "242": "   * Traverses an iterator and removes every element that does not belong to the\n",
        "243": "   * provided collection. The iterator will be left exhausted: its\n",
        "244": "   * {@code hasNext()} method will return {@code false}.\n",
        "264": "   * Determines whether two iterators contain equal elements in the same order.\n",
        "265": "   * More specifically, this method returns {@code true} if {@code iterator1}\n",
        "266": "   * and {@code iterator2} contain the same number of elements and every element\n",
        "267": "   * of {@code iterator1} is equal to the corresponding element of\n",
        "268": "   * {@code iterator2}.\n",
        "270": "   * <p>Note that this will modify the supplied iterators, since they will have\n",
        "271": "   * been advanced some number of elements forward.\n",
        "288": "   * Returns a string representation of {@code iterator}, with the format\n",
        "289": "   * {@code [e1, e2, ..., en]}. The iterator will be left exhausted: its\n",
        "290": "   * {@code hasNext()} method will return {@code false}.\n",
        "309": "   * @throws IllegalArgumentException if the iterator contains multiple\n",
        "310": "   *     elements.  The state of the iterator is unspecified.\n",
        "332": "   * Returns the single element contained in {@code iterator}, or {@code\n",
        "333": "   * defaultValue} if the iterator is empty.\n",
        "335": "   * @throws IllegalArgumentException if the iterator contains multiple\n",
        "336": "   *     elements.  The state of the iterator is unspecified.\n",
        "345": "   * Copies an iterator's elements into an array. The iterator will be left\n",
        "346": "   * exhausted: its {@code hasNext()} method will return {@code false}.\n",
        "350": "   * @return a newly-allocated array into which all the elements of the iterator\n",
        "351": "   *         have been copied\n",
        "360": "   * Adds all elements in {@code iterator} to {@code collection}. The iterator\n",
        "361": "   * will be left exhausted: its {@code hasNext()} method will return\n",
        "362": "   * {@code false}.\n",
        "364": "   * @return {@code true} if {@code collection} was modified as a result of this\n",
        "365": "   *         operation\n",
        "379": "   * Returns the number of elements in the specified iterator that equal the\n",
        "380": "   * specified object. The iterator will be left exhausted: its\n",
        "381": "   * {@code hasNext()} method will return {@code false}.\n",
        "396": "   * Returns an iterator that cycles indefinitely over the elements of {@code\n",
        "397": "   * iterable}.\n",
        "399": "   * <p>The returned iterator supports {@code remove()} if the provided iterator\n",
        "400": "   * does. After {@code remove()} is called, subsequent cycles omit the removed\n",
        "401": "   * element, which is no longer in {@code iterable}. The iterator's\n",
        "402": "   * {@code hasNext()} method returns {@code true} until {@code iterable} is\n",
        "403": "   * empty.\n",
        "405": "   * <p><b>Warning:</b> Typical uses of the resulting iterator may produce an\n",
        "406": "   * infinite loop. You should use an explicit {@code break} or be certain that\n",
        "407": "   * you will eventually remove all the elements.\n",
        "449": "   * <p>The returned iterator supports {@code remove()}. After {@code remove()}\n",
        "450": "   * is called, subsequent cycles omit the removed\n",
        "451": "   * element, but {@code elements} does not change. The iterator's\n",
        "452": "   * {@code hasNext()} method returns {@code true} until all of the original\n",
        "453": "   * elements have been removed.\n",
        "455": "   * <p><b>Warning:</b> Typical uses of the resulting iterator may produce an\n",
        "456": "   * infinite loop. You should use an explicit {@code break} or be certain that\n",
        "457": "   * you will eventually remove all the elements.\n",
        "465": "   * Returns an Iterator that walks the specified array, nulling out elements behind it.\n",
        "466": "   * This can avoid memory leaks when an element is no longer necessary.\n",
        "468": "   * This is mainly just to avoid the intermediate ArrayDeque in ConsumingQueueIterator.\n",
        "493": "   * Combines two iterators into a single iterator. The returned iterator\n",
        "494": "   * iterates across the elements in {@code a}, followed by the elements in\n",
        "495": "   * {@code b}. The source iterators are not polled until necessary.\n",
        "497": "   * <p>The returned iterator supports {@code remove()} when the corresponding\n",
        "498": "   * input iterator supports it.\n",
        "507": "   * Combines three iterators into a single iterator. The returned iterator\n",
        "508": "   * iterates across the elements in {@code a}, followed by the elements in\n",
        "509": "   * {@code b}, followed by the elements in {@code c}. The source iterators\n",
        "510": "   * are not polled until necessary.\n",
        "512": "   * <p>The returned iterator supports {@code remove()} when the corresponding\n",
        "513": "   * input iterator supports it.\n",
        "524": "   * Combines four iterators into a single iterator. The returned iterator\n",
        "525": "   * iterates across the elements in {@code a}, followed by the elements in\n",
        "526": "   * {@code b}, followed by the elements in {@code c}, followed by the elements\n",
        "527": "   * in {@code d}. The source iterators are not polled until necessary.\n",
        "529": "   * <p>The returned iterator supports {@code remove()} when the corresponding\n",
        "530": "   * input iterator supports it.\n",
        "545": "   * Combines multiple iterators into a single iterator. The returned iterator\n",
        "546": "   * iterates across the elements of each iterator in {@code inputs}. The input\n",
        "547": "   * iterators are not polled until necessary.\n",
        "549": "   * <p>The returned iterator supports {@code remove()} when the corresponding\n",
        "550": "   * input iterator supports it.\n",
        "558": "  /**\n",
        "559": "   * Concats a varargs array of iterators without making a defensive copy of the array.\n",
        "560": "   */\n",
        "569": "   * Combines multiple iterators into a single iterator. The returned iterator\n",
        "570": "   * iterates across the elements of each iterator in {@code inputs}. The input\n",
        "571": "   * iterators are not polled until necessary.\n",
        "573": "   * <p>The returned iterator supports {@code remove()} when the corresponding\n",
        "574": "   * input iterator supports it. The methods of the returned iterator may throw\n",
        "575": "   * {@code NullPointerException} if any of the input iterators is null.\n",
        "582": "   * Divides an iterator into unmodifiable sublists of the given size (the final\n",
        "583": "   * list may be smaller). For example, partitioning an iterator containing\n",
        "584": "   * {@code [a, b, c, d, e]} with a partition size of 3 yields {@code\n",
        "585": "   * [[a, b, c], [d, e]]} -- an outer iterator containing two inner lists of\n",
        "586": "   * three and two elements, all in the original order.\n",
        "592": "   * @return an iterator of immutable lists containing the elements of {@code\n",
        "593": "   *     iterator} divided into partitions\n",
        "601": "   * Divides an iterator into unmodifiable sublists of the given size, padding\n",
        "602": "   * the final iterator with null values if necessary. For example, partitioning\n",
        "603": "   * an iterator containing {@code [a, b, c, d, e]} with a partition size of 3\n",
        "604": "   * yields {@code [[a, b, c], [d, e, null]]} -- an outer iterator containing\n",
        "605": "   * two inner lists of three elements each, all in the original order.\n",
        "611": "   * @return an iterator of immutable lists containing the elements of {@code\n",
        "612": "   *     iterator} divided into partitions (the final iterable may have\n",
        "613": "   *     trailing null elements)\n",
        "652": "   * Returns a view of {@code unfiltered} containing all elements that satisfy\n",
        "653": "   * the input predicate {@code retainIfTrue}.\n",
        "674": "   * Returns a view of {@code unfiltered} containing all elements that are of\n",
        "675": "   * the type {@code desiredType}.\n",
        "684": "   * Returns {@code true} if one or more elements returned by {@code iterator}\n",
        "685": "   * satisfy the given predicate.\n",
        "692": "   * Returns {@code true} if every element returned by {@code iterator}\n",
        "693": "   * satisfies the given predicate. If {@code iterator} is empty, {@code true}\n",
        "694": "   * is returned.\n",
        "708": "   * Returns the first element in {@code iterator} that satisfies the given\n",
        "709": "   * predicate; use this method only when such an element is known to exist. If\n",
        "710": "   * no such element is found, the iterator will be left exhausted: its {@code\n",
        "711": "   * hasNext()} method will return {@code false}. If it is possible that\n",
        "712": "   * <i>no</i> element will match, use {@link #tryFind} or {@link\n",
        "713": "   * #find(Iterator, Predicate, Object)} instead.\n",
        "715": "   * @throws NoSuchElementException if no element in {@code iterator} matches\n",
        "716": "   *     the given predicate\n",
        "731": "   * Returns the first element in {@code iterator} that satisfies the given\n",
        "732": "   * predicate. If no such element is found, {@code defaultValue} will be\n",
        "733": "   * returned from this method and the iterator will be left exhausted: its\n",
        "734": "   * {@code hasNext()} method will return {@code false}. Note that this can\n",
        "735": "   * usually be handled more naturally using {@code\n",
        "736": "   * tryFind(iterator, predicate).or(defaultValue)}.\n",
        "755": "   * Returns an {@link Optional} containing the first element in {@code\n",
        "756": "   * iterator} that satisfies the given predicate, if such an element exists. If\n",
        "757": "   * no such element is found, an empty {@link Optional} will be returned from\n",
        "758": "   * this method and the iterator will be left exhausted: its {@code\n",
        "761": "   * <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code\n",
        "762": "   * null}. If {@code null} is matched in {@code iterator}, a\n",
        "763": "   * NullPointerException will be thrown.\n",
        "780": "   * Returns the index in {@code iterator} of the first element that satisfies\n",
        "781": "   * the provided {@code predicate}, or {@code -1} if the Iterator has no such\n",
        "782": "   * elements.\n",
        "784": "   * <p>More formally, returns the lowest index {@code i} such that\n",
        "785": "   * {@code predicate.apply(Iterators.get(iterator, i))} returns {@code true},\n",
        "786": "   * or {@code -1} if there is no such index.\n",
        "788": "   * <p>If -1 is returned, the iterator will be left exhausted: its\n",
        "789": "   * {@code hasNext()} method will return {@code false}.  Otherwise,\n",
        "790": "   * the iterator will be set to the element which satisfies the\n",
        "807": "   * Returns a view containing the result of applying {@code function} to each\n",
        "808": "   * element of {@code fromIterator}.\n",
        "810": "   * <p>The returned iterator supports {@code remove()} if {@code fromIterator}\n",
        "811": "   * does. After a successful {@code remove()} call, {@code fromIterator} no\n",
        "812": "   * longer contains the corresponding element.\n",
        "826": "   * Advances {@code iterator} {@code position + 1} times, returning the\n",
        "827": "   * element at the {@code position}th position.\n",
        "831": "   * @throws IndexOutOfBoundsException if {@code position} is negative or\n",
        "832": "   *     greater than or equal to the number of elements remaining in\n",
        "833": "   *     {@code iterator}\n",
        "856": "   * Advances {@code iterator} {@code position + 1} times, returning the\n",
        "857": "   * element at the {@code position}th position or {@code defaultValue}\n",
        "858": "   * otherwise.\n",
        "861": "   * @param defaultValue the default value to return if the iterator is empty\n",
        "862": "   *     or if {@code position} is greater than the number of elements\n",
        "863": "   *     remaining in {@code iterator}\n",
        "864": "   * @return the element at the specified position in {@code iterator} or\n",
        "865": "   *     {@code defaultValue} if {@code iterator} produces fewer than\n",
        "866": "   *     {@code position + 1} elements.\n",
        "878": "   * Returns the next element in {@code iterator} or {@code defaultValue} if\n",
        "879": "   * the iterator is empty.  The {@link Iterables} analog to this method is\n",
        "880": "   * {@link Iterables#getFirst}.\n",
        "907": "   * Advances {@code iterator} to the end, returning the last element or\n",
        "908": "   * {@code defaultValue} if the iterator is empty.\n",
        "920": "   * Calls {@code next()} on {@code iterator}, either {@code numberToAdvance} times\n",
        "921": "   * or until {@code hasNext()} returns {@code false}, whichever comes first.\n",
        "939": "   * Returns a view containing the first {@code limitSize} elements of {@code\n",
        "940": "   * iterator}. If {@code iterator} contains fewer than {@code limitSize}\n",
        "941": "   * elements, the returned view contains all of its elements. The returned\n",
        "942": "   * iterator supports {@code remove()} if {@code iterator} does.\n",
        "977": "   * Returns a view of the supplied {@code iterator} that removes each element\n",
        "978": "   * from the supplied {@code iterator} as it is returned.\n",
        "980": "   * <p>The provided iterator must support {@link Iterator#remove()} or\n",
        "981": "   * else the returned iterator will fail on the first call to {@code\n",
        "982": "   * next}.\n",
        "985": "   * @return an iterator that removes and returns elements from the\n",
        "986": "   *     supplied iterator\n",
        "1012": "   * Deletes and returns the next value from the iterator, or returns\n",
        "1013": "   * {@code null} if there is no such value.\n",
        "1028": "  /**\n",
        "1029": "   * Clears the iterator using its remove method.\n",
        "1030": "   */\n",
        "1040": "   * Returns an iterator containing the elements of {@code array} in order. The\n",
        "1041": "   * returned iterator is a view of the array; subsequent changes to the array\n",
        "1042": "   * will be reflected in the iterator.\n",
        "1044": "   * <p><b>Note:</b> It is often preferable to represent your data using a\n",
        "1045": "   * collection type, for example using {@link Arrays#asList(Object[])}, making\n",
        "1046": "   * this method unnecessary.\n",
        "1048": "   * <p>The {@code Iterable} equivalent of this method is either {@link\n",
        "1049": "   * Arrays#asList(Object[])}, {@link ImmutableList#copyOf(Object[])}},\n",
        "1050": "   * or {@link ImmutableList#of}.\n",
        "1076": "   * Returns a list iterator containing the elements in the specified range of\n",
        "1077": "   * {@code array} in order, starting at the specified index.\n",
        "1099": "   * <p>The {@link Iterable} equivalent of this method is {@link\n",
        "1100": "   * Collections#singleton}.\n",
        "1125": "   * <p>This method has no equivalent in {@link Iterables} because viewing an\n",
        "1126": "   * {@code Enumeration} as an {@code Iterable} is impossible. However, the\n",
        "1127": "   * contents can be <i>copied</i> into a collection using {@link\n",
        "1128": "   * Collections#list}.\n",
        "1148": "   * <p>The {@code Iterable} equivalent of this method is either {@link\n",
        "1149": "   * Collections#enumeration} (if you have a {@link Collection}), or\n",
        "1150": "   * {@code Iterators.asEnumeration(collection.iterator())}.\n",
        "1167": "  /**\n",
        "1168": "   * Implementation of PeekingIterator that avoids peeking unless necessary.\n",
        "1169": "   */\n",
        "1215": "   * <p>Calls to the {@code peek} method with no intervening calls to {@code\n",
        "1216": "   * next} do not affect the iteration, and hence return the same object each\n",
        "1217": "   * time. A subsequent call to {@code next} is guaranteed to return the same\n",
        "1218": "   * object again. For example: <pre>   {@code\n",
        "1220": "   *   PeekingIterator<String> peekingIterator =\n",
        "1221": "   *       Iterators.peekingIterator(Iterators.forArray(\"a\", \"b\"));\n",
        "1222": "   *   String a1 = peekingIterator.peek(); // returns \"a\"\n",
        "1223": "   *   String a2 = peekingIterator.peek(); // also returns \"a\"\n",
        "1224": "   *   String a3 = peekingIterator.next(); // also returns \"a\"}</pre>\n",
        "1226": "   * <p>Any structural changes to the underlying iteration (aside from those\n",
        "1227": "   * performed by the iterator's own {@link PeekingIterator#remove()} method)\n",
        "1228": "   * will leave the iterator in an undefined state.\n",
        "1230": "   * <p>The returned iterator does not support removal after peeking, as\n",
        "1231": "   * explained by {@link PeekingIterator#remove()}.\n",
        "1233": "   * <p>Note: If the given iterator is already a {@code PeekingIterator},\n",
        "1234": "   * it <i>might</i> be returned to the caller, although this is neither\n",
        "1235": "   * guaranteed to occur nor required to be consistent.  For example, this\n",
        "1236": "   * method <i>might</i> choose to pass through recognized implementations of\n",
        "1237": "   * {@code PeekingIterator} when the behavior of the implementation is\n",
        "1238": "   * known to meet the contract guaranteed by this method.\n",
        "1240": "   * <p>There is no {@link Iterable} equivalent to this method, so use this\n",
        "1241": "   * method to wrap each individual iterator as it is generated.\n",
        "1243": "   * @param iterator the backing iterator. The {@link PeekingIterator} assumes\n",
        "1244": "   *     ownership of this iterator, so users should cease making direct calls\n",
        "1245": "   *     to it after calling this method.\n",
        "1246": "   * @return a peeking iterator backed by that iterator. Apart from the\n",
        "1247": "   *     additional {@link PeekingIterator#peek()} method, this iterator behaves\n",
        "1248": "   *     exactly the same as {@code iterator}.\n",
        "1273": "   * Returns an iterator over the merged contents of all given\n",
        "1274": "   * {@code iterators}, traversing every element of the input iterators.\n",
        "1275": "   * Equivalent entries will not be de-duplicated.\n",
        "1277": "   * <p>Callers must ensure that the source {@code iterators} are in\n",
        "1278": "   * non-descending order as this method does not sort its input.\n",
        "1280": "   * <p>For any equivalent elements across all {@code iterators}, it is\n",
        "1281": "   * undefined which element is returned first.\n",
        "1295": "   * An iterator that performs a lazy N-way merge, calculating the next value\n",
        "1296": "   * each time the iterator is polled. This amortizes the sorting cost over the\n",
        "1297": "   * iteration and requires less memory than sorting all elements at once.\n",
        "1299": "   * <p>Retrieving a single element takes approximately O(log(M)) time, where M\n",
        "1300": "   * is the number of iterators. (Retrieving all elements takes approximately\n",
        "1301": "   * O(N*log(M)) time, where N is the total number of elements.)\n",
        "1361": "    @Nullable\n",
        "1362": "    private Deque<Iterator<? extends Iterator<? extends T>>> metaIterators;\n",
        "1438": "  /**\n",
        "1439": "   * Used to avoid http://bugs.sun.com/view_bug.do?bug_id=6558557\n",
        "1440": "   */\n"
    }
}