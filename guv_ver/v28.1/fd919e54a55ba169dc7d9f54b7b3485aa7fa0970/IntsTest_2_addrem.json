{
    "addition": {
        "43": "  private static final int[] ARRAY234 = {(int) 2, (int) 3, (int) 4};\n",
        "48": "  private static final int[] VALUES = {LEAST, (int) -1, (int) 0, (int) 1, GREATEST};\n",
        "81": "      assertTrue(\n",
        "82": "          value + \" not found in exception text: \" + ex.getMessage(),\n",
        "91": "        assertEquals(x + \", \" + y, Integer.valueOf(x).compareTo(y), Ints.compare(x, y));\n",
        "110": "    assertEquals(0, Ints.indexOf(new int[] {(int) -1}, (int) -1));\n",
        "114": "    assertEquals(1, Ints.indexOf(new int[] {(int) 2, (int) 3, (int) 2, (int) 3}, (int) 3));\n",
        "125": "    assertEquals(0, Ints.indexOf(ARRAY234, new int[] {(int) 2, (int) 3}));\n",
        "126": "    assertEquals(1, Ints.indexOf(ARRAY234, new int[] {(int) 3, (int) 4}));\n",
        "127": "    assertEquals(1, Ints.indexOf(ARRAY234, new int[] {(int) 3}));\n",
        "128": "    assertEquals(2, Ints.indexOf(ARRAY234, new int[] {(int) 4}));\n",
        "129": "    assertEquals(\n",
        "130": "        1,\n",
        "131": "        Ints.indexOf(new int[] {(int) 2, (int) 3, (int) 3, (int) 3, (int) 3}, new int[] {(int) 3}));\n",
        "132": "    assertEquals(\n",
        "133": "        2,\n",
        "134": "        Ints.indexOf(\n",
        "135": "            new int[] {(int) 2, (int) 3, (int) 2, (int) 3, (int) 4, (int) 2, (int) 3},\n",
        "136": "            new int[] {(int) 2, (int) 3, (int) 4}));\n",
        "137": "    assertEquals(\n",
        "138": "        1,\n",
        "139": "        Ints.indexOf(\n",
        "140": "            new int[] {(int) 2, (int) 2, (int) 3, (int) 4, (int) 2, (int) 3, (int) 4},\n",
        "141": "            new int[] {(int) 2, (int) 3, (int) 4}));\n",
        "142": "    assertEquals(\n",
        "143": "        -1,\n",
        "144": "        Ints.indexOf(new int[] {(int) 4, (int) 3, (int) 2}, new int[] {(int) 2, (int) 3, (int) 4}));\n",
        "151": "    assertEquals(0, Ints.lastIndexOf(new int[] {(int) -1}, (int) -1));\n",
        "155": "    assertEquals(3, Ints.lastIndexOf(new int[] {(int) 2, (int) 3, (int) 2, (int) 3}, (int) 3));\n",
        "169": "    assertEquals((int) 9, Ints.max((int) 8, (int) 6, (int) 7, (int) 5, (int) 3, (int) 0, (int) 9));\n",
        "183": "    assertEquals((int) 0, Ints.min((int) 8, (int) 6, (int) 7, (int) 5, (int) 3, (int) 0, (int) 9));\n",
        "206": "    assertTrue(\n",
        "207": "        Arrays.equals(new int[] {(int) 1, (int) 1, (int) 1}, Ints.concat(ARRAY1, ARRAY1, ARRAY1)));\n",
        "208": "    assertTrue(\n",
        "209": "        Arrays.equals(\n",
        "210": "            new int[] {(int) 1, (int) 2, (int) 3, (int) 4}, Ints.concat(ARRAY1, ARRAY234)));\n",
        "214": "    assertTrue(Arrays.equals(new byte[] {0x12, 0x13, 0x14, 0x15}, Ints.toByteArray(0x12131415)));\n",
        "215": "    assertTrue(\n",
        "216": "        Arrays.equals(\n",
        "217": "            new byte[] {(byte) 0xFF, (byte) 0xEE, (byte) 0xDD, (byte) 0xCC},\n",
        "218": "            Ints.toByteArray(0xFFEEDDCC)));\n",
        "222": "    assertEquals(0x12131415, Ints.fromByteArray(new byte[] {0x12, 0x13, 0x14, 0x15, 0x33}));\n",
        "223": "    assertEquals(\n",
        "224": "        0xFFEEDDCC,\n",
        "225": "        Ints.fromByteArray(new byte[] {(byte) 0xFF, (byte) 0xEE, (byte) 0xDD, (byte) 0xCC}));\n",
        "237": "    assertEquals(0x12131415, Ints.fromBytes((byte) 0x12, (byte) 0x13, (byte) 0x14, (byte) 0x15));\n",
        "238": "    assertEquals(0xFFEEDDCC, Ints.fromBytes((byte) 0xFF, (byte) 0xEE, (byte) 0xDD, (byte) 0xCC));\n",
        "259": "    assertTrue(\n",
        "260": "        Arrays.equals(new int[] {(int) 1, (int) 0, (int) 0}, Ints.ensureCapacity(ARRAY1, 2, 1)));\n",
        "281": "    assertEquals(\"123\", Ints.join(\"\", (int) 1, (int) 2, (int) 3));\n",
        "285": "    List<int[]> ordered =\n",
        "286": "        Arrays.asList(\n",
        "287": "            new int[] {},\n",
        "288": "            new int[] {LEAST},\n",
        "289": "            new int[] {LEAST, LEAST},\n",
        "290": "            new int[] {LEAST, (int) 1},\n",
        "291": "            new int[] {(int) 1},\n",
        "292": "            new int[] {(int) 1, LEAST},\n",
        "293": "            new int[] {GREATEST, GREATEST - (int) 1},\n",
        "294": "            new int[] {GREATEST, GREATEST},\n",
        "295": "            new int[] {GREATEST, GREATEST, GREATEST});\n",
        "388": "    for (int delta : new int[] {+1, 0, -1}) {\n",
        "391": "        Collection<Integer> misleadingSize = Helpers.misleadingSizeCollection(delta);\n",
        "439": "    int[] array = {(int) 0, (int) 1, (int) 2};\n",
        "445": "    assertTrue(Arrays.equals(new int[] {(int) 0, (int) 1, (int) 2}, newArray));\n",
        "452": "    int[] array = {(int) 0, (int) 1, (int) 2, (int) 3};\n",
        "454": "    assertTrue(Arrays.equals(new int[] {(int) 1, (int) 2}, Ints.toArray(list.subList(1, 3))));\n",
        "455": "    assertTrue(Arrays.equals(new int[] {}, Ints.toArray(list.subList(2, 2))));\n",
        "522": "    assertNull(\"Max integer + 1\", Ints.tryParse(Long.toString(((long) GREATEST) + 1)));\n",
        "523": "    assertNull(\"Max integer * 10\", Ints.tryParse(Long.toString(((long) GREATEST) * 10)));\n",
        "524": "    assertNull(\"Min integer - 1\", Ints.tryParse(Long.toString(((long) LEAST) - 1)));\n",
        "525": "    assertNull(\"Min integer * 10\", Ints.tryParse(Long.toString(((long) LEAST) * 10)));\n",
        "532": "   * Applies {@link Ints#tryParse(String)} to the given string and asserts that the result is as\n",
        "533": "   * expected.\n",
        "540": "    for (int radix = Character.MIN_RADIX; radix <= Character.MAX_RADIX; radix++) {\n",
        "547": "      assertNull(\n",
        "548": "          \"Radix: \" + radix, Ints.tryParse(Long.toString((long) GREATEST + 1, radix), radix));\n",
        "549": "      assertNull(\"Radix: \" + radix, Ints.tryParse(Long.toString((long) LEAST - 1, radix), radix));\n",
        "556": "   * Encodes the an integer as a string with given radix, then uses {@link Ints#tryParse(String,\n",
        "557": "   * int)} to parse the result. Asserts the result is the same as what we started with.\n",
        "559": "  private static void radixEncodeParseAndAssertEquals(Integer value, int radix) {\n",
        "560": "    assertEquals(\"Radix: \" + radix, value, Ints.tryParse(Integer.toString(value, radix), radix));\n"
    },
    "removed": {
        "43": "  private static final int[] ARRAY234\n",
        "44": "      = {(int) 2, (int) 3, (int) 4};\n",
        "49": "  private static final int[] VALUES =\n",
        "50": "      { LEAST, (int) -1, (int) 0, (int) 1, GREATEST };\n",
        "83": "      assertTrue(value + \" not found in exception text: \" + ex.getMessage(),\n",
        "92": "        assertEquals(x + \", \" + y,\n",
        "93": "                     Integer.valueOf(x).compareTo(y),\n",
        "94": "                     Ints.compare(x, y));\n",
        "113": "    assertEquals(0, Ints.indexOf(\n",
        "114": "        new int[] {(int) -1}, (int) -1));\n",
        "118": "    assertEquals(1, Ints.indexOf(\n",
        "119": "        new int[] { (int) 2, (int) 3, (int) 2, (int) 3 },\n",
        "120": "        (int) 3));\n",
        "131": "    assertEquals(0, Ints.indexOf(\n",
        "132": "        ARRAY234, new int[] { (int) 2, (int) 3 }));\n",
        "133": "    assertEquals(1, Ints.indexOf(\n",
        "134": "        ARRAY234, new int[] { (int) 3, (int) 4 }));\n",
        "135": "    assertEquals(1, Ints.indexOf(ARRAY234, new int[] { (int) 3 }));\n",
        "136": "    assertEquals(2, Ints.indexOf(ARRAY234, new int[] { (int) 4 }));\n",
        "137": "    assertEquals(1, Ints.indexOf(new int[] { (int) 2, (int) 3,\n",
        "138": "        (int) 3, (int) 3, (int) 3 },\n",
        "139": "        new int[] { (int) 3 }\n",
        "140": "    ));\n",
        "141": "    assertEquals(2, Ints.indexOf(\n",
        "142": "        new int[] { (int) 2, (int) 3, (int) 2,\n",
        "143": "            (int) 3, (int) 4, (int) 2, (int) 3},\n",
        "144": "        new int[] { (int) 2, (int) 3, (int) 4}\n",
        "145": "    ));\n",
        "146": "    assertEquals(1, Ints.indexOf(\n",
        "147": "        new int[] { (int) 2, (int) 2, (int) 3,\n",
        "148": "            (int) 4, (int) 2, (int) 3, (int) 4},\n",
        "149": "        new int[] { (int) 2, (int) 3, (int) 4}\n",
        "150": "    ));\n",
        "151": "    assertEquals(-1, Ints.indexOf(\n",
        "152": "        new int[] { (int) 4, (int) 3, (int) 2},\n",
        "153": "        new int[] { (int) 2, (int) 3, (int) 4}\n",
        "154": "    ));\n",
        "161": "    assertEquals(0, Ints.lastIndexOf(\n",
        "162": "        new int[] {(int) -1}, (int) -1));\n",
        "166": "    assertEquals(3, Ints.lastIndexOf(\n",
        "167": "        new int[] { (int) 2, (int) 3, (int) 2, (int) 3 },\n",
        "168": "        (int) 3));\n",
        "182": "    assertEquals((int) 9, Ints.max(\n",
        "183": "        (int) 8, (int) 6, (int) 7,\n",
        "184": "        (int) 5, (int) 3, (int) 0, (int) 9));\n",
        "198": "    assertEquals((int) 0, Ints.min(\n",
        "199": "        (int) 8, (int) 6, (int) 7,\n",
        "200": "        (int) 5, (int) 3, (int) 0, (int) 9));\n",
        "223": "    assertTrue(Arrays.equals(\n",
        "224": "        new int[] {(int) 1, (int) 1, (int) 1},\n",
        "225": "        Ints.concat(ARRAY1, ARRAY1, ARRAY1)));\n",
        "226": "    assertTrue(Arrays.equals(\n",
        "227": "        new int[] {(int) 1, (int) 2, (int) 3, (int) 4},\n",
        "228": "        Ints.concat(ARRAY1, ARRAY234)));\n",
        "232": "    assertTrue(Arrays.equals(\n",
        "233": "        new byte[] {0x12, 0x13, 0x14, 0x15}, Ints.toByteArray(0x12131415)));\n",
        "234": "    assertTrue(Arrays.equals(\n",
        "235": "        new byte[] {(byte) 0xFF, (byte) 0xEE, (byte) 0xDD, (byte) 0xCC},\n",
        "236": "        Ints.toByteArray(0xFFEEDDCC)));\n",
        "240": "    assertEquals(0x12131415,\n",
        "241": "        Ints.fromByteArray(new byte[] {0x12, 0x13, 0x14, 0x15, 0x33}));\n",
        "242": "    assertEquals(0xFFEEDDCC, Ints.fromByteArray(\n",
        "243": "        new byte[] {(byte) 0xFF, (byte) 0xEE, (byte) 0xDD, (byte) 0xCC}));\n",
        "255": "    assertEquals(0x12131415, Ints.fromBytes(\n",
        "256": "        (byte) 0x12, (byte) 0x13, (byte) 0x14, (byte) 0x15));\n",
        "257": "    assertEquals(0xFFEEDDCC, Ints.fromBytes(\n",
        "258": "        (byte) 0xFF, (byte) 0xEE, (byte) 0xDD, (byte) 0xCC));\n",
        "279": "    assertTrue(Arrays.equals(\n",
        "280": "        new int[] {(int) 1, (int) 0, (int) 0},\n",
        "281": "        Ints.ensureCapacity(ARRAY1, 2, 1)));\n",
        "302": "    assertEquals(\"123\",\n",
        "303": "        Ints.join(\"\", (int) 1, (int) 2, (int) 3));\n",
        "307": "    List<int[]> ordered = Arrays.asList(\n",
        "308": "        new int[] {},\n",
        "309": "        new int[] {LEAST},\n",
        "310": "        new int[] {LEAST, LEAST},\n",
        "311": "        new int[] {LEAST, (int) 1},\n",
        "312": "        new int[] {(int) 1},\n",
        "313": "        new int[] {(int) 1, LEAST},\n",
        "314": "        new int[] {GREATEST, GREATEST - (int) 1},\n",
        "315": "        new int[] {GREATEST, GREATEST},\n",
        "316": "        new int[] {GREATEST, GREATEST, GREATEST});\n",
        "409": "    for (int delta : new int[] { +1, 0, -1 }) {\n",
        "412": "        Collection<Integer> misleadingSize =\n",
        "413": "            Helpers.misleadingSizeCollection(delta);\n",
        "461": "    int[] array = { (int) 0, (int) 1, (int) 2 };\n",
        "467": "    assertTrue(Arrays.equals(\n",
        "468": "        new int[] { (int) 0, (int) 1, (int) 2 }, newArray));\n",
        "475": "    int[] array = { (int) 0, (int) 1, (int) 2, (int) 3 };\n",
        "477": "    assertTrue(Arrays.equals(new int[] { (int) 1, (int) 2 },\n",
        "478": "        Ints.toArray(list.subList(1, 3))));\n",
        "479": "    assertTrue(Arrays.equals(new int[] {},\n",
        "480": "        Ints.toArray(list.subList(2, 2))));\n",
        "547": "    assertNull(\"Max integer + 1\",\n",
        "548": "        Ints.tryParse(Long.toString(((long) GREATEST) + 1)));\n",
        "549": "    assertNull(\"Max integer * 10\",\n",
        "550": "        Ints.tryParse(Long.toString(((long) GREATEST) * 10)));\n",
        "551": "    assertNull(\"Min integer - 1\",\n",
        "552": "        Ints.tryParse(Long.toString(((long) LEAST) - 1)));\n",
        "553": "    assertNull(\"Min integer * 10\",\n",
        "554": "        Ints.tryParse(Long.toString(((long) LEAST) * 10)));\n",
        "561": "   * Applies {@link Ints#tryParse(String)} to the given string and asserts that\n",
        "562": "   * the result is as expected.\n",
        "569": "    for (int radix = Character.MIN_RADIX;\n",
        "570": "        radix <= Character.MAX_RADIX; radix++) {\n",
        "577": "      assertNull(\"Radix: \" + radix,\n",
        "578": "          Ints.tryParse(Long.toString((long) GREATEST + 1, radix), radix));\n",
        "579": "      assertNull(\"Radix: \" + radix,\n",
        "580": "          Ints.tryParse(Long.toString((long) LEAST - 1, radix), radix));\n",
        "587": "   * Encodes the an integer as a string with given radix, then uses\n",
        "588": "   * {@link Ints#tryParse(String, int)} to parse the result. Asserts the result\n",
        "589": "   * is the same as what we started with.\n",
        "591": "  private static void radixEncodeParseAndAssertEquals(Integer value,\n",
        "592": "      int radix) {\n",
        "593": "    assertEquals(\"Radix: \" + radix, value,\n",
        "594": "        Ints.tryParse(Integer.toString(value, radix), radix));\n"
    }
}