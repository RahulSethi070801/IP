{
    "addition": {
        "73": "    suite.addTest(\n",
        "74": "        NavigableMapTestSuiteBuilder.using(new ImmutableSortedMapGenerator())\n",
        "75": "            .withFeatures(\n",
        "76": "                CollectionSize.ANY,\n",
        "77": "                CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "78": "                CollectionFeature.KNOWN_ORDER,\n",
        "79": "                MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "80": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "81": "            .named(\"ImmutableSortedMap\")\n",
        "82": "            .createTestSuite());\n",
        "83": "    suite.addTest(\n",
        "84": "        MapTestSuiteBuilder.using(new ImmutableSortedMapCopyOfEntriesGenerator())\n",
        "85": "            .withFeatures(\n",
        "86": "                CollectionSize.ANY,\n",
        "87": "                CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "88": "                CollectionFeature.KNOWN_ORDER,\n",
        "89": "                MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "90": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "91": "            .named(\"ImmutableSortedMap.copyOf[Iterable<Entry>]\")\n",
        "92": "            .createTestSuite());\n",
        "93": "\n",
        "94": "    suite.addTest(\n",
        "95": "        ListTestSuiteBuilder.using(new ImmutableSortedMapEntryListGenerator())\n",
        "96": "            .named(\"ImmutableSortedMap.entrySet.asList\")\n",
        "97": "            .withFeatures(\n",
        "98": "                CollectionSize.ANY,\n",
        "99": "                CollectionFeature.SERIALIZABLE,\n",
        "100": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "101": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "102": "            .createTestSuite());\n",
        "103": "\n",
        "104": "    suite.addTest(\n",
        "105": "        ListTestSuiteBuilder.using(new ImmutableSortedMapKeyListGenerator())\n",
        "106": "            .named(\"ImmutableSortedMap.keySet.asList\")\n",
        "107": "            .withFeatures(\n",
        "108": "                CollectionSize.ANY,\n",
        "109": "                CollectionFeature.SERIALIZABLE,\n",
        "110": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "111": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "112": "            .createTestSuite());\n",
        "113": "\n",
        "114": "    suite.addTest(\n",
        "115": "        ListTestSuiteBuilder.using(new ImmutableSortedMapValueListGenerator())\n",
        "116": "            .named(\"ImmutableSortedMap.values.asList\")\n",
        "117": "            .withFeatures(\n",
        "118": "                CollectionSize.ANY,\n",
        "119": "                CollectionFeature.SERIALIZABLE,\n",
        "120": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "121": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "122": "            .createTestSuite());\n",
        "127": "  public abstract static class AbstractMapTests<K, V> extends SortedMapInterfaceTest<K, V> {\n",
        "132": "    @Override\n",
        "133": "    protected SortedMap<K, V> makeEmptyMap() {\n",
        "139": "    @Override\n",
        "140": "    protected void assertMoreInvariants(Map<K, V> map) {\n",
        "143": "        assertEquals(entry.getKey() + \"=\" + entry.getValue(), entry.toString());\n",
        "146": "      assertEquals(\"{\" + joiner.join(map.entrySet()) + \"}\", map.toString());\n",
        "147": "      assertEquals(\"[\" + joiner.join(map.entrySet()) + \"]\", map.entrySet().toString());\n",
        "148": "      assertEquals(\"[\" + joiner.join(map.keySet()) + \"]\", map.keySet().toString());\n",
        "149": "      assertEquals(\"[\" + joiner.join(map.values()) + \"]\", map.values().toString());\n",
        "157": "    @Override\n",
        "158": "    protected SortedMap<String, Integer> makeEmptyMap() {\n",
        "162": "    @Override\n",
        "163": "    protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "167": "    @Override\n",
        "168": "    protected String getKeyNotInPopulatedMap() {\n",
        "172": "    @Override\n",
        "173": "    protected Integer getValueNotInPopulatedMap() {\n",
        "178": "  public static class SingletonMapTests extends AbstractMapTests<String, Integer> {\n",
        "179": "    @Override\n",
        "180": "    protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "184": "    @Override\n",
        "185": "    protected String getKeyNotInPopulatedMap() {\n",
        "189": "    @Override\n",
        "190": "    protected Integer getValueNotInPopulatedMap() {\n",
        "197": "    @Override\n",
        "198": "    protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "199": "      return SerializableTester.reserialize(ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3));\n",
        "202": "    @Override\n",
        "203": "    protected String getKeyNotInPopulatedMap() {\n",
        "207": "    @Override\n",
        "208": "    protected Integer getValueNotInPopulatedMap() {\n",
        "214": "    @Override\n",
        "215": "    protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "216": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5).headMap(\"d\");\n",
        "219": "    @Override\n",
        "220": "    protected String getKeyNotInPopulatedMap() {\n",
        "224": "    @Override\n",
        "225": "    protected Integer getValueNotInPopulatedMap() {\n",
        "231": "    @Override\n",
        "232": "    protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "233": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5).headMap(\"c\", true);\n",
        "236": "    @Override\n",
        "237": "    protected String getKeyNotInPopulatedMap() {\n",
        "241": "    @Override\n",
        "242": "    protected Integer getValueNotInPopulatedMap() {\n",
        "248": "    @Override\n",
        "249": "    protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "250": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5).tailMap(\"b\");\n",
        "253": "    @Override\n",
        "254": "    protected String getKeyNotInPopulatedMap() {\n",
        "258": "    @Override\n",
        "259": "    protected Integer getValueNotInPopulatedMap() {\n",
        "265": "    @Override\n",
        "266": "    protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "267": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5).tailMap(\"a\", false);\n",
        "270": "    @Override\n",
        "271": "    protected String getKeyNotInPopulatedMap() {\n",
        "275": "    @Override\n",
        "276": "    protected Integer getValueNotInPopulatedMap() {\n",
        "282": "    @Override\n",
        "283": "    protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "284": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5).subMap(\"b\", \"d\");\n",
        "287": "    @Override\n",
        "288": "    protected String getKeyNotInPopulatedMap() {\n",
        "292": "    @Override\n",
        "293": "    protected Integer getValueNotInPopulatedMap() {\n",
        "300": "      ImmutableSortedMap<String, Integer> map =\n",
        "301": "          ImmutableSortedMap.<String, Integer>naturalOrder().build();\n",
        "306": "      ImmutableSortedMap<String, Integer> map =\n",
        "307": "          ImmutableSortedMap.<String, Integer>naturalOrder().put(\"one\", 1).build();\n",
        "312": "      ImmutableSortedMap<String, Integer> map =\n",
        "313": "          ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "320": "      assertMapEquals(map, \"five\", 5, \"four\", 4, \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "328": "      } catch (UnsupportedOperationException expected) {\n",
        "329": "      }\n",
        "341": "      Builder<String, Integer> builder = ImmutableSortedMap.naturalOrder();\n",
        "359": "      ImmutableSortedMap.Builder<String, Integer> builder = ImmutableSortedMap.naturalOrder();\n",
        "362": "      Entry<String, Integer> entry =\n",
        "363": "          new AbstractMapEntry<String, Integer>() {\n",
        "364": "            @Override\n",
        "365": "            public String getKey() {\n",
        "366": "              return holder.string;\n",
        "367": "            }\n",
        "368": "\n",
        "369": "            @Override\n",
        "370": "            public Integer getValue() {\n",
        "371": "              return 1;\n",
        "372": "            }\n",
        "373": "          };\n",
        "381": "      ImmutableSortedMap<String, Integer> map =\n",
        "382": "          ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "397": "      ImmutableSortedMap<String, Integer> map =\n",
        "398": "          ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "402": "      assertMapEquals(map, \"five\", 5, \"four\", 4, \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "407": "      ImmutableSortedMap<String, Integer> mapOne = builder.put(\"one\", 1).put(\"two\", 2).build();\n",
        "408": "      ImmutableSortedMap<String, Integer> mapTwo = builder.put(\"three\", 3).put(\"four\", 4).build();\n",
        "451": "      Builder<String, Integer> builder =\n",
        "452": "          ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "464": "      assertMapEquals(ImmutableSortedMap.of(\"one\", 1), \"one\", 1);\n",
        "465": "      assertMapEquals(ImmutableSortedMap.of(\"one\", 1, \"two\", 2), \"one\", 1, \"two\", 2);\n",
        "467": "          ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3), \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "470": "          \"four\",\n",
        "471": "          4,\n",
        "472": "          \"one\",\n",
        "473": "          1,\n",
        "474": "          \"three\",\n",
        "475": "          3,\n",
        "476": "          \"two\",\n",
        "477": "          2);\n",
        "479": "          ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5),\n",
        "480": "          \"five\",\n",
        "481": "          5,\n",
        "482": "          \"four\",\n",
        "483": "          4,\n",
        "484": "          \"one\",\n",
        "485": "          1,\n",
        "486": "          \"three\",\n",
        "487": "          3,\n",
        "488": "          \"two\",\n",
        "489": "          2);\n",
        "530": "      ImmutableSortedMap<String, Integer> copy =\n",
        "531": "          ImmutableSortedMap.copyOf(Collections.<String, Integer>emptyMap());\n",
        "538": "      ImmutableSortedMap<String, Integer> copy =\n",
        "539": "          ImmutableSortedMap.copyOf(Collections.singletonMap(\"one\", 1));\n",
        "551": "      ImmutableSortedMap<String, Integer> copy = ImmutableSortedMap.copyOf(original);\n",
        "564": "      ImmutableSortedMap<String, Integer> copy = ImmutableSortedMap.copyOf(original, comparator);\n",
        "572": "      Map<String, Integer> original = ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3);\n",
        "573": "      ImmutableSortedMap<String, Integer> copy = ImmutableSortedMap.copyOf(original, comparator);\n",
        "585": "      ImmutableSortedMap<String, Integer> copy = ImmutableSortedMap.copyOfSorted(original);\n",
        "598": "      ImmutableSortedMap<String, Integer> copy = ImmutableSortedMap.copyOfSorted(original);\n",
        "616": "      @Override\n",
        "617": "      public String toString() {\n",
        "623": "      Map<IntegerDiv10, String> original =\n",
        "624": "          ImmutableMap.of(\n",
        "625": "              new IntegerDiv10(3), \"three\",\n",
        "626": "              new IntegerDiv10(20), \"twenty\",\n",
        "627": "              new IntegerDiv10(11), \"eleven\",\n",
        "628": "              new IntegerDiv10(35), \"thirty five\",\n",
        "629": "              new IntegerDiv10(12), \"twelve\");\n",
        "643": "      Map<IntegerDiv10, String> original =\n",
        "644": "          ImmutableSortedMap.of(three, \"three\", eleven, \"eleven\", twenty, \"twenty\");\n",
        "651": "      ImmutableSortedMap<String, Integer> map =\n",
        "652": "          ImmutableSortedMap.<String, Integer>reverseOrder()\n",
        "659": "      assertMapEquals(map, \"two\", 2, \"three\", 3, \"one\", 1, \"four\", 4, \"five\", 5);\n",
        "665": "      ImmutableSortedMap<String, Integer> map =\n",
        "666": "          new ImmutableSortedMap.Builder<String, Integer>(comparator)\n",
        "673": "      assertMapEquals(map, \"two\", 2, \"three\", 3, \"one\", 1, \"four\", 4, \"five\", 5);\n",
        "683": "              Equivalence.equals()\n",
        "684": "                  .onResultOf(ImmutableSortedMap<String, Integer>::comparator)\n",
        "735": "    tester.testAllPublicInstanceMethods(ImmutableSortedMap.<String, Integer>naturalOrder());\n",
        "738": "    tester.testAllPublicInstanceMethods(ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3));\n",
        "775": "  private static <K, V> void assertMapEquals(Map<K, V> map, Object... alternatingKeysAndValues) {\n",
        "791": "    @Override\n",
        "792": "    public boolean equals(Object o) {\n",
        "796": "    @Override\n",
        "797": "    public int hashCode() {\n",
        "807": "    Map<String, IntHolder> map = ImmutableSortedMap.of(\"a\", holderA, \"b\", holderB);\n",
        "810": "    Map<String, Integer> intMap = ImmutableSortedMap.of(\"a\", 3, \"b\", 2);\n",
        "817": "    Map<String, Integer> map = ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3);\n",
        "820": "    assertEquals(\n",
        "821": "        Lists.newArrayList(map.values()),\n",
        "829": "    assertThat(map.entrySet())\n",
        "830": "        .containsExactly(Maps.immutableEntry(\"one\", 1), Maps.immutableEntry(\"three\", 3))\n",
        "831": "        .inOrder();\n",
        "845": "    assertThat(map.entrySet())\n",
        "846": "        .containsExactly(Maps.immutableEntry(\"three\", 3), Maps.immutableEntry(\"two\", 2))\n",
        "847": "        .inOrder();\n",
        "868": "    assertThat(map.entrySet())\n",
        "869": "        .containsExactly(Maps.immutableEntry(\"one\", 1), Maps.immutableEntry(\"three\", 3))\n",
        "870": "        .inOrder();\n",
        "877": "    assertThat(map.entrySet())\n",
        "878": "        .containsExactly(Maps.immutableEntry(\"three\", 3), Maps.immutableEntry(\"two\", 2))\n",
        "879": "        .inOrder();\n",
        "886": "    assertThat(map.entrySet())\n",
        "887": "        .containsExactly(\n",
        "888": "            Maps.immutableEntry(\"one\", 1),\n",
        "889": "            Maps.immutableEntry(\"three\", 3),\n",
        "890": "            Maps.immutableEntry(\"two\", 2))\n",
        "891": "        .inOrder();\n"
    },
    "removed": {
        "73": "    suite.addTest(NavigableMapTestSuiteBuilder.using(\n",
        "74": "        new ImmutableSortedMapGenerator())\n",
        "75": "        .withFeatures(\n",
        "76": "            CollectionSize.ANY,\n",
        "77": "            CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "78": "            CollectionFeature.KNOWN_ORDER,\n",
        "79": "            MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "80": "            MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "81": "        .named(\"ImmutableSortedMap\")\n",
        "82": "        .createTestSuite());\n",
        "83": "    suite.addTest(MapTestSuiteBuilder.using(\n",
        "84": "        new ImmutableSortedMapCopyOfEntriesGenerator())\n",
        "85": "        .withFeatures(\n",
        "86": "            CollectionSize.ANY,\n",
        "87": "            CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "88": "            CollectionFeature.KNOWN_ORDER,\n",
        "89": "            MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "90": "            MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "91": "        .named(\"ImmutableSortedMap.copyOf[Iterable<Entry>]\")\n",
        "92": "        .createTestSuite());\n",
        "93": "\n",
        "94": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "95": "        new ImmutableSortedMapEntryListGenerator())\n",
        "96": "        .named(\"ImmutableSortedMap.entrySet.asList\")\n",
        "97": "        .withFeatures(CollectionSize.ANY,\n",
        "98": "            CollectionFeature.SERIALIZABLE,\n",
        "99": "            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "100": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "101": "        .createTestSuite());\n",
        "102": "\n",
        "103": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "104": "        new ImmutableSortedMapKeyListGenerator())\n",
        "105": "        .named(\"ImmutableSortedMap.keySet.asList\")\n",
        "106": "        .withFeatures(CollectionSize.ANY,\n",
        "107": "            CollectionFeature.SERIALIZABLE,\n",
        "108": "            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "109": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "110": "        .createTestSuite());\n",
        "111": "\n",
        "112": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "113": "        new ImmutableSortedMapValueListGenerator())\n",
        "114": "        .named(\"ImmutableSortedMap.values.asList\")\n",
        "115": "        .withFeatures(CollectionSize.ANY,\n",
        "116": "            CollectionFeature.SERIALIZABLE,\n",
        "117": "            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "118": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "119": "        .createTestSuite());\n",
        "124": "  public abstract static class AbstractMapTests<K, V>\n",
        "125": "      extends SortedMapInterfaceTest<K, V> {\n",
        "130": "    @Override protected SortedMap<K, V> makeEmptyMap() {\n",
        "136": "    @Override protected void assertMoreInvariants(Map<K, V> map) {\n",
        "139": "        assertEquals(entry.getKey() + \"=\" + entry.getValue(),\n",
        "140": "            entry.toString());\n",
        "143": "      assertEquals(\"{\" + joiner.join(map.entrySet()) + \"}\",\n",
        "144": "          map.toString());\n",
        "145": "      assertEquals(\"[\" + joiner.join(map.entrySet()) + \"]\",\n",
        "146": "          map.entrySet().toString());\n",
        "147": "      assertEquals(\"[\" + joiner.join(map.keySet()) + \"]\",\n",
        "148": "          map.keySet().toString());\n",
        "149": "      assertEquals(\"[\" + joiner.join(map.values()) + \"]\",\n",
        "150": "          map.values().toString());\n",
        "158": "    @Override protected SortedMap<String, Integer> makeEmptyMap() {\n",
        "162": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "166": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "170": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "175": "  public static class SingletonMapTests\n",
        "176": "      extends AbstractMapTests<String, Integer> {\n",
        "177": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "181": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "185": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "192": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "193": "      return SerializableTester.reserialize(\n",
        "194": "          ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3));\n",
        "197": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "201": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "207": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "208": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5)\n",
        "209": "          .headMap(\"d\");\n",
        "212": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "216": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "222": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "223": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5)\n",
        "224": "          .headMap(\"c\", true);\n",
        "227": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "231": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "237": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "238": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5)\n",
        "239": "          .tailMap(\"b\");\n",
        "242": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "246": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "252": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "253": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5)\n",
        "254": "          .tailMap(\"a\", false);\n",
        "257": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "261": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "267": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "268": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5)\n",
        "269": "          .subMap(\"b\", \"d\");\n",
        "272": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "276": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "283": "      ImmutableSortedMap<String, Integer> map\n",
        "284": "          = ImmutableSortedMap.<String, Integer>naturalOrder().build();\n",
        "289": "      ImmutableSortedMap<String, Integer> map\n",
        "290": "          = ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "291": "              .put(\"one\", 1)\n",
        "292": "              .build();\n",
        "297": "      ImmutableSortedMap<String, Integer> map\n",
        "298": "          = ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "305": "      assertMapEquals(map,\n",
        "306": "          \"five\", 5, \"four\", 4, \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "314": "      } catch (UnsupportedOperationException expected) {}\n",
        "326": "      Builder<String, Integer> builder =\n",
        "327": "          ImmutableSortedMap.naturalOrder();\n",
        "345": "      ImmutableSortedMap.Builder<String, Integer> builder =\n",
        "346": "          ImmutableSortedMap.naturalOrder();\n",
        "349": "      Entry<String, Integer> entry = new AbstractMapEntry<String, Integer>() {\n",
        "350": "        @Override public String getKey() {\n",
        "351": "          return holder.string;\n",
        "352": "        }\n",
        "353": "        @Override public Integer getValue() {\n",
        "354": "          return 1;\n",
        "355": "        }\n",
        "356": "      };\n",
        "364": "      ImmutableSortedMap<String, Integer> map\n",
        "365": "          = ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "380": "      ImmutableSortedMap<String, Integer> map\n",
        "381": "          = ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "385": "      assertMapEquals(map,\n",
        "386": "          \"five\", 5, \"four\", 4, \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "391": "      ImmutableSortedMap<String, Integer> mapOne = builder\n",
        "392": "          .put(\"one\", 1)\n",
        "393": "          .put(\"two\", 2)\n",
        "394": "          .build();\n",
        "395": "      ImmutableSortedMap<String, Integer> mapTwo = builder\n",
        "396": "          .put(\"three\", 3)\n",
        "397": "          .put(\"four\", 4)\n",
        "398": "          .build();\n",
        "441": "      Builder<String, Integer> builder\n",
        "442": "          = ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "455": "          ImmutableSortedMap.of(\"one\", 1),\n",
        "456": "          \"one\", 1);\n",
        "457": "      assertMapEquals(\n",
        "458": "          ImmutableSortedMap.of(\"one\", 1, \"two\", 2),\n",
        "459": "          \"one\", 1, \"two\", 2);\n",
        "460": "      assertMapEquals(\n",
        "461": "          ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3),\n",
        "462": "          \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "465": "          \"four\", 4, \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "467": "          ImmutableSortedMap.of(\n",
        "468": "              \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5),\n",
        "469": "          \"five\", 5, \"four\", 4, \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "510": "      ImmutableSortedMap<String, Integer> copy\n",
        "511": "          = ImmutableSortedMap.copyOf(Collections.<String, Integer>emptyMap());\n",
        "518": "      ImmutableSortedMap<String, Integer> copy\n",
        "519": "          = ImmutableSortedMap.copyOf(Collections.singletonMap(\"one\", 1));\n",
        "531": "      ImmutableSortedMap<String, Integer> copy\n",
        "532": "          = ImmutableSortedMap.copyOf(original);\n",
        "545": "      ImmutableSortedMap<String, Integer> copy\n",
        "546": "          = ImmutableSortedMap.copyOf(original, comparator);\n",
        "554": "      Map<String, Integer> original\n",
        "555": "          = ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3);\n",
        "556": "      ImmutableSortedMap<String, Integer> copy\n",
        "557": "          = ImmutableSortedMap.copyOf(original, comparator);\n",
        "569": "      ImmutableSortedMap<String, Integer> copy\n",
        "570": "          = ImmutableSortedMap.copyOfSorted(original);\n",
        "583": "      ImmutableSortedMap<String, Integer> copy\n",
        "584": "          = ImmutableSortedMap.copyOfSorted(original);\n",
        "602": "      @Override public String toString() {\n",
        "608": "      Map<IntegerDiv10, String> original = ImmutableMap.of(\n",
        "609": "          new IntegerDiv10(3), \"three\",\n",
        "610": "          new IntegerDiv10(20), \"twenty\",\n",
        "611": "          new IntegerDiv10(11), \"eleven\",\n",
        "612": "          new IntegerDiv10(35), \"thirty five\",\n",
        "613": "          new IntegerDiv10(12), \"twelve\"\n",
        "614": "      );\n",
        "628": "      Map<IntegerDiv10, String> original = ImmutableSortedMap.of(\n",
        "629": "          three, \"three\", eleven, \"eleven\", twenty, \"twenty\");\n",
        "636": "      ImmutableSortedMap<String, Integer> map\n",
        "637": "          = ImmutableSortedMap.<String, Integer>reverseOrder()\n",
        "644": "      assertMapEquals(map,\n",
        "645": "          \"two\", 2, \"three\", 3, \"one\", 1, \"four\", 4, \"five\", 5);\n",
        "651": "      ImmutableSortedMap<String, Integer> map\n",
        "652": "          = new ImmutableSortedMap.Builder<String, Integer>(comparator)\n",
        "659": "      assertMapEquals(map,\n",
        "660": "          \"two\", 2, \"three\", 3, \"one\", 1, \"four\", 4, \"five\", 5);\n",
        "670": "              Equivalence.equals().onResultOf(ImmutableSortedMap<String, Integer>::comparator)\n",
        "721": "    tester.testAllPublicInstanceMethods(\n",
        "722": "        ImmutableSortedMap.<String, Integer>naturalOrder());\n",
        "725": "    tester.testAllPublicInstanceMethods(\n",
        "726": "        ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3));\n",
        "763": "  private static <K, V> void assertMapEquals(Map<K, V> map,\n",
        "764": "      Object... alternatingKeysAndValues) {\n",
        "780": "    @Override public boolean equals(Object o) {\n",
        "784": "    @Override public int hashCode() {\n",
        "794": "    Map<String, IntHolder> map\n",
        "795": "        = ImmutableSortedMap.of(\"a\", holderA, \"b\", holderB);\n",
        "798": "    Map<String, Integer> intMap\n",
        "799": "        = ImmutableSortedMap.of(\"a\", 3, \"b\", 2);\n",
        "806": "    Map<String, Integer> map\n",
        "807": "        = ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3);\n",
        "810": "    assertEquals(Lists.newArrayList(map.values()),\n",
        "818": "    assertThat(map.entrySet()).containsExactly(\n",
        "819": "        Maps.immutableEntry(\"one\", 1),\n",
        "820": "        Maps.immutableEntry(\"three\", 3)).inOrder();\n",
        "834": "    assertThat(map.entrySet()).containsExactly(Maps.immutableEntry(\"three\", 3),\n",
        "835": "        Maps.immutableEntry(\"two\", 2)).inOrder();\n",
        "856": "    assertThat(map.entrySet()).containsExactly(Maps.immutableEntry(\"one\", 1),\n",
        "857": "        Maps.immutableEntry(\"three\", 3)).inOrder();\n",
        "864": "    assertThat(map.entrySet()).containsExactly(Maps.immutableEntry(\"three\", 3),\n",
        "865": "        Maps.immutableEntry(\"two\", 2)).inOrder();\n",
        "872": "    assertThat(map.entrySet()).containsExactly(Maps.immutableEntry(\"one\", 1),\n",
        "873": "        Maps.immutableEntry(\"three\", 3), Maps.immutableEntry(\"two\", 2)).inOrder();\n"
    }
}