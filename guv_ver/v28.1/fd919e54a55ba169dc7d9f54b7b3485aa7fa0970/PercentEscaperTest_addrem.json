{
    "addition": {
        "41": "      if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n",
        "49": "    assertEscaping(e, \"%00\", '\\u0000'); // nul\n",
        "50": "    assertEscaping(e, \"%7F\", '\\u007f'); // del\n",
        "51": "    assertEscaping(e, \"%C2%80\", '\\u0080'); // xx-00010,x-000000\n",
        "52": "    assertEscaping(e, \"%DF%BF\", '\\u07ff'); // xx-11111,x-111111\n",
        "71": "    assertEquals(\"string%20with%20spaces\", basicEscaper.escape(\"string with spaces\"));\n",
        "72": "    assertEquals(\"string+with+spaces\", plusForSpaceEscaper.escape(\"string with spaces\"));\n",
        "73": "    assertEquals(\"string with spaces\", spaceEscaper.escape(\"string with spaces\"));\n",
        "80": "      if ((c >= '0' && c <= '9')\n",
        "81": "          || (c >= 'a' && c <= 'z')\n",
        "82": "          || (c >= 'A' && c <= 'Z')\n",
        "83": "          || \"+*/-\".indexOf(c) >= 0) {\n",
        "95": "    assertEquals(\"foo%7Cbar\", e.escape(\"foo%7Cbar\")); // idempotent\n",
        "98": "  /** Test that giving a null 'safeChars' string causes a {@link NullPointerException}. */\n",
        "109": "   * Tests that specifying any alphanumeric characters as 'safe' causes an {@link\n",
        "110": "   * IllegalArgumentException}.\n",
        "113": "    String msg =\n",
        "114": "        \"Alphanumeric characters are always 'safe' \" + \"and should not be explicitly specified\";\n",
        "124": "   * Tests that if space is a safe character you cannot also specify 'plusForSpace' (throws {@link\n",
        "125": "   * IllegalArgumentException}).\n",
        "133": "    String msg = \"plusForSpace cannot be specified when space is a 'safe' character\";\n"
    },
    "removed": {
        "41": "      if ((c >= '0' && c <= '9') ||\n",
        "42": "          (c >= 'a' && c <= 'z') ||\n",
        "43": "          (c >= 'A' && c <= 'Z')) {\n",
        "51": "    assertEscaping(e, \"%00\", '\\u0000');       // nul\n",
        "52": "    assertEscaping(e, \"%7F\", '\\u007f');       // del\n",
        "53": "    assertEscaping(e, \"%C2%80\", '\\u0080');    // xx-00010,x-000000\n",
        "54": "    assertEscaping(e, \"%DF%BF\", '\\u07ff');    // xx-11111,x-111111\n",
        "73": "    assertEquals(\"string%20with%20spaces\",\n",
        "74": "        basicEscaper.escape(\"string with spaces\"));\n",
        "75": "    assertEquals(\"string+with+spaces\",\n",
        "76": "        plusForSpaceEscaper.escape(\"string with spaces\"));\n",
        "77": "    assertEquals(\"string with spaces\",\n",
        "78": "        spaceEscaper.escape(\"string with spaces\"));\n",
        "85": "      if ((c >= '0' && c <= '9') ||\n",
        "86": "          (c >= 'a' && c <= 'z') ||\n",
        "87": "          (c >= 'A' && c <= 'Z') ||\n",
        "88": "          \"+*/-\".indexOf(c) >= 0) {\n",
        "100": "    assertEquals(\"foo%7Cbar\", e.escape(\"foo%7Cbar\"));  // idempotent\n",
        "103": "  /**\n",
        "104": "   * Test that giving a null 'safeChars' string causes a\n",
        "105": "   * {@link NullPointerException}.\n",
        "106": "   */\n",
        "117": "   * Tests that specifying any alphanumeric characters as 'safe' causes an\n",
        "118": "   * {@link IllegalArgumentException}.\n",
        "121": "    String msg = \"Alphanumeric characters are always 'safe' \" +\n",
        "122": "        \"and should not be explicitly specified\";\n",
        "132": "   * Tests that if space is a safe character you cannot also specify\n",
        "133": "   * 'plusForSpace' (throws {@link IllegalArgumentException}).\n",
        "141": "    String msg =\n",
        "142": "        \"plusForSpace cannot be specified when space is a 'safe' character\";\n"
    }
}