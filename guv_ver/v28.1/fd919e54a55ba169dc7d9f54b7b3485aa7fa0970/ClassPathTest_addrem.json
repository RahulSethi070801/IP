{
    "addition": {
        "59": "/** Functional tests of {@link ClassPath}. */\n",
        "70": "        .addEqualityGroup(new ResourceInfo(\"x.txt\", getClass().getClassLoader()))\n",
        "174": "    assertThat(ClassPath.toFile(new URL(\"file:///C:\\\\\\u20320 \\u22909\"))) // Chinese Ni Hao\n",
        "218": "    assertEquals(\n",
        "219": "        new File(\"/usr/test/dep.jar\").toURI(),\n",
        "221": "                new File(\"/home/build/outer.jar\"), \"file:/usr/test/dep.jar\")\n",
        "222": "            .toURI());\n",
        "223": "    assertEquals(\n",
        "224": "        new File(\"/home/build/a.jar\").toURI(),\n",
        "226": "    assertEquals(\n",
        "227": "        new File(\"/home/build/x/y/z\").toURI(),\n",
        "229": "    assertEquals(\n",
        "230": "        new File(\"/home/build/x/y/z.jar\").toURI(),\n",
        "233": "    assertEquals(\n",
        "234": "        \"/home/build/x y.jar\",\n",
        "245": "    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifest(\"\"))).isEmpty();\n",
        "257": "    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifest)).isEmpty();\n",
        "342": "    assertEquals(\"Foo\", new ClassInfo(\"Foo.class\", classLoader).getSimpleName());\n",
        "343": "    assertEquals(\"Foo\", new ClassInfo(\"a/b/Foo.class\", classLoader).getSimpleName());\n",
        "344": "    assertEquals(\"Foo\", new ClassInfo(\"a/b/Bar$Foo.class\", classLoader).getSimpleName());\n",
        "345": "    assertEquals(\"\", new ClassInfo(\"a/b/Bar$1.class\", classLoader).getSimpleName());\n",
        "346": "    assertEquals(\"Foo\", new ClassInfo(\"a/b/Bar$Foo.class\", classLoader).getSimpleName());\n",
        "347": "    assertEquals(\"\", new ClassInfo(\"a/b/Bar$1.class\", classLoader).getSimpleName());\n",
        "348": "    assertEquals(\"Local\", new ClassInfo(\"a/b/Bar$1Local.class\", classLoader).getSimpleName());\n",
        "352": "    assertEquals(\"\", new ClassInfo(\"Foo.class\", getClass().getClassLoader()).getPackageName());\n",
        "353": "    assertEquals(\n",
        "354": "        \"a.b\", new ClassInfo(\"a/b/Foo.class\", getClass().getClassLoader()).getPackageName());\n",
        "520": "    @Override\n",
        "521": "    protected void scanDirectory(ClassLoader loader, File root) throws IOException {\n",
        "529": "    @Override\n",
        "530": "    protected void scanJarFile(ClassLoader loader, JarFile file) throws IOException {\n",
        "559": "    @Override\n",
        "560": "    protected void scanJarFile(ClassLoader loader, JarFile file) throws IOException {\n",
        "565": "    @Override\n",
        "566": "    protected void scanDirectory(ClassLoader loader, File root) {}\n"
    },
    "removed": {
        "59": "/**\n",
        "60": " * Functional tests of {@link ClassPath}.\n",
        "61": " */\n",
        "72": "        .addEqualityGroup(\n",
        "73": "            new ResourceInfo(\"x.txt\", getClass().getClassLoader()))\n",
        "177": "    assertThat(ClassPath.toFile(new URL(\"file:///C:\\\\\\u20320 \\u22909\")))  // Chinese Ni Hao\n",
        "221": "    assertEquals(new File(\"/usr/test/dep.jar\").toURI(),\n",
        "223": "            new File(\"/home/build/outer.jar\"), \"file:/usr/test/dep.jar\").toURI());\n",
        "224": "    assertEquals(new File(\"/home/build/a.jar\").toURI(),\n",
        "226": "    assertEquals(new File(\"/home/build/x/y/z\").toURI(),\n",
        "228": "    assertEquals(new File(\"/home/build/x/y/z.jar\").toURI(),\n",
        "231": "    assertEquals(\"/home/build/x y.jar\",\n",
        "242": "    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifest(\"\")))\n",
        "243": "        .isEmpty();\n",
        "255": "    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifest))\n",
        "256": "        .isEmpty();\n",
        "341": "    assertEquals(\"Foo\",\n",
        "342": "        new ClassInfo(\"Foo.class\", classLoader).getSimpleName());\n",
        "343": "    assertEquals(\"Foo\",\n",
        "344": "        new ClassInfo(\"a/b/Foo.class\", classLoader).getSimpleName());\n",
        "345": "    assertEquals(\"Foo\",\n",
        "346": "        new ClassInfo(\"a/b/Bar$Foo.class\", classLoader).getSimpleName());\n",
        "347": "    assertEquals(\"\",\n",
        "348": "        new ClassInfo(\"a/b/Bar$1.class\", classLoader).getSimpleName());\n",
        "349": "    assertEquals(\"Foo\",\n",
        "350": "        new ClassInfo(\"a/b/Bar$Foo.class\", classLoader).getSimpleName());\n",
        "351": "    assertEquals(\"\",\n",
        "352": "        new ClassInfo(\"a/b/Bar$1.class\", classLoader).getSimpleName());\n",
        "353": "    assertEquals(\"Local\",\n",
        "354": "        new ClassInfo(\"a/b/Bar$1Local.class\", classLoader).getSimpleName());\n",
        "358": "    assertEquals(\"\",\n",
        "359": "        new ClassInfo(\"Foo.class\", getClass().getClassLoader()).getPackageName());\n",
        "360": "    assertEquals(\"a.b\",\n",
        "361": "        new ClassInfo(\"a/b/Foo.class\", getClass().getClassLoader()).getPackageName());\n",
        "527": "    @Override protected void scanDirectory(ClassLoader loader, File root) throws IOException {\n",
        "535": "    @Override protected void scanJarFile(ClassLoader loader, JarFile file) throws IOException {\n",
        "564": "    @Override protected void scanJarFile(ClassLoader loader, JarFile file) throws IOException {\n",
        "569": "    @Override protected void scanDirectory(ClassLoader loader, File root) {}\n"
    }
}