{
    "addition": {
        "63": "    suite.addTest(\n",
        "64": "        BiMapTestSuiteBuilder.using(new ImmutableBiMapGenerator())\n",
        "65": "            .named(\"ImmutableBiMap\")\n",
        "66": "            .withFeatures(\n",
        "67": "                CollectionSize.ANY,\n",
        "68": "                CollectionFeature.SERIALIZABLE,\n",
        "69": "                CollectionFeature.KNOWN_ORDER,\n",
        "70": "                MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "71": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "72": "            .suppressing(BiMapInverseTester.getInverseSameAfterSerializingMethods())\n",
        "73": "            .createTestSuite());\n",
        "74": "    suite.addTest(\n",
        "75": "        BiMapTestSuiteBuilder.using(new ImmutableBiMapCopyOfGenerator())\n",
        "76": "            .named(\"ImmutableBiMap.copyOf[Map]\")\n",
        "77": "            .withFeatures(\n",
        "78": "                CollectionSize.ANY,\n",
        "79": "                CollectionFeature.SERIALIZABLE,\n",
        "80": "                CollectionFeature.KNOWN_ORDER,\n",
        "81": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "82": "            .suppressing(BiMapInverseTester.getInverseSameAfterSerializingMethods())\n",
        "83": "            .createTestSuite());\n",
        "84": "    suite.addTest(\n",
        "85": "        BiMapTestSuiteBuilder.using(new ImmutableBiMapCopyOfEntriesGenerator())\n",
        "86": "            .named(\"ImmutableBiMap.copyOf[Iterable<Entry>]\")\n",
        "87": "            .withFeatures(\n",
        "88": "                CollectionSize.ANY,\n",
        "89": "                CollectionFeature.SERIALIZABLE,\n",
        "90": "                CollectionFeature.KNOWN_ORDER,\n",
        "91": "                MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "92": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "93": "            .suppressing(BiMapInverseTester.getInverseSameAfterSerializingMethods())\n",
        "94": "            .createTestSuite());\n",
        "99": "  public abstract static class AbstractMapTests<K, V> extends MapInterfaceTest<K, V> {\n",
        "104": "    @Override\n",
        "105": "    protected Map<K, V> makeEmptyMap() {\n",
        "111": "    @Override\n",
        "112": "    protected void assertMoreInvariants(Map<K, V> map) {\n",
        "117": "        assertEquals(entry.getKey() + \"=\" + entry.getValue(), entry.toString());\n",
        "121": "      assertEquals(\"{\" + joiner.join(map.entrySet()) + \"}\", map.toString());\n",
        "122": "      assertEquals(\"[\" + joiner.join(map.entrySet()) + \"]\", map.entrySet().toString());\n",
        "123": "      assertEquals(\"[\" + joiner.join(map.keySet()) + \"]\", map.keySet().toString());\n",
        "124": "      assertEquals(\"[\" + joiner.join(map.values()) + \"]\", map.values().toString());\n",
        "132": "    @Override\n",
        "133": "    protected Map<String, Integer> makeEmptyMap() {\n",
        "137": "    @Override\n",
        "138": "    protected Map<String, Integer> makePopulatedMap() {\n",
        "142": "    @Override\n",
        "143": "    protected String getKeyNotInPopulatedMap() {\n",
        "147": "    @Override\n",
        "148": "    protected Integer getValueNotInPopulatedMap() {\n",
        "153": "  public static class InverseMapTests extends AbstractMapTests<String, Integer> {\n",
        "154": "    @Override\n",
        "155": "    protected Map<String, Integer> makeEmptyMap() {\n",
        "159": "    @Override\n",
        "160": "    protected Map<String, Integer> makePopulatedMap() {\n",
        "164": "    @Override\n",
        "165": "    protected String getKeyNotInPopulatedMap() {\n",
        "169": "    @Override\n",
        "170": "    protected Integer getValueNotInPopulatedMap() {\n",
        "177": "      ImmutableBiMap<String, Integer> map = new Builder<String, Integer>().build();\n",
        "184": "      ImmutableBiMap<String, Integer> map = new Builder<String, Integer>().put(\"one\", 1).build();\n",
        "190": "      ImmutableBiMap<String, Integer> map =\n",
        "191": "          new Builder<String, Integer>().put(Maps.immutableEntry(\"one\", 1)).build();\n",
        "196": "      ImmutableBiMap<String, Integer> map =\n",
        "197": "          ImmutableBiMap.<String, Integer>builder()\n",
        "198": "              .put(\"one\", 1)\n",
        "199": "              .put(\"two\", 2)\n",
        "200": "              .put(\"three\", 3)\n",
        "201": "              .put(\"four\", 4)\n",
        "202": "              .put(\"five\", 5)\n",
        "203": "              .build();\n",
        "204": "      assertMapEquals(map, \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "205": "      assertMapEquals(map.inverse(), 1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "233": "      assertMapEquals(map, \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "234": "      assertMapEquals(map.inverse(), 1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "248": "      ImmutableBiMap.Builder<String, Integer> builder =\n",
        "249": "          new Builder<String, Integer>().orderEntriesByValue(Ordering.natural());\n",
        "253": "      } catch (IllegalStateException expected) {\n",
        "254": "      }\n",
        "258": "      ImmutableBiMap<String, Integer> map =\n",
        "259": "          new Builder<String, Integer>().putAll(Collections.<String, Integer>emptyMap()).build();\n",
        "272": "      ImmutableBiMap<String, Integer> map =\n",
        "273": "          new Builder<String, Integer>().putAll(toPut).putAll(moreToPut).build();\n",
        "274": "      assertMapEquals(map, \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "275": "      assertMapEquals(map.inverse(), 1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "280": "      ImmutableBiMap<String, Integer> mapOne = builder.put(\"one\", 1).put(\"two\", 2).build();\n",
        "281": "      ImmutableBiMap<String, Integer> mapTwo = builder.put(\"three\", 3).put(\"four\", 4).build();\n",
        "286": "      assertMapEquals(mapTwo.inverse(), 1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\");\n",
        "326": "      Builder<String, Integer> builder =\n",
        "327": "          new Builder<String, Integer>()\n",
        "328": "              .put(\"one\", 1)\n",
        "329": "              .put(\"one\", 1); // throwing on this line would be even better\n",
        "340": "      assertMapEquals(ImmutableBiMap.of(\"one\", 1), \"one\", 1);\n",
        "341": "      assertMapEquals(ImmutableBiMap.of(\"one\", 1).inverse(), 1, \"one\");\n",
        "342": "      assertMapEquals(ImmutableBiMap.of(\"one\", 1, \"two\", 2), \"one\", 1, \"two\", 2);\n",
        "343": "      assertMapEquals(ImmutableBiMap.of(\"one\", 1, \"two\", 2).inverse(), 1, \"one\", 2, \"two\");\n",
        "345": "          ImmutableBiMap.of(\"one\", 1, \"two\", 2, \"three\", 3), \"one\", 1, \"two\", 2, \"three\", 3);\n",
        "348": "          1,\n",
        "349": "          \"one\",\n",
        "350": "          2,\n",
        "351": "          \"two\",\n",
        "352": "          3,\n",
        "353": "          \"three\");\n",
        "356": "          \"one\",\n",
        "357": "          1,\n",
        "358": "          \"two\",\n",
        "359": "          2,\n",
        "360": "          \"three\",\n",
        "361": "          3,\n",
        "362": "          \"four\",\n",
        "363": "          4);\n",
        "365": "          ImmutableBiMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4).inverse(),\n",
        "366": "          1,\n",
        "367": "          \"one\",\n",
        "368": "          2,\n",
        "369": "          \"two\",\n",
        "370": "          3,\n",
        "371": "          \"three\",\n",
        "372": "          4,\n",
        "373": "          \"four\");\n",
        "375": "          ImmutableBiMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5),\n",
        "376": "          \"one\",\n",
        "377": "          1,\n",
        "378": "          \"two\",\n",
        "379": "          2,\n",
        "380": "          \"three\",\n",
        "381": "          3,\n",
        "382": "          \"four\",\n",
        "383": "          4,\n",
        "384": "          \"five\",\n",
        "385": "          5);\n",
        "387": "          ImmutableBiMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5).inverse(),\n",
        "388": "          1,\n",
        "389": "          \"one\",\n",
        "390": "          2,\n",
        "391": "          \"two\",\n",
        "392": "          3,\n",
        "393": "          \"three\",\n",
        "394": "          4,\n",
        "395": "          \"four\",\n",
        "396": "          5,\n",
        "397": "          \"five\");\n",
        "438": "      ImmutableBiMap<String, Integer> copy =\n",
        "439": "          ImmutableBiMap.copyOf(Collections.<String, Integer>emptyMap());\n",
        "446": "      ImmutableBiMap<String, Integer> copy =\n",
        "447": "          ImmutableBiMap.copyOf(Collections.singletonMap(\"one\", 1));\n",
        "473": "      ImmutableBiMap<String, Integer> bimap =\n",
        "474": "          ImmutableBiMap.copyOf(ImmutableMap.of(\"one\", 1, \"two\", 2));\n",
        "480": "      ImmutableBiMap<String, Integer> bimap =\n",
        "481": "          ImmutableBiMap.copyOf(\n",
        "482": "              new ImmutableMap.Builder<String, Integer>()\n",
        "483": "                  .put(\"one\", 1)\n",
        "484": "                  .put(\"two\", 2)\n",
        "485": "                  .put(\"three\", 3)\n",
        "486": "                  .put(\"four\", 4)\n",
        "487": "                  .put(\"five\", 5)\n",
        "488": "                  .build());\n",
        "489": "      assertMapEquals(bimap, \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "490": "      assertMapEquals(bimap.inverse(), 1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "494": "      ImmutableMap<String, Integer> map =\n",
        "495": "          new ImmutableMap.Builder<String, Integer>()\n",
        "518": "      } catch (UnsupportedOperationException expected) {\n",
        "519": "      }\n",
        "523": "      ImmutableBiMap<String, Integer> bimap =\n",
        "524": "          ImmutableBiMap.copyOf(ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4));\n",
        "531": "      ImmutableBiMap<String, Integer> bimap =\n",
        "532": "          ImmutableBiMap.copyOf(ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4));\n",
        "539": "      ImmutableBiMap<String, Integer> bimap =\n",
        "540": "          ImmutableBiMap.copyOf(ImmutableMap.of(\"one\", 1, \"two\", 2));\n",
        "552": "      ImmutableBiMap<String, Integer> bimap =\n",
        "553": "          ImmutableBiMap.copyOf(ImmutableMap.of(\"one\", 1, \"two\", 2));\n",
        "554": "      ImmutableBiMap<String, Integer> copy = SerializableTester.reserializeAndAssert(bimap);\n",
        "562": "      ImmutableBiMap<String, Integer> bimap =\n",
        "563": "          ImmutableBiMap.copyOf(ImmutableMap.of(1, \"one\", 2, \"two\")).inverse();\n",
        "564": "      ImmutableBiMap<String, Integer> copy = SerializableTester.reserializeAndAssert(bimap);\n",
        "571": "  private static <K, V> void assertMapEquals(Map<K, V> map, Object... alternatingKeysAndValues) {\n"
    },
    "removed": {
        "63": "    suite.addTest(BiMapTestSuiteBuilder.using(new ImmutableBiMapGenerator())\n",
        "64": "        .named(\"ImmutableBiMap\")\n",
        "65": "        .withFeatures(CollectionSize.ANY,\n",
        "66": "            CollectionFeature.SERIALIZABLE,\n",
        "67": "            CollectionFeature.KNOWN_ORDER,\n",
        "68": "            MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "69": "            MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "70": "        .suppressing(BiMapInverseTester.getInverseSameAfterSerializingMethods())\n",
        "71": "        .createTestSuite());\n",
        "72": "    suite.addTest(BiMapTestSuiteBuilder.using(new ImmutableBiMapCopyOfGenerator())\n",
        "73": "        .named(\"ImmutableBiMap.copyOf[Map]\")\n",
        "74": "        .withFeatures(CollectionSize.ANY,\n",
        "75": "            CollectionFeature.SERIALIZABLE,\n",
        "76": "            CollectionFeature.KNOWN_ORDER,\n",
        "77": "            MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "78": "        .suppressing(BiMapInverseTester.getInverseSameAfterSerializingMethods())\n",
        "79": "        .createTestSuite());\n",
        "80": "    suite.addTest(BiMapTestSuiteBuilder.using(new ImmutableBiMapCopyOfEntriesGenerator())\n",
        "81": "        .named(\"ImmutableBiMap.copyOf[Iterable<Entry>]\")\n",
        "82": "        .withFeatures(CollectionSize.ANY,\n",
        "83": "            CollectionFeature.SERIALIZABLE,\n",
        "84": "            CollectionFeature.KNOWN_ORDER,\n",
        "85": "            MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "86": "            MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "87": "        .suppressing(BiMapInverseTester.getInverseSameAfterSerializingMethods())\n",
        "88": "        .createTestSuite());\n",
        "93": "  public static abstract class AbstractMapTests<K, V>\n",
        "94": "      extends MapInterfaceTest<K, V> {\n",
        "99": "    @Override protected Map<K, V> makeEmptyMap() {\n",
        "105": "    @Override protected void assertMoreInvariants(Map<K, V> map) {\n",
        "110": "        assertEquals(entry.getKey() + \"=\" + entry.getValue(),\n",
        "111": "            entry.toString());\n",
        "115": "      assertEquals(\"{\" + joiner.join(map.entrySet()) + \"}\",\n",
        "116": "          map.toString());\n",
        "117": "      assertEquals(\"[\" + joiner.join(map.entrySet()) + \"]\",\n",
        "118": "          map.entrySet().toString());\n",
        "119": "      assertEquals(\"[\" + joiner.join(map.keySet()) + \"]\",\n",
        "120": "          map.keySet().toString());\n",
        "121": "      assertEquals(\"[\" + joiner.join(map.values()) + \"]\",\n",
        "122": "          map.values().toString());\n",
        "130": "    @Override protected Map<String, Integer> makeEmptyMap() {\n",
        "134": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "138": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "142": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "147": "  public static class InverseMapTests\n",
        "148": "      extends AbstractMapTests<String, Integer> {\n",
        "149": "    @Override protected Map<String, Integer> makeEmptyMap() {\n",
        "153": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "157": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "161": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "168": "      ImmutableBiMap<String, Integer> map\n",
        "169": "          = new Builder<String, Integer>().build();\n",
        "176": "      ImmutableBiMap<String, Integer> map = new Builder<String, Integer>()\n",
        "177": "          .put(\"one\", 1)\n",
        "178": "          .build();\n",
        "184": "      ImmutableBiMap<String, Integer> map = new Builder<String, Integer>()\n",
        "185": "          .put(Maps.immutableEntry(\"one\", 1))\n",
        "186": "          .build();\n",
        "191": "      ImmutableBiMap<String, Integer> map\n",
        "192": "          = ImmutableBiMap.<String, Integer>builder()\n",
        "193": "            .put(\"one\", 1)\n",
        "194": "            .put(\"two\", 2)\n",
        "195": "            .put(\"three\", 3)\n",
        "196": "            .put(\"four\", 4)\n",
        "197": "            .put(\"five\", 5)\n",
        "198": "            .build();\n",
        "199": "      assertMapEquals(map,\n",
        "200": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "201": "      assertMapEquals(map.inverse(),\n",
        "202": "          1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "230": "      assertMapEquals(map,\n",
        "231": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "232": "      assertMapEquals(map.inverse(),\n",
        "233": "          1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "247": "      ImmutableBiMap.Builder<String, Integer> builder = new Builder<String, Integer>()\n",
        "248": "          .orderEntriesByValue(Ordering.natural());\n",
        "252": "      } catch (IllegalStateException expected) {}\n",
        "256": "      ImmutableBiMap<String, Integer> map = new Builder<String, Integer>()\n",
        "257": "          .putAll(Collections.<String, Integer>emptyMap())\n",
        "258": "          .build();\n",
        "271": "      ImmutableBiMap<String, Integer> map = new Builder<String, Integer>()\n",
        "272": "          .putAll(toPut)\n",
        "273": "          .putAll(moreToPut)\n",
        "274": "          .build();\n",
        "275": "      assertMapEquals(map,\n",
        "276": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "277": "      assertMapEquals(map.inverse(),\n",
        "278": "          1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "283": "      ImmutableBiMap<String, Integer> mapOne = builder\n",
        "284": "          .put(\"one\", 1)\n",
        "285": "          .put(\"two\", 2)\n",
        "286": "          .build();\n",
        "287": "      ImmutableBiMap<String, Integer> mapTwo = builder\n",
        "288": "          .put(\"three\", 3)\n",
        "289": "          .put(\"four\", 4)\n",
        "290": "          .build();\n",
        "295": "      assertMapEquals(mapTwo.inverse(),\n",
        "296": "          1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\");\n",
        "336": "      Builder<String, Integer> builder = new Builder<String, Integer>()\n",
        "337": "          .put(\"one\", 1)\n",
        "338": "          .put(\"one\", 1); // throwing on this line would be even better\n",
        "350": "          ImmutableBiMap.of(\"one\", 1),\n",
        "351": "          \"one\", 1);\n",
        "352": "      assertMapEquals(\n",
        "353": "          ImmutableBiMap.of(\"one\", 1).inverse(),\n",
        "354": "          1, \"one\");\n",
        "355": "      assertMapEquals(\n",
        "356": "          ImmutableBiMap.of(\"one\", 1, \"two\", 2),\n",
        "357": "          \"one\", 1, \"two\", 2);\n",
        "358": "      assertMapEquals(\n",
        "359": "          ImmutableBiMap.of(\"one\", 1, \"two\", 2).inverse(),\n",
        "360": "          1, \"one\", 2, \"two\");\n",
        "361": "      assertMapEquals(\n",
        "362": "          ImmutableBiMap.of(\"one\", 1, \"two\", 2, \"three\", 3),\n",
        "363": "          \"one\", 1, \"two\", 2, \"three\", 3);\n",
        "366": "          1, \"one\", 2, \"two\", 3, \"three\");\n",
        "369": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4);\n",
        "371": "          ImmutableBiMap.of(\n",
        "372": "              \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4).inverse(),\n",
        "373": "          1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\");\n",
        "375": "          ImmutableBiMap.of(\n",
        "376": "              \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5),\n",
        "377": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "379": "          ImmutableBiMap.of(\n",
        "380": "              \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5).inverse(),\n",
        "381": "          1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "422": "      ImmutableBiMap<String, Integer> copy\n",
        "423": "          = ImmutableBiMap.copyOf(Collections.<String, Integer>emptyMap());\n",
        "430": "      ImmutableBiMap<String, Integer> copy\n",
        "431": "          = ImmutableBiMap.copyOf(Collections.singletonMap(\"one\", 1));\n",
        "457": "      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.copyOf(\n",
        "458": "          ImmutableMap.of(\"one\", 1, \"two\", 2));\n",
        "464": "      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.copyOf(\n",
        "465": "          new ImmutableMap.Builder<String, Integer>()\n",
        "466": "              .put(\"one\", 1)\n",
        "467": "              .put(\"two\", 2)\n",
        "468": "              .put(\"three\", 3)\n",
        "469": "              .put(\"four\", 4)\n",
        "470": "              .put(\"five\", 5)\n",
        "471": "              .build());\n",
        "472": "      assertMapEquals(bimap,\n",
        "473": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "474": "      assertMapEquals(bimap.inverse(),\n",
        "475": "          1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "479": "      ImmutableMap<String, Integer> map\n",
        "480": "          = new ImmutableMap.Builder<String, Integer>()\n",
        "503": "      } catch (UnsupportedOperationException expected) {}\n",
        "507": "      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.copyOf(\n",
        "508": "          ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4));\n",
        "515": "      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.copyOf(\n",
        "516": "          ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4));\n",
        "523": "      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.copyOf(\n",
        "524": "          ImmutableMap.of(\"one\", 1, \"two\", 2));\n",
        "536": "      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.copyOf(\n",
        "537": "          ImmutableMap.of(\"one\", 1, \"two\", 2));\n",
        "538": "      ImmutableBiMap<String, Integer> copy =\n",
        "539": "          SerializableTester.reserializeAndAssert(bimap);\n",
        "547": "      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.copyOf(\n",
        "548": "          ImmutableMap.of(1, \"one\", 2, \"two\")).inverse();\n",
        "549": "      ImmutableBiMap<String, Integer> copy =\n",
        "550": "          SerializableTester.reserializeAndAssert(bimap);\n",
        "557": "  private static <K, V> void assertMapEquals(Map<K, V> map,\n",
        "558": "      Object... alternatingKeysAndValues) {\n"
    }
}