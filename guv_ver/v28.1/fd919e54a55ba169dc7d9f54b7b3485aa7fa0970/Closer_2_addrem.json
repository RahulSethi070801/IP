{
    "addition": {
        "34": " * {@linkplain #close closed}. This is intended to approximately emulate the behavior of Java 7's <a\n",
        "35": " * href=\"http://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html\"\n",
        "43": " * <pre>{@code\n",
        "44": " * Closer closer = Closer.create();\n",
        "45": " * try {\n",
        "46": " *   InputStream in = closer.register(openInputStream());\n",
        "47": " *   OutputStream out = closer.register(openOutputStream());\n",
        "48": " *   // do stuff\n",
        "49": " * } catch (Throwable e) {\n",
        "50": " *   // ensure that any checked exception types other than IOException that could be thrown are\n",
        "51": " *   // provided here, e.g. throw closer.rethrow(e, CheckedException.class);\n",
        "52": " *   throw closer.rethrow(e);\n",
        "53": " * } finally {\n",
        "54": " *   closer.close();\n",
        "55": " * }\n",
        "56": " * }</pre>\n",
        "60": " * try block in order to catch any exception that may be thrown (including from the call to {@code\n",
        "61": " * close()}).\n",
        "66": " *   <li>Each {@code Closeable} resource that is successfully registered will be closed later.\n",
        "67": " *   <li>If a {@code Throwable} is thrown in the try block, no exceptions that occur when attempting\n",
        "68": " *       to close resources will be thrown from the finally block. The throwable from the try block\n",
        "69": " *       will be thrown.\n",
        "70": " *   <li>If no exceptions or errors were thrown in the try block, the <i>first</i> exception thrown\n",
        "71": " *       by an attempt to close a resource will be thrown.\n",
        "72": " *   <li>Any exception caught when attempting to close a resource that is <i>not</i> thrown (because\n",
        "73": " *       another exception is already being thrown) is <i>suppressed</i>.\n",
        "80": " *   <li><b>Java 7+:</b> Exceptions are suppressed by adding them to the exception that <i>will</i>\n",
        "81": " *       be thrown using {@code Throwable.addSuppressed(Throwable)}.\n",
        "82": " *   <li><b>Java 6:</b> Exceptions are suppressed by logging them instead.\n",
        "93": "  /** The suppressor implementation to use for the current Java version. */\n",
        "99": "  /** Creates a new {@link Closer}. */\n",
        "116": "   * Registers the given {@code closeable} to be closed when this {@code Closer} is {@linkplain\n",
        "117": "   * #close closed}.\n",
        "132": "   * Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code\n",
        "133": "   * IOException}, {@code RuntimeException} or {@code Error}. Otherwise, it will be rethrown wrapped\n",
        "134": "   * in a {@code RuntimeException}. <b>Note:</b> Be sure to declare all of the checked exception\n",
        "135": "   * types your try block can throw when calling an overload of this method so as to avoid losing\n",
        "136": "   * the original exception type.\n",
        "152": "   * Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code\n",
        "153": "   * IOException}, {@code RuntimeException}, {@code Error} or a checked exception of the given type.\n",
        "154": "   * Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b> Be sure to\n",
        "155": "   * declare all of the checked exception types your try block can throw when calling an overload of\n",
        "156": "   * this method so as to avoid losing the original exception type.\n",
        "158": "   * <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e,\n",
        "159": "   * ...);} to ensure the compiler knows that it will throw.\n",
        "175": "   * Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code\n",
        "176": "   * IOException}, {@code RuntimeException}, {@code Error} or a checked exception of either of the\n",
        "177": "   * given types. Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b>\n",
        "178": "   * Be sure to declare all of the checked exception types your try block can throw when calling an\n",
        "179": "   * overload of this method so as to avoid losing the original exception type.\n",
        "181": "   * <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e,\n",
        "182": "   * ...);} to ensure the compiler knows that it will throw.\n",
        "229": "  /** Suppression strategy interface. */\n",
        "240": "  /** Suppresses exceptions by logging them. */\n"
    },
    "removed": {
        "34": " * {@linkplain #close closed}. This is intended to approximately emulate the behavior of Java 7's\n",
        "35": " * <a href=\"http://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html\"\n",
        "43": " * <pre>   {@code\n",
        "44": " *   Closer closer = Closer.create();\n",
        "45": " *   try {\n",
        "46": " *     InputStream in = closer.register(openInputStream());\n",
        "47": " *     OutputStream out = closer.register(openOutputStream());\n",
        "48": " *     // do stuff\n",
        "49": " *   } catch (Throwable e) {\n",
        "50": " *     // ensure that any checked exception types other than IOException that could be thrown are\n",
        "51": " *     // provided here, e.g. throw closer.rethrow(e, CheckedException.class);\n",
        "52": " *     throw closer.rethrow(e);\n",
        "53": " *   } finally {\n",
        "54": " *     closer.close();\n",
        "55": " *   }}</pre>\n",
        "59": " * try block in order to catch any exception that may be thrown (including from the call to\n",
        "60": " * {@code close()}).\n",
        "65": " * <li>Each {@code Closeable} resource that is successfully registered will be closed later.\n",
        "66": " * <li>If a {@code Throwable} is thrown in the try block, no exceptions that occur when attempting\n",
        "67": " *     to close resources will be thrown from the finally block. The throwable from the try block\n",
        "68": " *     will be thrown.\n",
        "69": " * <li>If no exceptions or errors were thrown in the try block, the <i>first</i> exception thrown by\n",
        "70": " *     an attempt to close a resource will be thrown.\n",
        "71": " * <li>Any exception caught when attempting to close a resource that is <i>not</i> thrown (because\n",
        "72": " *     another exception is already being thrown) is <i>suppressed</i>.\n",
        "79": " * <li><b>Java 7+:</b> Exceptions are suppressed by adding them to the exception that <i>will</i> be\n",
        "80": " *     thrown using {@code Throwable.addSuppressed(Throwable)}.\n",
        "81": " * <li><b>Java 6:</b> Exceptions are suppressed by logging them instead.\n",
        "92": "  /**\n",
        "93": "   * The suppressor implementation to use for the current Java version.\n",
        "94": "   */\n",
        "100": "  /**\n",
        "101": "   * Creates a new {@link Closer}.\n",
        "102": "   */\n",
        "119": "   * Registers the given {@code closeable} to be closed when this {@code Closer} is\n",
        "120": "   * {@linkplain #close closed}.\n",
        "135": "   * Stores the given throwable and rethrows it. It will be rethrown as is if it is an\n",
        "136": "   * {@code IOException}, {@code RuntimeException} or {@code Error}. Otherwise, it will be rethrown\n",
        "137": "   * wrapped in a {@code RuntimeException}. <b>Note:</b> Be sure to declare all of the checked\n",
        "138": "   * exception types your try block can throw when calling an overload of this method so as to avoid\n",
        "139": "   * losing the original exception type.\n",
        "155": "   * Stores the given throwable and rethrows it. It will be rethrown as is if it is an\n",
        "156": "   * {@code IOException}, {@code RuntimeException}, {@code Error} or a checked exception of the\n",
        "157": "   * given type. Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b>\n",
        "158": "   * Be sure to declare all of the checked exception types your try block can throw when calling an\n",
        "159": "   * overload of this method so as to avoid losing the original exception type.\n",
        "161": "   * <p>This method always throws, and as such should be called as\n",
        "162": "   * {@code throw closer.rethrow(e, ...);} to ensure the compiler knows that it will throw.\n",
        "178": "   * Stores the given throwable and rethrows it. It will be rethrown as is if it is an\n",
        "179": "   * {@code IOException}, {@code RuntimeException}, {@code Error} or a checked exception of either\n",
        "180": "   * of the given types. Otherwise, it will be rethrown wrapped in a {@code RuntimeException}.\n",
        "181": "   * <b>Note:</b> Be sure to declare all of the checked exception types your try block can throw\n",
        "182": "   * when calling an overload of this method so as to avoid losing the original exception type.\n",
        "184": "   * <p>This method always throws, and as such should be called as\n",
        "185": "   * {@code throw closer.rethrow(e, ...);} to ensure the compiler knows that it will throw.\n",
        "232": "  /**\n",
        "233": "   * Suppression strategy interface.\n",
        "234": "   */\n",
        "245": "  /**\n",
        "246": "   * Suppresses exceptions by logging them.\n",
        "247": "   */\n"
    }
}