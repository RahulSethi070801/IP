{
    "addition": {
        "50": "  private static final ThreadLocal<Random> random =\n",
        "51": "      new ThreadLocal<Random>() {\n",
        "52": "        @Override\n",
        "53": "        protected Random initialValue() {\n",
        "54": "          return new Random();\n",
        "55": "        }\n",
        "56": "      };\n",
        "85": "    BloomFilter<String> bf =\n",
        "86": "        BloomFilter.create(\n",
        "87": "            Funnels.unencodedCharsFunnel(),\n",
        "88": "            numInsertions,\n",
        "89": "            0.03,\n",
        "90": "            BloomFilterStrategies.MURMUR128_MITZ_32);\n",
        "105": "    ImmutableSet<Integer> falsePositives =\n",
        "106": "        ImmutableSet.of(\n",
        "107": "            49, 51, 59, 163, 199, 321, 325, 363, 367, 469, 545, 561, 727, 769, 773, 781);\n",
        "130": "    BloomFilter<String> bf =\n",
        "131": "        BloomFilter.create(\n",
        "132": "            Funnels.unencodedCharsFunnel(),\n",
        "133": "            numInsertions,\n",
        "134": "            0.03,\n",
        "135": "            BloomFilterStrategies.MURMUR128_MITZ_64);\n",
        "150": "    ImmutableSet<Integer> falsePositives =\n",
        "151": "        ImmutableSet.of(15, 25, 287, 319, 381, 399, 421, 465, 529, 697, 767, 857);\n",
        "174": "    BloomFilter<String> bf =\n",
        "175": "        BloomFilter.create(\n",
        "176": "            Funnels.stringFunnel(UTF_8),\n",
        "177": "            numInsertions,\n",
        "178": "            0.03,\n",
        "179": "            BloomFilterStrategies.MURMUR128_MITZ_64);\n",
        "194": "    ImmutableSet<Integer> falsePositives = ImmutableSet.of(129, 471, 723, 89, 751, 835, 871);\n",
        "215": "  /** Sanity checking with many combinations of false positive rates and expected insertions */\n",
        "228": "    } catch (IllegalArgumentException expected) {\n",
        "229": "    }\n",
        "233": "    } catch (IllegalArgumentException expected) {\n",
        "234": "    }\n",
        "238": "    } catch (IllegalArgumentException expected) {\n",
        "239": "    }\n",
        "243": "    } catch (IllegalArgumentException expected) {\n",
        "244": "    }\n",
        "253": "    } catch (IllegalArgumentException expected) {\n",
        "254": "    }\n",
        "263": "  /** Tests that we never get an optimal hashes number of zero. */\n",
        "277": "  /** Tests that we always get a non-negative optimal size. */\n",
        "292": "    assertEquals(3327428144502L, BloomFilter.optimalNumOfBits(Integer.MAX_VALUE, Double.MIN_VALUE));\n",
        "401": "    new EqualsTester().addEqualityGroup(bf1, bf2).testEquals();\n",
        "405": "    new EqualsTester().addEqualityGroup(bf1).addEqualityGroup(bf2).testEquals();\n",
        "527": "   * This test will fail whenever someone updates/reorders the BloomFilterStrategies constants. Only\n",
        "528": "   * appending a new constant is allowed.\n"
    },
    "removed": {
        "50": "  private static final ThreadLocal<Random> random = new ThreadLocal<Random>(){\n",
        "51": "    @Override\n",
        "52": "    protected Random initialValue() {\n",
        "53": "      return new Random();\n",
        "54": "    }\n",
        "55": "  };\n",
        "84": "    BloomFilter<String> bf = BloomFilter.create(\n",
        "85": "        Funnels.unencodedCharsFunnel(), numInsertions, 0.03,\n",
        "86": "        BloomFilterStrategies.MURMUR128_MITZ_32);\n",
        "101": "    ImmutableSet<Integer> falsePositives = ImmutableSet.of(\n",
        "102": "        49, 51, 59, 163, 199, 321, 325, 363, 367, 469, 545, 561, 727, 769, 773, 781);\n",
        "125": "    BloomFilter<String> bf = BloomFilter.create(\n",
        "126": "        Funnels.unencodedCharsFunnel(), numInsertions, 0.03,\n",
        "127": "        BloomFilterStrategies.MURMUR128_MITZ_64);\n",
        "142": "    ImmutableSet<Integer> falsePositives = ImmutableSet.of(\n",
        "143": "        15, 25, 287, 319, 381, 399, 421, 465, 529, 697, 767, 857);\n",
        "166": "    BloomFilter<String> bf = BloomFilter.create(\n",
        "167": "        Funnels.stringFunnel(UTF_8), numInsertions, 0.03,\n",
        "168": "        BloomFilterStrategies.MURMUR128_MITZ_64);\n",
        "183": "    ImmutableSet<Integer> falsePositives =\n",
        "184": "        ImmutableSet.of(129, 471, 723, 89, 751, 835, 871);\n",
        "205": "  /**\n",
        "206": "   * Sanity checking with many combinations of false positive rates and expected insertions\n",
        "207": "   */\n",
        "220": "    } catch (IllegalArgumentException expected) {}\n",
        "224": "    } catch (IllegalArgumentException expected) {}\n",
        "228": "    } catch (IllegalArgumentException expected) {}\n",
        "232": "    } catch (IllegalArgumentException expected) {}\n",
        "241": "    } catch (IllegalArgumentException expected) {}\n",
        "250": "  /**\n",
        "251": "   * Tests that we never get an optimal hashes number of zero.\n",
        "252": "   */\n",
        "266": "  /**\n",
        "267": "   * Tests that we always get a non-negative optimal size.\n",
        "268": "   */\n",
        "283": "    assertEquals(3327428144502L, BloomFilter.optimalNumOfBits(\n",
        "284": "        Integer.MAX_VALUE, Double.MIN_VALUE));\n",
        "393": "    new EqualsTester()\n",
        "394": "        .addEqualityGroup(bf1, bf2)\n",
        "395": "        .testEquals();\n",
        "399": "    new EqualsTester()\n",
        "400": "        .addEqualityGroup(bf1)\n",
        "401": "        .addEqualityGroup(bf2)\n",
        "402": "        .testEquals();\n",
        "522": "   * This test will fail whenever someone updates/reorders the BloomFilterStrategies constants.\n",
        "523": "   * Only appending a new constant is allowed.\n"
    }
}