{
    "addition": {
        "53": "  private static final class ImmutableSetMultimapGenerator extends TestStringSetMultimapGenerator {\n",
        "64": "  private static final class ImmutableSetMultimapCopyOfEntriesGenerator\n",
        "65": "      extends TestStringSetMultimapGenerator {\n",
        "76": "    suite.addTest(\n",
        "77": "        SetMultimapTestSuiteBuilder.using(new ImmutableSetMultimapGenerator())\n",
        "78": "            .named(\"ImmutableSetMultimap\")\n",
        "79": "            .withFeatures(ALLOWS_ANY_NULL_QUERIES, KNOWN_ORDER, SERIALIZABLE, CollectionSize.ANY)\n",
        "80": "            .createTestSuite());\n",
        "81": "    suite.addTest(\n",
        "82": "        SetMultimapTestSuiteBuilder.using(new ImmutableSetMultimapCopyOfEntriesGenerator())\n",
        "83": "            .named(\"ImmutableSetMultimap.copyOf[Iterable<Entry>]\")\n",
        "84": "            .withFeatures(ALLOWS_ANY_NULL_QUERIES, KNOWN_ORDER, SERIALIZABLE, CollectionSize.ANY)\n",
        "90": "    ImmutableSetMultimap<String, Integer> multimap =\n",
        "91": "        new Builder<String, Integer>().put(Maps.immutableEntry(\"one\", 1)).build();\n",
        "117": "    Entry<String, Integer> entry =\n",
        "118": "        new AbstractMapEntry<String, Integer>() {\n",
        "119": "          @Override\n",
        "120": "          public String getKey() {\n",
        "121": "            return holder.string;\n",
        "122": "          }\n",
        "123": "\n",
        "124": "          @Override\n",
        "125": "          public Integer getValue() {\n",
        "126": "            return 1;\n",
        "127": "          }\n",
        "128": "        };\n",
        "136": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "147": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "167": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "177": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "186": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "201": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "210": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "214": "    } catch (NullPointerException expected) {\n",
        "215": "    }\n",
        "219": "    } catch (NullPointerException expected) {\n",
        "220": "    }\n",
        "224": "    } catch (NullPointerException expected) {\n",
        "225": "    }\n",
        "229": "    } catch (NullPointerException expected) {\n",
        "230": "    }\n",
        "236": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "240": "    } catch (NullPointerException expected) {\n",
        "241": "    }\n",
        "245": "    } catch (NullPointerException expected) {\n",
        "246": "    }\n",
        "250": "    } catch (NullPointerException expected) {\n",
        "251": "    }\n",
        "255": "    } catch (NullPointerException expected) {\n",
        "256": "    }\n",
        "260": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "279": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "283": "    builder.orderKeysBy(\n",
        "284": "        new Ordering<String>() {\n",
        "285": "          @Override\n",
        "286": "          public int compare(String left, String right) {\n",
        "287": "            return left.length() - right.length();\n",
        "288": "          }\n",
        "289": "        });\n",
        "304": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "318": "    assertEquals(\n",
        "319": "        Collections.reverseOrder(), ((ImmutableSortedSet<Integer>) multimap.get(\"a\")).comparator());\n",
        "321": "    assertEquals(\n",
        "322": "        Collections.reverseOrder(), ((ImmutableSortedSet<Integer>) multimap.get(\"x\")).comparator());\n",
        "324": "    assertEquals(\n",
        "325": "        Collections.reverseOrder(),\n",
        "330": "    ImmutableSetMultimap.Builder<String, Integer> builder = ImmutableSetMultimap.builder();\n",
        "345": "    assertEquals(\n",
        "346": "        Collections.reverseOrder(), ((ImmutableSortedSet<Integer>) multimap.get(\"a\")).comparator());\n",
        "348": "    assertEquals(\n",
        "349": "        Collections.reverseOrder(), ((ImmutableSortedSet<Integer>) multimap.get(\"x\")).comparator());\n",
        "351": "    assertEquals(\n",
        "352": "        Collections.reverseOrder(),\n",
        "372": "    ImmutableSetMultimap<Object, Object> copy = ImmutableSetMultimap.copyOf(input);\n",
        "394": "    } catch (NullPointerException expected) {\n",
        "395": "    }\n",
        "404": "    } catch (NullPointerException expected) {\n",
        "405": "    }\n",
        "414": "                (ImmutableSetMultimap<?, ?> mm) ->\n",
        "415": "                    ImmutableListMultimap.copyOf(mm).asMap().entrySet().asList())\n",
        "468": "    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(multimap, \"foo\", 1);\n",
        "488": "    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(multimap, \"bar\", 2);\n",
        "503": "                .put(\"bar\", 2)\n",
        "504": "                .put(\"foo\", 1)\n",
        "505": "                .put(\"foo\", 3)\n",
        "506": "                .build(),\n",
        "508": "                .put(\"bar\", 2)\n",
        "509": "                .put(\"foo\", 3)\n",
        "510": "                .put(\"foo\", 1)\n",
        "511": "                .build())\n",
        "512": "        .addEqualityGroup(\n",
        "513": "            ImmutableSetMultimap.<String, Integer>builder()\n",
        "514": "                .put(\"foo\", 2)\n",
        "515": "                .put(\"foo\", 3)\n",
        "516": "                .put(\"foo\", 1)\n",
        "517": "                .build())\n",
        "518": "        .addEqualityGroup(\n",
        "519": "            ImmutableSetMultimap.<String, Integer>builder().put(\"bar\", 2).put(\"foo\", 3).build())\n",
        "524": "    assertMultimapEquals(ImmutableSetMultimap.of(\"one\", 1), \"one\", 1);\n",
        "525": "    assertMultimapEquals(ImmutableSetMultimap.of(\"one\", 1, \"two\", 2), \"one\", 1, \"two\", 2);\n",
        "527": "        ImmutableSetMultimap.of(\"one\", 1, \"two\", 2, \"three\", 3), \"one\", 1, \"two\", 2, \"three\", 3);\n",
        "530": "        \"one\",\n",
        "531": "        1,\n",
        "532": "        \"two\",\n",
        "533": "        2,\n",
        "534": "        \"three\",\n",
        "535": "        3,\n",
        "536": "        \"four\",\n",
        "537": "        4);\n",
        "539": "        ImmutableSetMultimap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5),\n",
        "540": "        \"one\",\n",
        "541": "        1,\n",
        "542": "        \"two\",\n",
        "543": "        2,\n",
        "544": "        \"three\",\n",
        "545": "        3,\n",
        "546": "        \"four\",\n",
        "547": "        4,\n",
        "548": "        \"five\",\n",
        "549": "        5);\n",
        "556": "    assertEquals(ImmutableSetMultimap.of(1, \"one\"), ImmutableSetMultimap.of(\"one\", 1).inverse());\n",
        "572": "  private static <K, V> void assertMultimapEquals(\n",
        "573": "      Multimap<K, V> multimap, Object... alternatingKeysAndValues) {\n",
        "586": "    assertEquals(multimap.size(), SerializableTester.reserialize(multimap).size());\n",
        "591": "    Collection<Integer> valuesCopy = SerializableTester.reserialize(multimap.values());\n",
        "592": "    assertEquals(HashMultiset.create(multimap.values()), HashMultiset.create(valuesCopy));\n",
        "603": "    Multimap<String, Integer> multimap =\n",
        "604": "        new ImmutableSetMultimap.Builder<String, Integer>()\n",
        "605": "            .orderKeysBy(Ordering.natural().reverse())\n",
        "606": "            .orderValuesBy(Ordering.usingToString())\n",
        "607": "            .put(\"a\", 2)\n",
        "608": "            .put(\"a\", 10)\n",
        "609": "            .put(\"b\", 1)\n",
        "610": "            .build();\n",
        "614": "    assertEquals(\n",
        "615": "        Ordering.usingToString(), ((ImmutableSortedSet<Integer>) multimap.get(\"a\")).comparator());\n",
        "616": "    assertEquals(\n",
        "617": "        Ordering.usingToString(), ((ImmutableSortedSet<Integer>) multimap.get(\"z\")).comparator());\n",
        "622": "        .put(\"foo\", 1)\n",
        "623": "        .put(\"bar\", 2)\n",
        "624": "        .put(\"foo\", 3)\n",
        "625": "        .build();\n"
    },
    "removed": {
        "54": "  private static final class ImmutableSetMultimapGenerator extends\n",
        "55": "      TestStringSetMultimapGenerator {\n",
        "66": "  private static final class ImmutableSetMultimapCopyOfEntriesGenerator extends\n",
        "67": "      TestStringSetMultimapGenerator {\n",
        "78": "    suite.addTest(SetMultimapTestSuiteBuilder.using(new ImmutableSetMultimapGenerator())\n",
        "79": "        .named(\"ImmutableSetMultimap\")\n",
        "80": "        .withFeatures(\n",
        "81": "            ALLOWS_ANY_NULL_QUERIES,\n",
        "82": "            KNOWN_ORDER,\n",
        "83": "            SERIALIZABLE,\n",
        "84": "            CollectionSize.ANY)\n",
        "85": "        .createTestSuite());\n",
        "86": "    suite.addTest(SetMultimapTestSuiteBuilder.using(\n",
        "87": "            new ImmutableSetMultimapCopyOfEntriesGenerator())\n",
        "88": "        .named(\"ImmutableSetMultimap.copyOf[Iterable<Entry>]\")\n",
        "89": "        .withFeatures(\n",
        "90": "            ALLOWS_ANY_NULL_QUERIES,\n",
        "91": "            KNOWN_ORDER,\n",
        "92": "            SERIALIZABLE,\n",
        "93": "            CollectionSize.ANY)\n",
        "99": "    ImmutableSetMultimap<String, Integer> multimap = new Builder<String, Integer>()\n",
        "100": "        .put(Maps.immutableEntry(\"one\", 1))\n",
        "101": "        .build();\n",
        "127": "    Entry<String, Integer> entry = new AbstractMapEntry<String, Integer>() {\n",
        "128": "      @Override public String getKey() {\n",
        "129": "        return holder.string;\n",
        "130": "      }\n",
        "131": "      @Override public Integer getValue() {\n",
        "132": "        return 1;\n",
        "133": "      }\n",
        "134": "    };\n",
        "142": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "143": "        = ImmutableSetMultimap.builder();\n",
        "154": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "155": "        = ImmutableSetMultimap.builder();\n",
        "175": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "176": "        = ImmutableSetMultimap.builder();\n",
        "186": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "187": "        = ImmutableSetMultimap.builder();\n",
        "196": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "197": "        = ImmutableSetMultimap.builder();\n",
        "212": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "213": "        = ImmutableSetMultimap.builder();\n",
        "222": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "223": "        = ImmutableSetMultimap.builder();\n",
        "227": "    } catch (NullPointerException expected) {}\n",
        "231": "    } catch (NullPointerException expected) {}\n",
        "235": "    } catch (NullPointerException expected) {}\n",
        "239": "    } catch (NullPointerException expected) {}\n",
        "245": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "246": "        = ImmutableSetMultimap.builder();\n",
        "250": "    } catch (NullPointerException expected) {}\n",
        "254": "    } catch (NullPointerException expected) {}\n",
        "258": "    } catch (NullPointerException expected) {}\n",
        "262": "    } catch (NullPointerException expected) {}\n",
        "266": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "267": "        = ImmutableSetMultimap.builder();\n",
        "286": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "287": "        = ImmutableSetMultimap.builder();\n",
        "291": "    builder.orderKeysBy(new Ordering<String>() {\n",
        "292": "      @Override\n",
        "293": "      public int compare(String left, String right) {\n",
        "294": "        return left.length() - right.length();\n",
        "295": "      }\n",
        "296": "    });\n",
        "311": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "312": "        = ImmutableSetMultimap.builder();\n",
        "326": "    assertEquals(Collections.reverseOrder(),\n",
        "327": "        ((ImmutableSortedSet<Integer>) multimap.get(\"a\")).comparator());\n",
        "329": "    assertEquals(Collections.reverseOrder(),\n",
        "330": "        ((ImmutableSortedSet<Integer>) multimap.get(\"x\")).comparator());\n",
        "332": "    assertEquals(Collections.reverseOrder(),\n",
        "337": "    ImmutableSetMultimap.Builder<String, Integer> builder\n",
        "338": "        = ImmutableSetMultimap.builder();\n",
        "353": "    assertEquals(Collections.reverseOrder(),\n",
        "354": "        ((ImmutableSortedSet<Integer>) multimap.get(\"a\")).comparator());\n",
        "356": "    assertEquals(Collections.reverseOrder(),\n",
        "357": "        ((ImmutableSortedSet<Integer>) multimap.get(\"x\")).comparator());\n",
        "359": "    assertEquals(Collections.reverseOrder(),\n",
        "379": "    ImmutableSetMultimap<Object, Object> copy\n",
        "380": "        = ImmutableSetMultimap.copyOf(input);\n",
        "402": "    } catch (NullPointerException expected) {}\n",
        "411": "    } catch (NullPointerException expected) {}\n",
        "420": "                (ImmutableSetMultimap<?, ?> mm)\n",
        "421": "                    -> ImmutableListMultimap.copyOf(mm).asMap().entrySet().asList())\n",
        "474": "    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(\n",
        "475": "        multimap, \"foo\", 1);\n",
        "495": "    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(\n",
        "496": "        multimap, \"bar\", 2);\n",
        "511": "                .put(\"bar\", 2).put(\"foo\", 1).put(\"foo\", 3).build(),\n",
        "513": "                .put(\"bar\", 2).put(\"foo\", 3).put(\"foo\", 1).build())\n",
        "514": "        .addEqualityGroup(ImmutableSetMultimap.<String, Integer>builder()\n",
        "515": "            .put(\"foo\", 2).put(\"foo\", 3).put(\"foo\", 1).build())\n",
        "516": "        .addEqualityGroup(ImmutableSetMultimap.<String, Integer>builder()\n",
        "517": "            .put(\"bar\", 2).put(\"foo\", 3).build())\n",
        "523": "        ImmutableSetMultimap.of(\"one\", 1),\n",
        "524": "        \"one\", 1);\n",
        "525": "    assertMultimapEquals(\n",
        "526": "        ImmutableSetMultimap.of(\"one\", 1, \"two\", 2),\n",
        "527": "        \"one\", 1, \"two\", 2);\n",
        "528": "    assertMultimapEquals(\n",
        "529": "        ImmutableSetMultimap.of(\"one\", 1, \"two\", 2, \"three\", 3),\n",
        "530": "        \"one\", 1, \"two\", 2, \"three\", 3);\n",
        "533": "        \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4);\n",
        "535": "        ImmutableSetMultimap.of(\n",
        "536": "            \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5),\n",
        "537": "        \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "544": "    assertEquals(\n",
        "545": "        ImmutableSetMultimap.of(1, \"one\"),\n",
        "546": "        ImmutableSetMultimap.of(\"one\", 1).inverse());\n",
        "562": "  private static <K, V> void assertMultimapEquals(Multimap<K, V> multimap,\n",
        "563": "      Object... alternatingKeysAndValues) {\n",
        "576": "    assertEquals(multimap.size(),\n",
        "577": "        SerializableTester.reserialize(multimap).size());\n",
        "582": "    Collection<Integer> valuesCopy\n",
        "583": "        = SerializableTester.reserialize(multimap.values());\n",
        "584": "    assertEquals(HashMultiset.create(multimap.values()),\n",
        "585": "        HashMultiset.create(valuesCopy));\n",
        "596": "    Multimap<String, Integer> multimap = new ImmutableSetMultimap.Builder<String, Integer>()\n",
        "597": "        .orderKeysBy(Ordering.natural().reverse())\n",
        "598": "        .orderValuesBy(Ordering.usingToString())\n",
        "599": "        .put(\"a\", 2)\n",
        "600": "        .put(\"a\", 10)\n",
        "601": "        .put(\"b\", 1)\n",
        "602": "        .build();\n",
        "606": "    assertEquals(Ordering.usingToString(),\n",
        "607": "        ((ImmutableSortedSet<Integer>) multimap.get(\"a\")).comparator());\n",
        "608": "    assertEquals(Ordering.usingToString(),\n",
        "609": "        ((ImmutableSortedSet<Integer>) multimap.get(\"z\")).comparator());\n",
        "614": "        .put(\"foo\", 1).put(\"bar\", 2).put(\"foo\", 3).build();\n"
    }
}