{
    "addition": {
        "36": " * Test suite for {@link CacheBuilder}. TODO(cpovirk): merge into CacheBuilderTest?\n",
        "54": "    final Cache<Integer, Integer> cache = CacheBuilder.newBuilder().build();\n",
        "56": "    Callable<Integer> loader =\n",
        "57": "        new Callable<Integer>() {\n",
        "58": "          private int i = 0;\n",
        "60": "          @Override\n",
        "61": "          public Integer call() throws Exception {\n",
        "62": "            return ++i;\n",
        "63": "          }\n",
        "64": "        };\n",
        "81": "    final Cache<Integer, Integer> cache = CacheBuilder.newBuilder().maximumSize(4).build();\n",
        "105": "    CacheLoader<Integer, Integer> loader =\n",
        "106": "        new CacheLoader<Integer, Integer>() {\n",
        "107": "          int i = 0;\n",
        "109": "          @Override\n",
        "110": "          public Integer load(Integer key) throws Exception {\n",
        "111": "            return i++;\n",
        "112": "          }\n",
        "113": "        };\n",
        "115": "    LoadingCache<Integer, Integer> cache = CacheBuilder.newBuilder().build(loader);\n",
        "132": "    final Cache<Integer, Integer> cache =\n",
        "133": "        CacheBuilder.newBuilder()\n",
        "134": "            .expireAfterAccess(1000, TimeUnit.MILLISECONDS)\n",
        "135": "            .ticker(fakeTicker)\n",
        "136": "            .build();\n",
        "150": "    final Cache<Integer, Integer> cache =\n",
        "151": "        CacheBuilder.newBuilder()\n",
        "152": "            .expireAfterWrite(1000, TimeUnit.MILLISECONDS)\n",
        "153": "            .ticker(fakeTicker)\n",
        "154": "            .build();\n",
        "178": "    final Cache<Integer, Integer> cache =\n",
        "179": "        CacheBuilder.newBuilder()\n",
        "180": "            .expireAfterWrite(1000, TimeUnit.MILLISECONDS)\n",
        "181": "            .expireAfterAccess(500, TimeUnit.MILLISECONDS)\n",
        "182": "            .ticker(fakeTicker)\n",
        "183": "            .build();\n",
        "210": "    Cache<Integer, Integer> cache = CacheBuilder.newBuilder().build();\n",
        "254": "    RemovalListener<Integer, Integer> countingListener =\n",
        "255": "        new RemovalListener<Integer, Integer>() {\n",
        "256": "          @Override\n",
        "257": "          public void onRemoval(RemovalNotification<Integer, Integer> notification) {\n",
        "258": "            switch (notification.getCause()) {\n",
        "259": "              case EXPIRED:\n",
        "260": "                stats[0]++;\n",
        "261": "                break;\n",
        "262": "              case EXPLICIT:\n",
        "263": "                stats[1]++;\n",
        "264": "                break;\n",
        "265": "              case REPLACED:\n",
        "266": "                stats[2]++;\n",
        "267": "                break;\n",
        "268": "              case SIZE:\n",
        "269": "                stats[3]++;\n",
        "270": "                break;\n",
        "271": "              default:\n",
        "272": "                throw new IllegalStateException(\"No collected exceptions in GWT CacheBuilder.\");\n",
        "273": "            }\n",
        "274": "          }\n",
        "275": "        };\n",
        "276": "\n",
        "277": "    Cache<Integer, Integer> cache =\n",
        "278": "        CacheBuilder.newBuilder()\n",
        "279": "            .expireAfterWrite(1000, TimeUnit.MILLISECONDS)\n",
        "280": "            .removalListener(countingListener)\n",
        "281": "            .ticker(fakeTicker)\n",
        "282": "            .maximumSize(2)\n",
        "283": "            .build();\n",
        "317": "    Cache<Integer, Integer> cache = CacheBuilder.newBuilder().build();\n",
        "334": "    Cache<Integer, Integer> cache = CacheBuilder.newBuilder().build();\n",
        "348": "    Cache<Integer, Integer> cache = CacheBuilder.newBuilder().build();\n",
        "373": "    Cache<Integer, Integer> cache =\n",
        "374": "        CacheBuilder.newBuilder()\n",
        "375": "            .expireAfterWrite(20000, TimeUnit.MILLISECONDS)\n",
        "376": "            .ticker(fakeTicker)\n",
        "377": "            .build();\n",
        "392": "    Cache<Integer, Integer> cache =\n",
        "393": "        CacheBuilder.newBuilder()\n",
        "394": "            .expireAfterWrite(20000, TimeUnit.MILLISECONDS)\n",
        "395": "            .ticker(fakeTicker)\n",
        "396": "            .build();\n",
        "411": "    Cache<Integer, Integer> cache =\n",
        "412": "        CacheBuilder.newBuilder()\n",
        "413": "            .expireAfterWrite(1000, TimeUnit.MILLISECONDS)\n",
        "414": "            .ticker(fakeTicker)\n",
        "415": "            .build();\n",
        "430": "    Cache<Integer, Integer> cache =\n",
        "431": "        CacheBuilder.newBuilder()\n",
        "432": "            .expireAfterWrite(1000, TimeUnit.MILLISECONDS)\n",
        "433": "            .ticker(fakeTicker)\n",
        "434": "            .build();\n",
        "449": "    Cache<Integer, Integer> cache =\n",
        "450": "        CacheBuilder.newBuilder()\n",
        "451": "            .expireAfterWrite(1000, TimeUnit.MILLISECONDS)\n",
        "452": "            .ticker(fakeTicker)\n",
        "453": "            .build();\n",
        "468": "    Cache<Integer, Integer> cache =\n",
        "469": "        CacheBuilder.newBuilder()\n",
        "470": "            .expireAfterWrite(1000, TimeUnit.MILLISECONDS)\n",
        "471": "            .ticker(fakeTicker)\n",
        "472": "            .build();\n",
        "489": "    Cache<Integer, Integer> cache =\n",
        "490": "        CacheBuilder.newBuilder()\n",
        "491": "            .expireAfterWrite(1000, TimeUnit.MILLISECONDS)\n",
        "492": "            .ticker(fakeTicker)\n",
        "493": "            .build();\n"
    },
    "removed": {
        "36": " * Test suite for {@link CacheBuilder}.\n",
        "37": " * TODO(cpovirk): merge into CacheBuilderTest?\n",
        "55": "    final Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "56": "        .build();\n",
        "58": "    Callable<Integer> loader = new Callable<Integer>() {\n",
        "59": "      private int i = 0;\n",
        "61": "      @Override\n",
        "62": "      public Integer call() throws Exception {\n",
        "63": "        return ++i;\n",
        "64": "      }\n",
        "65": "    };\n",
        "82": "    final Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "83": "        .maximumSize(4)\n",
        "84": "        .build();\n",
        "108": "    CacheLoader<Integer, Integer> loader = new CacheLoader<Integer, Integer>() {\n",
        "109": "      int i = 0;\n",
        "110": "      @Override\n",
        "111": "      public Integer load(Integer key) throws Exception {\n",
        "112": "        return i++;\n",
        "113": "      }\n",
        "115": "    };\n",
        "117": "    LoadingCache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "118": "        .build(loader);\n",
        "135": "    final Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "136": "        .expireAfterAccess(1000, TimeUnit.MILLISECONDS)\n",
        "137": "        .ticker(fakeTicker)\n",
        "138": "        .build();\n",
        "152": "    final Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "153": "        .expireAfterWrite(1000, TimeUnit.MILLISECONDS)\n",
        "154": "        .ticker(fakeTicker)\n",
        "155": "        .build();\n",
        "179": "    final Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "180": "        .expireAfterWrite(1000, TimeUnit.MILLISECONDS)\n",
        "181": "        .expireAfterAccess(500, TimeUnit.MILLISECONDS)\n",
        "182": "        .ticker(fakeTicker)\n",
        "183": "        .build();\n",
        "210": "    Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "211": "        .build();\n",
        "255": "    RemovalListener<Integer, Integer> countingListener = new RemovalListener<Integer, Integer>() {\n",
        "256": "      @Override\n",
        "257": "      public void onRemoval(RemovalNotification<Integer, Integer> notification) {\n",
        "258": "        switch (notification.getCause()) {\n",
        "259": "          case EXPIRED:\n",
        "260": "            stats[0]++;\n",
        "261": "            break;\n",
        "262": "          case EXPLICIT:\n",
        "263": "            stats[1]++;\n",
        "264": "            break;\n",
        "265": "          case REPLACED:\n",
        "266": "            stats[2]++;\n",
        "267": "            break;\n",
        "268": "          case SIZE:\n",
        "269": "            stats[3]++;\n",
        "270": "            break;\n",
        "271": "          default:\n",
        "272": "            throw new IllegalStateException(\"No collected exceptions in GWT CacheBuilder.\");\n",
        "273": "        }\n",
        "274": "      }\n",
        "275": "    };\n",
        "276": "\n",
        "277": "    Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "278": "        .expireAfterWrite(1000, TimeUnit.MILLISECONDS)\n",
        "279": "        .removalListener(countingListener)\n",
        "280": "        .ticker(fakeTicker)\n",
        "281": "        .maximumSize(2)\n",
        "282": "        .build();\n",
        "316": "    Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "317": "        .build();\n",
        "334": "    Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "335": "        .build();\n",
        "349": "    Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "350": "        .build();\n",
        "375": "    Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "376": "        .expireAfterWrite(20000, TimeUnit.MILLISECONDS)\n",
        "377": "        .ticker(fakeTicker)\n",
        "378": "        .build();\n",
        "393": "    Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "394": "        .expireAfterWrite(20000, TimeUnit.MILLISECONDS)\n",
        "395": "        .ticker(fakeTicker)\n",
        "396": "        .build();\n",
        "411": "    Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "412": "        .expireAfterWrite(1000, TimeUnit.MILLISECONDS)\n",
        "413": "        .ticker(fakeTicker)\n",
        "414": "        .build();\n",
        "429": "    Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "430": "        .expireAfterWrite(1000, TimeUnit.MILLISECONDS)\n",
        "431": "        .ticker(fakeTicker)\n",
        "432": "        .build();\n",
        "447": "    Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "448": "        .expireAfterWrite(1000, TimeUnit.MILLISECONDS)\n",
        "449": "        .ticker(fakeTicker)\n",
        "450": "        .build();\n",
        "465": "    Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "466": "        .expireAfterWrite(1000, TimeUnit.MILLISECONDS)\n",
        "467": "        .ticker(fakeTicker)\n",
        "468": "        .build();\n",
        "485": "    Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "486": "        .expireAfterWrite(1000, TimeUnit.MILLISECONDS)\n",
        "487": "        .ticker(fakeTicker)\n",
        "488": "        .build();\n"
    }
}