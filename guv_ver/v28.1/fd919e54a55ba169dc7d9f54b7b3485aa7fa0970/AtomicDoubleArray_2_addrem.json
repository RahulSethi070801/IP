{
    "addition": {
        "54": "   * Creates a new {@code AtomicDoubleArray} of the given length, with all elements initially zero.\n",
        "63": "   * Creates a new {@code AtomicDoubleArray} with the same length as, and all elements copied from,\n",
        "64": "   * the given array.\n",
        "120": "   * Atomically sets the element at position {@code i} to the given value and returns the old value.\n",
        "132": "   * Atomically sets the element at position {@code i} to the given updated value if the current\n",
        "133": "   * value is <a href=\"#bitEquals\">bitwise equal</a> to the expected value.\n",
        "138": "   * @return true if successful. False return indicates that the actual value was not equal to the\n",
        "139": "   *     expected value.\n",
        "142": "    return longs.compareAndSet(i, doubleToRawLongBits(expect), doubleToRawLongBits(update));\n",
        "146": "   * Atomically sets the element at position {@code i} to the given updated value if the current\n",
        "147": "   * value is <a href=\"#bitEquals\">bitwise equal</a> to the expected value.\n",
        "151": "   * fail spuriously</a> and does not provide ordering guarantees, so is only rarely an appropriate\n",
        "152": "   * alternative to {@code compareAndSet}.\n",
        "160": "    return longs.weakCompareAndSet(i, doubleToRawLongBits(expect), doubleToRawLongBits(update));\n",
        "205": "   *\n",
        "217": "    for (int i = 0; ; i++) {\n",
        "229": "   * @serialData The length of the array is emitted (int), followed by all of its elements (each a\n",
        "230": "   *     {@code double}) in the proper order.\n",
        "232": "  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {\n",
        "245": "  /** Reconstitutes the instance from a stream (that is, deserializes it). */\n"
    },
    "removed": {
        "54": "   * Creates a new {@code AtomicDoubleArray} of the given length,\n",
        "55": "   * with all elements initially zero.\n",
        "64": "   * Creates a new {@code AtomicDoubleArray} with the same length\n",
        "65": "   * as, and all elements copied from, the given array.\n",
        "121": "   * Atomically sets the element at position {@code i} to the given value\n",
        "122": "   * and returns the old value.\n",
        "134": "   * Atomically sets the element at position {@code i} to the given\n",
        "135": "   * updated value\n",
        "136": "   * if the current value is <a href=\"#bitEquals\">bitwise equal</a>\n",
        "137": "   * to the expected value.\n",
        "142": "   * @return true if successful. False return indicates that\n",
        "143": "   * the actual value was not equal to the expected value.\n",
        "146": "    return longs.compareAndSet(i,\n",
        "147": "                               doubleToRawLongBits(expect),\n",
        "148": "                               doubleToRawLongBits(update));\n",
        "152": "   * Atomically sets the element at position {@code i} to the given\n",
        "153": "   * updated value\n",
        "154": "   * if the current value is <a href=\"#bitEquals\">bitwise equal</a>\n",
        "155": "   * to the expected value.\n",
        "159": "   * fail spuriously</a>\n",
        "160": "   * and does not provide ordering guarantees, so is only rarely an\n",
        "161": "   * appropriate alternative to {@code compareAndSet}.\n",
        "169": "    return longs.weakCompareAndSet(i,\n",
        "170": "                                   doubleToRawLongBits(expect),\n",
        "171": "                                   doubleToRawLongBits(update));\n",
        "227": "    for (int i = 0;; i++) {\n",
        "239": "   * @serialData The length of the array is emitted (int), followed by all\n",
        "240": "   *             of its elements (each a {@code double}) in the proper order.\n",
        "242": "  private void writeObject(java.io.ObjectOutputStream s)\n",
        "243": "      throws java.io.IOException {\n",
        "256": "  /**\n",
        "257": "   * Reconstitutes the instance from a stream (that is, deserializes it).\n",
        "258": "   */\n"
    }
}