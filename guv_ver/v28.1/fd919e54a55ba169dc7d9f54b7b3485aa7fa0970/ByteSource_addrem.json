{
    "addition": {
        "49": " *\n",
        "51": " *   <li><b>Methods that return a stream:</b> These methods should return a <i>new</i>, independent\n",
        "52": " *       instance each time they are called. The caller is responsible for ensuring that the\n",
        "53": " *       returned stream is closed.\n",
        "54": " *   <li><b>Convenience methods:</b> These are implementations of common operations that are\n",
        "55": " *       typically implemented by opening a stream using one of the methods in the first category,\n",
        "56": " *       doing something and finally closing the stream that was opened.\n",
        "65": "  /** Constructor for use by subclasses. */\n",
        "95": "   * additional buffering (for example, a {@code ByteArrayInputStream}). This method returns a new,\n",
        "96": "   * independent stream each time it is called.\n",
        "124": "   * Returns whether the source has zero bytes. The default implementation first checks {@link\n",
        "125": "   * #sizeIfKnown}, returning true if it's known to be zero and false if it's known to be non-zero.\n",
        "126": "   * If the size is not known, it falls back to opening a stream and checking for EOF.\n",
        "176": "   * absent, it will fall back to a heavyweight operation that will open a stream, read (or {@link\n",
        "177": "   * InputStream#skip(long) skip}, if possible) to the end of the stream and return the total number\n",
        "178": "   * of bytes that were read.\n",
        "235": "   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code\n",
        "236": "   *     output}\n",
        "257": "   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code\n",
        "258": "   *     sink}\n",
        "298": "   * @throws IOException if an I/O error occurs while reading from this source or if {@code\n",
        "299": "   *     processor} throws an {@code IOException}\n",
        "475": "  /** A view of a subsection of the containing byte source. */\n",
        "631": "          + Ascii.truncate(BaseEncoding.base16().encode(bytes, offset, length), 30, \"...\")\n",
        "632": "          + \")\";\n"
    },
    "removed": {
        "50": " * <li><b>Methods that return a stream:</b> These methods should return a <i>new</i>, independent\n",
        "51": " *     instance each time they are called. The caller is responsible for ensuring that the returned\n",
        "52": " *     stream is closed.\n",
        "53": " * <li><b>Convenience methods:</b> These are implementations of common operations that are typically\n",
        "54": " *     implemented by opening a stream using one of the methods in the first category, doing\n",
        "55": " *     something and finally closing the stream that was opened.\n",
        "64": "  /**\n",
        "65": "   * Constructor for use by subclasses.\n",
        "66": "   */\n",
        "96": "   * additional buffering (for example, a {@code ByteArrayInputStream}). This method returns a\n",
        "97": "   * new, independent stream each time it is called.\n",
        "125": "   * Returns whether the source has zero bytes. The default implementation first checks\n",
        "126": "   * {@link #sizeIfKnown}, returning true if it's known to be zero and false if it's known to be\n",
        "127": "   * non-zero. If the size is not known, it falls back to opening a stream and checking for EOF.\n",
        "177": "   * absent, it will fall back to a heavyweight operation that will open a stream, read (or\n",
        "178": "   * {@link InputStream#skip(long) skip}, if possible) to the end of the stream and return the total\n",
        "179": "   * number of bytes that were read.\n",
        "236": "   * @throws IOException if an I/O error occurs while reading from this source or writing to\n",
        "237": "   *     {@code output}\n",
        "258": "   * @throws IOException if an I/O error occurs while reading from this source or writing to\n",
        "259": "   *     {@code sink}\n",
        "299": "   * @throws IOException if an I/O error occurs while reading from this source or if\n",
        "300": "   *     {@code processor} throws an {@code IOException}\n",
        "476": "  /**\n",
        "477": "   * A view of a subsection of the containing byte source.\n",
        "478": "   */\n",
        "634": "          + Ascii.truncate(BaseEncoding.base16().encode(bytes, offset, length), 30, \"...\") + \")\";\n"
    }
}