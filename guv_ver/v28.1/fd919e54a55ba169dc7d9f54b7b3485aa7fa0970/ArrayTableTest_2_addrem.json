{
    "addition": {
        "40": "  @Override\n",
        "41": "  protected ArrayTable<String, Integer, Character> create(Object... data) {\n",
        "50": "  @Override\n",
        "51": "  protected void assertSize(int expectedSize) {\n",
        "55": "  @Override\n",
        "56": "  protected boolean supportsRemove() {\n",
        "60": "  @Override\n",
        "61": "  protected boolean supportsNullValues() {\n",
        "67": "  @Override\n",
        "68": "  public void testContains() {\n",
        "84": "  @Override\n",
        "85": "  public void testContainsRow() {\n",
        "94": "  @Override\n",
        "95": "  public void testContainsColumn() {\n",
        "104": "  @Override\n",
        "105": "  public void testContainsValue() {\n",
        "114": "  @Override\n",
        "115": "  public void testIsEmpty() {\n",
        "121": "  @Override\n",
        "122": "  public void testEquals() {\n",
        "128": "    Table<String, Integer, Character> reordered =\n",
        "129": "        create(\"foo\", 3, 'c', \"foo\", 1, 'a', \"bar\", 1, 'b');\n",
        "130": "    Table<String, Integer, Character> smaller = create(\"foo\", 1, 'a', \"bar\", 1, 'b');\n",
        "131": "    Table<String, Integer, Character> swapOuter =\n",
        "132": "        create(\"bar\", 1, 'a', \"foo\", 1, 'b', \"bar\", 3, 'c');\n",
        "133": "    Table<String, Integer, Character> swapValues =\n",
        "134": "        create(\"foo\", 1, 'c', \"bar\", 1, 'b', \"foo\", 3, 'a');\n",
        "145": "  @Override\n",
        "146": "  public void testHashCode() {\n",
        "151": "    int expected =\n",
        "152": "        Objects.hashCode(\"foo\", 1, 'a')\n",
        "153": "            + Objects.hashCode(\"bar\", 1, 'b')\n",
        "154": "            + Objects.hashCode(\"foo\", 3, 'c')\n",
        "155": "            + Objects.hashCode(\"bar\", 3, 0);\n",
        "159": "  @Override\n",
        "160": "  public void testRow() {\n",
        "169": "  @Override\n",
        "170": "  public void testColumn() {\n",
        "179": "  @Override\n",
        "180": "  public void testToStringSize1() {\n",
        "190": "    } catch (IllegalArgumentException expected) {\n",
        "191": "    }\n",
        "198": "    } catch (IllegalArgumentException expected) {\n",
        "199": "    }\n",
        "206": "    } catch (IllegalArgumentException expected) {\n",
        "207": "    }\n",
        "214": "    } catch (IllegalArgumentException expected) {\n",
        "215": "    }\n",
        "230": "    } catch (IndexOutOfBoundsException expected) {\n",
        "231": "    }\n",
        "242": "    Table<String, Integer, Character> original =\n",
        "243": "        create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "300": "    assertEquals(\n",
        "301": "        \"{foo={1=a, 2=null, 3=c}, \"\n",
        "302": "            + \"bar={1=b, 2=null, 3=null}, \"\n",
        "303": "            + \"cat={1=null, 2=null, 3=null}}\",\n",
        "305": "    assertEquals(\n",
        "306": "        \"{foo={1=a, 2=null, 3=c}, \"\n",
        "307": "            + \"bar={1=b, 2=null, 3=null}, \"\n",
        "308": "            + \"cat={1=null, 2=null, 3=null}}\",\n",
        "314": "    assertEquals(\n",
        "315": "        \"[(foo,1)=a, (foo,2)=null, (foo,3)=c, \"\n",
        "316": "            + \"(bar,1)=b, (bar,2)=null, (bar,3)=null, \"\n",
        "317": "            + \"(cat,1)=null, (cat,2)=null, (cat,3)=null]\",\n",
        "333": "    assertEquals(\"[a, null, c, b, null, null, null, null, null]\", table.values().toString());\n",
        "337": "    ArrayTable<String, Integer, Character> table =\n",
        "338": "        create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "343": "    ArrayTable<String, Integer, Character> table =\n",
        "344": "        create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "355": "    ArrayTable<String, Integer, Character> table =\n",
        "356": "        create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "363": "    } catch (IndexOutOfBoundsException expected) {\n",
        "364": "    }\n",
        "368": "    } catch (IndexOutOfBoundsException expected) {\n",
        "369": "    }\n",
        "373": "    } catch (IndexOutOfBoundsException expected) {\n",
        "374": "    }\n",
        "378": "    } catch (IndexOutOfBoundsException expected) {\n",
        "379": "    }\n",
        "383": "    ArrayTable<String, Integer, Character> table =\n",
        "384": "        create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "394": "    } catch (IndexOutOfBoundsException expected) {\n",
        "395": "    }\n",
        "399": "    } catch (IndexOutOfBoundsException expected) {\n",
        "400": "    }\n",
        "404": "    } catch (IndexOutOfBoundsException expected) {\n",
        "405": "    }\n",
        "409": "    } catch (IndexOutOfBoundsException expected) {\n",
        "410": "    }\n",
        "415": "    ArrayTable<String, Integer, Character> table =\n",
        "416": "        create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "442": "    ArrayTable<String, Integer, Character> table =\n",
        "443": "        create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "457": "    ArrayTable<String, Integer, Character> table =\n",
        "458": "        create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "485": "    } catch (UnsupportedOperationException expected) {\n",
        "486": "    }\n",
        "496": "    } catch (UnsupportedOperationException expected) {\n",
        "497": "    }\n"
    },
    "removed": {
        "40": "  @Override protected ArrayTable<String, Integer, Character> create(\n",
        "41": "      Object... data) {\n",
        "50": "  @Override protected void assertSize(int expectedSize) {\n",
        "54": "  @Override protected boolean supportsRemove() {\n",
        "58": "  @Override protected boolean supportsNullValues() {\n",
        "64": "  @Override public void testContains() {\n",
        "80": "  @Override public void testContainsRow() {\n",
        "89": "  @Override public void testContainsColumn() {\n",
        "98": "  @Override public void testContainsValue() {\n",
        "107": "  @Override public void testIsEmpty() {\n",
        "113": "  @Override public void testEquals() {\n",
        "119": "    Table<String, Integer, Character> reordered\n",
        "120": "        = create(\"foo\", 3, 'c', \"foo\", 1, 'a', \"bar\", 1, 'b');\n",
        "121": "    Table<String, Integer, Character> smaller\n",
        "122": "        = create(\"foo\", 1, 'a', \"bar\", 1, 'b');\n",
        "123": "    Table<String, Integer, Character> swapOuter\n",
        "124": "        = create(\"bar\", 1, 'a', \"foo\", 1, 'b', \"bar\", 3, 'c');\n",
        "125": "    Table<String, Integer, Character> swapValues\n",
        "126": "        = create(\"foo\", 1, 'c', \"bar\", 1, 'b', \"foo\", 3, 'a');\n",
        "137": "  @Override public void testHashCode() {\n",
        "142": "    int expected = Objects.hashCode(\"foo\", 1, 'a')\n",
        "143": "        + Objects.hashCode(\"bar\", 1, 'b')\n",
        "144": "        + Objects.hashCode(\"foo\", 3, 'c')\n",
        "145": "        + Objects.hashCode(\"bar\", 3, 0);\n",
        "149": "  @Override public void testRow() {\n",
        "158": "  @Override public void testColumn() {\n",
        "167": "  @Override public void testToStringSize1() {\n",
        "177": "    } catch (IllegalArgumentException expected) {}\n",
        "184": "    } catch (IllegalArgumentException expected) {}\n",
        "191": "    } catch (IllegalArgumentException expected) {}\n",
        "198": "    } catch (IllegalArgumentException expected) {}\n",
        "213": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "224": "    Table<String, Integer, Character> original\n",
        "225": "        = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "282": "    assertEquals(\"{foo={1=a, 2=null, 3=c}, \" +\n",
        "283": "        \"bar={1=b, 2=null, 3=null}, \" +\n",
        "284": "        \"cat={1=null, 2=null, 3=null}}\",\n",
        "286": "    assertEquals(\"{foo={1=a, 2=null, 3=c}, \" +\n",
        "287": "        \"bar={1=b, 2=null, 3=null}, \" +\n",
        "288": "        \"cat={1=null, 2=null, 3=null}}\",\n",
        "294": "    assertEquals(\"[(foo,1)=a, (foo,2)=null, (foo,3)=c, \" +\n",
        "295": "        \"(bar,1)=b, (bar,2)=null, (bar,3)=null, \" +\n",
        "296": "        \"(cat,1)=null, (cat,2)=null, (cat,3)=null]\",\n",
        "312": "    assertEquals(\"[a, null, c, b, null, null, null, null, null]\",\n",
        "313": "        table.values().toString());\n",
        "317": "    ArrayTable<String, Integer, Character> table\n",
        "318": "        = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "323": "    ArrayTable<String, Integer, Character> table\n",
        "324": "        = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "335": "    ArrayTable<String, Integer, Character> table\n",
        "336": "        = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "343": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "347": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "351": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "355": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "359": "    ArrayTable<String, Integer, Character> table\n",
        "360": "        = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "370": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "374": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "378": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "382": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "387": "    ArrayTable<String, Integer, Character> table\n",
        "388": "        = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "414": "    ArrayTable<String, Integer, Character> table\n",
        "415": "        = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "429": "    ArrayTable<String, Integer, Character> table\n",
        "430": "        = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c');\n",
        "457": "    } catch (UnsupportedOperationException expected) {}\n",
        "467": "    } catch (UnsupportedOperationException expected) {}\n"
    }
}