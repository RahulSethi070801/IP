{
    "addition": {
        "74": "    assertEquals(\n",
        "75": "        ImmutableList.of(1, 2, 3, 4),\n",
        "86": "    assertEquals(ImmutableList.of(1, 2, 3, 4), Lists.newArrayList(FluentIterable.of(1, 2, 3, 4)));\n",
        "90": "    assertEquals(\n",
        "91": "        ImmutableList.of(\"1\", \"2\", \"3\", \"4\"),\n",
        "161": "   * returns a {@link FluentIterable} of elements of an anonymous type whose supertypes are the <a\n",
        "162": "   * href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.9\">intersection</a> of\n",
        "163": "   * the supertypes of {@code A} and the supertypes of {@code B}.\n",
        "200": "    Iterable<Integer> iterable =\n",
        "201": "        new Iterable<Integer>() {\n",
        "202": "          @Override\n",
        "203": "          public Iterator<Integer> iterator() {\n",
        "204": "            return asList(0, 1).iterator();\n",
        "205": "          }\n",
        "206": "        };\n",
        "212": "    List<Integer> collection =\n",
        "213": "        new ArrayList<Integer>(nums) {\n",
        "214": "          @Override\n",
        "215": "          public Iterator<Integer> iterator() {\n",
        "216": "            throw new AssertionFailedError(\"Don't iterate me!\");\n",
        "217": "          }\n",
        "218": "        };\n",
        "263": "    assertEquals(\"[yam, bam, jam, ham]\", FluentIterable.of(\"yam\", \"bam\", \"jam\", \"ham\").toString());\n",
        "270": "    assertEquals(\n",
        "271": "        \"[yam, bam, jam, ham]\", FluentIterable.from(asList(\"yam\", \"bam\", \"jam\", \"ham\")).toString());\n",
        "414": "    Iterable<Integer> iterable = FluentIterable.from(input).transform(new IntegerValueOfFunction());\n",
        "423": "    Iterable<Integer> iterable = FluentIterable.from(input).transform(new IntegerValueOfFunction());\n",
        "560": "    assertEquals(\n",
        "561": "        Lists.newArrayList(\"c\", \"d\", \"e\"), Lists.newArrayList(FluentIterable.from(set).skip(2)));\n",
        "567": "    assertEquals(\n",
        "568": "        Lists.newArrayList(\"c\", \"d\", \"e\"), Lists.newArrayList(FluentIterable.from(list).skip(2)));\n",
        "584": "    assertEquals(\n",
        "585": "        Lists.newArrayList(\"a\", \"b\"), Lists.newArrayList(FluentIterable.from(set).skip(0)));\n",
        "590": "    assertEquals(\n",
        "591": "        Lists.newArrayList(\"a\", \"b\"), Lists.newArrayList(FluentIterable.from(list).skip(0)));\n",
        "595": "    new IteratorTester<Integer>(\n",
        "596": "        5,\n",
        "597": "        IteratorFeature.MODIFIABLE,\n",
        "598": "        Lists.newArrayList(2, 3),\n",
        "600": "      @Override\n",
        "601": "      protected Iterator<Integer> newTargetIterator() {\n",
        "610": "    new IteratorTester<Integer>(\n",
        "611": "        5,\n",
        "612": "        IteratorFeature.MODIFIABLE,\n",
        "613": "        Lists.newArrayList(2, 3),\n",
        "615": "      @Override\n",
        "616": "      protected Iterator<Integer> newTargetIterator() {\n",
        "705": "    assertEquals(\n",
        "706": "        Lists.newArrayList(4, 3, 2, 1),\n",
        "711": "    assertEquals(\n",
        "712": "        Lists.newArrayList(4, 3, 1, 1),\n",
        "730": "        .containsExactly(4, 3, 2, 1)\n",
        "731": "        .inOrder();\n",
        "736": "        .containsExactly(4, 3, 1)\n",
        "737": "        .inOrder();\n",
        "751": "            Maps.immutableEntry(1, \"1\"), Maps.immutableEntry(2, \"2\"), Maps.immutableEntry(3, \"3\"))\n",
        "752": "        .inOrder();\n",
        "779": "        FluentIterable.from(asList(\"one\", \"two\", \"three\", \"four\"))\n",
        "780": "            .index(\n",
        "781": "                new Function<String, Integer>() {\n",
        "782": "                  @Override\n",
        "783": "                  public Integer apply(String input) {\n",
        "784": "                    return input.length();\n",
        "785": "                  }\n",
        "786": "                });\n",
        "809": "    ImmutableMap<Integer, String> expected = ImmutableMap.of(3, \"two\", 5, \"three\", 4, \"four\");\n",
        "811": "        FluentIterable.from(asList(\"two\", \"three\", \"four\"))\n",
        "812": "            .uniqueIndex(\n",
        "813": "                new Function<String, Integer>() {\n",
        "814": "                  @Override\n",
        "815": "                  public Integer apply(String input) {\n",
        "816": "                    return input.length();\n",
        "817": "                  }\n",
        "818": "                });\n",
        "864": "        .containsExactly(1, 2, 1, 3, 5)\n",
        "865": "        .inOrder();\n",
        "869": "    assertThat(fluent(1, 3, 5).copyInto(Sets.newHashSet(1, 2))).containsExactly(1, 2, 3, 5);\n",
        "873": "    assertThat(fluent(1, 3, 5).copyInto(Sets.newHashSet(1, 2, 3, 5))).containsExactly(1, 2, 3, 5);\n",
        "880": "    Iterable<Integer> iterable =\n",
        "881": "        new Iterable<Integer>() {\n",
        "882": "          @Override\n",
        "883": "          public Iterator<Integer> iterator() {\n",
        "884": "            return iterList.iterator();\n",
        "885": "          }\n",
        "886": "        };\n",
        "889": "        .containsExactly(1, 2, 3, 9, 8, 7)\n",
        "890": "        .inOrder();\n",
        "902": "    assertEquals(\"a\", FluentIterable.from(Lists.newArrayList(\"a\", \"b\", \"c\")).get(0));\n",
        "903": "    assertEquals(\"b\", FluentIterable.from(Lists.newArrayList(\"a\", \"b\", \"c\")).get(1));\n",
        "904": "    assertEquals(\"c\", FluentIterable.from(Lists.newArrayList(\"a\", \"b\", \"c\")).get(2));\n"
    },
    "removed": {
        "74": "    assertEquals(ImmutableList.of(1, 2, 3, 4),\n",
        "85": "    assertEquals(ImmutableList.of(1, 2, 3, 4),\n",
        "86": "        Lists.newArrayList(FluentIterable.of(1, 2, 3, 4)));\n",
        "90": "    assertEquals(ImmutableList.of(\"1\", \"2\", \"3\", \"4\"),\n",
        "160": "   * returns a {@link FluentIterable} of elements of an anonymous type whose supertypes are the\n",
        "161": "   * <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.9\">intersection</a>\n",
        "162": "   * of the supertypes of {@code A} and the supertypes of {@code B}.\n",
        "199": "    Iterable<Integer> iterable = new Iterable<Integer>() {\n",
        "200": "      @Override\n",
        "201": "      public Iterator<Integer> iterator() {\n",
        "202": "        return asList(0, 1).iterator();\n",
        "203": "      }\n",
        "204": "    };\n",
        "210": "    List<Integer> collection = new ArrayList<Integer>(nums) {\n",
        "211": "      @Override public Iterator<Integer> iterator() {\n",
        "212": "        throw new AssertionFailedError(\"Don't iterate me!\");\n",
        "213": "      }\n",
        "214": "    };\n",
        "259": "    assertEquals(\"[yam, bam, jam, ham]\",\n",
        "260": "        FluentIterable.of(\"yam\", \"bam\", \"jam\", \"ham\").toString());\n",
        "267": "    assertEquals(\"[yam, bam, jam, ham]\",\n",
        "268": "        FluentIterable.from(asList(\"yam\", \"bam\", \"jam\", \"ham\")).toString());\n",
        "409": "    Iterable<Integer> iterable =\n",
        "410": "        FluentIterable.from(input).transform(new IntegerValueOfFunction());\n",
        "419": "    Iterable<Integer> iterable =\n",
        "420": "        FluentIterable.from(input).transform(new IntegerValueOfFunction());\n",
        "557": "    assertEquals(Lists.newArrayList(\"c\", \"d\", \"e\"),\n",
        "558": "        Lists.newArrayList(FluentIterable.from(set).skip(2)));\n",
        "564": "    assertEquals(Lists.newArrayList(\"c\", \"d\", \"e\"),\n",
        "565": "        Lists.newArrayList(FluentIterable.from(list).skip(2)));\n",
        "581": "    assertEquals(Lists.newArrayList(\"a\", \"b\"),\n",
        "582": "        Lists.newArrayList(FluentIterable.from(set).skip(0)));\n",
        "587": "    assertEquals(Lists.newArrayList(\"a\", \"b\"),\n",
        "588": "        Lists.newArrayList(FluentIterable.from(list).skip(0)));\n",
        "592": "    new IteratorTester<Integer>(5, IteratorFeature.MODIFIABLE, Lists.newArrayList(2, 3),\n",
        "594": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "603": "    new IteratorTester<Integer>(5, IteratorFeature.MODIFIABLE, Lists.newArrayList(2, 3),\n",
        "605": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "694": "    assertEquals(Lists.newArrayList(4, 3, 2, 1),\n",
        "699": "    assertEquals(Lists.newArrayList(4, 3, 1, 1),\n",
        "717": "        .containsExactly(4, 3, 2, 1).inOrder();\n",
        "722": "        .containsExactly(4, 3, 1).inOrder();\n",
        "736": "            Maps.immutableEntry(1, \"1\"),\n",
        "737": "            Maps.immutableEntry(2, \"2\"),\n",
        "738": "            Maps.immutableEntry(3, \"3\")).inOrder();\n",
        "765": "        FluentIterable.from(asList(\"one\", \"two\", \"three\", \"four\")).index(\n",
        "766": "            new Function<String, Integer>() {\n",
        "767": "              @Override\n",
        "768": "              public Integer apply(String input) {\n",
        "769": "                return input.length();\n",
        "770": "              }\n",
        "771": "            });\n",
        "794": "    ImmutableMap<Integer, String> expected =\n",
        "795": "        ImmutableMap.of(3, \"two\", 5, \"three\", 4, \"four\");\n",
        "797": "        FluentIterable.from(asList(\"two\", \"three\", \"four\")).uniqueIndex(\n",
        "798": "            new Function<String, Integer>() {\n",
        "799": "              @Override\n",
        "800": "              public Integer apply(String input) {\n",
        "801": "                return input.length();\n",
        "802": "              }\n",
        "803": "            });\n",
        "849": "        .containsExactly(1, 2, 1, 3, 5).inOrder();\n",
        "853": "    assertThat(fluent(1, 3, 5).copyInto(Sets.newHashSet(1, 2)))\n",
        "854": "        .containsExactly(1, 2, 3, 5);\n",
        "858": "    assertThat(fluent(1, 3, 5).copyInto(Sets.newHashSet(1, 2, 3, 5)))\n",
        "859": "        .containsExactly(1, 2, 3, 5);\n",
        "866": "    Iterable<Integer> iterable = new Iterable<Integer>() {\n",
        "867": "      @Override\n",
        "868": "      public Iterator<Integer> iterator() {\n",
        "869": "        return iterList.iterator();\n",
        "870": "      }\n",
        "871": "    };\n",
        "874": "        .containsExactly(1, 2, 3, 9, 8, 7).inOrder();\n",
        "886": "    assertEquals(\"a\", FluentIterable\n",
        "887": "        .from(Lists.newArrayList(\"a\", \"b\", \"c\")).get(0));\n",
        "888": "    assertEquals(\"b\", FluentIterable\n",
        "889": "        .from(Lists.newArrayList(\"a\", \"b\", \"c\")).get(1));\n",
        "890": "    assertEquals(\"c\", FluentIterable\n",
        "891": "        .from(Lists.newArrayList(\"a\", \"b\", \"c\")).get(2));\n"
    }
}