{
    "addition": {
        "44": " * Implementation of {@code Multimap} that does not allow duplicate key-value entries and that\n",
        "45": " * returns collections whose iterators follow the ordering in which the data was added to the\n",
        "46": " * multimap.\n",
        "48": " * <p>The collections returned by {@code keySet}, {@code keys}, and {@code asMap} iterate through\n",
        "49": " * the keys in the order they were first added to the multimap. Similarly, {@code get}, {@code\n",
        "50": " * removeAll}, and {@code replaceValues} return collections that iterate through the values in the\n",
        "51": " * order they were added. The collections generated by {@code entries} and {@code values} iterate\n",
        "52": " * across the key-value mappings in the order they were added to the multimap.\n",
        "54": " * <p>The iteration ordering of the collections generated by {@code keySet}, {@code keys}, and\n",
        "55": " * {@code asMap} has a few subtleties. As long as the set of keys remains unchanged, adding or\n",
        "56": " * removing mappings does not affect the key iteration order. However, if you remove all values\n",
        "57": " * associated with a key and then add the key back to the multimap, that key will come last in the\n",
        "58": " * key iteration order.\n",
        "60": " * <p>The multimap does not store duplicate key-value pairs. Adding a new key-value pair equal to an\n",
        "61": " * existing key-value pair has no effect.\n",
        "63": " * <p>Keys and values may be null. All optional multimap methods are supported, and all returned\n",
        "64": " * views are modifiable.\n",
        "66": " * <p>This class is not threadsafe when any concurrent operations update the multimap. Concurrent\n",
        "67": " * read operations will work correctly. To allow concurrent update operations, wrap your multimap\n",
        "68": " * with a call to {@link Multimaps#synchronizedSetMultimap}.\n",
        "71": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap\"> {@code\n",
        "72": " * Multimap}</a>.\n",
        "82": "  /** Creates a new, empty {@code LinkedHashMultimap} with the default initial capacities. */\n",
        "88": "   * Constructs an empty {@code LinkedHashMultimap} with enough capacity to hold the specified\n",
        "89": "   * numbers of keys and values without rehashing.\n",
        "93": "   * @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is\n",
        "94": "   *     negative\n",
        "102": "   * Constructs a {@code LinkedHashMultimap} with the same mappings as the specified multimap. If a\n",
        "103": "   * key-value mapping appears multiple times in the input multimap, it only appears once in the\n",
        "104": "   * constructed multimap. The new multimap has the same {@link Multimap#entries()} iteration order\n",
        "105": "   * as the input multimap, except for excluding duplicate mappings.\n",
        "232": "   * <p>Creates an empty {@code LinkedHashSet} for a collection of values for one key.\n",
        "234": "   * @return a new {@code LinkedHashSet} containing a collection of values for one key\n",
        "244": "   * <p>Creates a decorated insertion-ordered set that also keeps track of the order in which\n",
        "245": "   * key-value pairs are added to the multimap.\n",
        "258": "   * <p>If {@code values} is not empty and the multimap already contains a mapping for {@code key},\n",
        "259": "   * the {@code keySet()} ordering is unchanged. However, the provided values always come last in\n",
        "260": "   * the {@link #entries()} and {@link #values()} iteration orderings.\n",
        "269": "   * Returns a set of all key-value pairs. Changes to the returned set will update the underlying\n",
        "270": "   * multimap, and vice versa. The entries set does not support the {@code add} or {@code addAll}\n",
        "271": "   * operations.\n",
        "273": "   * <p>The iterator generated by the returned set traverses the entries in the order they were\n",
        "274": "   * added to the multimap.\n",
        "276": "   * <p>Each entry is an immutable snapshot of a key-value mapping in the multimap, taken at the\n",
        "277": "   * time the entry is returned by a method call to the collection or its iterator.\n",
        "285": "   * Returns a view collection of all <i>distinct</i> keys contained in this multimap. Note that the\n",
        "286": "   * key set contains a key if and only if this multimap maps that key to at least one value.\n",
        "288": "   * <p>The iterator generated by the returned set traverses the keys in the order they were first\n",
        "289": "   * added to the multimap.\n",
        "291": "   * <p>Changes to the returned set will update the underlying multimap, and vice versa. However,\n",
        "292": "   * <i>adding</i> to the returned set is not possible.\n",
        "300": "   * Returns a collection of all values in the multimap. Changes to the returned collection will\n",
        "301": "   * update the underlying multimap, and vice versa.\n",
        "303": "   * <p>The iterator generated by the returned collection traverses the values in the order they\n",
        "304": "   * were added to the multimap.\n",
        "549": "   * @serialData the expected values per key, the number of distinct keys, the number of entries,\n",
        "550": "   *     and the entries in order\n"
    },
    "removed": {
        "44": " * Implementation of {@code Multimap} that does not allow duplicate key-value\n",
        "45": " * entries and that returns collections whose iterators follow the ordering in\n",
        "46": " * which the data was added to the multimap.\n",
        "48": " * <p>The collections returned by {@code keySet}, {@code keys}, and {@code\n",
        "49": " * asMap} iterate through the keys in the order they were first added to the\n",
        "50": " * multimap. Similarly, {@code get}, {@code removeAll}, and {@code\n",
        "51": " * replaceValues} return collections that iterate through the values in the\n",
        "52": " * order they were added. The collections generated by {@code entries} and\n",
        "53": " * {@code values} iterate across the key-value mappings in the order they were\n",
        "54": " * added to the multimap.\n",
        "56": " * <p>The iteration ordering of the collections generated by {@code keySet},\n",
        "57": " * {@code keys}, and {@code asMap} has a few subtleties. As long as the set of\n",
        "58": " * keys remains unchanged, adding or removing mappings does not affect the key\n",
        "59": " * iteration order. However, if you remove all values associated with a key and\n",
        "60": " * then add the key back to the multimap, that key will come last in the key\n",
        "61": " * iteration order.\n",
        "63": " * <p>The multimap does not store duplicate key-value pairs. Adding a new\n",
        "64": " * key-value pair equal to an existing key-value pair has no effect.\n",
        "66": " * <p>Keys and values may be null. All optional multimap methods are supported,\n",
        "67": " * and all returned views are modifiable.\n",
        "69": " * <p>This class is not threadsafe when any concurrent operations update the\n",
        "70": " * multimap. Concurrent read operations will work correctly. To allow concurrent\n",
        "71": " * update operations, wrap your multimap with a call to {@link\n",
        "72": " * Multimaps#synchronizedSetMultimap}.\n",
        "75": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap\">\n",
        "76": " * {@code Multimap}</a>.\n",
        "86": "  /**\n",
        "87": "   * Creates a new, empty {@code LinkedHashMultimap} with the default initial\n",
        "88": "   * capacities.\n",
        "89": "   */\n",
        "95": "   * Constructs an empty {@code LinkedHashMultimap} with enough capacity to hold\n",
        "96": "   * the specified numbers of keys and values without rehashing.\n",
        "100": "   * @throws IllegalArgumentException if {@code expectedKeys} or {@code\n",
        "101": "   *      expectedValuesPerKey} is negative\n",
        "109": "   * Constructs a {@code LinkedHashMultimap} with the same mappings as the\n",
        "110": "   * specified multimap. If a key-value mapping appears multiple times in the\n",
        "111": "   * input multimap, it only appears once in the constructed multimap. The new\n",
        "112": "   * multimap has the same {@link Multimap#entries()} iteration order as the\n",
        "113": "   * input multimap, except for excluding duplicate mappings.\n",
        "240": "   * <p>Creates an empty {@code LinkedHashSet} for a collection of values for\n",
        "241": "   * one key.\n",
        "243": "   * @return a new {@code LinkedHashSet} containing a collection of values for\n",
        "244": "   *     one key\n",
        "254": "   * <p>Creates a decorated insertion-ordered set that also keeps track of the\n",
        "255": "   * order in which key-value pairs are added to the multimap.\n",
        "268": "   * <p>If {@code values} is not empty and the multimap already contains a\n",
        "269": "   * mapping for {@code key}, the {@code keySet()} ordering is unchanged.\n",
        "270": "   * However, the provided values always come last in the {@link #entries()} and\n",
        "271": "   * {@link #values()} iteration orderings.\n",
        "280": "   * Returns a set of all key-value pairs. Changes to the returned set will\n",
        "281": "   * update the underlying multimap, and vice versa. The entries set does not\n",
        "282": "   * support the {@code add} or {@code addAll} operations.\n",
        "284": "   * <p>The iterator generated by the returned set traverses the entries in the\n",
        "285": "   * order they were added to the multimap.\n",
        "287": "   * <p>Each entry is an immutable snapshot of a key-value mapping in the\n",
        "288": "   * multimap, taken at the time the entry is returned by a method call to the\n",
        "289": "   * collection or its iterator.\n",
        "297": "   * Returns a view collection of all <i>distinct</i> keys contained in this\n",
        "298": "   * multimap. Note that the key set contains a key if and only if this multimap\n",
        "299": "   * maps that key to at least one value.\n",
        "301": "   * <p>The iterator generated by the returned set traverses the keys in the\n",
        "302": "   * order they were first added to the multimap.\n",
        "304": "   * <p>Changes to the returned set will update the underlying multimap, and\n",
        "305": "   * vice versa. However, <i>adding</i> to the returned set is not possible.\n",
        "313": "   * Returns a collection of all values in the multimap. Changes to the returned\n",
        "314": "   * collection will update the underlying multimap, and vice versa.\n",
        "316": "   * <p>The iterator generated by the returned collection traverses the values\n",
        "317": "   * in the order they were added to the multimap.\n",
        "562": "   * @serialData the expected values per key, the number of distinct keys,\n",
        "563": "   * the number of entries, and the entries in order\n"
    }
}