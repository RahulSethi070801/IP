{
    "addition": {
        "66": "  /** A typical timeout value we'll use in the tests. */\n",
        "69": "  /** How long to wait when determining that a thread is blocked if we expect it to be blocked. */\n",
        "100": "  /** Timeout values to combine with each {@link Scenario}. */\n",
        "123": "  /** Convenient subsets of the {@link Timeout} enumeration for specifying scenario outcomes. */\n",
        "139": "  /** Possible outcomes of calling any of the methods under test. */\n",
        "142": "    /** The method returned normally and is either void or returned true. */\n",
        "145": "    /** The method returned false. */\n",
        "148": "    /** The method threw an InterruptedException. */\n",
        "151": "    /** The method did not return or throw anything. */\n",
        "160": "  /** Identifies all enterXxx and tryEnterXxx methods. */\n",
        "165": "  /** Identifies just tryEnterXxx methods (a subset of {@link #isAnyEnter}), which never block. */\n",
        "178": "  /** Identifies all waitForXxx methods, which must be called while occupying the monitor. */\n",
        "183": "  /** Determines whether the given method takes a Guard as its first parameter. */\n",
        "189": "  /** Determines whether the given method takes a time and unit as its last two parameters. */\n",
        "197": "  /** Determines whether the given method returns a boolean value. */\n",
        "202": "  /** Determines whether the given method can throw InterruptedException. */\n",
        "207": "  /** Sorts the given methods primarily by name and secondarily by number of parameters. */\n",
        "209": "    Arrays.sort(\n",
        "210": "        methods,\n",
        "211": "        new Comparator<Method>() {\n",
        "212": "          @Override\n",
        "213": "          public int compare(Method m1, Method m2) {\n",
        "214": "            int nameComparison = m1.getName().compareTo(m2.getName());\n",
        "215": "            if (nameComparison != 0) {\n",
        "216": "              return nameComparison;\n",
        "217": "            } else {\n",
        "218": "              return Ints.compare(m1.getParameterTypes().length, m2.getParameterTypes().length);\n",
        "219": "            }\n",
        "220": "          }\n",
        "221": "        });\n",
        "224": "  /** Validates that the given method's signature meets all of our assumptions. */\n",
        "283": "  /** Generates all test cases appropriate for the given method. */\n",
        "286": "      for (boolean fair1 : new boolean[] {true, false}) {\n",
        "287": "        for (boolean fair2 : new boolean[] {true, false}) {\n",
        "293": "      addTests(\n",
        "294": "          suite,\n",
        "295": "          method,\n",
        "299": "      addTests(\n",
        "300": "          suite,\n",
        "301": "          method,\n",
        "307": "      addTests(\n",
        "308": "          suite,\n",
        "309": "          method,\n",
        "315": "      addTests(\n",
        "316": "          suite,\n",
        "317": "          method,\n",
        "321": "      addTests(\n",
        "322": "          suite,\n",
        "323": "          method,\n",
        "326": "          isGuarded(method) ? Outcome.HANG : (isTryEnter(method) ? Outcome.FAILURE : Outcome.HANG));\n",
        "327": "      addTests(\n",
        "328": "          suite,\n",
        "329": "          method,\n",
        "336": "      addTests(\n",
        "337": "          suite, method, Scenario.SATISFIED_BEFORE_WAITING, TimeoutsToUse.ANY, Outcome.SUCCESS);\n",
        "338": "      addTests(\n",
        "339": "          suite, method, Scenario.SATISFIED_WHILE_WAITING, TimeoutsToUse.INFINITE, Outcome.SUCCESS);\n",
        "340": "      addTests(\n",
        "341": "          suite, method, Scenario.SATISFIED_WHILE_WAITING, TimeoutsToUse.PAST, Outcome.FAILURE);\n",
        "342": "      addTests(\n",
        "343": "          suite,\n",
        "344": "          method,\n",
        "348": "      addTests(\n",
        "349": "          suite,\n",
        "350": "          method,\n",
        "354": "      addTests(\n",
        "355": "          suite,\n",
        "356": "          method,\n",
        "360": "      addTests(\n",
        "361": "          suite,\n",
        "362": "          method,\n",
        "367": "      addTests(\n",
        "368": "          suite,\n",
        "369": "          method,\n",
        "373": "      addTests(\n",
        "374": "          suite,\n",
        "375": "          method,\n",
        "389": "  private static void addTests(\n",
        "390": "      TestSuite suite,\n",
        "391": "      Method method,\n",
        "392": "      Scenario scenario,\n",
        "393": "      TimeoutsToUse timeoutsToUse,\n",
        "394": "      Outcome expectedOutcome) {\n",
        "395": "    for (boolean fair : new boolean[] {true, false}) {\n",
        "409": "  /** A guard that encapsulates a simple, mutable boolean flag. */\n",
        "454": "    return String.format(\n",
        "455": "        Locale.ROOT,\n",
        "466": "    final Runnable runChosenTest =\n",
        "467": "        new Runnable() {\n",
        "468": "          @Override\n",
        "469": "          public void run() {\n",
        "470": "            runChosenTest();\n",
        "471": "          }\n",
        "472": "        };\n",
        "474": "    startThread(\n",
        "475": "        new Runnable() {\n",
        "476": "          @Override\n",
        "477": "          public void run() {\n",
        "478": "            task.run();\n",
        "479": "          }\n",
        "480": "        });\n",
        "482": "    long hangDelayMillis =\n",
        "483": "        (expectedOutcome == Outcome.HANG)\n",
        "484": "            ? EXPECTED_HANG_DELAY_MILLIS\n",
        "485": "            : UNEXPECTED_HANG_DELAY_MILLIS;\n",
        "486": "    boolean hung =\n",
        "487": "        !awaitUninterruptibly(callCompletedLatch, hangDelayMillis, TimeUnit.MILLISECONDS);\n",
        "510": "    assertTrue(\n",
        "511": "        \"Monitor still occupied in tearDown()\",\n",
        "547": "    assertEquals(\n",
        "548": "        interruptedBeforeCall && expectedOutcome != Outcome.INTERRUPT, interruptedAfterCall);\n",
        "587": "      assertEquals(\n",
        "588": "          interruptedBeforeCall && expectedOutcome != Outcome.INTERRUPT, interruptedAfterCall);\n",
        "670": "    startThread(\n",
        "671": "        new Runnable() {\n",
        "672": "          @Override\n",
        "673": "          public void run() {\n",
        "674": "            startedLatch.countDown();\n",
        "675": "            enterSatisfyGuardAndLeaveInCurrentThread();\n",
        "676": "          }\n",
        "677": "        });\n",
        "683": "    startThread(\n",
        "684": "        new Runnable() {\n",
        "685": "          @Override\n",
        "686": "          public void run() {\n",
        "687": "            monitor.enter();\n",
        "688": "            try {\n",
        "689": "              enteredLatch.countDown();\n",
        "690": "              awaitUninterruptibly(tearDownLatch);\n",
        "691": "              guard.setSatisfied(true);\n",
        "692": "            } finally {\n",
        "693": "              monitor.leave();\n",
        "694": "            }\n",
        "695": "          }\n",
        "696": "        });\n",
        "712": "  private static TestCase generateGuardWithWrongMonitorTestCase(\n",
        "713": "      final Method method, final boolean fair1, final boolean fair2) {\n",
        "716": "      @Override\n",
        "717": "      protected void runTest() throws Throwable {\n",
        "747": "  private static TestCase generateWaitForWhenNotOccupyingTestCase(\n",
        "748": "      final Method method, final boolean fair) {\n",
        "750": "    String testName =\n",
        "751": "        method.getName()\n",
        "752": "            + (fair ? \"(fair)\" : \"(nonfair)\")\n",
        "753": "            + (timed ? \"(0ms)\" : \"()\")\n",
        "754": "            + \"/NotOccupying->IMSE\";\n",
        "756": "      @Override\n",
        "757": "      protected void runTest() throws Throwable {\n"
    },
    "removed": {
        "66": "  /**\n",
        "67": "   * A typical timeout value we'll use in the tests.\n",
        "68": "   */\n",
        "71": "  /**\n",
        "72": "   * How long to wait when determining that a thread is blocked if we expect it to be blocked.\n",
        "73": "   */\n",
        "103": "\n",
        "106": "  /**\n",
        "107": "   * Timeout values to combine with each {@link Scenario}.\n",
        "108": "   */\n",
        "110": "\n",
        "130": "\n",
        "133": "  /**\n",
        "134": "   * Convenient subsets of the {@link Timeout} enumeration for specifying scenario outcomes.\n",
        "135": "   */\n",
        "137": "\n",
        "150": "\n",
        "153": "  /**\n",
        "154": "   * Possible outcomes of calling any of the methods under test.\n",
        "155": "   */\n",
        "158": "    /**\n",
        "159": "     * The method returned normally and is either void or returned true.\n",
        "160": "     */\n",
        "163": "    /**\n",
        "164": "     * The method returned false.\n",
        "165": "     */\n",
        "168": "    /**\n",
        "169": "     * The method threw an InterruptedException.\n",
        "170": "     */\n",
        "173": "    /**\n",
        "174": "     * The method did not return or throw anything.\n",
        "175": "     */\n",
        "182": "\n",
        "185": "  /**\n",
        "186": "   * Identifies all enterXxx and tryEnterXxx methods.\n",
        "187": "   */\n",
        "192": "  /**\n",
        "193": "   * Identifies just tryEnterXxx methods (a subset of {@link #isAnyEnter}), which never block.\n",
        "194": "   */\n",
        "207": "  /**\n",
        "208": "   * Identifies all waitForXxx methods, which must be called while occupying the monitor.\n",
        "209": "   */\n",
        "214": "  /**\n",
        "215": "   * Determines whether the given method takes a Guard as its first parameter.\n",
        "216": "   */\n",
        "222": "  /**\n",
        "223": "   * Determines whether the given method takes a time and unit as its last two parameters.\n",
        "224": "   */\n",
        "232": "  /**\n",
        "233": "   * Determines whether the given method returns a boolean value.\n",
        "234": "   */\n",
        "239": "  /**\n",
        "240": "   * Determines whether the given method can throw InterruptedException.\n",
        "241": "   */\n",
        "246": "  /**\n",
        "247": "   * Sorts the given methods primarily by name and secondarily by number of parameters.\n",
        "248": "   */\n",
        "250": "    Arrays.sort(methods, new Comparator<Method>() {\n",
        "251": "      @Override public int compare(Method m1, Method m2) {\n",
        "252": "        int nameComparison = m1.getName().compareTo(m2.getName());\n",
        "253": "        if (nameComparison != 0) {\n",
        "254": "          return nameComparison;\n",
        "255": "        } else {\n",
        "256": "          return Ints.compare(m1.getParameterTypes().length, m2.getParameterTypes().length);\n",
        "257": "        }\n",
        "258": "      }\n",
        "259": "    });\n",
        "262": "  /**\n",
        "263": "   * Validates that the given method's signature meets all of our assumptions.\n",
        "264": "   */\n",
        "323": "  /**\n",
        "324": "   * Generates all test cases appropriate for the given method.\n",
        "325": "   */\n",
        "328": "      for (boolean fair1 : new boolean[] { true, false }) {\n",
        "329": "        for (boolean fair2 : new boolean[] { true, false }) {\n",
        "335": "      addTests(suite, method,\n",
        "339": "      addTests(suite, method,\n",
        "345": "      addTests(suite, method,\n",
        "351": "      addTests(suite, method,\n",
        "355": "      addTests(suite, method,\n",
        "358": "          isGuarded(method)\n",
        "359": "              ? Outcome.HANG\n",
        "360": "              : (isTryEnter(method) ? Outcome.FAILURE : Outcome.HANG));\n",
        "361": "      addTests(suite, method,\n",
        "368": "      addTests(suite, method,\n",
        "369": "          Scenario.SATISFIED_BEFORE_WAITING,\n",
        "370": "          TimeoutsToUse.ANY,\n",
        "371": "          Outcome.SUCCESS);\n",
        "372": "      addTests(suite, method,\n",
        "373": "          Scenario.SATISFIED_WHILE_WAITING,\n",
        "374": "          TimeoutsToUse.INFINITE,\n",
        "375": "          Outcome.SUCCESS);\n",
        "376": "      addTests(suite, method,\n",
        "377": "          Scenario.SATISFIED_WHILE_WAITING,\n",
        "378": "          TimeoutsToUse.PAST,\n",
        "379": "          Outcome.FAILURE);\n",
        "380": "      addTests(suite, method,\n",
        "384": "      addTests(suite, method,\n",
        "388": "      addTests(suite, method,\n",
        "392": "      addTests(suite, method,\n",
        "397": "      addTests(suite, method,\n",
        "401": "      addTests(suite, method,\n",
        "415": "  private static void addTests(TestSuite suite, Method method, Scenario scenario,\n",
        "416": "      TimeoutsToUse timeoutsToUse, Outcome expectedOutcome) {\n",
        "417": "    for (boolean fair : new boolean[] { true, false }) {\n",
        "431": "  /**\n",
        "432": "   * A guard that encapsulates a simple, mutable boolean flag.\n",
        "433": "   */\n",
        "479": "    return String.format(Locale.ROOT,\n",
        "490": "    final Runnable runChosenTest = new Runnable() {\n",
        "491": "      @Override public void run() { runChosenTest(); }\n",
        "492": "    };\n",
        "494": "    startThread(new Runnable() {\n",
        "495": "        @Override public void run() { task.run(); }\n",
        "496": "      });\n",
        "498": "    long hangDelayMillis = (expectedOutcome == Outcome.HANG)\n",
        "499": "        ? EXPECTED_HANG_DELAY_MILLIS\n",
        "500": "        : UNEXPECTED_HANG_DELAY_MILLIS;\n",
        "501": "    boolean hung = !awaitUninterruptibly(\n",
        "502": "        callCompletedLatch, hangDelayMillis, TimeUnit.MILLISECONDS);\n",
        "525": "    assertTrue(\"Monitor still occupied in tearDown()\",\n",
        "561": "    assertEquals(interruptedBeforeCall && expectedOutcome != Outcome.INTERRUPT,\n",
        "562": "        interruptedAfterCall);\n",
        "601": "      assertEquals(interruptedBeforeCall && expectedOutcome != Outcome.INTERRUPT,\n",
        "602": "          interruptedAfterCall);\n",
        "684": "    startThread(new Runnable() {\n",
        "685": "      @Override public void run() {\n",
        "686": "        startedLatch.countDown();\n",
        "687": "        enterSatisfyGuardAndLeaveInCurrentThread();\n",
        "688": "      }\n",
        "689": "    });\n",
        "695": "    startThread(new Runnable() {\n",
        "696": "      @Override public void run() {\n",
        "697": "        monitor.enter();\n",
        "698": "        try {\n",
        "699": "          enteredLatch.countDown();\n",
        "700": "          awaitUninterruptibly(tearDownLatch);\n",
        "701": "          guard.setSatisfied(true);\n",
        "702": "        } finally {\n",
        "703": "          monitor.leave();\n",
        "704": "        }\n",
        "705": "      }\n",
        "706": "    });\n",
        "722": "  private static TestCase generateGuardWithWrongMonitorTestCase(final Method method,\n",
        "723": "                                                                final boolean fair1,\n",
        "724": "                                                                final boolean fair2) {\n",
        "727": "      @Override protected void runTest() throws Throwable {\n",
        "757": "  private static TestCase generateWaitForWhenNotOccupyingTestCase(final Method method,\n",
        "758": "                                                                  final boolean fair) {\n",
        "760": "    String testName = method.getName()\n",
        "761": "        + (fair ? \"(fair)\" : \"(nonfair)\")\n",
        "762": "        + (timed ? \"(0ms)\" : \"()\")\n",
        "763": "        + \"/NotOccupying->IMSE\";\n",
        "765": "      @Override protected void runTest() throws Throwable {\n"
    }
}