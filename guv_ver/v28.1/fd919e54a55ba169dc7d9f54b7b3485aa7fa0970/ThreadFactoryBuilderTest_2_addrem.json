{
    "addition": {
        "35": "  private final Runnable monitoredRunnable =\n",
        "36": "      new Runnable() {\n",
        "37": "        @Override\n",
        "38": "        public void run() {\n",
        "39": "          completed = true;\n",
        "40": "        }\n",
        "41": "      };\n",
        "45": "        @Override\n",
        "46": "        public void uncaughtException(Thread t, Throwable e) {\n",
        "54": "  @Override\n",
        "55": "  public void setUp() {\n",
        "64": "    Thread defaultThread = Executors.defaultThreadFactory().newThread(monitoredRunnable);\n",
        "68": "    assertSame(defaultThread.getUncaughtExceptionHandler(), thread.getUncaughtExceptionHandler());\n",
        "87": "    assertThat(thread2.getName().substring(0, thread.getName().lastIndexOf('-')))\n",
        "88": "        .isNotEqualTo(thread3.getName().substring(0, thread.getName().lastIndexOf('-')));\n",
        "99": "      assertEquals(rootLocaleFormat(format, i), factory.newThread(monitoredRunnable).getName());\n",
        "107": "      assertEquals(rootLocaleFormat(format, i), factory.newThread(monitoredRunnable).getName());\n",
        "148": "    assertEquals(\n",
        "149": "        UNCAUGHT_EXCEPTION_HANDLER,\n",
        "150": "        builder\n",
        "151": "            .setUncaughtExceptionHandler(UNCAUGHT_EXCEPTION_HANDLER)\n",
        "152": "            .build()\n",
        "153": "            .newThread(monitoredRunnable)\n",
        "154": "            .getUncaughtExceptionHandler());\n",
        "168": "    unused = builder.build(); // this is allowed\n",
        "169": "    unused = builder.build(); // this is *also* allowed\n",
        "176": "    builder.setPriority(2); // change the state of the builder\n",
        "184": "    ThreadFactory backingThreadFactory =\n",
        "185": "        new ThreadFactory() {\n",
        "186": "          @Override\n",
        "187": "          public Thread newThread(Runnable r) {\n",
        "188": "            Thread thread = new Thread(r);\n",
        "189": "            thread.setName(THREAD_NAME);\n",
        "190": "            thread.setPriority(THREAD_PRIORITY);\n",
        "191": "            thread.setDaemon(THREAD_DAEMON);\n",
        "192": "            thread.setUncaughtExceptionHandler(UNCAUGHT_EXCEPTION_HANDLER);\n",
        "193": "            return thread;\n",
        "194": "          }\n",
        "195": "        };\n",
        "196": "\n",
        "197": "    Thread thread =\n",
        "198": "        builder.setThreadFactory(backingThreadFactory).build().newThread(monitoredRunnable);\n",
        "203": "    assertSame(UNCAUGHT_EXCEPTION_HANDLER, thread.getUncaughtExceptionHandler());\n"
    },
    "removed": {
        "35": "  private final Runnable monitoredRunnable = new Runnable() {\n",
        "36": "    @Override public void run() {\n",
        "37": "      completed = true;\n",
        "38": "    }\n",
        "39": "  };\n",
        "43": "        @Override public void uncaughtException(Thread t, Throwable e) {\n",
        "51": "  @Override public void setUp() {\n",
        "60": "    Thread defaultThread =\n",
        "61": "        Executors.defaultThreadFactory().newThread(monitoredRunnable);\n",
        "65": "    assertSame(defaultThread.getUncaughtExceptionHandler(),\n",
        "66": "        thread.getUncaughtExceptionHandler());\n",
        "85": "    assertThat(\n",
        "86": "        thread2.getName().substring(0, thread.getName().lastIndexOf('-')))\n",
        "87": "        .isNotEqualTo(\n",
        "88": "            thread3.getName().substring(0, thread.getName().lastIndexOf('-')));\n",
        "99": "      assertEquals(rootLocaleFormat(format, i),\n",
        "100": "          factory.newThread(monitoredRunnable).getName());\n",
        "108": "      assertEquals(rootLocaleFormat(format, i),\n",
        "109": "          factory.newThread(monitoredRunnable).getName());\n",
        "150": "    assertEquals(UNCAUGHT_EXCEPTION_HANDLER,\n",
        "151": "        builder.setUncaughtExceptionHandler(UNCAUGHT_EXCEPTION_HANDLER).build()\n",
        "152": "        .newThread(monitoredRunnable).getUncaughtExceptionHandler());\n",
        "166": "    unused = builder.build();  // this is allowed\n",
        "167": "    unused = builder.build();  // this is *also* allowed\n",
        "174": "    builder.setPriority(2);  // change the state of the builder\n",
        "182": "    ThreadFactory backingThreadFactory = new ThreadFactory() {\n",
        "183": "      @Override public Thread newThread(Runnable r) {\n",
        "184": "        Thread thread = new Thread(r);\n",
        "185": "        thread.setName(THREAD_NAME);\n",
        "186": "        thread.setPriority(THREAD_PRIORITY);\n",
        "187": "        thread.setDaemon(THREAD_DAEMON);\n",
        "188": "        thread.setUncaughtExceptionHandler(UNCAUGHT_EXCEPTION_HANDLER);\n",
        "189": "        return thread;\n",
        "190": "      }\n",
        "191": "    };\n",
        "192": "\n",
        "193": "    Thread thread = builder.setThreadFactory(backingThreadFactory).build()\n",
        "194": "        .newThread(monitoredRunnable);\n",
        "199": "    assertSame(UNCAUGHT_EXCEPTION_HANDLER,\n",
        "200": "        thread.getUncaughtExceptionHandler());\n"
    }
}