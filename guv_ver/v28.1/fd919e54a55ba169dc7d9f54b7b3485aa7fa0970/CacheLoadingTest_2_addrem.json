{
    "addition": {
        "102": "    LoadingCache<Object, Object> cache =\n",
        "103": "        CacheBuilder.newBuilder().recordStats().build(identityLoader());\n",
        "163": "    CacheLoader<Object, Object> loader =\n",
        "164": "        new CacheLoader<Object, Object>() {\n",
        "165": "          @Override\n",
        "166": "          public Object load(Object key) {\n",
        "167": "            return one;\n",
        "168": "          }\n",
        "170": "          @Override\n",
        "171": "          public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "172": "            return Futures.immediateFuture(two);\n",
        "173": "          }\n",
        "174": "        };\n",
        "211": "    CacheLoader<Object, Object> loader =\n",
        "212": "        new CacheLoader<Object, Object>() {\n",
        "213": "          @Override\n",
        "214": "          public Object load(Object key) {\n",
        "215": "            return one;\n",
        "216": "          }\n",
        "218": "          @Override\n",
        "219": "          public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "220": "            return Futures.immediateFuture(two);\n",
        "221": "          }\n",
        "222": "        };\n",
        "224": "    LoadingCache<Object, Object> cache =\n",
        "225": "        CacheBuilder.newBuilder()\n",
        "226": "            .recordStats()\n",
        "227": "            .ticker(ticker)\n",
        "228": "            .refreshAfterWrite(1, MILLISECONDS)\n",
        "229": "            .build(loader);\n",
        "273": "    CacheLoader<Object, Object> loader =\n",
        "274": "        new CacheLoader<Object, Object>() {\n",
        "275": "          @Override\n",
        "276": "          public Object load(Object key) {\n",
        "277": "            return one;\n",
        "278": "          }\n",
        "280": "          @Override\n",
        "281": "          public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "282": "            return Futures.immediateFuture(two);\n",
        "283": "          }\n",
        "284": "        };\n",
        "286": "    LoadingCache<Object, Object> cache =\n",
        "287": "        CacheBuilder.newBuilder()\n",
        "288": "            .recordStats()\n",
        "289": "            .ticker(ticker)\n",
        "290": "            .refreshAfterWrite(1, MILLISECONDS)\n",
        "291": "            .build(loader);\n",
        "332": "    LoadingCache<Integer, Integer> cache =\n",
        "333": "        CacheBuilder.newBuilder()\n",
        "334": "            .recordStats()\n",
        "335": "            .build(TestingCacheLoaders.<Integer>identityLoader());\n",
        "446": "    Object[] lookupKeys = new Object[] {new Object(), new Object(), new Object()};\n",
        "484": "    Object[] lookupKeys = new Object[] {new Object(), new Object(), new Object()};\n",
        "523": "    Object[] lookupKeys = new Object[] {new Object(), new Object(), new Object()};\n",
        "527": "    } catch (InvalidCacheLoadException expected) {\n",
        "528": "    }\n",
        "563": "    Object[] lookupKeys = new Object[] {new Object(), new Object(), new Object()};\n",
        "567": "    } catch (InvalidCacheLoadException expected) {\n",
        "568": "    }\n",
        "597": "    Object[] lookupKeys = new Object[] {new Object(), new Object(), new Object()};\n",
        "601": "    } catch (InvalidCacheLoadException expected) {\n",
        "602": "    }\n",
        "607": "    LoadingCache<Object, Object> cache =\n",
        "608": "        CacheBuilder.newBuilder().recordStats().build(constantLoader(null));\n",
        "618": "    } catch (InvalidCacheLoadException expected) {\n",
        "619": "    }\n",
        "629": "    } catch (InvalidCacheLoadException expected) {\n",
        "630": "    }\n",
        "648": "    } catch (InvalidCacheLoadException expected) {\n",
        "649": "    }\n",
        "659": "    } catch (InvalidCacheLoadException expected) {\n",
        "660": "    }\n",
        "670": "    CacheLoader<Object, Object> loader =\n",
        "671": "        new CacheLoader<Object, Object>() {\n",
        "672": "          @Override\n",
        "673": "          public Object load(Object key) {\n",
        "674": "            return one;\n",
        "675": "          }\n",
        "677": "          @Override\n",
        "678": "          public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "679": "            return null;\n",
        "680": "          }\n",
        "681": "        };\n",
        "716": "    CacheLoader<Object, Object> loader =\n",
        "717": "        new CacheLoader<Object, Object>() {\n",
        "718": "          @Override\n",
        "719": "          public Object load(Object key) {\n",
        "720": "            return one;\n",
        "721": "          }\n",
        "723": "          @Override\n",
        "724": "          public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "725": "            return Futures.immediateFuture(null);\n",
        "726": "          }\n",
        "727": "        };\n",
        "763": "    CacheLoader<Object, Object> loader =\n",
        "764": "        new CacheLoader<Object, Object>() {\n",
        "765": "          @Override\n",
        "766": "          public Object load(Object key) {\n",
        "767": "            return one;\n",
        "768": "          }\n",
        "770": "          @Override\n",
        "771": "          public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "772": "            return Futures.immediateFuture(null);\n",
        "773": "          }\n",
        "774": "        };\n",
        "776": "    LoadingCache<Object, Object> cache =\n",
        "777": "        CacheBuilder.newBuilder()\n",
        "778": "            .recordStats()\n",
        "779": "            .ticker(ticker)\n",
        "780": "            .refreshAfterWrite(1, MILLISECONDS)\n",
        "781": "            .build(loader);\n",
        "823": "    LoadingCache<Object, Object> cache =\n",
        "824": "        CacheBuilder.newBuilder().recordStats().build(bulkLoader(constantLoader(null)));\n",
        "834": "    } catch (InvalidCacheLoadException expected) {\n",
        "835": "    }\n",
        "869": "    } catch (InvalidCacheLoadException expected) {\n",
        "870": "    }\n",
        "922": "      cache.get(\n",
        "923": "          new Object(),\n",
        "924": "          new Callable<Object>() {\n",
        "925": "            @Override\n",
        "926": "            public Object call() {\n",
        "927": "              throw callableError;\n",
        "928": "            }\n",
        "929": "          });\n",
        "956": "    CacheLoader<Object, Object> loader =\n",
        "957": "        new CacheLoader<Object, Object>() {\n",
        "958": "          @Override\n",
        "959": "          public Object load(Object key) {\n",
        "960": "            return one;\n",
        "961": "          }\n",
        "963": "          @Override\n",
        "964": "          public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "965": "            throw e;\n",
        "966": "          }\n",
        "967": "        };\n",
        "1003": "    CacheLoader<Object, Object> loader =\n",
        "1004": "        new CacheLoader<Object, Object>() {\n",
        "1005": "          @Override\n",
        "1006": "          public Object load(Object key) {\n",
        "1007": "            return one;\n",
        "1008": "          }\n",
        "1010": "          @Override\n",
        "1011": "          public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "1012": "            return Futures.immediateFailedFuture(e);\n",
        "1013": "          }\n",
        "1014": "        };\n",
        "1051": "    CacheLoader<Object, Object> loader =\n",
        "1052": "        new CacheLoader<Object, Object>() {\n",
        "1053": "          @Override\n",
        "1054": "          public Object load(Object key) {\n",
        "1055": "            return one;\n",
        "1056": "          }\n",
        "1058": "          @Override\n",
        "1059": "          public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "1060": "            return Futures.immediateFailedFuture(e);\n",
        "1061": "          }\n",
        "1062": "        };\n",
        "1064": "    LoadingCache<Object, Object> cache =\n",
        "1065": "        CacheBuilder.newBuilder()\n",
        "1066": "            .recordStats()\n",
        "1067": "            .ticker(ticker)\n",
        "1068": "            .refreshAfterWrite(1, MILLISECONDS)\n",
        "1069": "            .build(loader);\n",
        "1113": "    LoadingCache<Object, Object> cache =\n",
        "1114": "        CacheBuilder.newBuilder().recordStats().build(bulkLoader(loader));\n",
        "1281": "    CacheLoader<Object, Object> loader =\n",
        "1282": "        new CacheLoader<Object, Object>() {\n",
        "1283": "          @Override\n",
        "1284": "          public Object load(Object key) {\n",
        "1285": "            return one;\n",
        "1286": "          }\n",
        "1288": "          @Override\n",
        "1289": "          public ListenableFuture<Object> reload(Object key, Object oldValue) throws Exception {\n",
        "1290": "            throw e;\n",
        "1291": "          }\n",
        "1292": "        };\n",
        "1328": "    CacheLoader<Object, Object> loader =\n",
        "1329": "        new CacheLoader<Object, Object>() {\n",
        "1330": "          @Override\n",
        "1331": "          public Object load(Object key) {\n",
        "1332": "            return one;\n",
        "1333": "          }\n",
        "1335": "          @Override\n",
        "1336": "          public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "1337": "            return Futures.immediateFailedFuture(e);\n",
        "1338": "          }\n",
        "1339": "        };\n",
        "1376": "    CacheLoader<Object, Object> loader =\n",
        "1377": "        new CacheLoader<Object, Object>() {\n",
        "1378": "          @Override\n",
        "1379": "          public Object load(Object key) {\n",
        "1380": "            return one;\n",
        "1381": "          }\n",
        "1383": "          @Override\n",
        "1384": "          public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "1385": "            return Futures.immediateFailedFuture(e);\n",
        "1386": "          }\n",
        "1387": "        };\n",
        "1389": "    LoadingCache<Object, Object> cache =\n",
        "1390": "        CacheBuilder.newBuilder()\n",
        "1391": "            .recordStats()\n",
        "1392": "            .ticker(ticker)\n",
        "1393": "            .refreshAfterWrite(1, MILLISECONDS)\n",
        "1394": "            .build(loader);\n",
        "1438": "    LoadingCache<Object, Object> cache =\n",
        "1439": "        CacheBuilder.newBuilder().recordStats().build(bulkLoader(loader));\n",
        "1462": "    LoadingCache<Object, Object> cache =\n",
        "1463": "        CacheBuilder.newBuilder().recordStats().build(bulkLoader(loader));\n",
        "1555": "    CacheLoader<Object, Object> loader =\n",
        "1556": "        new CacheLoader<Object, Object>() {\n",
        "1557": "          @Override\n",
        "1558": "          public Object load(Object key) {\n",
        "1559": "            return one;\n",
        "1560": "          }\n",
        "1562": "          @Override\n",
        "1563": "          public ListenableFuture<Object> reload(Object key, Object oldValue) throws Exception {\n",
        "1564": "            throw e;\n",
        "1565": "          }\n",
        "1566": "        };\n",
        "1602": "    CacheLoader<Object, Object> loader =\n",
        "1603": "        new CacheLoader<Object, Object>() {\n",
        "1604": "          @Override\n",
        "1605": "          public Object load(Object key) {\n",
        "1606": "            return one;\n",
        "1607": "          }\n",
        "1609": "          @Override\n",
        "1610": "          public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "1611": "            return Futures.immediateFailedFuture(e);\n",
        "1612": "          }\n",
        "1613": "        };\n",
        "1650": "    CacheLoader<Object, Object> loader =\n",
        "1651": "        new CacheLoader<Object, Object>() {\n",
        "1652": "          @Override\n",
        "1653": "          public Object load(Object key) {\n",
        "1654": "            return one;\n",
        "1655": "          }\n",
        "1657": "          @Override\n",
        "1658": "          public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "1659": "            return Futures.immediateFailedFuture(e);\n",
        "1660": "          }\n",
        "1661": "        };\n",
        "1663": "    LoadingCache<Object, Object> cache =\n",
        "1664": "        CacheBuilder.newBuilder()\n",
        "1665": "            .recordStats()\n",
        "1666": "            .ticker(ticker)\n",
        "1667": "            .refreshAfterWrite(1, MILLISECONDS)\n",
        "1668": "            .build(loader);\n",
        "1712": "    LoadingCache<Object, Object> cache =\n",
        "1713": "        CacheBuilder.newBuilder().recordStats().build(bulkLoader(loader));\n",
        "1736": "    CacheLoader<Integer, String> failOnceFunction =\n",
        "1737": "        new CacheLoader<Integer, String>() {\n",
        "1739": "          @Override\n",
        "1740": "          public String load(Integer key) throws Exception {\n",
        "1741": "            if (count.getAndIncrement() == 0) {\n",
        "1742": "              throw e;\n",
        "1743": "            }\n",
        "1744": "            return key.toString();\n",
        "1745": "          }\n",
        "1746": "        };\n",
        "1748": "    LoadingCache<Integer, String> cache =\n",
        "1749": "        CacheBuilder.newBuilder().removalListener(removalListener).build(failOnceFunction);\n",
        "1809": "    LoadingCache<Object, Object> cache =\n",
        "1810": "        CacheBuilder.newBuilder().concurrencyLevel(1).weakValues().build(countingLoader);\n",
        "1831": "    LoadingCache<Object, Object> cache =\n",
        "1832": "        CacheBuilder.newBuilder().concurrencyLevel(1).weakKeys().build(countingLoader);\n",
        "1971": "    LoadingCache<String, Object> cache =\n",
        "1972": "        builder.build(\n",
        "1973": "            new CacheLoader<String, Object>() {\n",
        "1974": "              @Override\n",
        "1975": "              public Object load(String key) throws InterruptedException {\n",
        "1976": "                callCount.incrementAndGet();\n",
        "1977": "                startSignal.await();\n",
        "1978": "                return result;\n",
        "1979": "              }\n",
        "1980": "            });\n",
        "1992": "   * InvalidCacheLoadException, with the loader only called once. The result should not be cached (a\n",
        "1993": "   * later request should call the loader again).\n",
        "2002": "    LoadingCache<String, String> cache =\n",
        "2003": "        builder.build(\n",
        "2004": "            new CacheLoader<String, String>() {\n",
        "2005": "              @Override\n",
        "2006": "              public String load(String key) throws InterruptedException {\n",
        "2007": "                callCount.incrementAndGet();\n",
        "2008": "                startSignal.await();\n",
        "2009": "                return null;\n",
        "2010": "              }\n",
        "2011": "            });\n",
        "2034": "  private static void testConcurrentLoadingUncheckedException(CacheBuilder<Object, Object> builder)\n",
        "2035": "      throws InterruptedException {\n",
        "2042": "    LoadingCache<String, String> cache =\n",
        "2043": "        builder.build(\n",
        "2044": "            new CacheLoader<String, String>() {\n",
        "2045": "              @Override\n",
        "2046": "              public String load(String key) throws InterruptedException {\n",
        "2047": "                callCount.incrementAndGet();\n",
        "2048": "                startSignal.await();\n",
        "2049": "                throw e;\n",
        "2050": "              }\n",
        "2051": "            });\n",
        "2077": "  private static void testConcurrentLoadingCheckedException(CacheBuilder<Object, Object> builder)\n",
        "2078": "      throws InterruptedException {\n",
        "2085": "    LoadingCache<String, String> cache =\n",
        "2086": "        builder.build(\n",
        "2087": "            new CacheLoader<String, String>() {\n",
        "2088": "              @Override\n",
        "2089": "              public String load(String key) throws IOException, InterruptedException {\n",
        "2090": "                callCount.incrementAndGet();\n",
        "2091": "                startSignal.await();\n",
        "2092": "                throw e;\n",
        "2093": "              }\n",
        "2094": "            });\n",
        "2123": "   * Test-helper method that performs {@code nThreads} concurrent calls to {@code cache.get(key)} or\n",
        "2124": "   * {@code cache.getUnchecked(key)}, and returns a List containing each of the results. The result\n",
        "2125": "   * for any given call to {@code cache.get} or {@code cache.getUnchecked} is the value returned, or\n",
        "2126": "   * the exception thrown.\n",
        "2132": "  private static <K> List<Object> doConcurrentGet(\n",
        "2133": "      final LoadingCache<K, ?> cache,\n",
        "2134": "      final K key,\n",
        "2135": "      int nThreads,\n",
        "2136": "      final CountDownLatch gettersStartedSignal)\n",
        "2137": "      throws InterruptedException {\n",
        "2143": "      Thread thread =\n",
        "2144": "          new Thread(\n",
        "2145": "              new Runnable() {\n",
        "2146": "                @Override\n",
        "2147": "                public void run() {\n",
        "2148": "                  gettersStartedSignal.countDown();\n",
        "2149": "                  Object value = null;\n",
        "2150": "                  try {\n",
        "2151": "                    int mod = index % 3;\n",
        "2152": "                    if (mod == 0) {\n",
        "2153": "                      value = cache.get(key);\n",
        "2154": "                    } else if (mod == 1) {\n",
        "2155": "                      value = cache.getUnchecked(key);\n",
        "2156": "                    } else {\n",
        "2157": "                      cache.refresh(key);\n",
        "2158": "                      value = cache.get(key);\n",
        "2159": "                    }\n",
        "2160": "                    result.set(index, value);\n",
        "2161": "                  } catch (Throwable t) {\n",
        "2162": "                    result.set(index, t);\n",
        "2163": "                  }\n",
        "2164": "                  gettersComplete.countDown();\n",
        "2165": "                }\n",
        "2166": "              });\n",
        "2192": "    CacheLoader<String, String> computeFunction =\n",
        "2193": "        new CacheLoader<String, String>() {\n",
        "2194": "          @Override\n",
        "2195": "          public String load(String key) throws InterruptedException {\n",
        "2196": "            getStartedSignal.countDown();\n",
        "2197": "            letGetFinishSignal.await();\n",
        "2198": "            return key + suffix;\n",
        "2199": "          }\n",
        "2200": "        };\n",
        "2202": "    final LoadingCache<String, String> cache = CacheBuilder.newBuilder().build(computeFunction);\n",
        "2203": "    ConcurrentMap<String, String> map = cache.asMap();\n",
        "2251": "    CacheLoader<String, String> computeFunction =\n",
        "2252": "        new CacheLoader<String, String>() {\n",
        "2253": "          @Override\n",
        "2254": "          public String load(String key) throws InterruptedException {\n",
        "2255": "            computationStarted.countDown();\n",
        "2256": "            letGetFinishSignal.await();\n",
        "2257": "            return key + suffix;\n",
        "2258": "          }\n",
        "2259": "        };\n",
        "2261": "    final LoadingCache<String, String> cache = CacheBuilder.newBuilder().build(computeFunction);\n",
        "2262": "    ConcurrentMap<String, String> map = cache.asMap();\n",
        "2308": "    CacheLoader<String, String> computeFunction =\n",
        "2309": "        new CacheLoader<String, String>() {\n",
        "2310": "          @Override\n",
        "2311": "          public String load(String key) throws InterruptedException {\n",
        "2312": "            computationStarted.countDown();\n",
        "2313": "            letGetFinishSignal.await();\n",
        "2314": "            return key + suffix;\n",
        "2315": "          }\n",
        "2316": "        };\n",
        "2318": "    final LoadingCache<String, String> cache = CacheBuilder.newBuilder().build(computeFunction);\n",
        "2319": "    ConcurrentMap<String, String> map = cache.asMap();\n",
        "2384": "    CacheLoader<String, String> computeFunction =\n",
        "2385": "        new CacheLoader<String, String>() {\n",
        "2386": "          @Override\n",
        "2387": "          public String load(String key) throws InterruptedException {\n",
        "2388": "            callCount.incrementAndGet();\n",
        "2389": "            secondSignal.countDown();\n",
        "2390": "            computeSignal.await();\n",
        "2391": "            return key + \"foo\";\n",
        "2392": "          }\n",
        "2393": "        };\n",
        "2395": "    final LoadingCache<String, String> cache =\n",
        "2396": "        CacheBuilder.newBuilder().weakKeys().build(computeFunction);\n",
        "2476": "    CacheLoader<String, String> computeFunction =\n",
        "2477": "        new CacheLoader<String, String>() {\n",
        "2478": "          @Override\n",
        "2479": "          public String load(String key) throws InterruptedException {\n",
        "2480": "            callCount.incrementAndGet();\n",
        "2481": "            secondSignal.countDown();\n",
        "2482": "            computeSignal.await();\n",
        "2483": "            return key + suffix;\n",
        "2484": "          }\n",
        "2485": "        };\n",
        "2489": "    final LoadingCache<String, String> cache = CacheBuilder.newBuilder().build(computeFunction);\n",
        "2551": "      @Override\n",
        "2552": "      public T call() throws Exception {\n"
    },
    "removed": {
        "102": "    LoadingCache<Object, Object> cache = CacheBuilder.newBuilder()\n",
        "103": "        .recordStats()\n",
        "104": "        .build(identityLoader());\n",
        "164": "    CacheLoader<Object, Object> loader = new CacheLoader<Object, Object>() {\n",
        "165": "      @Override\n",
        "166": "      public Object load(Object key) {\n",
        "167": "        return one;\n",
        "168": "      }\n",
        "170": "      @Override\n",
        "171": "      public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "172": "        return Futures.immediateFuture(two);\n",
        "173": "      }\n",
        "174": "    };\n",
        "211": "    CacheLoader<Object, Object> loader = new CacheLoader<Object, Object>() {\n",
        "212": "      @Override\n",
        "213": "      public Object load(Object key) {\n",
        "214": "        return one;\n",
        "215": "      }\n",
        "217": "      @Override\n",
        "218": "      public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "219": "        return Futures.immediateFuture(two);\n",
        "220": "      }\n",
        "221": "    };\n",
        "223": "    LoadingCache<Object, Object> cache = CacheBuilder.newBuilder()\n",
        "224": "        .recordStats()\n",
        "225": "        .ticker(ticker)\n",
        "226": "        .refreshAfterWrite(1, MILLISECONDS)\n",
        "227": "        .build(loader);\n",
        "271": "    CacheLoader<Object, Object> loader = new CacheLoader<Object, Object>() {\n",
        "272": "      @Override\n",
        "273": "      public Object load(Object key) {\n",
        "274": "        return one;\n",
        "275": "      }\n",
        "277": "      @Override\n",
        "278": "      public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "279": "        return Futures.immediateFuture(two);\n",
        "280": "      }\n",
        "281": "    };\n",
        "283": "    LoadingCache<Object, Object> cache = CacheBuilder.newBuilder()\n",
        "284": "        .recordStats()\n",
        "285": "        .ticker(ticker)\n",
        "286": "        .refreshAfterWrite(1, MILLISECONDS)\n",
        "287": "        .build(loader);\n",
        "328": "    LoadingCache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "329": "        .recordStats()\n",
        "330": "        .build(TestingCacheLoaders.<Integer>identityLoader());\n",
        "441": "    Object[] lookupKeys = new Object[] { new Object(), new Object(), new Object() };\n",
        "479": "    Object[] lookupKeys = new Object[] { new Object(), new Object(), new Object() };\n",
        "518": "    Object[] lookupKeys = new Object[] { new Object(), new Object(), new Object() };\n",
        "522": "    } catch (InvalidCacheLoadException expected) {}\n",
        "557": "    Object[] lookupKeys = new Object[] { new Object(), new Object(), new Object() };\n",
        "561": "    } catch (InvalidCacheLoadException expected) {}\n",
        "590": "    Object[] lookupKeys = new Object[] { new Object(), new Object(), new Object() };\n",
        "594": "    } catch (InvalidCacheLoadException expected) {}\n",
        "599": "    LoadingCache<Object, Object> cache = CacheBuilder.newBuilder()\n",
        "600": "        .recordStats()\n",
        "601": "        .build(constantLoader(null));\n",
        "611": "    } catch (InvalidCacheLoadException expected) {}\n",
        "621": "    } catch (InvalidCacheLoadException expected) {}\n",
        "639": "    } catch (InvalidCacheLoadException expected) {}\n",
        "649": "    } catch (InvalidCacheLoadException expected) {}\n",
        "659": "    CacheLoader<Object, Object> loader = new CacheLoader<Object, Object>() {\n",
        "660": "      @Override\n",
        "661": "      public Object load(Object key) {\n",
        "662": "        return one;\n",
        "663": "      }\n",
        "665": "      @Override\n",
        "666": "      public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "667": "        return null;\n",
        "668": "      }\n",
        "669": "    };\n",
        "704": "    CacheLoader<Object, Object> loader = new CacheLoader<Object, Object>() {\n",
        "705": "      @Override\n",
        "706": "      public Object load(Object key) {\n",
        "707": "        return one;\n",
        "708": "      }\n",
        "710": "      @Override\n",
        "711": "      public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "712": "        return Futures.immediateFuture(null);\n",
        "713": "      }\n",
        "714": "    };\n",
        "750": "    CacheLoader<Object, Object> loader = new CacheLoader<Object, Object>() {\n",
        "751": "      @Override\n",
        "752": "      public Object load(Object key) {\n",
        "753": "        return one;\n",
        "754": "      }\n",
        "756": "      @Override\n",
        "757": "      public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "758": "        return Futures.immediateFuture(null);\n",
        "759": "      }\n",
        "760": "    };\n",
        "762": "    LoadingCache<Object, Object> cache = CacheBuilder.newBuilder()\n",
        "763": "        .recordStats()\n",
        "764": "        .ticker(ticker)\n",
        "765": "        .refreshAfterWrite(1, MILLISECONDS)\n",
        "766": "        .build(loader);\n",
        "808": "    LoadingCache<Object, Object> cache = CacheBuilder.newBuilder()\n",
        "809": "        .recordStats()\n",
        "810": "        .build(bulkLoader(constantLoader(null)));\n",
        "820": "    } catch (InvalidCacheLoadException expected) {}\n",
        "854": "    } catch (InvalidCacheLoadException expected) {}\n",
        "906": "      cache.get(new Object(), new Callable<Object>() {\n",
        "907": "        @Override\n",
        "908": "        public Object call() {\n",
        "909": "          throw callableError;\n",
        "910": "        }\n",
        "911": "      });\n",
        "938": "    CacheLoader<Object, Object> loader = new CacheLoader<Object, Object>() {\n",
        "939": "      @Override\n",
        "940": "      public Object load(Object key) {\n",
        "941": "        return one;\n",
        "942": "      }\n",
        "944": "      @Override\n",
        "945": "      public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "946": "        throw e;\n",
        "947": "      }\n",
        "948": "    };\n",
        "984": "    CacheLoader<Object, Object> loader = new CacheLoader<Object, Object>() {\n",
        "985": "      @Override\n",
        "986": "      public Object load(Object key) {\n",
        "987": "        return one;\n",
        "988": "      }\n",
        "990": "      @Override\n",
        "991": "      public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "992": "        return Futures.immediateFailedFuture(e);\n",
        "993": "      }\n",
        "994": "    };\n",
        "1031": "    CacheLoader<Object, Object> loader = new CacheLoader<Object, Object>() {\n",
        "1032": "      @Override\n",
        "1033": "      public Object load(Object key) {\n",
        "1034": "        return one;\n",
        "1035": "      }\n",
        "1037": "      @Override\n",
        "1038": "      public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "1039": "        return Futures.immediateFailedFuture(e);\n",
        "1040": "      }\n",
        "1041": "    };\n",
        "1043": "    LoadingCache<Object, Object> cache = CacheBuilder.newBuilder()\n",
        "1044": "        .recordStats()\n",
        "1045": "        .ticker(ticker)\n",
        "1046": "        .refreshAfterWrite(1, MILLISECONDS)\n",
        "1047": "        .build(loader);\n",
        "1091": "    LoadingCache<Object, Object> cache = CacheBuilder.newBuilder()\n",
        "1092": "        .recordStats()\n",
        "1093": "        .build(bulkLoader(loader));\n",
        "1260": "    CacheLoader<Object, Object> loader = new CacheLoader<Object, Object>() {\n",
        "1261": "      @Override\n",
        "1262": "      public Object load(Object key) {\n",
        "1263": "        return one;\n",
        "1264": "      }\n",
        "1266": "      @Override\n",
        "1267": "      public ListenableFuture<Object> reload(Object key, Object oldValue) throws Exception {\n",
        "1268": "        throw e;\n",
        "1269": "      }\n",
        "1270": "    };\n",
        "1306": "    CacheLoader<Object, Object> loader = new CacheLoader<Object, Object>() {\n",
        "1307": "      @Override\n",
        "1308": "      public Object load(Object key) {\n",
        "1309": "        return one;\n",
        "1310": "      }\n",
        "1312": "      @Override\n",
        "1313": "      public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "1314": "        return Futures.immediateFailedFuture(e);\n",
        "1315": "      }\n",
        "1316": "    };\n",
        "1353": "    CacheLoader<Object, Object> loader = new CacheLoader<Object, Object>() {\n",
        "1354": "      @Override\n",
        "1355": "      public Object load(Object key) {\n",
        "1356": "        return one;\n",
        "1357": "      }\n",
        "1359": "      @Override\n",
        "1360": "      public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "1361": "        return Futures.immediateFailedFuture(e);\n",
        "1362": "      }\n",
        "1363": "    };\n",
        "1365": "    LoadingCache<Object, Object> cache = CacheBuilder.newBuilder()\n",
        "1366": "        .recordStats()\n",
        "1367": "        .ticker(ticker)\n",
        "1368": "        .refreshAfterWrite(1, MILLISECONDS)\n",
        "1369": "        .build(loader);\n",
        "1413": "    LoadingCache<Object, Object> cache = CacheBuilder.newBuilder()\n",
        "1414": "        .recordStats()\n",
        "1415": "        .build(bulkLoader(loader));\n",
        "1438": "    LoadingCache<Object, Object> cache = CacheBuilder.newBuilder()\n",
        "1439": "        .recordStats()\n",
        "1440": "        .build(bulkLoader(loader));\n",
        "1532": "    CacheLoader<Object, Object> loader = new CacheLoader<Object, Object>() {\n",
        "1533": "      @Override\n",
        "1534": "      public Object load(Object key) {\n",
        "1535": "        return one;\n",
        "1536": "      }\n",
        "1538": "      @Override\n",
        "1539": "      public ListenableFuture<Object> reload(Object key, Object oldValue) throws Exception {\n",
        "1540": "        throw e;\n",
        "1541": "      }\n",
        "1542": "    };\n",
        "1578": "    CacheLoader<Object, Object> loader = new CacheLoader<Object, Object>() {\n",
        "1579": "      @Override\n",
        "1580": "      public Object load(Object key) {\n",
        "1581": "        return one;\n",
        "1582": "      }\n",
        "1584": "      @Override\n",
        "1585": "      public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "1586": "        return Futures.immediateFailedFuture(e);\n",
        "1587": "      }\n",
        "1588": "    };\n",
        "1625": "    CacheLoader<Object, Object> loader = new CacheLoader<Object, Object>() {\n",
        "1626": "      @Override\n",
        "1627": "      public Object load(Object key) {\n",
        "1628": "        return one;\n",
        "1629": "      }\n",
        "1631": "      @Override\n",
        "1632": "      public ListenableFuture<Object> reload(Object key, Object oldValue) {\n",
        "1633": "        return Futures.immediateFailedFuture(e);\n",
        "1634": "      }\n",
        "1635": "    };\n",
        "1637": "    LoadingCache<Object, Object> cache = CacheBuilder.newBuilder()\n",
        "1638": "        .recordStats()\n",
        "1639": "        .ticker(ticker)\n",
        "1640": "        .refreshAfterWrite(1, MILLISECONDS)\n",
        "1641": "        .build(loader);\n",
        "1685": "    LoadingCache<Object, Object> cache = CacheBuilder.newBuilder()\n",
        "1686": "        .recordStats()\n",
        "1687": "        .build(bulkLoader(loader));\n",
        "1710": "    CacheLoader<Integer, String> failOnceFunction = new CacheLoader<Integer, String>() {\n",
        "1712": "      @Override\n",
        "1713": "      public String load(Integer key) throws Exception {\n",
        "1714": "        if (count.getAndIncrement() == 0) {\n",
        "1715": "          throw e;\n",
        "1716": "        }\n",
        "1717": "        return key.toString();\n",
        "1718": "      }\n",
        "1719": "    };\n",
        "1721": "    LoadingCache<Integer, String> cache = CacheBuilder.newBuilder()\n",
        "1722": "        .removalListener(removalListener)\n",
        "1723": "        .build(failOnceFunction);\n",
        "1784": "    LoadingCache<Object, Object> cache = CacheBuilder.newBuilder()\n",
        "1785": "        .concurrencyLevel(1)\n",
        "1786": "        .weakValues()\n",
        "1787": "        .build(countingLoader);\n",
        "1808": "    LoadingCache<Object, Object> cache = CacheBuilder.newBuilder()\n",
        "1809": "        .concurrencyLevel(1)\n",
        "1810": "        .weakKeys()\n",
        "1811": "        .build(countingLoader);\n",
        "1950": "    LoadingCache<String, Object> cache = builder.build(\n",
        "1951": "        new CacheLoader<String, Object>() {\n",
        "1952": "          @Override public Object load(String key) throws InterruptedException {\n",
        "1953": "            callCount.incrementAndGet();\n",
        "1954": "            startSignal.await();\n",
        "1955": "            return result;\n",
        "1956": "          }\n",
        "1957": "        });\n",
        "1969": "   * InvalidCacheLoadException, with the loader only called once. The result should not be cached\n",
        "1970": "   * (a later request should call the loader again).\n",
        "1979": "    LoadingCache<String, String> cache = builder.build(\n",
        "1980": "        new CacheLoader<String, String>() {\n",
        "1981": "          @Override public String load(String key) throws InterruptedException {\n",
        "1982": "            callCount.incrementAndGet();\n",
        "1983": "            startSignal.await();\n",
        "1984": "            return null;\n",
        "1985": "          }\n",
        "1986": "        });\n",
        "2009": "  private static void testConcurrentLoadingUncheckedException(\n",
        "2010": "      CacheBuilder<Object, Object> builder) throws InterruptedException {\n",
        "2017": "    LoadingCache<String, String> cache = builder.build(\n",
        "2018": "        new CacheLoader<String, String>() {\n",
        "2019": "          @Override public String load(String key) throws InterruptedException {\n",
        "2020": "            callCount.incrementAndGet();\n",
        "2021": "            startSignal.await();\n",
        "2022": "            throw e;\n",
        "2023": "          }\n",
        "2024": "        });\n",
        "2050": "  private static void testConcurrentLoadingCheckedException(\n",
        "2051": "      CacheBuilder<Object, Object> builder) throws InterruptedException {\n",
        "2058": "    LoadingCache<String, String> cache = builder.build(\n",
        "2059": "        new CacheLoader<String, String>() {\n",
        "2060": "          @Override public String load(String key) throws IOException, InterruptedException {\n",
        "2061": "            callCount.incrementAndGet();\n",
        "2062": "            startSignal.await();\n",
        "2063": "            throw e;\n",
        "2064": "          }\n",
        "2065": "        });\n",
        "2094": "   * Test-helper method that performs {@code nThreads} concurrent calls to {@code cache.get(key)}\n",
        "2095": "   * or {@code cache.getUnchecked(key)}, and returns a List containing each of the results. The\n",
        "2096": "   * result for any given call to {@code cache.get} or {@code cache.getUnchecked} is the value\n",
        "2097": "   * returned, or the exception thrown.\n",
        "2103": "  private static <K> List<Object> doConcurrentGet(final LoadingCache<K, ?> cache, final K key,\n",
        "2104": "      int nThreads, final CountDownLatch gettersStartedSignal) throws InterruptedException {\n",
        "2110": "      Thread thread = new Thread(new Runnable() {\n",
        "2111": "        @Override public void run() {\n",
        "2112": "          gettersStartedSignal.countDown();\n",
        "2113": "          Object value = null;\n",
        "2114": "          try {\n",
        "2115": "            int mod = index % 3;\n",
        "2116": "            if (mod == 0) {\n",
        "2117": "              value = cache.get(key);\n",
        "2118": "            } else if (mod == 1) {\n",
        "2119": "              value = cache.getUnchecked(key);\n",
        "2120": "            } else {\n",
        "2121": "              cache.refresh(key);\n",
        "2122": "              value = cache.get(key);\n",
        "2123": "            }\n",
        "2124": "            result.set(index, value);\n",
        "2125": "          } catch (Throwable t) {\n",
        "2126": "            result.set(index, t);\n",
        "2127": "          }\n",
        "2128": "          gettersComplete.countDown();\n",
        "2129": "        }\n",
        "2130": "      });\n",
        "2156": "    CacheLoader<String, String> computeFunction = new CacheLoader<String, String>() {\n",
        "2157": "      @Override\n",
        "2158": "      public String load(String key) throws InterruptedException {\n",
        "2159": "        getStartedSignal.countDown();\n",
        "2160": "        letGetFinishSignal.await();\n",
        "2161": "        return key + suffix;\n",
        "2162": "      }\n",
        "2163": "    };\n",
        "2165": "    final LoadingCache<String, String> cache = CacheBuilder.newBuilder()\n",
        "2166": "        .build(computeFunction);\n",
        "2167": "    ConcurrentMap<String,String> map = cache.asMap();\n",
        "2215": "    CacheLoader<String, String> computeFunction = new CacheLoader<String, String>() {\n",
        "2216": "      @Override\n",
        "2217": "      public String load(String key) throws InterruptedException {\n",
        "2218": "        computationStarted.countDown();\n",
        "2219": "        letGetFinishSignal.await();\n",
        "2220": "        return key + suffix;\n",
        "2221": "      }\n",
        "2222": "    };\n",
        "2224": "    final LoadingCache<String, String> cache = CacheBuilder.newBuilder()\n",
        "2225": "        .build(computeFunction);\n",
        "2226": "    ConcurrentMap<String,String> map = cache.asMap();\n",
        "2272": "    CacheLoader<String, String> computeFunction = new CacheLoader<String, String>() {\n",
        "2273": "      @Override\n",
        "2274": "      public String load(String key) throws InterruptedException {\n",
        "2275": "        computationStarted.countDown();\n",
        "2276": "        letGetFinishSignal.await();\n",
        "2277": "        return key + suffix;\n",
        "2278": "      }\n",
        "2279": "    };\n",
        "2281": "    final LoadingCache<String, String> cache = CacheBuilder.newBuilder()\n",
        "2282": "        .build(computeFunction);\n",
        "2283": "    ConcurrentMap<String,String> map = cache.asMap();\n",
        "2348": "    CacheLoader<String, String> computeFunction = new CacheLoader<String, String>() {\n",
        "2349": "      @Override\n",
        "2350": "      public String load(String key) throws InterruptedException {\n",
        "2351": "        callCount.incrementAndGet();\n",
        "2352": "        secondSignal.countDown();\n",
        "2353": "        computeSignal.await();\n",
        "2354": "        return key + \"foo\";\n",
        "2355": "      }\n",
        "2356": "    };\n",
        "2358": "    final LoadingCache<String, String> cache = CacheBuilder.newBuilder()\n",
        "2359": "        .weakKeys()\n",
        "2360": "        .build(computeFunction);\n",
        "2440": "    CacheLoader<String, String> computeFunction = new CacheLoader<String, String>() {\n",
        "2441": "      @Override\n",
        "2442": "      public String load(String key) throws InterruptedException {\n",
        "2443": "        callCount.incrementAndGet();\n",
        "2444": "        secondSignal.countDown();\n",
        "2445": "        computeSignal.await();\n",
        "2446": "        return key + suffix;\n",
        "2447": "      }\n",
        "2448": "    };\n",
        "2452": "    final LoadingCache<String, String> cache = CacheBuilder.newBuilder()\n",
        "2453": "        .build(computeFunction);\n",
        "2515": "      @Override public T call() throws Exception {\n"
    }
}