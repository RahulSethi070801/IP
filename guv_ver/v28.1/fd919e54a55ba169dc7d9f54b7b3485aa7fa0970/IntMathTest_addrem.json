{
    "addition": {
        "141": "          == Math.min(\n",
        "142": "              Integer.MAX_VALUE,\n",
        "150": "      assertTrue(\n",
        "151": "          IntMath.biggestBinomials[k] == Integer.MAX_VALUE\n",
        "152": "              || !fitsInInt(BigIntegerMath.binomial(IntMath.biggestBinomials[k] + 1, k)));\n",
        "157": "        fitsInInt(\n",
        "158": "            BigIntegerMath.binomial(\n",
        "159": "                2 * IntMath.biggestBinomials.length, IntMath.biggestBinomials.length)));\n",
        "197": "      } catch (IllegalArgumentException expected) {\n",
        "198": "      }\n",
        "208": "        } catch (IllegalArgumentException expected) {\n",
        "209": "        }\n",
        "243": "      } catch (IllegalArgumentException expected) {\n",
        "244": "      }\n",
        "255": "        } catch (IllegalArgumentException expected) {\n",
        "256": "        }\n",
        "310": "        } catch (IllegalArgumentException expected) {\n",
        "311": "        }\n",
        "405": "        } catch (ArithmeticException expected) {\n",
        "406": "        }\n",
        "425": "        } catch (ArithmeticException expected) {\n",
        "426": "        }\n",
        "436": "      } catch (ArithmeticException expected) {\n",
        "437": "      }\n",
        "462": "      } catch (IllegalArgumentException expected) {\n",
        "463": "      }\n",
        "467": "      } catch (IllegalArgumentException expected) {\n",
        "468": "      }\n",
        "477": "      } catch (IllegalArgumentException expected) {\n",
        "478": "      }\n",
        "482": "      } catch (IllegalArgumentException expected) {\n",
        "483": "      }\n",
        "634": "      } catch (IllegalArgumentException expected) {\n",
        "635": "      }\n",
        "655": "      } catch (IllegalArgumentException expected) {\n",
        "656": "      }\n",
        "660": "      } catch (IllegalArgumentException expected) {\n",
        "661": "      }\n",
        "670": "      } catch (IllegalArgumentException expected) {\n",
        "671": "      }\n",
        "710": "  /** Helper method that asserts the arithmetic mean of x and y is equal to the expectedMean. */\n",
        "712": "    assertEquals(\n",
        "713": "        \"The expectedMean should be the same as computeMeanSafely\",\n",
        "714": "        expectedMean,\n",
        "715": "        computeMeanSafely(x, y));\n",
        "720": "   * Helper method that asserts the arithmetic mean of x and y is equal to the result of\n",
        "721": "   * computeMeanSafely.\n",
        "726": "    assertEquals(\n",
        "727": "        \"The mean of x and y should equal the mean of y and x\", expectedMean, IntMath.mean(y, x));\n",
        "731": "   * Computes the mean in a way that is obvious and resilient to overflow by using BigInteger\n",
        "732": "   * arithmetic.\n",
        "737": "    BigDecimal bigMean =\n",
        "738": "        new BigDecimal(bigX.add(bigY)).divide(BigDecimal.valueOf(2), BigDecimal.ROUND_FLOOR);\n"
    },
    "removed": {
        "142": "          == Math.min(Integer.MAX_VALUE,\n",
        "150": "      assertTrue(IntMath.biggestBinomials[k] == Integer.MAX_VALUE\n",
        "151": "          || !fitsInInt(BigIntegerMath.binomial(IntMath.biggestBinomials[k] + 1, k)));\n",
        "156": "        fitsInInt(BigIntegerMath.binomial(\n",
        "157": "            2 * IntMath.biggestBinomials.length, IntMath.biggestBinomials.length)));\n",
        "195": "      } catch (IllegalArgumentException expected) {}\n",
        "205": "        } catch (IllegalArgumentException expected) {}\n",
        "239": "      } catch (IllegalArgumentException expected) {}\n",
        "250": "        } catch (IllegalArgumentException expected) {}\n",
        "304": "        } catch (IllegalArgumentException expected) {}\n",
        "398": "        } catch (ArithmeticException expected) {}\n",
        "417": "        } catch (ArithmeticException expected) {}\n",
        "427": "      } catch (ArithmeticException expected) {}\n",
        "452": "      } catch (IllegalArgumentException expected) {}\n",
        "456": "      } catch (IllegalArgumentException expected) {}\n",
        "465": "      } catch (IllegalArgumentException expected) {}\n",
        "469": "      } catch (IllegalArgumentException expected) {}\n",
        "620": "      } catch (IllegalArgumentException expected) {}\n",
        "640": "      } catch (IllegalArgumentException expected) {}\n",
        "644": "      } catch (IllegalArgumentException expected) {}\n",
        "653": "      } catch (IllegalArgumentException expected) {}\n",
        "692": "  /**\n",
        "693": "   * Helper method that asserts the arithmetic mean of x and y is equal\n",
        "694": "   * to the expectedMean.\n",
        "695": "   */\n",
        "697": "    assertEquals(\"The expectedMean should be the same as computeMeanSafely\",\n",
        "698": "        expectedMean, computeMeanSafely(x, y));\n",
        "703": "   * Helper method that asserts the arithmetic mean of x and y is equal\n",
        "704": "   * to the result of computeMeanSafely.\n",
        "709": "    assertEquals(\"The mean of x and y should equal the mean of y and x\",\n",
        "710": "        expectedMean, IntMath.mean(y, x));\n",
        "714": "   * Computes the mean in a way that is obvious and resilient to\n",
        "715": "   * overflow by using BigInteger arithmetic.\n",
        "720": "    BigDecimal bigMean = new BigDecimal(bigX.add(bigY))\n",
        "721": "        .divide(BigDecimal.valueOf(2), BigDecimal.ROUND_FLOOR);\n"
    }
}