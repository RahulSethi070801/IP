{
    "addition": {
        "45": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\"> immutable collections</a>.\n",
        "61": "  /** Returns an immutable multimap containing a single entry. */\n",
        "69": "   * Returns an immutable multimap containing the given entries, in order. Repeated occurrences of\n",
        "70": "   * an entry (according to {@link Object#equals}) after the first are ignored.\n",
        "80": "   * Returns an immutable multimap containing the given entries, in order. Repeated occurrences of\n",
        "81": "   * an entry (according to {@link Object#equals}) after the first are ignored.\n",
        "92": "   * Returns an immutable multimap containing the given entries, in order. Repeated occurrences of\n",
        "93": "   * an entry (according to {@link Object#equals}) after the first are ignored.\n",
        "106": "   * Returns an immutable multimap containing the given entries, in order. Repeated occurrences of\n",
        "107": "   * an entry (according to {@link Object#equals}) after the first are ignored.\n",
        "122": "  /** Returns a new {@link Builder}. */\n",
        "128": "   * A builder for creating immutable {@code SetMultimap} instances, especially {@code public static\n",
        "129": "   * final} multimaps (\"constant multimaps\"). Example:\n",
        "131": "   * <pre>{@code\n",
        "132": "   * static final Multimap<String, Integer> STRING_TO_INTEGER_MULTIMAP =\n",
        "133": "   *     new ImmutableSetMultimap.Builder<String, Integer>()\n",
        "134": "   *         .put(\"one\", 1)\n",
        "135": "   *         .putAll(\"several\", 1, 2, 3)\n",
        "136": "   *         .putAll(\"many\", 1, 2, 3, 4, 5)\n",
        "137": "   *         .build();\n",
        "138": "   * }</pre>\n",
        "140": "   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build\n",
        "141": "   * multiple multimaps in series. Each multimap contains the key-value mappings in the previously\n",
        "142": "   * created multimaps.\n",
        "148": "     * Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n",
        "149": "     * ImmutableSetMultimap#builder}.\n",
        "155": "    /** Adds a key-value mapping to the built multimap if it is not already present. */\n",
        "229": "     * <p>If this method is called, the sets returned by the {@code get()} method of the generated\n",
        "230": "     * multimap and its {@link Multimap#asMap()} view are {@link ImmutableSortedSet} instances.\n",
        "231": "     * However, serialization does not preserve that property, though it does maintain the key and\n",
        "232": "     * value ordering.\n",
        "244": "    /** Returns a newly-created immutable set multimap. */\n",
        "264": "   * Returns an immutable set multimap containing the same mappings as {@code multimap}. The\n",
        "265": "   * generated multimap's key and value orderings correspond to the iteration ordering of the {@code\n",
        "266": "   * multimap.asMap()} view. Repeated occurrences of an entry in the multimap after the first are\n",
        "269": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "270": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "271": "   * undocumented and subject to change.\n",
        "273": "   * @throws NullPointerException if any key or value in {@code multimap} is null\n",
        "314": "   * Returns an immutable multimap containing the specified entries. The returned multimap iterates\n",
        "315": "   * over keys in the order they were first encountered in the input, and the values for each key\n",
        "316": "   * are iterated in the order they were encountered. If two values for the same key are {@linkplain\n",
        "317": "   * Object#equals equal}, the first value encountered is used.\n",
        "329": "   * Returned by get() when a missing key is provided. Also holds the comparator, if any, used for\n",
        "330": "   * values.\n",
        "345": "   * Returns an immutable set of the values for the given key. If no mappings in the multimap have\n",
        "346": "   * the provided key, an empty immutable set is returned. The values are in the same order as the\n",
        "347": "   * parameters used to build this multimap.\n",
        "356": "  @LazyInit @RetainedWith private transient ImmutableSetMultimap<V, K> inverse;\n",
        "361": "   * <p>Because an inverse of a set multimap cannot contain multiple pairs with the same key and\n",
        "362": "   * value, this method returns an {@code ImmutableSetMultimap} rather than the {@code\n",
        "363": "   * ImmutableMultimap} specified in the {@code ImmutableMultimap} class.\n",
        "411": "   * Returns an immutable collection of all key-value pairs in the multimap. Its iterator traverses\n",
        "412": "   * the values for the first key, the values for the second key, and so on.\n",
        "473": "   * @serialData number of distinct keys, and then for each distinct key: the key, the number of\n",
        "474": "   *     values for that key, and the key's values\n"
    },
    "removed": {
        "45": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\">\n",
        "46": " * immutable collections</a>.\n",
        "62": "  /**\n",
        "63": "   * Returns an immutable multimap containing a single entry.\n",
        "64": "   */\n",
        "72": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "73": "   * Repeated occurrences of an entry (according to {@link Object#equals}) after\n",
        "74": "   * the first are ignored.\n",
        "84": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "85": "   * Repeated occurrences of an entry (according to {@link Object#equals}) after\n",
        "86": "   * the first are ignored.\n",
        "97": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "98": "   * Repeated occurrences of an entry (according to {@link Object#equals}) after\n",
        "99": "   * the first are ignored.\n",
        "112": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "113": "   * Repeated occurrences of an entry (according to {@link Object#equals}) after\n",
        "114": "   * the first are ignored.\n",
        "129": "  /**\n",
        "130": "   * Returns a new {@link Builder}.\n",
        "131": "   */\n",
        "137": "   * A builder for creating immutable {@code SetMultimap} instances, especially\n",
        "138": "   * {@code public static final} multimaps (\"constant multimaps\"). Example:\n",
        "139": "   * <pre>   {@code\n",
        "141": "   *   static final Multimap<String, Integer> STRING_TO_INTEGER_MULTIMAP =\n",
        "142": "   *       new ImmutableSetMultimap.Builder<String, Integer>()\n",
        "143": "   *           .put(\"one\", 1)\n",
        "144": "   *           .putAll(\"several\", 1, 2, 3)\n",
        "145": "   *           .putAll(\"many\", 1, 2, 3, 4, 5)\n",
        "146": "   *           .build();}</pre>\n",
        "148": "   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple\n",
        "149": "   * times to build multiple multimaps in series. Each multimap contains the\n",
        "150": "   * key-value mappings in the previously created multimaps.\n",
        "156": "     * Creates a new builder. The returned builder is equivalent to the builder\n",
        "157": "     * generated by {@link ImmutableSetMultimap#builder}.\n",
        "163": "    /**\n",
        "164": "     * Adds a key-value mapping to the built multimap if it is not already\n",
        "165": "     * present.\n",
        "166": "     */\n",
        "240": "     * <p>If this method is called, the sets returned by the {@code get()}\n",
        "241": "     * method of the generated multimap and its {@link Multimap#asMap()} view\n",
        "242": "     * are {@link ImmutableSortedSet} instances. However, serialization does not\n",
        "243": "     * preserve that property, though it does maintain the key and value\n",
        "244": "     * ordering.\n",
        "256": "    /**\n",
        "257": "     * Returns a newly-created immutable set multimap.\n",
        "258": "     */\n",
        "278": "   * Returns an immutable set multimap containing the same mappings as\n",
        "279": "   * {@code multimap}. The generated multimap's key and value orderings\n",
        "280": "   * correspond to the iteration ordering of the {@code multimap.asMap()} view.\n",
        "281": "   * Repeated occurrences of an entry in the multimap after the first are\n",
        "284": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "285": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "286": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "288": "   * @throws NullPointerException if any key or value in {@code multimap} is\n",
        "289": "   *     null\n",
        "330": "   * Returns an immutable multimap containing the specified entries.  The\n",
        "331": "   * returned multimap iterates over keys in the order they were first\n",
        "332": "   * encountered in the input, and the values for each key are iterated in the\n",
        "333": "   * order they were encountered.  If two values for the same key are\n",
        "334": "   * {@linkplain Object#equals equal}, the first value encountered is used.\n",
        "346": "   * Returned by get() when a missing key is provided. Also holds the\n",
        "347": "   * comparator, if any, used for values.\n",
        "362": "   * Returns an immutable set of the values for the given key.  If no mappings\n",
        "363": "   * in the multimap have the provided key, an empty immutable set is returned.\n",
        "364": "   * The values are in the same order as the parameters used to build this\n",
        "365": "   * multimap.\n",
        "374": "  @LazyInit\n",
        "375": "  @RetainedWith\n",
        "376": "  private transient ImmutableSetMultimap<V, K> inverse;\n",
        "381": "   * <p>Because an inverse of a set multimap cannot contain multiple pairs with\n",
        "382": "   * the same key and value, this method returns an {@code ImmutableSetMultimap}\n",
        "383": "   * rather than the {@code ImmutableMultimap} specified in the {@code\n",
        "384": "   * ImmutableMultimap} class.\n",
        "432": "   * Returns an immutable collection of all key-value pairs in the multimap.\n",
        "433": "   * Its iterator traverses the values for the first key, the values for the\n",
        "434": "   * second key, and so on.\n",
        "495": "   * @serialData number of distinct keys, and then for each distinct key: the\n",
        "496": "   *     key, the number of values for that key, and the key's values\n"
    }
}