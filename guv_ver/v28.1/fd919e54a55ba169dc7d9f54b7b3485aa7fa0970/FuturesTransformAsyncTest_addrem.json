{
    "addition": {
        "45": "  @Override\n",
        "46": "  protected ListenableFuture<String> buildChainingFuture(ListenableFuture<Integer> inputFuture) {\n",
        "53": "  @Override\n",
        "54": "  protected String getSuccessfulResult() {\n",
        "62": "        case VALID_INPUT_DATA:\n",
        "63": "          outputFuture.set(RESULT_DATA);\n",
        "64": "          break;\n",
        "65": "        case SLOW_OUTPUT_VALID_INPUT_DATA:\n",
        "66": "          break; // do nothing to the result\n",
        "71": "        default:\n",
        "72": "          throw new UndeclaredThrowableException(EXCEPTION);\n",
        "83": "  public void testFutureGetThrowsCancellationIfInputCancelled() throws Exception {\n",
        "87": "      fail(\"Result future must throw CancellationException\" + \" if input future is cancelled.\");\n",
        "88": "    } catch (CancellationException expected) {\n",
        "89": "    }\n",
        "92": "  public void testFutureGetThrowsCancellationIfOutputCancelled() throws Exception {\n",
        "97": "      fail(\n",
        "98": "          \"Result future must throw CancellationException\"\n",
        "99": "              + \" if function output future is cancelled.\");\n",
        "100": "    } catch (CancellationException expected) {\n",
        "101": "    }\n",
        "111": "      fail(\"Result future is cancelled and should have thrown a\" + \" CancellationException\");\n",
        "112": "    } catch (CancellationException expected) {\n",
        "113": "    }\n",
        "124": "      fail(\"Result future is cancelled and should have thrown a\" + \" CancellationException\");\n",
        "125": "    } catch (CancellationException expected) {\n",
        "126": "    }\n",
        "146": "      fail(\"Result future is cancelled and should have thrown a\" + \" CancellationException\");\n",
        "147": "    } catch (CancellationException expected) {\n",
        "148": "    }\n",
        "150": "    funcCompletionLatch.countDown(); // allow the function to complete\n",
        "153": "      fail(\n",
        "154": "          \"The function output future is cancelled and should have thrown a\"\n",
        "155": "              + \" CancellationException\");\n",
        "156": "    } catch (CancellationException expected) {\n",
        "157": "    }\n",
        "180": "  /** Proxy to throw a {@link RuntimeException} out of the {@link #get()} method. */\n",
        "181": "  public static class BadFuture extends SimpleForwardingListenableFuture<Integer> {\n"
    },
    "removed": {
        "45": "  @Override protected ListenableFuture<String> buildChainingFuture(\n",
        "46": "      ListenableFuture<Integer> inputFuture) {\n",
        "53": "  @Override protected String getSuccessfulResult() {\n",
        "61": "        case VALID_INPUT_DATA: outputFuture.set(RESULT_DATA); break;\n",
        "62": "        case SLOW_OUTPUT_VALID_INPUT_DATA: break;  // do nothing to the result\n",
        "67": "        default: throw new UndeclaredThrowableException(EXCEPTION);\n",
        "78": "  public void testFutureGetThrowsCancellationIfInputCancelled()\n",
        "79": "      throws Exception {\n",
        "83": "      fail(\"Result future must throw CancellationException\"\n",
        "84": "          + \" if input future is cancelled.\");\n",
        "85": "    } catch (CancellationException expected) {}\n",
        "88": "  public void testFutureGetThrowsCancellationIfOutputCancelled()\n",
        "89": "      throws Exception {\n",
        "94": "      fail(\"Result future must throw CancellationException\"\n",
        "95": "          + \" if function output future is cancelled.\");\n",
        "96": "    } catch (CancellationException expected) {}\n",
        "106": "      fail(\"Result future is cancelled and should have thrown a\"\n",
        "107": "          + \" CancellationException\");\n",
        "108": "    } catch (CancellationException expected) {}\n",
        "119": "      fail(\"Result future is cancelled and should have thrown a\"\n",
        "120": "          + \" CancellationException\");\n",
        "121": "    } catch (CancellationException expected) {}\n",
        "141": "      fail(\"Result future is cancelled and should have thrown a\"\n",
        "142": "          + \" CancellationException\");\n",
        "143": "    } catch (CancellationException expected) {}\n",
        "145": "    funcCompletionLatch.countDown();  // allow the function to complete\n",
        "148": "      fail(\"The function output future is cancelled and should have thrown a\"\n",
        "149": "          + \" CancellationException\");\n",
        "150": "    } catch (CancellationException expected) {}\n",
        "173": "  /**\n",
        "174": "   * Proxy to throw a {@link RuntimeException} out of the {@link #get()} method.\n",
        "175": "   */\n",
        "176": "  public static class BadFuture\n",
        "177": "      extends SimpleForwardingListenableFuture<Integer> {\n"
    }
}