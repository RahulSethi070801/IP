{
    "addition": {
        "42": "  private static final char[] ARRAY234 = {(char) 2, (char) 3, (char) 4};\n",
        "47": "  private static final char[] VALUES = {LEAST, 'a', '\\u00e0', '\\udcaa', GREATEST};\n",
        "80": "      assertTrue(\n",
        "81": "          value + \" not found in exception text: \" + ex.getMessage(),\n",
        "90": "        assertEquals(x + \", \" + y, Character.valueOf(x).compareTo(y), Chars.compare(x, y));\n",
        "109": "    assertEquals(0, Chars.indexOf(new char[] {(char) -1}, (char) -1));\n",
        "113": "    assertEquals(1, Chars.indexOf(new char[] {(char) 2, (char) 3, (char) 2, (char) 3}, (char) 3));\n",
        "124": "    assertEquals(0, Chars.indexOf(ARRAY234, new char[] {(char) 2, (char) 3}));\n",
        "125": "    assertEquals(1, Chars.indexOf(ARRAY234, new char[] {(char) 3, (char) 4}));\n",
        "126": "    assertEquals(1, Chars.indexOf(ARRAY234, new char[] {(char) 3}));\n",
        "127": "    assertEquals(2, Chars.indexOf(ARRAY234, new char[] {(char) 4}));\n",
        "128": "    assertEquals(\n",
        "129": "        1,\n",
        "130": "        Chars.indexOf(\n",
        "131": "            new char[] {(char) 2, (char) 3, (char) 3, (char) 3, (char) 3}, new char[] {(char) 3}));\n",
        "132": "    assertEquals(\n",
        "133": "        2,\n",
        "134": "        Chars.indexOf(\n",
        "135": "            new char[] {(char) 2, (char) 3, (char) 2, (char) 3, (char) 4, (char) 2, (char) 3},\n",
        "136": "            new char[] {(char) 2, (char) 3, (char) 4}));\n",
        "137": "    assertEquals(\n",
        "138": "        1,\n",
        "139": "        Chars.indexOf(\n",
        "140": "            new char[] {(char) 2, (char) 2, (char) 3, (char) 4, (char) 2, (char) 3, (char) 4},\n",
        "141": "            new char[] {(char) 2, (char) 3, (char) 4}));\n",
        "142": "    assertEquals(\n",
        "143": "        -1,\n",
        "144": "        Chars.indexOf(\n",
        "145": "            new char[] {(char) 4, (char) 3, (char) 2}, new char[] {(char) 2, (char) 3, (char) 4}));\n",
        "152": "    assertEquals(0, Chars.lastIndexOf(new char[] {(char) -1}, (char) -1));\n",
        "156": "    assertEquals(\n",
        "157": "        3, Chars.lastIndexOf(new char[] {(char) 2, (char) 3, (char) 2, (char) 3}, (char) 3));\n",
        "171": "    assertEquals(\n",
        "172": "        (char) 9, Chars.max((char) 8, (char) 6, (char) 7, (char) 5, (char) 3, (char) 0, (char) 9));\n",
        "186": "    assertEquals(\n",
        "187": "        (char) 0, Chars.min((char) 8, (char) 6, (char) 7, (char) 5, (char) 3, (char) 0, (char) 9));\n",
        "210": "    assertTrue(\n",
        "211": "        Arrays.equals(\n",
        "212": "            new char[] {(char) 1, (char) 1, (char) 1}, Chars.concat(ARRAY1, ARRAY1, ARRAY1)));\n",
        "213": "    assertTrue(\n",
        "214": "        Arrays.equals(\n",
        "215": "            new char[] {(char) 1, (char) 2, (char) 3, (char) 4}, Chars.concat(ARRAY1, ARRAY234)));\n",
        "220": "    assertEquals('\\u2345', Chars.fromByteArray(new byte[] {0x23, 0x45, (byte) 0xDC}));\n",
        "221": "    assertEquals('\\uFEDC', Chars.fromByteArray(new byte[] {(byte) 0xFE, (byte) 0xDC}));\n",
        "244": "        char result = Chars.fromByteArray(new byte[] {(byte) hi, (byte) lo});\n",
        "245": "        assertEquals(\n",
        "246": "            String.format(\n",
        "247": "                Locale.ROOT, \"hi=%s, lo=%s, expected=%s, result=%s\", hi, lo, (int) c, (int) result),\n",
        "248": "            c,\n",
        "249": "            result);\n",
        "274": "    assertTrue(\n",
        "275": "        Arrays.equals(\n",
        "276": "            new char[] {(char) 1, (char) 0, (char) 0}, Chars.ensureCapacity(ARRAY1, 2, 1)));\n",
        "301": "    List<char[]> ordered =\n",
        "302": "        Arrays.asList(\n",
        "303": "            new char[] {},\n",
        "304": "            new char[] {LEAST},\n",
        "305": "            new char[] {LEAST, LEAST},\n",
        "306": "            new char[] {LEAST, (char) 1},\n",
        "307": "            new char[] {(char) 1},\n",
        "308": "            new char[] {(char) 1, LEAST},\n",
        "309": "            new char[] {GREATEST, GREATEST - (char) 1},\n",
        "310": "            new char[] {GREATEST, GREATEST},\n",
        "311": "            new char[] {GREATEST, GREATEST, GREATEST});\n",
        "399": "    for (int delta : new int[] {+1, 0, -1}) {\n",
        "402": "        Collection<Character> misleadingSize = Helpers.misleadingSizeCollection(delta);\n",
        "432": "    char[] array = {(char) 0, (char) 1, (char) 2};\n",
        "438": "    assertTrue(Arrays.equals(new char[] {(char) 0, (char) 1, (char) 2}, newArray));\n",
        "445": "    char[] array = {(char) 0, (char) 1, (char) 2, (char) 3};\n",
        "447": "    assertTrue(Arrays.equals(new char[] {(char) 1, (char) 2}, Chars.toArray(list.subList(1, 3))));\n",
        "448": "    assertTrue(Arrays.equals(new char[] {}, Chars.toArray(list.subList(2, 2))));\n"
    },
    "removed": {
        "42": "  private static final char[] ARRAY234\n",
        "43": "      = {(char) 2, (char) 3, (char) 4};\n",
        "48": "  private static final char[] VALUES =\n",
        "49": "      {LEAST, 'a', '\\u00e0', '\\udcaa', GREATEST};\n",
        "82": "      assertTrue(value + \" not found in exception text: \" + ex.getMessage(),\n",
        "91": "        assertEquals(x + \", \" + y,\n",
        "92": "                     Character.valueOf(x).compareTo(y),\n",
        "93": "                     Chars.compare(x, y));\n",
        "112": "    assertEquals(0, Chars.indexOf(\n",
        "113": "        new char[] {(char) -1}, (char) -1));\n",
        "117": "    assertEquals(1, Chars.indexOf(\n",
        "118": "        new char[] { (char) 2, (char) 3, (char) 2, (char) 3 },\n",
        "119": "        (char) 3));\n",
        "130": "    assertEquals(0, Chars.indexOf(\n",
        "131": "        ARRAY234, new char[] { (char) 2, (char) 3 }));\n",
        "132": "    assertEquals(1, Chars.indexOf(\n",
        "133": "        ARRAY234, new char[] { (char) 3, (char) 4 }));\n",
        "134": "    assertEquals(1, Chars.indexOf(ARRAY234, new char[] { (char) 3 }));\n",
        "135": "    assertEquals(2, Chars.indexOf(ARRAY234, new char[] { (char) 4 }));\n",
        "136": "    assertEquals(1, Chars.indexOf(new char[] { (char) 2, (char) 3,\n",
        "137": "        (char) 3, (char) 3, (char) 3 },\n",
        "138": "        new char[] { (char) 3 }\n",
        "139": "    ));\n",
        "140": "    assertEquals(2, Chars.indexOf(\n",
        "141": "        new char[] { (char) 2, (char) 3, (char) 2,\n",
        "142": "            (char) 3, (char) 4, (char) 2, (char) 3},\n",
        "143": "        new char[] { (char) 2, (char) 3, (char) 4}\n",
        "144": "    ));\n",
        "145": "    assertEquals(1, Chars.indexOf(\n",
        "146": "        new char[] { (char) 2, (char) 2, (char) 3,\n",
        "147": "            (char) 4, (char) 2, (char) 3, (char) 4},\n",
        "148": "        new char[] { (char) 2, (char) 3, (char) 4}\n",
        "149": "    ));\n",
        "150": "    assertEquals(-1, Chars.indexOf(\n",
        "151": "        new char[] { (char) 4, (char) 3, (char) 2},\n",
        "152": "        new char[] { (char) 2, (char) 3, (char) 4}\n",
        "153": "    ));\n",
        "160": "    assertEquals(0, Chars.lastIndexOf(\n",
        "161": "        new char[] {(char) -1}, (char) -1));\n",
        "165": "    assertEquals(3, Chars.lastIndexOf(\n",
        "166": "        new char[] { (char) 2, (char) 3, (char) 2, (char) 3 },\n",
        "167": "        (char) 3));\n",
        "181": "    assertEquals((char) 9, Chars.max(\n",
        "182": "        (char) 8, (char) 6, (char) 7,\n",
        "183": "        (char) 5, (char) 3, (char) 0, (char) 9));\n",
        "197": "    assertEquals((char) 0, Chars.min(\n",
        "198": "        (char) 8, (char) 6, (char) 7,\n",
        "199": "        (char) 5, (char) 3, (char) 0, (char) 9));\n",
        "222": "    assertTrue(Arrays.equals(\n",
        "223": "        new char[] {(char) 1, (char) 1, (char) 1},\n",
        "224": "        Chars.concat(ARRAY1, ARRAY1, ARRAY1)));\n",
        "225": "    assertTrue(Arrays.equals(\n",
        "226": "        new char[] {(char) 1, (char) 2, (char) 3, (char) 4},\n",
        "227": "        Chars.concat(ARRAY1, ARRAY234)));\n",
        "232": "    assertEquals('\\u2345', Chars.fromByteArray(\n",
        "233": "        new byte[] {0x23, 0x45, (byte) 0xDC}));\n",
        "234": "    assertEquals('\\uFEDC', Chars.fromByteArray(\n",
        "235": "        new byte[] {(byte) 0xFE, (byte) 0xDC}));\n",
        "258": "        char result = Chars.fromByteArray(new byte[]{(byte) hi, (byte) lo});\n",
        "259": "        assertEquals(String.format(Locale.ROOT,\n",
        "260": "            \"hi=%s, lo=%s, expected=%s, result=%s\",\n",
        "261": "            hi, lo, (int) c, (int) result), c, result);\n",
        "286": "    assertTrue(Arrays.equals(\n",
        "287": "        new char[] {(char) 1, (char) 0, (char) 0},\n",
        "288": "        Chars.ensureCapacity(ARRAY1, 2, 1)));\n",
        "313": "    List<char[]> ordered = Arrays.asList(\n",
        "314": "        new char[] {},\n",
        "315": "        new char[] {LEAST},\n",
        "316": "        new char[] {LEAST, LEAST},\n",
        "317": "        new char[] {LEAST, (char) 1},\n",
        "318": "        new char[] {(char) 1},\n",
        "319": "        new char[] {(char) 1, LEAST},\n",
        "320": "        new char[] {GREATEST, GREATEST - (char) 1},\n",
        "321": "        new char[] {GREATEST, GREATEST},\n",
        "322": "        new char[] {GREATEST, GREATEST, GREATEST});\n",
        "410": "    for (int delta : new int[] { +1, 0, -1 }) {\n",
        "413": "        Collection<Character> misleadingSize =\n",
        "414": "            Helpers.misleadingSizeCollection(delta);\n",
        "444": "    char[] array = { (char) 0, (char) 1, (char) 2 };\n",
        "450": "    assertTrue(Arrays.equals(\n",
        "451": "        new char[] { (char) 0, (char) 1, (char) 2 }, newArray));\n",
        "458": "    char[] array = { (char) 0, (char) 1, (char) 2, (char) 3 };\n",
        "460": "    assertTrue(Arrays.equals(new char[] { (char) 1, (char) 2 },\n",
        "461": "        Chars.toArray(list.subList(1, 3))));\n",
        "462": "    assertTrue(Arrays.equals(new char[] {},\n",
        "463": "        Chars.toArray(list.subList(2, 2))));\n"
    }
}