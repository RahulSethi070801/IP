{
    "addition": {
        "810": "  /** Helper {@code Function} for {@link #dereference}. */\n",
        "911": "   * <pre>{@code\n",
        "912": "   * final ListenableFuture<Instant> loginDateFuture =\n",
        "913": "   *     loginService.findLastLoginDate(username);\n",
        "914": "   * final ListenableFuture<List<String>> recentCommandsFuture =\n",
        "915": "   *     recentCommandsService.findRecentCommands(username);\n",
        "916": "   * Callable<UsageHistory> usageComputation =\n",
        "917": "   *     new Callable<UsageHistory>() {\n",
        "918": "   *       public UsageHistory call() throws Exception {\n",
        "919": "   *         return new UsageHistory(\n",
        "920": "   *             username, loginDateFuture.get(), recentCommandsFuture.get());\n",
        "921": "   *       }\n",
        "922": "   *     };\n",
        "923": "   * ListenableFuture<UsageHistory> usageFuture =\n",
        "924": "   *     Futures.whenAllSucceed(loginDateFuture, recentCommandsFuture)\n",
        "925": "   *         .call(usageComputation, executor);\n",
        "926": "   * }</pre>\n",
        "1444": "   *\n",
        "1446": "   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause\n",
        "1447": "   *       is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code\n",
        "1448": "   *       RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.\n",
        "1449": "   *   <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the\n",
        "1450": "   *       interrupt).\n",
        "1451": "   *   <li>Any {@link CancellationException} is propagated untouched, as is any other {@link\n",
        "1452": "   *       RuntimeException} (though {@code get} implementations are discouraged from throwing such\n",
        "1453": "   *       exceptions).\n",
        "1493": "   *\n",
        "1495": "   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause\n",
        "1496": "   *       is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code\n",
        "1497": "   *       RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.\n",
        "1498": "   *   <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the\n",
        "1499": "   *       interrupt).\n",
        "1500": "   *   <li>Any {@link TimeoutException} is wrapped in an {@code X}.\n",
        "1501": "   *   <li>Any {@link CancellationException} is propagated untouched, as is any other {@link\n",
        "1502": "   *       RuntimeException} (though {@code get} implementations are discouraged from throwing such\n",
        "1503": "   *       exceptions).\n",
        "1543": "   *\n",
        "1545": "   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@link\n",
        "1546": "   *       UncheckedExecutionException} (if the cause is an {@code Exception}) or {@link\n",
        "1547": "   *       ExecutionError} (if the cause is an {@code Error}).\n",
        "1548": "   *   <li>Any {@link InterruptedException} causes a retry of the {@code get} call. The interrupt is\n",
        "1549": "   *       restored before {@code getUnchecked} returns.\n",
        "1550": "   *   <li>Any {@link CancellationException} is propagated untouched. So is any other {@link\n",
        "1551": "   *       RuntimeException} ({@code get} implementations are discouraged from throwing such\n",
        "1552": "   *       exceptions).\n"
    },
    "removed": {
        "810": "  /**\n",
        "811": "   * Helper {@code Function} for {@link #dereference}.\n",
        "812": "   */\n",
        "913": "   * <pre>   {@code\n",
        "914": "   *   final ListenableFuture<Instant> loginDateFuture =\n",
        "915": "   *       loginService.findLastLoginDate(username);\n",
        "916": "   *   final ListenableFuture<List<String>> recentCommandsFuture =\n",
        "917": "   *       recentCommandsService.findRecentCommands(username);\n",
        "918": "   *   Callable<UsageHistory> usageComputation =\n",
        "919": "   *       new Callable<UsageHistory>() {\n",
        "920": "   *         public UsageHistory call() throws Exception {\n",
        "921": "   *           return new UsageHistory(\n",
        "922": "   *               username, loginDateFuture.get(), recentCommandsFuture.get());\n",
        "923": "   *         }\n",
        "924": "   *       };\n",
        "925": "   *   ListenableFuture<UsageHistory> usageFuture =\n",
        "926": "   *       Futures.whenAllSucceed(loginDateFuture, recentCommandsFuture)\n",
        "927": "   *           .call(usageComputation, executor);}</pre>\n",
        "1446": "   * <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause is\n",
        "1447": "   *     a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code\n",
        "1448": "   *     RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.\n",
        "1449": "   * <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the\n",
        "1450": "   *     interrupt).\n",
        "1451": "   * <li>Any {@link CancellationException} is propagated untouched, as is any other {@link\n",
        "1452": "   *     RuntimeException} (though {@code get} implementations are discouraged from throwing such\n",
        "1453": "   *     exceptions).\n",
        "1494": "   * <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause is\n",
        "1495": "   *     a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code\n",
        "1496": "   *     RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.\n",
        "1497": "   * <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the\n",
        "1498": "   *     interrupt).\n",
        "1499": "   * <li>Any {@link TimeoutException} is wrapped in an {@code X}.\n",
        "1500": "   * <li>Any {@link CancellationException} is propagated untouched, as is any other {@link\n",
        "1501": "   *     RuntimeException} (though {@code get} implementations are discouraged from throwing such\n",
        "1502": "   *     exceptions).\n",
        "1543": "   * <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@link\n",
        "1544": "   *     UncheckedExecutionException} (if the cause is an {@code Exception}) or {@link\n",
        "1545": "   *     ExecutionError} (if the cause is an {@code Error}).\n",
        "1546": "   * <li>Any {@link InterruptedException} causes a retry of the {@code get} call. The interrupt is\n",
        "1547": "   *     restored before {@code getUnchecked} returns.\n",
        "1548": "   * <li>Any {@link CancellationException} is propagated untouched. So is any other {@link\n",
        "1549": "   *     RuntimeException} ({@code get} implementations are discouraged from throwing such\n",
        "1550": "   *     exceptions).\n"
    }
}