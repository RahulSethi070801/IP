{
    "addition": {
        "37": " * Implementation of {@code Table} whose row keys and column keys are ordered by their natural\n",
        "38": " * ordering or by supplied comparators. When constructing a {@code TreeBasedTable}, you may provide\n",
        "39": " * comparators for the row keys and the column keys, or you may use natural ordering for both.\n",
        "41": " * <p>The {@link #rowKeySet} method returns a {@link SortedSet} and the {@link #rowMap} method\n",
        "42": " * returns a {@link SortedMap}, instead of the {@link Set} and {@link Map} specified by the {@link\n",
        "43": " * Table} interface.\n",
        "45": " * <p>The views returned by {@link #column}, {@link #columnKeySet()}, and {@link #columnMap()} have\n",
        "46": " * iterators that don't support {@code remove()}. Otherwise, all optional operations are supported.\n",
        "47": " * Null row keys, columns keys, and values are not supported.\n",
        "49": " * <p>Lookups by row key are often faster than lookups by column key, because the data is stored in\n",
        "50": " * a {@code Map<R, Map<C, V>>}. A method call like {@code column(columnKey).get(rowKey)} still runs\n",
        "51": " * quickly, since the row key is provided. However, {@code column(columnKey).size()} takes longer,\n",
        "52": " * since an iteration across all row keys occurs.\n",
        "54": " * <p>Because a {@code TreeBasedTable} has unique sorted values for a given row, both {@code\n",
        "55": " * row(rowKey)} and {@code rowMap().get(rowKey)} are {@link SortedMap} instances, instead of the\n",
        "56": " * {@link Map} specified in the {@link Table} interface.\n",
        "58": " * <p>Note that this implementation is not synchronized. If multiple threads access this table\n",
        "59": " * concurrently and one of the threads modifies the table, it must be synchronized externally.\n",
        "62": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#table\"> {@code Table}</a>.\n",
        "88": "   * Creates an empty {@code TreeBasedTable} that uses the natural orderings of both row and column\n",
        "89": "   * keys.\n",
        "91": "   * <p>The method signature specifies {@code R extends Comparable} with a raw {@link Comparable},\n",
        "92": "   * instead of {@code R extends Comparable<? super R>}, and the same for {@code C}. That's\n",
        "93": "   * necessary to support classes defined without generics.\n",
        "100": "   * Creates an empty {@code TreeBasedTable} that is ordered by the specified comparators.\n",
        "113": "   * Creates a {@code TreeBasedTable} with the same mappings and sort order as the specified {@code\n",
        "114": "   * TreeBasedTable}.\n",
        "159": "   * <p>Because a {@code TreeBasedTable} has unique sorted values for a given row, this method\n",
        "160": "   * returns a {@link SortedMap}, instead of the {@link Map} specified in the {@link Table}\n",
        "161": "   * interface.\n",
        "162": "   *\n",
        "163": "   * @since 10.0 (<a href=\"https://github.com/google/guava/wiki/Compatibility\" >mostly\n",
        "164": "   *     source-compatible</a> since 7.0)\n",
        "312": "  /** Overridden column iterator to return columns values in globally sorted order. */\n"
    },
    "removed": {
        "37": " * Implementation of {@code Table} whose row keys and column keys are ordered\n",
        "38": " * by their natural ordering or by supplied comparators. When constructing a\n",
        "39": " * {@code TreeBasedTable}, you may provide comparators for the row keys and\n",
        "40": " * the column keys, or you may use natural ordering for both.\n",
        "42": " * <p>The {@link #rowKeySet} method returns a {@link SortedSet} and the {@link\n",
        "43": " * #rowMap} method returns a {@link SortedMap}, instead of the {@link Set} and\n",
        "44": " * {@link Map} specified by the {@link Table} interface.\n",
        "46": " * <p>The views returned by {@link #column}, {@link #columnKeySet()}, and {@link\n",
        "47": " * #columnMap()} have iterators that don't support {@code remove()}. Otherwise,\n",
        "48": " * all optional operations are supported. Null row keys, columns keys, and\n",
        "49": " * values are not supported.\n",
        "51": " * <p>Lookups by row key are often faster than lookups by column key, because\n",
        "52": " * the data is stored in a {@code Map<R, Map<C, V>>}. A method call like {@code\n",
        "53": " * column(columnKey).get(rowKey)} still runs quickly, since the row key is\n",
        "54": " * provided. However, {@code column(columnKey).size()} takes longer, since an\n",
        "55": " * iteration across all row keys occurs.\n",
        "57": " * <p>Because a {@code TreeBasedTable} has unique sorted values for a given\n",
        "58": " * row, both {@code row(rowKey)} and {@code rowMap().get(rowKey)} are {@link\n",
        "59": " * SortedMap} instances, instead of the {@link Map} specified in the {@link\n",
        "60": " * Table} interface.\n",
        "62": " * <p>Note that this implementation is not synchronized. If multiple threads\n",
        "63": " * access this table concurrently and one of the threads modifies the table, it\n",
        "64": " * must be synchronized externally.\n",
        "67": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#table\">\n",
        "68": " * {@code Table}</a>.\n",
        "94": "   * Creates an empty {@code TreeBasedTable} that uses the natural orderings\n",
        "95": "   * of both row and column keys.\n",
        "97": "   * <p>The method signature specifies {@code R extends Comparable} with a raw\n",
        "98": "   * {@link Comparable}, instead of {@code R extends Comparable<? super R>},\n",
        "99": "   * and the same for {@code C}. That's necessary to support classes defined\n",
        "100": "   * without generics.\n",
        "107": "   * Creates an empty {@code TreeBasedTable} that is ordered by the specified\n",
        "108": "   * comparators.\n",
        "121": "   * Creates a {@code TreeBasedTable} with the same mappings and sort order\n",
        "122": "   * as the specified {@code TreeBasedTable}.\n",
        "167": "   * <p>Because a {@code TreeBasedTable} has unique sorted values for a given\n",
        "168": "   * row, this method returns a {@link SortedMap}, instead of the {@link Map}\n",
        "169": "   * specified in the {@link Table} interface.\n",
        "170": "   * @since 10.0\n",
        "171": "   *     (<a href=\"https://github.com/google/guava/wiki/Compatibility\"\n",
        "172": "   *     >mostly source-compatible</a> since 7.0)\n",
        "320": "  /**\n",
        "321": "   * Overridden column iterator to return columns values in globally sorted\n",
        "322": "   * order.\n",
        "323": "   */\n"
    }
}