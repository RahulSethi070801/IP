{
    "addition": {
        "46": "  /** Timeout to use when we don't expect the timeout to expire. */\n",
        "48": "\n",
        "58": "      throw new AssertionError(\n",
        "59": "          \"Thread interrupted on test entry. \"\n",
        "60": "              + \"Some test probably didn't clear the interrupt state\");\n",
        "63": "    tearDownStack.addTearDown(\n",
        "64": "        new TearDown() {\n",
        "65": "          @Override\n",
        "66": "          public void tearDown() {\n",
        "67": "            Thread.interrupted();\n",
        "68": "          }\n",
        "69": "        });\n",
        "353": "   * Wrapper around {@link Stopwatch} which also contains an \"expected completion time.\" Creating a\n",
        "354": "   * {@code Completion} starts the underlying stopwatch.\n",
        "366": "     * Asserts that the expected completion time has passed (and not \"too much\" time beyond that).\n",
        "370": "      assertTimeNotPassed(stopwatch, expectedCompletionWaitMillis + LONG_DELAY_MS);\n",
        "374": "     * Asserts that at least {@code timeout} has passed but the expected completion time has not.\n",
        "382": "    private static void assertAtLeastTimePassed(Stopwatch stopwatch, long expectedMillis) {\n",
        "389": "      assertTrue(\n",
        "390": "          \"Expected elapsed millis to be >= \" + expectedMillis + \" but was \" + elapsedMillis,\n",
        "391": "          elapsedMillis + 5 >= expectedMillis);\n",
        "397": "  /** Manages a {@link BlockingQueue} and associated timings for a {@code put} call. */\n",
        "403": "     * Creates a {@link EnableWrites} which open up a spot for a {@code put} to succeed in {@code\n",
        "404": "     * countdownInMillis}.\n",
        "417": "    /** Perform a {@code put} and assert that operation completed in the expected timeframe. */\n",
        "424": "    private static void scheduleEnableWrites(BlockingQueue<String> queue, long countdownInMillis) {\n",
        "432": "  /** Manages a {@link BlockingQueue} and associated timings for a {@code take} call. */\n",
        "438": "     * Creates a {@link EnableReads} which insert an element for a {@code take} to receive in {@code\n",
        "439": "     * countdownInMillis}.\n",
        "451": "    /** Perform a {@code take} and assert that operation completed in the expected timeframe. */\n",
        "458": "    private static void scheduleEnableReads(BlockingQueue<String> queue, long countdownInMillis) {\n",
        "466": "  /** Manages a {@link Semaphore} and associated timings. */\n",
        "472": "     * Create a {@link Release} which will release a semaphore permit in {@code countdownInMillis}.\n",
        "494": "     * Requests a permit from the semaphore with a timeout and asserts that the wait returned within\n",
        "495": "     * the expected timeout.\n",
        "624": "    protected void doAction() {}\n",
        "647": "  private static void assertTimeNotPassed(Stopwatch stopwatch, long timelimitMillis) {\n",
        "653": "   * Await an interrupt, then clear the interrupt status. Similar to {@code\n",
        "654": "   * assertTrue(Thread.interrupted())} except that this version tolerates late interrupts.\n"
    },
    "removed": {
        "46": "  /**\n",
        "47": "   * Timeout to use when we don't expect the timeout to expire.\n",
        "48": "   */\n",
        "59": "      throw new AssertionError(\"Thread interrupted on test entry. \"\n",
        "60": "          + \"Some test probably didn't clear the interrupt state\");\n",
        "63": "    tearDownStack.addTearDown(new TearDown() {\n",
        "64": "      @Override\n",
        "65": "      public void tearDown() {\n",
        "66": "        Thread.interrupted();\n",
        "67": "      }\n",
        "68": "    });\n",
        "352": "   * Wrapper around {@link Stopwatch} which also contains an\n",
        "353": "   * \"expected completion time.\" Creating a {@code Completion} starts the\n",
        "354": "   * underlying stopwatch.\n",
        "366": "     * Asserts that the expected completion time has passed (and not \"too much\"\n",
        "367": "     * time beyond that).\n",
        "371": "      assertTimeNotPassed(stopwatch,\n",
        "372": "          expectedCompletionWaitMillis + LONG_DELAY_MS);\n",
        "376": "     * Asserts that at least {@code timeout} has passed but the expected\n",
        "377": "     * completion time has not.\n",
        "385": "    private static void assertAtLeastTimePassed(\n",
        "386": "        Stopwatch stopwatch, long expectedMillis) {\n",
        "393": "      assertTrue(\"Expected elapsed millis to be >= \" + expectedMillis\n",
        "394": "          + \" but was \" + elapsedMillis, elapsedMillis + 5 >= expectedMillis);\n",
        "400": "  /**\n",
        "401": "   * Manages a {@link BlockingQueue} and associated timings for a {@code put}\n",
        "402": "   * call.\n",
        "403": "   */\n",
        "409": "     * Creates a {@link EnableWrites} which open up a spot for a {@code put} to\n",
        "410": "     * succeed in {@code countdownInMillis}.\n",
        "423": "    /**\n",
        "424": "     * Perform a {@code put} and assert that operation completed in the expected\n",
        "425": "     * timeframe.\n",
        "426": "     */\n",
        "433": "    private static void scheduleEnableWrites(\n",
        "434": "        BlockingQueue<String> queue, long countdownInMillis) {\n",
        "442": "  /**\n",
        "443": "   * Manages a {@link BlockingQueue} and associated timings for a {@code take}\n",
        "444": "   * call.\n",
        "445": "   */\n",
        "451": "     * Creates a {@link EnableReads} which insert an element for a {@code take}\n",
        "452": "     * to receive in {@code countdownInMillis}.\n",
        "464": "    /**\n",
        "465": "     * Perform a {@code take} and assert that operation completed in the\n",
        "466": "     * expected timeframe.\n",
        "467": "     */\n",
        "474": "    private static void scheduleEnableReads(\n",
        "475": "        BlockingQueue<String> queue, long countdownInMillis) {\n",
        "483": "  /**\n",
        "484": "   * Manages a {@link Semaphore} and associated timings.\n",
        "485": "   */\n",
        "491": "     * Create a {@link Release} which will release a semaphore permit in\n",
        "492": "     * {@code countdownInMillis}.\n",
        "514": "     * Requests a permit from the semaphore with a timeout and asserts that the wait returned\n",
        "515": "     * within the expected timeout.\n",
        "644": "    protected void doAction() {\n",
        "645": "    }\n",
        "668": "  private static void assertTimeNotPassed(Stopwatch stopwatch,\n",
        "669": "      long timelimitMillis) {\n",
        "675": "   * Await an interrupt, then clear the interrupt status. Similar to\n",
        "676": "   * {@code assertTrue(Thread.interrupted())} except that this version tolerates\n",
        "677": "   * late interrupts.\n"
    }
}