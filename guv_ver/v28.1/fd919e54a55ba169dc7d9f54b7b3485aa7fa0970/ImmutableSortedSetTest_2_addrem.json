{
    "addition": {
        "68": "    suite.addTest(\n",
        "69": "        NavigableSetTestSuiteBuilder.using(new ImmutableSortedSetCopyOfGenerator())\n",
        "70": "            .named(ImmutableSortedSetTest.class.getName())\n",
        "71": "            .withFeatures(\n",
        "72": "                CollectionSize.ANY,\n",
        "73": "                CollectionFeature.KNOWN_ORDER,\n",
        "74": "                CollectionFeature.SERIALIZABLE,\n",
        "75": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "78": "    suite.addTest(\n",
        "79": "        NavigableSetTestSuiteBuilder.using(new ImmutableSortedSetExplicitComparator())\n",
        "80": "            .named(ImmutableSortedSetTest.class.getName() + \", explicit comparator, vararg\")\n",
        "81": "            .withFeatures(\n",
        "82": "                CollectionSize.ANY,\n",
        "83": "                CollectionFeature.KNOWN_ORDER,\n",
        "86": "            .createTestSuite());\n",
        "88": "    suite.addTest(\n",
        "89": "        NavigableSetTestSuiteBuilder.using(\n",
        "90": "                new ImmutableSortedSetExplicitSuperclassComparatorGenerator())\n",
        "91": "            .named(\n",
        "92": "                ImmutableSortedSetTest.class.getName()\n",
        "93": "                    + \", explicit superclass comparator, iterable\")\n",
        "94": "            .withFeatures(\n",
        "95": "                CollectionSize.ANY,\n",
        "96": "                CollectionFeature.KNOWN_ORDER,\n",
        "99": "            .createTestSuite());\n",
        "101": "    suite.addTest(\n",
        "102": "        NavigableSetTestSuiteBuilder.using(new ImmutableSortedSetReversedOrderGenerator())\n",
        "103": "            .named(ImmutableSortedSetTest.class.getName() + \", reverseOrder, iterator\")\n",
        "104": "            .withFeatures(\n",
        "105": "                CollectionSize.ANY,\n",
        "106": "                CollectionFeature.KNOWN_ORDER,\n",
        "111": "    suite.addTest(\n",
        "112": "        NavigableSetTestSuiteBuilder.using(new ImmutableSortedSetUnhashableGenerator())\n",
        "113": "            .suppressing(SetHashCodeTester.getHashCodeMethods())\n",
        "114": "            .named(ImmutableSortedSetTest.class.getName() + \", unhashable\")\n",
        "115": "            .withFeatures(\n",
        "116": "                CollectionSize.ANY,\n",
        "117": "                CollectionFeature.KNOWN_ORDER,\n",
        "118": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "121": "    suite.addTest(\n",
        "122": "        NavigableSetTestSuiteBuilder.using(new ImmutableSortedSetDescendingGenerator())\n",
        "123": "            .named(ImmutableSortedSetTest.class.getName() + \", descending\")\n",
        "124": "            .withFeatures(\n",
        "125": "                CollectionSize.ANY,\n",
        "126": "                CollectionFeature.KNOWN_ORDER,\n",
        "127": "                CollectionFeature.SERIALIZABLE,\n",
        "128": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "131": "    suite.addTest(\n",
        "132": "        ListTestSuiteBuilder.using(new ImmutableSortedSetAsListGenerator())\n",
        "133": "            .named(\"ImmutableSortedSet.asList\")\n",
        "134": "            .withFeatures(\n",
        "135": "                CollectionSize.ANY,\n",
        "136": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "137": "                CollectionFeature.SERIALIZABLE,\n",
        "138": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "141": "    suite.addTest(\n",
        "142": "        ListTestSuiteBuilder.using(new ImmutableSortedSetSubsetAsListGenerator())\n",
        "143": "            .named(\"ImmutableSortedSet.subSet.asList\")\n",
        "144": "            .withFeatures(\n",
        "145": "                CollectionSize.ANY,\n",
        "146": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "147": "                CollectionFeature.SERIALIZABLE,\n",
        "148": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "149": "            .createTestSuite());\n",
        "150": "\n",
        "151": "    suite.addTest(\n",
        "152": "        ListTestSuiteBuilder.using(new ImmutableSortedSetDescendingAsListGenerator())\n",
        "153": "            .named(\"ImmutableSortedSet.descendingSet.asList\")\n",
        "154": "            .withFeatures(\n",
        "155": "                CollectionSize.ANY,\n",
        "156": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "157": "                CollectionFeature.SERIALIZABLE,\n",
        "158": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "176": "  private static final Comparator<String> STRING_LENGTH = StringLengthComparator.INSTANCE;\n",
        "178": "  @Override\n",
        "179": "  protected <E extends Comparable<? super E>> SortedSet<E> of() {\n",
        "183": "  @Override\n",
        "184": "  protected <E extends Comparable<? super E>> SortedSet<E> of(E e) {\n",
        "188": "  @Override\n",
        "189": "  protected <E extends Comparable<? super E>> SortedSet<E> of(E e1, E e2) {\n",
        "193": "  @Override\n",
        "194": "  protected <E extends Comparable<? super E>> SortedSet<E> of(E e1, E e2, E e3) {\n",
        "198": "  @Override\n",
        "199": "  protected <E extends Comparable<? super E>> SortedSet<E> of(E e1, E e2, E e3, E e4) {\n",
        "203": "  @Override\n",
        "204": "  protected <E extends Comparable<? super E>> SortedSet<E> of(E e1, E e2, E e3, E e4, E e5) {\n",
        "209": "  @Override\n",
        "210": "  protected <E extends Comparable<? super E>> SortedSet<E> of(\n",
        "211": "      E e1, E e2, E e3, E e4, E e5, E e6, E... rest) {\n",
        "215": "  @Override\n",
        "216": "  protected <E extends Comparable<? super E>> SortedSet<E> copyOf(E[] elements) {\n",
        "220": "  @Override\n",
        "221": "  protected <E extends Comparable<? super E>> SortedSet<E> copyOf(\n",
        "226": "  @Override\n",
        "227": "  protected <E extends Comparable<? super E>> SortedSet<E> copyOf(Iterable<? extends E> elements) {\n",
        "231": "  @Override\n",
        "232": "  protected <E extends Comparable<? super E>> SortedSet<E> copyOf(Iterator<? extends E> elements) {\n",
        "372": "  interface Interface extends Comparable<Interface> {}\n",
        "373": "\n",
        "378": "    @Override\n",
        "379": "    public int compareTo(Interface other) {\n",
        "453": "    SortedSet<String> set =\n",
        "454": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "455": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "456": "            .build();\n",
        "461": "    SortedSet<String> set =\n",
        "462": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "463": "            .add(\"in\", \"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"a\", \"lazy\", \"dog\")\n",
        "464": "            .build();\n",
        "469": "    SortedSet<String> set =\n",
        "470": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "471": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "472": "            .build();\n",
        "481": "  public void testExplicit_containsMismatchedTypes() {\n",
        "482": "    SortedSet<String> set =\n",
        "483": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "484": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "485": "            .build();\n",
        "490": "    SortedSet<String> set =\n",
        "491": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "492": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "493": "            .build();\n",
        "498": "    SortedSet<String> set =\n",
        "499": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "500": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "501": "            .build();\n",
        "506": "        .containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\")\n",
        "507": "        .inOrder();\n",
        "513": "    SortedSet<String> set =\n",
        "514": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "515": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "516": "            .build();\n",
        "520": "    assertThat(set.tailSet(\"a\"))\n",
        "521": "        .containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\")\n",
        "522": "        .inOrder();\n",
        "527": "    SortedSet<String> set =\n",
        "528": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "529": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "530": "            .build();\n",
        "535": "        .containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\")\n",
        "536": "        .inOrder();\n",
        "548": "    SortedSet<String> set =\n",
        "549": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "550": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "551": "            .build();\n",
        "556": "    SortedSet<String> set =\n",
        "557": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "558": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "559": "            .build();\n",
        "574": "    SortedSet<String> set =\n",
        "575": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "576": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "577": "            .build();\n",
        "584": "    SortedSet<String> set = copyOf(asList(\"e\", \"a\", \"f\", \"b\", \"d\", \"c\"));\n",
        "589": "    SortedSet<String> set = copyOf(asList(\"e\", \"a\", \"e\", \"f\", \"b\", \"b\", \"d\", \"a\", \"c\"));\n",
        "625": "    SortedSet<String> set = copyOf(asIterator(\"e\", \"a\", \"e\", \"f\", \"b\", \"b\", \"d\", \"a\", \"c\"));\n",
        "635": "    SortedSet<String> set = copyOf(Sets.newTreeSet(asList(\"e\", \"a\", \"f\", \"b\", \"d\", \"c\")));\n",
        "646": "        ImmutableSortedSet.copyOf(\n",
        "647": "            STRING_LENGTH, asList(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "653": "        ImmutableSortedSet.copyOf(\n",
        "654": "            STRING_LENGTH,\n",
        "655": "            asList(\"in\", \"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"a\", \"lazy\", \"dog\"));\n",
        "661": "        ImmutableSortedSet.copyOf(\n",
        "662": "            STRING_LENGTH, asList(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "668": "        ImmutableSortedSet.copyOf(\n",
        "669": "            STRING_LENGTH, asIterator(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "675": "        ImmutableSortedSet.copyOf(\n",
        "676": "            STRING_LENGTH,\n",
        "677": "            asIterator(\"in\", \"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"a\", \"lazy\", \"dog\"));\n",
        "683": "        ImmutableSortedSet.copyOf(\n",
        "684": "            STRING_LENGTH, asIterator(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "696": "    SortedSet<String> input = Sets.newTreeSet(asList(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "702": "    SortedSet<String> input = Sets.newTreeSet(asList(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "719": "        Equivalence.equals()\n",
        "720": "            .onResultOf(ImmutableSortedSet<String>::comparator)\n",
        "733": "            set1.equals(set2)\n",
        "734": "                && set1.asList().equals(set2.asList())\n",
        "737": "        ImmutableSortedSet.orderedBy(String.CASE_INSENSITIVE_ORDER).add(\"a\", \"B\", \"c\", \"d\").build();\n",
        "765": "        equivalence =\n",
        "766": "            (set1, set2) -> {\n",
        "767": "              if (!set1.equals(set2)) {\n",
        "770": "              for (int i = 0; i < set1.size(); i++) {\n",
        "771": "                if (!set1.asList().get(i).fullEquals(set2.asList().get(i))) {\n",
        "772": "                  return false;\n",
        "773": "                }\n",
        "774": "              }\n",
        "775": "              return true;\n",
        "776": "            };\n",
        "855": "    SortedSet<String> set =\n",
        "856": "        new ImmutableSortedSet.Builder<String>(comparator).add(\"a\", \"b\", \"f\").build();\n",
        "871": "    SortedSet<String> set =\n",
        "872": "        new ImmutableSortedSet.Builder<String>(comparator).add(\"a\", \"b\", \"c\").build();\n",
        "879": "    SortedSet<String> set = ImmutableSortedSet.<String>reverseOrder().add(\"a\", \"b\", \"c\").build();\n",
        "884": "  private static final Comparator<Object> TO_STRING =\n",
        "885": "      new Comparator<Object>() {\n",
        "886": "        @Override\n",
        "887": "        public int compare(Object o1, Object o2) {\n",
        "888": "          return o1.toString().compareTo(o2.toString());\n",
        "889": "        }\n",
        "890": "      };\n",
        "893": "    SortedSet<Integer> set =\n",
        "894": "        new ImmutableSortedSet.Builder<Integer>(TO_STRING).add(3, 12, 101, 44).build();\n",
        "899": "    SortedSet<Number> set =\n",
        "900": "        new ImmutableSortedSet.Builder<Number>(TO_STRING).add(3, 12, 101, 44).build();\n",
        "904": "  @Override\n",
        "905": "  <E extends Comparable<E>> ImmutableSortedSet.Builder<E> builder() {\n",
        "909": "  @Override\n",
        "910": "  int getComplexBuilderSetLastElement() {\n",
        "919": "    ImmutableSortedSet<LegacyComparable> set1 = ImmutableSortedSet.of(LegacyComparable.Z);\n",
        "923": "    ImmutableSortedSet<LegacyComparable> set2 =\n",
        "924": "        ImmutableSortedSet.of(LegacyComparable.Z, LegacyComparable.Y);\n",
        "929": "    ImmutableSortedSet<LegacyComparable> set =\n",
        "930": "        ImmutableSortedSet.copyOf(LegacyComparable.VALUES_BACKWARD);\n",
        "935": "    ImmutableSortedSet<LegacyComparable> set =\n",
        "936": "        ImmutableSortedSet.copyOf(LegacyComparable.VALUES_BACKWARD.iterator());\n",
        "943": "    ImmutableSortedSet.Builder<LegacyComparable> builder =\n",
        "944": "        ImmutableSortedSet.<LegacyComparable>naturalOrder();\n",
        "957": "    ImmutableSortedSet.Builder<LegacyComparable> builder =\n",
        "958": "        ImmutableSortedSet.<LegacyComparable>reverseOrder();\n",
        "994": "    ImmutableSet<String> set = ImmutableSortedSet.of(\"a\", \"e\", \"i\", \"o\", \"u\").subSet(\"c\", \"r\");\n",
        "1002": "    ImmutableSet<String> set = ImmutableSortedSet.of(\"a\", \"e\", \"i\", \"o\", \"u\").subSet(\"c\", \"r\");\n",
        "1010": "    ImmutableSet<String> set =\n",
        "1011": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "1012": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "1013": "            .build();\n",
        "1033": "  private static void assertNotEqualLenient(TreeSet<?> unexpected, SortedSet<?> actual) {\n"
    },
    "removed": {
        "68": "    suite.addTest(NavigableSetTestSuiteBuilder.using(\n",
        "69": "        new ImmutableSortedSetCopyOfGenerator())\n",
        "70": "        .named(ImmutableSortedSetTest.class.getName())\n",
        "71": "        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "72": "            CollectionFeature.SERIALIZABLE,\n",
        "73": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "76": "    suite.addTest(NavigableSetTestSuiteBuilder.using(\n",
        "77": "        new ImmutableSortedSetExplicitComparator())\n",
        "78": "        .named(ImmutableSortedSetTest.class.getName()\n",
        "79": "            + \", explicit comparator, vararg\")\n",
        "80": "            .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "83": "                .createTestSuite());\n",
        "85": "    suite.addTest(NavigableSetTestSuiteBuilder.using(\n",
        "86": "        new ImmutableSortedSetExplicitSuperclassComparatorGenerator())\n",
        "87": "        .named(ImmutableSortedSetTest.class.getName()\n",
        "88": "            + \", explicit superclass comparator, iterable\")\n",
        "89": "            .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "92": "                .createTestSuite());\n",
        "94": "    suite.addTest(NavigableSetTestSuiteBuilder.using(\n",
        "95": "        new ImmutableSortedSetReversedOrderGenerator())\n",
        "96": "        .named(ImmutableSortedSetTest.class.getName()\n",
        "97": "            + \", reverseOrder, iterator\")\n",
        "98": "            .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "101": "                .createTestSuite());\n",
        "102": "\n",
        "103": "    suite.addTest(NavigableSetTestSuiteBuilder.using(\n",
        "104": "        new ImmutableSortedSetUnhashableGenerator())\n",
        "105": "        .suppressing(SetHashCodeTester.getHashCodeMethods())\n",
        "106": "        .named(ImmutableSortedSetTest.class.getName() + \", unhashable\")\n",
        "107": "        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "108": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "111": "    suite.addTest(NavigableSetTestSuiteBuilder.using(\n",
        "112": "        new ImmutableSortedSetDescendingGenerator())\n",
        "113": "        .named(ImmutableSortedSetTest.class.getName() + \", descending\")\n",
        "114": "        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "115": "            CollectionFeature.SERIALIZABLE,\n",
        "116": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "119": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "120": "        new ImmutableSortedSetAsListGenerator())\n",
        "121": "        .named(\"ImmutableSortedSet.asList\")\n",
        "122": "        .withFeatures(CollectionSize.ANY,\n",
        "123": "            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "124": "            CollectionFeature.SERIALIZABLE,\n",
        "125": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "128": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "129": "        new ImmutableSortedSetSubsetAsListGenerator())\n",
        "130": "        .named(\"ImmutableSortedSet.subSet.asList\")\n",
        "131": "        .withFeatures(CollectionSize.ANY,\n",
        "132": "            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "133": "            CollectionFeature.SERIALIZABLE,\n",
        "134": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "137": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "138": "        new ImmutableSortedSetDescendingAsListGenerator())\n",
        "139": "        .named(\"ImmutableSortedSet.descendingSet.asList\")\n",
        "140": "        .withFeatures(CollectionSize.ANY,\n",
        "141": "            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "142": "            CollectionFeature.SERIALIZABLE,\n",
        "143": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "161": "  private static final Comparator<String> STRING_LENGTH\n",
        "162": "      = StringLengthComparator.INSTANCE;\n",
        "164": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> of() {\n",
        "168": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> of(E e) {\n",
        "172": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> of(E e1, E e2) {\n",
        "176": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> of(E e1, E e2, E e3) {\n",
        "180": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> of(\n",
        "181": "      E e1, E e2, E e3, E e4) {\n",
        "185": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> of(\n",
        "186": "      E e1, E e2, E e3, E e4, E e5) {\n",
        "191": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> of(E e1, E e2, E e3,\n",
        "192": "      E e4, E e5, E e6, E... rest) {\n",
        "196": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> copyOf(E[] elements) {\n",
        "200": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> copyOf(\n",
        "205": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> copyOf(\n",
        "206": "      Iterable<? extends E> elements) {\n",
        "210": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> copyOf(\n",
        "211": "      Iterator<? extends E> elements) {\n",
        "351": "  interface Interface extends Comparable<Interface> {\n",
        "352": "  }\n",
        "357": "    @Override public int compareTo(Interface other) {\n",
        "431": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "432": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "437": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "438": "        \"in\", \"the\", \"quick\", \"brown\", \"fox\", \"jumped\",\n",
        "439": "        \"over\", \"a\", \"lazy\", \"dog\").build();\n",
        "444": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "445": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "454": "    public void testExplicit_containsMismatchedTypes() {\n",
        "455": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "456": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "461": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "462": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "467": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "468": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "473": "        .containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\").inOrder();\n",
        "479": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "480": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "484": "    assertThat(\n",
        "485": "        set.tailSet(\"a\")).containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\").inOrder();\n",
        "490": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "491": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "496": "        .containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\").inOrder();\n",
        "508": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "509": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "514": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "515": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "530": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "531": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "538": "    SortedSet<String> set =\n",
        "539": "        copyOf(asList(\"e\", \"a\", \"f\", \"b\", \"d\", \"c\"));\n",
        "544": "    SortedSet<String> set =\n",
        "545": "        copyOf(asList(\"e\", \"a\", \"e\", \"f\", \"b\", \"b\", \"d\", \"a\", \"c\"));\n",
        "581": "    SortedSet<String> set =\n",
        "582": "        copyOf(asIterator(\"e\", \"a\", \"e\", \"f\", \"b\", \"b\", \"d\", \"a\", \"c\"));\n",
        "592": "    SortedSet<String> set =\n",
        "593": "        copyOf(Sets.newTreeSet(asList(\"e\", \"a\", \"f\", \"b\", \"d\", \"c\")));\n",
        "604": "        ImmutableSortedSet.copyOf(STRING_LENGTH, asList(\n",
        "605": "            \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "611": "        ImmutableSortedSet.copyOf(STRING_LENGTH, asList(\n",
        "612": "            \"in\", \"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"a\",\n",
        "613": "            \"lazy\", \"dog\"));\n",
        "619": "        ImmutableSortedSet.copyOf(STRING_LENGTH, asList(\n",
        "620": "            \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "626": "        ImmutableSortedSet.copyOf(STRING_LENGTH, asIterator(\n",
        "627": "            \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "633": "        ImmutableSortedSet.copyOf(STRING_LENGTH, asIterator(\n",
        "634": "            \"in\", \"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"a\",\n",
        "635": "            \"lazy\", \"dog\"));\n",
        "641": "        ImmutableSortedSet.copyOf(STRING_LENGTH, asIterator(\n",
        "642": "            \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "654": "    SortedSet<String> input = Sets.newTreeSet(\n",
        "655": "        asList(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "661": "    SortedSet<String> input =\n",
        "662": "        Sets.newTreeSet(asList(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "679": "        Equivalence.equals().onResultOf(ImmutableSortedSet<String>::comparator)\n",
        "692": "            set1.equals(set2) && set1.asList().equals(set2.asList())\n",
        "695": "        ImmutableSortedSet.orderedBy(String.CASE_INSENSITIVE_ORDER)\n",
        "696": "            .add(\"a\", \"B\", \"c\", \"d\")\n",
        "697": "            .build();\n",
        "725": "        equivalence = (set1, set2) -> {\n",
        "726": "            if (!set1.equals(set2)) {\n",
        "727": "              return false;\n",
        "728": "            }\n",
        "729": "            for (int i = 0; i < set1.size(); i++) {\n",
        "730": "              if (!set1.asList().get(i).fullEquals(set2.asList().get(i))) {\n",
        "733": "            }\n",
        "734": "            return true;\n",
        "735": "          };\n",
        "814": "    SortedSet<String> set = new ImmutableSortedSet.Builder<String>(comparator)\n",
        "815": "        .add(\"a\", \"b\", \"f\").build();\n",
        "830": "    SortedSet<String> set = new ImmutableSortedSet.Builder<String>(comparator)\n",
        "831": "        .add(\"a\", \"b\", \"c\").build();\n",
        "838": "    SortedSet<String> set = ImmutableSortedSet.<String>reverseOrder()\n",
        "839": "        .add(\"a\", \"b\", \"c\").build();\n",
        "844": "  private static final Comparator<Object> TO_STRING\n",
        "845": "      = new Comparator<Object>() {\n",
        "846": "          @Override\n",
        "847": "          public int compare(Object o1, Object o2) {\n",
        "848": "            return o1.toString().compareTo(o2.toString());\n",
        "849": "          }\n",
        "850": "        };\n",
        "853": "    SortedSet<Integer> set = new ImmutableSortedSet.Builder<Integer>(TO_STRING)\n",
        "854": "        .add(3, 12, 101, 44).build();\n",
        "859": "    SortedSet<Number> set = new ImmutableSortedSet.Builder<Number>(TO_STRING)\n",
        "860": "        .add(3, 12, 101, 44).build();\n",
        "864": "  @Override <E extends Comparable<E>> ImmutableSortedSet.Builder<E> builder() {\n",
        "868": "  @Override int getComplexBuilderSetLastElement() {\n",
        "877": "    ImmutableSortedSet<LegacyComparable> set1 = ImmutableSortedSet.of(\n",
        "878": "        LegacyComparable.Z);\n",
        "882": "    ImmutableSortedSet<LegacyComparable> set2 = ImmutableSortedSet.of(\n",
        "883": "        LegacyComparable.Z, LegacyComparable.Y);\n",
        "888": "    ImmutableSortedSet<LegacyComparable> set\n",
        "889": "        = ImmutableSortedSet.copyOf(LegacyComparable.VALUES_BACKWARD);\n",
        "894": "    ImmutableSortedSet<LegacyComparable> set = ImmutableSortedSet.copyOf(\n",
        "895": "        LegacyComparable.VALUES_BACKWARD.iterator());\n",
        "902": "    ImmutableSortedSet.Builder<LegacyComparable> builder\n",
        "903": "        = ImmutableSortedSet.<LegacyComparable>naturalOrder();\n",
        "916": "    ImmutableSortedSet.Builder<LegacyComparable> builder\n",
        "917": "        = ImmutableSortedSet.<LegacyComparable>reverseOrder();\n",
        "953": "    ImmutableSet<String> set\n",
        "954": "        = ImmutableSortedSet.of(\"a\", \"e\", \"i\", \"o\", \"u\").subSet(\"c\", \"r\");\n",
        "962": "    ImmutableSet<String> set\n",
        "963": "        = ImmutableSortedSet.of(\"a\", \"e\", \"i\", \"o\", \"u\").subSet(\"c\", \"r\");\n",
        "971": "    ImmutableSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "972": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "992": "  private static void assertNotEqualLenient(\n",
        "993": "      TreeSet<?> unexpected, SortedSet<?> actual) {\n"
    }
}