{
    "addition": {
        "46": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\"> immutable collections</a>.\n",
        "62": "   * <p>Example:\n",
        "64": "   * <pre>{@code\n",
        "65": "   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =\n",
        "66": "   *     Stream.of(\"banana\", \"apple\", \"carrot\", \"asparagus\", \"cherry\")\n",
        "67": "   *         .collect(toImmutableListMultimap(str -> str.charAt(0), str -> str.substring(1)));\n",
        "69": "   * // is equivalent to\n",
        "71": "   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =\n",
        "72": "   *     new ImmutableListMultimap.Builder<Character, String>()\n",
        "73": "   *         .put('b', \"anana\")\n",
        "74": "   *         .putAll('a', \"pple\", \"sparagus\")\n",
        "75": "   *         .putAll('c', \"arrot\", \"herry\")\n",
        "76": "   *         .build();\n",
        "77": "   * }</pre>\n",
        "147": "  /** Returns an immutable multimap containing a single entry. */\n",
        "154": "  /** Returns an immutable multimap containing the given entries, in order. */\n",
        "162": "  /** Returns an immutable multimap containing the given entries, in order. */\n",
        "171": "  /** Returns an immutable multimap containing the given entries, in order. */\n",
        "182": "  /** Returns an immutable multimap containing the given entries, in order. */\n",
        "197": "   * Returns a new builder. The generated builder is equivalent to the builder created by the {@link\n",
        "198": "   * Builder} constructor.\n",
        "205": "   * A builder for creating immutable {@code ListMultimap} instances, especially {@code public\n",
        "206": "   * static final} multimaps (\"constant multimaps\"). Example:\n",
        "208": "   * <pre>{@code\n",
        "209": "   * static final Multimap<String, Integer> STRING_TO_INTEGER_MULTIMAP =\n",
        "210": "   *     new ImmutableListMultimap.Builder<String, Integer>()\n",
        "211": "   *         .put(\"one\", 1)\n",
        "212": "   *         .putAll(\"several\", 1, 2, 3)\n",
        "213": "   *         .putAll(\"many\", 1, 2, 3, 4, 5)\n",
        "214": "   *         .build();\n",
        "215": "   * }</pre>\n",
        "217": "   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build\n",
        "218": "   * multiple multimaps in series. Each multimap contains the key-value mappings in the previously\n",
        "219": "   * created multimaps.\n",
        "225": "     * Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n",
        "226": "     * ImmutableListMultimap#builder}.\n",
        "314": "    /** Returns a newly-created immutable list multimap. */\n",
        "322": "   * Returns an immutable multimap containing the same mappings as {@code multimap}. The generated\n",
        "323": "   * multimap's key and value orderings correspond to the iteration ordering of the {@code\n",
        "324": "   * multimap.asMap()} view.\n",
        "326": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "327": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "328": "   * undocumented and subject to change.\n",
        "330": "   * @throws NullPointerException if any key or value in {@code multimap} is null\n",
        "364": "   * Returns an immutable multimap containing the specified entries. The returned multimap iterates\n",
        "365": "   * over keys in the order they were first encountered in the input, and the values for each key\n",
        "366": "   * are iterated in the order they were encountered.\n",
        "384": "   * Returns an immutable list of the values for the given key. If no mappings in the multimap have\n",
        "385": "   * the provided key, an empty immutable list is returned. The values are in the same order as the\n",
        "386": "   * parameters used to build this multimap.\n",
        "395": "  @LazyInit @RetainedWith private transient ImmutableListMultimap<V, K> inverse;\n",
        "400": "   * <p>Because an inverse of a list multimap can contain multiple pairs with the same key and\n",
        "401": "   * value, this method returns an {@code ImmutableListMultimap} rather than the {@code\n",
        "402": "   * ImmutableMultimap} specified in the {@code ImmutableMultimap} class.\n",
        "449": "   * @serialData number of distinct keys, and then for each distinct key: the key, the number of\n",
        "450": "   *     values for that key, and the key's values\n"
    },
    "removed": {
        "46": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\">\n",
        "47": " * immutable collections</a>.\n",
        "63": "   * Example:\n",
        "64": "   * <pre>   {@code\n",
        "66": "   *   static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =\n",
        "67": "   *       Stream.of(\"banana\", \"apple\", \"carrot\", \"asparagus\", \"cherry\")\n",
        "68": "   *           .collect(toImmutableListMultimap(str -> str.charAt(0), str -> str.substring(1)));\n",
        "70": "   *   // is equivalent to\n",
        "72": "   *   static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =\n",
        "73": "   *       new ImmutableListMultimap.Builder<Character, String>()\n",
        "74": "   *           .put('b', \"anana\")\n",
        "75": "   *           .putAll('a', \"pple\", \"sparagus\")\n",
        "76": "   *           .putAll('c', \"arrot\", \"herry\")\n",
        "77": "   *           .build();}</pre>\n",
        "147": "  /**\n",
        "148": "   * Returns an immutable multimap containing a single entry.\n",
        "149": "   */\n",
        "156": "  /**\n",
        "157": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "158": "   */\n",
        "166": "  /**\n",
        "167": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "168": "   */\n",
        "177": "  /**\n",
        "178": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "179": "   */\n",
        "190": "  /**\n",
        "191": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "192": "   */\n",
        "207": "   * Returns a new builder. The generated builder is equivalent to the builder\n",
        "208": "   * created by the {@link Builder} constructor.\n",
        "215": "   * A builder for creating immutable {@code ListMultimap} instances, especially\n",
        "216": "   * {@code public static final} multimaps (\"constant multimaps\"). Example:\n",
        "217": "   * <pre>   {@code\n",
        "219": "   *   static final Multimap<String, Integer> STRING_TO_INTEGER_MULTIMAP =\n",
        "220": "   *       new ImmutableListMultimap.Builder<String, Integer>()\n",
        "221": "   *           .put(\"one\", 1)\n",
        "222": "   *           .putAll(\"several\", 1, 2, 3)\n",
        "223": "   *           .putAll(\"many\", 1, 2, 3, 4, 5)\n",
        "224": "   *           .build();}</pre>\n",
        "226": "   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple\n",
        "227": "   * times to build multiple multimaps in series. Each multimap contains the\n",
        "228": "   * key-value mappings in the previously created multimaps.\n",
        "234": "     * Creates a new builder. The returned builder is equivalent to the builder\n",
        "235": "     * generated by {@link ImmutableListMultimap#builder}.\n",
        "323": "    /**\n",
        "324": "     * Returns a newly-created immutable list multimap.\n",
        "325": "     */\n",
        "333": "   * Returns an immutable multimap containing the same mappings as {@code\n",
        "334": "   * multimap}. The generated multimap's key and value orderings correspond to\n",
        "335": "   * the iteration ordering of the {@code multimap.asMap()} view.\n",
        "337": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "338": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "339": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "341": "   * @throws NullPointerException if any key or value in {@code multimap} is\n",
        "342": "   *         null\n",
        "376": "   * Returns an immutable multimap containing the specified entries.  The\n",
        "377": "   * returned multimap iterates over keys in the order they were first\n",
        "378": "   * encountered in the input, and the values for each key are iterated in the\n",
        "379": "   * order they were encountered.\n",
        "397": "   * Returns an immutable list of the values for the given key.  If no mappings\n",
        "398": "   * in the multimap have the provided key, an empty immutable list is\n",
        "399": "   * returned. The values are in the same order as the parameters used to build\n",
        "400": "   * this multimap.\n",
        "409": "  @LazyInit\n",
        "410": "  @RetainedWith\n",
        "411": "  private transient ImmutableListMultimap<V, K> inverse;\n",
        "416": "   * <p>Because an inverse of a list multimap can contain multiple pairs with\n",
        "417": "   * the same key and value, this method returns an {@code\n",
        "418": "   * ImmutableListMultimap} rather than the {@code ImmutableMultimap} specified\n",
        "419": "   * in the {@code ImmutableMultimap} class.\n",
        "466": "   * @serialData number of distinct keys, and then for each distinct key: the\n",
        "467": "   *     key, the number of values for that key, and the key's values\n"
    }
}