{
    "addition": {
        "57": " * factory classes like:\n",
        "58": " *\n",
        "59": " * <pre>\n",
        "66": " *\n",
        "67": " * <p>And all the created {@code Book} instances can be tested with:\n",
        "68": " *\n",
        "69": " * <pre>\n",
        "85": "        @Override\n",
        "86": "        public int compare(Invokable<?, ?> left, Invokable<?, ?> right) {\n",
        "93": "        @Override\n",
        "94": "        public int compare(Invokable<?, ?> left, Invokable<?, ?> right) {\n",
        "101": "        @Override\n",
        "102": "        public int compare(Invokable<?, ?> left, Invokable<?, ?> right) {\n",
        "131": "   * Object#equals} because more than one sample instances are needed for testing inequality. To set\n",
        "132": "   * distinct values for equality testing, use {@link #setDistinctValues} instead.\n",
        "168": "   *\n",
        "170": "   *   <li>All non-private static methods are checked such that passing null for any parameter\n",
        "171": "   *       that's not annotated with {@link javax.annotation.Nullable} should throw {@link\n",
        "172": "   *       NullPointerException}.\n",
        "173": "   *   <li>If there is any non-private constructor or non-private static factory method declared by\n",
        "174": "   *       {@code cls}, all non-private instance methods will be checked too using the instance\n",
        "175": "   *       created by invoking the constructor or static factory method.\n",
        "176": "   *   <li>If there is any non-private constructor or non-private static factory method declared by\n",
        "177": "   *       {@code cls}:\n",
        "178": "   *       <ul>\n",
        "179": "   *         <li>Test will fail if default value for a parameter cannot be determined.\n",
        "180": "   *         <li>Test will fail if the factory method returns null so testing instance methods is\n",
        "181": "   *             impossible.\n",
        "182": "   *         <li>Test will fail if the constructor or factory method throws exception.\n",
        "183": "   *       </ul>\n",
        "184": "   *   <li>If there is no non-private constructor or non-private static factory method declared by\n",
        "185": "   *       {@code cls}, instance methods are skipped for nulls test.\n",
        "186": "   *   <li>Nulls test is not performed on method return values unless the method is a non-private\n",
        "187": "   *       static factory method whose return type is {@code cls} or {@code cls}'s subtype.\n",
        "200": "      throws ParameterNotInstantiableException, IllegalAccessException, InvocationTargetException,\n",
        "201": "          FactoryMethodReturnsNullException {\n",
        "227": "   *\n",
        "229": "   *   <li>The non-private constructor or non-private static factory method with the most parameters\n",
        "230": "   *       is used to construct the sample instances. In case of tie, the candidate constructors or\n",
        "231": "   *       factories are tried one after another until one can be used to construct sample\n",
        "232": "   *       instances.\n",
        "233": "   *   <li>For the constructor or static factory method used to construct instances, it's checked\n",
        "234": "   *       that when equal parameters are passed, the result instance should also be equal; and vice\n",
        "235": "   *       versa.\n",
        "236": "   *   <li>If a non-private constructor or non-private static factory method exists:\n",
        "237": "   *       <ul>\n",
        "238": "   *         <li>Test will fail if default value for a parameter cannot be determined.\n",
        "239": "   *         <li>Test will fail if the factory method returns null so testing instance methods is\n",
        "240": "   *             impossible.\n",
        "241": "   *         <li>Test will fail if the constructor or factory method throws exception.\n",
        "242": "   *       </ul>\n",
        "243": "   *   <li>If there is no non-private constructor or non-private static factory method declared by\n",
        "244": "   *       {@code cls}, no test is performed.\n",
        "245": "   *   <li>Equality test is not performed on method return values unless the method is a non-private\n",
        "246": "   *       static factory method whose return type is {@code cls} or {@code cls}'s subtype.\n",
        "247": "   *   <li>Inequality check is not performed against state mutation methods such as {@link\n",
        "248": "   *       List#add}, or functional update methods such as {@link\n",
        "249": "   *       com.google.common.base.Joiner#skipNulls}.\n",
        "254": "   * test to facilitate equality testing. For example:\n",
        "255": "   *\n",
        "256": "   * <pre>\n",
        "278": "   *\n",
        "293": "          IllegalAccessException, InvocationTargetException, FactoryMethodReturnsNullException {\n",
        "334": "   *     or factory method to be constructed.\n",
        "336": "  @javax.annotation.Nullable\n",
        "337": "  <T> T instantiate(Class<T> cls)\n",
        "338": "      throws ParameterNotInstantiableException, IllegalAccessException, InvocationTargetException,\n",
        "339": "          FactoryMethodReturnsNullException {\n",
        "376": "   * Returns an object responsible for performing sanity tests against the return values of all\n",
        "377": "   * public static methods declared by {@code cls}, excluding superclasses.\n",
        "436": "            AssertionError error =\n",
        "437": "                new AssertionFailedError(\"Null check failed on return value of \" + factory);\n",
        "482": "            AssertionError error =\n",
        "483": "                new AssertionFailedError(\"Serialization failed on return value of \" + factory);\n",
        "512": "            AssertionError error =\n",
        "513": "                new AssertionFailedError(\"Serialization failed on return value of \" + factory);\n",
        "517": "            AssertionError error =\n",
        "518": "                new AssertionFailedError(\n",
        "519": "                    \"Return value of \" + factory + \" reserialized to an unequal value\");\n",
        "536": "      Assert.assertFalse(\n",
        "537": "          \"No \"\n",
        "538": "              + factoryMethodsDescription\n",
        "539": "              + \" that return \"\n",
        "540": "              + returnTypeToTest.getName()\n",
        "541": "              + \" or subtype are found in \"\n",
        "542": "              + declaringClass\n",
        "543": "              + \".\",\n",
        "550": "   * Instantiates using {@code factory}. If {@code factory} is annotated with {@link\n",
        "551": "   * javax.annotation.Nullable} and returns null, null will be returned.\n",
        "553": "   * @throws ParameterNotInstantiableException if the static methods cannot be invoked because the\n",
        "554": "   *     default value of a parameter cannot be determined.\n",
        "556": "   *     class, preventing its methods from being accessible.\n",
        "559": "  @javax.annotation.Nullable\n",
        "560": "  private <T> T instantiate(Invokable<?, ? extends T> factory)\n",
        "561": "      throws ParameterNotInstantiableException, InvocationTargetException, IllegalAccessException {\n",
        "567": "          IllegalAccessException, InvocationTargetException, FactoryMethodReturnsNullException {\n",
        "581": "    EqualsTester tester =\n",
        "582": "        new EqualsTester(\n",
        "583": "            new ItemReporter() {\n",
        "584": "              @Override\n",
        "585": "              String reportItem(Item<?> item) {\n",
        "586": "                List<Object> factoryArgs = argGroups.get(item.groupNumber).get(item.itemNumber);\n",
        "587": "                return factory.getName()\n",
        "588": "                    + \"(\"\n",
        "589": "                    + Joiner.on(\", \").useForNull(\"null\").join(factoryArgs)\n",
        "590": "                    + \")\";\n",
        "591": "              }\n",
        "592": "            });\n",
        "618": "          InvocationTargetException, IllegalAccessException {\n",
        "653": "    FreshValueGenerator generator =\n",
        "654": "        new FreshValueGenerator() {\n",
        "655": "          @Override\n",
        "656": "          Object interfaceMethodCalled(Class<?> interfaceType, Method method) {\n",
        "657": "            return getDummyValue(TypeToken.of(interfaceType).method(method).getReturnType());\n",
        "658": "          }\n",
        "659": "        };\n",
        "666": "  @javax.annotation.Nullable\n",
        "667": "  private static Object generateDummyArg(Parameter param, FreshValueGenerator generator)\n",
        "713": "    return BY_NUMBER_OF_PARAMETERS\n",
        "714": "        .compound(BY_METHOD_NAME)\n",
        "715": "        .compound(BY_PARAMETERS)\n",
        "763": "  @javax.annotation.Nullable\n",
        "764": "  private static <T> T invoke(Invokable<?, ? extends T> factory, List<?> args)\n",
        "768": "      Assert.assertTrue(\n",
        "769": "          factory + \" returns null but it's not annotated with @Nullable\",\n",
        "779": "  @VisibleForTesting\n",
        "780": "  static class ParameterNotInstantiableException extends Exception {\n",
        "782": "      super(\n",
        "783": "          \"Cannot determine value for parameter \"\n",
        "784": "              + parameter\n",
        "785": "              + \" of \"\n",
        "786": "              + parameter.getDeclaringInvokable());\n",
        "795": "  @VisibleForTesting\n",
        "796": "  static class ParameterHasNoDistinctValueException extends Exception {\n",
        "798": "      super(\n",
        "799": "          \"Cannot generate distinct value for parameter \"\n",
        "800": "              + parameter\n",
        "801": "              + \" of \"\n",
        "802": "              + parameter.getDeclaringInvokable());\n",
        "810": "  @VisibleForTesting\n",
        "811": "  static class FactoryMethodReturnsNullException extends Exception {\n",
        "817": "  private static final class SerializableDummyProxy extends DummyProxy implements Serializable {\n",
        "825": "    @Override\n",
        "826": "    <R> R dummyReturnValue(TypeToken<R> returnType) {\n",
        "830": "    @Override\n",
        "831": "    public boolean equals(Object obj) {\n",
        "835": "    @Override\n",
        "836": "    public int hashCode() {\n"
    },
    "removed": {
        "57": " * factory classes like: <pre>\n",
        "64": " * <p>And all the created {@code Book} instances can be tested with: <pre>\n",
        "80": "        @Override public int compare(Invokable<?, ?> left, Invokable<?, ?> right) {\n",
        "87": "        @Override public int compare(Invokable<?, ?> left, Invokable<?, ?> right) {\n",
        "94": "        @Override public int compare(Invokable<?, ?> left, Invokable<?, ?> right) {\n",
        "123": "   * Object#equals} because more than one sample instances are needed for testing inequality.\n",
        "124": "   * To set distinct values for equality testing, use {@link #setDistinctValues} instead.\n",
        "161": "   * <li>All non-private static methods are checked such that passing null for any parameter that's\n",
        "162": "   *     not annotated with {@link javax.annotation.Nullable} should throw {@link\n",
        "163": "   *     NullPointerException}.\n",
        "164": "   * <li>If there is any non-private constructor or non-private static factory method declared by\n",
        "165": "   *     {@code cls}, all non-private instance methods will be checked too using the instance\n",
        "166": "   *     created by invoking the constructor or static factory method.\n",
        "167": "   * <li>If there is any non-private constructor or non-private static factory method declared by\n",
        "168": "   *     {@code cls}:\n",
        "169": "   *     <ul>\n",
        "170": "   *     <li>Test will fail if default value for a parameter cannot be determined.\n",
        "171": "   *     <li>Test will fail if the factory method returns null so testing instance methods is\n",
        "172": "   *         impossible.\n",
        "173": "   *     <li>Test will fail if the constructor or factory method throws exception.\n",
        "174": "   *     </ul>\n",
        "175": "   * <li>If there is no non-private constructor or non-private static factory method declared by\n",
        "176": "   *     {@code cls}, instance methods are skipped for nulls test.\n",
        "177": "   * <li>Nulls test is not performed on method return values unless the method is a non-private\n",
        "178": "   *     static factory method whose return type is {@code cls} or {@code cls}'s subtype.\n",
        "191": "      throws ParameterNotInstantiableException, IllegalAccessException,\n",
        "192": "             InvocationTargetException, FactoryMethodReturnsNullException {\n",
        "219": "   * <li>The non-private constructor or non-private static factory method with the most parameters\n",
        "220": "   *     is used to construct the sample instances. In case of tie, the candidate constructors or\n",
        "221": "   *     factories are tried one after another until one can be used to construct sample instances.\n",
        "222": "   * <li>For the constructor or static factory method used to construct instances, it's checked that\n",
        "223": "   *     when equal parameters are passed, the result instance should also be equal; and vice versa.\n",
        "224": "   * <li>If a non-private constructor or non-private static factory method exists: <ul>\n",
        "225": "   *     <li>Test will fail if default value for a parameter cannot be determined.\n",
        "226": "   *     <li>Test will fail if the factory method returns null so testing instance methods is\n",
        "227": "   *         impossible.\n",
        "228": "   *     <li>Test will fail if the constructor or factory method throws exception.\n",
        "229": "   *     </ul>\n",
        "230": "   * <li>If there is no non-private constructor or non-private static factory method declared by\n",
        "231": "   *     {@code cls}, no test is performed.\n",
        "232": "   * <li>Equality test is not performed on method return values unless the method is a non-private\n",
        "233": "   *     static factory method whose return type is {@code cls} or {@code cls}'s subtype.\n",
        "234": "   * <li>Inequality check is not performed against state mutation methods such as {@link List#add},\n",
        "235": "   *     or functional update methods such as {@link com.google.common.base.Joiner#skipNulls}.\n",
        "240": "   * test to facilitate equality testing. For example: <pre>\n",
        "276": "             IllegalAccessException, InvocationTargetException, FactoryMethodReturnsNullException {\n",
        "317": "   *         or factory method to be constructed.\n",
        "319": "  @javax.annotation.Nullable <T> T instantiate(Class<T> cls)\n",
        "320": "      throws ParameterNotInstantiableException, IllegalAccessException,\n",
        "321": "             InvocationTargetException, FactoryMethodReturnsNullException {\n",
        "358": "   * Returns an object responsible for performing sanity tests against the return values\n",
        "359": "   * of all public static methods declared by {@code cls}, excluding superclasses.\n",
        "418": "            AssertionError error = new AssertionFailedError(\n",
        "419": "                \"Null check failed on return value of \" + factory);\n",
        "464": "            AssertionError error = new AssertionFailedError(\n",
        "465": "                \"Serialization failed on return value of \" + factory);\n",
        "494": "            AssertionError error = new AssertionFailedError(\n",
        "495": "                \"Serialization failed on return value of \" + factory);\n",
        "499": "            AssertionError error = new AssertionFailedError(\n",
        "500": "                \"Return value of \" + factory + \" reserialized to an unequal value\");\n",
        "517": "      Assert.assertFalse(\"No \" + factoryMethodsDescription + \" that return \"\n",
        "518": "              + returnTypeToTest.getName() + \" or subtype are found in \"\n",
        "519": "              + declaringClass + \".\",\n",
        "526": "   * Instantiates using {@code factory}. If {@code factory} is annotated with {@link javax.annotation.Nullable} and\n",
        "527": "   * returns null, null will be returned.\n",
        "529": "   * @throws ParameterNotInstantiableException if the static methods cannot be invoked because\n",
        "530": "   *         the default value of a parameter cannot be determined.\n",
        "532": "   *         class, preventing its methods from being accessible.\n",
        "535": "  @javax.annotation.Nullable private <T> T instantiate(Invokable<?, ? extends T> factory)\n",
        "536": "      throws ParameterNotInstantiableException, InvocationTargetException,\n",
        "537": "      IllegalAccessException {\n",
        "542": "\n",
        "544": "             IllegalAccessException, InvocationTargetException, FactoryMethodReturnsNullException {\n",
        "558": "    EqualsTester tester = new EqualsTester(new ItemReporter() {\n",
        "559": "      @Override String reportItem(Item<?> item) {\n",
        "560": "        List<Object> factoryArgs = argGroups.get(item.groupNumber).get(item.itemNumber);\n",
        "561": "        return factory.getName() + \"(\" + Joiner.on(\", \").useForNull(\"null\").join(factoryArgs) + \")\";\n",
        "562": "      }\n",
        "563": "    });\n",
        "589": "      InvocationTargetException, IllegalAccessException {\n",
        "624": "    FreshValueGenerator generator = new FreshValueGenerator() {\n",
        "625": "      @Override Object interfaceMethodCalled(Class<?> interfaceType, Method method) {\n",
        "626": "        return getDummyValue(TypeToken.of(interfaceType).method(method).getReturnType());\n",
        "627": "      }\n",
        "628": "    };\n",
        "635": "  @javax.annotation.Nullable private static Object generateDummyArg(Parameter param, FreshValueGenerator generator)\n",
        "681": "    return BY_NUMBER_OF_PARAMETERS.compound(BY_METHOD_NAME).compound(BY_PARAMETERS)\n",
        "729": "  @javax.annotation.Nullable private static <T> T invoke(Invokable<?, ? extends T> factory, List<?> args)\n",
        "733": "      Assert.assertTrue(factory + \" returns null but it's not annotated with @Nullable\",\n",
        "743": "  @VisibleForTesting static class ParameterNotInstantiableException extends Exception {\n",
        "745": "      super(\"Cannot determine value for parameter \" + parameter\n",
        "746": "          + \" of \" + parameter.getDeclaringInvokable());\n",
        "755": "  @VisibleForTesting static class ParameterHasNoDistinctValueException extends Exception {\n",
        "757": "        super(\"Cannot generate distinct value for parameter \" + parameter\n",
        "758": "            + \" of \" + parameter.getDeclaringInvokable());\n",
        "766": "  @VisibleForTesting static class FactoryMethodReturnsNullException extends Exception {\n",
        "772": "  private static final class SerializableDummyProxy extends DummyProxy\n",
        "773": "      implements Serializable {\n",
        "781": "    @Override <R> R dummyReturnValue(TypeToken<R> returnType) {\n",
        "785": "    @Override public boolean equals(Object obj) {\n",
        "789": "    @Override public int hashCode() {\n"
    }
}