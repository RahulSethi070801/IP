{
    "addition": {
        "40": " *   <li>{@code stringConverter().convert(\"1.00\")} returns the {@code Double} value {@code 1.0}\n",
        "41": " *   <li>{@code stringConverter().reverse().convert(1.0)} returns the string {@code \"1.0\"} --\n",
        "42": " *       <i>not</i> the same string ({@code \"1.00\"}) we started with\n",
        "63": " *   <li>Use a provided converter implementation, such as {@link Enums#stringConverter}, {@link\n",
        "64": " *       com.google.common.primitives.Ints#stringConverter Ints.stringConverter} or the {@linkplain\n",
        "65": " *       #reverse reverse} views of these.\n",
        "66": " *   <li>Convert between specific preset values using {@link\n",
        "67": " *       com.google.common.collect.Maps#asConverter Maps.asConverter}. For example, use this to\n",
        "68": " *       create a \"fake\" converter for a unit test. It is unnecessary (and confusing) to <i>mock</i>\n",
        "69": " *       the {@code Converter} type using a mocking framework.\n",
        "70": " *   <li>Extend this class and implement its {@link #doForward} and {@link #doBackward} methods.\n",
        "71": " *   <li><b>Java 8 users:</b> you may prefer to pass two lambda expressions or method references to\n",
        "72": " *       the {@link #from from} factory method.\n",
        "78": " *   <li>Convert one instance in the \"forward\" direction using {@code converter.convert(a)}.\n",
        "79": " *   <li>Convert multiple instances \"forward\" using {@code converter.convertAll(as)}.\n",
        "80": " *   <li>Convert in the \"backward\" direction using {@code converter.reverse().convert(b)} or {@code\n",
        "81": " *       converter.reverse().convertAll(bs)}.\n",
        "82": " *   <li>Use {@code converter} or {@code converter.reverse()} anywhere a {@link\n",
        "83": " *       java.util.function.Function} is accepted (for example {@link java.util.stream.Stream#map\n",
        "84": " *       Stream.map}).\n",
        "85": " *   <li><b>Do not</b> call {@link #doForward} or {@link #doBackward} directly; these exist only to\n",
        "86": " *       be overridden.\n",
        "120": "  @LazyInit private transient Converter<B, A> reverse;\n",
        "127": "  /** Constructor used only by {@code LegacyConverter} to suspend automatic null-handling. */\n",
        "317": "  /** Package-private non-final implementation of andThen() so only we can override it. */\n",
        "475": "  /** Returns a serializable converter that always converts or reverses an object to itself. */\n"
    },
    "removed": {
        "40": " * <li>{@code stringConverter().convert(\"1.00\")} returns the {@code Double} value {@code 1.0}\n",
        "41": " * <li>{@code stringConverter().reverse().convert(1.0)} returns the string {@code \"1.0\"} --\n",
        "42": " *     <i>not</i> the same string ({@code \"1.00\"}) we started with\n",
        "63": " * <li>Use a provided converter implementation, such as {@link Enums#stringConverter}, {@link\n",
        "64": " *     com.google.common.primitives.Ints#stringConverter Ints.stringConverter} or the {@linkplain\n",
        "65": " *     #reverse reverse} views of these.\n",
        "66": " * <li>Convert between specific preset values using {@link\n",
        "67": " *     com.google.common.collect.Maps#asConverter Maps.asConverter}. For example, use this to create\n",
        "68": " *     a \"fake\" converter for a unit test. It is unnecessary (and confusing) to <i>mock</i> the\n",
        "69": " *     {@code Converter} type using a mocking framework.\n",
        "70": " * <li>Extend this class and implement its {@link #doForward} and {@link #doBackward} methods.\n",
        "71": " * <li><b>Java 8 users:</b> you may prefer to pass two lambda expressions or method references to\n",
        "72": " *     the {@link #from from} factory method.\n",
        "78": " * <li>Convert one instance in the \"forward\" direction using {@code converter.convert(a)}.\n",
        "79": " * <li>Convert multiple instances \"forward\" using {@code converter.convertAll(as)}.\n",
        "80": " * <li>Convert in the \"backward\" direction using {@code converter.reverse().convert(b)} or {@code\n",
        "81": " *     converter.reverse().convertAll(bs)}.\n",
        "82": " * <li>Use {@code converter} or {@code converter.reverse()} anywhere a {@link\n",
        "83": " *     java.util.function.Function} is accepted (for example {@link java.util.stream.Stream#map\n",
        "84": " *     Stream.map}).\n",
        "85": " * <li><b>Do not</b> call {@link #doForward} or {@link #doBackward} directly; these exist only to be\n",
        "86": " *     overridden.\n",
        "120": "  @LazyInit\n",
        "121": "  private transient Converter<B, A> reverse;\n",
        "128": "  /**\n",
        "129": "   * Constructor used only by {@code LegacyConverter} to suspend automatic null-handling.\n",
        "130": "   */\n",
        "320": "  /**\n",
        "321": "   * Package-private non-final implementation of andThen() so only we can override it.\n",
        "322": "   */\n",
        "480": "  /**\n",
        "481": "   * Returns a serializable converter that always converts or reverses an object to itself.\n",
        "482": "   */\n"
    }
}