{
    "addition": {
        "546": "          assertEquals(\n",
        "547": "              ImmutableList.copyOf(subRangeMap.asMapOfRanges().entrySet()).reverse(),\n",
        "560": "                expected.asMapOfRanges().get(query), subRangeMap.asMapOfRanges().get(query));\n",
        "573": "    assertEquals(\n",
        "574": "        ImmutableMap.of(Range.closedOpen(5, 7), 1, Range.closed(9, 10), 2), sub1.asMapOfRanges());\n",
        "576": "    assertEquals(\n",
        "577": "        ImmutableMap.of(Range.open(6, 7), 1, Range.closed(9, 10), 2), sub2.asMapOfRanges());\n",
        "586": "    assertEquals(\n",
        "587": "        ImmutableMap.of(Range.closedOpen(5, 7), 1, Range.closed(9, 10), 2), sub.asMapOfRanges());\n",
        "594": "        ImmutableMap.of(\n",
        "595": "            Range.open(3, 7),\n",
        "596": "            1,\n",
        "597": "            Range.closed(7, 9),\n",
        "598": "            4,\n",
        "599": "            Range.openClosed(9, 10),\n",
        "600": "            2,\n",
        "601": "            Range.closed(12, 16),\n",
        "602": "            3),\n",
        "614": "        ImmutableMap.of(\n",
        "615": "            Range.open(3, 7),\n",
        "616": "            1,\n",
        "617": "            Range.closed(7, 9),\n",
        "618": "            4,\n",
        "619": "            Range.openClosed(9, 10),\n",
        "620": "            2,\n",
        "621": "            Range.closed(12, 16),\n",
        "622": "            3),\n",
        "669": "    assertEquals(\n",
        "670": "        ImmutableMap.of(Range.closedOpen(5, 7), 1, Range.closed(9, 10), 2), sub.asMapOfRanges());\n",
        "680": "    assertEquals(ImmutableMap.of(Range.openClosed(9, 10), 2), sub.asMapOfRanges());\n",
        "694": "        ImmutableMap.of(Range.open(3, 5), 1, Range.closed(12, 16), 3), rangeMap.asMapOfRanges());\n"
    },
    "removed": {
        "545": "          assertEquals(ImmutableList.copyOf(subRangeMap.asMapOfRanges().entrySet()).reverse(),\n",
        "558": "                expected.asMapOfRanges().get(query),\n",
        "559": "                subRangeMap.asMapOfRanges().get(query));\n",
        "572": "    assertEquals(ImmutableMap.of(Range.closedOpen(5, 7), 1, Range.closed(9, 10), 2),\n",
        "573": "        sub1.asMapOfRanges());\n",
        "575": "    assertEquals(ImmutableMap.of(Range.open(6, 7), 1, Range.closed(9, 10), 2),\n",
        "576": "        sub2.asMapOfRanges());\n",
        "585": "    assertEquals(ImmutableMap.of(Range.closedOpen(5, 7), 1, Range.closed(9, 10), 2),\n",
        "586": "        sub.asMapOfRanges());\n",
        "593": "        ImmutableMap.of(Range.open(3, 7), 1, Range.closed(7, 9), 4, Range.openClosed(9, 10), 2,\n",
        "594": "            Range.closed(12, 16), 3),\n",
        "606": "        ImmutableMap.of(Range.open(3, 7), 1, Range.closed(7, 9), 4, Range.openClosed(9, 10), 2,\n",
        "607": "            Range.closed(12, 16), 3),\n",
        "654": "    assertEquals(ImmutableMap.of(Range.closedOpen(5, 7), 1, Range.closed(9, 10), 2),\n",
        "655": "        sub.asMapOfRanges());\n",
        "665": "    assertEquals(\n",
        "666": "        ImmutableMap.of(Range.openClosed(9, 10), 2),\n",
        "667": "        sub.asMapOfRanges());\n",
        "681": "        ImmutableMap.of(Range.open(3, 5), 1, Range.closed(12, 16), 3),\n",
        "682": "        rangeMap.asMapOfRanges());\n"
    }
}