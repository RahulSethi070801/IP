{
    "addition": {
        "46": "  private static final float[] ARRAY234 = {(float) 2, (float) 3, (float) 4};\n",
        "51": "  private static final float[] NUMBERS =\n",
        "52": "      new float[] {\n",
        "53": "        LEAST,\n",
        "54": "        -Float.MAX_VALUE,\n",
        "55": "        -1f,\n",
        "56": "        -0f,\n",
        "57": "        0f,\n",
        "58": "        1f,\n",
        "59": "        Float.MAX_VALUE,\n",
        "60": "        GREATEST,\n",
        "61": "        Float.MIN_NORMAL,\n",
        "62": "        -Float.MIN_NORMAL,\n",
        "63": "        Float.MIN_VALUE,\n",
        "64": "        -Float.MIN_VALUE,\n",
        "65": "        Integer.MIN_VALUE,\n",
        "66": "        Integer.MAX_VALUE,\n",
        "67": "        Long.MIN_VALUE,\n",
        "68": "        Long.MAX_VALUE\n",
        "69": "      };\n",
        "70": "\n",
        "71": "  private static final float[] VALUES = Floats.concat(NUMBERS, new float[] {NaN});\n",
        "89": "        assertEquals(x + \", \" + y, Float.valueOf(x).compareTo(y), Floats.compare(x, y));\n",
        "113": "    assertEquals(0, Floats.indexOf(new float[] {(float) -1}, (float) -1));\n",
        "117": "    assertEquals(\n",
        "118": "        1, Floats.indexOf(new float[] {(float) 2, (float) 3, (float) 2, (float) 3}, (float) 3));\n",
        "121": "      assertEquals(\"\" + value, 1, Floats.indexOf(new float[] {5f, value}, value));\n",
        "134": "    assertEquals(0, Floats.indexOf(ARRAY234, new float[] {(float) 2, (float) 3}));\n",
        "135": "    assertEquals(1, Floats.indexOf(ARRAY234, new float[] {(float) 3, (float) 4}));\n",
        "136": "    assertEquals(1, Floats.indexOf(ARRAY234, new float[] {(float) 3}));\n",
        "137": "    assertEquals(2, Floats.indexOf(ARRAY234, new float[] {(float) 4}));\n",
        "138": "    assertEquals(\n",
        "139": "        1,\n",
        "140": "        Floats.indexOf(\n",
        "141": "            new float[] {(float) 2, (float) 3, (float) 3, (float) 3, (float) 3},\n",
        "142": "            new float[] {(float) 3}));\n",
        "143": "    assertEquals(\n",
        "144": "        2,\n",
        "145": "        Floats.indexOf(\n",
        "146": "            new float[] {\n",
        "147": "              (float) 2, (float) 3, (float) 2, (float) 3, (float) 4, (float) 2, (float) 3\n",
        "148": "            },\n",
        "149": "            new float[] {(float) 2, (float) 3, (float) 4}));\n",
        "150": "    assertEquals(\n",
        "151": "        1,\n",
        "152": "        Floats.indexOf(\n",
        "153": "            new float[] {\n",
        "154": "              (float) 2, (float) 2, (float) 3, (float) 4, (float) 2, (float) 3, (float) 4\n",
        "155": "            },\n",
        "156": "            new float[] {(float) 2, (float) 3, (float) 4}));\n",
        "157": "    assertEquals(\n",
        "158": "        -1,\n",
        "159": "        Floats.indexOf(\n",
        "160": "            new float[] {(float) 4, (float) 3, (float) 2},\n",
        "161": "            new float[] {(float) 2, (float) 3, (float) 4}));\n",
        "164": "      assertEquals(\n",
        "165": "          \"\" + value,\n",
        "166": "          1,\n",
        "167": "          Floats.indexOf(new float[] {5f, value, value, 5f}, new float[] {value, value}));\n",
        "169": "    assertEquals(-1, Floats.indexOf(new float[] {5f, NaN, NaN, 5f}, new float[] {NaN, NaN}));\n",
        "176": "    assertEquals(0, Floats.lastIndexOf(new float[] {(float) -1}, (float) -1));\n",
        "180": "    assertEquals(\n",
        "181": "        3, Floats.lastIndexOf(new float[] {(float) 2, (float) 3, (float) 2, (float) 3}, (float) 3));\n",
        "184": "      assertEquals(\"\" + value, 0, Floats.lastIndexOf(new float[] {value, 5f}, value));\n",
        "200": "    assertEquals(\n",
        "201": "        (float) 9,\n",
        "202": "        Floats.max((float) 8, (float) 6, (float) 7, (float) 5, (float) 3, (float) 0, (float) 9));\n",
        "221": "    assertEquals(\n",
        "222": "        (float) 0,\n",
        "223": "        Floats.min((float) 8, (float) 6, (float) 7, (float) 5, (float) 3, (float) 0, (float) 9));\n",
        "233": "    assertEquals((float) 1, Floats.constrainToRange((float) 1, (float) 0, (float) 5), tolerance);\n",
        "234": "    assertEquals((float) 1, Floats.constrainToRange((float) 1, (float) 1, (float) 5), tolerance);\n",
        "235": "    assertEquals((float) 3, Floats.constrainToRange((float) 1, (float) 3, (float) 5), tolerance);\n",
        "236": "    assertEquals((float) -1, Floats.constrainToRange((float) 0, (float) -5, (float) -1), tolerance);\n",
        "237": "    assertEquals((float) 2, Floats.constrainToRange((float) 5, (float) 2, (float) 2), tolerance);\n",
        "252": "    assertTrue(\n",
        "253": "        Arrays.equals(\n",
        "254": "            new float[] {(float) 1, (float) 1, (float) 1}, Floats.concat(ARRAY1, ARRAY1, ARRAY1)));\n",
        "255": "    assertTrue(\n",
        "256": "        Arrays.equals(\n",
        "257": "            new float[] {(float) 1, (float) 2, (float) 3, (float) 4},\n",
        "258": "            Floats.concat(ARRAY1, ARRAY234)));\n",
        "265": "    assertTrue(\n",
        "266": "        Arrays.equals(\n",
        "267": "            new float[] {(float) 1, (float) 0, (float) 0}, Floats.ensureCapacity(ARRAY1, 2, 1)));\n",
        "289": "    assertEquals(\"1.02.03.0\", Floats.join(\"\", (float) 1, (float) 2, (float) 3));\n",
        "293": "    List<float[]> ordered =\n",
        "294": "        Arrays.asList(\n",
        "295": "            new float[] {},\n",
        "296": "            new float[] {LEAST},\n",
        "297": "            new float[] {LEAST, LEAST},\n",
        "298": "            new float[] {LEAST, (float) 1},\n",
        "299": "            new float[] {(float) 1},\n",
        "300": "            new float[] {(float) 1, LEAST},\n",
        "301": "            new float[] {GREATEST, Float.MAX_VALUE},\n",
        "302": "            new float[] {GREATEST, GREATEST},\n",
        "303": "            new float[] {GREATEST, GREATEST, GREATEST});\n",
        "407": "    for (int delta : new int[] {+1, 0, -1}) {\n",
        "410": "        Collection<Float> misleadingSize = Helpers.misleadingSizeCollection(delta);\n",
        "458": "    float[] array = {(float) 0, (float) 1, (float) 2};\n",
        "464": "    assertTrue(Arrays.equals(new float[] {(float) 0, (float) 1, (float) 2}, newArray));\n",
        "471": "    float[] array = {(float) 0, (float) 1, (float) 2, (float) 3};\n",
        "473": "    assertTrue(\n",
        "474": "        Arrays.equals(new float[] {(float) 1, (float) 2}, Floats.toArray(list.subList(1, 3))));\n",
        "475": "    assertTrue(Arrays.equals(new float[] {}, Floats.toArray(list.subList(2, 2))));\n",
        "483": "   * A reference implementation for {@code tryParse} that just catches the exception from {@link\n",
        "484": "   * Float#valueOf}.\n",
        "495": "  }\n",
        "566": "  private static final String[] BAD_TRY_PARSE_INPUTS = {\n",
        "567": "    \"\",\n",
        "568": "    \"+-\",\n",
        "569": "    \"+-0\",\n",
        "570": "    \" 5\",\n",
        "571": "    \"32 \",\n",
        "572": "    \" 55 \",\n",
        "573": "    \"infinity\",\n",
        "574": "    \"POSITIVE_INFINITY\",\n",
        "575": "    \"0x9A\",\n",
        "576": "    \"0x9A.bE-5\",\n",
        "577": "    \".\",\n",
        "578": "    \".e5\",\n",
        "579": "    \"NaNd\",\n",
        "580": "    \"InfinityF\"\n",
        "581": "  };\n"
    },
    "removed": {
        "46": "  private static final float[] ARRAY234\n",
        "47": "      = {(float) 2, (float) 3, (float) 4};\n",
        "52": "  private static final float[] NUMBERS = new float[] {\n",
        "53": "      LEAST, -Float.MAX_VALUE, -1f, -0f, 0f, 1f, Float.MAX_VALUE, GREATEST,\n",
        "54": "      Float.MIN_NORMAL, -Float.MIN_NORMAL,  Float.MIN_VALUE, -Float.MIN_VALUE,\n",
        "55": "      Integer.MIN_VALUE, Integer.MAX_VALUE, Long.MIN_VALUE, Long.MAX_VALUE\n",
        "56": "  };\n",
        "57": "\n",
        "58": "  private static final float[] VALUES\n",
        "59": "      = Floats.concat(NUMBERS, new float[] {NaN});\n",
        "77": "        assertEquals(x + \", \" + y,\n",
        "78": "                     Float.valueOf(x).compareTo(y),\n",
        "79": "                     Floats.compare(x, y));\n",
        "103": "    assertEquals(0, Floats.indexOf(\n",
        "104": "        new float[] {(float) -1}, (float) -1));\n",
        "108": "    assertEquals(1, Floats.indexOf(\n",
        "109": "        new float[] { (float) 2, (float) 3, (float) 2, (float) 3 },\n",
        "110": "        (float) 3));\n",
        "113": "      assertEquals(\"\" + value, 1,\n",
        "114": "          Floats.indexOf(new float[] {5f, value}, value));\n",
        "127": "    assertEquals(0, Floats.indexOf(\n",
        "128": "        ARRAY234, new float[] { (float) 2, (float) 3 }));\n",
        "129": "    assertEquals(1, Floats.indexOf(\n",
        "130": "        ARRAY234, new float[] { (float) 3, (float) 4 }));\n",
        "131": "    assertEquals(1, Floats.indexOf(ARRAY234, new float[] { (float) 3 }));\n",
        "132": "    assertEquals(2, Floats.indexOf(ARRAY234, new float[] { (float) 4 }));\n",
        "133": "    assertEquals(1, Floats.indexOf(new float[] { (float) 2, (float) 3,\n",
        "134": "        (float) 3, (float) 3, (float) 3 },\n",
        "135": "        new float[] { (float) 3 }\n",
        "136": "    ));\n",
        "137": "    assertEquals(2, Floats.indexOf(\n",
        "138": "        new float[] { (float) 2, (float) 3, (float) 2,\n",
        "139": "            (float) 3, (float) 4, (float) 2, (float) 3},\n",
        "140": "        new float[] { (float) 2, (float) 3, (float) 4}\n",
        "141": "    ));\n",
        "142": "    assertEquals(1, Floats.indexOf(\n",
        "143": "        new float[] { (float) 2, (float) 2, (float) 3,\n",
        "144": "            (float) 4, (float) 2, (float) 3, (float) 4},\n",
        "145": "        new float[] { (float) 2, (float) 3, (float) 4}\n",
        "146": "    ));\n",
        "147": "    assertEquals(-1, Floats.indexOf(\n",
        "148": "        new float[] { (float) 4, (float) 3, (float) 2},\n",
        "149": "        new float[] { (float) 2, (float) 3, (float) 4}\n",
        "150": "    ));\n",
        "153": "      assertEquals(\"\" + value, 1, Floats.indexOf(\n",
        "154": "          new float[] {5f, value, value, 5f}, new float[] {value, value}));\n",
        "156": "    assertEquals(-1, Floats.indexOf(\n",
        "157": "        new float[] {5f, NaN, NaN, 5f}, new float[] {NaN, NaN}));\n",
        "164": "    assertEquals(0, Floats.lastIndexOf(\n",
        "165": "        new float[] {(float) -1}, (float) -1));\n",
        "169": "    assertEquals(3, Floats.lastIndexOf(\n",
        "170": "        new float[] { (float) 2, (float) 3, (float) 2, (float) 3 },\n",
        "171": "        (float) 3));\n",
        "174": "      assertEquals(\"\" + value,\n",
        "175": "          0, Floats.lastIndexOf(new float[] {value, 5f}, value));\n",
        "191": "    assertEquals((float) 9, Floats.max(\n",
        "192": "        (float) 8, (float) 6, (float) 7,\n",
        "193": "        (float) 5, (float) 3, (float) 0, (float) 9));\n",
        "212": "    assertEquals((float) 0, Floats.min(\n",
        "213": "        (float) 8, (float) 6, (float) 7,\n",
        "214": "        (float) 5, (float) 3, (float) 0, (float) 9));\n",
        "224": "    assertEquals(\n",
        "225": "        (float) 1, Floats.constrainToRange((float) 1, (float) 0, (float) 5), tolerance);\n",
        "226": "    assertEquals(\n",
        "227": "        (float) 1, Floats.constrainToRange((float) 1, (float) 1, (float) 5), tolerance);\n",
        "228": "    assertEquals(\n",
        "229": "        (float) 3, Floats.constrainToRange((float) 1, (float) 3, (float) 5), tolerance);\n",
        "230": "    assertEquals(\n",
        "231": "        (float) -1, Floats.constrainToRange((float) 0, (float) -5, (float) -1), tolerance);\n",
        "232": "    assertEquals(\n",
        "233": "        (float) 2, Floats.constrainToRange((float) 5, (float) 2, (float) 2), tolerance);\n",
        "248": "    assertTrue(Arrays.equals(\n",
        "249": "        new float[] {(float) 1, (float) 1, (float) 1},\n",
        "250": "        Floats.concat(ARRAY1, ARRAY1, ARRAY1)));\n",
        "251": "    assertTrue(Arrays.equals(\n",
        "252": "        new float[] {(float) 1, (float) 2, (float) 3, (float) 4},\n",
        "253": "        Floats.concat(ARRAY1, ARRAY234)));\n",
        "260": "    assertTrue(Arrays.equals(\n",
        "261": "        new float[] {(float) 1, (float) 0, (float) 0},\n",
        "262": "        Floats.ensureCapacity(ARRAY1, 2, 1)));\n",
        "284": "    assertEquals(\"1.02.03.0\",\n",
        "285": "        Floats.join(\"\", (float) 1, (float) 2, (float) 3));\n",
        "289": "    List<float[]> ordered = Arrays.asList(\n",
        "290": "        new float[] {},\n",
        "291": "        new float[] {LEAST},\n",
        "292": "        new float[] {LEAST, LEAST},\n",
        "293": "        new float[] {LEAST, (float) 1},\n",
        "294": "        new float[] {(float) 1},\n",
        "295": "        new float[] {(float) 1, LEAST},\n",
        "296": "        new float[] {GREATEST, Float.MAX_VALUE},\n",
        "297": "        new float[] {GREATEST, GREATEST},\n",
        "298": "        new float[] {GREATEST, GREATEST, GREATEST});\n",
        "402": "    for (int delta : new int[] { +1, 0, -1 }) {\n",
        "405": "        Collection<Float> misleadingSize =\n",
        "406": "            Helpers.misleadingSizeCollection(delta);\n",
        "454": "    float[] array = { (float) 0, (float) 1, (float) 2 };\n",
        "460": "    assertTrue(Arrays.equals(\n",
        "461": "        new float[] { (float) 0, (float) 1, (float) 2 }, newArray));\n",
        "468": "    float[] array = { (float) 0, (float) 1, (float) 2, (float) 3 };\n",
        "470": "    assertTrue(Arrays.equals(new float[] { (float) 1, (float) 2 },\n",
        "471": "        Floats.toArray(list.subList(1, 3))));\n",
        "472": "    assertTrue(Arrays.equals(new float[] {},\n",
        "473": "        Floats.toArray(list.subList(2, 2))));\n",
        "481": "   * A reference implementation for {@code tryParse} that just catches the exception from\n",
        "482": "   * {@link Float#valueOf}.\n",
        "493": " }\n",
        "564": "  private static final String[] BAD_TRY_PARSE_INPUTS =\n",
        "565": "    { \"\", \"+-\", \"+-0\", \" 5\", \"32 \", \" 55 \", \"infinity\", \"POSITIVE_INFINITY\", \"0x9A\", \"0x9A.bE-5\",\n",
        "566": "      \".\", \".e5\", \"NaNd\", \"InfinityF\" };\n"
    }
}