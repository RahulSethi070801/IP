{
    "addition": {
        "100": "  public static <K extends Comparable<? super K>, V> ImmutableSortedMap<K, V> of(K k1, V v1) {\n",
        "104": "  public static <K extends Comparable<? super K>, V> ImmutableSortedMap<K, V> of(\n",
        "105": "      K k1, V v1, K k2, V v2) {\n",
        "106": "    return new Builder<K, V>(Ordering.natural()).put(k1, v1).put(k2, v2).build();\n",
        "109": "  public static <K extends Comparable<? super K>, V> ImmutableSortedMap<K, V> of(\n",
        "110": "      K k1, V v1, K k2, V v2, K k3, V v3) {\n",
        "111": "    return new Builder<K, V>(Ordering.natural()).put(k1, v1).put(k2, v2).put(k3, v3).build();\n",
        "114": "  public static <K extends Comparable<? super K>, V> ImmutableSortedMap<K, V> of(\n",
        "115": "      K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4) {\n",
        "117": "        .put(k1, v1)\n",
        "118": "        .put(k2, v2)\n",
        "119": "        .put(k3, v3)\n",
        "120": "        .put(k4, v4)\n",
        "121": "        .build();\n",
        "124": "  public static <K extends Comparable<? super K>, V> ImmutableSortedMap<K, V> of(\n",
        "125": "      K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5) {\n",
        "127": "        .put(k1, v1)\n",
        "128": "        .put(k2, v2)\n",
        "129": "        .put(k3, v3)\n",
        "130": "        .put(k4, v4)\n",
        "131": "        .put(k5, v5)\n",
        "132": "        .build();\n",
        "135": "  public static <K, V> ImmutableSortedMap<K, V> copyOf(Map<? extends K, ? extends V> map) {\n",
        "151": "      Comparator<? super K> comparator) {\n",
        "155": "  public static <K, V> ImmutableSortedMap<K, V> copyOfSorted(SortedMap<K, ? extends V> map) {\n",
        "173": "      boolean sameComparator =\n",
        "174": "          (comparator2 == null) ? comparator == NATURAL_ORDER : comparator.equals(comparator2);\n",
        "194": "      Entry<K, V> previousEntry = map.tailMap(key).entrySet().iterator().next();\n",
        "196": "          \"Duplicate keys in mappings \"\n",
        "197": "              + previousEntry.getKey()\n",
        "198": "              + \"=\"\n",
        "199": "              + previousEntry.getValue()\n",
        "200": "              + \" and \"\n",
        "201": "              + key\n",
        "202": "              + \"=\"\n",
        "203": "              + value);\n",
        "227": "    @Override\n",
        "228": "    public Builder<K, V> put(K key, V value) {\n",
        "233": "    @Override\n",
        "234": "    public Builder<K, V> put(Entry<? extends K, ? extends V> entry) {\n",
        "239": "    @Override\n",
        "240": "    public Builder<K, V> putAll(Map<? extends K, ? extends V> map) {\n",
        "244": "    @Override\n",
        "245": "    public Builder<K, V> putAll(Iterable<? extends Entry<? extends K, ? extends V>> entries) {\n",
        "262": "    @Override\n",
        "263": "    public ImmutableSortedMap<K, V> build() {\n",
        "274": "  @Override\n",
        "275": "  public ImmutableSortedSet<K> keySet() {\n",
        "280": "  @Override\n",
        "281": "  ImmutableSortedSet<K> createKeySet() {\n"
    },
    "removed": {
        "100": "  public static <K extends Comparable<? super K>, V> ImmutableSortedMap<K, V>\n",
        "101": "      of(K k1, V v1) {\n",
        "105": "  public static <K extends Comparable<? super K>, V> ImmutableSortedMap<K, V>\n",
        "106": "      of(K k1, V v1, K k2, V v2) {\n",
        "107": "    return new Builder<K, V>(Ordering.natural())\n",
        "108": "        .put(k1, v1).put(k2, v2).build();\n",
        "111": "  public static <K extends Comparable<? super K>, V> ImmutableSortedMap<K, V>\n",
        "112": "      of(K k1, V v1, K k2, V v2, K k3, V v3) {\n",
        "113": "    return new Builder<K, V>(Ordering.natural())\n",
        "114": "        .put(k1, v1).put(k2, v2).put(k3, v3).build();\n",
        "117": "  public static <K extends Comparable<? super K>, V> ImmutableSortedMap<K, V>\n",
        "118": "      of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4) {\n",
        "120": "        .put(k1, v1).put(k2, v2).put(k3, v3).put(k4, v4).build();\n",
        "123": "  public static <K extends Comparable<? super K>, V> ImmutableSortedMap<K, V>\n",
        "124": "      of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5) {\n",
        "126": "        .put(k1, v1).put(k2, v2).put(k3, v3).put(k4, v4).put(k5, v5).build();\n",
        "129": "  public static <K, V> ImmutableSortedMap<K, V>\n",
        "130": "      copyOf(Map<? extends K, ? extends V> map) {\n",
        "146": "          Comparator<? super K> comparator) {\n",
        "150": "  public static <K, V> ImmutableSortedMap<K, V> copyOfSorted(\n",
        "151": "      SortedMap<K, ? extends V> map) {\n",
        "169": "      boolean sameComparator = (comparator2 == null)\n",
        "170": "          ? comparator == NATURAL_ORDER\n",
        "171": "          : comparator.equals(comparator2);\n",
        "191": "      Entry<K, V> previousEntry\n",
        "192": "          = map.tailMap(key).entrySet().iterator().next();\n",
        "194": "          \"Duplicate keys in mappings \" + previousEntry.getKey()\n",
        "195": "          + \"=\" + previousEntry.getValue() + \" and \" + key\n",
        "196": "          + \"=\" + value);\n",
        "220": "    @Override public Builder<K, V> put(K key, V value) {\n",
        "225": "    @Override public Builder<K, V> put(Entry<? extends K, ? extends V> entry) {\n",
        "230": "    @Override public Builder<K, V> putAll(Map<? extends K, ? extends V> map) {\n",
        "234": "    @Override public Builder<K, V> putAll(\n",
        "235": "        Iterable<? extends Entry<? extends K, ? extends V>> entries) {\n",
        "252": "    @Override public ImmutableSortedMap<K, V> build() {\n",
        "263": "  @Override public ImmutableSortedSet<K> keySet() {\n",
        "268": "  @Override ImmutableSortedSet<K> createKeySet() {\n"
    }
}