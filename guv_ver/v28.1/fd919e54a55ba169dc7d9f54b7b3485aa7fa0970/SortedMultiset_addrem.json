{
    "addition": {
        "27": " * A {@link Multiset} which maintains the ordering of its elements, according to either their\n",
        "28": " * natural order or an explicit {@link Comparator}. This order is reflected when iterating over the\n",
        "29": " * sorted multiset, either directly, or through its {@code elementSet} or {@code entrySet} views. In\n",
        "30": " * all cases, this implementation uses {@link Comparable#compareTo} or {@link Comparator#compare}\n",
        "31": " * instead of {@link Object#equals} to determine equivalence of instances.\n",
        "33": " * <p><b>Warning:</b> The comparison must be <i>consistent with equals</i> as explained by the\n",
        "34": " * {@link Comparable} class specification. Otherwise, the resulting multiset will violate the {@link\n",
        "35": " * Collection} contract, which it is specified in terms of {@link Object#equals}.\n",
        "38": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset\"> {@code\n",
        "39": " * Multiset}</a>.\n",
        "47": "   * Returns the comparator that orders this multiset, or {@link Ordering#natural()} if the natural\n",
        "48": "   * ordering of the elements is used.\n",
        "53": "   * Returns the entry of the first element in this multiset, or {@code null} if this multiset is\n",
        "54": "   * empty.\n",
        "59": "   * Returns the entry of the last element in this multiset, or {@code null} if this multiset is\n",
        "60": "   * empty.\n",
        "65": "   * Returns and removes the entry associated with the lowest element in this multiset, or returns\n",
        "66": "   * {@code null} if this multiset is empty.\n",
        "71": "   * Returns and removes the entry associated with the greatest element in this multiset, or returns\n",
        "72": "   * {@code null} if this multiset is empty.\n",
        "87": "   * <p>The {@code entrySet}'s iterator returns entries in ascending element order according to the\n",
        "88": "   * this multiset's comparator.\n",
        "96": "   * <p>The iterator returns the elements in ascending order according to this multiset's\n",
        "97": "   * comparator.\n",
        "103": "   * Returns a descending view of this multiset. Modifications made to either map will be reflected\n",
        "104": "   * in the other.\n",
        "109": "   * Returns a view of this multiset restricted to the elements less than {@code upperBound},\n",
        "110": "   * optionally including {@code upperBound} itself. The returned multiset is a view of this\n",
        "111": "   * multiset, so changes to one will be reflected in the other. The returned multiset supports all\n",
        "112": "   * operations that this multiset supports.\n",
        "114": "   * <p>The returned multiset will throw an {@link IllegalArgumentException} on attempts to add\n",
        "115": "   * elements outside its range.\n",
        "120": "   * Returns a view of this multiset restricted to the range between {@code lowerBound} and {@code\n",
        "121": "   * upperBound}. The returned multiset is a view of this multiset, so changes to one will be\n",
        "122": "   * reflected in the other. The returned multiset supports all operations that this multiset\n",
        "123": "   * supports.\n",
        "125": "   * <p>The returned multiset will throw an {@link IllegalArgumentException} on attempts to add\n",
        "126": "   * elements outside its range.\n",
        "128": "   * <p>This method is equivalent to {@code tailMultiset(lowerBound,\n",
        "129": "   * lowerBoundType).headMultiset(upperBound, upperBoundType)}.\n",
        "135": "   * Returns a view of this multiset restricted to the elements greater than {@code lowerBound},\n",
        "136": "   * optionally including {@code lowerBound} itself. The returned multiset is a view of this\n",
        "137": "   * multiset, so changes to one will be reflected in the other. The returned multiset supports all\n",
        "138": "   * operations that this multiset supports.\n",
        "140": "   * <p>The returned multiset will throw an {@link IllegalArgumentException} on attempts to add\n",
        "141": "   * elements outside its range.\n"
    },
    "removed": {
        "27": " * A {@link Multiset} which maintains the ordering of its elements, according to\n",
        "28": " * either their natural order or an explicit {@link Comparator}. This order is\n",
        "29": " * reflected when iterating over the sorted multiset, either directly, or through\n",
        "30": " * its {@code elementSet} or {@code entrySet} views.  In all cases,\n",
        "31": " * this implementation uses {@link Comparable#compareTo} or\n",
        "32": " * {@link Comparator#compare} instead of {@link Object#equals} to determine\n",
        "33": " * equivalence of instances.\n",
        "35": " * <p><b>Warning:</b> The comparison must be <i>consistent with equals</i> as\n",
        "36": " * explained by the {@link Comparable} class specification. Otherwise, the\n",
        "37": " * resulting multiset will violate the {@link Collection} contract, which it is\n",
        "38": " * specified in terms of {@link Object#equals}.\n",
        "41": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset\">\n",
        "42": " * {@code Multiset}</a>.\n",
        "50": "   * Returns the comparator that orders this multiset, or\n",
        "51": "   * {@link Ordering#natural()} if the natural ordering of the elements is used.\n",
        "56": "   * Returns the entry of the first element in this multiset, or {@code null} if\n",
        "57": "   * this multiset is empty.\n",
        "62": "   * Returns the entry of the last element in this multiset, or {@code null} if\n",
        "63": "   * this multiset is empty.\n",
        "68": "   * Returns and removes the entry associated with the lowest element in this\n",
        "69": "   * multiset, or returns {@code null} if this multiset is empty.\n",
        "74": "   * Returns and removes the entry associated with the greatest element in this\n",
        "75": "   * multiset, or returns {@code null} if this multiset is empty.\n",
        "90": "   * <p>The {@code entrySet}'s iterator returns entries in ascending element\n",
        "91": "   * order according to the this multiset's comparator.\n",
        "99": "   * <p>The iterator returns the elements in ascending order according to this\n",
        "100": "   * multiset's comparator.\n",
        "106": "   * Returns a descending view of this multiset. Modifications made to either\n",
        "107": "   * map will be reflected in the other.\n",
        "112": "   * Returns a view of this multiset restricted to the elements less than\n",
        "113": "   * {@code upperBound}, optionally including {@code upperBound} itself. The\n",
        "114": "   * returned multiset is a view of this multiset, so changes to one will be\n",
        "115": "   * reflected in the other. The returned multiset supports all operations that\n",
        "116": "   * this multiset supports.\n",
        "118": "   * <p>The returned multiset will throw an {@link IllegalArgumentException} on\n",
        "119": "   * attempts to add elements outside its range.\n",
        "124": "   * Returns a view of this multiset restricted to the range between\n",
        "125": "   * {@code lowerBound} and {@code upperBound}. The returned multiset is a view\n",
        "126": "   * of this multiset, so changes to one will be reflected in the other. The\n",
        "127": "   * returned multiset supports all operations that this multiset supports.\n",
        "129": "   * <p>The returned multiset will throw an {@link IllegalArgumentException} on\n",
        "130": "   * attempts to add elements outside its range.\n",
        "132": "   * <p>This method is equivalent to\n",
        "133": "   * {@code tailMultiset(lowerBound, lowerBoundType).headMultiset(upperBound,\n",
        "134": "   * upperBoundType)}.\n",
        "140": "   * Returns a view of this multiset restricted to the elements greater than\n",
        "141": "   * {@code lowerBound}, optionally including {@code lowerBound} itself. The\n",
        "142": "   * returned multiset is a view of this multiset, so changes to one will be\n",
        "143": "   * reflected in the other. The returned multiset supports all operations that\n",
        "144": "   * this multiset supports.\n",
        "146": "   * <p>The returned multiset will throw an {@link IllegalArgumentException} on\n",
        "147": "   * attempts to add elements outside its range.\n"
    }
}