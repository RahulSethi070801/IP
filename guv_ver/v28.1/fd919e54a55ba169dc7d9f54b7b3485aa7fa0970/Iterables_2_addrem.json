{
    "addition": {
        "122": "  /** Returns the number of elements in {@code iterable}. */\n",
        "144": "   * Removes, from an iterable, every element that belongs to the provided collection.\n",
        "146": "   * <p>This method calls {@link Collection#removeAll} if {@code iterable} is a collection, and\n",
        "147": "   * {@link Iterators#removeAll} otherwise.\n",
        "161": "   * Removes, from an iterable, every element that does not belong to the provided collection.\n",
        "163": "   * <p>This method calls {@link Collection#retainAll} if {@code iterable} is a collection, and\n",
        "164": "   * {@link Iterators#retainAll} otherwise.\n",
        "178": "   * Removes, from an iterable, every element that satisfies the provided predicate.\n",
        "180": "   * <p>Removals may or may not happen immediately as each element is tested against the predicate.\n",
        "181": "   * The behavior of this method is not specified if {@code predicate} is dependent on {@code\n",
        "182": "   * removeFrom}.\n",
        "184": "   * <p><b>Java 8 users:</b> if {@code removeFrom} is a {@link Collection}, use {@code\n",
        "185": "   * removeFrom.removeIf(predicate)} instead.\n",
        "188": "   * @param predicate a predicate that determines whether an element should be removed\n",
        "190": "   * @throws UnsupportedOperationException if the iterable does not support {@code remove()}.\n",
        "201": "  /** Removes and returns the first matching element, or returns {@code null} if there is none. */\n",
        "217": "   * Determines whether two iterables contain equal elements in the same order. More specifically,\n",
        "218": "   * this method returns {@code true} if {@code iterable1} and {@code iterable2} contain the same\n",
        "219": "   * number of elements and every element of {@code iterable1} is equal to the corresponding element\n",
        "220": "   * of {@code iterable2}.\n",
        "234": "   * Returns a string representation of {@code iterable}, with the format {@code [e1, e2, ..., en]}\n",
        "235": "   * (that is, identical to {@link java.util.Arrays Arrays}{@code\n",
        "236": "   * .toString(Iterables.toArray(iterable))}). Note that for <i>most</i> implementations of {@link\n",
        "237": "   * Collection}, {@code collection.toString()} also gives the same result, but that behavior is not\n",
        "276": "   * @return a newly-allocated array into which all the elements of the iterable have been copied\n",
        "292": "   * @return a newly-allocated array into which all the elements of the iterable have been copied\n",
        "299": "   * Converts an iterable into a collection. If the iterable is already a collection, it is\n",
        "300": "   * returned. Otherwise, an {@link java.util.ArrayList} is created with the contents of the\n",
        "301": "   * iterable in the same iteration order.\n",
        "312": "   * @return {@code true} if {@code collection} was modified as a result of this operation.\n",
        "332": "   *     Object)\n",
        "414": "   * <p><b>Java 8 users:</b> The {@code Stream} equivalent of this method is {@code Stream.concat(a,\n",
        "415": "   * b)}.\n",
        "492": "   * Divides an iterable into unmodifiable sublists of the given size (the final iterable may be\n",
        "493": "   * smaller). For example, partitioning an iterable containing {@code [a, b, c, d, e]} with a\n",
        "494": "   * partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer iterable containing two\n",
        "495": "   * inner lists of three and two elements, all in the original order.\n",
        "497": "   * <p>Iterators returned by the returned iterable do not support the {@link Iterator#remove()}\n",
        "498": "   * method. The returned lists implement {@link RandomAccess}, whether or not the input list does.\n",
        "500": "   * <p><b>Note:</b> if {@code iterable} is a {@link List}, use {@link Lists#partition(List, int)}\n",
        "501": "   * instead.\n",
        "505": "   * @return an iterable of unmodifiable lists containing the elements of {@code iterable} divided\n",
        "506": "   *     into partitions\n",
        "521": "   * Divides an iterable into unmodifiable sublists of the given size, padding the final iterable\n",
        "522": "   * with null values if necessary. For example, partitioning an iterable containing {@code [a, b,\n",
        "523": "   * c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e, null]]} -- an outer\n",
        "524": "   * iterable containing two inner lists of three elements each, all in the original order.\n",
        "526": "   * <p>Iterators returned by the returned iterable do not support the {@link Iterator#remove()}\n",
        "527": "   * method.\n",
        "531": "   * @return an iterable of unmodifiable lists containing the elements of {@code iterable} divided\n",
        "532": "   *     into partitions (the final iterable may have trailing null elements)\n",
        "622": "   * Returns the first element in {@code iterable} that satisfies the given predicate; use this\n",
        "623": "   * method only when such an element is known to exist. If it is possible that <i>no</i> element\n",
        "624": "   * will match, use {@link #tryFind} or {@link #find(Iterable, Predicate, Object)} instead.\n",
        "628": "   * @throws NoSuchElementException if no element in {@code iterable} matches the given predicate\n",
        "635": "   * Returns the first element in {@code iterable} that satisfies the given predicate, or {@code\n",
        "636": "   * defaultValue} if none found. Note that this can usually be handled more naturally using {@code\n",
        "639": "   * <p><b>{@code Stream} equivalent:</b> {@code\n",
        "640": "   * stream.filter(predicate).findFirst().orElse(defaultValue)}\n",
        "651": "   * Returns an {@link Optional} containing the first element in {@code iterable} that satisfies the\n",
        "652": "   * given predicate, if such an element exists.\n",
        "654": "   * <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null}\n",
        "655": "   * is matched in {@code iterable}, a NullPointerException will be thrown.\n",
        "657": "   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst()}\n",
        "666": "   * Returns the index in {@code iterable} of the first element that satisfies the provided {@code\n",
        "667": "   * predicate}, or {@code -1} if the Iterable has no such elements.\n",
        "669": "   * <p>More formally, returns the lowest index {@code i} such that {@code\n",
        "670": "   * predicate.apply(Iterables.get(iterable, i))} returns {@code true}, or {@code -1} if there is no\n",
        "671": "   * such index.\n",
        "680": "   * Returns a view containing the result of applying {@code function} to each element of {@code\n",
        "681": "   * fromIterable}.\n",
        "683": "   * <p>The returned iterable's iterator supports {@code remove()} if {@code fromIterable}'s\n",
        "684": "   * iterator does. After a successful {@code remove()} call, {@code fromIterable} no longer\n",
        "685": "   * contains the corresponding element.\n",
        "687": "   * <p>If the input {@code Iterable} is known to be a {@code List} or other {@code Collection},\n",
        "688": "   * consider {@link Lists#transform} and {@link Collections2#transform}.\n",
        "718": "   * <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().get()} (throws\n",
        "719": "   * {@code NoSuchElementException} if out of bounds)\n",
        "723": "   * @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to\n",
        "724": "   *     the size of {@code iterable}\n",
        "734": "   * Returns the element at the specified position in an iterable or a default value otherwise.\n",
        "736": "   * <p><b>{@code Stream} equivalent:</b> {@code\n",
        "737": "   * stream.skip(position).findFirst().orElse(defaultValue)} (returns the default value if the index\n",
        "738": "   * is out of bounds)\n",
        "741": "   * @param defaultValue the default value to return if {@code position} is greater than or equal to\n",
        "742": "   *     the size of the iterable\n",
        "743": "   * @return the element at the specified position in {@code iterable} or {@code defaultValue} if\n",
        "744": "   *     {@code iterable} contains fewer than {@code position + 1} elements.\n",
        "785": "   * Returns the last element of {@code iterable}. If {@code iterable} is a {@link List} with {@link\n",
        "786": "   * RandomAccess} support, then this operation is guaranteed to be {@code O(1)}.\n",
        "807": "   * Returns the last element of {@code iterable} or {@code defaultValue} if the iterable is empty.\n",
        "808": "   * If {@code iterable} is a {@link List} with {@link RandomAccess} support, then this operation is\n",
        "809": "   * guaranteed to be {@code O(1)}.\n",
        "836": "   * Returns a view of {@code iterable} that skips its first {@code numberToSkip} elements. If\n",
        "837": "   * {@code iterable} contains fewer than {@code numberToSkip} elements, the returned iterable skips\n",
        "838": "   * all of its elements.\n",
        "840": "   * <p>Modifications to the underlying {@link Iterable} before a call to {@code iterator()} are\n",
        "841": "   * reflected in the returned iterator. That is, the iterator skips the first {@code numberToSkip}\n",
        "842": "   * elements that exist when the {@code Iterator} is created, not when {@code skip()} is called.\n",
        "844": "   * <p>The returned iterable's iterator supports {@code remove()} if the iterator of the underlying\n",
        "845": "   * iterable supports it. Note that it is <i>not</i> possible to delete the last skipped element by\n",
        "846": "   * immediately calling {@code remove()} on that iterator, as the {@code Iterator} contract states\n",
        "847": "   * that a call to {@code remove()} before a call to {@code next()} will throw an {@link\n",
        "848": "   * IllegalStateException}.\n",
        "912": "   * Returns a view of {@code iterable} containing its first {@code limitSize} elements. If {@code\n",
        "913": "   * iterable} contains fewer than {@code limitSize} elements, the returned view contains all of its\n",
        "914": "   * elements. The returned iterable's iterator supports {@code remove()} if {@code iterable}'s\n",
        "941": "   * Returns a view of the supplied iterable that wraps each generated {@link Iterator} through\n",
        "942": "   * {@link Iterators#consumingIterator(Iterator)}.\n",
        "944": "   * <p>Note: If {@code iterable} is a {@link Queue}, the returned iterable will get entries from\n",
        "945": "   * {@link Queue#remove()} since {@link Queue}'s iteration order is undefined. Calling {@link\n",
        "946": "   * Iterator#hasNext()} on a generated iterator from the returned iterable may cause an item to be\n",
        "947": "   * immediately dequeued for return on a subsequent call to {@link Iterator#next()}.\n",
        "950": "   * @return a view of the supplied iterable that wraps each generated iterator through {@link\n",
        "951": "   *     Iterators#consumingIterator(Iterator)}; for queues, an iterable that generates iterators\n",
        "952": "   *     that return and consume the queue's elements in queue order\n",
        "979": "   * <p>There is no precise {@link Iterator} equivalent to this method, since one can only ask an\n",
        "980": "   * iterator whether it has any elements <i>remaining</i> (which one does using {@link\n",
        "981": "   * Iterator#hasNext}).\n",
        "995": "   * Returns an iterable over the merged contents of all given {@code iterables}. Equivalent entries\n",
        "996": "   * will not be de-duplicated.\n",
        "998": "   * <p>Callers must ensure that the source {@code iterables} are in non-descending order as this\n",
        "999": "   * method does not sort its input.\n",
        "1001": "   * <p>For any equivalent elements across all {@code iterables}, it is undefined which element is\n",
        "1002": "   * returned first.\n"
    },
    "removed": {
        "122": "  /**\n",
        "123": "   * Returns the number of elements in {@code iterable}.\n",
        "124": "   */\n",
        "146": "   * Removes, from an iterable, every element that belongs to the provided\n",
        "147": "   * collection.\n",
        "149": "   * <p>This method calls {@link Collection#removeAll} if {@code iterable} is a\n",
        "150": "   * collection, and {@link Iterators#removeAll} otherwise.\n",
        "164": "   * Removes, from an iterable, every element that does not belong to the\n",
        "165": "   * provided collection.\n",
        "167": "   * <p>This method calls {@link Collection#retainAll} if {@code iterable} is a\n",
        "168": "   * collection, and {@link Iterators#retainAll} otherwise.\n",
        "182": "   * Removes, from an iterable, every element that satisfies the provided\n",
        "183": "   * predicate.\n",
        "185": "   * <p>Removals may or may not happen immediately as each element is tested\n",
        "186": "   * against the predicate.  The behavior of this method is not specified if\n",
        "187": "   * {@code predicate} is dependent on {@code removeFrom}.\n",
        "189": "   * <p><b>Java 8 users:</b> if {@code removeFrom} is a {@link Collection},\n",
        "190": "   * use {@code removeFrom.removeIf(predicate)} instead.\n",
        "193": "   * @param predicate a predicate that determines whether an element should\n",
        "194": "   *     be removed\n",
        "196": "   *\n",
        "197": "   * @throws UnsupportedOperationException if the iterable does not support\n",
        "198": "   *     {@code remove()}.\n",
        "209": "  /**\n",
        "210": "   * Removes and returns the first matching element, or returns {@code null} if there is none.\n",
        "211": "   */\n",
        "227": "   * Determines whether two iterables contain equal elements in the same order.\n",
        "228": "   * More specifically, this method returns {@code true} if {@code iterable1}\n",
        "229": "   * and {@code iterable2} contain the same number of elements and every element\n",
        "230": "   * of {@code iterable1} is equal to the corresponding element of\n",
        "231": "   * {@code iterable2}.\n",
        "245": "   * Returns a string representation of {@code iterable}, with the format {@code\n",
        "246": "   * [e1, e2, ..., en]} (that is, identical to {@link java.util.Arrays\n",
        "247": "   * Arrays}{@code .toString(Iterables.toArray(iterable))}). Note that for\n",
        "248": "   * <i>most</i> implementations of {@link Collection}, {@code\n",
        "249": "   * collection.toString()} also gives the same result, but that behavior is not\n",
        "288": "   * @return a newly-allocated array into which all the elements of the iterable\n",
        "289": "   *     have been copied\n",
        "305": "   * @return a newly-allocated array into which all the elements of the iterable\n",
        "306": "   *     have been copied\n",
        "313": "   * Converts an iterable into a collection. If the iterable is already a\n",
        "314": "   * collection, it is returned. Otherwise, an {@link java.util.ArrayList} is\n",
        "315": "   * created with the contents of the iterable in the same iteration order.\n",
        "326": "   * @return {@code true} if {@code collection} was modified as a result of this\n",
        "327": "   *     operation.\n",
        "347": "   *      Object)\n",
        "429": "   * <p><b>Java 8 users:</b> The {@code Stream} equivalent of this method is {@code\n",
        "430": "   * Stream.concat(a, b)}.\n",
        "507": "   * Divides an iterable into unmodifiable sublists of the given size (the final\n",
        "508": "   * iterable may be smaller). For example, partitioning an iterable containing\n",
        "509": "   * {@code [a, b, c, d, e]} with a partition size of 3 yields {@code\n",
        "510": "   * [[a, b, c], [d, e]]} -- an outer iterable containing two inner lists of\n",
        "511": "   * three and two elements, all in the original order.\n",
        "513": "   * <p>Iterators returned by the returned iterable do not support the {@link\n",
        "514": "   * Iterator#remove()} method. The returned lists implement {@link\n",
        "515": "   * RandomAccess}, whether or not the input list does.\n",
        "517": "   * <p><b>Note:</b> if {@code iterable} is a {@link List}, use {@link\n",
        "518": "   * Lists#partition(List, int)} instead.\n",
        "522": "   * @return an iterable of unmodifiable lists containing the elements of {@code\n",
        "523": "   *     iterable} divided into partitions\n",
        "538": "   * Divides an iterable into unmodifiable sublists of the given size, padding\n",
        "539": "   * the final iterable with null values if necessary. For example, partitioning\n",
        "540": "   * an iterable containing {@code [a, b, c, d, e]} with a partition size of 3\n",
        "541": "   * yields {@code [[a, b, c], [d, e, null]]} -- an outer iterable containing\n",
        "542": "   * two inner lists of three elements each, all in the original order.\n",
        "544": "   * <p>Iterators returned by the returned iterable do not support the {@link\n",
        "545": "   * Iterator#remove()} method.\n",
        "549": "   * @return an iterable of unmodifiable lists containing the elements of {@code\n",
        "550": "   *     iterable} divided into partitions (the final iterable may have\n",
        "551": "   *     trailing null elements)\n",
        "641": "   * Returns the first element in {@code iterable} that satisfies the given\n",
        "642": "   * predicate; use this method only when such an element is known to exist. If\n",
        "643": "   * it is possible that <i>no</i> element will match, use {@link #tryFind} or\n",
        "644": "   * {@link #find(Iterable, Predicate, Object)} instead.\n",
        "648": "   * @throws NoSuchElementException if no element in {@code iterable} matches\n",
        "649": "   *     the given predicate\n",
        "656": "   * Returns the first element in {@code iterable} that satisfies the given\n",
        "657": "   * predicate, or {@code defaultValue} if none found. Note that this can\n",
        "658": "   * usually be handled more naturally using {@code\n",
        "661": "   * <p><b>{@code Stream} equivalent:</b>\n",
        "662": "   * {@code stream.filter(predicate).findFirst().orElse(defaultValue)}\n",
        "673": "   * Returns an {@link Optional} containing the first element in {@code\n",
        "674": "   * iterable} that satisfies the given predicate, if such an element exists.\n",
        "676": "   * <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code\n",
        "677": "   * null}. If {@code null} is matched in {@code iterable}, a\n",
        "678": "   * NullPointerException will be thrown.\n",
        "680": "   * <p><b>{@code Stream} equivalent:</b>\n",
        "681": "   * {@code stream.filter(predicate).findFirst()}\n",
        "690": "   * Returns the index in {@code iterable} of the first element that satisfies\n",
        "691": "   * the provided {@code predicate}, or {@code -1} if the Iterable has no such\n",
        "692": "   * elements.\n",
        "694": "   * <p>More formally, returns the lowest index {@code i} such that\n",
        "695": "   * {@code predicate.apply(Iterables.get(iterable, i))} returns {@code true},\n",
        "696": "   * or {@code -1} if there is no such index.\n",
        "705": "   * Returns a view containing the result of applying {@code function} to each\n",
        "706": "   * element of {@code fromIterable}.\n",
        "708": "   * <p>The returned iterable's iterator supports {@code remove()} if {@code\n",
        "709": "   * fromIterable}'s iterator does. After a successful {@code remove()} call,\n",
        "710": "   * {@code fromIterable} no longer contains the corresponding element.\n",
        "712": "   * <p>If the input {@code Iterable} is known to be a {@code List} or other\n",
        "713": "   * {@code Collection}, consider {@link Lists#transform} and {@link\n",
        "714": "   * Collections2#transform}.\n",
        "744": "   * <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().get()}\n",
        "745": "   * (throws {@code NoSuchElementException} if out of bounds)\n",
        "749": "   * @throws IndexOutOfBoundsException if {@code position} is negative or\n",
        "750": "   *     greater than or equal to the size of {@code iterable}\n",
        "760": "   * Returns the element at the specified position in an iterable or a default\n",
        "761": "   * value otherwise.\n",
        "763": "   * <p><b>{@code Stream} equivalent:</b>\n",
        "764": "   * {@code stream.skip(position).findFirst().orElse(defaultValue)}\n",
        "765": "   * (returns the default value if the index is out of bounds)\n",
        "768": "   * @param defaultValue the default value to return if {@code position} is\n",
        "769": "   *     greater than or equal to the size of the iterable\n",
        "770": "   * @return the element at the specified position in {@code iterable} or\n",
        "771": "   *     {@code defaultValue} if {@code iterable} contains fewer than\n",
        "772": "   *     {@code position + 1} elements.\n",
        "813": "   * Returns the last element of {@code iterable}. If {@code iterable} is a {@link List} with\n",
        "814": "   * {@link RandomAccess} support, then this operation is guaranteed to be {@code O(1)}.\n",
        "835": "   * Returns the last element of {@code iterable} or {@code defaultValue} if\n",
        "836": "   * the iterable is empty. If {@code iterable} is a {@link List} with\n",
        "837": "   * {@link RandomAccess} support, then this operation is guaranteed to be {@code O(1)}.\n",
        "864": "   * Returns a view of {@code iterable} that skips its first\n",
        "865": "   * {@code numberToSkip} elements. If {@code iterable} contains fewer than\n",
        "866": "   * {@code numberToSkip} elements, the returned iterable skips all of its\n",
        "867": "   * elements.\n",
        "869": "   * <p>Modifications to the underlying {@link Iterable} before a call to\n",
        "870": "   * {@code iterator()} are reflected in the returned iterator. That is, the\n",
        "871": "   * iterator skips the first {@code numberToSkip} elements that exist when the\n",
        "872": "   * {@code Iterator} is created, not when {@code skip()} is called.\n",
        "874": "   * <p>The returned iterable's iterator supports {@code remove()} if the\n",
        "875": "   * iterator of the underlying iterable supports it. Note that it is\n",
        "876": "   * <i>not</i> possible to delete the last skipped element by immediately\n",
        "877": "   * calling {@code remove()} on that iterator, as the {@code Iterator}\n",
        "878": "   * contract states that a call to {@code remove()} before a call to\n",
        "879": "   * {@code next()} will throw an {@link IllegalStateException}.\n",
        "943": "   * Returns a view of {@code iterable} containing its first {@code limitSize}\n",
        "944": "   * elements. If {@code iterable} contains fewer than {@code limitSize}\n",
        "945": "   * elements, the returned view contains all of its elements. The returned\n",
        "946": "   * iterable's iterator supports {@code remove()} if {@code iterable}'s\n",
        "973": "   * Returns a view of the supplied iterable that wraps each generated\n",
        "974": "   * {@link Iterator} through {@link Iterators#consumingIterator(Iterator)}.\n",
        "976": "   * <p>Note: If {@code iterable} is a {@link Queue}, the returned iterable will\n",
        "977": "   * get entries from {@link Queue#remove()} since {@link Queue}'s iteration\n",
        "978": "   * order is undefined.  Calling {@link Iterator#hasNext()} on a generated\n",
        "979": "   * iterator from the returned iterable may cause an item to be immediately\n",
        "980": "   * dequeued for return on a subsequent call to {@link Iterator#next()}.\n",
        "983": "   * @return a view of the supplied iterable that wraps each generated iterator\n",
        "984": "   *     through {@link Iterators#consumingIterator(Iterator)}; for queues,\n",
        "985": "   *     an iterable that generates iterators that return and consume the\n",
        "986": "   *     queue's elements in queue order\n",
        "987": "   *\n",
        "1014": "   * <p>There is no precise {@link Iterator} equivalent to this method, since\n",
        "1015": "   * one can only ask an iterator whether it has any elements <i>remaining</i>\n",
        "1016": "   * (which one does using {@link Iterator#hasNext}).\n",
        "1030": "   * Returns an iterable over the merged contents of all given\n",
        "1031": "   * {@code iterables}. Equivalent entries will not be de-duplicated.\n",
        "1033": "   * <p>Callers must ensure that the source {@code iterables} are in\n",
        "1034": "   * non-descending order as this method does not sort its input.\n",
        "1036": "   * <p>For any equivalent elements across all {@code iterables}, it is\n",
        "1037": "   * undefined which element is returned first.\n"
    }
}