{
    "addition": {
        "51": " * <p><a name=\"iteration\"></a>\n",
        "52": " *\n",
        "60": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\"> immutable collections</a>.\n",
        "74": "  /** Returns an immutable multimap containing a single entry. */\n",
        "79": "  /** Returns an immutable multimap containing the given entries, in order. */\n",
        "85": "   * Returns an immutable multimap containing the given entries, in the \"key-grouped\" insertion\n",
        "86": "   * order described in the <a href=\"#iteration\">class documentation</a>.\n",
        "93": "   * Returns an immutable multimap containing the given entries, in the \"key-grouped\" insertion\n",
        "94": "   * order described in the <a href=\"#iteration\">class documentation</a>.\n",
        "101": "   * Returns an immutable multimap containing the given entries, in the \"key-grouped\" insertion\n",
        "102": "   * order described in the <a href=\"#iteration\">class documentation</a>.\n",
        "112": "   * Returns a new builder. The generated builder is equivalent to the builder created by the {@link\n",
        "113": "   * Builder} constructor.\n",
        "120": "   * A builder for creating immutable multimap instances, especially {@code public static final}\n",
        "121": "   * multimaps (\"constant multimaps\"). Example:\n",
        "123": "   * <pre>{@code\n",
        "124": "   * static final Multimap<String, Integer> STRING_TO_INTEGER_MULTIMAP =\n",
        "125": "   *     new ImmutableMultimap.Builder<String, Integer>()\n",
        "126": "   *         .put(\"one\", 1)\n",
        "127": "   *         .putAll(\"several\", 1, 2, 3)\n",
        "128": "   *         .putAll(\"many\", 1, 2, 3, 4, 5)\n",
        "129": "   *         .build();\n",
        "130": "   * }</pre>\n",
        "132": "   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build\n",
        "133": "   * multiple multimaps in series. Each multimap contains the key-value mappings in the previously\n",
        "134": "   * created multimaps.\n",
        "144": "     * Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n",
        "145": "     * ImmutableMultimap#builder}.\n",
        "155": "    /** Adds a key-value mapping to the built multimap. */\n",
        "190": "     * @throws NullPointerException if {@code key}, {@code values}, or any element in {@code values}\n",
        "191": "     *     is null. The builder is left in an invalid state.\n",
        "209": "     * @throws NullPointerException if the key or any value is null. The builder is left in an\n",
        "210": "     *     invalid state.\n",
        "218": "     * Stores another multimap's entries in the built multimap. The generated multimap's key and\n",
        "219": "     * value orderings correspond to the iteration ordering of the {@code multimap.asMap()} view,\n",
        "220": "     * with new keys and values following any existing keys and values.\n",
        "222": "     * @throws NullPointerException if any key or value in {@code multimap} is null. The builder is\n",
        "223": "     *     left in an invalid state.\n",
        "256": "    /** Returns a newly-created immutable multimap. */\n",
        "281": "   * Returns an immutable multimap containing the same mappings as {@code multimap}, in the\n",
        "282": "   * \"key-grouped\" iteration order described in the class documentation.\n",
        "284": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "285": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "286": "   * undocumented and subject to change.\n",
        "288": "   * @throws NullPointerException if any key or value in {@code multimap} is null\n",
        "302": "   * Returns an immutable multimap containing the specified entries. The returned multimap iterates\n",
        "303": "   * over keys in the order they were first encountered in the input, and the values for each key\n",
        "304": "   * are iterated in the order they were encountered.\n",
        "377": "   * Returns an immutable collection of the values for the given key. If no mappings in the multimap\n",
        "378": "   * have the provided key, an empty immutable collection is returned. The values are in the same\n",
        "379": "   * order as the parameters used to build this multimap.\n",
        "385": "   * Returns an immutable multimap which is the inverse of this one. For every key-value mapping in\n",
        "386": "   * the original, the result will have a mapping with key and value reversed.\n",
        "446": "   * user-created objects that aren't accessible via this multimap's methods. This is generally used\n",
        "447": "   * to determine whether {@code copyOf} implementations should make an explicit copy to avoid\n",
        "474": "   * Returns an immutable set of the distinct keys in this multimap, in the same order as they\n",
        "475": "   * appear in this multimap.\n",
        "483": "   * Returns an immutable map that associates each key with its corresponding values in the\n",
        "484": "   * multimap. Keys and values appear in the same order as in this multimap.\n",
        "497": "  /** Returns an immutable collection of all key-value pairs in the multimap. */\n",
        "576": "   * Returns an immutable multiset containing all the keys in this multimap, in the same order and\n",
        "577": "   * with the same frequencies as they appear in this multimap; to get only a single occurrence of\n",
        "578": "   * each key, use {@link #keySet}.\n",
        "627": "   * Returns an immutable collection of the values in this multimap. Its iterator traverses the\n",
        "628": "   * values for the first key, the values for the second key, and so on.\n"
    },
    "removed": {
        "52": " * <a name=\"iteration\"></a>\n",
        "60": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\">\n",
        "61": " * immutable collections</a>.\n",
        "75": "  /**\n",
        "76": "   * Returns an immutable multimap containing a single entry.\n",
        "77": "   */\n",
        "82": "  /**\n",
        "83": "   * Returns an immutable multimap containing the given entries, in order.\n",
        "84": "   */\n",
        "90": "   * Returns an immutable multimap containing the given entries, in the\n",
        "91": "   * \"key-grouped\" insertion order described in the\n",
        "92": "   * <a href=\"#iteration\">class documentation</a>.\n",
        "99": "   * Returns an immutable multimap containing the given entries, in the\n",
        "100": "   * \"key-grouped\" insertion order described in the\n",
        "101": "   * <a href=\"#iteration\">class documentation</a>.\n",
        "108": "   * Returns an immutable multimap containing the given entries, in the\n",
        "109": "   * \"key-grouped\" insertion order described in the\n",
        "110": "   * <a href=\"#iteration\">class documentation</a>.\n",
        "120": "   * Returns a new builder. The generated builder is equivalent to the builder\n",
        "121": "   * created by the {@link Builder} constructor.\n",
        "128": "   * A builder for creating immutable multimap instances, especially\n",
        "129": "   * {@code public static final} multimaps (\"constant multimaps\"). Example:\n",
        "130": "   * <pre>   {@code\n",
        "132": "   *   static final Multimap<String, Integer> STRING_TO_INTEGER_MULTIMAP =\n",
        "133": "   *       new ImmutableMultimap.Builder<String, Integer>()\n",
        "134": "   *           .put(\"one\", 1)\n",
        "135": "   *           .putAll(\"several\", 1, 2, 3)\n",
        "136": "   *           .putAll(\"many\", 1, 2, 3, 4, 5)\n",
        "137": "   *           .build();}</pre>\n",
        "139": "   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple\n",
        "140": "   * times to build multiple multimaps in series. Each multimap contains the\n",
        "141": "   * key-value mappings in the previously created multimaps.\n",
        "151": "     * Creates a new builder. The returned builder is equivalent to the builder\n",
        "152": "     * generated by {@link ImmutableMultimap#builder}.\n",
        "162": "    /**\n",
        "163": "     * Adds a key-value mapping to the built multimap.\n",
        "164": "     */\n",
        "199": "     * @throws NullPointerException if {@code key}, {@code values}, or any\n",
        "200": "     *     element in {@code values} is null. The builder is left in an invalid\n",
        "201": "     *     state.\n",
        "219": "     * @throws NullPointerException if the key or any value is null. The builder\n",
        "220": "     *     is left in an invalid state.\n",
        "228": "     * Stores another multimap's entries in the built multimap. The generated\n",
        "229": "     * multimap's key and value orderings correspond to the iteration ordering\n",
        "230": "     * of the {@code multimap.asMap()} view, with new keys and values following\n",
        "231": "     * any existing keys and values.\n",
        "233": "     * @throws NullPointerException if any key or value in {@code multimap} is\n",
        "234": "     *     null. The builder is left in an invalid state.\n",
        "267": "    /**\n",
        "268": "     * Returns a newly-created immutable multimap.\n",
        "269": "     */\n",
        "294": "   * Returns an immutable multimap containing the same mappings as {@code\n",
        "295": "   * multimap}, in the \"key-grouped\" iteration order described in the class\n",
        "296": "   * documentation.\n",
        "298": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "299": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "300": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "302": "   * @throws NullPointerException if any key or value in {@code multimap} is\n",
        "303": "   *         null\n",
        "317": "   * Returns an immutable multimap containing the specified entries.  The\n",
        "318": "   * returned multimap iterates over keys in the order they were first\n",
        "319": "   * encountered in the input, and the values for each key are iterated in the\n",
        "320": "   * order they were encountered.\n",
        "393": "   * Returns an immutable collection of the values for the given key.  If no\n",
        "394": "   * mappings in the multimap have the provided key, an empty immutable\n",
        "395": "   * collection is returned. The values are in the same order as the parameters\n",
        "396": "   * used to build this multimap.\n",
        "402": "   * Returns an immutable multimap which is the inverse of this one. For every\n",
        "403": "   * key-value mapping in the original, the result will have a mapping with\n",
        "404": "   * key and value reversed.\n",
        "464": "   * user-created objects that aren't accessible via this multimap's methods. This is generally\n",
        "465": "   * used to determine whether {@code copyOf} implementations should make an explicit copy to avoid\n",
        "492": "   * Returns an immutable set of the distinct keys in this multimap, in the same\n",
        "493": "   * order as they appear in this multimap.\n",
        "501": "   * Returns an immutable map that associates each key with its corresponding\n",
        "502": "   * values in the multimap. Keys and values appear in the same order as in this\n",
        "503": "   * multimap.\n",
        "516": "  /**\n",
        "517": "   * Returns an immutable collection of all key-value pairs in the multimap.\n",
        "518": "   */\n",
        "597": "   * Returns an immutable multiset containing all the keys in this multimap, in\n",
        "598": "   * the same order and with the same frequencies as they appear in this\n",
        "599": "   * multimap; to get only a single occurrence of each key, use {@link #keySet}.\n",
        "648": "   * Returns an immutable collection of the values in this multimap. Its\n",
        "649": "   * iterator traverses the values for the first key, the values for the second\n",
        "650": "   * key, and so on.\n"
    }
}