{
    "addition": {
        "24": " * Provides equivalent behavior to {@link String#intern} for other immutable types. Common\n",
        "25": " * implementations are available from the {@link Interners} class.\n",
        "34": "   * Chooses and returns the representative instance for any of a collection of instances that are\n",
        "35": "   * equal to each other. If two {@linkplain Object#equals equal} inputs are given to this method,\n",
        "36": "   * both calls will return the same instance. That is, {@code intern(a).equals(a)} always holds,\n",
        "37": "   * and {@code intern(a) == intern(b)} if and only if {@code a.equals(b)}. Note that {@code\n",
        "38": "   * intern(a)} is permitted to return one instance now and a different instance later if the\n",
        "39": "   * original interned instance was garbage-collected.\n"
    },
    "removed": {
        "24": " * Provides equivalent behavior to {@link String#intern} for other immutable\n",
        "25": " * types. Common implementations are available from the {@link Interners} class.\n",
        "34": "   * Chooses and returns the representative instance for any of a collection of\n",
        "35": "   * instances that are equal to each other. If two {@linkplain Object#equals\n",
        "36": "   * equal} inputs are given to this method, both calls will return the same\n",
        "37": "   * instance.  That is, {@code intern(a).equals(a)} always holds, and {@code\n",
        "38": "   * intern(a) == intern(b)} if and only if {@code a.equals(b)}. Note that\n",
        "39": "   * {@code intern(a)} is permitted to return one instance now and a different\n",
        "40": "   * instance later if the original interned instance was garbage-collected.\n"
    }
}