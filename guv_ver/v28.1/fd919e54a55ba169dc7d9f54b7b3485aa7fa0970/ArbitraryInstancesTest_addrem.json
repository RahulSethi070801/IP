{
    "addition": {
        "215": "        LinkedList.class,\n",
        "216": "        Deque.class,\n",
        "217": "        Queue.class,\n",
        "218": "        PriorityQueue.class,\n",
        "219": "        BitSet.class,\n",
        "220": "        TreeSet.class,\n",
        "221": "        TreeMap.class);\n",
        "234": "    assertEquals(\n",
        "235": "        ArbitraryInstances.get(Random.class).nextInt(),\n",
        "250": "        BlockingQueue.class,\n",
        "251": "        BlockingDeque.class,\n",
        "252": "        PriorityBlockingQueue.class,\n",
        "253": "        DelayQueue.class,\n",
        "254": "        SynchronousQueue.class,\n",
        "255": "        ConcurrentMap.class,\n",
        "256": "        ConcurrentNavigableMap.class,\n",
        "257": "        AtomicReference.class,\n",
        "258": "        AtomicBoolean.class,\n",
        "259": "        AtomicInteger.class,\n",
        "260": "        AtomicLong.class,\n",
        "261": "        AtomicDouble.class);\n",
        "281": "    } catch (NullPointerException expected) {\n",
        "282": "    }\n",
        "306": "    assertSame(\n",
        "307": "        WithPrivateConstructor.INSTANCE, ArbitraryInstances.get(WithPrivateConstructor.class));\n",
        "309": "    assertSame(\n",
        "310": "        WithExceptionalConstructor.INSTANCE,\n",
        "365": "    assertEquals(Pattern.compile(\"\").pattern(), ArbitraryInstances.get(Pattern.class).pattern());\n",
        "370": "    assertSame(WithPublicConstant.INSTANCE, ArbitraryInstances.get(WithPublicConstant.class));\n",
        "374": "    assertSame(WithPublicConstants.FIRST, ArbitraryInstances.get(WithPublicConstants.class));\n",
        "378": "    assertSame(FirstConstantIsNull.SECOND, ArbitraryInstances.get(FirstConstantIsNull.class));\n",
        "403": "    assertTrue(\n",
        "404": "        ArbitraryInstances.get(WithPublicConstructorAndConstant.class)\n",
        "405": "            != ArbitraryInstances.get(WithPublicConstructorAndConstant.class));\n",
        "416": "      assertNotSame(\n",
        "417": "          \"Expected to return fresh instance for: \" + mutableClass,\n",
        "418": "          instance,\n",
        "419": "          ArbitraryInstances.get(mutableClass));\n",
        "426": "    UP,\n",
        "427": "    DOWN\n",
        "432": "  public abstract static class SomeAbstractClass {\n",
        "434": "\n",
        "465": "  private static class ParentClassHasConstant extends WithPublicConstant {}\n",
        "503": "    public static NonFinalFieldIgnored instance = new NonFinalFieldIgnored();\n",
        "509": "    static final NonPublicConstantIgnored INSTANCE = new NonPublicConstantIgnored();\n",
        "516": "    public final NonStaticFieldIgnored instance = new NonStaticFieldIgnored();\n"
    },
    "removed": {
        "215": "        LinkedList.class, Deque.class, Queue.class, PriorityQueue.class, BitSet.class,\n",
        "216": "        TreeSet.class, TreeMap.class);\n",
        "229": "    assertEquals(ArbitraryInstances.get(Random.class).nextInt(),\n",
        "244": "        BlockingQueue.class, BlockingDeque.class, PriorityBlockingQueue.class,\n",
        "245": "        DelayQueue.class, SynchronousQueue.class,\n",
        "246": "        ConcurrentMap.class, ConcurrentNavigableMap.class,\n",
        "247": "        AtomicReference.class, AtomicBoolean.class,\n",
        "248": "        AtomicInteger.class, AtomicLong.class, AtomicDouble.class);\n",
        "268": "    } catch (NullPointerException expected) {}\n",
        "292": "    assertSame(WithPrivateConstructor.INSTANCE,\n",
        "293": "        ArbitraryInstances.get(WithPrivateConstructor.class));\n",
        "295": "    assertSame(WithExceptionalConstructor.INSTANCE,\n",
        "350": "    assertEquals(Pattern.compile(\"\").pattern(),\n",
        "351": "        ArbitraryInstances.get(Pattern.class).pattern());\n",
        "356": "    assertSame(WithPublicConstant.INSTANCE,\n",
        "357": "        ArbitraryInstances.get(WithPublicConstant.class));\n",
        "361": "    assertSame(WithPublicConstants.FIRST,\n",
        "362": "        ArbitraryInstances.get(WithPublicConstants.class));\n",
        "366": "    assertSame(FirstConstantIsNull.SECOND,\n",
        "367": "        ArbitraryInstances.get(FirstConstantIsNull.class));\n",
        "392": "    assertTrue(ArbitraryInstances.get(WithPublicConstructorAndConstant.class)\n",
        "393": "        != ArbitraryInstances.get(WithPublicConstructorAndConstant.class));\n",
        "404": "      assertNotSame(\"Expected to return fresh instance for: \" + mutableClass,\n",
        "405": "          instance, ArbitraryInstances.get(mutableClass));\n",
        "412": "    UP, DOWN\n",
        "417": "  public static abstract class SomeAbstractClass {\n",
        "448": "  private static class ParentClassHasConstant\n",
        "449": "      extends WithPublicConstant {}\n",
        "486": "    public static NonFinalFieldIgnored instance =\n",
        "487": "        new NonFinalFieldIgnored();\n",
        "493": "    static final NonPublicConstantIgnored INSTANCE =\n",
        "494": "        new NonPublicConstantIgnored();\n",
        "501": "    public final NonStaticFieldIgnored instance =\n",
        "502": "        new NonStaticFieldIgnored();\n"
    }
}