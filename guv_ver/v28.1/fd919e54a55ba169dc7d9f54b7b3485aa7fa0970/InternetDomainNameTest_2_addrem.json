{
    "addition": {
        "41": "  /** The Greek letter delta, used in unicode testing. */\n",
        "44": "  /** A domain part which is valid under lenient validation, but invalid under strict validation. */\n",
        "47": "  private static final String ALMOST_TOO_MANY_LEVELS = Strings.repeat(\"a.\", 127);\n",
        "48": "\n",
        "49": "  private static final String ALMOST_TOO_LONG = Strings.repeat(\"aaaaa.\", 40) + \"1234567890.c\";\n",
        "50": "\n",
        "51": "  private static final ImmutableSet<String> VALID_NAME =\n",
        "52": "      ImmutableSet.of(\n",
        "53": "          \"foo.com\",\n",
        "54": "          \"f-_-o.cOM\",\n",
        "55": "          \"f--1.com\",\n",
        "56": "          \"f11-1.com\",\n",
        "57": "          \"www\",\n",
        "58": "          \"abc.a23\",\n",
        "59": "          \"biz.com.ua\",\n",
        "60": "          \"x\",\n",
        "61": "          \"fOo\",\n",
        "62": "          \"f--o\",\n",
        "63": "          \"f_a\",\n",
        "64": "          \"foo.net.us\\uFF61ocm\",\n",
        "65": "          \"woo.com.\",\n",
        "66": "          \"a\" + DELTA + \"b.com\",\n",
        "67": "          ALMOST_TOO_MANY_LEVELS,\n",
        "68": "          ALMOST_TOO_LONG);\n",
        "69": "\n",
        "70": "  private static final ImmutableSet<String> INVALID_NAME =\n",
        "71": "      ImmutableSet.of(\n",
        "72": "          \"\",\n",
        "73": "          \" \",\n",
        "74": "          \"127.0.0.1\",\n",
        "75": "          \"::1\",\n",
        "76": "          \"13\",\n",
        "77": "          \"abc.12c\",\n",
        "78": "          \"foo-.com\",\n",
        "79": "          \"_bar.quux\",\n",
        "80": "          \"foo+bar.com\",\n",
        "81": "          \"foo!bar.com\",\n",
        "82": "          \".foo.com\",\n",
        "83": "          \"..bar.com\",\n",
        "84": "          \"baz..com\",\n",
        "85": "          \"..quiffle.com\",\n",
        "86": "          \"fleeb.com..\",\n",
        "87": "          \".\",\n",
        "88": "          \"..\",\n",
        "89": "          \"...\",\n",
        "90": "          \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.com\",\n",
        "91": "          \"a\" + DELTA + \" .com\",\n",
        "92": "          ALMOST_TOO_MANY_LEVELS + \"com\",\n",
        "93": "          ALMOST_TOO_LONG + \".c\");\n",
        "115": "  private static final ImmutableSet<String> NO_PS =\n",
        "116": "      ImmutableSet.of(\"www\", \"foo.ihopethiswillneverbeapublicsuffix\", \"x.y.z\");\n",
        "159": "  private static final ImmutableSet<String> VALID_IP_ADDRS =\n",
        "160": "      ImmutableSet.of(\"1.2.3.4\", \"127.0.0.1\", \"::1\", \"2001:db8::1\");\n",
        "162": "  private static final ImmutableSet<String> INVALID_IP_ADDRS =\n",
        "163": "      ImmutableSet.of(\n",
        "164": "          \"\", \"1\", \"1.2.3\", \"...\", \"1.2.3.4.5\", \"400.500.600.700\", \":\", \":::1\", \"2001:db8:\");\n",
        "224": "          \"a\\u7f51\\u7edcA.\\u7f51\\u7edc.Cn\" // \"a\u7f51\u7edcA.\u7f51\u7edc.Cn\"\n",
        "225": "          );\n",
        "361": "    assertEquals(\"com\", InternetDomainName.from(\"google.com\").parent().toString());\n",
        "362": "    assertEquals(\"uk\", InternetDomainName.from(\"co.uk\").parent().toString());\n",
        "363": "    assertEquals(\"google.com\", InternetDomainName.from(\"www.google.com\").parent().toString());\n",
        "404": "    ImmutableSet<String> badCookieDomains = ImmutableSet.of(\"co.uk\", \"foo\", \"com\");\n",
        "416": "    final Iterable<String> validCases = Iterables.concat(VALID_NAME, PS, NO_PS, NON_PS);\n",
        "417": "    final Iterable<String> invalidCases =\n",
        "418": "        Iterables.concat(INVALID_NAME, VALID_IP_ADDRS, INVALID_IP_ADDRS);\n",
        "490": "        .addEqualityGroup(idn(\"google.com\"), idn(\"google.com\"), idn(\"GOOGLE.COM\"))\n"
    },
    "removed": {
        "41": "  /**\n",
        "42": "   * The Greek letter delta, used in unicode testing.\n",
        "43": "   */\n",
        "46": "  /**\n",
        "47": "   * A domain part which is valid under lenient validation, but invalid under\n",
        "48": "   * strict validation.\n",
        "49": "   */\n",
        "52": "  private static final String ALMOST_TOO_MANY_LEVELS =\n",
        "53": "      Strings.repeat(\"a.\", 127);\n",
        "54": "\n",
        "55": "  private static final String ALMOST_TOO_LONG =\n",
        "56": "      Strings.repeat(\"aaaaa.\", 40) + \"1234567890.c\";\n",
        "57": "\n",
        "58": "  private static final ImmutableSet<String> VALID_NAME = ImmutableSet.of(\n",
        "59": "      \"foo.com\",\n",
        "60": "      \"f-_-o.cOM\",\n",
        "61": "      \"f--1.com\",\n",
        "62": "      \"f11-1.com\",\n",
        "63": "      \"www\",\n",
        "64": "      \"abc.a23\",\n",
        "65": "      \"biz.com.ua\",\n",
        "66": "      \"x\",\n",
        "67": "      \"fOo\",\n",
        "68": "      \"f--o\",\n",
        "69": "      \"f_a\",\n",
        "70": "      \"foo.net.us\\uFF61ocm\",\n",
        "71": "      \"woo.com.\",\n",
        "72": "      \"a\" + DELTA + \"b.com\",\n",
        "73": "      ALMOST_TOO_MANY_LEVELS,\n",
        "74": "      ALMOST_TOO_LONG);\n",
        "75": "\n",
        "76": "  private static final ImmutableSet<String> INVALID_NAME = ImmutableSet.of(\n",
        "77": "      \"\",\n",
        "78": "      \" \",\n",
        "79": "      \"127.0.0.1\",\n",
        "80": "      \"::1\", \"13\",\n",
        "81": "      \"abc.12c\",\n",
        "82": "      \"foo-.com\",\n",
        "83": "      \"_bar.quux\",\n",
        "84": "      \"foo+bar.com\",\n",
        "85": "      \"foo!bar.com\",\n",
        "86": "      \".foo.com\",\n",
        "87": "      \"..bar.com\",\n",
        "88": "      \"baz..com\",\n",
        "89": "      \"..quiffle.com\",\n",
        "90": "      \"fleeb.com..\",\n",
        "91": "      \".\",\n",
        "92": "      \"..\",\n",
        "93": "      \"...\",\n",
        "94": "      \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.com\",\n",
        "95": "      \"a\" + DELTA + \" .com\",\n",
        "96": "      ALMOST_TOO_MANY_LEVELS + \"com\",\n",
        "97": "      ALMOST_TOO_LONG + \".c\");\n",
        "119": "  private static final ImmutableSet<String> NO_PS = ImmutableSet.of(\n",
        "120": "      \"www\", \"foo.ihopethiswillneverbeapublicsuffix\", \"x.y.z\");\n",
        "163": "  private static final ImmutableSet<String> VALID_IP_ADDRS = ImmutableSet.of(\n",
        "164": "      \"1.2.3.4\", \"127.0.0.1\", \"::1\", \"2001:db8::1\");\n",
        "166": "  private static final ImmutableSet<String> INVALID_IP_ADDRS = ImmutableSet.of(\n",
        "167": "      \"\", \"1\", \"1.2.3\", \"...\", \"1.2.3.4.5\", \"400.500.600.700\",\n",
        "168": "      \":\", \":::1\", \"2001:db8:\");\n",
        "228": "          \"a\\u7f51\\u7edcA.\\u7f51\\u7edc.Cn\"  // \"a\u7f51\u7edcA.\u7f51\u7edc.Cn\"\n",
        "229": "      );\n",
        "365": "    assertEquals(\n",
        "366": "        \"com\",\n",
        "367": "        InternetDomainName.from(\"google.com\").parent().toString());\n",
        "368": "    assertEquals(\n",
        "369": "        \"uk\",\n",
        "370": "        InternetDomainName.from(\"co.uk\").parent().toString());\n",
        "371": "    assertEquals(\n",
        "372": "        \"google.com\",\n",
        "373": "        InternetDomainName.from(\"www.google.com\").parent().toString());\n",
        "414": "    ImmutableSet<String> badCookieDomains =\n",
        "415": "        ImmutableSet.of(\"co.uk\", \"foo\", \"com\");\n",
        "427": "    final Iterable<String> validCases = Iterables.concat(\n",
        "428": "        VALID_NAME, PS, NO_PS, NON_PS);\n",
        "429": "    final Iterable<String> invalidCases = Iterables.concat(\n",
        "430": "        INVALID_NAME, VALID_IP_ADDRS, INVALID_IP_ADDRS);\n",
        "502": "        .addEqualityGroup(\n",
        "503": "            idn(\"google.com\"), idn(\"google.com\"), idn(\"GOOGLE.COM\"))\n"
    }
}