{
    "addition": {
        "25": " * To be implemented by test generators of things that can contain elements. Such things include\n",
        "26": " * both {@link Collection} and {@link Map}; since there isn't an established collective noun that\n",
        "27": " * encompasses both of these, 'container' is used.\n",
        "33": "  /** Returns the sample elements that this generate populates its container with. */\n",
        "37": "   * Creates a new container containing the given elements. TODO: would be nice to figure out how to\n",
        "38": "   * use E... or E[] as a parameter type, but this doesn't seem to work because Java creates an\n",
        "39": "   * array of the erased type.\n",
        "44": "   * Helper method to create an array of the appropriate type used by this generator. The returned\n",
        "45": "   * array will contain only nulls.\n",
        "50": "   * Returns the iteration ordering of elements, given the order in which they were added to the\n",
        "51": "   * container. This method may return the original list unchanged, the original list modified in\n",
        "52": "   * place, or a different list.\n",
        "54": "   * <p>If the order is non-deterministic, as with {@link java.util.HashSet}, this method can return\n",
        "55": "   * its input unmodified. Provided that the test suite is built without {@link\n",
        "56": "   * com.google.common.collect.testing.features.CollectionFeature#KNOWN_ORDER}, the tests will look\n",
        "57": "   * only at the returned contents without regard for order.\n"
    },
    "removed": {
        "25": " * To be implemented by test generators of things that can contain\n",
        "26": " * elements. Such things include both {@link Collection} and {@link Map}; since\n",
        "27": " * there isn't an established collective noun that encompasses both of these,\n",
        "28": " * 'container' is used.\n",
        "34": "  /**\n",
        "35": "   * Returns the sample elements that this generate populates its container\n",
        "36": "   * with.\n",
        "37": "   */\n",
        "41": "   * Creates a new container containing the given elements. TODO: would be nice\n",
        "42": "   * to figure out how to use E... or E[] as a parameter type, but this doesn't\n",
        "43": "   * seem to work because Java creates an array of the erased type.\n",
        "48": "   * Helper method to create an array of the appropriate type used by this\n",
        "49": "   * generator. The returned array will contain only nulls.\n",
        "54": "   * Returns the iteration ordering of elements, given the order in\n",
        "55": "   * which they were added to the container. This method may return the\n",
        "56": "   * original list unchanged, the original list modified in place, or a\n",
        "57": "   * different list.\n",
        "59": "   * <p>If the order is non-deterministic, as with {@link java.util.HashSet},\n",
        "60": "   * this method can return its input unmodified. Provided that the test suite\n",
        "61": "   * is built without {@link\n",
        "62": "   * com.google.common.collect.testing.features.CollectionFeature#KNOWN_ORDER},\n",
        "63": "   * the tests will look only at the returned contents without regard for order.\n"
    }
}