{
    "addition": {
        "39": " * <p>See the Guava User Guide article on <a\n",
        "40": " * href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n",
        "64": "   * Returns a hash code for {@code value}; equal to the result of invoking {@code ((Short)\n",
        "65": "   * value).hashCode()}.\n",
        "128": "   * @return {@code true} if {@code array[i] == target} for some value of {@code i}\n",
        "162": "   * Returns the start position of the first occurrence of the specified {@code target} within\n",
        "163": "   * {@code array}, or {@code -1} if there is no such occurrence.\n",
        "165": "   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,\n",
        "166": "   * i, i + target.length)} contains exactly the same elements as {@code target}.\n",
        "254": "   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code\n",
        "255": "   * value} is greater than {@code max}, {@code max} is returned.\n",
        "270": "   * Returns the values from each provided array combined into a single array. For example, {@code\n",
        "271": "   * concat(new short[] {a, b}, new short[] {}, new short[] {c}} returns the array {@code {a, b,\n",
        "272": "   * c}}.\n",
        "297": "   * use a shared {@link java.nio.ByteBuffer} instance, or use {@link\n",
        "298": "   * com.google.common.io.ByteStreams#newDataOutput()} to get a growable buffer.\n",
        "359": "   * Returns a serializable converter object that converts between strings and shorts using {@link\n",
        "360": "   * Short#decode} and {@link Short#toString()}. The returned converter throws {@link\n",
        "361": "   * NumberFormatException} if the input string is invalid.\n",
        "384": "   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code\n",
        "385": "   *     minLength}\n",
        "395": "   * For example, {@code join(\"-\", (short) 1, (short) 2, (short) 3)} returns the string {@code\n",
        "396": "   * \"1-2-3\"}.\n",
        "425": "   * support only identity equality), but it is consistent with {@link Arrays#equals(short[],\n",
        "426": "   * short[])}.\n",
        "513": "   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.\n",
        "514": "   * Calling this method is as thread-safe as calling that method.\n",
        "538": "   * Returns a fixed-size list backed by the specified array, similar to {@link\n",
        "539": "   * Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any attempt to\n",
        "540": "   * set a value to {@code null} will result in a {@link NullPointerException}.\n"
    },
    "removed": {
        "39": " * <p>See the Guava User Guide article on\n",
        "40": " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n",
        "64": "   * Returns a hash code for {@code value}; equal to the result of invoking\n",
        "65": "   * {@code ((Short) value).hashCode()}.\n",
        "128": "   * @return {@code true} if {@code array[i] == target} for some value of {@code\n",
        "129": "   *     i}\n",
        "163": "   * Returns the start position of the first occurrence of the specified {@code\n",
        "164": "   * target} within {@code array}, or {@code -1} if there is no such occurrence.\n",
        "166": "   * <p>More formally, returns the lowest index {@code i} such that\n",
        "167": "   * {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as\n",
        "168": "   * {@code target}.\n",
        "256": "   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if\n",
        "257": "   * {@code value} is greater than {@code max}, {@code max} is returned.\n",
        "272": "   * Returns the values from each provided array combined into a single array. For example,\n",
        "273": "   * {@code concat(new short[] {a, b}, new short[] {}, new short[] {c}} returns the array\n",
        "274": "   * {@code {a, b, c}}.\n",
        "299": "   * use a shared {@link java.nio.ByteBuffer} instance, or use\n",
        "300": "   * {@link com.google.common.io.ByteStreams#newDataOutput()} to get a growable buffer.\n",
        "361": "   * Returns a serializable converter object that converts between strings and shorts using\n",
        "362": "   * {@link Short#decode} and {@link Short#toString()}. The returned converter throws\n",
        "363": "   * {@link NumberFormatException} if the input string is invalid.\n",
        "386": "   * @return an array containing the values of {@code array}, with guaranteed minimum length\n",
        "387": "   *     {@code minLength}\n",
        "397": "   * For example, {@code join(\"-\", (short) 1, (short) 2,\n",
        "398": "   * (short) 3)} returns the string {@code \"1-2-3\"}.\n",
        "427": "   * support only identity equality), but it is consistent with\n",
        "428": "   * {@link Arrays#equals(short[], short[])}.\n",
        "515": "   * <p>Elements are copied from the argument collection as if by {@code\n",
        "516": "   * collection.toArray()}. Calling this method is as thread-safe as calling that method.\n",
        "540": "   * Returns a fixed-size list backed by the specified array, similar to\n",
        "541": "   * {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any\n",
        "542": "   * attempt to set a value to {@code null} will result in a {@link NullPointerException}.\n"
    }
}