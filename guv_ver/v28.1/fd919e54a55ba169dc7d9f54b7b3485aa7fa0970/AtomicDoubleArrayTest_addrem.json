{
    "addition": {
        "18": "/** Unit test for {@link AtomicDoubleArray}. */\n",
        "48": "    assertEquals(Double.doubleToRawLongBits(x), Double.doubleToRawLongBits(y));\n",
        "51": "  /** constructor creates array of given size with all elements zero */\n",
        "59": "  /** constructor with null array throws NPE */\n",
        "65": "    } catch (NullPointerException success) {\n",
        "66": "    }\n",
        "69": "  /** constructor with array is of same size and has all elements */\n",
        "78": "  /** constructor with empty array has size 0 and contains no elements */\n",
        "85": "    } catch (IndexOutOfBoundsException success) {\n",
        "86": "    }\n",
        "89": "  /** constructor with length zero has size 0 and contains no elements */\n",
        "96": "    } catch (IndexOutOfBoundsException success) {\n",
        "97": "    }\n",
        "100": "  /** get and set for out of bound indices throw IndexOutOfBoundsException */\n",
        "103": "    for (int index : new int[] {-1, SIZE}) {\n",
        "107": "      } catch (IndexOutOfBoundsException success) {\n",
        "108": "      }\n",
        "112": "      } catch (IndexOutOfBoundsException success) {\n",
        "113": "      }\n",
        "117": "      } catch (IndexOutOfBoundsException success) {\n",
        "118": "      }\n",
        "122": "      } catch (IndexOutOfBoundsException success) {\n",
        "123": "      }\n",
        "127": "      } catch (IndexOutOfBoundsException success) {\n",
        "128": "      }\n",
        "132": "      } catch (IndexOutOfBoundsException success) {\n",
        "133": "      }\n",
        "137": "      } catch (IndexOutOfBoundsException success) {\n",
        "138": "      }\n",
        "142": "  /** get returns the last value set at index */\n",
        "154": "  /** get returns the last value lazySet at index by same thread */\n",
        "166": "  /** compareAndSet succeeds in changing value if equal to expected else fails */\n",
        "169": "    for (int i : new int[] {0, SIZE - 1}) {\n",
        "183": "  /** compareAndSet in one thread enables another waiting for value to succeed */\n",
        "185": "  public void testCompareAndSetInMultipleThreads() throws InterruptedException {\n",
        "188": "    Thread t =\n",
        "189": "        newStartedThread(\n",
        "190": "            new CheckedRunnable() {\n",
        "191": "              public void realRun() {\n",
        "192": "                while (!a.compareAndSet(0, 2.0, 3.0)) {\n",
        "193": "                  Thread.yield();\n",
        "194": "                }\n",
        "195": "              }\n",
        "196": "            });\n",
        "203": "  /** repeated weakCompareAndSet succeeds in changing value when equal to expected */\n",
        "206": "    for (int i : new int[] {0, SIZE - 1}) {\n",
        "213": "        while (!aa.weakCompareAndSet(i, prev, x)) {;\n",
        "221": "  /** getAndSet returns previous value and sets to given value at given index */\n",
        "224": "    for (int i : new int[] {0, SIZE - 1}) {\n",
        "233": "  /** getAndAdd returns previous value and adds given value */\n",
        "236": "    for (int i : new int[] {0, SIZE - 1}) {\n",
        "248": "  /** addAndGet adds given value to current, and returns current value */\n",
        "251": "    for (int i : new int[] {0, SIZE - 1}) {\n",
        "268": "\n",
        "269": "    Counter(AtomicDoubleArray a) {\n",
        "270": "      aa = a;\n",
        "271": "    }\n",
        "272": "\n",
        "274": "      for (; ; ) {\n",
        "294": "   * Multiple threads using same array of counters successfully update a number of times equal to\n",
        "295": "   * total count\n",
        "298": "  public void testCountingInMultipleThreads() throws InterruptedException {\n",
        "312": "  /** a deserialized serialized array holds same values */\n",
        "335": "  /** toString returns current value */\n",
        "343": "  /** compareAndSet treats +0.0 and -0.0 as distinct values */\n",
        "346": "    for (int i : new int[] {0, SIZE - 1}) {\n"
    },
    "removed": {
        "18": "/**\n",
        "19": " * Unit test for {@link AtomicDoubleArray}.\n",
        "20": " */\n",
        "50": "    assertEquals(Double.doubleToRawLongBits(x),\n",
        "51": "                 Double.doubleToRawLongBits(y));\n",
        "54": "  /**\n",
        "55": "   * constructor creates array of given size with all elements zero\n",
        "56": "   */\n",
        "64": "  /**\n",
        "65": "   * constructor with null array throws NPE\n",
        "66": "   */\n",
        "72": "    } catch (NullPointerException success) {}\n",
        "75": "  /**\n",
        "76": "   * constructor with array is of same size and has all elements\n",
        "77": "   */\n",
        "86": "  /**\n",
        "87": "   * constructor with empty array has size 0 and contains no elements\n",
        "88": "   */\n",
        "95": "    } catch (IndexOutOfBoundsException success) {}\n",
        "98": "  /**\n",
        "99": "   * constructor with length zero has size 0 and contains no elements\n",
        "100": "   */\n",
        "107": "    } catch (IndexOutOfBoundsException success) {}\n",
        "110": "  /**\n",
        "111": "   * get and set for out of bound indices throw IndexOutOfBoundsException\n",
        "112": "   */\n",
        "115": "    for (int index : new int[] { -1, SIZE }) {\n",
        "119": "      } catch (IndexOutOfBoundsException success) {}\n",
        "123": "      } catch (IndexOutOfBoundsException success) {}\n",
        "127": "      } catch (IndexOutOfBoundsException success) {}\n",
        "131": "      } catch (IndexOutOfBoundsException success) {}\n",
        "135": "      } catch (IndexOutOfBoundsException success) {}\n",
        "139": "      } catch (IndexOutOfBoundsException success) {}\n",
        "143": "      } catch (IndexOutOfBoundsException success) {}\n",
        "147": "  /**\n",
        "148": "   * get returns the last value set at index\n",
        "149": "   */\n",
        "161": "  /**\n",
        "162": "   * get returns the last value lazySet at index by same thread\n",
        "163": "   */\n",
        "175": "  /**\n",
        "176": "   * compareAndSet succeeds in changing value if equal to expected else fails\n",
        "177": "   */\n",
        "180": "    for (int i : new int[] { 0, SIZE - 1}) {\n",
        "194": "  /**\n",
        "195": "   * compareAndSet in one thread enables another waiting for value\n",
        "196": "   * to succeed\n",
        "197": "   */\n",
        "199": "      public void testCompareAndSetInMultipleThreads() throws InterruptedException {\n",
        "202": "    Thread t = newStartedThread(new CheckedRunnable() {\n",
        "203": "        public void realRun() {\n",
        "204": "          while (!a.compareAndSet(0, 2.0, 3.0)) {\n",
        "205": "            Thread.yield();\n",
        "206": "          }\n",
        "207": "        }});\n",
        "214": "  /**\n",
        "215": "   * repeated weakCompareAndSet succeeds in changing value when equal\n",
        "216": "   * to expected\n",
        "217": "   */\n",
        "220": "    for (int i : new int[] { 0, SIZE - 1}) {\n",
        "227": "        while (!aa.weakCompareAndSet(i, prev, x)) {\n",
        "228": "          ;\n",
        "236": "  /**\n",
        "237": "   * getAndSet returns previous value and sets to given value at given index\n",
        "238": "   */\n",
        "241": "    for (int i : new int[] { 0, SIZE - 1}) {\n",
        "250": "  /**\n",
        "251": "   * getAndAdd returns previous value and adds given value\n",
        "252": "   */\n",
        "255": "    for (int i : new int[] { 0, SIZE - 1}) {\n",
        "267": "  /**\n",
        "268": "   * addAndGet adds given value to current, and returns current value\n",
        "269": "   */\n",
        "272": "    for (int i : new int[] { 0, SIZE - 1}) {\n",
        "289": "    Counter(AtomicDoubleArray a) { aa = a; }\n",
        "291": "      for (;;) {\n",
        "311": "   * Multiple threads using same array of counters successfully\n",
        "312": "   * update a number of times equal to total count\n",
        "315": "      public void testCountingInMultipleThreads() throws InterruptedException {\n",
        "329": "  /**\n",
        "330": "   * a deserialized serialized array holds same values\n",
        "331": "   */\n",
        "354": "  /**\n",
        "355": "   * toString returns current value\n",
        "356": "   */\n",
        "364": "  /**\n",
        "365": "   * compareAndSet treats +0.0 and -0.0 as distinct values\n",
        "366": "   */\n",
        "369": "    for (int i : new int[] { 0, SIZE - 1}) {\n"
    }
}