{
    "addition": {
        "66": "   * Class for testing all permutations of static/non-static one-argument methods using\n",
        "67": "   * methodParameter().\n",
        "75": "\n",
        "77": "      throw new FooException(); // should catch as failure\n",
        "79": "\n",
        "83": "\n",
        "84": "    public static void staticOneArgCheckForNullCorrectlyDoesNotThrowNPE(@CheckForNull String s) {\n",
        "87": "\n",
        "88": "    public static void staticOneArgNullableCorrectlyDoesNotThrowNPE(@Nullable String s) {\n",
        "91": "\n",
        "92": "    public static void staticOneArgCheckForNullCorrectlyThrowsOtherThanNPE(@CheckForNull String s) {\n",
        "95": "\n",
        "96": "    public static void staticOneArgNullableCorrectlyThrowsOtherThanNPE(@Nullable String s) {\n",
        "99": "\n",
        "100": "    public static void staticOneArgCheckForNullThrowsNPE(@CheckForNull String s) {\n",
        "103": "\n",
        "104": "    public static void staticOneArgNullableThrowsNPE(@Nullable String s) {\n",
        "111": "\n",
        "113": "      throw new FooException(); // should catch as failure\n",
        "115": "\n",
        "155": "    \"staticOneArgThrowsOtherThanNpe\", \"staticOneArgShouldThrowNpeButDoesnt\",\n",
        "167": "    \"oneArgThrowsOtherThanNpe\", \"oneArgShouldThrowNpeButDoesnt\",\n",
        "335": "   * Class for testing all permutations of nullable/non-nullable two-argument methods using\n",
        "336": "   * testMethod().\n",
        "338": "   * <ul>\n",
        "339": "   *   <li>normalNormal: two params, neither is Nullable\n",
        "340": "   *   <li>nullableNormal: only first param is Nullable\n",
        "341": "   *   <li>normalNullable: only second param is Nullable\n",
        "342": "   *   <li>nullableNullable: both params are Nullable\n",
        "343": "   * </ul>\n",
        "349": "        @Override\n",
        "350": "        public void act() {\n",
        "355": "        @Override\n",
        "356": "        public void act() {\n",
        "361": "        @Override\n",
        "362": "        public void act() {}\n",
        "371": "    public TwoArg(Action actionWhenFirstParamIsNull, Action actionWhenSecondParamIsNull) {\n",
        "402": "    public void nullableNullable(@Nullable String first, @Nullable Integer second) {\n",
        "407": "    @Override\n",
        "408": "    public String toString() {\n",
        "409": "      return rootLocaleFormat(\n",
        "410": "          \"Bar(%s, %s)\", actionWhenFirstParamIsNull, actionWhenSecondParamIsNull);\n",
        "418": "      String errorMessage =\n",
        "419": "          rootLocaleFormat(\"Should not have flagged method %s for %s\", method.getName(), bar);\n",
        "430": "    String errorMessage =\n",
        "431": "        rootLocaleFormat(\"Should have flagged method %s for %s\", method.getName(), bar);\n",
        "436": "    Method method = TwoArg.class.getMethod(\"normalNormal\", String.class, Integer.class);\n",
        "440": "        if (first.equals(TwoArg.Action.THROW_A_NPE) && second.equals(TwoArg.Action.THROW_A_NPE)) {\n",
        "450": "    Method method = TwoArg.class.getMethod(\"normalNullable\", String.class, Integer.class);\n",
        "464": "    Method method = TwoArg.class.getMethod(\"nullableNormal\", String.class, Integer.class);\n",
        "478": "    Method method = TwoArg.class.getMethod(\"nullableNullable\", String.class, Integer.class);\n",
        "501": "\n",
        "503": "\n",
        "504": "    public void oneArg(String s) {\n",
        "505": "      checkNotNull(s);\n",
        "506": "    }\n",
        "507": "\n",
        "508": "    void packagePrivateOneArg(String s) {\n",
        "509": "      checkNotNull(s);\n",
        "510": "    }\n",
        "511": "\n",
        "512": "    protected void protectedOneArg(String s) {\n",
        "513": "      checkNotNull(s);\n",
        "514": "    }\n",
        "515": "\n",
        "518": "    public void oneNullableArgThrows(@Nullable String s) {\n",
        "519": "      doThrow(s);\n",
        "520": "    }\n",
        "521": "\n",
        "522": "    public void twoArg(String s, Integer i) {\n",
        "523": "      checkNotNull(s);\n",
        "524": "      i.intValue();\n",
        "525": "    }\n",
        "526": "\n",
        "527": "    public void twoMixedArgs(String s, @Nullable Integer i) {\n",
        "528": "      checkNotNull(s);\n",
        "529": "    }\n",
        "530": "\n",
        "532": "      checkNotNull(s);\n",
        "533": "      doThrow(i);\n",
        "535": "\n",
        "536": "    public void twoMixedArgs(@Nullable Integer i, String s) {\n",
        "537": "      checkNotNull(s);\n",
        "538": "    }\n",
        "539": "\n",
        "541": "      checkNotNull(s);\n",
        "542": "      doThrow(i);\n",
        "544": "\n",
        "545": "    public void twoNullableArgs(@Nullable String s, @javax.annotation.Nullable Integer i) {}\n",
        "546": "\n",
        "547": "    public void twoNullableArgsThrowsFirstArg(@Nullable String s, @Nullable Integer i) {\n",
        "550": "\n",
        "551": "    public void twoNullableArgsThrowsSecondArg(@Nullable String s, @Nullable Integer i) {\n",
        "554": "\n",
        "555": "    public static void staticOneArg(String s) {\n",
        "556": "      checkNotNull(s);\n",
        "557": "    }\n",
        "558": "\n",
        "560": "\n",
        "571": "    @Override\n",
        "572": "    public void oneArg(String s) {\n",
        "582": "    @Override\n",
        "583": "    public void oneArg(String s) {\n",
        "593": "    @Override\n",
        "594": "    public void oneNullableArg(@Nullable String s) {\n",
        "604": "    @Override\n",
        "605": "    public void twoArg(String s, Integer i) {\n",
        "616": "    @Override\n",
        "617": "    public void twoArg(String s, Integer i) {\n",
        "628": "    @Override\n",
        "629": "    public void twoArg(String s, Integer i) {\n",
        "640": "    @Override\n",
        "641": "    public void twoArg(String s, Integer i) {\n",
        "651": "  private static class FailTwoMixedArgsFirstArgDoesntThrowNPE extends PassObject {\n",
        "652": "    @Override\n",
        "653": "    public void twoMixedArgs(String s, @Nullable Integer i) {\n",
        "662": "  private static class FailTwoMixedArgsFirstArgThrowsWrongType extends PassObject {\n",
        "663": "    @Override\n",
        "664": "    public void twoMixedArgs(String s, @Nullable Integer i) {\n",
        "674": "    @Override\n",
        "675": "    public void twoMixedArgs(String s, @Nullable Integer i) {\n",
        "685": "  private static class PassTwoMixedArgSecondNullableArgThrowsOther extends PassObject {\n",
        "686": "    @Override\n",
        "687": "    public void twoMixedArgs(String s, @Nullable Integer i) {\n",
        "697": "  private static class FailTwoMixedArgsSecondArgDoesntThrowNPE extends PassObject {\n",
        "698": "    @Override\n",
        "699": "    public void twoMixedArgs(@Nullable Integer i, String s) {\n",
        "708": "  private static class FailTwoMixedArgsSecondArgThrowsWrongType extends PassObject {\n",
        "709": "    @Override\n",
        "710": "    public void twoMixedArgs(@Nullable Integer i, String s) {\n",
        "720": "    @Override\n",
        "721": "    public void twoNullableArgs(@Nullable String s, @Nullable Integer i) {\n",
        "731": "    @Override\n",
        "732": "    public void twoNullableArgs(@Nullable String s, @Nullable Integer i) {\n",
        "742": "    @Override\n",
        "743": "    public void twoNullableArgs(@Nullable String s, @Nullable Integer i) {\n",
        "753": "    @Override\n",
        "754": "    public void twoNullableArgs(@Nullable String s, @Nullable Integer i) {\n",
        "763": "  private static class PassTwoNullableArgsNeitherThrowsAnything extends PassObject {\n",
        "764": "    @Override\n",
        "765": "    public void twoNullableArgs(@Nullable String s, @Nullable Integer i) {\n",
        "779": "  private static class SubclassWithBadSuperclass extends BaseClassThatFailsToThrow {}\n",
        "794": "    shouldFail(new SubclassWithBadSuperclassForPackagePrivate(), Visibility.PACKAGE);\n",
        "806": "    shouldFail(new SubclassWithBadSuperclassForProtected(), Visibility.PROTECTED);\n",
        "809": "  private static class SubclassThatOverridesBadSuperclassMethod extends BaseClassThatFailsToThrow {\n",
        "810": "    @Override\n",
        "811": "    public void oneArg(@Nullable String s) {}\n",
        "819": "  private static class SubclassOverridesTheWrongMethod extends BaseClassThatFailsToThrow {\n",
        "836": "  private static class SubclassThatFailsToThrowForStatic extends ClassThatFailsToThrowForStatic {}\n",
        "925": "    for (Constructor<?> constructor :\n",
        "926": "        PrivateClassWithPrivateConstructor.class.getDeclaredConstructors()) {\n",
        "937": "    @Override\n",
        "938": "    public void doSomething(String bar, Integer baz) {\n",
        "953": "      new NullPointerTester().testInstanceMethods(this, Visibility.PACKAGE);\n",
        "960": "        assertEquals(\"Default value for parameter #\" + i, expectedValues[i], arguments.get(i));\n",
        "981": "    MALE,\n",
        "982": "    FEMALE\n",
        "990": "        Integer integer,\n",
        "991": "        int i,\n",
        "992": "        String string,\n",
        "993": "        CharSequence charSequence,\n",
        "1010": "          integer,\n",
        "1011": "          i,\n",
        "1012": "          string,\n",
        "1013": "          charSequence,\n",
        "1014": "          list,\n",
        "1015": "          immutableList,\n",
        "1016": "          map,\n",
        "1017": "          immutableMap,\n",
        "1018": "          set,\n",
        "1019": "          immutableSet,\n",
        "1020": "          sortedSet,\n",
        "1021": "          immutableSortedSet,\n",
        "1022": "          multiset,\n",
        "1023": "          immutableMultiset,\n",
        "1024": "          multimap,\n",
        "1025": "          immutableMultimap,\n",
        "1026": "          table,\n",
        "1027": "          immutableTable);\n",
        "1031": "      runTester()\n",
        "1032": "          .assertNonNullValues(\n",
        "1033": "              Gender.MALE,\n",
        "1034": "              Integer.valueOf(0),\n",
        "1035": "              0,\n",
        "1036": "              \"\",\n",
        "1037": "              \"\",\n",
        "1038": "              ImmutableList.of(),\n",
        "1039": "              ImmutableList.of(),\n",
        "1040": "              ImmutableMap.of(),\n",
        "1041": "              ImmutableMap.of(),\n",
        "1042": "              ImmutableSet.of(),\n",
        "1043": "              ImmutableSet.of(),\n",
        "1044": "              ImmutableSortedSet.of(),\n",
        "1045": "              ImmutableSortedSet.of(),\n",
        "1046": "              ImmutableMultiset.of(),\n",
        "1047": "              ImmutableMultiset.of(),\n",
        "1048": "              ImmutableMultimap.of(),\n",
        "1049": "              ImmutableMultimap.of(),\n",
        "1050": "              ImmutableTable.of(),\n",
        "1051": "              ImmutableTable.of());\n",
        "1059": "  private static class ObjectArrayDefaultValueChecker extends DefaultValueChecker {\n",
        "1077": "  private static class StringArrayDefaultValueChecker extends DefaultValueChecker {\n",
        "1095": "  private static class IntArrayDefaultValueChecker extends DefaultValueChecker {\n",
        "1115": "  private static class EmptyEnumDefaultValueChecker extends DefaultValueChecker {\n",
        "1136": "  private static class GenericClassTypeDefaultValueChecker extends DefaultValueChecker {\n",
        "1154": "  private static class NonGenericClassTypeDefaultValueChecker extends DefaultValueChecker {\n",
        "1172": "  private static class GenericTypeTokenDefaultValueChecker extends DefaultValueChecker {\n",
        "1175": "    public void checkArray(TypeToken<? extends List<? super Number>> type, String s) {\n",
        "1182": "      assertTrue(new TypeToken<List<? super Number>>() {}.isSupertypeOf(defaultType));\n",
        "1190": "  private static class NonGenericTypeTokenDefaultValueChecker extends DefaultValueChecker {\n",
        "1193": "    public void checkArray(@SuppressWarnings(\"rawtypes\") TypeToken type, String s) {\n",
        "1210": "  private static class GenericInterfaceDefaultValueChecker extends DefaultValueChecker {\n",
        "1229": "    @Override\n",
        "1230": "    public abstract T apply(F from);\n",
        "1233": "  private static class NullRejectingInterfaceDefaultValueChecker extends DefaultValueChecker {\n",
        "1242": "      NullRejectingFromTo<?, ?> defaultFunction =\n",
        "1243": "          (NullRejectingFromTo<?, ?>) getDefaultParameterValue(0);\n",
        "1248": "      } catch (NullPointerException expected) {\n",
        "1249": "      }\n",
        "1257": "  private static class MultipleInterfacesDefaultValueChecker extends DefaultValueChecker {\n",
        "1260": "    public <T extends FromTo<String, Integer> & Supplier<Long>> void checkArray(T f, String s) {\n",
        "1277": "  private static class GenericInterface2DefaultValueChecker extends DefaultValueChecker {\n",
        "1296": "  private abstract static class AbstractGenericDefaultValueChecker<T> extends DefaultValueChecker {\n",
        "1316": "  private abstract static class AbstractGenericDefaultValueForPackagePrivateMethodChecker<T>\n",
        "1325": "  private static class DefaultValueForPackagePrivateMethodResolvedToStringChecker\n",
        "1326": "      extends AbstractGenericDefaultValueForPackagePrivateMethodChecker<String> {\n",
        "1337": "  private static class ConverterDefaultValueChecker extends DefaultValueChecker {\n",
        "1347": "      Converter<String, Integer> defaultConverter =\n",
        "1348": "          (Converter<String, Integer>) getDefaultParameterValue(0);\n",
        "1376": "    assertFalse(\n",
        "1377": "        Visibility.PUBLIC.isVisible(VisibilityMethods.class.getDeclaredMethod(\"privateMethod\")));\n",
        "1378": "    assertFalse(\n",
        "1379": "        Visibility.PUBLIC.isVisible(\n",
        "1380": "            VisibilityMethods.class.getDeclaredMethod(\"packagePrivateMethod\")));\n",
        "1381": "    assertFalse(\n",
        "1382": "        Visibility.PUBLIC.isVisible(VisibilityMethods.class.getDeclaredMethod(\"protectedMethod\")));\n",
        "1383": "    assertTrue(\n",
        "1384": "        Visibility.PUBLIC.isVisible(VisibilityMethods.class.getDeclaredMethod(\"publicMethod\")));\n",
        "1388": "    assertFalse(\n",
        "1389": "        Visibility.PROTECTED.isVisible(VisibilityMethods.class.getDeclaredMethod(\"privateMethod\")));\n",
        "1390": "    assertFalse(\n",
        "1391": "        Visibility.PROTECTED.isVisible(\n",
        "1392": "            VisibilityMethods.class.getDeclaredMethod(\"packagePrivateMethod\")));\n",
        "1393": "    assertTrue(\n",
        "1394": "        Visibility.PROTECTED.isVisible(\n",
        "1395": "            VisibilityMethods.class.getDeclaredMethod(\"protectedMethod\")));\n",
        "1396": "    assertTrue(\n",
        "1397": "        Visibility.PROTECTED.isVisible(VisibilityMethods.class.getDeclaredMethod(\"publicMethod\")));\n",
        "1401": "    assertFalse(\n",
        "1402": "        Visibility.PACKAGE.isVisible(VisibilityMethods.class.getDeclaredMethod(\"privateMethod\")));\n",
        "1403": "    assertTrue(\n",
        "1404": "        Visibility.PACKAGE.isVisible(\n",
        "1405": "            VisibilityMethods.class.getDeclaredMethod(\"packagePrivateMethod\")));\n",
        "1406": "    assertTrue(\n",
        "1407": "        Visibility.PACKAGE.isVisible(VisibilityMethods.class.getDeclaredMethod(\"protectedMethod\")));\n",
        "1408": "    assertTrue(\n",
        "1409": "        Visibility.PACKAGE.isVisible(VisibilityMethods.class.getDeclaredMethod(\"publicMethod\")));\n"
    },
    "removed": {
        "66": "   * Class for testing all permutations of static/non-static one-argument\n",
        "67": "   * methods using methodParameter().\n",
        "76": "      throw new FooException();  // should catch as failure\n",
        "81": "    public static void\n",
        "82": "    staticOneArgCheckForNullCorrectlyDoesNotThrowNPE(@CheckForNull String s) {\n",
        "85": "    public static void\n",
        "86": "    staticOneArgNullableCorrectlyDoesNotThrowNPE(@Nullable String s) {\n",
        "89": "    public static void\n",
        "90": "    staticOneArgCheckForNullCorrectlyThrowsOtherThanNPE(@CheckForNull String s) {\n",
        "93": "    public static void\n",
        "94": "    staticOneArgNullableCorrectlyThrowsOtherThanNPE(@Nullable String s) {\n",
        "97": "    public static void\n",
        "98": "    staticOneArgCheckForNullThrowsNPE(@CheckForNull String s) {\n",
        "101": "    public static void\n",
        "102": "    staticOneArgNullableThrowsNPE(@Nullable String s) {\n",
        "110": "      throw new FooException();  // should catch as failure\n",
        "145": "    \"staticOneArgThrowsOtherThanNpe\",\n",
        "146": "    \"staticOneArgShouldThrowNpeButDoesnt\",\n",
        "158": "    \"oneArgThrowsOtherThanNpe\",\n",
        "159": "    \"oneArgShouldThrowNpeButDoesnt\",\n",
        "327": "   * Class for testing all permutations of nullable/non-nullable two-argument\n",
        "328": "   * methods using testMethod().\n",
        "330": "   *   normalNormal:  two params, neither is Nullable\n",
        "331": "   *   nullableNormal:  only first param is Nullable\n",
        "332": "   *   normalNullable:  only second param is Nullable\n",
        "333": "   *   nullableNullable:  both params are Nullable\n",
        "339": "        @Override public void act() {\n",
        "344": "        @Override public void act() {\n",
        "349": "        @Override public void act() {}\n",
        "357": "    public TwoArg(\n",
        "358": "        Action actionWhenFirstParamIsNull,\n",
        "359": "        Action actionWhenSecondParamIsNull) {\n",
        "390": "    public void nullableNullable(\n",
        "391": "        @Nullable String first, @Nullable Integer second) {\n",
        "396": "    @Override public String toString() {\n",
        "397": "      return rootLocaleFormat(\"Bar(%s, %s)\",\n",
        "398": "          actionWhenFirstParamIsNull, actionWhenSecondParamIsNull);\n",
        "406": "      String errorMessage = rootLocaleFormat(\n",
        "407": "          \"Should not have flagged method %s for %s\", method.getName(), bar);\n",
        "418": "    String errorMessage = rootLocaleFormat(\n",
        "419": "        \"Should have flagged method %s for %s\", method.getName(), bar);\n",
        "424": "    Method method = TwoArg.class.getMethod(\n",
        "425": "        \"normalNormal\", String.class, Integer.class);\n",
        "429": "        if (first.equals(TwoArg.Action.THROW_A_NPE)\n",
        "430": "            && second.equals(TwoArg.Action.THROW_A_NPE)) {\n",
        "440": "    Method method = TwoArg.class.getMethod(\n",
        "441": "        \"normalNullable\", String.class, Integer.class);\n",
        "455": "    Method method = TwoArg.class.getMethod(\n",
        "456": "        \"nullableNormal\", String.class, Integer.class);\n",
        "470": "    Method method = TwoArg.class.getMethod(\n",
        "471": "        \"nullableNullable\", String.class, Integer.class);\n",
        "495": "    public void oneArg(String s) { checkNotNull(s); }\n",
        "496": "    void packagePrivateOneArg(String s) { checkNotNull(s); }\n",
        "497": "    protected void protectedOneArg(String s) { checkNotNull(s); }\n",
        "499": "    public void oneNullableArgThrows(@Nullable String s) { doThrow(s); }\n",
        "501": "    public void twoArg(String s, Integer i) { checkNotNull(s); i.intValue(); }\n",
        "502": "    public void twoMixedArgs(String s, @Nullable Integer i) { checkNotNull(s); }\n",
        "504": "      checkNotNull(s); doThrow(i);\n",
        "506": "    public void twoMixedArgs(@Nullable Integer i, String s) { checkNotNull(s); }\n",
        "508": "      checkNotNull(s); doThrow(i);\n",
        "510": "    public void twoNullableArgs(@Nullable String s,\n",
        "511": "        @javax.annotation.Nullable Integer i) {}\n",
        "512": "    public void twoNullableArgsThrowsFirstArg(\n",
        "513": "        @Nullable String s, @Nullable Integer i) {\n",
        "516": "    public void twoNullableArgsThrowsSecondArg(\n",
        "517": "        @Nullable String s, @Nullable Integer i) {\n",
        "520": "    public static void staticOneArg(String s) { checkNotNull(s); }\n",
        "532": "    @Override public void oneArg(String s) {\n",
        "542": "    @Override public void oneArg(String s) {\n",
        "552": "    @Override public void oneNullableArg(@Nullable String s) {\n",
        "562": "    @Override public void twoArg(String s, Integer i) {\n",
        "573": "    @Override public void twoArg(String s, Integer i) {\n",
        "584": "    @Override public void twoArg(String s, Integer i) {\n",
        "595": "    @Override public void twoArg(String s, Integer i) {\n",
        "605": "  private static class FailTwoMixedArgsFirstArgDoesntThrowNPE\n",
        "606": "      extends PassObject {\n",
        "607": "    @Override public void twoMixedArgs(String s, @Nullable Integer i) {\n",
        "616": "  private static class FailTwoMixedArgsFirstArgThrowsWrongType\n",
        "617": "      extends PassObject {\n",
        "618": "    @Override public void twoMixedArgs(String s, @Nullable Integer i) {\n",
        "628": "    @Override public void twoMixedArgs(String s, @Nullable Integer i) {\n",
        "638": "  private static class PassTwoMixedArgSecondNullableArgThrowsOther\n",
        "639": "      extends PassObject {\n",
        "640": "    @Override public void twoMixedArgs(String s, @Nullable Integer i) {\n",
        "650": "  private static class FailTwoMixedArgsSecondArgDoesntThrowNPE\n",
        "651": "      extends PassObject {\n",
        "652": "    @Override public void twoMixedArgs(@Nullable Integer i, String s) {\n",
        "661": "  private static class FailTwoMixedArgsSecondArgThrowsWrongType\n",
        "662": "      extends PassObject {\n",
        "663": "    @Override public void twoMixedArgs(@Nullable Integer i, String s) {\n",
        "673": "    @Override public void twoNullableArgs(\n",
        "674": "        @Nullable String s, @Nullable Integer i) {\n",
        "684": "    @Override public void twoNullableArgs(\n",
        "685": "        @Nullable String s, @Nullable Integer i) {\n",
        "695": "    @Override public void twoNullableArgs(\n",
        "696": "        @Nullable String s, @Nullable Integer i) {\n",
        "706": "    @Override public void twoNullableArgs(\n",
        "707": "        @Nullable String s, @Nullable Integer i) {\n",
        "716": "  private static class PassTwoNullableArgsNeitherThrowsAnything\n",
        "717": "      extends PassObject {\n",
        "718": "    @Override public void twoNullableArgs(\n",
        "719": "        @Nullable String s, @Nullable Integer i) {\n",
        "733": "  private static class SubclassWithBadSuperclass\n",
        "734": "      extends BaseClassThatFailsToThrow {}\n",
        "749": "    shouldFail(\n",
        "750": "        new SubclassWithBadSuperclassForPackagePrivate(), Visibility.PACKAGE);\n",
        "762": "    shouldFail(\n",
        "763": "        new SubclassWithBadSuperclassForProtected(), Visibility.PROTECTED);\n",
        "766": "  private static class SubclassThatOverridesBadSuperclassMethod\n",
        "767": "      extends BaseClassThatFailsToThrow {\n",
        "768": "    @Override public void oneArg(@Nullable String s) {}\n",
        "776": "  private static class SubclassOverridesTheWrongMethod\n",
        "777": "      extends BaseClassThatFailsToThrow {\n",
        "794": "  private static class SubclassThatFailsToThrowForStatic\n",
        "795": "      extends ClassThatFailsToThrowForStatic {}\n",
        "884": "    for (Constructor<?> constructor\n",
        "885": "        : PrivateClassWithPrivateConstructor.class.getDeclaredConstructors()) {\n",
        "896": "    @Override public void doSomething(String bar, Integer baz) {\n",
        "911": "      new NullPointerTester()\n",
        "912": "          .testInstanceMethods(this, Visibility.PACKAGE);\n",
        "919": "        assertEquals(\"Default value for parameter #\" + i,\n",
        "920": "            expectedValues[i], arguments.get(i));\n",
        "941": "    MALE, FEMALE\n",
        "949": "        Integer integer, int i,\n",
        "950": "        String string, CharSequence charSequence,\n",
        "967": "          integer, i,\n",
        "968": "          string, charSequence,\n",
        "969": "          list, immutableList,\n",
        "970": "          map, immutableMap,\n",
        "971": "          set, immutableSet,\n",
        "972": "          sortedSet, immutableSortedSet,\n",
        "973": "          multiset, immutableMultiset,\n",
        "974": "          multimap, immutableMultimap,\n",
        "975": "          table, immutableTable);\n",
        "979": "      runTester().assertNonNullValues(\n",
        "980": "          Gender.MALE,\n",
        "981": "          Integer.valueOf(0), 0,\n",
        "982": "          \"\", \"\",\n",
        "983": "          ImmutableList.of(), ImmutableList.of(),\n",
        "984": "          ImmutableMap.of(), ImmutableMap.of(),\n",
        "985": "          ImmutableSet.of(), ImmutableSet.of(),\n",
        "986": "          ImmutableSortedSet.of(), ImmutableSortedSet.of(),\n",
        "987": "          ImmutableMultiset.of(), ImmutableMultiset.of(),\n",
        "988": "          ImmutableMultimap.of(), ImmutableMultimap.of(),\n",
        "989": "          ImmutableTable.of(), ImmutableTable.of());\n",
        "997": "  private static class ObjectArrayDefaultValueChecker\n",
        "998": "      extends DefaultValueChecker {\n",
        "1016": "  private static class StringArrayDefaultValueChecker\n",
        "1017": "      extends DefaultValueChecker {\n",
        "1035": "  private static class IntArrayDefaultValueChecker\n",
        "1036": "      extends DefaultValueChecker {\n",
        "1056": "  private static class EmptyEnumDefaultValueChecker\n",
        "1057": "      extends DefaultValueChecker {\n",
        "1078": "  private static class GenericClassTypeDefaultValueChecker\n",
        "1079": "      extends DefaultValueChecker {\n",
        "1097": "  private static class NonGenericClassTypeDefaultValueChecker\n",
        "1098": "      extends DefaultValueChecker {\n",
        "1116": "  private static class GenericTypeTokenDefaultValueChecker\n",
        "1117": "      extends DefaultValueChecker {\n",
        "1120": "    public void checkArray(\n",
        "1121": "        TypeToken<? extends List<? super Number>> type, String s) {\n",
        "1128": "      assertTrue(new TypeToken<List<? super Number>>() {}\n",
        "1129": "          .isSupertypeOf(defaultType));\n",
        "1137": "  private static class NonGenericTypeTokenDefaultValueChecker\n",
        "1138": "      extends DefaultValueChecker {\n",
        "1141": "    public void checkArray(\n",
        "1142": "        @SuppressWarnings(\"rawtypes\") TypeToken type, String s) {\n",
        "1159": "  private static class GenericInterfaceDefaultValueChecker\n",
        "1160": "      extends DefaultValueChecker {\n",
        "1179": "    @Override public abstract T apply(F from);\n",
        "1182": "  private static class NullRejectingInterfaceDefaultValueChecker\n",
        "1183": "      extends DefaultValueChecker {\n",
        "1192": "      NullRejectingFromTo<?, ?> defaultFunction = (NullRejectingFromTo<?, ?>)\n",
        "1193": "          getDefaultParameterValue(0);\n",
        "1198": "      } catch (NullPointerException expected) {}\n",
        "1206": "  private static class MultipleInterfacesDefaultValueChecker\n",
        "1207": "      extends DefaultValueChecker {\n",
        "1210": "    public <T extends FromTo<String, Integer> & Supplier<Long>> void checkArray(\n",
        "1211": "        T f, String s) {\n",
        "1228": "  private static class GenericInterface2DefaultValueChecker\n",
        "1229": "      extends DefaultValueChecker {\n",
        "1248": "  private abstract static class AbstractGenericDefaultValueChecker<T>\n",
        "1249": "      extends DefaultValueChecker {\n",
        "1269": "  private abstract static\n",
        "1270": "  class AbstractGenericDefaultValueForPackagePrivateMethodChecker<T>\n",
        "1279": "  private static\n",
        "1280": "  class DefaultValueForPackagePrivateMethodResolvedToStringChecker\n",
        "1281": "      extends AbstractGenericDefaultValueForPackagePrivateMethodChecker<String>\n",
        "1282": "  {\n",
        "1293": "  private static class ConverterDefaultValueChecker\n",
        "1294": "      extends DefaultValueChecker {\n",
        "1304": "      Converter<String, Integer> defaultConverter = (Converter<String, Integer>)\n",
        "1305": "          getDefaultParameterValue(0);\n",
        "1333": "    assertFalse(Visibility.PUBLIC.isVisible(\n",
        "1334": "        VisibilityMethods.class.getDeclaredMethod(\"privateMethod\")));\n",
        "1335": "    assertFalse(Visibility.PUBLIC.isVisible(\n",
        "1336": "        VisibilityMethods.class.getDeclaredMethod(\"packagePrivateMethod\")));\n",
        "1337": "    assertFalse(Visibility.PUBLIC.isVisible(\n",
        "1338": "        VisibilityMethods.class.getDeclaredMethod(\"protectedMethod\")));\n",
        "1339": "    assertTrue(Visibility.PUBLIC.isVisible(\n",
        "1340": "        VisibilityMethods.class.getDeclaredMethod(\"publicMethod\")));\n",
        "1344": "    assertFalse(Visibility.PROTECTED.isVisible(\n",
        "1345": "        VisibilityMethods.class.getDeclaredMethod(\"privateMethod\")));\n",
        "1346": "    assertFalse(Visibility.PROTECTED.isVisible(\n",
        "1347": "        VisibilityMethods.class.getDeclaredMethod(\"packagePrivateMethod\")));\n",
        "1348": "    assertTrue(Visibility.PROTECTED.isVisible(\n",
        "1349": "        VisibilityMethods.class.getDeclaredMethod(\"protectedMethod\")));\n",
        "1350": "    assertTrue(Visibility.PROTECTED.isVisible(\n",
        "1351": "        VisibilityMethods.class.getDeclaredMethod(\"publicMethod\")));\n",
        "1355": "    assertFalse(Visibility.PACKAGE.isVisible(\n",
        "1356": "        VisibilityMethods.class.getDeclaredMethod(\"privateMethod\")));\n",
        "1357": "    assertTrue(Visibility.PACKAGE.isVisible(\n",
        "1358": "        VisibilityMethods.class.getDeclaredMethod(\"packagePrivateMethod\")));\n",
        "1359": "    assertTrue(Visibility.PACKAGE.isVisible(\n",
        "1360": "        VisibilityMethods.class.getDeclaredMethod(\"protectedMethod\")));\n",
        "1361": "    assertTrue(Visibility.PACKAGE.isVisible(\n",
        "1362": "        VisibilityMethods.class.getDeclaredMethod(\"publicMethod\")));\n"
    }
}