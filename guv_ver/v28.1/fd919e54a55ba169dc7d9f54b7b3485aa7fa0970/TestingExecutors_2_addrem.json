{
    "addition": {
        "49": "   * the fact that everything is still technically awaiting execution. The {@code getDelay} method\n",
        "50": "   * of any {@link ScheduledFuture} returned by the executor will always return the max long value\n",
        "51": "   * instead of the time until the user-specified delay.\n",
        "58": "   * Creates a scheduled executor service that runs each task in the thread that invokes {@code\n",
        "59": "   * execute/submit/schedule}, as in {@link CallerRunsPolicy}. This applies both to individually\n",
        "60": "   * submitted tasks and to collections of tasks submitted via {@code invokeAll}, {@code invokeAny},\n",
        "61": "   * {@code schedule}, {@code scheduleAtFixedRate}, and {@code scheduleWithFixedDelay}. In the case\n",
        "62": "   * of tasks submitted by {@code invokeAll} or {@code invokeAny}, tasks will run serially on the\n",
        "63": "   * calling thread. Tasks are run to completion before a {@code Future} is returned to the caller\n",
        "64": "   * (unless the executor has been shutdown).\n",
        "66": "   * <p>The returned executor is backed by the executor returned by {@link\n",
        "67": "   * MoreExecutors#newDirectExecutorService} and subject to the same constraints.\n",
        "69": "   * <p>Although all tasks are immediately executed in the thread that submitted the task, this\n",
        "70": "   * {@code ExecutorService} imposes a small locking overhead on each task submission in order to\n",
        "71": "   * implement shutdown and termination behavior.\n",
        "73": "   * <p>Because of the nature of single-thread execution, the methods {@code scheduleAtFixedRate}\n",
        "74": "   * and {@code scheduleWithFixedDelay} are not supported by this class and will throw an\n",
        "75": "   * UnsupportedOperationException.\n",
        "77": "   * <p>The implementation deviates from the {@code ExecutorService} specification with regards to\n",
        "78": "   * the {@code shutdownNow} method. First, \"best-effort\" with regards to canceling running tasks is\n",
        "79": "   * implemented as \"no-effort\". No interrupts or other attempts are made to stop threads executing\n",
        "80": "   * tasks. Second, the returned list will always be empty, as any submitted task is considered to\n",
        "81": "   * have started execution. This applies also to tasks given to {@code invokeAll} or {@code\n",
        "82": "   * invokeAny} which are pending serial execution, even the subset of the tasks that have not yet\n",
        "83": "   * started execution. It is unclear from the {@code ExecutorService} specification if these should\n",
        "84": "   * be included, and it's much easier to implement the interpretation that they not be. Finally, a\n",
        "85": "   * call to {@code shutdown} or {@code shutdownNow} may result in concurrent calls to {@code\n",
        "86": "   * invokeAll/invokeAny} throwing RejectedExecutionException, although a subset of the tasks may\n",
        "87": "   * already have been executed.\n",
        "95": "  private static final class NoOpScheduledExecutorService extends AbstractListeningExecutorService\n",
        "96": "      implements ListeningScheduledExecutorService {\n",
        "100": "    @Override\n",
        "101": "    public void shutdown() {\n",
        "105": "    @Override\n",
        "106": "    public List<Runnable> shutdownNow() {\n",
        "111": "    @Override\n",
        "112": "    public boolean isShutdown() {\n",
        "116": "    @Override\n",
        "117": "    public boolean isTerminated() {\n",
        "121": "    @Override\n",
        "122": "    public boolean awaitTermination(long timeout, TimeUnit unit) {\n",
        "126": "    @Override\n",
        "127": "    public void execute(Runnable runnable) {}\n",
        "129": "    @Override\n",
        "130": "    public <V> ListenableScheduledFuture<V> schedule(\n",
        "135": "    @Override\n",
        "136": "    public ListenableScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit) {\n",
        "140": "    @Override\n",
        "141": "    public ListenableScheduledFuture<?> scheduleAtFixedRate(\n",
        "146": "    @Override\n",
        "147": "    public ListenableScheduledFuture<?> scheduleWithFixedDelay(\n",
        "152": "    private static class NeverScheduledFuture<V> extends AbstractFuture<V>\n",
        "153": "        implements ListenableScheduledFuture<V> {\n",
        "159": "      @Override\n",
        "160": "      public long getDelay(TimeUnit unit) {\n",
        "164": "      @Override\n",
        "165": "      public int compareTo(Delayed other) {\n"
    },
    "removed": {
        "49": "   * the fact that everything is still technically awaiting execution.\n",
        "50": "   * The {@code getDelay} method of any {@link ScheduledFuture} returned by the executor will always\n",
        "51": "   * return the max long value instead of the time until the user-specified delay.\n",
        "58": "   * Creates a scheduled executor service that runs each task in the thread\n",
        "59": "   * that invokes {@code execute/submit/schedule}, as in\n",
        "60": "   * {@link CallerRunsPolicy}. This applies both to individually submitted\n",
        "61": "   * tasks and to collections of tasks submitted via {@code invokeAll},\n",
        "62": "   * {@code invokeAny}, {@code schedule}, {@code scheduleAtFixedRate}, and\n",
        "63": "   * {@code scheduleWithFixedDelay}.  In the case of tasks submitted by\n",
        "64": "   * {@code invokeAll} or {@code invokeAny}, tasks will run serially on the\n",
        "65": "   * calling thread.  Tasks are run to completion before a {@code Future} is\n",
        "66": "   * returned to the caller (unless the executor has been shutdown).\n",
        "68": "   * <p>The returned executor is backed by the executor returned by\n",
        "69": "   * {@link MoreExecutors#newDirectExecutorService} and subject to the same\n",
        "70": "   * constraints.\n",
        "72": "   * <p>Although all tasks are immediately executed in the thread that\n",
        "73": "   * submitted the task, this {@code ExecutorService} imposes a small\n",
        "74": "   * locking overhead on each task submission in order to implement shutdown\n",
        "75": "   * and termination behavior.\n",
        "77": "   * <p>Because of the nature of single-thread execution, the methods\n",
        "78": "   * {@code scheduleAtFixedRate} and {@code scheduleWithFixedDelay} are not\n",
        "79": "   * supported by this class and will throw an UnsupportedOperationException.\n",
        "81": "   * <p>The implementation deviates from the {@code ExecutorService}\n",
        "82": "   * specification with regards to the {@code shutdownNow} method.  First,\n",
        "83": "   * \"best-effort\" with regards to canceling running tasks is implemented\n",
        "84": "   * as \"no-effort\".  No interrupts or other attempts are made to stop\n",
        "85": "   * threads executing tasks.  Second, the returned list will always be empty,\n",
        "86": "   * as any submitted task is considered to have started execution.\n",
        "87": "   * This applies also to tasks given to {@code invokeAll} or {@code invokeAny}\n",
        "88": "   * which are pending serial execution, even the subset of the tasks that\n",
        "89": "   * have not yet started execution.  It is unclear from the\n",
        "90": "   * {@code ExecutorService} specification if these should be included, and\n",
        "91": "   * it's much easier to implement the interpretation that they not be.\n",
        "92": "   * Finally, a call to {@code shutdown} or {@code shutdownNow} may result\n",
        "93": "   * in concurrent calls to {@code invokeAll/invokeAny} throwing\n",
        "94": "   * RejectedExecutionException, although a subset of the tasks may already\n",
        "95": "   * have been executed.\n",
        "103": "  private static final class NoOpScheduledExecutorService\n",
        "104": "      extends AbstractListeningExecutorService implements ListeningScheduledExecutorService {\n",
        "108": "    @Override public void shutdown() {\n",
        "112": "    @Override public List<Runnable> shutdownNow() {\n",
        "117": "    @Override public boolean isShutdown() {\n",
        "121": "    @Override public boolean isTerminated() {\n",
        "125": "    @Override public boolean awaitTermination(long timeout, TimeUnit unit) {\n",
        "129": "    @Override public void execute(Runnable runnable) {}\n",
        "131": "    @Override public <V> ListenableScheduledFuture<V> schedule(\n",
        "136": "    @Override public ListenableScheduledFuture<?> schedule(\n",
        "137": "        Runnable command, long delay, TimeUnit unit) {\n",
        "141": "    @Override public ListenableScheduledFuture<?> scheduleAtFixedRate(\n",
        "146": "    @Override public ListenableScheduledFuture<?> scheduleWithFixedDelay(\n",
        "151": "    private static class NeverScheduledFuture<V>\n",
        "152": "        extends AbstractFuture<V> implements ListenableScheduledFuture<V> {\n",
        "158": "      @Override public long getDelay(TimeUnit unit) {\n",
        "162": "      @Override public int compareTo(Delayed other) {\n"
    }
}