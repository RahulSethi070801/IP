{
    "addition": {
        "43": "  private static final byte[] VALUES = {LEAST, -1, 0, 1, GREATEST};\n",
        "70": "      assertTrue(\n",
        "71": "          value + \" not found in exception text: \" + ex.getMessage(),\n",
        "85": "          assertTrue(\n",
        "86": "              x + \", \" + y + \" (expected: \" + expected + \", actual\" + actual + \")\", actual < 0);\n",
        "88": "          assertTrue(\n",
        "89": "              x + \", \" + y + \" (expected: \" + expected + \", actual\" + actual + \")\", actual > 0);\n",
        "106": "    assertEquals(\n",
        "107": "        (byte) 127, SignedBytes.max((byte) 0, (byte) -128, (byte) -1, (byte) 127, (byte) 1));\n",
        "121": "    assertEquals(\n",
        "122": "        (byte) -128, SignedBytes.min((byte) 0, (byte) -128, (byte) -1, (byte) 127, (byte) 1));\n",
        "134": "    List<byte[]> ordered =\n",
        "135": "        Arrays.asList(\n",
        "136": "            new byte[] {},\n",
        "137": "            new byte[] {LEAST},\n",
        "138": "            new byte[] {LEAST, LEAST},\n",
        "139": "            new byte[] {LEAST, (byte) 1},\n",
        "140": "            new byte[] {(byte) 1},\n",
        "141": "            new byte[] {(byte) 1, LEAST},\n",
        "142": "            new byte[] {GREATEST, GREATEST - (byte) 1},\n",
        "143": "            new byte[] {GREATEST, GREATEST},\n",
        "144": "            new byte[] {GREATEST, GREATEST, GREATEST});\n"
    },
    "removed": {
        "43": "  private static final byte[] VALUES =\n",
        "44": "      {LEAST, -1, 0, 1, GREATEST};\n",
        "71": "      assertTrue(value + \" not found in exception text: \" + ex.getMessage(),\n",
        "85": "          assertTrue(x + \", \" + y + \" (expected: \" + expected + \", actual\" + actual + \")\",\n",
        "86": "              actual < 0);\n",
        "88": "          assertTrue(x + \", \" + y + \" (expected: \" + expected + \", actual\" + actual + \")\",\n",
        "89": "              actual > 0);\n",
        "106": "    assertEquals((byte) 127, SignedBytes.max(\n",
        "107": "        (byte) 0, (byte) -128, (byte) -1, (byte) 127, (byte) 1));\n",
        "121": "    assertEquals((byte) -128, SignedBytes.min(\n",
        "122": "        (byte) 0, (byte) -128, (byte) -1, (byte) 127, (byte) 1));\n",
        "134": "    List<byte[]> ordered = Arrays.asList(\n",
        "135": "        new byte[] {},\n",
        "136": "        new byte[] {LEAST},\n",
        "137": "        new byte[] {LEAST, LEAST},\n",
        "138": "        new byte[] {LEAST, (byte) 1},\n",
        "139": "        new byte[] {(byte) 1},\n",
        "140": "        new byte[] {(byte) 1, LEAST},\n",
        "141": "        new byte[] {GREATEST, GREATEST - (byte) 1},\n",
        "142": "        new byte[] {GREATEST, GREATEST},\n",
        "143": "        new byte[] {GREATEST, GREATEST, GREATEST});\n"
    }
}