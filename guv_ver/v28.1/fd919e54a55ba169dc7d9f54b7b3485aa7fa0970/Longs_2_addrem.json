{
    "addition": {
        "42": " * <p>See the Guava User Guide article on <a\n",
        "43": " * href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n",
        "67": "   * Returns a hash code for {@code value}; equal to the result of invoking {@code ((Long)\n",
        "68": "   * value).hashCode()}.\n",
        "71": "   * might be different from {@code ((Long) value).hashCode()} in GWT because {@link\n",
        "72": "   * Long#hashCode()} in GWT does not obey the JRE contract.\n",
        "104": "   * @return {@code true} if {@code array[i] == target} for some value of {@code i}\n",
        "138": "   * Returns the start position of the first occurrence of the specified {@code target} within\n",
        "139": "   * {@code array}, or {@code -1} if there is no such occurrence.\n",
        "141": "   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,\n",
        "142": "   * i, i + target.length)} contains exactly the same elements as {@code target}.\n",
        "230": "   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code\n",
        "231": "   * value} is greater than {@code max}, {@code max} is returned.\n",
        "246": "   * Returns the values from each provided array combined into a single array. For example, {@code\n",
        "247": "   * concat(new long[] {a, b}, new long[] {}, new long[] {c}} returns the array {@code {a, b, c}}.\n",
        "268": "   * {@code ByteBuffer.allocate(8).putLong(value).array()}. For example, the input value {@code\n",
        "269": "   * 0x1213141516171819L} would yield the byte array {@code {0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n",
        "270": "   * 0x18, 0x19}}.\n",
        "273": "   * use a shared {@link java.nio.ByteBuffer} instance, or use {@link\n",
        "274": "   * com.google.common.io.ByteStreams#newDataOutput()} to get a growable buffer.\n",
        "350": "   * Parses the specified string as a signed decimal long value. The ASCII character {@code '-'} (\n",
        "351": "   * <code>'&#92;u002D'</code>) is recognized as the minus sign.\n",
        "387": "   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >\n",
        "388": "   *     Character.MAX_RADIX}\n",
        "462": "   * Returns a serializable converter object that converts between strings and longs using {@link\n",
        "463": "   * Long#decode} and {@link Long#toString()}. The returned converter throws {@link\n",
        "464": "   * NumberFormatException} if the input string is invalid.\n",
        "487": "   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code\n",
        "488": "   *     minLength}\n",
        "527": "   * support only identity equality), but it is consistent with {@link Arrays#equals(long[],\n",
        "528": "   * long[])}.\n",
        "615": "   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.\n",
        "616": "   * Calling this method is as thread-safe as calling that method.\n"
    },
    "removed": {
        "42": " * <p>See the Guava User Guide article on\n",
        "43": " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n",
        "67": "   * Returns a hash code for {@code value}; equal to the result of invoking\n",
        "68": "   * {@code ((Long) value).hashCode()}.\n",
        "71": "   * might be different from {@code ((Long) value).hashCode()} in GWT because\n",
        "72": "   * {@link Long#hashCode()} in GWT does not obey the JRE contract.\n",
        "104": "   * @return {@code true} if {@code array[i] == target} for some value of {@code\n",
        "105": "   *     i}\n",
        "139": "   * Returns the start position of the first occurrence of the specified {@code\n",
        "140": "   * target} within {@code array}, or {@code -1} if there is no such occurrence.\n",
        "142": "   * <p>More formally, returns the lowest index {@code i} such that\n",
        "143": "   * {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as\n",
        "144": "   * {@code target}.\n",
        "232": "   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if\n",
        "233": "   * {@code value} is greater than {@code max}, {@code max} is returned.\n",
        "248": "   * Returns the values from each provided array combined into a single array. For example,\n",
        "249": "   * {@code concat(new long[] {a, b}, new long[] {}, new long[] {c}} returns the array\n",
        "250": "   * {@code {a, b, c}}.\n",
        "271": "   * {@code ByteBuffer.allocate(8).putLong(value).array()}. For example, the input value\n",
        "272": "   * {@code 0x1213141516171819L} would yield the byte array {@code {0x12, 0x13, 0x14, 0x15, 0x16,\n",
        "273": "   * 0x17, 0x18, 0x19}}.\n",
        "276": "   * use a shared {@link java.nio.ByteBuffer} instance, or use\n",
        "277": "   * {@link com.google.common.io.ByteStreams#newDataOutput()} to get a growable buffer.\n",
        "353": "   * Parses the specified string as a signed decimal long value. The ASCII character {@code '-'}\n",
        "354": "   * (<code>'&#92;u002D'</code>) is recognized as the minus sign.\n",
        "390": "   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or\n",
        "391": "   *     {@code radix > Character.MAX_RADIX}\n",
        "465": "   * Returns a serializable converter object that converts between strings and longs using\n",
        "466": "   * {@link Long#decode} and {@link Long#toString()}. The returned converter throws\n",
        "467": "   * {@link NumberFormatException} if the input string is invalid.\n",
        "490": "   * @return an array containing the values of {@code array}, with guaranteed minimum length\n",
        "491": "   *     {@code minLength}\n",
        "530": "   * support only identity equality), but it is consistent with\n",
        "531": "   * {@link Arrays#equals(long[], long[])}.\n",
        "618": "   * <p>Elements are copied from the argument collection as if by {@code\n",
        "619": "   * collection.toArray()}. Calling this method is as thread-safe as calling that method.\n"
    }
}