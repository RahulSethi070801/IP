{
    "addition": {
        "32": "  @Override\n",
        "33": "  protected Table<String, Integer, Character> create(Object... data) {\n",
        "34": "    ImmutableTable.Builder<String, Integer, Character> builder = ImmutableTable.builder();\n",
        "36": "      builder.put((String) data[i], (Integer) data[i + 1], (Character) data[i + 2]);\n",
        "44": "    assertEquals(ImmutableTable.of('a', 1, \"foo\"), builder.put('a', 1, \"foo\").build());\n",
        "52": "    assertEquals(expectedTable, builder.putAll(otherTable).build());\n",
        "57": "    assertEquals(\n",
        "58": "        ImmutableTable.of('a', 1, \"foo\"), builder.put(Tables.immutableCell('a', 1, \"foo\")).build());\n",
        "94": "          @Override\n",
        "95": "          public Character getRowKey() {\n",
        "98": "\n",
        "99": "          @Override\n",
        "100": "          public Integer getColumnKey() {\n",
        "103": "\n",
        "104": "          @Override\n",
        "105": "          public String getValue() {\n",
        "160": "    Table<R, C, V> built = ImmutableTable.<R, C, V>builder().putAll(original).build();\n",
        "165": "  private static <R, C, V> void validateViewOrdering(Table<R, C, V> original, Table<R, C, V> copy) {\n",
        "182": "    assertThat(ImmutableTable.copyOf(table).row('b').keySet()).containsExactly(2, 1).inOrder();\n",
        "217": "    ImmutableTable.Builder<Character, Integer, String> builder = ImmutableTable.builder();\n",
        "218": "    Table<Character, Integer, String> copy =\n",
        "219": "        builder\n",
        "220": "            .orderRowsBy(Ordering.natural())\n",
        "222": "            .putAll(table)\n",
        "223": "            .build();\n",
        "231": "    ImmutableTable.Builder<Character, Integer, String> builder = ImmutableTable.builder();\n",
        "246": "    assertThat(table.values())\n",
        "247": "        .containsExactly(\"cat\", \"axe\", \"baz\", \"tub\", \"dog\", \"bar\", \"foo\", \"foo\", \"bar\")\n",
        "248": "        .inOrder();\n",
        "254": "    ImmutableTable.Builder<Character, Integer, String> builder = ImmutableTable.builder();\n",
        "268": "    assertThat(table.values())\n",
        "269": "        .containsExactly(\"baz\", \"bar\", \"foo\", \"dog\", \"cat\", \"baz\", \"bar\", \"foo\")\n",
        "270": "        .inOrder();\n",
        "276": "    ImmutableTable.Builder<Character, Integer, String> builder = ImmutableTable.builder();\n",
        "293": "    ImmutableTable.Builder<Character, Integer, String> builder = ImmutableTable.builder();\n",
        "309": "    ImmutableTable.Builder<Character, Integer, String> builder = ImmutableTable.builder();\n",
        "326": "    ImmutableTable.Builder<Character, Integer, String> builder = ImmutableTable.builder();\n"
    },
    "removed": {
        "32": "  @Override protected Table<String, Integer, Character> create(Object... data) {\n",
        "33": "    ImmutableTable.Builder<String, Integer, Character> builder =\n",
        "34": "        ImmutableTable.builder();\n",
        "36": "      builder.put((String) data[i], (Integer) data[i + 1],\n",
        "37": "          (Character) data[i + 2]);\n",
        "45": "    assertEquals(ImmutableTable.of('a', 1, \"foo\"), builder\n",
        "46": "        .put('a', 1, \"foo\")\n",
        "47": "        .build());\n",
        "55": "    assertEquals(expectedTable, builder\n",
        "56": "        .putAll(otherTable)\n",
        "57": "        .build());\n",
        "62": "    assertEquals(ImmutableTable.of('a', 1, \"foo\"), builder\n",
        "63": "        .put(Tables.immutableCell('a', 1, \"foo\"))\n",
        "64": "        .build());\n",
        "100": "          @Override public Character getRowKey() {\n",
        "103": "          @Override public Integer getColumnKey() {\n",
        "106": "          @Override public String getValue() {\n",
        "161": "    Table<R, C, V> built\n",
        "162": "        = ImmutableTable.<R, C, V>builder().putAll(original).build();\n",
        "167": "  private static <R, C, V> void validateViewOrdering(\n",
        "168": "      Table<R, C, V> original, Table<R, C, V> copy) {\n",
        "185": "    assertThat(ImmutableTable.copyOf(table).row('b').keySet())\n",
        "186": "        .containsExactly(2, 1).inOrder();\n",
        "221": "    ImmutableTable.Builder<Character, Integer, String> builder\n",
        "222": "        = ImmutableTable.builder();\n",
        "223": "    Table<Character, Integer, String> copy\n",
        "224": "        = builder.orderRowsBy(Ordering.natural())\n",
        "226": "            .putAll(table).build();\n",
        "234": "    ImmutableTable.Builder<Character, Integer, String> builder\n",
        "235": "        = ImmutableTable.builder();\n",
        "250": "    assertThat(table.values()).containsExactly(\"cat\", \"axe\", \"baz\", \"tub\",\n",
        "251": "        \"dog\", \"bar\", \"foo\", \"foo\", \"bar\").inOrder();\n",
        "257": "    ImmutableTable.Builder<Character, Integer, String> builder\n",
        "258": "        = ImmutableTable.builder();\n",
        "272": "    assertThat(table.values()).containsExactly(\"baz\", \"bar\", \"foo\", \"dog\",\n",
        "273": "        \"cat\", \"baz\", \"bar\", \"foo\").inOrder();\n",
        "279": "    ImmutableTable.Builder<Character, Integer, String> builder\n",
        "280": "        = ImmutableTable.builder();\n",
        "297": "    ImmutableTable.Builder<Character, Integer, String> builder\n",
        "298": "        = ImmutableTable.builder();\n",
        "314": "    ImmutableTable.Builder<Character, Integer, String> builder\n",
        "315": "        = ImmutableTable.builder();\n",
        "332": "    ImmutableTable.Builder<Character, Integer, String> builder\n",
        "333": "        = ImmutableTable.builder();\n"
    }
}