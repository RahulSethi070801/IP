{
    "addition": {
        "89": " * <p>This implementation is heavily derived from revision 1.96 of <a\n",
        "90": " * href=\"http://tinyurl.com/ConcurrentHashMap\">ConcurrentHashMap.java</a>.\n",
        "227": "  /** The default cache loader to use on loading operations. */\n",
        "421": "    /** Creates a reference for the given value according to this value strength. */\n",
        "433": "  /** Creates new entries. */\n",
        "548": "    /** Look-up table for factories. */\n",
        "617": "  /** A reference to a value. */\n",
        "619": "    /** Returns the value. Does not block or throw exceptions. */\n",
        "632": "    /** Returns the weight of this entry. This is assumed to be static between calls to setValue. */\n",
        "673": "  /** Placeholder. Indicates that the value hasn't been set yet. */\n",
        "718": "  /** Singleton placeholder that indicates a value is being loaded. */\n",
        "919": "  /** Queue that discards all elements. */\n",
        "933": "  /** Used for strongly-referenced keys. */\n",
        "1153": "  /** Used for weakly-referenced keys. */\n",
        "1441": "  /** References a weak value. */\n",
        "1485": "  /** References a soft value. */\n",
        "1529": "  /** References a strong value. */\n",
        "1577": "  /** References a weak value. */\n",
        "1599": "  /** References a soft value. */\n",
        "1621": "  /** References a strong value. */\n",
        "1755": "  /** Returns true if the entry has expired. */\n",
        "1860": "    /** The number of live elements in this segment's region. */\n",
        "1863": "    /** The weight of the live elements in this segment's region. */\n",
        "1881": "    /** The per-segment table. */\n",
        "1884": "    /** The maximum weight of this segment. UNSET_INT if there is no maximum. */\n",
        "2000": "    /** Sets a new value of an entry. Adds newly created entries at the end of the access queue. */\n",
        "2193": "    /** Waits uninterruptibly for {@code newValue} to be loaded, and then records loading stats. */\n",
        "2317": "    /** Cleanup collected entries when the lock is available. */\n",
        "2370": "    /** Clears all entries from the key and value reference queues. */\n",
        "2461": "    /** Cleanup expired entries when the lock is available. */\n",
        "2547": "    /** Returns first entry of bin for given hash. */\n",
        "2756": "    /** Expands the table if possible. */\n",
        "3186": "    /** Removes an entry whose key has been garbage collected. */\n",
        "3221": "    /** Removes an entry whose value has been garbage collected. */\n",
        "3349": "    /** Performs routine cleanup following a write. */\n",
        "3641": "   * A custom queue for managing access order. Note that this is tightly integrated with {@code\n",
        "3642": "   * ReferenceEntry}, upon which it relies to perform its linking.\n",
        "4219": "    /** Finds the next entry in the current chain. Returns true if an entry was found. */\n",
        "4231": "    /** Finds the next entry in the current table. Returns true if an entry was found. */\n",
        "4520": "   * <p>Unfortunately, readResolve() doesn't get called when a circular dependency is present, so\n",
        "4521": "   * the proxy must be able to behave as the cache itself.\n",
        "4638": "   * <p>Unfortunately, readResolve() doesn't get called when a circular dependency is present, so\n",
        "4639": "   * the proxy must be able to behave as the cache itself.\n"
    },
    "removed": {
        "89": " * <p>This implementation is heavily derived from revision 1.96 of\n",
        "90": " * <a href=\"http://tinyurl.com/ConcurrentHashMap\">ConcurrentHashMap.java</a>.\n",
        "227": "  /**\n",
        "228": "   * The default cache loader to use on loading operations.\n",
        "229": "   */\n",
        "423": "    /**\n",
        "424": "     * Creates a reference for the given value according to this value strength.\n",
        "425": "     */\n",
        "437": "  /**\n",
        "438": "   * Creates new entries.\n",
        "439": "   */\n",
        "554": "    /**\n",
        "555": "     * Look-up table for factories.\n",
        "556": "     */\n",
        "625": "  /**\n",
        "626": "   * A reference to a value.\n",
        "627": "   */\n",
        "629": "    /**\n",
        "630": "     * Returns the value. Does not block or throw exceptions.\n",
        "631": "     */\n",
        "644": "    /**\n",
        "645": "     * Returns the weight of this entry. This is assumed to be static between calls to setValue.\n",
        "646": "     */\n",
        "687": "  /**\n",
        "688": "   * Placeholder. Indicates that the value hasn't been set yet.\n",
        "689": "   */\n",
        "734": "  /**\n",
        "735": "   * Singleton placeholder that indicates a value is being loaded.\n",
        "736": "   */\n",
        "937": "  /**\n",
        "938": "   * Queue that discards all elements.\n",
        "939": "   */\n",
        "953": "  /**\n",
        "954": "   * Used for strongly-referenced keys.\n",
        "955": "   */\n",
        "1175": "  /**\n",
        "1176": "   * Used for weakly-referenced keys.\n",
        "1177": "   */\n",
        "1465": "  /**\n",
        "1466": "   * References a weak value.\n",
        "1467": "   */\n",
        "1511": "  /**\n",
        "1512": "   * References a soft value.\n",
        "1513": "   */\n",
        "1557": "  /**\n",
        "1558": "   * References a strong value.\n",
        "1559": "   */\n",
        "1607": "  /**\n",
        "1608": "   * References a weak value.\n",
        "1609": "   */\n",
        "1631": "  /**\n",
        "1632": "   * References a soft value.\n",
        "1633": "   */\n",
        "1655": "  /**\n",
        "1656": "   * References a strong value.\n",
        "1657": "   */\n",
        "1791": "  /**\n",
        "1792": "   * Returns true if the entry has expired.\n",
        "1793": "   */\n",
        "1898": "    /**\n",
        "1899": "     * The number of live elements in this segment's region.\n",
        "1900": "     */\n",
        "1903": "    /**\n",
        "1904": "     * The weight of the live elements in this segment's region.\n",
        "1905": "     */\n",
        "1923": "    /**\n",
        "1924": "     * The per-segment table.\n",
        "1925": "     */\n",
        "1928": "    /**\n",
        "1929": "     * The maximum weight of this segment. UNSET_INT if there is no maximum.\n",
        "1930": "     */\n",
        "2046": "    /**\n",
        "2047": "     * Sets a new value of an entry. Adds newly created entries at the end of the access queue.\n",
        "2048": "     */\n",
        "2241": "    /**\n",
        "2242": "     * Waits uninterruptibly for {@code newValue} to be loaded, and then records loading stats.\n",
        "2243": "     */\n",
        "2367": "    /**\n",
        "2368": "     * Cleanup collected entries when the lock is available.\n",
        "2369": "     */\n",
        "2422": "    /**\n",
        "2423": "     * Clears all entries from the key and value reference queues.\n",
        "2424": "     */\n",
        "2515": "    /**\n",
        "2516": "     * Cleanup expired entries when the lock is available.\n",
        "2517": "     */\n",
        "2603": "    /**\n",
        "2604": "     * Returns first entry of bin for given hash.\n",
        "2605": "     */\n",
        "2814": "    /**\n",
        "2815": "     * Expands the table if possible.\n",
        "2816": "     */\n",
        "3246": "    /**\n",
        "3247": "     * Removes an entry whose key has been garbage collected.\n",
        "3248": "     */\n",
        "3283": "    /**\n",
        "3284": "     * Removes an entry whose value has been garbage collected.\n",
        "3285": "     */\n",
        "3413": "    /**\n",
        "3414": "     * Performs routine cleanup following a write.\n",
        "3415": "     */\n",
        "3707": "   * A custom queue for managing access order. Note that this is tightly integrated with\n",
        "3708": "   * {@code ReferenceEntry}, upon which it relies to perform its linking.\n",
        "4285": "    /**\n",
        "4286": "     * Finds the next entry in the current chain. Returns true if an entry was found.\n",
        "4287": "     */\n",
        "4299": "    /**\n",
        "4300": "     * Finds the next entry in the current table. Returns true if an entry was found.\n",
        "4301": "     */\n",
        "4590": "   * Unfortunately, readResolve() doesn't get called when a circular dependency is present, so the\n",
        "4591": "   * proxy must be able to behave as the cache itself.\n",
        "4708": "   * Unfortunately, readResolve() doesn't get called when a circular dependency is present, so the\n",
        "4709": "   * proxy must be able to behave as the cache itself.\n"
    }
}