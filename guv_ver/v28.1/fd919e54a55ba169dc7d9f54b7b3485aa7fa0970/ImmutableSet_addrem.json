{
    "addition": {
        "202": "   * can hold setSize elements with the desired load factor. Always returns at least setSize + 2.\n",
        "336": "  @LazyInit @Nullable @RetainedWith private transient ImmutableList<E> asList;\n",
        "404": "   * Returns a new builder. The generated builder is equivalent to the builder created by the {@link\n",
        "405": "   * Builder} constructor.\n",
        "430": "   * A builder for creating {@code ImmutableSet} instances. Example:\n",
        "432": "   * <pre>{@code\n",
        "433": "   * static final ImmutableSet<Color> GOOGLE_COLORS =\n",
        "434": "   *     ImmutableSet.<Color>builder()\n",
        "435": "   *         .addAll(WEBSAFE_COLORS)\n",
        "436": "   *         .add(new Color(0, 191, 255))\n",
        "437": "   *         .build();\n",
        "438": "   * }</pre>\n",
        "448": "    @Nullable @VisibleForTesting Object[] hashTable;\n",
        "452": "     * Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n",
        "453": "     * ImmutableSet#builder}.\n",
        "465": "     * Adds {@code element} to the {@code ImmutableSet}. If the {@code ImmutableSet} already\n",
        "466": "     * contains {@code element}, then {@code add} has no effect (only the previously added element\n",
        "467": "     * is retained).\n",
        "505": "     * Adds each element of {@code elements} to the {@code ImmutableSet}, ignoring duplicate\n",
        "506": "     * elements (only the first duplicate element is added).\n",
        "510": "     * @throws NullPointerException if {@code elements} is null or contains a null element\n",
        "526": "     * Adds each element of {@code elements} to the {@code ImmutableSet}, ignoring duplicate\n",
        "527": "     * elements (only the first duplicate element is added).\n",
        "531": "     * @throws NullPointerException if {@code elements} is null or contains a null element\n",
        "548": "     * Adds each element of {@code elements} to the {@code ImmutableSet}, ignoring duplicate\n",
        "549": "     * elements (only the first duplicate element is added).\n",
        "553": "     * @throws NullPointerException if {@code elements} is null or contains a null element\n",
        "566": "     * Returns a newly-created {@code ImmutableSet} based on the contents of the {@code Builder}.\n"
    },
    "removed": {
        "202": "   * can hold setSize elements with the desired load factor.  Always returns at least setSize + 2.\n",
        "336": "  @LazyInit\n",
        "337": "  @Nullable\n",
        "338": "  @RetainedWith\n",
        "339": "  private transient ImmutableList<E> asList;\n",
        "407": "   * Returns a new builder. The generated builder is equivalent to the builder\n",
        "408": "   * created by the {@link Builder} constructor.\n",
        "433": "   * A builder for creating {@code ImmutableSet} instances. Example: <pre>   {@code\n",
        "435": "   *   static final ImmutableSet<Color> GOOGLE_COLORS =\n",
        "436": "   *       ImmutableSet.<Color>builder()\n",
        "437": "   *           .addAll(WEBSAFE_COLORS)\n",
        "438": "   *           .add(new Color(0, 191, 255))\n",
        "439": "   *           .build();}</pre>\n",
        "449": "    @Nullable\n",
        "450": "    @VisibleForTesting\n",
        "451": "    Object[] hashTable;\n",
        "455": "     * Creates a new builder. The returned builder is equivalent to the builder\n",
        "456": "     * generated by {@link ImmutableSet#builder}.\n",
        "468": "     * Adds {@code element} to the {@code ImmutableSet}.  If the {@code\n",
        "469": "     * ImmutableSet} already contains {@code element}, then {@code add} has no\n",
        "470": "     * effect (only the previously added element is retained).\n",
        "508": "     * Adds each element of {@code elements} to the {@code ImmutableSet},\n",
        "509": "     * ignoring duplicate elements (only the first duplicate element is added).\n",
        "513": "     * @throws NullPointerException if {@code elements} is null or contains a\n",
        "514": "     *     null element\n",
        "530": "     * Adds each element of {@code elements} to the {@code ImmutableSet},\n",
        "531": "     * ignoring duplicate elements (only the first duplicate element is added).\n",
        "535": "     * @throws NullPointerException if {@code elements} is null or contains a\n",
        "536": "     *     null element\n",
        "553": "     * Adds each element of {@code elements} to the {@code ImmutableSet},\n",
        "554": "     * ignoring duplicate elements (only the first duplicate element is added).\n",
        "558": "     * @throws NullPointerException if {@code elements} is null or contains a\n",
        "559": "     *     null element\n",
        "572": "     * Returns a newly-created {@code ImmutableSet} based on the contents of\n",
        "573": "     * the {@code Builder}.\n"
    }
}