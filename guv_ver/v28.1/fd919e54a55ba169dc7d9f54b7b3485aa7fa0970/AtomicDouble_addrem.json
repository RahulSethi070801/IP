{
    "addition": {
        "69": "  /** Creates a new {@code AtomicDouble} with initial value {@code 0.0}. */\n",
        "115": "   * Atomically sets the value to the given updated value if the current value is <a\n",
        "116": "   * href=\"#bitEquals\">bitwise equal</a> to the expected value.\n",
        "120": "   * @return {@code true} if successful. False return indicates that the actual value was not\n",
        "121": "   *     bitwise equal to the expected value.\n",
        "124": "    return value.compareAndSet(doubleToRawLongBits(expect), doubleToRawLongBits(update));\n",
        "128": "   * Atomically sets the value to the given updated value if the current value is <a\n",
        "129": "   * href=\"#bitEquals\">bitwise equal</a> to the expected value.\n",
        "133": "   * fail spuriously</a> and does not provide ordering guarantees, so is only rarely an appropriate\n",
        "134": "   * alternative to {@code compareAndSet}.\n",
        "141": "    return value.weakCompareAndSet(doubleToRawLongBits(expect), doubleToRawLongBits(update));\n",
        "184": "   *\n",
        "192": "   * Returns the value of this {@code AtomicDouble} as an {@code int} after a narrowing primitive\n",
        "193": "   * conversion.\n",
        "200": "   * Returns the value of this {@code AtomicDouble} as a {@code long} after a narrowing primitive\n",
        "201": "   * conversion.\n",
        "208": "   * Returns the value of this {@code AtomicDouble} as a {@code float} after a narrowing primitive\n",
        "209": "   * conversion.\n",
        "215": "  /** Returns the value of this {@code AtomicDouble} as a {@code double}. */\n",
        "225": "  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {\n",
        "231": "  /** Reconstitutes the instance from a stream (that is, deserializes it). */\n"
    },
    "removed": {
        "69": "  /**\n",
        "70": "   * Creates a new {@code AtomicDouble} with initial value {@code 0.0}.\n",
        "71": "   */\n",
        "117": "   * Atomically sets the value to the given updated value\n",
        "118": "   * if the current value is <a href=\"#bitEquals\">bitwise equal</a>\n",
        "119": "   * to the expected value.\n",
        "123": "   * @return {@code true} if successful. False return indicates that\n",
        "124": "   * the actual value was not bitwise equal to the expected value.\n",
        "127": "    return value.compareAndSet(\n",
        "128": "                                 doubleToRawLongBits(expect),\n",
        "129": "                                 doubleToRawLongBits(update));\n",
        "133": "   * Atomically sets the value to the given updated value\n",
        "134": "   * if the current value is <a href=\"#bitEquals\">bitwise equal</a>\n",
        "135": "   * to the expected value.\n",
        "139": "   * fail spuriously</a>\n",
        "140": "   * and does not provide ordering guarantees, so is only rarely an\n",
        "141": "   * appropriate alternative to {@code compareAndSet}.\n",
        "148": "    return value.weakCompareAndSet(\n",
        "149": "                                     doubleToRawLongBits(expect),\n",
        "150": "                                     doubleToRawLongBits(update));\n",
        "200": "   * Returns the value of this {@code AtomicDouble} as an {@code int}\n",
        "201": "   * after a narrowing primitive conversion.\n",
        "208": "   * Returns the value of this {@code AtomicDouble} as a {@code long}\n",
        "209": "   * after a narrowing primitive conversion.\n",
        "216": "   * Returns the value of this {@code AtomicDouble} as a {@code float}\n",
        "217": "   * after a narrowing primitive conversion.\n",
        "223": "  /**\n",
        "224": "   * Returns the value of this {@code AtomicDouble} as a {@code double}.\n",
        "225": "   */\n",
        "235": "  private void writeObject(java.io.ObjectOutputStream s)\n",
        "236": "      throws java.io.IOException {\n",
        "242": "  /**\n",
        "243": "   * Reconstitutes the instance from a stream (that is, deserializes it).\n",
        "244": "   */\n"
    }
}