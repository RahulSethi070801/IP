{
    "addition": {
        "34": " * Implementation of {@code Multimap} that uses an {@code ArrayList} to store the values for a given\n",
        "35": " * key. A {@link HashMap} associates each key with an {@link ArrayList} of values.\n",
        "37": " * <p>When iterating through the collections supplied by this class, the ordering of values for a\n",
        "38": " * given key agrees with the order in which the values were added.\n",
        "40": " * <p>This multimap allows duplicate key-value pairs. After adding a new key-value pair equal to an\n",
        "41": " * existing key-value pair, the {@code ArrayListMultimap} will contain entries for both the new\n",
        "42": " * value and the old value.\n",
        "44": " * <p>Keys and values may be null. All optional multimap methods are supported, and all returned\n",
        "45": " * views are modifiable.\n",
        "47": " * <p>The lists returned by {@link #get}, {@link #removeAll}, and {@link #replaceValues} all\n",
        "48": " * implement {@link java.util.RandomAccess}.\n",
        "50": " * <p>This class is not threadsafe when any concurrent operations update the multimap. Concurrent\n",
        "51": " * read operations will work correctly. To allow concurrent update operations, wrap your multimap\n",
        "52": " * with a call to {@link Multimaps#synchronizedListMultimap}.\n",
        "55": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap\"> {@code\n",
        "56": " * Multimap}</a>.\n",
        "128": "   * Creates a new, empty {@code ArrayList} to hold the collection of values for an arbitrary key.\n",
        "151": "   * @serialData expectedValuesPerKey, number of distinct keys, and then for each distinct key: the\n",
        "152": "   *     key, number of values for that key, and the key's values\n"
    },
    "removed": {
        "34": " * Implementation of {@code Multimap} that uses an {@code ArrayList} to store\n",
        "35": " * the values for a given key. A {@link HashMap} associates each key with an\n",
        "36": " * {@link ArrayList} of values.\n",
        "38": " * <p>When iterating through the collections supplied by this class, the\n",
        "39": " * ordering of values for a given key agrees with the order in which the values\n",
        "40": " * were added.\n",
        "42": " * <p>This multimap allows duplicate key-value pairs. After adding a new\n",
        "43": " * key-value pair equal to an existing key-value pair, the {@code\n",
        "44": " * ArrayListMultimap} will contain entries for both the new value and the old\n",
        "45": " * value.\n",
        "47": " * <p>Keys and values may be null. All optional multimap methods are supported,\n",
        "48": " * and all returned views are modifiable.\n",
        "50": " * <p>The lists returned by {@link #get}, {@link #removeAll}, and {@link\n",
        "51": " * #replaceValues} all implement {@link java.util.RandomAccess}.\n",
        "53": " * <p>This class is not threadsafe when any concurrent operations update the\n",
        "54": " * multimap. Concurrent read operations will work correctly. To allow concurrent\n",
        "55": " * update operations, wrap your multimap with a call to {@link\n",
        "56": " * Multimaps#synchronizedListMultimap}.\n",
        "59": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap\">\n",
        "60": " * {@code Multimap}</a>.\n",
        "132": "   * Creates a new, empty {@code ArrayList} to hold the collection of values for\n",
        "133": "   * an arbitrary key.\n",
        "156": "   * @serialData expectedValuesPerKey, number of distinct keys, and then for\n",
        "157": "   *     each distinct key: the key, number of values for that key, and the\n",
        "158": "   *     key's values\n"
    }
}