{
    "addition": {
        "69": "      assertSame(\n",
        "70": "          constant,\n",
        "71": "          MediaType.create(constant.type(), constant.subtype())\n",
        "72": "              .withParameters(constant.parameters()));\n",
        "96": "        .filter(\n",
        "97": "            new Predicate<Field>() {\n",
        "98": "              @Override\n",
        "99": "              public boolean apply(Field input) {\n",
        "100": "                int modifiers = input.getModifiers();\n",
        "101": "                return isPublic(modifiers)\n",
        "102": "                    && isStatic(modifiers)\n",
        "103": "                    && isFinal(modifiers)\n",
        "104": "                    && MediaType.class.equals(input.getType());\n",
        "105": "              }\n",
        "106": "            });\n",
        "129": "    } catch (IllegalArgumentException expected) {\n",
        "130": "    }\n",
        "137": "    } catch (IllegalArgumentException expected) {\n",
        "138": "    }\n",
        "145": "    } catch (IllegalArgumentException expected) {\n",
        "146": "    }\n",
        "181": "    assertEquals(\"application\", MediaType.parse(\"application/atom+xml; charset=utf-8\").type());\n",
        "186": "    assertEquals(\"atom+xml\", MediaType.parse(\"application/atom+xml; charset=utf-8\").subtype());\n",
        "194": "    assertEquals(\n",
        "195": "        ImmutableListMultimap.of(\"charset\", \"utf-8\"),\n",
        "197": "    assertEquals(PARAMETERS, MediaType.parse(\"application/atom+xml; a=1; a=2; b=3\").parameters());\n",
        "201": "    assertSame(MediaType.parse(\"image/gif\"), MediaType.parse(\"image/gif\").withoutParameters());\n",
        "202": "    assertEquals(\n",
        "203": "        MediaType.parse(\"image/gif\"), MediaType.parse(\"image/gif; foo=bar\").withoutParameters());\n",
        "207": "    assertEquals(\n",
        "208": "        MediaType.parse(\"text/plain; a=1; a=2; b=3\"),\n",
        "210": "    assertEquals(\n",
        "211": "        MediaType.parse(\"text/plain; a=1; a=2; b=3\"),\n",
        "222": "    } catch (IllegalArgumentException expected) {\n",
        "223": "    }\n",
        "227": "    assertEquals(\n",
        "228": "        MediaType.parse(\"text/plain; a=1\"), MediaType.parse(\"text/plain\").withParameter(\"a\", \"1\"));\n",
        "229": "    assertEquals(\n",
        "230": "        MediaType.parse(\"text/plain; a=1\"),\n",
        "232": "    assertEquals(\n",
        "233": "        MediaType.parse(\"text/plain; a=3\"),\n",
        "235": "    assertEquals(\n",
        "236": "        MediaType.parse(\"text/plain; a=1; a=2; b=3\"),\n",
        "245": "    } catch (IllegalArgumentException expected) {\n",
        "246": "    }\n",
        "250": "    assertEquals(\n",
        "251": "        MediaType.parse(\"text/plain; charset=utf-8\"),\n",
        "253": "    assertEquals(\n",
        "254": "        MediaType.parse(\"text/plain; charset=utf-8\"),\n",
        "288": "    } catch (IllegalArgumentException expected) {\n",
        "289": "    }\n",
        "296": "    } catch (IllegalArgumentException expected) {\n",
        "297": "    }\n",
        "301": "    } catch (IllegalArgumentException expected) {\n",
        "302": "    }\n",
        "306": "    } catch (IllegalArgumentException expected) {\n",
        "307": "    }\n",
        "311": "    } catch (IllegalArgumentException expected) {\n",
        "312": "    }\n",
        "316": "    } catch (IllegalArgumentException expected) {\n",
        "317": "    }\n",
        "321": "    } catch (IllegalArgumentException expected) {\n",
        "322": "    }\n",
        "326": "    } catch (IllegalArgumentException expected) {\n",
        "327": "    }\n",
        "331": "    } catch (IllegalArgumentException expected) {\n",
        "332": "    }\n",
        "336": "    } catch (IllegalArgumentException expected) {\n",
        "337": "    }\n",
        "341": "    } catch (IllegalArgumentException expected) {\n",
        "342": "    }\n",
        "346": "    } catch (IllegalArgumentException expected) {\n",
        "347": "    }\n",
        "351": "    } catch (IllegalArgumentException expected) {\n",
        "352": "    }\n",
        "356": "    } catch (IllegalArgumentException expected) {\n",
        "357": "    }\n",
        "361": "    } catch (IllegalArgumentException expected) {\n",
        "362": "    }\n",
        "366": "    } catch (IllegalArgumentException expected) {\n",
        "367": "    }\n",
        "371": "    } catch (IllegalArgumentException expected) {\n",
        "372": "    }\n",
        "390": "    } catch (IllegalStateException expected) {\n",
        "391": "    }\n",
        "395": "    MediaType mediaType = MediaType.parse(\"text/plain; charset=\\\"!@#$%^&*()\\\"\");\n",
        "399": "    } catch (IllegalCharsetNameException expected) {\n",
        "400": "    }\n",
        "404": "    MediaType mediaType = MediaType.parse(\"text/plain; charset=utf-wtf\");\n",
        "408": "    } catch (UnsupportedCharsetException expected) {\n",
        "409": "    }\n",
        "471": "    assertEquals(\n",
        "472": "        \"text/plain; something=\\\"cr@zy\\\"; something-else=\\\"crazy with spaces\\\"\",\n"
    },
    "removed": {
        "69": "      assertSame(constant, MediaType.create(constant.type(), constant.subtype())\n",
        "70": "          .withParameters(constant.parameters()));\n",
        "94": "        .filter(new Predicate<Field>() {\n",
        "95": "          @Override public boolean apply(Field input) {\n",
        "96": "            int modifiers = input.getModifiers();\n",
        "97": "            return isPublic(modifiers) && isStatic(modifiers) && isFinal(modifiers)\n",
        "98": "                && MediaType.class.equals(input.getType());\n",
        "99": "          }\n",
        "100": "        });\n",
        "123": "    } catch (IllegalArgumentException expected) {}\n",
        "130": "    } catch (IllegalArgumentException expected) {}\n",
        "137": "    } catch (IllegalArgumentException expected) {}\n",
        "172": "    assertEquals(\"application\",\n",
        "173": "        MediaType.parse(\"application/atom+xml; charset=utf-8\").type());\n",
        "178": "    assertEquals(\"atom+xml\",\n",
        "179": "        MediaType.parse(\"application/atom+xml; charset=utf-8\").subtype());\n",
        "187": "    assertEquals(ImmutableListMultimap.of(\"charset\", \"utf-8\"),\n",
        "189": "    assertEquals(PARAMETERS,\n",
        "190": "        MediaType.parse(\"application/atom+xml; a=1; a=2; b=3\").parameters());\n",
        "194": "    assertSame(MediaType.parse(\"image/gif\"),\n",
        "195": "        MediaType.parse(\"image/gif\").withoutParameters());\n",
        "196": "    assertEquals(MediaType.parse(\"image/gif\"),\n",
        "197": "        MediaType.parse(\"image/gif; foo=bar\").withoutParameters());\n",
        "201": "    assertEquals(MediaType.parse(\"text/plain; a=1; a=2; b=3\"),\n",
        "203": "    assertEquals(MediaType.parse(\"text/plain; a=1; a=2; b=3\"),\n",
        "214": "    } catch (IllegalArgumentException expected) {}\n",
        "218": "    assertEquals(MediaType.parse(\"text/plain; a=1\"),\n",
        "219": "        MediaType.parse(\"text/plain\").withParameter(\"a\", \"1\"));\n",
        "220": "    assertEquals(MediaType.parse(\"text/plain; a=1\"),\n",
        "222": "    assertEquals(MediaType.parse(\"text/plain; a=3\"),\n",
        "224": "    assertEquals(MediaType.parse(\"text/plain; a=1; a=2; b=3\"),\n",
        "233": "    } catch (IllegalArgumentException expected) {}\n",
        "237": "    assertEquals(MediaType.parse(\"text/plain; charset=utf-8\"),\n",
        "239": "    assertEquals(MediaType.parse(\"text/plain; charset=utf-8\"),\n",
        "273": "    } catch (IllegalArgumentException expected) {}\n",
        "280": "    } catch (IllegalArgumentException expected) {}\n",
        "284": "    } catch (IllegalArgumentException expected) {}\n",
        "288": "    } catch (IllegalArgumentException expected) {}\n",
        "292": "    } catch (IllegalArgumentException expected) {}\n",
        "296": "    } catch (IllegalArgumentException expected) {}\n",
        "300": "    } catch (IllegalArgumentException expected) {}\n",
        "304": "    } catch (IllegalArgumentException expected) {}\n",
        "308": "    } catch (IllegalArgumentException expected) {}\n",
        "312": "    } catch (IllegalArgumentException expected) {}\n",
        "316": "    } catch (IllegalArgumentException expected) {}\n",
        "320": "    } catch (IllegalArgumentException expected) {}\n",
        "324": "    } catch (IllegalArgumentException expected) {}\n",
        "328": "    } catch (IllegalArgumentException expected) {}\n",
        "332": "    } catch (IllegalArgumentException expected) {}\n",
        "336": "    } catch (IllegalArgumentException expected) {}\n",
        "340": "    } catch (IllegalArgumentException expected) {}\n",
        "358": "    } catch (IllegalStateException expected) {}\n",
        "362": "    MediaType mediaType = MediaType.parse(\n",
        "363": "        \"text/plain; charset=\\\"!@#$%^&*()\\\"\");\n",
        "367": "    } catch (IllegalCharsetNameException expected) {}\n",
        "371": "    MediaType mediaType = MediaType.parse(\n",
        "372": "        \"text/plain; charset=utf-wtf\");\n",
        "376": "    } catch (UnsupportedCharsetException expected) {}\n",
        "438": "    assertEquals(\"text/plain; something=\\\"cr@zy\\\"; something-else=\\\"crazy with spaces\\\"\",\n"
    }
}