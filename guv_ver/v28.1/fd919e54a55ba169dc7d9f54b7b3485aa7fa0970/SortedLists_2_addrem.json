{
    "addition": {
        "31": " * <p>In this documentation, the terms <i>greatest</i>, <i>greater</i>, <i>least</i>, and\n",
        "33": " * <i>first</i> and <i>last</i> are considered to refer to the elements' ordering in a list.\n",
        "56": "    /** Return the index of the last list element that compares as equal to the key. */\n",
        "78": "    /** Return the index of the first list element that compares as equal to the key. */\n",
        "153": "     * Return {@code ~insertionIndex}, where {@code insertionIndex} is defined as the point at which\n",
        "154": "     * the key would be inserted into the list: the index of the next higher element in the list, or\n",
        "155": "     * {@code list.size()} if there is no such element.\n",
        "160": "     * <p>This is equivalent to the behavior of {@link java.util.Collections#binarySearch(List,\n",
        "161": "     * Object)} when the key isn't present, since {@code ~insertionIndex} is equal to {@code -1 -\n",
        "162": "     * insertionIndex}.\n",
        "209": "   * <p>Equivalent to {@link #binarySearch(List, Object, Comparator, KeyPresentBehavior,\n",
        "210": "   * KeyAbsentBehavior)} using {@link Lists#transform(List, Function) Lists.transform(list,\n",
        "211": "   * keyFunction)}.\n",
        "227": "   * {@link Collections#sort(List, Comparator) Collections.sort(List, Comparator)} method), prior to\n",
        "228": "   * making this call. If it is not sorted, the results are undefined.\n",
        "230": "   * <p>If there are elements in the list which compare as equal to the key, the choice of {@link\n",
        "231": "   * KeyPresentBehavior} decides which index is returned. If no elements compare as equal to the\n",
        "232": "   * key, the choice of {@link KeyAbsentBehavior} decides which index is returned.\n",
        "241": "   *     compares as equal to the key.\n",
        "243": "   *     equal to the key.\n",
        "245": "   *     otherwise the index determined by the {@code KeyAbsentBehavior}.\n"
    },
    "removed": {
        "31": " * In this documentation, the terms <i>greatest</i>, <i>greater</i>, <i>least</i>, and\n",
        "33": " * <i>first</i> and <i>last</i> are considered to refer to the elements' ordering in a\n",
        "34": " * list.\n",
        "57": "    /**\n",
        "58": "     * Return the index of the last list element that compares as equal to the key.\n",
        "59": "     */\n",
        "81": "    /**\n",
        "82": "     * Return the index of the first list element that compares as equal to the key.\n",
        "83": "     */\n",
        "158": "     * Return {@code ~insertionIndex}, where {@code insertionIndex} is defined as the point at\n",
        "159": "     * which the key would be inserted into the list: the index of the next higher element in the\n",
        "160": "     * list, or {@code list.size()} if there is no such element.\n",
        "165": "     * <p>This is equivalent to the behavior of\n",
        "166": "     * {@link java.util.Collections#binarySearch(List, Object)} when the key isn't present, since\n",
        "167": "     * {@code ~insertionIndex} is equal to {@code -1 - insertionIndex}.\n",
        "214": "   * <p>Equivalent to\n",
        "215": "   * {@link #binarySearch(List, Object, Comparator, KeyPresentBehavior, KeyAbsentBehavior)} using\n",
        "216": "   * {@link Lists#transform(List, Function) Lists.transform(list, keyFunction)}.\n",
        "232": "   * {@link Collections#sort(List, Comparator) Collections.sort(List, Comparator)} method), prior\n",
        "233": "   * to making this call. If it is not sorted, the results are undefined.\n",
        "235": "   * <p>If there are elements in the list which compare as equal to the key, the choice of\n",
        "236": "   * {@link KeyPresentBehavior} decides which index is returned. If no elements compare as equal to\n",
        "237": "   * the key, the choice of {@link KeyAbsentBehavior} decides which index is returned.\n",
        "246": "   *        compares as equal to the key.\n",
        "248": "   *        equal to the key.\n",
        "250": "   *         otherwise the index determined by the {@code KeyAbsentBehavior}.\n"
    }
}