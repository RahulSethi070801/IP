{
    "addition": {
        "39": "   * Constructor that assigns {@code supportsIteratorRemove} the same value as {@code\n",
        "40": "   * supportsRemove}.\n",
        "48": "    super(\n",
        "49": "        allowsNullKeys,\n",
        "50": "        allowsNullValues,\n",
        "51": "        supportsPut,\n",
        "52": "        supportsRemove,\n",
        "53": "        supportsClear,\n",
        "54": "        supportsRemove);\n",
        "62": "    return Maps.transformValues(Maps.<String, String>newHashMap(), Functions.<String>identity());\n",
        "74": "  @Override\n",
        "75": "  protected String getKeyNotInPopulatedMap() throws UnsupportedOperationException {\n",
        "79": "  @Override\n",
        "80": "  protected String getValueNotInPopulatedMap() throws UnsupportedOperationException {\n",
        "100": "    Map<String, String> map =\n",
        "101": "        Maps.transformValues(ImmutableMap.<String, Integer>of(), Functions.toStringFunction());\n",
        "106": "    Map<String, String> map =\n",
        "107": "        Maps.transformValues(ImmutableMap.of(\"a\", 1), Functions.toStringFunction());\n",
        "115": "    Map<String, Integer> map = Maps.transformValues(underlying, Functions.<Integer>identity());\n",
        "120": "    Map<String, String> map =\n",
        "121": "        Maps.transformValues(ImmutableMap.of(\"a\", 1), Functions.toStringFunction());\n",
        "144": "    Map<String, String> map = Maps.transformValues(underlying, Functions.toStringFunction());\n",
        "154": "    Map<String, Boolean> map =\n",
        "155": "        Maps.transformValues(\n",
        "156": "            underlying,\n",
        "157": "            new Function<String, Boolean>() {\n",
        "158": "              @Override\n",
        "159": "              public Boolean apply(@Nullable String from) {\n",
        "160": "                return from == null;\n",
        "161": "              }\n",
        "162": "            });\n",
        "178": "    Map<String, String> map = Maps.transformValues(underlying, Functions.toStringFunction());\n",
        "202": "    Map<String, String> map = Maps.transformValues(underlying, Functions.toStringFunction());\n",
        "244": "    Map<String, Integer> expected = Maps.transformValues(underlying, Functions.<Integer>identity());\n",
        "250": "    Map<String, Integer> map =\n",
        "251": "        Maps.transformValues(equalToUnderlying, Functions.<Integer>identity());\n",
        "254": "    map =\n",
        "255": "        Maps.transformValues(\n",
        "256": "            ImmutableMap.of(\"a\", 1, \"b\", 2, \"c\", 3),\n",
        "257": "            new Function<Integer, Integer>() {\n",
        "258": "              @Override\n",
        "259": "              public Integer apply(Integer from) {\n",
        "260": "                return from - 1;\n",
        "261": "              }\n",
        "262": "            });\n",
        "272": "    Map<String, Boolean> map =\n",
        "273": "        Maps.transformValues(\n",
        "274": "            underlying,\n",
        "275": "            new Function<Boolean, Boolean>() {\n",
        "276": "              @Override\n",
        "277": "              public Boolean apply(@Nullable Boolean from) {\n",
        "278": "                return (from == null) ? true : null;\n",
        "279": "              }\n",
        "280": "            });\n",
        "285": "    assertTrue(entries.contains(Maps.immutableEntry((String) null, (Boolean) null)));\n",
        "291": "  @Override\n",
        "292": "  public void testKeySetRemoveAllNullFromEmpty() {\n",
        "300": "  @Override\n",
        "301": "  public void testEntrySetRemoveAllNullFromEmpty() {\n"
    },
    "removed": {
        "39": "   * Constructor that assigns {@code supportsIteratorRemove} the same value as\n",
        "40": "   * {@code supportsRemove}.\n",
        "48": "    super(allowsNullKeys, allowsNullValues, supportsPut, supportsRemove,\n",
        "49": "        supportsClear, supportsRemove);\n",
        "57": "    return Maps.transformValues(Maps.<String, String>newHashMap(),\n",
        "58": "        Functions.<String>identity());\n",
        "70": "  @Override protected String getKeyNotInPopulatedMap()\n",
        "71": "      throws UnsupportedOperationException {\n",
        "75": "  @Override protected String getValueNotInPopulatedMap()\n",
        "76": "      throws UnsupportedOperationException {\n",
        "96": "    Map<String, String> map = Maps.transformValues(\n",
        "97": "        ImmutableMap.<String, Integer>of(), Functions.toStringFunction());\n",
        "102": "    Map<String, String> map = Maps.transformValues(\n",
        "103": "        ImmutableMap.of(\"a\", 1), Functions.toStringFunction());\n",
        "111": "    Map<String, Integer> map = Maps.transformValues(\n",
        "112": "        underlying, Functions.<Integer>identity());\n",
        "117": "    Map<String, String> map = Maps.transformValues(\n",
        "118": "        ImmutableMap.of(\"a\", 1), Functions.toStringFunction());\n",
        "141": "    Map<String, String> map\n",
        "142": "        = Maps.transformValues(underlying, Functions.toStringFunction());\n",
        "152": "    Map<String, Boolean> map = Maps.transformValues(underlying,\n",
        "153": "        new Function<String, Boolean>() {\n",
        "154": "          @Override\n",
        "155": "          public Boolean apply(@Nullable String from) {\n",
        "156": "            return from == null;\n",
        "157": "          }\n",
        "158": "        }\n",
        "159": "    );\n",
        "175": "    Map<String, String> map\n",
        "176": "        = Maps.transformValues(underlying, Functions.toStringFunction());\n",
        "200": "    Map<String, String> map\n",
        "201": "        = Maps.transformValues(underlying, Functions.toStringFunction());\n",
        "243": "    Map<String, Integer> expected\n",
        "244": "        = Maps.transformValues(underlying, Functions.<Integer>identity());\n",
        "250": "    Map<String, Integer> map = Maps.transformValues(\n",
        "251": "        equalToUnderlying, Functions.<Integer>identity());\n",
        "254": "    map = Maps.transformValues(ImmutableMap.of(\"a\", 1, \"b\", 2, \"c\", 3),\n",
        "255": "        new Function<Integer, Integer>() {\n",
        "256": "          @Override\n",
        "257": "          public Integer apply(Integer from) {\n",
        "258": "            return from - 1;\n",
        "259": "          }\n",
        "260": "        }\n",
        "261": "    );\n",
        "271": "    Map<String, Boolean> map = Maps.transformValues(\n",
        "272": "        underlying, new Function<Boolean, Boolean>() {\n",
        "273": "          @Override\n",
        "274": "          public Boolean apply(@Nullable Boolean from) {\n",
        "275": "            return (from == null) ? true : null;\n",
        "276": "          }\n",
        "277": "        }\n",
        "278": "    );\n",
        "283": "    assertTrue(entries.contains(\n",
        "284": "        Maps.immutableEntry((String) null, (Boolean) null)));\n",
        "290": "  @Override public void testKeySetRemoveAllNullFromEmpty() {\n",
        "298": "  @Override public void testEntrySetRemoveAllNullFromEmpty() {\n"
    }
}