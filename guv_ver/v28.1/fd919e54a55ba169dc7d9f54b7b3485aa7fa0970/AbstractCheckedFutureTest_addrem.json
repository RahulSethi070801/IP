{
    "addition": {
        "27": " * Test case to make sure the {@link CheckedFuture#checkedGet()} and {@link\n",
        "28": " * CheckedFuture#checkedGet(long, TimeUnit)} methods work correctly.\n",
        "37": "  /** More specific type for the create method. */\n",
        "38": "  protected abstract <V> CheckedFuture<V, ?> createCheckedFuture(\n",
        "39": "      V value, Exception except, CountDownLatch waitOn);\n",
        "41": "  /** Checks that the exception is the correct type of cancellation exception. */\n",
        "44": "  /** Checks that the exception is the correct type of execution exception. */\n",
        "47": "  /** Checks that the exception is the correct type of interruption exception. */\n",
        "51": "  protected <V> ListenableFuture<V> createListenableFuture(\n",
        "52": "      V value, Exception except, CountDownLatch waitOn) {\n",
        "57": "   * Tests that the {@link CheckedFuture#checkedGet()} method throws the correct type of\n",
        "58": "   * cancellation exception when it is cancelled.\n",
        "62": "    final CheckedFuture<Boolean, ?> future = createCheckedFuture(Boolean.TRUE, null, latch);\n",
        "67": "    new Thread(\n",
        "68": "            new Runnable() {\n",
        "69": "              @Override\n",
        "70": "              public void run() {\n",
        "71": "                future.cancel(true);\n",
        "72": "              }\n",
        "73": "            })\n",
        "74": "        .start();\n",
        "87": "  public void testCheckedGetThrowsApplicationExceptionOnInterruption() throws InterruptedException {\n",
        "89": "    final CheckedFuture<Boolean, ?> future = createCheckedFuture(Boolean.TRUE, null, latch);\n",
        "97": "    Thread getThread =\n",
        "98": "        new Thread(\n",
        "99": "            new Runnable() {\n",
        "100": "              @Override\n",
        "101": "              public void run() {\n",
        "102": "                startingGate.countDown();\n",
        "103": "\n",
        "104": "                try {\n",
        "105": "                  future.checkedGet();\n",
        "106": "                } catch (Exception e) {\n",
        "107": "                  checkInterruptedException(e);\n",
        "108": "\n",
        "109": "                  // This only gets hit if the original call throws an exception and\n",
        "110": "                  // the check call above passes.\n",
        "111": "                  successLatch.countDown();\n",
        "112": "                }\n",
        "113": "              }\n",
        "114": "            });\n",
        "133": "    new Thread(\n",
        "134": "            new Runnable() {\n",
        "135": "              @Override\n",
        "136": "              public void run() {\n",
        "137": "                latch.countDown();\n",
        "138": "              }\n",
        "139": "            })\n",
        "140": "        .start();\n"
    },
    "removed": {
        "27": " * Test case to make sure the {@link CheckedFuture#checkedGet()} and\n",
        "28": " * {@link CheckedFuture#checkedGet(long, TimeUnit)} methods work correctly.\n",
        "37": "  /**\n",
        "38": "   * More specific type for the create method.\n",
        "39": "   */\n",
        "40": "  protected abstract <V> CheckedFuture<V, ?> createCheckedFuture(V value,\n",
        "41": "      Exception except, CountDownLatch waitOn);\n",
        "43": "  /**\n",
        "44": "   * Checks that the exception is the correct type of cancellation exception.\n",
        "45": "   */\n",
        "48": "  /**\n",
        "49": "   * Checks that the exception is the correct type of execution exception.\n",
        "50": "   */\n",
        "53": "  /**\n",
        "54": "   * Checks that the exception is the correct type of interruption exception.\n",
        "55": "   */\n",
        "59": "  protected <V> ListenableFuture<V> createListenableFuture(V value,\n",
        "60": "      Exception except, CountDownLatch waitOn) {\n",
        "65": "   * Tests that the {@link CheckedFuture#checkedGet()} method throws the correct\n",
        "66": "   * type of cancellation exception when it is cancelled.\n",
        "70": "    final CheckedFuture<Boolean, ?> future =\n",
        "71": "        createCheckedFuture(Boolean.TRUE, null, latch);\n",
        "76": "    new Thread(new Runnable() {\n",
        "77": "      @Override\n",
        "78": "      public void run() {\n",
        "79": "        future.cancel(true);\n",
        "80": "      }\n",
        "81": "    }).start();\n",
        "94": "  public void testCheckedGetThrowsApplicationExceptionOnInterruption()\n",
        "95": "      throws InterruptedException {\n",
        "97": "    final CheckedFuture<Boolean, ?> future =\n",
        "98": "        createCheckedFuture(Boolean.TRUE, null, latch);\n",
        "106": "    Thread getThread = new Thread(new Runnable() {\n",
        "107": "      @Override\n",
        "108": "      public void run() {\n",
        "109": "        startingGate.countDown();\n",
        "110": "\n",
        "111": "        try {\n",
        "112": "          future.checkedGet();\n",
        "113": "        } catch (Exception e) {\n",
        "114": "          checkInterruptedException(e);\n",
        "115": "\n",
        "116": "          // This only gets hit if the original call throws an exception and\n",
        "117": "          // the check call above passes.\n",
        "118": "          successLatch.countDown();\n",
        "119": "        }\n",
        "120": "      }\n",
        "121": "    });\n",
        "140": "    new Thread(new Runnable() {\n",
        "141": "      @Override\n",
        "142": "      public void run() {\n",
        "143": "        latch.countDown();\n",
        "144": "      }\n",
        "145": "    }).start();\n"
    }
}