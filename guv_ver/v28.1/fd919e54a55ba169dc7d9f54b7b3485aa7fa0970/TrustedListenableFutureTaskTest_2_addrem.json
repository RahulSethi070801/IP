{
    "addition": {
        "36": "/** Test case for {@link TrustedListenableFutureTask}. */\n",
        "66": "    TrustedListenableFutureTask<Integer> task =\n",
        "67": "        TrustedListenableFutureTask.create(\n",
        "68": "            new Callable<Integer>() {\n",
        "69": "              @Override\n",
        "70": "              public Integer call() throws Exception {\n",
        "71": "                throw e;\n",
        "72": "              }\n",
        "73": "            });\n",
        "91": "    final TrustedListenableFutureTask<Integer> task =\n",
        "92": "        TrustedListenableFutureTask.create(\n",
        "93": "            new Callable<Integer>() {\n",
        "94": "              @Override\n",
        "95": "              public Integer call() throws Exception {\n",
        "96": "                enterLatch.countDown();\n",
        "97": "                try {\n",
        "98": "                  new CountDownLatch(1).await(); // wait forever\n",
        "99": "                  throw new AssertionError();\n",
        "100": "                } catch (InterruptedException e) {\n",
        "101": "                  interruptedExceptionThrown.set(true);\n",
        "102": "                  throw e;\n",
        "103": "                } finally {\n",
        "104": "                }\n",
        "105": "              }\n",
        "106": "            });\n",
        "108": "    Thread thread =\n",
        "109": "        new Thread(\n",
        "110": "            new Runnable() {\n",
        "111": "              @Override\n",
        "112": "              public void run() {\n",
        "113": "                try {\n",
        "114": "                  task.run();\n",
        "115": "                } finally {\n",
        "116": "                  exitLatch.countDown();\n",
        "117": "                }\n",
        "118": "              }\n",
        "119": "            });\n",
        "143": "      final TrustedListenableFutureTask<Integer> task =\n",
        "144": "          TrustedListenableFutureTask.create(\n",
        "145": "              new Callable<Integer>() {\n",
        "146": "                @Override\n",
        "147": "                public Integer call() {\n",
        "148": "                  return counter.incrementAndGet();\n",
        "149": "                }\n",
        "150": "              });\n",
        "152": "      Runnable wrapper =\n",
        "153": "          new Runnable() {\n",
        "154": "            @Override\n",
        "155": "            public void run() {\n",
        "156": "              awaitUnchecked(barrier);\n",
        "157": "              task.run();\n",
        "158": "              awaitUnchecked(barrier);\n",
        "159": "            }\n",
        "160": "          };\n",
        "164": "      barrier.await(); // release the threads!\n",
        "165": "      barrier.await(); // wait for them all to complete\n"
    },
    "removed": {
        "36": "/**\n",
        "37": " * Test case for {@link TrustedListenableFutureTask}.\n",
        "38": " */\n",
        "68": "    TrustedListenableFutureTask<Integer> task = TrustedListenableFutureTask.create(\n",
        "69": "        new Callable<Integer>() {\n",
        "70": "          @Override public Integer call() throws Exception {\n",
        "71": "            throw e;\n",
        "72": "          }\n",
        "73": "        });\n",
        "91": "    final TrustedListenableFutureTask<Integer> task = TrustedListenableFutureTask.create(\n",
        "92": "        new Callable<Integer>() {\n",
        "93": "          @Override public Integer call() throws Exception {\n",
        "94": "            enterLatch.countDown();\n",
        "95": "            try {\n",
        "96": "              new CountDownLatch(1).await();  // wait forever\n",
        "97": "              throw new AssertionError();\n",
        "98": "            } catch (InterruptedException e) {\n",
        "99": "              interruptedExceptionThrown.set(true);\n",
        "100": "              throw e;\n",
        "101": "            } finally {\n",
        "102": "            }\n",
        "103": "          }\n",
        "104": "        });\n",
        "106": "    Thread thread = new Thread(new Runnable() {\n",
        "107": "      @Override public void run() {\n",
        "108": "        try {\n",
        "109": "          task.run();\n",
        "110": "        } finally {\n",
        "111": "          exitLatch.countDown();\n",
        "112": "        }\n",
        "113": "      }\n",
        "114": "    });\n",
        "138": "      final TrustedListenableFutureTask<Integer> task = TrustedListenableFutureTask.create(\n",
        "139": "          new Callable<Integer>() {\n",
        "140": "            @Override public Integer call() {\n",
        "141": "              return counter.incrementAndGet();\n",
        "142": "            }\n",
        "143": "          });\n",
        "145": "      Runnable wrapper = new Runnable() {\n",
        "146": "        @Override public void run() {\n",
        "147": "          awaitUnchecked(barrier);\n",
        "148": "          task.run();\n",
        "149": "          awaitUnchecked(barrier);\n",
        "150": "        }\n",
        "151": "      };\n",
        "155": "      barrier.await();  // release the threads!\n",
        "156": "      barrier.await();  // wait for them all to complete\n"
    }
}