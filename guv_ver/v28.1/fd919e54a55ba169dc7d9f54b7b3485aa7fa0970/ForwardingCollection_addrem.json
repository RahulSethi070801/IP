{
    "addition": {
        "27": " * A collection which forwards all its method calls to another collection. Subclasses should\n",
        "28": " * override one or more methods to modify the behavior of the backing collection as desired per the\n",
        "29": " * <a href=\"http://en.wikipedia.org/wiki/Decorator_pattern\">decorator pattern</a>.\n",
        "31": " * <p><b>Warning:</b> The methods of {@code ForwardingCollection} forward <b>indiscriminately</b> to\n",
        "32": " * the methods of the delegate. For example, overriding {@link #add} alone <b>will not</b> change\n",
        "33": " * the behavior of {@link #addAll}, which can lead to unexpected behavior. In this case, you should\n",
        "34": " * override {@code addAll} as well, either providing your own implementation, or delegating to the\n",
        "35": " * provided {@code standardAddAll} method.\n",
        "41": " * <p>The {@code standard} methods are not guaranteed to be thread-safe, even when all of the\n",
        "42": " * methods that they depend on are thread-safe.\n",
        "130": "   * A sensible definition of {@link #contains} in terms of {@link #iterator}. If you override\n",
        "131": "   * {@link #iterator}, you may wish to override {@link #contains} to forward to this\n",
        "132": "   * implementation.\n",
        "141": "   * A sensible definition of {@link #containsAll} in terms of {@link #contains} . If you override\n",
        "142": "   * {@link #contains}, you may wish to override {@link #containsAll} to forward to this\n",
        "143": "   * implementation.\n",
        "152": "   * A sensible definition of {@link #addAll} in terms of {@link #add}. If you override {@link\n",
        "153": "   * #add}, you may wish to override {@link #addAll} to forward to this implementation.\n",
        "162": "   * A sensible definition of {@link #remove} in terms of {@link #iterator}, using the iterator's\n",
        "163": "   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link\n",
        "164": "   * #remove} to forward to this implementation.\n",
        "180": "   * A sensible definition of {@link #removeAll} in terms of {@link #iterator}, using the iterator's\n",
        "181": "   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link\n",
        "182": "   * #removeAll} to forward to this implementation.\n",
        "191": "   * A sensible definition of {@link #retainAll} in terms of {@link #iterator}, using the iterator's\n",
        "192": "   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link\n",
        "193": "   * #retainAll} to forward to this implementation.\n",
        "202": "   * A sensible definition of {@link #clear} in terms of {@link #iterator}, using the iterator's\n",
        "203": "   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link\n",
        "204": "   * #clear} to forward to this implementation.\n",
        "213": "   * A sensible definition of {@link #isEmpty} as {@code !iterator().hasNext}. If you override\n",
        "214": "   * {@link #isEmpty}, you may wish to override {@link #isEmpty} to forward to this implementation.\n",
        "215": "   * Alternately, it may be more efficient to implement {@code isEmpty} as {@code size() == 0}.\n",
        "224": "   * A sensible definition of {@link #toString} in terms of {@link #iterator}. If you override\n",
        "225": "   * {@link #iterator}, you may wish to override {@link #toString} to forward to this\n",
        "226": "   * implementation.\n",
        "235": "   * A sensible definition of {@link #toArray()} in terms of {@link #toArray(Object[])}. If you\n",
        "236": "   * override {@link #toArray(Object[])}, you may wish to override {@link #toArray} to forward to\n",
        "237": "   * this implementation.\n",
        "247": "   * A sensible definition of {@link #toArray(Object[])} in terms of {@link #size} and {@link\n",
        "248": "   * #iterator}. If you override either of these methods, you may wish to override {@link #toArray}\n",
        "249": "   * to forward to this implementation.\n"
    },
    "removed": {
        "27": " * A collection which forwards all its method calls to another collection.\n",
        "28": " * Subclasses should override one or more methods to modify the behavior of the\n",
        "29": " * backing collection as desired per the <a\n",
        "30": " * href=\"http://en.wikipedia.org/wiki/Decorator_pattern\">decorator pattern</a>.\n",
        "32": " * <p><b>Warning:</b> The methods of {@code ForwardingCollection} forward\n",
        "33": " * <b>indiscriminately</b> to the methods of the delegate. For example,\n",
        "34": " * overriding {@link #add} alone <b>will not</b> change the behavior of {@link\n",
        "35": " * #addAll}, which can lead to unexpected behavior. In this case, you should\n",
        "36": " * override {@code addAll} as well, either providing your own implementation, or\n",
        "37": " * delegating to the provided {@code standardAddAll} method.\n",
        "43": " * <p>The {@code standard} methods are not guaranteed to be thread-safe, even\n",
        "44": " * when all of the methods that they depend on are thread-safe.\n",
        "132": "   * A sensible definition of {@link #contains} in terms of {@link #iterator}.\n",
        "133": "   * If you override {@link #iterator}, you may wish to override {@link\n",
        "134": "   * #contains} to forward to this implementation.\n",
        "143": "   * A sensible definition of {@link #containsAll} in terms of {@link #contains}\n",
        "144": "   * . If you override {@link #contains}, you may wish to override {@link\n",
        "145": "   * #containsAll} to forward to this implementation.\n",
        "154": "   * A sensible definition of {@link #addAll} in terms of {@link #add}. If you\n",
        "155": "   * override {@link #add}, you may wish to override {@link #addAll} to forward\n",
        "156": "   * to this implementation.\n",
        "165": "   * A sensible definition of {@link #remove} in terms of {@link #iterator},\n",
        "166": "   * using the iterator's {@code remove} method. If you override {@link\n",
        "167": "   * #iterator}, you may wish to override {@link #remove} to forward to this\n",
        "168": "   * implementation.\n",
        "184": "   * A sensible definition of {@link #removeAll} in terms of {@link #iterator},\n",
        "185": "   * using the iterator's {@code remove} method. If you override {@link\n",
        "186": "   * #iterator}, you may wish to override {@link #removeAll} to forward to this\n",
        "187": "   * implementation.\n",
        "196": "   * A sensible definition of {@link #retainAll} in terms of {@link #iterator},\n",
        "197": "   * using the iterator's {@code remove} method. If you override {@link\n",
        "198": "   * #iterator}, you may wish to override {@link #retainAll} to forward to this\n",
        "199": "   * implementation.\n",
        "208": "   * A sensible definition of {@link #clear} in terms of {@link #iterator},\n",
        "209": "   * using the iterator's {@code remove} method. If you override {@link\n",
        "210": "   * #iterator}, you may wish to override {@link #clear} to forward to this\n",
        "211": "   * implementation.\n",
        "220": "   * A sensible definition of {@link #isEmpty} as {@code !iterator().hasNext}.\n",
        "221": "   * If you override {@link #isEmpty}, you may wish to override {@link #isEmpty}\n",
        "222": "   * to forward to this implementation. Alternately, it may be more efficient to\n",
        "223": "   * implement {@code isEmpty} as {@code size() == 0}.\n",
        "232": "   * A sensible definition of {@link #toString} in terms of {@link #iterator}.\n",
        "233": "   * If you override {@link #iterator}, you may wish to override {@link\n",
        "234": "   * #toString} to forward to this implementation.\n",
        "243": "   * A sensible definition of {@link #toArray()} in terms of {@link\n",
        "244": "   * #toArray(Object[])}. If you override {@link #toArray(Object[])}, you may\n",
        "245": "   * wish to override {@link #toArray} to forward to this implementation.\n",
        "255": "   * A sensible definition of {@link #toArray(Object[])} in terms of {@link\n",
        "256": "   * #size} and {@link #iterator}. If you override either of these methods, you\n",
        "257": "   * may wish to override {@link #toArray} to forward to this implementation.\n"
    }
}