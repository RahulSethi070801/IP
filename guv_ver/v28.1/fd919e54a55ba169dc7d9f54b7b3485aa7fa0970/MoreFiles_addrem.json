{
    "addition": {
        "120": "          path,\n",
        "121": "          BasicFileAttributes.class,\n",
        "122": "          followLinks ? FOLLOW_LINKS : new LinkOption[] {NOFOLLOW_LINKS});\n",
        "242": "   * Returns a view of the given {@code path} as a {@link CharSink} using the given {@code charset}.\n",
        "447": "   *     directories of the specified file could not be created.\n",
        "449": "  public static void createParentDirectories(Path path, FileAttribute<?>... attrs)\n",
        "450": "      throws IOException {\n",
        "458": "      // The given directory is a filesystem root. All zero of its ancestors exist. This doesn't\n",
        "459": "      // mean that the root itself exists -- consider x:\\ on a Windows machine without such a\n",
        "460": "      // drive -- or even that the caller can create it, but this method makes no such guarantees\n",
        "461": "      // even for non-root files.\n",
        "503": "   * Returns the file name without its <a\n",
        "504": "   * href=\"http://en.wikipedia.org/wiki/Filename_extension\">file extension</a> or path. This is\n",
        "531": "   * <p>On a file system that supports symbolic links and does <i>not</i> support {@link\n",
        "532": "   * SecureDirectoryStream}, it is possible for a recursive delete to delete files and directories\n",
        "533": "   * that are <i>outside</i> the directory being deleted. This can happen if, after checking that a\n",
        "534": "   * file is a directory (and not a symbolic link), that directory is replaced by a symbolic link to\n",
        "535": "   * an outside directory before the call that opens the directory to read its entries.\n",
        "538": "   * guarantee the security of recursive deletes. If you wish to allow the recursive deletes anyway,\n",
        "539": "   * pass {@link RecursiveDeleteOption#ALLOW_INSECURE} to this method to override that behavior.\n",
        "541": "   * @throws NoSuchFileException if {@code path} does not exist <i>(optional specific exception)</i>\n",
        "548": "  public static void deleteRecursively(Path path, RecursiveDeleteOption... options)\n",
        "549": "      throws IOException {\n",
        "561": "          exceptions =\n",
        "562": "              deleteRecursivelySecure((SecureDirectoryStream<Path>) parent, path.getFileName());\n",
        "584": "   * Deletes all files within the directory at the given {@code path} {@linkplain #deleteRecursively\n",
        "585": "   * recursively}. Does not delete the directory itself. Deletes symbolic links, not their targets\n",
        "586": "   * (subject to the caveat below). If {@code path} itself is a symbolic link to a directory, that\n",
        "587": "   * link is followed and the contents of the directory it targets are deleted.\n",
        "596": "   * <p>On a file system that supports symbolic links and does <i>not</i> support {@link\n",
        "597": "   * SecureDirectoryStream}, it is possible for a recursive delete to delete files and directories\n",
        "598": "   * that are <i>outside</i> the directory being deleted. This can happen if, after checking that a\n",
        "599": "   * file is a directory (and not a symbolic link), that directory is replaced by a symbolic link to\n",
        "600": "   * an outside directory before the call that opens the directory to read its entries.\n",
        "603": "   * guarantee the security of recursive deletes. If you wish to allow the recursive deletes anyway,\n",
        "604": "   * pass {@link RecursiveDeleteOption#ALLOW_INSECURE} to this method to override that behavior.\n",
        "606": "   * @throws NoSuchFileException if {@code path} does not exist <i>(optional specific exception)</i>\n",
        "614": "  public static void deleteDirectoryContents(Path path, RecursiveDeleteOption... options)\n",
        "615": "      throws IOException {\n",
        "639": "   * Secure recursive delete using {@code SecureDirectoryStream}. Returns a collection of exceptions\n",
        "640": "   * that occurred or null if no exceptions were thrown.\n",
        "714": "   * support {@code SecureDirectoryStream}. Returns a collection of exceptions that occurred or null\n",
        "715": "   * if no exceptions were thrown.\n",
        "771": "  /** Checks that the given options allow an insecure delete, throwing an exception if not. */\n",
        "772": "  private static void checkAllowsInsecure(Path path, RecursiveDeleteOption[] options)\n",
        "773": "      throws InsecureRecursiveDeleteException {\n",
        "779": "  /** Returns whether or not the file with the given name in the given dir is a directory. */\n",
        "788": "   * Adds the given exception to the given collection, creating the collection if it's null. Returns\n",
        "789": "   * the collection.\n",
        "817": "   * Throws an exception indicating that one or more files couldn't be deleted. The thrown exception\n",
        "818": "   * contains all the exceptions in the given collection as suppressed exceptions.\n",
        "820": "  private static void throwDeleteFailed(Path path, Collection<IOException> exceptions)\n",
        "821": "      throws FileSystemException {\n",
        "825": "    FileSystemException deleteFailed =\n",
        "826": "        new FileSystemException(\n",
        "827": "            path.toString(),\n",
        "828": "            null,\n",
        "829": "            \"failed to delete one or more files; see suppressed exceptions for details\");\n"
    },
    "removed": {
        "120": "          path, BasicFileAttributes.class,\n",
        "121": "          followLinks ? FOLLOW_LINKS : new LinkOption[] { NOFOLLOW_LINKS });\n",
        "241": "   * Returns a view of the given {@code path} as a {@link CharSink} using the given {@code\n",
        "242": "   * charset}.\n",
        "447": "   *                     directories of the specified file could not be created.\n",
        "449": "  public static void createParentDirectories(\n",
        "450": "      Path path, FileAttribute<?>... attrs) throws IOException {\n",
        "458": "       // The given directory is a filesystem root. All zero of its ancestors exist. This doesn't\n",
        "459": "       // mean that the root itself exists -- consider x:\\ on a Windows machine without such a\n",
        "460": "       // drive -- or even that the caller can create it, but this method makes no such guarantees\n",
        "461": "       // even for non-root files.\n",
        "503": "   * Returns the file name without its\n",
        "504": "   * <a href=\"http://en.wikipedia.org/wiki/Filename_extension\">file extension</a> or path. This is\n",
        "531": "   * <p>On a file system that supports symbolic links and does <i>not</i> support\n",
        "532": "   * {@link SecureDirectoryStream}, it is possible for a recursive delete to delete files and\n",
        "533": "   * directories that are <i>outside</i> the directory being deleted. This can happen if, after\n",
        "534": "   * checking that a file is a directory (and not a symbolic link), that directory is replaced by a\n",
        "535": "   * symbolic link to an outside directory before the call that opens the directory to read its\n",
        "536": "   * entries.\n",
        "539": "   * guarantee the security of recursive deletes. If you wish to allow the recursive deletes\n",
        "540": "   * anyway, pass {@link RecursiveDeleteOption#ALLOW_INSECURE} to this method to override that\n",
        "541": "   * behavior.\n",
        "543": "   * @throws NoSuchFileException if {@code path} does not exist <i>(optional specific\n",
        "544": "   *     exception)</i>\n",
        "551": "  public static void deleteRecursively(\n",
        "552": "      Path path, RecursiveDeleteOption... options) throws IOException {\n",
        "564": "          exceptions = deleteRecursivelySecure(\n",
        "565": "              (SecureDirectoryStream<Path>) parent, path.getFileName());\n",
        "587": "   * Deletes all files within the directory at the given {@code path}\n",
        "588": "   * {@linkplain #deleteRecursively recursively}. Does not delete the directory itself. Deletes\n",
        "589": "   * symbolic links, not their targets (subject to the caveat below). If {@code path} itself is\n",
        "590": "   * a symbolic link to a directory, that link is followed and the contents of the directory it\n",
        "591": "   * targets are deleted.\n",
        "600": "   * <p>On a file system that supports symbolic links and does <i>not</i> support\n",
        "601": "   * {@link SecureDirectoryStream}, it is possible for a recursive delete to delete files and\n",
        "602": "   * directories that are <i>outside</i> the directory being deleted. This can happen if, after\n",
        "603": "   * checking that a file is a directory (and not a symbolic link), that directory is replaced by a\n",
        "604": "   * symbolic link to an outside directory before the call that opens the directory to read its\n",
        "605": "   * entries.\n",
        "608": "   * guarantee the security of recursive deletes. If you wish to allow the recursive deletes\n",
        "609": "   * anyway, pass {@link RecursiveDeleteOption#ALLOW_INSECURE} to this method to override that\n",
        "610": "   * behavior.\n",
        "612": "   * @throws NoSuchFileException if {@code path} does not exist <i>(optional specific\n",
        "613": "   *     exception)</i>\n",
        "621": "  public static void deleteDirectoryContents(\n",
        "622": "      Path path, RecursiveDeleteOption... options) throws IOException {\n",
        "646": "   * Secure recursive delete using {@code SecureDirectoryStream}. Returns a collection of\n",
        "647": "   * exceptions that occurred or null if no exceptions were thrown.\n",
        "721": "   * support {@code SecureDirectoryStream}. Returns a collection of exceptions that occurred or\n",
        "722": "   * null if no exceptions were thrown.\n",
        "778": "  /**\n",
        "779": "   * Checks that the given options allow an insecure delete, throwing an exception if not.\n",
        "780": "   */\n",
        "781": "  private static void checkAllowsInsecure(\n",
        "782": "      Path path, RecursiveDeleteOption[] options) throws InsecureRecursiveDeleteException {\n",
        "788": "  /**\n",
        "789": "   * Returns whether or not the file with the given name in the given dir is a directory.\n",
        "790": "   */\n",
        "799": "   * Adds the given exception to the given collection, creating the collection if it's null.\n",
        "800": "   * Returns the collection.\n",
        "828": "   * Throws an exception indicating that one or more files couldn't be deleted. The thrown\n",
        "829": "   * exception contains all the exceptions in the given collection as suppressed exceptions.\n",
        "831": "  private static void throwDeleteFailed(\n",
        "832": "      Path path, Collection<IOException> exceptions) throws FileSystemException {\n",
        "836": "    FileSystemException deleteFailed = new FileSystemException(path.toString(), null,\n",
        "837": "        \"failed to delete one or more files; see suppressed exceptions for details\");\n"
    }
}