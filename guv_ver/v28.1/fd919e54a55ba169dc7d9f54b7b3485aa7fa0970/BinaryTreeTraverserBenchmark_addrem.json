{
    "addition": {
        "53": "          return Optional.of(\n",
        "54": "              new BinaryNode(\n",
        "55": "                  rng.nextInt(), createTree(leftChildSize, rng), createTree(rightChildSize, rng)));\n",
        "116": "        @Override\n",
        "117": "        public Optional<BinaryNode> leftChild(BinaryNode node) {\n",
        "118": "          return node.left;\n",
        "119": "        }\n",
        "121": "        @Override\n",
        "122": "        public Optional<BinaryNode> rightChild(BinaryNode node) {\n",
        "123": "          return node.right;\n",
        "124": "        }\n",
        "125": "      };\n",
        "127": "  private static final TreeTraverser<BinaryNode> VIEWER =\n",
        "128": "      new TreeTraverser<BinaryNode>() {\n",
        "129": "        @Override\n",
        "130": "        public Iterable<BinaryNode> children(BinaryNode root) {\n",
        "131": "          return BINARY_VIEWER.children(root);\n",
        "132": "        }\n",
        "133": "      };\n",
        "160": "  @Param Topology topology;\n",
        "165": "  @Param Traversal traversal;\n",
        "167": "  @Param boolean useBinaryTraverser;\n",
        "174": "    this.view =\n",
        "175": "        traversal.view(\n",
        "176": "            topology.createTree(size, rng).get(), useBinaryTraverser ? BINARY_VIEWER : VIEWER);\n",
        "179": "  @Benchmark\n",
        "180": "  int traversal(int reps) {\n"
    },
    "removed": {
        "53": "          return Optional.of(new BinaryNode(\n",
        "54": "              rng.nextInt(), createTree(leftChildSize, rng), createTree(rightChildSize, rng)));\n",
        "115": "    @Override\n",
        "116": "    public Optional<BinaryNode> leftChild(BinaryNode node) {\n",
        "117": "      return node.left;\n",
        "118": "    }\n",
        "120": "    @Override\n",
        "121": "    public Optional<BinaryNode> rightChild(BinaryNode node) {\n",
        "122": "      return node.right;\n",
        "123": "    }\n",
        "124": "  };\n",
        "126": "  private static final TreeTraverser<BinaryNode> VIEWER = new TreeTraverser<BinaryNode>() {\n",
        "127": "    @Override\n",
        "128": "    public Iterable<BinaryNode> children(BinaryNode root) {\n",
        "129": "      return BINARY_VIEWER.children(root);\n",
        "130": "    }\n",
        "131": "  };\n",
        "158": "  @Param\n",
        "159": "  Topology topology;\n",
        "164": "  @Param\n",
        "165": "  Traversal traversal;\n",
        "167": "  @Param\n",
        "168": "  boolean useBinaryTraverser;\n",
        "175": "    this.view = traversal.view(\n",
        "176": "        topology.createTree(size, rng).get(),\n",
        "177": "        useBinaryTraverser ? BINARY_VIEWER : VIEWER);\n",
        "180": "  @Benchmark int traversal(int reps) {\n"
    }
}