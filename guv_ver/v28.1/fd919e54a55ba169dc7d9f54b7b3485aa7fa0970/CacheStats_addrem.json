{
    "addition": {
        "31": " *   <li>When a cache lookup encounters an existing cache entry {@code hitCount} is incremented.\n",
        "32": " *   <li>When a cache lookup first encounters a missing cache entry, a new entry is loaded.\n",
        "33": " *       <ul>\n",
        "34": " *         <li>After successfully loading an entry {@code missCount} and {@code loadSuccessCount}\n",
        "35": " *             are incremented, and the total loading time, in nanoseconds, is added to {@code\n",
        "36": " *             totalLoadTime}.\n",
        "37": " *         <li>When an exception is thrown while loading an entry, {@code missCount} and {@code\n",
        "38": " *             loadExceptionCount} are incremented, and the total loading time, in nanoseconds, is\n",
        "39": " *             added to {@code totalLoadTime}.\n",
        "40": " *         <li>Cache lookups that encounter a missing cache entry that is still loading will wait\n",
        "41": " *             for loading to complete (whether successful or not) and then increment {@code\n",
        "42": " *             missCount}.\n",
        "43": " *       </ul>\n",
        "44": " *   <li>When an entry is evicted from the cache, {@code evictionCount} is incremented.\n",
        "45": " *   <li>No stats are modified when a cache entry is invalidated or manually removed.\n",
        "46": " *   <li>No stats are modified by operations invoked on the {@linkplain Cache#asMap asMap} view of\n",
        "47": " *       the cache.\n",
        "50": " * <p>A lookup is specifically defined as an invocation of one of the methods {@link\n",
        "51": " * LoadingCache#get(Object)}, {@link LoadingCache#getUnchecked(Object)}, {@link Cache#get(Object,\n",
        "52": " * Callable)}, or {@link LoadingCache#getAll(Iterable)}.\n",
        "102": "  /** Returns the number of times {@link Cache} lookup methods have returned a cached value. */\n",
        "108": "   * Returns the ratio of cache requests which were hits. This is defined as {@code hitCount /\n",
        "109": "   * requestCount}, or {@code 1.0} when {@code requestCount == 0}. Note that {@code hitRate +\n",
        "110": "   * missRate =~ 1.0}.\n",
        "128": "   * Returns the ratio of cache requests which were misses. This is defined as {@code missCount /\n",
        "129": "   * requestCount}, or {@code 0.0} when {@code requestCount == 0}. Note that {@code hitRate +\n",
        "130": "   * missRate =~ 1.0}. Cache misses include all requests which weren't cache hits, including\n",
        "131": "   * requests which resulted in either successful or failed loading attempts, and requests which\n",
        "132": "   * waited for other threads to finish loading. It is thus the case that {@code missCount &gt;=\n",
        "133": "   * loadSuccessCount + loadExceptionCount}. Multiple concurrent misses for the same key will result\n",
        "134": "   * in a single load operation.\n",
        "153": "   * also incremented when an exception is encountered during cache loading (see {@link\n",
        "154": "   * #loadExceptionCount}). Multiple concurrent misses for the same key will result in a single load\n",
        "155": "   * operation. This may be incremented not in conjunction with {@code missCount} if the load occurs\n",
        "156": "   * as a result of a refresh or if the cache loader returned more items than was requested. {@code\n",
        "157": "   * missCount} may also be incremented not in conjunction with this (nor {@link\n",
        "158": "   * #loadExceptionCount}) on calls to {@code getIfPresent}.\n",
        "166": "   * value. This is usually incremented in conjunction with {@code missCount}, though {@code\n",
        "167": "   * missCount} is also incremented when cache loading completes successfully (see {@link\n",
        "168": "   * #loadSuccessCount}). Multiple concurrent misses for the same key will result in a single load\n",
        "169": "   * operation. This may be incremented not in conjunction with {@code missCount} if the load occurs\n",
        "170": "   * as a result of a refresh or if the cache loader returned more items than was requested. {@code\n",
        "171": "   * missCount} may also be incremented not in conjunction with this (nor {@link #loadSuccessCount})\n",
        "172": "   * on calls to {@code getIfPresent}.\n",
        "179": "   * Returns the ratio of cache loading attempts which threw exceptions. This is defined as {@code\n",
        "180": "   * loadExceptionCount / (loadSuccessCount + loadExceptionCount)}, or {@code 0.0} when {@code\n",
        "181": "   * loadSuccessCount + loadExceptionCount == 0}.\n",
        "198": "   * Returns the average time spent loading new values. This is defined as {@code totalLoadTime /\n",
        "199": "   * (loadSuccessCount + loadExceptionCount)}.\n",
        "230": "   * Returns a new {@code CacheStats} representing the sum of this {@code CacheStats} and {@code\n",
        "231": "   * other}.\n"
    },
    "removed": {
        "31": " * <li>When a cache lookup encounters an existing cache entry {@code hitCount} is incremented.\n",
        "32": " * <li>When a cache lookup first encounters a missing cache entry, a new entry is loaded.\n",
        "33": " * <ul>\n",
        "34": " * <li>After successfully loading an entry {@code missCount} and {@code loadSuccessCount} are\n",
        "35": " *     incremented, and the total loading time, in nanoseconds, is added to {@code totalLoadTime}.\n",
        "36": " * <li>When an exception is thrown while loading an entry, {@code missCount} and {@code\n",
        "37": " *     loadExceptionCount} are incremented, and the total loading time, in nanoseconds, is added to\n",
        "38": " *     {@code totalLoadTime}.\n",
        "39": " * <li>Cache lookups that encounter a missing cache entry that is still loading will wait for\n",
        "40": " *     loading to complete (whether successful or not) and then increment {@code missCount}.\n",
        "41": " * </ul>\n",
        "42": " * <li>When an entry is evicted from the cache, {@code evictionCount} is incremented.\n",
        "43": " * <li>No stats are modified when a cache entry is invalidated or manually removed.\n",
        "44": " * <li>No stats are modified by operations invoked on the {@linkplain Cache#asMap asMap} view of the\n",
        "45": " *     cache.\n",
        "48": " * <p>A lookup is specifically defined as an invocation of one of the methods\n",
        "49": " * {@link LoadingCache#get(Object)}, {@link LoadingCache#getUnchecked(Object)},\n",
        "50": " * {@link Cache#get(Object, Callable)}, or {@link LoadingCache#getAll(Iterable)}.\n",
        "100": "  /**\n",
        "101": "   * Returns the number of times {@link Cache} lookup methods have returned a cached value.\n",
        "102": "   */\n",
        "108": "   * Returns the ratio of cache requests which were hits. This is defined as\n",
        "109": "   * {@code hitCount / requestCount}, or {@code 1.0} when {@code requestCount == 0}. Note that\n",
        "110": "   * {@code hitRate + missRate =~ 1.0}.\n",
        "128": "   * Returns the ratio of cache requests which were misses. This is defined as\n",
        "129": "   * {@code missCount / requestCount}, or {@code 0.0} when {@code requestCount == 0}. Note that\n",
        "130": "   * {@code hitRate + missRate =~ 1.0}. Cache misses include all requests which weren't cache hits,\n",
        "131": "   * including requests which resulted in either successful or failed loading attempts, and requests\n",
        "132": "   * which waited for other threads to finish loading. It is thus the case that\n",
        "133": "   * {@code missCount &gt;= loadSuccessCount + loadExceptionCount}. Multiple concurrent misses for\n",
        "134": "   * the same key will result in a single load operation.\n",
        "153": "   * also incremented when an exception is encountered during cache loading (see\n",
        "154": "   * {@link #loadExceptionCount}). Multiple concurrent misses for the same key will result in a\n",
        "155": "   * single load operation. This may be incremented not in conjunction with {@code missCount} if the\n",
        "156": "   * load occurs as a result of a refresh or if the cache loader returned more items than was\n",
        "157": "   * requested. {@code missCount} may also be incremented not in conjunction with this (nor\n",
        "158": "   * {@link #loadExceptionCount}) on calls to {@code getIfPresent}.\n",
        "166": "   * value. This is usually incremented in conjunction with {@code missCount}, though\n",
        "167": "   * {@code missCount} is also incremented when cache loading completes successfully (see\n",
        "168": "   * {@link #loadSuccessCount}). Multiple concurrent misses for the same key will result in a single\n",
        "169": "   * load operation. This may be incremented not in conjunction with {@code missCount} if the load\n",
        "170": "   * occurs as a result of a refresh or if the cache loader returned more items than was requested.\n",
        "171": "   * {@code missCount} may also be incremented not in conjunction with this (nor\n",
        "172": "   * {@link #loadSuccessCount}) on calls to {@code getIfPresent}.\n",
        "179": "   * Returns the ratio of cache loading attempts which threw exceptions. This is defined as\n",
        "180": "   * {@code loadExceptionCount / (loadSuccessCount + loadExceptionCount)}, or {@code 0.0} when\n",
        "181": "   * {@code loadSuccessCount + loadExceptionCount == 0}.\n",
        "198": "   * Returns the average time spent loading new values. This is defined as\n",
        "199": "   * {@code totalLoadTime / (loadSuccessCount + loadExceptionCount)}.\n",
        "230": "   * Returns a new {@code CacheStats} representing the sum of this {@code CacheStats} and\n",
        "231": "   * {@code other}.\n"
    }
}