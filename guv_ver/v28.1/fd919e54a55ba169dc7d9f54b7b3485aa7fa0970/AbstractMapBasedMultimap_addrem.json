{
    "addition": {
        "46": " * Basic implementation of the {@link Multimap} interface. This class represents a multimap as a map\n",
        "47": " * that associates each key with a collection of values. All methods of {@link Multimap} are\n",
        "48": " * supported, including those specified as optional in the interface.\n",
        "50": " * <p>To implement a multimap, a subclass must define the method {@link #createCollection()}, which\n",
        "51": " * creates an empty collection of values for a key.\n",
        "53": " * <p>The multimap constructor takes a map that has a single entry for each distinct key. When you\n",
        "54": " * insert a key-value pair with a key that isn't already in the multimap, {@code\n",
        "55": " * AbstractMapBasedMultimap} calls {@link #createCollection()} to create the collection of values\n",
        "56": " * for that key. The subclass should not call {@link #createCollection()} directly, and a new\n",
        "57": " * instance should be created every time the method is called.\n",
        "59": " * <p>For example, the subclass could pass a {@link java.util.TreeMap} during construction, and\n",
        "60": " * {@link #createCollection()} could return a {@link java.util.TreeSet}, in which case the\n",
        "61": " * multimap's iterators would propagate through the keys and values in sorted order.\n",
        "63": " * <p>Keys and values may be null, as long as the underlying collection classes support null\n",
        "64": " * elements.\n",
        "66": " * <p>The collections created by {@link #createCollection()} may or may not allow duplicates. If the\n",
        "67": " * collection, such as a {@link Set}, does not support duplicates, an added key-value pair will\n",
        "68": " * replace an existing pair with the same key and value, if such a pair is present. With collections\n",
        "69": " * like {@link List} that allow duplicates, the collection will keep the existing key-value pairs\n",
        "70": " * while adding a new pair.\n",
        "72": " * <p>This class is not threadsafe when any concurrent operations update the multimap, even if the\n",
        "73": " * underlying map and {@link #createCollection()} method return threadsafe classes. Concurrent read\n",
        "74": " * operations will work correctly. To allow concurrent update operations, wrap your multimap with a\n",
        "75": " * call to {@link Multimaps#synchronizedMultimap}.\n",
        "77": " * <p>For serialization to work, the subclass must specify explicit {@code readObject} and {@code\n",
        "78": " * writeObject} methods.\n",
        "111": "   * @param map place to store the mapping from each key to its corresponding values\n",
        "141": "   * <p>Collections with weak, soft, or phantom references are not supported. Each call to {@code\n",
        "142": "   * createCollection} should create a new instance.\n",
        "144": "   * <p>The returned collection class determines whether duplicate key-value pairs are allowed.\n",
        "151": "   * Creates the collection of values for an explicitly provided key. By default, it simply calls\n",
        "152": "   * {@link #createCollection()}, which is the correct behavior for most implementations. The {@link\n",
        "153": "   * LinkedHashMultimap} class overrides it.\n",
        "302": "   * Generates a decorated collection that remains consistent with the values in the multimap for\n",
        "303": "   * the provided key. Changes to the multimap may alter the returned collection, and vice versa.\n",
        "326": "   * Collection decorator that stays in sync with the multimap values for a key. There are two kinds\n",
        "327": "   * of wrapped collections: full and subcollections. Both have a delegate pointing to the\n",
        "328": "   * underlying collection class.\n",
        "330": "   * <p>Full collections, identified by a null ancestor field, contain all multimap values for a\n",
        "331": "   * given key. Its delegate is a value in {@link AbstractMapBasedMultimap#map} whenever the\n",
        "332": "   * delegate is non-empty. The {@code refreshIfEmpty}, {@code removeIfEmpty}, and {@code addToMap}\n",
        "333": "   * methods ensure that the {@code WrappedCollection} and map remain consistent.\n",
        "335": "   * <p>A subcollection, such as a sublist, contains some of the values for a given key. Its\n",
        "336": "   * ancestor field points to the full wrapped collection with all values for the key. The\n",
        "337": "   * subcollection {@code refreshIfEmpty}, {@code removeIfEmpty}, and {@code addToMap} methods call\n",
        "338": "   * the corresponding methods of the full wrapped collection.\n",
        "356": "     * If the delegate collection is empty, but the multimap has values for the key, replace the\n",
        "357": "     * delegate with the new collection for the key.\n",
        "359": "     * <p>For a subcollection, refresh its ancestor and validate that the ancestor delegate hasn't\n",
        "360": "     * changed.\n",
        "377": "     * If collection is empty, remove it from {@code AbstractMapBasedMultimap.this.map}. For\n",
        "378": "     * subcollections, check whether the ancestor collection is empty.\n",
        "393": "     * Add the delegate to the map. Other {@code WrappedCollection} methods should call this method\n",
        "394": "     * after adding elements to a previously empty collection.\n",
        "457": "       * If the delegate changed since the iterator was created, the iterator is no longer valid.\n",
        "624": "  /** SortedSet decorator that stays in sync with the multimap values for a key. */\n",
        "897": "   * List decorator that stays in sync with the multimap values for a key and supports rapid random\n",
        "898": "   * access.\n",
        "1113": "  /** Removes all values for the provided key. */\n",
        "1168": "   * <p>The iterator generated by the returned collection traverses the values for one key, followed\n",
        "1169": "   * by the values of a second key, and so on.\n",
        "1195": "   * <p>The iterator generated by the returned collection traverses the values for one key, followed\n",
        "1196": "   * by the values of a second key, and so on.\n",
        "1198": "   * <p>Each entry is an immutable snapshot of a key-value mapping in the multimap, taken at the\n",
        "1199": "   * time the entry is returned by a method call to the collection or its iterator.\n",
        "1207": "   * Returns an iterator across all key-value map entries, used by {@code entries().iterator()} and\n",
        "1208": "   * {@code values().iterator()}. The default behavior, which traverses the values for one key, the\n",
        "1209": "   * values for a second key, and so on, suffices for most {@code AbstractMapBasedMultimap}\n",
        "1210": "   * implementations.\n",
        "1238": "     * Usually the same as map, but smaller for the headMap(), tailMap(), or subMap() of a\n",
        "1239": "     * SortedAsMap.\n"
    },
    "removed": {
        "46": " * Basic implementation of the {@link Multimap} interface. This class represents\n",
        "47": " * a multimap as a map that associates each key with a collection of values. All\n",
        "48": " * methods of {@link Multimap} are supported, including those specified as\n",
        "49": " * optional in the interface.\n",
        "51": " * <p>To implement a multimap, a subclass must define the method {@link\n",
        "52": " * #createCollection()}, which creates an empty collection of values for a key.\n",
        "54": " * <p>The multimap constructor takes a map that has a single entry for each\n",
        "55": " * distinct key. When you insert a key-value pair with a key that isn't already\n",
        "56": " * in the multimap, {@code AbstractMapBasedMultimap} calls {@link #createCollection()}\n",
        "57": " * to create the collection of values for that key. The subclass should not call\n",
        "58": " * {@link #createCollection()} directly, and a new instance should be created\n",
        "59": " * every time the method is called.\n",
        "61": " * <p>For example, the subclass could pass a {@link java.util.TreeMap} during\n",
        "62": " * construction, and {@link #createCollection()} could return a {@link\n",
        "63": " * java.util.TreeSet}, in which case the multimap's iterators would propagate\n",
        "64": " * through the keys and values in sorted order.\n",
        "66": " * <p>Keys and values may be null, as long as the underlying collection classes\n",
        "67": " * support null elements.\n",
        "69": " * <p>The collections created by {@link #createCollection()} may or may not\n",
        "70": " * allow duplicates. If the collection, such as a {@link Set}, does not support\n",
        "71": " * duplicates, an added key-value pair will replace an existing pair with the\n",
        "72": " * same key and value, if such a pair is present. With collections like {@link\n",
        "73": " * List} that allow duplicates, the collection will keep the existing key-value\n",
        "74": " * pairs while adding a new pair.\n",
        "76": " * <p>This class is not threadsafe when any concurrent operations update the\n",
        "77": " * multimap, even if the underlying map and {@link #createCollection()} method\n",
        "78": " * return threadsafe classes. Concurrent read operations will work correctly. To\n",
        "79": " * allow concurrent update operations, wrap your multimap with a call to {@link\n",
        "80": " * Multimaps#synchronizedMultimap}.\n",
        "82": " * <p>For serialization to work, the subclass must specify explicit\n",
        "83": " * {@code readObject} and {@code writeObject} methods.\n",
        "116": "   * @param map place to store the mapping from each key to its corresponding\n",
        "117": "   *     values\n",
        "147": "   * <p>Collections with weak, soft, or phantom references are not supported.\n",
        "148": "   * Each call to {@code createCollection} should create a new instance.\n",
        "150": "   * <p>The returned collection class determines whether duplicate key-value\n",
        "151": "   * pairs are allowed.\n",
        "158": "   * Creates the collection of values for an explicitly provided key. By\n",
        "159": "   * default, it simply calls {@link #createCollection()}, which is the correct\n",
        "160": "   * behavior for most implementations. The {@link LinkedHashMultimap} class\n",
        "161": "   * overrides it.\n",
        "310": "   * Generates a decorated collection that remains consistent with the values in\n",
        "311": "   * the multimap for the provided key. Changes to the multimap may alter the\n",
        "312": "   * returned collection, and vice versa.\n",
        "335": "   * Collection decorator that stays in sync with the multimap values for a key.\n",
        "336": "   * There are two kinds of wrapped collections: full and subcollections. Both\n",
        "337": "   * have a delegate pointing to the underlying collection class.\n",
        "339": "   * <p>Full collections, identified by a null ancestor field, contain all\n",
        "340": "   * multimap values for a given key. Its delegate is a value in {@link\n",
        "341": "   * AbstractMapBasedMultimap#map} whenever the delegate is non-empty. The {@code\n",
        "342": "   * refreshIfEmpty}, {@code removeIfEmpty}, and {@code addToMap} methods ensure\n",
        "343": "   * that the {@code WrappedCollection} and map remain consistent.\n",
        "345": "   * <p>A subcollection, such as a sublist, contains some of the values for a\n",
        "346": "   * given key. Its ancestor field points to the full wrapped collection with\n",
        "347": "   * all values for the key. The subcollection {@code refreshIfEmpty}, {@code\n",
        "348": "   * removeIfEmpty}, and {@code addToMap} methods call the corresponding methods\n",
        "349": "   * of the full wrapped collection.\n",
        "367": "     * If the delegate collection is empty, but the multimap has values for the\n",
        "368": "     * key, replace the delegate with the new collection for the key.\n",
        "370": "     * <p>For a subcollection, refresh its ancestor and validate that the\n",
        "371": "     * ancestor delegate hasn't changed.\n",
        "388": "     * If collection is empty, remove it from {@code AbstractMapBasedMultimap.this.map}.\n",
        "389": "     * For subcollections, check whether the ancestor collection is empty.\n",
        "404": "     * Add the delegate to the map. Other {@code WrappedCollection} methods\n",
        "405": "     * should call this method after adding elements to a previously empty\n",
        "406": "     * collection.\n",
        "469": "       * If the delegate changed since the iterator was created, the iterator is\n",
        "470": "       * no longer valid.\n",
        "637": "  /**\n",
        "638": "   * SortedSet decorator that stays in sync with the multimap values for a key.\n",
        "639": "   */\n",
        "912": "   * List decorator that stays in sync with the multimap values for a key and\n",
        "913": "   * supports rapid random access.\n",
        "1128": "  /**\n",
        "1129": "   * Removes all values for the provided key.\n",
        "1130": "   */\n",
        "1185": "   * <p>The iterator generated by the returned collection traverses the values\n",
        "1186": "   * for one key, followed by the values of a second key, and so on.\n",
        "1212": "   * <p>The iterator generated by the returned collection traverses the values\n",
        "1213": "   * for one key, followed by the values of a second key, and so on.\n",
        "1215": "   * <p>Each entry is an immutable snapshot of a key-value mapping in the\n",
        "1216": "   * multimap, taken at the time the entry is returned by a method call to the\n",
        "1217": "   * collection or its iterator.\n",
        "1225": "   * Returns an iterator across all key-value map entries, used by {@code\n",
        "1226": "   * entries().iterator()} and {@code values().iterator()}. The default\n",
        "1227": "   * behavior, which traverses the values for one key, the values for a second\n",
        "1228": "   * key, and so on, suffices for most {@code AbstractMapBasedMultimap} implementations.\n",
        "1256": "     * Usually the same as map, but smaller for the headMap(), tailMap(), or\n",
        "1257": "     * subMap() of a SortedAsMap.\n"
    }
}