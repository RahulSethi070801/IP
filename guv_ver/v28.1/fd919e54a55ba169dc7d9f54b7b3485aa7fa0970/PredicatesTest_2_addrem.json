{
    "addition": {
        "51": "        @Override\n",
        "52": "        public boolean apply(Integer i) {\n",
        "53": "          throw new AssertionFailedError(\"This predicate should never have been evaluated\");\n",
        "54": "        }\n",
        "55": "      };\n",
        "65": "\n",
        "66": "    @Override\n",
        "67": "    public int hashCode() {\n",
        "70": "\n",
        "71": "    @Override\n",
        "72": "    public boolean equals(Object obj) {\n",
        "75": "\n",
        "76": "    @Override\n",
        "77": "    public String toString() {\n",
        "85": "   * <p>Creating a new Predicate each time helps catch cases where code is using {@code x == y}\n",
        "86": "   * instead of {@code x.equals(y)}.\n",
        "216": "        .addEqualityGroup(Predicates.and(NEVER_REACHED), Predicates.and(NEVER_REACHED))\n",
        "239": "        .addEqualityGroup(Predicates.and(TRUE, NEVER_REACHED), Predicates.and(TRUE, NEVER_REACHED))\n",
        "323": "    Iterable<Predicate<Object>> iterable =\n",
        "324": "        new Iterable<Predicate<Object>>() {\n",
        "325": "          @Override\n",
        "326": "          public Iterator<Predicate<Object>> iterator() {\n",
        "327": "            return list.iterator();\n",
        "328": "          }\n",
        "329": "        };\n",
        "369": "        .addEqualityGroup(Predicates.or(NEVER_REACHED), Predicates.or(NEVER_REACHED))\n",
        "396": "        .addEqualityGroup(Predicates.or(FALSE, NEVER_REACHED), Predicates.or(FALSE, NEVER_REACHED))\n",
        "420": "            Predicates.or(FALSE, NEVER_REACHED, TRUE), Predicates.or(FALSE, NEVER_REACHED, TRUE))\n",
        "435": "    Predicate<Integer> vacuouslyFalse = Predicates.or(Collections.<Predicate<Integer>>emptyList());\n",
        "487": "    Iterable<Predicate<Object>> iterable =\n",
        "488": "        new Iterable<Predicate<Object>>() {\n",
        "489": "          @Override\n",
        "490": "          public Iterator<Predicate<Object>> iterator() {\n",
        "491": "            return list.iterator();\n",
        "492": "          }\n",
        "493": "        };\n",
        "545": "   * Tests for Predicates.instanceOf(x). TODO: Fix the comment style after fixing annotation\n",
        "546": "   * stripper to remove comments properly. Currently, all tests before the comments are removed as\n",
        "547": "   * well.\n",
        "583": "            Predicates.instanceOf(Integer.class), Predicates.instanceOf(Integer.class))\n",
        "604": "    } catch (NullPointerException expected) {\n",
        "605": "    }\n",
        "618": "    Predicate<Class<?>> isComparable = Predicates.subtypeOf(Comparable.class);\n",
        "639": "    Predicate<Class<?>> predicate = Predicates.subtypeOf(Integer.class);\n",
        "640": "    Predicate<Class<?>> reserialized = SerializableTester.reserializeAndAssert(predicate);\n",
        "707": "        .addEqualityGroup(\n",
        "708": "            Predicates.in(nums),\n",
        "709": "            Predicates.in(nums),\n",
        "710": "            Predicates.in(sameOrder),\n",
        "711": "            Predicates.in(differentOrder))\n",
        "725": "      @Override\n",
        "726": "      public boolean contains(Object element) {\n",
        "740": "      @Override\n",
        "741": "      public boolean contains(Object element) {\n",
        "774": "    Predicate<? super Integer> nasty =\n",
        "775": "        Predicates.not(\n",
        "776": "            Predicates.and(\n",
        "777": "                Predicates.or(\n",
        "778": "                    Predicates.equalTo((Object) 1),\n",
        "779": "                    Predicates.equalTo(null),\n",
        "780": "                    Predicates.alwaysFalse(),\n",
        "781": "                    Predicates.alwaysTrue(),\n",
        "782": "                    Predicates.isNull(),\n",
        "783": "                    Predicates.notNull(),\n",
        "784": "                    Predicates.in(Arrays.asList(1)))));\n",
        "787": "    Predicate<? super Integer> stillNasty = SerializableTester.reserializeAndAssert(nasty);\n",
        "831": "   * Tests for Predicates.contains(Pattern) and .containsPattern(String). We assume the regex level\n",
        "832": "   * works, so there are only trivial tests of that aspect. TODO: Fix comment style once annotation\n",
        "833": "   * stripper is fixed.\n",
        "837": "    Predicate<CharSequence> isFoobar = Predicates.containsPattern(\"^Fo.*o.*bar$\");\n",
        "844": "    Predicate<CharSequence> isFoobar = Predicates.contains(Pattern.compile(\"^Fo.*o.*bar$\"));\n",
        "861": "    Predicate<CharSequence> isWooPattern = Predicates.contains(Pattern.compile(\"Woo\"));\n",
        "877": "            Predicates.contains(Pattern.compile(\"foo\")), Predicates.containsPattern(\"foo\"))\n",
        "878": "        .addEqualityGroup(Predicates.contains(Pattern.compile(\"foo\", Pattern.CASE_INSENSITIVE)))\n",
        "879": "        .addEqualityGroup(Predicates.containsPattern(\"bar\"))\n",
        "881": "  }\n",
        "893": "    assertEqualHashCode(Predicates.not(p1), Predicates.not(p1));\n",
        "895": "    assertEqualHashCode(Predicates.and(p1, p2), Predicates.and(p1, p2));\n",
        "897": "    assertEqualHashCode(Predicates.or(p1, p2), Predicates.or(p1, p2));\n",
        "932": "      Predicate<? super Integer> expected, Predicate<? super Integer> actual) {\n",
        "939": "      Predicate<? super T> expected, Predicate<? super T> actual, T input) {\n",
        "959": "      assertEquals(expectedRuntimeException.getClass(), actualRuntimeException.getClass());\n",
        "965": "    Predicate<? super Integer> reserialized = SerializableTester.reserializeAndAssert(predicate);\n"
    },
    "removed": {
        "51": "    @Override\n",
        "52": "    public boolean apply(Integer i) {\n",
        "53": "      throw new AssertionFailedError(\n",
        "54": "          \"This predicate should never have been evaluated\");\n",
        "55": "    }\n",
        "56": "  };\n",
        "65": "    @Override public int hashCode() {\n",
        "68": "    @Override public boolean equals(Object obj) {\n",
        "71": "    @Override public String toString() {\n",
        "79": "   * <p>Creating a new Predicate each time helps catch cases where code is\n",
        "80": "   * using {@code x == y} instead of {@code x.equals(y)}.\n",
        "210": "        .addEqualityGroup(\n",
        "211": "            Predicates.and(NEVER_REACHED), Predicates.and(NEVER_REACHED))\n",
        "234": "        .addEqualityGroup(\n",
        "235": "            Predicates.and(TRUE, NEVER_REACHED),\n",
        "236": "            Predicates.and(TRUE, NEVER_REACHED))\n",
        "320": "    Iterable<Predicate<Object>> iterable = new Iterable<Predicate<Object>>() {\n",
        "321": "      @Override\n",
        "322": "      public Iterator<Predicate<Object>> iterator() {\n",
        "323": "        return list.iterator();\n",
        "324": "      }\n",
        "325": "    };\n",
        "365": "        .addEqualityGroup(\n",
        "366": "            Predicates.or(NEVER_REACHED), Predicates.or(NEVER_REACHED))\n",
        "393": "        .addEqualityGroup(\n",
        "394": "            Predicates.or(FALSE, NEVER_REACHED),\n",
        "395": "            Predicates.or(FALSE, NEVER_REACHED))\n",
        "419": "            Predicates.or(FALSE, NEVER_REACHED, TRUE),\n",
        "420": "            Predicates.or(FALSE, NEVER_REACHED, TRUE))\n",
        "435": "    Predicate<Integer> vacuouslyFalse =\n",
        "436": "        Predicates.or(Collections.<Predicate<Integer>>emptyList());\n",
        "488": "    Iterable<Predicate<Object>> iterable = new Iterable<Predicate<Object>>() {\n",
        "489": "      @Override\n",
        "490": "      public Iterator<Predicate<Object>> iterator() {\n",
        "491": "        return list.iterator();\n",
        "492": "      }\n",
        "493": "    };\n",
        "545": "   * Tests for Predicates.instanceOf(x).\n",
        "546": "   * TODO: Fix the comment style after fixing annotation stripper to remove\n",
        "547": "   * comments properly.  Currently, all tests before the comments are removed\n",
        "548": "   * as well.\n",
        "584": "            Predicates.instanceOf(Integer.class),\n",
        "585": "            Predicates.instanceOf(Integer.class))\n",
        "606": "    } catch (NullPointerException expected) {}\n",
        "619": "    Predicate<Class<?>> isComparable =\n",
        "620": "        Predicates.subtypeOf(Comparable.class);\n",
        "641": "    Predicate<Class<?>> predicate =\n",
        "642": "        Predicates.subtypeOf(Integer.class);\n",
        "643": "    Predicate<Class<?>> reserialized =\n",
        "644": "        SerializableTester.reserializeAndAssert(predicate);\n",
        "711": "        .addEqualityGroup(Predicates.in(nums), Predicates.in(nums),\n",
        "712": "            Predicates.in(sameOrder), Predicates.in(differentOrder))\n",
        "726": "      @Override public boolean contains(Object element) {\n",
        "740": "      @Override public boolean contains(Object element) {\n",
        "773": "    Predicate<? super Integer> nasty = Predicates.not(Predicates.and(\n",
        "774": "        Predicates.or(\n",
        "775": "            Predicates.equalTo((Object) 1), Predicates.equalTo(null),\n",
        "776": "            Predicates.alwaysFalse(), Predicates.alwaysTrue(),\n",
        "777": "            Predicates.isNull(), Predicates.notNull(),\n",
        "778": "            Predicates.in(Arrays.asList(1)))));\n",
        "781": "    Predicate<? super Integer> stillNasty =\n",
        "782": "        SerializableTester.reserializeAndAssert(nasty);\n",
        "826": "   * Tests for Predicates.contains(Pattern) and .containsPattern(String).\n",
        "827": "   * We assume the regex level works, so there are only trivial tests of that\n",
        "828": "   * aspect.\n",
        "829": "   * TODO: Fix comment style once annotation stripper is fixed.\n",
        "833": "    Predicate<CharSequence> isFoobar =\n",
        "834": "        Predicates.containsPattern(\"^Fo.*o.*bar$\");\n",
        "841": "    Predicate<CharSequence> isFoobar =\n",
        "842": "        Predicates.contains(Pattern.compile(\"^Fo.*o.*bar$\"));\n",
        "859": "    Predicate<CharSequence> isWooPattern =\n",
        "860": "        Predicates.contains(Pattern.compile(\"Woo\"));\n",
        "876": "            Predicates.contains(Pattern.compile(\"foo\")),\n",
        "877": "            Predicates.containsPattern(\"foo\"))\n",
        "878": "        .addEqualityGroup(\n",
        "879": "            Predicates.contains(\n",
        "880": "                Pattern.compile(\"foo\", Pattern.CASE_INSENSITIVE)))\n",
        "881": "        .addEqualityGroup(\n",
        "882": "            Predicates.containsPattern(\"bar\"))\n",
        "884": "      }\n",
        "896": "    assertEqualHashCode(\n",
        "897": "        Predicates.not(p1),\n",
        "898": "        Predicates.not(p1));\n",
        "900": "    assertEqualHashCode(\n",
        "901": "        Predicates.and(p1, p2),\n",
        "902": "        Predicates.and(p1, p2));\n",
        "904": "    assertEqualHashCode(\n",
        "905": "        Predicates.or(p1, p2),\n",
        "906": "        Predicates.or(p1, p2));\n",
        "941": "      Predicate<? super Integer> expected,\n",
        "942": "      Predicate<? super Integer> actual) {\n",
        "949": "      Predicate<? super T> expected,\n",
        "950": "      Predicate<? super T> actual,\n",
        "951": "      T input) {\n",
        "971": "      assertEquals(\n",
        "972": "          expectedRuntimeException.getClass(),\n",
        "973": "          actualRuntimeException.getClass());\n",
        "979": "    Predicate<? super Integer> reserialized =\n",
        "980": "        SerializableTester.reserializeAndAssert(predicate);\n"
    }
}