{
    "addition": {
        "54": "    @Override\n",
        "55": "    protected void doStart() {\n",
        "59": "    @Override\n",
        "60": "    protected void doStop() {\n",
        "76": "    @Override\n",
        "77": "    protected void doStart() {\n",
        "79": "        @Override\n",
        "80": "        public void run() {\n",
        "87": "    @Override\n",
        "88": "    protected void doStop() {\n",
        "90": "        @Override\n",
        "91": "        public void run() {\n",
        "100": "    @Override\n",
        "101": "    protected void doStart() {\n",
        "107": "    @Override\n",
        "108": "    protected void doStart() {\n",
        "115": "    @Override\n",
        "116": "    protected void doStop() {\n",
        "139": "    final Service b =\n",
        "140": "        new NoOpDelayedService(353) {\n",
        "141": "          @Override\n",
        "142": "          protected void doStart() {\n",
        "143": "            super.doStart();\n",
        "144": "            // This will delay service listener execution at least 150 milliseconds\n",
        "145": "            Uninterruptibles.sleepUninterruptibly(150, TimeUnit.MILLISECONDS);\n",
        "146": "          }\n",
        "147": "        };\n",
        "148": "    Service a =\n",
        "149": "        new NoOpDelayedService(150) {\n",
        "150": "          @Override\n",
        "151": "          protected void doStart() {\n",
        "152": "            b.startAsync();\n",
        "153": "            super.doStart();\n",
        "154": "          }\n",
        "155": "        };\n",
        "284": "    manager.awaitStopped(5, SECONDS); // no exception thrown\n",
        "331": "    manager.addListener(\n",
        "332": "        new Listener() {\n",
        "333": "          @Override\n",
        "334": "          public void failure(Service service) {\n",
        "335": "            manager.stopAsync();\n",
        "336": "          }\n",
        "337": "        });\n",
        "353": "   * This is for covering a case where the ServiceManager would behave strangely if constructed with\n",
        "354": "   * no service under management. Listeners would never fire because the ServiceManager was healthy\n",
        "355": "   * and stopped at the same time. This test ensures that listeners fire and isHealthy makes sense.\n",
        "379": "    Formatter logFormatter =\n",
        "380": "        new Formatter() {\n",
        "381": "          @Override\n",
        "382": "          public String format(LogRecord record) {\n",
        "383": "            return formatMessage(record);\n",
        "384": "          }\n",
        "385": "        };\n",
        "400": "    Service failRunService =\n",
        "401": "        new AbstractService() {\n",
        "402": "          @Override\n",
        "403": "          protected void doStart() {\n",
        "404": "            new Thread() {\n",
        "405": "              @Override\n",
        "406": "              public void run() {\n",
        "407": "                notifyStarted();\n",
        "408": "                // We need to wait for the main thread to leave the ServiceManager.startAsync call\n",
        "409": "                // to\n",
        "410": "                // ensure that the thread running the failure callbacks is not the main thread.\n",
        "411": "                Uninterruptibles.awaitUninterruptibly(afterStarted);\n",
        "412": "                notifyFailed(new Exception(\"boom\"));\n",
        "413": "              }\n",
        "414": "            }.start();\n",
        "416": "\n",
        "417": "          @Override\n",
        "418": "          protected void doStop() {\n",
        "419": "            notifyStopped();\n",
        "420": "          }\n",
        "421": "        };\n",
        "422": "    final ServiceManager manager =\n",
        "423": "        new ServiceManager(Arrays.asList(failRunService, new NoOpService()));\n",
        "424": "    manager.addListener(\n",
        "425": "        new ServiceManager.Listener() {\n",
        "426": "          @Override\n",
        "427": "          public void failure(Service service) {\n",
        "428": "            failEnter.countDown();\n",
        "429": "            // block until after the service manager is shutdown\n",
        "430": "            Uninterruptibles.awaitUninterruptibly(failLeave);\n",
        "431": "          }\n",
        "432": "        });\n",
        "441": "    Thread stoppingThread =\n",
        "442": "        new Thread() {\n",
        "443": "          @Override\n",
        "444": "          public void run() {\n",
        "445": "            manager.stopAsync().awaitStopped();\n",
        "446": "          }\n",
        "447": "        };\n",
        "452": "    failLeave.countDown(); // release the background thread\n",
        "458": "   * This ISE wouldn't actually bubble up but would get logged by ExecutionQueue. This obfuscated\n",
        "471": "    } catch (IllegalArgumentException expected) {\n",
        "472": "    }\n",
        "484": "    Service service2 =\n",
        "485": "        new Service() {\n",
        "486": "          final NoOpService delegate = new NoOpService();\n",
        "487": "\n",
        "488": "          @Override\n",
        "489": "          public final void addListener(Listener listener, Executor executor) {\n",
        "490": "            service1.startAsync();\n",
        "491": "            delegate.addListener(listener, executor);\n",
        "492": "          }\n",
        "493": "          // Delegates from here on down\n",
        "494": "          @Override\n",
        "495": "          public final Service startAsync() {\n",
        "496": "            return delegate.startAsync();\n",
        "497": "          }\n",
        "499": "          @Override\n",
        "500": "          public final Service stopAsync() {\n",
        "501": "            return delegate.stopAsync();\n",
        "502": "          }\n",
        "504": "          @Override\n",
        "505": "          public final void awaitRunning() {\n",
        "506": "            delegate.awaitRunning();\n",
        "507": "          }\n",
        "509": "          @Override\n",
        "510": "          public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException {\n",
        "511": "            delegate.awaitRunning(timeout, unit);\n",
        "512": "          }\n",
        "514": "          @Override\n",
        "515": "          public final void awaitTerminated() {\n",
        "516": "            delegate.awaitTerminated();\n",
        "517": "          }\n",
        "519": "          @Override\n",
        "520": "          public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException {\n",
        "521": "            delegate.awaitTerminated(timeout, unit);\n",
        "522": "          }\n",
        "524": "          @Override\n",
        "525": "          public final boolean isRunning() {\n",
        "526": "            return delegate.isRunning();\n",
        "527": "          }\n",
        "529": "          @Override\n",
        "530": "          public final State state() {\n",
        "531": "            return delegate.state();\n",
        "532": "          }\n",
        "534": "          @Override\n",
        "535": "          public final Throwable failureCause() {\n",
        "536": "            return delegate.failureCause();\n",
        "537": "          }\n",
        "538": "        };\n",
        "549": "   * transitionService in the wrong order due to a race. Due to the fact that it is a race this test\n",
        "550": "   * isn't guaranteed to expose the issue, but it is at least likely to become flaky if the race\n",
        "551": "   * sneaks back in, and in this case flaky means something is definitely wrong.\n",
        "581": "    @Override\n",
        "582": "    protected void run() throws Exception {\n",
        "586": "    @Override\n",
        "587": "    protected void triggerShutdown() {\n",
        "591": "    @Override\n",
        "592": "    protected String serviceName() {\n",
        "609": "    @Override\n",
        "610": "    public void healthy() {\n",
        "614": "    @Override\n",
        "615": "    public void stopped() {\n",
        "619": "    @Override\n",
        "620": "    public void failure(Service service) {\n"
    },
    "removed": {
        "53": "    @Override protected void doStart() {\n",
        "57": "    @Override protected void doStop() {\n",
        "73": "    @Override protected void doStart() {\n",
        "75": "        @Override public void run() {\n",
        "82": "    @Override protected void doStop() {\n",
        "84": "        @Override public void run() {\n",
        "93": "    @Override protected void doStart() {\n",
        "99": "    @Override protected void doStart() {\n",
        "106": "    @Override protected void doStop() {\n",
        "129": "    final Service b = new NoOpDelayedService(353) {\n",
        "130": "      @Override protected void doStart() {\n",
        "131": "        super.doStart();\n",
        "132": "        // This will delay service listener execution at least 150 milliseconds\n",
        "133": "        Uninterruptibles.sleepUninterruptibly(150, TimeUnit.MILLISECONDS);\n",
        "134": "      }\n",
        "135": "    };\n",
        "136": "    Service a = new NoOpDelayedService(150) {\n",
        "137": "      @Override protected void doStart() {\n",
        "138": "        b.startAsync();\n",
        "139": "        super.doStart();\n",
        "140": "      }\n",
        "141": "    };\n",
        "270": "    manager.awaitStopped(5, SECONDS);  // no exception thrown\n",
        "317": "    manager.addListener(new Listener() {\n",
        "318": "      @Override public void failure(Service service) {\n",
        "319": "        manager.stopAsync();\n",
        "320": "      }});\n",
        "336": "   * This is for covering a case where the ServiceManager would behave strangely if constructed\n",
        "337": "   * with no service under management.  Listeners would never fire because the ServiceManager was\n",
        "338": "   * healthy and stopped at the same time.  This test ensures that listeners fire and isHealthy\n",
        "339": "   * makes sense.\n",
        "363": "    Formatter logFormatter = new Formatter() {\n",
        "364": "      @Override public String format(LogRecord record) {\n",
        "365": "        return formatMessage(record);\n",
        "366": "      }\n",
        "367": "    };\n",
        "382": "    Service failRunService = new AbstractService() {\n",
        "383": "      @Override protected void doStart() {\n",
        "384": "        new Thread() {\n",
        "385": "          @Override public void run() {\n",
        "386": "            notifyStarted();\n",
        "387": "            // We need to wait for the main thread to leave the ServiceManager.startAsync call to\n",
        "388": "            // ensure that the thread running the failure callbacks is not the main thread.\n",
        "389": "            Uninterruptibles.awaitUninterruptibly(afterStarted);\n",
        "390": "            notifyFailed(new Exception(\"boom\"));\n",
        "392": "        }.start();\n",
        "393": "      }\n",
        "394": "      @Override protected void doStop() {\n",
        "395": "        notifyStopped();\n",
        "396": "      }\n",
        "397": "    };\n",
        "398": "    final ServiceManager manager = new ServiceManager(\n",
        "399": "        Arrays.asList(failRunService, new NoOpService()));\n",
        "400": "    manager.addListener(new ServiceManager.Listener() {\n",
        "401": "      @Override public void failure(Service service) {\n",
        "402": "        failEnter.countDown();\n",
        "403": "        // block until after the service manager is shutdown\n",
        "404": "        Uninterruptibles.awaitUninterruptibly(failLeave);\n",
        "405": "      }\n",
        "406": "    });\n",
        "415": "    Thread stoppingThread = new Thread() {\n",
        "416": "      @Override public void run() {\n",
        "417": "        manager.stopAsync().awaitStopped();\n",
        "418": "      }\n",
        "419": "    };\n",
        "424": "    failLeave.countDown();  // release the background thread\n",
        "430": "   * This ISE wouldn't actually bubble up but would get logged by ExecutionQueue.  This obfuscated\n",
        "443": "    } catch (IllegalArgumentException expected) {}\n",
        "455": "    Service service2 = new Service() {\n",
        "456": "      final NoOpService delegate = new NoOpService();\n",
        "457": "      @Override public final void addListener(Listener listener, Executor executor) {\n",
        "458": "        service1.startAsync();\n",
        "459": "        delegate.addListener(listener, executor);\n",
        "460": "      }\n",
        "461": "      // Delegates from here on down\n",
        "462": "      @Override public final Service startAsync() {\n",
        "463": "        return delegate.startAsync();\n",
        "464": "      }\n",
        "466": "      @Override public final Service stopAsync() {\n",
        "467": "        return delegate.stopAsync();\n",
        "468": "      }\n",
        "470": "      @Override public final void awaitRunning() {\n",
        "471": "        delegate.awaitRunning();\n",
        "472": "      }\n",
        "474": "      @Override public final void awaitRunning(long timeout, TimeUnit unit)\n",
        "475": "          throws TimeoutException {\n",
        "476": "        delegate.awaitRunning(timeout, unit);\n",
        "477": "      }\n",
        "479": "      @Override public final void awaitTerminated() {\n",
        "480": "        delegate.awaitTerminated();\n",
        "481": "      }\n",
        "483": "      @Override public final void awaitTerminated(long timeout, TimeUnit unit)\n",
        "484": "          throws TimeoutException {\n",
        "485": "        delegate.awaitTerminated(timeout, unit);\n",
        "486": "      }\n",
        "488": "      @Override public final boolean isRunning() {\n",
        "489": "        return delegate.isRunning();\n",
        "490": "      }\n",
        "492": "      @Override public final State state() {\n",
        "493": "        return delegate.state();\n",
        "494": "      }\n",
        "496": "      @Override public final Throwable failureCause() {\n",
        "497": "        return delegate.failureCause();\n",
        "498": "      }\n",
        "499": "    };\n",
        "510": "   * transitionService in the wrong order due to a race.  Due to the fact that it is a race this\n",
        "511": "   * test isn't guaranteed to expose the issue, but it is at least likely to become flaky if the\n",
        "512": "   * race sneaks back in, and in this case flaky means something is definitely wrong.\n",
        "542": "    @Override protected void run() throws Exception {\n",
        "546": "    @Override protected void triggerShutdown() {\n",
        "550": "    @Override protected String serviceName() {\n",
        "567": "    @Override public void healthy() {\n",
        "571": "    @Override public void stopped() {\n",
        "575": "    @Override public void failure(Service service) {\n"
    }
}