{
    "addition": {
        "38": " * <p>See the Guava User Guide article on <a\n",
        "39": " * href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n",
        "51": "   * Returns a hash code for {@code value}; equal to the result of invoking {@code ((Byte)\n",
        "52": "   * value).hashCode()}.\n",
        "68": "   * @return {@code true} if {@code array[i] == target} for some value of {@code i}\n",
        "102": "   * Returns the start position of the first occurrence of the specified {@code target} within\n",
        "103": "   * {@code array}, or {@code -1} if there is no such occurrence.\n",
        "105": "   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,\n",
        "106": "   * i, i + target.length)} contains exactly the same elements as {@code target}.\n",
        "153": "   * Returns the values from each provided array combined into a single array. For example, {@code\n",
        "154": "   * concat(new byte[] {a, b}, new byte[] {}, new byte[] {c}} returns the array {@code {a, b, c}}.\n",
        "183": "   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code\n",
        "184": "   *     minLength}\n",
        "196": "   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.\n",
        "197": "   * Calling this method is as thread-safe as calling that method.\n",
        "221": "   * Returns a fixed-size list backed by the specified array, similar to {@link\n",
        "222": "   * Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any attempt to\n",
        "223": "   * set a value to {@code null} will result in a {@link NullPointerException}.\n"
    },
    "removed": {
        "38": " * <p>See the Guava User Guide article on\n",
        "39": " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n",
        "51": "   * Returns a hash code for {@code value}; equal to the result of invoking\n",
        "52": "   * {@code ((Byte) value).hashCode()}.\n",
        "68": "   * @return {@code true} if {@code array[i] == target} for some value of {@code\n",
        "69": "   *     i}\n",
        "103": "   * Returns the start position of the first occurrence of the specified {@code\n",
        "104": "   * target} within {@code array}, or {@code -1} if there is no such occurrence.\n",
        "106": "   * <p>More formally, returns the lowest index {@code i} such that\n",
        "107": "   * {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as\n",
        "108": "   * {@code target}.\n",
        "155": "   * Returns the values from each provided array combined into a single array. For example,\n",
        "156": "   * {@code concat(new byte[] {a, b}, new byte[] {}, new byte[] {c}} returns the array {@code {a, b,\n",
        "157": "   * c}}.\n",
        "186": "   * @return an array containing the values of {@code array}, with guaranteed minimum length\n",
        "187": "   *     {@code minLength}\n",
        "199": "   * <p>Elements are copied from the argument collection as if by {@code\n",
        "200": "   * collection.toArray()}. Calling this method is as thread-safe as calling that method.\n",
        "224": "   * Returns a fixed-size list backed by the specified array, similar to\n",
        "225": "   * {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any\n",
        "226": "   * attempt to set a value to {@code null} will result in a {@link NullPointerException}.\n"
    }
}