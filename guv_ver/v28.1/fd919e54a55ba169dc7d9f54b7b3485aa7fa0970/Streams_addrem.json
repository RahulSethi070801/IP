{
    "addition": {
        "358": "              new AbstractSpliterator<R>(\n",
        "359": "                  fromSpliterator.estimateSize(),\n",
        "360": "                  fromSpliterator.characteristics() & (Spliterator.ORDERED | Spliterator.SIZED)) {\n",
        "361": "                long index = 0;\n",
        "362": "\n",
        "363": "                @Override\n",
        "364": "                public boolean tryAdvance(Consumer<? super R> action) {\n",
        "365": "                  if (fromIterator.hasNext()) {\n",
        "366": "                    action.accept(function.apply(fromIterator.next(), index++));\n",
        "367": "                    return true;\n",
        "368": "                  }\n",
        "369": "                  return false;\n",
        "370": "                }\n",
        "371": "              },\n",
        "372": "              isParallel)\n",
        "373": "          .onClose(stream::close);\n"
    },
    "removed": {
        "358": "          new AbstractSpliterator<R>(\n",
        "359": "              fromSpliterator.estimateSize(),\n",
        "360": "              fromSpliterator.characteristics() & (Spliterator.ORDERED | Spliterator.SIZED)) {\n",
        "361": "            long index = 0;\n",
        "362": "\n",
        "363": "            @Override\n",
        "364": "            public boolean tryAdvance(Consumer<? super R> action) {\n",
        "365": "              if (fromIterator.hasNext()) {\n",
        "366": "                action.accept(function.apply(fromIterator.next(), index++));\n",
        "367": "                return true;\n",
        "368": "              }\n",
        "369": "              return false;\n",
        "370": "            }\n",
        "371": "          },\n",
        "372": "          isParallel).onClose(stream::close);\n"
    }
}