{
    "addition": {
        "28": " * Base class for testers of classes (including {@link Collection} and {@link java.util.Map Map})\n",
        "29": " * that contain elements.\n",
        "50": "   * @return the contents of the container under test, for use by {@link #expectContents(Object[])\n",
        "51": "   *     expectContents(E...)} and its friends.\n",
        "56": "   * Replaces the existing container under test with a new container created by the subject\n",
        "57": "   * generator.\n",
        "67": "   * Replaces the existing container under test with a new container. This is useful when a single\n",
        "68": "   * test method needs to create multiple containers while retaining the ability to use {@link\n",
        "69": "   * #expectContents(Object[]) expectContents(E...)} and other convenience methods. The creation of\n",
        "70": "   * multiple containers in a single method is discouraged in most cases, but it is vital to the\n",
        "71": "   * iterator tests.\n",
        "90": "   * Asserts that the collection under test contains exactly the given elements, respecting\n",
        "91": "   * cardinality but not order. Subclasses may override this method to provide stronger assertions,\n",
        "92": "   * e.g., to check ordering in lists, but realize that <strong>unless a test extends {@link\n",
        "93": "   * com.google.common.collect.testing.testers.AbstractListTester AbstractListTester}, a call to\n",
        "94": "   * {@code expectContents()} invokes this version</strong>.\n",
        "114": "   * Asserts that the collection under test contains exactly the elements it was initialized with\n",
        "115": "   * plus the given elements, according to {@link #expectContents(java.util.Collection)}. In other\n",
        "116": "   * words, for the default {@code expectContents()} implementation, the number of occurrences of\n",
        "117": "   * each given element has increased by one since the test collection was created, and the number\n",
        "118": "   * of occurrences of all other elements has not changed.\n",
        "120": "   * <p>Note: This means that a test like the following will fail if {@code collection} is a {@code\n",
        "121": "   * Set}:\n",
        "127": "   * <p>In this case, {@code collection} was not modified as a result of the {@code add()} call, and\n",
        "128": "   * the test will fail because the number of occurrences of {@code existingElement} is unchanged.\n",
        "183": "   * @return an array of the proper size with a duplicate element. The size must be at least three.\n",
        "207": "   * Returns the {@linkplain #getSampleElements() sample elements} as ordered by {@link\n",
        "208": "   * TestContainerGenerator#order(List)}. Tests should used this method only if they declare\n",
        "209": "   * requirement {@link com.google.common.collect.testing.features.CollectionFeature#KNOWN_ORDER}.\n",
        "220": "   * @return a suitable location for a null element, to use when initializing containers for tests\n",
        "221": "   *     that involve a null element being present.\n"
    },
    "removed": {
        "28": " * Base class for testers of classes (including {@link Collection}\n",
        "29": " * and {@link java.util.Map Map}) that contain elements.\n",
        "33": " *\n",
        "51": "   * @return the contents of the container under test, for use by\n",
        "52": "   * {@link #expectContents(Object[]) expectContents(E...)} and its friends.\n",
        "57": "   * Replaces the existing container under test with a new container created\n",
        "58": "   * by the subject generator.\n",
        "61": "   *\n",
        "69": "   * Replaces the existing container under test with a new container.\n",
        "70": "   * This is useful when a single test method needs to create multiple\n",
        "71": "   * containers while retaining the ability to use\n",
        "72": "   * {@link #expectContents(Object[]) expectContents(E...)} and other\n",
        "73": "   * convenience methods. The creation of multiple containers in a single\n",
        "74": "   * method is discouraged in most cases, but it is vital to the iterator tests.\n",
        "86": "   *\n",
        "94": "   * Asserts that the collection under test contains exactly the given elements,\n",
        "95": "   * respecting cardinality but not order. Subclasses may override this method\n",
        "96": "   * to provide stronger assertions, e.g., to check ordering in lists, but\n",
        "97": "   * realize that <strong>unless a test extends\n",
        "98": "   * {@link com.google.common.collect.testing.testers.AbstractListTester\n",
        "99": "   * AbstractListTester}, a call to {@code expectContents()} invokes this\n",
        "100": "   * version</strong>.\n",
        "120": "   * Asserts that the collection under test contains exactly the elements it was\n",
        "121": "   * initialized with plus the given elements, according to\n",
        "122": "   * {@link #expectContents(java.util.Collection)}. In other words, for the\n",
        "123": "   * default {@code expectContents()} implementation, the number of occurrences\n",
        "124": "   * of each given element has increased by one since the test collection was\n",
        "125": "   * created, and the number of occurrences of all other elements has not\n",
        "126": "   * changed.\n",
        "128": "   * <p>Note: This means that a test like the following will fail if\n",
        "129": "   * {@code collection} is a {@code Set}:\n",
        "135": "   * <p>In this case, {@code collection} was not modified as a result of the\n",
        "136": "   * {@code add()} call, and the test will fail because the number of\n",
        "137": "   * occurrences of {@code existingElement} is unchanged.\n",
        "192": "   * @return an array of the proper size with a duplicate element.\n",
        "193": "   * The size must be at least three.\n",
        "217": "   * Returns the {@linkplain #getSampleElements() sample elements} as ordered by\n",
        "218": "   * {@link TestContainerGenerator#order(List)}. Tests should used this method\n",
        "219": "   * only if they declare requirement {@link\n",
        "220": "   * com.google.common.collect.testing.features.CollectionFeature#KNOWN_ORDER}.\n",
        "231": "   * @return a suitable location for a null element, to use when initializing\n",
        "232": "   * containers for tests that involve a null element being present.\n"
    }
}