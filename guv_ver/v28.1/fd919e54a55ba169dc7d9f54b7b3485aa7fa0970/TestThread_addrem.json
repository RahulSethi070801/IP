{
    "addition": {
        "35": " * A helper for concurrency testing. One or more {@code TestThread} instances are instantiated in a\n",
        "36": " * test with reference to the same \"lock-like object\", and then their interactions with that object\n",
        "37": " * are choreographed via the various methods on this class.\n",
        "45": " * except that the method parameter must accept whatever condition-like object is passed into {@code\n",
        "46": " * callAndAssertWaits} by the test.\n",
        "74": "  @Override\n",
        "75": "  public void tearDown() throws Exception {\n",
        "80": "      throw (AssertionFailedError)\n",
        "81": "          new AssertionFailedError(\"Uncaught throwable in \" + getName())\n",
        "82": "              .initCause(uncaughtThrowable);\n",
        "109": "   * Causes this thread to call the named method, and asserts that the call returns the expected int\n",
        "110": "   * value.\n",
        "121": "   * Causes this thread to call the named method, and asserts that the call throws the expected type\n",
        "122": "   * of throwable.\n",
        "124": "  public void callAndAssertThrows(\n",
        "125": "      Class<? extends Throwable> expected, String methodName, Object... arguments)\n",
        "126": "      throws Exception {\n",
        "150": "   * Causes this thread to call the named method, and asserts that this thread thereby waits on the\n",
        "151": "   * given condition-like object. The lock-like object must have a method equivalent to {@link\n",
        "153": "   * except that the method parameter must accept whatever condition-like object is passed into this\n",
        "154": "   * method.\n",
        "156": "  public void callAndAssertWaits(String methodName, Object conditionLikeObject) throws Exception {\n",
        "176": "   * Asserts that a prior call that had caused this thread to block or wait has since returned the\n",
        "177": "   * expected boolean value.\n",
        "188": "   *     of time\n",
        "201": "   *     time\n",
        "203": "   *     this thread has called most recently\n",
        "219": "    METHODS:\n",
        "220": "    for (Method method : lockLikeObject.getClass().getMethods()) {\n",
        "234": "  @Override\n",
        "235": "  public void run() {\n",
        "246": "          responseQueue.put(new Response(request.methodName, null, exception.getTargetException()));\n"
    },
    "removed": {
        "35": " * A helper for concurrency testing. One or more {@code TestThread} instances are instantiated\n",
        "36": " * in a test with reference to the same \"lock-like object\", and then their interactions with that\n",
        "37": " * object are choreographed via the various methods on this class.\n",
        "45": " * except that the method parameter must accept whatever condition-like object is passed into\n",
        "46": " * {@code callAndAssertWaits} by the test.\n",
        "74": "  @Override public void tearDown() throws Exception {\n",
        "79": "      throw (AssertionFailedError) new AssertionFailedError(\"Uncaught throwable in \" + getName())\n",
        "80": "          .initCause(uncaughtThrowable);\n",
        "107": "   * Causes this thread to call the named method, and asserts that the call returns the expected\n",
        "108": "   * int value.\n",
        "119": "   * Causes this thread to call the named method, and asserts that the call throws the expected\n",
        "120": "   * type of throwable.\n",
        "122": "  public void callAndAssertThrows(Class<? extends Throwable> expected,\n",
        "123": "      String methodName, Object... arguments) throws Exception {\n",
        "147": "   * Causes this thread to call the named method, and asserts that this thread thereby waits on\n",
        "148": "   * the given condition-like object. The lock-like object must have a method equivalent to {@link\n",
        "150": "   * except that the method parameter must accept whatever condition-like object is passed into\n",
        "151": "   * this method.\n",
        "153": "  public void callAndAssertWaits(String methodName, Object conditionLikeObject)\n",
        "154": "      throws Exception {\n",
        "174": "   * Asserts that a prior call that had caused this thread to block or wait has since returned\n",
        "175": "   * the expected boolean value.\n",
        "186": "   *         of time\n",
        "199": "   *         time\n",
        "201": "   *         this thread has called most recently\n",
        "217": "    METHODS: for (Method method : lockLikeObject.getClass().getMethods()) {\n",
        "231": "  @Override public void run() {\n",
        "242": "          responseQueue.put(\n",
        "243": "              new Response(request.methodName, null, exception.getTargetException()));\n"
    }
}