{
    "addition": {
        "60": "    CollectionSize.ANY, CollectionFeature.ALLOWS_NULL_QUERIES\n",
        "64": "    CollectionSize.ANY, CollectionFeature.KNOWN_ORDER, CollectionFeature.ALLOWS_NULL_QUERIES\n",
        "68": "    CollectionSize.ANY, CollectionFeature.SUPPORTS_REMOVE, CollectionFeature.ALLOWS_NULL_QUERIES\n",
        "114": "    suite.addTest(\n",
        "115": "        SetTestSuiteBuilder.using(\n",
        "116": "                new TestStringSetGenerator() {\n",
        "117": "                  @Override\n",
        "118": "                  protected Set<String> create(String[] elements) {\n",
        "119": "                    Table<String, Integer, Character> table =\n",
        "120": "                        ArrayTable.create(ImmutableList.copyOf(elements), ImmutableList.of(1, 2));\n",
        "121": "                    populateForRowKeySet(table, elements);\n",
        "122": "                    return table.rowKeySet();\n",
        "123": "                  }\n",
        "124": "                })\n",
        "125": "            .named(\"ArrayTable.rowKeySet\")\n",
        "126": "            .withFeatures(\n",
        "127": "                CollectionSize.ONE,\n",
        "128": "                CollectionSize.SEVERAL,\n",
        "129": "                CollectionFeature.KNOWN_ORDER,\n",
        "130": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "131": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "132": "            .createTestSuite());\n",
        "134": "    suite.addTest(\n",
        "135": "        SetTestSuiteBuilder.using(\n",
        "136": "                new TestStringSetGenerator() {\n",
        "137": "                  @Override\n",
        "138": "                  protected Set<String> create(String[] elements) {\n",
        "139": "                    Table<String, Integer, Character> table = HashBasedTable.create();\n",
        "140": "                    populateForRowKeySet(table, elements);\n",
        "141": "                    return table.rowKeySet();\n",
        "142": "                  }\n",
        "143": "                })\n",
        "144": "            .named(\"HashBasedTable.rowKeySet\")\n",
        "145": "            .withFeatures(COLLECTION_FEATURES_REMOVE)\n",
        "146": "            .withFeatures(CollectionFeature.SUPPORTS_ITERATOR_REMOVE)\n",
        "147": "            .createTestSuite());\n",
        "149": "    suite.addTest(\n",
        "150": "        SortedSetTestSuiteBuilder.using(\n",
        "151": "                new TestStringSortedSetGenerator() {\n",
        "152": "                  @Override\n",
        "153": "                  protected SortedSet<String> create(String[] elements) {\n",
        "154": "                    TreeBasedTable<String, Integer, Character> table = TreeBasedTable.create();\n",
        "155": "                    populateForRowKeySet(table, elements);\n",
        "156": "                    return table.rowKeySet();\n",
        "157": "                  }\n",
        "159": "                  @Override\n",
        "160": "                  public List<String> order(List<String> insertionOrder) {\n",
        "161": "                    Collections.sort(insertionOrder);\n",
        "162": "                    return insertionOrder;\n",
        "163": "                  }\n",
        "164": "                })\n",
        "165": "            .named(\"TreeBasedTable.rowKeySet\")\n",
        "166": "            .withFeatures(COLLECTION_FEATURES_REMOVE_ORDER)\n",
        "167": "            .withFeatures(CollectionFeature.SUPPORTS_ITERATOR_REMOVE)\n",
        "168": "            .createTestSuite());\n",
        "170": "    suite.addTest(\n",
        "171": "        SetTestSuiteBuilder.using(\n",
        "172": "                new TestStringSetGenerator() {\n",
        "173": "                  @Override\n",
        "174": "                  protected Set<String> create(String[] elements) {\n",
        "175": "                    Table<String, Integer, Character> table = HashBasedTable.create();\n",
        "176": "                    populateForRowKeySet(table, elements);\n",
        "177": "                    return Tables.unmodifiableTable(table).rowKeySet();\n",
        "178": "                  }\n",
        "179": "                })\n",
        "180": "            .named(\"unmodifiableTable[HashBasedTable].rowKeySet\")\n",
        "181": "            .withFeatures(COLLECTION_FEATURES)\n",
        "182": "            .createTestSuite());\n",
        "183": "\n",
        "184": "    suite.addTest(\n",
        "185": "        SetTestSuiteBuilder.using(\n",
        "186": "                new TestStringSetGenerator() {\n",
        "187": "                  @Override\n",
        "188": "                  protected Set<String> create(String[] elements) {\n",
        "189": "                    RowSortedTable<String, Integer, Character> table = TreeBasedTable.create();\n",
        "190": "                    populateForRowKeySet(table, elements);\n",
        "191": "                    return Tables.unmodifiableRowSortedTable(table).rowKeySet();\n",
        "192": "                  }\n",
        "193": "\n",
        "194": "                  @Override\n",
        "195": "                  public List<String> order(List<String> insertionOrder) {\n",
        "196": "                    Collections.sort(insertionOrder);\n",
        "197": "                    return insertionOrder;\n",
        "198": "                  }\n",
        "199": "                })\n",
        "200": "            .named(\"unmodifiableRowSortedTable[TreeBasedTable].rowKeySet\")\n",
        "201": "            .withFeatures(COLLECTION_FEATURES_ORDER)\n",
        "202": "            .createTestSuite());\n",
        "203": "\n",
        "204": "    suite.addTest(\n",
        "205": "        SetTestSuiteBuilder.using(\n",
        "206": "                new TestStringSetGenerator() {\n",
        "207": "                  @Override\n",
        "208": "                  protected Set<String> create(String[] elements) {\n",
        "209": "                    Table<Integer, String, Character> table =\n",
        "210": "                        ArrayTable.create(ImmutableList.of(1, 2), ImmutableList.copyOf(elements));\n",
        "211": "                    populateForColumnKeySet(table, elements);\n",
        "212": "                    return table.columnKeySet();\n",
        "213": "                  }\n",
        "214": "                })\n",
        "215": "            .named(\"ArrayTable.columnKeySet\")\n",
        "216": "            .withFeatures(\n",
        "217": "                CollectionSize.ONE,\n",
        "218": "                CollectionSize.SEVERAL,\n",
        "219": "                CollectionFeature.KNOWN_ORDER,\n",
        "220": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "221": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "222": "            .createTestSuite());\n",
        "223": "\n",
        "224": "    suite.addTest(\n",
        "225": "        SetTestSuiteBuilder.using(\n",
        "226": "                new TestStringSetGenerator() {\n",
        "227": "                  @Override\n",
        "228": "                  protected Set<String> create(String[] elements) {\n",
        "229": "                    Table<Integer, String, Character> table = HashBasedTable.create();\n",
        "230": "                    populateForColumnKeySet(table, elements);\n",
        "231": "                    return table.columnKeySet();\n",
        "232": "                  }\n",
        "233": "                })\n",
        "234": "            .named(\"HashBasedTable.columnKeySet\")\n",
        "235": "            .withFeatures(COLLECTION_FEATURES_REMOVE)\n",
        "236": "            .createTestSuite());\n",
        "237": "\n",
        "238": "    suite.addTest(\n",
        "239": "        SetTestSuiteBuilder.using(\n",
        "240": "                new TestStringSetGenerator() {\n",
        "241": "                  @Override\n",
        "242": "                  protected Set<String> create(String[] elements) {\n",
        "243": "                    Table<Integer, String, Character> table = TreeBasedTable.create();\n",
        "244": "                    populateForColumnKeySet(table, elements);\n",
        "245": "                    return table.columnKeySet();\n",
        "246": "                  }\n",
        "247": "\n",
        "248": "                  @Override\n",
        "249": "                  public List<String> order(List<String> insertionOrder) {\n",
        "250": "                    Collections.sort(insertionOrder);\n",
        "251": "                    return insertionOrder;\n",
        "252": "                  }\n",
        "253": "                })\n",
        "254": "            .named(\"TreeBasedTable.columnKeySet\")\n",
        "255": "            .withFeatures(COLLECTION_FEATURES_REMOVE_ORDER)\n",
        "256": "            .createTestSuite());\n",
        "257": "\n",
        "258": "    suite.addTest(\n",
        "259": "        SetTestSuiteBuilder.using(\n",
        "260": "                new TestStringSetGenerator() {\n",
        "261": "                  @Override\n",
        "262": "                  protected Set<String> create(String[] elements) {\n",
        "263": "                    Table<Integer, String, Character> table = HashBasedTable.create();\n",
        "264": "                    populateForColumnKeySet(table, elements);\n",
        "265": "                    return Tables.unmodifiableTable(table).columnKeySet();\n",
        "266": "                  }\n",
        "267": "                })\n",
        "268": "            .named(\"unmodifiableTable[HashBasedTable].columnKeySet\")\n",
        "269": "            .withFeatures(COLLECTION_FEATURES)\n",
        "270": "            .createTestSuite());\n",
        "271": "\n",
        "272": "    suite.addTest(\n",
        "273": "        SetTestSuiteBuilder.using(\n",
        "274": "                new TestStringSetGenerator() {\n",
        "275": "                  @Override\n",
        "276": "                  protected Set<String> create(String[] elements) {\n",
        "277": "                    RowSortedTable<Integer, String, Character> table = TreeBasedTable.create();\n",
        "278": "                    populateForColumnKeySet(table, elements);\n",
        "279": "                    return Tables.unmodifiableRowSortedTable(table).columnKeySet();\n",
        "280": "                  }\n",
        "281": "\n",
        "282": "                  @Override\n",
        "283": "                  public List<String> order(List<String> insertionOrder) {\n",
        "284": "                    Collections.sort(insertionOrder);\n",
        "285": "                    return insertionOrder;\n",
        "286": "                  }\n",
        "287": "                })\n",
        "288": "            .named(\"unmodifiableRowSortedTable[TreeBasedTable].columnKeySet\")\n",
        "289": "            .withFeatures(COLLECTION_FEATURES_ORDER)\n",
        "290": "            .createTestSuite());\n",
        "291": "\n",
        "292": "    suite.addTest(\n",
        "293": "        CollectionTestSuiteBuilder.using(\n",
        "294": "                new TestStringCollectionGenerator() {\n",
        "295": "                  @Override\n",
        "296": "                  protected Collection<String> create(String[] elements) {\n",
        "297": "                    List<Integer> rowKeys = Lists.newArrayList();\n",
        "298": "                    for (int i = 0; i < elements.length; i++) {\n",
        "299": "                      rowKeys.add(i);\n",
        "300": "                    }\n",
        "301": "                    Table<Integer, Character, String> table =\n",
        "302": "                        ArrayTable.create(rowKeys, ImmutableList.of('a'));\n",
        "303": "                    populateForValues(table, elements);\n",
        "304": "                    return table.values();\n",
        "305": "                  }\n",
        "306": "                })\n",
        "307": "            .named(\"ArrayTable.values\")\n",
        "308": "            .withFeatures(\n",
        "309": "                CollectionSize.ONE,\n",
        "310": "                CollectionSize.SEVERAL,\n",
        "311": "                CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "312": "                CollectionFeature.KNOWN_ORDER)\n",
        "313": "            .createTestSuite());\n",
        "314": "\n",
        "315": "    suite.addTest(\n",
        "316": "        CollectionTestSuiteBuilder.using(\n",
        "317": "                new TestStringCollectionGenerator() {\n",
        "318": "                  @Override\n",
        "319": "                  protected Collection<String> create(String[] elements) {\n",
        "320": "                    Table<Integer, Character, String> table = HashBasedTable.create();\n",
        "321": "                    table.put(1, 'a', \"foo\");\n",
        "322": "                    table.clear();\n",
        "323": "                    populateForValues(table, elements);\n",
        "324": "                    return table.values();\n",
        "325": "                  }\n",
        "326": "                })\n",
        "327": "            .named(\"HashBasedTable.values\")\n",
        "328": "            .withFeatures(COLLECTION_FEATURES_REMOVE)\n",
        "329": "            .withFeatures(CollectionFeature.SUPPORTS_ITERATOR_REMOVE)\n",
        "330": "            .createTestSuite());\n",
        "331": "\n",
        "332": "    suite.addTest(\n",
        "333": "        CollectionTestSuiteBuilder.using(\n",
        "334": "                new TestStringCollectionGenerator() {\n",
        "335": "                  @Override\n",
        "336": "                  protected Collection<String> create(String[] elements) {\n",
        "337": "                    Table<Integer, Character, String> table = TreeBasedTable.create();\n",
        "338": "                    table.put(1, 'a', \"foo\");\n",
        "339": "                    table.clear();\n",
        "340": "                    populateForValues(table, elements);\n",
        "341": "                    return table.values();\n",
        "342": "                  }\n",
        "343": "                })\n",
        "344": "            .named(\"TreeBasedTable.values\")\n",
        "345": "            .withFeatures(COLLECTION_FEATURES_REMOVE_ORDER)\n",
        "346": "            .withFeatures(CollectionFeature.SUPPORTS_ITERATOR_REMOVE)\n",
        "347": "            .createTestSuite());\n",
        "348": "\n",
        "349": "    final Function<String, String> removeFirstCharacter =\n",
        "350": "        new Function<String, String>() {\n",
        "351": "          @Override\n",
        "352": "          public String apply(String input) {\n",
        "357": "    suite.addTest(\n",
        "358": "        CollectionTestSuiteBuilder.using(\n",
        "359": "                new TestStringCollectionGenerator() {\n",
        "360": "                  @Override\n",
        "361": "                  protected Collection<String> create(String[] elements) {\n",
        "362": "                    Table<Integer, Character, String> table = HashBasedTable.create();\n",
        "363": "                    for (int i = 0; i < elements.length; i++) {\n",
        "364": "                      table.put(i, 'a', \"x\" + checkNotNull(elements[i]));\n",
        "365": "                    }\n",
        "366": "                    return Tables.transformValues(table, removeFirstCharacter).values();\n",
        "367": "                  }\n",
        "368": "                })\n",
        "369": "            .named(\"TransformValues.values\")\n",
        "370": "            .withFeatures(COLLECTION_FEATURES_REMOVE)\n",
        "371": "            .withFeatures(CollectionFeature.SUPPORTS_ITERATOR_REMOVE)\n",
        "372": "            .createTestSuite());\n",
        "373": "\n",
        "374": "    suite.addTest(\n",
        "375": "        CollectionTestSuiteBuilder.using(\n",
        "376": "                new TestStringCollectionGenerator() {\n",
        "377": "                  @Override\n",
        "378": "                  protected Collection<String> create(String[] elements) {\n",
        "379": "                    Table<Integer, Character, String> table = HashBasedTable.create();\n",
        "380": "                    table.put(1, 'a', \"foo\");\n",
        "381": "                    table.clear();\n",
        "382": "                    populateForValues(table, elements);\n",
        "383": "                    return Tables.unmodifiableTable(table).values();\n",
        "384": "                  }\n",
        "385": "                })\n",
        "386": "            .named(\"unmodifiableTable[HashBasedTable].values\")\n",
        "387": "            .withFeatures(COLLECTION_FEATURES)\n",
        "388": "            .createTestSuite());\n",
        "389": "\n",
        "390": "    suite.addTest(\n",
        "391": "        CollectionTestSuiteBuilder.using(\n",
        "392": "                new TestStringCollectionGenerator() {\n",
        "393": "                  @Override\n",
        "394": "                  protected Collection<String> create(String[] elements) {\n",
        "395": "                    RowSortedTable<Integer, Character, String> table = TreeBasedTable.create();\n",
        "396": "                    table.put(1, 'a', \"foo\");\n",
        "397": "                    table.clear();\n",
        "398": "                    populateForValues(table, elements);\n",
        "399": "                    return Tables.unmodifiableRowSortedTable(table).values();\n",
        "400": "                  }\n",
        "401": "                })\n",
        "402": "            .named(\"unmodifiableTable[TreeBasedTable].values\")\n",
        "403": "            .withFeatures(COLLECTION_FEATURES_ORDER)\n",
        "404": "            .createTestSuite());\n",
        "453": "    suite.addTest(\n",
        "454": "        SetTestSuiteBuilder.using(\n",
        "455": "                new TestCellSetGenerator() {\n",
        "456": "                  @Override\n",
        "457": "                  Table<String, Integer, Character> createTable() {\n",
        "458": "                    return HashBasedTable.create();\n",
        "459": "                  }\n",
        "460": "                })\n",
        "461": "            .named(\"HashBasedTable.cellSet\")\n",
        "462": "            .withFeatures(\n",
        "463": "                CollectionSize.ANY,\n",
        "464": "                CollectionFeature.REMOVE_OPERATIONS,\n",
        "465": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "466": "            .createTestSuite());\n",
        "467": "\n",
        "468": "    suite.addTest(\n",
        "469": "        SetTestSuiteBuilder.using(\n",
        "470": "                new TestCellSetGenerator() {\n",
        "471": "                  @Override\n",
        "472": "                  Table<String, Integer, Character> createTable() {\n",
        "473": "                    return TreeBasedTable.create();\n",
        "474": "                  }\n",
        "475": "                })\n",
        "476": "            .named(\"TreeBasedTable.cellSet\")\n",
        "477": "            .withFeatures(\n",
        "478": "                CollectionSize.ANY,\n",
        "479": "                CollectionFeature.REMOVE_OPERATIONS,\n",
        "480": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "481": "            .createTestSuite());\n",
        "482": "\n",
        "483": "    suite.addTest(\n",
        "484": "        SetTestSuiteBuilder.using(\n",
        "485": "                new TestCellSetGenerator() {\n",
        "486": "                  @Override\n",
        "487": "                  Table<String, Integer, Character> createTable() {\n",
        "488": "                    Table<Integer, String, Character> original = TreeBasedTable.create();\n",
        "489": "                    return Tables.transpose(original);\n",
        "490": "                  }\n",
        "491": "                })\n",
        "492": "            .named(\"TransposedTable.cellSet\")\n",
        "493": "            .withFeatures(\n",
        "494": "                CollectionSize.ANY,\n",
        "495": "                CollectionFeature.REMOVE_OPERATIONS,\n",
        "496": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "497": "            .createTestSuite());\n",
        "498": "\n",
        "499": "    suite.addTest(\n",
        "500": "        SetTestSuiteBuilder.using(\n",
        "501": "                new TestCellSetGenerator() {\n",
        "502": "                  @Override\n",
        "503": "                  Table<String, Integer, Character> createTable() {\n",
        "504": "                    return HashBasedTable.create();\n",
        "505": "                  }\n",
        "506": "\n",
        "507": "                  @Override\n",
        "508": "                  public Set<Cell<String, Integer, Character>> create(Object... elements) {\n",
        "509": "                    Table<String, Integer, Character> table = createTable();\n",
        "510": "                    for (Object element : elements) {\n",
        "511": "                      @SuppressWarnings(\"unchecked\")\n",
        "512": "                      Cell<String, Integer, Character> cell =\n",
        "513": "                          (Cell<String, Integer, Character>) element;\n",
        "514": "                      table.put(cell.getRowKey(), cell.getColumnKey(), cell.getValue());\n",
        "515": "                    }\n",
        "516": "                    return Tables.transformValues(table, Functions.<Character>identity()).cellSet();\n",
        "517": "                  }\n",
        "518": "                })\n",
        "519": "            .named(\"TransformValues.cellSet\")\n",
        "520": "            .withFeatures(\n",
        "521": "                CollectionSize.ANY,\n",
        "522": "                CollectionFeature.ALLOWS_NULL_QUERIES,\n",
        "523": "                CollectionFeature.REMOVE_OPERATIONS)\n",
        "524": "            .createTestSuite());\n",
        "525": "\n",
        "526": "    suite.addTest(\n",
        "527": "        SetTestSuiteBuilder.using(\n",
        "528": "                new TestCellSetGenerator() {\n",
        "529": "                  @Override\n",
        "530": "                  Table<String, Integer, Character> createTable() {\n",
        "531": "                    return Tables.unmodifiableTable(\n",
        "532": "                        HashBasedTable.<String, Integer, Character>create());\n",
        "533": "                  }\n",
        "534": "\n",
        "535": "                  @Override\n",
        "536": "                  public Set<Cell<String, Integer, Character>> create(Object... elements) {\n",
        "537": "                    Table<String, Integer, Character> table = HashBasedTable.create();\n",
        "538": "                    for (Object element : elements) {\n",
        "539": "                      @SuppressWarnings(\"unchecked\")\n",
        "540": "                      Cell<String, Integer, Character> cell =\n",
        "541": "                          (Cell<String, Integer, Character>) element;\n",
        "542": "                      table.put(cell.getRowKey(), cell.getColumnKey(), cell.getValue());\n",
        "543": "                    }\n",
        "544": "                    return Tables.unmodifiableTable(table).cellSet();\n",
        "545": "                  }\n",
        "546": "                })\n",
        "547": "            .named(\"unmodifiableTable[HashBasedTable].cellSet\")\n",
        "548": "            .withFeatures(CollectionSize.ANY, CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "549": "            .createTestSuite());\n",
        "550": "\n",
        "551": "    suite.addTest(\n",
        "552": "        SetTestSuiteBuilder.using(\n",
        "553": "                new TestCellSetGenerator() {\n",
        "554": "                  @Override\n",
        "555": "                  RowSortedTable<String, Integer, Character> createTable() {\n",
        "556": "                    return Tables.unmodifiableRowSortedTable(\n",
        "557": "                        TreeBasedTable.<String, Integer, Character>create());\n",
        "558": "                  }\n",
        "559": "\n",
        "560": "                  @Override\n",
        "561": "                  public Set<Cell<String, Integer, Character>> create(Object... elements) {\n",
        "562": "                    RowSortedTable<String, Integer, Character> table = TreeBasedTable.create();\n",
        "563": "                    for (Object element : elements) {\n",
        "564": "                      @SuppressWarnings(\"unchecked\")\n",
        "565": "                      Cell<String, Integer, Character> cell =\n",
        "566": "                          (Cell<String, Integer, Character>) element;\n",
        "567": "                      table.put(cell.getRowKey(), cell.getColumnKey(), cell.getValue());\n",
        "568": "                    }\n",
        "569": "                    return Tables.unmodifiableRowSortedTable(table).cellSet();\n",
        "570": "                  }\n",
        "571": "                })\n",
        "572": "            .named(\"unmodifiableRowSortedTable[TreeBasedTable].cellSet\")\n",
        "573": "            .withFeatures(CollectionSize.ANY, CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "574": "            .createTestSuite());\n",
        "575": "\n",
        "576": "    suite.addTest(\n",
        "577": "        SetTestSuiteBuilder.using(\n",
        "578": "                new TestStringSetGenerator() {\n",
        "579": "                  @Override\n",
        "580": "                  protected Set<String> create(String[] elements) {\n",
        "581": "                    Iterable<String> rowKeys = ImmutableSet.copyOf(elements);\n",
        "582": "                    Iterable<Integer> columnKeys = ImmutableList.of(1, 2, 3);\n",
        "583": "                    Table<String, Integer, Character> table =\n",
        "584": "                        ArrayTable.create(rowKeys, columnKeys);\n",
        "585": "                    populateForRowKeySet(table, elements);\n",
        "586": "                    return table.column(1).keySet();\n",
        "587": "                  }\n",
        "588": "                })\n",
        "589": "            .named(\"ArrayTable.column.keySet\")\n",
        "590": "            .withFeatures(\n",
        "591": "                CollectionSize.ONE,\n",
        "592": "                CollectionSize.SEVERAL,\n",
        "593": "                CollectionFeature.KNOWN_ORDER,\n",
        "594": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "595": "            .createTestSuite());\n",
        "596": "\n",
        "597": "    suite.addTest(\n",
        "598": "        SetTestSuiteBuilder.using(\n",
        "599": "                new TestStringSetGenerator() {\n",
        "600": "                  @Override\n",
        "601": "                  protected Set<String> create(String[] elements) {\n",
        "602": "                    Table<String, Integer, Character> table = HashBasedTable.create();\n",
        "603": "                    populateForRowKeySet(table, elements);\n",
        "604": "                    return table.column(1).keySet();\n",
        "605": "                  }\n",
        "606": "                })\n",
        "607": "            .named(\"HashBasedTable.column.keySet\")\n",
        "608": "            .withFeatures(COLLECTION_FEATURES_REMOVE)\n",
        "609": "            .createTestSuite());\n",
        "610": "\n",
        "611": "    suite.addTest(\n",
        "612": "        SetTestSuiteBuilder.using(\n",
        "613": "                new TestStringSetGenerator() {\n",
        "614": "                  @Override\n",
        "615": "                  protected Set<String> create(String[] elements) {\n",
        "616": "                    Table<String, Integer, Character> table = TreeBasedTable.create();\n",
        "617": "                    populateForRowKeySet(table, elements);\n",
        "618": "                    return table.column(1).keySet();\n",
        "619": "                  }\n",
        "620": "\n",
        "621": "                  @Override\n",
        "622": "                  public List<String> order(List<String> insertionOrder) {\n",
        "623": "                    Collections.sort(insertionOrder);\n",
        "624": "                    return insertionOrder;\n",
        "625": "                  }\n",
        "626": "                })\n",
        "627": "            .named(\"TreeBasedTable.column.keySet\")\n",
        "628": "            .withFeatures(COLLECTION_FEATURES_REMOVE_ORDER)\n",
        "629": "            .createTestSuite());\n",
        "630": "\n",
        "631": "    suite.addTest(\n",
        "632": "        SetTestSuiteBuilder.using(\n",
        "633": "                new TestStringSetGenerator() {\n",
        "634": "                  @Override\n",
        "635": "                  protected Set<String> create(String[] elements) {\n",
        "636": "                    Table<String, Integer, Character> table = HashBasedTable.create();\n",
        "637": "                    populateForRowKeySet(table, elements);\n",
        "638": "                    return Tables.transformValues(table, Functions.toStringFunction())\n",
        "639": "                        .column(1)\n",
        "640": "                        .keySet();\n",
        "641": "                  }\n",
        "642": "                })\n",
        "643": "            .named(\"TransformValues.column.keySet\")\n",
        "644": "            .withFeatures(COLLECTION_FEATURES_REMOVE)\n",
        "645": "            .createTestSuite());\n",
        "646": "\n",
        "647": "    suite.addTest(\n",
        "648": "        SetTestSuiteBuilder.using(\n",
        "649": "                new TestStringSetGenerator() {\n",
        "650": "                  @Override\n",
        "651": "                  protected Set<String> create(String[] elements) {\n",
        "652": "                    Table<String, Integer, Character> table = HashBasedTable.create();\n",
        "653": "                    populateForRowKeySet(table, elements);\n",
        "654": "                    return Tables.unmodifiableTable(table).column(1).keySet();\n",
        "655": "                  }\n",
        "656": "                })\n",
        "657": "            .named(\"unmodifiableTable[HashBasedTable].column.keySet\")\n",
        "658": "            .withFeatures(COLLECTION_FEATURES)\n",
        "659": "            .createTestSuite());\n",
        "660": "\n",
        "661": "    suite.addTest(\n",
        "662": "        SetTestSuiteBuilder.using(\n",
        "663": "                new TestStringSetGenerator() {\n",
        "664": "                  @Override\n",
        "665": "                  protected Set<String> create(String[] elements) {\n",
        "666": "                    RowSortedTable<String, Integer, Character> table = TreeBasedTable.create();\n",
        "667": "                    populateForRowKeySet(table, elements);\n",
        "668": "                    return Tables.unmodifiableRowSortedTable(table).column(1).keySet();\n",
        "669": "                  }\n",
        "670": "\n",
        "671": "                  @Override\n",
        "672": "                  public List<String> order(List<String> insertionOrder) {\n",
        "673": "                    Collections.sort(insertionOrder);\n",
        "674": "                    return insertionOrder;\n",
        "675": "                  }\n",
        "676": "                })\n",
        "677": "            .named(\"unmodifiableRowSortedTable[TreeBasedTable].column.keySet\")\n",
        "678": "            .withFeatures(COLLECTION_FEATURES_ORDER)\n",
        "679": "            .createTestSuite());\n",
        "707": "  private abstract static class TestCellSetGenerator\n",
        "720": "    public Set<Cell<String, Integer, Character>> create(Object... elements) {\n",
        "724": "        Cell<String, Integer, Character> cell = (Cell<String, Integer, Character>) element;\n",
        "745": "  private abstract static class MapTests extends MapInterfaceTest<String, Integer> {\n",
        "746": "\n",
        "747": "    MapTests(\n",
        "748": "        boolean allowsNullValues,\n",
        "749": "        boolean supportsPut,\n",
        "750": "        boolean supportsRemove,\n",
        "751": "        boolean supportsClear,\n",
        "752": "        boolean supportsIteratorRemove) {\n",
        "753": "      super(\n",
        "754": "          false,\n",
        "755": "          allowsNullValues,\n",
        "756": "          supportsPut,\n",
        "757": "          supportsRemove,\n",
        "758": "          supportsClear,\n",
        "762": "    @Override\n",
        "763": "    protected String getKeyNotInPopulatedMap() {\n",
        "767": "    @Override\n",
        "768": "    protected Integer getValueNotInPopulatedMap() {\n",
        "773": "  private abstract static class RowTests extends MapTests {\n",
        "774": "    RowTests(\n",
        "775": "        boolean allowsNullValues,\n",
        "776": "        boolean supportsPut,\n",
        "777": "        boolean supportsRemove,\n",
        "778": "        boolean supportsClear,\n",
        "779": "        boolean supportsIteratorRemove) {\n",
        "780": "      super(allowsNullValues, supportsPut, supportsRemove, supportsClear, supportsIteratorRemove);\n",
        "785": "    @Override\n",
        "786": "    protected Map<String, Integer> makeEmptyMap() {\n",
        "790": "    @Override\n",
        "791": "    protected Map<String, Integer> makePopulatedMap() {\n",
        "807": "    @Override\n",
        "808": "    protected String getKeyNotInPopulatedMap() {\n",
        "812": "    @Override\n",
        "813": "    protected Map<String, Integer> makeEmptyMap() {\n",
        "817": "    @Override\n",
        "818": "    protected Table<Character, String, Integer> makeTable() {\n",
        "819": "      return ArrayTable.create(\n",
        "820": "          Arrays.asList('a', 'b', 'c'), Arrays.asList(\"one\", \"two\", \"three\", \"four\"));\n",
        "829": "    @Override\n",
        "830": "    Table<Character, String, Integer> makeTable() {\n",
        "840": "    @Override\n",
        "841": "    Table<Character, String, Integer> makeTable() {\n",
        "851": "    @Override\n",
        "852": "    Table<Character, String, Integer> makeTable() {\n",
        "858": "  private static final Function<Integer, Integer> DIVIDE_BY_2 =\n",
        "859": "      new Function<Integer, Integer>() {\n",
        "860": "        @Override\n",
        "861": "        public Integer apply(Integer input) {\n",
        "864": "      };\n",
        "871": "    @Override\n",
        "872": "    Table<Character, String, Integer> makeTable() {\n",
        "877": "    @Override\n",
        "878": "    protected Map<String, Integer> makePopulatedMap() {\n",
        "893": "    @Override\n",
        "894": "    Table<Character, String, Integer> makeTable() {\n",
        "899": "    @Override\n",
        "900": "    protected Map<String, Integer> makePopulatedMap() {\n",
        "915": "    @Override\n",
        "916": "    Table<Character, String, Integer> makeTable() {\n",
        "921": "    @Override\n",
        "922": "    protected Map<String, Integer> makePopulatedMap() {\n",
        "932": "  private abstract static class ColumnTests extends MapTests {\n",
        "933": "    ColumnTests(\n",
        "934": "        boolean allowsNullValues,\n",
        "935": "        boolean supportsPut,\n",
        "936": "        boolean supportsRemove,\n",
        "937": "        boolean supportsClear,\n",
        "938": "        boolean supportsIteratorRemove) {\n",
        "939": "      super(allowsNullValues, supportsPut, supportsRemove, supportsClear, supportsIteratorRemove);\n",
        "944": "    @Override\n",
        "945": "    protected Map<String, Integer> makeEmptyMap() {\n",
        "949": "    @Override\n",
        "950": "    protected Map<String, Integer> makePopulatedMap() {\n",
        "966": "    @Override\n",
        "967": "    protected String getKeyNotInPopulatedMap() {\n",
        "971": "    @Override\n",
        "972": "    protected Map<String, Integer> makeEmptyMap() {\n",
        "976": "    @Override\n",
        "977": "    Table<String, Character, Integer> makeTable() {\n",
        "978": "      return ArrayTable.create(\n",
        "979": "          Arrays.asList(\"one\", \"two\", \"three\", \"four\"), Arrays.asList('a', 'b', 'c'));\n",
        "988": "    @Override\n",
        "989": "    Table<String, Character, Integer> makeTable() {\n",
        "999": "    @Override\n",
        "1000": "    Table<String, Character, Integer> makeTable() {\n",
        "1010": "    @Override\n",
        "1011": "    Table<String, Character, Integer> makeTable() {\n",
        "1022": "    @Override\n",
        "1023": "    Table<String, Character, Integer> makeTable() {\n",
        "1028": "    @Override\n",
        "1029": "    protected Map<String, Integer> makePopulatedMap() {\n",
        "1044": "    @Override\n",
        "1045": "    Table<String, Character, Integer> makeTable() {\n",
        "1050": "    @Override\n",
        "1051": "    protected Map<String, Integer> makePopulatedMap() {\n",
        "1066": "    @Override\n",
        "1067": "    Table<String, Character, Integer> makeTable() {\n",
        "1072": "    @Override\n",
        "1073": "    protected Map<String, Integer> makePopulatedMap() {\n",
        "1083": "  private abstract static class MapMapTests\n",
        "1086": "    MapMapTests(\n",
        "1087": "        boolean allowsNullValues,\n",
        "1088": "        boolean supportsRemove,\n",
        "1089": "        boolean supportsClear,\n",
        "1090": "        boolean supportsIteratorRemove) {\n",
        "1091": "      super(false, allowsNullValues, false, supportsRemove, supportsClear, supportsIteratorRemove);\n",
        "1094": "    @Override\n",
        "1095": "    protected String getKeyNotInPopulatedMap() {\n",
        "1099": "    @Override\n",
        "1100": "    protected Map<Integer, Character> getValueNotInPopulatedMap() {\n",
        "1105": "     * The version of this test supplied by {@link MapInterfaceTest} fails for this particular map\n",
        "1106": "     * implementation, because {@code map.get()} returns a view collection that changes in the\n",
        "1107": "     * course of a call to {@code remove()}. Thus, the expectation doesn't hold that {@code\n",
        "1108": "     * map.remove(x)} returns the same value which {@code map.get(x)} did immediately beforehand.\n",
        "1110": "    @Override\n",
        "1111": "    public void testRemove() {\n",
        "1139": "  private abstract static class RowMapTests extends MapMapTests {\n",
        "1140": "    RowMapTests(\n",
        "1141": "        boolean allowsNullValues,\n",
        "1142": "        boolean supportsRemove,\n",
        "1143": "        boolean supportsClear,\n",
        "1144": "        boolean supportsIteratorRemove) {\n",
        "1145": "      super(allowsNullValues, supportsRemove, supportsClear, supportsIteratorRemove);\n",
        "1150": "    @Override\n",
        "1151": "    protected Map<String, Map<Integer, Character>> makePopulatedMap() {\n",
        "1163": "    @Override\n",
        "1164": "    protected Map<String, Map<Integer, Character>> makeEmptyMap() {\n",
        "1175": "    @Override\n",
        "1176": "    Table<String, Integer, Character> makeTable() {\n",
        "1177": "      return ArrayTable.create(Arrays.asList(\"foo\", \"bar\", \"dog\"), Arrays.asList(1, 2, 3));\n",
        "1180": "    @Override\n",
        "1181": "    protected Map<String, Map<Integer, Character>> makeEmptyMap() {\n",
        "1191": "    @Override\n",
        "1192": "    Table<String, Integer, Character> makeTable() {\n",
        "1202": "    @Override\n",
        "1203": "    Table<String, Integer, Character> makeTable() {\n",
        "1213": "    @Override\n",
        "1214": "    TreeBasedTable<String, Integer, Character> makeTable() {\n",
        "1215": "      TreeBasedTable<String, Integer, Character> table = TreeBasedTable.create();\n",
        "1220": "    @Override\n",
        "1221": "    protected Map<String, Map<Integer, Character>> makePopulatedMap() {\n",
        "1227": "    @Override\n",
        "1228": "    protected Map<String, Map<Integer, Character>> makeEmptyMap() {\n",
        "1232": "    @Override\n",
        "1233": "    protected String getKeyNotInPopulatedMap() {\n",
        "1243": "    @Override\n",
        "1244": "    TreeBasedTable<String, Integer, Character> makeTable() {\n",
        "1245": "      TreeBasedTable<String, Integer, Character> table = TreeBasedTable.create();\n",
        "1250": "    @Override\n",
        "1251": "    protected Map<String, Map<Integer, Character>> makePopulatedMap() {\n",
        "1257": "    @Override\n",
        "1258": "    protected Map<String, Map<Integer, Character>> makeEmptyMap() {\n",
        "1262": "    @Override\n",
        "1263": "    protected String getKeyNotInPopulatedMap() {\n",
        "1273": "    @Override\n",
        "1274": "    TreeBasedTable<String, Integer, Character> makeTable() {\n",
        "1275": "      TreeBasedTable<String, Integer, Character> table = TreeBasedTable.create();\n",
        "1281": "    @Override\n",
        "1282": "    protected Map<String, Map<Integer, Character>> makePopulatedMap() {\n",
        "1288": "    @Override\n",
        "1289": "    protected Map<String, Map<Integer, Character>> makeEmptyMap() {\n",
        "1293": "    @Override\n",
        "1294": "    protected String getKeyNotInPopulatedMap() {\n",
        "1312": "    @Override\n",
        "1313": "    Table<String, Integer, Character> makeTable() {\n",
        "1333": "    @Override\n",
        "1334": "    Table<String, Integer, Character> makeTable() {\n",
        "1354": "    @Override\n",
        "1355": "    RowSortedTable<String, Integer, Character> makeTable() {\n",
        "1370": "  private abstract static class ColumnMapTests extends MapMapTests {\n",
        "1371": "    ColumnMapTests(\n",
        "1372": "        boolean allowsNullValues,\n",
        "1373": "        boolean supportsRemove,\n",
        "1374": "        boolean supportsClear,\n",
        "1375": "        boolean supportsIteratorRemove) {\n",
        "1376": "      super(allowsNullValues, supportsRemove, supportsClear, supportsIteratorRemove);\n",
        "1381": "    @Override\n",
        "1382": "    protected Map<String, Map<Integer, Character>> makePopulatedMap() {\n",
        "1390": "    @Override\n",
        "1391": "    protected Map<String, Map<Integer, Character>> makeEmptyMap() {\n",
        "1402": "    @Override\n",
        "1403": "    Table<Integer, String, Character> makeTable() {\n",
        "1404": "      return ArrayTable.create(Arrays.asList(1, 2, 3), Arrays.asList(\"foo\", \"bar\", \"dog\"));\n",
        "1407": "    @Override\n",
        "1408": "    protected Map<String, Map<Integer, Character>> makeEmptyMap() {\n",
        "1418": "    @Override\n",
        "1419": "    Table<Integer, String, Character> makeTable() {\n",
        "1429": "    @Override\n",
        "1430": "    Table<Integer, String, Character> makeTable() {\n",
        "1440": "    @Override\n",
        "1441": "    Table<Integer, String, Character> makeTable() {\n",
        "1461": "    @Override\n",
        "1462": "    Table<Integer, String, Character> makeTable() {\n",
        "1482": "    @Override\n",
        "1483": "    Table<Integer, String, Character> makeTable() {\n"
    },
    "removed": {
        "60": "    CollectionSize.ANY,\n",
        "61": "    CollectionFeature.ALLOWS_NULL_QUERIES\n",
        "65": "    CollectionSize.ANY,\n",
        "66": "    CollectionFeature.KNOWN_ORDER,\n",
        "67": "    CollectionFeature.ALLOWS_NULL_QUERIES\n",
        "71": "    CollectionSize.ANY,\n",
        "72": "    CollectionFeature.SUPPORTS_REMOVE,\n",
        "73": "    CollectionFeature.ALLOWS_NULL_QUERIES\n",
        "119": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "120": "          @Override protected Set<String> create(String[] elements) {\n",
        "121": "            Table<String, Integer, Character> table\n",
        "122": "                = ArrayTable.create(\n",
        "123": "                    ImmutableList.copyOf(elements), ImmutableList.of(1, 2));\n",
        "124": "            populateForRowKeySet(table, elements);\n",
        "125": "            return table.rowKeySet();\n",
        "126": "          }\n",
        "127": "        })\n",
        "128": "        .named(\"ArrayTable.rowKeySet\")\n",
        "129": "        .withFeatures(CollectionSize.ONE, CollectionSize.SEVERAL,\n",
        "130": "            CollectionFeature.KNOWN_ORDER,\n",
        "131": "            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "132": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "133": "        .createTestSuite());\n",
        "134": "\n",
        "135": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "136": "          @Override protected Set<String> create(String[] elements) {\n",
        "137": "            Table<String, Integer, Character> table = HashBasedTable.create();\n",
        "138": "            populateForRowKeySet(table, elements);\n",
        "139": "            return table.rowKeySet();\n",
        "140": "          }\n",
        "141": "        })\n",
        "142": "        .named(\"HashBasedTable.rowKeySet\")\n",
        "143": "        .withFeatures(COLLECTION_FEATURES_REMOVE)\n",
        "144": "        .withFeatures(CollectionFeature.SUPPORTS_ITERATOR_REMOVE)\n",
        "145": "        .createTestSuite());\n",
        "146": "\n",
        "147": "    suite.addTest(SortedSetTestSuiteBuilder.using(new TestStringSortedSetGenerator() {\n",
        "148": "          @Override protected SortedSet<String> create(String[] elements) {\n",
        "149": "            TreeBasedTable<String, Integer, Character> table = TreeBasedTable.create();\n",
        "150": "            populateForRowKeySet(table, elements);\n",
        "151": "            return table.rowKeySet();\n",
        "152": "          }\n",
        "154": "          @Override public List<String> order(List<String> insertionOrder) {\n",
        "155": "            Collections.sort(insertionOrder);\n",
        "156": "            return insertionOrder;\n",
        "157": "          }\n",
        "158": "        })\n",
        "159": "        .named(\"TreeBasedTable.rowKeySet\")\n",
        "160": "        .withFeatures(COLLECTION_FEATURES_REMOVE_ORDER)\n",
        "161": "        .withFeatures(CollectionFeature.SUPPORTS_ITERATOR_REMOVE)\n",
        "162": "        .createTestSuite());\n",
        "163": "\n",
        "164": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "165": "          @Override protected Set<String> create(String[] elements) {\n",
        "166": "            Table<String, Integer, Character> table = HashBasedTable.create();\n",
        "167": "            populateForRowKeySet(table, elements);\n",
        "168": "            return Tables.unmodifiableTable(table).rowKeySet();\n",
        "169": "          }\n",
        "170": "        })\n",
        "171": "        .named(\"unmodifiableTable[HashBasedTable].rowKeySet\")\n",
        "172": "        .withFeatures(COLLECTION_FEATURES)\n",
        "173": "        .createTestSuite());\n",
        "174": "\n",
        "175": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "176": "          @Override protected Set<String> create(String[] elements) {\n",
        "177": "            RowSortedTable<String, Integer, Character> table = TreeBasedTable.create();\n",
        "178": "            populateForRowKeySet(table, elements);\n",
        "179": "            return Tables.unmodifiableRowSortedTable(table).rowKeySet();\n",
        "180": "          }\n",
        "182": "          @Override public List<String> order(List<String> insertionOrder) {\n",
        "183": "            Collections.sort(insertionOrder);\n",
        "184": "            return insertionOrder;\n",
        "185": "          }\n",
        "186": "        })\n",
        "187": "        .named(\"unmodifiableRowSortedTable[TreeBasedTable].rowKeySet\")\n",
        "188": "        .withFeatures(COLLECTION_FEATURES_ORDER)\n",
        "189": "        .createTestSuite());\n",
        "190": "\n",
        "191": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "192": "          @Override protected Set<String> create(String[] elements) {\n",
        "193": "            Table<Integer, String, Character> table\n",
        "194": "                = ArrayTable.create(\n",
        "195": "                    ImmutableList.of(1, 2), ImmutableList.copyOf(elements));\n",
        "196": "            populateForColumnKeySet(table, elements);\n",
        "197": "            return table.columnKeySet();\n",
        "198": "          }\n",
        "199": "        })\n",
        "200": "        .named(\"ArrayTable.columnKeySet\")\n",
        "201": "        .withFeatures(CollectionSize.ONE, CollectionSize.SEVERAL,\n",
        "202": "            CollectionFeature.KNOWN_ORDER,\n",
        "203": "            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "204": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "205": "        .createTestSuite());\n",
        "206": "\n",
        "207": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "208": "          @Override protected Set<String> create(String[] elements) {\n",
        "209": "            Table<Integer, String, Character> table = HashBasedTable.create();\n",
        "210": "            populateForColumnKeySet(table, elements);\n",
        "211": "            return table.columnKeySet();\n",
        "212": "          }\n",
        "213": "        })\n",
        "214": "        .named(\"HashBasedTable.columnKeySet\")\n",
        "215": "        .withFeatures(COLLECTION_FEATURES_REMOVE)\n",
        "216": "        .createTestSuite());\n",
        "217": "\n",
        "218": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "219": "          @Override protected Set<String> create(String[] elements) {\n",
        "220": "            Table<Integer, String, Character> table = TreeBasedTable.create();\n",
        "221": "            populateForColumnKeySet(table, elements);\n",
        "222": "            return table.columnKeySet();\n",
        "223": "          }\n",
        "225": "          @Override public List<String> order(List<String> insertionOrder) {\n",
        "226": "            Collections.sort(insertionOrder);\n",
        "227": "            return insertionOrder;\n",
        "228": "          }\n",
        "229": "        })\n",
        "230": "        .named(\"TreeBasedTable.columnKeySet\")\n",
        "231": "        .withFeatures(COLLECTION_FEATURES_REMOVE_ORDER)\n",
        "232": "        .createTestSuite());\n",
        "233": "\n",
        "234": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "235": "          @Override protected Set<String> create(String[] elements) {\n",
        "236": "            Table<Integer, String, Character> table = HashBasedTable.create();\n",
        "237": "            populateForColumnKeySet(table, elements);\n",
        "238": "            return Tables.unmodifiableTable(table).columnKeySet();\n",
        "239": "          }\n",
        "240": "        })\n",
        "241": "        .named(\"unmodifiableTable[HashBasedTable].columnKeySet\")\n",
        "242": "        .withFeatures(COLLECTION_FEATURES)\n",
        "243": "        .createTestSuite());\n",
        "244": "\n",
        "245": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "246": "          @Override protected Set<String> create(String[] elements) {\n",
        "247": "            RowSortedTable<Integer, String, Character> table = TreeBasedTable.create();\n",
        "248": "            populateForColumnKeySet(table, elements);\n",
        "249": "            return Tables.unmodifiableRowSortedTable(table).columnKeySet();\n",
        "250": "          }\n",
        "252": "          @Override public List<String> order(List<String> insertionOrder) {\n",
        "253": "            Collections.sort(insertionOrder);\n",
        "254": "            return insertionOrder;\n",
        "255": "          }\n",
        "256": "        })\n",
        "257": "        .named(\"unmodifiableRowSortedTable[TreeBasedTable].columnKeySet\")\n",
        "258": "        .withFeatures(COLLECTION_FEATURES_ORDER)\n",
        "259": "        .createTestSuite());\n",
        "260": "\n",
        "261": "    suite.addTest(CollectionTestSuiteBuilder.using(\n",
        "262": "        new TestStringCollectionGenerator() {\n",
        "263": "          @Override protected Collection<String> create(String[] elements) {\n",
        "264": "            List<Integer> rowKeys = Lists.newArrayList();\n",
        "265": "            for (int i = 0; i < elements.length; i++) {\n",
        "266": "              rowKeys.add(i);\n",
        "267": "            }\n",
        "268": "            Table<Integer, Character, String> table\n",
        "269": "                = ArrayTable.create(rowKeys, ImmutableList.of('a'));\n",
        "270": "            populateForValues(table, elements);\n",
        "271": "            return table.values();\n",
        "272": "          }\n",
        "273": "        })\n",
        "274": "        .named(\"ArrayTable.values\")\n",
        "275": "        .withFeatures(CollectionSize.ONE, CollectionSize.SEVERAL,\n",
        "276": "            CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "277": "            CollectionFeature.KNOWN_ORDER)\n",
        "278": "        .createTestSuite());\n",
        "279": "\n",
        "280": "    suite.addTest(CollectionTestSuiteBuilder.using(\n",
        "281": "        new TestStringCollectionGenerator() {\n",
        "282": "          @Override protected Collection<String> create(String[] elements) {\n",
        "283": "            Table<Integer, Character, String> table = HashBasedTable.create();\n",
        "284": "            table.put(1, 'a', \"foo\");\n",
        "285": "            table.clear();\n",
        "286": "            populateForValues(table, elements);\n",
        "287": "            return table.values();\n",
        "288": "          }\n",
        "289": "        })\n",
        "290": "        .named(\"HashBasedTable.values\")\n",
        "291": "        .withFeatures(COLLECTION_FEATURES_REMOVE)\n",
        "292": "        .withFeatures(CollectionFeature.SUPPORTS_ITERATOR_REMOVE)\n",
        "293": "        .createTestSuite());\n",
        "294": "\n",
        "295": "    suite.addTest(CollectionTestSuiteBuilder.using(\n",
        "296": "        new TestStringCollectionGenerator() {\n",
        "297": "          @Override protected Collection<String> create(String[] elements) {\n",
        "298": "            Table<Integer, Character, String> table = TreeBasedTable.create();\n",
        "299": "            table.put(1, 'a', \"foo\");\n",
        "300": "            table.clear();\n",
        "301": "            populateForValues(table, elements);\n",
        "302": "            return table.values();\n",
        "303": "          }\n",
        "304": "        })\n",
        "305": "        .named(\"TreeBasedTable.values\")\n",
        "306": "        .withFeatures(COLLECTION_FEATURES_REMOVE_ORDER)\n",
        "307": "        .withFeatures(CollectionFeature.SUPPORTS_ITERATOR_REMOVE)\n",
        "308": "        .createTestSuite());\n",
        "309": "\n",
        "310": "    final Function<String, String> removeFirstCharacter\n",
        "311": "        = new Function<String, String>() {\n",
        "312": "          @Override public String apply(String input) {\n",
        "317": "    suite.addTest(CollectionTestSuiteBuilder.using(\n",
        "318": "        new TestStringCollectionGenerator() {\n",
        "319": "          @Override protected Collection<String> create(String[] elements) {\n",
        "320": "            Table<Integer, Character, String> table = HashBasedTable.create();\n",
        "321": "            for (int i = 0; i < elements.length; i++) {\n",
        "322": "              table.put(i, 'a', \"x\" + checkNotNull(elements[i]));\n",
        "323": "            }\n",
        "324": "            return Tables.transformValues(table, removeFirstCharacter).values();\n",
        "325": "          }\n",
        "326": "        })\n",
        "327": "        .named(\"TransformValues.values\")\n",
        "328": "        .withFeatures(COLLECTION_FEATURES_REMOVE)\n",
        "329": "        .withFeatures(CollectionFeature.SUPPORTS_ITERATOR_REMOVE)\n",
        "330": "        .createTestSuite());\n",
        "331": "\n",
        "332": "    suite.addTest(CollectionTestSuiteBuilder.using(\n",
        "333": "        new TestStringCollectionGenerator() {\n",
        "334": "          @Override protected Collection<String> create(String[] elements) {\n",
        "335": "            Table<Integer, Character, String> table = HashBasedTable.create();\n",
        "336": "            table.put(1, 'a', \"foo\");\n",
        "337": "            table.clear();\n",
        "338": "            populateForValues(table, elements);\n",
        "339": "            return Tables.unmodifiableTable(table).values();\n",
        "340": "          }\n",
        "341": "        })\n",
        "342": "        .named(\"unmodifiableTable[HashBasedTable].values\")\n",
        "343": "        .withFeatures(COLLECTION_FEATURES)\n",
        "344": "        .createTestSuite());\n",
        "345": "\n",
        "346": "    suite.addTest(CollectionTestSuiteBuilder.using(\n",
        "347": "        new TestStringCollectionGenerator() {\n",
        "348": "          @Override protected Collection<String> create(String[] elements) {\n",
        "349": "            RowSortedTable<Integer, Character, String> table = TreeBasedTable.create();\n",
        "350": "            table.put(1, 'a', \"foo\");\n",
        "351": "            table.clear();\n",
        "352": "            populateForValues(table, elements);\n",
        "353": "            return Tables.unmodifiableRowSortedTable(table).values();\n",
        "354": "          }\n",
        "355": "        })\n",
        "356": "        .named(\"unmodifiableTable[TreeBasedTable].values\")\n",
        "357": "        .withFeatures(COLLECTION_FEATURES_ORDER)\n",
        "358": "        .createTestSuite());\n",
        "407": "    suite.addTest(SetTestSuiteBuilder.using(new TestCellSetGenerator() {\n",
        "408": "          @Override Table<String, Integer, Character> createTable() {\n",
        "409": "            return HashBasedTable.create();\n",
        "410": "          }\n",
        "411": "        })\n",
        "412": "        .named(\"HashBasedTable.cellSet\")\n",
        "413": "        .withFeatures(CollectionSize.ANY, CollectionFeature.REMOVE_OPERATIONS,\n",
        "414": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "415": "        .createTestSuite());\n",
        "416": "\n",
        "417": "    suite.addTest(SetTestSuiteBuilder.using(new TestCellSetGenerator() {\n",
        "418": "          @Override Table<String, Integer, Character> createTable() {\n",
        "419": "            return TreeBasedTable.create();\n",
        "420": "          }\n",
        "421": "        })\n",
        "422": "        .named(\"TreeBasedTable.cellSet\")\n",
        "423": "        .withFeatures(CollectionSize.ANY, CollectionFeature.REMOVE_OPERATIONS,\n",
        "424": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "425": "        .createTestSuite());\n",
        "426": "\n",
        "427": "    suite.addTest(SetTestSuiteBuilder.using(new TestCellSetGenerator() {\n",
        "428": "          @Override Table<String, Integer, Character> createTable() {\n",
        "429": "            Table<Integer, String, Character> original\n",
        "430": "                = TreeBasedTable.create();\n",
        "431": "            return Tables.transpose(original);\n",
        "432": "          }\n",
        "433": "        })\n",
        "434": "        .named(\"TransposedTable.cellSet\")\n",
        "435": "        .withFeatures(CollectionSize.ANY, CollectionFeature.REMOVE_OPERATIONS,\n",
        "436": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "437": "        .createTestSuite());\n",
        "438": "\n",
        "439": "    suite.addTest(SetTestSuiteBuilder.using(new TestCellSetGenerator() {\n",
        "440": "          @Override Table<String, Integer, Character> createTable() {\n",
        "441": "            return HashBasedTable.create();\n",
        "442": "          }\n",
        "443": "          @Override\n",
        "444": "          public Set<Cell<String, Integer, Character>> create(\n",
        "445": "              Object... elements) {\n",
        "446": "            Table<String, Integer, Character> table = createTable();\n",
        "447": "            for (Object element : elements) {\n",
        "448": "              @SuppressWarnings(\"unchecked\")\n",
        "449": "              Cell<String, Integer, Character> cell\n",
        "450": "                  = (Cell<String, Integer, Character>) element;\n",
        "451": "              table.put(cell.getRowKey(), cell.getColumnKey(), cell.getValue());\n",
        "452": "            }\n",
        "453": "            return Tables.transformValues(table, Functions.<Character>identity()).cellSet();\n",
        "454": "          }\n",
        "455": "        })\n",
        "456": "        .named(\"TransformValues.cellSet\")\n",
        "457": "        .withFeatures(CollectionSize.ANY, CollectionFeature.ALLOWS_NULL_QUERIES,\n",
        "458": "            CollectionFeature.REMOVE_OPERATIONS)\n",
        "459": "        .createTestSuite());\n",
        "460": "\n",
        "461": "    suite.addTest(SetTestSuiteBuilder.using(new TestCellSetGenerator() {\n",
        "462": "          @Override Table<String, Integer, Character> createTable() {\n",
        "463": "            return Tables.unmodifiableTable(HashBasedTable.<String, Integer, Character> create());\n",
        "464": "          }\n",
        "465": "          @Override\n",
        "466": "          public Set<Cell<String, Integer, Character>> create(\n",
        "467": "              Object... elements) {\n",
        "468": "            Table<String, Integer, Character> table = HashBasedTable.create();\n",
        "469": "            for (Object element : elements) {\n",
        "470": "              @SuppressWarnings(\"unchecked\")\n",
        "471": "              Cell<String, Integer, Character> cell\n",
        "472": "                  = (Cell<String, Integer, Character>) element;\n",
        "473": "              table.put(cell.getRowKey(), cell.getColumnKey(), cell.getValue());\n",
        "474": "            }\n",
        "475": "            return Tables.unmodifiableTable(table).cellSet();\n",
        "476": "          }\n",
        "477": "        })\n",
        "478": "        .named(\"unmodifiableTable[HashBasedTable].cellSet\")\n",
        "479": "        .withFeatures(CollectionSize.ANY, CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "480": "        .createTestSuite());\n",
        "481": "\n",
        "482": "    suite.addTest(SetTestSuiteBuilder.using(new TestCellSetGenerator() {\n",
        "483": "          @Override RowSortedTable<String, Integer, Character> createTable() {\n",
        "484": "            return Tables.unmodifiableRowSortedTable(TreeBasedTable\n",
        "485": "                .<String, Integer, Character> create());\n",
        "486": "          }\n",
        "487": "          @Override\n",
        "488": "          public Set<Cell<String, Integer, Character>> create(\n",
        "489": "              Object... elements) {\n",
        "490": "            RowSortedTable<String, Integer, Character> table = TreeBasedTable.create();\n",
        "491": "            for (Object element : elements) {\n",
        "492": "              @SuppressWarnings(\"unchecked\")\n",
        "493": "              Cell<String, Integer, Character> cell\n",
        "494": "                  = (Cell<String, Integer, Character>) element;\n",
        "495": "              table.put(cell.getRowKey(), cell.getColumnKey(), cell.getValue());\n",
        "496": "            }\n",
        "497": "            return Tables.unmodifiableRowSortedTable(table).cellSet();\n",
        "498": "          }\n",
        "499": "        })\n",
        "500": "        .named(\"unmodifiableRowSortedTable[TreeBasedTable].cellSet\")\n",
        "501": "        .withFeatures(CollectionSize.ANY, CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "502": "        .createTestSuite());\n",
        "503": "\n",
        "504": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "505": "          @Override protected Set<String> create(String[] elements) {\n",
        "506": "            Iterable<String> rowKeys = ImmutableSet.copyOf(elements);\n",
        "507": "            Iterable<Integer> columnKeys = ImmutableList.of(1, 2, 3);\n",
        "508": "            Table<String, Integer, Character> table\n",
        "509": "                = ArrayTable.create(rowKeys, columnKeys);\n",
        "510": "            populateForRowKeySet(table, elements);\n",
        "511": "            return table.column(1).keySet();\n",
        "512": "          }\n",
        "513": "        })\n",
        "514": "        .named(\"ArrayTable.column.keySet\")\n",
        "515": "        .withFeatures(CollectionSize.ONE, CollectionSize.SEVERAL,\n",
        "516": "            CollectionFeature.KNOWN_ORDER,\n",
        "517": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "518": "        .createTestSuite());\n",
        "519": "\n",
        "520": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "521": "          @Override protected Set<String> create(String[] elements) {\n",
        "522": "            Table<String, Integer, Character> table = HashBasedTable.create();\n",
        "523": "            populateForRowKeySet(table, elements);\n",
        "524": "            return table.column(1).keySet();\n",
        "525": "          }\n",
        "526": "        })\n",
        "527": "        .named(\"HashBasedTable.column.keySet\")\n",
        "528": "        .withFeatures(COLLECTION_FEATURES_REMOVE)\n",
        "529": "    .createTestSuite());\n",
        "530": "\n",
        "531": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "532": "          @Override protected Set<String> create(String[] elements) {\n",
        "533": "            Table<String, Integer, Character> table = TreeBasedTable.create();\n",
        "534": "            populateForRowKeySet(table, elements);\n",
        "535": "            return table.column(1).keySet();\n",
        "536": "          }\n",
        "537": "          @Override public List<String> order(List<String> insertionOrder) {\n",
        "538": "            Collections.sort(insertionOrder);\n",
        "539": "            return insertionOrder;\n",
        "540": "          }\n",
        "541": "        })\n",
        "542": "        .named(\"TreeBasedTable.column.keySet\")\n",
        "543": "        .withFeatures(COLLECTION_FEATURES_REMOVE_ORDER)\n",
        "544": "        .createTestSuite());\n",
        "545": "\n",
        "546": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "547": "          @Override protected Set<String> create(String[] elements) {\n",
        "548": "            Table<String, Integer, Character> table = HashBasedTable.create();\n",
        "549": "            populateForRowKeySet(table, elements);\n",
        "550": "            return Tables.transformValues(table, Functions.toStringFunction()).column(1).keySet();\n",
        "551": "          }\n",
        "552": "        })\n",
        "553": "        .named(\"TransformValues.column.keySet\")\n",
        "554": "        .withFeatures(COLLECTION_FEATURES_REMOVE)\n",
        "555": "    .createTestSuite());\n",
        "556": "\n",
        "557": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "558": "          @Override protected Set<String> create(String[] elements) {\n",
        "559": "            Table<String, Integer, Character> table = HashBasedTable.create();\n",
        "560": "            populateForRowKeySet(table, elements);\n",
        "561": "            return Tables.unmodifiableTable(table).column(1).keySet();\n",
        "562": "          }\n",
        "563": "        })\n",
        "564": "        .named(\"unmodifiableTable[HashBasedTable].column.keySet\")\n",
        "565": "        .withFeatures(COLLECTION_FEATURES)\n",
        "566": "    .createTestSuite());\n",
        "567": "\n",
        "568": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "569": "          @Override protected Set<String> create(String[] elements) {\n",
        "570": "            RowSortedTable<String, Integer, Character> table = TreeBasedTable.create();\n",
        "571": "            populateForRowKeySet(table, elements);\n",
        "572": "            return Tables.unmodifiableRowSortedTable(table).column(1).keySet();\n",
        "573": "          }\n",
        "574": "          @Override public List<String> order(List<String> insertionOrder) {\n",
        "575": "            Collections.sort(insertionOrder);\n",
        "576": "            return insertionOrder;\n",
        "577": "          }\n",
        "578": "        })\n",
        "579": "        .named(\"unmodifiableRowSortedTable[TreeBasedTable].column.keySet\")\n",
        "580": "        .withFeatures(COLLECTION_FEATURES_ORDER)\n",
        "581": "        .createTestSuite());\n",
        "609": "  private static abstract class TestCellSetGenerator\n",
        "622": "    public Set<Cell<String, Integer, Character>> create(\n",
        "623": "        Object... elements) {\n",
        "627": "        Cell<String, Integer, Character> cell\n",
        "628": "            = (Cell<String, Integer, Character>) element;\n",
        "649": "  private static abstract class MapTests\n",
        "650": "      extends MapInterfaceTest<String, Integer> {\n",
        "651": "\n",
        "652": "    MapTests(boolean allowsNullValues, boolean supportsPut, boolean supportsRemove,\n",
        "653": "        boolean supportsClear, boolean supportsIteratorRemove) {\n",
        "654": "      super(false, allowsNullValues, supportsPut, supportsRemove, supportsClear,\n",
        "658": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "662": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "667": "  private static abstract class RowTests extends MapTests {\n",
        "668": "    RowTests(boolean allowsNullValues, boolean supportsPut, boolean supportsRemove,\n",
        "669": "        boolean supportsClear, boolean supportsIteratorRemove) {\n",
        "670": "      super(allowsNullValues, supportsPut, supportsRemove, supportsClear,\n",
        "671": "          supportsIteratorRemove);\n",
        "676": "    @Override protected Map<String, Integer> makeEmptyMap() {\n",
        "680": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "696": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "700": "    @Override protected Map<String, Integer> makeEmptyMap() {\n",
        "704": "    @Override protected Table<Character, String, Integer> makeTable() {\n",
        "705": "      return ArrayTable.create(Arrays.asList('a', 'b', 'c'),\n",
        "706": "          Arrays.asList(\"one\", \"two\", \"three\", \"four\"));\n",
        "715": "    @Override Table<Character, String, Integer> makeTable() {\n",
        "725": "    @Override Table<Character, String, Integer> makeTable() {\n",
        "735": "    @Override Table<Character, String, Integer> makeTable() {\n",
        "741": "  private static final Function<Integer, Integer> DIVIDE_BY_2\n",
        "742": "      = new Function<Integer, Integer>() {\n",
        "743": "        @Override public Integer apply(Integer input) {\n",
        "746": "  };\n",
        "753": "    @Override Table<Character, String, Integer> makeTable() {\n",
        "758": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "773": "    @Override Table<Character, String, Integer> makeTable() {\n",
        "778": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "793": "    @Override Table<Character, String, Integer> makeTable() {\n",
        "798": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "808": "  private static abstract class ColumnTests extends MapTests {\n",
        "809": "    ColumnTests(boolean allowsNullValues, boolean supportsPut, boolean supportsRemove,\n",
        "810": "        boolean supportsClear, boolean supportsIteratorRemove) {\n",
        "811": "      super(allowsNullValues, supportsPut, supportsRemove, supportsClear,\n",
        "812": "          supportsIteratorRemove);\n",
        "817": "    @Override protected Map<String, Integer> makeEmptyMap() {\n",
        "821": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "837": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "841": "    @Override protected Map<String, Integer> makeEmptyMap() {\n",
        "845": "    @Override Table<String, Character, Integer> makeTable() {\n",
        "846": "      return ArrayTable.create(Arrays.asList(\"one\", \"two\", \"three\", \"four\"),\n",
        "847": "          Arrays.asList('a', 'b', 'c'));\n",
        "856": "    @Override Table<String, Character, Integer> makeTable() {\n",
        "866": "    @Override Table<String, Character, Integer> makeTable() {\n",
        "876": "    @Override Table<String, Character, Integer> makeTable() {\n",
        "887": "    @Override Table<String, Character, Integer> makeTable() {\n",
        "892": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "907": "    @Override Table<String, Character, Integer> makeTable() {\n",
        "912": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "927": "    @Override Table<String, Character, Integer> makeTable() {\n",
        "932": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "942": "  private static abstract class MapMapTests\n",
        "945": "    MapMapTests(boolean allowsNullValues, boolean supportsRemove,\n",
        "946": "        boolean supportsClear, boolean supportsIteratorRemove) {\n",
        "947": "      super(false, allowsNullValues, false, supportsRemove, supportsClear,\n",
        "948": "          supportsIteratorRemove);\n",
        "951": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "955": "    @Override protected Map<Integer, Character> getValueNotInPopulatedMap() {\n",
        "960": "     * The version of this test supplied by {@link MapInterfaceTest} fails for\n",
        "961": "     * this particular map implementation, because {@code map.get()} returns a\n",
        "962": "     * view collection that changes in the course of a call to {@code remove()}.\n",
        "963": "     * Thus, the expectation doesn't hold that {@code map.remove(x)} returns the\n",
        "964": "     * same value which {@code map.get(x)} did immediately beforehand.\n",
        "966": "    @Override public void testRemove() {\n",
        "994": "  private static abstract class RowMapTests extends MapMapTests {\n",
        "995": "    RowMapTests(boolean allowsNullValues, boolean supportsRemove,\n",
        "996": "        boolean supportsClear, boolean supportsIteratorRemove) {\n",
        "997": "      super(allowsNullValues, supportsRemove, supportsClear,\n",
        "998": "          supportsIteratorRemove);\n",
        "1003": "    @Override protected Map<String, Map<Integer, Character>>\n",
        "1004": "        makePopulatedMap() {\n",
        "1016": "    @Override protected Map<String, Map<Integer, Character>> makeEmptyMap() {\n",
        "1027": "    @Override Table<String, Integer, Character> makeTable() {\n",
        "1028": "      return ArrayTable.create(Arrays.asList(\"foo\", \"bar\", \"dog\"),\n",
        "1029": "          Arrays.asList(1, 2, 3));\n",
        "1032": "    @Override protected Map<String, Map<Integer, Character>> makeEmptyMap() {\n",
        "1042": "    @Override Table<String, Integer, Character> makeTable() {\n",
        "1052": "    @Override Table<String, Integer, Character> makeTable() {\n",
        "1062": "    @Override TreeBasedTable<String, Integer, Character> makeTable() {\n",
        "1063": "      TreeBasedTable<String, Integer, Character> table =\n",
        "1064": "          TreeBasedTable.create();\n",
        "1069": "    @Override protected Map<String, Map<Integer, Character>>\n",
        "1070": "        makePopulatedMap() {\n",
        "1076": "    @Override protected Map<String, Map<Integer, Character>> makeEmptyMap() {\n",
        "1080": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "1090": "    @Override TreeBasedTable<String, Integer, Character> makeTable() {\n",
        "1091": "      TreeBasedTable<String, Integer, Character> table =\n",
        "1092": "          TreeBasedTable.create();\n",
        "1097": "    @Override protected Map<String, Map<Integer, Character>>\n",
        "1098": "        makePopulatedMap() {\n",
        "1104": "    @Override protected Map<String, Map<Integer, Character>> makeEmptyMap() {\n",
        "1108": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "1118": "    @Override TreeBasedTable<String, Integer, Character> makeTable() {\n",
        "1119": "      TreeBasedTable<String, Integer, Character> table =\n",
        "1120": "          TreeBasedTable.create();\n",
        "1126": "    @Override protected Map<String, Map<Integer, Character>>\n",
        "1127": "        makePopulatedMap() {\n",
        "1133": "    @Override protected Map<String, Map<Integer, Character>> makeEmptyMap() {\n",
        "1137": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "1155": "    @Override Table<String, Integer, Character> makeTable() {\n",
        "1175": "    @Override Table<String, Integer, Character> makeTable() {\n",
        "1195": "    @Override RowSortedTable<String, Integer, Character> makeTable() {\n",
        "1210": "  private static abstract class ColumnMapTests extends MapMapTests {\n",
        "1211": "    ColumnMapTests(boolean allowsNullValues, boolean supportsRemove,\n",
        "1212": "        boolean supportsClear, boolean supportsIteratorRemove) {\n",
        "1213": "      super(allowsNullValues, supportsRemove, supportsClear,\n",
        "1214": "          supportsIteratorRemove);\n",
        "1219": "    @Override protected Map<String, Map<Integer, Character>>\n",
        "1220": "        makePopulatedMap() {\n",
        "1228": "    @Override protected Map<String, Map<Integer, Character>> makeEmptyMap() {\n",
        "1239": "    @Override Table<Integer, String, Character> makeTable() {\n",
        "1240": "      return ArrayTable.create(Arrays.asList(1, 2, 3),\n",
        "1241": "          Arrays.asList(\"foo\", \"bar\", \"dog\"));\n",
        "1244": "    @Override protected Map<String, Map<Integer, Character>> makeEmptyMap() {\n",
        "1254": "    @Override Table<Integer, String, Character> makeTable() {\n",
        "1264": "    @Override Table<Integer, String, Character> makeTable() {\n",
        "1274": "    @Override Table<Integer, String, Character> makeTable() {\n",
        "1294": "    @Override Table<Integer, String, Character> makeTable() {\n",
        "1314": "    @Override Table<Integer, String, Character> makeTable() {\n"
    }
}