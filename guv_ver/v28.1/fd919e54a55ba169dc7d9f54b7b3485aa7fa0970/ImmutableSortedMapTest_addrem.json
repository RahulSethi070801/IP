{
    "addition": {
        "67": "    suite.addTest(\n",
        "68": "        NavigableMapTestSuiteBuilder.using(new ImmutableSortedMapGenerator())\n",
        "69": "            .withFeatures(\n",
        "70": "                CollectionSize.ANY,\n",
        "71": "                CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "72": "                CollectionFeature.KNOWN_ORDER,\n",
        "73": "                MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "74": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "75": "            .named(\"ImmutableSortedMap\")\n",
        "76": "            .createTestSuite());\n",
        "77": "    suite.addTest(\n",
        "78": "        MapTestSuiteBuilder.using(new ImmutableSortedMapCopyOfEntriesGenerator())\n",
        "79": "            .withFeatures(\n",
        "80": "                CollectionSize.ANY,\n",
        "81": "                CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "82": "                CollectionFeature.KNOWN_ORDER,\n",
        "83": "                MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "84": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "85": "            .named(\"ImmutableSortedMap.copyOf[Iterable<Entry>]\")\n",
        "86": "            .createTestSuite());\n",
        "87": "\n",
        "88": "    suite.addTest(\n",
        "89": "        ListTestSuiteBuilder.using(new ImmutableSortedMapEntryListGenerator())\n",
        "90": "            .named(\"ImmutableSortedMap.entrySet.asList\")\n",
        "91": "            .withFeatures(\n",
        "92": "                CollectionSize.ANY,\n",
        "93": "                CollectionFeature.SERIALIZABLE,\n",
        "94": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "95": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "96": "            .createTestSuite());\n",
        "97": "\n",
        "98": "    suite.addTest(\n",
        "99": "        ListTestSuiteBuilder.using(new ImmutableSortedMapKeyListGenerator())\n",
        "100": "            .named(\"ImmutableSortedMap.keySet.asList\")\n",
        "101": "            .withFeatures(\n",
        "102": "                CollectionSize.ANY,\n",
        "103": "                CollectionFeature.SERIALIZABLE,\n",
        "104": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "105": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "106": "            .createTestSuite());\n",
        "107": "\n",
        "108": "    suite.addTest(\n",
        "109": "        ListTestSuiteBuilder.using(new ImmutableSortedMapValueListGenerator())\n",
        "110": "            .named(\"ImmutableSortedMap.values.asList\")\n",
        "111": "            .withFeatures(\n",
        "112": "                CollectionSize.ANY,\n",
        "113": "                CollectionFeature.SERIALIZABLE,\n",
        "114": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "115": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "116": "            .createTestSuite());\n",
        "121": "  public abstract static class AbstractMapTests<K, V> extends SortedMapInterfaceTest<K, V> {\n",
        "126": "    @Override\n",
        "127": "    protected SortedMap<K, V> makeEmptyMap() {\n",
        "133": "    @Override\n",
        "134": "    protected void assertMoreInvariants(Map<K, V> map) {\n",
        "137": "        assertEquals(entry.getKey() + \"=\" + entry.getValue(), entry.toString());\n",
        "140": "      assertEquals(\"{\" + joiner.join(map.entrySet()) + \"}\", map.toString());\n",
        "141": "      assertEquals(\"[\" + joiner.join(map.entrySet()) + \"]\", map.entrySet().toString());\n",
        "142": "      assertEquals(\"[\" + joiner.join(map.keySet()) + \"]\", map.keySet().toString());\n",
        "143": "      assertEquals(\"[\" + joiner.join(map.values()) + \"]\", map.values().toString());\n",
        "151": "    @Override\n",
        "152": "    protected SortedMap<String, Integer> makeEmptyMap() {\n",
        "156": "    @Override\n",
        "157": "    protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "161": "    @Override\n",
        "162": "    protected String getKeyNotInPopulatedMap() {\n",
        "166": "    @Override\n",
        "167": "    protected Integer getValueNotInPopulatedMap() {\n",
        "172": "  public static class SingletonMapTests extends AbstractMapTests<String, Integer> {\n",
        "173": "    @Override\n",
        "174": "    protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "178": "    @Override\n",
        "179": "    protected String getKeyNotInPopulatedMap() {\n",
        "183": "    @Override\n",
        "184": "    protected Integer getValueNotInPopulatedMap() {\n",
        "191": "    @Override\n",
        "192": "    protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "193": "      return SerializableTester.reserialize(ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3));\n",
        "196": "    @Override\n",
        "197": "    protected String getKeyNotInPopulatedMap() {\n",
        "201": "    @Override\n",
        "202": "    protected Integer getValueNotInPopulatedMap() {\n",
        "208": "    @Override\n",
        "209": "    protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "210": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5).headMap(\"d\");\n",
        "213": "    @Override\n",
        "214": "    protected String getKeyNotInPopulatedMap() {\n",
        "218": "    @Override\n",
        "219": "    protected Integer getValueNotInPopulatedMap() {\n",
        "225": "    @Override\n",
        "226": "    protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "227": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5).headMap(\"c\", true);\n",
        "230": "    @Override\n",
        "231": "    protected String getKeyNotInPopulatedMap() {\n",
        "235": "    @Override\n",
        "236": "    protected Integer getValueNotInPopulatedMap() {\n",
        "242": "    @Override\n",
        "243": "    protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "244": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5).tailMap(\"b\");\n",
        "247": "    @Override\n",
        "248": "    protected String getKeyNotInPopulatedMap() {\n",
        "252": "    @Override\n",
        "253": "    protected Integer getValueNotInPopulatedMap() {\n",
        "259": "    @Override\n",
        "260": "    protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "261": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5).tailMap(\"a\", false);\n",
        "264": "    @Override\n",
        "265": "    protected String getKeyNotInPopulatedMap() {\n",
        "269": "    @Override\n",
        "270": "    protected Integer getValueNotInPopulatedMap() {\n",
        "276": "    @Override\n",
        "277": "    protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "278": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5).subMap(\"b\", \"d\");\n",
        "281": "    @Override\n",
        "282": "    protected String getKeyNotInPopulatedMap() {\n",
        "286": "    @Override\n",
        "287": "    protected Integer getValueNotInPopulatedMap() {\n",
        "294": "      ImmutableSortedMap<String, Integer> map =\n",
        "295": "          ImmutableSortedMap.<String, Integer>naturalOrder().build();\n",
        "300": "      ImmutableSortedMap<String, Integer> map =\n",
        "301": "          ImmutableSortedMap.<String, Integer>naturalOrder().put(\"one\", 1).build();\n",
        "306": "      ImmutableSortedMap<String, Integer> map =\n",
        "307": "          ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "314": "      assertMapEquals(map, \"five\", 5, \"four\", 4, \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "322": "      } catch (UnsupportedOperationException expected) {\n",
        "323": "      }\n",
        "335": "      Builder<String, Integer> builder = ImmutableSortedMap.naturalOrder();\n",
        "353": "      ImmutableSortedMap.Builder<String, Integer> builder = ImmutableSortedMap.naturalOrder();\n",
        "356": "      Entry<String, Integer> entry =\n",
        "357": "          new AbstractMapEntry<String, Integer>() {\n",
        "358": "            @Override\n",
        "359": "            public String getKey() {\n",
        "360": "              return holder.string;\n",
        "361": "            }\n",
        "362": "\n",
        "363": "            @Override\n",
        "364": "            public Integer getValue() {\n",
        "365": "              return 1;\n",
        "366": "            }\n",
        "367": "          };\n",
        "375": "      ImmutableSortedMap<String, Integer> map =\n",
        "376": "          ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "391": "      ImmutableSortedMap<String, Integer> map =\n",
        "392": "          ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "396": "      assertMapEquals(map, \"five\", 5, \"four\", 4, \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "401": "      ImmutableSortedMap<String, Integer> mapOne = builder.put(\"one\", 1).put(\"two\", 2).build();\n",
        "402": "      ImmutableSortedMap<String, Integer> mapTwo = builder.put(\"three\", 3).put(\"four\", 4).build();\n",
        "445": "      Builder<String, Integer> builder =\n",
        "446": "          ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "458": "      assertMapEquals(ImmutableSortedMap.of(\"one\", 1), \"one\", 1);\n",
        "459": "      assertMapEquals(ImmutableSortedMap.of(\"one\", 1, \"two\", 2), \"one\", 1, \"two\", 2);\n",
        "461": "          ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3), \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "464": "          \"four\",\n",
        "465": "          4,\n",
        "466": "          \"one\",\n",
        "467": "          1,\n",
        "468": "          \"three\",\n",
        "469": "          3,\n",
        "470": "          \"two\",\n",
        "471": "          2);\n",
        "473": "          ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5),\n",
        "474": "          \"five\",\n",
        "475": "          5,\n",
        "476": "          \"four\",\n",
        "477": "          4,\n",
        "478": "          \"one\",\n",
        "479": "          1,\n",
        "480": "          \"three\",\n",
        "481": "          3,\n",
        "482": "          \"two\",\n",
        "483": "          2);\n",
        "524": "      ImmutableSortedMap<String, Integer> copy =\n",
        "525": "          ImmutableSortedMap.copyOf(Collections.<String, Integer>emptyMap());\n",
        "532": "      ImmutableSortedMap<String, Integer> copy =\n",
        "533": "          ImmutableSortedMap.copyOf(Collections.singletonMap(\"one\", 1));\n",
        "545": "      ImmutableSortedMap<String, Integer> copy = ImmutableSortedMap.copyOf(original);\n",
        "558": "      ImmutableSortedMap<String, Integer> copy = ImmutableSortedMap.copyOf(original, comparator);\n",
        "566": "      Map<String, Integer> original = ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3);\n",
        "567": "      ImmutableSortedMap<String, Integer> copy = ImmutableSortedMap.copyOf(original, comparator);\n",
        "579": "      ImmutableSortedMap<String, Integer> copy = ImmutableSortedMap.copyOfSorted(original);\n",
        "592": "      ImmutableSortedMap<String, Integer> copy = ImmutableSortedMap.copyOfSorted(original);\n",
        "610": "      @Override\n",
        "611": "      public String toString() {\n",
        "617": "      Map<IntegerDiv10, String> original =\n",
        "618": "          ImmutableMap.of(\n",
        "619": "              new IntegerDiv10(3), \"three\",\n",
        "620": "              new IntegerDiv10(20), \"twenty\",\n",
        "621": "              new IntegerDiv10(11), \"eleven\",\n",
        "622": "              new IntegerDiv10(35), \"thirty five\",\n",
        "623": "              new IntegerDiv10(12), \"twelve\");\n",
        "637": "      Map<IntegerDiv10, String> original =\n",
        "638": "          ImmutableSortedMap.of(three, \"three\", eleven, \"eleven\", twenty, \"twenty\");\n",
        "645": "      ImmutableSortedMap<String, Integer> map =\n",
        "646": "          ImmutableSortedMap.<String, Integer>reverseOrder()\n",
        "653": "      assertMapEquals(map, \"two\", 2, \"three\", 3, \"one\", 1, \"four\", 4, \"five\", 5);\n",
        "659": "      ImmutableSortedMap<String, Integer> map =\n",
        "660": "          new ImmutableSortedMap.Builder<String, Integer>(comparator)\n",
        "667": "      assertMapEquals(map, \"two\", 2, \"three\", 3, \"one\", 1, \"four\", 4, \"five\", 5);\n",
        "681": "    tester.testAllPublicInstanceMethods(ImmutableSortedMap.<String, Integer>naturalOrder());\n",
        "684": "    tester.testAllPublicInstanceMethods(ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3));\n",
        "721": "  private static <K, V> void assertMapEquals(Map<K, V> map, Object... alternatingKeysAndValues) {\n",
        "737": "    @Override\n",
        "738": "    public boolean equals(Object o) {\n",
        "742": "    @Override\n",
        "743": "    public int hashCode() {\n",
        "753": "    Map<String, IntHolder> map = ImmutableSortedMap.of(\"a\", holderA, \"b\", holderB);\n",
        "756": "    Map<String, Integer> intMap = ImmutableSortedMap.of(\"a\", 3, \"b\", 2);\n",
        "763": "    Map<String, Integer> map = ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3);\n",
        "766": "    assertEquals(\n",
        "767": "        Lists.newArrayList(map.values()),\n",
        "775": "    assertThat(map.entrySet())\n",
        "776": "        .containsExactly(Maps.immutableEntry(\"one\", 1), Maps.immutableEntry(\"three\", 3))\n",
        "777": "        .inOrder();\n",
        "791": "    assertThat(map.entrySet())\n",
        "792": "        .containsExactly(Maps.immutableEntry(\"three\", 3), Maps.immutableEntry(\"two\", 2))\n",
        "793": "        .inOrder();\n",
        "814": "    assertThat(map.entrySet())\n",
        "815": "        .containsExactly(Maps.immutableEntry(\"one\", 1), Maps.immutableEntry(\"three\", 3))\n",
        "816": "        .inOrder();\n",
        "823": "    assertThat(map.entrySet())\n",
        "824": "        .containsExactly(Maps.immutableEntry(\"three\", 3), Maps.immutableEntry(\"two\", 2))\n",
        "825": "        .inOrder();\n",
        "832": "    assertThat(map.entrySet())\n",
        "833": "        .containsExactly(\n",
        "834": "            Maps.immutableEntry(\"one\", 1),\n",
        "835": "            Maps.immutableEntry(\"three\", 3),\n",
        "836": "            Maps.immutableEntry(\"two\", 2))\n",
        "837": "        .inOrder();\n"
    },
    "removed": {
        "67": "    suite.addTest(NavigableMapTestSuiteBuilder.using(\n",
        "68": "        new ImmutableSortedMapGenerator())\n",
        "69": "        .withFeatures(\n",
        "70": "            CollectionSize.ANY,\n",
        "71": "            CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "72": "            CollectionFeature.KNOWN_ORDER,\n",
        "73": "            MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "74": "            MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "75": "        .named(\"ImmutableSortedMap\")\n",
        "76": "        .createTestSuite());\n",
        "77": "    suite.addTest(MapTestSuiteBuilder.using(\n",
        "78": "        new ImmutableSortedMapCopyOfEntriesGenerator())\n",
        "79": "        .withFeatures(\n",
        "80": "            CollectionSize.ANY,\n",
        "81": "            CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "82": "            CollectionFeature.KNOWN_ORDER,\n",
        "83": "            MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "84": "            MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "85": "        .named(\"ImmutableSortedMap.copyOf[Iterable<Entry>]\")\n",
        "86": "        .createTestSuite());\n",
        "87": "\n",
        "88": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "89": "        new ImmutableSortedMapEntryListGenerator())\n",
        "90": "        .named(\"ImmutableSortedMap.entrySet.asList\")\n",
        "91": "        .withFeatures(CollectionSize.ANY,\n",
        "92": "            CollectionFeature.SERIALIZABLE,\n",
        "93": "            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "94": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "95": "        .createTestSuite());\n",
        "96": "\n",
        "97": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "98": "        new ImmutableSortedMapKeyListGenerator())\n",
        "99": "        .named(\"ImmutableSortedMap.keySet.asList\")\n",
        "100": "        .withFeatures(CollectionSize.ANY,\n",
        "101": "            CollectionFeature.SERIALIZABLE,\n",
        "102": "            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "103": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "104": "        .createTestSuite());\n",
        "105": "\n",
        "106": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "107": "        new ImmutableSortedMapValueListGenerator())\n",
        "108": "        .named(\"ImmutableSortedMap.values.asList\")\n",
        "109": "        .withFeatures(CollectionSize.ANY,\n",
        "110": "            CollectionFeature.SERIALIZABLE,\n",
        "111": "            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "112": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "113": "        .createTestSuite());\n",
        "118": "  public abstract static class AbstractMapTests<K, V>\n",
        "119": "      extends SortedMapInterfaceTest<K, V> {\n",
        "124": "    @Override protected SortedMap<K, V> makeEmptyMap() {\n",
        "130": "    @Override protected void assertMoreInvariants(Map<K, V> map) {\n",
        "133": "        assertEquals(entry.getKey() + \"=\" + entry.getValue(),\n",
        "134": "            entry.toString());\n",
        "137": "      assertEquals(\"{\" + joiner.join(map.entrySet()) + \"}\",\n",
        "138": "          map.toString());\n",
        "139": "      assertEquals(\"[\" + joiner.join(map.entrySet()) + \"]\",\n",
        "140": "          map.entrySet().toString());\n",
        "141": "      assertEquals(\"[\" + joiner.join(map.keySet()) + \"]\",\n",
        "142": "          map.keySet().toString());\n",
        "143": "      assertEquals(\"[\" + joiner.join(map.values()) + \"]\",\n",
        "144": "          map.values().toString());\n",
        "152": "    @Override protected SortedMap<String, Integer> makeEmptyMap() {\n",
        "156": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "160": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "164": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "169": "  public static class SingletonMapTests\n",
        "170": "      extends AbstractMapTests<String, Integer> {\n",
        "171": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "175": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "179": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "186": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "187": "      return SerializableTester.reserialize(\n",
        "188": "          ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3));\n",
        "191": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "195": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "201": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "202": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5)\n",
        "203": "          .headMap(\"d\");\n",
        "206": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "210": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "216": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "217": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5)\n",
        "218": "          .headMap(\"c\", true);\n",
        "221": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "225": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "231": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "232": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5)\n",
        "233": "          .tailMap(\"b\");\n",
        "236": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "240": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "246": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "247": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5)\n",
        "248": "          .tailMap(\"a\", false);\n",
        "251": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "255": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "261": "    @Override protected SortedMap<String, Integer> makePopulatedMap() {\n",
        "262": "      return ImmutableSortedMap.of(\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5)\n",
        "263": "          .subMap(\"b\", \"d\");\n",
        "266": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "270": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "277": "      ImmutableSortedMap<String, Integer> map\n",
        "278": "          = ImmutableSortedMap.<String, Integer>naturalOrder().build();\n",
        "283": "      ImmutableSortedMap<String, Integer> map\n",
        "284": "          = ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "285": "              .put(\"one\", 1)\n",
        "286": "              .build();\n",
        "291": "      ImmutableSortedMap<String, Integer> map\n",
        "292": "          = ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "299": "      assertMapEquals(map,\n",
        "300": "          \"five\", 5, \"four\", 4, \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "308": "      } catch (UnsupportedOperationException expected) {}\n",
        "320": "      Builder<String, Integer> builder =\n",
        "321": "          ImmutableSortedMap.naturalOrder();\n",
        "339": "      ImmutableSortedMap.Builder<String, Integer> builder =\n",
        "340": "          ImmutableSortedMap.naturalOrder();\n",
        "343": "      Entry<String, Integer> entry = new AbstractMapEntry<String, Integer>() {\n",
        "344": "        @Override public String getKey() {\n",
        "345": "          return holder.string;\n",
        "346": "        }\n",
        "347": "        @Override public Integer getValue() {\n",
        "348": "          return 1;\n",
        "349": "        }\n",
        "350": "      };\n",
        "358": "      ImmutableSortedMap<String, Integer> map\n",
        "359": "          = ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "374": "      ImmutableSortedMap<String, Integer> map\n",
        "375": "          = ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "379": "      assertMapEquals(map,\n",
        "380": "          \"five\", 5, \"four\", 4, \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "385": "      ImmutableSortedMap<String, Integer> mapOne = builder\n",
        "386": "          .put(\"one\", 1)\n",
        "387": "          .put(\"two\", 2)\n",
        "388": "          .build();\n",
        "389": "      ImmutableSortedMap<String, Integer> mapTwo = builder\n",
        "390": "          .put(\"three\", 3)\n",
        "391": "          .put(\"four\", 4)\n",
        "392": "          .build();\n",
        "435": "      Builder<String, Integer> builder\n",
        "436": "          = ImmutableSortedMap.<String, Integer>naturalOrder()\n",
        "449": "          ImmutableSortedMap.of(\"one\", 1),\n",
        "450": "          \"one\", 1);\n",
        "451": "      assertMapEquals(\n",
        "452": "          ImmutableSortedMap.of(\"one\", 1, \"two\", 2),\n",
        "453": "          \"one\", 1, \"two\", 2);\n",
        "454": "      assertMapEquals(\n",
        "455": "          ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3),\n",
        "456": "          \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "459": "          \"four\", 4, \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "461": "          ImmutableSortedMap.of(\n",
        "462": "              \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5),\n",
        "463": "          \"five\", 5, \"four\", 4, \"one\", 1, \"three\", 3, \"two\", 2);\n",
        "504": "      ImmutableSortedMap<String, Integer> copy\n",
        "505": "          = ImmutableSortedMap.copyOf(Collections.<String, Integer>emptyMap());\n",
        "512": "      ImmutableSortedMap<String, Integer> copy\n",
        "513": "          = ImmutableSortedMap.copyOf(Collections.singletonMap(\"one\", 1));\n",
        "525": "      ImmutableSortedMap<String, Integer> copy\n",
        "526": "          = ImmutableSortedMap.copyOf(original);\n",
        "539": "      ImmutableSortedMap<String, Integer> copy\n",
        "540": "          = ImmutableSortedMap.copyOf(original, comparator);\n",
        "548": "      Map<String, Integer> original\n",
        "549": "          = ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3);\n",
        "550": "      ImmutableSortedMap<String, Integer> copy\n",
        "551": "          = ImmutableSortedMap.copyOf(original, comparator);\n",
        "563": "      ImmutableSortedMap<String, Integer> copy\n",
        "564": "          = ImmutableSortedMap.copyOfSorted(original);\n",
        "577": "      ImmutableSortedMap<String, Integer> copy\n",
        "578": "          = ImmutableSortedMap.copyOfSorted(original);\n",
        "596": "      @Override public String toString() {\n",
        "602": "      Map<IntegerDiv10, String> original = ImmutableMap.of(\n",
        "603": "          new IntegerDiv10(3), \"three\",\n",
        "604": "          new IntegerDiv10(20), \"twenty\",\n",
        "605": "          new IntegerDiv10(11), \"eleven\",\n",
        "606": "          new IntegerDiv10(35), \"thirty five\",\n",
        "607": "          new IntegerDiv10(12), \"twelve\"\n",
        "608": "      );\n",
        "622": "      Map<IntegerDiv10, String> original = ImmutableSortedMap.of(\n",
        "623": "          three, \"three\", eleven, \"eleven\", twenty, \"twenty\");\n",
        "630": "      ImmutableSortedMap<String, Integer> map\n",
        "631": "          = ImmutableSortedMap.<String, Integer>reverseOrder()\n",
        "638": "      assertMapEquals(map,\n",
        "639": "          \"two\", 2, \"three\", 3, \"one\", 1, \"four\", 4, \"five\", 5);\n",
        "645": "      ImmutableSortedMap<String, Integer> map\n",
        "646": "          = new ImmutableSortedMap.Builder<String, Integer>(comparator)\n",
        "653": "      assertMapEquals(map,\n",
        "654": "          \"two\", 2, \"three\", 3, \"one\", 1, \"four\", 4, \"five\", 5);\n",
        "668": "    tester.testAllPublicInstanceMethods(\n",
        "669": "        ImmutableSortedMap.<String, Integer>naturalOrder());\n",
        "672": "    tester.testAllPublicInstanceMethods(\n",
        "673": "        ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3));\n",
        "710": "  private static <K, V> void assertMapEquals(Map<K, V> map,\n",
        "711": "      Object... alternatingKeysAndValues) {\n",
        "727": "    @Override public boolean equals(Object o) {\n",
        "731": "    @Override public int hashCode() {\n",
        "741": "    Map<String, IntHolder> map\n",
        "742": "        = ImmutableSortedMap.of(\"a\", holderA, \"b\", holderB);\n",
        "745": "    Map<String, Integer> intMap\n",
        "746": "        = ImmutableSortedMap.of(\"a\", 3, \"b\", 2);\n",
        "753": "    Map<String, Integer> map\n",
        "754": "        = ImmutableSortedMap.of(\"one\", 1, \"two\", 2, \"three\", 3);\n",
        "757": "    assertEquals(Lists.newArrayList(map.values()),\n",
        "765": "    assertThat(map.entrySet()).containsExactly(\n",
        "766": "        Maps.immutableEntry(\"one\", 1),\n",
        "767": "        Maps.immutableEntry(\"three\", 3)).inOrder();\n",
        "781": "    assertThat(map.entrySet()).containsExactly(Maps.immutableEntry(\"three\", 3),\n",
        "782": "        Maps.immutableEntry(\"two\", 2)).inOrder();\n",
        "803": "    assertThat(map.entrySet()).containsExactly(Maps.immutableEntry(\"one\", 1),\n",
        "804": "        Maps.immutableEntry(\"three\", 3)).inOrder();\n",
        "811": "    assertThat(map.entrySet()).containsExactly(Maps.immutableEntry(\"three\", 3),\n",
        "812": "        Maps.immutableEntry(\"two\", 2)).inOrder();\n",
        "819": "    assertThat(map.entrySet()).containsExactly(Maps.immutableEntry(\"one\", 1),\n",
        "820": "        Maps.immutableEntry(\"three\", 3), Maps.immutableEntry(\"two\", 2)).inOrder();\n"
    }
}