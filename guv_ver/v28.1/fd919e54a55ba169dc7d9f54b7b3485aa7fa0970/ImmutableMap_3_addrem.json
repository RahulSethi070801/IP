{
    "addition": {
        "55": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\"> immutable collections</a>.\n",
        "70": "   * <p>If the mapped keys contain duplicates (according to {@link Object#equals(Object)}, an {@code\n",
        "71": "   * IllegalArgumentException} is thrown when the collection operation is performed. (This differs\n",
        "72": "   * from the {@code Collector} returned by {@link Collectors#toMap(Function, Function)}, which\n",
        "73": "   * throws an {@code IllegalStateException}.)\n",
        "108": "   * Returns the empty map. This map behaves and performs comparably to {@link\n",
        "109": "   * Collections#emptyMap}, and is preferable mainly for consistency and maintainability of your\n",
        "110": "   * code.\n",
        "118": "   * Returns an immutable map containing a single entry. This map behaves and performs comparably to\n",
        "119": "   * {@link Collections#singletonMap} but will not accept a null key or value. It is preferable\n",
        "120": "   * mainly for consistency and maintainability of your code.\n",
        "180": "   * Returns a new builder. The generated builder is equivalent to the builder created by the {@link\n",
        "181": "   * Builder} constructor.\n",
        "215": "   * (\"constant maps\"). Example:\n",
        "217": "   * <pre>{@code\n",
        "218": "   * static final ImmutableMap<String, Integer> WORD_TO_INT =\n",
        "219": "   *     new ImmutableMap.Builder<String, Integer>()\n",
        "220": "   *         .put(\"one\", 1)\n",
        "221": "   *         .put(\"two\", 2)\n",
        "222": "   *         .put(\"three\", 3)\n",
        "223": "   *         .build();\n",
        "224": "   * }</pre>\n",
        "229": "   * <p>By default, a {@code Builder} will generate maps that iterate over entries in the order they\n",
        "230": "   * were inserted into the builder, equivalently to {@code LinkedHashMap}. For example, in the\n",
        "231": "   * above example, {@code WORD_TO_INT.entrySet()} is guaranteed to iterate over the entries in the\n",
        "232": "   * order {@code \"one\"=1, \"two\"=2, \"three\"=3}, and {@code keySet()} and {@code values()} respect\n",
        "233": "   * the same order. If you want a different order, consider using {@link ImmutableSortedMap} to\n",
        "234": "   * sort by keys, or call {@link #orderEntriesByValue(Comparator)}, which changes this builder to\n",
        "235": "   * sort entries by value.\n",
        "237": "   * <p>Builder instances can be reused - it is safe to call {@link #build} multiple times to build\n",
        "238": "   * multiple maps in series. Each map is a superset of the maps created before it.\n",
        "249": "     * Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n",
        "250": "     * ImmutableMap#builder}.\n",
        "273": "     * Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,\n",
        "274": "     * and will cause {@link #build} to fail.\n",
        "286": "     * Adds the given {@code entry} to the map, making it immutable if necessary. Duplicate keys are\n",
        "287": "     * not allowed, and will cause {@link #build} to fail.\n",
        "297": "     * Associates all of the given map's keys and values in the built map. Duplicate keys are not\n",
        "298": "     * allowed, and will cause {@link #build} to fail.\n",
        "308": "     * Adds all of the given entries to the built map. Duplicate keys are not allowed, and will\n",
        "309": "     * cause {@link #build} to fail.\n",
        "330": "     * <p>The sort order is stable, that is, if two entries have values that compare as equivalent,\n",
        "331": "     * the entry that was inserted first will be first in the built map's iteration order.\n",
        "359": "     * Returns a newly-created immutable map. The iteration order of the returned map is the order\n",
        "360": "     * in which entries were inserted into the builder, unless {@link #orderEntriesByValue} was\n",
        "361": "     * called, in which case entries are sorted by value.\n",
        "378": "            entries, 0, size, Ordering.from(valueComparator).onResultOf(Maps.<V>valueFunction()));\n",
        "394": "   * over entries in the same order as the {@code entrySet} of the original map. If {@code map}\n",
        "395": "   * somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose\n",
        "396": "   * comparator is not <i>consistent with equals</i>), the results of this method are undefined.\n",
        "398": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "399": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "400": "   * undocumented and subject to change.\n",
        "420": "   * Returns an immutable map containing the specified entries. The returned map iterates over\n",
        "421": "   * entries in the same order as the original iterable.\n",
        "688": "  @LazyInit private transient ImmutableSet<Entry<K, V>> entrySet;\n",
        "691": "   * Returns an immutable set of the mappings in this map. The iteration order is specified by the\n",
        "692": "   * method used to create this map. Typically, this is insertion order.\n",
        "702": "  @LazyInit private transient ImmutableSet<K> keySet;\n",
        "705": "   * Returns an immutable set of the keys in this map, in the same order that they appear in {@link\n",
        "706": "   * #entrySet}.\n",
        "740": "  @LazyInit private transient ImmutableCollection<V> values;\n",
        "760": "  @LazyInit private transient ImmutableSetMultimap<K, V> multimapView;\n",
        "869": "   * Serialized type for all ImmutableMap instances. It captures the logical contents and they are\n",
        "870": "   * reconstructed using public factory methods. This ensures that the implementation types remain\n",
        "871": "   * as implementation details.\n"
    },
    "removed": {
        "55": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\">\n",
        "56": " * immutable collections</a>.\n",
        "71": "   * <p>If the mapped keys contain duplicates (according to {@link Object#equals(Object)}, an\n",
        "72": "   * {@code IllegalArgumentException} is thrown when the collection operation is performed.\n",
        "73": "   * (This differs from the {@code Collector} returned by\n",
        "74": "   * {@link Collectors#toMap(Function, Function)}, which throws an {@code IllegalStateException}.)\n",
        "109": "   * Returns the empty map. This map behaves and performs comparably to\n",
        "110": "   * {@link Collections#emptyMap}, and is preferable mainly for consistency\n",
        "111": "   * and maintainability of your code.\n",
        "119": "   * Returns an immutable map containing a single entry. This map behaves and\n",
        "120": "   * performs comparably to {@link Collections#singletonMap} but will not accept\n",
        "121": "   * a null key or value. It is preferable mainly for consistency and\n",
        "122": "   * maintainability of your code.\n",
        "182": "   * Returns a new builder. The generated builder is equivalent to the builder\n",
        "183": "   * created by the {@link Builder} constructor.\n",
        "217": "   * (\"constant maps\"). Example: <pre>   {@code\n",
        "219": "   *   static final ImmutableMap<String, Integer> WORD_TO_INT =\n",
        "220": "   *       new ImmutableMap.Builder<String, Integer>()\n",
        "221": "   *           .put(\"one\", 1)\n",
        "222": "   *           .put(\"two\", 2)\n",
        "223": "   *           .put(\"three\", 3)\n",
        "224": "   *           .build();}</pre>\n",
        "229": "   * <p>By default, a {@code Builder} will generate maps that iterate over entries in the order\n",
        "230": "   * they were inserted into the builder, equivalently to {@code LinkedHashMap}.  For example, in\n",
        "231": "   * the above example, {@code WORD_TO_INT.entrySet()} is guaranteed to iterate over the entries in\n",
        "232": "   * the order {@code \"one\"=1, \"two\"=2, \"three\"=3}, and {@code keySet()} and {@code values()}\n",
        "233": "   * respect the same order.   If you want a different order, consider using \n",
        "234": "   * {@link ImmutableSortedMap} to sort by keys, or call {@link #orderEntriesByValue(Comparator)}, \n",
        "235": "   * which changes this builder to sort entries by value.\n",
        "237": "   * <p>Builder instances can be reused - it is safe to call {@link #build}\n",
        "238": "   * multiple times to build multiple maps in series. Each map is a superset of\n",
        "239": "   * the maps created before it.\n",
        "250": "     * Creates a new builder. The returned builder is equivalent to the builder\n",
        "251": "     * generated by {@link ImmutableMap#builder}.\n",
        "274": "     * Associates {@code key} with {@code value} in the built map. Duplicate\n",
        "275": "     * keys are not allowed, and will cause {@link #build} to fail.\n",
        "287": "     * Adds the given {@code entry} to the map, making it immutable if\n",
        "288": "     * necessary. Duplicate keys are not allowed, and will cause {@link #build}\n",
        "289": "     * to fail.\n",
        "299": "     * Associates all of the given map's keys and values in the built map.\n",
        "300": "     * Duplicate keys are not allowed, and will cause {@link #build} to fail.\n",
        "310": "     * Adds all of the given entries to the built map.  Duplicate keys are not\n",
        "311": "     * allowed, and will cause {@link #build} to fail.\n",
        "332": "     * <p>The sort order is stable, that is, if two entries have values that compare\n",
        "333": "     * as equivalent, the entry that was inserted first will be first in the built map's\n",
        "334": "     * iteration order.\n",
        "362": "     * Returns a newly-created immutable map.  The iteration order of the returned map is\n",
        "363": "     * the order in which entries were inserted into the builder, unless\n",
        "364": "     * {@link #orderEntriesByValue} was called, in which case entries are sorted by value.\n",
        "381": "            entries,\n",
        "382": "            0,\n",
        "383": "            size,\n",
        "384": "            Ordering.from(valueComparator).onResultOf(Maps.<V>valueFunction()));\n",
        "400": "   * over entries in the same order as the {@code entrySet} of the original map.  If {@code map}\n",
        "401": "   * somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap}\n",
        "402": "   * whose comparator is not <i>consistent with equals</i>), the results of this method are\n",
        "403": "   * undefined.\n",
        "405": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "406": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "407": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "427": "   * Returns an immutable map containing the specified entries.  The returned\n",
        "428": "   * map iterates over entries in the same order as the original iterable.\n",
        "695": "  @LazyInit\n",
        "696": "  private transient ImmutableSet<Entry<K, V>> entrySet;\n",
        "699": "   * Returns an immutable set of the mappings in this map.  The iteration order is specified by\n",
        "700": "   * the method used to create this map.  Typically, this is insertion order.\n",
        "710": "  @LazyInit\n",
        "711": "  private transient ImmutableSet<K> keySet;\n",
        "714": "   * Returns an immutable set of the keys in this map, in the same order that they appear in\n",
        "715": "   * {@link #entrySet}.\n",
        "749": "  @LazyInit\n",
        "750": "  private transient ImmutableCollection<V> values;\n",
        "770": "  @LazyInit\n",
        "771": "  private transient ImmutableSetMultimap<K, V> multimapView;\n",
        "880": "   * Serialized type for all ImmutableMap instances. It captures the logical\n",
        "881": "   * contents and they are reconstructed using public factory methods. This\n",
        "882": "   * ensures that the implementation types remain as implementation details.\n"
    }
}