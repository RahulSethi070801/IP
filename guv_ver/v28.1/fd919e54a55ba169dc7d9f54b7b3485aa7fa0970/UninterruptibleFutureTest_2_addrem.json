{
    "addition": {
        "49": "  @Override\n",
        "50": "  protected void setUp() {\n",
        "52": "    tearDownStack.addTearDown(\n",
        "53": "        new TearDown() {\n",
        "54": "          @Override\n",
        "55": "          public void tearDown() {\n",
        "56": "            executor.shutdownNow();\n",
        "57": "          }\n",
        "58": "        });\n",
        "62": "    tearDownStack.addTearDown(\n",
        "63": "        new TearDown() {\n",
        "64": "          @Override\n",
        "65": "          public void tearDown() {\n",
        "66": "            Thread.interrupted();\n",
        "67": "          }\n",
        "68": "        });\n",
        "77": "   * This first test doesn't test anything in Uninterruptibles, just demonstrates some normal\n",
        "78": "   * behavior of futures so that you can contrast the next test with it.\n",
        "157": "  public void testMakeUninterruptible_untimed_uninterrupted() throws Exception {\n",
        "161": "  public void testMakeUninterruptible_untimed_interrupted() throws Exception {\n",
        "165": "  public void testMakeUninterruptible_untimed_multiplyInterrupted() throws Exception {\n",
        "169": "  public void testMakeUninterruptible_timed_uninterrupted() throws Exception {\n",
        "173": "  public void testMakeUninterruptible_timed_interrupted() throws Exception {\n",
        "177": "  public void testMakeUninterruptible_timed_multiplyInterrupted() throws Exception {\n",
        "184": "    FutureTask<Boolean> interruptReporter = untimedInterruptReporter(future, false);\n",
        "192": "    FutureTask<Boolean> interruptReporter = timedInterruptReporter(future);\n",
        "197": "  private static void runNInterruptsTest(\n",
        "198": "      int times, SettableFuture<String> future, FutureTask<Boolean> interruptReporter)\n",
        "212": "   * Confirms that the test code triggers {@link InterruptedException} in a standard {@link Future}.\n",
        "215": "  public void testMakeUninterruptible_plainFutureSanityCheck() throws Exception {\n",
        "217": "    FutureTask<Boolean> wasInterrupted = untimedInterruptReporter(future, true);\n",
        "226": "      assertTrue(\n",
        "227": "          expected.getCause().toString(), expected.getCause() instanceof InterruptedException);\n",
        "273": "  private static FutureTask<Boolean> timedInterruptReporter(final Future<?> future) {\n"
    },
    "removed": {
        "49": "  @Override protected void setUp() {\n",
        "51": "    tearDownStack.addTearDown(new TearDown() {\n",
        "52": "      @Override\n",
        "53": "      public void tearDown() {\n",
        "54": "        executor.shutdownNow();\n",
        "55": "      }\n",
        "56": "    });\n",
        "60": "    tearDownStack.addTearDown(new TearDown() {\n",
        "61": "      @Override\n",
        "62": "      public void tearDown() {\n",
        "63": "        Thread.interrupted();\n",
        "64": "      }\n",
        "65": "    });\n",
        "74": "   * This first test doesn't test anything in Uninterruptibles, just\n",
        "75": "   * demonstrates some normal behavior of futures so that you can contrast\n",
        "76": "   * the next test with it.\n",
        "154": "  public void testMakeUninterruptible_untimed_uninterrupted()\n",
        "155": "      throws Exception {\n",
        "159": "  public void testMakeUninterruptible_untimed_interrupted()\n",
        "160": "      throws Exception {\n",
        "164": "  public void testMakeUninterruptible_untimed_multiplyInterrupted()\n",
        "165": "      throws Exception {\n",
        "169": "  public void testMakeUninterruptible_timed_uninterrupted()\n",
        "170": "      throws Exception {\n",
        "174": "  public void testMakeUninterruptible_timed_interrupted()\n",
        "175": "      throws Exception {\n",
        "179": "  public void testMakeUninterruptible_timed_multiplyInterrupted()\n",
        "180": "      throws Exception {\n",
        "187": "    FutureTask<Boolean> interruptReporter =\n",
        "188": "        untimedInterruptReporter(future, false);\n",
        "196": "    FutureTask<Boolean> interruptReporter =\n",
        "197": "        timedInterruptReporter(future);\n",
        "202": "  private static void runNInterruptsTest(int times, SettableFuture<String> future,\n",
        "203": "      FutureTask<Boolean> interruptReporter)\n",
        "217": "   * Confirms that the test code triggers {@link InterruptedException} in a\n",
        "218": "   * standard {@link Future}.\n",
        "221": "  public void testMakeUninterruptible_plainFutureSanityCheck()\n",
        "222": "      throws Exception {\n",
        "224": "    FutureTask<Boolean> wasInterrupted =\n",
        "225": "        untimedInterruptReporter(future, true);\n",
        "234": "      assertTrue(expected.getCause().toString(),\n",
        "235": "          expected.getCause() instanceof InterruptedException);\n",
        "281": "  private static FutureTask<Boolean> timedInterruptReporter(\n",
        "282": "      final Future<?> future) {\n"
    }
}