{
    "addition": {
        "160": " * Immutable empty instances are returned for collection types; {@code \"\"} for string; {@code 0} for\n",
        "161": " * number types; reasonable default instance for other stateless types. For mutable types, a fresh\n",
        "162": " * instance is created each time {@code get()} is called.\n",
        "172": "  private static final Ordering<Field> BY_FIELD_NAME =\n",
        "173": "      new Ordering<Field>() {\n",
        "174": "        @Override\n",
        "175": "        public int compare(Field left, Field right) {\n",
        "176": "          return left.getName().compareTo(right.getName());\n",
        "177": "        }\n",
        "178": "      };\n",
        "191": "  private static final ClassToInstanceMap<Object> DEFAULTS =\n",
        "192": "      ImmutableClassToInstanceMap.builder()\n",
        "193": "          // primitives\n",
        "194": "          .put(Object.class, \"\")\n",
        "195": "          .put(Number.class, 0)\n",
        "196": "          .put(UnsignedInteger.class, UnsignedInteger.ZERO)\n",
        "197": "          .put(UnsignedLong.class, UnsignedLong.ZERO)\n",
        "198": "          .put(BigInteger.class, BigInteger.ZERO)\n",
        "199": "          .put(BigDecimal.class, BigDecimal.ZERO)\n",
        "200": "          .put(CharSequence.class, \"\")\n",
        "201": "          .put(String.class, \"\")\n",
        "202": "          .put(Pattern.class, Pattern.compile(\"\"))\n",
        "203": "          .put(MatchResult.class, newMatchResult())\n",
        "204": "          .put(TimeUnit.class, TimeUnit.SECONDS)\n",
        "205": "          .put(Charset.class, Charsets.UTF_8)\n",
        "206": "          .put(Currency.class, Currency.getInstance(Locale.US))\n",
        "207": "          .put(Locale.class, Locale.US)\n",
        "208": "          // common.base\n",
        "209": "          .put(CharMatcher.class, CharMatcher.none())\n",
        "210": "          .put(Joiner.class, Joiner.on(','))\n",
        "211": "          .put(Splitter.class, Splitter.on(','))\n",
        "212": "          .put(com.google.common.base.Optional.class, com.google.common.base.Optional.absent())\n",
        "213": "          .put(Predicate.class, Predicates.alwaysTrue())\n",
        "214": "          .put(Equivalence.class, Equivalence.equals())\n",
        "215": "          .put(Ticker.class, Ticker.systemTicker())\n",
        "216": "          .put(Stopwatch.class, Stopwatch.createUnstarted())\n",
        "217": "          // io types\n",
        "218": "          .put(InputStream.class, new ByteArrayInputStream(new byte[0]))\n",
        "219": "          .put(ByteArrayInputStream.class, new ByteArrayInputStream(new byte[0]))\n",
        "220": "          .put(Readable.class, new StringReader(\"\"))\n",
        "221": "          .put(Reader.class, new StringReader(\"\"))\n",
        "222": "          .put(StringReader.class, new StringReader(\"\"))\n",
        "223": "          .put(Buffer.class, ByteBuffer.allocate(0))\n",
        "224": "          .put(CharBuffer.class, CharBuffer.allocate(0))\n",
        "225": "          .put(ByteBuffer.class, ByteBuffer.allocate(0))\n",
        "226": "          .put(ShortBuffer.class, ShortBuffer.allocate(0))\n",
        "227": "          .put(IntBuffer.class, IntBuffer.allocate(0))\n",
        "228": "          .put(LongBuffer.class, LongBuffer.allocate(0))\n",
        "229": "          .put(FloatBuffer.class, FloatBuffer.allocate(0))\n",
        "230": "          .put(DoubleBuffer.class, DoubleBuffer.allocate(0))\n",
        "231": "          .put(File.class, new File(\"\"))\n",
        "232": "          .put(ByteSource.class, ByteSource.empty())\n",
        "233": "          .put(CharSource.class, CharSource.empty())\n",
        "234": "          .put(ByteSink.class, NullByteSink.INSTANCE)\n",
        "235": "          .put(CharSink.class, NullByteSink.INSTANCE.asCharSink(Charsets.UTF_8))\n",
        "236": "          // All collections are immutable empty. So safe for any type parameter.\n",
        "237": "          .put(Iterator.class, ImmutableSet.of().iterator())\n",
        "238": "          .put(PeekingIterator.class, Iterators.peekingIterator(ImmutableSet.of().iterator()))\n",
        "239": "          .put(ListIterator.class, ImmutableList.of().listIterator())\n",
        "240": "          .put(Iterable.class, ImmutableSet.of())\n",
        "241": "          .put(Collection.class, ImmutableList.of())\n",
        "242": "          .put(ImmutableCollection.class, ImmutableList.of())\n",
        "243": "          .put(List.class, ImmutableList.of())\n",
        "244": "          .put(ImmutableList.class, ImmutableList.of())\n",
        "245": "          .put(Set.class, ImmutableSet.of())\n",
        "246": "          .put(ImmutableSet.class, ImmutableSet.of())\n",
        "247": "          .put(SortedSet.class, ImmutableSortedSet.of())\n",
        "248": "          .put(ImmutableSortedSet.class, ImmutableSortedSet.of())\n",
        "249": "          .put(NavigableSet.class, Sets.unmodifiableNavigableSet(Sets.newTreeSet()))\n",
        "250": "          .put(Map.class, ImmutableMap.of())\n",
        "251": "          .put(ImmutableMap.class, ImmutableMap.of())\n",
        "252": "          .put(SortedMap.class, ImmutableSortedMap.of())\n",
        "253": "          .put(ImmutableSortedMap.class, ImmutableSortedMap.of())\n",
        "254": "          .put(NavigableMap.class, Maps.unmodifiableNavigableMap(Maps.newTreeMap()))\n",
        "255": "          .put(Multimap.class, ImmutableMultimap.of())\n",
        "256": "          .put(ImmutableMultimap.class, ImmutableMultimap.of())\n",
        "257": "          .put(ListMultimap.class, ImmutableListMultimap.of())\n",
        "258": "          .put(ImmutableListMultimap.class, ImmutableListMultimap.of())\n",
        "259": "          .put(SetMultimap.class, ImmutableSetMultimap.of())\n",
        "260": "          .put(ImmutableSetMultimap.class, ImmutableSetMultimap.of())\n",
        "261": "          .put(\n",
        "262": "              SortedSetMultimap.class,\n",
        "263": "              Multimaps.unmodifiableSortedSetMultimap(TreeMultimap.create()))\n",
        "264": "          .put(Multiset.class, ImmutableMultiset.of())\n",
        "265": "          .put(ImmutableMultiset.class, ImmutableMultiset.of())\n",
        "266": "          .put(SortedMultiset.class, ImmutableSortedMultiset.of())\n",
        "267": "          .put(ImmutableSortedMultiset.class, ImmutableSortedMultiset.of())\n",
        "268": "          .put(BiMap.class, ImmutableBiMap.of())\n",
        "269": "          .put(ImmutableBiMap.class, ImmutableBiMap.of())\n",
        "270": "          .put(Table.class, ImmutableTable.of())\n",
        "271": "          .put(ImmutableTable.class, ImmutableTable.of())\n",
        "272": "          .put(RowSortedTable.class, Tables.unmodifiableRowSortedTable(TreeBasedTable.create()))\n",
        "273": "          .put(ClassToInstanceMap.class, ImmutableClassToInstanceMap.builder().build())\n",
        "274": "          .put(ImmutableClassToInstanceMap.class, ImmutableClassToInstanceMap.builder().build())\n",
        "275": "          .put(Comparable.class, ByToString.INSTANCE)\n",
        "276": "          .put(Comparator.class, AlwaysEqual.INSTANCE)\n",
        "277": "          .put(Ordering.class, AlwaysEqual.INSTANCE)\n",
        "278": "          .put(Range.class, Range.all())\n",
        "279": "          .put(MapDifference.class, Maps.difference(ImmutableMap.of(), ImmutableMap.of()))\n",
        "280": "          .put(\n",
        "281": "              SortedMapDifference.class,\n",
        "282": "              Maps.difference(ImmutableSortedMap.of(), ImmutableSortedMap.of()))\n",
        "283": "          // reflect\n",
        "284": "          .put(AnnotatedElement.class, Object.class)\n",
        "285": "          .put(GenericDeclaration.class, Object.class)\n",
        "286": "          .put(Type.class, Object.class)\n",
        "287": "          .build();\n",
        "297": "    checkArgument(\n",
        "298": "        !DEFAULTS.containsKey(type), \"A default value was already registered for %s\", type);\n",
        "299": "    checkArgument(\n",
        "300": "        implementations.put(type, implementation) == null,\n",
        "301": "        \"Implementation for %s was already registered\",\n",
        "302": "        type);\n",
        "318": "    setImplementation(\n",
        "319": "        ScheduledThreadPoolExecutor.class, Dummies.DummyScheduledThreadPoolExecutor.class);\n",
        "336": "   * Returns an arbitrary instance for {@code type}, or {@code null} if no arbitrary instance can be\n",
        "337": "   * determined.\n",
        "339": "  @Nullable\n",
        "340": "  public static <T> T get(Class<T> type) {\n",
        "351": "      return (enumConstants.length == 0) ? null : enumConstants[0];\n",
        "380": "  @Nullable\n",
        "381": "  private static <T> T arbitraryConstantInstanceOrNull(Class<T> type) {\n",
        "388": "        if (field.getGenericType() == field.getType() && type.isAssignableFrom(field.getType())) {\n",
        "442": "      @Override\n",
        "443": "      public void run() {}\n",
        "447": "      @Override\n",
        "448": "      public Thread newThread(Runnable r) {\n",
        "454": "      @Override\n",
        "455": "      public void execute(Runnable command) {}\n",
        "462": "    @Override\n",
        "463": "    public OutputStream openStream() {\n",
        "474": "    @Override\n",
        "475": "    public int compareTo(Object o) {\n",
        "479": "    @Override\n",
        "480": "    public String toString() {\n",
        "493": "    @Override\n",
        "494": "    public int compare(Object o1, Object o2) {\n",
        "498": "    @Override\n",
        "499": "    public String toString() {\n"
    },
    "removed": {
        "160": " * Immutable empty instances are returned for collection types; {@code \"\"} for string;\n",
        "161": " * {@code 0} for number types; reasonable default instance for other stateless types. For mutable\n",
        "162": " * types, a fresh instance is created each time {@code get()} is called.\n",
        "172": "  private static final Ordering<Field> BY_FIELD_NAME = new Ordering<Field>() {\n",
        "173": "    @Override public int compare(Field left, Field right) {\n",
        "174": "      return left.getName().compareTo(right.getName());\n",
        "175": "    }\n",
        "176": "  };\n",
        "189": "  private static final ClassToInstanceMap<Object> DEFAULTS = ImmutableClassToInstanceMap.builder()\n",
        "190": "      // primitives\n",
        "191": "      .put(Object.class, \"\")\n",
        "192": "      .put(Number.class, 0)\n",
        "193": "      .put(UnsignedInteger.class, UnsignedInteger.ZERO)\n",
        "194": "      .put(UnsignedLong.class, UnsignedLong.ZERO)\n",
        "195": "      .put(BigInteger.class, BigInteger.ZERO)\n",
        "196": "      .put(BigDecimal.class, BigDecimal.ZERO)\n",
        "197": "      .put(CharSequence.class, \"\")\n",
        "198": "      .put(String.class, \"\")\n",
        "199": "      .put(Pattern.class, Pattern.compile(\"\"))\n",
        "200": "      .put(MatchResult.class, newMatchResult())\n",
        "201": "      .put(TimeUnit.class, TimeUnit.SECONDS)\n",
        "202": "      .put(Charset.class, Charsets.UTF_8)\n",
        "203": "      .put(Currency.class, Currency.getInstance(Locale.US))\n",
        "204": "      .put(Locale.class, Locale.US)\n",
        "205": "      // common.base\n",
        "206": "      .put(CharMatcher.class, CharMatcher.none())\n",
        "207": "      .put(Joiner.class, Joiner.on(','))\n",
        "208": "      .put(Splitter.class, Splitter.on(','))\n",
        "209": "      .put(com.google.common.base.Optional.class, com.google.common.base.Optional.absent())\n",
        "210": "      .put(Predicate.class, Predicates.alwaysTrue())\n",
        "211": "      .put(Equivalence.class, Equivalence.equals())\n",
        "212": "      .put(Ticker.class, Ticker.systemTicker())\n",
        "213": "      .put(Stopwatch.class, Stopwatch.createUnstarted())\n",
        "214": "      // io types\n",
        "215": "      .put(InputStream.class, new ByteArrayInputStream(new byte[0]))\n",
        "216": "      .put(ByteArrayInputStream.class, new ByteArrayInputStream(new byte[0]))\n",
        "217": "      .put(Readable.class, new StringReader(\"\"))\n",
        "218": "      .put(Reader.class, new StringReader(\"\"))\n",
        "219": "      .put(StringReader.class, new StringReader(\"\"))\n",
        "220": "      .put(Buffer.class, ByteBuffer.allocate(0))\n",
        "221": "      .put(CharBuffer.class, CharBuffer.allocate(0))\n",
        "222": "      .put(ByteBuffer.class, ByteBuffer.allocate(0))\n",
        "223": "      .put(ShortBuffer.class, ShortBuffer.allocate(0))\n",
        "224": "      .put(IntBuffer.class, IntBuffer.allocate(0))\n",
        "225": "      .put(LongBuffer.class, LongBuffer.allocate(0))\n",
        "226": "      .put(FloatBuffer.class, FloatBuffer.allocate(0))\n",
        "227": "      .put(DoubleBuffer.class, DoubleBuffer.allocate(0))\n",
        "228": "      .put(File.class, new File(\"\"))\n",
        "229": "      .put(ByteSource.class, ByteSource.empty())\n",
        "230": "      .put(CharSource.class, CharSource.empty())\n",
        "231": "      .put(ByteSink.class, NullByteSink.INSTANCE)\n",
        "232": "      .put(CharSink.class, NullByteSink.INSTANCE.asCharSink(Charsets.UTF_8))\n",
        "233": "      // All collections are immutable empty. So safe for any type parameter.\n",
        "234": "      .put(Iterator.class, ImmutableSet.of().iterator())\n",
        "235": "      .put(PeekingIterator.class, Iterators.peekingIterator(ImmutableSet.of().iterator()))\n",
        "236": "      .put(ListIterator.class, ImmutableList.of().listIterator())\n",
        "237": "      .put(Iterable.class, ImmutableSet.of())\n",
        "238": "      .put(Collection.class, ImmutableList.of())\n",
        "239": "      .put(ImmutableCollection.class, ImmutableList.of())\n",
        "240": "      .put(List.class, ImmutableList.of())\n",
        "241": "      .put(ImmutableList.class, ImmutableList.of())\n",
        "242": "      .put(Set.class, ImmutableSet.of())\n",
        "243": "      .put(ImmutableSet.class, ImmutableSet.of())\n",
        "244": "      .put(SortedSet.class, ImmutableSortedSet.of())\n",
        "245": "      .put(ImmutableSortedSet.class, ImmutableSortedSet.of())\n",
        "246": "      .put(NavigableSet.class, Sets.unmodifiableNavigableSet(Sets.newTreeSet()))\n",
        "247": "      .put(Map.class, ImmutableMap.of())\n",
        "248": "      .put(ImmutableMap.class, ImmutableMap.of())\n",
        "249": "      .put(SortedMap.class, ImmutableSortedMap.of())\n",
        "250": "      .put(ImmutableSortedMap.class, ImmutableSortedMap.of())\n",
        "251": "      .put(NavigableMap.class, Maps.unmodifiableNavigableMap(Maps.newTreeMap()))\n",
        "252": "      .put(Multimap.class, ImmutableMultimap.of())\n",
        "253": "      .put(ImmutableMultimap.class, ImmutableMultimap.of())\n",
        "254": "      .put(ListMultimap.class, ImmutableListMultimap.of())\n",
        "255": "      .put(ImmutableListMultimap.class, ImmutableListMultimap.of())\n",
        "256": "      .put(SetMultimap.class, ImmutableSetMultimap.of())\n",
        "257": "      .put(ImmutableSetMultimap.class, ImmutableSetMultimap.of())\n",
        "258": "      .put(SortedSetMultimap.class, Multimaps.unmodifiableSortedSetMultimap(TreeMultimap.create()))\n",
        "259": "      .put(Multiset.class, ImmutableMultiset.of())\n",
        "260": "      .put(ImmutableMultiset.class, ImmutableMultiset.of())\n",
        "261": "      .put(SortedMultiset.class, ImmutableSortedMultiset.of())\n",
        "262": "      .put(ImmutableSortedMultiset.class, ImmutableSortedMultiset.of())\n",
        "263": "      .put(BiMap.class, ImmutableBiMap.of())\n",
        "264": "      .put(ImmutableBiMap.class, ImmutableBiMap.of())\n",
        "265": "      .put(Table.class, ImmutableTable.of())\n",
        "266": "      .put(ImmutableTable.class, ImmutableTable.of())\n",
        "267": "      .put(RowSortedTable.class, Tables.unmodifiableRowSortedTable(TreeBasedTable.create()))\n",
        "268": "      .put(ClassToInstanceMap.class, ImmutableClassToInstanceMap.builder().build())\n",
        "269": "      .put(ImmutableClassToInstanceMap.class, ImmutableClassToInstanceMap.builder().build())\n",
        "270": "      .put(Comparable.class, ByToString.INSTANCE)\n",
        "271": "      .put(Comparator.class, AlwaysEqual.INSTANCE)\n",
        "272": "      .put(Ordering.class, AlwaysEqual.INSTANCE)\n",
        "273": "      .put(Range.class, Range.all())\n",
        "274": "      .put(MapDifference.class, Maps.difference(ImmutableMap.of(), ImmutableMap.of()))\n",
        "275": "      .put(SortedMapDifference.class,\n",
        "276": "          Maps.difference(ImmutableSortedMap.of(), ImmutableSortedMap.of()))\n",
        "277": "      // reflect\n",
        "278": "      .put(AnnotatedElement.class, Object.class)\n",
        "279": "      .put(GenericDeclaration.class, Object.class)\n",
        "280": "      .put(Type.class, Object.class)\n",
        "281": "      .build();\n",
        "291": "    checkArgument(!DEFAULTS.containsKey(type),\n",
        "292": "        \"A default value was already registered for %s\", type);\n",
        "293": "    checkArgument(implementations.put(type, implementation) == null,\n",
        "294": "        \"Implementation for %s was already registered\", type);\n",
        "310": "    setImplementation(ScheduledThreadPoolExecutor.class,\n",
        "311": "        Dummies.DummyScheduledThreadPoolExecutor.class);\n",
        "328": "   * Returns an arbitrary instance for {@code type}, or {@code null} if no arbitrary instance can\n",
        "329": "   * be determined.\n",
        "331": "  @Nullable public static <T> T get(Class<T> type) {\n",
        "342": "      return (enumConstants.length == 0)\n",
        "343": "          ? null\n",
        "344": "          : enumConstants[0];\n",
        "373": "  @Nullable private static <T> T arbitraryConstantInstanceOrNull(Class<T> type) {\n",
        "380": "        if (field.getGenericType() == field.getType()\n",
        "381": "            && type.isAssignableFrom(field.getType())) {\n",
        "435": "      @Override public void run() {}\n",
        "439": "      @Override public Thread newThread(Runnable r) {\n",
        "445": "      @Override public void execute(Runnable command) {}\n",
        "452": "    @Override public OutputStream openStream() {\n",
        "463": "    @Override public int compareTo(Object o) {\n",
        "467": "    @Override public String toString() {\n",
        "480": "    @Override public int compare(Object o1, Object o2) {\n",
        "484": "    @Override public String toString() {\n"
    }
}