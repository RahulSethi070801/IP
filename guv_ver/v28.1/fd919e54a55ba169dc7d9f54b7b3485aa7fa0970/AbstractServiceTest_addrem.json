{
    "addition": {
        "67": "        ImmutableList.of(State.STARTING, State.RUNNING, State.STOPPING, State.TERMINATED),\n",
        "101": "        ImmutableList.of(State.STARTING, State.RUNNING, State.STOPPING, State.TERMINATED),\n",
        "126": "  public void testNoOpServiceStartStopAndWaitUninterruptible() throws Exception {\n",
        "146": "    @Override\n",
        "147": "    protected void doStart() {\n",
        "153": "    @Override\n",
        "154": "    protected void doStop() {\n",
        "183": "        ImmutableList.of(State.STARTING, State.RUNNING, State.STOPPING, State.TERMINATED),\n",
        "184": "        listener.getStateHistory());\n",
        "199": "        ImmutableList.of(State.STARTING, State.RUNNING, State.TERMINATED),\n",
        "200": "        listener.getStateHistory());\n",
        "226": "        ImmutableList.of(State.STARTING, State.STOPPING, State.TERMINATED),\n",
        "227": "        listener.getStateHistory());\n",
        "238": "    service.addListener(\n",
        "239": "        new Listener() {\n",
        "240": "          @Override\n",
        "241": "          public void stopping(State from) {\n",
        "242": "            stopppingCount.incrementAndGet();\n",
        "243": "          }\n",
        "244": "        },\n",
        "245": "        directExecutor());\n",
        "280": "    assertEquals(\n",
        "281": "        ImmutableList.of(State.STARTING, State.RUNNING, State.FAILED), listener.getStateHistory());\n",
        "291": "    assertEquals(\n",
        "292": "        ImmutableList.of(State.STARTING, State.RUNNING, State.STOPPING, State.FAILED),\n",
        "313": "   * The user of this service should call {@link #notifyStarted} and {@link #notifyStopped} after\n",
        "314": "   * calling {@link #startAsync} and {@link #stopAsync}.\n",
        "320": "    @Override\n",
        "321": "    protected void doStart() {\n",
        "326": "    @Override\n",
        "327": "    protected void doStop() {\n",
        "335": "    Thread waiter =\n",
        "336": "        new Thread() {\n",
        "337": "          @Override\n",
        "338": "          public void run() {\n",
        "339": "            service.awaitTerminated();\n",
        "340": "          }\n",
        "341": "        };\n",
        "346": "    waiter.join(LONG_TIMEOUT_MILLIS); // ensure that the await in the other thread is triggered\n",
        "353": "    Thread waiter =\n",
        "354": "        new Thread() {\n",
        "355": "          @Override\n",
        "356": "          public void run() {\n",
        "357": "            try {\n",
        "358": "              service.awaitTerminated();\n",
        "359": "              fail(\"Expected an IllegalStateException\");\n",
        "360": "            } catch (Throwable t) {\n",
        "361": "              exception.set(t);\n",
        "362": "            }\n",
        "363": "          }\n",
        "364": "        };\n",
        "390": "        ImmutableList.of(State.STARTING, State.RUNNING, State.STOPPING, State.TERMINATED),\n",
        "391": "        listener.getStateHistory());\n",
        "409": "  public void testThreadedServiceStopIdempotenceAfterWait() throws Throwable {\n",
        "426": "  public void testThreadedServiceStopIdempotenceDoubleWait() throws Throwable {\n",
        "472": "      assertTrue(\n",
        "473": "          \"Service thread hasn't finished its checks. \"\n",
        "474": "              + \"Exception status (possibly stale): \"\n",
        "475": "              + thrownByExecutionThread,\n",
        "479": "    @Override\n",
        "480": "    protected void doStart() {\n",
        "482": "      invokeOnExecutionThreadForTest(\n",
        "483": "          new Runnable() {\n",
        "484": "            @Override\n",
        "485": "            public void run() {\n",
        "486": "              assertEquals(State.STARTING, state());\n",
        "487": "              notifyStarted();\n",
        "488": "              assertEquals(State.RUNNING, state());\n",
        "489": "              hasConfirmedIsRunning.countDown();\n",
        "490": "            }\n",
        "491": "          });\n",
        "492": "    }\n",
        "493": "\n",
        "494": "    @Override\n",
        "495": "    protected void doStop() {\n",
        "497": "      invokeOnExecutionThreadForTest(\n",
        "498": "          new Runnable() {\n",
        "499": "            @Override\n",
        "500": "            public void run() {\n",
        "501": "              assertEquals(State.STOPPING, state());\n",
        "502": "              notifyStopped();\n",
        "503": "              assertEquals(State.TERMINATED, state());\n",
        "504": "            }\n",
        "505": "          });\n",
        "511": "    executionThread.setUncaughtExceptionHandler(\n",
        "512": "        new UncaughtExceptionHandler() {\n",
        "513": "          @Override\n",
        "514": "          public void uncaughtException(Thread thread, Throwable e) {\n",
        "515": "            thrownByExecutionThread = e;\n",
        "516": "          }\n",
        "517": "        });\n",
        "537": "    } catch (IllegalStateException expected) {\n",
        "538": "    }\n",
        "553": "    assertEquals(ImmutableList.of(State.STARTING, State.FAILED), listener.getStateHistory());\n",
        "569": "        ImmutableList.of(State.STARTING, State.RUNNING, State.STOPPING, State.FAILED),\n",
        "586": "        ImmutableList.of(State.STARTING, State.RUNNING, State.FAILED), listener.getStateHistory());\n",
        "600": "    assertEquals(ImmutableList.of(State.STARTING, State.FAILED), listener.getStateHistory());\n",
        "616": "        ImmutableList.of(State.STARTING, State.RUNNING, State.STOPPING, State.FAILED),\n",
        "633": "        ImmutableList.of(State.STARTING, State.RUNNING, State.FAILED), listener.getStateHistory());\n",
        "663": "    Thread thread =\n",
        "664": "        new Thread() {\n",
        "665": "          @Override\n",
        "666": "          public void run() {\n",
        "667": "            // Internally stopAsync() grabs a lock, this could be any such method on\n",
        "668": "            // AbstractService.\n",
        "669": "            service.stopAsync();\n",
        "670": "          }\n",
        "671": "        };\n",
        "679": "    service.addListener(\n",
        "680": "        new Listener() {\n",
        "681": "          @Override\n",
        "682": "          public void running() {\n",
        "683": "            service.awaitRunning();\n",
        "684": "          }\n",
        "685": "        },\n",
        "686": "        directExecutor());\n",
        "693": "    service.addListener(\n",
        "694": "        new Listener() {\n",
        "695": "          @Override\n",
        "696": "          public void terminated(State from) {\n",
        "697": "            service.stopAsync().awaitTerminated();\n",
        "698": "          }\n",
        "699": "        },\n",
        "700": "        directExecutor());\n",
        "703": "    Thread thread =\n",
        "704": "        new Thread() {\n",
        "705": "          @Override\n",
        "706": "          public void run() {\n",
        "707": "            service.stopAsync().awaitTerminated();\n",
        "708": "          }\n",
        "709": "        };\n",
        "717": "\n",
        "718": "    @Override\n",
        "719": "    protected void run() throws Exception {\n",
        "722": "\n",
        "723": "    @Override\n",
        "724": "    protected void triggerShutdown() {\n",
        "730": "    @Override\n",
        "731": "    protected void doStart() {\n",
        "735": "    @Override\n",
        "736": "    protected void doStop() {\n",
        "742": "    @Override\n",
        "743": "    protected void doStart() {\n",
        "748": "    @Override\n",
        "749": "    protected void doStop() {\n",
        "755": "    @Override\n",
        "756": "    protected void doStart() {\n",
        "760": "    @Override\n",
        "761": "    protected void doStop() {\n",
        "770": "    @Override\n",
        "771": "    protected void doStart() {\n",
        "775": "    @Override\n",
        "776": "    protected void doStop() {\n",
        "785": "    @Override\n",
        "786": "    protected void doStart() {\n",
        "791": "    @Override\n",
        "792": "    protected void doStop() {\n",
        "801": "    @Override\n",
        "802": "    protected void doStart() {\n",
        "806": "    @Override\n",
        "807": "    protected void doStop() {\n",
        "837": "    @Override\n",
        "838": "    public synchronized void starting() {\n",
        "844": "    @Override\n",
        "845": "    public synchronized void running() {\n",
        "852": "    @Override\n",
        "853": "    public synchronized void stopping(State from) {\n",
        "862": "          assertTrue(\n",
        "863": "              expected\n",
        "864": "                  .getMessage()\n",
        "865": "                  .equals(\"Expected the service \" + service + \" to be RUNNING, but was STOPPING\"));\n",
        "871": "    @Override\n",
        "872": "    public synchronized void terminated(State from) {\n",
        "882": "          assertTrue(\n",
        "883": "              expected\n",
        "884": "                  .getMessage()\n",
        "885": "                  .equals(\n",
        "886": "                      \"Expected the service \" + service + \" to be RUNNING, but was TERMINATED\"));\n",
        "892": "    @Override\n",
        "893": "    public synchronized void failed(State from, Throwable failure) {\n",
        "921": "    } catch (IllegalStateException expected) {\n",
        "922": "    }\n",
        "930": "    } catch (IllegalStateException expected) {\n",
        "931": "    }\n",
        "939": "    } catch (IllegalStateException expected) {\n",
        "940": "    }\n",
        "950": "    } catch (IllegalStateException expected) {\n",
        "951": "    }\n",
        "955": "    @Override\n",
        "956": "    protected void doStart() {}\n",
        "957": "\n",
        "958": "    @Override\n",
        "959": "    protected void doStop() {}\n"
    },
    "removed": {
        "67": "        ImmutableList.of(\n",
        "68": "            State.STARTING,\n",
        "69": "            State.RUNNING,\n",
        "70": "            State.STOPPING,\n",
        "71": "            State.TERMINATED),\n",
        "105": "        ImmutableList.of(\n",
        "106": "            State.STARTING,\n",
        "107": "            State.RUNNING,\n",
        "108": "            State.STOPPING,\n",
        "109": "            State.TERMINATED),\n",
        "134": "  public void testNoOpServiceStartStopAndWaitUninterruptible()\n",
        "135": "      throws Exception {\n",
        "155": "    @Override protected void doStart() {\n",
        "161": "    @Override protected void doStop() {\n",
        "190": "        ImmutableList.of(\n",
        "191": "            State.STARTING,\n",
        "192": "            State.RUNNING,\n",
        "193": "            State.STOPPING,\n",
        "194": "            State.TERMINATED),\n",
        "195": "            listener.getStateHistory());\n",
        "196": "\n",
        "211": "        ImmutableList.of(\n",
        "212": "            State.STARTING,\n",
        "213": "            State.RUNNING,\n",
        "214": "            State.TERMINATED),\n",
        "215": "            listener.getStateHistory());\n",
        "241": "        ImmutableList.of(\n",
        "242": "            State.STARTING,\n",
        "243": "            State.STOPPING,\n",
        "244": "            State.TERMINATED),\n",
        "245": "            listener.getStateHistory());\n",
        "256": "    service.addListener(new Listener() {\n",
        "257": "      @Override public void stopping(State from) {\n",
        "258": "        stopppingCount.incrementAndGet();\n",
        "259": "      }\n",
        "260": "    }, directExecutor());\n",
        "295": "    assertEquals(ImmutableList.of(State.STARTING, State.RUNNING, State.FAILED),\n",
        "296": "        listener.getStateHistory());\n",
        "306": "    assertEquals(ImmutableList.of(State.STARTING, State.RUNNING, State.STOPPING, State.FAILED),\n",
        "327": "   * The user of this service should call {@link #notifyStarted} and {@link\n",
        "328": "   * #notifyStopped} after calling {@link #startAsync} and {@link #stopAsync}.\n",
        "334": "    @Override protected void doStart() {\n",
        "339": "    @Override protected void doStop() {\n",
        "347": "    Thread waiter = new Thread() {\n",
        "348": "      @Override public void run() {\n",
        "349": "        service.awaitTerminated();\n",
        "350": "      }\n",
        "351": "    };\n",
        "356": "    waiter.join(LONG_TIMEOUT_MILLIS);  // ensure that the await in the other thread is triggered\n",
        "363": "    Thread waiter = new Thread() {\n",
        "364": "      @Override public void run() {\n",
        "365": "        try {\n",
        "366": "          service.awaitTerminated();\n",
        "367": "          fail(\"Expected an IllegalStateException\");\n",
        "368": "        } catch (Throwable t) {\n",
        "369": "          exception.set(t);\n",
        "370": "        }\n",
        "371": "      }\n",
        "372": "    };\n",
        "398": "        ImmutableList.of(\n",
        "399": "            State.STARTING,\n",
        "400": "            State.RUNNING,\n",
        "401": "            State.STOPPING,\n",
        "402": "            State.TERMINATED),\n",
        "403": "            listener.getStateHistory());\n",
        "421": "  public void testThreadedServiceStopIdempotenceAfterWait()\n",
        "422": "      throws Throwable {\n",
        "439": "  public void testThreadedServiceStopIdempotenceDoubleWait()\n",
        "440": "      throws Throwable {\n",
        "486": "      assertTrue(\"Service thread hasn't finished its checks. \"\n",
        "487": "          + \"Exception status (possibly stale): \" + thrownByExecutionThread,\n",
        "491": "    @Override protected void doStart() {\n",
        "493": "      invokeOnExecutionThreadForTest(new Runnable() {\n",
        "494": "        @Override public void run() {\n",
        "495": "          assertEquals(State.STARTING, state());\n",
        "496": "          notifyStarted();\n",
        "497": "          assertEquals(State.RUNNING, state());\n",
        "498": "          hasConfirmedIsRunning.countDown();\n",
        "499": "        }\n",
        "500": "      });\n",
        "501": "    }\n",
        "502": "\n",
        "503": "    @Override protected void doStop() {\n",
        "505": "      invokeOnExecutionThreadForTest(new Runnable() {\n",
        "506": "        @Override public void run() {\n",
        "507": "          assertEquals(State.STOPPING, state());\n",
        "508": "          notifyStopped();\n",
        "509": "          assertEquals(State.TERMINATED, state());\n",
        "510": "        }\n",
        "511": "      });\n",
        "517": "    executionThread.setUncaughtExceptionHandler(new UncaughtExceptionHandler() {\n",
        "518": "      @Override\n",
        "519": "      public void uncaughtException(Thread thread, Throwable e) {\n",
        "520": "        thrownByExecutionThread = e;\n",
        "521": "      }\n",
        "522": "    });\n",
        "542": "    } catch (IllegalStateException expected) {}\n",
        "557": "    assertEquals(\n",
        "558": "        ImmutableList.of(\n",
        "559": "            State.STARTING,\n",
        "560": "            State.FAILED),\n",
        "561": "        listener.getStateHistory());\n",
        "577": "        ImmutableList.of(\n",
        "578": "            State.STARTING,\n",
        "579": "            State.RUNNING,\n",
        "580": "            State.STOPPING,\n",
        "581": "            State.FAILED),\n",
        "598": "        ImmutableList.of(\n",
        "599": "            State.STARTING,\n",
        "600": "            State.RUNNING,\n",
        "601": "            State.FAILED),\n",
        "602": "        listener.getStateHistory());\n",
        "616": "    assertEquals(\n",
        "617": "        ImmutableList.of(\n",
        "618": "            State.STARTING,\n",
        "619": "            State.FAILED),\n",
        "620": "        listener.getStateHistory());\n",
        "636": "        ImmutableList.of(\n",
        "637": "            State.STARTING,\n",
        "638": "            State.RUNNING,\n",
        "639": "            State.STOPPING,\n",
        "640": "            State.FAILED),\n",
        "657": "        ImmutableList.of(\n",
        "658": "            State.STARTING,\n",
        "659": "            State.RUNNING,\n",
        "660": "            State.FAILED),\n",
        "661": "        listener.getStateHistory());\n",
        "691": "    Thread thread = new Thread() {\n",
        "692": "      @Override public void run() {\n",
        "693": "        // Internally stopAsync() grabs a lock, this could be any such method on AbstractService.\n",
        "694": "        service.stopAsync();\n",
        "695": "      }\n",
        "696": "    };\n",
        "704": "    service.addListener(new Listener() {\n",
        "705": "      @Override public void running() {\n",
        "706": "        service.awaitRunning();\n",
        "707": "      }\n",
        "708": "    }, directExecutor());\n",
        "715": "    service.addListener(new Listener() {\n",
        "716": "      @Override public void terminated(State from) {\n",
        "717": "        service.stopAsync().awaitTerminated();\n",
        "718": "      }\n",
        "719": "    }, directExecutor());\n",
        "722": "    Thread thread = new Thread() {\n",
        "723": "      @Override public void run() {\n",
        "724": "        service.stopAsync().awaitTerminated();\n",
        "725": "      }\n",
        "726": "    };\n",
        "734": "    @Override protected void run() throws Exception {\n",
        "737": "    @Override protected void triggerShutdown() {\n",
        "743": "    @Override protected void doStart() {\n",
        "747": "    @Override protected void doStop() {\n",
        "753": "    @Override protected void doStart() {\n",
        "758": "    @Override protected void doStop() {\n",
        "764": "    @Override protected void doStart() {\n",
        "768": "    @Override protected void doStop() {\n",
        "777": "    @Override protected void doStart() {\n",
        "781": "    @Override protected void doStop() {\n",
        "790": "    @Override protected void doStart() {\n",
        "795": "    @Override protected void doStop() {\n",
        "804": "    @Override protected void doStart() {\n",
        "808": "    @Override protected void doStop() {\n",
        "837": "    @Override public synchronized void starting() {\n",
        "843": "    @Override public synchronized void running() {\n",
        "850": "    @Override public synchronized void stopping(State from) {\n",
        "859": "          assertTrue(expected.getMessage().equals(\n",
        "860": "              \"Expected the service \" + service + \" to be RUNNING, but was STOPPING\"));\n",
        "866": "    @Override public synchronized void terminated(State from) {\n",
        "876": "          assertTrue(expected.getMessage().equals(\n",
        "877": "              \"Expected the service \" + service + \" to be RUNNING, but was TERMINATED\"));\n",
        "883": "    @Override public synchronized void failed(State from, Throwable failure) {\n",
        "911": "    } catch (IllegalStateException expected) {}\n",
        "919": "    } catch (IllegalStateException expected) {}\n",
        "927": "    } catch (IllegalStateException expected) {}\n",
        "937": "    } catch (IllegalStateException expected) {}\n",
        "941": "    @Override protected void doStart() {}\n",
        "942": "    @Override protected void doStop() {}\n"
    }
}