{
    "addition": {
        "39": " * A {@link Table} whose contents will never change, with many other important properties detailed\n",
        "40": " * at {@link ImmutableCollection}.\n",
        "43": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\"> immutable collections</a>.\n",
        "108": "        /* GWT isn't currently playing nicely with constructor references? */ ,\n",
        "192": "   * <p>The {@link Table#cellSet()} iteration order of the provided table determines the iteration\n",
        "193": "   * ordering of all views in the returned table. Note that some views of the original table and the\n",
        "194": "   * copied table may have different iteration orders. For more control over the ordering, create a\n",
        "195": "   * {@link Builder} and call {@link Builder#orderRowsBy}, {@link Builder#orderColumnsBy}, and\n",
        "196": "   * {@link Builder#putAll}\n",
        "198": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "199": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "200": "   * undocumented and subject to change.\n",
        "231": "   * Verifies that {@code rowKey}, {@code columnKey} and {@code value} are non-null, and returns a\n",
        "232": "   * new entry with those values.\n",
        "239": "   * A builder for creating immutable table instances, especially {@code public static final} tables\n",
        "240": "   * (\"constant tables\"). Example:\n",
        "242": "   * <pre>{@code\n",
        "243": "   * static final ImmutableTable<Integer, Character, String> SPREADSHEET =\n",
        "244": "   *     new ImmutableTable.Builder<Integer, Character, String>()\n",
        "245": "   *         .put(1, 'A', \"foo\")\n",
        "246": "   *         .put(1, 'B', \"bar\")\n",
        "247": "   *         .put(2, 'A', \"baz\")\n",
        "248": "   *         .build();\n",
        "249": "   * }</pre>\n",
        "251": "   * <p>By default, the order in which cells are added to the builder determines the iteration\n",
        "252": "   * ordering of all views in the returned table, with {@link #putAll} following the {@link\n",
        "253": "   * Table#cellSet()} iteration order. However, if {@link #orderRowsBy} or {@link #orderColumnsBy}\n",
        "254": "   * is called, the views are sorted by the supplied comparators.\n",
        "256": "   * <p>For empty or single-cell immutable tables, {@link #of()} and {@link #of(Object, Object,\n",
        "257": "   * Object)} are even more convenient.\n",
        "259": "   * <p>Builder instances can be reused - it is safe to call {@link #build} multiple times to build\n",
        "260": "   * multiple tables in series. Each table is a superset of the tables created before it.\n",
        "270": "     * Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n",
        "271": "     * ImmutableTable#builder}.\n",
        "275": "    /** Specifies the ordering of the generated table's rows. */\n",
        "282": "    /** Specifies the ordering of the generated table's columns. */\n",
        "290": "     * Associates the ({@code rowKey}, {@code columnKey}) pair with {@code value} in the built\n",
        "291": "     * table. Duplicate key pairs are not allowed and will cause {@link #build} to fail.\n",
        "300": "     * Adds the given {@code cell} to the table, making it immutable if necessary. Duplicate key\n",
        "301": "     * pairs are not allowed and will cause {@link #build} to fail.\n",
        "319": "     * Associates all of the given table's keys and values in the built table. Duplicate row key\n",
        "320": "     * column key pairs are not allowed, and will cause {@link #build} to fail.\n",
        "408": "   * <p>The value {@code Map<R, V>} instances in the returned map are {@link ImmutableMap} instances\n",
        "409": "   * as well.\n",
        "434": "   * <p>The value {@code Map<C, V>} instances in the returned map are {@link ImmutableMap} instances\n",
        "435": "   * as well.\n"
    },
    "removed": {
        "39": " * A {@link Table} whose contents will never change, with many other important\n",
        "40": " * properties detailed at {@link ImmutableCollection}.\n",
        "43": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\">\n",
        "44": " * immutable collections</a>.\n",
        "109": "            /* GWT isn't currently playing nicely with constructor references? */,\n",
        "193": "   * <p>The {@link Table#cellSet()} iteration order of the provided table\n",
        "194": "   * determines the iteration ordering of all views in the returned table. Note\n",
        "195": "   * that some views of the original table and the copied table may have\n",
        "196": "   * different iteration orders. For more control over the ordering, create a\n",
        "197": "   * {@link Builder} and call {@link Builder#orderRowsBy},\n",
        "198": "   * {@link Builder#orderColumnsBy}, and {@link Builder#putAll}\n",
        "200": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "201": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "202": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "233": "   * Verifies that {@code rowKey}, {@code columnKey} and {@code value} are\n",
        "234": "   * non-null, and returns a new entry with those values.\n",
        "241": "   * A builder for creating immutable table instances, especially {@code public\n",
        "242": "   * static final} tables (\"constant tables\"). Example: <pre>   {@code\n",
        "244": "   *   static final ImmutableTable<Integer, Character, String> SPREADSHEET =\n",
        "245": "   *       new ImmutableTable.Builder<Integer, Character, String>()\n",
        "246": "   *           .put(1, 'A', \"foo\")\n",
        "247": "   *           .put(1, 'B', \"bar\")\n",
        "248": "   *           .put(2, 'A', \"baz\")\n",
        "249": "   *           .build();}</pre>\n",
        "251": "   * <p>By default, the order in which cells are added to the builder determines\n",
        "252": "   * the iteration ordering of all views in the returned table, with {@link\n",
        "253": "   * #putAll} following the {@link Table#cellSet()} iteration order. However, if\n",
        "254": "   * {@link #orderRowsBy} or {@link #orderColumnsBy} is called, the views are\n",
        "255": "   * sorted by the supplied comparators.\n",
        "257": "   * For empty or single-cell immutable tables, {@link #of()} and\n",
        "258": "   * {@link #of(Object, Object, Object)} are even more convenient.\n",
        "260": "   * <p>Builder instances can be reused - it is safe to call {@link #build}\n",
        "261": "   * multiple times to build multiple tables in series. Each table is a superset\n",
        "262": "   * of the tables created before it.\n",
        "272": "     * Creates a new builder. The returned builder is equivalent to the builder\n",
        "273": "     * generated by {@link ImmutableTable#builder}.\n",
        "277": "    /**\n",
        "278": "     * Specifies the ordering of the generated table's rows.\n",
        "279": "     */\n",
        "286": "    /**\n",
        "287": "     * Specifies the ordering of the generated table's columns.\n",
        "288": "     */\n",
        "296": "     * Associates the ({@code rowKey}, {@code columnKey}) pair with {@code\n",
        "297": "     * value} in the built table. Duplicate key pairs are not allowed and will\n",
        "298": "     * cause {@link #build} to fail.\n",
        "307": "     * Adds the given {@code cell} to the table, making it immutable if\n",
        "308": "     * necessary. Duplicate key pairs are not allowed and will cause {@link\n",
        "309": "     * #build} to fail.\n",
        "327": "     * Associates all of the given table's keys and values in the built table.\n",
        "328": "     * Duplicate row key column key pairs are not allowed, and will cause\n",
        "329": "     * {@link #build} to fail.\n",
        "417": "   * <p>The value {@code Map<R, V>} instances in the returned map are\n",
        "418": "   * {@link ImmutableMap} instances as well.\n",
        "443": "   * <p>The value {@code Map<C, V>} instances in the returned map are\n",
        "444": "   * {@link ImmutableMap} instances as well.\n"
    }
}