{
    "addition": {
        "47": "/** @author Gregory Kick */\n",
        "82": "    } catch (IllegalArgumentException expected) {\n",
        "83": "    }\n",
        "87": "    } catch (IllegalArgumentException expected) {\n",
        "88": "    }\n",
        "95": "    } catch (IllegalArgumentException expected) {\n",
        "96": "    }\n",
        "100": "    } catch (IllegalArgumentException expected) {\n",
        "101": "    }\n",
        "163": "    } catch (IllegalArgumentException expected) {\n",
        "164": "    }\n",
        "172": "    } catch (IllegalArgumentException expected) {\n",
        "173": "    }\n",
        "180": "    assertEquals(\n",
        "181": "        ImmutableSet.of(), ContiguousSet.create(Range.lessThan(Integer.MIN_VALUE), integers()));\n",
        "182": "    assertEquals(\n",
        "183": "        ImmutableSet.of(), ContiguousSet.create(Range.greaterThan(Integer.MAX_VALUE), integers()));\n",
        "242": "    } catch (IllegalArgumentException expected) {\n",
        "243": "    }\n",
        "257": "    assertEquals(\n",
        "258": "        Integer.MIN_VALUE,\n",
        "265": "    assertEquals(\n",
        "266": "        Integer.MAX_VALUE,\n",
        "300": "    assertEquals(\n",
        "301": "        Range.closed(1, 3), ContiguousSet.create(Range.closedOpen(1, 4), integers()).range());\n",
        "304": "    assertEquals(\n",
        "305": "        Range.closed(1, 3), ContiguousSet.create(Range.openClosed(0, 3), integers()).range());\n",
        "307": "    assertEquals(\n",
        "308": "        Range.openClosed(0, 3),\n",
        "310": "    assertEquals(\n",
        "311": "        Range.openClosed(0, 3),\n",
        "313": "    assertEquals(\n",
        "314": "        Range.openClosed(0, 3),\n",
        "316": "    assertEquals(\n",
        "317": "        Range.openClosed(0, 3),\n",
        "320": "    assertEquals(\n",
        "321": "        Range.open(0, 4), ContiguousSet.create(Range.closed(1, 3), integers()).range(OPEN, OPEN));\n",
        "322": "    assertEquals(\n",
        "323": "        Range.open(0, 4),\n",
        "325": "    assertEquals(\n",
        "326": "        Range.open(0, 4), ContiguousSet.create(Range.open(0, 4), integers()).range(OPEN, OPEN));\n",
        "327": "    assertEquals(\n",
        "328": "        Range.open(0, 4),\n",
        "331": "    assertEquals(\n",
        "332": "        Range.closedOpen(1, 4),\n",
        "334": "    assertEquals(\n",
        "335": "        Range.closedOpen(1, 4),\n",
        "337": "    assertEquals(\n",
        "338": "        Range.closedOpen(1, 4),\n",
        "340": "    assertEquals(\n",
        "341": "        Range.closedOpen(1, 4),\n",
        "346": "    assertEquals(\n",
        "347": "        Range.closed(Integer.MIN_VALUE, Integer.MAX_VALUE),\n",
        "349": "    assertEquals(\n",
        "350": "        Range.atLeast(Integer.MIN_VALUE),\n",
        "352": "    assertEquals(\n",
        "353": "        Range.all(), ContiguousSet.create(Range.<Integer>all(), integers()).range(OPEN, OPEN));\n",
        "354": "    assertEquals(\n",
        "355": "        Range.atMost(Integer.MAX_VALUE),\n",
        "364": "    assertEquals(\n",
        "365": "        ImmutableSet.of(),\n",
        "366": "        ContiguousSet.create(Range.closed(-5, -1), integers())\n",
        "367": "            .intersection(ContiguousSet.create(Range.open(3, 64), integers())));\n",
        "372": "    assertEquals(\n",
        "373": "        ImmutableSet.of(1, 2, 3),\n",
        "375": "    assertEquals(\n",
        "376": "        ImmutableSet.of(1, 2, 3),\n",
        "396": "      suite.addTest(\n",
        "397": "          NavigableSetTestSuiteBuilder.using(new ContiguousSetGenerator())\n",
        "398": "              .named(\"Range.asSet\")\n",
        "399": "              .withFeatures(\n",
        "400": "                  CollectionSize.ANY,\n",
        "401": "                  KNOWN_ORDER,\n",
        "402": "                  ALLOWS_NULL_QUERIES,\n",
        "403": "                  NON_STANDARD_TOSTRING,\n",
        "404": "                  RESTRICTS_ELEMENTS)\n",
        "405": "              .suppressing(getHoleMethods())\n",
        "406": "              .createTestSuite());\n",
        "407": "\n",
        "408": "      suite.addTest(\n",
        "409": "          NavigableSetTestSuiteBuilder.using(new ContiguousSetHeadsetGenerator())\n",
        "410": "              .named(\"Range.asSet, headset\")\n",
        "411": "              .withFeatures(\n",
        "412": "                  CollectionSize.ANY,\n",
        "413": "                  KNOWN_ORDER,\n",
        "414": "                  ALLOWS_NULL_QUERIES,\n",
        "415": "                  NON_STANDARD_TOSTRING,\n",
        "416": "                  RESTRICTS_ELEMENTS)\n",
        "417": "              .suppressing(getHoleMethods())\n",
        "418": "              .createTestSuite());\n",
        "419": "\n",
        "420": "      suite.addTest(\n",
        "421": "          NavigableSetTestSuiteBuilder.using(new ContiguousSetTailsetGenerator())\n",
        "422": "              .named(\"Range.asSet, tailset\")\n",
        "423": "              .withFeatures(\n",
        "424": "                  CollectionSize.ANY,\n",
        "425": "                  KNOWN_ORDER,\n",
        "426": "                  ALLOWS_NULL_QUERIES,\n",
        "427": "                  NON_STANDARD_TOSTRING,\n",
        "428": "                  RESTRICTS_ELEMENTS)\n",
        "429": "              .suppressing(getHoleMethods())\n",
        "430": "              .createTestSuite());\n",
        "431": "\n",
        "432": "      suite.addTest(\n",
        "433": "          NavigableSetTestSuiteBuilder.using(new ContiguousSetSubsetGenerator())\n",
        "434": "              .named(\"Range.asSet, subset\")\n",
        "435": "              .withFeatures(\n",
        "436": "                  CollectionSize.ANY,\n",
        "437": "                  KNOWN_ORDER,\n",
        "438": "                  ALLOWS_NULL_QUERIES,\n",
        "439": "                  NON_STANDARD_TOSTRING,\n",
        "440": "                  RESTRICTS_ELEMENTS)\n",
        "441": "              .suppressing(getHoleMethods())\n",
        "442": "              .createTestSuite());\n",
        "443": "\n",
        "444": "      suite.addTest(\n",
        "445": "          NavigableSetTestSuiteBuilder.using(new ContiguousSetDescendingGenerator())\n",
        "446": "              .named(\"Range.asSet.descendingSet\")\n",
        "447": "              .withFeatures(\n",
        "448": "                  CollectionSize.ANY,\n",
        "449": "                  KNOWN_ORDER,\n",
        "450": "                  ALLOWS_NULL_QUERIES,\n",
        "451": "                  NON_STANDARD_TOSTRING,\n",
        "452": "                  RESTRICTS_ELEMENTS)\n",
        "453": "              .suppressing(getHoleMethods())\n",
        "454": "              .createTestSuite());\n"
    },
    "removed": {
        "47": "/**\n",
        "48": " * @author Gregory Kick\n",
        "49": " */\n",
        "84": "    } catch (IllegalArgumentException expected) {}\n",
        "88": "    } catch (IllegalArgumentException expected) {}\n",
        "95": "    } catch (IllegalArgumentException expected) {}\n",
        "99": "    } catch (IllegalArgumentException expected) {}\n",
        "161": "    } catch (IllegalArgumentException expected) {}\n",
        "169": "    } catch (IllegalArgumentException expected) {}\n",
        "176": "    assertEquals(ImmutableSet.of(),\n",
        "177": "        ContiguousSet.create(Range.lessThan(Integer.MIN_VALUE), integers()));\n",
        "178": "    assertEquals(ImmutableSet.of(),\n",
        "179": "        ContiguousSet.create(Range.greaterThan(Integer.MAX_VALUE), integers()));\n",
        "238": "    } catch (IllegalArgumentException expected) {}\n",
        "252": "    assertEquals(Integer.MIN_VALUE,\n",
        "259": "    assertEquals(Integer.MAX_VALUE,\n",
        "293": "    assertEquals(Range.closed(1, 3),\n",
        "294": "        ContiguousSet.create(Range.closedOpen(1, 4), integers()).range());\n",
        "297": "    assertEquals(Range.closed(1, 3),\n",
        "298": "        ContiguousSet.create(Range.openClosed(0, 3), integers()).range());\n",
        "300": "    assertEquals(Range.openClosed(0, 3),\n",
        "302": "    assertEquals(Range.openClosed(0, 3),\n",
        "304": "    assertEquals(Range.openClosed(0, 3),\n",
        "306": "    assertEquals(Range.openClosed(0, 3),\n",
        "309": "    assertEquals(Range.open(0, 4),\n",
        "310": "        ContiguousSet.create(Range.closed(1, 3), integers()).range(OPEN, OPEN));\n",
        "311": "    assertEquals(Range.open(0, 4),\n",
        "313": "    assertEquals(Range.open(0, 4),\n",
        "314": "        ContiguousSet.create(Range.open(0, 4), integers()).range(OPEN, OPEN));\n",
        "315": "    assertEquals(Range.open(0, 4),\n",
        "318": "    assertEquals(Range.closedOpen(1, 4),\n",
        "320": "    assertEquals(Range.closedOpen(1, 4),\n",
        "322": "    assertEquals(Range.closedOpen(1, 4),\n",
        "324": "    assertEquals(Range.closedOpen(1, 4),\n",
        "329": "    assertEquals(Range.closed(Integer.MIN_VALUE, Integer.MAX_VALUE),\n",
        "331": "    assertEquals(Range.atLeast(Integer.MIN_VALUE),\n",
        "333": "    assertEquals(Range.all(),\n",
        "334": "        ContiguousSet.create(Range.<Integer>all(), integers()).range(OPEN, OPEN));\n",
        "335": "    assertEquals(Range.atMost(Integer.MAX_VALUE),\n",
        "344": "    assertEquals(ImmutableSet.of(),\n",
        "345": "        ContiguousSet.create(Range.closed(-5, -1), integers()).intersection(\n",
        "346": "            ContiguousSet.create(Range.open(3, 64), integers())));\n",
        "351": "    assertEquals(ImmutableSet.of(1, 2, 3),\n",
        "353": "    assertEquals(ImmutableSet.of(1, 2, 3),\n",
        "373": "      suite.addTest(NavigableSetTestSuiteBuilder.using(\n",
        "374": "          new ContiguousSetGenerator())\n",
        "375": "          .named(\"Range.asSet\")\n",
        "376": "          .withFeatures(CollectionSize.ANY, KNOWN_ORDER, ALLOWS_NULL_QUERIES,\n",
        "377": "              NON_STANDARD_TOSTRING, RESTRICTS_ELEMENTS)\n",
        "378": "          .suppressing(getHoleMethods())\n",
        "379": "          .createTestSuite());\n",
        "380": "\n",
        "381": "      suite.addTest(NavigableSetTestSuiteBuilder.using(\n",
        "382": "          new ContiguousSetHeadsetGenerator())\n",
        "383": "          .named(\"Range.asSet, headset\")\n",
        "384": "          .withFeatures(CollectionSize.ANY, KNOWN_ORDER, ALLOWS_NULL_QUERIES,\n",
        "385": "              NON_STANDARD_TOSTRING, RESTRICTS_ELEMENTS)\n",
        "386": "          .suppressing(getHoleMethods())\n",
        "387": "          .createTestSuite());\n",
        "388": "\n",
        "389": "      suite.addTest(NavigableSetTestSuiteBuilder.using(\n",
        "390": "          new ContiguousSetTailsetGenerator())\n",
        "391": "          .named(\"Range.asSet, tailset\")\n",
        "392": "          .withFeatures(CollectionSize.ANY, KNOWN_ORDER, ALLOWS_NULL_QUERIES,\n",
        "393": "              NON_STANDARD_TOSTRING, RESTRICTS_ELEMENTS)\n",
        "394": "          .suppressing(getHoleMethods())\n",
        "395": "          .createTestSuite());\n",
        "396": "\n",
        "397": "      suite.addTest(NavigableSetTestSuiteBuilder.using(\n",
        "398": "          new ContiguousSetSubsetGenerator())\n",
        "399": "          .named(\"Range.asSet, subset\")\n",
        "400": "          .withFeatures(CollectionSize.ANY, KNOWN_ORDER, ALLOWS_NULL_QUERIES,\n",
        "401": "              NON_STANDARD_TOSTRING, RESTRICTS_ELEMENTS)\n",
        "402": "          .suppressing(getHoleMethods())\n",
        "403": "          .createTestSuite());\n",
        "404": "\n",
        "405": "      suite.addTest(NavigableSetTestSuiteBuilder.using(\n",
        "406": "          new ContiguousSetDescendingGenerator())\n",
        "407": "          .named(\"Range.asSet.descendingSet\")\n",
        "408": "          .withFeatures(CollectionSize.ANY, KNOWN_ORDER, ALLOWS_NULL_QUERIES,\n",
        "409": "              NON_STANDARD_TOSTRING, RESTRICTS_ELEMENTS)\n",
        "410": "          .suppressing(getHoleMethods())\n",
        "411": "          .createTestSuite());\n"
    }
}