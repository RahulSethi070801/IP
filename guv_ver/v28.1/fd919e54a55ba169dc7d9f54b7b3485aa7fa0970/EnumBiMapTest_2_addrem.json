{
    "addition": {
        "52": "  private enum Currency {\n",
        "53": "    DOLLAR,\n",
        "54": "    FRANC,\n",
        "55": "    PESO,\n",
        "56": "    POUND,\n",
        "57": "    YEN\n",
        "58": "  }\n",
        "59": "\n",
        "60": "  private enum Country {\n",
        "61": "    CANADA,\n",
        "62": "    CHILE,\n",
        "63": "    JAPAN,\n",
        "64": "    SWITZERLAND,\n",
        "65": "    UK\n",
        "66": "  }\n",
        "115": "    suite.addTest(\n",
        "116": "        BiMapTestSuiteBuilder.using(new EnumBiMapGenerator())\n",
        "117": "            .named(\"EnumBiMap\")\n",
        "118": "            .withFeatures(\n",
        "119": "                CollectionSize.ANY,\n",
        "120": "                CollectionFeature.SERIALIZABLE,\n",
        "121": "                CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "122": "                MapFeature.GENERAL_PURPOSE,\n",
        "123": "                CollectionFeature.KNOWN_ORDER)\n",
        "124": "            .createTestSuite());\n",
        "130": "    EnumBiMap<Currency, Country> bimap = EnumBiMap.create(Currency.class, Country.class);\n",
        "141": "    Map<Currency, Country> map =\n",
        "142": "        ImmutableMap.of(\n",
        "143": "            Currency.DOLLAR, Country.CANADA,\n",
        "144": "            Currency.PESO, Country.CHILE,\n",
        "145": "            Currency.FRANC, Country.SWITZERLAND);\n",
        "154": "    } catch (IllegalArgumentException expected) {\n",
        "155": "    }\n",
        "157": "      EnumBiMap.create(EnumHashBiMap.<Currency, Country>create(Currency.class));\n",
        "159": "    } catch (IllegalArgumentException expected) {\n",
        "160": "    }\n",
        "163": "    Map<Currency, Country> emptyBimap = EnumBiMap.create(Currency.class, Country.class);\n",
        "170": "    EnumBiMap<Currency, Country> bimap1 = EnumBiMap.create(Currency.class, Country.class);\n",
        "172": "    EnumBiMap<Currency, Country> bimap2 = EnumBiMap.create(bimap1);\n",
        "181": "    EnumBiMap<Currency, Country> emptyBimap = EnumBiMap.create(Currency.class, Country.class);\n",
        "182": "    EnumBiMap<Currency, Country> bimap3 = EnumBiMap.create(emptyBimap);\n",
        "187": "    EnumBiMap<Currency, Country> bimap = EnumBiMap.create(Currency.class, Country.class);\n",
        "192": "    EnumBiMap<Currency, Country> bimap = EnumBiMap.create(Currency.class, Country.class);\n",
        "199": "    Map<Currency, Country> map =\n",
        "200": "        ImmutableMap.of(\n",
        "201": "            Currency.DOLLAR, Country.CANADA,\n",
        "202": "            Currency.PESO, Country.CHILE,\n",
        "203": "            Currency.FRANC, Country.SWITZERLAND);\n",
        "208": "        .containsExactly(Currency.DOLLAR, Currency.FRANC, Currency.PESO)\n",
        "209": "        .inOrder();\n",
        "212": "        .containsExactly(Country.CANADA, Country.SWITZERLAND, Country.CHILE)\n",
        "213": "        .inOrder();\n",
        "216": "        .containsExactly(Country.CANADA, Country.CHILE, Country.SWITZERLAND)\n",
        "217": "        .inOrder();\n",
        "220": "        .containsExactly(Currency.DOLLAR, Currency.PESO, Currency.FRANC)\n",
        "221": "        .inOrder();\n",
        "227": "    Map<Currency, Country> map =\n",
        "228": "        ImmutableMap.of(\n",
        "229": "            Currency.DOLLAR, Country.CANADA,\n",
        "230": "            Currency.PESO, Country.CHILE,\n",
        "231": "            Currency.FRANC, Country.SWITZERLAND);\n",
        "239": "    assertThat(bimap.keySet()).containsExactly(Currency.FRANC, Currency.PESO).inOrder();\n",
        "241": "    assertThat(bimap.values()).containsExactly(Country.SWITZERLAND, Country.CHILE).inOrder();\n",
        "244": "        .containsExactly(Country.CHILE, Country.SWITZERLAND)\n",
        "245": "        .inOrder();\n",
        "247": "    assertThat(bimap.inverse().values()).containsExactly(Currency.PESO, Currency.FRANC).inOrder();\n",
        "253": "    Map<Currency, Country> map =\n",
        "254": "        ImmutableMap.of(\n",
        "255": "            Currency.DOLLAR, Country.CANADA,\n",
        "256": "            Currency.PESO, Country.CHILE,\n",
        "257": "            Currency.FRANC, Country.SWITZERLAND);\n",
        "266": "    assertThat(bimap.keySet()).containsExactly(Currency.DOLLAR, Currency.PESO).inOrder();\n",
        "268": "    assertThat(bimap.values()).containsExactly(Country.CANADA, Country.CHILE).inOrder();\n",
        "270": "    assertThat(bimap.inverse().keySet()).containsExactly(Country.CANADA, Country.CHILE).inOrder();\n",
        "272": "    assertThat(bimap.inverse().values()).containsExactly(Currency.DOLLAR, Currency.PESO).inOrder();\n",
        "277": "    Map<Currency, Country> map =\n",
        "278": "        ImmutableMap.of(\n",
        "279": "            Currency.DOLLAR, Country.CANADA,\n",
        "280": "            Currency.PESO, Country.CHILE,\n",
        "281": "            Currency.FRANC, Country.SWITZERLAND);\n"
    },
    "removed": {
        "52": "  private enum Currency { DOLLAR, FRANC, PESO, POUND, YEN }\n",
        "53": "  private enum Country { CANADA, CHILE, JAPAN, SWITZERLAND, UK }\n",
        "102": "    suite.addTest(BiMapTestSuiteBuilder.using(new EnumBiMapGenerator())\n",
        "103": "        .named(\"EnumBiMap\")\n",
        "104": "        .withFeatures(CollectionSize.ANY,\n",
        "105": "            CollectionFeature.SERIALIZABLE,\n",
        "106": "            CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "107": "            MapFeature.GENERAL_PURPOSE,\n",
        "108": "            CollectionFeature.KNOWN_ORDER)\n",
        "109": "        .createTestSuite());\n",
        "115": "    EnumBiMap<Currency, Country> bimap =\n",
        "116": "        EnumBiMap.create(Currency.class, Country.class);\n",
        "127": "    Map<Currency, Country> map = ImmutableMap.of(\n",
        "128": "        Currency.DOLLAR, Country.CANADA,\n",
        "129": "        Currency.PESO, Country.CHILE,\n",
        "130": "        Currency.FRANC, Country.SWITZERLAND);\n",
        "139": "    } catch (IllegalArgumentException expected) {}\n",
        "141": "      EnumBiMap.create(\n",
        "142": "          EnumHashBiMap.<Currency, Country>create(Currency.class));\n",
        "144": "    } catch (IllegalArgumentException expected) {}\n",
        "147": "    Map<Currency, Country> emptyBimap =\n",
        "148": "        EnumBiMap.create(Currency.class, Country.class);\n",
        "155": "    EnumBiMap<Currency, Country> bimap1 =\n",
        "156": "        EnumBiMap.create(Currency.class, Country.class);\n",
        "158": "    EnumBiMap<Currency, Country> bimap2 =\n",
        "159": "        EnumBiMap.create(bimap1);\n",
        "168": "    EnumBiMap<Currency, Country> emptyBimap =\n",
        "169": "        EnumBiMap.create(Currency.class, Country.class);\n",
        "170": "    EnumBiMap<Currency, Country> bimap3 =\n",
        "171": "        EnumBiMap.create(emptyBimap);\n",
        "176": "    EnumBiMap<Currency, Country> bimap =\n",
        "177": "        EnumBiMap.create(Currency.class, Country.class);\n",
        "182": "    EnumBiMap<Currency, Country> bimap =\n",
        "183": "        EnumBiMap.create(Currency.class, Country.class);\n",
        "190": "    Map<Currency, Country> map = ImmutableMap.of(\n",
        "191": "        Currency.DOLLAR, Country.CANADA,\n",
        "192": "        Currency.PESO, Country.CHILE,\n",
        "193": "        Currency.FRANC, Country.SWITZERLAND);\n",
        "198": "        .containsExactly(Currency.DOLLAR, Currency.FRANC, Currency.PESO).inOrder();\n",
        "201": "        .containsExactly(Country.CANADA, Country.SWITZERLAND, Country.CHILE).inOrder();\n",
        "204": "        .containsExactly(Country.CANADA, Country.CHILE, Country.SWITZERLAND).inOrder();\n",
        "207": "        .containsExactly(Currency.DOLLAR, Currency.PESO, Currency.FRANC).inOrder();\n",
        "213": "    Map<Currency, Country> map = ImmutableMap.of(\n",
        "214": "        Currency.DOLLAR, Country.CANADA,\n",
        "215": "        Currency.PESO, Country.CHILE,\n",
        "216": "        Currency.FRANC, Country.SWITZERLAND);\n",
        "224": "    assertThat(bimap.keySet())\n",
        "225": "        .containsExactly(Currency.FRANC, Currency.PESO).inOrder();\n",
        "227": "    assertThat(bimap.values())\n",
        "228": "        .containsExactly(Country.SWITZERLAND, Country.CHILE).inOrder();\n",
        "231": "        .containsExactly(Country.CHILE, Country.SWITZERLAND).inOrder();\n",
        "233": "    assertThat(bimap.inverse().values())\n",
        "234": "        .containsExactly(Currency.PESO, Currency.FRANC).inOrder();\n",
        "240": "    Map<Currency, Country> map = ImmutableMap.of(\n",
        "241": "        Currency.DOLLAR, Country.CANADA,\n",
        "242": "        Currency.PESO, Country.CHILE,\n",
        "243": "        Currency.FRANC, Country.SWITZERLAND);\n",
        "252": "    assertThat(bimap.keySet())\n",
        "253": "        .containsExactly(Currency.DOLLAR, Currency.PESO).inOrder();\n",
        "255": "    assertThat(bimap.values())\n",
        "256": "        .containsExactly(Country.CANADA, Country.CHILE).inOrder();\n",
        "258": "    assertThat(bimap.inverse().keySet())\n",
        "259": "        .containsExactly(Country.CANADA, Country.CHILE).inOrder();\n",
        "261": "    assertThat(bimap.inverse().values())\n",
        "262": "        .containsExactly(Currency.DOLLAR, Currency.PESO).inOrder();\n",
        "267": "    Map<Currency, Country> map = ImmutableMap.of(\n",
        "268": "        Currency.DOLLAR, Country.CANADA,\n",
        "269": "        Currency.PESO, Country.CHILE,\n",
        "270": "        Currency.FRANC, Country.SWITZERLAND);\n"
    }
}