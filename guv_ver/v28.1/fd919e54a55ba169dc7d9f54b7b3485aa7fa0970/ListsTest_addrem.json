{
    "addition": {
        "67": "  private static final Collection<Integer> SOME_COLLECTION = asList(0, 1, 1);\n",
        "71": "  private static final class RemoveFirstFunction implements Function<String, String>, Serializable {\n",
        "87": "  private static final List<Integer> SOME_LIST = Lists.newArrayList(1, 2, 3, 4);\n",
        "89": "  private static final List<Integer> SOME_SEQUENTIAL_LIST = Lists.newLinkedList(asList(1, 2, 3, 4));\n",
        "91": "  private static final List<String> SOME_STRING_LIST = asList(\"1\", \"2\", \"3\", \"4\");\n",
        "93": "  private static final Function<Number, String> SOME_FUNCTION = new SomeFunction();\n",
        "95": "  private static class SomeFunction implements Function<Number, String>, Serializable {\n",
        "109": "    suite.addTest(\n",
        "110": "        ListTestSuiteBuilder.using(\n",
        "111": "                new TestStringListGenerator() {\n",
        "112": "                  @Override\n",
        "113": "                  protected List<String> create(String[] elements) {\n",
        "114": "                    String[] rest = new String[elements.length - 1];\n",
        "115": "                    System.arraycopy(elements, 1, rest, 0, elements.length - 1);\n",
        "116": "                    return Lists.asList(elements[0], rest);\n",
        "117": "                  }\n",
        "118": "                })\n",
        "119": "            .named(\"Lists.asList, 2 parameter\")\n",
        "120": "            .withFeatures(\n",
        "121": "                CollectionSize.SEVERAL,\n",
        "122": "                CollectionSize.ONE,\n",
        "123": "                CollectionFeature.SERIALIZABLE,\n",
        "124": "                CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "125": "            .createTestSuite());\n",
        "126": "\n",
        "127": "    suite.addTest(\n",
        "128": "        ListTestSuiteBuilder.using(\n",
        "129": "                new TestStringListGenerator() {\n",
        "130": "                  @Override\n",
        "131": "                  protected List<String> create(String[] elements) {\n",
        "132": "                    String[] rest = new String[elements.length - 2];\n",
        "133": "                    System.arraycopy(elements, 2, rest, 0, elements.length - 2);\n",
        "134": "                    return Lists.asList(elements[0], elements[1], rest);\n",
        "135": "                  }\n",
        "136": "                })\n",
        "137": "            .named(\"Lists.asList, 3 parameter\")\n",
        "138": "            .withFeatures(\n",
        "139": "                CollectionSize.SEVERAL,\n",
        "140": "                CollectionFeature.SERIALIZABLE,\n",
        "141": "                CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "142": "            .createTestSuite());\n",
        "143": "\n",
        "144": "    final Function<String, String> removeFirst = new RemoveFirstFunction();\n",
        "145": "\n",
        "146": "    suite.addTest(\n",
        "147": "        ListTestSuiteBuilder.using(\n",
        "148": "                new TestStringListGenerator() {\n",
        "149": "                  @Override\n",
        "150": "                  protected List<String> create(String[] elements) {\n",
        "151": "                    List<String> fromList = Lists.newArrayList();\n",
        "152": "                    for (String element : elements) {\n",
        "153": "                      fromList.add(\"q\" + checkNotNull(element));\n",
        "154": "                    }\n",
        "155": "                    return Lists.transform(fromList, removeFirst);\n",
        "156": "                  }\n",
        "157": "                })\n",
        "158": "            .named(\"Lists.transform, random access, no nulls\")\n",
        "159": "            .withFeatures(\n",
        "160": "                CollectionSize.ANY,\n",
        "161": "                ListFeature.REMOVE_OPERATIONS,\n",
        "162": "                CollectionFeature.SERIALIZABLE,\n",
        "163": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "166": "    suite.addTest(\n",
        "167": "        ListTestSuiteBuilder.using(\n",
        "168": "                new TestStringListGenerator() {\n",
        "169": "                  @Override\n",
        "170": "                  protected List<String> create(String[] elements) {\n",
        "171": "                    List<String> fromList = Lists.newLinkedList();\n",
        "172": "                    for (String element : elements) {\n",
        "173": "                      fromList.add(\"q\" + checkNotNull(element));\n",
        "174": "                    }\n",
        "175": "                    return Lists.transform(fromList, removeFirst);\n",
        "176": "                  }\n",
        "177": "                })\n",
        "178": "            .named(\"Lists.transform, sequential access, no nulls\")\n",
        "179": "            .withFeatures(\n",
        "180": "                CollectionSize.ANY,\n",
        "181": "                ListFeature.REMOVE_OPERATIONS,\n",
        "182": "                CollectionFeature.SERIALIZABLE,\n",
        "183": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "184": "            .createTestSuite());\n",
        "185": "\n",
        "186": "    suite.addTest(\n",
        "187": "        ListTestSuiteBuilder.using(\n",
        "188": "                new TestStringListGenerator() {\n",
        "189": "                  @Override\n",
        "190": "                  protected List<String> create(String[] elements) {\n",
        "191": "                    List<String> fromList = Lists.newArrayList(elements);\n",
        "192": "                    return Lists.transform(fromList, Functions.<String>identity());\n",
        "193": "                  }\n",
        "194": "                })\n",
        "195": "            .named(\"Lists.transform, random access, nulls\")\n",
        "196": "            .withFeatures(\n",
        "197": "                CollectionSize.ANY,\n",
        "198": "                ListFeature.REMOVE_OPERATIONS,\n",
        "199": "                CollectionFeature.SERIALIZABLE,\n",
        "200": "                CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "201": "            .createTestSuite());\n",
        "202": "\n",
        "203": "    suite.addTest(\n",
        "204": "        ListTestSuiteBuilder.using(\n",
        "205": "                new TestStringListGenerator() {\n",
        "206": "                  @Override\n",
        "207": "                  protected List<String> create(String[] elements) {\n",
        "208": "                    List<String> fromList = Lists.newLinkedList(asList(elements));\n",
        "209": "                    return Lists.transform(fromList, Functions.<String>identity());\n",
        "210": "                  }\n",
        "211": "                })\n",
        "212": "            .named(\"Lists.transform, sequential access, nulls\")\n",
        "213": "            .withFeatures(\n",
        "214": "                CollectionSize.ANY,\n",
        "215": "                ListFeature.REMOVE_OPERATIONS,\n",
        "216": "                CollectionFeature.SERIALIZABLE,\n",
        "217": "                CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "218": "            .createTestSuite());\n",
        "219": "\n",
        "220": "    suite.addTest(\n",
        "221": "        ListTestSuiteBuilder.using(\n",
        "222": "                new TestStringListGenerator() {\n",
        "223": "                  @Override\n",
        "224": "                  protected List<String> create(String[] elements) {\n",
        "225": "                    List<String> list = Lists.newArrayList();\n",
        "226": "                    for (int i = elements.length - 1; i >= 0; i--) {\n",
        "227": "                      list.add(elements[i]);\n",
        "228": "                    }\n",
        "229": "                    return Lists.reverse(list);\n",
        "230": "                  }\n",
        "231": "                })\n",
        "232": "            .named(\"Lists.reverse[ArrayList]\")\n",
        "233": "            .withFeatures(\n",
        "234": "                CollectionSize.ANY,\n",
        "235": "                CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "236": "                ListFeature.GENERAL_PURPOSE)\n",
        "237": "            .createTestSuite());\n",
        "238": "\n",
        "239": "    suite.addTest(\n",
        "240": "        ListTestSuiteBuilder.using(\n",
        "241": "                new TestStringListGenerator() {\n",
        "242": "                  @Override\n",
        "243": "                  protected List<String> create(String[] elements) {\n",
        "244": "                    String[] reverseElements = new String[elements.length];\n",
        "245": "                    for (int i = elements.length - 1, j = 0; i >= 0; i--, j++) {\n",
        "246": "                      reverseElements[j] = elements[i];\n",
        "247": "                    }\n",
        "248": "                    return Lists.reverse(asList(reverseElements));\n",
        "249": "                  }\n",
        "250": "                })\n",
        "251": "            .named(\"Lists.reverse[Arrays.asList]\")\n",
        "252": "            .withFeatures(\n",
        "253": "                CollectionSize.ANY, CollectionFeature.ALLOWS_NULL_VALUES, ListFeature.SUPPORTS_SET)\n",
        "254": "            .createTestSuite());\n",
        "255": "\n",
        "256": "    suite.addTest(\n",
        "257": "        ListTestSuiteBuilder.using(\n",
        "258": "                new TestStringListGenerator() {\n",
        "259": "                  @Override\n",
        "260": "                  protected List<String> create(String[] elements) {\n",
        "261": "                    List<String> list = Lists.newLinkedList();\n",
        "262": "                    for (int i = elements.length - 1; i >= 0; i--) {\n",
        "263": "                      list.add(elements[i]);\n",
        "264": "                    }\n",
        "265": "                    return Lists.reverse(list);\n",
        "266": "                  }\n",
        "267": "                })\n",
        "268": "            .named(\"Lists.reverse[LinkedList]\")\n",
        "269": "            .withFeatures(\n",
        "270": "                CollectionSize.ANY,\n",
        "271": "                CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "272": "                ListFeature.GENERAL_PURPOSE)\n",
        "273": "            .createTestSuite());\n",
        "274": "\n",
        "275": "    suite.addTest(\n",
        "276": "        ListTestSuiteBuilder.using(\n",
        "277": "                new TestStringListGenerator() {\n",
        "278": "                  @Override\n",
        "279": "                  protected List<String> create(String[] elements) {\n",
        "280": "                    ImmutableList.Builder<String> builder = ImmutableList.builder();\n",
        "281": "                    for (int i = elements.length - 1; i >= 0; i--) {\n",
        "282": "                      builder.add(elements[i]);\n",
        "283": "                    }\n",
        "284": "                    return Lists.reverse(builder.build());\n",
        "285": "                  }\n",
        "286": "                })\n",
        "287": "            .named(\"Lists.reverse[ImmutableList]\")\n",
        "288": "            .withFeatures(CollectionSize.ANY, CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "289": "            .createTestSuite());\n",
        "290": "\n",
        "291": "    suite.addTest(\n",
        "292": "        ListTestSuiteBuilder.using(new CharactersOfStringGenerator())\n",
        "293": "            .named(\"Lists.charactersOf[String]\")\n",
        "294": "            .withFeatures(\n",
        "295": "                CollectionSize.ANY,\n",
        "296": "                CollectionFeature.SERIALIZABLE,\n",
        "297": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "298": "            .createTestSuite());\n",
        "299": "\n",
        "300": "    suite.addTest(\n",
        "301": "        ListTestSuiteBuilder.using(new CharactersOfCharSequenceGenerator())\n",
        "302": "            .named(\"Lists.charactersOf[CharSequence]\")\n",
        "303": "            .withFeatures(CollectionSize.ANY, CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "314": "    assertEquals(asList('a', 'b', 'c', 'd', 'e', 'f'), chars);\n",
        "316": "    assertEquals(asList('a', 'b', 'c', 'd', 'e'), chars);\n",
        "366": "    assertEquals(Integer.MAX_VALUE, Lists.computeArrayListCapacity(Integer.MAX_VALUE - 1000));\n",
        "407": "    CopyOnWriteArrayList<Integer> list = Lists.newCopyOnWriteArrayList(SOME_ITERABLE);\n",
        "418": "   * This is just here to illustrate how {@code Arrays#asList} differs from {@code\n",
        "419": "   * Lists#newArrayList}.\n",
        "449": "    List<String> list = Lists.asList(\"foo\", new String[] {\"bar\", \"baz\"});\n",
        "454": "    new IteratorTester<String>(\n",
        "455": "        5, UNMODIFIABLE, asList(\"foo\", \"bar\", \"baz\"), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "456": "      @Override\n",
        "457": "      protected Iterator<String> newTargetIterator() {\n",
        "482": "    new IteratorTester<String>(\n",
        "483": "        3, UNMODIFIABLE, singletonList(\"foo\"), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "484": "      @Override\n",
        "485": "      protected Iterator<String> newTargetIterator() {\n",
        "492": "    List<String> list = Lists.asList(\"foo\", \"bar\", new String[] {\"baz\"});\n",
        "496": "    new IteratorTester<String>(\n",
        "497": "        5, UNMODIFIABLE, asList(\"foo\", \"bar\", \"baz\"), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "498": "      @Override\n",
        "499": "      protected Iterator<String> newTargetIterator() {\n",
        "517": "    new IteratorTester<String>(\n",
        "518": "        5, UNMODIFIABLE, asList(\"foo\", \"bar\"), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "519": "      @Override\n",
        "520": "      protected Iterator<String> newTargetIterator() {\n",
        "546": "  private static void assertReverseView(List<Integer> fromList, List<Integer> toList) {\n",
        "587": "        .containsExactly(list(1, 2), list(1, 3))\n",
        "588": "        .inOrder();\n",
        "594": "        .containsExactly(list(1, 3), list(1, 4), list(2, 3), list(2, 4))\n",
        "595": "        .inOrder();\n",
        "600": "    assertThat(Lists.cartesianProduct(list(0, 1), list(0, 1), list(0, 1)))\n",
        "601": "        .containsExactly(\n",
        "602": "            list(0, 0, 0),\n",
        "603": "            list(0, 0, 1),\n",
        "604": "            list(0, 1, 0),\n",
        "605": "            list(0, 1, 1),\n",
        "606": "            list(1, 0, 0),\n",
        "607": "            list(1, 0, 1),\n",
        "608": "            list(1, 1, 0),\n",
        "609": "            list(1, 1, 1))\n",
        "610": "        .inOrder();\n",
        "634": "        .containsExactly(exp1, exp2, exp3, exp4)\n",
        "635": "        .inOrder();\n",
        "644": "    } catch (IllegalArgumentException expected) {\n",
        "645": "    }\n",
        "674": "    } catch (UnsupportedOperationException expected) {\n",
        "675": "    }\n",
        "683": "    } catch (UnsupportedOperationException expected) {\n",
        "684": "    }\n",
        "701": "  private static void assertTransformView(List<Integer> fromList, List<String> toList) {\n",
        "745": "      Lists.transform(\n",
        "746": "              ImmutableList.of(\"foo\", \"bar\"),\n",
        "747": "              new Function<String, String>() {\n",
        "748": "                @Override\n",
        "749": "                public String apply(String input) {\n",
        "750": "                  throw new IndexOutOfBoundsException();\n",
        "751": "                }\n",
        "752": "              })\n",
        "753": "          .toArray();\n",
        "770": "    } catch (NoSuchElementException expected) {\n",
        "771": "    }\n",
        "783": "    } catch (NoSuchElementException expected) {\n",
        "784": "    }\n",
        "794": "    } catch (IllegalStateException expected) {\n",
        "795": "    }\n",
        "800": "    } catch (IllegalStateException expected) {\n",
        "801": "    }\n",
        "824": "    ListIterator<Integer> sampleListIterator = SOME_SEQUENTIAL_LIST.listIterator();\n",
        "831": "    assertTrue(\n",
        "832": "        Iterables.elementsEqual(transform, Lists.transform(randomAccessList, SOME_FUNCTION)));\n",
        "849": "    } catch (NoSuchElementException expected) {\n",
        "850": "    }\n",
        "907": "    assertTrue(\n",
        "908": "        \"partition should be RandomAccess, but not: \" + partitions.getClass(),\n",
        "911": "    assertTrue(\n",
        "912": "        \"partition[0] should be RandomAccess, but not: \" + partitions.get(0).getClass(),\n",
        "915": "    assertTrue(\n",
        "916": "        \"partition[1] should be RandomAccess, but not: \" + partitions.get(1).getClass(),\n"
    },
    "removed": {
        "67": "  private static final Collection<Integer> SOME_COLLECTION\n",
        "68": "      = asList(0, 1, 1);\n",
        "72": "  private static final class RemoveFirstFunction\n",
        "73": "      implements Function<String, String>, Serializable {\n",
        "88": "  private static final List<Integer> SOME_LIST\n",
        "89": "      = Lists.newArrayList(1, 2, 3, 4);\n",
        "91": "  private static final List<Integer> SOME_SEQUENTIAL_LIST\n",
        "92": "      = Lists.newLinkedList(asList(1, 2, 3, 4));\n",
        "94": "  private static final List<String> SOME_STRING_LIST\n",
        "95": "      = asList(\"1\", \"2\", \"3\", \"4\");\n",
        "97": "  private static final Function<Number, String> SOME_FUNCTION\n",
        "98": "      = new SomeFunction();\n",
        "100": "  private static class SomeFunction\n",
        "101": "      implements Function<Number, String>, Serializable {\n",
        "114": "    suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator() {\n",
        "115": "          @Override protected List<String> create(String[] elements) {\n",
        "116": "            String[] rest = new String[elements.length - 1];\n",
        "117": "            System.arraycopy(elements, 1, rest, 0, elements.length - 1);\n",
        "118": "            return Lists.asList(elements[0], rest);\n",
        "119": "          }\n",
        "120": "        })\n",
        "121": "        .named(\"Lists.asList, 2 parameter\")\n",
        "122": "        .withFeatures(CollectionSize.SEVERAL, CollectionSize.ONE,\n",
        "123": "            CollectionFeature.SERIALIZABLE,\n",
        "124": "            CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "125": "        .createTestSuite());\n",
        "126": "\n",
        "127": "    suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator() {\n",
        "128": "          @Override protected List<String> create(String[] elements) {\n",
        "129": "            String[] rest = new String[elements.length - 2];\n",
        "130": "            System.arraycopy(elements, 2, rest, 0, elements.length - 2);\n",
        "131": "            return Lists.asList(elements[0], elements[1], rest);\n",
        "132": "          }\n",
        "133": "        })\n",
        "134": "        .named(\"Lists.asList, 3 parameter\")\n",
        "135": "        .withFeatures(CollectionSize.SEVERAL,\n",
        "136": "            CollectionFeature.SERIALIZABLE,\n",
        "137": "            CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "138": "        .createTestSuite());\n",
        "139": "\n",
        "140": "    final Function<String, String> removeFirst\n",
        "141": "        = new RemoveFirstFunction();\n",
        "142": "\n",
        "143": "    suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator() {\n",
        "144": "          @Override protected List<String> create(String[] elements) {\n",
        "145": "            List<String> fromList = Lists.newArrayList();\n",
        "146": "            for (String element : elements) {\n",
        "147": "              fromList.add(\"q\" + checkNotNull(element));\n",
        "148": "            }\n",
        "149": "            return Lists.transform(fromList, removeFirst);\n",
        "150": "          }\n",
        "151": "        })\n",
        "152": "        .named(\"Lists.transform, random access, no nulls\")\n",
        "153": "        .withFeatures(CollectionSize.ANY,\n",
        "154": "            ListFeature.REMOVE_OPERATIONS,\n",
        "155": "            CollectionFeature.SERIALIZABLE,\n",
        "156": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "157": "        .createTestSuite());\n",
        "158": "\n",
        "159": "    suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator() {\n",
        "160": "          @Override protected List<String> create(String[] elements) {\n",
        "161": "            List<String> fromList = Lists.newLinkedList();\n",
        "162": "            for (String element : elements) {\n",
        "163": "              fromList.add(\"q\" + checkNotNull(element));\n",
        "164": "            }\n",
        "165": "            return Lists.transform(fromList, removeFirst);\n",
        "166": "          }\n",
        "167": "        })\n",
        "168": "        .named(\"Lists.transform, sequential access, no nulls\")\n",
        "169": "        .withFeatures(CollectionSize.ANY,\n",
        "170": "            ListFeature.REMOVE_OPERATIONS,\n",
        "171": "            CollectionFeature.SERIALIZABLE,\n",
        "172": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "173": "        .createTestSuite());\n",
        "174": "\n",
        "175": "    suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator() {\n",
        "176": "          @Override protected List<String> create(String[] elements) {\n",
        "177": "            List<String> fromList = Lists.newArrayList(elements);\n",
        "178": "            return Lists.transform(fromList, Functions.<String>identity());\n",
        "179": "          }\n",
        "180": "        })\n",
        "181": "        .named(\"Lists.transform, random access, nulls\")\n",
        "182": "        .withFeatures(CollectionSize.ANY,\n",
        "183": "            ListFeature.REMOVE_OPERATIONS,\n",
        "184": "            CollectionFeature.SERIALIZABLE,\n",
        "185": "            CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "186": "        .createTestSuite());\n",
        "187": "\n",
        "188": "    suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator() {\n",
        "189": "          @Override protected List<String> create(String[] elements) {\n",
        "190": "            List<String> fromList =\n",
        "191": "                Lists.newLinkedList(asList(elements));\n",
        "192": "            return Lists.transform(fromList, Functions.<String>identity());\n",
        "193": "          }\n",
        "194": "        })\n",
        "195": "        .named(\"Lists.transform, sequential access, nulls\")\n",
        "196": "        .withFeatures(CollectionSize.ANY,\n",
        "197": "            ListFeature.REMOVE_OPERATIONS,\n",
        "198": "            CollectionFeature.SERIALIZABLE,\n",
        "199": "            CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "200": "        .createTestSuite());\n",
        "201": "\n",
        "202": "    suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator() {\n",
        "203": "      @Override protected List<String> create(String[] elements) {\n",
        "204": "        List<String> list = Lists.newArrayList();\n",
        "205": "        for (int i = elements.length - 1; i >= 0; i--)\n",
        "206": "          list.add(elements[i]);\n",
        "207": "        return Lists.reverse(list);\n",
        "208": "      }\n",
        "209": "    }).named(\"Lists.reverse[ArrayList]\").withFeatures(CollectionSize.ANY,\n",
        "210": "        CollectionFeature.ALLOWS_NULL_VALUES, ListFeature.GENERAL_PURPOSE)\n",
        "211": "        .createTestSuite());\n",
        "212": "\n",
        "213": "    suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator() {\n",
        "214": "      @Override protected List<String> create(String[] elements) {\n",
        "215": "        String[] reverseElements = new String[elements.length];\n",
        "216": "        for (int i = elements.length - 1, j = 0; i >= 0; i--, j++)\n",
        "217": "          reverseElements[j] = elements[i];\n",
        "218": "        return Lists.reverse(asList(reverseElements));\n",
        "219": "      }\n",
        "220": "    }).named(\"Lists.reverse[Arrays.asList]\").withFeatures(CollectionSize.ANY,\n",
        "221": "        CollectionFeature.ALLOWS_NULL_VALUES, ListFeature.SUPPORTS_SET)\n",
        "222": "        .createTestSuite());\n",
        "223": "\n",
        "224": "    suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator() {\n",
        "225": "      @Override protected List<String> create(String[] elements) {\n",
        "226": "        List<String> list = Lists.newLinkedList();\n",
        "227": "        for (int i = elements.length - 1; i >= 0; i--)\n",
        "228": "          list.add(elements[i]);\n",
        "229": "        return Lists.reverse(list);\n",
        "230": "      }\n",
        "231": "    }).named(\"Lists.reverse[LinkedList]\").withFeatures(CollectionSize.ANY,\n",
        "232": "        CollectionFeature.ALLOWS_NULL_VALUES, ListFeature.GENERAL_PURPOSE)\n",
        "233": "        .createTestSuite());\n",
        "234": "\n",
        "235": "    suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator() {\n",
        "236": "      @Override protected List<String> create(String[] elements) {\n",
        "237": "        ImmutableList.Builder<String> builder = ImmutableList.builder();\n",
        "238": "        for (int i = elements.length - 1; i >= 0; i--)\n",
        "239": "          builder.add(elements[i]);\n",
        "240": "        return Lists.reverse(builder.build());\n",
        "241": "      }\n",
        "242": "    }).named(\"Lists.reverse[ImmutableList]\").withFeatures(CollectionSize.ANY,\n",
        "243": "        CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "244": "        .createTestSuite());\n",
        "245": "\n",
        "246": "    suite.addTest(ListTestSuiteBuilder.using(new CharactersOfStringGenerator())\n",
        "247": "        .named(\"Lists.charactersOf[String]\").withFeatures(\n",
        "248": "            CollectionSize.ANY,\n",
        "249": "            CollectionFeature.SERIALIZABLE,\n",
        "250": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "253": "    suite.addTest(ListTestSuiteBuilder.using(new CharactersOfCharSequenceGenerator())\n",
        "254": "        .named(\"Lists.charactersOf[CharSequence]\").withFeatures(\n",
        "255": "            CollectionSize.ANY, CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "266": "    assertEquals(\n",
        "267": "        asList('a', 'b', 'c', 'd', 'e', 'f'), chars);\n",
        "269": "    assertEquals(\n",
        "270": "        asList('a', 'b', 'c', 'd', 'e'), chars);\n",
        "320": "    assertEquals(Integer.MAX_VALUE,\n",
        "321": "        Lists.computeArrayListCapacity(Integer.MAX_VALUE - 1000));\n",
        "362": "    CopyOnWriteArrayList<Integer> list = Lists.newCopyOnWriteArrayList(\n",
        "363": "        SOME_ITERABLE);\n",
        "374": "   * This is just here to illustrate how {@code Arrays#asList} differs from\n",
        "375": "   * {@code Lists#newArrayList}.\n",
        "405": "    List<String> list = Lists.asList(\"foo\", new String[] { \"bar\", \"baz\" });\n",
        "410": "    new IteratorTester<String>(5, UNMODIFIABLE,\n",
        "411": "        asList(\"foo\", \"bar\", \"baz\"),\n",
        "412": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "413": "      @Override protected Iterator<String> newTargetIterator() {\n",
        "438": "    new IteratorTester<String>(3, UNMODIFIABLE, singletonList(\"foo\"),\n",
        "439": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "440": "      @Override protected Iterator<String> newTargetIterator() {\n",
        "447": "    List<String> list = Lists.asList(\"foo\", \"bar\", new String[] { \"baz\" });\n",
        "451": "    new IteratorTester<String>(5, UNMODIFIABLE, asList(\"foo\", \"bar\",\n",
        "452": "        \"baz\"), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "453": "      @Override protected Iterator<String> newTargetIterator() {\n",
        "471": "    new IteratorTester<String>(5, UNMODIFIABLE, asList(\"foo\", \"bar\"),\n",
        "472": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "473": "      @Override protected Iterator<String> newTargetIterator() {\n",
        "499": "  private static void assertReverseView(List<Integer> fromList,\n",
        "500": "      List<Integer> toList) {\n",
        "541": "        .containsExactly(list(1, 2), list(1, 3)).inOrder();\n",
        "547": "        .containsExactly(list(1, 3), list(1, 4), list(2, 3), list(2, 4)).inOrder();\n",
        "552": "    assertThat(Lists.cartesianProduct(list(0, 1), list(0, 1), list(0, 1))).containsExactly(\n",
        "553": "        list(0, 0, 0), list(0, 0, 1), list(0, 1, 0), list(0, 1, 1),\n",
        "554": "        list(1, 0, 0), list(1, 0, 1), list(1, 1, 0), list(1, 1, 1)).inOrder();\n",
        "578": "        .containsExactly(exp1, exp2, exp3, exp4).inOrder();\n",
        "587": "    } catch (IllegalArgumentException expected) {}\n",
        "616": "    } catch (UnsupportedOperationException expected) {}\n",
        "624": "    } catch (UnsupportedOperationException expected) {}\n",
        "641": "  private static void assertTransformView(List<Integer> fromList,\n",
        "642": "      List<String> toList) {\n",
        "686": "      Lists.transform(ImmutableList.of(\"foo\", \"bar\"), new Function<String, String>() {\n",
        "687": "        @Override\n",
        "688": "        public String apply(String input) {\n",
        "689": "          throw new IndexOutOfBoundsException();\n",
        "690": "        }\n",
        "691": "      }).toArray();\n",
        "708": "    } catch (NoSuchElementException expected) {}\n",
        "720": "    } catch (NoSuchElementException expected) {}\n",
        "730": "    } catch (IllegalStateException expected) {}\n",
        "735": "    } catch (IllegalStateException expected) {}\n",
        "758": "    ListIterator<Integer> sampleListIterator =\n",
        "759": "        SOME_SEQUENTIAL_LIST.listIterator();\n",
        "766": "    assertTrue(Iterables.elementsEqual(\n",
        "767": "        transform, Lists.transform(randomAccessList, SOME_FUNCTION)));\n",
        "784": "    } catch (NoSuchElementException expected) {}\n",
        "841": "    assertTrue(\"partition should be RandomAccess, but not: \"\n",
        "842": "        + partitions.getClass(),\n",
        "845": "    assertTrue(\"partition[0] should be RandomAccess, but not: \"\n",
        "846": "        + partitions.get(0).getClass(),\n",
        "849": "    assertTrue(\"partition[1] should be RandomAccess, but not: \"\n",
        "850": "        + partitions.get(1).getClass(),\n"
    }
}