{
    "addition": {
        "47": "  private static final long[] ARRAY234 = {(long) 2, (long) 3, (long) 4};\n",
        "49": "  private static final long[] VALUES = {MIN_VALUE, (long) -1, (long) 0, (long) 1, MAX_VALUE};\n",
        "54": "      assertEquals(\"hashCode for \" + value, ((Long) value).hashCode(), Longs.hashCode(value));\n",
        "62": "        assertEquals(x + \", \" + y, Long.valueOf(x).compareTo(y), Longs.compare(x, y));\n",
        "81": "    assertEquals(0, Longs.indexOf(new long[] {(long) -1}, (long) -1));\n",
        "85": "    assertEquals(1, Longs.indexOf(new long[] {(long) 2, (long) 3, (long) 2, (long) 3}, (long) 3));\n",
        "96": "    assertEquals(0, Longs.indexOf(ARRAY234, new long[] {(long) 2, (long) 3}));\n",
        "97": "    assertEquals(1, Longs.indexOf(ARRAY234, new long[] {(long) 3, (long) 4}));\n",
        "98": "    assertEquals(1, Longs.indexOf(ARRAY234, new long[] {(long) 3}));\n",
        "99": "    assertEquals(2, Longs.indexOf(ARRAY234, new long[] {(long) 4}));\n",
        "100": "    assertEquals(\n",
        "101": "        1,\n",
        "102": "        Longs.indexOf(\n",
        "103": "            new long[] {(long) 2, (long) 3, (long) 3, (long) 3, (long) 3}, new long[] {(long) 3}));\n",
        "104": "    assertEquals(\n",
        "105": "        2,\n",
        "106": "        Longs.indexOf(\n",
        "107": "            new long[] {(long) 2, (long) 3, (long) 2, (long) 3, (long) 4, (long) 2, (long) 3},\n",
        "108": "            new long[] {(long) 2, (long) 3, (long) 4}));\n",
        "109": "    assertEquals(\n",
        "110": "        1,\n",
        "111": "        Longs.indexOf(\n",
        "112": "            new long[] {(long) 2, (long) 2, (long) 3, (long) 4, (long) 2, (long) 3, (long) 4},\n",
        "113": "            new long[] {(long) 2, (long) 3, (long) 4}));\n",
        "114": "    assertEquals(\n",
        "115": "        -1,\n",
        "116": "        Longs.indexOf(\n",
        "117": "            new long[] {(long) 4, (long) 3, (long) 2}, new long[] {(long) 2, (long) 3, (long) 4}));\n",
        "124": "    assertEquals(0, Longs.lastIndexOf(new long[] {(long) -1}, (long) -1));\n",
        "128": "    assertEquals(\n",
        "129": "        3, Longs.lastIndexOf(new long[] {(long) 2, (long) 3, (long) 2, (long) 3}, (long) 3));\n",
        "143": "    assertEquals(\n",
        "144": "        (long) 9, Longs.max((long) 8, (long) 6, (long) 7, (long) 5, (long) 3, (long) 0, (long) 9));\n",
        "158": "    assertEquals(\n",
        "159": "        (long) 0, Longs.min((long) 8, (long) 6, (long) 7, (long) 5, (long) 3, (long) 0, (long) 9));\n",
        "182": "    assertTrue(\n",
        "183": "        Arrays.equals(\n",
        "184": "            new long[] {(long) 1, (long) 1, (long) 1}, Longs.concat(ARRAY1, ARRAY1, ARRAY1)));\n",
        "185": "    assertTrue(\n",
        "186": "        Arrays.equals(\n",
        "187": "            new long[] {(long) 1, (long) 2, (long) 3, (long) 4}, Longs.concat(ARRAY1, ARRAY234)));\n",
        "202": "          (byte) 0xFF, (byte) 0xEE, (byte) 0xDD, (byte) 0xCC,\n",
        "203": "          (byte) 0xBB, (byte) 0xAA, (byte) 0x99, (byte) 0x88\n",
        "204": "        },\n",
        "209": "    assertEquals(\n",
        "210": "        0x1213141516171819L,\n",
        "211": "        Longs.fromByteArray(new byte[] {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x33}));\n",
        "212": "    assertEquals(\n",
        "213": "        0xFFEEDDCCBBAA9988L,\n",
        "214": "        Longs.fromByteArray(\n",
        "215": "            new byte[] {\n",
        "216": "              (byte) 0xFF, (byte) 0xEE, (byte) 0xDD, (byte) 0xCC,\n",
        "217": "              (byte) 0xBB, (byte) 0xAA, (byte) 0x99, (byte) 0x88\n",
        "218": "            }));\n",
        "230": "    assertEquals(\n",
        "231": "        0x1213141516171819L,\n",
        "232": "        Longs.fromBytes(\n",
        "233": "            (byte) 0x12,\n",
        "234": "            (byte) 0x13,\n",
        "235": "            (byte) 0x14,\n",
        "236": "            (byte) 0x15,\n",
        "237": "            (byte) 0x16,\n",
        "238": "            (byte) 0x17,\n",
        "239": "            (byte) 0x18,\n",
        "240": "            (byte) 0x19));\n",
        "241": "    assertEquals(\n",
        "242": "        0xFFEEDDCCBBAA9988L,\n",
        "243": "        Longs.fromBytes(\n",
        "244": "            (byte) 0xFF,\n",
        "245": "            (byte) 0xEE,\n",
        "246": "            (byte) 0xDD,\n",
        "247": "            (byte) 0xCC,\n",
        "248": "            (byte) 0xBB,\n",
        "249": "            (byte) 0xAA,\n",
        "250": "            (byte) 0x99,\n",
        "251": "            (byte) 0x88));\n",
        "273": "    assertTrue(\n",
        "274": "        Arrays.equals(\n",
        "275": "            new long[] {(long) 1, (long) 0, (long) 0}, Longs.ensureCapacity(ARRAY1, 2, 1)));\n",
        "296": "    assertEquals(\"123\", Longs.join(\"\", (long) 1, (long) 2, (long) 3));\n",
        "300": "    List<long[]> ordered =\n",
        "301": "        Arrays.asList(\n",
        "302": "            new long[] {},\n",
        "303": "            new long[] {MIN_VALUE},\n",
        "304": "            new long[] {MIN_VALUE, MIN_VALUE},\n",
        "305": "            new long[] {MIN_VALUE, (long) 1},\n",
        "306": "            new long[] {(long) 1},\n",
        "307": "            new long[] {(long) 1, MIN_VALUE},\n",
        "308": "            new long[] {MAX_VALUE, MAX_VALUE - (long) 1},\n",
        "309": "            new long[] {MAX_VALUE, MAX_VALUE},\n",
        "310": "            new long[] {MAX_VALUE, MAX_VALUE, MAX_VALUE});\n",
        "403": "    for (int delta : new int[] {+1, 0, -1}) {\n",
        "406": "        Collection<Long> misleadingSize = Helpers.misleadingSizeCollection(delta);\n",
        "454": "    long[] array = {(long) 0, (long) 1, (long) 2};\n",
        "460": "    assertTrue(Arrays.equals(new long[] {(long) 0, (long) 1, (long) 2}, newArray));\n",
        "467": "    long[] array = {(long) 0, (long) 1, (long) 2, (long) 3};\n",
        "469": "    assertTrue(Arrays.equals(new long[] {(long) 1, (long) 2}, Longs.toArray(list.subList(1, 3))));\n",
        "470": "    assertTrue(Arrays.equals(new long[] {}, Longs.toArray(list.subList(2, 2))));\n",
        "537": "    assertNull(\n",
        "538": "        \"Max long + 1\",\n",
        "540": "    assertNull(\n",
        "541": "        \"Max long * 10\",\n",
        "543": "    assertNull(\n",
        "544": "        \"Min long - 1\",\n",
        "546": "    assertNull(\n",
        "547": "        \"Min long * 10\",\n",
        "553": "   * Applies {@link Longs#tryParse(String)} to the given string and asserts that the result is as\n",
        "554": "   * expected.\n",
        "561": "    for (int radix = Character.MIN_RADIX; radix <= Character.MAX_RADIX; radix++) {\n",
        "568": "      assertNull(\n",
        "569": "          \"Radix: \" + radix,\n",
        "571": "      assertNull(\n",
        "572": "          \"Radix: \" + radix,\n",
        "580": "   * Encodes the long as a string with given radix, then uses {@link Longs#tryParse(String, int)} to\n",
        "581": "   * parse the result. Asserts the result is the same as what we started with.\n",
        "584": "    assertEquals(\"Radix: \" + radix, value, Longs.tryParse(Long.toString(value, radix), radix));\n"
    },
    "removed": {
        "47": "  private static final long[] ARRAY234\n",
        "48": "      = {(long) 2, (long) 3, (long) 4};\n",
        "50": "  private static final long[] VALUES =\n",
        "51": "      { MIN_VALUE, (long) -1, (long) 0, (long) 1, MAX_VALUE };\n",
        "56": "      assertEquals(\"hashCode for \" + value,\n",
        "57": "          ((Long) value).hashCode(), Longs.hashCode(value));\n",
        "65": "        assertEquals(x + \", \" + y,\n",
        "66": "                     Long.valueOf(x).compareTo(y),\n",
        "67": "                     Longs.compare(x, y));\n",
        "86": "    assertEquals(0, Longs.indexOf(\n",
        "87": "        new long[] {(long) -1}, (long) -1));\n",
        "91": "    assertEquals(1, Longs.indexOf(\n",
        "92": "        new long[] { (long) 2, (long) 3, (long) 2, (long) 3 },\n",
        "93": "        (long) 3));\n",
        "104": "    assertEquals(0, Longs.indexOf(\n",
        "105": "        ARRAY234, new long[] { (long) 2, (long) 3 }));\n",
        "106": "    assertEquals(1, Longs.indexOf(\n",
        "107": "        ARRAY234, new long[] { (long) 3, (long) 4 }));\n",
        "108": "    assertEquals(1, Longs.indexOf(ARRAY234, new long[] { (long) 3 }));\n",
        "109": "    assertEquals(2, Longs.indexOf(ARRAY234, new long[] { (long) 4 }));\n",
        "110": "    assertEquals(1, Longs.indexOf(new long[] { (long) 2, (long) 3,\n",
        "111": "        (long) 3, (long) 3, (long) 3 },\n",
        "112": "        new long[] { (long) 3 }\n",
        "113": "    ));\n",
        "114": "    assertEquals(2, Longs.indexOf(\n",
        "115": "        new long[] { (long) 2, (long) 3, (long) 2,\n",
        "116": "            (long) 3, (long) 4, (long) 2, (long) 3},\n",
        "117": "        new long[] { (long) 2, (long) 3, (long) 4}\n",
        "118": "    ));\n",
        "119": "    assertEquals(1, Longs.indexOf(\n",
        "120": "        new long[] { (long) 2, (long) 2, (long) 3,\n",
        "121": "            (long) 4, (long) 2, (long) 3, (long) 4},\n",
        "122": "        new long[] { (long) 2, (long) 3, (long) 4}\n",
        "123": "    ));\n",
        "124": "    assertEquals(-1, Longs.indexOf(\n",
        "125": "        new long[] { (long) 4, (long) 3, (long) 2},\n",
        "126": "        new long[] { (long) 2, (long) 3, (long) 4}\n",
        "127": "    ));\n",
        "134": "    assertEquals(0, Longs.lastIndexOf(\n",
        "135": "        new long[] {(long) -1}, (long) -1));\n",
        "139": "    assertEquals(3, Longs.lastIndexOf(\n",
        "140": "        new long[] { (long) 2, (long) 3, (long) 2, (long) 3 },\n",
        "141": "        (long) 3));\n",
        "155": "    assertEquals((long) 9, Longs.max(\n",
        "156": "        (long) 8, (long) 6, (long) 7,\n",
        "157": "        (long) 5, (long) 3, (long) 0, (long) 9));\n",
        "171": "    assertEquals((long) 0, Longs.min(\n",
        "172": "        (long) 8, (long) 6, (long) 7,\n",
        "173": "        (long) 5, (long) 3, (long) 0, (long) 9));\n",
        "196": "    assertTrue(Arrays.equals(\n",
        "197": "        new long[] {(long) 1, (long) 1, (long) 1},\n",
        "198": "        Longs.concat(ARRAY1, ARRAY1, ARRAY1)));\n",
        "199": "    assertTrue(Arrays.equals(\n",
        "200": "        new long[] {(long) 1, (long) 2, (long) 3, (long) 4},\n",
        "201": "        Longs.concat(ARRAY1, ARRAY234)));\n",
        "216": "            (byte) 0xFF, (byte) 0xEE, (byte) 0xDD, (byte) 0xCC,\n",
        "217": "            (byte) 0xBB, (byte) 0xAA, (byte) 0x99, (byte) 0x88},\n",
        "222": "    assertEquals(0x1213141516171819L, Longs.fromByteArray(\n",
        "223": "        new byte[] {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x33}));\n",
        "224": "    assertEquals(0xFFEEDDCCBBAA9988L, Longs.fromByteArray(\n",
        "225": "        new byte[] {\n",
        "226": "            (byte) 0xFF, (byte) 0xEE, (byte) 0xDD, (byte) 0xCC,\n",
        "227": "            (byte) 0xBB, (byte) 0xAA, (byte) 0x99, (byte) 0x88}));\n",
        "239": "    assertEquals(0x1213141516171819L, Longs.fromBytes(\n",
        "240": "        (byte) 0x12, (byte) 0x13, (byte) 0x14, (byte) 0x15,\n",
        "241": "        (byte) 0x16, (byte) 0x17, (byte) 0x18, (byte) 0x19));\n",
        "242": "    assertEquals(0xFFEEDDCCBBAA9988L, Longs.fromBytes(\n",
        "243": "        (byte) 0xFF, (byte) 0xEE, (byte) 0xDD, (byte) 0xCC,\n",
        "244": "        (byte) 0xBB, (byte) 0xAA, (byte) 0x99, (byte) 0x88));\n",
        "266": "    assertTrue(Arrays.equals(\n",
        "267": "        new long[] {(long) 1, (long) 0, (long) 0},\n",
        "268": "        Longs.ensureCapacity(ARRAY1, 2, 1)));\n",
        "289": "    assertEquals(\"123\",\n",
        "290": "        Longs.join(\"\", (long) 1, (long) 2, (long) 3));\n",
        "294": "    List<long[]> ordered = Arrays.asList(\n",
        "295": "        new long[] {},\n",
        "296": "        new long[] {MIN_VALUE},\n",
        "297": "        new long[] {MIN_VALUE, MIN_VALUE},\n",
        "298": "        new long[] {MIN_VALUE, (long) 1},\n",
        "299": "        new long[] {(long) 1},\n",
        "300": "        new long[] {(long) 1, MIN_VALUE},\n",
        "301": "        new long[] {MAX_VALUE, MAX_VALUE - (long) 1},\n",
        "302": "        new long[] {MAX_VALUE, MAX_VALUE},\n",
        "303": "        new long[] {MAX_VALUE, MAX_VALUE, MAX_VALUE});\n",
        "396": "    for (int delta : new int[] { +1, 0, -1 }) {\n",
        "399": "        Collection<Long> misleadingSize =\n",
        "400": "            Helpers.misleadingSizeCollection(delta);\n",
        "448": "    long[] array = { (long) 0, (long) 1, (long) 2 };\n",
        "454": "    assertTrue(Arrays.equals(\n",
        "455": "        new long[] { (long) 0, (long) 1, (long) 2 }, newArray));\n",
        "462": "    long[] array = { (long) 0, (long) 1, (long) 2, (long) 3 };\n",
        "464": "    assertTrue(Arrays.equals(new long[] { (long) 1, (long) 2 },\n",
        "465": "        Longs.toArray(list.subList(1, 3))));\n",
        "466": "    assertTrue(Arrays.equals(new long[] {},\n",
        "467": "        Longs.toArray(list.subList(2, 2))));\n",
        "534": "    assertNull(\"Max long + 1\",\n",
        "536": "    assertNull(\"Max long * 10\",\n",
        "538": "    assertNull(\"Min long - 1\",\n",
        "540": "    assertNull(\"Min long * 10\",\n",
        "546": "   * Applies {@link Longs#tryParse(String)} to the given string and asserts that\n",
        "547": "   * the result is as expected.\n",
        "554": "    for (int radix = Character.MIN_RADIX;\n",
        "555": "        radix <= Character.MAX_RADIX; radix++) {\n",
        "562": "      assertNull(\"Radix: \" + radix,\n",
        "564": "      assertNull(\"Radix: \" + radix,\n",
        "572": "   * Encodes the long as a string with given radix, then uses\n",
        "573": "   * {@link Longs#tryParse(String, int)} to parse the result. Asserts the result\n",
        "574": "   * is the same as what we started with.\n",
        "577": "    assertEquals(\"Radix: \" + radix, value,\n",
        "578": "        Longs.tryParse(Long.toString(value, radix), radix));\n"
    }
}