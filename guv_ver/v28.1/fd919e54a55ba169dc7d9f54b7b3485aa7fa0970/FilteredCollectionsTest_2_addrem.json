{
    "addition": {
        "41": "  private static final Predicate<Integer> EVEN =\n",
        "42": "      new Predicate<Integer>() {\n",
        "43": "        @Override\n",
        "44": "        public boolean apply(Integer input) {\n",
        "45": "          return input % 2 == 0;\n",
        "46": "        }\n",
        "47": "      };\n",
        "49": "  private static final Predicate<Integer> PRIME_DIGIT = Predicates.in(ImmutableSet.of(2, 3, 5, 7));\n",
        "52": "      ImmutableList.of(\n",
        "53": "          ImmutableList.<Integer>of(),\n",
        "68": "  public abstract static class AbstractFilteredIterableTest<C extends Iterable<Integer>>\n",
        "105": "  public abstract static class AbstractFilteredCollectionTest<C extends Collection<Integer>>\n",
        "110": "        C unfiltered = createUnfiltered(contents);\n",
        "141": "          assertEquals(\n",
        "142": "              contents.contains(toRemove) && EVEN.apply(toRemove),\n",
        "151": "          assertEquals(\n",
        "152": "              EVEN.apply(i) && contents.contains(i),\n",
        "189": "        } catch (IllegalArgumentException expected) {\n",
        "190": "        }\n",
        "195": "        } catch (IllegalArgumentException expected) {\n",
        "196": "        }\n",
        "208": "        C inverseFiltered =\n",
        "209": "            filter(createUnfiltered(contents), Predicates.not(Predicates.and(EVEN, PRIME_DIGIT)));\n",
        "217": "  public abstract static class AbstractFilteredSetTest<C extends Set<Integer>>\n",
        "227": "        new EqualsTester()\n",
        "228": "            .addEqualityGroup(expected, filter(createUnfiltered(contents), EVEN))\n",
        "234": "  public abstract static class AbstractFilteredSortedSetTest<C extends SortedSet<Integer>>\n",
        "268": "          assertEquals(\n",
        "269": "              filter((C) createUnfiltered(contents).headSet(i), EVEN),\n",
        "270": "              filter(createUnfiltered(contents), EVEN).headSet(i));\n",
        "291": "            assertEquals(\n",
        "292": "                filter((C) createUnfiltered(contents).subSet(i, j), EVEN),\n",
        "293": "                filter(createUnfiltered(contents), EVEN).subSet(i, j));\n",
        "300": "  public abstract static class AbstractFilteredNavigableSetTest\n",
        "333": "                NavigableSet<Integer> filterSubset =\n",
        "334": "                    filter(\n",
        "335": "                        createUnfiltered(contents).subSet(i, fromInclusive, j, toInclusive), EVEN);\n",
        "336": "                NavigableSet<Integer> subsetFilter =\n",
        "337": "                    filter(createUnfiltered(contents), EVEN)\n",
        "338": "                        .subSet(i, fromInclusive, j, toInclusive);\n",
        "420": "  public static final class SetsFilterHashSetTest extends AbstractFilteredSetTest<Set<Integer>> {\n",
        "466": "  public void testNoop() {}\n"
    },
    "removed": {
        "41": "  private static final Predicate<Integer> EVEN = new Predicate<Integer>() {\n",
        "42": "    @Override\n",
        "43": "    public boolean apply(Integer input) {\n",
        "44": "      return input % 2 == 0;\n",
        "45": "    }\n",
        "46": "  };\n",
        "48": "  private static final Predicate<Integer> PRIME_DIGIT =\n",
        "49": "      Predicates.in(ImmutableSet.of(2, 3, 5, 7));\n",
        "52": "      ImmutableList.of(ImmutableList.<Integer>of(),\n",
        "67": "  public static abstract class AbstractFilteredIterableTest<C extends Iterable<Integer>>\n",
        "104": "  public static abstract class AbstractFilteredCollectionTest<C extends Collection<Integer>>\n",
        "109": "        C unfiltered  = createUnfiltered(contents);\n",
        "140": "          assertEquals(contents.contains(toRemove) && EVEN.apply(toRemove),\n",
        "149": "          assertEquals(EVEN.apply(i) && contents.contains(i),\n",
        "186": "        } catch (IllegalArgumentException expected) {}\n",
        "191": "        } catch (IllegalArgumentException expected) {}\n",
        "203": "        C inverseFiltered = filter(createUnfiltered(contents),\n",
        "204": "            Predicates.not(Predicates.and(EVEN, PRIME_DIGIT)));\n",
        "212": "  public static abstract class AbstractFilteredSetTest<C extends Set<Integer>>\n",
        "222": "        new EqualsTester().addEqualityGroup(expected, filter(createUnfiltered(contents), EVEN))\n",
        "228": "  public static abstract class AbstractFilteredSortedSetTest<C extends SortedSet<Integer>>\n",
        "262": "            assertEquals(\n",
        "263": "                filter((C) createUnfiltered(contents).headSet(i), EVEN),\n",
        "264": "                filter(createUnfiltered(contents), EVEN).headSet(i));\n",
        "285": "          assertEquals(\n",
        "286": "              filter((C) createUnfiltered(contents).subSet(i, j), EVEN),\n",
        "287": "              filter(createUnfiltered(contents), EVEN).subSet(i, j));\n",
        "294": "  public static abstract class AbstractFilteredNavigableSetTest\n",
        "327": "                NavigableSet<Integer> filterSubset = filter(\n",
        "328": "                    createUnfiltered(contents).subSet(i, fromInclusive, j, toInclusive), EVEN);\n",
        "329": "                NavigableSet<Integer> subsetFilter = filter(createUnfiltered(contents), EVEN)\n",
        "330": "                    .subSet(i, fromInclusive, j, toInclusive);\n",
        "412": "  public static final class SetsFilterHashSetTest\n",
        "413": "      extends AbstractFilteredSetTest<Set<Integer>> {\n",
        "459": "  public void testNoop() {\n",
        "460": "  }\n"
    }
}