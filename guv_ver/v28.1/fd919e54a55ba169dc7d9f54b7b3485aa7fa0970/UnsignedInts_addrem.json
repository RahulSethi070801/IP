{
    "addition": {
        "29": " * <i>unsigned</i> (that is, any negative value {@code x} is treated as the positive value {@code\n",
        "30": " * 2^32 + x}). The methods for which signedness is not an issue are in {@link Ints}, as well as\n",
        "31": " * signed versions of methods for which signedness is an issue.\n",
        "41": " * <p>See the Guava User Guide article on <a\n",
        "42": " * href=\"https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support\">unsigned\n",
        "60": "   * Compares the two specified {@code int} values, treating them as unsigned values between {@code\n",
        "61": "   * 0} and {@code 2^32 - 1} inclusive.\n",
        "99": "   * Returns the {@code int} value that, when treated as unsigned, is nearest in value to {@code\n",
        "100": "   * value}.\n",
        "103": "   * @return {@code 2^32 - 1} if {@code value >= 2^32}, {@code 0} if {@code value <= 0}, and {@code\n",
        "104": "   *     value} cast to {@code int} otherwise\n",
        "158": "   * Returns a string containing the supplied unsigned {@code int} values separated by {@code\n",
        "159": "   * separator}. For example, {@code join(\"-\", 1, 2, 3)} returns the string {@code \"1-2-3\"}.\n",
        "302": "   * <p>Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix:\n",
        "305": "   *   <li>{@code 0x}<i>HexDigits</i>\n",
        "306": "   *   <li>{@code 0X}<i>HexDigits</i>\n",
        "307": "   *   <li>{@code #}<i>HexDigits</i>\n",
        "308": "   *   <li>{@code 0}<i>OctalDigits</i>\n",
        "334": "   * @throws NullPointerException if {@code s} is null (in contrast to {@link\n",
        "335": "   *     Integer#parseInt(String)})\n",
        "348": "   * @param radix the radix to use while parsing {@code s}; must be between {@link\n",
        "349": "   *     Character#MIN_RADIX} and {@link Character#MAX_RADIX}.\n",
        "352": "   * @throws NullPointerException if {@code s} is null (in contrast to {@link\n",
        "353": "   *     Integer#parseInt(String)})\n"
    },
    "removed": {
        "29": " * <i>unsigned</i> (that is, any negative value {@code x} is treated as the positive value\n",
        "30": " * {@code 2^32 + x}). The methods for which signedness is not an issue are in {@link Ints}, as well\n",
        "31": " * as signed versions of methods for which signedness is an issue.\n",
        "41": " * <p>See the Guava User Guide article on\n",
        "42": " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support\">unsigned\n",
        "60": "   * Compares the two specified {@code int} values, treating them as unsigned values between\n",
        "61": "   * {@code 0} and {@code 2^32 - 1} inclusive.\n",
        "99": "   * Returns the {@code int} value that, when treated as unsigned, is nearest in value to\n",
        "100": "   * {@code value}.\n",
        "103": "   * @return {@code 2^32 - 1} if {@code value >= 2^32}, {@code 0} if {@code value <= 0}, and\n",
        "104": "   *     {@code value} cast to {@code int} otherwise\n",
        "158": "   * Returns a string containing the supplied unsigned {@code int} values separated by\n",
        "159": "   * {@code separator}. For example, {@code join(\"-\", 1, 2, 3)} returns the string {@code \"1-2-3\"}.\n",
        "301": "   * Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix:\n",
        "304": "   * <li>{@code 0x}<i>HexDigits</i>\n",
        "305": "   * <li>{@code 0X}<i>HexDigits</i>\n",
        "306": "   * <li>{@code #}<i>HexDigits</i>\n",
        "307": "   * <li>{@code 0}<i>OctalDigits</i>\n",
        "333": "   * @throws NullPointerException if {@code s} is null (in contrast to\n",
        "334": "   *     {@link Integer#parseInt(String)})\n",
        "347": "   * @param radix the radix to use while parsing {@code s}; must be between\n",
        "348": "   *     {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}.\n",
        "351": "   * @throws NullPointerException if {@code s} is null (in contrast to\n",
        "352": "   *     {@link Integer#parseInt(String)})\n"
    }
}