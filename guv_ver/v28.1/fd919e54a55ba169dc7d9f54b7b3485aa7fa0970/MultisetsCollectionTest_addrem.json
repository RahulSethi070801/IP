{
    "addition": {
        "47": "    suite.addTest(\n",
        "48": "        MultisetTestSuiteBuilder.using(unmodifiableMultisetGenerator())\n",
        "49": "            .withFeatures(\n",
        "50": "                CollectionSize.ANY,\n",
        "51": "                CollectionFeature.KNOWN_ORDER,\n",
        "52": "                CollectionFeature.SERIALIZABLE,\n",
        "53": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "54": "            .named(\"Multisets.unmodifiableMultiset[LinkedHashMultiset]\")\n",
        "55": "            .createTestSuite());\n",
        "56": "\n",
        "57": "    suite.addTest(\n",
        "58": "        SortedMultisetTestSuiteBuilder.using(unmodifiableSortedMultisetGenerator())\n",
        "59": "            .withFeatures(\n",
        "60": "                CollectionSize.ANY,\n",
        "61": "                CollectionFeature.KNOWN_ORDER,\n",
        "62": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "63": "            .named(\"Multisets.unmodifiableMultiset[TreeMultiset]\")\n",
        "64": "            .createTestSuite());\n",
        "65": "\n",
        "66": "    suite.addTest(\n",
        "67": "        MultisetTestSuiteBuilder.using(unionGenerator())\n",
        "68": "            .withFeatures(CollectionSize.ANY, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "69": "            .named(\"Multisets.union\")\n",
        "70": "            .createTestSuite());\n",
        "71": "\n",
        "72": "    suite.addTest(\n",
        "73": "        MultisetTestSuiteBuilder.using(intersectionGenerator())\n",
        "74": "            .withFeatures(\n",
        "75": "                CollectionSize.ANY,\n",
        "76": "                CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "77": "                CollectionFeature.KNOWN_ORDER)\n",
        "78": "            .named(\"Multisets.intersection\")\n",
        "79": "            .createTestSuite());\n",
        "80": "\n",
        "81": "    suite.addTest(\n",
        "82": "        MultisetTestSuiteBuilder.using(sumGenerator())\n",
        "83": "            .withFeatures(CollectionSize.ANY, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "84": "            .named(\"Multisets.sum\")\n",
        "85": "            .createTestSuite());\n",
        "86": "\n",
        "87": "    suite.addTest(\n",
        "88": "        MultisetTestSuiteBuilder.using(differenceGenerator())\n",
        "89": "            .withFeatures(\n",
        "90": "                CollectionSize.ANY,\n",
        "91": "                CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "92": "                CollectionFeature.KNOWN_ORDER)\n",
        "93": "            .named(\"Multisets.difference\")\n",
        "94": "            .createTestSuite());\n",
        "95": "\n",
        "96": "    suite.addTest(\n",
        "97": "        MultisetTestSuiteBuilder.using(filteredGenerator())\n",
        "98": "            .withFeatures(\n",
        "99": "                CollectionSize.ANY,\n",
        "100": "                CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "101": "                CollectionFeature.KNOWN_ORDER,\n",
        "102": "                CollectionFeature.SUPPORTS_ADD,\n",
        "103": "                CollectionFeature.SUPPORTS_REMOVE)\n",
        "104": "            .named(\"Multiset.filter[Multiset, Predicate]\")\n",
        "105": "            .createTestSuite());\n",
        "135": "      @Override\n",
        "136": "      protected Multiset<String> create(String[] elements) {\n",
        "137": "        return Multisets.unmodifiableSortedMultiset(TreeMultiset.create(asList(elements)));\n",
        "139": "\n",
        "140": "      @Override\n",
        "141": "      public List<String> order(List<String> insertionOrder) {\n",
        "156": "          if (multiset1.contains(element) || multiset2.contains(element)) {\n",
        "173": "      @Override\n",
        "174": "      protected Multiset<String> create(String[] elements) {\n",
        "203": "      @Override\n",
        "204": "      protected Multiset<String> create(String[] elements) {\n",
        "222": "      @Override\n",
        "223": "      protected Multiset<String> create(String[] elements) {\n"
    },
    "removed": {
        "47": "    suite.addTest(MultisetTestSuiteBuilder.using(\n",
        "48": "        unmodifiableMultisetGenerator())\n",
        "49": "        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "50": "            CollectionFeature.SERIALIZABLE,\n",
        "51": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "52": "        .named(\"Multisets.unmodifiableMultiset[LinkedHashMultiset]\")\n",
        "53": "        .createTestSuite());\n",
        "54": "\n",
        "55": "    suite.addTest(SortedMultisetTestSuiteBuilder.using(unmodifiableSortedMultisetGenerator())\n",
        "56": "        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "57": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "58": "        .named(\"Multisets.unmodifiableMultiset[TreeMultiset]\")\n",
        "59": "        .createTestSuite());\n",
        "60": "\n",
        "61": "    suite.addTest(MultisetTestSuiteBuilder.using(unionGenerator())\n",
        "62": "        .withFeatures(CollectionSize.ANY,\n",
        "63": "            CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "64": "        .named(\"Multisets.union\")\n",
        "65": "        .createTestSuite());\n",
        "66": "\n",
        "67": "    suite.addTest(MultisetTestSuiteBuilder.using(intersectionGenerator())\n",
        "68": "        .withFeatures(CollectionSize.ANY,\n",
        "69": "            CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "70": "            CollectionFeature.KNOWN_ORDER)\n",
        "71": "        .named(\"Multisets.intersection\")\n",
        "72": "        .createTestSuite());\n",
        "73": "\n",
        "74": "    suite.addTest(MultisetTestSuiteBuilder.using(sumGenerator())\n",
        "75": "        .withFeatures(CollectionSize.ANY,\n",
        "76": "            CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "77": "        .named(\"Multisets.sum\")\n",
        "78": "        .createTestSuite());\n",
        "79": "\n",
        "80": "    suite.addTest(MultisetTestSuiteBuilder.using(differenceGenerator())\n",
        "81": "        .withFeatures(CollectionSize.ANY,\n",
        "82": "            CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "83": "            CollectionFeature.KNOWN_ORDER)\n",
        "84": "        .named(\"Multisets.difference\")\n",
        "85": "        .createTestSuite());\n",
        "86": "\n",
        "87": "    suite.addTest(MultisetTestSuiteBuilder.using(filteredGenerator())\n",
        "88": "        .withFeatures(CollectionSize.ANY,\n",
        "89": "            CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "90": "            CollectionFeature.KNOWN_ORDER,\n",
        "91": "            CollectionFeature.SUPPORTS_ADD,\n",
        "92": "            CollectionFeature.SUPPORTS_REMOVE)\n",
        "93": "        .named(\"Multiset.filter[Multiset, Predicate]\")\n",
        "94": "        .createTestSuite());\n",
        "124": "      @Override protected Multiset<String> create(String[] elements) {\n",
        "125": "        return Multisets.unmodifiableSortedMultiset(\n",
        "126": "            TreeMultiset.create(asList(elements)));\n",
        "128": "      @Override public List<String> order(List<String> insertionOrder) {\n",
        "143": "          if (multiset1.contains(element) ||\n",
        "144": "              multiset2.contains(element)) {\n",
        "161": "      @Override protected Multiset<String> create(String[] elements) {\n",
        "190": "      @Override protected Multiset<String> create(String[] elements) {\n",
        "208": "      @Override protected Multiset<String> create(String[] elements) {\n"
    }
}