{
    "addition": {
        "27": " * A map entry which forwards all its method calls to another map entry. Subclasses should override\n",
        "28": " * one or more methods to modify the behavior of the backing map entry as desired per the <a\n",
        "31": " * <p><b>Warning:</b> The methods of {@code ForwardingMapEntry} forward <i>indiscriminately</i> to\n",
        "32": " * the methods of the delegate. For example, overriding {@link #getValue} alone <i>will not</i>\n",
        "33": " * change the behavior of {@link #equals}, which can lead to unexpected behavior. In this case, you\n",
        "34": " * should override {@code equals} as well, either providing your own implementation, or delegating\n",
        "35": " * to the provided {@code standardEquals} method.\n",
        "37": " * <p>Each of the {@code standard} methods, where appropriate, use {@link Objects#equal} to test\n",
        "38": " * equality for both keys and values. This may not be the desired behavior for map implementations\n",
        "39": " * that use non-standard notions of key equality, such as the entry of a {@code SortedMap} whose\n",
        "40": " * comparator is not consistent with {@code equals}.\n",
        "42": " * <p>The {@code standard} methods are not guaranteed to be thread-safe, even when all of the\n",
        "43": " * methods that they depend on are thread-safe.\n",
        "85": "   * A sensible definition of {@link #equals(Object)} in terms of {@link #getKey()} and {@link\n",
        "86": "   * #getValue()}. If you override either of these methods, you may wish to override {@link\n",
        "87": "   * #equals(Object)} to forward to this implementation.\n",
        "101": "   * A sensible definition of {@link #hashCode()} in terms of {@link #getKey()} and {@link\n",
        "102": "   * #getValue()}. If you override either of these methods, you may wish to override {@link\n",
        "103": "   * #hashCode()} to forward to this implementation.\n",
        "114": "   * A sensible definition of {@link #toString} in terms of {@link #getKey} and {@link #getValue}.\n",
        "115": "   * If you override either of these methods, you may wish to override {@link #equals} to forward to\n",
        "116": "   * this implementation.\n"
    },
    "removed": {
        "27": " * A map entry which forwards all its method calls to another map entry.\n",
        "28": " * Subclasses should override one or more methods to modify the behavior of the\n",
        "29": " * backing map entry as desired per the <a\n",
        "32": " * <p><b>Warning:</b> The methods of {@code ForwardingMapEntry} forward\n",
        "33": " * <i>indiscriminately</i> to the methods of the delegate. For example,\n",
        "34": " * overriding {@link #getValue} alone <i>will not</i> change the behavior of\n",
        "35": " * {@link #equals}, which can lead to unexpected behavior. In this case, you\n",
        "36": " * should override {@code equals} as well, either providing your own\n",
        "37": " * implementation, or delegating to the provided {@code standardEquals} method.\n",
        "39": " * <p>Each of the {@code standard} methods, where appropriate, use {@link\n",
        "40": " * Objects#equal} to test equality for both keys and values. This may not be\n",
        "41": " * the desired behavior for map implementations that use non-standard notions of\n",
        "42": " * key equality, such as the entry of a {@code SortedMap} whose comparator is\n",
        "43": " * not consistent with {@code equals}.\n",
        "45": " * <p>The {@code standard} methods are not guaranteed to be thread-safe, even\n",
        "46": " * when all of the methods that they depend on are thread-safe.\n",
        "88": "   * A sensible definition of {@link #equals(Object)} in terms of {@link\n",
        "89": "   * #getKey()} and {@link #getValue()}. If you override either of these\n",
        "90": "   * methods, you may wish to override {@link #equals(Object)} to forward to\n",
        "91": "   * this implementation.\n",
        "105": "   * A sensible definition of {@link #hashCode()} in terms of {@link #getKey()}\n",
        "106": "   * and {@link #getValue()}. If you override either of these methods, you may\n",
        "107": "   * wish to override {@link #hashCode()} to forward to this implementation.\n",
        "118": "   * A sensible definition of {@link #toString} in terms of {@link\n",
        "119": "   * #getKey} and {@link #getValue}. If you override either of these\n",
        "120": "   * methods, you may wish to override {@link #equals} to forward to this\n",
        "121": "   * implementation.\n"
    }
}