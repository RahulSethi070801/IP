{
    "addition": {
        "27": " * <p>For example, an XML escaper would convert the literal string {@code \"Foo<Bar>\"} into {@code\n",
        "28": " * \"Foo&lt;Bar&gt;\"} to prevent {@code \"<Bar>\"} from being confused with an XML tag. When the\n",
        "29": " * resulting XML document is parsed, the parser API will return this text as the original literal\n",
        "30": " * string {@code \"Foo<Bar>\"}.\n",
        "33": " * difference. A CharEscaper can only process Java <a\n",
        "34": " * href=\"http://en.wikipedia.org/wiki/UTF-16\">UTF16</a> characters in isolation and may not cope\n",
        "45": " * <p>Popular escapers are defined as constants in classes like {@link\n",
        "46": " * com.google.common.html.HtmlEscapers} and {@link com.google.common.xml.XmlEscapers}. To create\n",
        "47": " * your own escapers extend this class and implement the {@link #escape(int)} method.\n",
        "121": "   * method will throw {@link IllegalArgumentException}. You should ensure your input is valid <a\n",
        "122": "   * href=\"http://en.wikipedia.org/wiki/UTF-16\">UTF-16</a> before calling this method.\n",
        "148": "   * <p>This method is not reentrant and may only be invoked by the top level {@link\n",
        "149": "   * #escape(String)} method.\n",
        "221": "   *\n",
        "223": "   *   <li>If {@code index >= end}, {@link IndexOutOfBoundsException} is thrown.\n",
        "224": "   *   <li><b>If the character at the specified index is not a surrogate, it is returned.</b>\n",
        "225": "   *   <li>If the first character was a high surrogate value, then an attempt is made to read the\n",
        "226": "   *       next character.\n",
        "227": "   *       <ol>\n",
        "228": "   *         <li><b>If the end of the sequence was reached, the negated value of the trailing high\n",
        "229": "   *             surrogate is returned.</b>\n",
        "230": "   *         <li><b>If the next character was a valid low surrogate, the code point value of the\n",
        "231": "   *             high/low surrogate pair is returned.</b>\n",
        "232": "   *         <li>If the next character was not a low surrogate value, then {@link\n",
        "233": "   *             IllegalArgumentException} is thrown.\n",
        "234": "   *       </ol>\n",
        "235": "   *   <li>If the first character was a low surrogate value, {@link IllegalArgumentException} is\n",
        "236": "   *       thrown.\n"
    },
    "removed": {
        "27": " * <p>For example, an XML escaper would convert the literal string {@code\n",
        "28": " * \"Foo<Bar>\"} into {@code \"Foo&lt;Bar&gt;\"} to prevent {@code \"<Bar>\"} from being confused with an\n",
        "29": " * XML tag. When the resulting XML document is parsed, the parser API will return this text as the\n",
        "30": " * original literal string {@code\n",
        "31": " * \"Foo<Bar>\"}.\n",
        "34": " * difference. A CharEscaper can only process Java\n",
        "35": " * <a href=\"http://en.wikipedia.org/wiki/UTF-16\">UTF16</a> characters in isolation and may not cope\n",
        "46": " * <p>Popular escapers are defined as constants in classes like\n",
        "47": " * {@link com.google.common.html.HtmlEscapers} and {@link com.google.common.xml.XmlEscapers}. To\n",
        "48": " * create your own escapers extend this class and implement the {@link #escape(int)} method.\n",
        "122": "   * method will throw {@link IllegalArgumentException}. You should ensure your input is valid\n",
        "123": "   * <a href=\"http://en.wikipedia.org/wiki/UTF-16\">UTF-16</a> before calling this method.\n",
        "149": "   * <p>This method is not reentrant and may only be invoked by the top level\n",
        "150": "   * {@link #escape(String)} method.\n",
        "223": "   * <li>If {@code index >= end}, {@link IndexOutOfBoundsException} is thrown.\n",
        "224": "   * <li><b>If the character at the specified index is not a surrogate, it is returned.</b>\n",
        "225": "   * <li>If the first character was a high surrogate value, then an attempt is made to read the next\n",
        "226": "   *     character.\n",
        "227": "   *     <ol>\n",
        "228": "   *     <li><b>If the end of the sequence was reached, the negated value of the trailing high\n",
        "229": "   *         surrogate is returned.</b>\n",
        "230": "   *     <li><b>If the next character was a valid low surrogate, the code point value of the\n",
        "231": "   *         high/low surrogate pair is returned.</b>\n",
        "232": "   *     <li>If the next character was not a low surrogate value, then {@link\n",
        "233": "   *         IllegalArgumentException} is thrown.\n",
        "234": "   *     </ol>\n",
        "235": "   * <li>If the first character was a low surrogate value, {@link IllegalArgumentException} is\n",
        "236": "   *     thrown.\n"
    }
}