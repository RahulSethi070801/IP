{
    "addition": {
        "37": "    Cache<Object, Object> cache =\n",
        "38": "        new AbstractCache<Object, Object>() {\n",
        "39": "          @Override\n",
        "40": "          public Object getIfPresent(Object key) {\n",
        "41": "            return valueRef.get();\n",
        "42": "          }\n",
        "43": "        };\n",
        "53": "    Cache<Object, Object> cache =\n",
        "54": "        new AbstractCache<Object, Object>() {\n",
        "55": "          @Override\n",
        "56": "          public Object getIfPresent(Object key) {\n",
        "57": "            return null;\n",
        "58": "          }\n",
        "59": "        };\n",
        "60": "\n",
        "61": "    assertEquals(ImmutableMap.of(), cache.getAllPresent(ImmutableList.of(new Object())));\n",
        "67": "    Cache<Object, Object> cache =\n",
        "68": "        new AbstractCache<Object, Object>() {\n",
        "69": "          @Override\n",
        "70": "          public Object getIfPresent(Object key) {\n",
        "71": "            return cachedKey.equals(key) ? cachedValue : null;\n",
        "72": "          }\n",
        "73": "        };\n",
        "82": "    Cache<Integer, Integer> cache =\n",
        "83": "        new AbstractCache<Integer, Integer>() {\n",
        "84": "          @Override\n",
        "85": "          public Integer getIfPresent(Object key) {\n",
        "86": "            throw new UnsupportedOperationException();\n",
        "87": "          }\n",
        "88": "\n",
        "89": "          @Override\n",
        "90": "          public void invalidate(Object key) {\n",
        "91": "            invalidated.add(key);\n",
        "92": "          }\n",
        "93": "        };\n",
        "191": "    assertEquals(new CacheStats(38, 60, 44, 54, totalLoadTime, 66), counter1.snapshot());\n"
    },
    "removed": {
        "37": "    Cache<Object, Object> cache = new AbstractCache<Object, Object>() {\n",
        "38": "      @Override\n",
        "39": "      public Object getIfPresent(Object key) {\n",
        "40": "        return valueRef.get();\n",
        "41": "      }\n",
        "42": "    };\n",
        "52": "    Cache<Object, Object> cache = new AbstractCache<Object, Object>() {\n",
        "53": "      @Override\n",
        "54": "      public Object getIfPresent(Object key) {\n",
        "55": "        return null;\n",
        "56": "      }\n",
        "57": "    };\n",
        "58": "\n",
        "59": "    assertEquals(\n",
        "60": "        ImmutableMap.of(),\n",
        "61": "        cache.getAllPresent(ImmutableList.of(new Object())));\n",
        "67": "    Cache<Object, Object> cache = new AbstractCache<Object, Object>() {\n",
        "68": "      @Override\n",
        "69": "      public Object getIfPresent(Object key) {\n",
        "70": "        return cachedKey.equals(key) ? cachedValue : null;\n",
        "71": "      }\n",
        "72": "    };\n",
        "81": "    Cache<Integer, Integer> cache = new AbstractCache<Integer, Integer>() {\n",
        "82": "      @Override\n",
        "83": "      public Integer getIfPresent(Object key) {\n",
        "84": "        throw new UnsupportedOperationException();\n",
        "85": "      }\n",
        "86": "\n",
        "87": "      @Override\n",
        "88": "      public void invalidate(Object key) {\n",
        "89": "        invalidated.add(key);\n",
        "90": "      }\n",
        "91": "    };\n",
        "189": "    assertEquals(new CacheStats(38, 60, 44, 54, totalLoadTime, 66),\n",
        "190": "        counter1.snapshot());\n",
        "192": "\n"
    }
}