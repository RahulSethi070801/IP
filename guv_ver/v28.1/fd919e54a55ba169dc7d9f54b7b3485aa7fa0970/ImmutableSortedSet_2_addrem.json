{
    "addition": {
        "49": "  @Deprecated\n",
        "50": "  public static <E> ImmutableSortedSet.Builder<E> builder() {\n",
        "62": "  static <E> ImmutableSortedSet<E> emptySet(Comparator<? super E> comparator) {\n",
        "82": "  public static <E extends Comparable<? super E>> ImmutableSortedSet<E> of(E element) {\n",
        "87": "  public static <E extends Comparable<? super E>> ImmutableSortedSet<E> of(E e1, E e2) {\n",
        "92": "  public static <E extends Comparable<? super E>> ImmutableSortedSet<E> of(E e1, E e2, E e3) {\n",
        "97": "  public static <E extends Comparable<? super E>> ImmutableSortedSet<E> of(E e1, E e2, E e3, E e4) {\n",
        "146": "  public static <E extends Comparable<? super E>> ImmutableSortedSet<E> copyOf(E[] elements) {\n",
        "178": "      Comparator<? super E> comparator, Iterable<? extends E> elements, boolean fromSortedSet) {\n",
        "181": "    boolean hasSameComparator = fromSortedSet || hasSameComparator(elements, comparator);\n",
        "185": "      boolean isSubset =\n",
        "186": "          (result instanceof RegularImmutableSortedSet)\n",
        "187": "              && ((RegularImmutableSortedSet) result).isSubset;\n",
        "212": "  private static boolean hasSameComparator(Iterable<?> elements, Comparator<?> comparator) {\n",
        "231": "  private final transient SortedSet<E> sortedDelegate;\n",
        "234": "   * Scary constructor for ContiguousSet. This constructor (in this file, the GWT emulation of\n",
        "235": "   * ImmutableSortedSet) creates an empty sortedDelegate, which, in a vacuum, sets this object's\n",
        "236": "   * contents to empty. By contrast, the non-GWT constructor with the same signature uses the\n",
        "237": "   * comparator only as a comparator. It does NOT assume empty contents. (It requires an\n",
        "238": "   * implementation of iterator() to define its contents, and methods like contains() are\n",
        "239": "   * implemented in terms of that method (though they will likely be overridden by subclasses for\n",
        "240": "   * performance reasons).) This means that a call to this method have can different behavior in GWT\n",
        "241": "   * and non-GWT environments UNLESS subclasses are careful to always override all methods\n",
        "272": "  @Override\n",
        "273": "  public boolean contains(@Nullable Object object) {\n",
        "283": "  @Override\n",
        "284": "  public boolean containsAll(Collection<?> targets) {\n",
        "344": "  ImmutableSortedSet<E> subSet(\n",
        "345": "      E fromElement, boolean fromInclusive, E toElement, boolean toInclusive) {\n",
        "396": "    @Override\n",
        "397": "    public Builder<E> add(E element) {\n",
        "402": "    @Override\n",
        "403": "    public Builder<E> add(E... elements) {\n",
        "408": "    @Override\n",
        "409": "    public Builder<E> addAll(Iterable<? extends E> elements) {\n",
        "414": "    @Override\n",
        "415": "    public Builder<E> addAll(Iterator<? extends E> elements) {\n",
        "425": "    @Override\n",
        "426": "    public ImmutableSortedSet<E> build() {\n"
    },
    "removed": {
        "49": "  @Deprecated public static <E> ImmutableSortedSet.Builder<E> builder() {\n",
        "61": "  static <E> ImmutableSortedSet<E> emptySet(\n",
        "62": "      Comparator<? super E> comparator) {\n",
        "82": "  public static <E extends Comparable<? super E>> ImmutableSortedSet<E> of(\n",
        "83": "      E element) {\n",
        "88": "  public static <E extends Comparable<? super E>> ImmutableSortedSet<E> of(\n",
        "89": "      E e1, E e2) {\n",
        "94": "  public static <E extends Comparable<? super E>> ImmutableSortedSet<E> of(\n",
        "95": "      E e1, E e2, E e3) {\n",
        "100": "  public static <E extends Comparable<? super E>> ImmutableSortedSet<E> of(\n",
        "101": "      E e1, E e2, E e3, E e4) {\n",
        "150": "  public static <E extends Comparable<? super E>> ImmutableSortedSet<E> copyOf(\n",
        "151": "      E[] elements) {\n",
        "183": "      Comparator<? super E> comparator, Iterable<? extends E> elements,\n",
        "184": "      boolean fromSortedSet) {\n",
        "187": "    boolean hasSameComparator\n",
        "188": "        = fromSortedSet || hasSameComparator(elements, comparator);\n",
        "192": "      boolean isSubset = (result instanceof RegularImmutableSortedSet)\n",
        "193": "          && ((RegularImmutableSortedSet) result).isSubset;\n",
        "218": "  private static boolean hasSameComparator(\n",
        "219": "      Iterable<?> elements, Comparator<?> comparator) {\n",
        "238": "  private transient final SortedSet<E> sortedDelegate;\n",
        "241": "   * Scary constructor for ContiguousSet. This constructor (in this file, the\n",
        "242": "   * GWT emulation of ImmutableSortedSet) creates an empty sortedDelegate,\n",
        "243": "   * which, in a vacuum, sets this object's contents to empty.  By contrast,\n",
        "244": "   * the non-GWT constructor with the same signature uses the comparator only\n",
        "245": "   * as a comparator. It does NOT assume empty contents. (It requires an\n",
        "246": "   * implementation of iterator() to define its contents, and methods like\n",
        "247": "   * contains() are implemented in terms of that method (though they will\n",
        "248": "   * likely be overridden by subclasses for performance reasons).) This means\n",
        "249": "   * that a call to this method have can different behavior in GWT and non-GWT\n",
        "250": "   * environments UNLESS subclasses are careful to always override all methods\n",
        "281": "  @Override public boolean contains(@Nullable Object object) {\n",
        "291": "  @Override public boolean containsAll(Collection<?> targets) {\n",
        "351": "  ImmutableSortedSet<E> subSet(E fromElement, boolean fromInclusive, E toElement,\n",
        "352": "      boolean toInclusive) {\n",
        "403": "    @Override public Builder<E> add(E element) {\n",
        "408": "    @Override public Builder<E> add(E... elements) {\n",
        "413": "    @Override public Builder<E> addAll(Iterable<? extends E> elements) {\n",
        "418": "    @Override public Builder<E> addAll(Iterator<? extends E> elements) {\n",
        "428": "    @Override public ImmutableSortedSet<E> build() {\n"
    }
}