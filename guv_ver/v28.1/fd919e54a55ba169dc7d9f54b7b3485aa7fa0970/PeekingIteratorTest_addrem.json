{
    "addition": {
        "35": " * Unit test for {@link PeekingIterator}.\n",
        "36": " *\n",
        "37": " * @author Mick Killianey\n",
        "38": " */\n",
        "44": "   * Version of {@link IteratorTester} that compares an iterator over a given collection of elements\n",
        "45": "   * (used as the reference iterator) against a {@code PeekingIterator} that *wraps* such an\n",
        "46": "   * iterator (used as the target iterator).\n",
        "48": "   * <p>This IteratorTester makes copies of the master so that it can later verify that {@link\n",
        "49": "   * PeekingIterator#remove()} removes the same elements as the reference's iterator {@code\n",
        "50": "   * #remove()}.\n",
        "57": "      super(master.size() + 3, MODIFIABLE, master, IteratorTester.KnownOrder.KNOWN_ORDER);\n",
        "60": "\n",
        "61": "    @Override\n",
        "62": "    protected Iterator<T> newTargetIterator() {\n",
        "68": "\n",
        "69": "    @Override\n",
        "70": "    protected void verify(List<T> elements) {\n",
        "81": "    new IteratorTester<T>(\n",
        "82": "        list.size() * 2 + 2, UNMODIFIABLE, list, IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "83": "      @Override\n",
        "84": "      protected Iterator<T> newTargetIterator() {\n",
        "118": "    } catch (NoSuchElementException e) {\n",
        "119": "      /* expected */\n",
        "120": "    }\n",
        "126": "    PeekingIterator<?> peekingIterator = Iterators.peekingIterator(iterator);\n",
        "127": "\n",
        "128": "    assertEquals(\"Should be able to peek() at first element\", \"A\", peekingIterator.peek());\n",
        "129": "    assertEquals(\n",
        "130": "        \"Should be able to peek() first element multiple times\", \"A\", peekingIterator.peek());\n",
        "131": "    assertEquals(\n",
        "132": "        \"next() should still return first element after peeking\", \"A\", peekingIterator.next());\n",
        "133": "\n",
        "134": "    assertEquals(\"Should be able to peek() at middle element\", \"B\", peekingIterator.peek());\n",
        "135": "    assertEquals(\n",
        "136": "        \"Should be able to peek() middle element multiple times\", \"B\", peekingIterator.peek());\n",
        "137": "    assertEquals(\n",
        "138": "        \"next() should still return middle element after peeking\", \"B\", peekingIterator.next());\n",
        "139": "\n",
        "140": "    assertEquals(\"Should be able to peek() at last element\", \"C\", peekingIterator.peek());\n",
        "141": "    assertEquals(\n",
        "142": "        \"Should be able to peek() last element multiple times\", \"C\", peekingIterator.peek());\n",
        "143": "    assertEquals(\n",
        "144": "        \"next() should still return last element after peeking\", \"C\", peekingIterator.next());\n",
        "149": "    } catch (NoSuchElementException e) {\n",
        "150": "      /* expected */\n",
        "151": "    }\n",
        "155": "    } catch (NoSuchElementException e) {\n",
        "156": "      /* expected */\n",
        "157": "    }\n",
        "161": "    } catch (NoSuchElementException e) {\n",
        "162": "      /* expected */\n",
        "163": "    }\n",
        "178": "    } catch (IllegalStateException e) {\n",
        "179": "      /* expected */\n",
        "180": "    }\n",
        "182": "    assertEquals(\n",
        "183": "        \"After remove() throws exception, peek should still be ok\", \"B\", peekingIterator.peek());\n",
        "192": "  static class ThrowsAtEndException extends RuntimeException {\n",
        "193": "    /* nothing */\n",
        "194": "  }\n",
        "197": "   * This Iterator claims to have more elements than the underlying iterable, but when you try to\n",
        "198": "   * fetch the extra elements, it throws an unchecked exception.\n",
        "199": "   */\n",
        "202": "\n",
        "206": "\n",
        "209": "      return true; // pretend that you have more...\n",
        "211": "\n",
        "239": "    Iterator<Integer> iterator = peekingIterator(new ThrowsAtEndIterator<Integer>(list));\n"
    },
    "removed": {
        "35": "  * Unit test for {@link PeekingIterator}.\n",
        "36": "  *\n",
        "37": "  * @author Mick Killianey\n",
        "38": "  */\n",
        "44": "   * Version of {@link IteratorTester} that compares an iterator over\n",
        "45": "   * a given collection of elements (used as the reference iterator)\n",
        "46": "   * against a {@code PeekingIterator} that *wraps* such an iterator\n",
        "47": "   * (used as the target iterator).\n",
        "49": "   * <p>This IteratorTester makes copies of the master so that it can\n",
        "50": "   * later verify that {@link PeekingIterator#remove()} removes the\n",
        "51": "   * same elements as the reference's iterator {@code #remove()}.\n",
        "58": "      super(master.size() + 3, MODIFIABLE, master,\n",
        "59": "          IteratorTester.KnownOrder.KNOWN_ORDER);\n",
        "62": "    @Override protected Iterator<T> newTargetIterator() {\n",
        "68": "    @Override protected void verify(List<T> elements) {\n",
        "79": "    new IteratorTester<T>(list.size() * 2 + 2, UNMODIFIABLE, list,\n",
        "80": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "81": "      @Override protected Iterator<T> newTargetIterator() {\n",
        "115": "    } catch (NoSuchElementException e) { /* expected */ }\n",
        "121": "    PeekingIterator<?> peekingIterator =\n",
        "122": "        Iterators.peekingIterator(iterator);\n",
        "123": "\n",
        "124": "    assertEquals(\"Should be able to peek() at first element\",\n",
        "125": "        \"A\", peekingIterator.peek());\n",
        "126": "    assertEquals(\"Should be able to peek() first element multiple times\",\n",
        "127": "        \"A\", peekingIterator.peek());\n",
        "128": "    assertEquals(\"next() should still return first element after peeking\",\n",
        "129": "        \"A\", peekingIterator.next());\n",
        "130": "\n",
        "131": "    assertEquals(\"Should be able to peek() at middle element\",\n",
        "132": "        \"B\", peekingIterator.peek());\n",
        "133": "    assertEquals(\"Should be able to peek() middle element multiple times\",\n",
        "134": "        \"B\", peekingIterator.peek());\n",
        "135": "    assertEquals(\"next() should still return middle element after peeking\",\n",
        "136": "        \"B\", peekingIterator.next());\n",
        "137": "\n",
        "138": "    assertEquals(\"Should be able to peek() at last element\",\n",
        "139": "        \"C\", peekingIterator.peek());\n",
        "140": "    assertEquals(\"Should be able to peek() last element multiple times\",\n",
        "141": "        \"C\", peekingIterator.peek());\n",
        "142": "    assertEquals(\"next() should still return last element after peeking\",\n",
        "143": "        \"C\", peekingIterator.next());\n",
        "148": "    } catch (NoSuchElementException e) { /* expected */ }\n",
        "152": "    } catch (NoSuchElementException e) { /* expected */ }\n",
        "156": "    } catch (NoSuchElementException e) { /* expected */ }\n",
        "171": "    } catch (IllegalStateException e) { /* expected */ }\n",
        "173": "    assertEquals(\"After remove() throws exception, peek should still be ok\",\n",
        "174": "        \"B\", peekingIterator.peek());\n",
        "183": "  static class ThrowsAtEndException extends RuntimeException { /* nothing */ }\n",
        "186": "    * This Iterator claims to have more elements than the underlying\n",
        "187": "    * iterable, but when you try to fetch the extra elements, it throws\n",
        "188": "    * an unchecked exception.\n",
        "189": "    */\n",
        "197": "      return true;  // pretend that you have more...\n",
        "225": "    Iterator<Integer> iterator =\n",
        "226": "        peekingIterator(new ThrowsAtEndIterator<Integer>(list));\n"
    }
}