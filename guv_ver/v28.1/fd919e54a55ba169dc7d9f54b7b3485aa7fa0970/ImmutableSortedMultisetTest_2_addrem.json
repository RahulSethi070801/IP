{
    "addition": {
        "59": "    suite.addTest(\n",
        "60": "        SortedMultisetTestSuiteBuilder.using(\n",
        "61": "                new TestStringMultisetGenerator() {\n",
        "62": "                  @Override\n",
        "63": "                  protected Multiset<String> create(String[] elements) {\n",
        "64": "                    return ImmutableSortedMultiset.copyOf(elements);\n",
        "65": "                  }\n",
        "66": "\n",
        "67": "                  @Override\n",
        "68": "                  public List<String> order(List<String> insertionOrder) {\n",
        "69": "                    return Ordering.natural().sortedCopy(insertionOrder);\n",
        "70": "                  }\n",
        "71": "                })\n",
        "72": "            .named(\"ImmutableSortedMultiset\")\n",
        "73": "            .withFeatures(\n",
        "74": "                CollectionSize.ANY,\n",
        "75": "                CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "76": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "77": "            .createTestSuite());\n",
        "78": "\n",
        "79": "    suite.addTest(\n",
        "80": "        ListTestSuiteBuilder.using(\n",
        "81": "                new TestStringListGenerator() {\n",
        "82": "                  @Override\n",
        "83": "                  protected List<String> create(String[] elements) {\n",
        "84": "                    return ImmutableSortedMultiset.copyOf(elements).asList();\n",
        "85": "                  }\n",
        "86": "\n",
        "87": "                  @Override\n",
        "88": "                  public List<String> order(List<String> insertionOrder) {\n",
        "89": "                    return Ordering.natural().sortedCopy(insertionOrder);\n",
        "90": "                  }\n",
        "91": "                })\n",
        "92": "            .named(\"ImmutableSortedMultiset.asList\")\n",
        "93": "            .withFeatures(\n",
        "94": "                CollectionSize.ANY,\n",
        "95": "                CollectionFeature.SERIALIZABLE,\n",
        "96": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "97": "            .createTestSuite());\n",
        "98": "\n",
        "99": "    suite.addTest(\n",
        "100": "        ListTestSuiteBuilder.using(\n",
        "101": "                new TestStringListGenerator() {\n",
        "102": "                  @Override\n",
        "103": "                  protected List<String> create(String[] elements) {\n",
        "104": "                    Set<String> set = Sets.newHashSet();\n",
        "105": "                    ImmutableSortedMultiset.Builder<String> builder =\n",
        "106": "                        ImmutableSortedMultiset.naturalOrder();\n",
        "107": "                    for (String s : elements) {\n",
        "108": "                      checkArgument(set.add(s));\n",
        "109": "                      builder.addCopies(s, 2);\n",
        "110": "                    }\n",
        "111": "                    return builder.build().elementSet().asList();\n",
        "112": "                  }\n",
        "113": "\n",
        "114": "                  @Override\n",
        "115": "                  public List<String> order(List<String> insertionOrder) {\n",
        "116": "                    return Ordering.natural().sortedCopy(insertionOrder);\n",
        "117": "                  }\n",
        "118": "                })\n",
        "119": "            .named(\"ImmutableSortedMultiset.elementSet.asList\")\n",
        "120": "            .withFeatures(\n",
        "121": "                CollectionSize.ANY,\n",
        "122": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "123": "                CollectionFeature.SERIALIZABLE,\n",
        "124": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "125": "            .createTestSuite());\n",
        "184": "        Ordering.natural()\n",
        "185": "            .lexicographical()\n",
        "186": "            .onResultOf(\n",
        "187": "                new Function<String[], Iterable<Comparable>>() {\n",
        "188": "                  @Override\n",
        "189": "                  public Iterable<Comparable> apply(String[] input) {\n",
        "190": "                    return Arrays.<Comparable>asList(input);\n",
        "191": "                  }\n",
        "192": "                });\n",
        "205": "    } catch (NullPointerException expected) {\n",
        "206": "    }\n",
        "233": "    } catch (NullPointerException expected) {\n",
        "234": "    }\n",
        "260": "    } catch (NullPointerException expected) {\n",
        "261": "    }\n",
        "287": "    } catch (NullPointerException expected) {\n",
        "288": "    }\n",
        "367": "        ImmutableSortedMultiset.<String>naturalOrder()\n",
        "368": "            .addCopies(\"a\", 2)\n",
        "369": "            .addCopies(\"b\", 3)\n",
        "370": "            .addCopies(\"c\", 0)\n",
        "371": "            .build();\n",
        "377": "        ImmutableSortedMultiset.<String>naturalOrder()\n",
        "378": "            .add(\"a\")\n",
        "379": "            .setCount(\"a\", 2)\n",
        "380": "            .setCount(\"b\", 3)\n",
        "390": "    } catch (NullPointerException expected) {\n",
        "391": "    }\n",
        "399": "    } catch (NullPointerException expected) {\n",
        "400": "    }\n",
        "407": "    } catch (NullPointerException expected) {\n",
        "408": "    }\n",
        "415": "    } catch (NullPointerException expected) {\n",
        "416": "    }\n",
        "424": "    } catch (NullPointerException expected) {\n",
        "425": "    }\n",
        "433": "    } catch (IllegalArgumentException expected) {\n",
        "434": "    }\n",
        "443": "    } catch (NullPointerException expected) {\n",
        "444": "    }\n",
        "452": "    } catch (IllegalArgumentException expected) {\n",
        "453": "    }\n",
        "458": "        (ms1, ms2) ->\n",
        "459": "            ms1.equals(ms2)\n",
        "629": "    @Override\n",
        "630": "    public String toString() {\n"
    },
    "removed": {
        "59": "    suite.addTest(SortedMultisetTestSuiteBuilder.using(new TestStringMultisetGenerator() {\n",
        "60": "        @Override\n",
        "61": "        protected Multiset<String> create(String[] elements) {\n",
        "62": "          return ImmutableSortedMultiset.copyOf(elements);\n",
        "63": "        }\n",
        "64": "\n",
        "65": "        @Override\n",
        "66": "        public List<String> order(List<String> insertionOrder) {\n",
        "67": "          return Ordering.natural().sortedCopy(insertionOrder);\n",
        "68": "        }\n",
        "69": "      })\n",
        "70": "      .named(\"ImmutableSortedMultiset\")\n",
        "71": "      .withFeatures(CollectionSize.ANY,\n",
        "72": "          CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "73": "          CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "74": "        .createTestSuite());\n",
        "75": "\n",
        "76": "    suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator() {\n",
        "77": "        @Override\n",
        "78": "        protected List<String> create(String[] elements) {\n",
        "79": "          return ImmutableSortedMultiset.copyOf(elements).asList();\n",
        "80": "        }\n",
        "81": "\n",
        "82": "        @Override\n",
        "83": "        public List<String> order(List<String> insertionOrder) {\n",
        "84": "          return Ordering.natural().sortedCopy(insertionOrder);\n",
        "85": "        }\n",
        "86": "      })\n",
        "87": "      .named(\"ImmutableSortedMultiset.asList\")\n",
        "88": "      .withFeatures(CollectionSize.ANY,\n",
        "89": "          CollectionFeature.SERIALIZABLE,\n",
        "90": "          CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "91": "        .createTestSuite());\n",
        "92": "\n",
        "93": "    suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator() {\n",
        "94": "        @Override\n",
        "95": "        protected List<String> create(String[] elements) {\n",
        "96": "          Set<String> set = Sets.newHashSet();\n",
        "97": "          ImmutableSortedMultiset.Builder<String> builder = ImmutableSortedMultiset.naturalOrder();\n",
        "98": "          for (String s : elements) {\n",
        "99": "            checkArgument(set.add(s));\n",
        "100": "            builder.addCopies(s, 2);\n",
        "101": "          }\n",
        "102": "          return builder.build().elementSet().asList();\n",
        "103": "        }\n",
        "104": "\n",
        "105": "        @Override\n",
        "106": "        public List<String> order(List<String> insertionOrder) {\n",
        "107": "          return Ordering.natural().sortedCopy(insertionOrder);\n",
        "108": "        }\n",
        "109": "      })\n",
        "110": "      .named(\"ImmutableSortedMultiset.elementSet.asList\")\n",
        "111": "      .withFeatures(CollectionSize.ANY,\n",
        "112": "          CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "113": "          CollectionFeature.SERIALIZABLE,\n",
        "114": "          CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "115": "        .createTestSuite());\n",
        "174": "        Ordering.natural().lexicographical()\n",
        "175": "            .onResultOf(new Function<String[], Iterable<Comparable>>() {\n",
        "176": "              @Override\n",
        "177": "              public Iterable<Comparable> apply(String[] input) {\n",
        "178": "                return Arrays.<Comparable>asList(input);\n",
        "179": "              }\n",
        "180": "            });\n",
        "193": "    } catch (NullPointerException expected) {}\n",
        "220": "    } catch (NullPointerException expected) {}\n",
        "246": "    } catch (NullPointerException expected) {}\n",
        "272": "    } catch (NullPointerException expected) {}\n",
        "351": "        ImmutableSortedMultiset.<String>naturalOrder().addCopies(\"a\", 2).addCopies(\"b\", 3)\n",
        "352": "            .addCopies(\"c\", 0).build();\n",
        "358": "        ImmutableSortedMultiset.<String>naturalOrder().add(\"a\").setCount(\"a\", 2).setCount(\"b\", 3)\n",
        "368": "    } catch (NullPointerException expected) {}\n",
        "376": "    } catch (NullPointerException expected) {}\n",
        "383": "    } catch (NullPointerException expected) {}\n",
        "390": "    } catch (NullPointerException expected) {}\n",
        "398": "    } catch (NullPointerException expected) {}\n",
        "406": "    } catch (IllegalArgumentException expected) {}\n",
        "415": "    } catch (NullPointerException expected) {}\n",
        "423": "    } catch (IllegalArgumentException expected) {}\n",
        "428": "        (ms1, ms2)\n",
        "429": "            -> ms1.equals(ms2)\n",
        "599": "    @Override public String toString() {\n"
    }
}