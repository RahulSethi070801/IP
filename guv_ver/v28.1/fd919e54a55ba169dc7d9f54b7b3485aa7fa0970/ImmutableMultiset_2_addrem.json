{
    "addition": {
        "42": " * consecutively when iterating. Elements iterate in order by the <i>first</i> appearance of that\n",
        "43": " * element when the multiset was created.\n",
        "46": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\"> immutable collections</a>.\n",
        "58": "   * Returns a {@code Collector} that accumulates the input elements into a new {@code\n",
        "59": "   * ImmutableMultiset}. Elements iterate in order by the <i>first</i> appearance of that element in\n",
        "60": "   * encounter order.\n",
        "95": "  /** Returns the empty immutable multiset. */\n",
        "259": "  @LazyInit private transient ImmutableList<E> asList;\n",
        "353": "  @LazyInit private transient ImmutableSet<Entry<E>> entrySet;\n",
        "458": "   * Returns a new builder. The generated builder is equivalent to the builder created by the {@link\n",
        "459": "   * Builder} constructor.\n",
        "466": "   * A builder for creating immutable multiset instances, especially {@code public static final}\n",
        "467": "   * multisets (\"constant multisets\"). Example:\n",
        "469": "   * <pre>{@code\n",
        "470": "   * public static final ImmutableMultiset<Bean> BEANS =\n",
        "471": "   *     new ImmutableMultiset.Builder<Bean>()\n",
        "472": "   *         .addCopies(Bean.COCOA, 4)\n",
        "473": "   *         .addCopies(Bean.GARDEN, 6)\n",
        "474": "   *         .addCopies(Bean.RED, 8)\n",
        "475": "   *         .addCopies(Bean.BLACK_EYED, 10)\n",
        "476": "   *         .build();\n",
        "477": "   * }</pre>\n",
        "479": "   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build\n",
        "480": "   * multiple multisets in series.\n",
        "488": "     * Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n",
        "489": "     * ImmutableMultiset#builder}.\n",
        "514": "     * Adds a number of occurrences of an element to this {@code ImmutableMultiset}.\n",
        "517": "     * @param occurrences the number of occurrences of the element to add. May be zero, in which\n",
        "518": "     *     case no change will be made.\n",
        "521": "     * @throws IllegalArgumentException if {@code occurrences} is negative, or if this operation\n",
        "522": "     *     would result in more than {@link Integer#MAX_VALUE} occurrences of the element\n",
        "531": "     * Adds or removes the necessary occurrences of an element such that the element attains the\n",
        "532": "     * desired count.\n",
        "551": "     * @throws NullPointerException if {@code elements} is null or contains a null element\n",
        "563": "     * @param elements the {@code Iterable} to add to the {@code ImmutableMultiset}\n",
        "565": "     * @throws NullPointerException if {@code elements} is null or contains a null element\n",
        "586": "     * @throws NullPointerException if {@code elements} is null or contains a null element\n",
        "596": "     * Returns a newly-created {@code ImmutableMultiset} based on the contents of the {@code\n",
        "597": "     * Builder}.\n"
    },
    "removed": {
        "42": " * consecutively when iterating. Elements iterate in order by the <i>first</i> appearance of\n",
        "43": " * that element when the multiset was created.\n",
        "46": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\">\n",
        "47": " * immutable collections</a>.\n",
        "59": "   * Returns a {@code Collector} that accumulates the input elements into a new\n",
        "60": "   * {@code ImmutableMultiset}.  Elements iterate in order by the <i>first</i> appearance of that\n",
        "61": "   * element in encounter order.\n",
        "96": "  /**\n",
        "97": "   * Returns the empty immutable multiset.\n",
        "98": "   */\n",
        "262": "  @LazyInit\n",
        "263": "  private transient ImmutableList<E> asList;\n",
        "357": "  @LazyInit\n",
        "358": "  private transient ImmutableSet<Entry<E>> entrySet;\n",
        "463": "   * Returns a new builder. The generated builder is equivalent to the builder\n",
        "464": "   * created by the {@link Builder} constructor.\n",
        "471": "   * A builder for creating immutable multiset instances, especially {@code\n",
        "472": "   * public static final} multisets (\"constant multisets\"). Example:\n",
        "473": "   * <pre> {@code\n",
        "475": "   *   public static final ImmutableMultiset<Bean> BEANS =\n",
        "476": "   *       new ImmutableMultiset.Builder<Bean>()\n",
        "477": "   *           .addCopies(Bean.COCOA, 4)\n",
        "478": "   *           .addCopies(Bean.GARDEN, 6)\n",
        "479": "   *           .addCopies(Bean.RED, 8)\n",
        "480": "   *           .addCopies(Bean.BLACK_EYED, 10)\n",
        "481": "   *           .build();}</pre>\n",
        "483": "   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple\n",
        "484": "   * times to build multiple multisets in series.\n",
        "492": "     * Creates a new builder. The returned builder is equivalent to the builder\n",
        "493": "     * generated by {@link ImmutableMultiset#builder}.\n",
        "518": "     * Adds a number of occurrences of an element to this {@code\n",
        "519": "     * ImmutableMultiset}.\n",
        "522": "     * @param occurrences the number of occurrences of the element to add. May\n",
        "523": "     *     be zero, in which case no change will be made.\n",
        "526": "     * @throws IllegalArgumentException if {@code occurrences} is negative, or\n",
        "527": "     *     if this operation would result in more than {@link Integer#MAX_VALUE}\n",
        "528": "     *     occurrences of the element\n",
        "537": "     * Adds or removes the necessary occurrences of an element such that the\n",
        "538": "     * element attains the desired count.\n",
        "557": "     * @throws NullPointerException if {@code elements} is null or contains a\n",
        "558": "     *     null element\n",
        "570": "     * @param elements the {@code Iterable} to add to the {@code\n",
        "571": "     *     ImmutableMultiset}\n",
        "573": "     * @throws NullPointerException if {@code elements} is null or contains a\n",
        "574": "     *     null element\n",
        "595": "     * @throws NullPointerException if {@code elements} is null or contains a\n",
        "596": "     *     null element\n",
        "606": "     * Returns a newly-created {@code ImmutableMultiset} based on the contents\n",
        "607": "     * of the {@code Builder}.\n"
    }
}