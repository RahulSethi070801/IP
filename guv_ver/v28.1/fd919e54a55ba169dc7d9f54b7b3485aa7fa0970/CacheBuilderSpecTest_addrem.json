{
    "addition": {
        "29": " * Tests CacheBuilderSpec. TODO(user): tests of a few invalid input conditions, boundary\n",
        "30": " * conditions.\n",
        "152": "    assertCacheBuilderEquivalence(CacheBuilder.newBuilder().weakKeys(), CacheBuilder.from(spec));\n",
        "181": "    assertCacheBuilderEquivalence(CacheBuilder.newBuilder().softValues(), CacheBuilder.from(spec));\n",
        "202": "    assertCacheBuilderEquivalence(CacheBuilder.newBuilder().weakValues(), CacheBuilder.from(spec));\n",
        "280": "      parse(\"expireAfterWrite=10s,expireAfterWrite=10m\");\n",
        "329": "      parse(\"expireAfterAccess=10s,expireAfterAccess=10m\");\n",
        "365": "            .expireAfterAccess(10L, TimeUnit.SECONDS)\n",
        "366": "            .expireAfterWrite(9L, TimeUnit.MINUTES),\n",
        "371": "    CacheBuilderSpec spec =\n",
        "372": "        parse(\n",
        "373": "            \"initialCapacity=10,maximumSize=20,concurrencyLevel=30,\"\n",
        "374": "                + \"weakKeys,weakValues,expireAfterAccess=10m,expireAfterWrite=1h\");\n",
        "385": "    CacheBuilder<?, ?> expected =\n",
        "386": "        CacheBuilder.newBuilder()\n",
        "387": "            .initialCapacity(10)\n",
        "388": "            .maximumSize(20)\n",
        "389": "            .concurrencyLevel(30)\n",
        "390": "            .weakKeys()\n",
        "391": "            .weakValues()\n",
        "392": "            .expireAfterAccess(10L, TimeUnit.MINUTES)\n",
        "393": "            .expireAfterWrite(1L, TimeUnit.HOURS);\n",
        "398": "    CacheBuilderSpec spec =\n",
        "399": "        parse(\n",
        "400": "            \" initialCapacity=10,\\nmaximumSize=20,\\t\\r\"\n",
        "401": "                + \"weakKeys \\t ,softValues \\n , \\r  expireAfterWrite \\t =  15s\\n\\n\");\n",
        "411": "    CacheBuilder<?, ?> expected =\n",
        "412": "        CacheBuilder.newBuilder()\n",
        "413": "            .initialCapacity(10)\n",
        "414": "            .maximumSize(20)\n",
        "415": "            .weakKeys()\n",
        "416": "            .softValues()\n",
        "417": "            .expireAfterWrite(15L, TimeUnit.SECONDS);\n",
        "473": "    builder.weigher(constantWeigher(42)).build(CacheLoader.from(Suppliers.ofInstance(null)));\n",
        "481": "    } catch (IllegalStateException expected) {\n",
        "482": "    }\n",
        "487": "    builder.weigher(constantWeigher(42)).build(CacheLoader.from(Suppliers.ofInstance(null)));\n",
        "501": "    LoadingCache<Object, Object> cache =\n",
        "502": "        builder.build(CacheLoader.from(Suppliers.ofInstance(value)));\n",
        "509": "    CacheBuilder<?, ?> fromString =\n",
        "510": "        CacheBuilder.from(\n",
        "511": "            \"initialCapacity=10,maximumSize=20,concurrencyLevel=30,\"\n",
        "512": "                + \"weakKeys,weakValues,expireAfterAccess=10m\");\n",
        "513": "    CacheBuilder<?, ?> expected =\n",
        "514": "        CacheBuilder.newBuilder()\n",
        "515": "            .initialCapacity(10)\n",
        "516": "            .maximumSize(20)\n",
        "517": "            .concurrencyLevel(30)\n",
        "518": "            .weakKeys()\n",
        "519": "            .weakValues()\n",
        "520": "            .expireAfterAccess(10L, TimeUnit.MINUTES);\n"
    },
    "removed": {
        "29": " * Tests CacheBuilderSpec.\n",
        "30": " * TODO(user): tests of a few invalid input conditions, boundary conditions.\n",
        "152": "    assertCacheBuilderEquivalence(\n",
        "153": "        CacheBuilder.newBuilder().weakKeys(), CacheBuilder.from(spec));\n",
        "182": "    assertCacheBuilderEquivalence(\n",
        "183": "        CacheBuilder.newBuilder().softValues(), CacheBuilder.from(spec));\n",
        "204": "    assertCacheBuilderEquivalence(\n",
        "205": "        CacheBuilder.newBuilder().weakValues(), CacheBuilder.from(spec));\n",
        "283": "      parse(\n",
        "284": "          \"expireAfterWrite=10s,expireAfterWrite=10m\");\n",
        "333": "      parse(\n",
        "334": "          \"expireAfterAccess=10s,expireAfterAccess=10m\");\n",
        "370": "          .expireAfterAccess(10L, TimeUnit.SECONDS)\n",
        "371": "          .expireAfterWrite(9L, TimeUnit.MINUTES),\n",
        "376": "    CacheBuilderSpec spec = parse(\"initialCapacity=10,maximumSize=20,concurrencyLevel=30,\"\n",
        "377": "        + \"weakKeys,weakValues,expireAfterAccess=10m,expireAfterWrite=1h\");\n",
        "388": "    CacheBuilder<?, ?> expected = CacheBuilder.newBuilder()\n",
        "389": "        .initialCapacity(10)\n",
        "390": "        .maximumSize(20)\n",
        "391": "        .concurrencyLevel(30)\n",
        "392": "        .weakKeys()\n",
        "393": "        .weakValues()\n",
        "394": "        .expireAfterAccess(10L, TimeUnit.MINUTES)\n",
        "395": "        .expireAfterWrite(1L, TimeUnit.HOURS);\n",
        "400": "    CacheBuilderSpec spec = parse(\" initialCapacity=10,\\nmaximumSize=20,\\t\\r\"\n",
        "401": "        + \"weakKeys \\t ,softValues \\n , \\r  expireAfterWrite \\t =  15s\\n\\n\");\n",
        "411": "    CacheBuilder<?, ?> expected = CacheBuilder.newBuilder()\n",
        "412": "        .initialCapacity(10)\n",
        "413": "        .maximumSize(20)\n",
        "414": "        .weakKeys()\n",
        "415": "        .softValues()\n",
        "416": "        .expireAfterWrite(15L, TimeUnit.SECONDS);\n",
        "472": "    builder\n",
        "473": "        .weigher(constantWeigher(42))\n",
        "474": "        .build(CacheLoader.from(Suppliers.ofInstance(null)));\n",
        "482": "    } catch (IllegalStateException expected) {}\n",
        "487": "    builder\n",
        "488": "        .weigher(constantWeigher(42))\n",
        "489": "        .build(CacheLoader.from(Suppliers.ofInstance(null)));\n",
        "503": "    LoadingCache<Object, Object> cache = builder.build(\n",
        "504": "        CacheLoader.from(Suppliers.ofInstance(value)));\n",
        "511": "    CacheBuilder<?, ?> fromString = CacheBuilder.from(\n",
        "512": "        \"initialCapacity=10,maximumSize=20,concurrencyLevel=30,\"\n",
        "513": "        + \"weakKeys,weakValues,expireAfterAccess=10m\");\n",
        "514": "    CacheBuilder<?, ?> expected = CacheBuilder.newBuilder()\n",
        "515": "        .initialCapacity(10)\n",
        "516": "        .maximumSize(20)\n",
        "517": "        .concurrencyLevel(30)\n",
        "518": "        .weakKeys()\n",
        "519": "        .weakValues()\n",
        "520": "        .expireAfterAccess(10L, TimeUnit.MINUTES);\n"
    }
}