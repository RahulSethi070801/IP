{
    "addition": {
        "52": "   * Given a set of features, add to it all the features directly or indirectly implied by any of\n",
        "53": "   * them, and return it.\n",
        "54": "   *\n",
        "72": "   * Given a set of features, return a new set of all features directly or indirectly implied by any\n",
        "73": "   * of them.\n",
        "74": "   *\n",
        "94": "   *\n",
        "96": "   * @return all the constraints implicitly or explicitly required by the class or any of its\n",
        "97": "   *     superclasses.\n",
        "98": "   * @throws ConflictingRequirementsException if the requirements are mutually inconsistent.\n",
        "114": "   *\n",
        "116": "   * @return all the constraints implicitly or explicitly required by the method, its declaring\n",
        "117": "   *     class, or any of its superclasses.\n",
        "118": "   * @throws ConflictingRequirementsException if the requirements are mutually inconsistent.\n",
        "134": "   *\n",
        "136": "   * @return all the constraints implicitly or explicitly required by the class or any of its\n",
        "137": "   *     superclasses.\n",
        "138": "   * @throws ConflictingRequirementsException if the requirements are mutually inconsistent.\n",
        "155": "   *\n",
        "157": "   * @return all the constraints implicitly or explicitly required by the method, its declaring\n",
        "158": "   *     class, or any of its superclasses.\n",
        "159": "   * @throws ConflictingRequirementsException if the requirements are mutually inconsistent.\n",
        "170": "   * Construct the set of requirements specified by annotations directly on a tester class or\n",
        "171": "   * method.\n",
        "172": "   *\n",
        "174": "   * @return all the constraints implicitly or explicitly required by annotations on the class or\n",
        "175": "   *     method.\n",
        "176": "   * @throws ConflictingRequirementsException if the requirements are mutually inconsistent.\n",
        "193": "   *\n",
        "215": "   * Find all the constraints explicitly or implicitly specified by a single tester annotation.\n",
        "216": "   *\n",
        "219": "   * @throws ConflictingRequirementsException if the requirements are mutually inconsistent.\n",
        "249": "   *\n",
        "252": "   * @param source the source of the additional requirements (used only for error reporting)\n",
        "253": "   * @return the existing requirements object, modified to include the additional requirements\n",
        "254": "   * @throws ConflictingRequirementsException if the additional requirements are inconsistent with\n",
        "255": "   *     the existing requirements\n",
        "292": "  /** Construct a new {@link java.util.Set} that is the intersection of the given sets. */\n"
    },
    "removed": {
        "52": "   * Given a set of features, add to it all the features directly or indirectly\n",
        "53": "   * implied by any of them, and return it.\n",
        "71": "   * Given a set of features, return a new set of all features directly or\n",
        "72": "   * indirectly implied by any of them.\n",
        "93": "   * @return all the constraints implicitly or explicitly required by the class\n",
        "94": "   * or any of its superclasses.\n",
        "95": "   * @throws ConflictingRequirementsException if the requirements are mutually\n",
        "96": "   * inconsistent.\n",
        "113": "   * @return all the constraints implicitly or explicitly required by the\n",
        "114": "   * method, its declaring class, or any of its superclasses.\n",
        "115": "   * @throws ConflictingRequirementsException if the requirements are\n",
        "116": "   * mutually inconsistent.\n",
        "133": "   * @return all the constraints implicitly or explicitly required by the class\n",
        "134": "   * or any of its superclasses.\n",
        "135": "   * @throws ConflictingRequirementsException if the requirements are mutually\n",
        "136": "   * inconsistent.\n",
        "154": "   * @return all the constraints implicitly or explicitly required by the\n",
        "155": "   * method, its declaring class, or any of its superclasses.\n",
        "156": "   * @throws ConflictingRequirementsException if the requirements are mutually\n",
        "157": "   * inconsistent.\n",
        "168": "   * Construct the set of requirements specified by annotations\n",
        "169": "   * directly on a tester class or method.\n",
        "171": "   * @return all the constraints implicitly or explicitly required by\n",
        "172": "   *         annotations on the class or method.\n",
        "173": "   * @throws ConflictingRequirementsException if the requirements are mutually\n",
        "174": "   *         inconsistent.\n",
        "212": "   * Find all the constraints explicitly or implicitly specified by a single\n",
        "213": "   * tester annotation.\n",
        "216": "   * @throws ConflictingRequirementsException if the requirements are mutually\n",
        "217": "   *         inconsistent.\n",
        "249": "   * @param source the source of the additional requirements\n",
        "250": "   *        (used only for error reporting)\n",
        "251": "   * @return the existing requirements object, modified to include the\n",
        "252": "   *         additional requirements\n",
        "253": "   * @throws ConflictingRequirementsException if the additional requirements\n",
        "254": "   *         are inconsistent with the existing requirements\n",
        "291": "  /**\n",
        "292": "   * Construct a new {@link java.util.Set} that is the intersection\n",
        "293": "   * of the given sets.\n",
        "294": "   */\n"
    }
}