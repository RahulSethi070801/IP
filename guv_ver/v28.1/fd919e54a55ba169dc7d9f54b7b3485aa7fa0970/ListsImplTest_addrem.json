{
    "addition": {
        "35": "/** Tests the package level *impl methods directly using various types of lists. */\n",
        "39": "  /** Describes how a list is modifiable */\n",
        "48": "  public abstract static class ListExample {\n",
        "57": "\n",
        "58": "    /** Gets the name of the example */\n",
        "63": "    /** Creates a new list with the given contents. */\n",
        "66": "    /** The modifiablity of this list example. */\n",
        "87": "    for (Enumeration<Test> testEnum = resultSuite.tests(); testEnum.hasMoreElements(); ) {\n",
        "120": "    assertThat(Lists.hashCodeImpl(base)).isNotEqualTo(Lists.hashCodeImpl(outOfOrder));\n",
        "151": "    List<Iterable<String>> toAdd =\n",
        "152": "        ImmutableList.of(\n",
        "153": "            (Iterable<String>) Collections.singleton(\"A\"),\n",
        "154": "            Collections.<String>emptyList(),\n",
        "155": "            ImmutableList.of(\"A\", \"B\", \"C\"),\n",
        "156": "            ImmutableList.of(\"D\", \"E\"));\n",
        "158": "    List<List<String>> expected =\n",
        "159": "        ImmutableList.of(\n",
        "160": "            Collections.singletonList(\"A\"),\n",
        "161": "            ImmutableList.of(\"A\"),\n",
        "162": "            ImmutableList.of(\"A\", \"A\", \"B\", \"C\"),\n",
        "163": "            ImmutableList.of(\"A\", \"A\", \"D\", \"E\", \"B\", \"C\"));\n",
        "170": "      assertThat(Lists.addAllImpl(toTest, index, iterableToAdd))\n",
        "171": "          .named(format, iterableToAdd, index)\n",
        "173": "      assertThat(toTest)\n",
        "174": "          .named(format, iterableToAdd, index)\n",
        "219": "      assertThat(Lists.indexOfImpl(toTest, obj)).named(name).isEqualTo(expected[index]);\n",
        "228": "      assertThat(Lists.lastIndexOfImpl(toTest, obj)).named(name).isEqualTo(expected[index]);\n",
        "272": "      @SuppressWarnings(\"unchecked\") // safe by contract\n"
    },
    "removed": {
        "35": "/**\n",
        "36": " * Tests the package level *impl methods directly using various types of lists.\n",
        "37": " */\n",
        "41": "  /**\n",
        "42": "   * Describes how a list is modifiable\n",
        "43": "   */\n",
        "52": "  public static abstract class ListExample {\n",
        "61": "    /**\n",
        "62": "     * Gets the name of the example\n",
        "63": "     */\n",
        "68": "    /**\n",
        "69": "     * Creates a new list with the given contents.\n",
        "70": "     */\n",
        "73": "    /**\n",
        "74": "     * The modifiablity of this list example.\n",
        "75": "     */\n",
        "96": "    for (Enumeration<Test> testEnum = resultSuite.tests(); testEnum.hasMoreElements();) {\n",
        "129": "    assertThat(Lists.hashCodeImpl(base)).isNotEqualTo(Lists.hashCodeImpl\n",
        "130": "        (outOfOrder));\n",
        "161": "    List<Iterable<String>> toAdd = ImmutableList.of(\n",
        "162": "        (Iterable<String>) Collections.singleton(\"A\"),\n",
        "163": "        Collections.<String>emptyList(),\n",
        "164": "        ImmutableList.of(\"A\", \"B\", \"C\"),\n",
        "165": "        ImmutableList.of(\"D\", \"E\"));\n",
        "167": "    List<List<String>> expected = ImmutableList.of(\n",
        "168": "        Collections.singletonList(\"A\"),\n",
        "169": "        ImmutableList.of(\"A\"),\n",
        "170": "        ImmutableList.of(\"A\", \"A\", \"B\", \"C\"),\n",
        "171": "        ImmutableList.of(\"A\", \"A\", \"D\", \"E\", \"B\", \"C\"));\n",
        "178": "      assertThat(Lists.addAllImpl(toTest, index, iterableToAdd)).named(format, iterableToAdd, index)\n",
        "180": "      assertThat(toTest).named(format, iterableToAdd, index)\n",
        "225": "      assertThat(Lists.indexOfImpl(toTest, obj))\n",
        "226": "          .named(name)\n",
        "227": "          .isEqualTo(expected[index]);\n",
        "236": "      assertThat(Lists.lastIndexOfImpl(toTest, obj))\n",
        "237": "          .named(name)\n",
        "238": "          .isEqualTo(expected[index]);\n",
        "282": "      @SuppressWarnings(\"unchecked\")  // safe by contract\n"
    }
}