{
    "addition": {
        "35": " * Basher test for {@link ConcurrentHashMultiset}: start a bunch of threads, have each of them do\n",
        "36": " * operations at random. Each thread keeps track of the per-key deltas that it's directly\n",
        "83": "      List<Integer> actualCounts =\n",
        "84": "          Lists.transform(\n",
        "85": "              keys,\n",
        "86": "              new Function<String, Integer>() {\n",
        "87": "                @Override\n",
        "88": "                public Integer apply(String key) {\n",
        "89": "                  return multiset.count(key);\n",
        "90": "                }\n",
        "91": "              });\n",
        "113": "    @Override\n",
        "114": "    public int[] call() throws Exception {\n",
        "124": "          case ADD:\n",
        "125": "            {\n",
        "126": "              int delta = random.nextInt(10);\n",
        "127": "              multiset.add(key, delta);\n",
        "128": "              deltas[keyIndex] += delta;\n",
        "129": "              break;\n",
        "130": "            }\n",
        "131": "          case SET_COUNT:\n",
        "132": "            {\n",
        "133": "              int newValue = random.nextInt(3);\n",
        "134": "              int oldValue = multiset.setCount(key, newValue);\n",
        "136": "              break;\n",
        "137": "            }\n",
        "138": "          case SET_COUNT_IF:\n",
        "139": "            {\n",
        "140": "              int newValue = random.nextInt(3);\n",
        "141": "              int oldValue = multiset.count(key);\n",
        "142": "              if (multiset.setCount(key, oldValue, newValue)) {\n",
        "143": "                deltas[keyIndex] += (newValue - oldValue);\n",
        "144": "              }\n",
        "145": "              break;\n",
        "146": "            }\n",
        "147": "          case REMOVE:\n",
        "148": "            {\n",
        "149": "              int delta = random.nextInt(6); // [0, 5]\n",
        "150": "              int oldValue = multiset.remove(key, delta);\n",
        "151": "              deltas[keyIndex] -= Math.min(delta, oldValue);\n",
        "152": "              break;\n",
        "154": "          case REMOVE_EXACTLY:\n",
        "155": "            {\n",
        "156": "              int delta = random.nextInt(5); // [0, 4]\n",
        "157": "              if (multiset.removeExactly(key, delta)) {\n",
        "158": "                deltas[keyIndex] -= delta;\n",
        "159": "              }\n",
        "160": "              break;\n"
    },
    "removed": {
        "35": " * Basher test for {@link ConcurrentHashMultiset}: start a bunch of threads, have each of them\n",
        "36": " * do operations at random. Each thread keeps track of the per-key deltas that it's directly\n",
        "83": "      List<Integer> actualCounts = Lists.transform(keys,\n",
        "84": "          new Function<String, Integer>() {\n",
        "85": "            @Override public Integer apply(String key) {\n",
        "86": "              return multiset.count(key);\n",
        "87": "            }\n",
        "88": "          });\n",
        "110": "    @Override public int[] call() throws Exception {\n",
        "120": "          case ADD: {\n",
        "121": "            int delta = random.nextInt(10);\n",
        "122": "            multiset.add(key, delta);\n",
        "123": "            deltas[keyIndex] += delta;\n",
        "124": "            break;\n",
        "125": "          }\n",
        "126": "          case SET_COUNT: {\n",
        "127": "            int newValue = random.nextInt(3);\n",
        "128": "            int oldValue = multiset.setCount(key, newValue);\n",
        "129": "            deltas[keyIndex] += (newValue - oldValue);\n",
        "130": "            break;\n",
        "131": "          }\n",
        "132": "          case SET_COUNT_IF: {\n",
        "133": "            int newValue = random.nextInt(3);\n",
        "134": "            int oldValue = multiset.count(key);\n",
        "135": "            if (multiset.setCount(key, oldValue, newValue)) {\n",
        "138": "            break;\n",
        "139": "          }\n",
        "140": "          case REMOVE: {\n",
        "141": "            int delta = random.nextInt(6);  // [0, 5]\n",
        "142": "            int oldValue = multiset.remove(key, delta);\n",
        "143": "            deltas[keyIndex] -= Math.min(delta, oldValue);\n",
        "144": "            break;\n",
        "145": "          }\n",
        "146": "          case REMOVE_EXACTLY: {\n",
        "147": "            int delta = random.nextInt(5);  // [0, 4]\n",
        "148": "            if (multiset.removeExactly(key, delta)) {\n",
        "149": "              deltas[keyIndex] -= delta;\n",
        "151": "            break;\n",
        "152": "          }\n"
    }
}