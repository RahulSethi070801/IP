{
    "addition": {
        "64": "    suite.addTest(\n",
        "65": "        NavigableSetTestSuiteBuilder.using(new ImmutableSortedSetCopyOfGenerator())\n",
        "66": "            .named(ImmutableSortedSetTest.class.getName())\n",
        "67": "            .withFeatures(\n",
        "68": "                CollectionSize.ANY,\n",
        "69": "                CollectionFeature.KNOWN_ORDER,\n",
        "70": "                CollectionFeature.SERIALIZABLE,\n",
        "71": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "74": "    suite.addTest(\n",
        "75": "        NavigableSetTestSuiteBuilder.using(new ImmutableSortedSetExplicitComparator())\n",
        "76": "            .named(ImmutableSortedSetTest.class.getName() + \", explicit comparator, vararg\")\n",
        "77": "            .withFeatures(\n",
        "78": "                CollectionSize.ANY,\n",
        "79": "                CollectionFeature.KNOWN_ORDER,\n",
        "82": "            .createTestSuite());\n",
        "84": "    suite.addTest(\n",
        "85": "        NavigableSetTestSuiteBuilder.using(\n",
        "86": "                new ImmutableSortedSetExplicitSuperclassComparatorGenerator())\n",
        "87": "            .named(\n",
        "88": "                ImmutableSortedSetTest.class.getName()\n",
        "89": "                    + \", explicit superclass comparator, iterable\")\n",
        "90": "            .withFeatures(\n",
        "91": "                CollectionSize.ANY,\n",
        "92": "                CollectionFeature.KNOWN_ORDER,\n",
        "95": "            .createTestSuite());\n",
        "97": "    suite.addTest(\n",
        "98": "        NavigableSetTestSuiteBuilder.using(new ImmutableSortedSetReversedOrderGenerator())\n",
        "99": "            .named(ImmutableSortedSetTest.class.getName() + \", reverseOrder, iterator\")\n",
        "100": "            .withFeatures(\n",
        "101": "                CollectionSize.ANY,\n",
        "102": "                CollectionFeature.KNOWN_ORDER,\n",
        "107": "    suite.addTest(\n",
        "108": "        NavigableSetTestSuiteBuilder.using(new ImmutableSortedSetUnhashableGenerator())\n",
        "109": "            .suppressing(SetHashCodeTester.getHashCodeMethods())\n",
        "110": "            .named(ImmutableSortedSetTest.class.getName() + \", unhashable\")\n",
        "111": "            .withFeatures(\n",
        "112": "                CollectionSize.ANY,\n",
        "113": "                CollectionFeature.KNOWN_ORDER,\n",
        "114": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "115": "            .createTestSuite());\n",
        "116": "\n",
        "117": "    suite.addTest(\n",
        "118": "        NavigableSetTestSuiteBuilder.using(new ImmutableSortedSetDescendingGenerator())\n",
        "119": "            .named(ImmutableSortedSetTest.class.getName() + \", descending\")\n",
        "120": "            .withFeatures(\n",
        "121": "                CollectionSize.ANY,\n",
        "122": "                CollectionFeature.KNOWN_ORDER,\n",
        "123": "                CollectionFeature.SERIALIZABLE,\n",
        "124": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "127": "    suite.addTest(\n",
        "128": "        ListTestSuiteBuilder.using(new ImmutableSortedSetAsListGenerator())\n",
        "129": "            .named(\"ImmutableSortedSet.asList\")\n",
        "130": "            .withFeatures(\n",
        "131": "                CollectionSize.ANY,\n",
        "132": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "133": "                CollectionFeature.SERIALIZABLE,\n",
        "134": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "137": "    suite.addTest(\n",
        "138": "        ListTestSuiteBuilder.using(new ImmutableSortedSetSubsetAsListGenerator())\n",
        "139": "            .named(\"ImmutableSortedSet.subSet.asList\")\n",
        "140": "            .withFeatures(\n",
        "141": "                CollectionSize.ANY,\n",
        "142": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "143": "                CollectionFeature.SERIALIZABLE,\n",
        "144": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "147": "    suite.addTest(\n",
        "148": "        ListTestSuiteBuilder.using(new ImmutableSortedSetDescendingAsListGenerator())\n",
        "149": "            .named(\"ImmutableSortedSet.descendingSet.asList\")\n",
        "150": "            .withFeatures(\n",
        "151": "                CollectionSize.ANY,\n",
        "152": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "153": "                CollectionFeature.SERIALIZABLE,\n",
        "154": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "172": "  private static final Comparator<String> STRING_LENGTH = StringLengthComparator.INSTANCE;\n",
        "174": "  @Override\n",
        "175": "  protected <E extends Comparable<? super E>> SortedSet<E> of() {\n",
        "179": "  @Override\n",
        "180": "  protected <E extends Comparable<? super E>> SortedSet<E> of(E e) {\n",
        "184": "  @Override\n",
        "185": "  protected <E extends Comparable<? super E>> SortedSet<E> of(E e1, E e2) {\n",
        "189": "  @Override\n",
        "190": "  protected <E extends Comparable<? super E>> SortedSet<E> of(E e1, E e2, E e3) {\n",
        "194": "  @Override\n",
        "195": "  protected <E extends Comparable<? super E>> SortedSet<E> of(E e1, E e2, E e3, E e4) {\n",
        "199": "  @Override\n",
        "200": "  protected <E extends Comparable<? super E>> SortedSet<E> of(E e1, E e2, E e3, E e4, E e5) {\n",
        "205": "  @Override\n",
        "206": "  protected <E extends Comparable<? super E>> SortedSet<E> of(\n",
        "207": "      E e1, E e2, E e3, E e4, E e5, E e6, E... rest) {\n",
        "211": "  @Override\n",
        "212": "  protected <E extends Comparable<? super E>> SortedSet<E> copyOf(E[] elements) {\n",
        "216": "  @Override\n",
        "217": "  protected <E extends Comparable<? super E>> SortedSet<E> copyOf(\n",
        "222": "  @Override\n",
        "223": "  protected <E extends Comparable<? super E>> SortedSet<E> copyOf(Iterable<? extends E> elements) {\n",
        "227": "  @Override\n",
        "228": "  protected <E extends Comparable<? super E>> SortedSet<E> copyOf(Iterator<? extends E> elements) {\n",
        "368": "  interface Interface extends Comparable<Interface> {}\n",
        "369": "\n",
        "374": "    @Override\n",
        "375": "    public int compareTo(Interface other) {\n",
        "449": "    SortedSet<String> set =\n",
        "450": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "451": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "452": "            .build();\n",
        "457": "    SortedSet<String> set =\n",
        "458": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "459": "            .add(\"in\", \"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"a\", \"lazy\", \"dog\")\n",
        "460": "            .build();\n",
        "465": "    SortedSet<String> set =\n",
        "466": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "467": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "468": "            .build();\n",
        "477": "  public void testExplicit_containsMismatchedTypes() {\n",
        "478": "    SortedSet<String> set =\n",
        "479": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "480": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "481": "            .build();\n",
        "486": "    SortedSet<String> set =\n",
        "487": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "488": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "489": "            .build();\n",
        "494": "    SortedSet<String> set =\n",
        "495": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "496": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "497": "            .build();\n",
        "502": "        .containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\")\n",
        "503": "        .inOrder();\n",
        "509": "    SortedSet<String> set =\n",
        "510": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "511": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "512": "            .build();\n",
        "516": "    assertThat(set.tailSet(\"a\"))\n",
        "517": "        .containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\")\n",
        "518": "        .inOrder();\n",
        "523": "    SortedSet<String> set =\n",
        "524": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "525": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "526": "            .build();\n",
        "531": "        .containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\")\n",
        "532": "        .inOrder();\n",
        "544": "    SortedSet<String> set =\n",
        "545": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "546": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "547": "            .build();\n",
        "552": "    SortedSet<String> set =\n",
        "553": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "554": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "555": "            .build();\n",
        "570": "    SortedSet<String> set =\n",
        "571": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "572": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "573": "            .build();\n",
        "580": "    SortedSet<String> set = copyOf(asList(\"e\", \"a\", \"f\", \"b\", \"d\", \"c\"));\n",
        "585": "    SortedSet<String> set = copyOf(asList(\"e\", \"a\", \"e\", \"f\", \"b\", \"b\", \"d\", \"a\", \"c\"));\n",
        "621": "    SortedSet<String> set = copyOf(asIterator(\"e\", \"a\", \"e\", \"f\", \"b\", \"b\", \"d\", \"a\", \"c\"));\n",
        "631": "    SortedSet<String> set = copyOf(Sets.newTreeSet(asList(\"e\", \"a\", \"f\", \"b\", \"d\", \"c\")));\n",
        "642": "        ImmutableSortedSet.copyOf(\n",
        "643": "            STRING_LENGTH, asList(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "649": "        ImmutableSortedSet.copyOf(\n",
        "650": "            STRING_LENGTH,\n",
        "651": "            asList(\"in\", \"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"a\", \"lazy\", \"dog\"));\n",
        "657": "        ImmutableSortedSet.copyOf(\n",
        "658": "            STRING_LENGTH, asList(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "664": "        ImmutableSortedSet.copyOf(\n",
        "665": "            STRING_LENGTH, asIterator(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "671": "        ImmutableSortedSet.copyOf(\n",
        "672": "            STRING_LENGTH,\n",
        "673": "            asIterator(\"in\", \"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"a\", \"lazy\", \"dog\"));\n",
        "679": "        ImmutableSortedSet.copyOf(\n",
        "680": "            STRING_LENGTH, asIterator(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "692": "    SortedSet<String> input = Sets.newTreeSet(asList(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "698": "    SortedSet<String> input = Sets.newTreeSet(asList(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "781": "    SortedSet<String> set =\n",
        "782": "        new ImmutableSortedSet.Builder<String>(comparator).add(\"a\", \"b\", \"f\").build();\n",
        "797": "    SortedSet<String> set =\n",
        "798": "        new ImmutableSortedSet.Builder<String>(comparator).add(\"a\", \"b\", \"c\").build();\n",
        "805": "    SortedSet<String> set = ImmutableSortedSet.<String>reverseOrder().add(\"a\", \"b\", \"c\").build();\n",
        "810": "  private static final Comparator<Object> TO_STRING =\n",
        "811": "      new Comparator<Object>() {\n",
        "812": "        @Override\n",
        "813": "        public int compare(Object o1, Object o2) {\n",
        "814": "          return o1.toString().compareTo(o2.toString());\n",
        "815": "        }\n",
        "816": "      };\n",
        "819": "    SortedSet<Integer> set =\n",
        "820": "        new ImmutableSortedSet.Builder<Integer>(TO_STRING).add(3, 12, 101, 44).build();\n",
        "825": "    SortedSet<Number> set =\n",
        "826": "        new ImmutableSortedSet.Builder<Number>(TO_STRING).add(3, 12, 101, 44).build();\n",
        "830": "  @Override\n",
        "831": "  <E extends Comparable<E>> ImmutableSortedSet.Builder<E> builder() {\n",
        "835": "  @Override\n",
        "836": "  int getComplexBuilderSetLastElement() {\n",
        "845": "    ImmutableSortedSet<LegacyComparable> set1 = ImmutableSortedSet.of(LegacyComparable.Z);\n",
        "849": "    ImmutableSortedSet<LegacyComparable> set2 =\n",
        "850": "        ImmutableSortedSet.of(LegacyComparable.Z, LegacyComparable.Y);\n",
        "855": "    ImmutableSortedSet<LegacyComparable> set =\n",
        "856": "        ImmutableSortedSet.copyOf(LegacyComparable.VALUES_BACKWARD);\n",
        "861": "    ImmutableSortedSet<LegacyComparable> set =\n",
        "862": "        ImmutableSortedSet.copyOf(LegacyComparable.VALUES_BACKWARD.iterator());\n",
        "869": "    ImmutableSortedSet.Builder<LegacyComparable> builder =\n",
        "870": "        ImmutableSortedSet.<LegacyComparable>naturalOrder();\n",
        "883": "    ImmutableSortedSet.Builder<LegacyComparable> builder =\n",
        "884": "        ImmutableSortedSet.<LegacyComparable>reverseOrder();\n",
        "919": "    ImmutableSet<String> set = ImmutableSortedSet.of(\"a\", \"e\", \"i\", \"o\", \"u\").subSet(\"c\", \"r\");\n",
        "927": "    ImmutableSet<String> set = ImmutableSortedSet.of(\"a\", \"e\", \"i\", \"o\", \"u\").subSet(\"c\", \"r\");\n",
        "934": "    ImmutableSet<String> set =\n",
        "935": "        ImmutableSortedSet.orderedBy(STRING_LENGTH)\n",
        "936": "            .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")\n",
        "937": "            .build();\n",
        "957": "  private static void assertNotEqualLenient(TreeSet<?> unexpected, SortedSet<?> actual) {\n"
    },
    "removed": {
        "64": "    suite.addTest(NavigableSetTestSuiteBuilder.using(\n",
        "65": "        new ImmutableSortedSetCopyOfGenerator())\n",
        "66": "        .named(ImmutableSortedSetTest.class.getName())\n",
        "67": "        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "68": "            CollectionFeature.SERIALIZABLE,\n",
        "69": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "72": "    suite.addTest(NavigableSetTestSuiteBuilder.using(\n",
        "73": "        new ImmutableSortedSetExplicitComparator())\n",
        "74": "        .named(ImmutableSortedSetTest.class.getName()\n",
        "75": "            + \", explicit comparator, vararg\")\n",
        "76": "            .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "79": "                .createTestSuite());\n",
        "81": "    suite.addTest(NavigableSetTestSuiteBuilder.using(\n",
        "82": "        new ImmutableSortedSetExplicitSuperclassComparatorGenerator())\n",
        "83": "        .named(ImmutableSortedSetTest.class.getName()\n",
        "84": "            + \", explicit superclass comparator, iterable\")\n",
        "85": "            .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "88": "                .createTestSuite());\n",
        "90": "    suite.addTest(NavigableSetTestSuiteBuilder.using(\n",
        "91": "        new ImmutableSortedSetReversedOrderGenerator())\n",
        "92": "        .named(ImmutableSortedSetTest.class.getName()\n",
        "93": "            + \", reverseOrder, iterator\")\n",
        "94": "            .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "97": "                .createTestSuite());\n",
        "98": "\n",
        "99": "    suite.addTest(NavigableSetTestSuiteBuilder.using(\n",
        "100": "        new ImmutableSortedSetUnhashableGenerator())\n",
        "101": "        .suppressing(SetHashCodeTester.getHashCodeMethods())\n",
        "102": "        .named(ImmutableSortedSetTest.class.getName() + \", unhashable\")\n",
        "103": "        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "104": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "107": "    suite.addTest(NavigableSetTestSuiteBuilder.using(\n",
        "108": "        new ImmutableSortedSetDescendingGenerator())\n",
        "109": "        .named(ImmutableSortedSetTest.class.getName() + \", descending\")\n",
        "110": "        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "111": "            CollectionFeature.SERIALIZABLE,\n",
        "112": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "115": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "116": "        new ImmutableSortedSetAsListGenerator())\n",
        "117": "        .named(\"ImmutableSortedSet.asList\")\n",
        "118": "        .withFeatures(CollectionSize.ANY,\n",
        "119": "            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "120": "            CollectionFeature.SERIALIZABLE,\n",
        "121": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "124": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "125": "        new ImmutableSortedSetSubsetAsListGenerator())\n",
        "126": "        .named(\"ImmutableSortedSet.subSet.asList\")\n",
        "127": "        .withFeatures(CollectionSize.ANY,\n",
        "128": "            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "129": "            CollectionFeature.SERIALIZABLE,\n",
        "130": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "133": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "134": "        new ImmutableSortedSetDescendingAsListGenerator())\n",
        "135": "        .named(\"ImmutableSortedSet.descendingSet.asList\")\n",
        "136": "        .withFeatures(CollectionSize.ANY,\n",
        "137": "            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "138": "            CollectionFeature.SERIALIZABLE,\n",
        "139": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "157": "  private static final Comparator<String> STRING_LENGTH\n",
        "158": "      = StringLengthComparator.INSTANCE;\n",
        "160": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> of() {\n",
        "164": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> of(E e) {\n",
        "168": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> of(E e1, E e2) {\n",
        "172": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> of(E e1, E e2, E e3) {\n",
        "176": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> of(\n",
        "177": "      E e1, E e2, E e3, E e4) {\n",
        "181": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> of(\n",
        "182": "      E e1, E e2, E e3, E e4, E e5) {\n",
        "187": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> of(E e1, E e2, E e3,\n",
        "188": "      E e4, E e5, E e6, E... rest) {\n",
        "192": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> copyOf(E[] elements) {\n",
        "196": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> copyOf(\n",
        "201": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> copyOf(\n",
        "202": "      Iterable<? extends E> elements) {\n",
        "206": "  @Override protected <E extends Comparable<? super E>> SortedSet<E> copyOf(\n",
        "207": "      Iterator<? extends E> elements) {\n",
        "347": "  interface Interface extends Comparable<Interface> {\n",
        "348": "  }\n",
        "353": "    @Override public int compareTo(Interface other) {\n",
        "427": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "428": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "433": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "434": "        \"in\", \"the\", \"quick\", \"brown\", \"fox\", \"jumped\",\n",
        "435": "        \"over\", \"a\", \"lazy\", \"dog\").build();\n",
        "440": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "441": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "450": "    public void testExplicit_containsMismatchedTypes() {\n",
        "451": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "452": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "457": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "458": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "463": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "464": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "469": "        .containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\").inOrder();\n",
        "475": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "476": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "480": "    assertThat(\n",
        "481": "        set.tailSet(\"a\")).containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\").inOrder();\n",
        "486": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "487": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "492": "        .containsExactly(\"a\", \"in\", \"the\", \"over\", \"quick\", \"jumped\").inOrder();\n",
        "504": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "505": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "510": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "511": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "526": "    SortedSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "527": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "534": "    SortedSet<String> set =\n",
        "535": "        copyOf(asList(\"e\", \"a\", \"f\", \"b\", \"d\", \"c\"));\n",
        "540": "    SortedSet<String> set =\n",
        "541": "        copyOf(asList(\"e\", \"a\", \"e\", \"f\", \"b\", \"b\", \"d\", \"a\", \"c\"));\n",
        "577": "    SortedSet<String> set =\n",
        "578": "        copyOf(asIterator(\"e\", \"a\", \"e\", \"f\", \"b\", \"b\", \"d\", \"a\", \"c\"));\n",
        "588": "    SortedSet<String> set =\n",
        "589": "        copyOf(Sets.newTreeSet(asList(\"e\", \"a\", \"f\", \"b\", \"d\", \"c\")));\n",
        "600": "        ImmutableSortedSet.copyOf(STRING_LENGTH, asList(\n",
        "601": "            \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "607": "        ImmutableSortedSet.copyOf(STRING_LENGTH, asList(\n",
        "608": "            \"in\", \"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"a\",\n",
        "609": "            \"lazy\", \"dog\"));\n",
        "615": "        ImmutableSortedSet.copyOf(STRING_LENGTH, asList(\n",
        "616": "            \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "622": "        ImmutableSortedSet.copyOf(STRING_LENGTH, asIterator(\n",
        "623": "            \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "629": "        ImmutableSortedSet.copyOf(STRING_LENGTH, asIterator(\n",
        "630": "            \"in\", \"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"a\",\n",
        "631": "            \"lazy\", \"dog\"));\n",
        "637": "        ImmutableSortedSet.copyOf(STRING_LENGTH, asIterator(\n",
        "638": "            \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "650": "    SortedSet<String> input = Sets.newTreeSet(\n",
        "651": "        asList(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "657": "    SortedSet<String> input =\n",
        "658": "        Sets.newTreeSet(asList(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\"));\n",
        "741": "    SortedSet<String> set = new ImmutableSortedSet.Builder<String>(comparator)\n",
        "742": "        .add(\"a\", \"b\", \"f\").build();\n",
        "757": "    SortedSet<String> set = new ImmutableSortedSet.Builder<String>(comparator)\n",
        "758": "        .add(\"a\", \"b\", \"c\").build();\n",
        "765": "    SortedSet<String> set = ImmutableSortedSet.<String>reverseOrder()\n",
        "766": "        .add(\"a\", \"b\", \"c\").build();\n",
        "771": "  private static final Comparator<Object> TO_STRING\n",
        "772": "      = new Comparator<Object>() {\n",
        "773": "          @Override\n",
        "774": "          public int compare(Object o1, Object o2) {\n",
        "775": "            return o1.toString().compareTo(o2.toString());\n",
        "776": "          }\n",
        "777": "        };\n",
        "780": "    SortedSet<Integer> set = new ImmutableSortedSet.Builder<Integer>(TO_STRING)\n",
        "781": "        .add(3, 12, 101, 44).build();\n",
        "786": "    SortedSet<Number> set = new ImmutableSortedSet.Builder<Number>(TO_STRING)\n",
        "787": "        .add(3, 12, 101, 44).build();\n",
        "791": "  @Override <E extends Comparable<E>> ImmutableSortedSet.Builder<E> builder() {\n",
        "795": "  @Override int getComplexBuilderSetLastElement() {\n",
        "804": "    ImmutableSortedSet<LegacyComparable> set1 = ImmutableSortedSet.of(\n",
        "805": "        LegacyComparable.Z);\n",
        "809": "    ImmutableSortedSet<LegacyComparable> set2 = ImmutableSortedSet.of(\n",
        "810": "        LegacyComparable.Z, LegacyComparable.Y);\n",
        "815": "    ImmutableSortedSet<LegacyComparable> set\n",
        "816": "        = ImmutableSortedSet.copyOf(LegacyComparable.VALUES_BACKWARD);\n",
        "821": "    ImmutableSortedSet<LegacyComparable> set = ImmutableSortedSet.copyOf(\n",
        "822": "        LegacyComparable.VALUES_BACKWARD.iterator());\n",
        "829": "    ImmutableSortedSet.Builder<LegacyComparable> builder\n",
        "830": "        = ImmutableSortedSet.<LegacyComparable>naturalOrder();\n",
        "843": "    ImmutableSortedSet.Builder<LegacyComparable> builder\n",
        "844": "        = ImmutableSortedSet.<LegacyComparable>reverseOrder();\n",
        "879": "    ImmutableSet<String> set\n",
        "880": "        = ImmutableSortedSet.of(\"a\", \"e\", \"i\", \"o\", \"u\").subSet(\"c\", \"r\");\n",
        "888": "    ImmutableSet<String> set\n",
        "889": "        = ImmutableSortedSet.of(\"a\", \"e\", \"i\", \"o\", \"u\").subSet(\"c\", \"r\");\n",
        "896": "    ImmutableSet<String> set = ImmutableSortedSet.orderedBy(STRING_LENGTH).add(\n",
        "897": "        \"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\").build();\n",
        "917": "  private static void assertNotEqualLenient(\n",
        "918": "      TreeSet<?> unexpected, SortedSet<?> actual) {\n"
    }
}