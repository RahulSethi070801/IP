{
    "addition": {
        "122": "   *       <li>{@code x} is infinite or NaN\n",
        "123": "   *       <li>{@code x}, after being rounded to a mathematical integer using the specified rounding\n",
        "124": "   *           mode, is either less than {@code Integer.MIN_VALUE} or greater than {@code\n",
        "125": "   *           Integer.MAX_VALUE}\n",
        "126": "   *       <li>{@code x} is not a mathematical integer and {@code mode} is {@link\n",
        "127": "   *           RoundingMode#UNNECESSARY}\n",
        "146": "   *       <li>{@code x} is infinite or NaN\n",
        "147": "   *       <li>{@code x}, after being rounded to a mathematical integer using the specified rounding\n",
        "148": "   *           mode, is either less than {@code Long.MIN_VALUE} or greater than {@code\n",
        "149": "   *           Long.MAX_VALUE}\n",
        "150": "   *       <li>{@code x} is not a mathematical integer and {@code mode} is {@link\n",
        "151": "   *           RoundingMode#UNNECESSARY}\n",
        "174": "   *       <li>{@code x} is infinite or NaN\n",
        "175": "   *       <li>{@code x} is not a mathematical integer and {@code mode} is {@link\n",
        "176": "   *           RoundingMode#UNNECESSARY}\n",
        "209": "   *\n",
        "211": "   *   <li>If {@code x} is NaN or less than zero, the result is NaN.\n",
        "212": "   *   <li>If {@code x} is positive infinity, the result is positive infinity.\n",
        "213": "   *   <li>If {@code x} is positive or negative zero, the result is negative infinity.\n",
        "218": "   * <p>If the result of this method will be immediately rounded to an {@code int}, {@link\n",
        "219": "   * #log2(double, RoundingMode)} is faster.\n",
        "292": "   * {@code n == 0}, or {@code n!}, or {@link Double#POSITIVE_INFINITY} if {@code n! >\n",
        "293": "   * Double.MAX_VALUE}.\n",
        "368": "   * <p>This method is equivalent to {@code fuzzyEquals(a, b, tolerance) ? 0 : Double.compare(a,\n",
        "369": "   * b)}. In particular, like {@link Double#compare(double, double)}, it treats all NaN values as\n",
        "370": "   * equal and greater than all other values (including {@link Double#POSITIVE_INFINITY}).\n",
        "372": "   * <p>This is <em>not</em> a total ordering and is <em>not</em> suitable for use in {@link\n",
        "373": "   * Comparable#compareTo} implementations. In particular, it is not transitive.\n"
    },
    "removed": {
        "122": "   *     <li>{@code x} is infinite or NaN\n",
        "123": "   *     <li>{@code x}, after being rounded to a mathematical integer using the specified rounding\n",
        "124": "   *         mode, is either less than {@code Integer.MIN_VALUE} or greater than {@code\n",
        "125": "   *         Integer.MAX_VALUE}\n",
        "126": "   *     <li>{@code x} is not a mathematical integer and {@code mode} is\n",
        "127": "   *         {@link RoundingMode#UNNECESSARY}\n",
        "146": "   *     <li>{@code x} is infinite or NaN\n",
        "147": "   *     <li>{@code x}, after being rounded to a mathematical integer using the specified rounding\n",
        "148": "   *         mode, is either less than {@code Long.MIN_VALUE} or greater than {@code\n",
        "149": "   *         Long.MAX_VALUE}\n",
        "150": "   *     <li>{@code x} is not a mathematical integer and {@code mode} is\n",
        "151": "   *         {@link RoundingMode#UNNECESSARY}\n",
        "174": "   *     <li>{@code x} is infinite or NaN\n",
        "175": "   *     <li>{@code x} is not a mathematical integer and {@code mode} is\n",
        "176": "   *         {@link RoundingMode#UNNECESSARY}\n",
        "210": "   * <li>If {@code x} is NaN or less than zero, the result is NaN.\n",
        "211": "   * <li>If {@code x} is positive infinity, the result is positive infinity.\n",
        "212": "   * <li>If {@code x} is positive or negative zero, the result is negative infinity.\n",
        "217": "   * <p>If the result of this method will be immediately rounded to an {@code int},\n",
        "218": "   * {@link #log2(double, RoundingMode)} is faster.\n",
        "291": "   * {@code n == 0}, or {@code n!}, or {@link Double#POSITIVE_INFINITY} if\n",
        "292": "   * {@code n! > Double.MAX_VALUE}.\n",
        "367": "   * <p>This method is equivalent to\n",
        "368": "   * {@code fuzzyEquals(a, b, tolerance) ? 0 : Double.compare(a, b)}. In particular, like\n",
        "369": "   * {@link Double#compare(double, double)}, it treats all NaN values as equal and greater than all\n",
        "370": "   * other values (including {@link Double#POSITIVE_INFINITY}).\n",
        "372": "   * <p>This is <em>not</em> a total ordering and is <em>not</em> suitable for use in\n",
        "373": "   * {@link Comparable#compareTo} implementations. In particular, it is not transitive.\n"
    }
}