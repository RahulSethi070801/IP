{
    "addition": {
        "80": "    suite.addTest(\n",
        "81": "        BiMapTestSuiteBuilder.using(\n",
        "82": "                new TestStringBiMapGenerator() {\n",
        "83": "                  @Override\n",
        "84": "                  protected BiMap<String, String> create(Entry<String, String>[] entries) {\n",
        "85": "                    BiMap<String, String> bimap = HashBiMap.create(entries.length);\n",
        "86": "                    for (Entry<String, String> entry : entries) {\n",
        "87": "                      checkArgument(!bimap.containsKey(entry.getKey()));\n",
        "88": "                      bimap.put(entry.getKey(), entry.getValue());\n",
        "89": "                    }\n",
        "90": "                    return Maps.unmodifiableBiMap(bimap);\n",
        "91": "                  }\n",
        "92": "                })\n",
        "93": "            .named(\"unmodifiableBiMap[HashBiMap]\")\n",
        "94": "            .withFeatures(\n",
        "95": "                CollectionSize.ANY,\n",
        "96": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "97": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "98": "                MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "99": "                MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "100": "                CollectionFeature.SERIALIZABLE)\n",
        "101": "            .createTestSuite());\n",
        "311": "    suite.addTest(\n",
        "312": "        MapTestSuiteBuilder.using(\n",
        "313": "                new TestStringMapGenerator() {\n",
        "314": "                  @Override\n",
        "315": "                  protected Map<String, String> create(Entry<String, String>[] entries) {\n",
        "316": "                    Map<String, String> map = Maps.newHashMap();\n",
        "317": "                    putEntries(map, entries);\n",
        "318": "                    map.putAll(ENTRIES_TO_FILTER);\n",
        "319": "                    return Maps.filterKeys(map, FILTER_KEYS);\n",
        "320": "                  }\n",
        "321": "                })\n",
        "322": "            .named(\"Maps.filterKeys[Map, Predicate]\")\n",
        "323": "            .withFeatures(\n",
        "324": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "325": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "326": "                MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "327": "                MapFeature.GENERAL_PURPOSE,\n",
        "328": "                CollectionSize.ANY)\n",
        "329": "            .createTestSuite());\n",
        "330": "    suite.addTest(\n",
        "331": "        MapTestSuiteBuilder.using(\n",
        "332": "                new TestStringMapGenerator() {\n",
        "333": "                  @Override\n",
        "334": "                  protected Map<String, String> create(Entry<String, String>[] entries) {\n",
        "335": "                    Map<String, String> map = Maps.newHashMap();\n",
        "336": "                    putEntries(map, entries);\n",
        "337": "                    map.putAll(ENTRIES_TO_FILTER);\n",
        "338": "                    return Maps.filterValues(map, FILTER_VALUES);\n",
        "339": "                  }\n",
        "340": "                })\n",
        "341": "            .named(\"Maps.filterValues[Map, Predicate]\")\n",
        "342": "            .withFeatures(\n",
        "343": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "344": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "345": "                MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "346": "                MapFeature.GENERAL_PURPOSE,\n",
        "347": "                CollectionSize.ANY)\n",
        "348": "            .createTestSuite());\n",
        "349": "    suite.addTest(\n",
        "350": "        MapTestSuiteBuilder.using(\n",
        "351": "                new TestStringMapGenerator() {\n",
        "352": "                  @Override\n",
        "353": "                  protected Map<String, String> create(Entry<String, String>[] entries) {\n",
        "354": "                    Map<String, String> map = Maps.newHashMap();\n",
        "355": "                    putEntries(map, entries);\n",
        "356": "                    map.putAll(ENTRIES_TO_FILTER);\n",
        "357": "                    return Maps.filterEntries(map, FILTER_ENTRIES);\n",
        "358": "                  }\n",
        "359": "                })\n",
        "360": "            .named(\"Maps.filterEntries[Map, Predicate]\")\n",
        "361": "            .withFeatures(\n",
        "362": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "363": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "364": "                MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "365": "                MapFeature.GENERAL_PURPOSE,\n",
        "366": "                CollectionSize.ANY)\n",
        "367": "            .createTestSuite());\n",
        "368": "    suite.addTest(\n",
        "369": "        MapTestSuiteBuilder.using(\n",
        "370": "                new TestStringMapGenerator() {\n",
        "371": "                  @Override\n",
        "372": "                  protected Map<String, String> create(Entry<String, String>[] entries) {\n",
        "373": "                    Map<String, String> map = Maps.newHashMap();\n",
        "374": "                    putEntries(map, entries);\n",
        "375": "                    map.putAll(ENTRIES_TO_FILTER);\n",
        "376": "                    map = Maps.filterEntries(map, FILTER_ENTRIES_1);\n",
        "377": "                    return Maps.filterEntries(map, FILTER_ENTRIES_2);\n",
        "378": "                  }\n",
        "379": "                })\n",
        "380": "            .named(\"Maps.filterEntries[Maps.filterEntries[Map, Predicate], Predicate]\")\n",
        "381": "            .withFeatures(\n",
        "382": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "383": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "384": "                MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "385": "                MapFeature.GENERAL_PURPOSE,\n",
        "386": "                CollectionSize.ANY)\n",
        "387": "            .createTestSuite());\n",
        "393": "    suite.addTest(\n",
        "394": "        BiMapTestSuiteBuilder.using(\n",
        "395": "                new TestStringBiMapGenerator() {\n",
        "396": "                  @Override\n",
        "397": "                  protected BiMap<String, String> create(Entry<String, String>[] entries) {\n",
        "398": "                    BiMap<String, String> map = HashBiMap.create();\n",
        "399": "                    putEntries(map, entries);\n",
        "400": "                    map.putAll(ENTRIES_TO_FILTER);\n",
        "401": "                    return Maps.filterKeys(map, FILTER_KEYS);\n",
        "402": "                  }\n",
        "403": "                })\n",
        "404": "            .named(\"Maps.filterKeys[BiMap, Predicate]\")\n",
        "405": "            .withFeatures(\n",
        "406": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "407": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "408": "                MapFeature.GENERAL_PURPOSE,\n",
        "409": "                CollectionSize.ANY)\n",
        "410": "            .createTestSuite());\n",
        "411": "    suite.addTest(\n",
        "412": "        BiMapTestSuiteBuilder.using(\n",
        "413": "                new TestStringBiMapGenerator() {\n",
        "414": "                  @Override\n",
        "415": "                  protected BiMap<String, String> create(Entry<String, String>[] entries) {\n",
        "416": "                    BiMap<String, String> map = HashBiMap.create();\n",
        "417": "                    putEntries(map, entries);\n",
        "418": "                    map.putAll(ENTRIES_TO_FILTER);\n",
        "419": "                    return Maps.filterValues(map, FILTER_VALUES);\n",
        "420": "                  }\n",
        "421": "                })\n",
        "422": "            .named(\"Maps.filterValues[BiMap, Predicate]\")\n",
        "423": "            .withFeatures(\n",
        "424": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "425": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "426": "                MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "427": "                MapFeature.GENERAL_PURPOSE,\n",
        "428": "                CollectionSize.ANY)\n",
        "429": "            .createTestSuite());\n",
        "430": "    suite.addTest(\n",
        "431": "        BiMapTestSuiteBuilder.using(\n",
        "432": "                new TestStringBiMapGenerator() {\n",
        "433": "                  @Override\n",
        "434": "                  protected BiMap<String, String> create(Entry<String, String>[] entries) {\n",
        "435": "                    BiMap<String, String> map = HashBiMap.create();\n",
        "436": "                    putEntries(map, entries);\n",
        "437": "                    map.putAll(ENTRIES_TO_FILTER);\n",
        "438": "                    return Maps.filterEntries(map, FILTER_ENTRIES);\n",
        "439": "                  }\n",
        "440": "                })\n",
        "441": "            .named(\"Maps.filterEntries[BiMap, Predicate]\")\n",
        "442": "            .withFeatures(\n",
        "443": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "444": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "445": "                MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "446": "                MapFeature.GENERAL_PURPOSE,\n",
        "447": "                CollectionSize.ANY)\n",
        "448": "            .createTestSuite());\n",
        "454": "    suite.addTest(\n",
        "455": "        SortedMapTestSuiteBuilder.using(\n",
        "456": "                new TestStringSortedMapGenerator() {\n",
        "457": "                  @Override\n",
        "458": "                  protected SortedMap<String, String> create(Entry<String, String>[] entries) {\n",
        "459": "                    SortedMap<String, String> map = new NonNavigableSortedMap();\n",
        "460": "                    putEntries(map, entries);\n",
        "461": "                    map.putAll(ENTRIES_TO_FILTER);\n",
        "462": "                    return Maps.filterKeys(map, FILTER_KEYS);\n",
        "463": "                  }\n",
        "464": "                })\n",
        "465": "            .named(\"Maps.filterKeys[SortedMap, Predicate]\")\n",
        "466": "            .withFeatures(\n",
        "467": "                MapFeature.ALLOWS_NULL_VALUES, MapFeature.GENERAL_PURPOSE, CollectionSize.ANY)\n",
        "468": "            .createTestSuite());\n",
        "469": "    suite.addTest(\n",
        "470": "        SortedMapTestSuiteBuilder.using(\n",
        "471": "                new TestStringSortedMapGenerator() {\n",
        "472": "                  @Override\n",
        "473": "                  protected SortedMap<String, String> create(Entry<String, String>[] entries) {\n",
        "474": "                    SortedMap<String, String> map = new NonNavigableSortedMap();\n",
        "475": "                    putEntries(map, entries);\n",
        "476": "                    map.putAll(ENTRIES_TO_FILTER);\n",
        "477": "                    return Maps.filterValues(map, FILTER_VALUES);\n",
        "478": "                  }\n",
        "479": "                })\n",
        "480": "            .named(\"Maps.filterValues[SortedMap, Predicate]\")\n",
        "481": "            .withFeatures(\n",
        "482": "                MapFeature.ALLOWS_NULL_VALUES, MapFeature.GENERAL_PURPOSE, CollectionSize.ANY)\n",
        "483": "            .createTestSuite());\n",
        "484": "    suite.addTest(\n",
        "485": "        SortedMapTestSuiteBuilder.using(\n",
        "486": "                new TestStringSortedMapGenerator() {\n",
        "487": "                  @Override\n",
        "488": "                  protected SortedMap<String, String> create(Entry<String, String>[] entries) {\n",
        "489": "                    SortedMap<String, String> map = new NonNavigableSortedMap();\n",
        "490": "                    putEntries(map, entries);\n",
        "491": "                    map.putAll(ENTRIES_TO_FILTER);\n",
        "492": "                    return Maps.filterEntries(map, FILTER_ENTRIES);\n",
        "493": "                  }\n",
        "494": "                })\n",
        "495": "            .named(\"Maps.filterEntries[SortedMap, Predicate]\")\n",
        "496": "            .withFeatures(\n",
        "497": "                MapFeature.ALLOWS_NULL_VALUES, MapFeature.GENERAL_PURPOSE, CollectionSize.ANY)\n",
        "498": "            .createTestSuite());\n",
        "557": "      map.put(entry.getKey(), entry.getValue());\n",
        "558": "    }\n",
        "561": "  static final Predicate<String> FILTER_KEYS =\n",
        "562": "      new Predicate<String>() {\n",
        "563": "        @Override\n",
        "564": "        public boolean apply(@Nullable String string) {\n",
        "565": "          return !\"banana\".equals(string) && !\"eggplant\".equals(string);\n",
        "566": "        }\n",
        "567": "      };\n",
        "569": "  static final Predicate<String> FILTER_VALUES =\n",
        "570": "      new Predicate<String>() {\n",
        "571": "        @Override\n",
        "572": "        public boolean apply(@Nullable String string) {\n",
        "573": "          return !\"toast\".equals(string) && !\"spam\".equals(string);\n",
        "574": "        }\n",
        "575": "      };\n",
        "579": "        @Override\n",
        "580": "        public boolean apply(Entry<String, String> entry) {\n",
        "581": "          return !Helpers.mapEntry(\"banana\", \"toast\").equals(entry)\n",
        "582": "              && !Helpers.mapEntry(\"eggplant\", \"spam\").equals(entry);\n",
        "583": "        }\n",
        "584": "      };\n",
        "588": "        @Override\n",
        "589": "        public boolean apply(Entry<String, String> entry) {\n",
        "590": "          return !Helpers.mapEntry(\"banana\", \"toast\").equals(entry);\n",
        "591": "        }\n",
        "592": "      };\n",
        "596": "        @Override\n",
        "597": "        public boolean apply(Entry<String, String> entry) {\n",
        "598": "          return !Helpers.mapEntry(\"eggplant\", \"spam\").equals(entry);\n",
        "599": "        }\n",
        "600": "      };\n",
        "607": "        @Override\n",
        "608": "        public boolean apply(Entry<String, String> entry) {\n",
        "609": "          return entry.getKey() != null && entry.getValue() != null;\n",
        "610": "        }\n",
        "611": "      };\n",
        "613": "  private static class NonNavigableSortedSet extends ForwardingSortedSet<String> {\n",
        "623": "  private static class NonNavigableSortedMap extends ForwardingSortedMap<String, String> {\n",
        "637": "  private static final Function<String, String> DECODE_FUNCTION =\n",
        "638": "      new Function<String, String>() {\n",
        "639": "        @Override\n",
        "640": "        public String apply(String input) {\n",
        "641": "          return new String(BaseEncoding.base64().decode(input), Charsets.UTF_8);\n",
        "642": "        }\n",
        "643": "      };\n",
        "647": "        @Override\n",
        "648": "        public String transformEntry(String key, String value) {\n",
        "649": "          return DECODE_FUNCTION.apply(value);\n",
        "650": "        }\n",
        "651": "      };\n",
        "663": "    suite.addTest(\n",
        "664": "        MapTestSuiteBuilder.using(\n",
        "665": "                new TestStringMapGenerator() {\n",
        "666": "                  @Override\n",
        "667": "                  protected Map<String, String> create(Entry<String, String>[] entries) {\n",
        "668": "                    Map<String, String> map = Maps.newLinkedHashMap();\n",
        "669": "                    for (Entry<String, String> entry : entries) {\n",
        "670": "                      map.put(entry.getKey(), encode(entry.getValue()));\n",
        "671": "                    }\n",
        "672": "                    return Maps.transformValues(map, DECODE_FUNCTION);\n",
        "673": "                  }\n",
        "674": "                })\n",
        "675": "            .named(\"Maps.transformValues[Map, Function]\")\n",
        "676": "            .withFeatures(\n",
        "677": "                CollectionSize.ANY,\n",
        "678": "                CollectionFeature.KNOWN_ORDER,\n",
        "679": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "680": "                MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "681": "                MapFeature.SUPPORTS_REMOVE,\n",
        "682": "                CollectionFeature.SUPPORTS_ITERATOR_REMOVE)\n",
        "683": "            .createTestSuite());\n",
        "684": "    suite.addTest(\n",
        "685": "        MapTestSuiteBuilder.using(\n",
        "686": "                new TestStringMapGenerator() {\n",
        "687": "                  @Override\n",
        "688": "                  protected Map<String, String> create(Entry<String, String>[] entries) {\n",
        "689": "                    Map<String, String> map = Maps.newLinkedHashMap();\n",
        "690": "                    for (Entry<String, String> entry : entries) {\n",
        "691": "                      map.put(entry.getKey(), encode(entry.getValue()));\n",
        "692": "                    }\n",
        "693": "                    return Maps.transformEntries(map, DECODE_ENTRY_TRANSFORMER);\n",
        "694": "                  }\n",
        "695": "                })\n",
        "696": "            .named(\"Maps.transformEntries[Map, EntryTransformer]\")\n",
        "697": "            .withFeatures(\n",
        "698": "                CollectionSize.ANY,\n",
        "699": "                CollectionFeature.KNOWN_ORDER,\n",
        "700": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "701": "                MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "702": "                MapFeature.SUPPORTS_REMOVE,\n",
        "703": "                CollectionFeature.SUPPORTS_ITERATOR_REMOVE)\n",
        "704": "            .createTestSuite());\n",
        "710": "    suite.addTest(\n",
        "711": "        SortedMapTestSuiteBuilder.using(\n",
        "712": "                new TestStringSortedMapGenerator() {\n",
        "713": "                  @Override\n",
        "714": "                  protected SortedMap<String, String> create(Entry<String, String>[] entries) {\n",
        "715": "                    SortedMap<String, String> map = new NonNavigableSortedMap();\n",
        "716": "                    for (Entry<String, String> entry : entries) {\n",
        "717": "                      map.put(entry.getKey(), encode(entry.getValue()));\n",
        "718": "                    }\n",
        "719": "                    return Maps.transformValues(map, DECODE_FUNCTION);\n",
        "720": "                  }\n",
        "721": "                })\n",
        "722": "            .named(\"Maps.transformValues[SortedMap, Function]\")\n",
        "723": "            .withFeatures(\n",
        "724": "                CollectionSize.ANY,\n",
        "725": "                CollectionFeature.KNOWN_ORDER,\n",
        "726": "                MapFeature.SUPPORTS_REMOVE,\n",
        "727": "                CollectionFeature.SUPPORTS_ITERATOR_REMOVE)\n",
        "728": "            .createTestSuite());\n",
        "729": "    suite.addTest(\n",
        "730": "        SortedMapTestSuiteBuilder.using(\n",
        "731": "                new TestStringSortedMapGenerator() {\n",
        "732": "                  @Override\n",
        "733": "                  protected SortedMap<String, String> create(Entry<String, String>[] entries) {\n",
        "734": "                    SortedMap<String, String> map = new NonNavigableSortedMap();\n",
        "735": "                    for (Entry<String, String> entry : entries) {\n",
        "736": "                      map.put(entry.getKey(), encode(entry.getValue()));\n",
        "737": "                    }\n",
        "738": "                    return Maps.transformEntries(map, DECODE_ENTRY_TRANSFORMER);\n",
        "739": "                  }\n",
        "740": "                })\n",
        "741": "            .named(\"Maps.transformEntries[SortedMap, EntryTransformer]\")\n",
        "742": "            .withFeatures(\n",
        "743": "                CollectionSize.ANY,\n",
        "744": "                CollectionFeature.KNOWN_ORDER,\n",
        "745": "                MapFeature.SUPPORTS_REMOVE,\n",
        "746": "                CollectionFeature.SUPPORTS_ITERATOR_REMOVE)\n",
        "747": "            .createTestSuite());\n"
    },
    "removed": {
        "79": "    suite.addTest(BiMapTestSuiteBuilder\n",
        "80": "        .using(new TestStringBiMapGenerator() {\n",
        "81": "          @Override\n",
        "82": "          protected BiMap<String, String> create(Entry<String, String>[] entries) {\n",
        "83": "            BiMap<String, String> bimap = HashBiMap.create(entries.length);\n",
        "84": "            for (Entry<String, String> entry : entries) {\n",
        "85": "              checkArgument(!bimap.containsKey(entry.getKey()));\n",
        "86": "              bimap.put(entry.getKey(), entry.getValue());\n",
        "87": "            }\n",
        "88": "            return Maps.unmodifiableBiMap(bimap);\n",
        "89": "          }\n",
        "90": "        })\n",
        "91": "        .named(\"unmodifiableBiMap[HashBiMap]\")\n",
        "92": "        .withFeatures(\n",
        "93": "            CollectionSize.ANY,\n",
        "94": "            MapFeature.ALLOWS_NULL_VALUES,\n",
        "95": "            MapFeature.ALLOWS_NULL_KEYS,\n",
        "96": "            MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "97": "            MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "98": "            CollectionFeature.SERIALIZABLE)\n",
        "99": "        .createTestSuite());\n",
        "309": "    suite.addTest(MapTestSuiteBuilder.using(new TestStringMapGenerator() {\n",
        "310": "        @Override\n",
        "311": "        protected Map<String, String> create(Entry<String, String>[] entries) {\n",
        "312": "          Map<String, String> map = Maps.newHashMap();\n",
        "313": "          putEntries(map, entries);\n",
        "314": "          map.putAll(ENTRIES_TO_FILTER);\n",
        "315": "          return Maps.filterKeys(map, FILTER_KEYS);\n",
        "316": "        }\n",
        "317": "      })\n",
        "318": "      .named(\"Maps.filterKeys[Map, Predicate]\")\n",
        "319": "      .withFeatures(\n",
        "320": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "321": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "322": "          MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "323": "          MapFeature.GENERAL_PURPOSE,\n",
        "324": "          CollectionSize.ANY)\n",
        "325": "      .createTestSuite());\n",
        "326": "    suite.addTest(MapTestSuiteBuilder.using(new TestStringMapGenerator() {\n",
        "327": "        @Override\n",
        "328": "        protected Map<String, String> create(Entry<String, String>[] entries) {\n",
        "329": "          Map<String, String> map = Maps.newHashMap();\n",
        "330": "          putEntries(map, entries);\n",
        "331": "          map.putAll(ENTRIES_TO_FILTER);\n",
        "332": "          return Maps.filterValues(map, FILTER_VALUES);\n",
        "333": "        }\n",
        "334": "      })\n",
        "335": "      .named(\"Maps.filterValues[Map, Predicate]\")\n",
        "336": "      .withFeatures(\n",
        "337": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "338": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "339": "          MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "340": "          MapFeature.GENERAL_PURPOSE,\n",
        "341": "          CollectionSize.ANY)\n",
        "342": "      .createTestSuite());\n",
        "343": "    suite.addTest(MapTestSuiteBuilder.using(new TestStringMapGenerator() {\n",
        "344": "        @Override\n",
        "345": "        protected Map<String, String> create(Entry<String, String>[] entries) {\n",
        "346": "          Map<String, String> map = Maps.newHashMap();\n",
        "347": "          putEntries(map, entries);\n",
        "348": "           map.putAll(ENTRIES_TO_FILTER);\n",
        "349": "          return Maps.filterEntries(map, FILTER_ENTRIES);\n",
        "350": "        }\n",
        "351": "      })\n",
        "352": "      .named(\"Maps.filterEntries[Map, Predicate]\")\n",
        "353": "      .withFeatures(\n",
        "354": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "355": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "356": "          MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "357": "          MapFeature.GENERAL_PURPOSE,\n",
        "358": "          CollectionSize.ANY)\n",
        "359": "      .createTestSuite());\n",
        "360": "    suite.addTest(MapTestSuiteBuilder.using(new TestStringMapGenerator() {\n",
        "361": "        @Override\n",
        "362": "        protected Map<String, String> create(Entry<String, String>[] entries) {\n",
        "363": "          Map<String, String> map = Maps.newHashMap();\n",
        "364": "          putEntries(map, entries);\n",
        "365": "          map.putAll(ENTRIES_TO_FILTER);\n",
        "366": "          map = Maps.filterEntries(map, FILTER_ENTRIES_1);\n",
        "367": "          return Maps.filterEntries(map, FILTER_ENTRIES_2);\n",
        "368": "        }\n",
        "369": "      })\n",
        "370": "      .named(\"Maps.filterEntries[Maps.filterEntries[Map, Predicate], Predicate]\")\n",
        "371": "      .withFeatures(\n",
        "372": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "373": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "374": "          MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "375": "          MapFeature.GENERAL_PURPOSE,\n",
        "376": "          CollectionSize.ANY)\n",
        "377": "      .createTestSuite());\n",
        "383": "    suite.addTest(BiMapTestSuiteBuilder.using(new TestStringBiMapGenerator() {\n",
        "384": "        @Override\n",
        "385": "        protected BiMap<String, String> create(Entry<String, String>[] entries) {\n",
        "386": "          BiMap<String, String> map = HashBiMap.create();\n",
        "387": "          putEntries(map, entries);\n",
        "388": "          map.putAll(ENTRIES_TO_FILTER);\n",
        "389": "          return Maps.filterKeys(map, FILTER_KEYS);\n",
        "390": "        }\n",
        "391": "      })\n",
        "392": "      .named(\"Maps.filterKeys[BiMap, Predicate]\")\n",
        "393": "      .withFeatures(\n",
        "394": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "395": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "396": "          MapFeature.GENERAL_PURPOSE,\n",
        "397": "          CollectionSize.ANY)\n",
        "398": "      .createTestSuite());\n",
        "399": "    suite.addTest(BiMapTestSuiteBuilder.using(new TestStringBiMapGenerator() {\n",
        "400": "        @Override\n",
        "401": "        protected BiMap<String, String> create(Entry<String, String>[] entries) {\n",
        "402": "          BiMap<String, String> map = HashBiMap.create();\n",
        "403": "          putEntries(map, entries);\n",
        "404": "          map.putAll(ENTRIES_TO_FILTER);\n",
        "405": "          return Maps.filterValues(map, FILTER_VALUES);\n",
        "406": "        }\n",
        "407": "      })\n",
        "408": "      .named(\"Maps.filterValues[BiMap, Predicate]\")\n",
        "409": "      .withFeatures(\n",
        "410": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "411": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "412": "          MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "413": "          MapFeature.GENERAL_PURPOSE,\n",
        "414": "          CollectionSize.ANY)\n",
        "415": "      .createTestSuite());\n",
        "416": "    suite.addTest(BiMapTestSuiteBuilder.using(new TestStringBiMapGenerator() {\n",
        "417": "        @Override\n",
        "418": "        protected BiMap<String, String> create(Entry<String, String>[] entries) {\n",
        "419": "          BiMap<String, String> map = HashBiMap.create();\n",
        "420": "          putEntries(map, entries);\n",
        "421": "          map.putAll(ENTRIES_TO_FILTER);\n",
        "422": "          return Maps.filterEntries(map, FILTER_ENTRIES);\n",
        "423": "        }\n",
        "424": "      })\n",
        "425": "      .named(\"Maps.filterEntries[BiMap, Predicate]\")\n",
        "426": "      .withFeatures(\n",
        "427": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "428": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "429": "          MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "430": "          MapFeature.GENERAL_PURPOSE,\n",
        "431": "          CollectionSize.ANY)\n",
        "432": "      .createTestSuite());\n",
        "438": "    suite.addTest(SortedMapTestSuiteBuilder.using(new TestStringSortedMapGenerator() {\n",
        "439": "        @Override\n",
        "440": "        protected SortedMap<String, String> create(Entry<String, String>[] entries) {\n",
        "441": "          SortedMap<String, String> map = new NonNavigableSortedMap();\n",
        "442": "          putEntries(map, entries);\n",
        "443": "          map.putAll(ENTRIES_TO_FILTER);\n",
        "444": "         return Maps.filterKeys(map, FILTER_KEYS);\n",
        "445": "        }\n",
        "446": "      })\n",
        "447": "      .named(\"Maps.filterKeys[SortedMap, Predicate]\")\n",
        "448": "      .withFeatures(\n",
        "449": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "450": "          MapFeature.GENERAL_PURPOSE,\n",
        "451": "          CollectionSize.ANY)\n",
        "452": "      .createTestSuite());\n",
        "453": "    suite.addTest(SortedMapTestSuiteBuilder.using(new TestStringSortedMapGenerator() {\n",
        "454": "        @Override\n",
        "455": "        protected SortedMap<String, String> create(Entry<String, String>[] entries) {\n",
        "456": "          SortedMap<String, String> map = new NonNavigableSortedMap();\n",
        "457": "          putEntries(map, entries);\n",
        "458": "          map.putAll(ENTRIES_TO_FILTER);\n",
        "459": "          return Maps.filterValues(map, FILTER_VALUES);\n",
        "460": "        }\n",
        "461": "      })\n",
        "462": "      .named(\"Maps.filterValues[SortedMap, Predicate]\")\n",
        "463": "      .withFeatures(\n",
        "464": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "465": "          MapFeature.GENERAL_PURPOSE,\n",
        "466": "          CollectionSize.ANY)\n",
        "467": "      .createTestSuite());\n",
        "468": "    suite.addTest(SortedMapTestSuiteBuilder.using(new TestStringSortedMapGenerator() {\n",
        "469": "        @Override\n",
        "470": "        protected SortedMap<String, String> create(Entry<String, String>[] entries) {\n",
        "471": "          SortedMap<String, String> map = new NonNavigableSortedMap();\n",
        "472": "          putEntries(map, entries);\n",
        "473": "          map.putAll(ENTRIES_TO_FILTER);\n",
        "474": "          return Maps.filterEntries(map, FILTER_ENTRIES);\n",
        "475": "        }\n",
        "476": "      })\n",
        "477": "      .named(\"Maps.filterEntries[SortedMap, Predicate]\")\n",
        "478": "      .withFeatures(\n",
        "479": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "480": "          MapFeature.GENERAL_PURPOSE,\n",
        "481": "          CollectionSize.ANY)\n",
        "482": "      .createTestSuite());\n",
        "541": "       map.put(entry.getKey(), entry.getValue());\n",
        "542": "     }\n",
        "545": "  static final Predicate<String> FILTER_KEYS = new Predicate<String>() {\n",
        "546": "    @Override\n",
        "547": "    public boolean apply(@Nullable String string) {\n",
        "548": "      return !\"banana\".equals(string) && !\"eggplant\".equals(string);\n",
        "549": "    }\n",
        "550": "  };\n",
        "552": "  static final Predicate<String> FILTER_VALUES = new Predicate<String>() {\n",
        "553": "    @Override\n",
        "554": "    public boolean apply(@Nullable String string) {\n",
        "555": "      return !\"toast\".equals(string) && !\"spam\".equals(string);\n",
        "556": "    }\n",
        "557": "  };\n",
        "561": "    @Override\n",
        "562": "    public boolean apply(Entry<String, String> entry) {\n",
        "563": "      return !Helpers.mapEntry(\"banana\", \"toast\").equals(entry)\n",
        "564": "          && !Helpers.mapEntry(\"eggplant\", \"spam\").equals(entry);\n",
        "565": "    }\n",
        "566": "  };\n",
        "570": "    @Override\n",
        "571": "    public boolean apply(Entry<String, String> entry) {\n",
        "572": "      return !Helpers.mapEntry(\"banana\", \"toast\").equals(entry);\n",
        "573": "    }\n",
        "574": "  };\n",
        "578": "    @Override\n",
        "579": "    public boolean apply(Entry<String, String> entry) {\n",
        "580": "      return !Helpers.mapEntry(\"eggplant\", \"spam\").equals(entry);\n",
        "581": "    }\n",
        "582": "  };\n",
        "589": "    @Override\n",
        "590": "    public boolean apply(Entry<String, String> entry) {\n",
        "591": "      return entry.getKey() != null && entry.getValue() != null;\n",
        "592": "    }\n",
        "593": "  };\n",
        "595": "  private static class NonNavigableSortedSet\n",
        "596": "      extends ForwardingSortedSet<String> {\n",
        "606": "  private static class NonNavigableSortedMap\n",
        "607": "      extends ForwardingSortedMap<String, String> {\n",
        "621": "  private static final Function<String, String> DECODE_FUNCTION = new Function<String, String>() {\n",
        "622": "    @Override\n",
        "623": "    public String apply(String input) {\n",
        "624": "      return new String(BaseEncoding.base64().decode(input), Charsets.UTF_8);\n",
        "625": "    }\n",
        "626": "  };\n",
        "630": "    @Override\n",
        "631": "    public String transformEntry(String key, String value) {\n",
        "632": "      return DECODE_FUNCTION.apply(value);\n",
        "633": "    }\n",
        "634": "  };\n",
        "646": "    suite.addTest(MapTestSuiteBuilder.using(new TestStringMapGenerator() {\n",
        "647": "        @Override\n",
        "648": "        protected Map<String, String> create(Entry<String, String>[] entries) {\n",
        "649": "          Map<String, String> map = Maps.newLinkedHashMap();\n",
        "650": "          for (Entry<String, String> entry : entries) {\n",
        "651": "            map.put(entry.getKey(), encode(entry.getValue()));\n",
        "652": "          }\n",
        "653": "          return Maps.transformValues(map, DECODE_FUNCTION);\n",
        "654": "        }\n",
        "655": "      })\n",
        "656": "      .named(\"Maps.transformValues[Map, Function]\")\n",
        "657": "      .withFeatures(\n",
        "658": "          CollectionSize.ANY,\n",
        "659": "          CollectionFeature.KNOWN_ORDER,\n",
        "660": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "661": "          MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "662": "          MapFeature.SUPPORTS_REMOVE,\n",
        "663": "          CollectionFeature.SUPPORTS_ITERATOR_REMOVE)\n",
        "664": "      .createTestSuite());\n",
        "665": "    suite.addTest(MapTestSuiteBuilder.using(new TestStringMapGenerator() {\n",
        "666": "        @Override\n",
        "667": "        protected Map<String, String> create(Entry<String, String>[] entries) {\n",
        "668": "          Map<String, String> map = Maps.newLinkedHashMap();\n",
        "669": "          for (Entry<String, String> entry : entries) {\n",
        "670": "            map.put(entry.getKey(), encode(entry.getValue()));\n",
        "671": "          }\n",
        "672": "          return Maps.transformEntries(map, DECODE_ENTRY_TRANSFORMER);\n",
        "673": "        }\n",
        "674": "      })\n",
        "675": "      .named(\"Maps.transformEntries[Map, EntryTransformer]\")\n",
        "676": "      .withFeatures(\n",
        "677": "          CollectionSize.ANY,\n",
        "678": "          CollectionFeature.KNOWN_ORDER,\n",
        "679": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "680": "          MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "681": "          MapFeature.SUPPORTS_REMOVE,\n",
        "682": "          CollectionFeature.SUPPORTS_ITERATOR_REMOVE)\n",
        "683": "      .createTestSuite());\n",
        "689": "    suite.addTest(SortedMapTestSuiteBuilder.using(new TestStringSortedMapGenerator() {\n",
        "690": "        @Override\n",
        "691": "        protected SortedMap<String, String> create(Entry<String, String>[] entries) {\n",
        "692": "          SortedMap<String, String> map = new NonNavigableSortedMap();\n",
        "693": "          for (Entry<String, String> entry : entries) {\n",
        "694": "            map.put(entry.getKey(), encode(entry.getValue()));\n",
        "695": "          }\n",
        "696": "          return Maps.transformValues(map, DECODE_FUNCTION);\n",
        "697": "        }\n",
        "698": "      })\n",
        "699": "      .named(\"Maps.transformValues[SortedMap, Function]\")\n",
        "700": "      .withFeatures(\n",
        "701": "          CollectionSize.ANY,\n",
        "702": "          CollectionFeature.KNOWN_ORDER,\n",
        "703": "          MapFeature.SUPPORTS_REMOVE,\n",
        "704": "          CollectionFeature.SUPPORTS_ITERATOR_REMOVE)\n",
        "705": "      .createTestSuite());\n",
        "706": "    suite.addTest(SortedMapTestSuiteBuilder.using(new TestStringSortedMapGenerator() {\n",
        "707": "        @Override\n",
        "708": "        protected SortedMap<String, String> create(Entry<String, String>[] entries) {\n",
        "709": "          SortedMap<String, String> map = new NonNavigableSortedMap();\n",
        "710": "          for (Entry<String, String> entry : entries) {\n",
        "711": "            map.put(entry.getKey(), encode(entry.getValue()));\n",
        "712": "          }\n",
        "713": "          return Maps.transformEntries(map, DECODE_ENTRY_TRANSFORMER);\n",
        "714": "        }\n",
        "715": "      })\n",
        "716": "      .named(\"Maps.transformEntries[SortedMap, EntryTransformer]\")\n",
        "717": "      .withFeatures(\n",
        "718": "          CollectionSize.ANY,\n",
        "719": "          CollectionFeature.KNOWN_ORDER,\n",
        "720": "          MapFeature.SUPPORTS_REMOVE,\n",
        "721": "          CollectionFeature.SUPPORTS_ITERATOR_REMOVE)\n",
        "722": "      .createTestSuite());\n"
    }
}