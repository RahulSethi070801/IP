{
    "addition": {
        "34": " * A benchmark comparing the {@link MoreExecutors#newDirectExecutorService()} to {@link\n",
        "35": " * MoreExecutors#directExecutor}.\n",
        "41": "      @Override\n",
        "42": "      Executor executor() {\n",
        "47": "      @Override\n",
        "48": "      Executor executor() {\n",
        "61": "\n",
        "62": "    @Override\n",
        "63": "    public void run() {\n",
        "72": "  @BeforeExperiment\n",
        "73": "  void before() {\n",
        "76": "      Thread thread =\n",
        "77": "          new Thread() {\n",
        "78": "            @Override\n",
        "79": "            public void run() {\n",
        "80": "              CountingRunnable localRunnable = new CountingRunnable();\n",
        "81": "              while (!isInterrupted()) {\n",
        "82": "                executor.execute(localRunnable);\n",
        "83": "              }\n",
        "84": "              countingRunnable.integer.addAndGet(localRunnable.integer.get());\n",
        "85": "            }\n",
        "86": "          };\n",
        "91": "  @AfterExperiment\n",
        "92": "  void after() {\n",
        "94": "      thread.interrupt(); // try to get them to exit\n",
        "99": "  @Footprint\n",
        "100": "  Object measureSize() {\n",
        "104": "  @Benchmark\n",
        "105": "  int timeUncontendedExecute(int reps) {\n",
        "114": "  @Benchmark\n",
        "115": "  int timeContendedExecute(int reps) {\n"
    },
    "removed": {
        "34": " * A benchmark comparing the {@link MoreExecutors#newDirectExecutorService()} to\n",
        "35": " * {@link MoreExecutors#directExecutor}.\n",
        "41": "      @Override Executor executor() {\n",
        "46": "      @Override Executor executor() {\n",
        "58": "    @Override public void run() {\n",
        "67": "  @BeforeExperiment void before() {\n",
        "70": "      Thread thread = new Thread() {\n",
        "71": "        @Override public void run() {\n",
        "72": "          CountingRunnable localRunnable = new CountingRunnable();\n",
        "73": "          while (!isInterrupted()) {\n",
        "74": "            executor.execute(localRunnable);\n",
        "75": "          }\n",
        "76": "          countingRunnable.integer.addAndGet(localRunnable.integer.get());\n",
        "77": "        }\n",
        "78": "      };\n",
        "83": "  @AfterExperiment void after() {\n",
        "85": "      thread.interrupt();  // try to get them to exit\n",
        "90": "  @Footprint Object measureSize() {\n",
        "94": "  @Benchmark int timeUncontendedExecute(int reps) {\n",
        "103": "  @Benchmark int timeContendedExecute(int reps) {\n"
    }
}