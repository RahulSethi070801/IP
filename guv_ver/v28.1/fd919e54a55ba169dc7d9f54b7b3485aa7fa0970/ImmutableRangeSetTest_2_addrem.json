{
    "addition": {
        "104": "    suite.addTest(\n",
        "105": "        NavigableSetTestSuiteBuilder.using(new ImmutableRangeSetIntegerAsSetGenerator())\n",
        "106": "            .named(\"ImmutableRangeSet.asSet[DiscreteDomain.integers[]]\")\n",
        "107": "            .withFeatures(\n",
        "108": "                CollectionSize.ANY,\n",
        "109": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "110": "                CollectionFeature.ALLOWS_NULL_QUERIES,\n",
        "111": "                CollectionFeature.KNOWN_ORDER,\n",
        "112": "                CollectionFeature.NON_STANDARD_TOSTRING,\n",
        "113": "                CollectionFeature.SERIALIZABLE)\n",
        "114": "            .createTestSuite());\n",
        "115": "\n",
        "116": "    suite.addTest(\n",
        "117": "        NavigableSetTestSuiteBuilder.using(new ImmutableRangeSetBigIntegerAsSetGenerator())\n",
        "118": "            .named(\"ImmutableRangeSet.asSet[DiscreteDomain.bigIntegers[]]\")\n",
        "119": "            .withFeatures(\n",
        "120": "                CollectionSize.ANY,\n",
        "121": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "122": "                CollectionFeature.ALLOWS_NULL_QUERIES,\n",
        "123": "                CollectionFeature.KNOWN_ORDER,\n",
        "124": "                CollectionFeature.NON_STANDARD_TOSTRING,\n",
        "125": "                CollectionFeature.SERIALIZABLE)\n",
        "126": "            .createTestSuite());\n",
        "229": "    ImmutableRangeSet<Integer> rangeSet =\n",
        "230": "        ImmutableRangeSet.<Integer>builder()\n",
        "231": "            .add(Range.closed(5, 8))\n",
        "232": "            .add(Range.closedOpen(1, 3))\n",
        "233": "            .build();\n",
        "236": "        .containsExactly(Range.closedOpen(1, 3), Range.closed(5, 8))\n",
        "237": "        .inOrder();\n",
        "250": "    RangeSet<Integer> expectedComplement =\n",
        "251": "        ImmutableRangeSet.<Integer>builder()\n",
        "252": "            .add(Range.lessThan(1))\n",
        "253": "            .add(Range.closedOpen(3, 5))\n",
        "254": "            .add(Range.greaterThan(8))\n",
        "255": "            .build();\n",
        "261": "    ImmutableRangeSet<Integer> rangeSet =\n",
        "262": "        ImmutableRangeSet.<Integer>builder()\n",
        "263": "            .add(Range.greaterThan(6))\n",
        "264": "            .add(Range.closedOpen(1, 3))\n",
        "265": "            .build();\n",
        "268": "        .containsExactly(Range.closedOpen(1, 3), Range.greaterThan(6))\n",
        "269": "        .inOrder();\n",
        "282": "    RangeSet<Integer> expectedComplement =\n",
        "283": "        ImmutableRangeSet.<Integer>builder().add(Range.lessThan(1)).add(Range.closed(3, 6)).build();\n",
        "289": "    ImmutableRangeSet<Integer> rangeSet =\n",
        "290": "        ImmutableRangeSet.<Integer>builder()\n",
        "291": "            .add(Range.atMost(0))\n",
        "292": "            .add(Range.closedOpen(2, 5))\n",
        "293": "            .build();\n",
        "296": "        .containsExactly(Range.atMost(0), Range.closedOpen(2, 5))\n",
        "297": "        .inOrder();\n",
        "310": "    RangeSet<Integer> expectedComplement =\n",
        "311": "        ImmutableRangeSet.<Integer>builder().add(Range.open(0, 2)).add(Range.atLeast(5)).build();\n",
        "386": "    ImmutableSet<Range<Integer>> ranges =\n",
        "387": "        ImmutableSet.of(\n",
        "388": "            Range.<Integer>all(),\n",
        "389": "            Range.<Integer>closedOpen(3, 5),\n",
        "390": "            Range.singleton(1),\n",
        "391": "            Range.lessThan(2),\n",
        "392": "            Range.greaterThan(10),\n",
        "393": "            Range.atMost(4),\n",
        "394": "            Range.atLeast(3),\n",
        "395": "            Range.closed(4, 6),\n",
        "396": "            Range.closedOpen(1, 3),\n",
        "397": "            Range.openClosed(5, 7),\n",
        "398": "            Range.open(3, 4));\n",
        "399": "    subsets:\n",
        "400": "    for (Set<Range<Integer>> subset : Sets.powerSet(ranges)) {\n",
        "538": "        assertEquals(expectedSet.subSet(i, false, j, false), asSet.subSet(i, false, j, false));\n",
        "539": "        assertEquals(expectedSet.subSet(i, true, j, false), asSet.subSet(i, true, j, false));\n",
        "540": "        assertEquals(expectedSet.subSet(i, false, j, true), asSet.subSet(i, false, j, true));\n",
        "541": "        assertEquals(expectedSet.subSet(i, true, j, true), asSet.subSet(i, true, j, true));\n",
        "571": "          ImmutableRangeSet<Integer> rangeSet =\n",
        "572": "              ImmutableRangeSet.<Integer>builder().add(range1).add(range2).build();\n"
    },
    "removed": {
        "104": "    suite.addTest(NavigableSetTestSuiteBuilder.using(new ImmutableRangeSetIntegerAsSetGenerator())\n",
        "105": "        .named(\"ImmutableRangeSet.asSet[DiscreteDomain.integers[]]\")\n",
        "106": "        .withFeatures(\n",
        "107": "            CollectionSize.ANY,\n",
        "108": "            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "109": "            CollectionFeature.ALLOWS_NULL_QUERIES,\n",
        "110": "            CollectionFeature.KNOWN_ORDER,\n",
        "111": "            CollectionFeature.NON_STANDARD_TOSTRING,\n",
        "112": "            CollectionFeature.SERIALIZABLE)\n",
        "113": "        .createTestSuite());\n",
        "114": "\n",
        "115": "    suite.addTest(NavigableSetTestSuiteBuilder.using(\n",
        "116": "          new ImmutableRangeSetBigIntegerAsSetGenerator())\n",
        "117": "        .named(\"ImmutableRangeSet.asSet[DiscreteDomain.bigIntegers[]]\")\n",
        "118": "        .withFeatures(\n",
        "119": "            CollectionSize.ANY,\n",
        "120": "            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "121": "            CollectionFeature.ALLOWS_NULL_QUERIES,\n",
        "122": "            CollectionFeature.KNOWN_ORDER,\n",
        "123": "            CollectionFeature.NON_STANDARD_TOSTRING,\n",
        "124": "            CollectionFeature.SERIALIZABLE)\n",
        "125": "        .createTestSuite());\n",
        "228": "    ImmutableRangeSet<Integer> rangeSet = ImmutableRangeSet.<Integer>builder()\n",
        "229": "        .add(Range.closed(5, 8)).add(Range.closedOpen(1, 3)).build();\n",
        "232": "        .containsExactly(Range.closedOpen(1, 3), Range.closed(5, 8)).inOrder();\n",
        "245": "    RangeSet<Integer> expectedComplement = ImmutableRangeSet.<Integer>builder()\n",
        "246": "        .add(Range.lessThan(1))\n",
        "247": "        .add(Range.closedOpen(3, 5))\n",
        "248": "        .add(Range.greaterThan(8))\n",
        "249": "        .build();\n",
        "255": "    ImmutableRangeSet<Integer> rangeSet = ImmutableRangeSet.<Integer>builder()\n",
        "256": "        .add(Range.greaterThan(6)).add(Range.closedOpen(1, 3)).build();\n",
        "259": "        .containsExactly(Range.closedOpen(1, 3), Range.greaterThan(6)).inOrder();\n",
        "272": "    RangeSet<Integer> expectedComplement = ImmutableRangeSet.<Integer>builder()\n",
        "273": "        .add(Range.lessThan(1))\n",
        "274": "        .add(Range.closed(3, 6))\n",
        "275": "        .build();\n",
        "281": "    ImmutableRangeSet<Integer> rangeSet = ImmutableRangeSet.<Integer>builder()\n",
        "282": "        .add(Range.atMost(0)).add(Range.closedOpen(2, 5)).build();\n",
        "285": "        .containsExactly(Range.atMost(0), Range.closedOpen(2, 5)).inOrder();\n",
        "298": "    RangeSet<Integer> expectedComplement = ImmutableRangeSet.<Integer>builder()\n",
        "299": "        .add(Range.open(0, 2))\n",
        "300": "        .add(Range.atLeast(5))\n",
        "301": "        .build();\n",
        "376": "    ImmutableSet<Range<Integer>> ranges = ImmutableSet.of(\n",
        "377": "        Range.<Integer>all(),\n",
        "378": "        Range.<Integer>closedOpen(3, 5),\n",
        "379": "        Range.singleton(1),\n",
        "380": "        Range.lessThan(2),\n",
        "381": "        Range.greaterThan(10),\n",
        "382": "        Range.atMost(4),\n",
        "383": "        Range.atLeast(3),\n",
        "384": "        Range.closed(4, 6),\n",
        "385": "        Range.closedOpen(1, 3),\n",
        "386": "        Range.openClosed(5, 7),\n",
        "387": "        Range.open(3, 4));\n",
        "388": "    subsets: for (Set<Range<Integer>> subset : Sets.powerSet(ranges)) {\n",
        "526": "        assertEquals(expectedSet.subSet(i, false, j, false),\n",
        "527": "            asSet.subSet(i, false, j, false));\n",
        "528": "        assertEquals(expectedSet.subSet(i, true, j, false),\n",
        "529": "            asSet.subSet(i, true, j, false));\n",
        "530": "        assertEquals(expectedSet.subSet(i, false, j, true),\n",
        "531": "            asSet.subSet(i, false, j, true));\n",
        "532": "        assertEquals(expectedSet.subSet(i, true, j, true),\n",
        "533": "            asSet.subSet(i, true, j, true));\n",
        "563": "          ImmutableRangeSet<Integer> rangeSet = ImmutableRangeSet.<Integer>builder()\n",
        "564": "              .add(range1)\n",
        "565": "              .add(range2)\n",
        "566": "              .build();\n"
    }
}