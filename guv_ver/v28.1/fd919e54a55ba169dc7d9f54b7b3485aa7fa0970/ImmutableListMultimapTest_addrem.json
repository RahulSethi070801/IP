{
    "addition": {
        "70": "    suite.addTest(\n",
        "71": "        ListMultimapTestSuiteBuilder.using(new ImmutableListMultimapGenerator())\n",
        "72": "            .named(\"ImmutableListMultimap\")\n",
        "73": "            .withFeatures(ALLOWS_ANY_NULL_QUERIES, SERIALIZABLE, KNOWN_ORDER, CollectionSize.ANY)\n",
        "74": "            .createTestSuite());\n",
        "75": "    suite.addTest(\n",
        "76": "        ListMultimapTestSuiteBuilder.using(new ImmutableListMultimapCopyOfEntriesGenerator())\n",
        "77": "            .named(\"ImmutableListMultimap.copyOf[Iterable<Entry>]\")\n",
        "78": "            .withFeatures(ALLOWS_ANY_NULL_QUERIES, SERIALIZABLE, KNOWN_ORDER, CollectionSize.ANY)\n",
        "79": "            .createTestSuite());\n",
        "85": "    ImmutableListMultimap<String, Integer> multimap =\n",
        "86": "        new Builder<String, Integer>().put(Maps.immutableEntry(\"one\", 1)).build();\n",
        "112": "    Entry<String, Integer> entry =\n",
        "113": "        new AbstractMapEntry<String, Integer>() {\n",
        "114": "          @Override\n",
        "115": "          public String getKey() {\n",
        "116": "            return holder.string;\n",
        "117": "          }\n",
        "118": "\n",
        "119": "          @Override\n",
        "120": "          public Integer getValue() {\n",
        "121": "            return 1;\n",
        "122": "          }\n",
        "123": "        };\n",
        "131": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "142": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "162": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "172": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "183": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "205": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "217": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "221": "    } catch (NullPointerException expected) {\n",
        "222": "    }\n",
        "226": "    } catch (NullPointerException expected) {\n",
        "227": "    }\n",
        "231": "    } catch (NullPointerException expected) {\n",
        "232": "    }\n",
        "236": "    } catch (NullPointerException expected) {\n",
        "237": "    }\n",
        "243": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "247": "    } catch (NullPointerException expected) {\n",
        "248": "    }\n",
        "252": "    } catch (NullPointerException expected) {\n",
        "253": "    }\n",
        "257": "    } catch (NullPointerException expected) {\n",
        "258": "    }\n",
        "262": "    } catch (NullPointerException expected) {\n",
        "263": "    }\n",
        "267": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "283": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "287": "    builder.orderKeysBy(\n",
        "288": "        new Ordering<String>() {\n",
        "289": "          @Override\n",
        "290": "          public int compare(String left, String right) {\n",
        "291": "            return left.length() - right.length();\n",
        "292": "          }\n",
        "293": "        });\n",
        "305": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "321": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "376": "    } catch (NullPointerException expected) {\n",
        "377": "    }\n",
        "386": "    } catch (NullPointerException expected) {\n",
        "387": "    }\n",
        "409": "    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(multimap, \"foo\", 1);\n",
        "414": "        .put(\"foo\", 1)\n",
        "415": "        .put(\"bar\", 2)\n",
        "416": "        .put(\"foo\", 3)\n",
        "417": "        .build();\n",
        "437": "    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(multimap, \"bar\", 2);\n",
        "442": "    Multimap<String, Integer> arrayListMultimap = ArrayListMultimap.create();\n",
        "447": "        .addEqualityGroup(\n",
        "448": "            multimap,\n",
        "449": "            createMultimap(),\n",
        "450": "            arrayListMultimap,\n",
        "451": "            ImmutableListMultimap.<String, Integer>builder()\n",
        "452": "                .put(\"bar\", 2)\n",
        "453": "                .put(\"foo\", 1)\n",
        "454": "                .put(\"foo\", 3)\n",
        "455": "                .build())\n",
        "456": "        .addEqualityGroup(\n",
        "457": "            ImmutableListMultimap.<String, Integer>builder()\n",
        "458": "                .put(\"bar\", 2)\n",
        "459": "                .put(\"foo\", 3)\n",
        "460": "                .put(\"foo\", 1)\n",
        "461": "                .build())\n",
        "462": "        .addEqualityGroup(\n",
        "464": "                .put(\"foo\", 2)\n",
        "465": "                .put(\"foo\", 3)\n",
        "466": "                .put(\"foo\", 1)\n",
        "467": "                .build())\n",
        "468": "        .addEqualityGroup(\n",
        "469": "            ImmutableListMultimap.<String, Integer>builder().put(\"bar\", 2).put(\"foo\", 3).build())\n",
        "474": "    assertMultimapEquals(ImmutableListMultimap.of(\"one\", 1), \"one\", 1);\n",
        "475": "    assertMultimapEquals(ImmutableListMultimap.of(\"one\", 1, \"two\", 2), \"one\", 1, \"two\", 2);\n",
        "477": "        ImmutableListMultimap.of(\"one\", 1, \"two\", 2, \"three\", 3), \"one\", 1, \"two\", 2, \"three\", 3);\n",
        "480": "        \"one\",\n",
        "481": "        1,\n",
        "482": "        \"two\",\n",
        "483": "        2,\n",
        "484": "        \"three\",\n",
        "485": "        3,\n",
        "486": "        \"four\",\n",
        "487": "        4);\n",
        "489": "        ImmutableListMultimap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5),\n",
        "490": "        \"one\",\n",
        "491": "        1,\n",
        "492": "        \"two\",\n",
        "493": "        2,\n",
        "494": "        \"three\",\n",
        "495": "        3,\n",
        "496": "        \"four\",\n",
        "497": "        4,\n",
        "498": "        \"five\",\n",
        "499": "        5);\n",
        "506": "    assertEquals(ImmutableListMultimap.of(1, \"one\"), ImmutableListMultimap.of(\"one\", 1).inverse());\n",
        "532": "  private static <K, V> void assertMultimapEquals(\n",
        "533": "      Multimap<K, V> multimap, Object... alternatingKeysAndValues) {\n",
        "546": "    assertEquals(multimap.size(), SerializableTester.reserialize(multimap).size());\n",
        "551": "    Collection<Integer> valuesCopy = SerializableTester.reserialize(multimap.values());\n",
        "552": "    assertEquals(HashMultiset.create(multimap.values()), HashMultiset.create(valuesCopy));\n"
    },
    "removed": {
        "69": "    suite.addTest(ListMultimapTestSuiteBuilder.using(new ImmutableListMultimapGenerator())\n",
        "70": "      .named(\"ImmutableListMultimap\")\n",
        "71": "      .withFeatures(\n",
        "72": "          ALLOWS_ANY_NULL_QUERIES,\n",
        "73": "          SERIALIZABLE,\n",
        "74": "          KNOWN_ORDER,\n",
        "75": "          CollectionSize.ANY)\n",
        "76": "      .createTestSuite());\n",
        "77": "    suite.addTest(ListMultimapTestSuiteBuilder.using(\n",
        "78": "            new ImmutableListMultimapCopyOfEntriesGenerator())\n",
        "79": "        .named(\"ImmutableListMultimap.copyOf[Iterable<Entry>]\")\n",
        "80": "        .withFeatures(\n",
        "81": "            ALLOWS_ANY_NULL_QUERIES,\n",
        "82": "            SERIALIZABLE,\n",
        "83": "            KNOWN_ORDER,\n",
        "84": "            CollectionSize.ANY)\n",
        "85": "        .createTestSuite());\n",
        "91": "    ImmutableListMultimap<String, Integer> multimap = new Builder<String, Integer>()\n",
        "92": "        .put(Maps.immutableEntry(\"one\", 1))\n",
        "93": "        .build();\n",
        "119": "    Entry<String, Integer> entry = new AbstractMapEntry<String, Integer>() {\n",
        "120": "      @Override public String getKey() {\n",
        "121": "        return holder.string;\n",
        "122": "      }\n",
        "123": "      @Override public Integer getValue() {\n",
        "124": "        return 1;\n",
        "125": "      }\n",
        "126": "    };\n",
        "134": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "135": "        = ImmutableListMultimap.builder();\n",
        "146": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "147": "        = ImmutableListMultimap.builder();\n",
        "167": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "168": "        = ImmutableListMultimap.builder();\n",
        "178": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "179": "        = ImmutableListMultimap.builder();\n",
        "190": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "191": "        = ImmutableListMultimap.builder();\n",
        "213": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "214": "        = ImmutableListMultimap.builder();\n",
        "226": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "227": "        = ImmutableListMultimap.builder();\n",
        "231": "    } catch (NullPointerException expected) {}\n",
        "235": "    } catch (NullPointerException expected) {}\n",
        "239": "    } catch (NullPointerException expected) {}\n",
        "243": "    } catch (NullPointerException expected) {}\n",
        "249": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "250": "        = ImmutableListMultimap.builder();\n",
        "254": "    } catch (NullPointerException expected) {}\n",
        "258": "    } catch (NullPointerException expected) {}\n",
        "262": "    } catch (NullPointerException expected) {}\n",
        "266": "    } catch (NullPointerException expected) {}\n",
        "270": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "271": "        = ImmutableListMultimap.builder();\n",
        "287": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "288": "        = ImmutableListMultimap.builder();\n",
        "292": "    builder.orderKeysBy(new Ordering<String>() {\n",
        "293": "      @Override\n",
        "294": "      public int compare(String left, String right) {\n",
        "295": "        return left.length() - right.length();\n",
        "296": "      }\n",
        "297": "    });\n",
        "309": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "310": "        = ImmutableListMultimap.builder();\n",
        "326": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "327": "        = ImmutableListMultimap.builder();\n",
        "382": "    } catch (NullPointerException expected) {}\n",
        "391": "    } catch (NullPointerException expected) {}\n",
        "413": "    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(\n",
        "414": "        multimap, \"foo\", 1);\n",
        "419": "        .put(\"foo\", 1).put(\"bar\", 2).put(\"foo\", 3).build();\n",
        "439": "    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(\n",
        "440": "        multimap, \"bar\", 2);\n",
        "445": "    Multimap<String, Integer> arrayListMultimap\n",
        "446": "        = ArrayListMultimap.create();\n",
        "451": "        .addEqualityGroup(multimap, createMultimap(), arrayListMultimap,\n",
        "453": "                .put(\"bar\", 2).put(\"foo\", 1).put(\"foo\", 3).build())\n",
        "454": "        .addEqualityGroup(ImmutableListMultimap.<String, Integer>builder()\n",
        "455": "            .put(\"bar\", 2).put(\"foo\", 3).put(\"foo\", 1).build())\n",
        "456": "        .addEqualityGroup(ImmutableListMultimap.<String, Integer>builder()\n",
        "457": "            .put(\"foo\", 2).put(\"foo\", 3).put(\"foo\", 1).build())\n",
        "458": "        .addEqualityGroup(ImmutableListMultimap.<String, Integer>builder()\n",
        "459": "            .put(\"bar\", 2).put(\"foo\", 3).build())\n",
        "465": "        ImmutableListMultimap.of(\"one\", 1),\n",
        "466": "        \"one\", 1);\n",
        "467": "    assertMultimapEquals(\n",
        "468": "        ImmutableListMultimap.of(\"one\", 1, \"two\", 2),\n",
        "469": "        \"one\", 1, \"two\", 2);\n",
        "470": "    assertMultimapEquals(\n",
        "471": "        ImmutableListMultimap.of(\"one\", 1, \"two\", 2, \"three\", 3),\n",
        "472": "        \"one\", 1, \"two\", 2, \"three\", 3);\n",
        "475": "        \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4);\n",
        "477": "        ImmutableListMultimap.of(\n",
        "478": "            \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5),\n",
        "479": "        \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "486": "    assertEquals(\n",
        "487": "        ImmutableListMultimap.of(1, \"one\"),\n",
        "488": "        ImmutableListMultimap.of(\"one\", 1).inverse());\n",
        "514": "  private static <K, V> void assertMultimapEquals(Multimap<K, V> multimap,\n",
        "515": "      Object... alternatingKeysAndValues) {\n",
        "528": "    assertEquals(multimap.size(),\n",
        "529": "        SerializableTester.reserialize(multimap).size());\n",
        "534": "    Collection<Integer> valuesCopy\n",
        "535": "        = SerializableTester.reserialize(multimap.values());\n",
        "536": "    assertEquals(HashMultiset.create(multimap.values()),\n",
        "537": "        HashMultiset.create(valuesCopy));\n"
    }
}