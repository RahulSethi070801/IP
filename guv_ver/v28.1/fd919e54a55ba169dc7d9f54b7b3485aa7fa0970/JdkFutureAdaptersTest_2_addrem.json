{
    "addition": {
        "78": "  public void testListenInPoolThreadIgnoresExecutorWhenDelegateIsDone() throws Exception {\n",
        "79": "    NonListenableSettableFuture<String> abstractFuture = NonListenableSettableFuture.create();\n",
        "82": "    ListenableFuture<String> listenableFuture = listenInPoolThread(abstractFuture, spy);\n",
        "104": "    ExecutorService executorService =\n",
        "105": "        newCachedThreadPool(new ThreadFactoryBuilder().setDaemon(true).build());\n",
        "106": "    NonListenableSettableFuture<String> abstractFuture = NonListenableSettableFuture.create();\n",
        "108": "    ListenableFuture<String> listenableFuture = listenInPoolThread(abstractFuture, spy);\n",
        "127": "  public void testListenInPoolThreadCustomExecutorInterrupted() throws Exception {\n",
        "129": "    ExecutorService executorService =\n",
        "130": "        new ThreadPoolExecutor(\n",
        "131": "            0,\n",
        "132": "            Integer.MAX_VALUE,\n",
        "133": "            60L,\n",
        "134": "            TimeUnit.SECONDS,\n",
        "135": "            new SynchronousQueue<Runnable>(),\n",
        "136": "            new ThreadFactoryBuilder().setDaemon(true).build()) {\n",
        "137": "          @Override\n",
        "138": "          protected void beforeExecute(Thread t, Runnable r) {\n",
        "139": "            submitSuccessful.countDown();\n",
        "140": "          }\n",
        "141": "        };\n",
        "142": "    NonListenableSettableFuture<String> abstractFuture = NonListenableSettableFuture.create();\n",
        "143": "    ListenableFuture<String> listenableFuture = listenInPoolThread(abstractFuture, executorService);\n",
        "167": "  /** A Future that doesn't implement ListenableFuture, useful for testing listenInPoolThread. */\n",
        "168": "  private static final class NonListenableSettableFuture<V> extends ForwardingFuture<V> {\n",
        "175": "    @Override\n",
        "176": "    protected Future<V> delegate() {\n",
        "185": "  private static final class RuntimeExceptionThrowingFuture<V> implements Future<V> {\n",
        "236": "  public void testListenInPoolThreadRunsListenerAfterRuntimeException() throws Exception {\n",
        "243": "    assertFalse(\n",
        "244": "        \"Can't test the main listenInPoolThread path \"\n",
        "245": "            + \"if the input is already a ListenableFuture\",\n"
    },
    "removed": {
        "78": "  public void testListenInPoolThreadIgnoresExecutorWhenDelegateIsDone()\n",
        "79": "      throws Exception {\n",
        "80": "    NonListenableSettableFuture<String> abstractFuture =\n",
        "81": "        NonListenableSettableFuture.create();\n",
        "84": "    ListenableFuture<String> listenableFuture =\n",
        "85": "        listenInPoolThread(abstractFuture, spy);\n",
        "107": "    ExecutorService executorService = newCachedThreadPool(\n",
        "108": "        new ThreadFactoryBuilder().setDaemon(true).build());\n",
        "109": "    NonListenableSettableFuture<String> abstractFuture =\n",
        "110": "        NonListenableSettableFuture.create();\n",
        "112": "    ListenableFuture<String> listenableFuture =\n",
        "113": "        listenInPoolThread(abstractFuture, spy);\n",
        "132": "  public void testListenInPoolThreadCustomExecutorInterrupted()\n",
        "133": "      throws Exception {\n",
        "135": "    ExecutorService executorService = new ThreadPoolExecutor(\n",
        "136": "        0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS,\n",
        "137": "        new SynchronousQueue<Runnable>(),\n",
        "138": "        new ThreadFactoryBuilder().setDaemon(true).build()) {\n",
        "139": "      @Override\n",
        "140": "      protected void beforeExecute(Thread t, Runnable r) {\n",
        "141": "        submitSuccessful.countDown();\n",
        "142": "      }\n",
        "143": "    };\n",
        "144": "    NonListenableSettableFuture<String> abstractFuture =\n",
        "145": "        NonListenableSettableFuture.create();\n",
        "146": "    ListenableFuture<String> listenableFuture =\n",
        "147": "        listenInPoolThread(abstractFuture, executorService);\n",
        "171": "  /**\n",
        "172": "   * A Future that doesn't implement ListenableFuture, useful for testing\n",
        "173": "   * listenInPoolThread.\n",
        "174": "   */\n",
        "175": "  private static final class NonListenableSettableFuture<V>\n",
        "176": "      extends ForwardingFuture<V> {\n",
        "183": "    @Override protected Future<V> delegate() {\n",
        "192": "  private static final class RuntimeExceptionThrowingFuture<V>\n",
        "193": "      implements Future<V> {\n",
        "244": "  public void testListenInPoolThreadRunsListenerAfterRuntimeException()\n",
        "245": "      throws Exception {\n",
        "252": "    assertFalse(\"Can't test the main listenInPoolThread path \"\n",
        "253": "        + \"if the input is already a ListenableFuture\",\n"
    }
}