{
    "addition": {
        "156": "    Supplier<Integer> fiveSupplier =\n",
        "157": "        new Supplier<Integer>() {\n",
        "158": "          @Override\n",
        "159": "          public Integer get() {\n",
        "160": "            return 5;\n",
        "161": "          }\n",
        "162": "        };\n",
        "172": "    Supplier<Integer> squareSupplier = Suppliers.compose(intValueFunction, fiveSupplier);\n",
        "178": "    Supplier<ArrayList<Integer>> listSupplier =\n",
        "179": "        new Supplier<ArrayList<Integer>>() {\n",
        "180": "          @Override\n",
        "181": "          public ArrayList<Integer> get() {\n",
        "182": "            return Lists.newArrayList(0);\n",
        "183": "          }\n",
        "184": "        };\n",
        "196": "    Supplier<List<Integer>> addSupplier = Suppliers.compose(addElementFunction, listSupplier);\n",
        "207": "    Supplier<Integer> memoizedSupplier =\n",
        "208": "        Suppliers.memoizeWithExpiration(countingSupplier, 75, TimeUnit.MILLISECONDS);\n",
        "217": "    Supplier<Integer> memoizedSupplier =\n",
        "218": "        Suppliers.memoizeWithExpiration(countingSupplier, 75, TimeUnit.MILLISECONDS);\n",
        "259": "    assertSame(toBeSupplied, objectSupplier.get());\n",
        "260": "    assertSame(toBeSupplied, objectSupplier.get()); // idempotent\n",
        "273": "          @Override\n",
        "274": "          public Supplier<Boolean> apply(Supplier<Boolean> supplier) {\n",
        "275": "            return Suppliers.memoizeWithExpiration(supplier, Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n",
        "276": "          }\n",
        "277": "        };\n",
        "286": "          @Override\n",
        "287": "          public Supplier<Boolean> apply(Supplier<Boolean> supplier) {\n",
        "288": "            return Suppliers.memoize(supplier);\n",
        "289": "          }\n",
        "290": "        };\n",
        "303": "    final Supplier<Boolean> supplier =\n",
        "304": "        new Supplier<Boolean>() {\n",
        "305": "          boolean isWaiting(Thread thread) {\n",
        "306": "            switch (thread.getState()) {\n",
        "307": "              case BLOCKED:\n",
        "308": "              case WAITING:\n",
        "309": "              case TIMED_WAITING:\n",
        "310": "                return true;\n",
        "311": "              default:\n",
        "312": "                return false;\n",
        "313": "            }\n",
        "314": "          }\n",
        "316": "          int waitingThreads() {\n",
        "317": "            int waitingThreads = 0;\n",
        "318": "            for (Thread thread : threads) {\n",
        "319": "              if (isWaiting(thread)) {\n",
        "320": "                waitingThreads++;\n",
        "321": "              }\n",
        "322": "            }\n",
        "323": "            return waitingThreads;\n",
        "326": "          @Override\n",
        "327": "          public Boolean get() {\n",
        "328": "            // Check that this method is called exactly once, by the first\n",
        "329": "            // thread to synchronize.\n",
        "330": "            long t0 = System.nanoTime();\n",
        "331": "            while (waitingThreads() != numThreads - 1) {\n",
        "332": "              if (System.nanoTime() - t0 > timeout) {\n",
        "333": "                thrown.set(\n",
        "334": "                    new TimeoutException(\n",
        "335": "                        \"timed out waiting for other threads to block\"\n",
        "336": "                            + \" synchronizing on supplier\"));\n",
        "337": "                break;\n",
        "338": "              }\n",
        "339": "              Thread.yield();\n",
        "340": "            }\n",
        "341": "            count.getAndIncrement();\n",
        "342": "            return Boolean.TRUE;\n",
        "344": "        };\n",
        "349": "      threads[i] =\n",
        "350": "          new Thread() {\n",
        "351": "            @Override\n",
        "352": "            public void run() {\n",
        "353": "              assertSame(Boolean.TRUE, memoizedSupplier.get());\n",
        "354": "            }\n",
        "355": "          };\n",
        "373": "    final Supplier<Integer> nonThreadSafe =\n",
        "374": "        new Supplier<Integer>() {\n",
        "375": "          int counter = 0;\n",
        "376": "\n",
        "377": "          @Override\n",
        "378": "          public Integer get() {\n",
        "379": "            int nextValue = counter + 1;\n",
        "380": "            Thread.yield();\n",
        "381": "            counter = nextValue;\n",
        "382": "            return counter;\n",
        "383": "          }\n",
        "384": "        };\n",
        "390": "      threads[i] =\n",
        "391": "          new Thread() {\n",
        "392": "            @Override\n",
        "393": "            public void run() {\n",
        "394": "              for (int j = 0; j < iterations; j++) {\n",
        "395": "                Suppliers.synchronizedSupplier(nonThreadSafe).get();\n",
        "396": "              }\n",
        "397": "            }\n",
        "398": "          };\n",
        "412": "    Function<Supplier<Integer>, Integer> supplierFunction = Suppliers.supplierFunction();\n",
        "419": "    assertEquals(Integer.valueOf(5), reserialize(Suppliers.ofInstance(5)).get());\n",
        "420": "    assertEquals(\n",
        "421": "        Integer.valueOf(5),\n",
        "422": "        reserialize(Suppliers.compose(Functions.identity(), Suppliers.ofInstance(5))).get());\n",
        "423": "    assertEquals(Integer.valueOf(5), reserialize(Suppliers.memoize(Suppliers.ofInstance(5))).get());\n",
        "425": "        Integer.valueOf(5),\n",
        "426": "        reserialize(Suppliers.memoizeWithExpiration(Suppliers.ofInstance(5), 30, TimeUnit.SECONDS))\n",
        "427": "            .get());\n",
        "428": "    assertEquals(\n",
        "429": "        Integer.valueOf(5),\n",
        "430": "        reserialize(Suppliers.synchronizedSupplier(Suppliers.ofInstance(5))).get());\n",
        "435": "    new ClassSanityTester().forAllPublicStaticMethods(Suppliers.class).testNulls();\n",
        "441": "    new ClassSanityTester().forAllPublicStaticMethods(Suppliers.class).testSerializable();\n",
        "446": "        .addEqualityGroup(Suppliers.ofInstance(\"foo\"), Suppliers.ofInstance(\"foo\"))\n",
        "456": "        .addEqualityGroup(Suppliers.compose(Functions.constant(2), Suppliers.ofInstance(\"foo\")))\n",
        "457": "        .addEqualityGroup(Suppliers.compose(Functions.constant(1), Suppliers.ofInstance(\"bar\")))\n"
    },
    "removed": {
        "156": "    Supplier<Integer> fiveSupplier = new Supplier<Integer>() {\n",
        "157": "      @Override\n",
        "158": "      public Integer get() {\n",
        "159": "        return 5;\n",
        "160": "      }\n",
        "161": "    };\n",
        "171": "    Supplier<Integer> squareSupplier = Suppliers.compose(intValueFunction,\n",
        "172": "        fiveSupplier);\n",
        "178": "    Supplier<ArrayList<Integer>> listSupplier\n",
        "179": "        = new Supplier<ArrayList<Integer>>() {\n",
        "180": "      @Override\n",
        "181": "      public ArrayList<Integer> get() {\n",
        "182": "        return Lists.newArrayList(0);\n",
        "183": "      }\n",
        "184": "    };\n",
        "196": "    Supplier<List<Integer>> addSupplier = Suppliers.compose(addElementFunction,\n",
        "197": "        listSupplier);\n",
        "208": "    Supplier<Integer> memoizedSupplier = Suppliers.memoizeWithExpiration(\n",
        "209": "        countingSupplier, 75, TimeUnit.MILLISECONDS);\n",
        "218": "    Supplier<Integer> memoizedSupplier = Suppliers.memoizeWithExpiration(\n",
        "219": "        countingSupplier, 75, TimeUnit.MILLISECONDS);\n",
        "260": "    assertSame(toBeSupplied,objectSupplier.get());\n",
        "261": "    assertSame(toBeSupplied,objectSupplier.get()); // idempotent\n",
        "274": "      @Override public Supplier<Boolean> apply(Supplier<Boolean> supplier) {\n",
        "275": "        return Suppliers.memoizeWithExpiration(\n",
        "276": "            supplier, Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n",
        "277": "      }\n",
        "278": "    };\n",
        "287": "      @Override public Supplier<Boolean> apply(Supplier<Boolean> supplier) {\n",
        "288": "        return Suppliers.memoize(supplier);\n",
        "289": "      }\n",
        "290": "    };\n",
        "303": "    final Supplier<Boolean> supplier = new Supplier<Boolean>() {\n",
        "304": "      boolean isWaiting(Thread thread) {\n",
        "305": "        switch (thread.getState()) {\n",
        "306": "          case BLOCKED:\n",
        "307": "          case WAITING:\n",
        "308": "          case TIMED_WAITING:\n",
        "309": "          return true;\n",
        "310": "          default:\n",
        "311": "          return false;\n",
        "312": "        }\n",
        "313": "      }\n",
        "315": "      int waitingThreads() {\n",
        "316": "        int waitingThreads = 0;\n",
        "317": "        for (Thread thread : threads) {\n",
        "318": "          if (isWaiting(thread)) {\n",
        "319": "            waitingThreads++;\n",
        "321": "        }\n",
        "322": "        return waitingThreads;\n",
        "323": "      }\n",
        "325": "      @Override\n",
        "326": "      public Boolean get() {\n",
        "327": "        // Check that this method is called exactly once, by the first\n",
        "328": "        // thread to synchronize.\n",
        "329": "        long t0 = System.nanoTime();\n",
        "330": "        while (waitingThreads() != numThreads - 1) {\n",
        "331": "          if (System.nanoTime() - t0 > timeout) {\n",
        "332": "            thrown.set(new TimeoutException(\n",
        "333": "                \"timed out waiting for other threads to block\" +\n",
        "334": "                \" synchronizing on supplier\"));\n",
        "335": "            break;\n",
        "337": "          Thread.yield();\n",
        "338": "        }\n",
        "339": "        count.getAndIncrement();\n",
        "340": "        return Boolean.TRUE;\n",
        "341": "      }\n",
        "342": "    };\n",
        "347": "      threads[i] = new Thread() {\n",
        "348": "        @Override public void run() {\n",
        "349": "          assertSame(Boolean.TRUE, memoizedSupplier.get());\n",
        "350": "        }\n",
        "351": "      };\n",
        "369": "    final Supplier<Integer> nonThreadSafe = new Supplier<Integer>() {\n",
        "370": "      int counter = 0;\n",
        "371": "      @Override\n",
        "372": "      public Integer get() {\n",
        "373": "        int nextValue = counter + 1;\n",
        "374": "        Thread.yield();\n",
        "375": "        counter = nextValue;\n",
        "376": "        return counter;\n",
        "377": "      }\n",
        "378": "    };\n",
        "384": "      threads[i] = new Thread() {\n",
        "385": "        @Override public void run() {\n",
        "386": "          for (int j = 0; j < iterations; j++) {\n",
        "387": "            Suppliers.synchronizedSupplier(nonThreadSafe).get();\n",
        "388": "          }\n",
        "389": "        }\n",
        "390": "      };\n",
        "404": "    Function<Supplier<Integer>, Integer> supplierFunction =\n",
        "405": "        Suppliers.supplierFunction();\n",
        "413": "        Integer.valueOf(5), reserialize(Suppliers.ofInstance(5)).get());\n",
        "414": "    assertEquals(Integer.valueOf(5), reserialize(Suppliers.compose(\n",
        "415": "        Functions.identity(), Suppliers.ofInstance(5))).get());\n",
        "416": "    assertEquals(Integer.valueOf(5),\n",
        "417": "        reserialize(Suppliers.memoize(Suppliers.ofInstance(5))).get());\n",
        "418": "    assertEquals(Integer.valueOf(5),\n",
        "419": "        reserialize(Suppliers.memoizeWithExpiration(\n",
        "420": "            Suppliers.ofInstance(5), 30, TimeUnit.SECONDS)).get());\n",
        "421": "    assertEquals(Integer.valueOf(5), reserialize(\n",
        "422": "        Suppliers.synchronizedSupplier(Suppliers.ofInstance(5))).get());\n",
        "427": "    new ClassSanityTester().forAllPublicStaticMethods(Suppliers.class)\n",
        "428": "        .testNulls();\n",
        "434": "    new ClassSanityTester().forAllPublicStaticMethods(Suppliers.class)\n",
        "435": "        .testSerializable();\n",
        "440": "        .addEqualityGroup(\n",
        "441": "            Suppliers.ofInstance(\"foo\"), Suppliers.ofInstance(\"foo\"))\n",
        "451": "        .addEqualityGroup(\n",
        "452": "            Suppliers.compose(Functions.constant(2), Suppliers.ofInstance(\"foo\")))\n",
        "453": "        .addEqualityGroup(\n",
        "454": "            Suppliers.compose(Functions.constant(1), Suppliers.ofInstance(\"bar\")))\n"
    }
}