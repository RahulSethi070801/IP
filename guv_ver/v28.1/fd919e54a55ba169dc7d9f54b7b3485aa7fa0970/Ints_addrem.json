{
    "addition": {
        "40": " * <p>See the Guava User Guide article on <a\n",
        "41": " * href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n",
        "65": "   * Returns a hash code for {@code value}; equal to the result of invoking {@code ((Integer)\n",
        "66": "   * value).hashCode()}.\n",
        "130": "   * @return {@code true} if {@code array[i] == target} for some value of {@code i}\n",
        "164": "   * Returns the start position of the first occurrence of the specified {@code target} within\n",
        "165": "   * {@code array}, or {@code -1} if there is no such occurrence.\n",
        "167": "   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,\n",
        "168": "   * i, i + target.length)} contains exactly the same elements as {@code target}.\n",
        "256": "   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code\n",
        "257": "   * value} is greater than {@code max}, {@code max} is returned.\n",
        "272": "   * Returns the values from each provided array combined into a single array. For example, {@code\n",
        "273": "   * concat(new int[] {a, b}, new int[] {}, new int[] {c}} returns the array {@code {a, b, c}}.\n",
        "294": "   * {@code ByteBuffer.allocate(4).putInt(value).array()}. For example, the input value {@code\n",
        "295": "   * 0x12131415} would yield the byte array {@code {0x12, 0x13, 0x14, 0x15}}.\n",
        "298": "   * use a shared {@link java.nio.ByteBuffer} instance, or use {@link\n",
        "299": "   * com.google.common.io.ByteStreams#newDataOutput()} to get a growable buffer.\n",
        "310": "   * byte array {@code {0x12, 0x13, 0x14, 0x15, 0x33}} would yield the {@code int} value {@code\n",
        "311": "   * 0x12131415}.\n",
        "360": "   * Returns a serializable converter object that converts between strings and integers using {@link\n",
        "361": "   * Integer#decode} and {@link Integer#toString()}. The returned converter throws {@link\n",
        "362": "   * NumberFormatException} if the input string is invalid.\n",
        "385": "   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code\n",
        "386": "   *     minLength}\n",
        "512": "   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.\n",
        "513": "   * Calling this method is as thread-safe as calling that method.\n",
        "725": "   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >\n",
        "726": "   *     Character.MAX_RADIX}\n"
    },
    "removed": {
        "40": " * <p>See the Guava User Guide article on\n",
        "41": " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n",
        "65": "   * Returns a hash code for {@code value}; equal to the result of invoking\n",
        "66": "   * {@code ((Integer) value).hashCode()}.\n",
        "130": "   * @return {@code true} if {@code array[i] == target} for some value of {@code\n",
        "131": "   *     i}\n",
        "165": "   * Returns the start position of the first occurrence of the specified {@code\n",
        "166": "   * target} within {@code array}, or {@code -1} if there is no such occurrence.\n",
        "168": "   * <p>More formally, returns the lowest index {@code i} such that\n",
        "169": "   * {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as\n",
        "170": "   * {@code target}.\n",
        "258": "   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if\n",
        "259": "   * {@code value} is greater than {@code max}, {@code max} is returned.\n",
        "274": "   * Returns the values from each provided array combined into a single array. For example,\n",
        "275": "   * {@code concat(new int[] {a, b}, new int[] {}, new int[] {c}} returns the array {@code {a, b,\n",
        "276": "   * c}}.\n",
        "297": "   * {@code ByteBuffer.allocate(4).putInt(value).array()}. For example, the input value\n",
        "298": "   * {@code 0x12131415} would yield the byte array {@code {0x12, 0x13, 0x14, 0x15}}.\n",
        "301": "   * use a shared {@link java.nio.ByteBuffer} instance, or use\n",
        "302": "   * {@link com.google.common.io.ByteStreams#newDataOutput()} to get a growable buffer.\n",
        "313": "   * byte array {@code {0x12, 0x13, 0x14, 0x15, 0x33}} would yield the {@code int} value\n",
        "314": "   * {@code 0x12131415}.\n",
        "363": "   * Returns a serializable converter object that converts between strings and integers using\n",
        "364": "   * {@link Integer#decode} and {@link Integer#toString()}. The returned converter throws\n",
        "365": "   * {@link NumberFormatException} if the input string is invalid.\n",
        "388": "   * @return an array containing the values of {@code array}, with guaranteed minimum length\n",
        "389": "   *     {@code minLength}\n",
        "515": "   * <p>Elements are copied from the argument collection as if by {@code\n",
        "516": "   * collection.toArray()}. Calling this method is as thread-safe as calling that method.\n",
        "728": "   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or\n",
        "729": "   *     {@code radix > Character.MAX_RADIX}\n"
    }
}