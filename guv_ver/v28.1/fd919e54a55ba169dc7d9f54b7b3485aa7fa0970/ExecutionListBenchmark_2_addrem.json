{
    "addition": {
        "43": "/** Benchmarks for {@link ExecutionList}. */\n",
        "46": "  private static final int NUM_THREADS = 10; // make a param?\n",
        "59": "      @Override\n",
        "60": "      ExecutionListWrapper newExecutionList() {\n",
        "63": "\n",
        "64": "          @Override\n",
        "65": "          public void add(Runnable runnable, Executor executor) {\n",
        "69": "          @Override\n",
        "70": "          public void execute() {\n",
        "74": "          @Override\n",
        "75": "          public Object getImpl() {\n",
        "82": "      @Override\n",
        "83": "      ExecutionListWrapper newExecutionList() {\n",
        "86": "\n",
        "87": "          @Override\n",
        "88": "          public void add(Runnable runnable, Executor executor) {\n",
        "92": "          @Override\n",
        "93": "          public void execute() {\n",
        "97": "          @Override\n",
        "98": "          public Object getImpl() {\n",
        "105": "      @Override\n",
        "106": "      ExecutionListWrapper newExecutionList() {\n",
        "109": "\n",
        "110": "          @Override\n",
        "111": "          public void add(Runnable runnable, Executor executor) {\n",
        "115": "          @Override\n",
        "116": "          public void execute() {\n",
        "120": "          @Override\n",
        "121": "          public Object getImpl() {\n",
        "128": "      @Override\n",
        "129": "      ExecutionListWrapper newExecutionList() {\n",
        "132": "\n",
        "133": "          @Override\n",
        "134": "          public void add(Runnable runnable, Executor executor) {\n",
        "138": "          @Override\n",
        "139": "          public void execute() {\n",
        "143": "          @Override\n",
        "144": "          public Object getImpl() {\n",
        "151": "      @Override\n",
        "152": "      ExecutionListWrapper newExecutionList() {\n",
        "155": "\n",
        "156": "          @Override\n",
        "157": "          public void add(Runnable runnable, Executor executor) {\n",
        "161": "          @Override\n",
        "162": "          public void execute() {\n",
        "166": "          @Override\n",
        "167": "          public Object getImpl() {\n",
        "174": "      @Override\n",
        "175": "      ExecutionListWrapper newExecutionList() {\n",
        "178": "\n",
        "179": "          @Override\n",
        "180": "          public void add(Runnable runnable, Executor executor) {\n",
        "184": "          @Override\n",
        "185": "          public void execute() {\n",
        "189": "          @Override\n",
        "190": "          public Object getImpl() {\n",
        "197": "      @Override\n",
        "198": "      ExecutionListWrapper newExecutionList() {\n",
        "201": "\n",
        "202": "          @Override\n",
        "203": "          public void add(Runnable runnable, Executor executor) {\n",
        "207": "          @Override\n",
        "208": "          public void execute() {\n",
        "212": "          @Override\n",
        "213": "          public Object getImpl() {\n",
        "229": "  @Param({\"1\", \"5\", \"10\"})\n",
        "230": "  int numListeners;\n",
        "231": "\n",
        "232": "  private final Runnable listener =\n",
        "233": "      new Runnable() {\n",
        "234": "        @Override\n",
        "235": "        public void run() {\n",
        "236": "          listenerLatch.countDown();\n",
        "237": "        }\n",
        "238": "      };\n",
        "239": "\n",
        "240": "  @BeforeExperiment\n",
        "241": "  void setUp() throws Exception {\n",
        "242": "    executorService =\n",
        "243": "        new ThreadPoolExecutor(\n",
        "244": "            NUM_THREADS,\n",
        "245": "            NUM_THREADS,\n",
        "246": "            Long.MAX_VALUE,\n",
        "247": "            TimeUnit.SECONDS,\n",
        "248": "            new ArrayBlockingQueue<Runnable>(1000));\n",
        "265": "  @AfterExperiment\n",
        "266": "  void tearDown() throws Exception {\n",
        "279": "  @Benchmark\n",
        "280": "  int addThenExecute_singleThreaded(int reps) {\n",
        "295": "  @Benchmark\n",
        "296": "  int executeThenAdd_singleThreaded(int reps) {\n",
        "311": "  private final Runnable executeTask =\n",
        "312": "      new Runnable() {\n",
        "313": "        @Override\n",
        "314": "        public void run() {\n",
        "315": "          list.execute();\n",
        "317": "      };\n",
        "318": "\n",
        "319": "  @Benchmark\n",
        "320": "  int addThenExecute_multiThreaded(final int reps) throws InterruptedException {\n",
        "321": "    Runnable addTask =\n",
        "322": "        new Runnable() {\n",
        "323": "          @Override\n",
        "324": "          public void run() {\n",
        "325": "            for (int i = 0; i < numListeners; i++) {\n",
        "326": "              list.add(listener, directExecutor());\n",
        "327": "            }\n",
        "328": "          }\n",
        "329": "        };\n",
        "346": "  @Benchmark\n",
        "347": "  int executeThenAdd_multiThreaded(final int reps) throws InterruptedException {\n",
        "348": "    Runnable addTask =\n",
        "349": "        new Runnable() {\n",
        "350": "          @Override\n",
        "351": "          public void run() {\n",
        "352": "            for (int i = 0; i < numListeners; i++) {\n",
        "353": "              list.add(listener, directExecutor());\n",
        "354": "            }\n",
        "355": "          }\n",
        "356": "        };\n",
        "424": "          log.log(\n",
        "425": "              Level.SEVERE,\n",
        "426": "              \"RuntimeException while executing runnable \"\n",
        "427": "                  + runnable\n",
        "428": "                  + \" with executor \"\n",
        "429": "                  + executor,\n",
        "430": "              e);\n",
        "467": "        runnables = null; // allow GC to free listeners even if this stays around for a while.\n",
        "479": "        log.log(\n",
        "480": "            Level.SEVERE,\n",
        "481": "            \"RuntimeException while executing runnable \" + runnable + \" with executor \" + executor,\n",
        "482": "            e);\n",
        "541": "        head = null; // allow GC to free listeners even if this stays around for a while.\n",
        "554": "        log.log(\n",
        "555": "            Level.SEVERE,\n",
        "556": "            \"RuntimeException while executing runnable \" + runnable + \" with executor \" + executor,\n",
        "557": "            e);\n",
        "595": "    /** TODO(lukes): This was copied verbatim from Striped64.java... standardize this? */\n",
        "597": "      try {\n",
        "598": "        return sun.misc.Unsafe.getUnsafe();\n",
        "599": "      } catch (SecurityException tryReflectionInstead) {\n",
        "600": "      }\n",
        "601": "      try {\n",
        "602": "        return java.security.AccessController.doPrivileged(\n",
        "603": "            new java.security.PrivilegedExceptionAction<sun.misc.Unsafe>() {\n",
        "604": "              @Override\n",
        "605": "              public sun.misc.Unsafe run() throws Exception {\n",
        "606": "                Class<sun.misc.Unsafe> k = sun.misc.Unsafe.class;\n",
        "607": "                for (java.lang.reflect.Field f : k.getDeclaredFields()) {\n",
        "608": "                  f.setAccessible(true);\n",
        "609": "                  Object x = f.get(null);\n",
        "610": "                  if (k.isInstance(x)) return k.cast(x);\n",
        "611": "                }\n",
        "612": "                throw new NoSuchFieldError(\"the Unsafe\");\n",
        "613": "              }\n",
        "614": "            });\n",
        "615": "      } catch (java.security.PrivilegedActionException e) {\n",
        "616": "        throw new RuntimeException(\"Could not initialize intrinsics\", e.getCause());\n",
        "617": "      }\n",
        "619": "\n",
        "681": "          log.log(\n",
        "682": "              Level.SEVERE,\n",
        "683": "              \"RuntimeException while executing runnable \"\n",
        "684": "                  + runnable\n",
        "685": "                  + \" with executor \"\n",
        "686": "                  + executor,\n",
        "687": "              e);\n"
    },
    "removed": {
        "43": "/**\n",
        "44": " * Benchmarks for {@link ExecutionList}.\n",
        "45": " */\n",
        "48": "  private static final int NUM_THREADS = 10;  // make a param?\n",
        "60": "      @Override ExecutionListWrapper newExecutionList() {\n",
        "63": "          @Override public void add(Runnable runnable, Executor executor) {\n",
        "67": "          @Override public void execute() {\n",
        "71": "          @Override public Object getImpl() {\n",
        "78": "      @Override ExecutionListWrapper newExecutionList() {\n",
        "81": "          @Override public void add(Runnable runnable, Executor executor) {\n",
        "85": "          @Override public void execute() {\n",
        "89": "          @Override public Object getImpl() {\n",
        "96": "      @Override ExecutionListWrapper newExecutionList() {\n",
        "99": "          @Override public void add(Runnable runnable, Executor executor) {\n",
        "103": "          @Override public void execute() {\n",
        "107": "          @Override public Object getImpl() {\n",
        "114": "      @Override ExecutionListWrapper newExecutionList() {\n",
        "117": "          @Override public void add(Runnable runnable, Executor executor) {\n",
        "121": "          @Override public void execute() {\n",
        "125": "          @Override public Object getImpl() {\n",
        "132": "      @Override ExecutionListWrapper newExecutionList() {\n",
        "135": "          @Override public void add(Runnable runnable, Executor executor) {\n",
        "139": "          @Override public void execute() {\n",
        "143": "          @Override public Object getImpl() {\n",
        "150": "      @Override ExecutionListWrapper newExecutionList() {\n",
        "153": "          @Override public void add(Runnable runnable, Executor executor) {\n",
        "157": "          @Override public void execute() {\n",
        "161": "          @Override public Object getImpl() {\n",
        "168": "      @Override ExecutionListWrapper newExecutionList() {\n",
        "171": "          @Override public void add(Runnable runnable, Executor executor) {\n",
        "175": "          @Override public void execute() {\n",
        "179": "          @Override public Object getImpl() {\n",
        "193": "  @Param({\"1\", \"5\", \"10\"}) int numListeners;\n",
        "195": "  private final Runnable listener = new Runnable() {\n",
        "196": "    @Override public void run() {\n",
        "197": "      listenerLatch.countDown();\n",
        "198": "    }\n",
        "199": "  };\n",
        "200": "\n",
        "201": "  @BeforeExperiment void setUp() throws Exception {\n",
        "202": "    executorService = new ThreadPoolExecutor(NUM_THREADS,\n",
        "203": "        NUM_THREADS,\n",
        "204": "        Long.MAX_VALUE,\n",
        "205": "        TimeUnit.SECONDS,\n",
        "206": "        new ArrayBlockingQueue<Runnable>(1000));\n",
        "223": "  @AfterExperiment void tearDown() throws Exception {\n",
        "236": "  @Benchmark int addThenExecute_singleThreaded(int reps) {\n",
        "251": "  @Benchmark int executeThenAdd_singleThreaded(int reps) {\n",
        "266": "  private final Runnable executeTask = new Runnable() {\n",
        "267": "    @Override public void run() {\n",
        "268": "      list.execute();\n",
        "269": "    }\n",
        "270": "  };\n",
        "271": "\n",
        "272": "  @Benchmark int addThenExecute_multiThreaded(final int reps) throws InterruptedException {\n",
        "273": "    Runnable addTask = new Runnable() {\n",
        "274": "      @Override public void run() {\n",
        "275": "        for (int i = 0; i < numListeners; i++) {\n",
        "276": "          list.add(listener, directExecutor());\n",
        "278": "      }\n",
        "279": "    };\n",
        "296": "  @Benchmark int executeThenAdd_multiThreaded(final int reps) throws InterruptedException {\n",
        "297": "    Runnable addTask = new Runnable() {\n",
        "298": "      @Override public void run() {\n",
        "299": "        for (int i = 0; i < numListeners; i++) {\n",
        "300": "          list.add(listener, directExecutor());\n",
        "301": "        }\n",
        "302": "      }\n",
        "303": "    };\n",
        "371": "          log.log(Level.SEVERE, \"RuntimeException while executing runnable \"\n",
        "372": "              + runnable + \" with executor \" + executor, e);\n",
        "408": "        runnables = null;  // allow GC to free listeners even if this stays around for a while.\n",
        "420": "        log.log(Level.SEVERE, \"RuntimeException while executing runnable \"\n",
        "421": "            + runnable + \" with executor \" + executor, e);\n",
        "478": "        head = null;  // allow GC to free listeners even if this stays around for a while.\n",
        "491": "        log.log(Level.SEVERE, \"RuntimeException while executing runnable \"\n",
        "492": "            + runnable + \" with executor \" + executor, e);\n",
        "530": "    /**\n",
        "531": "     * TODO(lukes):  This was copied verbatim from Striped64.java... standardize this?\n",
        "532": "     */\n",
        "534": "        try {\n",
        "535": "            return sun.misc.Unsafe.getUnsafe();\n",
        "536": "        } catch (SecurityException tryReflectionInstead) {}\n",
        "537": "        try {\n",
        "538": "            return java.security.AccessController.doPrivileged\n",
        "539": "            (new java.security.PrivilegedExceptionAction<sun.misc.Unsafe>() {\n",
        "540": "                @Override public sun.misc.Unsafe run() throws Exception {\n",
        "541": "                    Class<sun.misc.Unsafe> k = sun.misc.Unsafe.class;\n",
        "542": "                    for (java.lang.reflect.Field f : k.getDeclaredFields()) {\n",
        "543": "                        f.setAccessible(true);\n",
        "544": "                        Object x = f.get(null);\n",
        "545": "                        if (k.isInstance(x))\n",
        "546": "                            return k.cast(x);\n",
        "547": "                    }\n",
        "548": "                    throw new NoSuchFieldError(\"the Unsafe\");\n",
        "549": "                }});\n",
        "550": "        } catch (java.security.PrivilegedActionException e) {\n",
        "551": "            throw new RuntimeException(\"Could not initialize intrinsics\",\n",
        "552": "                                       e.getCause());\n",
        "553": "        }\n",
        "616": "          log.log(Level.SEVERE, \"RuntimeException while executing runnable \"\n",
        "617": "              + runnable + \" with executor \" + executor, e);\n"
    }
}