{
    "addition": {
        "43": " * <p>See the Guava User Guide article on <a\n",
        "44": " * href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n",
        "63": "   * Returns a hash code for {@code value}; equal to the result of invoking {@code ((Float)\n",
        "64": "   * value).hashCode()}.\n",
        "107": "   * that this always returns {@code false} when {@code target} is {@code NaN}.\n",
        "111": "   * @return {@code true} if {@code array[i] == target} for some value of {@code i}\n",
        "146": "   * Returns the start position of the first occurrence of the specified {@code target} within\n",
        "147": "   * {@code array}, or {@code -1} if there is no such occurrence.\n",
        "149": "   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,\n",
        "150": "   * i, i + target.length)} contains exactly the same elements as {@code target}.\n",
        "200": "   * Returns the least value present in {@code array}, using the same rules of comparison as {@link\n",
        "201": "   * Math#min(float, float)}.\n",
        "239": "   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code\n",
        "240": "   * value} is greater than {@code max}, {@code max} is returned.\n",
        "255": "   * Returns the values from each provided array combined into a single array. For example, {@code\n",
        "256": "   * concat(new float[] {a, b}, new float[] {}, new float[] {c}} returns the array {@code {a, b,\n",
        "257": "   * c}}.\n",
        "303": "   * Returns a serializable converter object that converts between strings and floats using {@link\n",
        "304": "   * Float#valueOf} and {@link Float#toString()}.\n",
        "323": "   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code\n",
        "324": "   *     minLength}\n",
        "338": "   * previous example, it returns the string {@code \"1-2-3\"}.\n",
        "367": "   * support only identity equality), but it is consistent with {@link Arrays#equals(float[],\n",
        "368": "   * float[])}.\n",
        "461": "   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.\n",
        "462": "   * Calling this method is as thread-safe as calling that method.\n",
        "486": "   * Returns a fixed-size list backed by the specified array, similar to {@link\n",
        "487": "   * Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any attempt to\n",
        "488": "   * set a value to {@code null} will result in a {@link NullPointerException}.\n",
        "494": "   * <p>The returned list may have unexpected behavior if it contains {@code NaN}, or if {@code NaN}\n",
        "495": "   * is used as a parameter to any of its methods.\n",
        "641": "   * throwing an exception if parsing fails. Valid inputs are exactly those accepted by {@link\n",
        "642": "   * Float#valueOf(String)}, except that leading and trailing whitespace is not permitted.\n",
        "644": "   * <p>This implementation is likely to be faster than {@code Float.parseFloat} if many failures\n",
        "645": "   * are expected.\n",
        "648": "   * @return the floating point value represented by {@code string}, or {@code null} if {@code\n",
        "649": "   *     string} has a length of zero or cannot be parsed as a {@code float} value\n"
    },
    "removed": {
        "43": " * <p>See the Guava User Guide article on\n",
        "44": " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n",
        "63": "   * Returns a hash code for {@code value}; equal to the result of invoking\n",
        "64": "   * {@code ((Float) value).hashCode()}.\n",
        "107": "   * that this always returns {@code false} when {@code\n",
        "108": "   * target} is {@code NaN}.\n",
        "112": "   * @return {@code true} if {@code array[i] == target} for some value of {@code\n",
        "113": "   *     i}\n",
        "148": "   * Returns the start position of the first occurrence of the specified {@code\n",
        "149": "   * target} within {@code array}, or {@code -1} if there is no such occurrence.\n",
        "151": "   * <p>More formally, returns the lowest index {@code i} such that\n",
        "152": "   * {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as\n",
        "153": "   * {@code target}.\n",
        "203": "   * Returns the least value present in {@code array}, using the same rules of comparison as\n",
        "204": "   * {@link Math#min(float, float)}.\n",
        "242": "   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if\n",
        "243": "   * {@code value} is greater than {@code max}, {@code max} is returned.\n",
        "258": "   * Returns the values from each provided array combined into a single array. For example,\n",
        "259": "   * {@code concat(new float[] {a, b}, new float[] {}, new float[] {c}} returns the array {@code {a,\n",
        "260": "   * b, c}}.\n",
        "306": "   * Returns a serializable converter object that converts between strings and floats using\n",
        "307": "   * {@link Float#valueOf} and {@link Float#toString()}.\n",
        "326": "   * @return an array containing the values of {@code array}, with guaranteed minimum length\n",
        "327": "   *     {@code minLength}\n",
        "341": "   * previous example, it returns the string {@code\n",
        "342": "   * \"1-2-3\"}.\n",
        "371": "   * support only identity equality), but it is consistent with\n",
        "372": "   * {@link Arrays#equals(float[], float[])}.\n",
        "465": "   * <p>Elements are copied from the argument collection as if by {@code\n",
        "466": "   * collection.toArray()}. Calling this method is as thread-safe as calling that method.\n",
        "490": "   * Returns a fixed-size list backed by the specified array, similar to\n",
        "491": "   * {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any\n",
        "492": "   * attempt to set a value to {@code null} will result in a {@link NullPointerException}.\n",
        "498": "   * <p>The returned list may have unexpected behavior if it contains {@code\n",
        "499": "   * NaN}, or if {@code NaN} is used as a parameter to any of its methods.\n",
        "645": "   * throwing an exception if parsing fails. Valid inputs are exactly those accepted by\n",
        "646": "   * {@link Float#valueOf(String)}, except that leading and trailing whitespace is not permitted.\n",
        "648": "   * <p>This implementation is likely to be faster than {@code\n",
        "649": "   * Float.parseFloat} if many failures are expected.\n",
        "652": "   * @return the floating point value represented by {@code string}, or {@code null} if\n",
        "653": "   *     {@code string} has a length of zero or cannot be parsed as a {@code float} value\n"
    }
}