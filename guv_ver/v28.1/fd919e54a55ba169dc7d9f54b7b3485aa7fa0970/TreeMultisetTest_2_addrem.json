{
    "addition": {
        "55": "    suite.addTest(\n",
        "56": "        SortedMultisetTestSuiteBuilder.using(\n",
        "57": "                new TestStringMultisetGenerator() {\n",
        "58": "                  @Override\n",
        "59": "                  protected Multiset<String> create(String[] elements) {\n",
        "60": "                    return TreeMultiset.create(Arrays.asList(elements));\n",
        "61": "                  }\n",
        "62": "\n",
        "63": "                  @Override\n",
        "64": "                  public List<String> order(List<String> insertionOrder) {\n",
        "65": "                    return Ordering.natural().sortedCopy(insertionOrder);\n",
        "66": "                  }\n",
        "67": "                })\n",
        "68": "            .withFeatures(\n",
        "69": "                CollectionSize.ANY,\n",
        "70": "                CollectionFeature.KNOWN_ORDER,\n",
        "71": "                CollectionFeature.GENERAL_PURPOSE,\n",
        "72": "                CollectionFeature.SERIALIZABLE,\n",
        "73": "                CollectionFeature.ALLOWS_NULL_QUERIES,\n",
        "74": "                MultisetFeature.ENTRIES_ARE_VIEWS)\n",
        "75": "            .named(\"TreeMultiset, Ordering.natural\")\n",
        "76": "            .createTestSuite());\n",
        "77": "    suite.addTest(\n",
        "78": "        SortedMultisetTestSuiteBuilder.using(\n",
        "79": "                new TestStringMultisetGenerator() {\n",
        "80": "                  @Override\n",
        "81": "                  protected Multiset<String> create(String[] elements) {\n",
        "82": "                    Multiset<String> result = TreeMultiset.create(NullsBeforeB.INSTANCE);\n",
        "83": "                    Collections.addAll(result, elements);\n",
        "84": "                    return result;\n",
        "85": "                  }\n",
        "86": "\n",
        "87": "                  @Override\n",
        "88": "                  public List<String> order(List<String> insertionOrder) {\n",
        "89": "                    sort(insertionOrder, NullsBeforeB.INSTANCE);\n",
        "90": "                    return insertionOrder;\n",
        "91": "                  }\n",
        "92": "                })\n",
        "93": "            .withFeatures(\n",
        "94": "                CollectionSize.ANY,\n",
        "95": "                CollectionFeature.KNOWN_ORDER,\n",
        "96": "                CollectionFeature.GENERAL_PURPOSE,\n",
        "97": "                CollectionFeature.SERIALIZABLE,\n",
        "98": "                CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "99": "                MultisetFeature.ENTRIES_ARE_VIEWS)\n",
        "100": "            .named(\"TreeMultiset, NullsBeforeB\")\n",
        "101": "            .createTestSuite());\n",
        "102": "    suite.addTest(\n",
        "103": "        NavigableSetTestSuiteBuilder.using(\n",
        "104": "                new TestStringSetGenerator() {\n",
        "105": "                  @Override\n",
        "106": "                  protected Set<String> create(String[] elements) {\n",
        "107": "                    return TreeMultiset.create(Arrays.asList(elements)).elementSet();\n",
        "108": "                  }\n",
        "109": "\n",
        "110": "                  @Override\n",
        "111": "                  public List<String> order(List<String> insertionOrder) {\n",
        "112": "                    return Lists.newArrayList(Sets.newTreeSet(insertionOrder));\n",
        "113": "                  }\n",
        "114": "                })\n",
        "115": "            .named(\"TreeMultiset[Ordering.natural].elementSet\")\n",
        "116": "            .withFeatures(\n",
        "117": "                CollectionSize.ANY,\n",
        "118": "                CollectionFeature.REMOVE_OPERATIONS,\n",
        "119": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "120": "            .createTestSuite());\n",
        "145": "    Multiset<String> multiset = TreeMultiset.create(Arrays.asList(\"foo\", \"bar\", \"foo\"));\n",
        "262": "    Comparator<String> comparator =\n",
        "263": "        new Comparator<String>() {\n",
        "264": "          @Override\n",
        "265": "          public int compare(String o1, String o2) {\n",
        "266": "            return o2.compareTo(o1);\n",
        "267": "          }\n",
        "268": "        };\n",
        "312": "  /** Test a TreeMultiset with a comparator that can return 0 when comparing unequal values. */\n"
    },
    "removed": {
        "55": "    suite.addTest(SortedMultisetTestSuiteBuilder\n",
        "56": "        .using(new TestStringMultisetGenerator() {\n",
        "57": "          @Override\n",
        "58": "          protected Multiset<String> create(String[] elements) {\n",
        "59": "            return TreeMultiset.create(Arrays.asList(elements));\n",
        "60": "          }\n",
        "61": "\n",
        "62": "          @Override\n",
        "63": "          public List<String> order(List<String> insertionOrder) {\n",
        "64": "            return Ordering.natural().sortedCopy(insertionOrder);\n",
        "65": "          }\n",
        "66": "        })\n",
        "67": "        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "68": "            CollectionFeature.GENERAL_PURPOSE,\n",
        "69": "            CollectionFeature.SERIALIZABLE,\n",
        "70": "            CollectionFeature.ALLOWS_NULL_QUERIES,\n",
        "71": "            MultisetFeature.ENTRIES_ARE_VIEWS)\n",
        "72": "        .named(\"TreeMultiset, Ordering.natural\")\n",
        "73": "        .createTestSuite());\n",
        "74": "    suite.addTest(SortedMultisetTestSuiteBuilder\n",
        "75": "        .using(new TestStringMultisetGenerator() {\n",
        "76": "          @Override\n",
        "77": "          protected Multiset<String> create(String[] elements) {\n",
        "78": "            Multiset<String> result = TreeMultiset.create(NullsBeforeB.INSTANCE);\n",
        "79": "            Collections.addAll(result, elements);\n",
        "80": "            return result;\n",
        "81": "          }\n",
        "82": "\n",
        "83": "          @Override\n",
        "84": "          public List<String> order(List<String> insertionOrder) {\n",
        "85": "            sort(insertionOrder, NullsBeforeB.INSTANCE);\n",
        "86": "            return insertionOrder;\n",
        "87": "          }\n",
        "88": "        })\n",
        "89": "        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "90": "            CollectionFeature.GENERAL_PURPOSE,\n",
        "91": "            CollectionFeature.SERIALIZABLE,\n",
        "92": "            CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "93": "            MultisetFeature.ENTRIES_ARE_VIEWS)\n",
        "94": "        .named(\"TreeMultiset, NullsBeforeB\")\n",
        "95": "        .createTestSuite());\n",
        "96": "    suite.addTest(NavigableSetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "97": "        @Override\n",
        "98": "        protected Set<String> create(String[] elements) {\n",
        "99": "          return TreeMultiset.create(Arrays.asList(elements)).elementSet();\n",
        "100": "        }\n",
        "101": "\n",
        "102": "        @Override\n",
        "103": "        public List<String> order(List<String> insertionOrder) {\n",
        "104": "          return Lists.newArrayList(Sets.newTreeSet(insertionOrder));\n",
        "105": "        }\n",
        "106": "      })\n",
        "107": "      .named(\"TreeMultiset[Ordering.natural].elementSet\")\n",
        "108": "      .withFeatures(\n",
        "109": "          CollectionSize.ANY,\n",
        "110": "          CollectionFeature.REMOVE_OPERATIONS,\n",
        "111": "          CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "112": "      .createTestSuite());\n",
        "137": "    Multiset<String> multiset\n",
        "138": "        = TreeMultiset.create(Arrays.asList(\"foo\", \"bar\", \"foo\"));\n",
        "255": "    Comparator<String> comparator = new Comparator<String>() {\n",
        "256": "      @Override\n",
        "257": "      public int compare(String o1, String o2) {\n",
        "258": "        return o2.compareTo(o1);\n",
        "259": "      }\n",
        "260": "    };\n",
        "304": "  /**\n",
        "305": "   * Test a TreeMultiset with a comparator that can return 0 when comparing\n",
        "306": "   * unequal values.\n",
        "307": "   */\n"
    }
}