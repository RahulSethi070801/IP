{
    "addition": {
        "53": "    suite.addTest(\n",
        "54": "        MultisetTestSuiteBuilder.using(concurrentHashMultisetGenerator())\n",
        "55": "            .withFeatures(\n",
        "56": "                CollectionSize.ANY,\n",
        "57": "                CollectionFeature.GENERAL_PURPOSE,\n",
        "58": "                CollectionFeature.SERIALIZABLE,\n",
        "59": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "60": "            .named(\"ConcurrentHashMultiset\")\n",
        "61": "            .createTestSuite());\n",
        "62": "    suite.addTest(\n",
        "63": "        MultisetTestSuiteBuilder.using(concurrentSkipListMultisetGenerator())\n",
        "64": "            .withFeatures(\n",
        "65": "                CollectionSize.ANY,\n",
        "66": "                CollectionFeature.KNOWN_ORDER,\n",
        "67": "                CollectionFeature.GENERAL_PURPOSE,\n",
        "68": "                CollectionFeature.SERIALIZABLE,\n",
        "69": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "70": "            .named(\"ConcurrentSkipListMultiset\")\n",
        "71": "            .createTestSuite());\n",
        "78": "      @Override\n",
        "79": "      protected Multiset<String> create(String[] elements) {\n",
        "108": "  @Override\n",
        "109": "  protected void setUp() {\n",
        "172": "   * the putIfAbsent returns a non-null value, and the case where the replace() of an observed zero\n",
        "173": "   * fails.\n",
        "252": "    } catch (IllegalArgumentException expected) {\n",
        "253": "    }\n",
        "322": "    ConcurrentHashMultiset<Integer> multiset = ConcurrentHashMultiset.create(iterable);\n",
        "335": "  private void testIdentityKeyEquality(MapMakerInternalMap.Strength keyStrength) {\n",
        "371": "  private void testLogicalKeyEquality(MapMakerInternalMap.Strength keyStrength) {\n"
    },
    "removed": {
        "53": "    suite.addTest(MultisetTestSuiteBuilder.using(concurrentHashMultisetGenerator())\n",
        "54": "        .withFeatures(CollectionSize.ANY,\n",
        "55": "            CollectionFeature.GENERAL_PURPOSE,\n",
        "56": "            CollectionFeature.SERIALIZABLE,\n",
        "57": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "58": "        .named(\"ConcurrentHashMultiset\")\n",
        "59": "        .createTestSuite());\n",
        "60": "    suite.addTest(MultisetTestSuiteBuilder.using(concurrentSkipListMultisetGenerator())\n",
        "61": "        .withFeatures(CollectionSize.ANY,\n",
        "62": "            CollectionFeature.KNOWN_ORDER,\n",
        "63": "            CollectionFeature.GENERAL_PURPOSE,\n",
        "64": "            CollectionFeature.SERIALIZABLE,\n",
        "65": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "66": "        .named(\"ConcurrentSkipListMultiset\")\n",
        "67": "        .createTestSuite());\n",
        "74": "      @Override protected Multiset<String> create(String[] elements) {\n",
        "103": "  @Override protected void setUp() {\n",
        "166": "   * the putIfAbsent returns a non-null value, and the case where the replace() of an observed\n",
        "167": "   * zero fails.\n",
        "246": "    } catch (IllegalArgumentException expected) {}\n",
        "315": "    ConcurrentHashMultiset<Integer> multiset\n",
        "316": "        = ConcurrentHashMultiset.create(iterable);\n",
        "329": "  private void testIdentityKeyEquality(\n",
        "330": "      MapMakerInternalMap.Strength keyStrength) {\n",
        "366": "  private void testLogicalKeyEquality(\n",
        "367": "      MapMakerInternalMap.Strength keyStrength) {\n"
    }
}