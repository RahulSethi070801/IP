{
    "addition": {
        "26": " * This class provides a skeletal implementation of the {@code Iterator} interface, to make this\n",
        "27": " * interface easier to implement for certain types of data sources.\n",
        "29": " * <p>{@code Iterator} requires its implementations to support querying the end-of-data status\n",
        "30": " * without changing the iterator's state, using the {@link #hasNext} method. But many data sources,\n",
        "31": " * such as {@link java.io.Reader#read()}, do not expose this information; the only way to discover\n",
        "32": " * whether there is any data left is by trying to retrieve it. These types of data sources are\n",
        "33": " * ordinarily difficult to write iterators for. But using this class, one must implement only the\n",
        "34": " * {@link #computeNext} method, and invoke the {@link #endOfData} method when appropriate.\n",
        "36": " * <p>Another example is an iterator that skips over null elements in a backing iterator. This could\n",
        "37": " * be implemented as:\n",
        "39": " * <pre>{@code\n",
        "40": " * public static Iterator<String> skipNulls(final Iterator<String> in) {\n",
        "41": " *   return new AbstractIterator<String>() {\n",
        "42": " *     protected String computeNext() {\n",
        "43": " *       while (in.hasNext()) {\n",
        "44": " *         String s = in.next();\n",
        "45": " *         if (s != null) {\n",
        "46": " *           return s;\n",
        "49": " *       return endOfData();\n",
        "50": " *     }\n",
        "51": " *   };\n",
        "52": " * }\n",
        "53": " * }</pre>\n",
        "86": "   * Returns the next element. <b>Note:</b> the implementation must call {@link #endOfData()} when\n",
        "87": "   * there are no elements left in the iteration. Failure to do so could result in an infinite loop.\n",
        "89": "   * <p>The initial invocation of {@link #hasNext()} or {@link #next()} calls this method, as does\n",
        "90": "   * the first invocation of {@code hasNext} or {@code next} following each successful call to\n",
        "91": "   * {@code next}. Once the implementation either invokes {@code endOfData} or throws an exception,\n",
        "94": "   * <p>If this method throws an exception, it will propagate outward to the {@code hasNext} or\n",
        "95": "   * {@code next} invocation that invoked this method. Any further attempts to use the iterator will\n",
        "96": "   * result in an {@link IllegalStateException}.\n",
        "98": "   * <p>The implementation of this method may not invoke the {@code hasNext}, {@code next}, or\n",
        "99": "   * {@link #peek()} methods on this instance; if it does, an {@code IllegalStateException} will\n",
        "100": "   * result.\n",
        "102": "   * @return the next element if there was one. If {@code endOfData} was called during execution,\n",
        "103": "   *     the return value will be ignored.\n",
        "104": "   * @throws RuntimeException if any unrecoverable error happens. This exception will propagate\n",
        "105": "   *     outward to the {@code hasNext()}, {@code next()}, or {@code peek()} invocation that invoked\n",
        "106": "   *     this method. Any further attempts to use the iterator will result in an {@link\n",
        "107": "   *     IllegalStateException}.\n",
        "112": "   * Implementations of {@link #computeNext} <b>must</b> invoke this method when there are no\n",
        "113": "   * elements left in the iteration.\n",
        "115": "   * @return {@code null}; a convenience so your {@code computeNext} implementation can use the\n",
        "116": "   *     simple statement {@code return endOfData();}\n",
        "161": "   * Returns the next element in the iteration without advancing the iteration, according to the\n",
        "162": "   * contract of {@link PeekingIterator#peek()}.\n",
        "164": "   * <p>Implementations of {@code AbstractIterator} that wish to expose this functionality should\n",
        "165": "   * implement {@code PeekingIterator}.\n"
    },
    "removed": {
        "26": " * This class provides a skeletal implementation of the {@code Iterator}\n",
        "27": " * interface, to make this interface easier to implement for certain types of\n",
        "28": " * data sources.\n",
        "30": " * <p>{@code Iterator} requires its implementations to support querying the\n",
        "31": " * end-of-data status without changing the iterator's state, using the {@link\n",
        "32": " * #hasNext} method. But many data sources, such as {@link\n",
        "33": " * java.io.Reader#read()}, do not expose this information; the only way to\n",
        "34": " * discover whether there is any data left is by trying to retrieve it. These\n",
        "35": " * types of data sources are ordinarily difficult to write iterators for. But\n",
        "36": " * using this class, one must implement only the {@link #computeNext} method,\n",
        "37": " * and invoke the {@link #endOfData} method when appropriate.\n",
        "39": " * <p>Another example is an iterator that skips over null elements in a backing\n",
        "40": " * iterator. This could be implemented as: <pre>   {@code\n",
        "42": " *   public static Iterator<String> skipNulls(final Iterator<String> in) {\n",
        "43": " *     return new AbstractIterator<String>() {\n",
        "44": " *       protected String computeNext() {\n",
        "45": " *         while (in.hasNext()) {\n",
        "46": " *           String s = in.next();\n",
        "47": " *           if (s != null) {\n",
        "48": " *             return s;\n",
        "49": " *           }\n",
        "51": " *         return endOfData();\n",
        "53": " *     };\n",
        "54": " *   }}</pre>\n",
        "87": "   * Returns the next element. <b>Note:</b> the implementation must call {@link\n",
        "88": "   * #endOfData()} when there are no elements left in the iteration. Failure to\n",
        "89": "   * do so could result in an infinite loop.\n",
        "91": "   * <p>The initial invocation of {@link #hasNext()} or {@link #next()} calls\n",
        "92": "   * this method, as does the first invocation of {@code hasNext} or {@code\n",
        "93": "   * next} following each successful call to {@code next}. Once the\n",
        "94": "   * implementation either invokes {@code endOfData} or throws an exception,\n",
        "97": "   * <p>If this method throws an exception, it will propagate outward to the\n",
        "98": "   * {@code hasNext} or {@code next} invocation that invoked this method. Any\n",
        "99": "   * further attempts to use the iterator will result in an {@link\n",
        "100": "   * IllegalStateException}.\n",
        "102": "   * <p>The implementation of this method may not invoke the {@code hasNext},\n",
        "103": "   * {@code next}, or {@link #peek()} methods on this instance; if it does, an\n",
        "104": "   * {@code IllegalStateException} will result.\n",
        "106": "   * @return the next element if there was one. If {@code endOfData} was called\n",
        "107": "   *     during execution, the return value will be ignored.\n",
        "108": "   * @throws RuntimeException if any unrecoverable error happens. This exception\n",
        "109": "   *     will propagate outward to the {@code hasNext()}, {@code next()}, or\n",
        "110": "   *     {@code peek()} invocation that invoked this method. Any further\n",
        "111": "   *     attempts to use the iterator will result in an\n",
        "112": "   *     {@link IllegalStateException}.\n",
        "117": "   * Implementations of {@link #computeNext} <b>must</b> invoke this method when\n",
        "118": "   * there are no elements left in the iteration.\n",
        "120": "   * @return {@code null}; a convenience so your {@code computeNext}\n",
        "121": "   *     implementation can use the simple statement {@code return endOfData();}\n",
        "166": "   * Returns the next element in the iteration without advancing the iteration,\n",
        "167": "   * according to the contract of {@link PeekingIterator#peek()}.\n",
        "169": "   * <p>Implementations of {@code AbstractIterator} that wish to expose this\n",
        "170": "   * functionality should implement {@code PeekingIterator}.\n"
    }
}