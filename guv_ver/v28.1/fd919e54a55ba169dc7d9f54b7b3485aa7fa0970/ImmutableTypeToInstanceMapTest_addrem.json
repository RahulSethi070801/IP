{
    "addition": {
        "48": "    suite.addTest(\n",
        "49": "        MapTestSuiteBuilder.using(\n",
        "50": "                new TestTypeToInstanceMapGenerator() {\n",
        "51": "                  // Other tests will verify what real, warning-free usage looks like\n",
        "52": "                  // but here we have to do some serious fudging\n",
        "53": "                  @Override\n",
        "54": "                  @SuppressWarnings(\"unchecked\")\n",
        "55": "                  public Map<TypeToken, Object> create(Object... elements) {\n",
        "56": "                    ImmutableTypeToInstanceMap.Builder<Object> builder =\n",
        "57": "                        ImmutableTypeToInstanceMap.builder();\n",
        "58": "                    for (Object object : elements) {\n",
        "59": "                      Entry<TypeToken, Object> entry = (Entry<TypeToken, Object>) object;\n",
        "60": "                      builder.put(entry.getKey(), entry.getValue());\n",
        "61": "                    }\n",
        "62": "                    return (Map) builder.build();\n",
        "63": "                  }\n",
        "64": "                })\n",
        "65": "            .named(\"ImmutableTypeToInstanceMap\")\n",
        "66": "            .withFeatures(\n",
        "67": "                MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "68": "                MapFeature.RESTRICTS_KEYS,\n",
        "69": "                CollectionFeature.KNOWN_ORDER,\n",
        "70": "                CollectionSize.ANY,\n",
        "71": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "72": "            .createTestSuite());\n",
        "82": "    ImmutableTypeToInstanceMap<Number> map =\n",
        "83": "        ImmutableTypeToInstanceMap.<Number>builder()\n",
        "84": "            .put(Integer.class, 0)\n",
        "85": "            .put(int.class, 1)\n",
        "86": "            .build();\n",
        "97": "    ImmutableTypeToInstanceMap<Iterable<?>> map =\n",
        "98": "        ImmutableTypeToInstanceMap.<Iterable<?>>builder().put(type, ImmutableList.of(1)).build();\n",
        "108": "        ImmutableTypeToInstanceMap.<Iterable<?>[]>builder().put(type, array).build();\n",
        "116": "    ImmutableTypeToInstanceMap<Iterable<?>> map =\n",
        "117": "        ImmutableTypeToInstanceMap.<Iterable<?>>builder().put(type, ImmutableList.of(1)).build();\n",
        "127": "    } catch (IllegalArgumentException expected) {\n",
        "128": "    }\n",
        "137": "    } catch (IllegalArgumentException expected) {\n",
        "138": "    }\n",
        "148": "    @Override\n",
        "149": "    public TypeToken[] createKeyArray(int length) {\n",
        "153": "    @Override\n",
        "154": "    public Object[] createValueArray(int length) {\n"
    },
    "removed": {
        "48": "    suite.addTest(MapTestSuiteBuilder\n",
        "49": "        .using(new TestTypeToInstanceMapGenerator() {\n",
        "50": "          // Other tests will verify what real, warning-free usage looks like\n",
        "51": "          // but here we have to do some serious fudging\n",
        "52": "          @Override\n",
        "53": "          @SuppressWarnings(\"unchecked\")\n",
        "54": "          public Map<TypeToken, Object> create(Object... elements) {\n",
        "55": "            ImmutableTypeToInstanceMap.Builder<Object> builder\n",
        "56": "                = ImmutableTypeToInstanceMap.builder();\n",
        "57": "            for (Object object : elements) {\n",
        "58": "              Entry<TypeToken, Object> entry = (Entry<TypeToken, Object>) object;\n",
        "59": "              builder.put(entry.getKey(), entry.getValue());\n",
        "60": "            }\n",
        "61": "            return (Map) builder.build();\n",
        "62": "          }\n",
        "63": "        })\n",
        "64": "        .named(\"ImmutableTypeToInstanceMap\")\n",
        "65": "        .withFeatures(\n",
        "66": "            MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "67": "            MapFeature.RESTRICTS_KEYS,\n",
        "68": "            CollectionFeature.KNOWN_ORDER,\n",
        "69": "            CollectionSize.ANY,\n",
        "70": "            MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "71": "        .createTestSuite());\n",
        "81": "    ImmutableTypeToInstanceMap<Number> map = ImmutableTypeToInstanceMap.<Number>builder()\n",
        "82": "        .put(Integer.class, 0)\n",
        "83": "        .put(int.class, 1)\n",
        "84": "        .build();\n",
        "95": "    ImmutableTypeToInstanceMap<Iterable<?>> map = ImmutableTypeToInstanceMap.<Iterable<?>>builder()\n",
        "96": "        .put(type, ImmutableList.of(1))\n",
        "97": "        .build();\n",
        "107": "        ImmutableTypeToInstanceMap.<Iterable<?>[]>builder()\n",
        "108": "            .put(type, array)\n",
        "109": "            .build();\n",
        "117": "    ImmutableTypeToInstanceMap<Iterable<?>> map = ImmutableTypeToInstanceMap.<Iterable<?>>builder()\n",
        "118": "            .put(type, ImmutableList.of(1))\n",
        "119": "            .build();\n",
        "129": "    } catch (IllegalArgumentException expected) {}\n",
        "138": "    } catch (IllegalArgumentException expected) {}\n",
        "148": "    @Override public TypeToken[] createKeyArray(int length) {\n",
        "152": "    @Override public Object[] createValueArray(int length) {\n"
    }
}