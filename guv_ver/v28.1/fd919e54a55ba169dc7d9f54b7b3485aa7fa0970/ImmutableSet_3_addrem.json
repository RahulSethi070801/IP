{
    "addition": {
        "145": "   * Constructs an {@code ImmutableSet} from the first {@code n} elements of the specified array. If\n",
        "146": "   * {@code k} is the size of the returned {@code ImmutableSet}, then the unique elements of {@code\n",
        "147": "   * elements} will be in the first {@code k} positions, and {@code elements[i] == null} for {@code\n",
        "148": "   * k <= i < n}.\n",
        "150": "   * <p>This may modify {@code elements}. Additionally, if {@code n == elements.length} and {@code\n",
        "151": "   * elements} contains no duplicates, {@code elements} may be used without copying in the returned\n",
        "152": "   * {@code ImmutableSet}, in which case it may no longer be modified.\n",
        "156": "   * @throws NullPointerException if any of the first {@code n} elements of {@code elements} is null\n",
        "220": "   * can hold setSize elements with the desired load factor. Always returns at least setSize + 2.\n",
        "361": "  @LazyInit @Nullable @RetainedWith private transient ImmutableList<E> asList;\n",
        "438": "   * Returns a new builder. The generated builder is equivalent to the builder created by the {@link\n",
        "439": "   * Builder} constructor.\n",
        "464": "   * A builder for creating {@code ImmutableSet} instances. Example:\n",
        "466": "   * <pre>{@code\n",
        "467": "   * static final ImmutableSet<Color> GOOGLE_COLORS =\n",
        "468": "   *     ImmutableSet.<Color>builder()\n",
        "469": "   *         .addAll(WEBSAFE_COLORS)\n",
        "470": "   *         .add(new Color(0, 191, 255))\n",
        "471": "   *         .build();\n",
        "472": "   * }</pre>\n",
        "482": "    @Nullable @VisibleForTesting Object[] hashTable;\n",
        "486": "     * Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n",
        "487": "     * ImmutableSet#builder}.\n",
        "499": "     * Adds {@code element} to the {@code ImmutableSet}. If the {@code ImmutableSet} already\n",
        "500": "     * contains {@code element}, then {@code add} has no effect (only the previously added element\n",
        "501": "     * is retained).\n",
        "539": "     * Adds each element of {@code elements} to the {@code ImmutableSet}, ignoring duplicate\n",
        "540": "     * elements (only the first duplicate element is added).\n",
        "544": "     * @throws NullPointerException if {@code elements} is null or contains a null element\n",
        "560": "     * Adds each element of {@code elements} to the {@code ImmutableSet}, ignoring duplicate\n",
        "561": "     * elements (only the first duplicate element is added).\n",
        "565": "     * @throws NullPointerException if {@code elements} is null or contains a null element\n",
        "582": "     * Adds each element of {@code elements} to the {@code ImmutableSet}, ignoring duplicate\n",
        "583": "     * elements (only the first duplicate element is added).\n",
        "587": "     * @throws NullPointerException if {@code elements} is null or contains a null element\n",
        "603": "      if (hashTable != null && builder instanceof Builder) {\n",
        "614": "     * Returns a newly-created {@code ImmutableSet} based on the contents of the {@code Builder}.\n"
    },
    "removed": {
        "145": "   * Constructs an {@code ImmutableSet} from the first {@code n} elements of the specified array.\n",
        "146": "   * If {@code k} is the size of the returned {@code ImmutableSet}, then the unique elements of\n",
        "147": "   * {@code elements} will be in the first {@code k} positions, and {@code elements[i] == null} for\n",
        "148": "   * {@code k <= i < n}.\n",
        "150": "   * <p>This may modify {@code elements}.  Additionally, if {@code n == elements.length} and\n",
        "151": "   * {@code elements} contains no duplicates, {@code elements} may be used without copying in the\n",
        "152": "   * returned {@code ImmutableSet}, in which case it may no longer be modified.\n",
        "156": "   * @throws NullPointerException if any of the first {@code n} elements of {@code elements} is\n",
        "157": "   *          null\n",
        "221": "   * can hold setSize elements with the desired load factor.  Always returns at least setSize + 2.\n",
        "362": "  @LazyInit\n",
        "363": "  @Nullable\n",
        "364": "  @RetainedWith\n",
        "365": "  private transient ImmutableList<E> asList;\n",
        "442": "   * Returns a new builder. The generated builder is equivalent to the builder\n",
        "443": "   * created by the {@link Builder} constructor.\n",
        "468": "   * A builder for creating {@code ImmutableSet} instances. Example: <pre>   {@code\n",
        "470": "   *   static final ImmutableSet<Color> GOOGLE_COLORS =\n",
        "471": "   *       ImmutableSet.<Color>builder()\n",
        "472": "   *           .addAll(WEBSAFE_COLORS)\n",
        "473": "   *           .add(new Color(0, 191, 255))\n",
        "474": "   *           .build();}</pre>\n",
        "484": "    @Nullable\n",
        "485": "    @VisibleForTesting\n",
        "486": "    Object[] hashTable;\n",
        "490": "     * Creates a new builder. The returned builder is equivalent to the builder\n",
        "491": "     * generated by {@link ImmutableSet#builder}.\n",
        "503": "     * Adds {@code element} to the {@code ImmutableSet}.  If the {@code\n",
        "504": "     * ImmutableSet} already contains {@code element}, then {@code add} has no\n",
        "505": "     * effect (only the previously added element is retained).\n",
        "543": "     * Adds each element of {@code elements} to the {@code ImmutableSet},\n",
        "544": "     * ignoring duplicate elements (only the first duplicate element is added).\n",
        "548": "     * @throws NullPointerException if {@code elements} is null or contains a\n",
        "549": "     *     null element\n",
        "565": "     * Adds each element of {@code elements} to the {@code ImmutableSet},\n",
        "566": "     * ignoring duplicate elements (only the first duplicate element is added).\n",
        "570": "     * @throws NullPointerException if {@code elements} is null or contains a\n",
        "571": "     *     null element\n",
        "588": "     * Adds each element of {@code elements} to the {@code ImmutableSet},\n",
        "589": "     * ignoring duplicate elements (only the first duplicate element is added).\n",
        "593": "     * @throws NullPointerException if {@code elements} is null or contains a\n",
        "594": "     *     null element\n",
        "610": "      if (hashTable != null\n",
        "611": "          && builder instanceof Builder) {\n",
        "622": "     * Returns a newly-created {@code ImmutableSet} based on the contents of\n",
        "623": "     * the {@code Builder}.\n"
    }
}