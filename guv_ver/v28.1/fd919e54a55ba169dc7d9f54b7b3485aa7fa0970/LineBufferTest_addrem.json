{
    "addition": {
        "49": "    bufferHelper(\"two lines\\nbut no newline at end\", \"two lines\\n\", \"but no newline at end\");\n",
        "50": "    bufferHelper(\n",
        "51": "        \"\\nempty first line\\nno newline at end\", \"\\n\", \"empty first line\\n\", \"no newline at end\");\n",
        "52": "    bufferHelper(\"three\\rlines\\rno newline at end\", \"three\\r\", \"lines\\r\", \"no newline at end\");\n",
        "53": "    bufferHelper(\"mixed\\nline\\rendings\\r\\n\", \"mixed\\n\", \"line\\r\", \"endings\\r\\n\");\n",
        "56": "  private static final int[] CHUNK_SIZES = {1, 2, 3, Integer.MAX_VALUE};\n",
        "58": "  private static void bufferHelper(String input, String... expect) throws IOException {\n",
        "61": "    List<String> expectRead =\n",
        "62": "        Lists.transform(\n",
        "63": "            expectProcess,\n",
        "64": "            new Function<String, String>() {\n",
        "65": "              @Override\n",
        "66": "              public String apply(String value) {\n",
        "67": "                return value.replaceAll(\"[\\\\r\\\\n]\", \"\");\n",
        "68": "              }\n",
        "69": "            });\n",
        "80": "  private static List<String> bufferHelper(String input, int chunk) throws IOException {\n",
        "82": "    LineBuffer lineBuf =\n",
        "83": "        new LineBuffer() {\n",
        "84": "          @Override\n",
        "85": "          protected void handleLine(String line, String end) {\n",
        "86": "            lines.add(line + end);\n",
        "87": "          }\n",
        "88": "        };\n",
        "100": "  private static List<String> readUsingJava(String input, int chunk) throws IOException {\n",
        "111": "  private static List<String> readUsingReader(String input, int chunk, boolean asReader)\n",
        "112": "      throws IOException {\n",
        "113": "    Readable readable =\n",
        "114": "        asReader ? getChunkedReader(input, chunk) : getChunkedReadable(input, chunk);\n",
        "137": "      @Override\n",
        "138": "      public int read(char[] cbuf, int off, int len) throws IOException {\n"
    },
    "removed": {
        "49": "    bufferHelper(\"two lines\\nbut no newline at end\",\n",
        "50": "        \"two lines\\n\", \"but no newline at end\");\n",
        "51": "    bufferHelper(\"\\nempty first line\\nno newline at end\",\n",
        "52": "        \"\\n\", \"empty first line\\n\", \"no newline at end\");\n",
        "53": "    bufferHelper(\"three\\rlines\\rno newline at end\",\n",
        "54": "        \"three\\r\", \"lines\\r\", \"no newline at end\");\n",
        "55": "    bufferHelper(\"mixed\\nline\\rendings\\r\\n\",\n",
        "56": "        \"mixed\\n\", \"line\\r\", \"endings\\r\\n\");\n",
        "59": "  private static final int[] CHUNK_SIZES = { 1, 2, 3, Integer.MAX_VALUE };\n",
        "61": "  private static void bufferHelper(String input, String... expect)\n",
        "62": "      throws IOException {\n",
        "65": "    List<String> expectRead = Lists.transform(expectProcess,\n",
        "66": "        new Function<String, String>() {\n",
        "67": "          @Override\n",
        "68": "          public String apply(String value) {\n",
        "69": "            return value.replaceAll(\"[\\\\r\\\\n]\", \"\");\n",
        "70": "          }\n",
        "71": "        });\n",
        "82": "  private static List<String> bufferHelper(String input, int chunk)\n",
        "83": "      throws IOException {\n",
        "85": "    LineBuffer lineBuf = new LineBuffer() {\n",
        "86": "      @Override protected void handleLine(String line, String end) {\n",
        "87": "        lines.add(line + end);\n",
        "88": "      }\n",
        "89": "    };\n",
        "101": "  private static List<String> readUsingJava(String input, int chunk)\n",
        "102": "      throws IOException {\n",
        "113": "  private static List<String> readUsingReader(String input, int chunk,\n",
        "114": "      boolean asReader) throws IOException {\n",
        "115": "    Readable readable = asReader\n",
        "116": "        ? getChunkedReader(input, chunk)\n",
        "117": "        : getChunkedReadable(input, chunk);\n",
        "140": "      @Override public int read(char[] cbuf, int off, int len)\n",
        "141": "          throws IOException {\n"
    }
}