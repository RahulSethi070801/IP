{
    "addition": {
        "59": "        @Override\n",
        "60": "        public ReadWriteLock get() {\n",
        "61": "          return new ReentrantReadWriteLock();\n",
        "62": "        }\n",
        "63": "      };\n",
        "65": "  private static final Supplier<Lock> LOCK_SUPPLER =\n",
        "66": "      new Supplier<Lock>() {\n",
        "67": "        @Override\n",
        "68": "        public Lock get() {\n",
        "69": "          return new ReentrantLock();\n",
        "70": "        }\n",
        "71": "      };\n",
        "73": "  private static final Supplier<Semaphore> SEMAPHORE_SUPPLER =\n",
        "74": "      new Supplier<Semaphore>() {\n",
        "75": "        @Override\n",
        "76": "        public Semaphore get() {\n",
        "77": "          return new Semaphore(1, false);\n",
        "78": "        }\n",
        "79": "      };\n",
        "176": "  /** Checks idempotency, and that we observe the promised number of stripes. */\n",
        "202": "    } catch (RuntimeException expected) {\n",
        "203": "    }\n",
        "208": "    } catch (RuntimeException expected) {\n",
        "209": "    }\n",
        "213": "    for (Striped<?> striped :\n",
        "214": "        ImmutableList.of(\n",
        "215": "            Striped.lazyWeakLock(Integer.MAX_VALUE),\n",
        "216": "            Striped.lazyWeakSemaphore(Integer.MAX_VALUE, Integer.MAX_VALUE),\n",
        "217": "            Striped.lazyWeakReadWriteLock(Integer.MAX_VALUE))) {\n"
    },
    "removed": {
        "59": "    @Override public ReadWriteLock get() {\n",
        "60": "      return new ReentrantReadWriteLock();\n",
        "61": "    }\n",
        "62": "  };\n",
        "64": "  private static final Supplier<Lock> LOCK_SUPPLER = new Supplier<Lock>() {\n",
        "65": "    @Override public Lock get() {\n",
        "66": "      return new ReentrantLock();\n",
        "67": "    }\n",
        "68": "  };\n",
        "70": "  private static final Supplier<Semaphore> SEMAPHORE_SUPPLER = new Supplier<Semaphore>() {\n",
        "71": "    @Override public Semaphore get() {\n",
        "72": "      return new Semaphore(1, false);\n",
        "73": "    }\n",
        "74": "  };\n",
        "171": "  /**\n",
        "172": "   * Checks idempotency, and that we observe the promised number of stripes.\n",
        "173": "   */\n",
        "199": "    } catch (RuntimeException expected) {}\n",
        "204": "    } catch (RuntimeException expected) {}\n",
        "208": "    for (Striped<?> striped : ImmutableList.of(\n",
        "209": "        Striped.lazyWeakLock(Integer.MAX_VALUE),\n",
        "210": "        Striped.lazyWeakSemaphore(Integer.MAX_VALUE, Integer.MAX_VALUE),\n",
        "211": "        Striped.lazyWeakReadWriteLock(Integer.MAX_VALUE))) {\n"
    }
}