{
    "addition": {
        "24": " * <p>See the Guava User Guide on <a\n",
        "25": " * href=\"https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained\">writing {@code Object}\n",
        "26": " * methods with {@code Objects}</a>.\n",
        "39": "   *   <li>{@code true} if {@code a} and {@code b} are both null.\n",
        "40": "   *   <li>{@code true} if {@code a} and {@code b} are both non-null and they are equal according to\n",
        "41": "   *       {@link Object#equals(Object)}.\n",
        "42": "   *   <li>{@code false} in all other situations.\n",
        "45": "   * <p>This assumes that any non-null objects passed to this function conform to the {@code\n",
        "46": "   * equals()} contract.\n",
        "48": "   * <p><b>Note for Java 7 and later:</b> This method should be treated as deprecated; use {@link\n",
        "49": "   * java.util.Objects#equals} instead.\n",
        "56": "   * Generates a hash code for multiple values. The hash code is generated by calling {@link\n",
        "57": "   * Arrays#hashCode(Object[])}. Note that array arguments to this method, with the exception of a\n",
        "58": "   * single Object array, do not get any special handling; their hash codes are based on identity\n",
        "59": "   * and not contents.\n",
        "64": "   * <pre>{@code\n",
        "65": "   * public int hashCode() {\n",
        "66": "   *   return Objects.hashCode(getX(), getY(), getZ());\n",
        "67": "   * }\n",
        "68": "   * }</pre>\n",
        "73": "   * <p><b>Note for Java 7 and later:</b> This method should be treated as deprecated; use {@link\n",
        "74": "   * java.util.Objects#hash} instead.\n"
    },
    "removed": {
        "24": " * <p>See the Guava User Guide on\n",
        "25": " * <a href=\"https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained\">writing\n",
        "26": " * {@code Object} methods with {@code Objects}</a>.\n",
        "39": "   * <li>{@code true} if {@code a} and {@code b} are both null.\n",
        "40": "   * <li>{@code true} if {@code a} and {@code b} are both non-null and they are equal according to\n",
        "41": "   *     {@link Object#equals(Object)}.\n",
        "42": "   * <li>{@code false} in all other situations.\n",
        "45": "   * <p>This assumes that any non-null objects passed to this function conform to the\n",
        "46": "   * {@code equals()} contract.\n",
        "48": "   * <p><b>Note for Java 7 and later:</b> This method should be treated as deprecated; use\n",
        "49": "   * {@link java.util.Objects#equals} instead.\n",
        "56": "   * Generates a hash code for multiple values. The hash code is generated by calling\n",
        "57": "   * {@link Arrays#hashCode(Object[])}. Note that array arguments to this method, with the exception\n",
        "58": "   * of a single Object array, do not get any special handling; their hash codes are based on\n",
        "59": "   * identity and not contents.\n",
        "64": "   * <pre>   {@code\n",
        "65": "   *   public int hashCode() {\n",
        "66": "   *     return Objects.hashCode(getX(), getY(), getZ());\n",
        "67": "   *   }}</pre>\n",
        "72": "   * <p><b>Note for Java 7 and later:</b> This method should be treated as deprecated; use\n",
        "73": "   * {@link java.util.Objects#hash} instead.\n"
    }
}