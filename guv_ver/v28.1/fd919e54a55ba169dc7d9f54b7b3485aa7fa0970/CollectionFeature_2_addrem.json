{
    "addition": {
        "39": "   * The collection must not throw {@code NullPointerException} on calls such as {@code\n",
        "40": "   * contains(null)} or {@code remove(null)}, but instead must return a simple {@code false}.\n",
        "46": "   * Indicates that a collection disallows certain elements (other than {@code null}, whose validity\n",
        "47": "   * as an element is indicated by the presence or absence of {@link #ALLOWS_NULL_VALUES}). From the\n",
        "48": "   * documentation for {@link Collection}:\n",
        "49": "   *\n",
        "50": "   * <blockquote>\n",
        "51": "   *\n",
        "52": "   * \"Some collection implementations have restrictions on the elements that they may contain. For\n",
        "53": "   * example, some implementations prohibit null elements, and some have restrictions on the types\n",
        "54": "   * of their elements.\"\n",
        "55": "   *\n",
        "56": "   * </blockquote>\n",
        "61": "   * Indicates that a collection has a well-defined ordering of its elements. The ordering may\n",
        "62": "   * depend on the element values, such as a {@link SortedSet}, or on the insertion ordering, such\n",
        "63": "   * as a {@link LinkedHashSet}. All list tests and sorted-collection tests automatically specify\n",
        "64": "   * this feature.\n",
        "69": "   * Indicates that a collection has a different {@link Object#toString} representation than most\n",
        "70": "   * collections. If not specified, the collection tests will examine the value returned by {@link\n",
        "71": "   * Object#toString}.\n",
        "76": "   * Indicates that the constructor or factory method of a collection, usually an immutable set,\n",
        "77": "   * throws an {@link IllegalArgumentException} when presented with duplicate elements instead of\n",
        "78": "   * collapsing them to a single element or including duplicate instances in the collection.\n",
        "82": "  SUPPORTS_ADD,\n",
        "88": "   * Features supported by general-purpose collections - everything but {@link #RESTRICTS_ELEMENTS}.\n",
        "89": "   *\n",
        "104": "   * For documenting collections that support no optional features, such as {@link\n",
        "105": "   * java.util.Collections#emptySet}\n"
    },
    "removed": {
        "39": "   * The collection must not throw {@code NullPointerException} on calls\n",
        "40": "   * such as {@code contains(null)} or {@code remove(null)}, but instead\n",
        "41": "   * must return a simple {@code false}.\n",
        "47": "   * Indicates that a collection disallows certain elements (other than\n",
        "48": "   * {@code null}, whose validity as an element is indicated by the presence\n",
        "49": "   * or absence of {@link #ALLOWS_NULL_VALUES}).\n",
        "50": "   * From the documentation for {@link Collection}:\n",
        "51": "   * <blockquote>\"Some collection implementations have restrictions on the\n",
        "52": "   * elements that they may contain.  For example, some implementations\n",
        "53": "   * prohibit null elements, and some have restrictions on the types of their\n",
        "54": "   * elements.\"</blockquote>\n",
        "59": "   * Indicates that a collection has a well-defined ordering of its elements.\n",
        "60": "   * The ordering may depend on the element values, such as a {@link SortedSet},\n",
        "61": "   * or on the insertion ordering, such as a {@link LinkedHashSet}. All list\n",
        "62": "   * tests and sorted-collection tests automatically specify this feature.\n",
        "67": "   * Indicates that a collection has a different {@link Object#toString}\n",
        "68": "   * representation than most collections. If not specified, the collection\n",
        "69": "   * tests will examine the value returned by {@link Object#toString}.\n",
        "74": "   * Indicates that the constructor or factory method of a collection, usually\n",
        "75": "   * an immutable set, throws an {@link IllegalArgumentException} when presented\n",
        "76": "   * with duplicate elements instead of collapsing them to a single element or\n",
        "77": "   * including duplicate instances in the collection.\n",
        "81": "    SUPPORTS_ADD,\n",
        "87": "   * Features supported by general-purpose collections -\n",
        "88": "   * everything but {@link #RESTRICTS_ELEMENTS}.\n",
        "103": "   * For documenting collections that support no optional features, such as\n",
        "104": "   * {@link java.util.Collections#emptySet}\n"
    }
}