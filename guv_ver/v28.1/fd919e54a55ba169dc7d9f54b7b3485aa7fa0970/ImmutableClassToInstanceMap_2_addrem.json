{
    "addition": {
        "29": " * A {@link ClassToInstanceMap} whose contents will never change, with many other important\n",
        "30": " * properties detailed at {@link ImmutableCollection}.\n",
        "63": "   * Returns a new builder. The generated builder is equivalent to the builder created by the {@link\n",
        "64": "   * Builder} constructor.\n",
        "73": "   * <pre>{@code\n",
        "74": "   * static final ImmutableClassToInstanceMap<Handler> HANDLERS =\n",
        "75": "   *     new ImmutableClassToInstanceMap.Builder<Handler>()\n",
        "76": "   *         .put(FooHandler.class, new FooHandler())\n",
        "77": "   *         .put(BarHandler.class, new SubBarHandler())\n",
        "78": "   *         .put(Handler.class, new QuuxHandler())\n",
        "79": "   *         .build();\n",
        "80": "   * }</pre>\n",
        "82": "   * <p>After invoking {@link #build()} it is still possible to add more entries and build again.\n",
        "83": "   * Thus each map generated by this builder will be a superset of any map generated before it.\n",
        "91": "     * Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,\n",
        "92": "     * and will cause {@link #build} to fail.\n",
        "101": "     * Associates all of {@code map's} keys and values in the built map. Duplicate keys are not\n",
        "102": "     * allowed, and will cause {@link #build} to fail.\n",
        "105": "     * @throws ClassCastException if any value is not an instance of the type specified by its key\n",
        "122": "     * Returns a new immutable class-to-instance map containing the entries provided to this\n",
        "123": "     * builder.\n",
        "138": "   * Returns an immutable map containing the same entries as {@code map}. If {@code map} somehow\n",
        "139": "   * contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose\n",
        "140": "   * comparator is not <i>consistent with equals</i>), the results of this method are undefined.\n",
        "142": "   * <p><b>Note:</b> Despite what the method name suggests, if {@code map} is an {@code\n",
        "143": "   * ImmutableClassToInstanceMap}, no copy will actually be performed.\n",
        "146": "   * @throws ClassCastException if any value is not an instance of the type specified by its key\n"
    },
    "removed": {
        "29": " * A {@link ClassToInstanceMap} whose contents will never change, with many\n",
        "30": " * other important properties detailed at {@link ImmutableCollection}.\n",
        "63": "   * Returns a new builder. The generated builder is equivalent to the builder\n",
        "64": "   * created by the {@link Builder} constructor.\n",
        "72": "   * <pre>   {@code\n",
        "74": "   *   static final ImmutableClassToInstanceMap<Handler> HANDLERS =\n",
        "75": "   *       new ImmutableClassToInstanceMap.Builder<Handler>()\n",
        "76": "   *           .put(FooHandler.class, new FooHandler())\n",
        "77": "   *           .put(BarHandler.class, new SubBarHandler())\n",
        "78": "   *           .put(Handler.class, new QuuxHandler())\n",
        "79": "   *           .build();}</pre>\n",
        "81": "   * <p>After invoking {@link #build()} it is still possible to add more entries\n",
        "82": "   * and build again. Thus each map generated by this builder will be a superset\n",
        "83": "   * of any map generated before it.\n",
        "91": "     * Associates {@code key} with {@code value} in the built map. Duplicate\n",
        "92": "     * keys are not allowed, and will cause {@link #build} to fail.\n",
        "101": "     * Associates all of {@code map's} keys and values in the built map.\n",
        "102": "     * Duplicate keys are not allowed, and will cause {@link #build} to fail.\n",
        "105": "     * @throws ClassCastException if any value is not an instance of the type\n",
        "106": "     *     specified by its key\n",
        "123": "     * Returns a new immutable class-to-instance map containing the entries\n",
        "124": "     * provided to this builder.\n",
        "139": "   * Returns an immutable map containing the same entries as {@code map}. If\n",
        "140": "   * {@code map} somehow contains entries with duplicate keys (for example, if\n",
        "141": "   * it is a {@code SortedMap} whose comparator is not <i>consistent with\n",
        "142": "   * equals</i>), the results of this method are undefined.\n",
        "144": "   * <p><b>Note:</b> Despite what the method name suggests, if {@code map} is\n",
        "145": "   * an {@code ImmutableClassToInstanceMap}, no copy will actually be performed.\n",
        "148": "   * @throws ClassCastException if any value is not an instance of the type\n",
        "149": "   *     specified by its key\n"
    }
}