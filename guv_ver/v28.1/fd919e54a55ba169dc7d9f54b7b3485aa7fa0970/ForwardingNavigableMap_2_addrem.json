{
    "addition": {
        "37": " * to the methods of the delegate. For example, overriding {@link #put} alone <i>will not</i> change\n",
        "38": " * the behavior of {@link #putAll}, which can lead to unexpected behavior. In this case, you should\n",
        "39": " * override {@code putAll} as well, either providing your own implementation, or delegating to the\n",
        "40": " * provided {@code standardPutAll} method.\n",
        "46": " * <p>Each of the {@code standard} methods uses the map's comparator (or the natural ordering of the\n",
        "47": " * elements, if there is no comparator) to test element equality. As a result, if the comparator is\n",
        "48": " * not consistent with equals, some of the standard implementations may violate the {@code Map}\n",
        "73": "   * A sensible definition of {@link #lowerEntry} in terms of the {@code lastEntry()} of {@link\n",
        "74": "   * #headMap(Object, boolean)}. If you override {@code headMap}, you may wish to override {@code\n",
        "75": "   * lowerEntry} to forward to this implementation.\n",
        "101": "   * A sensible definition of {@link #floorEntry} in terms of the {@code lastEntry()} of {@link\n",
        "102": "   * #headMap(Object, boolean)}. If you override {@code headMap}, you may wish to override {@code\n",
        "103": "   * floorEntry} to forward to this implementation.\n",
        "129": "   * A sensible definition of {@link #ceilingEntry} in terms of the {@code firstEntry()} of {@link\n",
        "130": "   * #tailMap(Object, boolean)}. If you override {@code tailMap}, you may wish to override {@code\n",
        "131": "   * ceilingEntry} to forward to this implementation.\n",
        "157": "   * A sensible definition of {@link #higherEntry} in terms of the {@code firstEntry()} of {@link\n",
        "158": "   * #tailMap(Object, boolean)}. If you override {@code tailMap}, you may wish to override {@code\n",
        "159": "   * higherEntry} to forward to this implementation.\n",
        "185": "   * A sensible definition of {@link #firstEntry} in terms of the {@code iterator()} of {@link\n",
        "186": "   * #entrySet}. If you override {@code entrySet}, you may wish to override {@code firstEntry} to\n",
        "187": "   * forward to this implementation.\n",
        "213": "   * A sensible definition of {@link #lastEntry} in terms of the {@code iterator()} of the {@link\n",
        "214": "   * #entrySet} of {@link #descendingMap}. If you override {@code descendingMap}, you may wish to\n",
        "215": "   * override {@code lastEntry} to forward to this implementation.\n",
        "222": "   * A sensible definition of {@link #lastKey} in terms of {@code lastEntry}. If you override {@code\n",
        "223": "   * lastEntry}, you may wish to override {@code lastKey} to forward to this implementation.\n",
        "240": "   * A sensible definition of {@link #pollFirstEntry} in terms of the {@code iterator} of {@code\n",
        "241": "   * entrySet}. If you override {@code entrySet}, you may wish to override {@code pollFirstEntry} to\n",
        "242": "   * forward to this implementation.\n",
        "254": "   * A sensible definition of {@link #pollFirstEntry} in terms of the {@code iterator} of the {@code\n",
        "255": "   * entrySet} of {@code descendingMap}. If you override {@code descendingMap}, you may wish to\n",
        "256": "   * override {@code pollFirstEntry} to forward to this implementation.\n",
        "268": "   * A sensible implementation of {@link NavigableMap#descendingMap} in terms of the methods of this\n",
        "269": "   * {@code NavigableMap}. In many cases, you may wish to override {@link\n",
        "270": "   * ForwardingNavigableMap#descendingMap} to forward to this implementation or a subclass thereof.\n",
        "272": "   * <p>In particular, this map iterates over entries with repeated calls to {@link\n",
        "273": "   * NavigableMap#lowerEntry}. If a more efficient means of iteration is available, you may wish to\n",
        "274": "   * override the {@code entryIterator()} method of this class.\n",
        "334": "   * this {@code NavigableMap}. In many cases, you may wish to override {@link\n",
        "335": "   * ForwardingNavigableMap#navigableKeySet} to forward to this implementation or a subclass\n",
        "354": "   * A sensible definition of {@link #descendingKeySet} as the {@code navigableKeySet} of {@link\n",
        "355": "   * #descendingMap}. (The {@link StandardDescendingMap} implementation implements {@code\n",
        "356": "   * navigableKeySet} on its own, so as not to cause an infinite loop.) If you override {@code\n",
        "357": "   * descendingMap}, you may wish to override {@code descendingKeySet} to forward to this\n",
        "366": "   * A sensible definition of {@link #subMap(Object, Object)} in terms of {@link #subMap(Object,\n",
        "367": "   * boolean, Object, boolean)}. If you override {@code subMap(K, boolean, K, boolean)}, you may\n",
        "368": "   * wish to override {@code subMap} to forward to this implementation.\n",
        "391": "   * A sensible definition of {@link #headMap(Object)} in terms of {@link #headMap(Object,\n",
        "392": "   * boolean)}. If you override {@code headMap(K, boolean)}, you may wish to override {@code\n",
        "393": "   * headMap} to forward to this implementation.\n",
        "400": "   * A sensible definition of {@link #tailMap(Object)} in terms of {@link #tailMap(Object,\n",
        "401": "   * boolean)}. If you override {@code tailMap(K, boolean)}, you may wish to override {@code\n",
        "402": "   * tailMap} to forward to this implementation.\n"
    },
    "removed": {
        "37": " * to the methods of the delegate. For example, overriding {@link #put} alone <i>will not</i>\n",
        "38": " * change the behavior of {@link #putAll}, which can lead to unexpected behavior. In this case, you\n",
        "39": " * should override {@code putAll} as well, either providing your own implementation, or delegating\n",
        "40": " * to the provided {@code standardPutAll} method.\n",
        "46": " * <p>Each of the {@code standard} methods uses the map's comparator (or the natural ordering of\n",
        "47": " * the elements, if there is no comparator) to test element equality. As a result, if the comparator\n",
        "48": " * is not consistent with equals, some of the standard implementations may violate the {@code Map}\n",
        "73": "   * A sensible definition of {@link #lowerEntry} in terms of the {@code lastEntry()} of\n",
        "74": "   * {@link #headMap(Object, boolean)}. If you override {@code headMap}, you may wish to override\n",
        "75": "   * {@code lowerEntry} to forward to this implementation.\n",
        "101": "   * A sensible definition of {@link #floorEntry} in terms of the {@code lastEntry()} of\n",
        "102": "   * {@link #headMap(Object, boolean)}. If you override {@code headMap}, you may wish to override\n",
        "103": "   * {@code floorEntry} to forward to this implementation.\n",
        "129": "   * A sensible definition of {@link #ceilingEntry} in terms of the {@code firstEntry()} of\n",
        "130": "   * {@link #tailMap(Object, boolean)}. If you override {@code tailMap}, you may wish to override\n",
        "131": "   * {@code ceilingEntry} to forward to this implementation.\n",
        "157": "   * A sensible definition of {@link #higherEntry} in terms of the {@code firstEntry()} of\n",
        "158": "   * {@link #tailMap(Object, boolean)}. If you override {@code tailMap}, you may wish to override\n",
        "159": "   * {@code higherEntry} to forward to this implementation.\n",
        "185": "   * A sensible definition of {@link #firstEntry} in terms of the {@code iterator()} of\n",
        "186": "   * {@link #entrySet}. If you override {@code entrySet}, you may wish to override\n",
        "187": "   * {@code firstEntry} to forward to this implementation.\n",
        "213": "   * A sensible definition of {@link #lastEntry} in terms of the {@code iterator()} of the\n",
        "214": "   * {@link #entrySet} of {@link #descendingMap}. If you override {@code descendingMap}, you may\n",
        "215": "   * wish to override {@code lastEntry} to forward to this implementation.\n",
        "222": "   * A sensible definition of {@link #lastKey} in terms of {@code lastEntry}. If you override\n",
        "223": "   * {@code lastEntry}, you may wish to override {@code lastKey} to forward to this implementation.\n",
        "240": "   * A sensible definition of {@link #pollFirstEntry} in terms of the {@code iterator} of\n",
        "241": "   * {@code entrySet}. If you override {@code entrySet}, you may wish to override\n",
        "242": "   * {@code pollFirstEntry} to forward to this implementation.\n",
        "254": "   * A sensible definition of {@link #pollFirstEntry} in terms of the {@code iterator} of the\n",
        "255": "   * {@code entrySet} of {@code descendingMap}. If you override {@code descendingMap}, you may wish\n",
        "256": "   * to override {@code pollFirstEntry} to forward to this implementation.\n",
        "268": "   * A sensible implementation of {@link NavigableMap#descendingMap} in terms of the methods of\n",
        "269": "   * this {@code NavigableMap}. In many cases, you may wish to override\n",
        "270": "   * {@link ForwardingNavigableMap#descendingMap} to forward to this implementation or a subclass\n",
        "271": "   * thereof.\n",
        "273": "   * <p>In particular, this map iterates over entries with repeated calls to\n",
        "274": "   * {@link NavigableMap#lowerEntry}. If a more efficient means of iteration is available, you may\n",
        "275": "   * wish to override the {@code entryIterator()} method of this class.\n",
        "335": "   * this {@code NavigableMap}. In many cases, you may wish to override\n",
        "336": "   * {@link ForwardingNavigableMap#navigableKeySet} to forward to this implementation or a subclass\n",
        "355": "   * A sensible definition of {@link #descendingKeySet} as the {@code navigableKeySet} of\n",
        "356": "   * {@link #descendingMap}. (The {@link StandardDescendingMap} implementation implements\n",
        "357": "   * {@code navigableKeySet} on its own, so as not to cause an infinite loop.) If you override\n",
        "358": "   * {@code descendingMap}, you may wish to override {@code descendingKeySet} to forward to this\n",
        "367": "   * A sensible definition of {@link #subMap(Object, Object)} in terms of\n",
        "368": "   * {@link #subMap(Object, boolean, Object, boolean)}. If you override\n",
        "369": "   * {@code subMap(K, boolean, K, boolean)}, you may wish to override {@code subMap} to forward to\n",
        "370": "   * this implementation.\n",
        "393": "   * A sensible definition of {@link #headMap(Object)} in terms of\n",
        "394": "   * {@link #headMap(Object, boolean)}. If you override {@code headMap(K, boolean)}, you may wish\n",
        "395": "   * to override {@code headMap} to forward to this implementation.\n",
        "402": "   * A sensible definition of {@link #tailMap(Object)} in terms of\n",
        "403": "   * {@link #tailMap(Object, boolean)}. If you override {@code tailMap(K, boolean)}, you may wish\n",
        "404": "   * to override {@code tailMap} to forward to this implementation.\n"
    }
}