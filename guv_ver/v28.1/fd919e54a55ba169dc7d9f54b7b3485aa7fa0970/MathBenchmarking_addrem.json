{
    "addition": {
        "25": " * <p>In many cases, we wish to vary the order of magnitude of the input as much as we want to vary\n",
        "26": " * the input itself, so most methods which generate values use an exponential distribution varying\n",
        "27": " * the order of magnitude of the generated values uniformly at random.\n",
        "42": "  static final int[] biggestBinomials = {\n",
        "43": "    Integer.MAX_VALUE,\n",
        "44": "    Integer.MAX_VALUE,\n",
        "45": "    Integer.MAX_VALUE,\n",
        "46": "    3810779,\n",
        "47": "    121977,\n",
        "48": "    16175,\n",
        "49": "    4337,\n",
        "50": "    1733,\n",
        "51": "    887,\n",
        "52": "    534,\n",
        "53": "    361,\n",
        "54": "    265,\n",
        "55": "    206,\n",
        "56": "    169,\n",
        "57": "    143,\n",
        "58": "    125,\n",
        "59": "    111,\n",
        "60": "    101,\n",
        "61": "    94,\n",
        "62": "    88,\n",
        "63": "    83,\n",
        "64": "    79,\n",
        "65": "    76,\n",
        "66": "    74,\n",
        "67": "    72,\n",
        "68": "    70,\n",
        "69": "    69,\n",
        "70": "    68,\n",
        "71": "    67,\n",
        "72": "    67,\n",
        "73": "    66,\n",
        "74": "    66,\n",
        "75": "    66,\n",
        "76": "    66\n",
        "77": "  };\n",
        "80": "   * Generates values in a distribution equivalent to randomNonNegativeBigInteger but omitting zero.\n",
        "91": "   * Generates a number in [0, 2^numBits) with an exponential distribution. The floor of the log2 of\n",
        "92": "   * the result is chosen uniformly at random in [0, numBits), and then the result is chosen in that\n",
        "93": "   * range uniformly at random. Zero is treated as having log2 == 0.\n",
        "100": "      return new BigInteger(digits, RANDOM_SOURCE).setBit(digits);\n",
        "105": "   * Equivalent to calling randomPositiveBigInteger(numBits) and then flipping the sign with 50%\n",
        "106": "   * probability.\n",
        "114": "   * Chooses a number in (-2^numBits, 2^numBits) at random, with density concentrated in numbers of\n",
        "115": "   * lower magnitude.\n",
        "130": "   * Generates a number in [0, 2^numBits) with an exponential distribution. The floor of the log2 of\n",
        "131": "   * the absolute value of the result is chosen uniformly at random in [0, numBits), and then the\n",
        "132": "   * result is chosen from those possibilities uniformly at random.\n",
        "134": "   * <p>Zero is treated as having log2 == 0.\n",
        "142": "  /** Returns a random integer between zero and {@code MAX_EXPONENT}. */\n"
    },
    "removed": {
        "25": " * In many cases, we wish to vary the order of magnitude of the input as much as we\n",
        "26": " * want to vary the input itself, so most methods which generate values use\n",
        "27": " * an exponential distribution varying the order of magnitude of the generated values\n",
        "28": " * uniformly at random.\n",
        "43": "  static final int[] biggestBinomials =\n",
        "44": "      {Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 3810779, 121977, 16175, 4337, 1733,\n",
        "45": "          887, 534, 361, 265, 206, 169, 143, 125, 111, 101, 94, 88, 83, 79, 76, 74, 72, 70, 69, 68,\n",
        "46": "          67, 67, 66, 66, 66, 66};\n",
        "49": "   * Generates values in a distribution equivalent to randomNonNegativeBigInteger\n",
        "50": "   * but omitting zero.\n",
        "61": "   * Generates a number in [0, 2^numBits) with an exponential distribution.\n",
        "62": "   * The floor of the log2 of the result is chosen uniformly at random in\n",
        "63": "   * [0, numBits), and then the result is chosen in that range uniformly at random.\n",
        "64": "   * Zero is treated as having log2 == 0.\n",
        "71": "      return new BigInteger(digits, RANDOM_SOURCE)\n",
        "72": "          .setBit(digits);\n",
        "77": "   * Equivalent to calling randomPositiveBigInteger(numBits) and then flipping\n",
        "78": "   * the sign with 50% probability.\n",
        "86": "   * Chooses a number in (-2^numBits, 2^numBits) at random, with density\n",
        "87": "   * concentrated in numbers of lower magnitude.\n",
        "102": "   * Generates a number in [0, 2^numBits) with an exponential distribution.\n",
        "103": "   * The floor of the log2 of the absolute value of the result is chosen uniformly\n",
        "104": "   * at random in [0, numBits), and then the result is chosen from those possibilities\n",
        "105": "   * uniformly at random.\n",
        "107": "   * Zero is treated as having log2 == 0.\n",
        "115": "  /**\n",
        "116": "   * Returns a random integer between zero and {@code MAX_EXPONENT}.\n",
        "117": "   */\n"
    }
}