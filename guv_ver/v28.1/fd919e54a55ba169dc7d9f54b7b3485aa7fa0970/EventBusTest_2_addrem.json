{
    "addition": {
        "39": "  @Override\n",
        "40": "  protected void setUp() throws Exception {\n",
        "56": "   * Tests that events are distributed to any subscribers to their type or any supertype, including\n",
        "57": "   * interfaces and superclasses.\n",
        "59": "   * <p>Also checks delivery ordering in such cases.\n",
        "69": "    Object objCatcher =\n",
        "70": "        new Object() {\n",
        "71": "          @SuppressWarnings(\"unused\")\n",
        "72": "          @Subscribe\n",
        "73": "          public void eat(Object food) {\n",
        "74": "            objectEvents.add(food);\n",
        "75": "          }\n",
        "76": "        };\n",
        "79": "    Object compCatcher =\n",
        "80": "        new Object() {\n",
        "81": "          @SuppressWarnings(\"unused\")\n",
        "82": "          @Subscribe\n",
        "83": "          public void eat(Comparable<?> food) {\n",
        "84": "            compEvents.add(food);\n",
        "85": "          }\n",
        "86": "        };\n",
        "101": "    assertEquals(\"Only one String should be delivered.\", 1, stringEvents.size());\n",
        "102": "    assertEquals(\"Correct string should be delivered.\", EVENT, stringEvents.get(0));\n",
        "105": "    assertEquals(\"Three Objects should be delivered.\", 3, objectEvents.size());\n",
        "106": "    assertEquals(\"String fixture must be first object delivered.\", EVENT, objectEvents.get(0));\n",
        "107": "    assertEquals(\"Object fixture must be second object delivered.\", objEvent, objectEvents.get(1));\n",
        "108": "    assertEquals(\n",
        "109": "        \"Comparable fixture must be thirdobject delivered.\", compEvent, objectEvents.get(2));\n",
        "112": "    assertEquals(\"Two Comparable<?>s should be delivered.\", 2, compEvents.size());\n",
        "113": "    assertEquals(\"String fixture must be first comparable delivered.\", EVENT, compEvents.get(0));\n",
        "114": "    assertEquals(\n",
        "115": "        \"Comparable fixture must be second comparable delivered.\", compEvent, compEvents.get(1));\n",
        "118": "  public void testSubscriberThrowsException() throws Exception {\n",
        "119": "    final RecordingSubscriberExceptionHandler handler = new RecordingSubscriberExceptionHandler();\n",
        "123": "    final Object subscriber =\n",
        "124": "        new Object() {\n",
        "125": "          @Subscribe\n",
        "126": "          public void throwExceptionOn(String message) {\n",
        "127": "            throw exception;\n",
        "128": "          }\n",
        "129": "        };\n",
        "133": "    assertEquals(\"Cause should be available.\", exception, handler.exception);\n",
        "134": "    assertEquals(\"EventBus should be available.\", eventBus, handler.context.getEventBus());\n",
        "135": "    assertEquals(\"Event should be available.\", EVENT, handler.context.getEvent());\n",
        "136": "    assertEquals(\"Subscriber should be available.\", subscriber, handler.context.getSubscriber());\n",
        "137": "    assertEquals(\n",
        "138": "        \"Method should be available.\",\n",
        "143": "  public void testSubscriberThrowsExceptionHandlerThrowsException() throws Exception {\n",
        "144": "    final EventBus eventBus =\n",
        "145": "        new EventBus(\n",
        "146": "            new SubscriberExceptionHandler() {\n",
        "147": "              @Override\n",
        "148": "              public void handleException(Throwable exception, SubscriberExceptionContext context) {\n",
        "149": "                throw new RuntimeException();\n",
        "150": "              }\n",
        "151": "            });\n",
        "152": "    final Object subscriber =\n",
        "153": "        new Object() {\n",
        "154": "          @Subscribe\n",
        "155": "          public void throwExceptionOn(String message) {\n",
        "156": "            throw new RuntimeException();\n",
        "157": "          }\n",
        "158": "        };\n",
        "176": "    assertEquals(\"The dead event should wrap the original event.\", EVENT, events.get(0).getEvent());\n",
        "186": "    assertEquals(\"The explicit DeadEvent should be delivered.\", 1, events.size());\n",
        "187": "    assertEquals(\"The dead event must not be re-wrapped.\", EVENT, events.get(0).getEvent());\n",
        "213": "    assertEquals(\"Two correct events should be delivered.\", expectedEvents, catcher1.getEvents());\n",
        "215": "    assertEquals(\n",
        "216": "        \"One correct event should be delivered.\", Lists.newArrayList(EVENT), catcher2.getEvents());\n",
        "221": "    assertEquals(\n",
        "222": "        \"Shouldn't catch any more events when unregistered.\", expectedEvents, catcher1.getEvents());\n",
        "223": "    assertEquals(\"Two correct events should be delivered.\", expectedEvents, catcher2.getEvents());\n",
        "234": "    assertEquals(\n",
        "235": "        \"Shouldn't catch any more events when unregistered.\", expectedEvents, catcher1.getEvents());\n",
        "236": "    assertEquals(\n",
        "237": "        \"Shouldn't catch any more events when unregistered.\", expectedEvents, catcher2.getEvents());\n",
        "254": "    assertEquals(\"Unexpected number of catchers in the list\", numberOfCatchers, catchers.size());\n",
        "258": "      assertEquals(\n",
        "259": "          \"One of the registered catchers did not receive an event.\",\n",
        "260": "          expectedEvents,\n",
        "261": "          catcher.getEvents());\n",
        "271": "   * Tests that bridge methods are not subscribed to events. In Java 8, annotations are included on\n",
        "272": "   * the bridge method in addition to the original method, which causes both the original and bridge\n",
        "273": "   * methods to be subscribed (since both are annotated @Subscribe) without specifically checking\n",
        "274": "   * for bridge methods.\n",
        "278": "    bus.register(\n",
        "279": "        new Callback<String>() {\n",
        "280": "          @Subscribe\n",
        "281": "          @Override\n",
        "282": "          public void call(String s) {\n",
        "283": "            calls.incrementAndGet();\n",
        "284": "          }\n",
        "285": "        });\n",
        "292": "  /** Records thrown exception information. */\n",
        "300": "    public void handleException(Throwable exception, SubscriberExceptionContext context) {\n",
        "306": "  /** Runnable which registers a StringCatcher on an event bus and adds it to a list. */\n"
    },
    "removed": {
        "39": "  @Override protected void setUp() throws Exception {\n",
        "55": "   * Tests that events are distributed to any subscribers to their type or any\n",
        "56": "   * supertype, including interfaces and superclasses.\n",
        "58": "   * Also checks delivery ordering in such cases.\n",
        "68": "    Object objCatcher = new Object() {\n",
        "69": "      @SuppressWarnings(\"unused\")\n",
        "70": "      @Subscribe public void eat(Object food) {\n",
        "71": "        objectEvents.add(food);\n",
        "72": "      }\n",
        "73": "    };\n",
        "76": "    Object compCatcher = new Object() {\n",
        "77": "      @SuppressWarnings(\"unused\")\n",
        "78": "      @Subscribe public void eat(Comparable<?> food) {\n",
        "79": "        compEvents.add(food);\n",
        "80": "      }\n",
        "81": "    };\n",
        "96": "    assertEquals(\"Only one String should be delivered.\",\n",
        "97": "        1, stringEvents.size());\n",
        "98": "    assertEquals(\"Correct string should be delivered.\",\n",
        "99": "        EVENT, stringEvents.get(0));\n",
        "102": "    assertEquals(\"Three Objects should be delivered.\",\n",
        "103": "        3, objectEvents.size());\n",
        "104": "    assertEquals(\"String fixture must be first object delivered.\",\n",
        "105": "        EVENT, objectEvents.get(0));\n",
        "106": "    assertEquals(\"Object fixture must be second object delivered.\",\n",
        "107": "        objEvent, objectEvents.get(1));\n",
        "108": "    assertEquals(\"Comparable fixture must be thirdobject delivered.\",\n",
        "109": "        compEvent, objectEvents.get(2));\n",
        "112": "    assertEquals(\"Two Comparable<?>s should be delivered.\",\n",
        "113": "        2, compEvents.size());\n",
        "114": "    assertEquals(\"String fixture must be first comparable delivered.\",\n",
        "115": "        EVENT, compEvents.get(0));\n",
        "116": "    assertEquals(\"Comparable fixture must be second comparable delivered.\",\n",
        "117": "        compEvent, compEvents.get(1));\n",
        "120": "  public void testSubscriberThrowsException() throws Exception{\n",
        "121": "    final RecordingSubscriberExceptionHandler handler =\n",
        "122": "        new RecordingSubscriberExceptionHandler();\n",
        "126": "    final Object subscriber = new Object() {\n",
        "127": "      @Subscribe\n",
        "128": "      public void throwExceptionOn(String message) {\n",
        "129": "        throw exception;\n",
        "130": "      }\n",
        "131": "    };\n",
        "135": "    assertEquals(\"Cause should be available.\",\n",
        "136": "        exception, handler.exception);\n",
        "137": "    assertEquals(\"EventBus should be available.\",\n",
        "138": "        eventBus, handler.context.getEventBus());\n",
        "139": "    assertEquals(\"Event should be available.\",\n",
        "140": "        EVENT,\n",
        "141": "        handler.context.getEvent());\n",
        "142": "    assertEquals(\"Subscriber should be available.\",\n",
        "143": "        subscriber, handler.context.getSubscriber());\n",
        "144": "    assertEquals(\"Method should be available.\",\n",
        "149": "  public void testSubscriberThrowsExceptionHandlerThrowsException() throws Exception{\n",
        "150": "    final EventBus eventBus = new EventBus(new SubscriberExceptionHandler() {\n",
        "151": "      @Override\n",
        "152": "      public void handleException(Throwable exception,\n",
        "153": "          SubscriberExceptionContext context) {\n",
        "154": "        throw new RuntimeException();\n",
        "155": "      }\n",
        "156": "    });\n",
        "157": "    final Object subscriber = new Object() {\n",
        "158": "      @Subscribe\n",
        "159": "      public void throwExceptionOn(String message) {\n",
        "160": "        throw new RuntimeException();\n",
        "161": "      }\n",
        "162": "    };\n",
        "180": "    assertEquals(\"The dead event should wrap the original event.\",\n",
        "181": "        EVENT, events.get(0).getEvent());\n",
        "191": "    assertEquals(\"The explicit DeadEvent should be delivered.\",\n",
        "192": "        1, events.size());\n",
        "193": "    assertEquals(\"The dead event must not be re-wrapped.\",\n",
        "194": "        EVENT, events.get(0).getEvent());\n",
        "220": "    assertEquals(\"Two correct events should be delivered.\",\n",
        "221": "                 expectedEvents, catcher1.getEvents());\n",
        "223": "    assertEquals(\"One correct event should be delivered.\",\n",
        "224": "                 Lists.newArrayList(EVENT), catcher2.getEvents());\n",
        "229": "    assertEquals(\"Shouldn't catch any more events when unregistered.\",\n",
        "230": "                 expectedEvents, catcher1.getEvents());\n",
        "231": "    assertEquals(\"Two correct events should be delivered.\",\n",
        "232": "                 expectedEvents, catcher2.getEvents());\n",
        "243": "    assertEquals(\"Shouldn't catch any more events when unregistered.\",\n",
        "244": "                 expectedEvents, catcher1.getEvents());\n",
        "245": "    assertEquals(\"Shouldn't catch any more events when unregistered.\",\n",
        "246": "                 expectedEvents, catcher2.getEvents());\n",
        "263": "    assertEquals(\"Unexpected number of catchers in the list\",\n",
        "264": "        numberOfCatchers, catchers.size());\n",
        "268": "      assertEquals(\"One of the registered catchers did not receive an event.\",\n",
        "269": "          expectedEvents, catcher.getEvents());\n",
        "279": "   * Tests that bridge methods are not subscribed to events. In Java 8,\n",
        "280": "   * annotations are included on the bridge method in addition to the original\n",
        "281": "   * method, which causes both the original and bridge methods to be subscribed\n",
        "282": "   * (since both are annotated @Subscribe) without specifically checking for\n",
        "283": "   * bridge methods.\n",
        "287": "    bus.register(new Callback<String>() {\n",
        "288": "      @Subscribe\n",
        "289": "      @Override\n",
        "290": "      public void call(String s) {\n",
        "291": "        calls.incrementAndGet();\n",
        "292": "      }\n",
        "293": "    });\n",
        "300": "  /**\n",
        "301": "   * Records thrown exception information.\n",
        "302": "   */\n",
        "310": "    public void handleException(Throwable exception,\n",
        "311": "        SubscriberExceptionContext context) {\n",
        "317": "  /**\n",
        "318": "   * Runnable which registers a StringCatcher on an event bus and adds it to a\n",
        "319": "   * list.\n",
        "320": "   */\n",
        "342": "   *\n"
    }
}