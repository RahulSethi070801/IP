{
    "addition": {
        "26": " * A skeleton implementation of a descending multiset. Only needs {@code forwardMultiset()} and\n",
        "27": " * {@code entryIterator()}.\n",
        "32": "abstract class DescendingMultiset<E> extends ForwardingMultiset<E> implements SortedMultiset<E> {\n",
        "37": "  @Override\n",
        "38": "  public Comparator<? super E> comparator() {\n",
        "41": "      return comparator = Ordering.from(forwardMultiset().comparator()).<E>reverse();\n",
        "48": "  @Override\n",
        "49": "  public SortedSet<E> elementSet() {\n",
        "57": "  @Override\n",
        "58": "  public Entry<E> pollFirstEntry() {\n",
        "62": "  @Override\n",
        "63": "  public Entry<E> pollLastEntry() {\n",
        "67": "  @Override\n",
        "68": "  public SortedMultiset<E> headMultiset(E toElement, BoundType boundType) {\n",
        "69": "    return forwardMultiset().tailMultiset(toElement, boundType).descendingMultiset();\n",
        "72": "  @Override\n",
        "73": "  public SortedMultiset<E> subMultiset(\n",
        "74": "      E fromElement, BoundType fromBoundType, E toElement, BoundType toBoundType) {\n",
        "75": "    return forwardMultiset()\n",
        "76": "        .subMultiset(toElement, toBoundType, fromElement, fromBoundType)\n",
        "77": "        .descendingMultiset();\n",
        "80": "  @Override\n",
        "81": "  public SortedMultiset<E> tailMultiset(E fromElement, BoundType boundType) {\n",
        "82": "    return forwardMultiset().headMultiset(fromElement, boundType).descendingMultiset();\n",
        "85": "  @Override\n",
        "86": "  protected Multiset<E> delegate() {\n",
        "90": "  @Override\n",
        "91": "  public SortedMultiset<E> descendingMultiset() {\n",
        "95": "  @Override\n",
        "96": "  public Entry<E> firstEntry() {\n",
        "100": "  @Override\n",
        "101": "  public Entry<E> lastEntry() {\n",
        "109": "  @Override\n",
        "110": "  public Set<Entry<E>> entrySet() {\n",
        "117": "      @Override\n",
        "118": "      Multiset<E> multiset() {\n",
        "122": "      @Override\n",
        "123": "      public Iterator<Entry<E>> iterator() {\n",
        "127": "      @Override\n",
        "128": "      public int size() {\n",
        "134": "  @Override\n",
        "135": "  public Iterator<E> iterator() {\n",
        "139": "  @Override\n",
        "140": "  public Object[] toArray() {\n",
        "144": "  @Override\n",
        "145": "  public <T> T[] toArray(T[] array) {\n",
        "149": "  @Override\n",
        "150": "  public String toString() {\n"
    },
    "removed": {
        "26": " * A skeleton implementation of a descending multiset.  Only needs\n",
        "27": " * {@code forwardMultiset()} and {@code entryIterator()}.\n",
        "32": "abstract class DescendingMultiset<E> extends ForwardingMultiset<E>\n",
        "33": "    implements SortedMultiset<E> {\n",
        "38": "  @Override public Comparator<? super E> comparator() {\n",
        "41": "      return comparator =\n",
        "42": "          Ordering.from(forwardMultiset().comparator()).<E>reverse();\n",
        "49": "  @Override public SortedSet<E> elementSet() {\n",
        "57": "  @Override public Entry<E> pollFirstEntry() {\n",
        "61": "  @Override public Entry<E> pollLastEntry() {\n",
        "65": "  @Override public SortedMultiset<E> headMultiset(E toElement,\n",
        "66": "      BoundType boundType) {\n",
        "67": "    return forwardMultiset().tailMultiset(toElement, boundType)\n",
        "68": "        .descendingMultiset();\n",
        "71": "  @Override public SortedMultiset<E> subMultiset(E fromElement,\n",
        "72": "      BoundType fromBoundType, E toElement, BoundType toBoundType) {\n",
        "73": "    return forwardMultiset().subMultiset(toElement, toBoundType, fromElement,\n",
        "74": "        fromBoundType).descendingMultiset();\n",
        "77": "  @Override public SortedMultiset<E> tailMultiset(E fromElement,\n",
        "78": "      BoundType boundType) {\n",
        "79": "    return forwardMultiset().headMultiset(fromElement, boundType)\n",
        "80": "        .descendingMultiset();\n",
        "83": "  @Override protected Multiset<E> delegate() {\n",
        "87": "  @Override public SortedMultiset<E> descendingMultiset() {\n",
        "91": "  @Override public Entry<E> firstEntry() {\n",
        "95": "  @Override public Entry<E> lastEntry() {\n",
        "103": "  @Override public Set<Entry<E>> entrySet() {\n",
        "110": "      @Override Multiset<E> multiset() {\n",
        "114": "      @Override public Iterator<Entry<E>> iterator() {\n",
        "118": "      @Override public int size() {\n",
        "124": "  @Override public Iterator<E> iterator() {\n",
        "128": "  @Override public Object[] toArray() {\n",
        "132": "  @Override public <T> T[] toArray(T[] array) {\n",
        "136": "  @Override public String toString() {\n"
    }
}