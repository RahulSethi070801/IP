{
    "addition": {
        "66": "   * @throws UnsupportedOperationException if it's not possible to make an empty instance of the\n",
        "67": "   *     class under test.\n",
        "75": "   * @throws UnsupportedOperationException if it's not possible to make a non-empty instance of the\n",
        "76": "   *     class under test.\n",
        "81": "   * Creates a new key that is not expected to be found in {@link #makePopulatedMap()}.\n",
        "84": "   * @throws UnsupportedOperationException if it's not possible to make a key that will not be found\n",
        "85": "   *     in the map.\n",
        "90": "   * Creates a new value that is not expected to be found in {@link #makePopulatedMap()}.\n",
        "93": "   * @throws UnsupportedOperationException if it's not possible to make a value that will not be\n",
        "94": "   *     found in the map.\n",
        "99": "   * Constructor that assigns {@code supportsIteratorRemove} the same value as {@code\n",
        "100": "   * supportsRemove}.\n",
        "117": "  /** Constructor with an explicit {@code supportsIteratorRemove} parameter. */\n",
        "134": "   * Used by tests that require a map, but don't care whether it's populated or not.\n",
        "163": "   * Checks all the properties that should always hold of a map. Also calls {@link\n",
        "164": "   * #assertMoreInvariants} to check invariants that are peculiar to specific implementations.\n",
        "260": "   * Override this to check invariants which should hold true for a particular implementation, but\n",
        "261": "   * which are not generally applicable to every instance of Map.\n",
        "850": "    // no-inspection ObjectEqualsNull\n",
        "902": "    // noinspection ObjectEqualsNull\n"
    },
    "removed": {
        "66": "   * @throws UnsupportedOperationException if it's not possible to make an\n",
        "67": "   * empty instance of the class under test.\n",
        "75": "   * @throws UnsupportedOperationException if it's not possible to make a\n",
        "76": "   * non-empty instance of the class under test.\n",
        "81": "   * Creates a new key that is not expected to be found\n",
        "82": "   * in {@link #makePopulatedMap()}.\n",
        "85": "   * @throws UnsupportedOperationException if it's not possible to make a key\n",
        "86": "   * that will not be found in the map.\n",
        "91": "   * Creates a new value that is not expected to be found\n",
        "92": "   * in {@link #makePopulatedMap()}.\n",
        "95": "   * @throws UnsupportedOperationException if it's not possible to make a value\n",
        "96": "   * that will not be found in the map.\n",
        "101": "   * Constructor that assigns {@code supportsIteratorRemove} the same value as\n",
        "102": "   * {@code supportsRemove}.\n",
        "119": "  /**\n",
        "120": "   * Constructor with an explicit {@code supportsIteratorRemove} parameter.\n",
        "121": "   */\n",
        "138": "   * Used by tests that require a map, but don't care whether it's\n",
        "139": "   * populated or not.\n",
        "168": "   * Checks all the properties that should always hold of a map. Also calls\n",
        "169": "   * {@link #assertMoreInvariants} to check invariants that are peculiar to\n",
        "170": "   * specific implementations.\n",
        "266": "   * Override this to check invariants which should hold true for a particular\n",
        "267": "   * implementation, but which are not generally applicable to every instance\n",
        "268": "   * of Map.\n",
        "857": "    //no-inspection ObjectEqualsNull\n",
        "909": "    //noinspection ObjectEqualsNull\n"
    }
}