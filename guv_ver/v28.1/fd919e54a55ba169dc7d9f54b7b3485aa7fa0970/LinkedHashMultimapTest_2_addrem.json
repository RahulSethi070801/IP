{
    "addition": {
        "59": "    suite.addTest(\n",
        "60": "        SetMultimapTestSuiteBuilder.using(\n",
        "61": "                new TestStringSetMultimapGenerator() {\n",
        "62": "                  @Override\n",
        "63": "                  protected SetMultimap<String, String> create(Entry<String, String>[] entries) {\n",
        "64": "                    SetMultimap<String, String> multimap = LinkedHashMultimap.create();\n",
        "65": "                    for (Entry<String, String> entry : entries) {\n",
        "66": "                      multimap.put(entry.getKey(), entry.getValue());\n",
        "67": "                    }\n",
        "68": "                    return multimap;\n",
        "69": "                  }\n",
        "70": "                })\n",
        "71": "            .named(\"LinkedHashMultimap\")\n",
        "72": "            .withFeatures(\n",
        "73": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "74": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "75": "                MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "76": "                MapFeature.GENERAL_PURPOSE,\n",
        "77": "                MapFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,\n",
        "78": "                CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "79": "                CollectionFeature.KNOWN_ORDER,\n",
        "80": "                CollectionFeature.SERIALIZABLE,\n",
        "81": "                CollectionSize.ANY)\n",
        "82": "            .createTestSuite());\n",
        "96": "      assertFalse(\n",
        "97": "          Hashing.needsResizing(\n",
        "98": "              valueSet.size(),\n",
        "99": "              valueSet.hashTable.length,\n",
        "100": "              LinkedHashMultimap.VALUE_SET_LOAD_FACTOR));\n",
        "121": "    assertEquals(\"{foo=[3, -1, 2, 4, 1], bar=[1, 2, 3]}\", multimap.toString());\n",
        "142": "    Multimap<String, Integer> copy = SerializableTester.reserializeAndAssert(multimap);\n",
        "156": "    assertThat(multimap.entries())\n",
        "157": "        .containsExactly(mapEntry(\"b\", 2), mapEntry(\"a\", 3), mapEntry(\"c\", 4))\n",
        "158": "        .inOrder();\n",
        "170": "    Iterator<Entry<String, Integer>> entryIterator = multimap.entries().iterator();\n",
        "253": "    LinkedHashMultimap<String, Integer> copy = LinkedHashMultimap.create(multimap);\n",
        "254": "    new EqualsTester().addEqualityGroup(multimap, copy).testEquals();\n",
        "258": "    LinkedHashMultimap<String, Integer> multimap = LinkedHashMultimap.create(20, 15);\n",
        "269": "    } catch (IllegalArgumentException expected) {\n",
        "270": "    }\n",
        "275": "    } catch (IllegalArgumentException expected) {\n",
        "276": "    }\n",
        "281": "    new IteratorTester<Integer>(\n",
        "282": "        6,\n",
        "283": "        MODIFIABLE,\n",
        "288": "      @Override\n",
        "289": "      protected Iterator<Integer> newTargetIterator() {\n",
        "297": "      @Override\n",
        "298": "      protected void verify(List<Integer> elements) {\n",
        "307": "    Set<Entry<String, Integer>> set =\n",
        "308": "        Sets.newLinkedHashSet(\n",
        "309": "            asList(\n",
        "310": "                Maps.immutableEntry(\"foo\", 2),\n",
        "311": "                Maps.immutableEntry(\"foo\", 3),\n",
        "312": "                Maps.immutableEntry(\"bar\", 4),\n",
        "313": "                Maps.immutableEntry(\"bar\", 5),\n",
        "314": "                Maps.immutableEntry(\"foo\", 6)));\n",
        "315": "\n",
        "316": "    new IteratorTester<Entry<String, Integer>>(\n",
        "317": "        6, MODIFIABLE, set, IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "320": "      @Override\n",
        "321": "      protected Iterator<Entry<String, Integer>> newTargetIterator() {\n",
        "329": "      @Override\n",
        "330": "      protected void verify(List<Entry<String, Integer>> elements) {\n",
        "338": "    new IteratorTester<String>(\n",
        "339": "        6,\n",
        "340": "        MODIFIABLE,\n",
        "341": "        newArrayList(\"foo\", \"foo\", \"bar\", \"bar\", \"foo\"),\n",
        "342": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "345": "      @Override\n",
        "346": "      protected Iterator<String> newTargetIterator() {\n",
        "354": "      @Override\n",
        "355": "      protected void verify(List<String> elements) {\n",
        "363": "    new IteratorTester<Integer>(\n",
        "364": "        6, MODIFIABLE, newArrayList(2, 3, 4, 5, 6), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "367": "      @Override\n",
        "368": "      protected Iterator<Integer> newTargetIterator() {\n",
        "376": "      @Override\n",
        "377": "      protected void verify(List<Integer> elements) {\n",
        "385": "    new IteratorTester<String>(\n",
        "386": "        6,\n",
        "387": "        MODIFIABLE,\n",
        "392": "      @Override\n",
        "393": "      protected Iterator<String> newTargetIterator() {\n",
        "405": "      @Override\n",
        "406": "      protected void verify(List<String> elements) {\n",
        "415": "    Set<Entry<String, Collection<Integer>>> set =\n",
        "416": "        newLinkedHashSet(\n",
        "417": "            asList(\n",
        "418": "                Maps.immutableEntry(\"foo\", (Collection<Integer>) Sets.newHashSet(2, 3, 6)),\n",
        "419": "                Maps.immutableEntry(\"bar\", (Collection<Integer>) Sets.newHashSet(4, 5, 10, 11)),\n",
        "420": "                Maps.immutableEntry(\"baz\", (Collection<Integer>) Sets.newHashSet(7, 8)),\n",
        "421": "                Maps.immutableEntry(\"dog\", (Collection<Integer>) Sets.newHashSet(9)),\n",
        "422": "                Maps.immutableEntry(\"cat\", (Collection<Integer>) Sets.newHashSet(12, 13, 14))));\n",
        "423": "    new IteratorTester<Entry<String, Collection<Integer>>>(\n",
        "424": "        6, MODIFIABLE, set, IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "427": "      @Override\n",
        "428": "      protected Iterator<Entry<String, Collection<Integer>>> newTargetIterator() {\n",
        "440": "      @Override\n",
        "441": "      protected void verify(List<Entry<String, Collection<Integer>>> elements) {\n"
    },
    "removed": {
        "59": "    suite.addTest(SetMultimapTestSuiteBuilder.using(new TestStringSetMultimapGenerator() {\n",
        "60": "        @Override\n",
        "61": "        protected SetMultimap<String, String> create(Entry<String, String>[] entries) {\n",
        "62": "          SetMultimap<String, String> multimap = LinkedHashMultimap.create();\n",
        "63": "          for (Entry<String, String> entry : entries) {\n",
        "64": "            multimap.put(entry.getKey(), entry.getValue());\n",
        "65": "          }\n",
        "66": "          return multimap;\n",
        "67": "        }\n",
        "68": "      })\n",
        "69": "      .named(\"LinkedHashMultimap\")\n",
        "70": "      .withFeatures(\n",
        "71": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "72": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "73": "          MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "74": "          MapFeature.GENERAL_PURPOSE,\n",
        "75": "          MapFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,\n",
        "76": "          CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "77": "          CollectionFeature.KNOWN_ORDER,\n",
        "78": "          CollectionFeature.SERIALIZABLE,\n",
        "79": "          CollectionSize.ANY)\n",
        "80": "      .createTestSuite());\n",
        "94": "      assertFalse(Hashing.needsResizing(valueSet.size(), valueSet.hashTable.length,\n",
        "95": "          LinkedHashMultimap.VALUE_SET_LOAD_FACTOR));\n",
        "116": "    assertEquals(\"{foo=[3, -1, 2, 4, 1], bar=[1, 2, 3]}\",\n",
        "117": "        multimap.toString());\n",
        "138": "    Multimap<String, Integer> copy\n",
        "139": "        = SerializableTester.reserializeAndAssert(multimap);\n",
        "153": "    assertThat(multimap.entries()).containsExactly(\n",
        "154": "        mapEntry(\"b\", 2),\n",
        "155": "        mapEntry(\"a\", 3),\n",
        "156": "        mapEntry(\"c\", 4)).inOrder();\n",
        "168": "    Iterator<Entry<String, Integer>> entryIterator =\n",
        "169": "        multimap.entries().iterator();\n",
        "252": "    LinkedHashMultimap<String, Integer> copy =\n",
        "253": "        LinkedHashMultimap.create(multimap);\n",
        "254": "    new EqualsTester()\n",
        "255": "        .addEqualityGroup(multimap, copy)\n",
        "256": "        .testEquals();\n",
        "260": "    LinkedHashMultimap<String, Integer> multimap\n",
        "261": "        = LinkedHashMultimap.create(20, 15);\n",
        "272": "    } catch (IllegalArgumentException expected) {}\n",
        "277": "    } catch (IllegalArgumentException expected) {}\n",
        "282": "    new IteratorTester<Integer>(6, MODIFIABLE,\n",
        "287": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "295": "      @Override protected void verify(List<Integer> elements) {\n",
        "304": "    Set<Entry<String, Integer>> set = Sets.newLinkedHashSet(asList(\n",
        "305": "        Maps.immutableEntry(\"foo\", 2),\n",
        "306": "        Maps.immutableEntry(\"foo\", 3),\n",
        "307": "        Maps.immutableEntry(\"bar\", 4),\n",
        "308": "        Maps.immutableEntry(\"bar\", 5),\n",
        "309": "        Maps.immutableEntry(\"foo\", 6)));\n",
        "310": "\n",
        "311": "    new IteratorTester<Entry<String, Integer>>(6, MODIFIABLE, set,\n",
        "312": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "315": "      @Override protected Iterator<Entry<String, Integer>> newTargetIterator() {\n",
        "323": "      @Override protected void verify(List<Entry<String, Integer>> elements) {\n",
        "331": "    new IteratorTester<String>(6, MODIFIABLE, newArrayList(\"foo\", \"foo\", \"bar\",\n",
        "332": "        \"bar\", \"foo\"), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "335": "      @Override protected Iterator<String> newTargetIterator() {\n",
        "343": "      @Override protected void verify(List<String> elements) {\n",
        "351": "    new IteratorTester<Integer>(6, MODIFIABLE, newArrayList(2, 3, 4, 5, 6),\n",
        "352": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "355": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "363": "      @Override protected void verify(List<Integer> elements) {\n",
        "371": "    new IteratorTester<String>(6, MODIFIABLE,\n",
        "376": "      @Override protected Iterator<String> newTargetIterator() {\n",
        "388": "      @Override protected void verify(List<String> elements) {\n",
        "397": "    Set<Entry<String, Collection<Integer>>> set = newLinkedHashSet(asList(\n",
        "398": "        Maps.immutableEntry(\"foo\",\n",
        "399": "            (Collection<Integer>) Sets.newHashSet(2, 3, 6)),\n",
        "400": "        Maps.immutableEntry(\"bar\",\n",
        "401": "            (Collection<Integer>) Sets.newHashSet(4, 5, 10, 11)),\n",
        "402": "        Maps.immutableEntry(\"baz\",\n",
        "403": "            (Collection<Integer>) Sets.newHashSet(7, 8)),\n",
        "404": "        Maps.immutableEntry(\"dog\",\n",
        "405": "            (Collection<Integer>) Sets.newHashSet(9)),\n",
        "406": "        Maps.immutableEntry(\"cat\",\n",
        "407": "            (Collection<Integer>) Sets.newHashSet(12, 13, 14))\n",
        "408": "    ));\n",
        "409": "    new IteratorTester<Entry<String, Collection<Integer>>>(6, MODIFIABLE, set,\n",
        "410": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "413": "      @Override protected Iterator<Entry<String, Collection<Integer>>>\n",
        "414": "          newTargetIterator() {\n",
        "426": "      @Override protected void verify(\n",
        "427": "          List<Entry<String, Collection<Integer>>> elements) {\n"
    }
}