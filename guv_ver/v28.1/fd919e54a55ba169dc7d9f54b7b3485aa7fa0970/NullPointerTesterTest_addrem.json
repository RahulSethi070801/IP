{
    "addition": {
        "66": "   * Class for testing all permutations of static/non-static one-argument methods using\n",
        "67": "   * methodParameter().\n",
        "75": "\n",
        "77": "      throw new FooException(); // should catch as failure\n",
        "79": "\n",
        "83": "\n",
        "84": "    public static void staticOneArgCheckForNullCorrectlyDoesNotThrowNPE(@CheckForNull String s) {\n",
        "87": "\n",
        "88": "    public static void staticOneArgNullableCorrectlyDoesNotThrowNPE(@Nullable String s) {\n",
        "91": "\n",
        "92": "    public static void staticOneArgCheckForNullCorrectlyThrowsOtherThanNPE(@CheckForNull String s) {\n",
        "95": "\n",
        "96": "    public static void staticOneArgNullableCorrectlyThrowsOtherThanNPE(@Nullable String s) {\n",
        "99": "\n",
        "100": "    public static void staticOneArgCheckForNullThrowsNPE(@CheckForNull String s) {\n",
        "103": "\n",
        "104": "    public static void staticOneArgNullableThrowsNPE(@Nullable String s) {\n",
        "111": "\n",
        "113": "      throw new FooException(); // should catch as failure\n",
        "115": "\n",
        "155": "    \"staticOneArgThrowsOtherThanNpe\", \"staticOneArgShouldThrowNpeButDoesnt\",\n",
        "167": "    \"oneArgThrowsOtherThanNpe\", \"oneArgShouldThrowNpeButDoesnt\",\n",
        "283": "   * Class for testing all permutations of nullable/non-nullable two-argument methods using\n",
        "284": "   * testMethod().\n",
        "286": "   * <ul>\n",
        "287": "   *   <li>normalNormal: two params, neither is Nullable\n",
        "288": "   *   <li>nullableNormal: only first param is Nullable\n",
        "289": "   *   <li>normalNullable: only second param is Nullable\n",
        "290": "   *   <li>nullableNullable: both params are Nullable\n",
        "291": "   * </ul>\n",
        "297": "        @Override\n",
        "298": "        public void act() {\n",
        "303": "        @Override\n",
        "304": "        public void act() {\n",
        "309": "        @Override\n",
        "310": "        public void act() {}\n",
        "319": "    public TwoArg(Action actionWhenFirstParamIsNull, Action actionWhenSecondParamIsNull) {\n",
        "350": "    public void nullableNullable(@Nullable String first, @Nullable Integer second) {\n",
        "355": "    @Override\n",
        "356": "    public String toString() {\n",
        "357": "      return rootLocaleFormat(\n",
        "358": "          \"Bar(%s, %s)\", actionWhenFirstParamIsNull, actionWhenSecondParamIsNull);\n",
        "366": "      String errorMessage =\n",
        "367": "          rootLocaleFormat(\"Should not have flagged method %s for %s\", method.getName(), bar);\n",
        "378": "    String errorMessage =\n",
        "379": "        rootLocaleFormat(\"Should have flagged method %s for %s\", method.getName(), bar);\n",
        "384": "    Method method = TwoArg.class.getMethod(\"normalNormal\", String.class, Integer.class);\n",
        "388": "        if (first.equals(TwoArg.Action.THROW_A_NPE) && second.equals(TwoArg.Action.THROW_A_NPE)) {\n",
        "398": "    Method method = TwoArg.class.getMethod(\"normalNullable\", String.class, Integer.class);\n",
        "412": "    Method method = TwoArg.class.getMethod(\"nullableNormal\", String.class, Integer.class);\n",
        "426": "    Method method = TwoArg.class.getMethod(\"nullableNullable\", String.class, Integer.class);\n",
        "449": "\n",
        "451": "\n",
        "452": "    public void oneArg(String s) {\n",
        "453": "      checkNotNull(s);\n",
        "454": "    }\n",
        "455": "\n",
        "456": "    void packagePrivateOneArg(String s) {\n",
        "457": "      checkNotNull(s);\n",
        "458": "    }\n",
        "459": "\n",
        "460": "    protected void protectedOneArg(String s) {\n",
        "461": "      checkNotNull(s);\n",
        "462": "    }\n",
        "463": "\n",
        "466": "    public void oneNullableArgThrows(@Nullable String s) {\n",
        "467": "      doThrow(s);\n",
        "468": "    }\n",
        "469": "\n",
        "470": "    public void twoArg(String s, Integer i) {\n",
        "471": "      checkNotNull(s);\n",
        "472": "      i.intValue();\n",
        "473": "    }\n",
        "474": "\n",
        "475": "    public void twoMixedArgs(String s, @Nullable Integer i) {\n",
        "476": "      checkNotNull(s);\n",
        "477": "    }\n",
        "478": "\n",
        "480": "      checkNotNull(s);\n",
        "481": "      doThrow(i);\n",
        "483": "\n",
        "484": "    public void twoMixedArgs(@Nullable Integer i, String s) {\n",
        "485": "      checkNotNull(s);\n",
        "486": "    }\n",
        "487": "\n",
        "489": "      checkNotNull(s);\n",
        "490": "      doThrow(i);\n",
        "492": "\n",
        "493": "    public void twoNullableArgs(@Nullable String s, @javax.annotation.Nullable Integer i) {}\n",
        "494": "\n",
        "495": "    public void twoNullableArgsThrowsFirstArg(@Nullable String s, @Nullable Integer i) {\n",
        "498": "\n",
        "499": "    public void twoNullableArgsThrowsSecondArg(@Nullable String s, @Nullable Integer i) {\n",
        "502": "\n",
        "503": "    public static void staticOneArg(String s) {\n",
        "504": "      checkNotNull(s);\n",
        "505": "    }\n",
        "506": "\n",
        "508": "\n",
        "519": "    @Override\n",
        "520": "    public void oneArg(String s) {\n",
        "530": "    @Override\n",
        "531": "    public void oneArg(String s) {\n",
        "541": "    @Override\n",
        "542": "    public void oneNullableArg(@Nullable String s) {\n",
        "552": "    @Override\n",
        "553": "    public void twoArg(String s, Integer i) {\n",
        "564": "    @Override\n",
        "565": "    public void twoArg(String s, Integer i) {\n",
        "576": "    @Override\n",
        "577": "    public void twoArg(String s, Integer i) {\n",
        "588": "    @Override\n",
        "589": "    public void twoArg(String s, Integer i) {\n",
        "599": "  private static class FailTwoMixedArgsFirstArgDoesntThrowNPE extends PassObject {\n",
        "600": "    @Override\n",
        "601": "    public void twoMixedArgs(String s, @Nullable Integer i) {\n",
        "610": "  private static class FailTwoMixedArgsFirstArgThrowsWrongType extends PassObject {\n",
        "611": "    @Override\n",
        "612": "    public void twoMixedArgs(String s, @Nullable Integer i) {\n",
        "622": "    @Override\n",
        "623": "    public void twoMixedArgs(String s, @Nullable Integer i) {\n",
        "633": "  private static class PassTwoMixedArgSecondNullableArgThrowsOther extends PassObject {\n",
        "634": "    @Override\n",
        "635": "    public void twoMixedArgs(String s, @Nullable Integer i) {\n",
        "645": "  private static class FailTwoMixedArgsSecondArgDoesntThrowNPE extends PassObject {\n",
        "646": "    @Override\n",
        "647": "    public void twoMixedArgs(@Nullable Integer i, String s) {\n",
        "656": "  private static class FailTwoMixedArgsSecondArgThrowsWrongType extends PassObject {\n",
        "657": "    @Override\n",
        "658": "    public void twoMixedArgs(@Nullable Integer i, String s) {\n",
        "668": "    @Override\n",
        "669": "    public void twoNullableArgs(@Nullable String s, @Nullable Integer i) {\n",
        "679": "    @Override\n",
        "680": "    public void twoNullableArgs(@Nullable String s, @Nullable Integer i) {\n",
        "690": "    @Override\n",
        "691": "    public void twoNullableArgs(@Nullable String s, @Nullable Integer i) {\n",
        "701": "    @Override\n",
        "702": "    public void twoNullableArgs(@Nullable String s, @Nullable Integer i) {\n",
        "711": "  private static class PassTwoNullableArgsNeitherThrowsAnything extends PassObject {\n",
        "712": "    @Override\n",
        "713": "    public void twoNullableArgs(@Nullable String s, @Nullable Integer i) {\n",
        "727": "  private static class SubclassWithBadSuperclass extends BaseClassThatFailsToThrow {}\n",
        "742": "    shouldFail(new SubclassWithBadSuperclassForPackagePrivate(), Visibility.PACKAGE);\n",
        "754": "    shouldFail(new SubclassWithBadSuperclassForProtected(), Visibility.PROTECTED);\n",
        "757": "  private static class SubclassThatOverridesBadSuperclassMethod extends BaseClassThatFailsToThrow {\n",
        "758": "    @Override\n",
        "759": "    public void oneArg(@Nullable String s) {}\n",
        "767": "  private static class SubclassOverridesTheWrongMethod extends BaseClassThatFailsToThrow {\n",
        "784": "  private static class SubclassThatFailsToThrowForStatic extends ClassThatFailsToThrowForStatic {}\n",
        "873": "    for (Constructor<?> constructor :\n",
        "874": "        PrivateClassWithPrivateConstructor.class.getDeclaredConstructors()) {\n",
        "885": "    @Override\n",
        "886": "    public void doSomething(String bar, Integer baz) {\n",
        "901": "      new NullPointerTester().testInstanceMethods(this, Visibility.PACKAGE);\n",
        "908": "        assertEquals(\"Default value for parameter #\" + i, expectedValues[i], arguments.get(i));\n",
        "929": "    MALE,\n",
        "930": "    FEMALE\n",
        "938": "        Integer integer,\n",
        "939": "        int i,\n",
        "940": "        String string,\n",
        "941": "        CharSequence charSequence,\n",
        "958": "          integer,\n",
        "959": "          i,\n",
        "960": "          string,\n",
        "961": "          charSequence,\n",
        "962": "          list,\n",
        "963": "          immutableList,\n",
        "964": "          map,\n",
        "965": "          immutableMap,\n",
        "966": "          set,\n",
        "967": "          immutableSet,\n",
        "968": "          sortedSet,\n",
        "969": "          immutableSortedSet,\n",
        "970": "          multiset,\n",
        "971": "          immutableMultiset,\n",
        "972": "          multimap,\n",
        "973": "          immutableMultimap,\n",
        "974": "          table,\n",
        "975": "          immutableTable);\n",
        "979": "      runTester()\n",
        "980": "          .assertNonNullValues(\n",
        "981": "              Gender.MALE,\n",
        "982": "              Integer.valueOf(0),\n",
        "983": "              0,\n",
        "984": "              \"\",\n",
        "985": "              \"\",\n",
        "986": "              ImmutableList.of(),\n",
        "987": "              ImmutableList.of(),\n",
        "988": "              ImmutableMap.of(),\n",
        "989": "              ImmutableMap.of(),\n",
        "990": "              ImmutableSet.of(),\n",
        "991": "              ImmutableSet.of(),\n",
        "992": "              ImmutableSortedSet.of(),\n",
        "993": "              ImmutableSortedSet.of(),\n",
        "994": "              ImmutableMultiset.of(),\n",
        "995": "              ImmutableMultiset.of(),\n",
        "996": "              ImmutableMultimap.of(),\n",
        "997": "              ImmutableMultimap.of(),\n",
        "998": "              ImmutableTable.of(),\n",
        "999": "              ImmutableTable.of());\n",
        "1007": "  private static class ObjectArrayDefaultValueChecker extends DefaultValueChecker {\n",
        "1025": "  private static class StringArrayDefaultValueChecker extends DefaultValueChecker {\n",
        "1043": "  private static class IntArrayDefaultValueChecker extends DefaultValueChecker {\n",
        "1063": "  private static class EmptyEnumDefaultValueChecker extends DefaultValueChecker {\n",
        "1084": "  private static class GenericClassTypeDefaultValueChecker extends DefaultValueChecker {\n",
        "1102": "  private static class NonGenericClassTypeDefaultValueChecker extends DefaultValueChecker {\n",
        "1120": "  private static class GenericTypeTokenDefaultValueChecker extends DefaultValueChecker {\n",
        "1123": "    public void checkArray(TypeToken<? extends List<? super Number>> type, String s) {\n",
        "1130": "      assertTrue(new TypeToken<List<? super Number>>() {}.isSupertypeOf(defaultType));\n",
        "1138": "  private static class NonGenericTypeTokenDefaultValueChecker extends DefaultValueChecker {\n",
        "1141": "    public void checkArray(@SuppressWarnings(\"rawtypes\") TypeToken type, String s) {\n",
        "1158": "  private static class GenericInterfaceDefaultValueChecker extends DefaultValueChecker {\n",
        "1177": "    @Override\n",
        "1178": "    public abstract T apply(F from);\n",
        "1181": "  private static class NullRejectingInterfaceDefaultValueChecker extends DefaultValueChecker {\n",
        "1190": "      NullRejectingFromTo<?, ?> defaultFunction =\n",
        "1191": "          (NullRejectingFromTo<?, ?>) getDefaultParameterValue(0);\n",
        "1196": "      } catch (NullPointerException expected) {\n",
        "1197": "      }\n",
        "1205": "  private static class MultipleInterfacesDefaultValueChecker extends DefaultValueChecker {\n",
        "1208": "    public <T extends FromTo<String, Integer> & Supplier<Long>> void checkArray(T f, String s) {\n",
        "1225": "  private static class GenericInterface2DefaultValueChecker extends DefaultValueChecker {\n",
        "1244": "  private abstract static class AbstractGenericDefaultValueChecker<T> extends DefaultValueChecker {\n",
        "1264": "  private abstract static class AbstractGenericDefaultValueForPackagePrivateMethodChecker<T>\n",
        "1273": "  private static class DefaultValueForPackagePrivateMethodResolvedToStringChecker\n",
        "1274": "      extends AbstractGenericDefaultValueForPackagePrivateMethodChecker<String> {\n",
        "1285": "  private static class ConverterDefaultValueChecker extends DefaultValueChecker {\n",
        "1295": "      Converter<String, Integer> defaultConverter =\n",
        "1296": "          (Converter<String, Integer>) getDefaultParameterValue(0);\n",
        "1324": "    assertFalse(\n",
        "1325": "        Visibility.PUBLIC.isVisible(VisibilityMethods.class.getDeclaredMethod(\"privateMethod\")));\n",
        "1326": "    assertFalse(\n",
        "1327": "        Visibility.PUBLIC.isVisible(\n",
        "1328": "            VisibilityMethods.class.getDeclaredMethod(\"packagePrivateMethod\")));\n",
        "1329": "    assertFalse(\n",
        "1330": "        Visibility.PUBLIC.isVisible(VisibilityMethods.class.getDeclaredMethod(\"protectedMethod\")));\n",
        "1331": "    assertTrue(\n",
        "1332": "        Visibility.PUBLIC.isVisible(VisibilityMethods.class.getDeclaredMethod(\"publicMethod\")));\n",
        "1336": "    assertFalse(\n",
        "1337": "        Visibility.PROTECTED.isVisible(VisibilityMethods.class.getDeclaredMethod(\"privateMethod\")));\n",
        "1338": "    assertFalse(\n",
        "1339": "        Visibility.PROTECTED.isVisible(\n",
        "1340": "            VisibilityMethods.class.getDeclaredMethod(\"packagePrivateMethod\")));\n",
        "1341": "    assertTrue(\n",
        "1342": "        Visibility.PROTECTED.isVisible(\n",
        "1343": "            VisibilityMethods.class.getDeclaredMethod(\"protectedMethod\")));\n",
        "1344": "    assertTrue(\n",
        "1345": "        Visibility.PROTECTED.isVisible(VisibilityMethods.class.getDeclaredMethod(\"publicMethod\")));\n",
        "1349": "    assertFalse(\n",
        "1350": "        Visibility.PACKAGE.isVisible(VisibilityMethods.class.getDeclaredMethod(\"privateMethod\")));\n",
        "1351": "    assertTrue(\n",
        "1352": "        Visibility.PACKAGE.isVisible(\n",
        "1353": "            VisibilityMethods.class.getDeclaredMethod(\"packagePrivateMethod\")));\n",
        "1354": "    assertTrue(\n",
        "1355": "        Visibility.PACKAGE.isVisible(VisibilityMethods.class.getDeclaredMethod(\"protectedMethod\")));\n",
        "1356": "    assertTrue(\n",
        "1357": "        Visibility.PACKAGE.isVisible(VisibilityMethods.class.getDeclaredMethod(\"publicMethod\")));\n"
    },
    "removed": {
        "66": "   * Class for testing all permutations of static/non-static one-argument\n",
        "67": "   * methods using methodParameter().\n",
        "76": "      throw new FooException();  // should catch as failure\n",
        "81": "    public static void\n",
        "82": "    staticOneArgCheckForNullCorrectlyDoesNotThrowNPE(@CheckForNull String s) {\n",
        "85": "    public static void\n",
        "86": "    staticOneArgNullableCorrectlyDoesNotThrowNPE(@Nullable String s) {\n",
        "89": "    public static void\n",
        "90": "    staticOneArgCheckForNullCorrectlyThrowsOtherThanNPE(@CheckForNull String s) {\n",
        "93": "    public static void\n",
        "94": "    staticOneArgNullableCorrectlyThrowsOtherThanNPE(@Nullable String s) {\n",
        "97": "    public static void\n",
        "98": "    staticOneArgCheckForNullThrowsNPE(@CheckForNull String s) {\n",
        "101": "    public static void\n",
        "102": "    staticOneArgNullableThrowsNPE(@Nullable String s) {\n",
        "110": "      throw new FooException();  // should catch as failure\n",
        "145": "    \"staticOneArgThrowsOtherThanNpe\",\n",
        "146": "    \"staticOneArgShouldThrowNpeButDoesnt\",\n",
        "158": "    \"oneArgThrowsOtherThanNpe\",\n",
        "159": "    \"oneArgShouldThrowNpeButDoesnt\",\n",
        "275": "   * Class for testing all permutations of nullable/non-nullable two-argument\n",
        "276": "   * methods using testMethod().\n",
        "278": "   *   normalNormal:  two params, neither is Nullable\n",
        "279": "   *   nullableNormal:  only first param is Nullable\n",
        "280": "   *   normalNullable:  only second param is Nullable\n",
        "281": "   *   nullableNullable:  both params are Nullable\n",
        "287": "        @Override public void act() {\n",
        "292": "        @Override public void act() {\n",
        "297": "        @Override public void act() {}\n",
        "305": "    public TwoArg(\n",
        "306": "        Action actionWhenFirstParamIsNull,\n",
        "307": "        Action actionWhenSecondParamIsNull) {\n",
        "338": "    public void nullableNullable(\n",
        "339": "        @Nullable String first, @Nullable Integer second) {\n",
        "344": "    @Override public String toString() {\n",
        "345": "      return rootLocaleFormat(\"Bar(%s, %s)\",\n",
        "346": "          actionWhenFirstParamIsNull, actionWhenSecondParamIsNull);\n",
        "354": "      String errorMessage = rootLocaleFormat(\n",
        "355": "          \"Should not have flagged method %s for %s\", method.getName(), bar);\n",
        "366": "    String errorMessage = rootLocaleFormat(\n",
        "367": "        \"Should have flagged method %s for %s\", method.getName(), bar);\n",
        "372": "    Method method = TwoArg.class.getMethod(\n",
        "373": "        \"normalNormal\", String.class, Integer.class);\n",
        "377": "        if (first.equals(TwoArg.Action.THROW_A_NPE)\n",
        "378": "            && second.equals(TwoArg.Action.THROW_A_NPE)) {\n",
        "388": "    Method method = TwoArg.class.getMethod(\n",
        "389": "        \"normalNullable\", String.class, Integer.class);\n",
        "403": "    Method method = TwoArg.class.getMethod(\n",
        "404": "        \"nullableNormal\", String.class, Integer.class);\n",
        "418": "    Method method = TwoArg.class.getMethod(\n",
        "419": "        \"nullableNullable\", String.class, Integer.class);\n",
        "443": "    public void oneArg(String s) { checkNotNull(s); }\n",
        "444": "    void packagePrivateOneArg(String s) { checkNotNull(s); }\n",
        "445": "    protected void protectedOneArg(String s) { checkNotNull(s); }\n",
        "447": "    public void oneNullableArgThrows(@Nullable String s) { doThrow(s); }\n",
        "449": "    public void twoArg(String s, Integer i) { checkNotNull(s); i.intValue(); }\n",
        "450": "    public void twoMixedArgs(String s, @Nullable Integer i) { checkNotNull(s); }\n",
        "452": "      checkNotNull(s); doThrow(i);\n",
        "454": "    public void twoMixedArgs(@Nullable Integer i, String s) { checkNotNull(s); }\n",
        "456": "      checkNotNull(s); doThrow(i);\n",
        "458": "    public void twoNullableArgs(@Nullable String s,\n",
        "459": "        @javax.annotation.Nullable Integer i) {}\n",
        "460": "    public void twoNullableArgsThrowsFirstArg(\n",
        "461": "        @Nullable String s, @Nullable Integer i) {\n",
        "464": "    public void twoNullableArgsThrowsSecondArg(\n",
        "465": "        @Nullable String s, @Nullable Integer i) {\n",
        "468": "    public static void staticOneArg(String s) { checkNotNull(s); }\n",
        "480": "    @Override public void oneArg(String s) {\n",
        "490": "    @Override public void oneArg(String s) {\n",
        "500": "    @Override public void oneNullableArg(@Nullable String s) {\n",
        "510": "    @Override public void twoArg(String s, Integer i) {\n",
        "521": "    @Override public void twoArg(String s, Integer i) {\n",
        "532": "    @Override public void twoArg(String s, Integer i) {\n",
        "543": "    @Override public void twoArg(String s, Integer i) {\n",
        "553": "  private static class FailTwoMixedArgsFirstArgDoesntThrowNPE\n",
        "554": "      extends PassObject {\n",
        "555": "    @Override public void twoMixedArgs(String s, @Nullable Integer i) {\n",
        "564": "  private static class FailTwoMixedArgsFirstArgThrowsWrongType\n",
        "565": "      extends PassObject {\n",
        "566": "    @Override public void twoMixedArgs(String s, @Nullable Integer i) {\n",
        "576": "    @Override public void twoMixedArgs(String s, @Nullable Integer i) {\n",
        "586": "  private static class PassTwoMixedArgSecondNullableArgThrowsOther\n",
        "587": "      extends PassObject {\n",
        "588": "    @Override public void twoMixedArgs(String s, @Nullable Integer i) {\n",
        "598": "  private static class FailTwoMixedArgsSecondArgDoesntThrowNPE\n",
        "599": "      extends PassObject {\n",
        "600": "    @Override public void twoMixedArgs(@Nullable Integer i, String s) {\n",
        "609": "  private static class FailTwoMixedArgsSecondArgThrowsWrongType\n",
        "610": "      extends PassObject {\n",
        "611": "    @Override public void twoMixedArgs(@Nullable Integer i, String s) {\n",
        "621": "    @Override public void twoNullableArgs(\n",
        "622": "        @Nullable String s, @Nullable Integer i) {\n",
        "632": "    @Override public void twoNullableArgs(\n",
        "633": "        @Nullable String s, @Nullable Integer i) {\n",
        "643": "    @Override public void twoNullableArgs(\n",
        "644": "        @Nullable String s, @Nullable Integer i) {\n",
        "654": "    @Override public void twoNullableArgs(\n",
        "655": "        @Nullable String s, @Nullable Integer i) {\n",
        "664": "  private static class PassTwoNullableArgsNeitherThrowsAnything\n",
        "665": "      extends PassObject {\n",
        "666": "    @Override public void twoNullableArgs(\n",
        "667": "        @Nullable String s, @Nullable Integer i) {\n",
        "681": "  private static class SubclassWithBadSuperclass\n",
        "682": "      extends BaseClassThatFailsToThrow {}\n",
        "697": "    shouldFail(\n",
        "698": "        new SubclassWithBadSuperclassForPackagePrivate(), Visibility.PACKAGE);\n",
        "710": "    shouldFail(\n",
        "711": "        new SubclassWithBadSuperclassForProtected(), Visibility.PROTECTED);\n",
        "714": "  private static class SubclassThatOverridesBadSuperclassMethod\n",
        "715": "      extends BaseClassThatFailsToThrow {\n",
        "716": "    @Override public void oneArg(@Nullable String s) {}\n",
        "724": "  private static class SubclassOverridesTheWrongMethod\n",
        "725": "      extends BaseClassThatFailsToThrow {\n",
        "742": "  private static class SubclassThatFailsToThrowForStatic\n",
        "743": "      extends ClassThatFailsToThrowForStatic {}\n",
        "832": "    for (Constructor<?> constructor\n",
        "833": "        : PrivateClassWithPrivateConstructor.class.getDeclaredConstructors()) {\n",
        "844": "    @Override public void doSomething(String bar, Integer baz) {\n",
        "859": "      new NullPointerTester()\n",
        "860": "          .testInstanceMethods(this, Visibility.PACKAGE);\n",
        "867": "        assertEquals(\"Default value for parameter #\" + i,\n",
        "868": "            expectedValues[i], arguments.get(i));\n",
        "889": "    MALE, FEMALE\n",
        "897": "        Integer integer, int i,\n",
        "898": "        String string, CharSequence charSequence,\n",
        "915": "          integer, i,\n",
        "916": "          string, charSequence,\n",
        "917": "          list, immutableList,\n",
        "918": "          map, immutableMap,\n",
        "919": "          set, immutableSet,\n",
        "920": "          sortedSet, immutableSortedSet,\n",
        "921": "          multiset, immutableMultiset,\n",
        "922": "          multimap, immutableMultimap,\n",
        "923": "          table, immutableTable);\n",
        "927": "      runTester().assertNonNullValues(\n",
        "928": "          Gender.MALE,\n",
        "929": "          Integer.valueOf(0), 0,\n",
        "930": "          \"\", \"\",\n",
        "931": "          ImmutableList.of(), ImmutableList.of(),\n",
        "932": "          ImmutableMap.of(), ImmutableMap.of(),\n",
        "933": "          ImmutableSet.of(), ImmutableSet.of(),\n",
        "934": "          ImmutableSortedSet.of(), ImmutableSortedSet.of(),\n",
        "935": "          ImmutableMultiset.of(), ImmutableMultiset.of(),\n",
        "936": "          ImmutableMultimap.of(), ImmutableMultimap.of(),\n",
        "937": "          ImmutableTable.of(), ImmutableTable.of());\n",
        "945": "  private static class ObjectArrayDefaultValueChecker\n",
        "946": "      extends DefaultValueChecker {\n",
        "964": "  private static class StringArrayDefaultValueChecker\n",
        "965": "      extends DefaultValueChecker {\n",
        "983": "  private static class IntArrayDefaultValueChecker\n",
        "984": "      extends DefaultValueChecker {\n",
        "1004": "  private static class EmptyEnumDefaultValueChecker\n",
        "1005": "      extends DefaultValueChecker {\n",
        "1026": "  private static class GenericClassTypeDefaultValueChecker\n",
        "1027": "      extends DefaultValueChecker {\n",
        "1045": "  private static class NonGenericClassTypeDefaultValueChecker\n",
        "1046": "      extends DefaultValueChecker {\n",
        "1064": "  private static class GenericTypeTokenDefaultValueChecker\n",
        "1065": "      extends DefaultValueChecker {\n",
        "1068": "    public void checkArray(\n",
        "1069": "        TypeToken<? extends List<? super Number>> type, String s) {\n",
        "1076": "      assertTrue(new TypeToken<List<? super Number>>() {}\n",
        "1077": "          .isSupertypeOf(defaultType));\n",
        "1085": "  private static class NonGenericTypeTokenDefaultValueChecker\n",
        "1086": "      extends DefaultValueChecker {\n",
        "1089": "    public void checkArray(\n",
        "1090": "        @SuppressWarnings(\"rawtypes\") TypeToken type, String s) {\n",
        "1107": "  private static class GenericInterfaceDefaultValueChecker\n",
        "1108": "      extends DefaultValueChecker {\n",
        "1127": "    @Override public abstract T apply(F from);\n",
        "1130": "  private static class NullRejectingInterfaceDefaultValueChecker\n",
        "1131": "      extends DefaultValueChecker {\n",
        "1140": "      NullRejectingFromTo<?, ?> defaultFunction = (NullRejectingFromTo<?, ?>)\n",
        "1141": "          getDefaultParameterValue(0);\n",
        "1146": "      } catch (NullPointerException expected) {}\n",
        "1154": "  private static class MultipleInterfacesDefaultValueChecker\n",
        "1155": "      extends DefaultValueChecker {\n",
        "1158": "    public <T extends FromTo<String, Integer> & Supplier<Long>> void checkArray(\n",
        "1159": "        T f, String s) {\n",
        "1176": "  private static class GenericInterface2DefaultValueChecker\n",
        "1177": "      extends DefaultValueChecker {\n",
        "1196": "  private abstract static class AbstractGenericDefaultValueChecker<T>\n",
        "1197": "      extends DefaultValueChecker {\n",
        "1217": "  private abstract static\n",
        "1218": "  class AbstractGenericDefaultValueForPackagePrivateMethodChecker<T>\n",
        "1227": "  private static\n",
        "1228": "  class DefaultValueForPackagePrivateMethodResolvedToStringChecker\n",
        "1229": "      extends AbstractGenericDefaultValueForPackagePrivateMethodChecker<String>\n",
        "1230": "  {\n",
        "1241": "  private static class ConverterDefaultValueChecker\n",
        "1242": "      extends DefaultValueChecker {\n",
        "1252": "      Converter<String, Integer> defaultConverter = (Converter<String, Integer>)\n",
        "1253": "          getDefaultParameterValue(0);\n",
        "1281": "    assertFalse(Visibility.PUBLIC.isVisible(\n",
        "1282": "        VisibilityMethods.class.getDeclaredMethod(\"privateMethod\")));\n",
        "1283": "    assertFalse(Visibility.PUBLIC.isVisible(\n",
        "1284": "        VisibilityMethods.class.getDeclaredMethod(\"packagePrivateMethod\")));\n",
        "1285": "    assertFalse(Visibility.PUBLIC.isVisible(\n",
        "1286": "        VisibilityMethods.class.getDeclaredMethod(\"protectedMethod\")));\n",
        "1287": "    assertTrue(Visibility.PUBLIC.isVisible(\n",
        "1288": "        VisibilityMethods.class.getDeclaredMethod(\"publicMethod\")));\n",
        "1292": "    assertFalse(Visibility.PROTECTED.isVisible(\n",
        "1293": "        VisibilityMethods.class.getDeclaredMethod(\"privateMethod\")));\n",
        "1294": "    assertFalse(Visibility.PROTECTED.isVisible(\n",
        "1295": "        VisibilityMethods.class.getDeclaredMethod(\"packagePrivateMethod\")));\n",
        "1296": "    assertTrue(Visibility.PROTECTED.isVisible(\n",
        "1297": "        VisibilityMethods.class.getDeclaredMethod(\"protectedMethod\")));\n",
        "1298": "    assertTrue(Visibility.PROTECTED.isVisible(\n",
        "1299": "        VisibilityMethods.class.getDeclaredMethod(\"publicMethod\")));\n",
        "1303": "    assertFalse(Visibility.PACKAGE.isVisible(\n",
        "1304": "        VisibilityMethods.class.getDeclaredMethod(\"privateMethod\")));\n",
        "1305": "    assertTrue(Visibility.PACKAGE.isVisible(\n",
        "1306": "        VisibilityMethods.class.getDeclaredMethod(\"packagePrivateMethod\")));\n",
        "1307": "    assertTrue(Visibility.PACKAGE.isVisible(\n",
        "1308": "        VisibilityMethods.class.getDeclaredMethod(\"protectedMethod\")));\n",
        "1309": "    assertTrue(Visibility.PACKAGE.isVisible(\n",
        "1310": "        VisibilityMethods.class.getDeclaredMethod(\"publicMethod\")));\n"
    }
}