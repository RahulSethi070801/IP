{
    "addition": {
        "53": "    LoadingCache<String, Integer> cache =\n",
        "54": "        CacheBuilder.newBuilder()\n",
        "55": "            .expireAfterWrite(EXPIRING_TIME, MILLISECONDS)\n",
        "56": "            .removalListener(removalListener)\n",
        "57": "            .ticker(ticker)\n",
        "58": "            .build(loader);\n",
        "66": "    LoadingCache<String, Integer> cache =\n",
        "67": "        CacheBuilder.newBuilder()\n",
        "68": "            .expireAfterAccess(EXPIRING_TIME, MILLISECONDS)\n",
        "69": "            .removalListener(removalListener)\n",
        "70": "            .ticker(ticker)\n",
        "71": "            .build(loader);\n",
        "75": "  private void checkExpiration(\n",
        "76": "      LoadingCache<String, Integer> cache,\n",
        "77": "      WatchedCreatorLoader loader,\n",
        "78": "      FakeTicker ticker,\n",
        "79": "      CountingRemovalListener<String, Integer> removalListener) {\n",
        "94": "    assertEquals(\"Eviction notifications must be received\", 10, removalListener.getCount());\n",
        "98": "    assertEquals(\"Eviction notifications must be received\", 10, removalListener.getCount());\n",
        "105": "    LoadingCache<String, Integer> cache =\n",
        "106": "        CacheBuilder.newBuilder()\n",
        "107": "            .expireAfterWrite(EXPIRING_TIME, MILLISECONDS)\n",
        "108": "            .removalListener(removalListener)\n",
        "109": "            .ticker(ticker)\n",
        "110": "            .build(loader);\n",
        "118": "    LoadingCache<String, Integer> cache =\n",
        "119": "        CacheBuilder.newBuilder()\n",
        "120": "            .expireAfterAccess(EXPIRING_TIME, MILLISECONDS)\n",
        "121": "            .removalListener(removalListener)\n",
        "122": "            .ticker(ticker)\n",
        "123": "            .build(loader);\n",
        "127": "  private void runExpirationTest(\n",
        "128": "      LoadingCache<String, Integer> cache,\n",
        "129": "      WatchedCreatorLoader loader,\n",
        "130": "      FakeTicker ticker,\n",
        "131": "      CountingRemovalListener<String, Integer> removalListener) {\n",
        "170": "    assertEquals(\"Eviction notifications must be received\", 21, removalListener.getCount());\n",
        "174": "    assertEquals(\"Eviction notifications must be received\", 21, removalListener.getCount());\n",
        "194": "    CacheLoader<Integer, AtomicInteger> loader =\n",
        "195": "        new CacheLoader<Integer, AtomicInteger>() {\n",
        "196": "          @Override\n",
        "197": "          public AtomicInteger load(Integer key) {\n",
        "198": "            applyCount.incrementAndGet();\n",
        "199": "            return new AtomicInteger();\n",
        "200": "          }\n",
        "201": "        };\n",
        "203": "    LoadingCache<Integer, AtomicInteger> cache =\n",
        "204": "        CacheBuilder.newBuilder()\n",
        "205": "            .removalListener(removalListener)\n",
        "206": "            .expireAfterWrite(10, MILLISECONDS)\n",
        "207": "            .ticker(ticker)\n",
        "208": "            .build(loader);\n",
        "225": "    LoadingCache<String, Integer> cache =\n",
        "226": "        CacheBuilder.newBuilder()\n",
        "227": "            .expireAfterWrite(EXPIRING_TIME, MILLISECONDS)\n",
        "228": "            .removalListener(removalListener)\n",
        "229": "            .ticker(ticker)\n",
        "230": "            .build(loader);\n",
        "238": "    LoadingCache<String, Integer> cache =\n",
        "239": "        CacheBuilder.newBuilder()\n",
        "240": "            .expireAfterAccess(EXPIRING_TIME, MILLISECONDS)\n",
        "241": "            .removalListener(removalListener)\n",
        "242": "            .ticker(ticker)\n",
        "243": "            .build(loader);\n",
        "251": "    LoadingCache<String, Integer> cache =\n",
        "252": "        CacheBuilder.newBuilder()\n",
        "253": "            .expireAfterAccess(EXPIRING_TIME, MILLISECONDS)\n",
        "254": "            .expireAfterWrite(EXPIRING_TIME, MILLISECONDS)\n",
        "255": "            .removalListener(removalListener)\n",
        "256": "            .ticker(ticker)\n",
        "257": "            .build(loader);\n",
        "265": "    LoadingCache<Integer, Integer> cache =\n",
        "266": "        CacheBuilder.newBuilder()\n",
        "267": "            .concurrencyLevel(1)\n",
        "268": "            .expireAfterAccess(11, MILLISECONDS)\n",
        "269": "            .ticker(ticker)\n",
        "270": "            .build(loader);\n",
        "318": "    LoadingCache<Integer, Integer> cache =\n",
        "319": "        CacheBuilder.newBuilder()\n",
        "320": "            .concurrencyLevel(1)\n",
        "321": "            .expireAfterWrite(11, MILLISECONDS)\n",
        "322": "            .ticker(ticker)\n",
        "323": "            .build(loader);\n",
        "366": "    LoadingCache<Integer, Integer> cache =\n",
        "367": "        CacheBuilder.newBuilder()\n",
        "368": "            .concurrencyLevel(1)\n",
        "369": "            .expireAfterWrite(5, MILLISECONDS)\n",
        "370": "            .expireAfterAccess(3, MILLISECONDS)\n",
        "371": "            .ticker(ticker)\n",
        "372": "            .build(loader);\n",
        "416": "    Cache<Integer, Integer> cache =\n",
        "417": "        CacheBuilder.newBuilder()\n",
        "418": "            .expireAfterAccess(1, TimeUnit.MINUTES)\n",
        "419": "            .removalListener(listener)\n",
        "420": "            .ticker(ticker)\n",
        "421": "            .build();\n",
        "429": "  private void runRemovalScheduler(\n",
        "430": "      LoadingCache<String, Integer> cache,\n",
        "433": "      FakeTicker ticker,\n",
        "434": "      String keyPrefix,\n",
        "435": "      long ttl) {\n",
        "457": "      assertEquals(\n",
        "458": "          \"key: \" + keyPrefix + i, Integer.valueOf(i + shift2), cache.getUnchecked(keyPrefix + i));\n",
        "461": "    assertEquals(10, removalListener.getCount()); // these are the invalidated ones\n",
        "489": "    public WatchedCreatorLoader() {}\n",
        "507": "    @Override\n",
        "508": "    public Integer load(String key) {\n"
    },
    "removed": {
        "53": "    LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n",
        "54": "        .expireAfterWrite(EXPIRING_TIME, MILLISECONDS)\n",
        "55": "        .removalListener(removalListener)\n",
        "56": "        .ticker(ticker)\n",
        "57": "        .build(loader);\n",
        "65": "    LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n",
        "66": "        .expireAfterAccess(EXPIRING_TIME, MILLISECONDS)\n",
        "67": "        .removalListener(removalListener)\n",
        "68": "        .ticker(ticker)\n",
        "69": "        .build(loader);\n",
        "73": "  private void checkExpiration(LoadingCache<String, Integer> cache, WatchedCreatorLoader loader,\n",
        "74": "      FakeTicker ticker, CountingRemovalListener<String, Integer> removalListener) {\n",
        "89": "    assertEquals(\"Eviction notifications must be received\", 10,\n",
        "90": "        removalListener.getCount());\n",
        "94": "    assertEquals(\"Eviction notifications must be received\", 10,\n",
        "95": "        removalListener.getCount());\n",
        "102": "    LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n",
        "103": "        .expireAfterWrite(EXPIRING_TIME, MILLISECONDS)\n",
        "104": "        .removalListener(removalListener)\n",
        "105": "        .ticker(ticker)\n",
        "106": "        .build(loader);\n",
        "114": "    LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n",
        "115": "        .expireAfterAccess(EXPIRING_TIME, MILLISECONDS)\n",
        "116": "        .removalListener(removalListener)\n",
        "117": "        .ticker(ticker)\n",
        "118": "        .build(loader);\n",
        "122": "  private void runExpirationTest(LoadingCache<String, Integer> cache, WatchedCreatorLoader loader,\n",
        "123": "      FakeTicker ticker, CountingRemovalListener<String, Integer> removalListener) {\n",
        "162": "    assertEquals(\"Eviction notifications must be received\", 21,\n",
        "163": "        removalListener.getCount());\n",
        "167": "    assertEquals(\"Eviction notifications must be received\", 21,\n",
        "168": "        removalListener.getCount());\n",
        "188": "    CacheLoader<Integer, AtomicInteger> loader = new CacheLoader<Integer, AtomicInteger>() {\n",
        "189": "      @Override public AtomicInteger load(Integer key) {\n",
        "190": "        applyCount.incrementAndGet();\n",
        "191": "        return new AtomicInteger();\n",
        "192": "      }\n",
        "193": "    };\n",
        "195": "    LoadingCache<Integer, AtomicInteger> cache = CacheBuilder.newBuilder()\n",
        "196": "        .removalListener(removalListener)\n",
        "197": "        .expireAfterWrite(10, MILLISECONDS)\n",
        "198": "        .ticker(ticker)\n",
        "199": "        .build(loader);\n",
        "216": "    LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n",
        "217": "        .expireAfterWrite(EXPIRING_TIME, MILLISECONDS)\n",
        "218": "        .removalListener(removalListener)\n",
        "219": "        .ticker(ticker)\n",
        "220": "        .build(loader);\n",
        "228": "    LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n",
        "229": "        .expireAfterAccess(EXPIRING_TIME, MILLISECONDS)\n",
        "230": "        .removalListener(removalListener)\n",
        "231": "        .ticker(ticker)\n",
        "232": "        .build(loader);\n",
        "240": "    LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n",
        "241": "        .expireAfterAccess(EXPIRING_TIME, MILLISECONDS)\n",
        "242": "        .expireAfterWrite(EXPIRING_TIME, MILLISECONDS)\n",
        "243": "        .removalListener(removalListener)\n",
        "244": "        .ticker(ticker)\n",
        "245": "        .build(loader);\n",
        "253": "    LoadingCache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "254": "        .concurrencyLevel(1)\n",
        "255": "        .expireAfterAccess(11, MILLISECONDS)\n",
        "256": "        .ticker(ticker)\n",
        "257": "        .build(loader);\n",
        "305": "    LoadingCache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "306": "        .concurrencyLevel(1)\n",
        "307": "        .expireAfterWrite(11, MILLISECONDS)\n",
        "308": "        .ticker(ticker)\n",
        "309": "        .build(loader);\n",
        "352": "    LoadingCache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "353": "        .concurrencyLevel(1)\n",
        "354": "        .expireAfterWrite(5, MILLISECONDS)\n",
        "355": "        .expireAfterAccess(3, MILLISECONDS)\n",
        "356": "        .ticker(ticker)\n",
        "357": "        .build(loader);\n",
        "401": "    Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n",
        "402": "        .expireAfterAccess(1, TimeUnit.MINUTES)\n",
        "403": "        .removalListener(listener)\n",
        "404": "        .ticker(ticker)\n",
        "405": "        .build();\n",
        "413": "  private void runRemovalScheduler(LoadingCache<String, Integer> cache,\n",
        "416": "      FakeTicker ticker, String keyPrefix, long ttl) {\n",
        "438": "      assertEquals(\"key: \" + keyPrefix + i,\n",
        "439": "          Integer.valueOf(i + shift2), cache.getUnchecked(keyPrefix + i));\n",
        "442": "    assertEquals(10, removalListener.getCount());  // these are the invalidated ones\n",
        "470": "    public WatchedCreatorLoader() {\n",
        "471": "    }\n",
        "489": "    @Override public Integer load(String key) {\n"
    }
}