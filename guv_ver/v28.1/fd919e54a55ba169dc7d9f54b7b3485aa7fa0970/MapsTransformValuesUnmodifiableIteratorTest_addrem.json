{
    "addition": {
        "31": " * Tests for {@link Maps#transformValues} when the backing map's views have iterators that don't\n",
        "32": " * support {@code remove()}.\n",
        "52": "    @Override\n",
        "53": "    protected Map<K, V> delegate() {\n",
        "57": "    @Override\n",
        "58": "    public Set<K> keySet() {\n",
        "60": "        @Override\n",
        "61": "        protected Set<K> delegate() {\n",
        "64": "\n",
        "65": "        @Override\n",
        "66": "        public Iterator<K> iterator() {\n",
        "69": "\n",
        "70": "        @Override\n",
        "71": "        public boolean removeAll(Collection<?> c) {\n",
        "74": "\n",
        "75": "        @Override\n",
        "76": "        public boolean retainAll(Collection<?> c) {\n",
        "82": "    @Override\n",
        "83": "    public Collection<V> values() {\n",
        "85": "        @Override\n",
        "86": "        protected Collection<V> delegate() {\n",
        "89": "\n",
        "90": "        @Override\n",
        "91": "        public Iterator<V> iterator() {\n",
        "94": "\n",
        "95": "        @Override\n",
        "96": "        public boolean removeAll(Collection<?> c) {\n",
        "99": "\n",
        "100": "        @Override\n",
        "101": "        public boolean retainAll(Collection<?> c) {\n",
        "107": "    @Override\n",
        "108": "    public Set<Entry<K, V>> entrySet() {\n",
        "110": "        @Override\n",
        "111": "        protected Set<Entry<K, V>> delegate() {\n",
        "114": "\n",
        "115": "        @Override\n",
        "116": "        public Iterator<Entry<K, V>> iterator() {\n",
        "119": "\n",
        "120": "        @Override\n",
        "121": "        public boolean removeAll(Collection<?> c) {\n",
        "124": "\n",
        "125": "        @Override\n",
        "126": "        public boolean retainAll(Collection<?> c) {\n",
        "133": "  @Override\n",
        "134": "  protected Map<String, String> makeEmptyMap() {\n",
        "140": "  @Override\n",
        "141": "  protected Map<String, String> makePopulatedMap() {\n",
        "150": "  @Override\n",
        "151": "  protected String getKeyNotInPopulatedMap() throws UnsupportedOperationException {\n",
        "155": "  @Override\n",
        "156": "  protected String getValueNotInPopulatedMap() throws UnsupportedOperationException {\n",
        "176": "    Map<String, String> map =\n",
        "177": "        Maps.transformValues(ImmutableMap.<String, Integer>of(), Functions.toStringFunction());\n",
        "182": "    Map<String, String> map =\n",
        "183": "        Maps.transformValues(ImmutableMap.of(\"a\", 1), Functions.toStringFunction());\n",
        "191": "    Map<String, Integer> map = Maps.transformValues(underlying, Functions.<Integer>identity());\n",
        "196": "    Map<String, String> map =\n",
        "197": "        Maps.transformValues(ImmutableMap.of(\"a\", 1), Functions.toStringFunction());\n",
        "220": "    Map<String, String> map = Maps.transformValues(underlying, Functions.toStringFunction());\n",
        "230": "    Map<String, Boolean> map =\n",
        "231": "        Maps.transformValues(\n",
        "232": "            underlying,\n",
        "233": "            new Function<String, Boolean>() {\n",
        "234": "              @Override\n",
        "235": "              public Boolean apply(@Nullable String from) {\n",
        "236": "                return from == null;\n",
        "237": "              }\n",
        "238": "            });\n",
        "254": "    Map<String, String> map = Maps.transformValues(underlying, Functions.toStringFunction());\n",
        "278": "    Map<String, String> map = Maps.transformValues(underlying, Functions.toStringFunction());\n",
        "320": "    Map<String, Integer> expected = Maps.transformValues(underlying, Functions.<Integer>identity());\n",
        "326": "    Map<String, Integer> map =\n",
        "327": "        Maps.transformValues(equalToUnderlying, Functions.<Integer>identity());\n",
        "330": "    map =\n",
        "331": "        Maps.transformValues(\n",
        "332": "            ImmutableMap.of(\"a\", 1, \"b\", 2, \"c\", 3),\n",
        "333": "            new Function<Integer, Integer>() {\n",
        "334": "              @Override\n",
        "335": "              public Integer apply(Integer from) {\n",
        "336": "                return from - 1;\n",
        "337": "              }\n",
        "338": "            });\n",
        "348": "    Map<String, Boolean> map =\n",
        "349": "        Maps.transformValues(\n",
        "350": "            underlying,\n",
        "351": "            new Function<Boolean, Boolean>() {\n",
        "352": "              @Override\n",
        "353": "              public Boolean apply(@Nullable Boolean from) {\n",
        "354": "                return (from == null) ? true : null;\n",
        "355": "              }\n",
        "356": "            });\n",
        "361": "    assertTrue(entries.contains(Maps.immutableEntry((String) null, (Boolean) null)));\n",
        "367": "  @Override\n",
        "368": "  public void testKeySetRemoveAllNullFromEmpty() {\n",
        "376": "  @Override\n",
        "377": "  public void testEntrySetRemoveAllNullFromEmpty() {\n"
    },
    "removed": {
        "31": " * Tests for {@link Maps#transformValues} when the backing map's views\n",
        "32": " * have iterators that don't support {@code remove()}.\n",
        "52": "    @Override protected Map<K, V> delegate() {\n",
        "56": "    @Override public Set<K> keySet() {\n",
        "58": "        @Override protected Set<K> delegate() {\n",
        "61": "        @Override public Iterator<K> iterator() {\n",
        "64": "        @Override public boolean removeAll(Collection<?> c) {\n",
        "67": "        @Override public boolean retainAll(Collection<?> c) {\n",
        "73": "    @Override public Collection<V> values() {\n",
        "75": "        @Override protected Collection<V> delegate() {\n",
        "78": "        @Override public Iterator<V> iterator() {\n",
        "81": "        @Override public boolean removeAll(Collection<?> c) {\n",
        "84": "        @Override public boolean retainAll(Collection<?> c) {\n",
        "90": "    @Override public Set<Entry<K, V>> entrySet() {\n",
        "92": "        @Override protected Set<Entry<K, V>> delegate() {\n",
        "95": "        @Override public Iterator<Entry<K, V>> iterator() {\n",
        "98": "        @Override public boolean removeAll(Collection<?> c) {\n",
        "101": "        @Override public boolean retainAll(Collection<?> c) {\n",
        "108": "  @Override protected Map<String, String> makeEmptyMap() {\n",
        "114": "  @Override protected Map<String, String> makePopulatedMap() {\n",
        "123": "  @Override protected String getKeyNotInPopulatedMap()\n",
        "124": "      throws UnsupportedOperationException {\n",
        "128": "  @Override protected String getValueNotInPopulatedMap()\n",
        "129": "      throws UnsupportedOperationException {\n",
        "149": "    Map<String, String> map = Maps.transformValues(\n",
        "150": "        ImmutableMap.<String, Integer>of(), Functions.toStringFunction());\n",
        "155": "    Map<String, String> map = Maps.transformValues(\n",
        "156": "        ImmutableMap.of(\"a\", 1), Functions.toStringFunction());\n",
        "164": "    Map<String, Integer> map = Maps.transformValues(\n",
        "165": "        underlying, Functions.<Integer>identity());\n",
        "170": "    Map<String, String> map = Maps.transformValues(\n",
        "171": "        ImmutableMap.of(\"a\", 1), Functions.toStringFunction());\n",
        "194": "    Map<String, String> map\n",
        "195": "        = Maps.transformValues(underlying, Functions.toStringFunction());\n",
        "205": "    Map<String, Boolean> map = Maps.transformValues(underlying,\n",
        "206": "        new Function<String, Boolean>() {\n",
        "207": "          @Override\n",
        "208": "          public Boolean apply(@Nullable String from) {\n",
        "209": "            return from == null;\n",
        "210": "          }\n",
        "211": "        }\n",
        "212": "    );\n",
        "228": "    Map<String, String> map\n",
        "229": "        = Maps.transformValues(underlying, Functions.toStringFunction());\n",
        "253": "    Map<String, String> map\n",
        "254": "        = Maps.transformValues(underlying, Functions.toStringFunction());\n",
        "296": "    Map<String, Integer> expected\n",
        "297": "        = Maps.transformValues(underlying, Functions.<Integer>identity());\n",
        "303": "    Map<String, Integer> map = Maps.transformValues(\n",
        "304": "        equalToUnderlying, Functions.<Integer>identity());\n",
        "307": "    map = Maps.transformValues(ImmutableMap.of(\"a\", 1, \"b\", 2, \"c\", 3),\n",
        "308": "        new Function<Integer, Integer>() {\n",
        "309": "          @Override\n",
        "310": "          public Integer apply(Integer from) {\n",
        "311": "            return from - 1;\n",
        "312": "          }\n",
        "313": "        }\n",
        "314": "    );\n",
        "324": "    Map<String, Boolean> map = Maps.transformValues(\n",
        "325": "        underlying, new Function<Boolean, Boolean>() {\n",
        "326": "          @Override\n",
        "327": "          public Boolean apply(@Nullable Boolean from) {\n",
        "328": "            return (from == null) ? true : null;\n",
        "329": "          }\n",
        "330": "        }\n",
        "331": "    );\n",
        "336": "    assertTrue(entries.contains(\n",
        "337": "        Maps.immutableEntry((String) null, (Boolean) null)));\n",
        "343": "  @Override public void testKeySetRemoveAllNullFromEmpty() {\n",
        "351": "  @Override public void testEntrySetRemoveAllNullFromEmpty() {\n"
    }
}