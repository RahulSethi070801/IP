{
    "addition": {
        "44": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\"> immutable collections</a>.\n",
        "54": "  /** Returns the empty immutable sorted multiset. */\n",
        "60": "  /** Returns an immutable sorted multiset containing a single element. */\n",
        "142": "   * ordering. To create a copy of a {@code SortedMultiset} that preserves the comparator, call\n",
        "143": "   * {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once.\n",
        "228": "   * the same {@code Comparator}. That behavior differs from {@link #copyOf(Iterable)}, which always\n",
        "229": "   * uses the natural ordering of the elements.\n",
        "284": "  @LazyInit transient ImmutableSortedMultiset<E> descendingMultiset;\n",
        "348": "   * SortedMultiset<Integer>} with a {@code Comparator<Number>}, use the {@link Builder} constructor\n",
        "349": "   * instead.\n",
        "387": "   * <pre>{@code\n",
        "388": "   * public static final ImmutableSortedMultiset<Bean> BEANS =\n",
        "389": "   *     new ImmutableSortedMultiset.Builder<Bean>(colorComparator())\n",
        "390": "   *         .addCopies(Bean.COCOA, 4)\n",
        "391": "   *         .addCopies(Bean.GARDEN, 6)\n",
        "392": "   *         .addCopies(Bean.RED, 8)\n",
        "393": "   *         .addCopies(Bean.BLACK_EYED, 10)\n",
        "394": "   *         .build();\n",
        "395": "   * }</pre>\n",
        "411": "    @VisibleForTesting E[] elements;\n",
        "425": "     * Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n",
        "426": "     * ImmutableSortedMultiset#orderedBy(Comparator)}.\n",
        "436": "    /** Check if we need to do deduplication and coalescing, and if so, do it. */\n",
        "469": "        int index = Arrays.binarySearch(sortedElements, 0, uniques, elements[i], comparator);\n",
        "500": "     *     case no change will be made.\n",
        "504": "     *     would result in more than {@link Integer#MAX_VALUE} occurrences of the element\n",
        "625": "          (RegularImmutableSortedSet<E>) ImmutableSortedSet.construct(comparator, length, elements);\n"
    },
    "removed": {
        "44": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\">\n",
        "45": " * immutable collections</a>.\n",
        "55": "  /**\n",
        "56": "   * Returns the empty immutable sorted multiset.\n",
        "57": "   */\n",
        "63": "  /**\n",
        "64": "   * Returns an immutable sorted multiset containing a single element.\n",
        "65": "   */\n",
        "147": "   * ordering. To create a copy of a {@code SortedMultiset} that preserves the\n",
        "148": "   * comparator, call {@link #copyOfSorted} instead. This method iterates over {@code elements} at\n",
        "149": "   * most once.\n",
        "234": "   * the same {@code Comparator}. That behavior differs from {@link #copyOf(Iterable)}, which\n",
        "235": "   * always uses the natural ordering of the elements.\n",
        "290": "  @LazyInit\n",
        "291": "  transient ImmutableSortedMultiset<E> descendingMultiset;\n",
        "355": "   * SortedMultiset<Integer>} with a {@code Comparator<Number>}, use the {@link Builder}\n",
        "356": "   * constructor instead.\n",
        "394": "   * <pre> {@code\n",
        "395": "   *\n",
        "396": "   *   public static final ImmutableSortedMultiset<Bean> BEANS =\n",
        "397": "   *       new ImmutableSortedMultiset.Builder<Bean>(colorComparator())\n",
        "398": "   *           .addCopies(Bean.COCOA, 4)\n",
        "399": "   *           .addCopies(Bean.GARDEN, 6)\n",
        "400": "   *           .addCopies(Bean.RED, 8)\n",
        "401": "   *           .addCopies(Bean.BLACK_EYED, 10)\n",
        "402": "   *           .build();}</pre>\n",
        "418": "    @VisibleForTesting\n",
        "419": "    E[] elements;\n",
        "433": "     * Creates a new builder. The returned builder is equivalent to the builder generated by\n",
        "434": "     * {@link ImmutableSortedMultiset#orderedBy(Comparator)}.\n",
        "444": "    /**\n",
        "445": "     * Check if we need to do deduplication and coalescing, and if so, do it.\n",
        "446": "     */\n",
        "479": "        int index =\n",
        "480": "            Arrays.binarySearch(sortedElements, 0, uniques, elements[i], comparator);\n",
        "511": "     *        case no change will be made.\n",
        "515": "     *         would result in more than {@link Integer#MAX_VALUE} occurrences of the element\n",
        "636": "          (RegularImmutableSortedSet<E>)\n",
        "637": "              ImmutableSortedSet.construct(comparator, length, elements);\n"
    }
}