{
    "addition": {
        "44": "    final MockReference reference = new MockReference(frq = new FinalizableReferenceQueue());\n",
        "46": "    GcFinalization.awaitDone(\n",
        "47": "        new GcFinalization.FinalizationPredicate() {\n",
        "48": "          public boolean isDone() {\n",
        "49": "            return reference.finalizeReferentCalled;\n",
        "50": "          }\n",
        "51": "        });\n",
        "69": "   * Keeps a weak reference to the underlying reference queue. When this reference is cleared, we\n",
        "70": "   * know that the background thread has stopped and released its strong reference.\n",
        "79": "  /** If we don't keep a strong reference to the reference object, it won't be enqueued. */\n",
        "82": "  /** Create the FRQ in a method that goes out of scope so that we're sure it will be reclaimed. */\n",
        "92": "    reference =\n",
        "93": "        new FinalizableWeakReference<Object>(new Object(), frq) {\n",
        "94": "          @Override\n",
        "95": "          public void finalizeReferent() {\n",
        "96": "            reference = null;\n",
        "97": "            frq = null;\n",
        "98": "          }\n",
        "99": "        };\n",
        "108": "            return new DecoupledClassLoader(new URL[] {base});\n"
    },
    "removed": {
        "44": "    final MockReference reference = new MockReference(\n",
        "45": "        frq = new FinalizableReferenceQueue());\n",
        "47": "    GcFinalization.awaitDone(new GcFinalization.FinalizationPredicate() {\n",
        "48": "        public boolean isDone() {\n",
        "49": "          return reference.finalizeReferentCalled;\n",
        "50": "        }\n",
        "51": "      });\n",
        "69": "   * Keeps a weak reference to the underlying reference queue. When this\n",
        "70": "   * reference is cleared, we know that the background thread has stopped\n",
        "71": "   * and released its strong reference.\n",
        "80": "  /**\n",
        "81": "   * If we don't keep a strong reference to the reference object, it won't\n",
        "82": "   * be enqueued.\n",
        "83": "   */\n",
        "86": "  /**\n",
        "87": "   * Create the FRQ in a method that goes out of scope so that we're sure\n",
        "88": "   * it will be reclaimed.\n",
        "89": "   */\n",
        "99": "    reference = new FinalizableWeakReference<Object>(new Object(), frq) {\n",
        "100": "      @Override\n",
        "101": "      public void finalizeReferent() {\n",
        "102": "        reference = null;\n",
        "103": "        frq = null;\n",
        "104": "      }\n",
        "105": "    };\n",
        "114": "            return new DecoupledClassLoader(new URL[] { base });\n"
    }
}