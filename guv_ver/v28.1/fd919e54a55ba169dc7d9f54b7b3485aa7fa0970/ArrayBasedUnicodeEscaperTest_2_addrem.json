{
    "addition": {
        "25": "/** @author David Beaumont */\n",
        "39": "    UnicodeEscaper escaper =\n",
        "40": "        new ArrayBasedUnicodeEscaper(\n",
        "41": "            SIMPLE_REPLACEMENTS, Character.MIN_VALUE, Character.MAX_CODE_POINT, null) {\n",
        "42": "          @Override\n",
        "43": "          protected char[] escapeUnsafe(int c) {\n",
        "46": "        };\n",
        "48": "    assertEquals(\"<tab>Fish <and> Chips<newline>\", escaper.escape(\"\\tFish & Chips\\n\"));\n",
        "68": "          @Override\n",
        "69": "          protected char[] escapeUnsafe(int c) {\n",
        "81": "          @Override\n",
        "82": "          protected char[] escapeUnsafe(int c) {\n",
        "87": "    assertEquals(\n",
        "88": "        \"Everything outside the printable ASCII range is deleted.\",\n",
        "89": "        deletingEscaper.escape(\n",
        "90": "            \"\\tEverything\\0 outside the\\uD800\\uDC00 \"\n",
        "91": "                + \"printable ASCII \\uFFFFrange is \\u007Fdeleted.\\n\"));\n",
        "97": "          private final char[] unknown = new char[] {'?'};\n",
        "98": "\n",
        "99": "          @Override\n",
        "100": "          protected char[] escapeUnsafe(int c) {\n",
        "108": "    assertEquals(\n",
        "109": "        \"<tab>Fish <and>? Chips?<newline>\", replacingEscaper.escape(\"\\tFish &\\0 Chips\\r\\n\"));\n",
        "115": "          private final char[] escaped = new char[] {'X'};\n",
        "116": "\n",
        "117": "          @Override\n",
        "118": "          protected char[] escapeUnsafe(int c) {\n",
        "125": "    String safeInput = \"\\uD800\\uDC00\"; // 0x10000\n",
        "131": "    String unsafeInput = \"\\uDBFF\\uDFFF\"; // 0x10FFFF\n"
    },
    "removed": {
        "25": "/**\n",
        "26": " * @author David Beaumont\n",
        "27": " */\n",
        "41": "    UnicodeEscaper escaper = new ArrayBasedUnicodeEscaper(SIMPLE_REPLACEMENTS,\n",
        "42": "        Character.MIN_VALUE, Character.MAX_CODE_POINT, null) {\n",
        "43": "          @Override protected char[] escapeUnsafe(int c) {\n",
        "46": "    };\n",
        "48": "    assertEquals(\"<tab>Fish <and> Chips<newline>\",\n",
        "49": "        escaper.escape(\"\\tFish & Chips\\n\"));\n",
        "69": "          @Override protected char[] escapeUnsafe(int c) {\n",
        "81": "          @Override protected char[] escapeUnsafe(int c) {\n",
        "86": "    assertEquals(\"Everything outside the printable ASCII range is deleted.\",\n",
        "87": "        deletingEscaper.escape(\"\\tEverything\\0 outside the\\uD800\\uDC00 \" +\n",
        "88": "            \"printable ASCII \\uFFFFrange is \\u007Fdeleted.\\n\"));\n",
        "94": "          private final char[] unknown = new char[] { '?' };\n",
        "95": "          @Override protected char[] escapeUnsafe(int c) {\n",
        "103": "    assertEquals(\"<tab>Fish <and>? Chips?<newline>\",\n",
        "104": "        replacingEscaper.escape(\"\\tFish &\\0 Chips\\r\\n\"));\n",
        "110": "          private final char[] escaped = new char[] { 'X' };\n",
        "111": "          @Override protected char[] escapeUnsafe(int c) {\n",
        "118": "    String safeInput = \"\\uD800\\uDC00\";  // 0x10000\n",
        "124": "    String unsafeInput = \"\\uDBFF\\uDFFF\";  // 0x10FFFF\n"
    }
}