{
    "addition": {
        "61": "    suite.addTest(\n",
        "62": "        MultisetTestSuiteBuilder.using(\n",
        "63": "                new TestStringMultisetGenerator() {\n",
        "64": "                  @Override\n",
        "65": "                  protected Multiset<String> create(String[] elements) {\n",
        "66": "                    return ImmutableMultiset.copyOf(elements);\n",
        "67": "                  }\n",
        "68": "                })\n",
        "69": "            .named(\"ImmutableMultiset\")\n",
        "70": "            .withFeatures(\n",
        "71": "                CollectionSize.ANY,\n",
        "72": "                CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "73": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "74": "            .createTestSuite());\n",
        "75": "\n",
        "76": "    suite.addTest(\n",
        "77": "        SetTestSuiteBuilder.using(\n",
        "78": "                new TestStringSetGenerator() {\n",
        "79": "                  @Override\n",
        "80": "                  protected Set<String> create(String[] elements) {\n",
        "81": "                    return ImmutableMultiset.copyOf(elements).elementSet();\n",
        "82": "                  }\n",
        "83": "                })\n",
        "84": "            .named(\"ImmutableMultiset, element set\")\n",
        "85": "            .withFeatures(\n",
        "86": "                CollectionSize.ANY,\n",
        "87": "                CollectionFeature.SERIALIZABLE,\n",
        "88": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "89": "            .createTestSuite());\n",
        "174": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"c\", \"d\", \"e\")), multiset);\n",
        "178": "    Multiset<String> multiset = ImmutableMultiset.of(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\");\n",
        "179": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")), multiset);\n",
        "183": "    Multiset<String> multiset = ImmutableMultiset.of(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\");\n",
        "184": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")), multiset);\n",
        "194": "    String[] array = new String[] {\"a\"};\n",
        "200": "    String[] array = new String[] {\"a\"};\n",
        "208": "    String[] array = new String[] {null};\n",
        "212": "    } catch (NullPointerException expected) {\n",
        "213": "    }\n",
        "240": "    } catch (NullPointerException expected) {\n",
        "241": "    }\n",
        "267": "    } catch (NullPointerException expected) {\n",
        "268": "    }\n",
        "294": "    } catch (NullPointerException expected) {\n",
        "295": "    }\n",
        "331": "    ImmutableMultiset<String> multiset =\n",
        "332": "        new ImmutableMultiset.Builder<String>().add(\"a\").add(\"b\").add(\"a\").add(\"c\").build();\n",
        "339": "    ImmutableMultiset<String> multiset =\n",
        "340": "        new ImmutableMultiset.Builder<String>().addAll(a).addAll(b).build();\n",
        "347": "    ImmutableMultiset<String> multiset =\n",
        "348": "        new ImmutableMultiset.Builder<String>().addAll(a).addAll(b).build();\n",
        "349": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"b\", \"b\", \"c\")), multiset);\n",
        "354": "    ImmutableMultiset<String> multiset =\n",
        "355": "        new ImmutableMultiset.Builder<String>().addAll(iterator).build();\n",
        "360": "    ImmutableMultiset<String> multiset =\n",
        "361": "        new ImmutableMultiset.Builder<String>()\n",
        "362": "            .addCopies(\"a\", 2)\n",
        "363": "            .addCopies(\"b\", 3)\n",
        "364": "            .addCopies(\"c\", 0)\n",
        "365": "            .build();\n",
        "366": "    assertEquals(HashMultiset.create(asList(\"a\", \"a\", \"b\", \"b\", \"b\")), multiset);\n",
        "370": "    ImmutableMultiset<String> multiset =\n",
        "371": "        new ImmutableMultiset.Builder<String>().add(\"a\").setCount(\"a\", 2).setCount(\"b\", 3).build();\n",
        "372": "    assertEquals(HashMultiset.create(asList(\"a\", \"a\", \"b\", \"b\", \"b\")), multiset);\n",
        "380": "    } catch (NullPointerException expected) {\n",
        "381": "    }\n",
        "389": "    } catch (NullPointerException expected) {\n",
        "390": "    }\n",
        "397": "    } catch (NullPointerException expected) {\n",
        "398": "    }\n",
        "401": "    Multiset<String> multisetWithNull = LinkedHashMultiset.create(asList(\"a\", null, \"b\"));\n",
        "405": "    } catch (NullPointerException expected) {\n",
        "406": "    }\n",
        "414": "    } catch (NullPointerException expected) {\n",
        "415": "    }\n",
        "423": "    } catch (IllegalArgumentException expected) {\n",
        "424": "    }\n",
        "432": "    } catch (NullPointerException expected) {\n",
        "433": "    }\n",
        "441": "    } catch (IllegalArgumentException expected) {\n",
        "442": "    }\n",
        "467": "    Collection<String> copy = LenientSerializableTester.reserializeAndAssertLenient(c.elementSet());\n",
        "499": "    ImmutableMultiset<String> multiset = ImmutableMultiset.of(\"a\", \"a\", \"b\", \"b\", \"b\");\n",
        "508": "    ImmutableMultiset<String> multiset = ImmutableMultiset.of(\"a\", \"a\", \"b\", \"b\", \"b\");\n"
    },
    "removed": {
        "61": "    suite.addTest(MultisetTestSuiteBuilder.using(\n",
        "62": "        new TestStringMultisetGenerator() {\n",
        "63": "          @Override protected Multiset<String> create(String[] elements) {\n",
        "64": "            return ImmutableMultiset.copyOf(elements);\n",
        "65": "          }\n",
        "66": "        })\n",
        "67": "        .named(\"ImmutableMultiset\")\n",
        "68": "        .withFeatures(CollectionSize.ANY,\n",
        "69": "            CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "70": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "71": "        .createTestSuite());\n",
        "72": "\n",
        "73": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "74": "          @Override protected Set<String> create(String[] elements) {\n",
        "75": "            return ImmutableMultiset.copyOf(elements).elementSet();\n",
        "76": "          }\n",
        "77": "        })\n",
        "78": "        .named(\"ImmutableMultiset, element set\")\n",
        "79": "        .withFeatures(CollectionSize.ANY,\n",
        "80": "            CollectionFeature.SERIALIZABLE,\n",
        "81": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "82": "        .createTestSuite());\n",
        "167": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"c\", \"d\", \"e\")),\n",
        "168": "        multiset);\n",
        "172": "    Multiset<String> multiset = ImmutableMultiset.of(\n",
        "173": "        \"a\", \"b\", \"c\", \"d\", \"e\", \"f\");\n",
        "174": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")),\n",
        "175": "        multiset);\n",
        "179": "    Multiset<String> multiset = ImmutableMultiset.of(\n",
        "180": "        \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\");\n",
        "181": "    assertEquals(\n",
        "182": "        HashMultiset.create(asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")),\n",
        "183": "        multiset);\n",
        "193": "    String[] array = new String[] { \"a\" };\n",
        "199": "    String[] array = new String[] { \"a\" };\n",
        "207": "    String[] array = new String[] { null };\n",
        "211": "    } catch (NullPointerException expected) {}\n",
        "238": "    } catch (NullPointerException expected) {}\n",
        "264": "    } catch (NullPointerException expected) {}\n",
        "290": "    } catch (NullPointerException expected) {}\n",
        "325": "    ImmutableMultiset<String> multiset = new ImmutableMultiset.Builder<String>()\n",
        "326": "        .add(\"a\")\n",
        "327": "        .add(\"b\")\n",
        "328": "        .add(\"a\")\n",
        "329": "        .add(\"c\")\n",
        "330": "        .build();\n",
        "337": "    ImmutableMultiset<String> multiset = new ImmutableMultiset.Builder<String>()\n",
        "338": "        .addAll(a)\n",
        "339": "        .addAll(b)\n",
        "340": "        .build();\n",
        "347": "    ImmutableMultiset<String> multiset = new ImmutableMultiset.Builder<String>()\n",
        "348": "        .addAll(a)\n",
        "349": "        .addAll(b)\n",
        "350": "        .build();\n",
        "351": "    assertEquals(\n",
        "352": "        HashMultiset.create(asList(\"a\", \"b\", \"b\", \"b\", \"c\")), multiset);\n",
        "357": "    ImmutableMultiset<String> multiset = new ImmutableMultiset.Builder<String>()\n",
        "358": "        .addAll(iterator)\n",
        "359": "        .build();\n",
        "364": "    ImmutableMultiset<String> multiset = new ImmutableMultiset.Builder<String>()\n",
        "365": "        .addCopies(\"a\", 2)\n",
        "366": "        .addCopies(\"b\", 3)\n",
        "367": "        .addCopies(\"c\", 0)\n",
        "368": "        .build();\n",
        "369": "    assertEquals(\n",
        "370": "        HashMultiset.create(asList(\"a\", \"a\", \"b\", \"b\", \"b\")), multiset);\n",
        "374": "    ImmutableMultiset<String> multiset = new ImmutableMultiset.Builder<String>()\n",
        "375": "        .add(\"a\")\n",
        "376": "        .setCount(\"a\", 2)\n",
        "377": "        .setCount(\"b\", 3)\n",
        "378": "        .build();\n",
        "379": "    assertEquals(\n",
        "380": "        HashMultiset.create(asList(\"a\", \"a\", \"b\", \"b\", \"b\")), multiset);\n",
        "388": "    } catch (NullPointerException expected) {}\n",
        "396": "    } catch (NullPointerException expected) {}\n",
        "403": "    } catch (NullPointerException expected) {}\n",
        "406": "    Multiset<String> multisetWithNull\n",
        "407": "        = LinkedHashMultiset.create(asList(\"a\", null, \"b\"));\n",
        "411": "    } catch (NullPointerException expected) {}\n",
        "419": "    } catch (NullPointerException expected) {}\n",
        "427": "    } catch (IllegalArgumentException expected) {}\n",
        "435": "    } catch (NullPointerException expected) {}\n",
        "443": "    } catch (IllegalArgumentException expected) {}\n",
        "468": "    Collection<String> copy =\n",
        "469": "        LenientSerializableTester.reserializeAndAssertLenient(c.elementSet());\n",
        "501": "    ImmutableMultiset<String> multiset\n",
        "502": "        = ImmutableMultiset.of(\"a\", \"a\", \"b\", \"b\", \"b\");\n",
        "511": "    ImmutableMultiset<String> multiset\n",
        "512": "        = ImmutableMultiset.of(\"a\", \"a\", \"b\", \"b\", \"b\");\n"
    }
}