{
    "addition": {
        "16": "/** Unit test for {@link AtomicDouble}. */\n",
        "46": "    assertEquals(Double.doubleToRawLongBits(x), Double.doubleToRawLongBits(y));\n",
        "49": "  /** constructor initializes to given value */\n",
        "57": "  /** default constructed initializes to zero */\n",
        "63": "  /** get returns the last value set */\n",
        "73": "  /** get returns the last value lazySet in same thread */\n",
        "83": "  /** compareAndSet succeeds in changing value if equal to expected else fails */\n",
        "98": "  /** compareAndSet in one thread enables another waiting for value to succeed */\n",
        "100": "  public void testCompareAndSetInMultipleThreads() throws Exception {\n",
        "102": "    Thread t =\n",
        "103": "        newStartedThread(\n",
        "104": "            new CheckedRunnable() {\n",
        "105": "              public void realRun() {\n",
        "106": "                while (!at.compareAndSet(2.0, 3.0)) {\n",
        "107": "                  Thread.yield();\n",
        "108": "                }\n",
        "109": "              }\n",
        "110": "            });\n",
        "117": "  /** repeated weakCompareAndSet succeeds in changing value when equal to expected */\n",
        "126": "      while (!at.weakCompareAndSet(prev, x)) {;\n",
        "133": "  /** getAndSet returns previous value and sets to given value */\n",
        "143": "  /** getAndAdd returns previous value and adds given value */\n",
        "155": "  /** addAndGet adds given value to current, and returns current value */\n",
        "167": "  /** a deserialized serialized atomic holds same value */\n",
        "184": "  /** toString returns current value */\n",
        "194": "  /** intValue returns current value. */\n",
        "204": "  /** longValue returns current value. */\n",
        "214": "  /** floatValue returns current value. */\n",
        "224": "  /** doubleValue returns current value. */\n",
        "234": "  /** compareAndSet treats +0.0 and -0.0 as distinct values */\n"
    },
    "removed": {
        "16": "/**\n",
        "17": " * Unit test for {@link AtomicDouble}.\n",
        "18": " */\n",
        "48": "    assertEquals(Double.doubleToRawLongBits(x),\n",
        "49": "                 Double.doubleToRawLongBits(y));\n",
        "52": "  /**\n",
        "53": "   * constructor initializes to given value\n",
        "54": "   */\n",
        "62": "  /**\n",
        "63": "   * default constructed initializes to zero\n",
        "64": "   */\n",
        "70": "  /**\n",
        "71": "   * get returns the last value set\n",
        "72": "   */\n",
        "82": "  /**\n",
        "83": "   * get returns the last value lazySet in same thread\n",
        "84": "   */\n",
        "94": "  /**\n",
        "95": "   * compareAndSet succeeds in changing value if equal to expected else fails\n",
        "96": "   */\n",
        "111": "  /**\n",
        "112": "   * compareAndSet in one thread enables another waiting for value\n",
        "113": "   * to succeed\n",
        "114": "   */\n",
        "116": "      public void testCompareAndSetInMultipleThreads() throws Exception {\n",
        "118": "    Thread t = newStartedThread(new CheckedRunnable() {\n",
        "119": "        public void realRun() {\n",
        "120": "          while (!at.compareAndSet(2.0, 3.0)) {\n",
        "121": "            Thread.yield();\n",
        "122": "          }\n",
        "123": "        }});\n",
        "130": "  /**\n",
        "131": "   * repeated weakCompareAndSet succeeds in changing value when equal\n",
        "132": "   * to expected\n",
        "133": "   */\n",
        "142": "      while (!at.weakCompareAndSet(prev, x)) {\n",
        "143": "        ;\n",
        "150": "  /**\n",
        "151": "   * getAndSet returns previous value and sets to given value\n",
        "152": "   */\n",
        "162": "  /**\n",
        "163": "   * getAndAdd returns previous value and adds given value\n",
        "164": "   */\n",
        "176": "  /**\n",
        "177": "   * addAndGet adds given value to current, and returns current value\n",
        "178": "   */\n",
        "190": "  /**\n",
        "191": "   * a deserialized serialized atomic holds same value\n",
        "192": "   */\n",
        "209": "  /**\n",
        "210": "   * toString returns current value\n",
        "211": "   */\n",
        "221": "  /**\n",
        "222": "   * intValue returns current value.\n",
        "223": "   */\n",
        "233": "  /**\n",
        "234": "   * longValue returns current value.\n",
        "235": "   */\n",
        "245": "  /**\n",
        "246": "   * floatValue returns current value.\n",
        "247": "   */\n",
        "257": "  /**\n",
        "258": "   * doubleValue returns current value.\n",
        "259": "   */\n",
        "269": "  /**\n",
        "270": "   * compareAndSet treats +0.0 and -0.0 as distinct values\n",
        "271": "   */\n"
    }
}