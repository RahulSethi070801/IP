{
    "addition": {
        "48": "  /** Invokes {@code latch.}{@link CountDownLatch#await() await()} uninterruptibly. */\n",
        "96": "  /** Invokes {@code toJoin.}{@link Thread#join() join()} uninterruptibly. */\n",
        "122": "   *   <li>To retrieve a result from a {@code Future} that is already done, use {@link\n",
        "123": "   *       Futures#getDone Futures.getDone}.\n",
        "124": "   *   <li>To treat {@link InterruptedException} uniformly with other exceptions, use {@link\n",
        "125": "   *       Futures#getChecked(Future, Class) Futures.getChecked}.\n",
        "126": "   *   <li>To get uninterruptibility and remove checked exceptions, use {@link\n",
        "127": "   *       Futures#getUnchecked}.\n",
        "157": "   *   <li>To retrieve a result from a {@code Future} that is already done, use {@link\n",
        "158": "   *       Futures#getDone Futures.getDone}.\n",
        "159": "   *   <li>To treat {@link InterruptedException} uniformly with other exceptions, use {@link\n",
        "160": "   *       Futures#getChecked(Future, Class, long, TimeUnit) Futures.getChecked}.\n",
        "161": "   *   <li>To get uninterruptibility and remove checked exceptions, use {@link\n",
        "162": "   *       Futures#getUnchecked}.\n",
        "222": "  /** Invokes {@code queue.}{@link BlockingQueue#take() take()} uninterruptibly. */\n",
        "269": "  /** Invokes {@code unit.}{@link TimeUnit#sleep(long) sleep(sleepFor)} uninterruptibly. */\n"
    },
    "removed": {
        "48": "  /**\n",
        "49": "   * Invokes {@code latch.}{@link CountDownLatch#await() await()} uninterruptibly.\n",
        "50": "   */\n",
        "98": "  /**\n",
        "99": "   * Invokes {@code toJoin.}{@link Thread#join() join()} uninterruptibly.\n",
        "100": "   */\n",
        "126": "   * <li>To retrieve a result from a {@code Future} that is already done, use\n",
        "127": "   *     {@link Futures#getDone Futures.getDone}.\n",
        "128": "   * <li>To treat {@link InterruptedException} uniformly with other exceptions, use\n",
        "129": "   *     {@link Futures#getChecked(Future, Class) Futures.getChecked}.\n",
        "130": "   * <li>To get uninterruptibility and remove checked exceptions, use {@link Futures#getUnchecked}.\n",
        "160": "   * <li>To retrieve a result from a {@code Future} that is already done, use\n",
        "161": "   *     {@link Futures#getDone Futures.getDone}.\n",
        "162": "   * <li>To treat {@link InterruptedException} uniformly with other exceptions, use\n",
        "163": "   *     {@link Futures#getChecked(Future, Class, long, TimeUnit) Futures.getChecked}.\n",
        "164": "   * <li>To get uninterruptibility and remove checked exceptions, use {@link Futures#getUnchecked}.\n",
        "224": "  /**\n",
        "225": "   * Invokes {@code queue.}{@link BlockingQueue#take() take()} uninterruptibly.\n",
        "226": "   */\n",
        "273": "  /**\n",
        "274": "   * Invokes {@code unit.}{@link TimeUnit#sleep(long) sleep(sleepFor)} uninterruptibly.\n",
        "275": "   */\n"
    }
}