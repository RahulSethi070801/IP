{
    "addition": {
        "45": " * A readable source of characters, such as a text file. Unlike a {@link Reader}, a {@code\n",
        "46": " * CharSource} is not an open, stateful stream of characters that can be read and closed. Instead,\n",
        "47": " * it is an immutable <i>supplier</i> of {@code Reader} instances.\n",
        "50": " *\n",
        "52": " *   <li><b>Methods that return a reader:</b> These methods should return a <i>new</i>, independent\n",
        "53": " *       instance each time they are called. The caller is responsible for ensuring that the\n",
        "54": " *       returned reader is closed.\n",
        "55": " *   <li><b>Convenience methods:</b> These are implementations of common operations that are\n",
        "56": " *       typically implemented by opening a reader using one of the methods in the first category,\n",
        "57": " *       doing something and finally closing the reader that was opened.\n",
        "61": " * into lines. Like {@link BufferedReader}, these methods break lines on any of {@code \\n}, {@code\n",
        "62": " * \\r} or {@code \\r\\n}, do not include the line separator in each line and do not consider there to\n",
        "63": " * be an empty line at the end if the contents are terminated with a line separator.\n",
        "74": "  /** Constructor for use by subclasses. */\n",
        "127": "   * text that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or {@code\n",
        "128": "   * \\n}. If the source's content does not end in a line termination sequence, it is treated as if\n",
        "129": "   * it does.\n",
        "148": "    return reader\n",
        "149": "        .lines()\n",
        "150": "        .onClose(\n",
        "151": "            () -> {\n",
        "152": "              try {\n",
        "153": "                reader.close();\n",
        "154": "              } catch (IOException e) {\n",
        "155": "                throw new UncheckedIOException(e);\n",
        "156": "              }\n",
        "157": "            });\n",
        "164": "   * <p>The default implementation returns {@link Optional#absent}. Some sources, such as a {@code\n",
        "165": "   * CharSequence}, may return a non-absent value. Note that in such cases, it is <i>possible</i>\n",
        "166": "   * that this method will return a different number of chars than would be returned by reading all\n",
        "167": "   * of the chars.\n",
        "184": "   * absent, it will fall back to a heavyweight operation that will open a stream, {@link\n",
        "185": "   * Reader#skip(long) skip} to the end of the stream, and return the total number of chars that\n",
        "186": "   * were skipped.\n",
        "230": "   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code\n",
        "231": "   *     appendable}\n",
        "252": "   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code\n",
        "253": "   *     sink}\n",
        "292": "   * text that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or {@code\n",
        "293": "   * \\n}. If the source's content does not end in a line termination sequence, it is treated as if\n",
        "294": "   * it does.\n",
        "316": "   * text that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or {@code\n",
        "317": "   * \\n}. If the source's content does not end in a line termination sequence, it is treated as if\n",
        "318": "   * it does.\n",
        "340": "   * Reads lines of text from this source, processing each line as it is read using the given {@link\n",
        "341": "   * LineProcessor processor}. Stops when all lines have been processed or the processor returns\n",
        "342": "   * {@code false} and returns the result produced by the processor.\n",
        "345": "   * text that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or {@code\n",
        "346": "   * \\n}. If the source's content does not end in a line termination sequence, it is treated as if\n",
        "347": "   * it does.\n",
        "349": "   * @throws IOException if an I/O error occurs while reading from this source or if {@code\n",
        "350": "   *     processor} throws an {@code IOException}\n",
        "370": "   * Reads all lines of text from this source, running the given {@code action} for each line as it\n",
        "371": "   * is read.\n",
        "374": "   * text that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or {@code\n",
        "375": "   * \\n}. If the source's content does not end in a line termination sequence, it is treated as if\n",
        "376": "   * it does.\n",
        "378": "   * @throws IOException if an I/O error occurs while reading from this source or if {@code action}\n",
        "379": "   *     throws an {@code UncheckedIOException}\n",
        "393": "   * Returns whether the source has zero chars. The default implementation first checks {@link\n",
        "394": "   * #lengthIfKnown}, returning true if it's known to be zero and false if it's known to be\n",
        "495": "  /** A byte source that reads chars from this source and encodes them as bytes using a charset. */\n"
    },
    "removed": {
        "45": " * A readable source of characters, such as a text file. Unlike a {@link Reader}, a\n",
        "46": " * {@code CharSource} is not an open, stateful stream of characters that can be read and closed.\n",
        "47": " * Instead, it is an immutable <i>supplier</i> of {@code Reader} instances.\n",
        "51": " * <li><b>Methods that return a reader:</b> These methods should return a <i>new</i>, independent\n",
        "52": " *     instance each time they are called. The caller is responsible for ensuring that the returned\n",
        "53": " *     reader is closed.\n",
        "54": " * <li><b>Convenience methods:</b> These are implementations of common operations that are typically\n",
        "55": " *     implemented by opening a reader using one of the methods in the first category, doing\n",
        "56": " *     something and finally closing the reader that was opened.\n",
        "60": " * into lines. Like {@link BufferedReader}, these methods break lines on any of {@code \\n},\n",
        "61": " * {@code \\r} or {@code \\r\\n}, do not include the line separator in each line and do not consider\n",
        "62": " * there to be an empty line at the end if the contents are terminated with a line separator.\n",
        "73": "  /**\n",
        "74": "   * Constructor for use by subclasses.\n",
        "75": "   */\n",
        "128": "   * text that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or\n",
        "129": "   * {@code \\n}. If the source's content does not end in a line termination sequence, it is treated\n",
        "130": "   * as if it does.\n",
        "149": "    return reader.lines().onClose(() -> {\n",
        "150": "      try {\n",
        "151": "        reader.close();\n",
        "152": "      } catch (IOException e) {\n",
        "153": "        throw new UncheckedIOException(e);\n",
        "154": "      }\n",
        "155": "    });\n",
        "162": "   * <p>The default implementation returns {@link Optional#absent}. Some sources, such as a\n",
        "163": "   * {@code CharSequence}, may return a non-absent value. Note that in such cases, it is\n",
        "164": "   * <i>possible</i> that this method will return a different number of chars than would be returned\n",
        "165": "   * by reading all of the chars.\n",
        "182": "   * absent, it will fall back to a heavyweight operation that will open a stream,\n",
        "183": "   * {@link Reader#skip(long) skip} to the end of the stream, and return the total number of chars\n",
        "184": "   * that were skipped.\n",
        "228": "   * @throws IOException if an I/O error occurs while reading from this source or writing to\n",
        "229": "   *     {@code appendable}\n",
        "250": "   * @throws IOException if an I/O error occurs while reading from this source or writing to\n",
        "251": "   *     {@code sink}\n",
        "290": "   * text that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or\n",
        "291": "   * {@code \\n}. If the source's content does not end in a line termination sequence, it is treated\n",
        "292": "   * as if it does.\n",
        "314": "   * text that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or\n",
        "315": "   * {@code \\n}. If the source's content does not end in a line termination sequence, it is treated\n",
        "316": "   * as if it does.\n",
        "338": "   * Reads lines of text from this source, processing each line as it is read using the given\n",
        "339": "   * {@link LineProcessor processor}. Stops when all lines have been processed or the processor\n",
        "340": "   * returns {@code false} and returns the result produced by the processor.\n",
        "343": "   * text that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or\n",
        "344": "   * {@code \\n}. If the source's content does not end in a line termination sequence, it is treated\n",
        "345": "   * as if it does.\n",
        "347": "   * @throws IOException if an I/O error occurs while reading from this source or if\n",
        "348": "   *     {@code processor} throws an {@code IOException}\n",
        "368": "   * Reads all lines of text from this source, running the given {@code action} for each line as\n",
        "369": "   * it is read.\n",
        "372": "   * text that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or\n",
        "373": "   * {@code \\n}. If the source's content does not end in a line termination sequence, it is treated\n",
        "374": "   * as if it does.\n",
        "376": "   * @throws IOException if an I/O error occurs while reading from this source or if\n",
        "377": "   *     {@code action} throws an {@code UncheckedIOException}\n",
        "391": "   * Returns whether the source has zero chars. The default implementation first checks\n",
        "392": "   * {@link #lengthIfKnown}, returning true if it's known to be zero and false if it's known to be\n",
        "493": "  /**\n",
        "494": "   * A byte source that reads chars from this source and encodes them as bytes using a charset.\n",
        "495": "   */\n"
    }
}