{
    "addition": {
        "43": "      @Override\n",
        "44": "      protected void startUp() throws Exception {}\n",
        "45": "\n",
        "46": "      @Override\n",
        "47": "      protected void shutDown() throws Exception {}\n",
        "60": "      AbstractIdleService service =\n",
        "61": "          new DefaultService() {\n",
        "62": "            @Override\n",
        "63": "            protected void startUp() throws Exception {\n",
        "64": "              throw exception;\n",
        "65": "            }\n",
        "66": "          };\n",
        "78": "      AbstractIdleService service =\n",
        "79": "          new DefaultService() {\n",
        "80": "            @Override\n",
        "81": "            protected void shutDown() throws Exception {\n",
        "82": "              throw exception;\n",
        "83": "            }\n",
        "84": "          };\n",
        "107": "    TestService service =\n",
        "108": "        new TestService() {\n",
        "109": "          @Override\n",
        "110": "          protected void startUp() throws Exception {\n",
        "111": "            super.startUp();\n",
        "112": "            throw exception;\n",
        "113": "          }\n",
        "114": "        };\n",
        "146": "        .containsExactly(Service.State.STARTING, Service.State.STOPPING)\n",
        "147": "        .inOrder();\n",
        "152": "    TestService service =\n",
        "153": "        new TestService() {\n",
        "154": "          @Override\n",
        "155": "          protected void shutDown() throws Exception {\n",
        "156": "            super.shutDown();\n",
        "157": "            throw exception;\n",
        "158": "          }\n",
        "159": "        };\n",
        "173": "        .containsExactly(Service.State.STARTING, Service.State.STOPPING)\n",
        "174": "        .inOrder();\n",
        "188": "    Service service =\n",
        "189": "        new TestService() {\n",
        "190": "          @Override\n",
        "191": "          protected Executor executor() {\n",
        "192": "            return new Executor() {\n",
        "193": "              @Override\n",
        "194": "              public void execute(Runnable command) {}\n",
        "195": "            };\n",
        "196": "          }\n",
        "197": "\n",
        "198": "          @Override\n",
        "199": "          protected String serviceName() {\n",
        "200": "            return \"Foo\";\n",
        "201": "          }\n",
        "216": "    @Override\n",
        "217": "    protected void startUp() throws Exception {\n",
        "224": "    @Override\n",
        "225": "    protected void shutDown() throws Exception {\n",
        "232": "    @Override\n",
        "233": "    protected Executor executor() {\n"
    },
    "removed": {
        "43": "      @Override protected void startUp() throws Exception {}\n",
        "44": "      @Override protected void shutDown() throws Exception {}\n",
        "57": "      AbstractIdleService service = new DefaultService() {\n",
        "58": "        @Override protected void startUp() throws Exception {\n",
        "59": "          throw exception;\n",
        "60": "        }\n",
        "61": "      };\n",
        "73": "      AbstractIdleService service = new DefaultService() {\n",
        "74": "        @Override protected void shutDown() throws Exception {\n",
        "75": "          throw exception;\n",
        "76": "        }\n",
        "77": "      };\n",
        "100": "    TestService service = new TestService() {\n",
        "101": "      @Override protected void startUp() throws Exception {\n",
        "102": "        super.startUp();\n",
        "103": "        throw exception;\n",
        "104": "      }\n",
        "105": "    };\n",
        "137": "        .containsExactly(Service.State.STARTING, Service.State.STOPPING).inOrder();\n",
        "142": "    TestService service = new TestService() {\n",
        "143": "      @Override protected void shutDown() throws Exception {\n",
        "144": "        super.shutDown();\n",
        "145": "        throw exception;\n",
        "146": "      }\n",
        "147": "    };\n",
        "161": "        .containsExactly(Service.State.STARTING, Service.State.STOPPING).inOrder();\n",
        "175": "    Service service = new TestService() {\n",
        "176": "      @Override protected Executor executor() {\n",
        "177": "        return new Executor() {\n",
        "178": "          @Override public void execute(Runnable command) {}\n",
        "180": "      }\n",
        "181": "\n",
        "182": "      @Override protected String serviceName() {\n",
        "183": "        return \"Foo\";\n",
        "184": "      }\n",
        "185": "    };\n",
        "199": "    @Override protected void startUp() throws Exception {\n",
        "206": "    @Override protected void shutDown() throws Exception {\n",
        "213": "    @Override protected Executor executor() {\n"
    }
}