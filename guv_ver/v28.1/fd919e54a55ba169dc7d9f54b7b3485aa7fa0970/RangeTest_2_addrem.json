{
    "addition": {
        "303": "    assertTrue(Range.openClosed(3, 3).containsAll(Collections.<Integer>emptySet()));\n",
        "361": "    assertEquals(Range.openClosed(3, 3), range.intersection(Range.atMost(3)));\n",
        "362": "    assertEquals(Range.closedOpen(4, 4), range.intersection(Range.atLeast(4)));\n",
        "376": "    assertEquals(Range.openClosed(4, 4), range.intersection(Range.greaterThan(4)));\n",
        "388": "    assertEquals(Range.closedOpen(3, 3), range.intersection(Range.lessThan(3)));\n",
        "389": "    assertEquals(Range.openClosed(3, 3), range.intersection(Range.greaterThan(3)));\n",
        "414": "    assertEquals(Range.closedOpen(4, 4), range.intersection(Range.closedOpen(2, 4)));\n",
        "444": "    assertEquals(Range.openClosed(8, 8), range.intersection(Range.openClosed(8, 10)));\n",
        "516": "        .addEqualityGroup(Range.open(1, 5), Range.range(1, OPEN, 5, OPEN))\n",
        "524": "    Range<LegacyComparable> range = Range.closed(LegacyComparable.X, LegacyComparable.Y);\n",
        "529": "        @Override\n",
        "530": "        public Integer next(Integer value) {\n",
        "534": "        @Override\n",
        "535": "        public Integer previous(Integer value) {\n",
        "539": "        @Override\n",
        "540": "        public long distance(Integer start, Integer end) {\n",
        "546": "    assertEquals(Range.closedOpen(1, 5), Range.closed(1, 4).canonical(integers()));\n",
        "547": "    assertEquals(Range.closedOpen(1, 5), Range.open(0, 5).canonical(integers()));\n",
        "548": "    assertEquals(Range.closedOpen(1, 5), Range.closedOpen(1, 5).canonical(integers()));\n",
        "549": "    assertEquals(Range.closedOpen(1, 5), Range.openClosed(0, 4).canonical(integers()));\n",
        "550": "\n",
        "551": "    assertEquals(\n",
        "552": "        Range.closedOpen(Integer.MIN_VALUE, 0),\n",
        "555": "    assertEquals(Range.closedOpen(Integer.MIN_VALUE, 0), Range.lessThan(0).canonical(integers()));\n",
        "556": "    assertEquals(Range.closedOpen(Integer.MIN_VALUE, 1), Range.atMost(0).canonical(integers()));\n",
        "582": "    } catch (NoSuchElementException expected) {\n",
        "583": "    }\n",
        "591": "    } catch (NullPointerException expected) {\n",
        "592": "    }\n",
        "597": "    } catch (NullPointerException expected) {\n",
        "598": "    }\n",
        "604": "        .addEqualityGroup(Range.atLeast(1), Range.downTo(1, CLOSED))\n",
        "605": "        .addEqualityGroup(Range.greaterThan(1), Range.downTo(1, OPEN))\n",
        "606": "        .addEqualityGroup(Range.atMost(7), Range.upTo(7, CLOSED))\n",
        "607": "        .addEqualityGroup(Range.lessThan(7), Range.upTo(7, OPEN))\n",
        "608": "        .addEqualityGroup(Range.open(1, 7), Range.range(1, OPEN, 7, OPEN))\n",
        "609": "        .addEqualityGroup(Range.openClosed(1, 7), Range.range(1, OPEN, 7, CLOSED))\n",
        "610": "        .addEqualityGroup(Range.closed(1, 7), Range.range(1, CLOSED, 7, CLOSED))\n",
        "611": "        .addEqualityGroup(Range.closedOpen(1, 7), Range.range(1, CLOSED, 7, OPEN))\n"
    },
    "removed": {
        "303": "    assertTrue(Range.openClosed(3, 3).containsAll(\n",
        "304": "        Collections.<Integer>emptySet()));\n",
        "362": "    assertEquals(Range.openClosed(3, 3),\n",
        "363": "        range.intersection(Range.atMost(3)));\n",
        "364": "    assertEquals(Range.closedOpen(4, 4),\n",
        "365": "        range.intersection(Range.atLeast(4)));\n",
        "379": "    assertEquals(Range.openClosed(4, 4),\n",
        "380": "        range.intersection(Range.greaterThan(4)));\n",
        "392": "    assertEquals(Range.closedOpen(3, 3),\n",
        "393": "        range.intersection(Range.lessThan(3)));\n",
        "394": "    assertEquals(Range.openClosed(3, 3),\n",
        "395": "        range.intersection(Range.greaterThan(3)));\n",
        "420": "    assertEquals(Range.closedOpen(4, 4),\n",
        "421": "        range.intersection(Range.closedOpen(2, 4)));\n",
        "451": "    assertEquals(Range.openClosed(8, 8),\n",
        "452": "        range.intersection(Range.openClosed(8, 10)));\n",
        "524": "        .addEqualityGroup(Range.open(1, 5),\n",
        "525": "            Range.range(1, OPEN, 5, OPEN))\n",
        "533": "    Range<LegacyComparable> range\n",
        "534": "        = Range.closed(LegacyComparable.X, LegacyComparable.Y);\n",
        "539": "        @Override public Integer next(Integer value) {\n",
        "543": "        @Override public Integer previous(Integer value) {\n",
        "547": "        @Override public long distance(Integer start, Integer end) {\n",
        "553": "    assertEquals(Range.closedOpen(1, 5),\n",
        "554": "        Range.closed(1, 4).canonical(integers()));\n",
        "555": "    assertEquals(Range.closedOpen(1, 5),\n",
        "556": "        Range.open(0, 5).canonical(integers()));\n",
        "557": "    assertEquals(Range.closedOpen(1, 5),\n",
        "558": "        Range.closedOpen(1, 5).canonical(integers()));\n",
        "559": "    assertEquals(Range.closedOpen(1, 5),\n",
        "560": "        Range.openClosed(0, 4).canonical(integers()));\n",
        "561": "\n",
        "562": "    assertEquals(Range.closedOpen(Integer.MIN_VALUE, 0),\n",
        "565": "    assertEquals(Range.closedOpen(Integer.MIN_VALUE, 0),\n",
        "566": "        Range.lessThan(0).canonical(integers()));\n",
        "567": "    assertEquals(Range.closedOpen(Integer.MIN_VALUE, 1),\n",
        "568": "        Range.atMost(0).canonical(integers()));\n",
        "594": "    } catch (NoSuchElementException expected) {}\n",
        "602": "    } catch (NullPointerException expected) {}\n",
        "607": "    } catch (NullPointerException expected) {}\n",
        "613": "        .addEqualityGroup(\n",
        "614": "            Range.atLeast(1),\n",
        "615": "            Range.downTo(1, CLOSED))\n",
        "616": "        .addEqualityGroup(\n",
        "617": "            Range.greaterThan(1),\n",
        "618": "            Range.downTo(1, OPEN))\n",
        "619": "        .addEqualityGroup(\n",
        "620": "            Range.atMost(7),\n",
        "621": "            Range.upTo(7, CLOSED))\n",
        "622": "        .addEqualityGroup(\n",
        "623": "            Range.lessThan(7),\n",
        "624": "            Range.upTo(7, OPEN))\n",
        "625": "        .addEqualityGroup(\n",
        "626": "            Range.open(1, 7),\n",
        "627": "            Range.range(1, OPEN, 7, OPEN))\n",
        "628": "        .addEqualityGroup(\n",
        "629": "            Range.openClosed(1, 7),\n",
        "630": "            Range.range(1, OPEN, 7, CLOSED))\n",
        "631": "        .addEqualityGroup(\n",
        "632": "            Range.closed(1, 7),\n",
        "633": "            Range.range(1, CLOSED, 7, CLOSED))\n",
        "634": "        .addEqualityGroup(\n",
        "635": "            Range.closedOpen(1, 7),\n",
        "636": "            Range.range(1, CLOSED, 7, OPEN))\n"
    }
}