{
    "addition": {
        "33": " * them as a {@link String}. Example:\n",
        "35": " * <pre>{@code\n",
        "36": " * Joiner joiner = Joiner.on(\"; \").skipNulls();\n",
        "37": " *  . . .\n",
        "38": " * return joiner.join(\"Harry\", null, \"Ron\", \"Hermione\");\n",
        "39": " * }</pre>\n",
        "50": " * static final} constants.\n",
        "52": " * <pre>{@code\n",
        "53": " * // Bad! Do not do this!\n",
        "54": " * Joiner joiner = Joiner.on(',');\n",
        "55": " * joiner.skipNulls(); // does nothing!\n",
        "56": " * return joiner.join(\"wrong\", null, \"wrong\");\n",
        "57": " * }</pre>\n",
        "59": " * <p>See the Guava User Guide article on <a\n",
        "60": " * href=\"https://github.com/google/guava/wiki/StringsExplained#joiner\">{@code Joiner}</a>.\n",
        "67": "  /** Returns a joiner which automatically places {@code separator} between consecutive elements. */\n",
        "72": "  /** Returns a joiner which automatically places {@code separator} between consecutive elements. */\n",
        "124": "  /** Appends to {@code appendable} the string representation of each of the remaining arguments. */\n",
        "134": "   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,\n",
        "135": "   * Iterable)}, except that it does not throw {@link IOException}.\n",
        "144": "   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,\n",
        "145": "   * Iterable)}, except that it does not throw {@link IOException}.\n",
        "161": "   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,\n",
        "162": "   * Iterable)}, except that it does not throw {@link IOException}.\n",
        "303": "   *   <li>To output a separate entry for each key-value pair, pass {@code multimap.entries()} to a\n",
        "304": "   *       {@code MapJoiner} method that accepts entries as input, and receive output of the form\n",
        "305": "   *       {@code key1=A&key1=B&key2=C}.\n",
        "306": "   *   <li>To output a single entry for each key, pass {@code multimap.asMap()} to a {@code\n",
        "307": "   *       MapJoiner} method that accepts a map as input, and receive output of the form {@code\n",
        "308": "   *       key1=[A, B]&key2=C}.\n",
        "333": "     * configured separator and key-value separator, to {@code builder}. Identical to {@link\n",
        "334": "     * #appendTo(Appendable, Map)}, except that it does not throw {@link IOException}.\n",
        "391": "     * configured separator and key-value separator, to {@code builder}. Identical to {@link\n",
        "392": "     * #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.\n",
        "404": "     * configured separator and key-value separator, to {@code builder}. Identical to {@link\n",
        "405": "     * #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.\n"
    },
    "removed": {
        "33": " * them as a {@link String}. Example: <pre>   {@code\n",
        "35": " *   Joiner joiner = Joiner.on(\"; \").skipNulls();\n",
        "36": " *    . . .\n",
        "37": " *   return joiner.join(\"Harry\", null, \"Ron\", \"Hermione\");}</pre>\n",
        "48": " * static final} constants. <pre>   {@code\n",
        "50": " *   // Bad! Do not do this!\n",
        "51": " *   Joiner joiner = Joiner.on(',');\n",
        "52": " *   joiner.skipNulls(); // does nothing!\n",
        "53": " *   return joiner.join(\"wrong\", null, \"wrong\");}</pre>\n",
        "55": " * <p>See the Guava User Guide article on\n",
        "56": " * <a href=\"https://github.com/google/guava/wiki/StringsExplained#joiner\">{@code Joiner}</a>.\n",
        "63": "  /**\n",
        "64": "   * Returns a joiner which automatically places {@code separator} between consecutive elements.\n",
        "65": "   */\n",
        "70": "  /**\n",
        "71": "   * Returns a joiner which automatically places {@code separator} between consecutive elements.\n",
        "72": "   */\n",
        "124": "  /**\n",
        "125": "   * Appends to {@code appendable} the string representation of each of the remaining arguments.\n",
        "126": "   */\n",
        "136": "   * separator between each, to {@code builder}. Identical to\n",
        "137": "   * {@link #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.\n",
        "146": "   * separator between each, to {@code builder}. Identical to\n",
        "147": "   * {@link #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.\n",
        "163": "   * separator between each, to {@code builder}. Identical to\n",
        "164": "   * {@link #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.\n",
        "305": "   * <li>To output a separate entry for each key-value pair, pass {@code multimap.entries()} to a\n",
        "306": "   * {@code MapJoiner} method that accepts entries as input, and receive output of the form\n",
        "307": "   * {@code key1=A&key1=B&key2=C}.\n",
        "308": "   * <li>To output a single entry for each key, pass {@code multimap.asMap()} to a {@code MapJoiner}\n",
        "309": "   * method that accepts a map as input, and receive output of the form {@code\n",
        "310": "   *     key1=[A, B]&key2=C}.\n",
        "335": "     * configured separator and key-value separator, to {@code builder}. Identical to\n",
        "336": "     * {@link #appendTo(Appendable, Map)}, except that it does not throw {@link IOException}.\n",
        "393": "     * configured separator and key-value separator, to {@code builder}. Identical to\n",
        "394": "     * {@link #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.\n",
        "406": "     * configured separator and key-value separator, to {@code builder}. Identical to\n",
        "407": "     * {@link #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.\n"
    }
}