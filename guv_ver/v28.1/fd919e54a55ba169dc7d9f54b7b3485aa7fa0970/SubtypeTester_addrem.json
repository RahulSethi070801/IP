{
    "addition": {
        "36": " * <p>Tests should inherit from this class, and declare subtyping relationship with public methods\n",
        "42": " * <pre>{@code\n",
        "43": " * class MySubtypeTests extends SubtypeTester {\n",
        "44": " *   @TestSubtype(suppressGetSubtype = true, suppressGetSupertype = true)\n",
        "45": " *   public <T> Iterable<? extends T> listIsSubtypeOfIterable(List<T> list) {\n",
        "46": " *     return isSubtype(list);\n",
        "49": " *   @TestSubtype\n",
        "50": " *   public List<String> intListIsNotSubtypeOfStringList(List<Integer> intList) {\n",
        "51": " *     return notSubtype(intList);\n",
        "53": " * }\n",
        "54": " *\n",
        "55": " * public void testMySubtypes() throws Exception {\n",
        "56": " *   new MySubtypeTests().testAllDeclarations();\n",
        "57": " * }\n",
        "94": "      assertThat(getSubtype(returnType, TypeToken.of(paramType).getRawType())).isEqualTo(paramType);\n",
        "139": "    Arrays.sort(\n",
        "140": "        methods,\n",
        "141": "        new Comparator<Method>() {\n",
        "142": "          @Override\n",
        "143": "          public int compare(Method a, Method b) {\n",
        "144": "            return a.getName().compareTo(b.getName());\n",
        "145": "          }\n",
        "146": "        });\n"
    },
    "removed": {
        "36": " * Tests should inherit from this class, and declare subtyping relationship with public methods\n",
        "41": " * <pre>   {@code\n",
        "43": " *   class MySubtypeTests extends SubtypeTester {\n",
        "44": " *     @TestSubtype(suppressGetSubtype = true, suppressGetSupertype = true)\n",
        "45": " *     public <T> Iterable<? extends T> listIsSubtypeOfIterable(List<T> list) {\n",
        "46": " *       return isSubtype(list);\n",
        "47": " *     }\n",
        "48": " *\n",
        "49": " *     @TestSubtype\n",
        "50": " *     public List<String> intListIsNotSubtypeOfStringList(List<Integer> intList) {\n",
        "51": " *       return notSubtype(intList);\n",
        "52": " *     }\n",
        "55": " *   public void testMySubtypes() throws Exception {\n",
        "56": " *     new MySubtypeTests().testAllDeclarations();\n",
        "94": "      assertThat(getSubtype(returnType, TypeToken.of(paramType).getRawType()))\n",
        "95": "          .isEqualTo(paramType);\n",
        "140": "    Arrays.sort(methods, new Comparator<Method>() {\n",
        "141": "      @Override public int compare(Method a, Method b) {\n",
        "142": "        return a.getName().compareTo(b.getName());\n",
        "143": "      }\n",
        "144": "    });\n"
    }
}