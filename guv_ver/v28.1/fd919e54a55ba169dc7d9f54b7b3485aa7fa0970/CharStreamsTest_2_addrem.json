{
    "addition": {
        "38": "  private static final String TEXT = \"The quick brown fox jumped over the lazy dog.\";\n",
        "45": "    List<String> lines = CharStreams.readLines(new StringReader(\"a\\nb\\nc\"));\n",
        "54": "    LineProcessor<Integer> alwaysFalse =\n",
        "55": "        new LineProcessor<Integer>() {\n",
        "56": "          int seen;\n",
        "57": "\n",
        "58": "          @Override\n",
        "59": "          public boolean processLine(String line) {\n",
        "60": "            seen++;\n",
        "61": "            return false;\n",
        "62": "          }\n",
        "63": "\n",
        "64": "          @Override\n",
        "65": "          public Integer getResult() {\n",
        "66": "            return seen;\n",
        "67": "          }\n",
        "68": "        };\n",
        "69": "    assertEquals(\n",
        "70": "        \"processLine was called more than once\",\n",
        "71": "        1,\n",
        "76": "    LineProcessor<Integer> alwaysTrue =\n",
        "77": "        new LineProcessor<Integer>() {\n",
        "78": "          int seen;\n",
        "79": "\n",
        "80": "          @Override\n",
        "81": "          public boolean processLine(String line) {\n",
        "82": "            seen++;\n",
        "83": "            return true;\n",
        "84": "          }\n",
        "85": "\n",
        "86": "          @Override\n",
        "87": "          public Integer getResult() {\n",
        "88": "            return seen;\n",
        "89": "          }\n",
        "90": "        };\n",
        "91": "    assertEquals(\n",
        "92": "        \"processLine was not called for all the lines\",\n",
        "93": "        3,\n",
        "99": "    LineProcessor<Integer> conditional =\n",
        "100": "        new LineProcessor<Integer>() {\n",
        "101": "          int seen;\n",
        "102": "\n",
        "103": "          @Override\n",
        "104": "          public boolean processLine(String line) {\n",
        "105": "            seen++;\n",
        "106": "            sb.append(line);\n",
        "107": "            return seen < 2;\n",
        "108": "          }\n",
        "109": "\n",
        "110": "          @Override\n",
        "111": "          public Integer getResult() {\n",
        "112": "            return seen;\n",
        "113": "          }\n",
        "114": "        };\n",
        "294": "  /** Wrap an appendable in an appendable to defeat any type specific optimizations. */\n",
        "317": "\n",
        "318": "  /** Wrap a readable in a readable to defeat any type specific optimizations. */\n"
    },
    "removed": {
        "38": "  private static final String TEXT\n",
        "39": "      = \"The quick brown fox jumped over the lazy dog.\";\n",
        "46": "    List<String> lines = CharStreams.readLines(\n",
        "47": "        new StringReader(\"a\\nb\\nc\"));\n",
        "56": "    LineProcessor<Integer> alwaysFalse = new LineProcessor<Integer>() {\n",
        "57": "      int seen;\n",
        "58": "      @Override\n",
        "59": "      public boolean processLine(String line) {\n",
        "60": "        seen++;\n",
        "61": "        return false;\n",
        "62": "      }\n",
        "63": "      @Override\n",
        "64": "      public Integer getResult() {\n",
        "65": "        return seen;\n",
        "66": "      }\n",
        "67": "    };\n",
        "68": "    assertEquals(\"processLine was called more than once\", 1,\n",
        "73": "    LineProcessor<Integer> alwaysTrue = new LineProcessor<Integer>() {\n",
        "74": "      int seen;\n",
        "75": "      @Override\n",
        "76": "      public boolean processLine(String line) {\n",
        "77": "        seen++;\n",
        "78": "        return true;\n",
        "79": "      }\n",
        "80": "      @Override\n",
        "81": "      public Integer getResult() {\n",
        "82": "        return seen;\n",
        "83": "      }\n",
        "84": "    };\n",
        "85": "    assertEquals(\"processLine was not called for all the lines\", 3,\n",
        "91": "    LineProcessor<Integer> conditional = new LineProcessor<Integer>() {\n",
        "92": "      int seen;\n",
        "93": "      @Override\n",
        "94": "      public boolean processLine(String line) {\n",
        "95": "        seen++;\n",
        "96": "        sb.append(line);\n",
        "97": "        return seen < 2;\n",
        "98": "      }\n",
        "99": "      @Override\n",
        "100": "      public Integer getResult() {\n",
        "101": "        return seen;\n",
        "102": "      }\n",
        "103": "    };\n",
        "283": "  /**\n",
        "284": "   * Wrap an appendable in an appendable to defeat any type specific optimizations.\n",
        "285": "   */\n",
        "308": "  /**\n",
        "309": "   * Wrap a readable in a readable to defeat any type specific optimizations.\n",
        "310": "   */\n"
    }
}