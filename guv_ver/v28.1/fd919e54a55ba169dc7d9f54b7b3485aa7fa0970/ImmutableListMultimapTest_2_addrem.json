{
    "addition": {
        "75": "    suite.addTest(\n",
        "76": "        ListMultimapTestSuiteBuilder.using(new ImmutableListMultimapGenerator())\n",
        "77": "            .named(\"ImmutableListMultimap\")\n",
        "78": "            .withFeatures(ALLOWS_ANY_NULL_QUERIES, SERIALIZABLE, KNOWN_ORDER, CollectionSize.ANY)\n",
        "79": "            .createTestSuite());\n",
        "80": "    suite.addTest(\n",
        "81": "        ListMultimapTestSuiteBuilder.using(new ImmutableListMultimapCopyOfEntriesGenerator())\n",
        "82": "            .named(\"ImmutableListMultimap.copyOf[Iterable<Entry>]\")\n",
        "83": "            .withFeatures(ALLOWS_ANY_NULL_QUERIES, SERIALIZABLE, KNOWN_ORDER, CollectionSize.ANY)\n",
        "84": "            .createTestSuite());\n",
        "90": "    ImmutableListMultimap<String, Integer> multimap =\n",
        "91": "        new Builder<String, Integer>().put(Maps.immutableEntry(\"one\", 1)).build();\n",
        "117": "    Entry<String, Integer> entry =\n",
        "118": "        new AbstractMapEntry<String, Integer>() {\n",
        "119": "          @Override\n",
        "120": "          public String getKey() {\n",
        "121": "            return holder.string;\n",
        "122": "          }\n",
        "123": "\n",
        "124": "          @Override\n",
        "125": "          public Integer getValue() {\n",
        "126": "            return 1;\n",
        "127": "          }\n",
        "128": "        };\n",
        "136": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "147": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "167": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "177": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "188": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "210": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "222": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "226": "    } catch (NullPointerException expected) {\n",
        "227": "    }\n",
        "231": "    } catch (NullPointerException expected) {\n",
        "232": "    }\n",
        "236": "    } catch (NullPointerException expected) {\n",
        "237": "    }\n",
        "241": "    } catch (NullPointerException expected) {\n",
        "242": "    }\n",
        "248": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "252": "    } catch (NullPointerException expected) {\n",
        "253": "    }\n",
        "257": "    } catch (NullPointerException expected) {\n",
        "258": "    }\n",
        "262": "    } catch (NullPointerException expected) {\n",
        "263": "    }\n",
        "267": "    } catch (NullPointerException expected) {\n",
        "268": "    }\n",
        "272": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "288": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "292": "    builder.orderKeysBy(\n",
        "293": "        new Ordering<String>() {\n",
        "294": "          @Override\n",
        "295": "          public int compare(String left, String right) {\n",
        "296": "            return left.length() - right.length();\n",
        "297": "          }\n",
        "298": "        });\n",
        "310": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "326": "    ImmutableListMultimap.Builder<String, Integer> builder = ImmutableListMultimap.builder();\n",
        "381": "    } catch (NullPointerException expected) {\n",
        "382": "    }\n",
        "391": "    } catch (NullPointerException expected) {\n",
        "392": "    }\n",
        "453": "    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(multimap, \"foo\", 1);\n",
        "458": "        .put(\"foo\", 1)\n",
        "459": "        .put(\"bar\", 2)\n",
        "460": "        .put(\"foo\", 3)\n",
        "461": "        .build();\n",
        "481": "    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(multimap, \"bar\", 2);\n",
        "486": "    Multimap<String, Integer> arrayListMultimap = ArrayListMultimap.create();\n",
        "491": "        .addEqualityGroup(\n",
        "492": "            multimap,\n",
        "493": "            createMultimap(),\n",
        "494": "            arrayListMultimap,\n",
        "495": "            ImmutableListMultimap.<String, Integer>builder()\n",
        "496": "                .put(\"bar\", 2)\n",
        "497": "                .put(\"foo\", 1)\n",
        "498": "                .put(\"foo\", 3)\n",
        "499": "                .build())\n",
        "500": "        .addEqualityGroup(\n",
        "501": "            ImmutableListMultimap.<String, Integer>builder()\n",
        "502": "                .put(\"bar\", 2)\n",
        "503": "                .put(\"foo\", 3)\n",
        "504": "                .put(\"foo\", 1)\n",
        "505": "                .build())\n",
        "506": "        .addEqualityGroup(\n",
        "508": "                .put(\"foo\", 2)\n",
        "509": "                .put(\"foo\", 3)\n",
        "510": "                .put(\"foo\", 1)\n",
        "511": "                .build())\n",
        "512": "        .addEqualityGroup(\n",
        "513": "            ImmutableListMultimap.<String, Integer>builder().put(\"bar\", 2).put(\"foo\", 3).build())\n",
        "518": "    assertMultimapEquals(ImmutableListMultimap.of(\"one\", 1), \"one\", 1);\n",
        "519": "    assertMultimapEquals(ImmutableListMultimap.of(\"one\", 1, \"two\", 2), \"one\", 1, \"two\", 2);\n",
        "521": "        ImmutableListMultimap.of(\"one\", 1, \"two\", 2, \"three\", 3), \"one\", 1, \"two\", 2, \"three\", 3);\n",
        "524": "        \"one\",\n",
        "525": "        1,\n",
        "526": "        \"two\",\n",
        "527": "        2,\n",
        "528": "        \"three\",\n",
        "529": "        3,\n",
        "530": "        \"four\",\n",
        "531": "        4);\n",
        "533": "        ImmutableListMultimap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5),\n",
        "534": "        \"one\",\n",
        "535": "        1,\n",
        "536": "        \"two\",\n",
        "537": "        2,\n",
        "538": "        \"three\",\n",
        "539": "        3,\n",
        "540": "        \"four\",\n",
        "541": "        4,\n",
        "542": "        \"five\",\n",
        "543": "        5);\n",
        "550": "    assertEquals(ImmutableListMultimap.of(1, \"one\"), ImmutableListMultimap.of(\"one\", 1).inverse());\n",
        "576": "  private static <K, V> void assertMultimapEquals(\n",
        "577": "      Multimap<K, V> multimap, Object... alternatingKeysAndValues) {\n",
        "590": "    assertEquals(multimap.size(), SerializableTester.reserialize(multimap).size());\n",
        "595": "    Collection<Integer> valuesCopy = SerializableTester.reserialize(multimap.values());\n",
        "596": "    assertEquals(HashMultiset.create(multimap.values()), HashMultiset.create(valuesCopy));\n"
    },
    "removed": {
        "74": "    suite.addTest(ListMultimapTestSuiteBuilder.using(new ImmutableListMultimapGenerator())\n",
        "75": "      .named(\"ImmutableListMultimap\")\n",
        "76": "      .withFeatures(\n",
        "77": "          ALLOWS_ANY_NULL_QUERIES,\n",
        "78": "          SERIALIZABLE,\n",
        "79": "          KNOWN_ORDER,\n",
        "80": "          CollectionSize.ANY)\n",
        "81": "      .createTestSuite());\n",
        "82": "    suite.addTest(ListMultimapTestSuiteBuilder.using(\n",
        "83": "            new ImmutableListMultimapCopyOfEntriesGenerator())\n",
        "84": "        .named(\"ImmutableListMultimap.copyOf[Iterable<Entry>]\")\n",
        "85": "        .withFeatures(\n",
        "86": "            ALLOWS_ANY_NULL_QUERIES,\n",
        "87": "            SERIALIZABLE,\n",
        "88": "            KNOWN_ORDER,\n",
        "89": "            CollectionSize.ANY)\n",
        "90": "        .createTestSuite());\n",
        "96": "    ImmutableListMultimap<String, Integer> multimap = new Builder<String, Integer>()\n",
        "97": "        .put(Maps.immutableEntry(\"one\", 1))\n",
        "98": "        .build();\n",
        "124": "    Entry<String, Integer> entry = new AbstractMapEntry<String, Integer>() {\n",
        "125": "      @Override public String getKey() {\n",
        "126": "        return holder.string;\n",
        "127": "      }\n",
        "128": "      @Override public Integer getValue() {\n",
        "129": "        return 1;\n",
        "130": "      }\n",
        "131": "    };\n",
        "139": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "140": "        = ImmutableListMultimap.builder();\n",
        "151": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "152": "        = ImmutableListMultimap.builder();\n",
        "172": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "173": "        = ImmutableListMultimap.builder();\n",
        "183": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "184": "        = ImmutableListMultimap.builder();\n",
        "195": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "196": "        = ImmutableListMultimap.builder();\n",
        "218": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "219": "        = ImmutableListMultimap.builder();\n",
        "231": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "232": "        = ImmutableListMultimap.builder();\n",
        "236": "    } catch (NullPointerException expected) {}\n",
        "240": "    } catch (NullPointerException expected) {}\n",
        "244": "    } catch (NullPointerException expected) {}\n",
        "248": "    } catch (NullPointerException expected) {}\n",
        "254": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "255": "        = ImmutableListMultimap.builder();\n",
        "259": "    } catch (NullPointerException expected) {}\n",
        "263": "    } catch (NullPointerException expected) {}\n",
        "267": "    } catch (NullPointerException expected) {}\n",
        "271": "    } catch (NullPointerException expected) {}\n",
        "275": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "276": "        = ImmutableListMultimap.builder();\n",
        "292": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "293": "        = ImmutableListMultimap.builder();\n",
        "297": "    builder.orderKeysBy(new Ordering<String>() {\n",
        "298": "      @Override\n",
        "299": "      public int compare(String left, String right) {\n",
        "300": "        return left.length() - right.length();\n",
        "301": "      }\n",
        "302": "    });\n",
        "314": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "315": "        = ImmutableListMultimap.builder();\n",
        "331": "    ImmutableListMultimap.Builder<String, Integer> builder\n",
        "332": "        = ImmutableListMultimap.builder();\n",
        "387": "    } catch (NullPointerException expected) {}\n",
        "396": "    } catch (NullPointerException expected) {}\n",
        "457": "    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(\n",
        "458": "        multimap, \"foo\", 1);\n",
        "463": "        .put(\"foo\", 1).put(\"bar\", 2).put(\"foo\", 3).build();\n",
        "483": "    UnmodifiableCollectionTests.assertMultimapIsUnmodifiable(\n",
        "484": "        multimap, \"bar\", 2);\n",
        "489": "    Multimap<String, Integer> arrayListMultimap\n",
        "490": "        = ArrayListMultimap.create();\n",
        "495": "        .addEqualityGroup(multimap, createMultimap(), arrayListMultimap,\n",
        "497": "                .put(\"bar\", 2).put(\"foo\", 1).put(\"foo\", 3).build())\n",
        "498": "        .addEqualityGroup(ImmutableListMultimap.<String, Integer>builder()\n",
        "499": "            .put(\"bar\", 2).put(\"foo\", 3).put(\"foo\", 1).build())\n",
        "500": "        .addEqualityGroup(ImmutableListMultimap.<String, Integer>builder()\n",
        "501": "            .put(\"foo\", 2).put(\"foo\", 3).put(\"foo\", 1).build())\n",
        "502": "        .addEqualityGroup(ImmutableListMultimap.<String, Integer>builder()\n",
        "503": "            .put(\"bar\", 2).put(\"foo\", 3).build())\n",
        "509": "        ImmutableListMultimap.of(\"one\", 1),\n",
        "510": "        \"one\", 1);\n",
        "511": "    assertMultimapEquals(\n",
        "512": "        ImmutableListMultimap.of(\"one\", 1, \"two\", 2),\n",
        "513": "        \"one\", 1, \"two\", 2);\n",
        "514": "    assertMultimapEquals(\n",
        "515": "        ImmutableListMultimap.of(\"one\", 1, \"two\", 2, \"three\", 3),\n",
        "516": "        \"one\", 1, \"two\", 2, \"three\", 3);\n",
        "519": "        \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4);\n",
        "521": "        ImmutableListMultimap.of(\n",
        "522": "            \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5),\n",
        "523": "        \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "530": "    assertEquals(\n",
        "531": "        ImmutableListMultimap.of(1, \"one\"),\n",
        "532": "        ImmutableListMultimap.of(\"one\", 1).inverse());\n",
        "558": "  private static <K, V> void assertMultimapEquals(Multimap<K, V> multimap,\n",
        "559": "      Object... alternatingKeysAndValues) {\n",
        "572": "    assertEquals(multimap.size(),\n",
        "573": "        SerializableTester.reserialize(multimap).size());\n",
        "578": "    Collection<Integer> valuesCopy\n",
        "579": "        = SerializableTester.reserialize(multimap.values());\n",
        "580": "    assertEquals(HashMultiset.create(multimap.values()),\n",
        "581": "        HashMultiset.create(valuesCopy));\n"
    }
}