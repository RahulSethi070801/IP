{
    "addition": {
        "45": " * \"https://github.com/google/guava/wiki/CollectionUtilitiesExplained#tables\"> {@code Tables}</a>.\n",
        "140": "   * Returns an immutable cell with the specified row key, column key, and value.\n",
        "212": "   * Creates a transposed view of a given table that flips its row and column keys. In other words,\n",
        "213": "   * calling {@code get(columnKey, rowKey)} on the generated table always returns the same value as\n",
        "214": "   * calling {@code get(rowKey, columnKey)} on the original table. Updating the original table\n",
        "217": "   * <p>The returned table supports update operations as long as the input table supports the\n",
        "218": "   * analogous operation with swapped rows and columns. For example, in a {@link HashBasedTable}\n",
        "219": "   * instance, {@code rowKeySet().iterator()} supports {@code remove()} but {@code\n",
        "220": "   * columnKeySet().iterator()} doesn't. With a transposed {@link HashBasedTable}, it's the other\n",
        "221": "   * way around.\n",
        "344": "   * Creates a table that uses the specified backing map and factory. It can generate a table based\n",
        "345": "   * on arbitrary {@link Map} classes.\n",
        "347": "   * <p>The {@code factory}-generated and {@code backingMap} classes determine the table iteration\n",
        "348": "   * order. However, the table's {@code row()} method returns instances of a different class than\n",
        "349": "   * {@code factory.get()} does.\n",
        "351": "   * <p>Call this method only when the simpler factory methods in classes like {@link\n",
        "352": "   * HashBasedTable} and {@link TreeBasedTable} won't suffice.\n",
        "354": "   * <p>The views returned by the {@code Table} methods {@link Table#column}, {@link\n",
        "355": "   * Table#columnKeySet}, and {@link Table#columnMap} have iterators that don't support {@code\n",
        "356": "   * remove()}. Otherwise, all optional operations are supported. Null row keys, columns keys, and\n",
        "357": "   * values are not supported.\n",
        "359": "   * <p>Lookups by row key are often faster than lookups by column key, because the data is stored\n",
        "360": "   * in a {@code Map<R, Map<C, V>>}. A method call like {@code column(columnKey).get(rowKey)} still\n",
        "361": "   * runs quickly, since the row key is provided. However, {@code column(columnKey).size()} takes\n",
        "362": "   * longer, since an iteration across all row keys occurs.\n",
        "364": "   * <p>Note that this implementation is not synchronized. If multiple threads access this table\n",
        "365": "   * concurrently and one of the threads modifies the table, it must be synchronized externally.\n",
        "367": "   * <p>The table is serializable if {@code backingMap}, {@code factory}, the maps generated by\n",
        "368": "   * {@code factory}, and the table contents are all serializable.\n",
        "370": "   * <p>Note: the table assumes complete ownership over of {@code backingMap} and the maps returned\n",
        "371": "   * by {@code factory}. Those objects should not be manually updated and they should not use soft,\n",
        "372": "   * weak, or phantom references.\n",
        "374": "   * @param backingMap place to store the mapping from each row key to its corresponding column key\n",
        "375": "   *     / value map\n",
        "376": "   * @param factory supplier of new, empty maps that will each hold all column key / value mappings\n",
        "377": "   *     for a given row key\n",
        "391": "   * Returns a view of a table where each value is transformed by a function. All other properties\n",
        "392": "   * of the table, such as iteration order, are left intact.\n",
        "394": "   * <p>Changes in the underlying table are reflected in this view. Conversely, this view supports\n",
        "395": "   * removal operations, and these are reflected in the underlying table.\n",
        "397": "   * <p>It's acceptable for the underlying table to contain null keys, and even null values provided\n",
        "398": "   * that the function is capable of accepting null input. The transformed table might contain null\n",
        "399": "   * values, if the function sometimes gives a null result.\n",
        "401": "   * <p>The returned table is not thread-safe or serializable, even if the underlying table is.\n",
        "403": "   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned\n",
        "404": "   * table to be a view, but it means that the function will be applied many times for bulk\n",
        "405": "   * operations like {@link Table#containsValue} and {@code Table.toString()}. For this to perform\n",
        "406": "   * well, {@code function} should be fast. To avoid lazy evaluation when the returned table doesn't\n",
        "407": "   * need to be a view, copy the returned table into a new table of your choosing.\n",
        "537": "   * users with \"read-only\" access to internal tables. Query operations on the returned table \"read\n",
        "538": "   * through\" to the specified table, and attempts to modify the returned table, whether direct or\n",
        "539": "   * via its collection views, result in an {@code UnsupportedOperationException}.\n"
    },
    "removed": {
        "45": " * \"https://github.com/google/guava/wiki/CollectionUtilitiesExplained#tables\">\n",
        "46": " * {@code Tables}</a>.\n",
        "141": "   * Returns an immutable cell with the specified row key, column key, and\n",
        "142": "   * value.\n",
        "214": "   * Creates a transposed view of a given table that flips its row and column\n",
        "215": "   * keys. In other words, calling {@code get(columnKey, rowKey)} on the\n",
        "216": "   * generated table always returns the same value as calling {@code\n",
        "217": "   * get(rowKey, columnKey)} on the original table. Updating the original table\n",
        "220": "   * <p>The returned table supports update operations as long as the input table\n",
        "221": "   * supports the analogous operation with swapped rows and columns. For\n",
        "222": "   * example, in a {@link HashBasedTable} instance, {@code\n",
        "223": "   * rowKeySet().iterator()} supports {@code remove()} but {@code\n",
        "224": "   * columnKeySet().iterator()} doesn't. With a transposed {@link\n",
        "225": "   * HashBasedTable}, it's the other way around.\n",
        "348": "   * Creates a table that uses the specified backing map and factory. It can\n",
        "349": "   * generate a table based on arbitrary {@link Map} classes.\n",
        "351": "   * <p>The {@code factory}-generated and {@code backingMap} classes determine\n",
        "352": "   * the table iteration order. However, the table's {@code row()} method\n",
        "353": "   * returns instances of a different class than {@code factory.get()} does.\n",
        "355": "   * <p>Call this method only when the simpler factory methods in classes like\n",
        "356": "   * {@link HashBasedTable} and {@link TreeBasedTable} won't suffice.\n",
        "358": "   * <p>The views returned by the {@code Table} methods {@link Table#column},\n",
        "359": "   * {@link Table#columnKeySet}, and {@link Table#columnMap} have iterators that\n",
        "360": "   * don't support {@code remove()}. Otherwise, all optional operations are\n",
        "361": "   * supported. Null row keys, columns keys, and values are not supported.\n",
        "363": "   * <p>Lookups by row key are often faster than lookups by column key, because\n",
        "364": "   * the data is stored in a {@code Map<R, Map<C, V>>}. A method call like\n",
        "365": "   * {@code column(columnKey).get(rowKey)} still runs quickly, since the row key\n",
        "366": "   * is provided. However, {@code column(columnKey).size()} takes longer, since\n",
        "367": "   * an iteration across all row keys occurs.\n",
        "369": "   * <p>Note that this implementation is not synchronized. If multiple threads\n",
        "370": "   * access this table concurrently and one of the threads modifies the table,\n",
        "371": "   * it must be synchronized externally.\n",
        "373": "   * <p>The table is serializable if {@code backingMap}, {@code factory}, the\n",
        "374": "   * maps generated by {@code factory}, and the table contents are all\n",
        "375": "   * serializable.\n",
        "377": "   * <p>Note: the table assumes complete ownership over of {@code backingMap}\n",
        "378": "   * and the maps returned by {@code factory}. Those objects should not be\n",
        "379": "   * manually updated and they should not use soft, weak, or phantom references.\n",
        "381": "   * @param backingMap place to store the mapping from each row key to its\n",
        "382": "   *     corresponding column key / value map\n",
        "383": "   * @param factory supplier of new, empty maps that will each hold all column\n",
        "384": "   *     key / value mappings for a given row key\n",
        "398": "   * Returns a view of a table where each value is transformed by a function.\n",
        "399": "   * All other properties of the table, such as iteration order, are left\n",
        "400": "   * intact.\n",
        "402": "   * <p>Changes in the underlying table are reflected in this view. Conversely,\n",
        "403": "   * this view supports removal operations, and these are reflected in the\n",
        "404": "   * underlying table.\n",
        "406": "   * <p>It's acceptable for the underlying table to contain null keys, and even\n",
        "407": "   * null values provided that the function is capable of accepting null input.\n",
        "408": "   * The transformed table might contain null values, if the function sometimes\n",
        "409": "   * gives a null result.\n",
        "411": "   * <p>The returned table is not thread-safe or serializable, even if the\n",
        "412": "   * underlying table is.\n",
        "414": "   * <p>The function is applied lazily, invoked when needed. This is necessary\n",
        "415": "   * for the returned table to be a view, but it means that the function will be\n",
        "416": "   * applied many times for bulk operations like {@link Table#containsValue} and\n",
        "417": "   * {@code Table.toString()}. For this to perform well, {@code function} should\n",
        "418": "   * be fast. To avoid lazy evaluation when the returned table doesn't need to\n",
        "419": "   * be a view, copy the returned table into a new table of your choosing.\n",
        "549": "   * users with \"read-only\" access to internal tables. Query operations on the returned table\n",
        "550": "   * \"read through\" to the specified table, and attempts to modify the returned table, whether\n",
        "551": "   * direct or via its collection views, result in an {@code UnsupportedOperationException}.\n"
    }
}