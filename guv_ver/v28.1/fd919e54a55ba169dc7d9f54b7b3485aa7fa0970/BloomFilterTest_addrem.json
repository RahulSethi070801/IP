{
    "addition": {
        "49": "  private static final ThreadLocal<Random> random =\n",
        "50": "      new ThreadLocal<Random>() {\n",
        "51": "        @Override\n",
        "52": "        protected Random initialValue() {\n",
        "53": "          return new Random();\n",
        "54": "        }\n",
        "55": "      };\n",
        "84": "    BloomFilter<String> bf =\n",
        "85": "        BloomFilter.create(\n",
        "86": "            Funnels.unencodedCharsFunnel(),\n",
        "87": "            numInsertions,\n",
        "88": "            0.03,\n",
        "89": "            BloomFilterStrategies.MURMUR128_MITZ_32);\n",
        "104": "    ImmutableSet<Integer> falsePositives =\n",
        "105": "        ImmutableSet.of(\n",
        "106": "            49, 51, 59, 163, 199, 321, 325, 363, 367, 469, 545, 561, 727, 769, 773, 781);\n",
        "129": "    BloomFilter<String> bf =\n",
        "130": "        BloomFilter.create(\n",
        "131": "            Funnels.unencodedCharsFunnel(),\n",
        "132": "            numInsertions,\n",
        "133": "            0.03,\n",
        "134": "            BloomFilterStrategies.MURMUR128_MITZ_64);\n",
        "149": "    ImmutableSet<Integer> falsePositives =\n",
        "150": "        ImmutableSet.of(15, 25, 287, 319, 381, 399, 421, 465, 529, 697, 767, 857);\n",
        "173": "    BloomFilter<String> bf =\n",
        "174": "        BloomFilter.create(\n",
        "175": "            Funnels.stringFunnel(UTF_8),\n",
        "176": "            numInsertions,\n",
        "177": "            0.03,\n",
        "178": "            BloomFilterStrategies.MURMUR128_MITZ_64);\n",
        "193": "    ImmutableSet<Integer> falsePositives = ImmutableSet.of(129, 471, 723, 89, 751, 835, 871);\n",
        "214": "  /** Sanity checking with many combinations of false positive rates and expected insertions */\n",
        "227": "    } catch (IllegalArgumentException expected) {\n",
        "228": "    }\n",
        "232": "    } catch (IllegalArgumentException expected) {\n",
        "233": "    }\n",
        "237": "    } catch (IllegalArgumentException expected) {\n",
        "238": "    }\n",
        "242": "    } catch (IllegalArgumentException expected) {\n",
        "243": "    }\n",
        "252": "    } catch (IllegalArgumentException expected) {\n",
        "253": "    }\n",
        "262": "  /** Tests that we never get an optimal hashes number of zero. */\n",
        "276": "  /** Tests that we always get a non-negative optimal size. */\n",
        "291": "    assertEquals(3327428144502L, BloomFilter.optimalNumOfBits(Integer.MAX_VALUE, Double.MIN_VALUE));\n",
        "385": "    new EqualsTester().addEqualityGroup(bf1, bf2).testEquals();\n",
        "389": "    new EqualsTester().addEqualityGroup(bf1).addEqualityGroup(bf2).testEquals();\n",
        "511": "   * This test will fail whenever someone updates/reorders the BloomFilterStrategies constants. Only\n",
        "512": "   * appending a new constant is allowed.\n"
    },
    "removed": {
        "49": "  private static final ThreadLocal<Random> random = new ThreadLocal<Random>(){\n",
        "50": "    @Override\n",
        "51": "    protected Random initialValue() {\n",
        "52": "      return new Random();\n",
        "53": "    }\n",
        "54": "  };\n",
        "83": "    BloomFilter<String> bf = BloomFilter.create(\n",
        "84": "        Funnels.unencodedCharsFunnel(), numInsertions, 0.03,\n",
        "85": "        BloomFilterStrategies.MURMUR128_MITZ_32);\n",
        "100": "    ImmutableSet<Integer> falsePositives = ImmutableSet.of(\n",
        "101": "        49, 51, 59, 163, 199, 321, 325, 363, 367, 469, 545, 561, 727, 769, 773, 781);\n",
        "124": "    BloomFilter<String> bf = BloomFilter.create(\n",
        "125": "        Funnels.unencodedCharsFunnel(), numInsertions, 0.03,\n",
        "126": "        BloomFilterStrategies.MURMUR128_MITZ_64);\n",
        "141": "    ImmutableSet<Integer> falsePositives = ImmutableSet.of(\n",
        "142": "        15, 25, 287, 319, 381, 399, 421, 465, 529, 697, 767, 857);\n",
        "165": "    BloomFilter<String> bf = BloomFilter.create(\n",
        "166": "        Funnels.stringFunnel(UTF_8), numInsertions, 0.03,\n",
        "167": "        BloomFilterStrategies.MURMUR128_MITZ_64);\n",
        "182": "    ImmutableSet<Integer> falsePositives =\n",
        "183": "        ImmutableSet.of(129, 471, 723, 89, 751, 835, 871);\n",
        "204": "  /**\n",
        "205": "   * Sanity checking with many combinations of false positive rates and expected insertions\n",
        "206": "   */\n",
        "219": "    } catch (IllegalArgumentException expected) {}\n",
        "223": "    } catch (IllegalArgumentException expected) {}\n",
        "227": "    } catch (IllegalArgumentException expected) {}\n",
        "231": "    } catch (IllegalArgumentException expected) {}\n",
        "240": "    } catch (IllegalArgumentException expected) {}\n",
        "249": "  /**\n",
        "250": "   * Tests that we never get an optimal hashes number of zero.\n",
        "251": "   */\n",
        "265": "  /**\n",
        "266": "   * Tests that we always get a non-negative optimal size.\n",
        "267": "   */\n",
        "282": "    assertEquals(3327428144502L, BloomFilter.optimalNumOfBits(\n",
        "283": "        Integer.MAX_VALUE, Double.MIN_VALUE));\n",
        "377": "    new EqualsTester()\n",
        "378": "        .addEqualityGroup(bf1, bf2)\n",
        "379": "        .testEquals();\n",
        "383": "    new EqualsTester()\n",
        "384": "        .addEqualityGroup(bf1)\n",
        "385": "        .addEqualityGroup(bf2)\n",
        "386": "        .testEquals();\n",
        "506": "   * This test will fail whenever someone updates/reorders the BloomFilterStrategies constants.\n",
        "507": "   * Only appending a new constant is allowed.\n"
    }
}