{
    "addition": {
        "109": "    assertEquals(\n",
        "110": "        BigIntegerMath.sqrt(\n",
        "111": "            BigInteger.ZERO.setBit(2 * BigIntegerMath.SQRT2_PRECOMPUTE_THRESHOLD + 1), FLOOR),\n",
        "128": "      } catch (IllegalArgumentException expected) {\n",
        "129": "      }\n",
        "138": "      } catch (IllegalArgumentException expected) {\n",
        "139": "      }\n",
        "216": "      } catch (IllegalArgumentException expected) {\n",
        "217": "      }\n",
        "227": "      } catch (IllegalArgumentException expected) {\n",
        "228": "      }\n",
        "326": "      } catch (IllegalArgumentException expected) {\n",
        "327": "      }\n",
        "482": "        } catch (ArithmeticException expected) {\n",
        "483": "        }\n",
        "504": "    } catch (IllegalArgumentException expected) {\n",
        "505": "    }\n",
        "521": "        BigInteger expected =\n",
        "522": "            BigIntegerMath.factorial(n)\n",
        "523": "                .divide(BigIntegerMath.factorial(k))\n",
        "524": "                .divide(BigIntegerMath.factorial(n - k));\n",
        "535": "      } catch (IllegalArgumentException expected) {\n",
        "536": "      }\n",
        "540": "      } catch (IllegalArgumentException expected) {\n",
        "541": "      }\n"
    },
    "removed": {
        "109": "    assertEquals(BigIntegerMath.sqrt(\n",
        "110": "        BigInteger.ZERO.setBit(2 * BigIntegerMath.SQRT2_PRECOMPUTE_THRESHOLD + 1), FLOOR),\n",
        "127": "      } catch (IllegalArgumentException expected) {}\n",
        "136": "      } catch (IllegalArgumentException expected) {}\n",
        "213": "      } catch (IllegalArgumentException expected) {}\n",
        "223": "      } catch (IllegalArgumentException expected) {}\n",
        "321": "      } catch (IllegalArgumentException expected) {}\n",
        "476": "        } catch (ArithmeticException expected) {}\n",
        "497": "    } catch (IllegalArgumentException expected) {}\n",
        "513": "        BigInteger expected = BigIntegerMath\n",
        "514": "            .factorial(n)\n",
        "515": "            .divide(BigIntegerMath.factorial(k))\n",
        "516": "            .divide(BigIntegerMath.factorial(n - k));\n",
        "527": "      } catch (IllegalArgumentException expected) {}\n",
        "531": "      } catch (IllegalArgumentException expected) {}\n"
    }
}