{
    "addition": {
        "38": "  @Override\n",
        "39": "  protected Table<String, Integer, Character> create(Object... data) {\n",
        "40": "    ImmutableTable.Builder<String, Integer, Character> builder = ImmutableTable.builder();\n",
        "42": "      builder.put((String) data[i], (Integer) data[i + 1], (Character) data[i + 2]);\n",
        "199": "    assertEquals(ImmutableTable.of('a', 1, \"foo\"), builder.put('a', 1, \"foo\").build());\n",
        "207": "    assertEquals(expectedTable, builder.putAll(otherTable).build());\n",
        "212": "    assertEquals(\n",
        "213": "        ImmutableTable.of('a', 1, \"foo\"), builder.put(Tables.immutableCell('a', 1, \"foo\")).build());\n",
        "249": "          @Override\n",
        "250": "          public Character getRowKey() {\n",
        "253": "\n",
        "254": "          @Override\n",
        "255": "          public Integer getColumnKey() {\n",
        "258": "\n",
        "259": "          @Override\n",
        "260": "          public String getValue() {\n",
        "315": "    Table<R, C, V> built = ImmutableTable.<R, C, V>builder().putAll(original).build();\n",
        "320": "  private static <R, C, V> void validateViewOrdering(Table<R, C, V> original, Table<R, C, V> copy) {\n",
        "337": "    assertThat(ImmutableTable.copyOf(table).row('b').keySet()).containsExactly(2, 1).inOrder();\n",
        "372": "    ImmutableTable.Builder<Character, Integer, String> builder = ImmutableTable.builder();\n",
        "373": "    Table<Character, Integer, String> copy =\n",
        "374": "        builder\n",
        "375": "            .orderRowsBy(Ordering.natural())\n",
        "377": "            .putAll(table)\n",
        "378": "            .build();\n",
        "386": "    ImmutableTable.Builder<Character, Integer, String> builder = ImmutableTable.builder();\n",
        "401": "    assertThat(table.values())\n",
        "402": "        .containsExactly(\"cat\", \"axe\", \"baz\", \"tub\", \"dog\", \"bar\", \"foo\", \"foo\", \"bar\")\n",
        "403": "        .inOrder();\n",
        "409": "    ImmutableTable.Builder<Character, Integer, String> builder = ImmutableTable.builder();\n",
        "423": "    assertThat(table.values())\n",
        "424": "        .containsExactly(\"baz\", \"bar\", \"foo\", \"dog\", \"cat\", \"baz\", \"bar\", \"foo\")\n",
        "425": "        .inOrder();\n",
        "431": "    ImmutableTable.Builder<Character, Integer, String> builder = ImmutableTable.builder();\n",
        "448": "    ImmutableTable.Builder<Character, Integer, String> builder = ImmutableTable.builder();\n",
        "464": "    ImmutableTable.Builder<Character, Integer, String> builder = ImmutableTable.builder();\n",
        "481": "    ImmutableTable.Builder<Character, Integer, String> builder = ImmutableTable.builder();\n"
    },
    "removed": {
        "38": "  @Override protected Table<String, Integer, Character> create(Object... data) {\n",
        "39": "    ImmutableTable.Builder<String, Integer, Character> builder =\n",
        "40": "        ImmutableTable.builder();\n",
        "42": "      builder.put((String) data[i], (Integer) data[i + 1],\n",
        "43": "          (Character) data[i + 2]);\n",
        "200": "    assertEquals(ImmutableTable.of('a', 1, \"foo\"), builder\n",
        "201": "        .put('a', 1, \"foo\")\n",
        "202": "        .build());\n",
        "210": "    assertEquals(expectedTable, builder\n",
        "211": "        .putAll(otherTable)\n",
        "212": "        .build());\n",
        "217": "    assertEquals(ImmutableTable.of('a', 1, \"foo\"), builder\n",
        "218": "        .put(Tables.immutableCell('a', 1, \"foo\"))\n",
        "219": "        .build());\n",
        "255": "          @Override public Character getRowKey() {\n",
        "258": "          @Override public Integer getColumnKey() {\n",
        "261": "          @Override public String getValue() {\n",
        "316": "    Table<R, C, V> built\n",
        "317": "        = ImmutableTable.<R, C, V>builder().putAll(original).build();\n",
        "322": "  private static <R, C, V> void validateViewOrdering(\n",
        "323": "      Table<R, C, V> original, Table<R, C, V> copy) {\n",
        "340": "    assertThat(ImmutableTable.copyOf(table).row('b').keySet())\n",
        "341": "        .containsExactly(2, 1).inOrder();\n",
        "376": "    ImmutableTable.Builder<Character, Integer, String> builder\n",
        "377": "        = ImmutableTable.builder();\n",
        "378": "    Table<Character, Integer, String> copy\n",
        "379": "        = builder.orderRowsBy(Ordering.natural())\n",
        "381": "            .putAll(table).build();\n",
        "389": "    ImmutableTable.Builder<Character, Integer, String> builder\n",
        "390": "        = ImmutableTable.builder();\n",
        "405": "    assertThat(table.values()).containsExactly(\"cat\", \"axe\", \"baz\", \"tub\",\n",
        "406": "        \"dog\", \"bar\", \"foo\", \"foo\", \"bar\").inOrder();\n",
        "412": "    ImmutableTable.Builder<Character, Integer, String> builder\n",
        "413": "        = ImmutableTable.builder();\n",
        "427": "    assertThat(table.values()).containsExactly(\"baz\", \"bar\", \"foo\", \"dog\",\n",
        "428": "        \"cat\", \"baz\", \"bar\", \"foo\").inOrder();\n",
        "434": "    ImmutableTable.Builder<Character, Integer, String> builder\n",
        "435": "        = ImmutableTable.builder();\n",
        "452": "    ImmutableTable.Builder<Character, Integer, String> builder\n",
        "453": "        = ImmutableTable.builder();\n",
        "469": "    ImmutableTable.Builder<Character, Integer, String> builder\n",
        "470": "        = ImmutableTable.builder();\n",
        "487": "    ImmutableTable.Builder<Character, Integer, String> builder\n",
        "488": "        = ImmutableTable.builder();\n"
    }
}