{
    "addition": {
        "39": "  /** Returns the empty bimap. */\n",
        "46": "  /** Returns an immutable bimap containing a single entry. */\n",
        "72": "    return new RegularImmutableBiMap<K, V>(new Object[] {k1, v1, k2, v2, k3, v3}, 3);\n",
        "85": "    return new RegularImmutableBiMap<K, V>(new Object[] {k1, v1, k2, v2, k3, v3, k4, v4}, 4);\n",
        "107": "   * Returns a new builder. The generated builder is equivalent to the builder created by the {@link\n",
        "108": "   * Builder} constructor.\n",
        "133": "   * A builder for creating immutable bimap instances, especially {@code public static final} bimaps\n",
        "134": "   * (\"constant bimaps\"). Example:\n",
        "136": "   * <pre>{@code\n",
        "137": "   * static final ImmutableBiMap<String, Integer> WORD_TO_INT =\n",
        "138": "   *     new ImmutableBiMap.Builder<String, Integer>()\n",
        "139": "   *         .put(\"one\", 1)\n",
        "140": "   *         .put(\"two\", 2)\n",
        "141": "   *         .put(\"three\", 3)\n",
        "142": "   *         .build();\n",
        "143": "   * }</pre>\n",
        "145": "   * <p>For <i>small</i> immutable bimaps, the {@code ImmutableBiMap.of()} methods are even more\n",
        "146": "   * convenient.\n",
        "149": "   * they were inserted into the builder. For example, in the above example, {@code\n",
        "150": "   * WORD_TO_INT.entrySet()} is guaranteed to iterate over the entries in the order {@code \"one\"=1,\n",
        "151": "   * \"two\"=2, \"three\"=3}, and {@code keySet()} and {@code values()} respect the same order. If you\n",
        "152": "   * want a different order, consider using {@link #orderEntriesByValue(Comparator)}, which changes\n",
        "153": "   * this builder to sort entries by value.\n",
        "155": "   * <p>Builder instances can be reused - it is safe to call {@link #build} multiple times to build\n",
        "156": "   * multiple bimaps in series. Each bimap is a superset of the bimaps created before it.\n",
        "162": "     * Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n",
        "163": "     * ImmutableBiMap#builder}.\n",
        "174": "     * Associates {@code key} with {@code value} in the built bimap. Duplicate keys or values are\n",
        "175": "     * not allowed, and will cause {@link #build} to fail.\n",
        "185": "     * Adds the given {@code entry} to the bimap. Duplicate keys or values are not allowed, and will\n",
        "186": "     * cause {@link #build} to fail.\n",
        "198": "     * Associates all of the given map's keys and values in the built bimap. Duplicate keys or\n",
        "199": "     * values are not allowed, and will cause {@link #build} to fail.\n",
        "211": "     * Adds all of the given entries to the built bimap. Duplicate keys or values are not allowed,\n",
        "212": "     * and will cause {@link #build} to fail.\n",
        "229": "     * <p>The sort order is stable, that is, if two entries have values that compare as equivalent,\n",
        "230": "     * the entry that was inserted first will be first in the built map's iteration order.\n",
        "244": "     * Returns a newly-created immutable bimap. The iteration order of the returned bimap is the\n",
        "245": "     * order in which entries were inserted into the builder, unless {@link #orderEntriesByValue}\n",
        "246": "     * was called, in which case entries are sorted by value.\n",
        "262": "   * Returns an immutable bimap containing the same entries as {@code map}. If {@code map} somehow\n",
        "263": "   * contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose\n",
        "264": "   * comparator is not <i>consistent with equals</i>), the results of this method are undefined.\n",
        "266": "   * <p>The returned {@code BiMap} iterates over entries in the same order as the {@code entrySet}\n",
        "267": "   * of the original map.\n",
        "269": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "270": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "271": "   * undocumented and subject to change.\n",
        "291": "   * Returns an immutable bimap containing the given entries. The returned bimap iterates over\n",
        "294": "   * @throws IllegalArgumentException if two keys have the same value or two values have the same\n",
        "295": "   *     key\n",
        "314": "   * <p>The inverse of an {@code ImmutableBiMap} is another {@code ImmutableBiMap}.\n",
        "347": "   * Serialized type for all ImmutableBiMap instances. It captures the logical contents and they are\n",
        "348": "   * reconstructed using public factory methods. This ensures that the implementation types remain\n",
        "349": "   * as implementation details.\n",
        "351": "   * <p>Since the bimap is immutable, ImmutableBiMap doesn't require special logic for keeping the\n",
        "352": "   * bimap and its inverse in sync during serialization, the way AbstractBiMap does.\n"
    },
    "removed": {
        "39": "  /**\n",
        "40": "   * Returns the empty bimap.\n",
        "41": "   */\n",
        "48": "  /**\n",
        "49": "   * Returns an immutable bimap containing a single entry.\n",
        "50": "   */\n",
        "76": "    return new RegularImmutableBiMap<K, V>(\n",
        "77": "        new Object[] {k1, v1, k2, v2, k3, v3}, 3);\n",
        "90": "    return new RegularImmutableBiMap<K, V>(\n",
        "91": "        new Object[] {k1, v1, k2, v2, k3, v3, k4, v4}, 4);\n",
        "113": "   * Returns a new builder. The generated builder is equivalent to the builder\n",
        "114": "   * created by the {@link Builder} constructor.\n",
        "139": "   * A builder for creating immutable bimap instances, especially {@code public\n",
        "140": "   * static final} bimaps (\"constant bimaps\"). Example: <pre>   {@code\n",
        "142": "   *   static final ImmutableBiMap<String, Integer> WORD_TO_INT =\n",
        "143": "   *       new ImmutableBiMap.Builder<String, Integer>()\n",
        "144": "   *           .put(\"one\", 1)\n",
        "145": "   *           .put(\"two\", 2)\n",
        "146": "   *           .put(\"three\", 3)\n",
        "147": "   *           .build();}</pre>\n",
        "149": "   * <p>For <i>small</i> immutable bimaps, the {@code ImmutableBiMap.of()} methods\n",
        "150": "   * are even more convenient.\n",
        "153": "   * they were inserted into the builder.  For example, in the above example,\n",
        "154": "   * {@code WORD_TO_INT.entrySet()} is guaranteed to iterate over the entries in the order\n",
        "155": "   * {@code \"one\"=1, \"two\"=2, \"three\"=3}, and {@code keySet()} and {@code values()} respect the same\n",
        "156": "   * order. If you want a different order, consider using\n",
        "157": "   * {@link #orderEntriesByValue(Comparator)}, which changes this builder to sort\n",
        "158": "   * entries by value.\n",
        "160": "   * <p>Builder instances can be reused - it is safe to call {@link #build}\n",
        "161": "   * multiple times to build multiple bimaps in series. Each bimap is a superset\n",
        "162": "   * of the bimaps created before it.\n",
        "168": "     * Creates a new builder. The returned builder is equivalent to the builder\n",
        "169": "     * generated by {@link ImmutableBiMap#builder}.\n",
        "180": "     * Associates {@code key} with {@code value} in the built bimap. Duplicate\n",
        "181": "     * keys or values are not allowed, and will cause {@link #build} to fail.\n",
        "191": "     * Adds the given {@code entry} to the bimap.  Duplicate keys or values\n",
        "192": "     * are not allowed, and will cause {@link #build} to fail.\n",
        "204": "     * Associates all of the given map's keys and values in the built bimap.\n",
        "205": "     * Duplicate keys or values are not allowed, and will cause {@link #build}\n",
        "206": "     * to fail.\n",
        "218": "     * Adds all of the given entries to the built bimap.  Duplicate keys or\n",
        "219": "     * values are not allowed, and will cause {@link #build} to fail.\n",
        "236": "     * <p>The sort order is stable, that is, if two entries have values that compare\n",
        "237": "     * as equivalent, the entry that was inserted first will be first in the built map's\n",
        "238": "     * iteration order.\n",
        "252": "     * Returns a newly-created immutable bimap.  The iteration order of the returned bimap is\n",
        "253": "     * the order in which entries were inserted into the builder, unless\n",
        "254": "     * {@link #orderEntriesByValue} was called, in which case entries are sorted by value.\n",
        "270": "   * Returns an immutable bimap containing the same entries as {@code map}. If\n",
        "271": "   * {@code map} somehow contains entries with duplicate keys (for example, if\n",
        "272": "   * it is a {@code SortedMap} whose comparator is not <i>consistent with\n",
        "273": "   * equals</i>), the results of this method are undefined.\n",
        "275": "   * <p>The returned {@code BiMap} iterates over entries in the same order as the\n",
        "276": "   * {@code entrySet} of the original map.\n",
        "278": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "279": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "280": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "300": "   * Returns an immutable bimap containing the given entries.  The returned bimap iterates over\n",
        "303": "   * @throws IllegalArgumentException if two keys have the same value or two\n",
        "304": "   *         values have the same key\n",
        "323": "   * <p>The inverse of an {@code ImmutableBiMap} is another\n",
        "324": "   * {@code ImmutableBiMap}.\n",
        "357": "   * Serialized type for all ImmutableBiMap instances. It captures the logical\n",
        "358": "   * contents and they are reconstructed using public factory methods. This\n",
        "359": "   * ensures that the implementation types remain as implementation details.\n",
        "361": "   * Since the bimap is immutable, ImmutableBiMap doesn't require special logic\n",
        "362": "   * for keeping the bimap and its inverse in sync during serialization, the way\n",
        "363": "   * AbstractBiMap does.\n"
    }
}