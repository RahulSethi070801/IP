{
    "addition": {
        "41": " * strings. This class includes several constants for encoding schemes specified by <a\n",
        "42": " * href=\"http://tools.ietf.org/html/rfc4648\">RFC 4648</a>. For example, the expression:\n",
        "44": " * <pre>{@code\n",
        "45": " * BaseEncoding.base32().encode(\"foo\".getBytes(Charsets.US_ASCII))\n",
        "46": " * }</pre>\n",
        "48": " * <p>returns the string {@code \"MZXW6===\"}, and\n",
        "49": " *\n",
        "50": " * <pre>{@code\n",
        "51": " * byte[] decoded = BaseEncoding.base32().decode(\"MZXW6===\");\n",
        "52": " * }</pre>\n",
        "61": " * <pre>{@code\n",
        "62": " * BaseEncoding.base16().lowerCase().decode(\"deadbeef\");\n",
        "63": " * }</pre>\n",
        "68": " * <pre>{@code\n",
        "69": " * // Do NOT do this\n",
        "70": " * BaseEncoding hex = BaseEncoding.base16();\n",
        "71": " * hex.lowerCase(); // does nothing!\n",
        "72": " * return hex.decode(\"deadbeef\"); // throws an IllegalArgumentException\n",
        "73": " * }</pre>\n",
        "75": " * <p>It is guaranteed that {@code encoding.decode(encoding.encode(x))} is always equal to {@code\n",
        "76": " * x}, but the reverse does not necessarily hold.\n",
        "145": "  /** Encodes the specified byte array, and returns the encoded {@code String}. */\n",
        "151": "   * Encodes the specified range of the specified byte array, and returns the encoded {@code\n",
        "152": "   * String}.\n",
        "167": "   * {@code Writer}. When the returned {@code OutputStream} is closed, so is the backing {@code\n",
        "168": "   * Writer}.\n",
        "237": "   * Returns an {@code InputStream} that decodes base-encoded input from the specified {@code\n",
        "238": "   * Reader}. The returned stream throws a {@link DecodingException} upon decoding-specific errors.\n",
        "244": "   * Returns a {@code ByteSource} that reads base-encoded bytes from the specified {@code\n",
        "245": "   * CharSource}.\n",
        "324": "   * The \"base64\" base encoding specified by <a\n",
        "325": "   * href=\"http://tools.ietf.org/html/rfc4648#section-4\">RFC 4648 section 4</a>, Base 64 Encoding.\n",
        "326": "   * (This is the same as the base 64 encoding from <a\n",
        "327": "   * href=\"http://tools.ietf.org/html/rfc3548#section-3\">RFC 3548</a>.)\n",
        "332": "   * <p>No line feeds are added by default, as per <a\n",
        "333": "   * href=\"http://tools.ietf.org/html/rfc4648#section-3.1\">RFC 4648 section 3.1</a>, Line Feeds in\n",
        "334": "   * Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.\n",
        "345": "   * The \"base64url\" encoding specified by <a\n",
        "346": "   * href=\"http://tools.ietf.org/html/rfc4648#section-5\">RFC 4648 section 5</a>, Base 64 Encoding\n",
        "348": "   * is the same as the base 64 encoding with URL and filename safe alphabet from <a\n",
        "349": "   * href=\"http://tools.ietf.org/html/rfc3548#section-4\">RFC 3548</a>.)\n",
        "354": "   * <p>No line feeds are added by default, as per <a\n",
        "355": "   * href=\"http://tools.ietf.org/html/rfc4648#section-3.1\">RFC 4648 section 3.1</a>, Line Feeds in\n",
        "356": "   * Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.\n",
        "367": "   * 4648 section 6</a>, Base 32 Encoding. (This is the same as the base 32 encoding from <a\n",
        "368": "   * href=\"http://tools.ietf.org/html/rfc3548#section-5\">RFC 3548</a>.)\n",
        "373": "   * <p>No line feeds are added by default, as per <a\n",
        "374": "   * href=\"http://tools.ietf.org/html/rfc4648#section-3.1\">RFC 4648 section 3.1</a>, Line Feeds in\n",
        "375": "   * Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.\n",
        "385": "   * The \"base32hex\" encoding specified by <a\n",
        "386": "   * href=\"http://tools.ietf.org/html/rfc4648#section-7\">RFC 4648 section 7</a>, Base 32 Encoding\n",
        "392": "   * <p>No line feeds are added by default, as per <a\n",
        "393": "   * href=\"http://tools.ietf.org/html/rfc4648#section-3.1\">RFC 4648 section 3.1</a>, Line Feeds in\n",
        "394": "   * Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.\n",
        "404": "   * 4648 section 8</a>, Base 16 Encoding. (This is the same as the base 16 encoding from <a\n",
        "405": "   * href=\"http://tools.ietf.org/html/rfc3548#section-6\">RFC 3548</a>.) This is commonly known as\n",
        "411": "   * <p>No line feeds are added by default, as per <a\n",
        "412": "   * href=\"http://tools.ietf.org/html/rfc4648#section-3.1\">RFC 4648 section 3.1</a>, Line Feeds in\n",
        "413": "   * Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.\n",
        "820": "        result = upperCase = (upper == alphabet) ? this : newInstance(upper, paddingChar);\n",
        "830": "        result = lowerCase = (lower == alphabet) ? this : newInstance(lower, paddingChar);\n"
    },
    "removed": {
        "41": " * strings. This class includes several constants for encoding schemes specified by\n",
        "42": " * <a href=\"http://tools.ietf.org/html/rfc4648\">RFC 4648</a>. For example, the expression:\n",
        "44": " * <pre>   {@code\n",
        "45": " *   BaseEncoding.base32().encode(\"foo\".getBytes(Charsets.US_ASCII))}</pre>\n",
        "47": " * <p>returns the string {@code \"MZXW6===\"}, and <pre>   {@code\n",
        "48": " *  byte[] decoded = BaseEncoding.base32().decode(\"MZXW6===\");}</pre>\n",
        "57": " * <pre>   {@code\n",
        "58": " *  BaseEncoding.base16().lowerCase().decode(\"deadbeef\");}</pre>\n",
        "63": " * <pre>   {@code\n",
        "64": " *   // Do NOT do this\n",
        "65": " *   BaseEncoding hex = BaseEncoding.base16();\n",
        "66": " *   hex.lowerCase(); // does nothing!\n",
        "67": " *   return hex.decode(\"deadbeef\"); // throws an IllegalArgumentException}</pre>\n",
        "69": " * <p>It is guaranteed that {@code encoding.decode(encoding.encode(x))} is always equal to\n",
        "70": " * {@code x}, but the reverse does not necessarily hold.\n",
        "139": "  /**\n",
        "140": "   * Encodes the specified byte array, and returns the encoded {@code String}.\n",
        "141": "   */\n",
        "147": "   * Encodes the specified range of the specified byte array, and returns the encoded\n",
        "148": "   * {@code String}.\n",
        "163": "   * {@code Writer}. When the returned {@code OutputStream} is closed, so is the backing\n",
        "164": "   * {@code Writer}.\n",
        "233": "   * Returns an {@code InputStream} that decodes base-encoded input from the specified\n",
        "234": "   * {@code Reader}. The returned stream throws a {@link DecodingException} upon decoding-specific\n",
        "235": "   * errors.\n",
        "241": "   * Returns a {@code ByteSource} that reads base-encoded bytes from the specified\n",
        "242": "   * {@code CharSource}.\n",
        "321": "   * The \"base64\" base encoding specified by\n",
        "322": "   * <a href=\"http://tools.ietf.org/html/rfc4648#section-4\">RFC 4648 section 4</a>, Base 64\n",
        "323": "   * Encoding. (This is the same as the base 64 encoding from\n",
        "324": "   * <a href=\"http://tools.ietf.org/html/rfc3548#section-3\">RFC 3548</a>.)\n",
        "329": "   * <p>No line feeds are added by default, as per\n",
        "330": "   * <a href=\"http://tools.ietf.org/html/rfc4648#section-3.1\">RFC 4648 section 3.1</a>, Line Feeds\n",
        "331": "   * in Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.\n",
        "342": "   * The \"base64url\" encoding specified by\n",
        "343": "   * <a href=\"http://tools.ietf.org/html/rfc4648#section-5\">RFC 4648 section 5</a>, Base 64 Encoding\n",
        "345": "   * is the same as the base 64 encoding with URL and filename safe alphabet from\n",
        "346": "   * <a href=\"http://tools.ietf.org/html/rfc3548#section-4\">RFC 3548</a>.)\n",
        "351": "   * <p>No line feeds are added by default, as per\n",
        "352": "   * <a href=\"http://tools.ietf.org/html/rfc4648#section-3.1\">RFC 4648 section 3.1</a>, Line Feeds\n",
        "353": "   * in Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.\n",
        "364": "   * 4648 section 6</a>, Base 32 Encoding. (This is the same as the base 32 encoding from\n",
        "365": "   * <a href=\"http://tools.ietf.org/html/rfc3548#section-5\">RFC 3548</a>.)\n",
        "370": "   * <p>No line feeds are added by default, as per\n",
        "371": "   * <a href=\"http://tools.ietf.org/html/rfc4648#section-3.1\">RFC 4648 section 3.1</a>, Line Feeds\n",
        "372": "   * in Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.\n",
        "382": "   * The \"base32hex\" encoding specified by\n",
        "383": "   * <a href=\"http://tools.ietf.org/html/rfc4648#section-7\">RFC 4648 section 7</a>, Base 32 Encoding\n",
        "389": "   * <p>No line feeds are added by default, as per\n",
        "390": "   * <a href=\"http://tools.ietf.org/html/rfc4648#section-3.1\">RFC 4648 section 3.1</a>, Line Feeds\n",
        "391": "   * in Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.\n",
        "401": "   * 4648 section 8</a>, Base 16 Encoding. (This is the same as the base 16 encoding from\n",
        "402": "   * <a href=\"http://tools.ietf.org/html/rfc3548#section-6\">RFC 3548</a>.) This is commonly known as\n",
        "408": "   * <p>No line feeds are added by default, as per\n",
        "409": "   * <a href=\"http://tools.ietf.org/html/rfc4648#section-3.1\">RFC 4648 section 3.1</a>, Line Feeds\n",
        "410": "   * in Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.\n",
        "817": "        result = upperCase =\n",
        "818": "            (upper == alphabet) ? this : newInstance(upper, paddingChar);\n",
        "828": "        result = lowerCase =\n",
        "829": "            (lower == alphabet) ? this : newInstance(lower, paddingChar);\n"
    }
}