{
    "addition": {
        "43": "        new IteratorTester<Integer>(\n",
        "44": "            4, MODIFIABLE, newArrayList(1, 2, 3), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "45": "          @Override\n",
        "46": "          protected Iterator<Integer> newTargetIterator() {\n",
        "55": "        new IteratorTester<Integer>(\n",
        "56": "            3, MODIFIABLE, newArrayList(1, 2, 3), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "57": "          @Override\n",
        "58": "          protected Iterator<Integer> newTargetIterator() {\n",
        "67": "        new IteratorTester<Integer>(\n",
        "68": "            3, MODIFIABLE, newArrayList(1, 2), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "69": "          @Override\n",
        "70": "          protected Iterator<Integer> newTargetIterator() {\n",
        "78": "    new IteratorTester<Integer>(\n",
        "79": "        3, MODIFIABLE, newArrayList(1, 2), IteratorTester.KnownOrder.UNKNOWN_ORDER) {\n",
        "80": "      @Override\n",
        "81": "      protected Iterator<Integer> newTargetIterator() {\n",
        "89": "        new IteratorTester<Integer>(\n",
        "90": "            3, MODIFIABLE, newArrayList(1, 2, 50), IteratorTester.KnownOrder.UNKNOWN_ORDER) {\n",
        "91": "          @Override\n",
        "92": "          protected Iterator<Integer> newTargetIterator() {\n",
        "100": "   * This Iterator wraps another iterator and gives it a bug found in JDK6.\n",
        "102": "   * <p>This bug is this: if you create an iterator from a TreeSet and call next() on that iterator\n",
        "103": "   * when hasNext() is false, so that next() throws a NoSuchElementException, then subsequent calls\n",
        "104": "   * to remove() will incorrectly throw an IllegalStateException, instead of removing the last\n",
        "105": "   * element returned.\n",
        "107": "   * <p>See <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6529795\">Sun bug 6529795</a>\n",
        "159": "\n",
        "162": "      super(STEPS, MODIFIABLE, newArrayList(1), IteratorTester.KnownOrder.KNOWN_ORDER);\n",
        "164": "\n",
        "167": "\n",
        "168": "    @Override\n",
        "169": "    protected Iterator<Integer> newTargetIterator() {\n",
        "173": "\n",
        "174": "    @Override\n",
        "175": "    protected void verify(List<Integer> elements) {\n",
        "186": "    assertEquals(\n",
        "187": "        \"Should have verified once per stimulus executed\",\n",
        "195": "        new IteratorTester<Integer>(\n",
        "196": "            1, MODIFIABLE, newArrayList(1, 2, 3), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "197": "          @Override\n",
        "198": "          protected Iterator<Integer> newTargetIterator() {\n",
        "202": "          @Override\n",
        "203": "          protected void verify(List<Integer> elements) {\n",
        "214": "    assertTrue(\n",
        "215": "        \"AssertionFailedError should have info about why test failed\",\n",
        "223": "        new IteratorTester<Integer>(\n",
        "224": "            1, MODIFIABLE, emptyList, IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "225": "          @Override\n",
        "226": "          protected Iterator<Integer> newTargetIterator() {\n",
        "264": "        new IteratorTester<Integer>(\n",
        "265": "            1, MODIFIABLE, emptyList, IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "266": "          @Override\n",
        "267": "          protected Iterator<Integer> newTargetIterator() {\n",
        "271": "                throw new IllegalStateException() {\n",
        "272": "                  /* subclass */\n",
        "273": "                };\n",
        "275": "\n",
        "278": "                throw new NoSuchElementException() {\n",
        "279": "                  /* subclass */\n",
        "280": "                };\n",
        "282": "\n",
        "296": "        new IteratorTester<Integer>(\n",
        "297": "            1, MODIFIABLE, emptyList, IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "298": "          @Override\n",
        "299": "          protected Iterator<Integer> newTargetIterator() {\n"
    },
    "removed": {
        "43": "        new IteratorTester<Integer>(4, MODIFIABLE, newArrayList(1, 2, 3),\n",
        "44": "            IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "45": "          @Override protected Iterator<Integer> newTargetIterator() {\n",
        "54": "        new IteratorTester<Integer>(3, MODIFIABLE, newArrayList(1, 2, 3),\n",
        "55": "            IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "56": "          @Override protected Iterator<Integer> newTargetIterator() {\n",
        "65": "        new IteratorTester<Integer>(3, MODIFIABLE, newArrayList(1, 2),\n",
        "66": "            IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "67": "          @Override protected Iterator<Integer> newTargetIterator() {\n",
        "75": "    new IteratorTester<Integer>(3, MODIFIABLE, newArrayList(1, 2),\n",
        "76": "        IteratorTester.KnownOrder.UNKNOWN_ORDER) {\n",
        "77": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "85": "        new IteratorTester<Integer>(3, MODIFIABLE, newArrayList(1, 2, 50),\n",
        "86": "            IteratorTester.KnownOrder.UNKNOWN_ORDER) {\n",
        "87": "          @Override protected Iterator<Integer> newTargetIterator() {\n",
        "95": "   * This Iterator wraps another iterator and gives it a bug found\n",
        "96": "   * in JDK6.\n",
        "98": "   * <p>This bug is this: if you create an iterator from a TreeSet\n",
        "99": "   * and call next() on that iterator when hasNext() is false, so\n",
        "100": "   * that next() throws a NoSuchElementException, then subsequent\n",
        "101": "   * calls to remove() will incorrectly throw an IllegalStateException,\n",
        "102": "   * instead of removing the last element returned.\n",
        "104": "   * <p>See\n",
        "105": "   * <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6529795\">\n",
        "106": "   * Sun bug 6529795</a>\n",
        "159": "      super(STEPS, MODIFIABLE, newArrayList(1),\n",
        "160": "          IteratorTester.KnownOrder.KNOWN_ORDER);\n",
        "164": "    @Override protected Iterator<Integer> newTargetIterator() {\n",
        "168": "    @Override protected void verify(List<Integer> elements) {\n",
        "179": "    assertEquals(\"Should have verified once per stimulus executed\",\n",
        "187": "        new IteratorTester<Integer>(1, MODIFIABLE, newArrayList(1, 2, 3),\n",
        "188": "            IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "189": "          @Override protected Iterator<Integer> newTargetIterator() {\n",
        "193": "          @Override protected void verify(List<Integer> elements) {\n",
        "204": "    assertTrue(\"AssertionFailedError should have info about why test failed\",\n",
        "212": "        new IteratorTester<Integer>(1, MODIFIABLE, emptyList,\n",
        "213": "            IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "214": "          @Override protected Iterator<Integer> newTargetIterator() {\n",
        "250": "        new IteratorTester<Integer>(1, MODIFIABLE, emptyList,\n",
        "251": "            IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "252": "          @Override protected Iterator<Integer> newTargetIterator() {\n",
        "256": "                throw new IllegalStateException() { /* subclass */};\n",
        "260": "                throw new NoSuchElementException() { /* subclass */};\n",
        "275": "        new IteratorTester<Integer>(1, MODIFIABLE, emptyList,\n",
        "276": "            IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "277": "          @Override protected Iterator<Integer> newTargetIterator() {\n"
    }
}