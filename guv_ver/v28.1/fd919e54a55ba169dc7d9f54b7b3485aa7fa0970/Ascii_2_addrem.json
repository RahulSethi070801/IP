{
    "addition": {
        "27": " *\n",
        "29": " *   <!-- TODO(kevinb): how can we make this not produce a warning when building gwt javadoc? -->\n",
        "30": " *   <li>{@link Charsets#US_ASCII} specifies the {@code Charset} of ASCII characters.\n",
        "31": " *   <li>{@link CharMatcher#ascii} matches ASCII characters and provides text processing methods\n",
        "32": " *       which operate only on the ASCII characters of a string.\n",
        "516": "   * sequence is greater than {@code maxLength}, the returned string will be exactly {@code\n",
        "517": "   * maxLength} chars in length and will end with the given {@code truncationIndicator}. Otherwise,\n",
        "518": "   * the sequence will be returned as a string with no changes to the content.\n",
        "522": "   * <pre>{@code\n",
        "523": "   * Ascii.truncate(\"foobar\", 7, \"...\"); // returns \"foobar\"\n",
        "524": "   * Ascii.truncate(\"foobar\", 5, \"...\"); // returns \"fo...\"\n",
        "525": "   * }</pre>\n",
        "533": "   *   <li>it may split surrogate pairs\n",
        "534": "   *   <li>it may split characters and combining characters\n",
        "535": "   *   <li>it does not consider word boundaries\n",
        "536": "   *   <li>if truncating for display to users, there are other considerations that must be taken\n",
        "537": "   *       into account\n",
        "538": "   *   <li>the appropriate truncation indicator may be locale-dependent\n",
        "539": "   *   <li>it is safe to use non-ASCII characters in the truncation indicator\n",
        "543": "   * @throws IllegalArgumentException if {@code maxLength} is less than the length of {@code\n",
        "544": "   *     truncationIndicator}\n",
        "585": "   *\n",
        "587": "   *   <li>{@code string.toUpperCase().equals(\"UPPER CASE ASCII\")}\n",
        "588": "   *   <li>{@code string.toLowerCase().equals(\"lower case ascii\")}\n",
        "590": "   *\n",
        "591": "   * <p>due to case-folding of some non-ASCII characters (which does not occur in {@link\n",
        "592": "   * String#equalsIgnoreCase}). However in almost all cases that ASCII strings are used, the author\n",
        "593": "   * probably wanted the behavior provided by this method rather than the subtle and sometimes\n",
        "594": "   * surprising behavior of {@code toUpperCase()} and {@code toLowerCase()}.\n"
    },
    "removed": {
        "28": " * <!-- TODO(kevinb): how can we make this not produce a warning when building gwt javadoc? -->\n",
        "29": " * <li>{@link Charsets#US_ASCII} specifies the {@code Charset} of ASCII characters.\n",
        "30": " * <li>{@link CharMatcher#ascii} matches ASCII characters and provides text processing methods which\n",
        "31": " * operate only on the ASCII characters of a string.\n",
        "515": "   * sequence is greater than {@code maxLength}, the returned string will be exactly\n",
        "516": "   * {@code maxLength} chars in length and will end with the given {@code truncationIndicator}.\n",
        "517": "   * Otherwise, the sequence will be returned as a string with no changes to the content.\n",
        "521": "   * <pre>   {@code\n",
        "522": "   *   Ascii.truncate(\"foobar\", 7, \"...\"); // returns \"foobar\"\n",
        "523": "   *   Ascii.truncate(\"foobar\", 5, \"...\"); // returns \"fo...\" }</pre>\n",
        "531": "   * <li>it may split surrogate pairs\n",
        "532": "   * <li>it may split characters and combining characters\n",
        "533": "   * <li>it does not consider word boundaries\n",
        "534": "   * <li>if truncating for display to users, there are other considerations that must be taken into\n",
        "535": "   *     account\n",
        "536": "   * <li>the appropriate truncation indicator may be locale-dependent\n",
        "537": "   * <li>it is safe to use non-ASCII characters in the truncation indicator\n",
        "541": "   * @throws IllegalArgumentException if {@code maxLength} is less than the length of\n",
        "542": "   *     {@code truncationIndicator}\n",
        "584": "   * <li>{@code string.toUpperCase().equals(\"UPPER CASE ASCII\")}\n",
        "585": "   * <li>{@code string.toLowerCase().equals(\"lower case ascii\")}\n",
        "587": "   * <p>due to case-folding of some non-ASCII characters (which does not occur in\n",
        "588": "   * {@link String#equalsIgnoreCase}). However in almost all cases that ASCII strings are used, the\n",
        "589": "   * author probably wanted the behavior provided by this method rather than the subtle and\n",
        "590": "   * sometimes surprising behavior of {@code toUpperCase()} and {@code toLowerCase()}.\n"
    }
}