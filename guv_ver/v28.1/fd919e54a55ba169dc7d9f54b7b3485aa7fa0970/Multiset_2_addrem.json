{
    "addition": {
        "36": " * A collection that supports order-independent equality, like {@link Set}, but may have duplicate\n",
        "37": " * elements. A multiset is also sometimes called a <i>bag</i>.\n",
        "39": " * <p>Elements of a multiset that are equal to one another are referred to as <i>occurrences</i> of\n",
        "40": " * the same single element. The total number of occurrences of an element in a multiset is called\n",
        "41": " * the <i>count</i> of that element (the terms \"frequency\" and \"multiplicity\" are equivalent, but\n",
        "42": " * not used in this API). Since the count of an element is represented as an {@code int}, a multiset\n",
        "43": " * may never contain more than {@link Integer#MAX_VALUE} occurrences of any one element.\n",
        "45": " * <p>{@code Multiset} refines the specifications of several methods from {@code Collection}. It\n",
        "46": " * also defines an additional query operation, {@link #count}, which returns the count of an\n",
        "47": " * element. There are five new bulk-modification operations, for example {@link #add(Object, int)},\n",
        "48": " * to add or remove multiple occurrences of an element at once, or to set the count of an element to\n",
        "49": " * a specific value. These modification operations are optional, but implementations which support\n",
        "50": " * the standard collection operations {@link #add(Object)} or {@link #remove(Object)} are encouraged\n",
        "51": " * to implement the related methods as well. Finally, two collection views are provided: {@link\n",
        "52": " * #elementSet} contains the distinct elements of the multiset \"with duplicates collapsed\", and\n",
        "53": " * {@link #entrySet} is similar but contains {@link Entry Multiset.Entry} instances, each providing\n",
        "54": " * both a distinct element and the count of that element.\n",
        "56": " * <p>In addition to these required methods, implementations of {@code Multiset} are expected to\n",
        "57": " * provide two {@code static} creation methods: {@code create()}, returning an empty multiset, and\n",
        "58": " * {@code create(Iterable<? extends E>)}, returning a multiset containing the given initial\n",
        "59": " * elements. This is simply a refinement of {@code Collection}'s constructor recommendations,\n",
        "60": " * reflecting the new developments of Java 5.\n",
        "62": " * <p>As with other collection types, the modification operations are optional, and should throw\n",
        "63": " * {@link UnsupportedOperationException} when they are not implemented. Most implementations should\n",
        "64": " * support either all add operations or none of them, all removal operations or none of them, and if\n",
        "65": " * and only if all of these are supported, the {@code setCount} methods as well.\n",
        "67": " * <p>A multiset uses {@link Object#equals} to determine whether two instances should be considered\n",
        "68": " * \"the same,\" <i>unless specified otherwise</i> by the implementation.\n",
        "70": " * <p>Common implementations include {@link ImmutableMultiset}, {@link HashMultiset}, and {@link\n",
        "71": " * ConcurrentHashMultiset}.\n",
        "73": " * <p>If your values may be zero, negative, or outside the range of an int, you may wish to use\n",
        "74": " * {@link com.google.common.util.concurrent.AtomicLongMap} instead. Note, however, that unlike\n",
        "75": " * {@code Multiset}, {@code AtomicLongMap} does not automatically remove zeros.\n",
        "78": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset\"> {@code\n",
        "79": " * Multiset}</a>.\n",
        "115": "   * Adds a number of occurrences of an element to this multiset. Note that if {@code occurrences ==\n",
        "116": "   * 1}, this method has the identical effect to {@link #add(Object)}. This method is functionally\n",
        "117": "   * equivalent (except in the case of overflow) to the call {@code\n",
        "118": "   * addAll(Collections.nCopies(element, occurrences))}, which would presumably perform much more\n",
        "119": "   * poorly.\n",
        "120": "   *\n",
        "121": "   * @param element the element to add occurrences of; may be null only if explicitly allowed by the\n",
        "122": "   *     implementation\n",
        "123": "   * @param occurrences the number of occurrences of the element to add. May be zero, in which case\n",
        "124": "   *     no change will be made.\n",
        "126": "   * @throws IllegalArgumentException if {@code occurrences} is negative, or if this operation would\n",
        "127": "   *     result in more than {@link Integer#MAX_VALUE} occurrences of the element\n",
        "128": "   * @throws NullPointerException if {@code element} is null and this implementation does not permit\n",
        "129": "   *     null elements. Note that if {@code occurrences} is zero, the implementation may opt to\n",
        "130": "   *     return normally.\n",
        "151": "   * Adds or removes the necessary occurrences of an element such that the element attains the\n",
        "152": "   * desired count.\n",
        "154": "   * @param element the element to add or remove occurrences of; may be null only if explicitly\n",
        "155": "   *     allowed by the implementation\n",
        "159": "   * @throws NullPointerException if {@code element} is null and this implementation does not permit\n",
        "160": "   *     null elements. Note that if {@code count} is zero, the implementor may optionally return\n",
        "161": "   *     zero instead.\n",
        "167": "   * Conditionally sets the count of an element to a new value, as described in {@link\n",
        "168": "   * #setCount(Object, int)}, provided that the element has the expected current count. If the\n",
        "169": "   * current count is not {@code oldCount}, no change is made.\n",
        "171": "   * @param element the element to conditionally set the count of; may be null only if explicitly\n",
        "172": "   *     allowed by the implementation\n",
        "175": "   * @return {@code true} if the condition for modification was met. This implies that the multiset\n",
        "176": "   *     was indeed modified, unless {@code oldCount == newCount}.\n",
        "177": "   * @throws IllegalArgumentException if {@code oldCount} or {@code newCount} is negative\n",
        "178": "   * @throws NullPointerException if {@code element} is null and the implementation does not permit\n",
        "179": "   *     null elements. Note that if {@code oldCount} and {@code newCount} are both zero, the\n",
        "180": "   *     implementor may optionally return {@code true} instead.\n",
        "188": "   * Returns the set of distinct elements contained in this multiset. The element set is backed by\n",
        "189": "   * the same data as the multiset, so any change to either is immediately reflected in the other.\n",
        "190": "   * The order of the elements in the element set is unspecified.\n",
        "192": "   * <p>If the element set supports any removal operations, these necessarily cause <b>all</b>\n",
        "193": "   * occurrences of the removed element(s) to be removed from the multiset. Implementations are not\n",
        "194": "   * expected to support the add operations, although this is possible.\n",
        "196": "   * <p>A common use for the element set is to find the number of distinct elements in the multiset:\n",
        "197": "   * {@code elementSet().size()}.\n",
        "204": "   * Returns a view of the contents of this multiset, grouped into {@code Multiset.Entry} instances,\n",
        "205": "   * each providing an element of the multiset and the count of that element. This set contains\n",
        "206": "   * exactly one entry for each distinct element in the multiset (thus it always has the same size\n",
        "207": "   * as the {@link #elementSet}). The order of the elements in the element set is unspecified.\n",
        "208": "   *\n",
        "209": "   * <p>The entry set is backed by the same data as the multiset, so any change to either is\n",
        "210": "   * immediately reflected in the other. However, multiset changes may or may not be reflected in\n",
        "211": "   * any {@code Entry} instances already retrieved from the entry set (this is\n",
        "212": "   * implementation-dependent). Furthermore, implementations are not required to support\n",
        "213": "   * modifications to the entry set at all, and the {@code Entry} instances themselves don't even\n",
        "214": "   * have methods for modification. See the specific implementation class for more details on how\n",
        "215": "   * its entry set handles modifications.\n",
        "222": "   * An unmodifiable element-count pair for a multiset. The {@link Multiset#entrySet} method returns\n",
        "223": "   * a view of the multiset whose elements are of this class. A multiset implementation may return\n",
        "224": "   * Entry instances that are either live \"read-through\" views to the Multiset, or immutable\n",
        "225": "   * snapshots. Note that this type is unrelated to the similarly-named type {@code Map.Entry}.\n",
        "232": "     * Returns the multiset element corresponding to this entry. Multiple calls to this method\n",
        "233": "     * always return the same instance.\n",
        "240": "     * Returns the count of the associated element in the underlying multiset. This count may either\n",
        "241": "     * be an unchanging snapshot of the count at the time the entry was retrieved, or a live view of\n",
        "242": "     * the current count of the element in the multiset, depending on the implementation. Note that\n",
        "243": "     * in the former case, this method can never return zero, while in the latter, it will return\n",
        "244": "     * zero if all occurrences of the element were since removed from the multiset.\n",
        "253": "     * <p>Returns {@code true} if the given object is also a multiset entry and the two entries\n",
        "254": "     * represent the same element and count. That is, two entries {@code a} and {@code b} are equal\n",
        "255": "     * if:\n",
        "257": "     * <pre>{@code\n",
        "258": "     * Objects.equal(a.getElement(), b.getElement())\n",
        "259": "     *     && a.getCount() == b.getCount()\n",
        "260": "     * }</pre>\n",
        "269": "     * <p>The hash code of a multiset entry for element {@code element} and count {@code count} is\n",
        "270": "     * defined as:\n",
        "272": "     * <pre>{@code\n",
        "273": "     * ((element == null) ? 0 : element.hashCode()) ^ count\n",
        "274": "     * }</pre>\n",
        "280": "     * Returns the canonical string representation of this entry, defined as follows. If the count\n",
        "281": "     * for this entry is one, this is simply the string representation of the corresponding element.\n",
        "282": "     * Otherwise, it is the string representation of the element, followed by the three characters\n",
        "283": "     * {@code \" x \"} (space, letter x, space), followed by the count.\n",
        "317": "   * <pre>{@code\n",
        "318": "   * ((element == null) ? 0 : element.hashCode()) ^ count(element)\n",
        "319": "   * }</pre>\n",
        "321": "   * <p>over all distinct elements in the multiset. It follows that a multiset and its entry set\n",
        "322": "   * always have the same hash code.\n",
        "330": "   * <p>It is recommended, though not mandatory, that this method return the result of invoking\n",
        "331": "   * {@link #toString} on the {@link #entrySet}, yielding a result such as {@code [a x 3, c, d x 2,\n",
        "332": "   * e]}.\n",
        "342": "   * <p>Elements that occur multiple times in the multiset will appear multiple times in this\n",
        "343": "   * iterator, though not necessarily sequentially.\n",
        "351": "   * <p>This method refines {@link Collection#contains} to further specify that it <b>may not</b>\n",
        "352": "   * throw an exception in response to {@code element} being null or of the wrong type.\n",
        "355": "   * @return {@code true} if this multiset contains at least one occurrence of the element\n",
        "361": "   * Returns {@code true} if this multiset contains at least one occurrence of each element in the\n",
        "362": "   * specified collection.\n",
        "363": "   *\n",
        "364": "   * <p>This method refines {@link Collection#containsAll} to further specify that it <b>may not</b>\n",
        "365": "   * throw an exception in response to any of {@code elements} being null or of the wrong type.\n",
        "366": "   *\n",
        "367": "   * <p><b>Note:</b> this method does not take into account the occurrence count of an element in\n",
        "368": "   * the two collections; it may still return {@code true} even if {@code elements} contains several\n",
        "369": "   * occurrences of an element and this multiset contains only one. This is no different than any\n",
        "370": "   * other collection type like {@link List}, but it may be unexpected to the user of a multiset.\n",
        "371": "   *\n",
        "372": "   * @param elements the collection of elements to be checked for containment in this multiset\n",
        "373": "   * @return {@code true} if this multiset contains at least one occurrence of each element\n",
        "374": "   *     contained in {@code elements}\n",
        "383": "   * <p>This method refines {@link Collection#add}, which only <i>ensures</i> the presence of the\n",
        "384": "   * element, to further specify that a successful call must always increment the count of the\n",
        "385": "   * element, and the overall size of the collection, by one.\n",
        "386": "   *\n",
        "387": "   * <p>To both add the element and obtain the previous count of that element, use {@link\n",
        "388": "   * #add(Object, int) add}{@code (element, 1)} instead.\n",
        "389": "   *\n",
        "390": "   * @param element the element to add one occurrence of; may be null only if explicitly allowed by\n",
        "391": "   *     the implementation\n",
        "392": "   * @return {@code true} always, since this call is required to modify the multiset, unlike other\n",
        "393": "   *     {@link Collection} types\n",
        "394": "   * @throws NullPointerException if {@code element} is null and this implementation does not permit\n",
        "395": "   *     null elements\n",
        "396": "   * @throws IllegalArgumentException if {@link Integer#MAX_VALUE} occurrences of {@code element}\n",
        "397": "   *     are already contained in this multiset\n",
        "404": "   * Removes a <i>single</i> occurrence of the specified element from this multiset, if present.\n",
        "406": "   * <p>This method refines {@link Collection#remove} to further specify that it <b>may not</b>\n",
        "407": "   * throw an exception in response to {@code element} being null or of the wrong type.\n",
        "409": "   * <p>To both remove the element and obtain the previous count of that element, use {@link\n",
        "410": "   * #remove(Object, int) remove}{@code (element, 1)} instead.\n",
        "422": "   * <p><b>Note:</b> This method ignores how often any element might appear in {@code c}, and only\n",
        "423": "   * cares whether or not an element appears at all. If you wish to remove one occurrence in this\n",
        "424": "   * multiset for every occurrence in {@code c}, see {@link Multisets#removeOccurrences(Multiset,\n",
        "425": "   * Multiset)}.\n",
        "427": "   * <p>This method refines {@link Collection#removeAll} to further specify that it <b>may not</b>\n",
        "428": "   * throw an exception in response to any of {@code elements} being null or of the wrong type.\n",
        "437": "   * <p><b>Note:</b> This method ignores how often any element might appear in {@code c}, and only\n",
        "438": "   * cares whether or not an element appears at all. If you wish to remove one occurrence in this\n",
        "439": "   * multiset for every occurrence in {@code c}, see {@link Multisets#retainOccurrences(Multiset,\n",
        "440": "   * Multiset)}.\n",
        "442": "   * <p>This method refines {@link Collection#retainAll} to further specify that it <b>may not</b>\n",
        "443": "   * throw an exception in response to any of {@code elements} being null or of the wrong type.\n"
    },
    "removed": {
        "36": " * A collection that supports order-independent equality, like {@link Set}, but\n",
        "37": " * may have duplicate elements. A multiset is also sometimes called a\n",
        "38": " * <i>bag</i>.\n",
        "40": " * <p>Elements of a multiset that are equal to one another are referred to as\n",
        "41": " * <i>occurrences</i> of the same single element. The total number of\n",
        "42": " * occurrences of an element in a multiset is called the <i>count</i> of that\n",
        "43": " * element (the terms \"frequency\" and \"multiplicity\" are equivalent, but not\n",
        "44": " * used in this API). Since the count of an element is represented as an {@code\n",
        "45": " * int}, a multiset may never contain more than {@link Integer#MAX_VALUE}\n",
        "46": " * occurrences of any one element.\n",
        "48": " * <p>{@code Multiset} refines the specifications of several methods from\n",
        "49": " * {@code Collection}. It also defines an additional query operation, {@link\n",
        "50": " * #count}, which returns the count of an element. There are five new\n",
        "51": " * bulk-modification operations, for example {@link #add(Object, int)}, to add\n",
        "52": " * or remove multiple occurrences of an element at once, or to set the count of\n",
        "53": " * an element to a specific value. These modification operations are optional,\n",
        "54": " * but implementations which support the standard collection operations {@link\n",
        "55": " * #add(Object)} or {@link #remove(Object)} are encouraged to implement the\n",
        "56": " * related methods as well. Finally, two collection views are provided: {@link\n",
        "57": " * #elementSet} contains the distinct elements of the multiset \"with duplicates\n",
        "58": " * collapsed\", and {@link #entrySet} is similar but contains {@link Entry\n",
        "59": " * Multiset.Entry} instances, each providing both a distinct element and the\n",
        "60": " * count of that element.\n",
        "62": " * <p>In addition to these required methods, implementations of {@code\n",
        "63": " * Multiset} are expected to provide two {@code static} creation methods:\n",
        "64": " * {@code create()}, returning an empty multiset, and {@code\n",
        "65": " * create(Iterable<? extends E>)}, returning a multiset containing the\n",
        "66": " * given initial elements. This is simply a refinement of {@code Collection}'s\n",
        "67": " * constructor recommendations, reflecting the new developments of Java 5.\n",
        "69": " * <p>As with other collection types, the modification operations are optional,\n",
        "70": " * and should throw {@link UnsupportedOperationException} when they are not\n",
        "71": " * implemented. Most implementations should support either all add operations\n",
        "72": " * or none of them, all removal operations or none of them, and if and only if\n",
        "73": " * all of these are supported, the {@code setCount} methods as well.\n",
        "75": " * <p>A multiset uses {@link Object#equals} to determine whether two instances\n",
        "76": " * should be considered \"the same,\" <i>unless specified otherwise</i> by the\n",
        "77": " * implementation.\n",
        "79": " * <p>Common implementations include {@link ImmutableMultiset}, {@link\n",
        "80": " * HashMultiset}, and {@link ConcurrentHashMultiset}.\n",
        "82": " * <p>If your values may be zero, negative, or outside the range of an int, you\n",
        "83": " * may wish to use {@link com.google.common.util.concurrent.AtomicLongMap}\n",
        "84": " * instead. Note, however, that unlike {@code Multiset}, {@code AtomicLongMap}\n",
        "85": " * does not automatically remove zeros.\n",
        "88": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset\">\n",
        "89": " * {@code Multiset}</a>.\n",
        "125": "   * Adds a number of occurrences of an element to this multiset. Note that if\n",
        "126": "   * {@code occurrences == 1}, this method has the identical effect to {@link\n",
        "127": "   * #add(Object)}. This method is functionally equivalent (except in the case\n",
        "128": "   * of overflow) to the call {@code addAll(Collections.nCopies(element,\n",
        "129": "   * occurrences))}, which would presumably perform much more poorly.\n",
        "130": "   *\n",
        "131": "   * @param element the element to add occurrences of; may be null only if\n",
        "132": "   *     explicitly allowed by the implementation\n",
        "133": "   * @param occurrences the number of occurrences of the element to add. May be\n",
        "134": "   *     zero, in which case no change will be made.\n",
        "136": "   * @throws IllegalArgumentException if {@code occurrences} is negative, or if\n",
        "137": "   *     this operation would result in more than {@link Integer#MAX_VALUE}\n",
        "138": "   *     occurrences of the element\n",
        "139": "   * @throws NullPointerException if {@code element} is null and this\n",
        "140": "   *     implementation does not permit null elements. Note that if {@code\n",
        "141": "   *     occurrences} is zero, the implementation may opt to return normally.\n",
        "162": "   * Adds or removes the necessary occurrences of an element such that the\n",
        "163": "   * element attains the desired count.\n",
        "165": "   * @param element the element to add or remove occurrences of; may be null\n",
        "166": "   *     only if explicitly allowed by the implementation\n",
        "170": "   * @throws NullPointerException if {@code element} is null and this\n",
        "171": "   *     implementation does not permit null elements. Note that if {@code\n",
        "172": "   *     count} is zero, the implementor may optionally return zero instead.\n",
        "178": "   * Conditionally sets the count of an element to a new value, as described in\n",
        "179": "   * {@link #setCount(Object, int)}, provided that the element has the expected\n",
        "180": "   * current count. If the current count is not {@code oldCount}, no change is\n",
        "181": "   * made.\n",
        "183": "   * @param element the element to conditionally set the count of; may be null\n",
        "184": "   *     only if explicitly allowed by the implementation\n",
        "187": "   * @return {@code true} if the condition for modification was met. This\n",
        "188": "   *     implies that the multiset was indeed modified, unless\n",
        "189": "   *     {@code oldCount == newCount}.\n",
        "190": "   * @throws IllegalArgumentException if {@code oldCount} or {@code newCount} is\n",
        "191": "   *     negative\n",
        "192": "   * @throws NullPointerException if {@code element} is null and the\n",
        "193": "   *     implementation does not permit null elements. Note that if {@code\n",
        "194": "   *     oldCount} and {@code newCount} are both zero, the implementor may\n",
        "195": "   *     optionally return {@code true} instead.\n",
        "203": "   * Returns the set of distinct elements contained in this multiset. The\n",
        "204": "   * element set is backed by the same data as the multiset, so any change to\n",
        "205": "   * either is immediately reflected in the other. The order of the elements in\n",
        "206": "   * the element set is unspecified.\n",
        "208": "   * <p>If the element set supports any removal operations, these necessarily\n",
        "209": "   * cause <b>all</b> occurrences of the removed element(s) to be removed from\n",
        "210": "   * the multiset. Implementations are not expected to support the add\n",
        "211": "   * operations, although this is possible.\n",
        "213": "   * <p>A common use for the element set is to find the number of distinct\n",
        "214": "   * elements in the multiset: {@code elementSet().size()}.\n",
        "221": "   * Returns a view of the contents of this multiset, grouped into {@code\n",
        "222": "   * Multiset.Entry} instances, each providing an element of the multiset and\n",
        "223": "   * the count of that element. This set contains exactly one entry for each\n",
        "224": "   * distinct element in the multiset (thus it always has the same size as the\n",
        "225": "   * {@link #elementSet}). The order of the elements in the element set is\n",
        "226": "   * unspecified.\n",
        "227": "   *\n",
        "228": "   * <p>The entry set is backed by the same data as the multiset, so any change\n",
        "229": "   * to either is immediately reflected in the other. However, multiset changes\n",
        "230": "   * may or may not be reflected in any {@code Entry} instances already\n",
        "231": "   * retrieved from the entry set (this is implementation-dependent).\n",
        "232": "   * Furthermore, implementations are not required to support modifications to\n",
        "233": "   * the entry set at all, and the {@code Entry} instances themselves don't\n",
        "234": "   * even have methods for modification. See the specific implementation class\n",
        "235": "   * for more details on how its entry set handles modifications.\n",
        "242": "   * An unmodifiable element-count pair for a multiset. The {@link\n",
        "243": "   * Multiset#entrySet} method returns a view of the multiset whose elements\n",
        "244": "   * are of this class. A multiset implementation may return Entry instances\n",
        "245": "   * that are either live \"read-through\" views to the Multiset, or immutable\n",
        "246": "   * snapshots. Note that this type is unrelated to the similarly-named type\n",
        "247": "   * {@code Map.Entry}.\n",
        "254": "     * Returns the multiset element corresponding to this entry. Multiple calls\n",
        "255": "     * to this method always return the same instance.\n",
        "262": "     * Returns the count of the associated element in the underlying multiset.\n",
        "263": "     * This count may either be an unchanging snapshot of the count at the time\n",
        "264": "     * the entry was retrieved, or a live view of the current count of the\n",
        "265": "     * element in the multiset, depending on the implementation. Note that in\n",
        "266": "     * the former case, this method can never return zero, while in the latter,\n",
        "267": "     * it will return zero if all occurrences of the element were since removed\n",
        "268": "     * from the multiset.\n",
        "277": "     * <p>Returns {@code true} if the given object is also a multiset entry and\n",
        "278": "     * the two entries represent the same element and count. That is, two\n",
        "279": "     * entries {@code a} and {@code b} are equal if: <pre>   {@code\n",
        "281": "     *   Objects.equal(a.getElement(), b.getElement())\n",
        "282": "     *       && a.getCount() == b.getCount()}</pre>\n",
        "291": "     * <p>The hash code of a multiset entry for element {@code element} and\n",
        "292": "     * count {@code count} is defined as: <pre>   {@code\n",
        "294": "     *   ((element == null) ? 0 : element.hashCode()) ^ count}</pre>\n",
        "300": "     * Returns the canonical string representation of this entry, defined as\n",
        "301": "     * follows. If the count for this entry is one, this is simply the string\n",
        "302": "     * representation of the corresponding element. Otherwise, it is the string\n",
        "303": "     * representation of the element, followed by the three characters {@code\n",
        "304": "     * \" x \"} (space, letter x, space), followed by the count.\n",
        "337": "   * <pre>   {@code\n",
        "339": "   *   ((element == null) ? 0 : element.hashCode()) ^ count(element)}</pre>\n",
        "341": "   * <p>over all distinct elements in the multiset. It follows that a multiset and\n",
        "342": "   * its entry set always have the same hash code.\n",
        "350": "   * <p>It is recommended, though not mandatory, that this method return the\n",
        "351": "   * result of invoking {@link #toString} on the {@link #entrySet}, yielding a\n",
        "352": "   * result such as {@code [a x 3, c, d x 2, e]}.\n",
        "362": "   * <p>Elements that occur multiple times in the multiset will appear\n",
        "363": "   * multiple times in this iterator, though not necessarily sequentially.\n",
        "371": "   * <p>This method refines {@link Collection#contains} to further specify that\n",
        "372": "   * it <b>may not</b> throw an exception in response to {@code element} being\n",
        "373": "   * null or of the wrong type.\n",
        "376": "   * @return {@code true} if this multiset contains at least one occurrence of\n",
        "377": "   *     the element\n",
        "383": "   * Returns {@code true} if this multiset contains at least one occurrence of\n",
        "384": "   * each element in the specified collection.\n",
        "385": "   *\n",
        "386": "   * <p>This method refines {@link Collection#containsAll} to further specify\n",
        "387": "   * that it <b>may not</b> throw an exception in response to any of {@code\n",
        "388": "   * elements} being null or of the wrong type.\n",
        "389": "   *\n",
        "390": "   * <p><b>Note:</b> this method does not take into account the occurrence\n",
        "391": "   * count of an element in the two collections; it may still return {@code\n",
        "392": "   * true} even if {@code elements} contains several occurrences of an element\n",
        "393": "   * and this multiset contains only one. This is no different than any other\n",
        "394": "   * collection type like {@link List}, but it may be unexpected to the user of\n",
        "395": "   * a multiset.\n",
        "396": "   *\n",
        "397": "   * @param elements the collection of elements to be checked for containment in\n",
        "398": "   *     this multiset\n",
        "399": "   * @return {@code true} if this multiset contains at least one occurrence of\n",
        "400": "   *     each element contained in {@code elements}\n",
        "409": "   * <p>This method refines {@link Collection#add}, which only <i>ensures</i>\n",
        "410": "   * the presence of the element, to further specify that a successful call must\n",
        "411": "   * always increment the count of the element, and the overall size of the\n",
        "412": "   * collection, by one.\n",
        "413": "   *\n",
        "414": "   * <p>To both add the element and obtain the previous count of that element,\n",
        "415": "   * use {@link #add(Object, int) add}{@code (element, 1)} instead.\n",
        "416": "   *\n",
        "417": "   * @param element the element to add one occurrence of; may be null only if\n",
        "418": "   *     explicitly allowed by the implementation\n",
        "419": "   * @return {@code true} always, since this call is required to modify the\n",
        "420": "   *     multiset, unlike other {@link Collection} types\n",
        "421": "   * @throws NullPointerException if {@code element} is null and this\n",
        "422": "   *     implementation does not permit null elements\n",
        "423": "   * @throws IllegalArgumentException if {@link Integer#MAX_VALUE} occurrences\n",
        "424": "   *     of {@code element} are already contained in this multiset\n",
        "431": "   * Removes a <i>single</i> occurrence of the specified element from this\n",
        "432": "   * multiset, if present.\n",
        "434": "   * <p>This method refines {@link Collection#remove} to further specify that it\n",
        "435": "   * <b>may not</b> throw an exception in response to {@code element} being null\n",
        "436": "   * or of the wrong type.\n",
        "438": "   * <p>To both remove the element and obtain the previous count of that element,\n",
        "439": "   * use {@link #remove(Object, int) remove}{@code (element, 1)} instead.\n",
        "451": "   * <p><b>Note:</b> This method ignores how often any element might appear in\n",
        "452": "   * {@code c}, and only cares whether or not an element appears at all.\n",
        "453": "   * If you wish to remove one occurrence in this multiset for every occurrence\n",
        "454": "   * in {@code c}, see {@link Multisets#removeOccurrences(Multiset, Multiset)}.\n",
        "456": "   * <p>This method refines {@link Collection#removeAll} to further specify that\n",
        "457": "   * it <b>may not</b> throw an exception in response to any of {@code elements}\n",
        "458": "   * being null or of the wrong type.\n",
        "467": "   * <p><b>Note:</b> This method ignores how often any element might appear in\n",
        "468": "   * {@code c}, and only cares whether or not an element appears at all.\n",
        "469": "   * If you wish to remove one occurrence in this multiset for every occurrence\n",
        "470": "   * in {@code c}, see {@link Multisets#retainOccurrences(Multiset, Multiset)}.\n",
        "472": "   * <p>This method refines {@link Collection#retainAll} to further specify that\n",
        "473": "   * it <b>may not</b> throw an exception in response to any of {@code elements}\n",
        "474": "   * being null or of the wrong type.\n"
    }
}