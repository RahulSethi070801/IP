{
    "addition": {
        "25": " * Tests serialization and deserialization of an object, optionally asserting that the resulting\n",
        "26": " * object is equal to the original.\n",
        "28": " * <p><b>GWT warning:</b> Under GWT, both methods simply returns their input, as proper GWT\n",
        "29": " * serialization tests require more setup. This no-op behavior allows test authors to intersperse\n",
        "30": " * {@code SerializableTester} calls with other, GWT-compatible tests.\n",
        "44": "   * <p><b>GWT warning:</b> Under GWT, this method simply returns its input, as proper GWT\n",
        "45": "   * serialization tests require more setup. This no-op behavior allows test authors to intersperse\n",
        "46": "   * {@code SerializableTester} calls with other, GWT-compatible tests.\n",
        "48": "   * <p>Note that the specified object may not be known by the compiler to be a {@link\n",
        "49": "   * java.io.Serializable} instance, and is thus declared an {@code Object}. For example, it might\n",
        "50": "   * be declared as a {@code List}.\n",
        "53": "   * @throws RuntimeException if the specified object was not successfully serialized or\n",
        "54": "   *     deserialized\n",
        "62": "   * Serializes and deserializes the specified object and verifies that the re-serialized object is\n",
        "63": "   * equal to the provided object, that the hashcodes are identical, and that the class of the\n",
        "64": "   * re-serialized object is identical to that of the original.\n",
        "66": "   * <p><b>GWT warning:</b> Under GWT, this method simply returns its input, as proper GWT\n",
        "67": "   * serialization tests require more setup. This no-op behavior allows test authors to intersperse\n",
        "68": "   * {@code SerializableTester} calls with other, GWT-compatible tests.\n",
        "70": "   * <p>Note that the specified object may not be known by the compiler to be a {@link\n",
        "71": "   * java.io.Serializable} instance, and is thus declared an {@code Object}. For example, it might\n",
        "72": "   * be declared as a {@code List}.\n",
        "74": "   * <p>Note also that serialization is not in general required to return an object that is\n",
        "75": "   * {@linkplain Object#equals equal} to the original, nor is it required to return even an object\n",
        "76": "   * of the same class. For example, if sublists of {@code MyList} instances were serializable,\n",
        "77": "   * those sublists might implement a private {@code MySubList} type but serialize as a plain {@code\n",
        "78": "   * MyList} to save space. So long as {@code MyList} has all the public supertypes of {@code\n",
        "79": "   * MySubList}, this is safe. For these cases, for which {@code reserializeAndAssert} is too\n",
        "80": "   * strict, use {@link #reserialize}.\n",
        "83": "   * @throws RuntimeException if the specified object was not successfully serialized or\n",
        "84": "   *     deserialized\n",
        "85": "   * @throws AssertionFailedError if the re-serialized object is not equal to the original object,\n",
        "86": "   *     or if the hashcodes are different.\n",
        "90": "    new EqualsTester().addEqualityGroup(object, copy).testEquals();\n"
    },
    "removed": {
        "25": " * Tests serialization and deserialization of an object, optionally asserting\n",
        "26": " * that the resulting object is equal to the original.\n",
        "28": " * <p><b>GWT warning:</b> Under GWT, both methods simply returns their input,\n",
        "29": " * as proper GWT serialization tests require more setup.  This no-op behavior\n",
        "30": " * allows test authors to intersperse {@code SerializableTester} calls with\n",
        "31": " * other, GWT-compatible tests.\n",
        "45": "   * <p><b>GWT warning:</b> Under GWT, this method simply returns its input, as\n",
        "46": "   * proper GWT serialization tests require more setup.  This no-op behavior\n",
        "47": "   * allows test authors to intersperse {@code SerializableTester} calls with\n",
        "48": "   * other, GWT-compatible tests.\n",
        "50": "   * <p>Note that the specified object may not be known by the compiler to be a\n",
        "51": "   * {@link java.io.Serializable} instance, and is thus declared an\n",
        "52": "   * {@code Object}. For example, it might be declared as a {@code List}.\n",
        "55": "   * @throws RuntimeException if the specified object was not successfully\n",
        "56": "   *     serialized or deserialized\n",
        "64": "   * Serializes and deserializes the specified object and verifies that the\n",
        "65": "   * re-serialized object is equal to the provided object, that the hashcodes\n",
        "66": "   * are identical, and that the class of the re-serialized object is identical\n",
        "67": "   * to that of the original.\n",
        "69": "   * <p><b>GWT warning:</b> Under GWT, this method simply returns its input, as\n",
        "70": "   * proper GWT serialization tests require more setup.  This no-op behavior\n",
        "71": "   * allows test authors to intersperse {@code SerializableTester} calls with\n",
        "72": "   * other, GWT-compatible tests.\n",
        "74": "   * <p>Note that the specified object may not be known by the compiler to be a\n",
        "75": "   * {@link java.io.Serializable} instance, and is thus declared an\n",
        "76": "   * {@code Object}. For example, it might be declared as a {@code List}.\n",
        "78": "   * <p>Note also that serialization is not in general required to return an\n",
        "79": "   * object that is {@linkplain Object#equals equal} to the original, nor is it\n",
        "80": "   * required to return even an object of the same class. For example, if\n",
        "81": "   * sublists of {@code MyList} instances were serializable, those sublists\n",
        "82": "   * might implement a private {@code MySubList} type but serialize as a plain\n",
        "83": "   * {@code MyList} to save space. So long as {@code MyList} has all the public\n",
        "84": "   * supertypes of {@code MySubList}, this is safe. For these cases, for which\n",
        "85": "   * {@code reserializeAndAssert} is too strict, use {@link #reserialize}.\n",
        "88": "   * @throws RuntimeException if the specified object was not successfully\n",
        "89": "   *     serialized or deserialized\n",
        "90": "   * @throws AssertionFailedError if the re-serialized object is not equal to\n",
        "91": "   *     the original object, or if the hashcodes are different.\n",
        "95": "    new EqualsTester()\n",
        "96": "        .addEqualityGroup(object, copy)\n",
        "97": "        .testEquals();\n"
    }
}