{
    "addition": {
        "25": "/** @author David Beaumont */\n",
        "52": "    assertEquals(\"XheXXuickXXrownXXoxX\", builder.build().escape(\"The Quick Brown Fox!\"));\n",
        "56": "    assertEquals(\"Xhe_Xuick_Xrown_Xox_\", builder.build().escape(\"The Quick Brown Fox!\"));\n",
        "59": "    assertEquals(\"The_Quick_Brown_Fox_\", builder.build().escape(\"The Quick Brown Fox!\"));\n",
        "82": "    CharEscaper charEscaper =\n",
        "83": "        createSimpleCharEscaper(\n",
        "84": "            ImmutableMap.<Character, char[]>builder()\n",
        "85": "                .put('x', \"<hello>\".toCharArray())\n",
        "86": "                .put('\\uD800', \"<hi>\".toCharArray())\n",
        "87": "                .put('\\uDC00', \"<lo>\".toCharArray())\n",
        "88": "                .build());\n",
        "112": "  static CharEscaper createSimpleCharEscaper(final ImmutableMap<Character, char[]> replacementMap) {\n",
        "114": "      @Override\n",
        "115": "      protected char[] escape(char c) {\n",
        "125": "      @Override\n",
        "126": "      protected char[] escape(int cp) {\n"
    },
    "removed": {
        "25": "/**\n",
        "26": " * @author David Beaumont\n",
        "27": " */\n",
        "54": "    assertEquals(\"XheXXuickXXrownXXoxX\",\n",
        "55": "        builder.build().escape(\"The Quick Brown Fox!\"));\n",
        "59": "    assertEquals(\"Xhe_Xuick_Xrown_Xox_\",\n",
        "60": "        builder.build().escape(\"The Quick Brown Fox!\"));\n",
        "63": "    assertEquals(\"The_Quick_Brown_Fox_\",\n",
        "64": "        builder.build().escape(\"The Quick Brown Fox!\"));\n",
        "87": "    CharEscaper charEscaper = createSimpleCharEscaper(\n",
        "88": "        ImmutableMap.<Character, char[]>builder()\n",
        "89": "            .put('x', \"<hello>\".toCharArray())\n",
        "90": "            .put('\\uD800', \"<hi>\".toCharArray())\n",
        "91": "            .put('\\uDC00', \"<lo>\".toCharArray())\n",
        "92": "            .build());\n",
        "116": "  static CharEscaper createSimpleCharEscaper(\n",
        "117": "      final ImmutableMap<Character, char[]> replacementMap) {\n",
        "119": "      @Override protected char[] escape(char c) {\n",
        "129": "      @Override protected char[] escape(int cp) {\n"
    }
}