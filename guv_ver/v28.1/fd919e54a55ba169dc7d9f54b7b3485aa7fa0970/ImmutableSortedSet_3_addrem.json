{
    "addition": {
        "55": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\"> immutable collections</a>.\n",
        "70": "   * Returns a {@code Collector} that accumulates the input elements into a new {@code\n",
        "71": "   * ImmutableSortedSet}, ordered by the specified comparator.\n",
        "73": "   * <p>If the elements contain duplicates (according to the comparator), only the first duplicate\n",
        "74": "   * in encounter order will appear in the result.\n",
        "92": "  /** Returns the empty immutable sorted set. */\n",
        "97": "  /** Returns an immutable sorted set containing a single element. */\n",
        "103": "   * Returns an immutable sorted set containing the given elements sorted by their natural ordering.\n",
        "104": "   * When multiple elements are equivalent according to {@link Comparable#compareTo}, only the first\n",
        "105": "   * one specified is included.\n",
        "115": "   * Returns an immutable sorted set containing the given elements sorted by their natural ordering.\n",
        "116": "   * When multiple elements are equivalent according to {@link Comparable#compareTo}, only the first\n",
        "117": "   * one specified is included.\n",
        "127": "   * Returns an immutable sorted set containing the given elements sorted by their natural ordering.\n",
        "128": "   * When multiple elements are equivalent according to {@link Comparable#compareTo}, only the first\n",
        "129": "   * one specified is included.\n",
        "139": "   * Returns an immutable sorted set containing the given elements sorted by their natural ordering.\n",
        "140": "   * When multiple elements are equivalent according to {@link Comparable#compareTo}, only the first\n",
        "141": "   * one specified is included.\n",
        "152": "   * Returns an immutable sorted set containing the given elements sorted by their natural ordering.\n",
        "153": "   * When multiple elements are equivalent according to {@link Comparable#compareTo}, only the first\n",
        "154": "   * one specified is included.\n",
        "176": "   * Returns an immutable sorted set containing the given elements sorted by their natural ordering.\n",
        "177": "   * When multiple elements are equivalent according to {@link Comparable#compareTo}, only the first\n",
        "178": "   * one specified is included.\n",
        "188": "   * Returns an immutable sorted set containing the given elements sorted by their natural ordering.\n",
        "189": "   * When multiple elements are equivalent according to {@code compareTo()}, only the first one\n",
        "190": "   * specified is included. To create a copy of a {@code SortedSet} that preserves the comparator,\n",
        "191": "   * call {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once.\n",
        "192": "   *\n",
        "193": "   * <p>Note that if {@code s} is a {@code Set<String>}, then {@code ImmutableSortedSet.copyOf(s)}\n",
        "194": "   * returns an {@code ImmutableSortedSet<String>} containing each of the strings in {@code s},\n",
        "195": "   * while {@code ImmutableSortedSet.of(s)} returns an {@code ImmutableSortedSet<Set<String>>}\n",
        "196": "   * containing one element (the given set itself).\n",
        "197": "   *\n",
        "198": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "199": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "200": "   * undocumented and subject to change.\n",
        "201": "   *\n",
        "202": "   * <p>This method is not type-safe, as it may be called on elements that are not mutually\n",
        "203": "   * comparable.\n",
        "217": "   * Returns an immutable sorted set containing the given elements sorted by their natural ordering.\n",
        "218": "   * When multiple elements are equivalent according to {@code compareTo()}, only the first one\n",
        "219": "   * specified is included. To create a copy of a {@code SortedSet} that preserves the comparator,\n",
        "220": "   * call {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once.\n",
        "221": "   *\n",
        "222": "   * <p>Note that if {@code s} is a {@code Set<String>}, then {@code ImmutableSortedSet.copyOf(s)}\n",
        "223": "   * returns an {@code ImmutableSortedSet<String>} containing each of the strings in {@code s},\n",
        "224": "   * while {@code ImmutableSortedSet.of(s)} returns an {@code ImmutableSortedSet<Set<String>>}\n",
        "225": "   * containing one element (the given set itself).\n",
        "226": "   *\n",
        "227": "   * <p><b>Note:</b> Despite what the method name suggests, if {@code elements} is an {@code\n",
        "228": "   * ImmutableSortedSet}, it may be returned instead of a copy.\n",
        "229": "   *\n",
        "230": "   * <p>This method is not type-safe, as it may be called on elements that are not mutually\n",
        "231": "   * comparable.\n",
        "232": "   *\n",
        "233": "   * <p>This method is safe to use even when {@code elements} is a synchronized or concurrent\n",
        "234": "   * collection that is currently being modified by another thread.\n",
        "249": "   * Returns an immutable sorted set containing the given elements sorted by their natural ordering.\n",
        "250": "   * When multiple elements are equivalent according to {@code compareTo()}, only the first one\n",
        "251": "   * specified is included.\n",
        "253": "   * <p>This method is not type-safe, as it may be called on elements that are not mutually\n",
        "254": "   * comparable.\n",
        "268": "   * Returns an immutable sorted set containing the given elements sorted by the given {@code\n",
        "269": "   * Comparator}. When multiple elements are equivalent according to {@code compareTo()}, only the\n",
        "270": "   * first one specified is included.\n",
        "272": "   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null\n",
        "280": "   * Returns an immutable sorted set containing the given elements sorted by the given {@code\n",
        "281": "   * Comparator}. When multiple elements are equivalent according to {@code compare()}, only the\n",
        "282": "   * first one specified is included. This method iterates over {@code elements} at most once.\n",
        "284": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "285": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "286": "   * undocumented and subject to change.\n",
        "288": "   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null\n",
        "308": "   * Returns an immutable sorted set containing the given elements sorted by the given {@code\n",
        "309": "   * Comparator}. When multiple elements are equivalent according to {@code compareTo()}, only the\n",
        "310": "   * first one specified is included.\n",
        "312": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "313": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "314": "   * undocumented and subject to change.\n",
        "316": "   * <p>This method is safe to use even when {@code elements} is a synchronized or concurrent\n",
        "317": "   * collection that is currently being modified by another thread.\n",
        "319": "   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null\n",
        "328": "   * Returns an immutable sorted set containing the elements of a sorted set, sorted by the same\n",
        "329": "   * {@code Comparator}. That behavior differs from {@link #copyOf(Iterable)}, which always uses the\n",
        "330": "   * natural ordering of the elements.\n",
        "332": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "333": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "334": "   * undocumented and subject to change.\n",
        "336": "   * <p>This method is safe to use even when {@code sortedSet} is a synchronized or concurrent\n",
        "337": "   * collection that is currently being modified by another thread.\n",
        "339": "   * @throws NullPointerException if {@code sortedSet} or any of its elements is null\n",
        "352": "   * Constructs an {@code ImmutableSortedSet} from the first {@code n} elements of {@code contents}.\n",
        "353": "   * If {@code k} is the size of the returned {@code ImmutableSortedSet}, then the sorted unique\n",
        "354": "   * elements are in the first {@code k} positions of {@code contents}, and {@code contents[i] ==\n",
        "355": "   * null} for {@code k <= i < n}.\n",
        "360": "   * @throws NullPointerException if any of the first {@code n} elements of {@code contents} is null\n",
        "383": "   * Returns a builder that creates immutable sorted sets with an explicit comparator. If the\n",
        "384": "   * comparator has a more general type than the set being generated, such as creating a {@code\n",
        "385": "   * SortedSet<Integer>} with a {@code Comparator<Number>}, use the {@link Builder} constructor\n",
        "386": "   * instead.\n",
        "395": "   * Returns a builder that creates immutable sorted sets whose elements are ordered by the reverse\n",
        "396": "   * of their natural ordering.\n",
        "403": "   * Returns a builder that creates immutable sorted sets whose elements are ordered by their\n",
        "404": "   * natural ordering. The sorted sets use {@link Ordering#natural()} as the comparator. This method\n",
        "405": "   * provides more type-safety than {@link #builder}, as it can be called only for classes that\n",
        "406": "   * implement {@link Comparable}.\n",
        "413": "   * A builder for creating immutable sorted set instances, especially {@code public static final}\n",
        "414": "   * sets (\"constant sets\"), with a given comparator. Example:\n",
        "416": "   * <pre>{@code\n",
        "417": "   * public static final ImmutableSortedSet<Number> LUCKY_NUMBERS =\n",
        "418": "   *     new ImmutableSortedSet.Builder<Number>(ODDS_FIRST_COMPARATOR)\n",
        "419": "   *         .addAll(SINGLE_DIGIT_PRIMES)\n",
        "420": "   *         .add(42)\n",
        "421": "   *         .build();\n",
        "422": "   * }</pre>\n",
        "424": "   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build\n",
        "425": "   * multiple sets in series. Each set is a superset of the set created before it.\n",
        "433": "     * Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n",
        "434": "     * ImmutableSortedSet#orderedBy}.\n",
        "441": "     * Adds {@code element} to the {@code ImmutableSortedSet}. If the {@code ImmutableSortedSet}\n",
        "442": "     * already contains {@code element}, then {@code add} has no effect. (only the previously added\n",
        "443": "     * element is retained).\n",
        "457": "     * Adds each element of {@code elements} to the {@code ImmutableSortedSet}, ignoring duplicate\n",
        "458": "     * elements (only the first duplicate element is added).\n",
        "472": "     * Adds each element of {@code elements} to the {@code ImmutableSortedSet}, ignoring duplicate\n",
        "473": "     * elements (only the first duplicate element is added).\n",
        "487": "     * Adds each element of {@code elements} to the {@code ImmutableSortedSet}, ignoring duplicate\n",
        "488": "     * elements (only the first duplicate element is added).\n",
        "509": "     * Returns a newly-created {@code ImmutableSortedSet} based on the contents of the {@code\n",
        "510": "     * Builder} and its comparator.\n",
        "542": "   * Returns the comparator that orders the elements, which is {@link Ordering#natural()} when the\n",
        "543": "   * natural ordering of the elements is used. Note that its behavior is not consistent with {@link\n",
        "544": "   * SortedSet#comparator()}, which returns {@code null} to indicate natural ordering.\n",
        "559": "   * <p>The {@link SortedSet#headSet} documentation states that a subset of a subset throws an\n",
        "560": "   * {@link IllegalArgumentException} if passed a {@code toElement} greater than an earlier {@code\n",
        "561": "   * toElement}. However, this method doesn't throw an exception in that situation, but instead\n",
        "562": "   * keeps the original {@code toElement}.\n",
        "569": "  /** @since 12.0 */\n",
        "581": "   * <p>The {@link SortedSet#subSet} documentation states that a subset of a subset throws an {@link\n",
        "582": "   * IllegalArgumentException} if passed a {@code fromElement} smaller than an earlier {@code\n",
        "583": "   * fromElement}. However, this method doesn't throw an exception in that situation, but instead\n",
        "584": "   * keeps the original {@code fromElement}. Similarly, this method keeps the original {@code\n",
        "585": "   * toElement}, instead of throwing an exception, if passed a {@code toElement} greater than an\n",
        "586": "   * earlier {@code toElement}.\n",
        "593": "  /** @since 12.0 */\n",
        "609": "   * <p>The {@link SortedSet#tailSet} documentation states that a subset of a subset throws an\n",
        "610": "   * {@link IllegalArgumentException} if passed a {@code fromElement} smaller than an earlier {@code\n",
        "611": "   * fromElement}. However, this method doesn't throw an exception in that situation, but instead\n",
        "612": "   * keeps the original {@code fromElement}.\n",
        "619": "  /** @since 12.0 */\n",
        "637": "  /** @since 12.0 */\n",
        "644": "  /** @since 12.0 */\n",
        "651": "  /** @since 12.0 */\n",
        "658": "  /** @since 12.0 */\n",
        "709": "  /** @since 12.0 */\n",
        "751": "  /** @since 12.0 */\n",
        "756": "  /** Returns the position of an element within the set, or -1 if not present. */\n"
    },
    "removed": {
        "55": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\">\n",
        "56": " * immutable collections</a>.\n",
        "71": "   * Returns a {@code Collector} that accumulates the input elements into a new\n",
        "72": "   * {@code ImmutableSortedSet}, ordered by the specified comparator.\n",
        "74": "   * <p>If the elements contain duplicates (according to the comparator),\n",
        "75": "   * only the first duplicate in encounter order will appear in the result.\n",
        "93": "  /**\n",
        "94": "   * Returns the empty immutable sorted set.\n",
        "95": "   */\n",
        "100": "  /**\n",
        "101": "   * Returns an immutable sorted set containing a single element.\n",
        "102": "   */\n",
        "108": "   * Returns an immutable sorted set containing the given elements sorted by\n",
        "109": "   * their natural ordering. When multiple elements are equivalent according to\n",
        "110": "   * {@link Comparable#compareTo}, only the first one specified is included.\n",
        "120": "   * Returns an immutable sorted set containing the given elements sorted by\n",
        "121": "   * their natural ordering. When multiple elements are equivalent according to\n",
        "122": "   * {@link Comparable#compareTo}, only the first one specified is included.\n",
        "132": "   * Returns an immutable sorted set containing the given elements sorted by\n",
        "133": "   * their natural ordering. When multiple elements are equivalent according to\n",
        "134": "   * {@link Comparable#compareTo}, only the first one specified is included.\n",
        "144": "   * Returns an immutable sorted set containing the given elements sorted by\n",
        "145": "   * their natural ordering. When multiple elements are equivalent according to\n",
        "146": "   * {@link Comparable#compareTo}, only the first one specified is included.\n",
        "157": "   * Returns an immutable sorted set containing the given elements sorted by\n",
        "158": "   * their natural ordering. When multiple elements are equivalent according to\n",
        "159": "   * {@link Comparable#compareTo}, only the first one specified is included.\n",
        "181": "   * Returns an immutable sorted set containing the given elements sorted by\n",
        "182": "   * their natural ordering. When multiple elements are equivalent according to\n",
        "183": "   * {@link Comparable#compareTo}, only the first one specified is included.\n",
        "193": "   * Returns an immutable sorted set containing the given elements sorted by\n",
        "194": "   * their natural ordering. When multiple elements are equivalent according to\n",
        "195": "   * {@code compareTo()}, only the first one specified is included. To create a\n",
        "196": "   * copy of a {@code SortedSet} that preserves the comparator, call {@link\n",
        "197": "   * #copyOfSorted} instead. This method iterates over {@code elements} at most\n",
        "198": "   * once.\n",
        "199": "   *\n",
        "200": "   * <p>Note that if {@code s} is a {@code Set<String>}, then {@code\n",
        "201": "   * ImmutableSortedSet.copyOf(s)} returns an {@code ImmutableSortedSet<String>}\n",
        "202": "   * containing each of the strings in {@code s}, while {@code\n",
        "203": "   * ImmutableSortedSet.of(s)} returns an {@code\n",
        "204": "   * ImmutableSortedSet<Set<String>>} containing one element (the given set\n",
        "205": "   * itself).\n",
        "206": "   *\n",
        "207": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "208": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "209": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "210": "   *\n",
        "211": "   * <p>This method is not type-safe, as it may be called on elements that are\n",
        "212": "   * not mutually comparable.\n",
        "226": "   * Returns an immutable sorted set containing the given elements sorted by\n",
        "227": "   * their natural ordering. When multiple elements are equivalent according to\n",
        "228": "   * {@code compareTo()}, only the first one specified is included. To create a\n",
        "229": "   * copy of a {@code SortedSet} that preserves the comparator, call\n",
        "230": "   * {@link #copyOfSorted} instead. This method iterates over {@code elements}\n",
        "231": "   * at most once.\n",
        "232": "   *\n",
        "233": "   * <p>Note that if {@code s} is a {@code Set<String>}, then\n",
        "234": "   * {@code ImmutableSortedSet.copyOf(s)} returns an\n",
        "235": "   * {@code ImmutableSortedSet<String>} containing each of the strings in\n",
        "236": "   * {@code s}, while {@code ImmutableSortedSet.of(s)} returns an\n",
        "237": "   * {@code ImmutableSortedSet<Set<String>>} containing one element (the given\n",
        "238": "   * set itself).\n",
        "239": "   *\n",
        "240": "   * <p><b>Note:</b> Despite what the method name suggests, if {@code elements}\n",
        "241": "   * is an {@code ImmutableSortedSet}, it may be returned instead of a copy.\n",
        "242": "   *\n",
        "243": "   * <p>This method is not type-safe, as it may be called on elements that are\n",
        "244": "   * not mutually comparable.\n",
        "245": "   *\n",
        "246": "   * <p>This method is safe to use even when {@code elements} is a synchronized\n",
        "247": "   * or concurrent collection that is currently being modified by another\n",
        "248": "   * thread.\n",
        "263": "   * Returns an immutable sorted set containing the given elements sorted by\n",
        "264": "   * their natural ordering. When multiple elements are equivalent according to\n",
        "265": "   * {@code compareTo()}, only the first one specified is included.\n",
        "267": "   * <p>This method is not type-safe, as it may be called on elements that are\n",
        "268": "   * not mutually comparable.\n",
        "282": "   * Returns an immutable sorted set containing the given elements sorted by\n",
        "283": "   * the given {@code Comparator}. When multiple elements are equivalent\n",
        "284": "   * according to {@code compareTo()}, only the first one specified is\n",
        "285": "   * included.\n",
        "287": "   * @throws NullPointerException if {@code comparator} or any of\n",
        "288": "   *     {@code elements} is null\n",
        "296": "   * Returns an immutable sorted set containing the given elements sorted by\n",
        "297": "   * the given {@code Comparator}. When multiple elements are equivalent\n",
        "298": "   * according to {@code compare()}, only the first one specified is\n",
        "299": "   * included. This method iterates over {@code elements} at most once.\n",
        "301": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "302": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "303": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "305": "   * @throws NullPointerException if {@code comparator} or any of {@code\n",
        "306": "   *         elements} is null\n",
        "326": "   * Returns an immutable sorted set containing the given elements sorted by\n",
        "327": "   * the given {@code Comparator}. When multiple elements are equivalent\n",
        "328": "   * according to {@code compareTo()}, only the first one specified is\n",
        "329": "   * included.\n",
        "331": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "332": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "333": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "335": "   * <p>This method is safe to use even when {@code elements} is a synchronized\n",
        "336": "   * or concurrent collection that is currently being modified by another\n",
        "337": "   * thread.\n",
        "339": "   * @throws NullPointerException if {@code comparator} or any of\n",
        "340": "   *     {@code elements} is null\n",
        "349": "   * Returns an immutable sorted set containing the elements of a sorted set,\n",
        "350": "   * sorted by the same {@code Comparator}. That behavior differs from {@link\n",
        "351": "   * #copyOf(Iterable)}, which always uses the natural ordering of the\n",
        "352": "   * elements.\n",
        "354": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "355": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "356": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "358": "   * <p>This method is safe to use even when {@code sortedSet} is a synchronized\n",
        "359": "   * or concurrent collection that is currently being modified by another\n",
        "360": "   * thread.\n",
        "362": "   * @throws NullPointerException if {@code sortedSet} or any of its elements\n",
        "363": "   *     is null\n",
        "376": "   * Constructs an {@code ImmutableSortedSet} from the first {@code n} elements of\n",
        "377": "   * {@code contents}.  If {@code k} is the size of the returned {@code ImmutableSortedSet}, then\n",
        "378": "   * the sorted unique elements are in the first {@code k} positions of {@code contents}, and\n",
        "379": "   * {@code contents[i] == null} for {@code k <= i < n}.\n",
        "384": "   * @throws NullPointerException if any of the first {@code n} elements of {@code contents} is\n",
        "385": "   *          null\n",
        "408": "   * Returns a builder that creates immutable sorted sets with an explicit\n",
        "409": "   * comparator. If the comparator has a more general type than the set being\n",
        "410": "   * generated, such as creating a {@code SortedSet<Integer>} with a\n",
        "411": "   * {@code Comparator<Number>}, use the {@link Builder} constructor instead.\n",
        "420": "   * Returns a builder that creates immutable sorted sets whose elements are\n",
        "421": "   * ordered by the reverse of their natural ordering.\n",
        "428": "   * Returns a builder that creates immutable sorted sets whose elements are\n",
        "429": "   * ordered by their natural ordering. The sorted sets use {@link\n",
        "430": "   * Ordering#natural()} as the comparator. This method provides more\n",
        "431": "   * type-safety than {@link #builder}, as it can be called only for classes\n",
        "432": "   * that implement {@link Comparable}.\n",
        "439": "   * A builder for creating immutable sorted set instances, especially {@code\n",
        "440": "   * public static final} sets (\"constant sets\"), with a given comparator.\n",
        "441": "   * Example: <pre>   {@code\n",
        "443": "   *   public static final ImmutableSortedSet<Number> LUCKY_NUMBERS =\n",
        "444": "   *       new ImmutableSortedSet.Builder<Number>(ODDS_FIRST_COMPARATOR)\n",
        "445": "   *           .addAll(SINGLE_DIGIT_PRIMES)\n",
        "446": "   *           .add(42)\n",
        "447": "   *           .build();}</pre>\n",
        "449": "   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple\n",
        "450": "   * times to build multiple sets in series. Each set is a superset of the set\n",
        "451": "   * created before it.\n",
        "459": "     * Creates a new builder. The returned builder is equivalent to the builder\n",
        "460": "     * generated by {@link ImmutableSortedSet#orderedBy}.\n",
        "467": "     * Adds {@code element} to the {@code ImmutableSortedSet}.  If the\n",
        "468": "     * {@code ImmutableSortedSet} already contains {@code element}, then\n",
        "469": "     * {@code add} has no effect. (only the previously added element\n",
        "470": "     * is retained).\n",
        "484": "     * Adds each element of {@code elements} to the {@code ImmutableSortedSet},\n",
        "485": "     * ignoring duplicate elements (only the first duplicate element is added).\n",
        "499": "     * Adds each element of {@code elements} to the {@code ImmutableSortedSet},\n",
        "500": "     * ignoring duplicate elements (only the first duplicate element is added).\n",
        "514": "     * Adds each element of {@code elements} to the {@code ImmutableSortedSet},\n",
        "515": "     * ignoring duplicate elements (only the first duplicate element is added).\n",
        "536": "     * Returns a newly-created {@code ImmutableSortedSet} based on the contents\n",
        "537": "     * of the {@code Builder} and its comparator.\n",
        "569": "   * Returns the comparator that orders the elements, which is\n",
        "570": "   * {@link Ordering#natural()} when the natural ordering of the\n",
        "571": "   * elements is used. Note that its behavior is not consistent with\n",
        "572": "   * {@link SortedSet#comparator()}, which returns {@code null} to indicate\n",
        "573": "   * natural ordering.\n",
        "588": "   * <p>The {@link SortedSet#headSet} documentation states that a subset of a\n",
        "589": "   * subset throws an {@link IllegalArgumentException} if passed a\n",
        "590": "   * {@code toElement} greater than an earlier {@code toElement}. However, this\n",
        "591": "   * method doesn't throw an exception in that situation, but instead keeps the\n",
        "592": "   * original {@code toElement}.\n",
        "599": "  /**\n",
        "600": "   * @since 12.0\n",
        "601": "   */\n",
        "613": "   * <p>The {@link SortedSet#subSet} documentation states that a subset of a\n",
        "614": "   * subset throws an {@link IllegalArgumentException} if passed a\n",
        "615": "   * {@code fromElement} smaller than an earlier {@code fromElement}. However,\n",
        "616": "   * this method doesn't throw an exception in that situation, but instead keeps\n",
        "617": "   * the original {@code fromElement}. Similarly, this method keeps the\n",
        "618": "   * original {@code toElement}, instead of throwing an exception, if passed a\n",
        "619": "   * {@code toElement} greater than an earlier {@code toElement}.\n",
        "626": "  /**\n",
        "627": "   * @since 12.0\n",
        "628": "   */\n",
        "644": "   * <p>The {@link SortedSet#tailSet} documentation states that a subset of a\n",
        "645": "   * subset throws an {@link IllegalArgumentException} if passed a\n",
        "646": "   * {@code fromElement} smaller than an earlier {@code fromElement}. However,\n",
        "647": "   * this method doesn't throw an exception in that situation, but instead keeps\n",
        "648": "   * the original {@code fromElement}.\n",
        "655": "  /**\n",
        "656": "   * @since 12.0\n",
        "657": "   */\n",
        "675": "  /**\n",
        "676": "   * @since 12.0\n",
        "677": "   */\n",
        "684": "  /**\n",
        "685": "   * @since 12.0\n",
        "686": "   */\n",
        "693": "  /**\n",
        "694": "   * @since 12.0\n",
        "695": "   */\n",
        "702": "  /**\n",
        "703": "   * @since 12.0\n",
        "704": "   */\n",
        "755": "  /**\n",
        "756": "   * @since 12.0\n",
        "757": "   */\n",
        "799": "  /**\n",
        "800": "   * @since 12.0\n",
        "801": "   */\n",
        "806": "  /**\n",
        "807": "   * Returns the position of an element within the set, or -1 if not present.\n",
        "808": "   */\n"
    }
}