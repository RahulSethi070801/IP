{
    "addition": {
        "49": "    tester.testForwarding(\n",
        "50": "        Arithmetic.class,\n",
        "52": "          @Override\n",
        "53": "          public Arithmetic apply(Arithmetic arithmetic) {\n",
        "57": "    tester.testForwarding(\n",
        "58": "        ParameterTypesDifferent.class,\n",
        "60": "          @Override\n",
        "61": "          public ParameterTypesDifferent apply(ParameterTypesDifferent delegate) {\n",
        "68": "    tester.testForwarding(\n",
        "69": "        Runnable.class,\n",
        "71": "          @Override\n",
        "72": "          public Runnable apply(final Runnable runnable) {\n",
        "79": "    tester.testForwarding(\n",
        "80": "        Runnable.class,\n",
        "82": "          @Override\n",
        "83": "          public Runnable apply(final Runnable runnable) {\n",
        "85": "              @Override\n",
        "86": "              public String toString() {\n",
        "95": "    assertFailure(\n",
        "96": "        Runnable.class,\n",
        "97": "        new Function<Runnable, Runnable>() {\n",
        "98": "          @Override\n",
        "99": "          public Runnable apply(final Runnable runnable) {\n",
        "100": "            return new ForwardingRunnable(runnable) {\n",
        "101": "              @Override\n",
        "102": "              public String toString() {\n",
        "103": "                return \"\";\n",
        "104": "              }\n",
        "105": "            };\n",
        "107": "        },\n",
        "108": "        \"toString()\");\n",
        "113": "    assertFailure(\n",
        "114": "        Runnable.class,\n",
        "115": "        new Function<Runnable, Runnable>() {\n",
        "116": "          @Override\n",
        "117": "          public Runnable apply(final Runnable runnable) {\n",
        "118": "            return new ForwardingRunnable(runnable) {\n",
        "119": "              @Override\n",
        "120": "              public boolean equals(Object o) {\n",
        "121": "                if (o instanceof ForwardingRunnable) {\n",
        "122": "                  ForwardingRunnable that = (ForwardingRunnable) o;\n",
        "123": "                  return runnable.equals(that.runnable);\n",
        "124": "                }\n",
        "125": "                return false;\n",
        "126": "              }\n",
        "127": "            };\n",
        "129": "        },\n",
        "130": "        \"Runnable\");\n",
        "135": "    tester.testForwarding(\n",
        "136": "        Runnable.class,\n",
        "137": "        new Function<Runnable, Runnable>() {\n",
        "138": "          @Override\n",
        "139": "          public Runnable apply(final Runnable runnable) {\n",
        "140": "            return new ForwardingRunnable(runnable) {\n",
        "141": "              @Override\n",
        "142": "              public boolean equals(Object o) {\n",
        "143": "                if (o instanceof ForwardingRunnable) {\n",
        "144": "                  ForwardingRunnable that = (ForwardingRunnable) o;\n",
        "145": "                  return runnable.equals(that.runnable);\n",
        "146": "                }\n",
        "147": "                return false;\n",
        "148": "              }\n",
        "149": "\n",
        "150": "              @Override\n",
        "151": "              public int hashCode() {\n",
        "152": "                return runnable.hashCode();\n",
        "153": "              }\n",
        "154": "            };\n",
        "156": "        });\n",
        "161": "    assertFailure(\n",
        "162": "        Runnable.class,\n",
        "163": "        new Function<Runnable, Runnable>() {\n",
        "164": "          @Override\n",
        "165": "          public Runnable apply(final Runnable runnable) {\n",
        "166": "            return new ForwardingRunnable(runnable) {\n",
        "167": "              @Override\n",
        "168": "              public int hashCode() {\n",
        "169": "                return runnable.hashCode();\n",
        "170": "              }\n",
        "171": "            };\n",
        "173": "        },\n",
        "174": "        \"Runnable\");\n",
        "178": "    assertFailure(\n",
        "179": "        Runnable.class,\n",
        "181": "          @Override\n",
        "182": "          public Runnable apply(Runnable runnable) {\n",
        "184": "              @Override\n",
        "185": "              public void run() {}\n",
        "188": "        },\n",
        "189": "        \"run()\",\n",
        "190": "        \"Failed to forward\");\n",
        "194": "    assertFailure(\n",
        "195": "        Runnable.class,\n",
        "197": "          @Override\n",
        "198": "          public Runnable apply(final Runnable runnable) {\n",
        "200": "              @Override\n",
        "201": "              public void run() {\n",
        "207": "        },\n",
        "208": "        \"run()\",\n",
        "209": "        \"invoked more than once\");\n",
        "213": "    assertFailure(\n",
        "214": "        Adder.class,\n",
        "215": "        new Function<Adder, Adder>() {\n",
        "216": "          @Override\n",
        "217": "          public Adder apply(Adder adder) {\n",
        "218": "            return new FailsToForwardParameters(adder);\n",
        "219": "          }\n",
        "220": "        },\n",
        "221": "        \"add(\",\n",
        "222": "        \"Parameter #0\");\n",
        "226": "    assertFailure(\n",
        "227": "        Arithmetic.class,\n",
        "228": "        new Function<Arithmetic, Arithmetic>() {\n",
        "229": "          @Override\n",
        "230": "          public Arithmetic apply(Arithmetic adder) {\n",
        "231": "            return new ForwardsToTheWrongMethod(adder);\n",
        "232": "          }\n",
        "233": "        },\n",
        "234": "        \"minus\");\n",
        "238": "    assertFailure(\n",
        "239": "        Adder.class,\n",
        "240": "        new Function<Adder, Adder>() {\n",
        "241": "          @Override\n",
        "242": "          public Adder apply(Adder adder) {\n",
        "243": "            return new FailsToForwardReturnValue(adder);\n",
        "244": "          }\n",
        "245": "        },\n",
        "246": "        \"add(\",\n",
        "247": "        \"Return value\");\n",
        "251": "    assertFailure(\n",
        "252": "        Adder.class,\n",
        "253": "        new Function<Adder, Adder>() {\n",
        "254": "          @Override\n",
        "255": "          public Adder apply(Adder adder) {\n",
        "256": "            return new FailsToPropagageException(adder);\n",
        "257": "          }\n",
        "258": "        },\n",
        "259": "        \"add(\",\n",
        "260": "        \"exception\");\n",
        "267": "    } catch (IllegalArgumentException expected) {\n",
        "268": "    }\n",
        "278": "      Class<T> interfaceType,\n",
        "279": "      Function<T, ? extends T> wrapperFunction,\n",
        "300": "    @Override\n",
        "301": "    public void run() {\n",
        "305": "    @Override\n",
        "306": "    public String toString() {\n",
        "322": "    @Override\n",
        "323": "    public int add(int a, int b) {\n",
        "327": "    @Override\n",
        "328": "    public int minus(int a, int b) {\n",
        "332": "    @Override\n",
        "333": "    public String toString() {\n",
        "345": "    @Override\n",
        "346": "    public int add(int a, int b) {\n",
        "350": "    @Override\n",
        "351": "    public String toString() {\n",
        "363": "    @Override\n",
        "364": "    public int add(int a, int b) {\n",
        "368": "    @Override\n",
        "369": "    public String toString() {\n",
        "381": "    @Override\n",
        "382": "    public int add(int a, int b) {\n",
        "391": "    @Override\n",
        "392": "    public String toString() {\n",
        "408": "    @Override\n",
        "409": "    public int minus(int a, int b) { // bad!\n",
        "413": "    @Override\n",
        "414": "    public int add(int a, int b) {\n",
        "418": "    @Override\n",
        "419": "    public String toString() {\n",
        "425": "    void foo(\n",
        "426": "        String s,\n",
        "427": "        Runnable r,\n",
        "428": "        Number n,\n",
        "429": "        Iterable<?> it,\n",
        "430": "        boolean b,\n",
        "431": "        Equivalence<String> eq,\n",
        "432": "        Exception e,\n",
        "433": "        InputStream in,\n",
        "434": "        Comparable<?> c,\n",
        "435": "        Ordering<Integer> ord,\n",
        "436": "        Charset charset,\n",
        "437": "        TimeUnit unit,\n",
        "438": "        Class<?> cls,\n",
        "439": "        Joiner joiner,\n",
        "440": "        Pattern pattern,\n",
        "441": "        UnsignedInteger ui,\n",
        "442": "        UnsignedLong ul,\n",
        "443": "        StringBuilder sb,\n",
        "444": "        Predicate<?> pred,\n",
        "445": "        Function<?, ?> func,\n",
        "446": "        Object obj);\n",
        "456": "    @Override\n",
        "457": "    public void foo(\n",
        "458": "        String s,\n",
        "459": "        Runnable r,\n",
        "460": "        Number n,\n",
        "461": "        Iterable<?> it,\n",
        "462": "        boolean b,\n",
        "463": "        Equivalence<String> eq,\n",
        "464": "        Exception e,\n",
        "465": "        InputStream in,\n",
        "466": "        Comparable<?> c,\n",
        "467": "        Ordering<Integer> ord,\n",
        "468": "        Charset charset,\n",
        "469": "        TimeUnit unit,\n",
        "470": "        Class<?> cls,\n",
        "471": "        Joiner joiner,\n",
        "472": "        Pattern pattern,\n",
        "473": "        UnsignedInteger ui,\n",
        "474": "        UnsignedLong ul,\n",
        "475": "        StringBuilder sb,\n",
        "476": "        Predicate<?> pred,\n",
        "477": "        Function<?, ?> func,\n",
        "478": "        Object obj) {\n",
        "479": "      delegate.foo(\n",
        "480": "          s, r, n, it, b, eq, e, in, c, ord, charset, unit, cls, joiner, pattern, ui, ul, sb, pred,\n",
        "481": "          func, obj);\n",
        "482": "    }\n",
        "483": "\n",
        "484": "    @Override\n",
        "485": "    public String toString() {\n",
        "491": "    new ForwardingWrapperTester()\n",
        "492": "        .testForwarding(\n",
        "493": "            Sub.class,\n",
        "494": "            new Function<Sub, Sub>() {\n",
        "495": "              @Override\n",
        "496": "              public Sub apply(Sub sub) {\n",
        "497": "                return new ForwardingSub(sub);\n",
        "498": "              }\n",
        "499": "            });\n",
        "507": "    @Override\n",
        "508": "    String getId();\n",
        "518": "    @Override\n",
        "519": "    public String getId() {\n",
        "523": "    @Override\n",
        "524": "    public String toString() {\n",
        "530": "    @Override\n",
        "531": "    boolean equals(Object obj);\n",
        "532": "\n",
        "533": "    @Override\n",
        "534": "    int hashCode();\n",
        "535": "\n",
        "536": "    @Override\n",
        "537": "    String toString();\n",
        "542": "    private static Function<Equals, Equals> WRAPPER =\n",
        "543": "        new Function<Equals, Equals>() {\n",
        "544": "          @Override\n",
        "545": "          public NoDelegateToEquals apply(Equals delegate) {\n",
        "546": "            return new NoDelegateToEquals(delegate);\n",
        "547": "          }\n",
        "548": "        };\n",
        "556": "    @Override\n",
        "557": "    public String toString() {\n",
        "563": "    new ForwardingWrapperTester().testForwarding(Equals.class, NoDelegateToEquals.WRAPPER);\n",
        "577": "  /** An interface for the 2 ways that a chaining call might be defined. */\n",
        "592": "    @Override\n",
        "593": "    public ForwardingChainingCalls chainingCall() {\n",
        "598": "    @Override\n",
        "599": "    public ChainingCalls nonChainingCall() {\n",
        "603": "    @Override\n",
        "604": "    public String toString() {\n",
        "610": "    tester.testForwarding(\n",
        "611": "        ChainingCalls.class,\n",
        "613": "          @Override\n",
        "614": "          public ChainingCalls apply(ChainingCalls delegate) {\n"
    },
    "removed": {
        "49": "    tester.testForwarding(Arithmetic.class,\n",
        "51": "          @Override public Arithmetic apply(Arithmetic arithmetic) {\n",
        "55": "    tester.testForwarding(ParameterTypesDifferent.class,\n",
        "57": "          @Override public ParameterTypesDifferent apply(ParameterTypesDifferent delegate) {\n",
        "64": "    tester.testForwarding(Runnable.class,\n",
        "66": "          @Override public Runnable apply(final Runnable runnable) {\n",
        "73": "    tester.testForwarding(Runnable.class,\n",
        "75": "          @Override public Runnable apply(final Runnable runnable) {\n",
        "77": "              @Override public String toString() {\n",
        "86": "    assertFailure(Runnable.class, new Function<Runnable, Runnable>() {\n",
        "87": "      @Override public Runnable apply(final Runnable runnable) {\n",
        "88": "        return new ForwardingRunnable(runnable) {\n",
        "89": "          @Override public String toString() {\n",
        "90": "            return \"\";\n",
        "92": "        };\n",
        "93": "      }\n",
        "94": "    }, \"toString()\");\n",
        "99": "    assertFailure(Runnable.class, new Function<Runnable, Runnable>() {\n",
        "100": "      @Override public Runnable apply(final Runnable runnable) {\n",
        "101": "        return new ForwardingRunnable(runnable) {\n",
        "102": "          @Override public boolean equals(Object o) {\n",
        "103": "            if (o instanceof ForwardingRunnable) {\n",
        "104": "              ForwardingRunnable that = (ForwardingRunnable) o;\n",
        "105": "              return runnable.equals(that.runnable);\n",
        "106": "            }\n",
        "107": "            return false;\n",
        "109": "        };\n",
        "110": "      }\n",
        "111": "    }, \"Runnable\");\n",
        "116": "    tester.testForwarding(Runnable.class, new Function<Runnable, Runnable>() {\n",
        "117": "      @Override public Runnable apply(final Runnable runnable) {\n",
        "118": "        return new ForwardingRunnable(runnable) {\n",
        "119": "          @Override public boolean equals(Object o) {\n",
        "120": "            if (o instanceof ForwardingRunnable) {\n",
        "121": "              ForwardingRunnable that = (ForwardingRunnable) o;\n",
        "122": "              return runnable.equals(that.runnable);\n",
        "123": "            }\n",
        "124": "            return false;\n",
        "125": "          }\n",
        "126": "          @Override public int hashCode() {\n",
        "127": "            return runnable.hashCode();\n",
        "129": "        };\n",
        "130": "      }\n",
        "131": "    });\n",
        "136": "    assertFailure(Runnable.class, new Function<Runnable, Runnable>() {\n",
        "137": "      @Override public Runnable apply(final Runnable runnable) {\n",
        "138": "        return new ForwardingRunnable(runnable) {\n",
        "139": "          @Override public int hashCode() {\n",
        "140": "            return runnable.hashCode();\n",
        "142": "        };\n",
        "143": "      }\n",
        "144": "    }, \"Runnable\");\n",
        "148": "    assertFailure(Runnable.class,\n",
        "150": "          @Override public Runnable apply(Runnable runnable) {\n",
        "152": "              @Override public void run() {}\n",
        "155": "        }, \"run()\", \"Failed to forward\");\n",
        "159": "    assertFailure(Runnable.class,\n",
        "161": "          @Override public Runnable apply(final Runnable runnable) {\n",
        "163": "              @Override public void run() {\n",
        "169": "        }, \"run()\", \"invoked more than once\");\n",
        "173": "    assertFailure(Adder.class, new Function<Adder, Adder>() {\n",
        "174": "      @Override public Adder apply(Adder adder) {\n",
        "175": "        return new FailsToForwardParameters(adder);\n",
        "176": "      }\n",
        "177": "    }, \"add(\", \"Parameter #0\");\n",
        "181": "    assertFailure(Arithmetic.class, new Function<Arithmetic, Arithmetic>() {\n",
        "182": "      @Override public Arithmetic apply(Arithmetic adder) {\n",
        "183": "        return new ForwardsToTheWrongMethod(adder);\n",
        "184": "      }\n",
        "185": "    }, \"minus\");\n",
        "189": "    assertFailure(Adder.class, new Function<Adder, Adder>() {\n",
        "190": "      @Override public Adder apply(Adder adder) {\n",
        "191": "        return new FailsToForwardReturnValue(adder);\n",
        "192": "      }\n",
        "193": "    }, \"add(\", \"Return value\");\n",
        "197": "    assertFailure(Adder.class, new Function<Adder, Adder>() {\n",
        "198": "      @Override public Adder apply(Adder adder) {\n",
        "199": "        return new FailsToPropagageException(adder);\n",
        "200": "      }\n",
        "201": "    }, \"add(\", \"exception\");\n",
        "208": "    } catch (IllegalArgumentException expected) {}\n",
        "218": "      Class<T> interfaceType, Function<T, ? extends T> wrapperFunction,\n",
        "239": "    @Override public void run() {\n",
        "243": "    @Override public String toString() {\n",
        "259": "    @Override public int add(int a, int b) {\n",
        "263": "    @Override public int minus(int a, int b) {\n",
        "267": "    @Override public String toString() {\n",
        "279": "    @Override public int add(int a, int b) {\n",
        "283": "    @Override public String toString() {\n",
        "295": "    @Override public int add(int a, int b) {\n",
        "299": "    @Override public String toString() {\n",
        "311": "    @Override public int add(int a, int b) {\n",
        "320": "    @Override public String toString() {\n",
        "336": "    @Override public int minus(int a, int b) { // bad!\n",
        "340": "    @Override public int add(int a, int b) {\n",
        "344": "    @Override public String toString() {\n",
        "350": "    void foo(String s, Runnable r, Number n, Iterable<?> it, boolean b, Equivalence<String> eq,\n",
        "351": "        Exception e, InputStream in, Comparable<?> c, Ordering<Integer> ord,\n",
        "352": "        Charset charset, TimeUnit unit, Class<?> cls, Joiner joiner,\n",
        "353": "        Pattern pattern, UnsignedInteger ui, UnsignedLong ul, StringBuilder sb,\n",
        "354": "        Predicate<?> pred, Function<?, ?> func, Object obj);\n",
        "364": "    @Override public void foo(\n",
        "365": "        String s, Runnable r, Number n, Iterable<?> it, boolean b, Equivalence<String> eq,\n",
        "366": "        Exception e, InputStream in, Comparable<?> c, Ordering<Integer> ord,\n",
        "367": "        Charset charset, TimeUnit unit, Class<?> cls, Joiner joiner,\n",
        "368": "        Pattern pattern, UnsignedInteger ui, UnsignedLong ul, StringBuilder sb,\n",
        "369": "        Predicate<?> pred, Function<?, ?> func, Object obj) {\n",
        "370": "      delegate.foo(s,\n",
        "371": "          r, n, it, b, eq, e, in, c, ord, charset, unit, cls, joiner, pattern,\n",
        "372": "          ui, ul, sb, pred, func, obj);\n",
        "373": "    }\n",
        "374": "\n",
        "375": "    @Override public String toString() {\n",
        "381": "    new ForwardingWrapperTester().testForwarding(Sub.class, new Function<Sub, Sub>() {\n",
        "382": "      @Override public Sub apply(Sub sub) {\n",
        "383": "        return new ForwardingSub(sub);\n",
        "384": "      }\n",
        "385": "    });\n",
        "393": "    @Override String getId();\n",
        "403": "    @Override public String getId() {\n",
        "407": "    @Override public String toString() {\n",
        "413": "    @Override boolean equals(Object obj);\n",
        "414": "    @Override int hashCode();\n",
        "415": "    @Override String toString();\n",
        "420": "    private static Function<Equals, Equals> WRAPPER = new Function<Equals, Equals>() {\n",
        "421": "      @Override public NoDelegateToEquals apply(Equals delegate) {\n",
        "422": "        return new NoDelegateToEquals(delegate);\n",
        "423": "      }\n",
        "424": "    };\n",
        "432": "    @Override public String toString() {\n",
        "438": "    new ForwardingWrapperTester()\n",
        "439": "        .testForwarding(Equals.class, NoDelegateToEquals.WRAPPER);\n",
        "453": "  /**\n",
        "454": "   * An interface for the 2 ways that a chaining call might be defined.\n",
        "455": "   */\n",
        "470": "    @Override public ForwardingChainingCalls chainingCall() {\n",
        "475": "    @Override public ChainingCalls nonChainingCall() {\n",
        "479": "    @Override public String toString() {\n",
        "485": "    tester.testForwarding(ChainingCalls.class,\n",
        "487": "          @Override public ChainingCalls apply(ChainingCalls delegate) {\n"
    }
}