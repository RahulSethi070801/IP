{
    "addition": {
        "48": "    ParameterizedType jvmType =\n",
        "49": "        (ParameterizedType) new TypeCapture<Entry<String, Integer>>() {}.capture();\n",
        "50": "    ParameterizedType ourType =\n",
        "51": "        Types.newParameterizedType(Entry.class, String.class, Integer.class);\n",
        "57": "    ParameterizedType jvmType =\n",
        "58": "        (ParameterizedType) new TypeCapture<HashMap<String, int[][]>>() {}.capture();\n",
        "59": "    ParameterizedType ourType =\n",
        "60": "        Types.newParameterizedType(HashMap.class, String.class, int[][].class);\n",
        "62": "    new EqualsTester().addEqualityGroup(jvmType, ourType).testEquals();\n",
        "70": "    assertEquals(\n",
        "71": "        Arrays.asList(String.class, Types.newArrayType(Types.newArrayType(int.class))),\n",
        "72": "        Arrays.asList(ourType.getActualTypeArguments()));\n",
        "95": "    ParameterizedType jvmType =\n",
        "96": "        (ParameterizedType) new TypeCapture<Entry<String, int[][]>>() {}.capture();\n",
        "97": "    ParameterizedType ourType =\n",
        "98": "        Types.newParameterizedTypeWithOwner(Map.class, Entry.class, String.class, int[][].class);\n",
        "115": "    SerializableTester.reserializeAndAssert(\n",
        "116": "        Types.newParameterizedType(Entry.class, String.class, Integer.class));\n",
        "121": "      Types.newParameterizedTypeWithOwner(Number.class, List.class, String.class);\n",
        "123": "    } catch (IllegalArgumentException expected) {\n",
        "124": "    }\n",
        "130": "        Types.newParameterizedTypeWithOwner(null, Entry.class, String.class, Integer.class));\n",
        "135": "      Types.newParameterizedTypeWithOwner(Map.class, Entry.class, String.class);\n",
        "137": "    } catch (IllegalArgumentException expected) {\n",
        "138": "    }\n",
        "143": "      Types.newParameterizedTypeWithOwner(Map.class, Entry.class, int.class, int.class);\n",
        "145": "    } catch (IllegalArgumentException expected) {\n",
        "146": "    }\n",
        "151": "    GenericArrayType ourType1 =\n",
        "152": "        (GenericArrayType) Types.newArrayType(Types.newParameterizedType(List.class, String.class));\n",
        "159": "    assertEquals(new TypeCapture<List<String>>() {}.capture(), ourType1.getGenericComponentType());\n",
        "168": "    new EqualsTester().addEqualityGroup(jvmType, ourType).testEquals();\n",
        "175": "    new EqualsTester().addEqualityGroup(jvmType, ourType).testEquals();\n",
        "189": "    SerializableTester.reserializeAndAssert(Types.newArrayType(int[].class));\n",
        "207": "      ParameterizedType parameterType =\n",
        "208": "          (ParameterizedType)\n",
        "209": "              WithWildcardType.class.getDeclaredMethod(methodName, List.class)\n",
        "210": "                  .getGenericParameterTypes()[0];\n",
        "216": "    WildcardType noBoundJvmType = WithWildcardType.getWildcardType(\"withoutBound\");\n",
        "217": "    WildcardType objectBoundJvmType = WithWildcardType.getWildcardType(\"withObjectBound\");\n",
        "218": "    WildcardType upperBoundJvmType = WithWildcardType.getWildcardType(\"withUpperBound\");\n",
        "219": "    WildcardType lowerBoundJvmType = WithWildcardType.getWildcardType(\"withLowerBound\");\n",
        "220": "    WildcardType objectBound = Types.subtypeOf(Object.class);\n",
        "221": "    WildcardType upperBound = Types.subtypeOf(int[][].class);\n",
        "222": "    WildcardType lowerBound = Types.supertypeOf(String[][].class);\n",
        "230": "        .addEqualityGroup(noBoundJvmType, objectBoundJvmType, objectBound)\n",
        "240": "    } catch (IllegalArgumentException expected) {\n",
        "241": "    }\n",
        "245": "    SerializableTester.reserializeAndAssert(Types.supertypeOf(String.class));\n",
        "246": "    SerializableTester.reserializeAndAssert(Types.subtypeOf(String.class));\n",
        "247": "    SerializableTester.reserializeAndAssert(Types.subtypeOf(Object.class));\n",
        "250": "  private static void assertEqualWildcardType(WildcardType expected, WildcardType actual) {\n",
        "275": "      ParameterizedType parameterType =\n",
        "276": "          (ParameterizedType)\n",
        "277": "              WithTypeVariable.class.getDeclaredMethod(methodName, List.class)\n",
        "278": "                  .getGenericParameterTypes()[0];\n",
        "284": "    TypeVariable<?> noBoundJvmType = WithTypeVariable.getTypeVariable(\"withoutBound\");\n",
        "285": "    TypeVariable<?> objectBoundJvmType = WithTypeVariable.getTypeVariable(\"withObjectBound\");\n",
        "286": "    TypeVariable<?> upperBoundJvmType = WithTypeVariable.getTypeVariable(\"withUpperBound\");\n",
        "289": "    TypeVariable<?> upperBound = withBounds(upperBoundJvmType, Number.class, CharSequence.class);\n",
        "292": "    assertEqualTypeVariable(noBoundJvmType, withBounds(noBoundJvmType, Object.class));\n",
        "307": "    } catch (IllegalArgumentException expected) {\n",
        "308": "    }\n",
        "315": "    } catch (RuntimeException expected) {\n",
        "316": "    }\n",
        "343": "  private static void assertEqualTypeVariable(TypeVariable<?> expected, TypeVariable<?> actual) {\n",
        "346": "    assertEquals(expected.getGenericDeclaration(), actual.getGenericDeclaration());\n",
        "357": "   * Working with arrays requires defensive code. Verify that we clone the type array for both input\n",
        "358": "   * and output.\n",
        "361": "    Type[] typesIn = {String.class, Integer.class};\n",
        "362": "    ParameterizedType parameterizedType = Types.newParameterizedType(Map.class, typesIn);\n",
        "376": "      Types.newParameterizedType(Map.class, String.class, Integer.class, Long.class);\n",
        "378": "    } catch (IllegalArgumentException expected) {\n",
        "379": "    }\n"
    },
    "removed": {
        "48": "    ParameterizedType jvmType = (ParameterizedType)\n",
        "49": "        new TypeCapture<Entry<String, Integer>>() {}.capture();\n",
        "50": "    ParameterizedType ourType = Types.newParameterizedType(\n",
        "51": "        Entry.class, String.class, Integer.class);\n",
        "57": "    ParameterizedType jvmType = (ParameterizedType)\n",
        "58": "        new TypeCapture<HashMap<String, int[][]>>() {}.capture();\n",
        "59": "    ParameterizedType ourType = Types.newParameterizedType(\n",
        "60": "        HashMap.class, String.class, int[][].class);\n",
        "62": "    new EqualsTester()\n",
        "63": "        .addEqualityGroup(jvmType, ourType)\n",
        "64": "        .testEquals();\n",
        "72": "    assertEquals(Arrays.asList(String.class, Types.newArrayType(Types.newArrayType(int.class))),\n",
        "73": "                 Arrays.asList(ourType.getActualTypeArguments()));\n",
        "96": "    ParameterizedType jvmType = (ParameterizedType)\n",
        "97": "        new TypeCapture<Entry<String, int[][]>>() {}.capture();\n",
        "98": "    ParameterizedType ourType = Types.newParameterizedTypeWithOwner(\n",
        "99": "        Map.class, Entry.class, String.class, int[][].class);\n",
        "116": "    SerializableTester.reserializeAndAssert(Types.newParameterizedType(\n",
        "117": "        Entry.class, String.class, Integer.class));\n",
        "122": "      Types.newParameterizedTypeWithOwner(\n",
        "123": "          Number.class, List.class, String.class);\n",
        "125": "    } catch (IllegalArgumentException expected) {}\n",
        "131": "        Types.newParameterizedTypeWithOwner(\n",
        "132": "            null, Entry.class, String.class, Integer.class));\n",
        "137": "      Types.newParameterizedTypeWithOwner(\n",
        "138": "          Map.class, Entry.class, String.class);\n",
        "140": "    } catch (IllegalArgumentException expected) {}\n",
        "145": "      Types.newParameterizedTypeWithOwner(\n",
        "146": "          Map.class, Entry.class, int.class, int.class);\n",
        "148": "    } catch (IllegalArgumentException expected) {}\n",
        "153": "    GenericArrayType ourType1 = (GenericArrayType) Types.newArrayType(\n",
        "154": "        Types.newParameterizedType(List.class, String.class));\n",
        "161": "    assertEquals(new TypeCapture<List<String>>() {}.capture(),\n",
        "162": "        ourType1.getGenericComponentType());\n",
        "171": "    new EqualsTester()\n",
        "172": "        .addEqualityGroup(jvmType, ourType)\n",
        "173": "        .testEquals();\n",
        "180": "    new EqualsTester()\n",
        "181": "        .addEqualityGroup(jvmType, ourType)\n",
        "182": "        .testEquals();\n",
        "196": "    SerializableTester.reserializeAndAssert(\n",
        "197": "        Types.newArrayType(int[].class));\n",
        "215": "      ParameterizedType parameterType = (ParameterizedType)\n",
        "216": "          WithWildcardType.class\n",
        "217": "              .getDeclaredMethod(methodName, List.class)\n",
        "218": "              .getGenericParameterTypes()[0];\n",
        "224": "    WildcardType noBoundJvmType =\n",
        "225": "        WithWildcardType.getWildcardType(\"withoutBound\");\n",
        "226": "    WildcardType objectBoundJvmType =\n",
        "227": "        WithWildcardType.getWildcardType(\"withObjectBound\");\n",
        "228": "    WildcardType upperBoundJvmType =\n",
        "229": "        WithWildcardType.getWildcardType(\"withUpperBound\");\n",
        "230": "    WildcardType lowerBoundJvmType =\n",
        "231": "        WithWildcardType.getWildcardType(\"withLowerBound\");\n",
        "232": "    WildcardType objectBound =\n",
        "233": "        Types.subtypeOf(Object.class);\n",
        "234": "    WildcardType upperBound =\n",
        "235": "        Types.subtypeOf(int[][].class);\n",
        "236": "    WildcardType lowerBound =\n",
        "237": "        Types.supertypeOf(String[][].class);\n",
        "245": "        .addEqualityGroup(\n",
        "246": "            noBoundJvmType, objectBoundJvmType, objectBound)\n",
        "256": "    } catch (IllegalArgumentException expected) {}\n",
        "260": "    SerializableTester.reserializeAndAssert(\n",
        "261": "        Types.supertypeOf(String.class));\n",
        "262": "    SerializableTester.reserializeAndAssert(\n",
        "263": "        Types.subtypeOf(String.class));\n",
        "264": "    SerializableTester.reserializeAndAssert(\n",
        "265": "        Types.subtypeOf(Object.class));\n",
        "268": "  private static void assertEqualWildcardType(\n",
        "269": "      WildcardType expected, WildcardType actual) {\n",
        "294": "      ParameterizedType parameterType = (ParameterizedType)\n",
        "295": "          WithTypeVariable.class\n",
        "296": "              .getDeclaredMethod(methodName, List.class)\n",
        "297": "              .getGenericParameterTypes()[0];\n",
        "303": "    TypeVariable<?> noBoundJvmType =\n",
        "304": "        WithTypeVariable.getTypeVariable(\"withoutBound\");\n",
        "305": "    TypeVariable<?> objectBoundJvmType =\n",
        "306": "        WithTypeVariable.getTypeVariable(\"withObjectBound\");\n",
        "307": "    TypeVariable<?> upperBoundJvmType =\n",
        "308": "        WithTypeVariable.getTypeVariable(\"withUpperBound\");\n",
        "311": "    TypeVariable<?> upperBound = withBounds(\n",
        "312": "        upperBoundJvmType, Number.class, CharSequence.class);\n",
        "315": "    assertEqualTypeVariable(noBoundJvmType,\n",
        "316": "        withBounds(noBoundJvmType, Object.class));\n",
        "331": "    } catch (IllegalArgumentException expected) {}\n",
        "338": "    } catch (RuntimeException expected) {}\n",
        "365": "  private static void assertEqualTypeVariable(\n",
        "366": "      TypeVariable<?> expected, TypeVariable<?> actual) {\n",
        "369": "    assertEquals(\n",
        "370": "        expected.getGenericDeclaration(), actual.getGenericDeclaration());\n",
        "381": "   * Working with arrays requires defensive code. Verify that we clone the\n",
        "382": "   * type array for both input and output.\n",
        "385": "    Type[] typesIn = { String.class, Integer.class };\n",
        "386": "    ParameterizedType parameterizedType\n",
        "387": "        = Types.newParameterizedType(Map.class, typesIn);\n",
        "401": "      Types.newParameterizedType(\n",
        "402": "          Map.class, String.class, Integer.class, Long.class);\n",
        "404": "    } catch (IllegalArgumentException expected) {}\n"
    }
}