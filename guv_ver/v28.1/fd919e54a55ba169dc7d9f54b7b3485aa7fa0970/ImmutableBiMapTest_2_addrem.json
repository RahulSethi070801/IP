{
    "addition": {
        "68": "    suite.addTest(\n",
        "69": "        BiMapTestSuiteBuilder.using(new ImmutableBiMapGenerator())\n",
        "70": "            .named(\"ImmutableBiMap\")\n",
        "71": "            .withFeatures(\n",
        "72": "                CollectionSize.ANY,\n",
        "73": "                CollectionFeature.SERIALIZABLE,\n",
        "74": "                CollectionFeature.KNOWN_ORDER,\n",
        "75": "                MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "76": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "77": "            .suppressing(BiMapInverseTester.getInverseSameAfterSerializingMethods())\n",
        "78": "            .createTestSuite());\n",
        "79": "    suite.addTest(\n",
        "80": "        BiMapTestSuiteBuilder.using(new ImmutableBiMapCopyOfGenerator())\n",
        "81": "            .named(\"ImmutableBiMap.copyOf[Map]\")\n",
        "82": "            .withFeatures(\n",
        "83": "                CollectionSize.ANY,\n",
        "84": "                CollectionFeature.SERIALIZABLE,\n",
        "85": "                CollectionFeature.KNOWN_ORDER,\n",
        "86": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "87": "            .suppressing(BiMapInverseTester.getInverseSameAfterSerializingMethods())\n",
        "88": "            .createTestSuite());\n",
        "89": "    suite.addTest(\n",
        "90": "        BiMapTestSuiteBuilder.using(new ImmutableBiMapCopyOfEntriesGenerator())\n",
        "91": "            .named(\"ImmutableBiMap.copyOf[Iterable<Entry>]\")\n",
        "92": "            .withFeatures(\n",
        "93": "                CollectionSize.ANY,\n",
        "94": "                CollectionFeature.SERIALIZABLE,\n",
        "95": "                CollectionFeature.KNOWN_ORDER,\n",
        "96": "                MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "97": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "98": "            .suppressing(BiMapInverseTester.getInverseSameAfterSerializingMethods())\n",
        "99": "            .createTestSuite());\n",
        "104": "  public abstract static class AbstractMapTests<K, V> extends MapInterfaceTest<K, V> {\n",
        "109": "    @Override\n",
        "110": "    protected Map<K, V> makeEmptyMap() {\n",
        "116": "    @Override\n",
        "117": "    protected void assertMoreInvariants(Map<K, V> map) {\n",
        "122": "        assertEquals(entry.getKey() + \"=\" + entry.getValue(), entry.toString());\n",
        "126": "      assertEquals(\"{\" + joiner.join(map.entrySet()) + \"}\", map.toString());\n",
        "127": "      assertEquals(\"[\" + joiner.join(map.entrySet()) + \"]\", map.entrySet().toString());\n",
        "128": "      assertEquals(\"[\" + joiner.join(map.keySet()) + \"]\", map.keySet().toString());\n",
        "129": "      assertEquals(\"[\" + joiner.join(map.values()) + \"]\", map.values().toString());\n",
        "137": "    @Override\n",
        "138": "    protected Map<String, Integer> makeEmptyMap() {\n",
        "142": "    @Override\n",
        "143": "    protected Map<String, Integer> makePopulatedMap() {\n",
        "147": "    @Override\n",
        "148": "    protected String getKeyNotInPopulatedMap() {\n",
        "152": "    @Override\n",
        "153": "    protected Integer getValueNotInPopulatedMap() {\n",
        "158": "  public static class InverseMapTests extends AbstractMapTests<String, Integer> {\n",
        "159": "    @Override\n",
        "160": "    protected Map<String, Integer> makeEmptyMap() {\n",
        "164": "    @Override\n",
        "165": "    protected Map<String, Integer> makePopulatedMap() {\n",
        "169": "    @Override\n",
        "170": "    protected String getKeyNotInPopulatedMap() {\n",
        "174": "    @Override\n",
        "175": "    protected Integer getValueNotInPopulatedMap() {\n",
        "182": "      ImmutableBiMap<String, Integer> map = new Builder<String, Integer>().build();\n",
        "189": "      ImmutableBiMap<String, Integer> map = new Builder<String, Integer>().put(\"one\", 1).build();\n",
        "195": "      ImmutableBiMap<String, Integer> map =\n",
        "196": "          new Builder<String, Integer>().put(Maps.immutableEntry(\"one\", 1)).build();\n",
        "201": "      ImmutableBiMap<String, Integer> map =\n",
        "202": "          ImmutableBiMap.<String, Integer>builder()\n",
        "203": "              .put(\"one\", 1)\n",
        "204": "              .put(\"two\", 2)\n",
        "205": "              .put(\"three\", 3)\n",
        "206": "              .put(\"four\", 4)\n",
        "207": "              .put(\"five\", 5)\n",
        "208": "              .build();\n",
        "209": "      assertMapEquals(map, \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "210": "      assertMapEquals(map.inverse(), 1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "238": "      assertMapEquals(map, \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "239": "      assertMapEquals(map.inverse(), 1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "253": "      ImmutableBiMap.Builder<String, Integer> builder =\n",
        "254": "          new Builder<String, Integer>().orderEntriesByValue(Ordering.natural());\n",
        "258": "      } catch (IllegalStateException expected) {\n",
        "259": "      }\n",
        "263": "      ImmutableBiMap<String, Integer> map =\n",
        "264": "          new Builder<String, Integer>().putAll(Collections.<String, Integer>emptyMap()).build();\n",
        "277": "      ImmutableBiMap<String, Integer> map =\n",
        "278": "          new Builder<String, Integer>().putAll(toPut).putAll(moreToPut).build();\n",
        "279": "      assertMapEquals(map, \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "280": "      assertMapEquals(map.inverse(), 1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "285": "      ImmutableBiMap<String, Integer> mapOne = builder.put(\"one\", 1).put(\"two\", 2).build();\n",
        "286": "      ImmutableBiMap<String, Integer> mapTwo = builder.put(\"three\", 3).put(\"four\", 4).build();\n",
        "291": "      assertMapEquals(mapTwo.inverse(), 1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\");\n",
        "331": "      Builder<String, Integer> builder =\n",
        "332": "          new Builder<String, Integer>()\n",
        "333": "              .put(\"one\", 1)\n",
        "334": "              .put(\"one\", 1); // throwing on this line would be even better\n",
        "345": "      assertMapEquals(ImmutableBiMap.of(\"one\", 1), \"one\", 1);\n",
        "346": "      assertMapEquals(ImmutableBiMap.of(\"one\", 1).inverse(), 1, \"one\");\n",
        "347": "      assertMapEquals(ImmutableBiMap.of(\"one\", 1, \"two\", 2), \"one\", 1, \"two\", 2);\n",
        "348": "      assertMapEquals(ImmutableBiMap.of(\"one\", 1, \"two\", 2).inverse(), 1, \"one\", 2, \"two\");\n",
        "350": "          ImmutableBiMap.of(\"one\", 1, \"two\", 2, \"three\", 3), \"one\", 1, \"two\", 2, \"three\", 3);\n",
        "353": "          1,\n",
        "354": "          \"one\",\n",
        "355": "          2,\n",
        "356": "          \"two\",\n",
        "357": "          3,\n",
        "358": "          \"three\");\n",
        "361": "          \"one\",\n",
        "362": "          1,\n",
        "363": "          \"two\",\n",
        "364": "          2,\n",
        "365": "          \"three\",\n",
        "366": "          3,\n",
        "367": "          \"four\",\n",
        "368": "          4);\n",
        "370": "          ImmutableBiMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4).inverse(),\n",
        "371": "          1,\n",
        "372": "          \"one\",\n",
        "373": "          2,\n",
        "374": "          \"two\",\n",
        "375": "          3,\n",
        "376": "          \"three\",\n",
        "377": "          4,\n",
        "378": "          \"four\");\n",
        "380": "          ImmutableBiMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5),\n",
        "381": "          \"one\",\n",
        "382": "          1,\n",
        "383": "          \"two\",\n",
        "384": "          2,\n",
        "385": "          \"three\",\n",
        "386": "          3,\n",
        "387": "          \"four\",\n",
        "388": "          4,\n",
        "389": "          \"five\",\n",
        "390": "          5);\n",
        "392": "          ImmutableBiMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5).inverse(),\n",
        "393": "          1,\n",
        "394": "          \"one\",\n",
        "395": "          2,\n",
        "396": "          \"two\",\n",
        "397": "          3,\n",
        "398": "          \"three\",\n",
        "399": "          4,\n",
        "400": "          \"four\",\n",
        "401": "          5,\n",
        "402": "          \"five\");\n",
        "443": "      ImmutableBiMap<String, Integer> copy =\n",
        "444": "          ImmutableBiMap.copyOf(Collections.<String, Integer>emptyMap());\n",
        "451": "      ImmutableBiMap<String, Integer> copy =\n",
        "452": "          ImmutableBiMap.copyOf(Collections.singletonMap(\"one\", 1));\n",
        "478": "      ImmutableBiMap<String, Integer> bimap =\n",
        "479": "          ImmutableBiMap.copyOf(ImmutableMap.of(\"one\", 1, \"two\", 2));\n",
        "485": "      ImmutableBiMap<String, Integer> bimap =\n",
        "486": "          ImmutableBiMap.copyOf(\n",
        "487": "              new ImmutableMap.Builder<String, Integer>()\n",
        "488": "                  .put(\"one\", 1)\n",
        "489": "                  .put(\"two\", 2)\n",
        "490": "                  .put(\"three\", 3)\n",
        "491": "                  .put(\"four\", 4)\n",
        "492": "                  .put(\"five\", 5)\n",
        "493": "                  .build());\n",
        "494": "      assertMapEquals(bimap, \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "495": "      assertMapEquals(bimap.inverse(), 1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "499": "      ImmutableMap<String, Integer> map =\n",
        "500": "          new ImmutableMap.Builder<String, Integer>()\n",
        "548": "      } catch (UnsupportedOperationException expected) {\n",
        "549": "      }\n",
        "553": "      ImmutableBiMap<String, Integer> bimap =\n",
        "554": "          ImmutableBiMap.copyOf(ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4));\n",
        "561": "      ImmutableBiMap<String, Integer> bimap =\n",
        "562": "          ImmutableBiMap.copyOf(ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4));\n",
        "569": "      ImmutableBiMap<String, Integer> bimap =\n",
        "570": "          ImmutableBiMap.copyOf(ImmutableMap.of(\"one\", 1, \"two\", 2));\n",
        "582": "      ImmutableBiMap<String, Integer> bimap =\n",
        "583": "          ImmutableBiMap.copyOf(ImmutableMap.of(\"one\", 1, \"two\", 2));\n",
        "584": "      ImmutableBiMap<String, Integer> copy = SerializableTester.reserializeAndAssert(bimap);\n",
        "592": "      ImmutableBiMap<String, Integer> bimap =\n",
        "593": "          ImmutableBiMap.copyOf(ImmutableMap.of(1, \"one\", 2, \"two\")).inverse();\n",
        "594": "      ImmutableBiMap<String, Integer> copy = SerializableTester.reserializeAndAssert(bimap);\n",
        "601": "  private static <K, V> void assertMapEquals(Map<K, V> map, Object... alternatingKeysAndValues) {\n"
    },
    "removed": {
        "68": "    suite.addTest(BiMapTestSuiteBuilder.using(new ImmutableBiMapGenerator())\n",
        "69": "        .named(\"ImmutableBiMap\")\n",
        "70": "        .withFeatures(CollectionSize.ANY,\n",
        "71": "            CollectionFeature.SERIALIZABLE,\n",
        "72": "            CollectionFeature.KNOWN_ORDER,\n",
        "73": "            MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "74": "            MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "75": "        .suppressing(BiMapInverseTester.getInverseSameAfterSerializingMethods())\n",
        "76": "        .createTestSuite());\n",
        "77": "    suite.addTest(BiMapTestSuiteBuilder.using(new ImmutableBiMapCopyOfGenerator())\n",
        "78": "        .named(\"ImmutableBiMap.copyOf[Map]\")\n",
        "79": "        .withFeatures(CollectionSize.ANY,\n",
        "80": "            CollectionFeature.SERIALIZABLE,\n",
        "81": "            CollectionFeature.KNOWN_ORDER,\n",
        "82": "            MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "83": "        .suppressing(BiMapInverseTester.getInverseSameAfterSerializingMethods())\n",
        "84": "        .createTestSuite());\n",
        "85": "    suite.addTest(BiMapTestSuiteBuilder.using(new ImmutableBiMapCopyOfEntriesGenerator())\n",
        "86": "        .named(\"ImmutableBiMap.copyOf[Iterable<Entry>]\")\n",
        "87": "        .withFeatures(CollectionSize.ANY,\n",
        "88": "            CollectionFeature.SERIALIZABLE,\n",
        "89": "            CollectionFeature.KNOWN_ORDER,\n",
        "90": "            MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "91": "            MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "92": "        .suppressing(BiMapInverseTester.getInverseSameAfterSerializingMethods())\n",
        "93": "        .createTestSuite());\n",
        "98": "  public static abstract class AbstractMapTests<K, V>\n",
        "99": "      extends MapInterfaceTest<K, V> {\n",
        "104": "    @Override protected Map<K, V> makeEmptyMap() {\n",
        "110": "    @Override protected void assertMoreInvariants(Map<K, V> map) {\n",
        "115": "        assertEquals(entry.getKey() + \"=\" + entry.getValue(),\n",
        "116": "            entry.toString());\n",
        "120": "      assertEquals(\"{\" + joiner.join(map.entrySet()) + \"}\",\n",
        "121": "          map.toString());\n",
        "122": "      assertEquals(\"[\" + joiner.join(map.entrySet()) + \"]\",\n",
        "123": "          map.entrySet().toString());\n",
        "124": "      assertEquals(\"[\" + joiner.join(map.keySet()) + \"]\",\n",
        "125": "          map.keySet().toString());\n",
        "126": "      assertEquals(\"[\" + joiner.join(map.values()) + \"]\",\n",
        "127": "          map.values().toString());\n",
        "135": "    @Override protected Map<String, Integer> makeEmptyMap() {\n",
        "139": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "143": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "147": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "152": "  public static class InverseMapTests\n",
        "153": "      extends AbstractMapTests<String, Integer> {\n",
        "154": "    @Override protected Map<String, Integer> makeEmptyMap() {\n",
        "158": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "162": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "166": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "173": "      ImmutableBiMap<String, Integer> map\n",
        "174": "          = new Builder<String, Integer>().build();\n",
        "181": "      ImmutableBiMap<String, Integer> map = new Builder<String, Integer>()\n",
        "182": "          .put(\"one\", 1)\n",
        "183": "          .build();\n",
        "189": "      ImmutableBiMap<String, Integer> map = new Builder<String, Integer>()\n",
        "190": "          .put(Maps.immutableEntry(\"one\", 1))\n",
        "191": "          .build();\n",
        "196": "      ImmutableBiMap<String, Integer> map\n",
        "197": "          = ImmutableBiMap.<String, Integer>builder()\n",
        "198": "            .put(\"one\", 1)\n",
        "199": "            .put(\"two\", 2)\n",
        "200": "            .put(\"three\", 3)\n",
        "201": "            .put(\"four\", 4)\n",
        "202": "            .put(\"five\", 5)\n",
        "203": "            .build();\n",
        "204": "      assertMapEquals(map,\n",
        "205": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "206": "      assertMapEquals(map.inverse(),\n",
        "207": "          1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "235": "      assertMapEquals(map,\n",
        "236": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "237": "      assertMapEquals(map.inverse(),\n",
        "238": "          1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "252": "      ImmutableBiMap.Builder<String, Integer> builder = new Builder<String, Integer>()\n",
        "253": "          .orderEntriesByValue(Ordering.natural());\n",
        "257": "      } catch (IllegalStateException expected) {}\n",
        "261": "      ImmutableBiMap<String, Integer> map = new Builder<String, Integer>()\n",
        "262": "          .putAll(Collections.<String, Integer>emptyMap())\n",
        "263": "          .build();\n",
        "276": "      ImmutableBiMap<String, Integer> map = new Builder<String, Integer>()\n",
        "277": "          .putAll(toPut)\n",
        "278": "          .putAll(moreToPut)\n",
        "279": "          .build();\n",
        "280": "      assertMapEquals(map,\n",
        "281": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "282": "      assertMapEquals(map.inverse(),\n",
        "283": "          1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "288": "      ImmutableBiMap<String, Integer> mapOne = builder\n",
        "289": "          .put(\"one\", 1)\n",
        "290": "          .put(\"two\", 2)\n",
        "291": "          .build();\n",
        "292": "      ImmutableBiMap<String, Integer> mapTwo = builder\n",
        "293": "          .put(\"three\", 3)\n",
        "294": "          .put(\"four\", 4)\n",
        "295": "          .build();\n",
        "300": "      assertMapEquals(mapTwo.inverse(),\n",
        "301": "          1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\");\n",
        "341": "      Builder<String, Integer> builder = new Builder<String, Integer>()\n",
        "342": "          .put(\"one\", 1)\n",
        "343": "          .put(\"one\", 1); // throwing on this line would be even better\n",
        "355": "          ImmutableBiMap.of(\"one\", 1),\n",
        "356": "          \"one\", 1);\n",
        "357": "      assertMapEquals(\n",
        "358": "          ImmutableBiMap.of(\"one\", 1).inverse(),\n",
        "359": "          1, \"one\");\n",
        "360": "      assertMapEquals(\n",
        "361": "          ImmutableBiMap.of(\"one\", 1, \"two\", 2),\n",
        "362": "          \"one\", 1, \"two\", 2);\n",
        "363": "      assertMapEquals(\n",
        "364": "          ImmutableBiMap.of(\"one\", 1, \"two\", 2).inverse(),\n",
        "365": "          1, \"one\", 2, \"two\");\n",
        "366": "      assertMapEquals(\n",
        "367": "          ImmutableBiMap.of(\"one\", 1, \"two\", 2, \"three\", 3),\n",
        "368": "          \"one\", 1, \"two\", 2, \"three\", 3);\n",
        "371": "          1, \"one\", 2, \"two\", 3, \"three\");\n",
        "374": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4);\n",
        "376": "          ImmutableBiMap.of(\n",
        "377": "              \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4).inverse(),\n",
        "378": "          1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\");\n",
        "380": "          ImmutableBiMap.of(\n",
        "381": "              \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5),\n",
        "382": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "384": "          ImmutableBiMap.of(\n",
        "385": "              \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5).inverse(),\n",
        "386": "          1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "427": "      ImmutableBiMap<String, Integer> copy\n",
        "428": "          = ImmutableBiMap.copyOf(Collections.<String, Integer>emptyMap());\n",
        "435": "      ImmutableBiMap<String, Integer> copy\n",
        "436": "          = ImmutableBiMap.copyOf(Collections.singletonMap(\"one\", 1));\n",
        "462": "      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.copyOf(\n",
        "463": "          ImmutableMap.of(\"one\", 1, \"two\", 2));\n",
        "469": "      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.copyOf(\n",
        "470": "          new ImmutableMap.Builder<String, Integer>()\n",
        "471": "              .put(\"one\", 1)\n",
        "472": "              .put(\"two\", 2)\n",
        "473": "              .put(\"three\", 3)\n",
        "474": "              .put(\"four\", 4)\n",
        "475": "              .put(\"five\", 5)\n",
        "476": "              .build());\n",
        "477": "      assertMapEquals(bimap,\n",
        "478": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "479": "      assertMapEquals(bimap.inverse(),\n",
        "480": "          1, \"one\", 2, \"two\", 3, \"three\", 4, \"four\", 5, \"five\");\n",
        "484": "      ImmutableMap<String, Integer> map\n",
        "485": "          = new ImmutableMap.Builder<String, Integer>()\n",
        "533": "      } catch (UnsupportedOperationException expected) {}\n",
        "537": "      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.copyOf(\n",
        "538": "          ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4));\n",
        "545": "      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.copyOf(\n",
        "546": "          ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4));\n",
        "553": "      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.copyOf(\n",
        "554": "          ImmutableMap.of(\"one\", 1, \"two\", 2));\n",
        "566": "      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.copyOf(\n",
        "567": "          ImmutableMap.of(\"one\", 1, \"two\", 2));\n",
        "568": "      ImmutableBiMap<String, Integer> copy =\n",
        "569": "          SerializableTester.reserializeAndAssert(bimap);\n",
        "577": "      ImmutableBiMap<String, Integer> bimap = ImmutableBiMap.copyOf(\n",
        "578": "          ImmutableMap.of(1, \"one\", 2, \"two\")).inverse();\n",
        "579": "      ImmutableBiMap<String, Integer> copy =\n",
        "580": "          SerializableTester.reserializeAndAssert(bimap);\n",
        "587": "  private static <K, V> void assertMapEquals(Map<K, V> map,\n",
        "588": "      Object... alternatingKeysAndValues) {\n"
    }
}