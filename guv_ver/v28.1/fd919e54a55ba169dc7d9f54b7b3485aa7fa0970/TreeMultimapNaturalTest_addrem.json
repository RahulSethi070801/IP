{
    "addition": {
        "66": "    suite.addTest(\n",
        "67": "        SortedSetMultimapTestSuiteBuilder.using(\n",
        "68": "                new TestStringSetMultimapGenerator() {\n",
        "69": "                  @Override\n",
        "70": "                  protected SetMultimap<String, String> create(Entry<String, String>[] entries) {\n",
        "71": "                    SetMultimap<String, String> multimap =\n",
        "72": "                        TreeMultimap.create(\n",
        "73": "                            Ordering.natural().nullsFirst(), Ordering.natural().nullsFirst());\n",
        "74": "                    for (Entry<String, String> entry : entries) {\n",
        "75": "                      multimap.put(entry.getKey(), entry.getValue());\n",
        "76": "                    }\n",
        "77": "                    return multimap;\n",
        "78": "                  }\n",
        "79": "\n",
        "80": "                  @Override\n",
        "81": "                  public Iterable<Entry<String, String>> order(\n",
        "82": "                      List<Entry<String, String>> insertionOrder) {\n",
        "83": "                    return new Ordering<Entry<String, String>>() {\n",
        "84": "                      @Override\n",
        "85": "                      public int compare(Entry<String, String> left, Entry<String, String> right) {\n",
        "86": "                        return ComparisonChain.start()\n",
        "87": "                            .compare(left.getKey(), right.getKey(), Ordering.natural().nullsFirst())\n",
        "88": "                            .compare(\n",
        "89": "                                left.getValue(), right.getValue(), Ordering.natural().nullsFirst())\n",
        "90": "                            .result();\n",
        "91": "                      }\n",
        "92": "                    }.sortedCopy(insertionOrder);\n",
        "93": "                  }\n",
        "94": "                })\n",
        "95": "            .named(\"TreeMultimap nullsFirst\")\n",
        "96": "            .withFeatures(\n",
        "97": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "98": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "99": "                MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "100": "                MapFeature.GENERAL_PURPOSE,\n",
        "101": "                MapFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,\n",
        "102": "                CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "103": "                CollectionFeature.KNOWN_ORDER,\n",
        "104": "                CollectionFeature.SERIALIZABLE,\n",
        "105": "                CollectionSize.ANY)\n",
        "106": "            .createTestSuite());\n",
        "107": "    suite.addTest(\n",
        "108": "        NavigableSetTestSuiteBuilder.using(\n",
        "109": "                new TestStringSortedSetGenerator() {\n",
        "110": "                  @Override\n",
        "111": "                  protected NavigableSet<String> create(String[] elements) {\n",
        "112": "                    TreeMultimap<String, Integer> multimap =\n",
        "113": "                        TreeMultimap.create(Ordering.natural().nullsFirst(), Ordering.natural());\n",
        "114": "                    for (int i = 0; i < elements.length; i++) {\n",
        "115": "                      multimap.put(elements[i], i);\n",
        "116": "                    }\n",
        "117": "                    return multimap.keySet();\n",
        "118": "                  }\n",
        "119": "\n",
        "120": "                  @Override\n",
        "121": "                  public List<String> order(List<String> insertionOrder) {\n",
        "122": "                    return Ordering.natural().nullsFirst().sortedCopy(insertionOrder);\n",
        "123": "                  }\n",
        "124": "                })\n",
        "125": "            .named(\"TreeMultimap.keySet\")\n",
        "126": "            .withFeatures(\n",
        "127": "                CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "128": "                CollectionFeature.REMOVE_OPERATIONS,\n",
        "129": "                CollectionFeature.KNOWN_ORDER,\n",
        "130": "                CollectionSize.ANY)\n",
        "131": "            .createTestSuite());\n",
        "223": "    suite.addTest(\n",
        "224": "        NavigableSetTestSuiteBuilder.using(\n",
        "225": "                new TestStringSetGenerator() {\n",
        "226": "                  @Override\n",
        "227": "                  protected Set<String> create(String[] elements) {\n",
        "228": "                    TreeMultimap<Integer, String> multimap =\n",
        "229": "                        TreeMultimap.create(Ordering.natural(), Ordering.natural().nullsFirst());\n",
        "230": "                    multimap.putAll(1, Arrays.asList(elements));\n",
        "231": "                    return multimap.get(1);\n",
        "232": "                  }\n",
        "233": "\n",
        "234": "                  @Override\n",
        "235": "                  public List<String> order(List<String> insertionOrder) {\n",
        "236": "                    return Ordering.natural().nullsFirst().sortedCopy(insertionOrder);\n",
        "237": "                  }\n",
        "238": "                })\n",
        "239": "            .named(\"TreeMultimap.get\")\n",
        "240": "            .withFeatures(\n",
        "241": "                CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "242": "                CollectionFeature.GENERAL_PURPOSE,\n",
        "243": "                CollectionFeature.KNOWN_ORDER,\n",
        "244": "                CollectionSize.ANY)\n",
        "245": "            .createTestSuite());\n",
        "246": "    suite.addTest(\n",
        "247": "        NavigableSetTestSuiteBuilder.using(\n",
        "248": "                new TestStringSetGenerator() {\n",
        "249": "                  @Override\n",
        "250": "                  protected Set<String> create(String[] elements) {\n",
        "251": "                    TreeMultimap<Integer, String> multimap =\n",
        "252": "                        TreeMultimap.create(Ordering.natural(), Ordering.natural().nullsFirst());\n",
        "253": "                    multimap.putAll(1, Arrays.asList(elements));\n",
        "254": "                    return (Set<String>) multimap.asMap().entrySet().iterator().next().getValue();\n",
        "255": "                  }\n",
        "256": "\n",
        "257": "                  @Override\n",
        "258": "                  public List<String> order(List<String> insertionOrder) {\n",
        "259": "                    return Ordering.natural().nullsFirst().sortedCopy(insertionOrder);\n",
        "260": "                  }\n",
        "261": "                })\n",
        "262": "            .named(\"TreeMultimap.asMap.entrySet collection\")\n",
        "263": "            .withFeatures(\n",
        "264": "                CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "265": "                CollectionFeature.GENERAL_PURPOSE,\n",
        "266": "                CollectionFeature.KNOWN_ORDER,\n",
        "267": "                CollectionSize.ONE,\n",
        "268": "                CollectionSize.SEVERAL)\n",
        "269": "            .createTestSuite());\n",
        "278": "  /** Create and populate a {@code TreeMultimap} with the natural ordering of keys and values. */\n",
        "295": "    assertEquals(\"{bar=[1, 2, 3], foo=[-1, 1, 2, 3, 4]}\", multimap.toString());\n",
        "312": "    Iterator<Entry<String, Collection<Integer>>> iterator = multimap.asMap().entrySet().iterator();\n",
        "326": "    assertThat(multimap.entries())\n",
        "327": "        .containsExactly(\n",
        "328": "            Maps.immutableEntry(\"foo\", 1),\n",
        "329": "            Maps.immutableEntry(\"foo\", 3),\n",
        "330": "            Maps.immutableEntry(\"foo\", 7),\n",
        "331": "            Maps.immutableEntry(\"google\", 2),\n",
        "332": "            Maps.immutableEntry(\"google\", 6),\n",
        "333": "            Maps.immutableEntry(\"tree\", 0),\n",
        "334": "            Maps.immutableEntry(\"tree\", 4))\n",
        "335": "        .inOrder();\n",
        "340": "    assertThat(multimap.values()).containsExactly(1, 3, 7, 2, 6, 0, 4).inOrder();\n",
        "351": "  private static final Comparator<Double> KEY_COMPARATOR = Ordering.natural();\n",
        "357": "   * Test that creating one TreeMultimap from another does not copy the comparators from the source\n",
        "358": "   * TreeMultimap.\n",
        "374": "  /** Test that creating one TreeMultimap from a non-TreeMultimap results in natural ordering. */\n",
        "388": "  /** Test that creating one TreeMultimap from a SortedSetMultimap uses natural ordering. */\n",
        "413": "    TreeMultimap<String, Integer> copy = SerializableTester.reserializeAndAssert(multimap);\n",
        "430": "    assertThat(multimap.keySet())\n",
        "431": "        .containsExactly(new DerivedComparable(\"bar\"), new DerivedComparable(\"foo\"))\n",
        "432": "        .inOrder();\n",
        "433": "    assertThat(multimap.values())\n",
        "434": "        .containsExactly(\n",
        "435": "            new DerivedComparable(\"a\"),\n",
        "436": "            new DerivedComparable(\"b\"),\n",
        "437": "            new DerivedComparable(\"r\"),\n",
        "438": "            new DerivedComparable(\"f\"),\n",
        "439": "            new DerivedComparable(\"o\"))\n",
        "440": "        .inOrder();\n",
        "448": "    TreeMultimap<LegacyComparable, LegacyComparable> multimap = TreeMultimap.create();\n",
        "456": "    assertThat(multimap.keySet())\n",
        "457": "        .containsExactly(new LegacyComparable(\"bar\"), new LegacyComparable(\"foo\"))\n",
        "458": "        .inOrder();\n",
        "459": "    assertThat(multimap.values())\n",
        "460": "        .containsExactly(\n",
        "461": "            new LegacyComparable(\"a\"),\n",
        "462": "            new LegacyComparable(\"b\"),\n",
        "463": "            new LegacyComparable(\"r\"),\n",
        "464": "            new LegacyComparable(\"f\"),\n",
        "465": "            new LegacyComparable(\"o\"))\n",
        "466": "        .inOrder();\n",
        "481": "    assertEquals(ImmutableMap.of(\"google\", googleValues, \"tree\", treeValues), asMap.tailMap(\"g\"));\n",
        "482": "    assertEquals(ImmutableMap.of(\"google\", googleValues, \"foo\", fooValues), asMap.headMap(\"h\"));\n",
        "483": "    assertEquals(ImmutableMap.of(\"google\", googleValues), asMap.subMap(\"g\", \"h\"));\n"
    },
    "removed": {
        "66": "    suite.addTest(SortedSetMultimapTestSuiteBuilder.using(new TestStringSetMultimapGenerator() {\n",
        "67": "        @Override\n",
        "68": "        protected SetMultimap<String, String> create(Entry<String, String>[] entries) {\n",
        "69": "          SetMultimap<String, String> multimap = TreeMultimap.create(\n",
        "70": "              Ordering.natural().nullsFirst(), Ordering.natural().nullsFirst());\n",
        "71": "          for (Entry<String, String> entry : entries) {\n",
        "72": "            multimap.put(entry.getKey(), entry.getValue());\n",
        "73": "          }\n",
        "74": "          return multimap;\n",
        "75": "        }\n",
        "76": "\n",
        "77": "        @Override\n",
        "78": "        public Iterable<Entry<String, String>> order(List<Entry<String, String>> insertionOrder) {\n",
        "79": "          return new Ordering<Entry<String, String>>() {\n",
        "80": "            @Override\n",
        "81": "            public int compare(Entry<String, String> left, Entry<String, String> right) {\n",
        "82": "              return ComparisonChain.start()\n",
        "83": "                  .compare(left.getKey(), right.getKey(), Ordering.natural().nullsFirst())\n",
        "84": "                  .compare(left.getValue(), right.getValue(), Ordering.natural().nullsFirst())\n",
        "85": "                  .result();\n",
        "86": "            }\n",
        "87": "          }.sortedCopy(insertionOrder);\n",
        "88": "        }\n",
        "89": "      })\n",
        "90": "      .named(\"TreeMultimap nullsFirst\")\n",
        "91": "      .withFeatures(\n",
        "92": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "93": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "94": "          MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "95": "          MapFeature.GENERAL_PURPOSE,\n",
        "96": "          MapFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,\n",
        "97": "          CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "98": "          CollectionFeature.KNOWN_ORDER,\n",
        "99": "          CollectionFeature.SERIALIZABLE,\n",
        "100": "          CollectionSize.ANY)\n",
        "101": "      .createTestSuite());\n",
        "102": "    suite.addTest(NavigableSetTestSuiteBuilder.using(new TestStringSortedSetGenerator() {\n",
        "103": "        @Override\n",
        "104": "        protected NavigableSet<String> create(String[] elements) {\n",
        "105": "          TreeMultimap<String, Integer> multimap = TreeMultimap.create(\n",
        "106": "              Ordering.natural().nullsFirst(), Ordering.natural());\n",
        "107": "          for (int i = 0; i < elements.length; i++) {\n",
        "108": "            multimap.put(elements[i], i);\n",
        "109": "          }\n",
        "110": "          return multimap.keySet();\n",
        "111": "        }\n",
        "112": "\n",
        "113": "        @Override\n",
        "114": "        public List<String> order(List<String> insertionOrder) {\n",
        "115": "          return Ordering.natural().nullsFirst().sortedCopy(insertionOrder);\n",
        "116": "        }\n",
        "117": "      })\n",
        "118": "      .named(\"TreeMultimap.keySet\")\n",
        "119": "      .withFeatures(\n",
        "120": "          CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "121": "          CollectionFeature.REMOVE_OPERATIONS,\n",
        "122": "          CollectionFeature.KNOWN_ORDER,\n",
        "123": "          CollectionSize.ANY)\n",
        "124": "      .createTestSuite());\n",
        "216": "    suite.addTest(NavigableSetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "217": "        @Override\n",
        "218": "        protected Set<String> create(String[] elements) {\n",
        "219": "          TreeMultimap<Integer, String> multimap = TreeMultimap.create(\n",
        "220": "              Ordering.natural(), Ordering.natural().nullsFirst());\n",
        "221": "          multimap.putAll(1, Arrays.asList(elements));\n",
        "222": "          return multimap.get(1);\n",
        "223": "        }\n",
        "224": "\n",
        "225": "        @Override\n",
        "226": "        public List<String> order(List<String> insertionOrder) {\n",
        "227": "          return Ordering.natural().nullsFirst().sortedCopy(insertionOrder);\n",
        "228": "        }\n",
        "229": "      })\n",
        "230": "      .named(\"TreeMultimap.get\")\n",
        "231": "      .withFeatures(\n",
        "232": "          CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "233": "          CollectionFeature.GENERAL_PURPOSE,\n",
        "234": "          CollectionFeature.KNOWN_ORDER,\n",
        "235": "          CollectionSize.ANY)\n",
        "236": "      .createTestSuite());\n",
        "237": "    suite.addTest(NavigableSetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "238": "        @Override\n",
        "239": "        protected Set<String> create(String[] elements) {\n",
        "240": "          TreeMultimap<Integer, String> multimap = TreeMultimap.create(\n",
        "241": "              Ordering.natural(), Ordering.natural().nullsFirst());\n",
        "242": "          multimap.putAll(1, Arrays.asList(elements));\n",
        "243": "          return (Set<String>) multimap.asMap().entrySet().iterator().next().getValue();\n",
        "244": "        }\n",
        "245": "\n",
        "246": "        @Override\n",
        "247": "        public List<String> order(List<String> insertionOrder) {\n",
        "248": "          return Ordering.natural().nullsFirst().sortedCopy(insertionOrder);\n",
        "249": "        }\n",
        "250": "      })\n",
        "251": "      .named(\"TreeMultimap.asMap.entrySet collection\")\n",
        "252": "      .withFeatures(\n",
        "253": "          CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "254": "          CollectionFeature.GENERAL_PURPOSE,\n",
        "255": "          CollectionFeature.KNOWN_ORDER,\n",
        "256": "          CollectionSize.ONE,\n",
        "257": "          CollectionSize.SEVERAL)\n",
        "258": "      .createTestSuite());\n",
        "267": "  /**\n",
        "268": "   * Create and populate a {@code TreeMultimap} with the natural ordering of\n",
        "269": "   * keys and values.\n",
        "270": "   */\n",
        "287": "    assertEquals(\"{bar=[1, 2, 3], foo=[-1, 1, 2, 3, 4]}\",\n",
        "288": "        multimap.toString());\n",
        "305": "    Iterator<Entry<String, Collection<Integer>>> iterator =\n",
        "306": "        multimap.asMap().entrySet().iterator();\n",
        "320": "    assertThat(multimap.entries()).containsExactly(\n",
        "321": "        Maps.immutableEntry(\"foo\", 1),\n",
        "322": "        Maps.immutableEntry(\"foo\", 3),\n",
        "323": "        Maps.immutableEntry(\"foo\", 7),\n",
        "324": "        Maps.immutableEntry(\"google\", 2),\n",
        "325": "        Maps.immutableEntry(\"google\", 6),\n",
        "326": "        Maps.immutableEntry(\"tree\", 0),\n",
        "327": "        Maps.immutableEntry(\"tree\", 4)).inOrder();\n",
        "332": "    assertThat(multimap.values()).containsExactly(\n",
        "333": "        1, 3, 7, 2, 6, 0, 4).inOrder();\n",
        "344": "  private static final Comparator<Double> KEY_COMPARATOR =\n",
        "345": "      Ordering.natural();\n",
        "351": "   * Test that creating one TreeMultimap from another does not copy the\n",
        "352": "   * comparators from the source TreeMultimap.\n",
        "368": "  /**\n",
        "369": "   * Test that creating one TreeMultimap from a non-TreeMultimap\n",
        "370": "   * results in natural ordering.\n",
        "371": "   */\n",
        "385": "  /**\n",
        "386": "   * Test that creating one TreeMultimap from a SortedSetMultimap uses natural\n",
        "387": "   * ordering.\n",
        "388": "   */\n",
        "413": "    TreeMultimap<String, Integer> copy\n",
        "414": "        = SerializableTester.reserializeAndAssert(multimap);\n",
        "431": "    assertThat(multimap.keySet()).containsExactly(\n",
        "432": "        new DerivedComparable(\"bar\"), new DerivedComparable(\"foo\")).inOrder();\n",
        "433": "    assertThat(multimap.values()).containsExactly(\n",
        "434": "        new DerivedComparable(\"a\"), new DerivedComparable(\"b\"), new DerivedComparable(\"r\"),\n",
        "435": "        new DerivedComparable(\"f\"), new DerivedComparable(\"o\")).inOrder();\n",
        "443": "    TreeMultimap<LegacyComparable, LegacyComparable> multimap\n",
        "444": "        = TreeMultimap.create();\n",
        "452": "    assertThat(multimap.keySet()).containsExactly(\n",
        "453": "        new LegacyComparable(\"bar\"), new LegacyComparable(\"foo\")).inOrder();\n",
        "454": "    assertThat(multimap.values()).containsExactly(\n",
        "455": "        new LegacyComparable(\"a\"),\n",
        "456": "        new LegacyComparable(\"b\"),\n",
        "457": "        new LegacyComparable(\"r\"),\n",
        "458": "        new LegacyComparable(\"f\"),\n",
        "459": "        new LegacyComparable(\"o\")).inOrder();\n",
        "474": "    assertEquals(ImmutableMap.of(\"google\", googleValues, \"tree\", treeValues),\n",
        "475": "        asMap.tailMap(\"g\"));\n",
        "476": "    assertEquals(ImmutableMap.of(\"google\", googleValues, \"foo\", fooValues),\n",
        "477": "        asMap.headMap(\"h\"));\n",
        "478": "    assertEquals(ImmutableMap.of(\"google\", googleValues),\n",
        "479": "        asMap.subMap(\"g\", \"h\"));\n"
    }
}