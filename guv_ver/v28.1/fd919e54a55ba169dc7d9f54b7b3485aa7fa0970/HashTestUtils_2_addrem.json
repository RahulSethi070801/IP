{
    "addition": {
        "44": "  /** Converts a string, which should contain only ascii-representable characters, to a byte[]. */\n",
        "78": "      throw new AssertionError(\n",
        "79": "          \"Expected: \"\n",
        "80": "              + Integer.toHexString(expected)\n",
        "81": "              + \" got: \"\n",
        "82": "              + Integer.toHexString(verification));\n",
        "86": "  static final Funnel<Object> BAD_FUNNEL =\n",
        "87": "      new Funnel<Object>() {\n",
        "88": "        @Override\n",
        "89": "        public void funnel(Object object, PrimitiveSink bytePrimitiveSink) {\n",
        "90": "          bytePrimitiveSink.putInt(object.hashCode());\n",
        "91": "        }\n",
        "92": "      };\n",
        "96": "      @Override\n",
        "97": "      void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "105": "      @Override\n",
        "106": "      void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "114": "      @Override\n",
        "115": "      void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "123": "      @Override\n",
        "124": "      void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "132": "      @Override\n",
        "133": "      void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "141": "      @Override\n",
        "142": "      void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "150": "      @Override\n",
        "151": "      void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "159": "      @Override\n",
        "160": "      void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "168": "      @Override\n",
        "169": "      void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "178": "      @Override\n",
        "179": "      void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "207": "      @Override\n",
        "208": "      void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "220": "      @Override\n",
        "221": "      void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "222": "        String s = new String(new char[] {randomLowSurrogate(random)});\n",
        "229": "      @Override\n",
        "230": "      void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "231": "        String s = new String(new char[] {randomHighSurrogate(random)});\n",
        "238": "      @Override\n",
        "239": "      void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "240": "        String s = new String(new char[] {randomLowSurrogate(random), randomHighSurrogate(random)});\n",
        "247": "      @Override\n",
        "248": "      void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "249": "        String s = new String(new char[] {randomHighSurrogate(random), randomLowSurrogate(random)});\n",
        "274": "   * unequivocally demonstrate that funneling cannot be occurring. This is done bit-by-bit. For each\n",
        "275": "   * input bit(i) and output bit(j), two pairs of keys must be found with all bits identical except\n",
        "276": "   * bit(i). One pair must differ in output bit(j), and one pair must not. This proves that input\n",
        "277": "   * bit(i) can alter output bit(j).\n",
        "307": "          Assert.fail(\n",
        "308": "              \"input bit(\"\n",
        "309": "                  + i\n",
        "310": "                  + \") was found not to affect all \"\n",
        "311": "                  + hashBits\n",
        "312": "                  + \" output bits; The unaffected bits are \"\n",
        "313": "                  + \"as follows: \"\n",
        "314": "                  + ~(same & diff)\n",
        "315": "                  + \". This was \"\n",
        "316": "                  + \"determined after \"\n",
        "317": "                  + count\n",
        "318": "                  + \" trials.\");\n",
        "363": "   * the output. For example, if f() is a block cipher and c is a characteristic, then f(x^c) =\n",
        "364": "   * f(x)^c with greater than expected probability. The test for funneling is merely a test for\n",
        "365": "   * 1-bit characteristics.\n",
        "404": "            Assert.fail(\n",
        "405": "                \"2-bit delta (\"\n",
        "406": "                    + i\n",
        "407": "                    + \", \"\n",
        "408": "                    + j\n",
        "409": "                    + \") is likely a \"\n",
        "410": "                    + \"characteristic for this hash. This was \"\n",
        "411": "                    + \"determined after \"\n",
        "412": "                    + count\n",
        "413": "                    + \" trials\");\n",
        "460": "   * Checks that a Hasher returns the same HashCode when given the same input, and also that the\n",
        "461": "   * collision rate looks sane.\n",
        "538": "    } catch (IndexOutOfBoundsException expected) {\n",
        "539": "    }\n",
        "543": "    } catch (IndexOutOfBoundsException expected) {\n",
        "544": "    }\n",
        "548": "    } catch (IndexOutOfBoundsException expected) {\n",
        "549": "    }\n",
        "596": "    assertEquals(\n",
        "597": "        hashFunction.hashBytes(bytes), hashFunction.newHasher(size).putBytes(bytes).hash());\n",
        "600": "    assertEquals(\n",
        "601": "        hashFunction.hashBytes(bytes, off, len),\n",
        "621": "    assertEquals(hashFunction.hashInt(i), hashFunction.newHasher().putInt(i).hash());\n",
        "626": "    assertEquals(hashFunction.hashLong(l), hashFunction.newHasher().putLong(l).hash());\n",
        "629": "  private static final ImmutableSet<Charset> CHARSETS =\n",
        "630": "      ImmutableSet.of(\n",
        "631": "          Charsets.ISO_8859_1,\n",
        "632": "          Charsets.US_ASCII,\n",
        "633": "          Charsets.UTF_16,\n",
        "634": "          Charsets.UTF_16BE,\n",
        "635": "          Charsets.UTF_16LE,\n",
        "636": "          Charsets.UTF_8);\n",
        "646": "            hashFunction\n",
        "647": "                .newHasher()\n",
        "648": "                .putUnencodedChars(\"a\")\n",
        "649": "                .putUnencodedChars(\"b\")\n",
        "650": "                .putUnencodedChars(\"c\")\n",
        "651": "                .hash(),\n",
        "661": "    assertEquals(\n",
        "662": "        hashFunction.hashUnencodedChars(string),\n",
        "665": "      assertEquals(\n",
        "666": "          hashFunction.hashString(string, charset),\n",
        "684": "    assertEquals(\n",
        "685": "        hashFunction.hashUnencodedChars(string),\n",
        "690": "    return (char)\n",
        "691": "        (Character.MIN_LOW_SURROGATE\n",
        "692": "            + random.nextInt(Character.MAX_LOW_SURROGATE - Character.MIN_LOW_SURROGATE + 1));\n",
        "696": "    return (char)\n",
        "697": "        (Character.MIN_HIGH_SURROGATE\n",
        "698": "            + random.nextInt(Character.MAX_HIGH_SURROGATE - Character.MIN_HIGH_SURROGATE + 1));\n"
    },
    "removed": {
        "44": "  /**\n",
        "45": "   * Converts a string, which should contain only ascii-representable characters, to a byte[].\n",
        "46": "   */\n",
        "80": "      throw new AssertionError(\"Expected: \" + Integer.toHexString(expected)\n",
        "81": "          + \" got: \" + Integer.toHexString(verification));\n",
        "85": "  static final Funnel<Object> BAD_FUNNEL = new Funnel<Object>() {\n",
        "86": "    @Override public void funnel(Object object, PrimitiveSink bytePrimitiveSink) {\n",
        "87": "      bytePrimitiveSink.putInt(object.hashCode());\n",
        "88": "    }\n",
        "89": "  };\n",
        "93": "      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "101": "      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "109": "      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "117": "      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "125": "      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "133": "      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "141": "      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "149": "      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "157": "      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "166": "      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "194": "      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "206": "      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "207": "        String s = new String(new char[] { randomLowSurrogate(random) });\n",
        "214": "      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "215": "        String s = new String(new char[] { randomHighSurrogate(random) });\n",
        "222": "      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "223": "        String s = new String(new char[] {\n",
        "224": "            randomLowSurrogate(random), randomHighSurrogate(random)});\n",
        "231": "      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {\n",
        "232": "        String s = new String(new char[] {\n",
        "233": "            randomHighSurrogate(random), randomLowSurrogate(random)});\n",
        "258": "   * unequivocally demonstrate that funneling cannot be occurring. This is done bit-by-bit. For\n",
        "259": "   * each input bit(i) and output bit(j), two pairs of keys must be found with all bits identical\n",
        "260": "   * except bit(i). One pair must differ in output bit(j), and one pair must not. This proves that\n",
        "261": "   * input bit(i) can alter output bit(j).\n",
        "291": "          Assert.fail(\"input bit(\" + i + \") was found not to affect all \" +\n",
        "292": "               hashBits + \" output bits; The unaffected bits are \" +\n",
        "293": "               \"as follows: \" + ~(same & diff) + \". This was \" +\n",
        "294": "               \"determined after \" + count + \" trials.\");\n",
        "339": "   * the output. For example, if f() is a block cipher and c is a characteristic, then\n",
        "340": "   * f(x^c) = f(x)^c with greater than expected probability. The test for funneling is merely a test\n",
        "341": "   * for 1-bit characteristics.\n",
        "380": "            Assert.fail(\"2-bit delta (\" + i + \", \" + j + \") is likely a \" +\n",
        "381": "                 \"characteristic for this hash. This was \" +\n",
        "382": "                 \"determined after \" + count + \" trials\");\n",
        "429": "   * Checks that a Hasher returns the same HashCode when given the same input, and also\n",
        "430": "   * that the collision rate looks sane.\n",
        "507": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "511": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "515": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "562": "    assertEquals(hashFunction.hashBytes(bytes),\n",
        "563": "        hashFunction.newHasher(size).putBytes(bytes).hash());\n",
        "566": "    assertEquals(hashFunction.hashBytes(bytes, off, len),\n",
        "586": "    assertEquals(hashFunction.hashInt(i),\n",
        "587": "        hashFunction.newHasher().putInt(i).hash());\n",
        "592": "    assertEquals(hashFunction.hashLong(l),\n",
        "593": "        hashFunction.newHasher().putLong(l).hash());\n",
        "596": "  private static final ImmutableSet<Charset> CHARSETS = ImmutableSet.of(\n",
        "597": "      Charsets.ISO_8859_1,\n",
        "598": "      Charsets.US_ASCII,\n",
        "599": "      Charsets.UTF_16,\n",
        "600": "      Charsets.UTF_16BE,\n",
        "601": "      Charsets.UTF_16LE,\n",
        "602": "      Charsets.UTF_8);\n",
        "612": "            hashFunction.newHasher().putUnencodedChars(\"a\").putUnencodedChars(\"b\")\n",
        "613": "                .putUnencodedChars(\"c\").hash(),\n",
        "623": "    assertEquals(hashFunction.hashUnencodedChars(string),\n",
        "626": "      assertEquals(hashFunction.hashString(string, charset),\n",
        "644": "    assertEquals(hashFunction.hashUnencodedChars(string),\n",
        "649": "    return (char) (Character.MIN_LOW_SURROGATE\n",
        "650": "        + random.nextInt(Character.MAX_LOW_SURROGATE - Character.MIN_LOW_SURROGATE + 1));\n",
        "654": "    return (char) (Character.MIN_HIGH_SURROGATE\n",
        "655": "        + random.nextInt(Character.MAX_HIGH_SURROGATE - Character.MIN_HIGH_SURROGATE + 1));\n"
    }
}