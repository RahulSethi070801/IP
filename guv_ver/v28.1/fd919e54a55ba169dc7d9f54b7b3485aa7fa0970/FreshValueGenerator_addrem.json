{
    "addition": {
        "132": "\n",
        "134": "    ImmutableMap.Builder<Class<?>, Method> builder = ImmutableMap.builder();\n",
        "144": "\n",
        "146": "    ImmutableMap.Builder<Class<?>, Method> builder = ImmutableMap.builder();\n",
        "170": "   *\n",
        "172": "   *   <li>exactly of the given type, including generic type parameters, such as {@code\n",
        "173": "   *       ImmutableList<String>};\n",
        "174": "   *   <li>of the raw type;\n",
        "175": "   *   <li>null if no value can be generated.\n",
        "178": "  @Nullable\n",
        "179": "  final Object generateFresh(TypeToken<?> type) {\n",
        "187": "  @Nullable\n",
        "188": "  final <T> T generateFresh(Class<T> type) {\n",
        "199": "   * Generates an instance for {@code type} using the current {@link #freshness}. The generated\n",
        "200": "   * instance may or may not be unique across different calls.\n",
        "291": "    @Override\n",
        "292": "    protected Object handleInvocation(Object proxy, Method method, Object[] args) {\n",
        "296": "    @Override\n",
        "297": "    public int hashCode() {\n",
        "301": "    @Override\n",
        "302": "    public boolean equals(@Nullable Object obj) {\n",
        "310": "    @Override\n",
        "311": "    public String toString() {\n",
        "339": "   * generated type. The method parameters correspond to the generated type's type parameters. For\n",
        "340": "   * example, if the annotated method returns {@code Map<K, V>}, the method signature should be:\n",
        "356": "  @Generates\n",
        "357": "  private Class<?> generateClass() {\n",
        "360": "            int.class, long.class, void.class, Object.class, Object[].class, Iterable.class),\n",
        "364": "  @Generates\n",
        "365": "  private Object generateObject() {\n",
        "369": "  @Generates\n",
        "370": "  private Number generateNumber() {\n",
        "374": "  @Generates\n",
        "375": "  private int generateInt() {\n",
        "379": "  @Generates\n",
        "380": "  private Integer generateInteger() {\n",
        "384": "  @Generates\n",
        "385": "  private long generateLong() {\n",
        "389": "  @Generates\n",
        "390": "  private Long generateLongObject() {\n",
        "394": "  @Generates\n",
        "395": "  private float generateFloat() {\n",
        "399": "  @Generates\n",
        "400": "  private Float generateFloatObject() {\n",
        "404": "  @Generates\n",
        "405": "  private double generateDouble() {\n",
        "409": "  @Generates\n",
        "410": "  private Double generateDoubleObject() {\n",
        "414": "  @Generates\n",
        "415": "  private short generateShort() {\n",
        "419": "  @Generates\n",
        "420": "  private Short generateShortObject() {\n",
        "424": "  @Generates\n",
        "425": "  private byte generateByte() {\n",
        "429": "  @Generates\n",
        "430": "  private Byte generateByteObject() {\n",
        "434": "  @Generates\n",
        "435": "  private char generateChar() {\n",
        "439": "  @Generates\n",
        "440": "  private Character generateCharacter() {\n",
        "444": "  @Generates\n",
        "445": "  private boolean generateBoolean() {\n",
        "449": "  @Generates\n",
        "450": "  private Boolean generateBooleanObject() {\n",
        "454": "  @Generates\n",
        "455": "  private UnsignedInteger generateUnsignedInteger() {\n",
        "459": "  @Generates\n",
        "460": "  private UnsignedLong generateUnsignedLong() {\n",
        "464": "  @Generates\n",
        "465": "  private BigInteger generateBigInteger() {\n",
        "469": "  @Generates\n",
        "470": "  private BigDecimal generateBigDecimal() {\n",
        "474": "  @Generates\n",
        "475": "  private CharSequence generateCharSequence() {\n",
        "479": "  @Generates\n",
        "480": "  private String generateString() {\n",
        "484": "  @Generates\n",
        "485": "  private Comparable<?> generateComparable() {\n",
        "489": "  @Generates\n",
        "490": "  private Pattern generatePattern() {\n",
        "494": "  @Generates\n",
        "495": "  private Charset generateCharset() {\n",
        "499": "  @Generates\n",
        "500": "  private Locale generateLocale() {\n",
        "504": "  @Generates\n",
        "505": "  private Currency generateCurrency() {\n",
        "543": "  @Generates\n",
        "544": "  private Joiner generateJoiner() {\n",
        "548": "  @Generates\n",
        "549": "  private Splitter generateSplitter() {\n",
        "553": "  @Generates\n",
        "554": "  private <T> Equivalence<T> generateEquivalence() {\n",
        "556": "      @Override\n",
        "557": "      protected boolean doEquivalent(T a, T b) {\n",
        "560": "\n",
        "561": "      @Override\n",
        "562": "      protected int doHash(T t) {\n",
        "565": "\n",
        "567": "\n",
        "568": "      @Override\n",
        "569": "      public String toString() {\n",
        "575": "  @Generates\n",
        "576": "  private CharMatcher generateCharMatcher() {\n",
        "578": "      @Override\n",
        "579": "      public boolean matches(char c) {\n",
        "582": "\n",
        "584": "\n",
        "585": "      @Override\n",
        "586": "      public String toString() {\n",
        "592": "  @Generates\n",
        "593": "  private Ticker generateTicker() {\n",
        "595": "      @Override\n",
        "596": "      public long read() {\n",
        "599": "\n",
        "601": "\n",
        "602": "      @Override\n",
        "603": "      public String toString() {\n",
        "610": "  @Generates\n",
        "611": "  private <T> Comparator<T> generateComparator() {\n",
        "615": "  @Generates\n",
        "616": "  private <T> Ordering<T> generateOrdering() {\n",
        "618": "      @Override\n",
        "619": "      public int compare(T left, T right) {\n",
        "622": "\n",
        "624": "\n",
        "625": "      @Override\n",
        "626": "      public String toString() {\n",
        "632": "  @Empty\n",
        "633": "  private static <C extends Comparable<?>> Range<C> generateRange() {\n",
        "637": "  @Generates\n",
        "638": "  private static <C extends Comparable<?>> Range<C> generateRange(C freshElement) {\n",
        "642": "  @Generates\n",
        "643": "  private static <E> Iterable<E> generateIterable(E freshElement) {\n",
        "647": "  @Generates\n",
        "648": "  private static <E> Collection<E> generateCollection(E freshElement) {\n",
        "652": "  @Generates\n",
        "653": "  private static <E> List<E> generateList(E freshElement) {\n",
        "657": "  @Generates\n",
        "658": "  private static <E> ArrayList<E> generateArrayList(E freshElement) {\n",
        "664": "  @Generates\n",
        "665": "  private static <E> LinkedList<E> generateLinkedList(E freshElement) {\n",
        "671": "  @Generates\n",
        "672": "  private static <E> ImmutableList<E> generateImmutableList(E freshElement) {\n",
        "676": "  @Generates\n",
        "677": "  private static <E> ImmutableCollection<E> generateImmutableCollection(E freshElement) {\n",
        "681": "  @Generates\n",
        "682": "  private static <E> Set<E> generateSet(E freshElement) {\n",
        "686": "  @Generates\n",
        "687": "  private static <E> HashSet<E> generateHashSet(E freshElement) {\n",
        "691": "  @Generates\n",
        "692": "  private static <E> LinkedHashSet<E> generateLinkedHashSet(E freshElement) {\n",
        "698": "  @Generates\n",
        "699": "  private static <E> ImmutableSet<E> generateImmutableSet(E freshElement) {\n",
        "703": "  @Generates\n",
        "704": "  private static <E extends Comparable<? super E>> SortedSet<E> generateSortedSet(E freshElement) {\n",
        "708": "  @Generates\n",
        "709": "  private static <E extends Comparable<? super E>> NavigableSet<E> generateNavigableSet(\n",
        "710": "      E freshElement) {\n",
        "714": "  @Generates\n",
        "715": "  private static <E extends Comparable<? super E>> TreeSet<E> generateTreeSet(E freshElement) {\n",
        "721": "  @Generates\n",
        "722": "  private static <E extends Comparable<? super E>> ImmutableSortedSet<E> generateImmutableSortedSet(\n",
        "723": "      E freshElement) {\n",
        "727": "  @Generates\n",
        "728": "  private static <E> Multiset<E> generateMultiset(E freshElement) {\n",
        "732": "  @Generates\n",
        "733": "  private static <E> HashMultiset<E> generateHashMultiset(E freshElement) {\n",
        "739": "  @Generates\n",
        "740": "  private static <E> LinkedHashMultiset<E> generateLinkedHashMultiset(E freshElement) {\n",
        "746": "  @Generates\n",
        "747": "  private static <E> ImmutableMultiset<E> generateImmutableMultiset(E freshElement) {\n",
        "751": "  @Generates\n",
        "752": "  private static <E extends Comparable<E>> SortedMultiset<E> generateSortedMultiset(\n",
        "757": "  @Generates\n",
        "758": "  private static <E extends Comparable<E>> TreeMultiset<E> generateTreeMultiset(E freshElement) {\n",
        "764": "  @Generates\n",
        "765": "  private static <E extends Comparable<E>>\n",
        "766": "      ImmutableSortedMultiset<E> generateImmutableSortedMultiset(E freshElement) {\n",
        "770": "  @Generates\n",
        "771": "  private static <K, V> Map<K, V> generateMap(K key, V value) {\n",
        "775": "  @Generates\n",
        "776": "  private static <K, V> HashMap<K, V> generateHashdMap(K key, V value) {\n",
        "780": "  @Generates\n",
        "781": "  private static <K, V> LinkedHashMap<K, V> generateLinkedHashMap(K key, V value) {\n",
        "787": "  @Generates\n",
        "788": "  private static <K, V> ImmutableMap<K, V> generateImmutableMap(K key, V value) {\n",
        "792": "  @Empty\n",
        "793": "  private static <K, V> ConcurrentMap<K, V> generateConcurrentMap() {\n",
        "797": "  @Generates\n",
        "798": "  private static <K, V> ConcurrentMap<K, V> generateConcurrentMap(K key, V value) {\n",
        "804": "  @Generates\n",
        "805": "  private static <K extends Comparable<? super K>, V> SortedMap<K, V> generateSortedMap(\n",
        "806": "      K key, V value) {\n",
        "810": "  @Generates\n",
        "811": "  private static <K extends Comparable<? super K>, V> NavigableMap<K, V> generateNavigableMap(\n",
        "812": "      K key, V value) {\n",
        "816": "  @Generates\n",
        "817": "  private static <K extends Comparable<? super K>, V> TreeMap<K, V> generateTreeMap(\n",
        "824": "  @Generates\n",
        "825": "  private static <K extends Comparable<? super K>, V>\n",
        "826": "      ImmutableSortedMap<K, V> generateImmutableSortedMap(K key, V value) {\n",
        "830": "  @Generates\n",
        "831": "  private static <K, V> Multimap<K, V> generateMultimap(K key, V value) {\n",
        "835": "  @Generates\n",
        "836": "  private static <K, V> ImmutableMultimap<K, V> generateImmutableMultimap(K key, V value) {\n",
        "840": "  @Generates\n",
        "841": "  private static <K, V> ListMultimap<K, V> generateListMultimap(K key, V value) {\n",
        "845": "  @Generates\n",
        "846": "  private static <K, V> ArrayListMultimap<K, V> generateArrayListMultimap(K key, V value) {\n",
        "852": "  @Generates\n",
        "853": "  private static <K, V> ImmutableListMultimap<K, V> generateImmutableListMultimap(K key, V value) {\n",
        "857": "  @Generates\n",
        "858": "  private static <K, V> SetMultimap<K, V> generateSetMultimap(K key, V value) {\n",
        "862": "  @Generates\n",
        "863": "  private static <K, V> HashMultimap<K, V> generateHashMultimap(K key, V value) {\n",
        "869": "  @Generates\n",
        "870": "  private static <K, V> LinkedHashMultimap<K, V> generateLinkedHashMultimap(K key, V value) {\n",
        "876": "  @Generates\n",
        "877": "  private static <K, V> ImmutableSetMultimap<K, V> generateImmutableSetMultimap(K key, V value) {\n",
        "881": "  @Generates\n",
        "882": "  private static <K, V> BiMap<K, V> generateBimap(K key, V value) {\n",
        "886": "  @Generates\n",
        "887": "  private static <K, V> HashBiMap<K, V> generateHashBiMap(K key, V value) {\n",
        "893": "  @Generates\n",
        "894": "  private static <K, V> ImmutableBiMap<K, V> generateImmutableBimap(K key, V value) {\n",
        "898": "  @Generates\n",
        "899": "  private static <R, C, V> Table<R, C, V> generateTable(R row, C column, V value) {\n",
        "903": "  @Generates\n",
        "904": "  private static <R, C, V> HashBasedTable<R, C, V> generateHashBasedTable(\n",
        "912": "  @Generates\n",
        "913": "  private static <R extends Comparable, C extends Comparable, V>\n",
        "914": "      RowSortedTable<R, C, V> generateRowSortedTable(R row, C column, V value) {\n",
        "919": "  @Generates\n",
        "920": "  private static <R extends Comparable, C extends Comparable, V>\n",
        "921": "      TreeBasedTable<R, C, V> generateTreeBasedTable(R row, C column, V value) {\n",
        "927": "  @Generates\n",
        "928": "  private static <R, C, V> ImmutableTable<R, C, V> generateImmutableTable(\n",
        "934": "  @Generates\n",
        "935": "  private TypeToken<?> generateTypeToken() {\n",
        "940": "  @Generates\n",
        "941": "  private File generateFile() {\n",
        "945": "  @Generates\n",
        "946": "  private static ByteArrayInputStream generateByteArrayInputStream() {\n",
        "950": "  @Generates\n",
        "951": "  private static InputStream generateInputStream() {\n",
        "955": "  @Generates\n",
        "956": "  private StringReader generateStringReader() {\n",
        "960": "  @Generates\n",
        "961": "  private Reader generateReader() {\n",
        "965": "  @Generates\n",
        "966": "  private Readable generateReadable() {\n",
        "970": "  @Generates\n",
        "971": "  private Buffer generateBuffer() {\n",
        "975": "  @Generates\n",
        "976": "  private CharBuffer generateCharBuffer() {\n",
        "980": "  @Generates\n",
        "981": "  private ByteBuffer generateByteBuffer() {\n",
        "985": "  @Generates\n",
        "986": "  private ShortBuffer generateShortBuffer() {\n",
        "990": "  @Generates\n",
        "991": "  private IntBuffer generateIntBuffer() {\n",
        "995": "  @Generates\n",
        "996": "  private LongBuffer generateLongBuffer() {\n",
        "1000": "  @Generates\n",
        "1001": "  private FloatBuffer generateFloatBuffer() {\n",
        "1005": "  @Generates\n",
        "1006": "  private DoubleBuffer generateDoubleBuffer() {\n"
    },
    "removed": {
        "133": "    ImmutableMap.Builder<Class<?>, Method> builder =\n",
        "134": "        ImmutableMap.builder();\n",
        "145": "    ImmutableMap.Builder<Class<?>, Method> builder =\n",
        "146": "        ImmutableMap.builder();\n",
        "171": "   * <li>exactly of the given type, including generic type parameters, such as\n",
        "172": "   *     {@code ImmutableList<String>};\n",
        "173": "   * <li>of the raw type;\n",
        "174": "   * <li>null if no value can be generated.\n",
        "177": "  @Nullable final Object generateFresh(TypeToken<?> type) {\n",
        "185": "  @Nullable final <T> T generateFresh(Class<T> type) {\n",
        "196": "   * Generates an instance for {@code type} using the current {@link #freshness}.\n",
        "197": "   * The generated instance may or may not be unique across different calls.\n",
        "288": "    @Override protected Object handleInvocation(Object proxy, Method method, Object[] args) {\n",
        "292": "    @Override public int hashCode() {\n",
        "296": "    @Override public boolean equals(@Nullable Object obj) {\n",
        "304": "    @Override public String toString() {\n",
        "332": "   * generated type. The method parameters correspond to the generated type's type parameters.\n",
        "333": "   * For example, if the annotated method returns {@code Map<K, V>}, the method signature should be:\n",
        "349": "  @Generates private Class<?> generateClass() {\n",
        "352": "            int.class, long.class, void.class,\n",
        "353": "            Object.class, Object[].class, Iterable.class),\n",
        "357": "  @Generates private Object generateObject() {\n",
        "361": "  @Generates private Number generateNumber() {\n",
        "365": "  @Generates private int generateInt() {\n",
        "369": "  @Generates private Integer generateInteger() {\n",
        "373": "  @Generates private long generateLong() {\n",
        "377": "  @Generates private Long generateLongObject() {\n",
        "381": "  @Generates private float generateFloat() {\n",
        "385": "  @Generates private Float generateFloatObject() {\n",
        "389": "  @Generates private double generateDouble() {\n",
        "393": "  @Generates private Double generateDoubleObject() {\n",
        "397": "  @Generates private short generateShort() {\n",
        "401": "  @Generates private Short generateShortObject() {\n",
        "405": "  @Generates private byte generateByte() {\n",
        "409": "  @Generates private Byte generateByteObject() {\n",
        "413": "  @Generates private char generateChar() {\n",
        "417": "  @Generates private Character generateCharacter() {\n",
        "421": "  @Generates private boolean generateBoolean() {\n",
        "425": "  @Generates private Boolean generateBooleanObject() {\n",
        "429": "  @Generates private UnsignedInteger generateUnsignedInteger() {\n",
        "433": "  @Generates private UnsignedLong generateUnsignedLong() {\n",
        "437": "  @Generates private BigInteger generateBigInteger() {\n",
        "441": "  @Generates private BigDecimal generateBigDecimal() {\n",
        "445": "  @Generates private CharSequence generateCharSequence() {\n",
        "449": "  @Generates private String generateString() {\n",
        "453": "  @Generates private Comparable<?> generateComparable() {\n",
        "457": "  @Generates private Pattern generatePattern() {\n",
        "461": "  @Generates private Charset generateCharset() {\n",
        "465": "  @Generates private Locale generateLocale() {\n",
        "469": "  @Generates private Currency generateCurrency() {\n",
        "507": "  @Generates private Joiner generateJoiner() {\n",
        "511": "  @Generates private Splitter generateSplitter() {\n",
        "515": "  @Generates private <T> Equivalence<T> generateEquivalence() {\n",
        "517": "      @Override protected boolean doEquivalent(T a, T b) {\n",
        "520": "      @Override protected int doHash(T t) {\n",
        "524": "      @Override public String toString() {\n",
        "530": "  @Generates private CharMatcher generateCharMatcher() {\n",
        "532": "      @Override public boolean matches(char c) {\n",
        "536": "      @Override public String toString() {\n",
        "542": "  @Generates private Ticker generateTicker() {\n",
        "544": "      @Override public long read() {\n",
        "548": "      @Override public String toString() {\n",
        "555": "  @Generates private <T> Comparator<T> generateComparator() {\n",
        "559": "  @Generates private <T> Ordering<T> generateOrdering() {\n",
        "561": "      @Override public int compare(T left, T right) {\n",
        "565": "      @Override public String toString() {\n",
        "571": "  @Empty private static <C extends Comparable<?>> Range<C> generateRange() {\n",
        "575": "  @Generates private static <C extends Comparable<?>> Range<C> generateRange(C freshElement) {\n",
        "579": "  @Generates private static <E> Iterable<E> generateIterable(E freshElement) {\n",
        "583": "  @Generates private static <E> Collection<E> generateCollection(E freshElement) {\n",
        "587": "  @Generates private static <E> List<E> generateList(E freshElement) {\n",
        "591": "  @Generates private static <E> ArrayList<E> generateArrayList(E freshElement) {\n",
        "597": "  @Generates private static <E> LinkedList<E> generateLinkedList(E freshElement) {\n",
        "603": "  @Generates private static <E> ImmutableList<E> generateImmutableList(E freshElement) {\n",
        "607": "  @Generates private static <E> ImmutableCollection<E> generateImmutableCollection(E freshElement) {\n",
        "611": "  @Generates private static <E> Set<E> generateSet(E freshElement) {\n",
        "615": "  @Generates private static <E> HashSet<E> generateHashSet(E freshElement) {\n",
        "619": "  @Generates private static <E> LinkedHashSet<E> generateLinkedHashSet(E freshElement) {\n",
        "625": "  @Generates private static <E> ImmutableSet<E> generateImmutableSet(E freshElement) {\n",
        "629": "  @Generates private static <E extends Comparable<? super E>> SortedSet<E>\n",
        "630": "      generateSortedSet(E freshElement) {\n",
        "634": "  @Generates private static <E extends Comparable<? super E>> NavigableSet<E>\n",
        "635": "      generateNavigableSet(E freshElement) {\n",
        "639": "  @Generates private static <E extends Comparable<? super E>> TreeSet<E> generateTreeSet(\n",
        "640": "      E freshElement) {\n",
        "646": "  @Generates private static <E extends Comparable<? super E>> ImmutableSortedSet<E>\n",
        "647": "      generateImmutableSortedSet(E freshElement) {\n",
        "651": "  @Generates private static <E> Multiset<E> generateMultiset(E freshElement) {\n",
        "655": "  @Generates private static <E> HashMultiset<E> generateHashMultiset(E freshElement) {\n",
        "661": "  @Generates private static <E> LinkedHashMultiset<E> generateLinkedHashMultiset(E freshElement) {\n",
        "667": "  @Generates private static <E> ImmutableMultiset<E> generateImmutableMultiset(E freshElement) {\n",
        "671": "  @Generates private static <E extends Comparable<E>> SortedMultiset<E> generateSortedMultiset(\n",
        "676": "  @Generates private static <E extends Comparable<E>> TreeMultiset<E> generateTreeMultiset(\n",
        "677": "      E freshElement) {\n",
        "683": "  @Generates private static <E extends Comparable<E>> ImmutableSortedMultiset<E>\n",
        "684": "      generateImmutableSortedMultiset(E freshElement) {\n",
        "688": "  @Generates private static <K, V> Map<K, V> generateMap(K key, V value) {\n",
        "692": "  @Generates private static <K, V> HashMap<K, V> generateHashdMap(K key, V value) {\n",
        "696": "  @Generates private static <K, V> LinkedHashMap<K, V> generateLinkedHashMap(K key, V value) {\n",
        "702": "  @Generates private static <K, V> ImmutableMap<K, V> generateImmutableMap(K key, V value) {\n",
        "706": "  @Empty private static <K, V> ConcurrentMap<K, V> generateConcurrentMap() {\n",
        "710": "  @Generates private static <K, V> ConcurrentMap<K, V> generateConcurrentMap(K key, V value) {\n",
        "716": "  @Generates private static <K extends Comparable<? super K>, V> SortedMap<K, V>\n",
        "717": "      generateSortedMap(K key, V value) {\n",
        "721": "  @Generates private static <K extends Comparable<? super K>, V> NavigableMap<K, V>\n",
        "722": "      generateNavigableMap(K key, V value) {\n",
        "726": "  @Generates private static <K extends Comparable<? super K>, V> TreeMap<K, V> generateTreeMap(\n",
        "733": "  @Generates private static <K extends Comparable<? super K>, V> ImmutableSortedMap<K, V>\n",
        "734": "      generateImmutableSortedMap(K key, V value) {\n",
        "738": "  @Generates private static <K, V> Multimap<K, V> generateMultimap(K key, V value) {\n",
        "742": "  @Generates private static <K, V> ImmutableMultimap<K, V> generateImmutableMultimap(\n",
        "743": "      K key, V value) {\n",
        "747": "  @Generates private static <K, V> ListMultimap<K, V> generateListMultimap(K key, V value) {\n",
        "751": "  @Generates private static <K, V> ArrayListMultimap<K, V> generateArrayListMultimap(\n",
        "752": "      K key, V value) {\n",
        "758": "  @Generates private static <K, V> ImmutableListMultimap<K, V> generateImmutableListMultimap(\n",
        "759": "      K key, V value) {\n",
        "763": "  @Generates private static <K, V> SetMultimap<K, V> generateSetMultimap(K key, V value) {\n",
        "767": "  @Generates private static <K, V> HashMultimap<K, V> generateHashMultimap(K key, V value) {\n",
        "773": "  @Generates private static <K, V> LinkedHashMultimap<K, V> generateLinkedHashMultimap(\n",
        "774": "      K key, V value) {\n",
        "780": "  @Generates private static <K, V> ImmutableSetMultimap<K, V> generateImmutableSetMultimap(\n",
        "781": "      K key, V value) {\n",
        "785": "  @Generates private static <K, V> BiMap<K, V> generateBimap(K key, V value) {\n",
        "789": "  @Generates private static <K, V> HashBiMap<K, V> generateHashBiMap(K key, V value) {\n",
        "795": "  @Generates private static <K, V> ImmutableBiMap<K, V> generateImmutableBimap(\n",
        "796": "      K key, V value) {\n",
        "800": "  @Generates private static <R, C, V> Table<R, C, V> generateTable(R row, C column, V value) {\n",
        "804": "  @Generates private static <R, C, V> HashBasedTable<R, C, V> generateHashBasedTable(\n",
        "812": "  @Generates private static <R extends Comparable, C extends Comparable, V> RowSortedTable<R, C, V>\n",
        "813": "      generateRowSortedTable(R row, C column, V value) {\n",
        "818": "  @Generates private static <R extends Comparable, C extends Comparable, V> TreeBasedTable<R, C, V>\n",
        "819": "      generateTreeBasedTable(R row, C column, V value) {\n",
        "825": "  @Generates private static <R, C, V> ImmutableTable<R, C, V> generateImmutableTable(\n",
        "831": "  @Generates private TypeToken<?> generateTypeToken() {\n",
        "836": "  @Generates private File generateFile() {\n",
        "840": "  @Generates private static ByteArrayInputStream generateByteArrayInputStream() {\n",
        "844": "  @Generates private static InputStream generateInputStream() {\n",
        "848": "  @Generates private StringReader generateStringReader() {\n",
        "852": "  @Generates private Reader generateReader() {\n",
        "856": "  @Generates private Readable generateReadable() {\n",
        "860": "  @Generates private Buffer generateBuffer() {\n",
        "864": "  @Generates private CharBuffer generateCharBuffer() {\n",
        "868": "  @Generates private ByteBuffer generateByteBuffer() {\n",
        "872": "  @Generates private ShortBuffer generateShortBuffer() {\n",
        "876": "  @Generates private IntBuffer generateIntBuffer() {\n",
        "880": "  @Generates private LongBuffer generateLongBuffer() {\n",
        "884": "  @Generates private FloatBuffer generateFloatBuffer() {\n",
        "888": "  @Generates private DoubleBuffer generateDoubleBuffer() {\n"
    }
}