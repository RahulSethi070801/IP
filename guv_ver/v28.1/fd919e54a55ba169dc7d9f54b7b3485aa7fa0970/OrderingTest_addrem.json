{
    "addition": {
        "106": "    Helpers.testComparator(comparator, Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE);\n",
        "110": "    } catch (NullPointerException expected) {\n",
        "111": "    }\n",
        "115": "    } catch (NullPointerException expected) {\n",
        "116": "    }\n",
        "120": "    } catch (NullPointerException expected) {\n",
        "121": "    }\n",
        "127": "    Ordering<String> caseInsensitiveOrdering = Ordering.from(String.CASE_INSENSITIVE_ORDER);\n",
        "133": "    Ordering<String> orderingFromOrdering = Ordering.from(Ordering.<String>natural());\n",
        "141": "    Comparator<Integer> c = Ordering.explicit(Collections.<Integer>emptyList());\n",
        "184": "    Comparator<Integer> c = Ordering.explicit(2, 8, 6, 1, 7, 5, 3, 4, 0, 9);\n",
        "223": "    Ordering<Object> arbitrary =\n",
        "224": "        new ArbitraryOrdering() {\n",
        "225": "          @Override\n",
        "226": "          int identityHashCode(Object object) {\n",
        "227": "            return ((Integer) object) % 5; // fake tons of collisions!\n",
        "228": "          }\n",
        "229": "        };\n",
        "275": "    Comparator<String> comparator =\n",
        "276": "        Ordering.compound(\n",
        "277": "            ImmutableList.of(\n",
        "278": "                byCharAt(0), byCharAt(1), byCharAt(2), byCharAt(3), byCharAt(4), byCharAt(5)));\n",
        "279": "    Helpers.testComparator(\n",
        "280": "        comparator,\n",
        "281": "        ImmutableList.of(\n",
        "282": "            \"applesauce\",\n",
        "283": "            \"apricot\",\n",
        "284": "            \"artichoke\",\n",
        "285": "            \"banality\",\n",
        "286": "            \"banana\",\n",
        "287": "            \"banquet\",\n",
        "288": "            \"tangelo\",\n",
        "289": "            \"tangerine\"));\n",
        "295": "    Helpers.testComparator(\n",
        "296": "        comparator,\n",
        "297": "        ImmutableList.of(\"red\", \"yellow\", \"violet\", \"blue\", \"indigo\", \"green\", \"orange\"));\n",
        "319": "    Ordering<Number> f = numbers.compound(objects).compound(objects); // bad IDEA\n",
        "324": "    Ordering<Number> j = objects.compound(numbers.compound(objects)); // bad IDEA\n",
        "341": "    Helpers.testComparator(reverseOrder, Integer.MAX_VALUE, 1, 0, -1, Integer.MIN_VALUE);\n",
        "365": "  private static final Ordering<Integer> DECREASING_INTEGER = Ordering.natural().reverse();\n",
        "368": "    Comparator<String> comparator =\n",
        "369": "        Ordering.natural().onResultOf(StringLengthFunction.StringLength);\n",
        "376": "            comparator, Ordering.natural().onResultOf(StringLengthFunction.StringLength))\n",
        "380": "    assertEquals(\"Ordering.natural().onResultOf(StringLength)\", comparator.toString());\n",
        "384": "    Comparator<String> comparator =\n",
        "385": "        DECREASING_INTEGER.onResultOf(StringLengthFunction.StringLength);\n",
        "392": "            comparator, DECREASING_INTEGER.onResultOf(StringLengthFunction.StringLength))\n",
        "393": "        .addEqualityGroup(DECREASING_INTEGER.onResultOf(Functions.constant(1)))\n",
        "397": "    assertEquals(\"Ordering.natural().reverse().onResultOf(StringLength)\", comparator.toString());\n",
        "448": "    List<Integer> unsortedInts = Collections.unmodifiableList(Arrays.asList(5, 0, 3, null, 0, 9));\n",
        "449": "    List<Integer> sortedInts = numberOrdering.nullsLast().sortedCopy(unsortedInts);\n",
        "452": "    assertEquals(\n",
        "453": "        Collections.emptyList(), numberOrdering.sortedCopy(Collections.<Integer>emptyList()));\n",
        "458": "    ImmutableList<Integer> sortedInts = numberOrdering.immutableSortedCopy(unsortedInts);\n",
        "461": "    assertEquals(\n",
        "462": "        Collections.<Integer>emptyList(),\n",
        "490": "    assertTrue(numberOrdering.isStrictlyOrdered(Collections.<Integer>emptyList()));\n",
        "501": "    List<Integer> result = numberOrdering.leastOf(Iterators.<Integer>emptyIterator(), 0);\n",
        "515": "    List<Integer> result = numberOrdering.leastOf(Iterators.<Integer>emptyIterator(), 1);\n",
        "545": "    List<Integer> result = numberOrdering.leastOf(Iterators.singletonIterator(3), 0);\n",
        "559": "    List<Integer> result = numberOrdering.leastOf(Iterators.forArray(3, 4, 5, -1), 0);\n",
        "573": "    List<Integer> result = numberOrdering.leastOf(Iterators.forArray(3, 4, 5, -1), 1);\n",
        "637": "    List<Integer> result = Ordering.natural().nullsLast().leastOf(list.iterator(), list.size());\n",
        "692": "  private static void runLeastOfComparison(int iterations, int elements, int seeds) {\n",
        "704": "        assertEquals(ordering.sortedCopy(list).subList(0, k), ordering.leastOf(list, k));\n",
        "711": "    assertEquals(Arrays.asList(1, 2, 3, 4, 5), Ordering.natural().leastOf(list, Integer.MAX_VALUE));\n",
        "716": "    assertEquals(\n",
        "717": "        Arrays.asList(1, 2, 3, 4, 5),\n",
        "718": "        Ordering.natural().leastOf(list.iterator(), Integer.MAX_VALUE));\n",
        "738": "    assertEquals(Arrays.asList(4, 4, 3, 3), numberOrdering.greatestOf(list.iterator(), 4));\n",
        "825": "    @Override\n",
        "826": "    public int compare(Number a, Number b) {\n",
        "829": "\n",
        "830": "    @Override\n",
        "831": "    public int hashCode() {\n",
        "834": "\n",
        "835": "    @Override\n",
        "836": "    public boolean equals(Object other) {\n",
        "839": "\n",
        "858": "    testExhaustively(Ordering.explicit(\"a\", \"b\", \"c\", \"d\"), \"a\", \"b\", \"d\");\n",
        "868": "    testExhaustively(Ordering.from(String.CASE_INSENSITIVE_ORDER), \"A\", \"b\", \"C\", \"d\");\n",
        "882": "   * Requires at least 3 elements in {@code strictlyOrderedElements} in order to test the varargs\n",
        "883": "   * version of min/max.\n",
        "887": "    checkArgument(\n",
        "888": "        strictlyOrderedElements.length >= 3,\n",
        "889": "        \"strictlyOrderedElements \" + \"requires at least 3 elements\");\n",
        "916": "   * An aggregation of an ordering with a list (of size > 1) that should prove to be in strictly\n",
        "917": "   * increasing order according to that ordering.\n",
        "967": "        assertEquals(i, ordering.binarySearch(strictlyOrderedList, strictlyOrderedList.get(i)));\n",
        "987": "   * A means for changing an Ordering into another Ordering. Each instance is responsible for\n",
        "988": "   * creating the alternate Ordering, and providing a List that is known to be ordered, based on an\n",
        "989": "   * input List known to be ordered according to the input Ordering.\n",
        "993": "      @Override\n",
        "994": "      <T> Scenario<?> mutate(Scenario<T> scenario) {\n",
        "1001": "      @Override\n",
        "1002": "      <T> Scenario<?> mutate(Scenario<T> scenario) {\n",
        "1014": "      @Override\n",
        "1015": "      <T> Scenario<?> mutate(Scenario<T> scenario) {\n",
        "1027": "      @Override\n",
        "1028": "      <T> Scenario<?> mutate(final Scenario<T> scenario) {\n",
        "1029": "        Ordering<Integer> ordering =\n",
        "1030": "            scenario.ordering.onResultOf(\n",
        "1031": "                new Function<Integer, T>() {\n",
        "1032": "                  @Override\n",
        "1033": "                  public T apply(@Nullable Integer from) {\n",
        "1034": "                    return scenario.strictlyOrderedList.get(from);\n",
        "1035": "                  }\n",
        "1036": "                });\n",
        "1046": "      @Override\n",
        "1047": "      <T> Scenario<?> mutate(Scenario<T> scenario) {\n",
        "1054": "            scenario\n",
        "1055": "                .ordering\n",
        "1056": "                .onResultOf(Composite.<T>getValueFunction())\n",
        "1063": "      @Override\n",
        "1064": "      <T> Scenario<?> mutate(Scenario<T> scenario) {\n",
        "1072": "        Ordering<Composite<T>> ordering =\n",
        "1073": "            Ordering.natural()\n",
        "1074": "                .compound(scenario.ordering.onResultOf(Composite.<T>getValueFunction()));\n",
        "1080": "      @Override\n",
        "1081": "      <T> Scenario<?> mutate(Scenario<T> scenario) {\n",
        "1100": "   * A dummy object we create so that we can have something meaningful to have a compound ordering\n",
        "1101": "   * over.\n"
    },
    "removed": {
        "106": "    Helpers.testComparator(comparator,\n",
        "107": "        Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE);\n",
        "111": "    } catch (NullPointerException expected) {}\n",
        "115": "    } catch (NullPointerException expected) {}\n",
        "119": "    } catch (NullPointerException expected) {}\n",
        "125": "    Ordering<String> caseInsensitiveOrdering\n",
        "126": "        = Ordering.from(String.CASE_INSENSITIVE_ORDER);\n",
        "132": "    Ordering<String> orderingFromOrdering =\n",
        "133": "        Ordering.from(Ordering.<String>natural());\n",
        "141": "    Comparator<Integer> c\n",
        "142": "        = Ordering.explicit(Collections.<Integer>emptyList());\n",
        "185": "    Comparator<Integer> c\n",
        "186": "        = Ordering.explicit(2, 8, 6, 1, 7, 5, 3, 4, 0, 9);\n",
        "225": "    Ordering<Object> arbitrary = new ArbitraryOrdering() {\n",
        "226": "      @Override int identityHashCode(Object object) {\n",
        "227": "        return ((Integer) object) % 5; // fake tons of collisions!\n",
        "228": "      }\n",
        "229": "    };\n",
        "273": "    Comparator<String> comparator = Ordering.compound(ImmutableList.of(\n",
        "274": "        byCharAt(0), byCharAt(1), byCharAt(2),\n",
        "275": "        byCharAt(3), byCharAt(4), byCharAt(5)));\n",
        "276": "    Helpers.testComparator(comparator, ImmutableList.of(\n",
        "277": "        \"applesauce\",\n",
        "278": "        \"apricot\",\n",
        "279": "        \"artichoke\",\n",
        "280": "        \"banality\",\n",
        "281": "        \"banana\",\n",
        "282": "        \"banquet\",\n",
        "283": "        \"tangelo\",\n",
        "284": "        \"tangerine\"));\n",
        "290": "    Helpers.testComparator(comparator, ImmutableList.of(\n",
        "291": "        \"red\",\n",
        "292": "        \"yellow\",\n",
        "293": "        \"violet\",\n",
        "294": "        \"blue\",\n",
        "295": "        \"indigo\",\n",
        "296": "        \"green\",\n",
        "297": "        \"orange\"));\n",
        "319": "    Ordering<Number> f = numbers.compound(objects).compound(objects); //bad IDEA\n",
        "324": "    Ordering<Number> j = objects.compound(numbers.compound(objects)); //bad IDEA\n",
        "341": "    Helpers.testComparator(reverseOrder,\n",
        "342": "        Integer.MAX_VALUE, 1, 0, -1, Integer.MIN_VALUE);\n",
        "366": "  private static final Ordering<Integer> DECREASING_INTEGER\n",
        "367": "      = Ordering.natural().reverse();\n",
        "370": "    Comparator<String> comparator\n",
        "371": "        = Ordering.natural().onResultOf(StringLengthFunction.StringLength);\n",
        "378": "            comparator,\n",
        "379": "            Ordering.natural().onResultOf(StringLengthFunction.StringLength))\n",
        "383": "    assertEquals(\"Ordering.natural().onResultOf(StringLength)\",\n",
        "384": "        comparator.toString());\n",
        "388": "    Comparator<String> comparator = DECREASING_INTEGER.onResultOf(\n",
        "389": "        StringLengthFunction.StringLength);\n",
        "396": "            comparator,\n",
        "397": "            DECREASING_INTEGER.onResultOf(StringLengthFunction.StringLength))\n",
        "398": "        .addEqualityGroup(\n",
        "399": "            DECREASING_INTEGER.onResultOf(Functions.constant(1)))\n",
        "403": "    assertEquals(\"Ordering.natural().reverse().onResultOf(StringLength)\",\n",
        "404": "        comparator.toString());\n",
        "455": "    List<Integer> unsortedInts = Collections.unmodifiableList(\n",
        "456": "        Arrays.asList(5, 0, 3, null, 0, 9));\n",
        "457": "    List<Integer> sortedInts =\n",
        "458": "        numberOrdering.nullsLast().sortedCopy(unsortedInts);\n",
        "461": "    assertEquals(Collections.emptyList(),\n",
        "462": "        numberOrdering.sortedCopy(Collections.<Integer>emptyList()));\n",
        "467": "    ImmutableList<Integer> sortedInts\n",
        "468": "        = numberOrdering.immutableSortedCopy(unsortedInts);\n",
        "471": "    assertEquals(Collections.<Integer>emptyList(),\n",
        "499": "    assertTrue(numberOrdering.isStrictlyOrdered(\n",
        "500": "        Collections.<Integer>emptyList()));\n",
        "511": "    List<Integer> result = numberOrdering.leastOf(\n",
        "512": "        Iterators.<Integer>emptyIterator(), 0);\n",
        "526": "    List<Integer> result = numberOrdering.leastOf(\n",
        "527": "        Iterators.<Integer>emptyIterator(), 1);\n",
        "557": "    List<Integer> result = numberOrdering.leastOf(\n",
        "558": "        Iterators.singletonIterator(3), 0);\n",
        "572": "    List<Integer> result = numberOrdering.leastOf(\n",
        "573": "        Iterators.forArray(3, 4, 5, -1), 0);\n",
        "587": "    List<Integer> result = numberOrdering.leastOf(\n",
        "588": "        Iterators.forArray(3, 4, 5, -1), 1);\n",
        "652": "    List<Integer> result = Ordering.natural().nullsLast().leastOf(\n",
        "653": "        list.iterator(), list.size());\n",
        "708": "  private static void runLeastOfComparison(\n",
        "709": "      int iterations, int elements, int seeds) {\n",
        "721": "        assertEquals(ordering.sortedCopy(list).subList(0, k),\n",
        "722": "            ordering.leastOf(list, k));\n",
        "729": "    assertEquals(Arrays.asList(1, 2, 3, 4, 5), Ordering.natural()\n",
        "730": "        .leastOf(list, Integer.MAX_VALUE));\n",
        "735": "    assertEquals(Arrays.asList(1, 2, 3, 4, 5), Ordering.natural()\n",
        "736": "        .leastOf(list.iterator(), Integer.MAX_VALUE));\n",
        "756": "    assertEquals(Arrays.asList(4, 4, 3, 3),\n",
        "757": "        numberOrdering.greatestOf(list.iterator(), 4));\n",
        "844": "    @Override public int compare(Number a, Number b) {\n",
        "847": "    @Override public int hashCode() {\n",
        "850": "    @Override public boolean equals(Object other) {\n",
        "871": "    testExhaustively(Ordering.explicit(\"a\", \"b\", \"c\", \"d\"),\n",
        "872": "        \"a\", \"b\", \"d\");\n",
        "882": "    testExhaustively(Ordering.from(String.CASE_INSENSITIVE_ORDER),\n",
        "883": "        \"A\", \"b\", \"C\", \"d\");\n",
        "897": "   * Requires at least 3 elements in {@code strictlyOrderedElements} in order to\n",
        "898": "   * test the varargs version of min/max.\n",
        "902": "    checkArgument(strictlyOrderedElements.length >= 3, \"strictlyOrderedElements \"\n",
        "903": "        + \"requires at least 3 elements\");\n",
        "930": "   * An aggregation of an ordering with a list (of size > 1) that should prove\n",
        "931": "   * to be in strictly increasing order according to that ordering.\n",
        "981": "        assertEquals(i, ordering.binarySearch(\n",
        "982": "            strictlyOrderedList, strictlyOrderedList.get(i)));\n",
        "1002": "   * A means for changing an Ordering into another Ordering. Each instance is\n",
        "1003": "   * responsible for creating the alternate Ordering, and providing a List that\n",
        "1004": "   * is known to be ordered, based on an input List known to be ordered\n",
        "1005": "   * according to the input Ordering.\n",
        "1009": "      @Override <T> Scenario<?> mutate(Scenario<T> scenario) {\n",
        "1016": "      @Override <T> Scenario<?> mutate(Scenario<T> scenario) {\n",
        "1028": "      @Override <T> Scenario<?> mutate(Scenario<T> scenario) {\n",
        "1040": "      @Override <T> Scenario<?> mutate(final Scenario<T> scenario) {\n",
        "1041": "        Ordering<Integer> ordering = scenario.ordering.onResultOf(\n",
        "1042": "            new Function<Integer, T>() {\n",
        "1043": "              @Override\n",
        "1044": "              public T apply(@Nullable Integer from) {\n",
        "1045": "                return scenario.strictlyOrderedList.get(from);\n",
        "1046": "              }\n",
        "1047": "            });\n",
        "1057": "      @Override <T> Scenario<?> mutate(Scenario<T> scenario) {\n",
        "1064": "            scenario.ordering.onResultOf(Composite.<T>getValueFunction())\n",
        "1071": "      @Override <T> Scenario<?> mutate(Scenario<T> scenario) {\n",
        "1079": "        Ordering<Composite<T>> ordering = Ordering.natural().compound(\n",
        "1080": "            scenario.ordering.onResultOf(Composite.<T>getValueFunction()));\n",
        "1086": "      @Override <T> Scenario<?> mutate(Scenario<T> scenario) {\n",
        "1105": "   * A dummy object we create so that we can have something meaningful to have\n",
        "1106": "   * a compound ordering over.\n"
    }
}