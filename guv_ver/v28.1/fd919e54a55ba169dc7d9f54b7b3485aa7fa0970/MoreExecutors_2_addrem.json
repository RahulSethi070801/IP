{
    "addition": {
        "327": "    /** Decrements the running task count. */\n",
        "339": "   * Creates an executor service that runs each task in the thread that invokes {@code\n",
        "340": "   * execute/submit}, as in {@link CallerRunsPolicy} This applies both to individually submitted\n",
        "341": "   * tasks and to collections of tasks submitted via {@code invokeAll} or {@code invokeAny}. In the\n",
        "342": "   * latter case, tasks will run serially on the calling thread. Tasks are run to completion before\n",
        "343": "   * a {@code Future} is returned to the caller (unless the executor has been shutdown).\n",
        "353": "   * have started execution. This applies also to tasks given to {@code invokeAll} or {@code\n",
        "354": "   * invokeAny} which are pending serial execution, even the subset of the tasks that have not yet\n",
        "355": "   * started execution. It is unclear from the {@code ExecutorService} specification if these should\n",
        "356": "   * be included, and it's much easier to implement the interpretation that they not be. Finally, a\n",
        "357": "   * call to {@code shutdown} or {@code shutdownNow} may result in concurrent calls to {@code\n",
        "358": "   * invokeAll/invokeAny} throwing RejectedExecutionException, although a subset of the tasks may\n",
        "359": "   * already have been executed.\n",
        "369": "   * Returns an {@link Executor} that runs each task in the thread that invokes {@link\n",
        "370": "   * Executor#execute execute}, as in {@link CallerRunsPolicy}.\n",
        "371": "   *\n",
        "372": "   * <p>This instance is equivalent to:\n",
        "374": "   * <pre>{@code\n",
        "375": "   * final class DirectExecutor implements Executor {\n",
        "376": "   *   public void execute(Runnable r) {\n",
        "377": "   *     r.run();\n",
        "378": "   *   }\n",
        "379": "   * }\n",
        "380": "   * }</pre>\n",
        "385": "   *\n",
        "443": "   * @deprecated Use {@link #newSequentialExecutor}. This method is scheduled for removal in January\n",
        "444": "   *     2018.\n",
        "501": "   * Creates an {@link ExecutorService} whose {@code submit} and {@code invokeAll} methods submit\n",
        "502": "   * {@link ListenableFutureTask} instances to the given delegate executor. Those methods, as well\n",
        "503": "   * as {@code execute} and {@code invokeAny}, are implemented in terms of calls to {@code\n",
        "505": "   * the returned {@code ListeningExecutorService} never calls the delegate's {@code submit}, {@code\n",
        "506": "   * invokeAll}, and {@code invokeAny} methods, so any special handling of tasks must be implemented\n",
        "507": "   * in the delegate's {@code execute} method or by wrapping the returned {@code\n",
        "510": "   * <p>If the delegate executor was already an instance of {@code ListeningExecutorService}, it is\n",
        "511": "   * returned untouched, and the rest of this documentation does not apply.\n",
        "969": "   *\n",
        "971": "   *   <li>calls {@link ExecutorService#shutdown()}, disabling acceptance of new submitted tasks.\n",
        "972": "   *   <li>awaits executor service termination for half of the specified timeout.\n",
        "973": "   *   <li>if the timeout expires, it calls {@link ExecutorService#shutdownNow()}, cancelling\n",
        "974": "   *       pending tasks and interrupting running tasks.\n",
        "975": "   *   <li>awaits executor service termination for the other half of the specified timeout.\n",
        "978": "   * <p>If, at any step of the process, the calling thread is interrupted, the method calls {@link\n",
        "979": "   * ExecutorService#shutdownNow()} and returns.\n"
    },
    "removed": {
        "327": "   /**\n",
        "328": "     * Decrements the running task count.\n",
        "329": "     */\n",
        "341": "   * Creates an executor service that runs each task in the thread that invokes\n",
        "342": "   * {@code execute/submit}, as in {@link CallerRunsPolicy} This applies both to individually\n",
        "343": "   * submitted tasks and to collections of tasks submitted via {@code invokeAll} or\n",
        "344": "   * {@code invokeAny}. In the latter case, tasks will run serially on the calling thread. Tasks are\n",
        "345": "   * run to completion before a {@code Future} is returned to the caller (unless the executor has\n",
        "346": "   * been shutdown).\n",
        "356": "   * have started execution. This applies also to tasks given to {@code invokeAll} or\n",
        "357": "   * {@code invokeAny} which are pending serial execution, even the subset of the tasks that have\n",
        "358": "   * not yet started execution. It is unclear from the {@code ExecutorService} specification if\n",
        "359": "   * these should be included, and it's much easier to implement the interpretation that they not\n",
        "360": "   * be. Finally, a call to {@code shutdown} or {@code shutdownNow} may result in concurrent calls\n",
        "361": "   * to {@code invokeAll/invokeAny} throwing RejectedExecutionException, although a subset of the\n",
        "362": "   * tasks may already have been executed.\n",
        "372": "   * Returns an {@link Executor} that runs each task in the thread that invokes\n",
        "373": "   * {@link Executor#execute execute}, as in {@link CallerRunsPolicy}.\n",
        "375": "   * <p>This instance is equivalent to: <pre>   {@code\n",
        "376": "   *   final class DirectExecutor implements Executor {\n",
        "377": "   *     public void execute(Runnable r) {\n",
        "378": "   *       r.run();\n",
        "379": "   *     }\n",
        "380": "   *   }}</pre>\n",
        "442": "   * @deprecated Use {@link #newSequentialExecutor}. This method is scheduled for removal in\n",
        "443": "   *     January 2018.\n",
        "500": "   * Creates an {@link ExecutorService} whose {@code submit} and {@code\n",
        "501": "   * invokeAll} methods submit {@link ListenableFutureTask} instances to the given delegate\n",
        "502": "   * executor. Those methods, as well as {@code execute} and {@code invokeAny}, are implemented in\n",
        "503": "   * terms of calls to {@code\n",
        "505": "   * the returned {@code ListeningExecutorService} never calls the delegate's {@code submit},\n",
        "506": "   * {@code invokeAll}, and {@code\n",
        "507": "   * invokeAny} methods, so any special handling of tasks must be implemented in the delegate's\n",
        "508": "   * {@code execute} method or by wrapping the returned {@code\n",
        "511": "   * <p>If the delegate executor was already an instance of {@code\n",
        "512": "   * ListeningExecutorService}, it is returned untouched, and the rest of this documentation does\n",
        "513": "   * not apply.\n",
        "972": "   * <li>calls {@link ExecutorService#shutdown()}, disabling acceptance of new submitted tasks.\n",
        "973": "   * <li>awaits executor service termination for half of the specified timeout.\n",
        "974": "   * <li>if the timeout expires, it calls {@link ExecutorService#shutdownNow()}, cancelling pending\n",
        "975": "   * tasks and interrupting running tasks.\n",
        "976": "   * <li>awaits executor service termination for the other half of the specified timeout.\n",
        "979": "   * <p>If, at any step of the process, the calling thread is interrupted, the method calls\n",
        "980": "   * {@link ExecutorService#shutdownNow()} and returns.\n"
    }
}