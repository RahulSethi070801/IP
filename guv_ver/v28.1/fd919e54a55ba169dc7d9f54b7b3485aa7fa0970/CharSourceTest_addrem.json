{
    "addition": {
        "49": "      suite.addTest(\n",
        "50": "          CharSourceTester.tests(\n",
        "51": "              \"CharSource.wrap[CharSequence]\",\n",
        "52": "              SourceSinkFactories.stringCharSourceFactory(),\n",
        "53": "              asByteSource));\n",
        "54": "      suite.addTest(\n",
        "55": "          CharSourceTester.tests(\n",
        "56": "              \"CharSource.empty[]\", SourceSinkFactories.emptyCharSourceFactory(), asByteSource));\n",
        "130": "    List<String> list =\n",
        "131": "        lines.readLines(\n",
        "132": "            new LineProcessor<List<String>>() {\n",
        "133": "              List<String> list = Lists.newArrayList();\n",
        "134": "\n",
        "135": "              @Override\n",
        "136": "              public boolean processLine(String line) throws IOException {\n",
        "137": "                list.add(line);\n",
        "138": "                return true;\n",
        "139": "              }\n",
        "140": "\n",
        "141": "              @Override\n",
        "142": "              public List<String> getResult() {\n",
        "143": "                return list;\n",
        "144": "              }\n",
        "145": "            });\n",
        "152": "    List<String> list =\n",
        "153": "        lines.readLines(\n",
        "154": "            new LineProcessor<List<String>>() {\n",
        "155": "              List<String> list = Lists.newArrayList();\n",
        "156": "\n",
        "157": "              @Override\n",
        "158": "              public boolean processLine(String line) throws IOException {\n",
        "159": "                list.add(line);\n",
        "160": "                return false;\n",
        "161": "              }\n",
        "162": "\n",
        "163": "              @Override\n",
        "164": "              public List<String> getResult() {\n",
        "165": "                return list;\n",
        "166": "              }\n",
        "167": "            });\n",
        "189": "      assertTrue(\n",
        "190": "          \"stream not closed when copying to sink with option: \" + option,\n",
        "222": "    assertEquals(expected, CharSource.concat(ImmutableList.of(c1, c2, c3)).read());\n",
        "223": "    assertEquals(expected, CharSource.concat(c1, c2, c3).read());\n",
        "224": "    assertEquals(expected, CharSource.concat(ImmutableList.of(c1, c2, c3).iterator()).read());\n",
        "255": "  private static final ImmutableSet<CharSource> BROKEN_SOURCES =\n",
        "256": "      ImmutableSet.of(BROKEN_CLOSE_SOURCE, BROKEN_OPEN_SOURCE, BROKEN_READ_SOURCE);\n",
        "257": "  private static final ImmutableSet<CharSink> BROKEN_SINKS =\n",
        "258": "      ImmutableSet.of(BROKEN_CLOSE_SINK, BROKEN_OPEN_SINK, BROKEN_WRITE_SINK);\n",
        "334": "  /** @return the number of exceptions that were suppressed on the expected thrown exception */\n",
        "351": "      @Override\n",
        "352": "      public Writer openStream() {\n"
    },
    "removed": {
        "49": "      suite.addTest(CharSourceTester.tests(\"CharSource.wrap[CharSequence]\",\n",
        "50": "          SourceSinkFactories.stringCharSourceFactory(), asByteSource));\n",
        "51": "      suite.addTest(CharSourceTester.tests(\"CharSource.empty[]\",\n",
        "52": "          SourceSinkFactories.emptyCharSourceFactory(), asByteSource));\n",
        "126": "    List<String> list = lines.readLines(new LineProcessor<List<String>>() {\n",
        "127": "      List<String> list = Lists.newArrayList();\n",
        "128": "\n",
        "129": "      @Override\n",
        "130": "      public boolean processLine(String line) throws IOException {\n",
        "131": "        list.add(line);\n",
        "132": "        return true;\n",
        "133": "      }\n",
        "134": "\n",
        "135": "      @Override\n",
        "136": "      public List<String> getResult() {\n",
        "137": "        return list;\n",
        "138": "      }\n",
        "139": "    });\n",
        "146": "    List<String> list = lines.readLines(new LineProcessor<List<String>>() {\n",
        "147": "      List<String> list = Lists.newArrayList();\n",
        "148": "\n",
        "149": "      @Override\n",
        "150": "      public boolean processLine(String line) throws IOException {\n",
        "151": "        list.add(line);\n",
        "152": "        return false;\n",
        "153": "      }\n",
        "154": "\n",
        "155": "      @Override\n",
        "156": "      public List<String> getResult() {\n",
        "157": "        return list;\n",
        "158": "      }\n",
        "159": "    });\n",
        "181": "      assertTrue(\"stream not closed when copying to sink with option: \" + option,\n",
        "213": "    assertEquals(expected,\n",
        "214": "        CharSource.concat(ImmutableList.of(c1, c2, c3)).read());\n",
        "215": "    assertEquals(expected,\n",
        "216": "        CharSource.concat(c1, c2, c3).read());\n",
        "217": "    assertEquals(expected,\n",
        "218": "        CharSource.concat(ImmutableList.of(c1, c2, c3).iterator()).read());\n",
        "249": "  private static final ImmutableSet<CharSource> BROKEN_SOURCES\n",
        "250": "      = ImmutableSet.of(BROKEN_CLOSE_SOURCE, BROKEN_OPEN_SOURCE, BROKEN_READ_SOURCE);\n",
        "251": "  private static final ImmutableSet<CharSink> BROKEN_SINKS\n",
        "252": "      = ImmutableSet.of(BROKEN_CLOSE_SINK, BROKEN_OPEN_SINK, BROKEN_WRITE_SINK);\n",
        "328": "  /**\n",
        "329": "   * @return the number of exceptions that were suppressed on the expected thrown exception\n",
        "330": "   */\n",
        "347": "      @Override public Writer openStream() {\n"
    }
}