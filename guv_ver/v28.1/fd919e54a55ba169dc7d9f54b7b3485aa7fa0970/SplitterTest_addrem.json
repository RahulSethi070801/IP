{
    "addition": {
        "31": "/** @author Julien Silland */\n",
        "52": "   * All of the infrastructure of split and splitToString is identical, so we do one test of\n",
        "53": "   * splitToString. All other cases should be covered by testing of split.\n",
        "55": "   * <p>TODO(user): It would be good to make all the relevant tests run on both split and\n",
        "56": "   * splitToString automatically.\n",
        "101": "    Iterable<String> testCharacteringMotto =\n",
        "102": "        Splitter.on('-').split(\"Testing-rocks-Debugging-sucks\");\n",
        "109": "    Iterable<String> testCharacteringMotto =\n",
        "110": "        Splitter.on(CharMatcher.whitespace()).split(\"Testing\\nrocks\\tDebugging sucks\");\n",
        "118": "    Iterable<String> letters = Splitter.on('.').omitEmptyStrings().split(doubled);\n",
        "124": "    Iterable<String> letters = Splitter.on('.').trimResults().split(emptyToken);\n",
        "130": "    Iterable<String> letters = Splitter.on('.').omitEmptyStrings().trimResults().split(emptyToken);\n",
        "154": "    String jacksons =\n",
        "155": "        \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \" + \"ofar(Jemaine), aff(Tito)\";\n",
        "156": "    Iterable<String> family =\n",
        "157": "        COMMA_SPLITTER\n",
        "158": "            .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.whitespace()))\n",
        "159": "            .split(jacksons);\n",
        "202": "    Iterable<String> testStringingMotto = Splitter.on(\"-\").split(\"Testing-rocks-Debugging-sucks\");\n",
        "210": "    Iterable<String> letters = Splitter.on(\".\").omitEmptyStrings().split(doubled);\n",
        "216": "    Iterable<String> letters = Splitter.on(\".\").trimResults().split(emptyToken);\n",
        "222": "    Iterable<String> letters = Splitter.on(\".\").omitEmptyStrings().trimResults().split(emptyToken);\n",
        "246": "    Iterable<String> threeCommasThenThreeSpaces = Splitter.on(\", \").split(fourCommasAndFourSpaces);\n",
        "278": "    String jacksons =\n",
        "279": "        \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \" + \"ofar(Jemaine), aff(Tito)\";\n",
        "280": "    Iterable<String> family =\n",
        "281": "        Splitter.on(\",\")\n",
        "282": "            .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.whitespace()))\n",
        "283": "            .split(jacksons);\n",
        "335": "    Iterable<String> testPatterningMotto =\n",
        "336": "        Splitter.onPattern(\"-\").split(\"Testing-rocks-Debugging-sucks\");\n",
        "337": "    assertThat(testPatterningMotto)\n",
        "338": "        .containsExactly(\"Testing\", \"rocks\", \"Debugging\", \"sucks\")\n",
        "350": "    Iterable<String> letters = Splitter.on(literalDotPattern()).omitEmptyStrings().split(doubled);\n",
        "400": "    Iterable<String> letters =\n",
        "401": "        Splitter.on(literalDotPattern()).omitEmptyStrings().trimResults().split(emptyToken);\n",
        "414": "    Iterable<String> empty = Splitter.on(literalDotPattern()).omitEmptyStrings().split(\"...\");\n",
        "421": "    Iterable<String> letters = Splitter.on(Pattern.compile(\",\\\\s*\")).split(longDelimiter);\n",
        "428": "    Iterable<String> letters = Splitter.on(Pattern.compile(\", \")).split(longDelimiter);\n",
        "435": "    Iterable<String> letters = Splitter.on(Pattern.compile(\"[,/]\\\\s\")).split(longDelimiter);\n",
        "450": "    String jacksons =\n",
        "451": "        \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \" + \"ofar(Jemaine), aff(Tito)\";\n",
        "452": "    Iterable<String> family =\n",
        "453": "        Splitter.on(Pattern.compile(\",\"))\n",
        "454": "            .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.whitespace()))\n",
        "455": "            .split(jacksons);\n",
        "471": "    assertIteratorIsUnmodifiable(Splitter.on(Pattern.compile(\",\")).split(\"a,b\").iterator());\n",
        "668": "    Map<String, String> m =\n",
        "669": "        COMMA_SPLITTER\n",
        "670": "            .trimResults()\n",
        "671": "            .withKeyValueSeparator(Splitter.on(':').trimResults())\n",
        "672": "            .split(\"boy  : tom , girl: tina , cat  : kitty , dog: tommy \");\n",
        "680": "    Map<String, String> m =\n",
        "681": "        COMMA_SPLITTER\n",
        "682": "            .trimResults()\n",
        "683": "            .withKeyValueSeparator(\":\")\n",
        "684": "            .split(\"boy  : tom , girl: tina , cat  : kitty , dog: tommy \");\n",
        "694": "        COMMA_SPLITTER\n",
        "695": "            .withKeyValueSeparator(Splitter.on(':').trimResults())\n",
        "696": "            .split(\"boy  : tom , girl: tina , cat  : kitty , dog: tommy \");\n",
        "704": "    Map<String, String> m =\n",
        "705": "        COMMA_SPLITTER\n",
        "706": "            .withKeyValueSeparator(\":\")\n",
        "707": "            .split(\" boy:tom , girl: tina , cat :kitty , dog:  tommy \");\n",
        "716": "    Map<String, String> m =\n",
        "717": "        Splitter.on(\",\").withKeyValueSeparator(':').split(\"boy:tom,girl:tina,cat:kitty,dog:tommy\");\n",
        "727": "    Map<String, String> m =\n",
        "728": "        Splitter.on(\",\")\n",
        "729": "            .withKeyValueSeparator(\":^&\")\n",
        "730": "            .split(\"boy:^&tom,girl:^&tina,cat:^&kitty,dog:^&tommy\");\n",
        "755": "    Map<String, String> m =\n",
        "756": "        COMMA_SPLITTER.withKeyValueSeparator(\":\").split(\"boy:tom,girl:tina,cat:kitty,dog:tommy\");\n",
        "759": "    assertThat(m)\n",
        "760": "        .isEqualTo(ImmutableMap.of(\"boy\", \"tom\", \"girl\", \"tina\", \"cat\", \"kitty\", \"dog\", \"tommy\"));\n",
        "763": "    m = COMMA_SPLITTER.withKeyValueSeparator(\":\").split(\"girl:tina,boy:tom,dog:tommy,cat:kitty\");\n",
        "766": "    assertThat(m)\n",
        "767": "        .isEqualTo(ImmutableMap.of(\"boy\", \"tom\", \"girl\", \"tina\", \"cat\", \"kitty\", \"dog\", \"tommy\"));\n"
    },
    "removed": {
        "31": "/**\n",
        "32": " * @author Julien Silland\n",
        "33": " */\n",
        "54": "   * All of the infrastructure of split and splitToString is identical, so we\n",
        "55": "   * do one test of splitToString. All other cases should be covered by testing\n",
        "56": "   * of split.\n",
        "58": "   * <p>TODO(user): It would be good to make all the relevant tests run on\n",
        "59": "   * both split and splitToString automatically.\n",
        "104": "    Iterable<String> testCharacteringMotto = Splitter.on('-').split(\n",
        "105": "        \"Testing-rocks-Debugging-sucks\");\n",
        "112": "    Iterable<String> testCharacteringMotto = Splitter\n",
        "113": "        .on(CharMatcher.whitespace())\n",
        "114": "        .split(\"Testing\\nrocks\\tDebugging sucks\");\n",
        "122": "    Iterable<String> letters = Splitter.on('.')\n",
        "123": "            .omitEmptyStrings().split(doubled);\n",
        "129": "    Iterable<String> letters = Splitter.on('.').trimResults()\n",
        "130": "            .split(emptyToken);\n",
        "136": "    Iterable<String> letters = Splitter.on('.')\n",
        "137": "            .omitEmptyStrings().trimResults().split(emptyToken);\n",
        "161": "    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n",
        "162": "        + \"ofar(Jemaine), aff(Tito)\";\n",
        "163": "    Iterable<String> family = COMMA_SPLITTER\n",
        "164": "        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.whitespace()))\n",
        "165": "        .split(jacksons);\n",
        "208": "    Iterable<String> testStringingMotto = Splitter.on(\"-\").split(\n",
        "209": "        \"Testing-rocks-Debugging-sucks\");\n",
        "217": "    Iterable<String> letters = Splitter.on(\".\")\n",
        "218": "        .omitEmptyStrings().split(doubled);\n",
        "224": "    Iterable<String> letters = Splitter.on(\".\").trimResults()\n",
        "225": "        .split(emptyToken);\n",
        "231": "    Iterable<String> letters = Splitter.on(\".\")\n",
        "232": "        .omitEmptyStrings().trimResults().split(emptyToken);\n",
        "256": "    Iterable<String> threeCommasThenThreeSpaces = Splitter.on(\", \").split(\n",
        "257": "        fourCommasAndFourSpaces);\n",
        "289": "    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n",
        "290": "        + \"ofar(Jemaine), aff(Tito)\";\n",
        "291": "    Iterable<String> family = Splitter.on(\",\")\n",
        "292": "        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.whitespace()))\n",
        "293": "        .split(jacksons);\n",
        "345": "    Iterable<String> testPatterningMotto = Splitter.onPattern(\"-\").split(\n",
        "346": "        \"Testing-rocks-Debugging-sucks\");\n",
        "347": "    assertThat(testPatterningMotto).containsExactly(\"Testing\", \"rocks\", \"Debugging\", \"sucks\")\n",
        "359": "    Iterable<String> letters = Splitter.on(literalDotPattern())\n",
        "360": "        .omitEmptyStrings().split(doubled);\n",
        "410": "    Iterable<String> letters = Splitter.on(literalDotPattern())\n",
        "411": "        .omitEmptyStrings().trimResults().split(emptyToken);\n",
        "424": "    Iterable<String> empty = Splitter.on(literalDotPattern()).omitEmptyStrings()\n",
        "425": "        .split(\"...\");\n",
        "432": "    Iterable<String> letters = Splitter.on(Pattern.compile(\",\\\\s*\"))\n",
        "433": "        .split(longDelimiter);\n",
        "440": "    Iterable<String> letters = Splitter.on(Pattern.compile(\", \"))\n",
        "441": "        .split(longDelimiter);\n",
        "448": "    Iterable<String> letters = Splitter.on(Pattern.compile(\"[,/]\\\\s\"))\n",
        "449": "        .split(longDelimiter);\n",
        "464": "    String jacksons = \"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, \"\n",
        "465": "        + \"ofar(Jemaine), aff(Tito)\";\n",
        "466": "    Iterable<String> family = Splitter.on(Pattern.compile(\",\"))\n",
        "467": "        .trimResults(CharMatcher.anyOf(\"afro\").or(CharMatcher.whitespace()))\n",
        "468": "        .split(jacksons);\n",
        "484": "    assertIteratorIsUnmodifiable(\n",
        "485": "        Splitter.on(Pattern.compile(\",\")).split(\"a,b\").iterator());\n",
        "682": "    Map<String, String> m = COMMA_SPLITTER\n",
        "683": "        .trimResults()\n",
        "684": "        .withKeyValueSeparator(Splitter.on(':').trimResults())\n",
        "685": "        .split(\"boy  : tom , girl: tina , cat  : kitty , dog: tommy \");\n",
        "693": "    Map<String, String> m = COMMA_SPLITTER\n",
        "694": "        .trimResults()\n",
        "695": "        .withKeyValueSeparator(\":\")\n",
        "696": "        .split(\"boy  : tom , girl: tina , cat  : kitty , dog: tommy \");\n",
        "706": "        COMMA_SPLITTER.withKeyValueSeparator(Splitter.on(':').trimResults()).split(\n",
        "707": "            \"boy  : tom , girl: tina , cat  : kitty , dog: tommy \");\n",
        "715": "    Map<String, String> m = COMMA_SPLITTER.withKeyValueSeparator(\":\").split(\n",
        "716": "        \" boy:tom , girl: tina , cat :kitty , dog:  tommy \");\n",
        "725": "    Map<String, String> m = Splitter\n",
        "726": "        .on(\",\")\n",
        "727": "        .withKeyValueSeparator(':')\n",
        "728": "        .split(\"boy:tom,girl:tina,cat:kitty,dog:tommy\");\n",
        "738": "    Map<String, String> m = Splitter\n",
        "739": "        .on(\",\")\n",
        "740": "        .withKeyValueSeparator(\":^&\")\n",
        "741": "        .split(\"boy:^&tom,girl:^&tina,cat:^&kitty,dog:^&tommy\");\n",
        "766": "    Map<String, String> m = COMMA_SPLITTER\n",
        "767": "        .withKeyValueSeparator(\":\")\n",
        "768": "        .split(\"boy:tom,girl:tina,cat:kitty,dog:tommy\");\n",
        "771": "    assertThat(m).isEqualTo(\n",
        "772": "        ImmutableMap.of(\"boy\", \"tom\", \"girl\", \"tina\", \"cat\", \"kitty\", \"dog\", \"tommy\"));\n",
        "775": "    m = COMMA_SPLITTER\n",
        "776": "        .withKeyValueSeparator(\":\")\n",
        "777": "        .split(\"girl:tina,boy:tom,dog:tommy,cat:kitty\");\n",
        "780": "    assertThat(m).isEqualTo(\n",
        "781": "        ImmutableMap.of(\"boy\", \"tom\", \"girl\", \"tina\", \"cat\", \"kitty\", \"dog\", \"tommy\"));\n"
    }
}