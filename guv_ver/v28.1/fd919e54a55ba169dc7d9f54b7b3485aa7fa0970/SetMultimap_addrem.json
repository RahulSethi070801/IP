{
    "addition": {
        "28": " * A {@code Multimap} that cannot hold duplicate key-value pairs. Adding a key-value pair that's\n",
        "29": " * already in the multimap has no effect. See the {@link Multimap} documentation for information\n",
        "30": " * common to all multimaps.\n",
        "32": " * <p>The {@link #get}, {@link #removeAll}, and {@link #replaceValues} methods each return a {@link\n",
        "33": " * Set} of values, while {@link #entries} returns a {@code Set} of map entries. Though the method\n",
        "34": " * signature doesn't say so explicitly, the map returned by {@link #asMap} has {@code Set} values.\n",
        "36": " * <p>If the values corresponding to a single key should be ordered according to a {@link\n",
        "37": " * java.util.Comparator} (or the natural order), see the {@link SortedSetMultimap} subinterface.\n",
        "39": " * <p>Since the value collections are sets, the behavior of a {@code SetMultimap} is not specified\n",
        "40": " * if key <em>or value</em> objects already present in the multimap change in a manner that affects\n",
        "41": " * {@code equals} comparisons. Use caution if mutable objects are used as keys or values in a {@code\n",
        "42": " * SetMultimap}.\n",
        "45": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap\"> {@code\n",
        "46": " * Multimap}</a>.\n",
        "56": "   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a\n",
        "57": "   * {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap}\n",
        "58": "   * interface.\n",
        "66": "   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a\n",
        "67": "   * {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap}\n",
        "68": "   * interface.\n",
        "77": "   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a\n",
        "78": "   * {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap}\n",
        "79": "   * interface.\n",
        "90": "   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a\n",
        "91": "   * {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap}\n",
        "92": "   * interface.\n",
        "100": "   * <p><b>Note:</b> The returned map's values are guaranteed to be of type {@link Set}. To obtain\n",
        "101": "   * this map with the more specific generic type {@code Map<K, Set<V>>}, call {@link\n",
        "102": "   * Multimaps#asMap(SetMultimap)} instead.\n",
        "110": "   * <p>Two {@code SetMultimap} instances are equal if, for each key, they contain the same values.\n",
        "111": "   * Equality does not depend on the ordering of keys or values.\n",
        "113": "   * <p>An empty {@code SetMultimap} is equal to any other empty {@code Multimap}, including an\n",
        "114": "   * empty {@code ListMultimap}.\n"
    },
    "removed": {
        "28": " * A {@code Multimap} that cannot hold duplicate key-value pairs. Adding a\n",
        "29": " * key-value pair that's already in the multimap has no effect. See the {@link\n",
        "30": " * Multimap} documentation for information common to all multimaps.\n",
        "32": " * <p>The {@link #get}, {@link #removeAll}, and {@link #replaceValues} methods\n",
        "33": " * each return a {@link Set} of values, while {@link #entries} returns a {@code\n",
        "34": " * Set} of map entries. Though the method signature doesn't say so explicitly,\n",
        "35": " * the map returned by {@link #asMap} has {@code Set} values.\n",
        "37": " * <p>If the values corresponding to a single key should be ordered according to\n",
        "38": " * a {@link java.util.Comparator} (or the natural order), see the\n",
        "39": " * {@link SortedSetMultimap} subinterface.\n",
        "41": " * <p>Since the value collections are sets, the behavior of a {@code SetMultimap}\n",
        "42": " * is not specified if key <em>or value</em> objects already present in the\n",
        "43": " * multimap change in a manner that affects {@code equals} comparisons.\n",
        "44": " * Use caution if mutable objects are used as keys or values in a\n",
        "45": " * {@code SetMultimap}.\n",
        "48": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap\">\n",
        "49": " * {@code Multimap}</a>.\n",
        "59": "   * <p>Because a {@code SetMultimap} has unique values for a given key, this\n",
        "60": "   * method returns a {@link Set}, instead of the {@link java.util.Collection}\n",
        "61": "   * specified in the {@link Multimap} interface.\n",
        "69": "   * <p>Because a {@code SetMultimap} has unique values for a given key, this\n",
        "70": "   * method returns a {@link Set}, instead of the {@link java.util.Collection}\n",
        "71": "   * specified in the {@link Multimap} interface.\n",
        "80": "   * <p>Because a {@code SetMultimap} has unique values for a given key, this\n",
        "81": "   * method returns a {@link Set}, instead of the {@link java.util.Collection}\n",
        "82": "   * specified in the {@link Multimap} interface.\n",
        "93": "   * <p>Because a {@code SetMultimap} has unique values for a given key, this\n",
        "94": "   * method returns a {@link Set}, instead of the {@link java.util.Collection}\n",
        "95": "   * specified in the {@link Multimap} interface.\n",
        "103": "   * <p><b>Note:</b> The returned map's values are guaranteed to be of type\n",
        "104": "   * {@link Set}. To obtain this map with the more specific generic type\n",
        "105": "   * {@code Map<K, Set<V>>}, call {@link Multimaps#asMap(SetMultimap)} instead.\n",
        "113": "   * <p>Two {@code SetMultimap} instances are equal if, for each key, they\n",
        "114": "   * contain the same values. Equality does not depend on the ordering of keys\n",
        "115": "   * or values.\n",
        "117": "   * <p>An empty {@code SetMultimap} is equal to any other empty {@code\n",
        "118": "   * Multimap}, including an empty {@code ListMultimap}.\n"
    }
}