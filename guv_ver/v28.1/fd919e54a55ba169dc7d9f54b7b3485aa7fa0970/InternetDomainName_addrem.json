{
    "addition": {
        "104": "   * Maximum size of a single part of a domain name. See <a\n",
        "105": "   * href=\"http://www.ietf.org/rfc/rfc2181.txt\">RFC 2181</a> part 11.\n",
        "109": "  /** The full domain name, converted to lower case. */\n",
        "112": "  /** The parts of the domain name, converted to lower case. */\n",
        "131": "  /** Constructor used to implement {@link #from(String)}, and from subclasses. */\n",
        "299": "   * example, for the domain name {@code mail.google.com}, this method returns the list {@code\n",
        "300": "   * [\"mail\", \"google\", \"com\"]}.\n",
        "347": "   * Returns the {@linkplain #isPublicSuffix() public suffix} portion of the domain name, or {@code\n",
        "348": "   * null} if no public suffix is present.\n",
        "514": "  /** Indicates whether this domain is composed of two or more parts. */\n",
        "521": "   * current domain with the leftmost part removed. For example, the parent of {@code\n",
        "522": "   * www.google.com} is {@code google.com}.\n",
        "544": "   * the current name. For example, {@code InternetDomainName.from(\"foo.com\").child(\"www.bar\")}\n",
        "545": "   * returns a new {@code InternetDomainName} with the value {@code www.bar.foo.com}. Only lenient\n",
        "546": "   * validation is performed, as described {@link #from(String) here}.\n",
        "562": "   * <pre>{@code\n",
        "563": "   * domainName = InternetDomainName.isValid(name)\n",
        "564": "   *     ? InternetDomainName.from(name)\n",
        "565": "   *     : DEFAULT_DOMAIN;\n",
        "566": "   * }</pre>\n",
        "568": "   * <pre>{@code\n",
        "569": "   * try {\n",
        "570": "   *   domainName = InternetDomainName.from(name);\n",
        "571": "   * } catch (IllegalArgumentException e) {\n",
        "572": "   *   domainName = DEFAULT_DOMAIN;\n",
        "573": "   * }\n",
        "574": "   * }</pre>\n",
        "608": "  /** Returns the domain name, normalized to all lower case. */\n"
    },
    "removed": {
        "104": "   * Maximum size of a single part of a domain name. See\n",
        "105": "   * <a href=\"http://www.ietf.org/rfc/rfc2181.txt\">RFC 2181</a> part 11.\n",
        "109": "  /**\n",
        "110": "   * The full domain name, converted to lower case.\n",
        "111": "   */\n",
        "114": "  /**\n",
        "115": "   * The parts of the domain name, converted to lower case.\n",
        "116": "   */\n",
        "135": "  /**\n",
        "136": "   * Constructor used to implement {@link #from(String)}, and from subclasses.\n",
        "137": "   */\n",
        "305": "   * example, for the domain name {@code mail.google.com}, this method returns the list\n",
        "306": "   * {@code [\"mail\", \"google\", \"com\"]}.\n",
        "353": "   * Returns the {@linkplain #isPublicSuffix() public suffix} portion of the domain name, or\n",
        "354": "   * {@code null} if no public suffix is present.\n",
        "520": "  /**\n",
        "521": "   * Indicates whether this domain is composed of two or more parts.\n",
        "522": "   */\n",
        "529": "   * current domain with the leftmost part removed. For example, the parent of\n",
        "530": "   * {@code www.google.com} is {@code google.com}.\n",
        "552": "   * the current name. For example, {@code\n",
        "553": "   * InternetDomainName.from(\"foo.com\").child(\"www.bar\")} returns a new {@code InternetDomainName}\n",
        "554": "   * with the value {@code www.bar.foo.com}. Only lenient validation is performed, as described\n",
        "555": "   * {@link #from(String) here}.\n",
        "571": "   * <pre>   {@code\n",
        "572": "   *   domainName = InternetDomainName.isValid(name)\n",
        "573": "   *       ? InternetDomainName.from(name)\n",
        "574": "   *       : DEFAULT_DOMAIN;}</pre>\n",
        "576": "   * <pre>   {@code\n",
        "577": "   *   try {\n",
        "578": "   *     domainName = InternetDomainName.from(name);\n",
        "579": "   *   } catch (IllegalArgumentException e) {\n",
        "580": "   *     domainName = DEFAULT_DOMAIN;\n",
        "581": "   *   }}</pre>\n",
        "615": "  /**\n",
        "616": "   * Returns the domain name, normalized to all lower case.\n",
        "617": "   */\n",
        "627": "   *\n"
    }
}