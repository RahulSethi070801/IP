{
    "addition": {
        "48": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\"> immutable collections</a>.\n",
        "77": "  /** Returns the empty sorted map. */\n",
        "85": "  /** Returns an immutable map containing a single entry. */\n",
        "90": "  /** Returns an immutable map containing a single entry. */\n",
        "103": "   * Returns an immutable sorted map containing the given entries, sorted by the natural ordering of\n",
        "104": "   * their keys.\n",
        "106": "   * @throws IllegalArgumentException if the two keys are equal according to their natural ordering\n",
        "115": "   * Returns an immutable sorted map containing the given entries, sorted by the natural ordering of\n",
        "116": "   * their keys.\n",
        "118": "   * @throws IllegalArgumentException if any two keys are equal according to their natural ordering\n",
        "127": "   * Returns an immutable sorted map containing the given entries, sorted by the natural ordering of\n",
        "128": "   * their keys.\n",
        "130": "   * @throws IllegalArgumentException if any two keys are equal according to their natural ordering\n",
        "139": "   * Returns an immutable sorted map containing the given entries, sorted by the natural ordering of\n",
        "140": "   * their keys.\n",
        "142": "   * @throws IllegalArgumentException if any two keys are equal according to their natural ordering\n",
        "152": "   * Returns an immutable map containing the same entries as {@code map}, sorted by the natural\n",
        "153": "   * ordering of the keys.\n",
        "155": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "156": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "157": "   * undocumented and subject to change.\n",
        "159": "   * <p>This method is not type-safe, as it may be called on a map with keys that are not mutually\n",
        "160": "   * comparable.\n",
        "162": "   * @throws ClassCastException if the keys in {@code map} are not mutually comparable\n",
        "164": "   * @throws IllegalArgumentException if any two keys are equal according to their natural ordering\n",
        "175": "   * Returns an immutable map containing the same entries as {@code map}, with keys sorted by the\n",
        "176": "   * provided comparator.\n",
        "178": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "179": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "180": "   * undocumented and subject to change.\n",
        "183": "   * @throws IllegalArgumentException if any two keys are equal according to the comparator\n",
        "191": "   * Returns an immutable map containing the given entries, with keys sorted by the provided\n",
        "192": "   * comparator.\n",
        "194": "   * <p>This method is not type-safe, as it may be called on a map with keys that are not mutually\n",
        "195": "   * comparable.\n",
        "198": "   * @throws IllegalArgumentException if any two keys are equal according to the comparator\n",
        "212": "   * Returns an immutable map containing the given entries, with keys sorted by the provided\n",
        "213": "   * comparator.\n",
        "216": "   * @throws IllegalArgumentException if any two keys are equal according to the comparator\n",
        "227": "   * Returns an immutable map containing the same entries as the provided sorted map, with the same\n",
        "228": "   * ordering.\n",
        "230": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "231": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "232": "   * undocumented and subject to change.\n",
        "263": "          (comparator2 == null) ? comparator == NATURAL_ORDER : comparator.equals(comparator2);\n",
        "279": "   * Accepts a collection of possibly-null entries. If {@code sameComparator}, then it is assumed\n",
        "353": "   * Returns a builder that creates immutable sorted maps whose keys are ordered by their natural\n",
        "354": "   * ordering. The sorted maps use {@link Ordering#natural()} as the comparator.\n",
        "361": "   * Returns a builder that creates immutable sorted maps with an explicit comparator. If the\n",
        "362": "   * comparator has a more general type than the map's keys, such as creating a {@code\n",
        "363": "   * SortedMap<Integer, String>} with a {@code Comparator<Number>}, use the {@link Builder}\n",
        "364": "   * constructor instead.\n",
        "373": "   * Returns a builder that creates immutable sorted maps whose keys are ordered by the reverse of\n",
        "374": "   * their natural ordering.\n",
        "381": "   * A builder for creating immutable sorted map instances, especially {@code public static final}\n",
        "382": "   * maps (\"constant maps\"). Example:\n",
        "384": "   * <pre>{@code\n",
        "385": "   * static final ImmutableSortedMap<Integer, String> INT_TO_WORD =\n",
        "386": "   *     new ImmutableSortedMap.Builder<Integer, String>(Ordering.natural())\n",
        "387": "   *         .put(1, \"one\")\n",
        "388": "   *         .put(2, \"two\")\n",
        "389": "   *         .put(3, \"three\")\n",
        "390": "   *         .build();\n",
        "391": "   * }</pre>\n",
        "393": "   * <p>For <i>small</i> immutable sorted maps, the {@code ImmutableSortedMap.of()} methods are even\n",
        "394": "   * more convenient.\n",
        "396": "   * <p>Builder instances can be reused - it is safe to call {@link #build} multiple times to build\n",
        "397": "   * multiple maps in series. Each map is a superset of the maps created before it.\n",
        "407": "     * Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n",
        "408": "     * ImmutableSortedMap#orderedBy}.\n",
        "430": "     * Associates {@code key} with {@code value} in the built map. Duplicate keys, according to the\n",
        "431": "     * comparator (which might be the keys' natural order), are not allowed, and will cause {@link\n",
        "432": "     * #build} to fail.\n",
        "446": "     * Adds the given {@code entry} to the map, making it immutable if necessary. Duplicate keys,\n",
        "447": "     * according to the comparator (which might be the keys' natural order), are not allowed, and\n",
        "448": "     * will cause {@link #build} to fail.\n",
        "460": "     * Associates all of the given map's keys and values in the built map. Duplicate keys, according\n",
        "461": "     * to the comparator (which might be the keys' natural order), are not allowed, and will cause\n",
        "462": "     * {@link #build} to fail.\n",
        "474": "     * Adds all the given entries to the built map. Duplicate keys, according to the comparator\n",
        "475": "     * (which might be the keys' natural order), are not allowed, and will cause {@link #build} to\n",
        "476": "     * fail.\n",
        "506": "     * @throws IllegalArgumentException if any two keys are equal according to the comparator (which\n",
        "507": "     *     might be the keys' natural order)\n",
        "577": "  /** Returns an immutable set of the mappings in this map, sorted by the key ordering. */\n",
        "621": "  /** Returns an immutable sorted set of the keys in this map. */\n",
        "633": "   * Returns an immutable collection of the values in this map, sorted by the ordering of the\n",
        "634": "   * corresponding keys.\n",
        "647": "   * Returns the comparator that orders the keys, which is {@link Ordering#natural()} when the\n",
        "648": "   * natural ordering of the keys is used. Note that its behavior is not consistent with {@link\n",
        "649": "   * TreeMap#comparator()}, which returns {@code null} to indicate natural ordering.\n",
        "678": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are less\n",
        "679": "   * than {@code toKey}.\n",
        "681": "   * <p>The {@link SortedMap#headMap} documentation states that a submap of a submap throws an\n",
        "682": "   * {@link IllegalArgumentException} if passed a {@code toKey} greater than an earlier {@code\n",
        "683": "   * toKey}. However, this method doesn't throw an exception in that situation, but instead keeps\n",
        "684": "   * the original {@code toKey}.\n",
        "692": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are less\n",
        "693": "   * than (or equal to, if {@code inclusive}) {@code toKey}.\n",
        "695": "   * <p>The {@link SortedMap#headMap} documentation states that a submap of a submap throws an\n",
        "696": "   * {@link IllegalArgumentException} if passed a {@code toKey} greater than an earlier {@code\n",
        "697": "   * toKey}. However, this method doesn't throw an exception in that situation, but instead keeps\n",
        "698": "   * the original {@code toKey}.\n",
        "708": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys ranges\n",
        "709": "   * from {@code fromKey}, inclusive, to {@code toKey}, exclusive.\n",
        "711": "   * <p>The {@link SortedMap#subMap} documentation states that a submap of a submap throws an {@link\n",
        "712": "   * IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}.\n",
        "713": "   * However, this method doesn't throw an exception in that situation, but instead keeps the\n",
        "714": "   * original {@code fromKey}. Similarly, this method keeps the original {@code toKey}, instead of\n",
        "715": "   * throwing an exception, if passed a {@code toKey} greater than an earlier {@code toKey}.\n",
        "723": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys ranges\n",
        "724": "   * from {@code fromKey} to {@code toKey}, inclusive or exclusive as indicated by the boolean\n",
        "725": "   * flags.\n",
        "727": "   * <p>The {@link SortedMap#subMap} documentation states that a submap of a submap throws an {@link\n",
        "728": "   * IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}.\n",
        "729": "   * However, this method doesn't throw an exception in that situation, but instead keeps the\n",
        "730": "   * original {@code fromKey}. Similarly, this method keeps the original {@code toKey}, instead of\n",
        "731": "   * throwing an exception, if passed a {@code toKey} greater than an earlier {@code toKey}.\n",
        "749": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are\n",
        "750": "   * greater than or equals to {@code fromKey}.\n",
        "752": "   * <p>The {@link SortedMap#tailMap} documentation states that a submap of a submap throws an\n",
        "753": "   * {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code\n",
        "754": "   * fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps\n",
        "755": "   * the original {@code fromKey}.\n",
        "763": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are\n",
        "764": "   * greater than (or equal to, if {@code inclusive}) {@code fromKey}.\n",
        "766": "   * <p>The {@link SortedMap#tailMap} documentation states that a submap of a submap throws an\n",
        "767": "   * {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code\n",
        "768": "   * fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps\n",
        "769": "   * the original {@code fromKey}.\n",
        "882": "   * Serialized type for all ImmutableSortedMap instances. It captures the logical contents and they\n",
        "883": "   * are reconstructed using public factory methods. This ensures that the implementation types\n",
        "884": "   * remain as implementation details.\n"
    },
    "removed": {
        "48": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\">\n",
        "49": " * immutable collections</a>.\n",
        "78": "  /**\n",
        "79": "   * Returns the empty sorted map.\n",
        "80": "   */\n",
        "88": "  /**\n",
        "89": "   * Returns an immutable map containing a single entry.\n",
        "90": "   */\n",
        "95": "  /**\n",
        "96": "   * Returns an immutable map containing a single entry.\n",
        "97": "   */\n",
        "110": "   * Returns an immutable sorted map containing the given entries, sorted by the\n",
        "111": "   * natural ordering of their keys.\n",
        "113": "   * @throws IllegalArgumentException if the two keys are equal according to\n",
        "114": "   *     their natural ordering\n",
        "123": "   * Returns an immutable sorted map containing the given entries, sorted by the\n",
        "124": "   * natural ordering of their keys.\n",
        "126": "   * @throws IllegalArgumentException if any two keys are equal according to\n",
        "127": "   *     their natural ordering\n",
        "136": "   * Returns an immutable sorted map containing the given entries, sorted by the\n",
        "137": "   * natural ordering of their keys.\n",
        "139": "   * @throws IllegalArgumentException if any two keys are equal according to\n",
        "140": "   *     their natural ordering\n",
        "149": "   * Returns an immutable sorted map containing the given entries, sorted by the\n",
        "150": "   * natural ordering of their keys.\n",
        "152": "   * @throws IllegalArgumentException if any two keys are equal according to\n",
        "153": "   *     their natural ordering\n",
        "163": "   * Returns an immutable map containing the same entries as {@code map}, sorted\n",
        "164": "   * by the natural ordering of the keys.\n",
        "166": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "167": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "168": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "170": "   * <p>This method is not type-safe, as it may be called on a map with keys\n",
        "171": "   * that are not mutually comparable.\n",
        "173": "   * @throws ClassCastException if the keys in {@code map} are not mutually\n",
        "174": "   *         comparable\n",
        "176": "   * @throws IllegalArgumentException if any two keys are equal according to\n",
        "177": "   *         their natural ordering\n",
        "188": "   * Returns an immutable map containing the same entries as {@code map}, with\n",
        "189": "   * keys sorted by the provided comparator.\n",
        "191": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "192": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "193": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "196": "   * @throws IllegalArgumentException if any two keys are equal according to the\n",
        "197": "   *         comparator\n",
        "205": "   * Returns an immutable map containing the given entries, with keys sorted\n",
        "206": "   * by the provided comparator.\n",
        "208": "   * <p>This method is not type-safe, as it may be called on a map with keys\n",
        "209": "   * that are not mutually comparable.\n",
        "212": "   * @throws IllegalArgumentException if any two keys are equal according to the\n",
        "213": "   *         comparator\n",
        "227": "   * Returns an immutable map containing the given entries, with keys sorted\n",
        "228": "   * by the provided comparator.\n",
        "231": "   * @throws IllegalArgumentException if any two keys are equal according to the\n",
        "232": "   *         comparator\n",
        "243": "   * Returns an immutable map containing the same entries as the provided sorted\n",
        "244": "   * map, with the same ordering.\n",
        "246": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "247": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "248": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "279": "          (comparator2 == null)\n",
        "280": "              ? comparator == NATURAL_ORDER\n",
        "281": "              : comparator.equals(comparator2);\n",
        "297": "   * Accepts a collection of possibly-null entries.  If {@code sameComparator}, then it is assumed\n",
        "371": "   * Returns a builder that creates immutable sorted maps whose keys are\n",
        "372": "   * ordered by their natural ordering. The sorted maps use {@link\n",
        "373": "   * Ordering#natural()} as the comparator.\n",
        "380": "   * Returns a builder that creates immutable sorted maps with an explicit\n",
        "381": "   * comparator. If the comparator has a more general type than the map's keys,\n",
        "382": "   * such as creating a {@code SortedMap<Integer, String>} with a {@code\n",
        "383": "   * Comparator<Number>}, use the {@link Builder} constructor instead.\n",
        "392": "   * Returns a builder that creates immutable sorted maps whose keys are\n",
        "393": "   * ordered by the reverse of their natural ordering.\n",
        "400": "   * A builder for creating immutable sorted map instances, especially {@code\n",
        "401": "   * public static final} maps (\"constant maps\"). Example: <pre>   {@code\n",
        "403": "   *   static final ImmutableSortedMap<Integer, String> INT_TO_WORD =\n",
        "404": "   *       new ImmutableSortedMap.Builder<Integer, String>(Ordering.natural())\n",
        "405": "   *           .put(1, \"one\")\n",
        "406": "   *           .put(2, \"two\")\n",
        "407": "   *           .put(3, \"three\")\n",
        "408": "   *           .build();}</pre>\n",
        "410": "   * <p>For <i>small</i> immutable sorted maps, the {@code ImmutableSortedMap.of()}\n",
        "411": "   * methods are even more convenient.\n",
        "413": "   * <p>Builder instances can be reused - it is safe to call {@link #build}\n",
        "414": "   * multiple times to build multiple maps in series. Each map is a superset of\n",
        "415": "   * the maps created before it.\n",
        "425": "     * Creates a new builder. The returned builder is equivalent to the builder\n",
        "426": "     * generated by {@link ImmutableSortedMap#orderedBy}.\n",
        "448": "     * Associates {@code key} with {@code value} in the built map. Duplicate\n",
        "449": "     * keys, according to the comparator (which might be the keys' natural\n",
        "450": "     * order), are not allowed, and will cause {@link #build} to fail.\n",
        "464": "     * Adds the given {@code entry} to the map, making it immutable if\n",
        "465": "     * necessary. Duplicate keys, according to the comparator (which might be\n",
        "466": "     * the keys' natural order), are not allowed, and will cause {@link #build}\n",
        "467": "     * to fail.\n",
        "479": "     * Associates all of the given map's keys and values in the built map.\n",
        "480": "     * Duplicate keys, according to the comparator (which might be the keys'\n",
        "481": "     * natural order), are not allowed, and will cause {@link #build} to fail.\n",
        "493": "     * Adds all the given entries to the built map.  Duplicate keys, according\n",
        "494": "     * to the comparator (which might be the keys' natural order), are not\n",
        "495": "     * allowed, and will cause {@link #build} to fail.\n",
        "525": "     * @throws IllegalArgumentException if any two keys are equal according to\n",
        "526": "     *     the comparator (which might be the keys' natural order)\n",
        "596": "  /**\n",
        "597": "   * Returns an immutable set of the mappings in this map, sorted by the key\n",
        "598": "   * ordering.\n",
        "599": "   */\n",
        "643": "  /**\n",
        "644": "   * Returns an immutable sorted set of the keys in this map.\n",
        "645": "   */\n",
        "657": "   * Returns an immutable collection of the values in this map, sorted by the\n",
        "658": "   * ordering of the corresponding keys.\n",
        "671": "   * Returns the comparator that orders the keys, which is\n",
        "672": "   * {@link Ordering#natural()} when the natural ordering of the keys is used.\n",
        "673": "   * Note that its behavior is not consistent with {@link TreeMap#comparator()},\n",
        "674": "   * which returns {@code null} to indicate natural ordering.\n",
        "703": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries\n",
        "704": "   * whose keys are less than {@code toKey}.\n",
        "706": "   * <p>The {@link SortedMap#headMap} documentation states that a submap of a\n",
        "707": "   * submap throws an {@link IllegalArgumentException} if passed a {@code toKey}\n",
        "708": "   * greater than an earlier {@code toKey}. However, this method doesn't throw\n",
        "709": "   * an exception in that situation, but instead keeps the original {@code\n",
        "710": "   * toKey}.\n",
        "718": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries\n",
        "719": "   * whose keys are less than (or equal to, if {@code inclusive}) {@code toKey}.\n",
        "721": "   * <p>The {@link SortedMap#headMap} documentation states that a submap of a\n",
        "722": "   * submap throws an {@link IllegalArgumentException} if passed a {@code toKey}\n",
        "723": "   * greater than an earlier {@code toKey}. However, this method doesn't throw\n",
        "724": "   * an exception in that situation, but instead keeps the original {@code\n",
        "725": "   * toKey}.\n",
        "735": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries\n",
        "736": "   * whose keys ranges from {@code fromKey}, inclusive, to {@code toKey},\n",
        "737": "   * exclusive.\n",
        "739": "   * <p>The {@link SortedMap#subMap} documentation states that a submap of a\n",
        "740": "   * submap throws an {@link IllegalArgumentException} if passed a {@code\n",
        "741": "   * fromKey} less than an earlier {@code fromKey}. However, this method doesn't\n",
        "742": "   * throw an exception in that situation, but instead keeps the original {@code\n",
        "743": "   * fromKey}. Similarly, this method keeps the original {@code toKey}, instead\n",
        "744": "   * of throwing an exception, if passed a {@code toKey} greater than an earlier\n",
        "745": "   * {@code toKey}.\n",
        "753": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries\n",
        "754": "   * whose keys ranges from {@code fromKey} to {@code toKey}, inclusive or\n",
        "755": "   * exclusive as indicated by the boolean flags.\n",
        "757": "   * <p>The {@link SortedMap#subMap} documentation states that a submap of a\n",
        "758": "   * submap throws an {@link IllegalArgumentException} if passed a {@code\n",
        "759": "   * fromKey} less than an earlier {@code fromKey}. However, this method doesn't\n",
        "760": "   * throw an exception in that situation, but instead keeps the original {@code\n",
        "761": "   * fromKey}. Similarly, this method keeps the original {@code toKey}, instead\n",
        "762": "   * of throwing an exception, if passed a {@code toKey} greater than an earlier\n",
        "763": "   * {@code toKey}.\n",
        "781": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries\n",
        "782": "   * whose keys are greater than or equals to {@code fromKey}.\n",
        "784": "   * <p>The {@link SortedMap#tailMap} documentation states that a submap of a\n",
        "785": "   * submap throws an {@link IllegalArgumentException} if passed a {@code\n",
        "786": "   * fromKey} less than an earlier {@code fromKey}. However, this method doesn't\n",
        "787": "   * throw an exception in that situation, but instead keeps the original {@code\n",
        "788": "   * fromKey}.\n",
        "796": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries\n",
        "797": "   * whose keys are greater than (or equal to, if {@code inclusive})\n",
        "798": "   * {@code fromKey}.\n",
        "800": "   * <p>The {@link SortedMap#tailMap} documentation states that a submap of a\n",
        "801": "   * submap throws an {@link IllegalArgumentException} if passed a {@code\n",
        "802": "   * fromKey} less than an earlier {@code fromKey}. However, this method doesn't\n",
        "803": "   * throw an exception in that situation, but instead keeps the original {@code\n",
        "804": "   * fromKey}.\n",
        "917": "   * Serialized type for all ImmutableSortedMap instances. It captures the\n",
        "918": "   * logical contents and they are reconstructed using public factory methods.\n",
        "919": "   * This ensures that the implementation types remain as implementation\n",
        "920": "   * details.\n"
    }
}