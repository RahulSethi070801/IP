{
    "addition": {
        "35": " * implementations. Forked from {@link SetContainsBenchmark}.\n",
        "45": "      @Override\n",
        "46": "      Map<Element, Element> create(Collection<Element> keys) {\n",
        "48": "        for (Element element : keys) {\n",
        "55": "      @Override\n",
        "56": "      Map<Element, Element> create(Collection<Element> keys) {\n",
        "58": "        for (Element element : keys) {\n",
        "65": "      @Override\n",
        "66": "      Map<Element, Element> create(Collection<Element> keys) {\n",
        "71": "      @Override\n",
        "72": "      Map<Element, Element> create(Collection<Element> keys) {\n",
        "77": "      @Override\n",
        "78": "      Map<Element, Element> create(Collection<Element> keys) {\n",
        "80": "        for (Element element : keys) {\n",
        "87": "      @Override\n",
        "88": "      Map<Element, Element> create(Collection<Element> keys) {\n",
        "90": "        for (Element element : keys) {\n",
        "97": "      @Override\n",
        "98": "      Map<Element, Element> create(Collection<Element> keys) {\n",
        "100": "        for (Element element : keys) {\n",
        "107": "      @Override\n",
        "108": "      Map<Element, Element> create(Collection<Element> keys) {\n",
        "110": "        for (Element element : keys) {\n",
        "117": "      @Override\n",
        "118": "      Map<Element, Element> create(Collection<Element> keys) {\n",
        "119": "        Map<Element, Element> map = new MapMaker().concurrencyLevel(1).makeMap();\n",
        "120": "        for (Element element : keys) {\n",
        "127": "      @Override\n",
        "128": "      Map<Element, Element> create(Collection<Element> keys) {\n",
        "129": "        Map<Element, Element> map = new MapMaker().concurrencyLevel(16).makeMap();\n",
        "130": "        for (Element element : keys) {\n",
        "137": "      @Override\n",
        "138": "      Map<Element, Element> create(Collection<Element> keys) {\n",
        "147": "      @Override\n",
        "148": "      Map<Element, Element> create(Collection<Element> keys) {\n",
        "149": "        ImmutableSortedMap.Builder<Element, Element> builder = ImmutableSortedMap.naturalOrder();\n",
        "183": "  @BeforeExperiment\n",
        "184": "  void setUp() {\n",
        "186": "        new CollectionBenchmarkSampleData(isUserTypeFast, random, hitRate, size);\n",
        "199": "  @Benchmark\n",
        "200": "  boolean get(int reps) {\n",
        "217": "  @Benchmark\n",
        "218": "  int createAndPopulate(int reps) {\n",
        "226": "  @Benchmark\n",
        "227": "  boolean iterateWithEntrySet(int reps) {\n",
        "239": "  @Benchmark\n",
        "240": "  boolean iterateWithKeySetAndGet(int reps) {\n",
        "253": "  @Benchmark\n",
        "254": "  boolean iterateValuesAndGet(int reps) {\n"
    },
    "removed": {
        "35": " * implementations.  Forked from {@link SetContainsBenchmark}.\n",
        "45": "      @Override Map<Element, Element> create(Collection<Element> keys) {\n",
        "47": "        for (Element element: keys) {\n",
        "54": "      @Override Map<Element, Element> create(Collection<Element> keys) {\n",
        "56": "        for (Element element: keys) {\n",
        "63": "      @Override Map<Element, Element> create(Collection<Element> keys) {\n",
        "68": "      @Override Map<Element, Element> create(Collection<Element> keys) {\n",
        "73": "      @Override Map<Element, Element> create(Collection<Element> keys) {\n",
        "75": "        for (Element element: keys) {\n",
        "82": "      @Override Map<Element, Element> create(Collection<Element> keys) {\n",
        "84": "        for (Element element: keys) {\n",
        "91": "      @Override Map<Element, Element> create(Collection<Element> keys) {\n",
        "93": "        for (Element element: keys) {\n",
        "100": "      @Override Map<Element, Element> create(Collection<Element> keys) {\n",
        "102": "        for (Element element: keys) {\n",
        "109": "      @Override Map<Element, Element> create(Collection<Element> keys) {\n",
        "110": "        Map<Element, Element> map = new MapMaker()\n",
        "111": "            .concurrencyLevel(1)\n",
        "112": "            .makeMap();\n",
        "113": "        for (Element element: keys) {\n",
        "120": "      @Override Map<Element, Element> create(Collection<Element> keys) {\n",
        "121": "        Map<Element, Element> map = new MapMaker()\n",
        "122": "            .concurrencyLevel(16)\n",
        "123": "            .makeMap();\n",
        "124": "        for (Element element: keys) {\n",
        "131": "      @Override Map<Element, Element> create(Collection<Element> keys) {\n",
        "140": "      @Override Map<Element, Element> create(Collection<Element> keys) {\n",
        "141": "        ImmutableSortedMap.Builder<Element, Element> builder =\n",
        "142": "            ImmutableSortedMap.naturalOrder();\n",
        "176": "  @BeforeExperiment void setUp() {\n",
        "178": "        new CollectionBenchmarkSampleData(\n",
        "179": "            isUserTypeFast, random, hitRate, size);\n",
        "192": "  @Benchmark boolean get(int reps) {\n",
        "209": "  @Benchmark int createAndPopulate(int reps) {\n",
        "217": "  @Benchmark boolean iterateWithEntrySet(int reps) {\n",
        "229": "  @Benchmark boolean iterateWithKeySetAndGet(int reps) {\n",
        "240": "\n",
        "243": "  @Benchmark boolean iterateValuesAndGet(int reps) {\n"
    }
}