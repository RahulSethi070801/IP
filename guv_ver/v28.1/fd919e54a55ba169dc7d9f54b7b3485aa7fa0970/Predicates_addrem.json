{
    "addition": {
        "35": " * <p>See the Guava User Guide article on <a\n",
        "36": " * href=\"https://github.com/google/guava/wiki/FunctionalExplained\">the use of {@code Predicate}</a>.\n",
        "48": "  /** Returns a predicate that always evaluates to {@code true}. */\n",
        "54": "  /** Returns a predicate that always evaluates to {@code false}. */\n",
        "79": "   * Returns a predicate that evaluates to {@code true} if the given predicate evaluates to {@code\n",
        "80": "   * false}.\n",
        "90": "   * changes to it won't alter the behavior of this predicate. If {@code components} is empty, the\n",
        "91": "   * returned predicate will always evaluate to {@code true}.\n",
        "101": "   * changes to it won't alter the behavior of this predicate. If {@code components} is empty, the\n",
        "102": "   * returned predicate will always evaluate to {@code true}.\n",
        "110": "   * Returns a predicate that evaluates to {@code true} if both of its components evaluate to {@code\n",
        "111": "   * true}. The components are evaluated in order, and evaluation will be \"short-circuited\" as soon\n",
        "112": "   * as a false predicate is found.\n",
        "122": "   * changes to it won't alter the behavior of this predicate. If {@code components} is empty, the\n",
        "123": "   * returned predicate will always evaluate to {@code false}.\n",
        "133": "   * changes to it won't alter the behavior of this predicate. If {@code components} is empty, the\n",
        "134": "   * returned predicate will always evaluate to {@code false}.\n",
        "160": "   * the given class. If the object being tested is {@code null} this predicate evaluates to {@code\n",
        "161": "   * false}.\n",
        "163": "   * <p>If you want to filter an {@code Iterable} to narrow its type, consider using {@link\n",
        "164": "   * com.google.common.collect.Iterables#filter(Iterable, Class)} in preference.\n",
        "179": "   * is named very incorrectly! Example:\n",
        "181": "   * <pre>{@code\n",
        "182": "   * List<Class<?>> classes = Arrays.asList(\n",
        "183": "   *     Object.class, String.class, Number.class, Long.class);\n",
        "184": "   * return Iterables.filter(classes, assignableFrom(Number.class));\n",
        "185": "   * }</pre>\n",
        "204": "   * Returns a predicate that evaluates to {@code true} if the class being tested is assignable to\n",
        "205": "   * (is a subtype of) {@code clazz}. Example:\n",
        "207": "   * <pre>{@code\n",
        "208": "   * List<Class<?>> classes = Arrays.asList(\n",
        "209": "   *     Object.class, String.class, Number.class, Long.class);\n",
        "210": "   * return Iterables.filter(classes, subtypeOf(Number.class));\n",
        "211": "   * }</pre>\n"
    },
    "removed": {
        "35": " * <p>See the Guava User Guide article on\n",
        "36": " * <a href=\"https://github.com/google/guava/wiki/FunctionalExplained\">the use of\n",
        "37": " * {@code Predicate}</a>.\n",
        "49": "  /**\n",
        "50": "   * Returns a predicate that always evaluates to {@code true}.\n",
        "51": "   */\n",
        "57": "  /**\n",
        "58": "   * Returns a predicate that always evaluates to {@code false}.\n",
        "59": "   */\n",
        "84": "   * Returns a predicate that evaluates to {@code true} if the given predicate evaluates to\n",
        "85": "   * {@code false}.\n",
        "95": "   * changes to it won't alter the behavior of this predicate. If {@code\n",
        "96": "   * components} is empty, the returned predicate will always evaluate to {@code\n",
        "97": "   * true}.\n",
        "107": "   * changes to it won't alter the behavior of this predicate. If {@code\n",
        "108": "   * components} is empty, the returned predicate will always evaluate to {@code\n",
        "109": "   * true}.\n",
        "117": "   * Returns a predicate that evaluates to {@code true} if both of its components evaluate to\n",
        "118": "   * {@code true}. The components are evaluated in order, and evaluation will be \"short-circuited\"\n",
        "119": "   * as soon as a false predicate is found.\n",
        "129": "   * changes to it won't alter the behavior of this predicate. If {@code\n",
        "130": "   * components} is empty, the returned predicate will always evaluate to {@code\n",
        "131": "   * false}.\n",
        "141": "   * changes to it won't alter the behavior of this predicate. If {@code\n",
        "142": "   * components} is empty, the returned predicate will always evaluate to {@code\n",
        "143": "   * false}.\n",
        "169": "   * the given class. If the object being tested is {@code null} this predicate evaluates to\n",
        "170": "   * {@code false}.\n",
        "172": "   * <p>If you want to filter an {@code Iterable} to narrow its type, consider using\n",
        "173": "   * {@link com.google.common.collect.Iterables#filter(Iterable, Class)} in preference.\n",
        "188": "   * is named very incorrectly! Example: <pre>   {@code\n",
        "190": "   *   List<Class<?>> classes = Arrays.asList(\n",
        "191": "   *       Object.class, String.class, Number.class, Long.class);\n",
        "192": "   *   return Iterables.filter(classes, assignableFrom(Number.class));}</pre>\n",
        "211": "   * Returns a predicate that evaluates to {@code true} if the class being tested is assignable\n",
        "212": "   * to (is a subtype of) {@code clazz}. Example: <pre>   {@code\n",
        "214": "   *   List<Class<?>> classes = Arrays.asList(\n",
        "215": "   *       Object.class, String.class, Number.class, Long.class);\n",
        "216": "   *   return Iterables.filter(classes, subtypeOf(Number.class));}</pre>\n"
    }
}