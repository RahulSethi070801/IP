{
    "addition": {
        "64": "    suite.addTest(\n",
        "65": "        MultisetTestSuiteBuilder.using(\n",
        "66": "                new TestStringMultisetGenerator() {\n",
        "67": "                  @Override\n",
        "68": "                  protected Multiset<String> create(String[] elements) {\n",
        "69": "                    return ImmutableMultiset.copyOf(elements);\n",
        "70": "                  }\n",
        "71": "                })\n",
        "72": "            .named(\"ImmutableMultiset\")\n",
        "73": "            .withFeatures(\n",
        "74": "                CollectionSize.ANY,\n",
        "75": "                CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "76": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "77": "            .createTestSuite());\n",
        "78": "\n",
        "79": "    suite.addTest(\n",
        "80": "        SetTestSuiteBuilder.using(\n",
        "81": "                new TestStringSetGenerator() {\n",
        "82": "                  @Override\n",
        "83": "                  protected Set<String> create(String[] elements) {\n",
        "84": "                    return ImmutableMultiset.copyOf(elements).elementSet();\n",
        "85": "                  }\n",
        "86": "                })\n",
        "87": "            .named(\"ImmutableMultiset, element set\")\n",
        "88": "            .withFeatures(\n",
        "89": "                CollectionSize.ANY,\n",
        "90": "                CollectionFeature.SERIALIZABLE,\n",
        "91": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "92": "            .createTestSuite());\n",
        "177": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"c\", \"d\", \"e\")), multiset);\n",
        "181": "    Multiset<String> multiset = ImmutableMultiset.of(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\");\n",
        "182": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")), multiset);\n",
        "186": "    Multiset<String> multiset = ImmutableMultiset.of(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\");\n",
        "187": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")), multiset);\n",
        "197": "    String[] array = new String[] {\"a\"};\n",
        "203": "    String[] array = new String[] {\"a\"};\n",
        "211": "    String[] array = new String[] {null};\n",
        "215": "    } catch (NullPointerException expected) {\n",
        "216": "    }\n",
        "243": "    } catch (NullPointerException expected) {\n",
        "244": "    }\n",
        "270": "    } catch (NullPointerException expected) {\n",
        "271": "    }\n",
        "297": "    } catch (NullPointerException expected) {\n",
        "298": "    }\n",
        "355": "            (ms1, ms2) -> {\n",
        "356": "              if (!ms1.equals(ms2)) {\n",
        "357": "                return false;\n",
        "358": "              }\n",
        "359": "              List<TypeWithDuplicates> elements1 = ImmutableList.copyOf(ms1.elementSet());\n",
        "360": "              List<TypeWithDuplicates> elements2 = ImmutableList.copyOf(ms2.elementSet());\n",
        "361": "              for (int i = 0; i < ms1.elementSet().size(); i++) {\n",
        "362": "                if (!elements1.get(i).fullEquals(elements2.get(i))) {\n",
        "363": "                  return false;\n",
        "364": "                }\n",
        "365": "              }\n",
        "366": "              return true;\n",
        "367": "            };\n",
        "422": "    ImmutableMultiset<String> multiset =\n",
        "423": "        new ImmutableMultiset.Builder<String>().add(\"a\").add(\"b\").add(\"a\").add(\"c\").build();\n",
        "430": "    ImmutableMultiset<String> multiset =\n",
        "431": "        new ImmutableMultiset.Builder<String>().addAll(a).addAll(b).build();\n",
        "438": "    ImmutableMultiset<String> multiset =\n",
        "439": "        new ImmutableMultiset.Builder<String>().addAll(a).addAll(b).build();\n",
        "440": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"b\", \"b\", \"c\")), multiset);\n",
        "445": "    ImmutableMultiset<String> multiset =\n",
        "446": "        new ImmutableMultiset.Builder<String>().addAll(iterator).build();\n",
        "451": "    ImmutableMultiset<String> multiset =\n",
        "452": "        new ImmutableMultiset.Builder<String>()\n",
        "453": "            .addCopies(\"a\", 2)\n",
        "454": "            .addCopies(\"b\", 3)\n",
        "455": "            .addCopies(\"c\", 0)\n",
        "456": "            .build();\n",
        "457": "    assertEquals(HashMultiset.create(asList(\"a\", \"a\", \"b\", \"b\", \"b\")), multiset);\n",
        "461": "    ImmutableMultiset<String> multiset =\n",
        "462": "        new ImmutableMultiset.Builder<String>().add(\"a\").setCount(\"a\", 2).setCount(\"b\", 3).build();\n",
        "463": "    assertEquals(HashMultiset.create(asList(\"a\", \"a\", \"b\", \"b\", \"b\")), multiset);\n",
        "471": "    } catch (NullPointerException expected) {\n",
        "472": "    }\n",
        "480": "    } catch (NullPointerException expected) {\n",
        "481": "    }\n",
        "488": "    } catch (NullPointerException expected) {\n",
        "489": "    }\n",
        "492": "    Multiset<String> multisetWithNull = LinkedHashMultiset.create(asList(\"a\", null, \"b\"));\n",
        "496": "    } catch (NullPointerException expected) {\n",
        "497": "    }\n",
        "505": "    } catch (NullPointerException expected) {\n",
        "506": "    }\n",
        "514": "    } catch (IllegalArgumentException expected) {\n",
        "515": "    }\n",
        "523": "    } catch (NullPointerException expected) {\n",
        "524": "    }\n",
        "532": "    } catch (IllegalArgumentException expected) {\n",
        "533": "    }\n",
        "558": "    Collection<String> copy = LenientSerializableTester.reserializeAndAssertLenient(c.elementSet());\n",
        "590": "    ImmutableMultiset<String> multiset = ImmutableMultiset.of(\"a\", \"a\", \"b\", \"b\", \"b\");\n",
        "599": "    ImmutableMultiset<String> multiset = ImmutableMultiset.of(\"a\", \"a\", \"b\", \"b\", \"b\");\n"
    },
    "removed": {
        "64": "    suite.addTest(MultisetTestSuiteBuilder.using(\n",
        "65": "        new TestStringMultisetGenerator() {\n",
        "66": "          @Override protected Multiset<String> create(String[] elements) {\n",
        "67": "            return ImmutableMultiset.copyOf(elements);\n",
        "68": "          }\n",
        "69": "        })\n",
        "70": "        .named(\"ImmutableMultiset\")\n",
        "71": "        .withFeatures(CollectionSize.ANY,\n",
        "72": "            CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "73": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "74": "        .createTestSuite());\n",
        "75": "\n",
        "76": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "77": "          @Override protected Set<String> create(String[] elements) {\n",
        "78": "            return ImmutableMultiset.copyOf(elements).elementSet();\n",
        "79": "          }\n",
        "80": "        })\n",
        "81": "        .named(\"ImmutableMultiset, element set\")\n",
        "82": "        .withFeatures(CollectionSize.ANY,\n",
        "83": "            CollectionFeature.SERIALIZABLE,\n",
        "84": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "85": "        .createTestSuite());\n",
        "170": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"c\", \"d\", \"e\")),\n",
        "171": "        multiset);\n",
        "175": "    Multiset<String> multiset = ImmutableMultiset.of(\n",
        "176": "        \"a\", \"b\", \"c\", \"d\", \"e\", \"f\");\n",
        "177": "    assertEquals(HashMultiset.create(asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")),\n",
        "178": "        multiset);\n",
        "182": "    Multiset<String> multiset = ImmutableMultiset.of(\n",
        "183": "        \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\");\n",
        "184": "    assertEquals(\n",
        "185": "        HashMultiset.create(asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")),\n",
        "186": "        multiset);\n",
        "196": "    String[] array = new String[] { \"a\" };\n",
        "202": "    String[] array = new String[] { \"a\" };\n",
        "210": "    String[] array = new String[] { null };\n",
        "214": "    } catch (NullPointerException expected) {}\n",
        "241": "    } catch (NullPointerException expected) {}\n",
        "267": "    } catch (NullPointerException expected) {}\n",
        "293": "    } catch (NullPointerException expected) {}\n",
        "350": "            (ms1, ms2)\n",
        "351": "                -> {\n",
        "352": "                  if (!ms1.equals(ms2)) {\n",
        "353": "                    return false;\n",
        "354": "                  }\n",
        "355": "                  List<TypeWithDuplicates> elements1 = ImmutableList.copyOf(ms1.elementSet());\n",
        "356": "                  List<TypeWithDuplicates> elements2 = ImmutableList.copyOf(ms2.elementSet());\n",
        "357": "                  for (int i = 0; i < ms1.elementSet().size(); i++) {\n",
        "358": "                    if (!elements1.get(i).fullEquals(elements2.get(i))) {\n",
        "359": "                      return false;\n",
        "360": "                    }\n",
        "361": "                  }\n",
        "362": "                  return true;\n",
        "363": "                };\n",
        "417": "    ImmutableMultiset<String> multiset = new ImmutableMultiset.Builder<String>()\n",
        "418": "        .add(\"a\")\n",
        "419": "        .add(\"b\")\n",
        "420": "        .add(\"a\")\n",
        "421": "        .add(\"c\")\n",
        "422": "        .build();\n",
        "429": "    ImmutableMultiset<String> multiset = new ImmutableMultiset.Builder<String>()\n",
        "430": "        .addAll(a)\n",
        "431": "        .addAll(b)\n",
        "432": "        .build();\n",
        "439": "    ImmutableMultiset<String> multiset = new ImmutableMultiset.Builder<String>()\n",
        "440": "        .addAll(a)\n",
        "441": "        .addAll(b)\n",
        "442": "        .build();\n",
        "443": "    assertEquals(\n",
        "444": "        HashMultiset.create(asList(\"a\", \"b\", \"b\", \"b\", \"c\")), multiset);\n",
        "449": "    ImmutableMultiset<String> multiset = new ImmutableMultiset.Builder<String>()\n",
        "450": "        .addAll(iterator)\n",
        "451": "        .build();\n",
        "456": "    ImmutableMultiset<String> multiset = new ImmutableMultiset.Builder<String>()\n",
        "457": "        .addCopies(\"a\", 2)\n",
        "458": "        .addCopies(\"b\", 3)\n",
        "459": "        .addCopies(\"c\", 0)\n",
        "460": "        .build();\n",
        "461": "    assertEquals(\n",
        "462": "        HashMultiset.create(asList(\"a\", \"a\", \"b\", \"b\", \"b\")), multiset);\n",
        "466": "    ImmutableMultiset<String> multiset = new ImmutableMultiset.Builder<String>()\n",
        "467": "        .add(\"a\")\n",
        "468": "        .setCount(\"a\", 2)\n",
        "469": "        .setCount(\"b\", 3)\n",
        "470": "        .build();\n",
        "471": "    assertEquals(\n",
        "472": "        HashMultiset.create(asList(\"a\", \"a\", \"b\", \"b\", \"b\")), multiset);\n",
        "480": "    } catch (NullPointerException expected) {}\n",
        "488": "    } catch (NullPointerException expected) {}\n",
        "495": "    } catch (NullPointerException expected) {}\n",
        "498": "    Multiset<String> multisetWithNull\n",
        "499": "        = LinkedHashMultiset.create(asList(\"a\", null, \"b\"));\n",
        "503": "    } catch (NullPointerException expected) {}\n",
        "511": "    } catch (NullPointerException expected) {}\n",
        "519": "    } catch (IllegalArgumentException expected) {}\n",
        "527": "    } catch (NullPointerException expected) {}\n",
        "535": "    } catch (IllegalArgumentException expected) {}\n",
        "560": "    Collection<String> copy =\n",
        "561": "        LenientSerializableTester.reserializeAndAssertLenient(c.elementSet());\n",
        "593": "    ImmutableMultiset<String> multiset\n",
        "594": "        = ImmutableMultiset.of(\"a\", \"a\", \"b\", \"b\", \"b\");\n",
        "603": "    ImmutableMultiset<String> multiset\n",
        "604": "        = ImmutableMultiset.of(\"a\", \"a\", \"b\", \"b\", \"b\");\n"
    }
}