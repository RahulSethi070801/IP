{
    "addition": {
        "38": "/** @author Charles Fry */\n",
        "53": "    CacheLoader<Object, Object> loader =\n",
        "54": "        new CacheLoader<Object, Object>() {\n",
        "55": "          @Override\n",
        "56": "          public Object load(Object from) {\n",
        "57": "            return new Object();\n",
        "58": "          }\n",
        "59": "        };\n",
        "75": "    CacheBuilder<Object, Object> builder = createCacheBuilder().concurrencyLevel(1).maximumSize(2);\n",
        "97": "    assertEquals(1.0 / 2, stats.hitRate());\n",
        "99": "    assertEquals(1.0 / 2, stats.missRate());\n",
        "108": "    assertEquals(1.0 / 3, stats.hitRate());\n",
        "110": "    assertEquals(2.0 / 3, stats.missRate());\n",
        "122": "    assertEquals(1.0 / 4, stats.hitRate());\n",
        "124": "    assertEquals(3.0 / 4, stats.missRate());\n",
        "133": "    CacheBuilder<Object, Object> builder = createCacheBuilder().concurrencyLevel(1);\n",
        "160": "    // TODO(cgruber): Confirm with fry@ that this is a reasonable substitute.\n",
        "161": "    // Set<Entry<Object, Object>> entries = map.entrySet();\n",
        "162": "    // assertThat(entries).containsExactly(\n",
        "164": "    // Set<Object> keys = map.keySet();\n",
        "165": "    // assertThat(keys).containsExactly(one, three);\n",
        "166": "    // Collection<Object> values = map.values();\n",
        "167": "    // assertThat(values).containsExactly(one, two);\n",
        "175": "    CacheBuilder<Object, Object> builder =\n",
        "176": "        CacheBuilder.newBuilder().concurrencyLevel(1).maximumSize(2);\n",
        "197": "    CacheBuilder<Object, Object> builder =\n",
        "198": "        createCacheBuilder().recordStats().concurrencyLevel(1).maximumSize(2);\n",
        "279": "  /** Lookups on the map view shouldn't impact the recency queue. */\n",
        "281": "    CacheBuilder<Object, Object> builder =\n",
        "282": "        createCacheBuilder().concurrencyLevel(1).maximumSize(SMALL_MAX_SIZE);\n",
        "298": "    CacheLoader<Integer, String> recursiveLoader =\n",
        "299": "        new CacheLoader<Integer, String>() {\n",
        "300": "          @Override\n",
        "301": "          public String load(Integer key) {\n",
        "302": "            if (key > 0) {\n",
        "303": "              return key + \", \" + cacheRef.get().getUnchecked(key - 1);\n",
        "304": "            } else {\n",
        "305": "              return \"0\";\n",
        "306": "            }\n",
        "307": "          }\n",
        "308": "        };\n",
        "309": "\n",
        "310": "    LoadingCache<Integer, String> recursiveCache =\n",
        "311": "        CacheBuilder.newBuilder().weakKeys().weakValues().build(recursiveLoader);\n",
        "315": "    recursiveLoader =\n",
        "316": "        new CacheLoader<Integer, String>() {\n",
        "317": "          @Override\n",
        "318": "          public String load(Integer key) {\n",
        "319": "            return cacheRef.get().getUnchecked(key);\n",
        "320": "          }\n",
        "321": "        };\n",
        "323": "    recursiveCache = CacheBuilder.newBuilder().weakKeys().weakValues().build(recursiveLoader);\n",
        "329": "    Thread thread =\n",
        "330": "        new Thread() {\n",
        "331": "          @Override\n",
        "332": "          public void run() {\n",
        "333": "            try {\n",
        "334": "              cacheRef.get().getUnchecked(3);\n",
        "335": "            } finally {\n",
        "336": "              doneSignal.countDown();\n",
        "337": "            }\n",
        "338": "          }\n",
        "339": "        };\n",
        "340": "    thread.setUncaughtExceptionHandler(\n",
        "341": "        new UncaughtExceptionHandler() {\n",
        "342": "          @Override\n",
        "343": "          public void uncaughtException(Thread t, Throwable e) {}\n",
        "344": "        });\n"
    },
    "removed": {
        "38": "/**\n",
        "39": " * @author Charles Fry\n",
        "40": " */\n",
        "55": "    CacheLoader<Object, Object> loader = new CacheLoader<Object, Object>() {\n",
        "56": "      @Override\n",
        "57": "      public Object load(Object from) {\n",
        "58": "        return new Object();\n",
        "59": "      }\n",
        "60": "    };\n",
        "76": "    CacheBuilder<Object, Object> builder = createCacheBuilder()\n",
        "77": "        .concurrencyLevel(1)\n",
        "78": "        .maximumSize(2);\n",
        "100": "    assertEquals(1.0/2, stats.hitRate());\n",
        "102": "    assertEquals(1.0/2, stats.missRate());\n",
        "111": "    assertEquals(1.0/3, stats.hitRate());\n",
        "113": "    assertEquals(2.0/3, stats.missRate());\n",
        "125": "    assertEquals(1.0/4, stats.hitRate());\n",
        "127": "    assertEquals(3.0/4, stats.missRate());\n",
        "136": "    CacheBuilder<Object, Object> builder = createCacheBuilder()\n",
        "137": "        .concurrencyLevel(1);\n",
        "164": "    //TODO(cgruber): Confirm with fry@ that this is a reasonable substitute.\n",
        "165": "    //Set<Entry<Object, Object>> entries = map.entrySet();\n",
        "166": "    //assertThat(entries).containsExactly(\n",
        "168": "    //Set<Object> keys = map.keySet();\n",
        "169": "    //assertThat(keys).containsExactly(one, three);\n",
        "170": "    //Collection<Object> values = map.values();\n",
        "171": "    //assertThat(values).containsExactly(one, two);\n",
        "179": "    CacheBuilder<Object, Object> builder = CacheBuilder.newBuilder()\n",
        "180": "        .concurrencyLevel(1)\n",
        "181": "        .maximumSize(2);\n",
        "202": "    CacheBuilder<Object, Object> builder = createCacheBuilder()\n",
        "203": "        .recordStats()\n",
        "204": "        .concurrencyLevel(1)\n",
        "205": "        .maximumSize(2);\n",
        "286": "  /**\n",
        "287": "   * Lookups on the map view shouldn't impact the recency queue.\n",
        "288": "   */\n",
        "290": "    CacheBuilder<Object, Object> builder = createCacheBuilder()\n",
        "291": "        .concurrencyLevel(1)\n",
        "292": "        .maximumSize(SMALL_MAX_SIZE);\n",
        "308": "    CacheLoader<Integer, String> recursiveLoader = new CacheLoader<Integer, String>() {\n",
        "309": "      @Override\n",
        "310": "      public String load(Integer key) {\n",
        "311": "        if (key > 0) {\n",
        "312": "          return key + \", \" + cacheRef.get().getUnchecked(key - 1);\n",
        "313": "        } else {\n",
        "314": "          return \"0\";\n",
        "315": "        }\n",
        "316": "      }\n",
        "317": "    };\n",
        "318": "\n",
        "319": "    LoadingCache<Integer, String> recursiveCache = CacheBuilder.newBuilder()\n",
        "320": "        .weakKeys()\n",
        "321": "        .weakValues()\n",
        "322": "        .build(recursiveLoader);\n",
        "326": "    recursiveLoader = new CacheLoader<Integer, String>() {\n",
        "327": "      @Override\n",
        "328": "      public String load(Integer key) {\n",
        "329": "        return cacheRef.get().getUnchecked(key);\n",
        "330": "      }\n",
        "331": "    };\n",
        "333": "    recursiveCache = CacheBuilder.newBuilder()\n",
        "334": "        .weakKeys()\n",
        "335": "        .weakValues()\n",
        "336": "        .build(recursiveLoader);\n",
        "342": "    Thread thread = new Thread() {\n",
        "343": "      @Override\n",
        "344": "      public void run() {\n",
        "345": "        try {\n",
        "346": "          cacheRef.get().getUnchecked(3);\n",
        "347": "        } finally {\n",
        "348": "          doneSignal.countDown();\n",
        "349": "        }\n",
        "350": "      }\n",
        "351": "    };\n",
        "352": "    thread.setUncaughtExceptionHandler(new UncaughtExceptionHandler() {\n",
        "353": "      @Override\n",
        "354": "      public void uncaughtException(Thread t, Throwable e) {}\n",
        "355": "    });\n"
    }
}