{
    "addition": {
        "55": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\"> immutable collections</a>.\n",
        "65": "   * Returns a {@link Collector} that accumulates elements into an {@code ImmutableSortedMap} whose\n",
        "66": "   * keys and values are the result of applying the provided mapping functions to the input\n",
        "67": "   * elements. The generated map is sorted by the specified comparator.\n",
        "69": "   * <p>If the mapped keys contain duplicates (according to the specified comparator), an {@code\n",
        "70": "   * IllegalArgumentException} is thrown when the collection operation is performed. (This differs\n",
        "71": "   * from the {@code Collector} returned by {@link Collectors#toMap(Function, Function)}, which\n",
        "72": "   * throws an {@code IllegalStateException}.)\n",
        "130": "  /** Returns the empty sorted map. */\n",
        "138": "  /** Returns an immutable map containing a single entry. */\n",
        "143": "  /** Returns an immutable map containing a single entry. */\n",
        "156": "   * Returns an immutable sorted map containing the given entries, sorted by the natural ordering of\n",
        "157": "   * their keys.\n",
        "159": "   * @throws IllegalArgumentException if the two keys are equal according to their natural ordering\n",
        "168": "   * Returns an immutable sorted map containing the given entries, sorted by the natural ordering of\n",
        "169": "   * their keys.\n",
        "171": "   * @throws IllegalArgumentException if any two keys are equal according to their natural ordering\n",
        "180": "   * Returns an immutable sorted map containing the given entries, sorted by the natural ordering of\n",
        "181": "   * their keys.\n",
        "183": "   * @throws IllegalArgumentException if any two keys are equal according to their natural ordering\n",
        "192": "   * Returns an immutable sorted map containing the given entries, sorted by the natural ordering of\n",
        "193": "   * their keys.\n",
        "195": "   * @throws IllegalArgumentException if any two keys are equal according to their natural ordering\n",
        "205": "   * Returns an immutable map containing the same entries as {@code map}, sorted by the natural\n",
        "206": "   * ordering of the keys.\n",
        "208": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "209": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "210": "   * undocumented and subject to change.\n",
        "212": "   * <p>This method is not type-safe, as it may be called on a map with keys that are not mutually\n",
        "213": "   * comparable.\n",
        "215": "   * @throws ClassCastException if the keys in {@code map} are not mutually comparable\n",
        "217": "   * @throws IllegalArgumentException if any two keys are equal according to their natural ordering\n",
        "228": "   * Returns an immutable map containing the same entries as {@code map}, with keys sorted by the\n",
        "229": "   * provided comparator.\n",
        "231": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "232": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "233": "   * undocumented and subject to change.\n",
        "236": "   * @throws IllegalArgumentException if any two keys are equal according to the comparator\n",
        "244": "   * Returns an immutable map containing the given entries, with keys sorted by the provided\n",
        "245": "   * comparator.\n",
        "247": "   * <p>This method is not type-safe, as it may be called on a map with keys that are not mutually\n",
        "248": "   * comparable.\n",
        "251": "   * @throws IllegalArgumentException if any two keys are equal according to the comparator\n",
        "265": "   * Returns an immutable map containing the given entries, with keys sorted by the provided\n",
        "266": "   * comparator.\n",
        "269": "   * @throws IllegalArgumentException if any two keys are equal according to the comparator\n",
        "280": "   * Returns an immutable map containing the same entries as the provided sorted map, with the same\n",
        "281": "   * ordering.\n",
        "283": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "284": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "285": "   * undocumented and subject to change.\n",
        "316": "          (comparator2 == null) ? comparator == NATURAL_ORDER : comparator.equals(comparator2);\n",
        "332": "   * Accepts a collection of possibly-null entries. If {@code sameComparator}, then it is assumed\n",
        "406": "   * Returns a builder that creates immutable sorted maps whose keys are ordered by their natural\n",
        "407": "   * ordering. The sorted maps use {@link Ordering#natural()} as the comparator.\n",
        "414": "   * Returns a builder that creates immutable sorted maps with an explicit comparator. If the\n",
        "415": "   * comparator has a more general type than the map's keys, such as creating a {@code\n",
        "416": "   * SortedMap<Integer, String>} with a {@code Comparator<Number>}, use the {@link Builder}\n",
        "417": "   * constructor instead.\n",
        "426": "   * Returns a builder that creates immutable sorted maps whose keys are ordered by the reverse of\n",
        "427": "   * their natural ordering.\n",
        "434": "   * A builder for creating immutable sorted map instances, especially {@code public static final}\n",
        "435": "   * maps (\"constant maps\"). Example:\n",
        "437": "   * <pre>{@code\n",
        "438": "   * static final ImmutableSortedMap<Integer, String> INT_TO_WORD =\n",
        "439": "   *     new ImmutableSortedMap.Builder<Integer, String>(Ordering.natural())\n",
        "440": "   *         .put(1, \"one\")\n",
        "441": "   *         .put(2, \"two\")\n",
        "442": "   *         .put(3, \"three\")\n",
        "443": "   *         .build();\n",
        "444": "   * }</pre>\n",
        "446": "   * <p>For <i>small</i> immutable sorted maps, the {@code ImmutableSortedMap.of()} methods are even\n",
        "447": "   * more convenient.\n",
        "449": "   * <p>Builder instances can be reused - it is safe to call {@link #build} multiple times to build\n",
        "450": "   * multiple maps in series. Each map is a superset of the maps created before it.\n",
        "458": "     * Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n",
        "459": "     * ImmutableSortedMap#orderedBy}.\n",
        "467": "     * Associates {@code key} with {@code value} in the built map. Duplicate keys, according to the\n",
        "468": "     * comparator (which might be the keys' natural order), are not allowed, and will cause {@link\n",
        "469": "     * #build} to fail.\n",
        "479": "     * Adds the given {@code entry} to the map, making it immutable if necessary. Duplicate keys,\n",
        "480": "     * according to the comparator (which might be the keys' natural order), are not allowed, and\n",
        "481": "     * will cause {@link #build} to fail.\n",
        "493": "     * Associates all of the given map's keys and values in the built map. Duplicate keys, according\n",
        "494": "     * to the comparator (which might be the keys' natural order), are not allowed, and will cause\n",
        "495": "     * {@link #build} to fail.\n",
        "507": "     * Adds all the given entries to the built map. Duplicate keys, according to the comparator\n",
        "508": "     * (which might be the keys' natural order), are not allowed, and will cause {@link #build} to\n",
        "509": "     * fail.\n",
        "545": "     * @throws IllegalArgumentException if any two keys are equal according to the comparator (which\n",
        "546": "     *     might be the keys' natural order)\n",
        "603": "  /** Returns an immutable set of the mappings in this map, sorted by the key ordering. */\n",
        "658": "  /** Returns an immutable sorted set of the keys in this map. */\n",
        "670": "   * Returns an immutable collection of the values in this map, sorted by the ordering of the\n",
        "671": "   * corresponding keys.\n",
        "684": "   * Returns the comparator that orders the keys, which is {@link Ordering#natural()} when the\n",
        "685": "   * natural ordering of the keys is used. Note that its behavior is not consistent with {@link\n",
        "686": "   * TreeMap#comparator()}, which returns {@code null} to indicate natural ordering.\n",
        "715": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are less\n",
        "716": "   * than {@code toKey}.\n",
        "717": "   *\n",
        "718": "   * <p>The {@link SortedMap#headMap} documentation states that a submap of a submap throws an\n",
        "719": "   * {@link IllegalArgumentException} if passed a {@code toKey} greater than an earlier {@code\n",
        "720": "   * toKey}. However, this method doesn't throw an exception in that situation, but instead keeps\n",
        "721": "   * the original {@code toKey}.\n",
        "729": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are less\n",
        "730": "   * than (or equal to, if {@code inclusive}) {@code toKey}.\n",
        "732": "   * <p>The {@link SortedMap#headMap} documentation states that a submap of a submap throws an\n",
        "733": "   * {@link IllegalArgumentException} if passed a {@code toKey} greater than an earlier {@code\n",
        "734": "   * toKey}. However, this method doesn't throw an exception in that situation, but instead keeps\n",
        "735": "   * the original {@code toKey}.\n",
        "745": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys ranges\n",
        "746": "   * from {@code fromKey}, inclusive, to {@code toKey}, exclusive.\n",
        "747": "   *\n",
        "748": "   * <p>The {@link SortedMap#subMap} documentation states that a submap of a submap throws an {@link\n",
        "749": "   * IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}.\n",
        "750": "   * However, this method doesn't throw an exception in that situation, but instead keeps the\n",
        "751": "   * original {@code fromKey}. Similarly, this method keeps the original {@code toKey}, instead of\n",
        "752": "   * throwing an exception, if passed a {@code toKey} greater than an earlier {@code toKey}.\n",
        "760": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys ranges\n",
        "761": "   * from {@code fromKey} to {@code toKey}, inclusive or exclusive as indicated by the boolean\n",
        "762": "   * flags.\n",
        "763": "   *\n",
        "764": "   * <p>The {@link SortedMap#subMap} documentation states that a submap of a submap throws an {@link\n",
        "765": "   * IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}.\n",
        "766": "   * However, this method doesn't throw an exception in that situation, but instead keeps the\n",
        "767": "   * original {@code fromKey}. Similarly, this method keeps the original {@code toKey}, instead of\n",
        "768": "   * throwing an exception, if passed a {@code toKey} greater than an earlier {@code toKey}.\n",
        "786": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are\n",
        "787": "   * greater than or equals to {@code fromKey}.\n",
        "788": "   *\n",
        "789": "   * <p>The {@link SortedMap#tailMap} documentation states that a submap of a submap throws an\n",
        "790": "   * {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code\n",
        "791": "   * fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps\n",
        "792": "   * the original {@code fromKey}.\n",
        "800": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are\n",
        "801": "   * greater than (or equal to, if {@code inclusive}) {@code fromKey}.\n",
        "803": "   * <p>The {@link SortedMap#tailMap} documentation states that a submap of a submap throws an\n",
        "804": "   * {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code\n",
        "805": "   * fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps\n",
        "806": "   * the original {@code fromKey}.\n",
        "919": "   * Serialized type for all ImmutableSortedMap instances. It captures the logical contents and they\n",
        "920": "   * are reconstructed using public factory methods. This ensures that the implementation types\n",
        "921": "   * remain as implementation details.\n"
    },
    "removed": {
        "55": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\">\n",
        "56": " * immutable collections</a>.\n",
        "66": "   * Returns a {@link Collector} that accumulates elements into an {@code ImmutableSortedMap}\n",
        "67": "   * whose keys and values are the result of applying the provided mapping functions to the input\n",
        "68": "   * elements.  The generated map is sorted by the specified comparator.\n",
        "70": "   * <p>If the mapped keys contain duplicates (according to the specified comparator), an\n",
        "71": "   * {@code IllegalArgumentException} is thrown when the collection operation is performed.\n",
        "72": "   * (This differs from the {@code Collector} returned by\n",
        "73": "   * {@link Collectors#toMap(Function, Function)}, which throws an {@code IllegalStateException}.)\n",
        "131": "  /**\n",
        "132": "   * Returns the empty sorted map.\n",
        "133": "   */\n",
        "141": "  /**\n",
        "142": "   * Returns an immutable map containing a single entry.\n",
        "143": "   */\n",
        "148": "  /**\n",
        "149": "   * Returns an immutable map containing a single entry.\n",
        "150": "   */\n",
        "163": "   * Returns an immutable sorted map containing the given entries, sorted by the\n",
        "164": "   * natural ordering of their keys.\n",
        "166": "   * @throws IllegalArgumentException if the two keys are equal according to\n",
        "167": "   *     their natural ordering\n",
        "176": "   * Returns an immutable sorted map containing the given entries, sorted by the\n",
        "177": "   * natural ordering of their keys.\n",
        "179": "   * @throws IllegalArgumentException if any two keys are equal according to\n",
        "180": "   *     their natural ordering\n",
        "189": "   * Returns an immutable sorted map containing the given entries, sorted by the\n",
        "190": "   * natural ordering of their keys.\n",
        "192": "   * @throws IllegalArgumentException if any two keys are equal according to\n",
        "193": "   *     their natural ordering\n",
        "202": "   * Returns an immutable sorted map containing the given entries, sorted by the\n",
        "203": "   * natural ordering of their keys.\n",
        "205": "   * @throws IllegalArgumentException if any two keys are equal according to\n",
        "206": "   *     their natural ordering\n",
        "216": "   * Returns an immutable map containing the same entries as {@code map}, sorted\n",
        "217": "   * by the natural ordering of the keys.\n",
        "219": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "220": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "221": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "223": "   * <p>This method is not type-safe, as it may be called on a map with keys\n",
        "224": "   * that are not mutually comparable.\n",
        "226": "   * @throws ClassCastException if the keys in {@code map} are not mutually\n",
        "227": "   *         comparable\n",
        "229": "   * @throws IllegalArgumentException if any two keys are equal according to\n",
        "230": "   *         their natural ordering\n",
        "241": "   * Returns an immutable map containing the same entries as {@code map}, with\n",
        "242": "   * keys sorted by the provided comparator.\n",
        "244": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "245": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "246": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "249": "   * @throws IllegalArgumentException if any two keys are equal according to the\n",
        "250": "   *         comparator\n",
        "258": "   * Returns an immutable map containing the given entries, with keys sorted\n",
        "259": "   * by the provided comparator.\n",
        "261": "   * <p>This method is not type-safe, as it may be called on a map with keys\n",
        "262": "   * that are not mutually comparable.\n",
        "265": "   * @throws IllegalArgumentException if any two keys are equal according to the\n",
        "266": "   *         comparator\n",
        "280": "   * Returns an immutable map containing the given entries, with keys sorted\n",
        "281": "   * by the provided comparator.\n",
        "284": "   * @throws IllegalArgumentException if any two keys are equal according to the\n",
        "285": "   *         comparator\n",
        "296": "   * Returns an immutable map containing the same entries as the provided sorted\n",
        "297": "   * map, with the same ordering.\n",
        "299": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "300": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "301": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "332": "          (comparator2 == null)\n",
        "333": "              ? comparator == NATURAL_ORDER\n",
        "334": "              : comparator.equals(comparator2);\n",
        "350": "   * Accepts a collection of possibly-null entries.  If {@code sameComparator}, then it is assumed\n",
        "424": "   * Returns a builder that creates immutable sorted maps whose keys are\n",
        "425": "   * ordered by their natural ordering. The sorted maps use {@link\n",
        "426": "   * Ordering#natural()} as the comparator.\n",
        "433": "   * Returns a builder that creates immutable sorted maps with an explicit\n",
        "434": "   * comparator. If the comparator has a more general type than the map's keys,\n",
        "435": "   * such as creating a {@code SortedMap<Integer, String>} with a {@code\n",
        "436": "   * Comparator<Number>}, use the {@link Builder} constructor instead.\n",
        "445": "   * Returns a builder that creates immutable sorted maps whose keys are\n",
        "446": "   * ordered by the reverse of their natural ordering.\n",
        "453": "   * A builder for creating immutable sorted map instances, especially {@code\n",
        "454": "   * public static final} maps (\"constant maps\"). Example: <pre>   {@code\n",
        "456": "   *   static final ImmutableSortedMap<Integer, String> INT_TO_WORD =\n",
        "457": "   *       new ImmutableSortedMap.Builder<Integer, String>(Ordering.natural())\n",
        "458": "   *           .put(1, \"one\")\n",
        "459": "   *           .put(2, \"two\")\n",
        "460": "   *           .put(3, \"three\")\n",
        "461": "   *           .build();}</pre>\n",
        "463": "   * <p>For <i>small</i> immutable sorted maps, the {@code ImmutableSortedMap.of()}\n",
        "464": "   * methods are even more convenient.\n",
        "466": "   * <p>Builder instances can be reused - it is safe to call {@link #build}\n",
        "467": "   * multiple times to build multiple maps in series. Each map is a superset of\n",
        "468": "   * the maps created before it.\n",
        "476": "     * Creates a new builder. The returned builder is equivalent to the builder\n",
        "477": "     * generated by {@link ImmutableSortedMap#orderedBy}.\n",
        "485": "     * Associates {@code key} with {@code value} in the built map. Duplicate\n",
        "486": "     * keys, according to the comparator (which might be the keys' natural\n",
        "487": "     * order), are not allowed, and will cause {@link #build} to fail.\n",
        "497": "     * Adds the given {@code entry} to the map, making it immutable if\n",
        "498": "     * necessary. Duplicate keys, according to the comparator (which might be\n",
        "499": "     * the keys' natural order), are not allowed, and will cause {@link #build}\n",
        "500": "     * to fail.\n",
        "512": "     * Associates all of the given map's keys and values in the built map.\n",
        "513": "     * Duplicate keys, according to the comparator (which might be the keys'\n",
        "514": "     * natural order), are not allowed, and will cause {@link #build} to fail.\n",
        "526": "     * Adds all the given entries to the built map.  Duplicate keys, according\n",
        "527": "     * to the comparator (which might be the keys' natural order), are not\n",
        "528": "     * allowed, and will cause {@link #build} to fail.\n",
        "564": "     * @throws IllegalArgumentException if any two keys are equal according to\n",
        "565": "     *     the comparator (which might be the keys' natural order)\n",
        "622": "  /**\n",
        "623": "   * Returns an immutable set of the mappings in this map, sorted by the key\n",
        "624": "   * ordering.\n",
        "625": "   */\n",
        "680": "  /**\n",
        "681": "   * Returns an immutable sorted set of the keys in this map.\n",
        "682": "   */\n",
        "694": "   * Returns an immutable collection of the values in this map, sorted by the\n",
        "695": "   * ordering of the corresponding keys.\n",
        "708": "   * Returns the comparator that orders the keys, which is\n",
        "709": "   * {@link Ordering#natural()} when the natural ordering of the keys is used.\n",
        "710": "   * Note that its behavior is not consistent with {@link TreeMap#comparator()},\n",
        "711": "   * which returns {@code null} to indicate natural ordering.\n",
        "740": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries\n",
        "741": "   * whose keys are less than {@code toKey}.\n",
        "742": "   *\n",
        "743": "   * <p>The {@link SortedMap#headMap} documentation states that a submap of a\n",
        "744": "   * submap throws an {@link IllegalArgumentException} if passed a {@code toKey}\n",
        "745": "   * greater than an earlier {@code toKey}. However, this method doesn't throw\n",
        "746": "   * an exception in that situation, but instead keeps the original {@code\n",
        "747": "   * toKey}.\n",
        "755": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries\n",
        "756": "   * whose keys are less than (or equal to, if {@code inclusive}) {@code toKey}.\n",
        "758": "   * <p>The {@link SortedMap#headMap} documentation states that a submap of a\n",
        "759": "   * submap throws an {@link IllegalArgumentException} if passed a {@code toKey}\n",
        "760": "   * greater than an earlier {@code toKey}. However, this method doesn't throw\n",
        "761": "   * an exception in that situation, but instead keeps the original {@code\n",
        "762": "   * toKey}.\n",
        "772": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries\n",
        "773": "   * whose keys ranges from {@code fromKey}, inclusive, to {@code toKey},\n",
        "774": "   * exclusive.\n",
        "775": "   *\n",
        "776": "   * <p>The {@link SortedMap#subMap} documentation states that a submap of a\n",
        "777": "   * submap throws an {@link IllegalArgumentException} if passed a {@code\n",
        "778": "   * fromKey} less than an earlier {@code fromKey}. However, this method doesn't\n",
        "779": "   * throw an exception in that situation, but instead keeps the original {@code\n",
        "780": "   * fromKey}. Similarly, this method keeps the original {@code toKey}, instead\n",
        "781": "   * of throwing an exception, if passed a {@code toKey} greater than an earlier\n",
        "782": "   * {@code toKey}.\n",
        "790": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries\n",
        "791": "   * whose keys ranges from {@code fromKey} to {@code toKey}, inclusive or\n",
        "792": "   * exclusive as indicated by the boolean flags.\n",
        "793": "   *\n",
        "794": "   * <p>The {@link SortedMap#subMap} documentation states that a submap of a\n",
        "795": "   * submap throws an {@link IllegalArgumentException} if passed a {@code\n",
        "796": "   * fromKey} less than an earlier {@code fromKey}. However, this method doesn't\n",
        "797": "   * throw an exception in that situation, but instead keeps the original {@code\n",
        "798": "   * fromKey}. Similarly, this method keeps the original {@code toKey}, instead\n",
        "799": "   * of throwing an exception, if passed a {@code toKey} greater than an earlier\n",
        "800": "   * {@code toKey}.\n",
        "818": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries\n",
        "819": "   * whose keys are greater than or equals to {@code fromKey}.\n",
        "820": "   *\n",
        "821": "   * <p>The {@link SortedMap#tailMap} documentation states that a submap of a\n",
        "822": "   * submap throws an {@link IllegalArgumentException} if passed a {@code\n",
        "823": "   * fromKey} less than an earlier {@code fromKey}. However, this method doesn't\n",
        "824": "   * throw an exception in that situation, but instead keeps the original {@code\n",
        "825": "   * fromKey}.\n",
        "833": "   * This method returns a {@code ImmutableSortedMap}, consisting of the entries\n",
        "834": "   * whose keys are greater than (or equal to, if {@code inclusive})\n",
        "835": "   * {@code fromKey}.\n",
        "837": "   * <p>The {@link SortedMap#tailMap} documentation states that a submap of a\n",
        "838": "   * submap throws an {@link IllegalArgumentException} if passed a {@code\n",
        "839": "   * fromKey} less than an earlier {@code fromKey}. However, this method doesn't\n",
        "840": "   * throw an exception in that situation, but instead keeps the original {@code\n",
        "841": "   * fromKey}.\n",
        "954": "   * Serialized type for all ImmutableSortedMap instances. It captures the\n",
        "955": "   * logical contents and they are reconstructed using public factory methods.\n",
        "956": "   * This ensures that the implementation types remain as implementation\n",
        "957": "   * details.\n"
    }
}