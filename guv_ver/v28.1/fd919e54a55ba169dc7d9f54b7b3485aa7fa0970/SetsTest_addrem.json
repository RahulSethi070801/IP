{
    "addition": {
        "92": "  private static final Collection<Integer> EMPTY_COLLECTION = Arrays.<Integer>asList();\n",
        "94": "  private static final Collection<Integer> SOME_COLLECTION = Arrays.asList(0, 1, 1);\n",
        "96": "  private static final Iterable<Integer> SOME_ITERABLE =\n",
        "97": "      new Iterable<Integer>() {\n",
        "104": "  private static final List<Integer> LONGER_LIST = Arrays.asList(8, 6, 7, 5, 3, 0, 9);\n",
        "106": "  private static final Comparator<Integer> SOME_COMPARATOR = Collections.reverseOrder();\n",
        "113": "    suite.addTest(\n",
        "114": "        SetTestSuiteBuilder.using(\n",
        "115": "                new TestStringSetGenerator() {\n",
        "116": "                  @Override\n",
        "117": "                  protected Set<String> create(String[] elements) {\n",
        "118": "                    return Sets.newConcurrentHashSet(Arrays.asList(elements));\n",
        "119": "                  }\n",
        "120": "                })\n",
        "121": "            .named(\"Sets.newConcurrentHashSet\")\n",
        "122": "            .withFeatures(CollectionSize.ANY, SetFeature.GENERAL_PURPOSE)\n",
        "123": "            .createTestSuite());\n",
        "124": "\n",
        "125": "    suite.addTest(\n",
        "126": "        SetTestSuiteBuilder.using(\n",
        "127": "                new TestStringSetGenerator() {\n",
        "128": "                  @Override\n",
        "129": "                  protected Set<String> create(String[] elements) {\n",
        "130": "                    int size = elements.length;\n",
        "131": "                    // Remove last element, if size > 1\n",
        "132": "                    Set<String> set1 =\n",
        "133": "                        (size > 1)\n",
        "134": "                            ? Sets.newHashSet(Arrays.asList(elements).subList(0, size - 1))\n",
        "135": "                            : Sets.newHashSet(elements);\n",
        "136": "                    // Remove first element, if size > 0\n",
        "137": "                    Set<String> set2 =\n",
        "138": "                        (size > 0)\n",
        "139": "                            ? Sets.newHashSet(Arrays.asList(elements).subList(1, size))\n",
        "140": "                            : Sets.<String>newHashSet();\n",
        "141": "                    return Sets.union(set1, set2);\n",
        "142": "                  }\n",
        "143": "                })\n",
        "144": "            .named(\"Sets.union\")\n",
        "145": "            .withFeatures(CollectionSize.ANY, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "146": "            .createTestSuite());\n",
        "147": "\n",
        "148": "    suite.addTest(\n",
        "149": "        SetTestSuiteBuilder.using(\n",
        "150": "                new TestStringSetGenerator() {\n",
        "151": "                  @Override\n",
        "152": "                  protected Set<String> create(String[] elements) {\n",
        "153": "                    Set<String> set1 = Sets.newHashSet(elements);\n",
        "154": "                    set1.add(samples().e3());\n",
        "155": "                    Set<String> set2 = Sets.newHashSet(elements);\n",
        "156": "                    set2.add(samples().e4());\n",
        "157": "                    return Sets.intersection(set1, set2);\n",
        "158": "                  }\n",
        "159": "                })\n",
        "160": "            .named(\"Sets.intersection\")\n",
        "161": "            .withFeatures(CollectionSize.ANY, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "162": "            .createTestSuite());\n",
        "163": "\n",
        "164": "    suite.addTest(\n",
        "165": "        SetTestSuiteBuilder.using(\n",
        "166": "                new TestStringSetGenerator() {\n",
        "167": "                  @Override\n",
        "168": "                  protected Set<String> create(String[] elements) {\n",
        "169": "                    Set<String> set1 = Sets.newHashSet(elements);\n",
        "170": "                    set1.add(samples().e3());\n",
        "171": "                    Set<String> set2 = Sets.newHashSet(samples().e3());\n",
        "172": "                    return Sets.difference(set1, set2);\n",
        "173": "                  }\n",
        "174": "                })\n",
        "175": "            .named(\"Sets.difference\")\n",
        "176": "            .withFeatures(CollectionSize.ANY, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "177": "            .createTestSuite());\n",
        "178": "\n",
        "179": "    suite.addTest(\n",
        "180": "        SetTestSuiteBuilder.using(\n",
        "181": "                new TestEnumSetGenerator() {\n",
        "182": "                  @Override\n",
        "183": "                  protected Set<AnEnum> create(AnEnum[] elements) {\n",
        "184": "                    AnEnum[] otherElements = new AnEnum[elements.length - 1];\n",
        "185": "                    System.arraycopy(elements, 1, otherElements, 0, otherElements.length);\n",
        "186": "                    return Sets.immutableEnumSet(elements[0], otherElements);\n",
        "187": "                  }\n",
        "188": "                })\n",
        "189": "            .named(\"Sets.immutableEnumSet\")\n",
        "190": "            .withFeatures(\n",
        "191": "                CollectionSize.ONE, CollectionSize.SEVERAL, CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "192": "            .createTestSuite());\n",
        "222": "    return SetTestSuiteBuilder.using(\n",
        "223": "            new TestStringSetGenerator() {\n",
        "224": "              @Override\n",
        "225": "              public Set<String> create(String[] elements) {\n",
        "226": "                Set<String> unfiltered = Sets.newLinkedHashSet();\n",
        "227": "                unfiltered.add(\"yyy\");\n",
        "228": "                Collections.addAll(unfiltered, elements);\n",
        "229": "                unfiltered.add(\"zzz\");\n",
        "230": "                return Sets.filter(unfiltered, Collections2Test.NOT_YYY_ZZZ);\n",
        "231": "              }\n",
        "232": "            })\n",
        "246": "    suite.addTest(\n",
        "247": "        SetTestSuiteBuilder.using(\n",
        "248": "                new TestStringSetGenerator() {\n",
        "249": "                  @Override\n",
        "250": "                  public Set<String> create(String[] elements) {\n",
        "251": "                    Set<String> unfiltered = Sets.newLinkedHashSet();\n",
        "252": "                    unfiltered.add(\"yyy\");\n",
        "253": "                    unfiltered.addAll(ImmutableList.copyOf(elements));\n",
        "254": "                    unfiltered.add(\"zzz\");\n",
        "255": "                    return Sets.filter(unfiltered, Collections2Test.LENGTH_1);\n",
        "256": "                  }\n",
        "257": "                })\n",
        "258": "            .named(\"Sets.filter, no nulls\")\n",
        "259": "            .withFeatures(\n",
        "260": "                CollectionFeature.SUPPORTS_ADD,\n",
        "261": "                CollectionFeature.SUPPORTS_REMOVE,\n",
        "262": "                CollectionFeature.KNOWN_ORDER,\n",
        "263": "                CollectionSize.ANY,\n",
        "264": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "265": "            .createTestSuite());\n",
        "266": "    suite.addTest(\n",
        "267": "        NavigableSetTestSuiteBuilder.using(\n",
        "268": "                new TestStringSetGenerator() {\n",
        "269": "                  @Override\n",
        "270": "                  public NavigableSet<String> create(String[] elements) {\n",
        "271": "                    NavigableSet<String> unfiltered = Sets.newTreeSet();\n",
        "272": "                    unfiltered.add(\"yyy\");\n",
        "273": "                    unfiltered.addAll(ImmutableList.copyOf(elements));\n",
        "274": "                    unfiltered.add(\"zzz\");\n",
        "275": "                    return Sets.filter(unfiltered, Collections2Test.LENGTH_1);\n",
        "276": "                  }\n",
        "277": "\n",
        "278": "                  @Override\n",
        "279": "                  public List<String> order(List<String> insertionOrder) {\n",
        "280": "                    return Ordering.natural().sortedCopy(insertionOrder);\n",
        "281": "                  }\n",
        "282": "                })\n",
        "283": "            .named(\"Sets.filter[NavigableSet]\")\n",
        "284": "            .withFeatures(\n",
        "285": "                CollectionFeature.SUPPORTS_ADD,\n",
        "286": "                CollectionFeature.SUPPORTS_REMOVE,\n",
        "287": "                CollectionFeature.KNOWN_ORDER,\n",
        "288": "                CollectionSize.ANY,\n",
        "289": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "290": "            .createTestSuite());\n",
        "296": "    return SetTestSuiteBuilder.using(\n",
        "297": "            new TestStringSetGenerator() {\n",
        "298": "              @Override\n",
        "299": "              public Set<String> create(String[] elements) {\n",
        "300": "                Set<String> unfiltered = Sets.newLinkedHashSet();\n",
        "301": "                unfiltered.add(\"yyy\");\n",
        "302": "                unfiltered.addAll(ImmutableList.copyOf(elements));\n",
        "303": "                unfiltered.add(\"zzz\");\n",
        "304": "                unfiltered.add(\"abc\");\n",
        "305": "                return Sets.filter(\n",
        "306": "                    Sets.filter(unfiltered, Collections2Test.LENGTH_1),\n",
        "307": "                    Collections2Test.NOT_YYY_ZZZ);\n",
        "308": "              }\n",
        "309": "            })\n",
        "320": "  private enum SomeEnum {\n",
        "321": "    A,\n",
        "322": "    B,\n",
        "323": "    C,\n",
        "324": "    D\n",
        "325": "  }\n",
        "334": "    } catch (UnsupportedOperationException expected) {\n",
        "335": "    }\n",
        "339": "    } catch (UnsupportedOperationException expected) {\n",
        "340": "    }\n",
        "354": "    ImmutableSet<SomeEnum> none = Sets.immutableEnumSet(MinimalIterable.<SomeEnum>of());\n",
        "357": "    ImmutableSet<SomeEnum> one = Sets.immutableEnumSet(MinimalIterable.of(SomeEnum.B));\n",
        "366": "    ImmutableSet<SomeEnum> original = Sets.immutableEnumSet(SomeEnum.A, SomeEnum.B);\n",
        "369": "    ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(serializedForm));\n",
        "407": "    EnumSet<SomeEnum> copy = newEnumSet(Collections.<SomeEnum>emptySet(), SomeEnum.class);\n",
        "482": "    LinkedHashSet<Integer> set =\n",
        "483": "        Sets.newLinkedHashSet(\n",
        "484": "            new Iterable<Integer>() {\n",
        "485": "              @Override\n",
        "486": "              public Iterator<Integer> iterator() {\n",
        "487": "                return LONGER_LIST.iterator();\n",
        "488": "              }\n",
        "489": "            });\n",
        "521": "    assertThat(set)\n",
        "522": "        .containsExactly(new LegacyComparable(\"bar\"), new LegacyComparable(\"foo\"))\n",
        "523": "        .inOrder();\n",
        "537": "    Iterable<Derived> iterable = Arrays.asList(new Derived(\"foo\"), new Derived(\"bar\"));\n",
        "539": "    assertThat(set).containsExactly(new Derived(\"bar\"), new Derived(\"foo\")).inOrder();\n",
        "546": "    assertThat(set)\n",
        "547": "        .containsExactly(new LegacyComparable(\"bar\"), new LegacyComparable(\"foo\"))\n",
        "548": "        .inOrder();\n",
        "626": "    } catch (IllegalArgumentException expected) {\n",
        "627": "    }\n",
        "646": "    Set<Integer> set = Sets.newSetFromMap(new LinkedHashMap<Integer, Boolean>());\n",
        "658": "    } catch (IllegalArgumentException expected) {\n",
        "659": "    }\n",
        "665": "  /** The 0-ary cartesian product is a single empty list. */\n",
        "671": "  /** A unary cartesian product is one list of size 1 for each element in the input set. */\n",
        "709": "        .containsExactly(list(1, 2), list(1, 3))\n",
        "710": "        .inOrder();\n",
        "716": "        .containsExactly(list(1, 3), list(1, 4), list(2, 3), list(2, 4))\n",
        "717": "        .inOrder();\n",
        "722": "    assertThat(Sets.cartesianProduct(set(0, 1), set(0, 1), set(0, 1)))\n",
        "723": "        .containsExactly(\n",
        "724": "            list(0, 0, 0),\n",
        "725": "            list(0, 0, 1),\n",
        "726": "            list(0, 1, 0),\n",
        "727": "            list(0, 1, 1),\n",
        "728": "            list(1, 0, 0),\n",
        "729": "            list(1, 0, 1),\n",
        "730": "            list(1, 1, 0),\n",
        "731": "            list(1, 1, 1))\n",
        "732": "        .inOrder();\n",
        "756": "        .containsExactly(exp1, exp2, exp3, exp4)\n",
        "757": "        .inOrder();\n",
        "789": "    checkHashCode(Sets.cartesianProduct(set(1, num), set(2, num - 1), set(3, num + 1)));\n",
        "792": "    checkHashCode(\n",
        "793": "        Sets.cartesianProduct(set(1, num, num + 1), set(2), set(3, num + 2), set(4, 5, 6, 7, 8)));\n",
        "872": "      @Override\n",
        "873": "      protected Iterator<Set<Integer>> newTargetIterator() {\n",
        "890": "      @Override\n",
        "891": "      protected Iterator<Set<Integer>> newTargetIterator() {\n",
        "903": "    assertPowerSetSize(\n",
        "904": "        1 << 30, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',\n",
        "905": "        'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '1', '2', '3', '4');\n",
        "927": "    ImmutableList<Integer> allElements =\n",
        "928": "        ImmutableList.of(\n",
        "929": "            4233352, 3284593, 3794208, 3849533, 4013967, 2902658, 1886275, 2131109, 985872,\n",
        "930": "            1843868);\n",
        "946": "   * Test that a hash code miscomputed by \"input.hashCode() * tooFarValue / 2\" is correct under our\n",
        "947": "   * {@code hashCode} implementation.\n",
        "965": "    Set<Set<Set<Set<Set<Set<Object>>>>>> sixtyFiveThousandish = powerSet(sixteen);\n",
        "968": "    assertTrue(powerSet(makeSetOfZeroToTwentyNine()).contains(makeSetOfZeroToTwentyNine()));\n",
        "969": "    assertFalse(powerSet(makeSetOfZeroToTwentyNine()).contains(ImmutableSet.of(30)));\n",
        "991": "      @Override\n",
        "992": "      public int hashCode() {\n",
        "1046": "   * Utility method to verify that the given LinkedHashSet is equal to and hashes identically to a\n",
        "1047": "   * set constructed with the elements in the given collection. Also verifies that the ordering in\n",
        "1048": "   * the set is the same as the ordering of the given contents.\n",
        "1052": "    assertEquals(\n",
        "1053": "        \"LinkedHashSet should have preserved order for iteration\",\n",
        "1054": "        new ArrayList<E>(set),\n",
        "1055": "        new ArrayList<E>(contents));\n",
        "1060": "   * Utility method to verify that the given SortedSet is equal to and hashes identically to a set\n",
        "1061": "   * constructed with the elements in the given iterable. Also verifies that the comparator is the\n",
        "1062": "   * same as the given comparator.\n",
        "1065": "      SortedSet<E> set, Iterable<E> iterable, @Nullable Comparator<E> comparator) {\n",
        "1071": "   * Utility method that verifies that the given set is equal to and hashes identically to a set\n",
        "1072": "   * constructed with the elements in the given iterable.\n",
        "1087": "  /** Simple base class to verify that we handle generics correctly. */\n",
        "1095": "    @Override\n",
        "1096": "    public int hashCode() { // delegate to 's'\n",
        "1100": "    @Override\n",
        "1101": "    public boolean equals(Object other) {\n",
        "1119": "  /** Simple derived class to verify that we handle generics correctly. */\n"
    },
    "removed": {
        "92": "  private static final Collection<Integer> EMPTY_COLLECTION\n",
        "93": "      = Arrays.<Integer>asList();\n",
        "95": "  private static final Collection<Integer> SOME_COLLECTION\n",
        "96": "      = Arrays.asList(0, 1, 1);\n",
        "98": "  private static final Iterable<Integer> SOME_ITERABLE\n",
        "99": "      = new Iterable<Integer>() {\n",
        "106": "  private static final List<Integer> LONGER_LIST\n",
        "107": "      = Arrays.asList(8, 6, 7, 5, 3, 0, 9);\n",
        "109": "  private static final Comparator<Integer> SOME_COMPARATOR\n",
        "110": "      = Collections.reverseOrder();\n",
        "117": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "118": "          @Override protected Set<String> create(String[] elements) {\n",
        "119": "            return Sets.newConcurrentHashSet(Arrays.asList(elements));\n",
        "120": "          }\n",
        "121": "        })\n",
        "122": "        .named(\"Sets.newConcurrentHashSet\")\n",
        "123": "        .withFeatures(CollectionSize.ANY, SetFeature.GENERAL_PURPOSE)\n",
        "124": "        .createTestSuite());\n",
        "125": "\n",
        "126": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "127": "          @Override protected Set<String> create(String[] elements) {\n",
        "128": "            int size = elements.length;\n",
        "129": "            // Remove last element, if size > 1\n",
        "130": "            Set<String> set1 = (size > 1)\n",
        "131": "                ? Sets.newHashSet(\n",
        "132": "                    Arrays.asList(elements).subList(0, size - 1))\n",
        "133": "                : Sets.newHashSet(elements);\n",
        "134": "            // Remove first element, if size > 0\n",
        "135": "            Set<String> set2 = (size > 0)\n",
        "136": "                ? Sets.newHashSet(\n",
        "137": "                    Arrays.asList(elements).subList(1, size))\n",
        "138": "                : Sets.<String>newHashSet();\n",
        "139": "            return Sets.union(set1, set2);\n",
        "140": "          }\n",
        "141": "        })\n",
        "142": "        .named(\"Sets.union\")\n",
        "143": "        .withFeatures(CollectionSize.ANY, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "144": "        .createTestSuite());\n",
        "145": "\n",
        "146": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "147": "          @Override protected Set<String> create(String[] elements) {\n",
        "148": "            Set<String> set1 = Sets.newHashSet(elements);\n",
        "149": "            set1.add(samples().e3());\n",
        "150": "            Set<String> set2 = Sets.newHashSet(elements);\n",
        "151": "            set2.add(samples().e4());\n",
        "152": "            return Sets.intersection(set1, set2);\n",
        "153": "          }\n",
        "154": "        })\n",
        "155": "        .named(\"Sets.intersection\")\n",
        "156": "        .withFeatures(CollectionSize.ANY, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "157": "        .createTestSuite());\n",
        "158": "\n",
        "159": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "160": "          @Override protected Set<String> create(String[] elements) {\n",
        "161": "            Set<String> set1 = Sets.newHashSet(elements);\n",
        "162": "            set1.add(samples().e3());\n",
        "163": "            Set<String> set2 = Sets.newHashSet(samples().e3());\n",
        "164": "            return Sets.difference(set1, set2);\n",
        "165": "          }\n",
        "166": "        })\n",
        "167": "        .named(\"Sets.difference\")\n",
        "168": "        .withFeatures(CollectionSize.ANY, CollectionFeature.ALLOWS_NULL_VALUES)\n",
        "169": "        .createTestSuite());\n",
        "170": "\n",
        "171": "    suite.addTest(SetTestSuiteBuilder.using(new TestEnumSetGenerator() {\n",
        "172": "          @Override protected Set<AnEnum> create(AnEnum[] elements) {\n",
        "173": "            AnEnum[] otherElements = new AnEnum[elements.length - 1];\n",
        "174": "            System.arraycopy(\n",
        "175": "                elements, 1, otherElements, 0, otherElements.length);\n",
        "176": "            return Sets.immutableEnumSet(elements[0], otherElements);\n",
        "177": "          }\n",
        "178": "        })\n",
        "179": "        .named(\"Sets.immutableEnumSet\")\n",
        "180": "        .withFeatures(CollectionSize.ONE, CollectionSize.SEVERAL,\n",
        "181": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "182": "        .createTestSuite());\n",
        "212": "    return SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "213": "          @Override public Set<String> create(String[] elements) {\n",
        "214": "            Set<String> unfiltered = Sets.newLinkedHashSet();\n",
        "215": "            unfiltered.add(\"yyy\");\n",
        "216": "            Collections.addAll(unfiltered, elements);\n",
        "217": "            unfiltered.add(\"zzz\");\n",
        "218": "            return Sets.filter(unfiltered, Collections2Test.NOT_YYY_ZZZ);\n",
        "219": "          }\n",
        "220": "        })\n",
        "234": "    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "235": "          @Override public Set<String> create(String[] elements) {\n",
        "236": "            Set<String> unfiltered = Sets.newLinkedHashSet();\n",
        "237": "            unfiltered.add(\"yyy\");\n",
        "238": "            unfiltered.addAll(ImmutableList.copyOf(elements));\n",
        "239": "            unfiltered.add(\"zzz\");\n",
        "240": "            return Sets.filter(unfiltered, Collections2Test.LENGTH_1);\n",
        "241": "          }\n",
        "242": "        })\n",
        "243": "        .named(\"Sets.filter, no nulls\")\n",
        "244": "        .withFeatures(\n",
        "245": "            CollectionFeature.SUPPORTS_ADD,\n",
        "246": "            CollectionFeature.SUPPORTS_REMOVE,\n",
        "247": "            CollectionFeature.KNOWN_ORDER,\n",
        "248": "            CollectionSize.ANY,\n",
        "249": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "250": "        .createTestSuite());\n",
        "251": "    suite.addTest(NavigableSetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "252": "          @Override public NavigableSet<String> create(String[] elements) {\n",
        "253": "            NavigableSet<String> unfiltered = Sets.newTreeSet();\n",
        "254": "            unfiltered.add(\"yyy\");\n",
        "255": "            unfiltered.addAll(ImmutableList.copyOf(elements));\n",
        "256": "            unfiltered.add(\"zzz\");\n",
        "257": "            return Sets.filter(unfiltered, Collections2Test.LENGTH_1);\n",
        "258": "          }\n",
        "259": "\n",
        "260": "          @Override\n",
        "261": "          public List<String> order(List<String> insertionOrder) {\n",
        "262": "            return Ordering.natural().sortedCopy(insertionOrder);\n",
        "263": "          }\n",
        "264": "        })\n",
        "265": "        .named(\"Sets.filter[NavigableSet]\")\n",
        "266": "        .withFeatures(\n",
        "267": "            CollectionFeature.SUPPORTS_ADD,\n",
        "268": "            CollectionFeature.SUPPORTS_REMOVE,\n",
        "269": "            CollectionFeature.KNOWN_ORDER,\n",
        "270": "            CollectionSize.ANY,\n",
        "271": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "272": "        .createTestSuite());\n",
        "278": "    return SetTestSuiteBuilder.using(new TestStringSetGenerator() {\n",
        "279": "          @Override public Set<String> create(String[] elements) {\n",
        "280": "            Set<String> unfiltered = Sets.newLinkedHashSet();\n",
        "281": "            unfiltered.add(\"yyy\");\n",
        "282": "            unfiltered.addAll(ImmutableList.copyOf(elements));\n",
        "283": "            unfiltered.add(\"zzz\");\n",
        "284": "            unfiltered.add(\"abc\");\n",
        "285": "            return Sets.filter(\n",
        "286": "                Sets.filter(unfiltered, Collections2Test.LENGTH_1),\n",
        "287": "                Collections2Test.NOT_YYY_ZZZ);\n",
        "288": "          }\n",
        "289": "        })\n",
        "300": "  private enum SomeEnum { A, B, C, D }\n",
        "309": "    } catch (UnsupportedOperationException expected) {}\n",
        "313": "    } catch (UnsupportedOperationException expected) {}\n",
        "327": "    ImmutableSet<SomeEnum> none\n",
        "328": "        = Sets.immutableEnumSet(MinimalIterable.<SomeEnum>of());\n",
        "331": "    ImmutableSet<SomeEnum> one\n",
        "332": "        = Sets.immutableEnumSet(MinimalIterable.of(SomeEnum.B));\n",
        "341": "    ImmutableSet<SomeEnum> original =\n",
        "342": "        Sets.immutableEnumSet(SomeEnum.A, SomeEnum.B);\n",
        "345": "    ObjectInputStream in =\n",
        "346": "        new ObjectInputStream(new ByteArrayInputStream(serializedForm));\n",
        "384": "    EnumSet<SomeEnum> copy =\n",
        "385": "        newEnumSet(Collections.<SomeEnum>emptySet(), SomeEnum.class);\n",
        "460": "    LinkedHashSet<Integer> set = Sets.newLinkedHashSet(new Iterable<Integer>()\n",
        "461": "    {\n",
        "462": "      @Override\n",
        "463": "      public Iterator<Integer> iterator() {\n",
        "464": "        return LONGER_LIST.iterator();\n",
        "465": "      }\n",
        "466": "    });\n",
        "498": "    assertThat(set).containsExactly(\n",
        "499": "        new LegacyComparable(\"bar\"), new LegacyComparable(\"foo\")).inOrder();\n",
        "513": "    Iterable<Derived> iterable =\n",
        "514": "        Arrays.asList(new Derived(\"foo\"), new Derived(\"bar\"));\n",
        "516": "    assertThat(set).containsExactly(\n",
        "517": "        new Derived(\"bar\"), new Derived(\"foo\")).inOrder();\n",
        "524": "    assertThat(set).containsExactly(\n",
        "525": "        new LegacyComparable(\"bar\"), new LegacyComparable(\"foo\")).inOrder();\n",
        "603": "    } catch (IllegalArgumentException expected) {}\n",
        "622": "    Set<Integer> set =\n",
        "623": "        Sets.newSetFromMap(new LinkedHashMap<Integer, Boolean>());\n",
        "635": "    } catch (IllegalArgumentException expected) {}\n",
        "641": "  /**\n",
        "642": "   * The 0-ary cartesian product is a single empty list.\n",
        "643": "   */\n",
        "649": "  /**\n",
        "650": "   * A unary cartesian product is one list of size 1 for each element in the\n",
        "651": "   * input set.\n",
        "652": "   */\n",
        "690": "        .containsExactly(list(1, 2), list(1, 3)).inOrder();\n",
        "696": "        .containsExactly(list(1, 3), list(1, 4), list(2, 3), list(2, 4)).inOrder();\n",
        "701": "    assertThat(Sets.cartesianProduct(set(0, 1), set(0, 1), set(0, 1))).containsExactly(\n",
        "702": "        list(0, 0, 0), list(0, 0, 1), list(0, 1, 0), list(0, 1, 1),\n",
        "703": "        list(1, 0, 0), list(1, 0, 1), list(1, 1, 0), list(1, 1, 1)).inOrder();\n",
        "727": "        .containsExactly(exp1, exp2, exp3, exp4).inOrder();\n",
        "759": "    checkHashCode(Sets.cartesianProduct(\n",
        "760": "        set(1, num), set(2, num - 1), set(3, num + 1)));\n",
        "763": "    checkHashCode(Sets.cartesianProduct(\n",
        "764": "        set(1, num, num + 1), set(2), set(3, num + 2), set(4, 5, 6, 7, 8)));\n",
        "843": "      @Override protected Iterator<Set<Integer>> newTargetIterator() {\n",
        "860": "      @Override protected Iterator<Set<Integer>> newTargetIterator() {\n",
        "872": "    assertPowerSetSize(1 << 30,\n",
        "873": "        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n",
        "874": "        'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '1', '2',\n",
        "875": "        '3', '4');\n",
        "897": "    ImmutableList<Integer> allElements = ImmutableList.of(4233352, 3284593,\n",
        "898": "        3794208, 3849533, 4013967, 2902658, 1886275, 2131109, 985872, 1843868);\n",
        "914": "   * Test that a hash code miscomputed by \"input.hashCode() * tooFarValue / 2\"\n",
        "915": "   * is correct under our {@code hashCode} implementation.\n",
        "933": "    Set<Set<Set<Set<Set<Set<Object>>>>>> sixtyFiveThousandish =\n",
        "934": "        powerSet(sixteen);\n",
        "937": "    assertTrue(powerSet(makeSetOfZeroToTwentyNine())\n",
        "938": "        .contains(makeSetOfZeroToTwentyNine()));\n",
        "939": "    assertFalse(powerSet(makeSetOfZeroToTwentyNine())\n",
        "940": "        .contains(ImmutableSet.of(30)));\n",
        "962": "      @Override public int hashCode() {\n",
        "1016": "   * Utility method to verify that the given LinkedHashSet is equal to and\n",
        "1017": "   * hashes identically to a set constructed with the elements in the given\n",
        "1018": "   * collection.  Also verifies that the ordering in the set is the same\n",
        "1019": "   * as the ordering of the given contents.\n",
        "1023": "    assertEquals(\"LinkedHashSet should have preserved order for iteration\",\n",
        "1024": "        new ArrayList<E>(set), new ArrayList<E>(contents));\n",
        "1029": "   * Utility method to verify that the given SortedSet is equal to and\n",
        "1030": "   * hashes identically to a set constructed with the elements in the\n",
        "1031": "   * given iterable.  Also verifies that the comparator is the same as the\n",
        "1032": "   * given comparator.\n",
        "1035": "      SortedSet<E> set, Iterable<E> iterable,\n",
        "1036": "      @Nullable Comparator<E> comparator) {\n",
        "1042": "   * Utility method that verifies that the given set is equal to and hashes\n",
        "1043": "   * identically to a set constructed with the elements in the given iterable.\n",
        "1058": "  /**\n",
        "1059": "   * Simple base class to verify that we handle generics correctly.\n",
        "1060": "   */\n",
        "1068": "    @Override public int hashCode() { // delegate to 's'\n",
        "1072": "    @Override public boolean equals(Object other) {\n",
        "1090": "  /**\n",
        "1091": "   * Simple derived class to verify that we handle generics correctly.\n",
        "1092": "   */\n"
    }
}