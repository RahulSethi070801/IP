{
    "addition": {
        "27": " * A {@code Multimap} that can hold duplicate key-value pairs and that maintains the insertion\n",
        "28": " * ordering of values for a given key. See the {@link Multimap} documentation for information common\n",
        "29": " * to all multimaps.\n",
        "31": " * <p>The {@link #get}, {@link #removeAll}, and {@link #replaceValues} methods each return a {@link\n",
        "32": " * List} of values. Though the method signature doesn't say so explicitly, the map returned by\n",
        "33": " * {@link #asMap} has {@code List} values.\n",
        "36": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap\"> {@code\n",
        "37": " * Multimap}</a>.\n",
        "47": "   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,\n",
        "48": "   * this method returns a {@link List}, instead of the {@link java.util.Collection} specified in\n",
        "49": "   * the {@link Multimap} interface.\n",
        "57": "   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,\n",
        "58": "   * this method returns a {@link List}, instead of the {@link java.util.Collection} specified in\n",
        "59": "   * the {@link Multimap} interface.\n",
        "68": "   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,\n",
        "69": "   * this method returns a {@link List}, instead of the {@link java.util.Collection} specified in\n",
        "70": "   * the {@link Multimap} interface.\n",
        "79": "   * <p><b>Note:</b> The returned map's values are guaranteed to be of type {@link List}. To obtain\n",
        "80": "   * this map with the more specific generic type {@code Map<K, List<V>>}, call {@link\n",
        "81": "   * Multimaps#asMap(ListMultimap)} instead.\n",
        "89": "   * <p>Two {@code ListMultimap} instances are equal if, for each key, they contain the same values\n",
        "90": "   * in the same order. If the value orderings disagree, the multimaps will not be considered equal.\n",
        "92": "   * <p>An empty {@code ListMultimap} is equal to any other empty {@code Multimap}, including an\n",
        "93": "   * empty {@code SetMultimap}.\n"
    },
    "removed": {
        "27": " * A {@code Multimap} that can hold duplicate key-value pairs and that maintains\n",
        "28": " * the insertion ordering of values for a given key. See the {@link Multimap}\n",
        "29": " * documentation for information common to all multimaps.\n",
        "31": " * <p>The {@link #get}, {@link #removeAll}, and {@link #replaceValues} methods\n",
        "32": " * each return a {@link List} of values. Though the method signature doesn't say\n",
        "33": " * so explicitly, the map returned by {@link #asMap} has {@code List} values.\n",
        "36": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap\">\n",
        "37": " * {@code Multimap}</a>.\n",
        "47": "   * <p>Because the values for a given key may have duplicates and follow the\n",
        "48": "   * insertion ordering, this method returns a {@link List}, instead of the\n",
        "49": "   * {@link java.util.Collection} specified in the {@link Multimap} interface.\n",
        "57": "   * <p>Because the values for a given key may have duplicates and follow the\n",
        "58": "   * insertion ordering, this method returns a {@link List}, instead of the\n",
        "59": "   * {@link java.util.Collection} specified in the {@link Multimap} interface.\n",
        "68": "   * <p>Because the values for a given key may have duplicates and follow the\n",
        "69": "   * insertion ordering, this method returns a {@link List}, instead of the\n",
        "70": "   * {@link java.util.Collection} specified in the {@link Multimap} interface.\n",
        "79": "   * <p><b>Note:</b> The returned map's values are guaranteed to be of type\n",
        "80": "   * {@link List}. To obtain this map with the more specific generic type\n",
        "81": "   * {@code Map<K, List<V>>}, call {@link Multimaps#asMap(ListMultimap)}\n",
        "82": "   * instead.\n",
        "90": "   * <p>Two {@code ListMultimap} instances are equal if, for each key, they\n",
        "91": "   * contain the same values in the same order. If the value orderings disagree,\n",
        "92": "   * the multimaps will not be considered equal.\n",
        "94": "   * <p>An empty {@code ListMultimap} is equal to any other empty {@code\n",
        "95": "   * Multimap}, including an empty {@code SetMultimap}.\n"
    }
}