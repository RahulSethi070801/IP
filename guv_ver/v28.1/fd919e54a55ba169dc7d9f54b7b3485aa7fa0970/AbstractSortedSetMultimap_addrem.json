{
    "addition": {
        "29": " * Basic implementation of the {@link SortedSetMultimap} interface. It's a wrapper around {@link\n",
        "30": " * AbstractMapBasedMultimap} that converts the returned collections into sorted sets. The {@link\n",
        "31": " * #createCollection} method must return a {@code SortedSet}.\n",
        "41": "   * @param map place to store the mapping from each key to its corresponding values\n",
        "63": "   * Returns a collection view of all values associated with a key. If no mappings in the multimap\n",
        "64": "   * have the provided key, an empty collection is returned.\n",
        "66": "   * <p>Changes to the returned collection will update the underlying multimap, and vice versa.\n",
        "68": "   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method\n",
        "69": "   * returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link\n",
        "70": "   * Multimap} interface.\n",
        "78": "   * Removes all values associated with a given key. The returned collection is immutable.\n",
        "80": "   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method\n",
        "81": "   * returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link\n",
        "82": "   * Multimap} interface.\n",
        "91": "   * Stores a collection of values with the same key, replacing any existing values for that key.\n",
        "92": "   * The returned collection is immutable.\n",
        "94": "   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method\n",
        "95": "   * returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link\n",
        "96": "   * Multimap} interface.\n",
        "107": "   * Returns a map view that associates each key with the corresponding values in the multimap.\n",
        "108": "   * Changes to the returned map, such as element removal, will update the underlying multimap. The\n",
        "109": "   * map does not support {@code setValue} on its entries, {@code put}, or {@code putAll}.\n",
        "111": "   * <p>When passed a key that is present in the map, {@code asMap().get(Object)} has the same\n",
        "112": "   * behavior as {@link #get}, returning a live collection. When passed a key that is not present,\n",
        "113": "   * however, {@code asMap().get(Object)} returns {@code null} instead of an empty collection.\n",
        "115": "   * <p>Though the method signature doesn't say so explicitly, the returned map has {@link\n",
        "116": "   * SortedSet} values.\n",
        "126": "   * <p>Consequently, the values do not follow their natural ordering or the ordering of the value\n",
        "127": "   * comparator.\n"
    },
    "removed": {
        "29": " * Basic implementation of the {@link SortedSetMultimap} interface. It's a\n",
        "30": " * wrapper around {@link AbstractMapBasedMultimap} that converts the returned\n",
        "31": " * collections into sorted sets. The {@link #createCollection} method\n",
        "32": " * must return a {@code SortedSet}.\n",
        "42": "   * @param map place to store the mapping from each key to its corresponding\n",
        "43": "   *     values\n",
        "65": "   * Returns a collection view of all values associated with a key. If no\n",
        "66": "   * mappings in the multimap have the provided key, an empty collection is\n",
        "67": "   * returned.\n",
        "69": "   * <p>Changes to the returned collection will update the underlying multimap,\n",
        "70": "   * and vice versa.\n",
        "72": "   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given\n",
        "73": "   * key, this method returns a {@link SortedSet}, instead of the\n",
        "74": "   * {@link Collection} specified in the {@link Multimap} interface.\n",
        "82": "   * Removes all values associated with a given key. The returned collection is\n",
        "83": "   * immutable.\n",
        "85": "   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given\n",
        "86": "   * key, this method returns a {@link SortedSet}, instead of the\n",
        "87": "   * {@link Collection} specified in the {@link Multimap} interface.\n",
        "96": "   * Stores a collection of values with the same key, replacing any existing\n",
        "97": "   * values for that key. The returned collection is immutable.\n",
        "99": "   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given\n",
        "100": "   * key, this method returns a {@link SortedSet}, instead of the\n",
        "101": "   * {@link Collection} specified in the {@link Multimap} interface.\n",
        "112": "   * Returns a map view that associates each key with the corresponding values\n",
        "113": "   * in the multimap. Changes to the returned map, such as element removal, will\n",
        "114": "   * update the underlying multimap. The map does not support {@code setValue}\n",
        "115": "   * on its entries, {@code put}, or {@code putAll}.\n",
        "117": "   * <p>When passed a key that is present in the map, {@code\n",
        "118": "   * asMap().get(Object)} has the same behavior as {@link #get}, returning a\n",
        "119": "   * live collection. When passed a key that is not present, however, {@code\n",
        "120": "   * asMap().get(Object)} returns {@code null} instead of an empty collection.\n",
        "122": "   * <p>Though the method signature doesn't say so explicitly, the returned map\n",
        "123": "   * has {@link SortedSet} values.\n",
        "133": "   * Consequently, the values do not follow their natural ordering or the\n",
        "134": "   * ordering of the value comparator.\n"
    }
}