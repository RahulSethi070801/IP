{
    "addition": {
        "64": "    suite.addTest(\n",
        "65": "        MapTestSuiteBuilder.using(new ImmutableEnumMapGenerator())\n",
        "66": "            .named(\"Maps.immutableEnumMap\")\n",
        "67": "            .withFeatures(CollectionSize.ANY, SERIALIZABLE, ALLOWS_NULL_QUERIES)\n",
        "68": "            .createTestSuite());\n",
        "74": "    Map<AnEnum, AnEnum> map =\n",
        "75": "        Maps.asMap(\n",
        "76": "            ImmutableSet.of(AnEnum.A),\n",
        "77": "            new Function<AnEnum, AnEnum>() {\n",
        "78": "              boolean used = false;\n",
        "80": "              @Override\n",
        "81": "              public AnEnum apply(AnEnum ae) {\n",
        "82": "                checkState(!used, \"should not be applied more than once\");\n",
        "83": "                used = true;\n",
        "84": "                return ae;\n",
        "85": "              }\n",
        "86": "            });\n",
        "97": "    ImmutableMap<AnEnum, String> map =\n",
        "98": "        Maps.immutableEnumMap(ImmutableMap.of(AnEnum.C, \"c\", AnEnum.A, \"a\", AnEnum.E, \"e\"));\n",
        "100": "    assertThat(map.entrySet())\n",
        "101": "        .containsExactly(\n",
        "102": "            Helpers.mapEntry(AnEnum.A, \"a\"),\n",
        "103": "            Helpers.mapEntry(AnEnum.C, \"c\"),\n",
        "104": "            Helpers.mapEntry(AnEnum.E, \"e\"))\n",
        "105": "        .inOrder();\n"
    },
    "removed": {
        "64": "    suite.addTest(MapTestSuiteBuilder.using(new ImmutableEnumMapGenerator())\n",
        "65": "      .named(\"Maps.immutableEnumMap\")\n",
        "66": "      .withFeatures(CollectionSize.ANY,\n",
        "67": "          SERIALIZABLE,\n",
        "68": "          ALLOWS_NULL_QUERIES)\n",
        "69": "      .createTestSuite());\n",
        "75": "    Map<AnEnum, AnEnum> map = Maps.asMap(ImmutableSet.of(AnEnum.A), new Function<AnEnum, AnEnum>() {\n",
        "76": "      boolean used = false;\n",
        "78": "      @Override public AnEnum apply(AnEnum ae) {\n",
        "79": "        checkState(!used, \"should not be applied more than once\");\n",
        "80": "        used = true;\n",
        "81": "        return ae;\n",
        "82": "      }\n",
        "83": "    });\n",
        "94": "    ImmutableMap<AnEnum, String> map = Maps.immutableEnumMap(\n",
        "95": "        ImmutableMap.of(AnEnum.C, \"c\", AnEnum.A, \"a\", AnEnum.E, \"e\"));\n",
        "97": "    assertThat(map.entrySet()).containsExactly(\n",
        "98": "        Helpers.mapEntry(AnEnum.A, \"a\"),\n",
        "99": "        Helpers.mapEntry(AnEnum.C, \"c\"),\n",
        "100": "        Helpers.mapEntry(AnEnum.E, \"e\")).inOrder();\n"
    }
}