{
    "addition": {
        "32": " * A {@link Table} whose contents will never change, with many other important properties detailed\n",
        "33": " * at {@link ImmutableCollection}.\n",
        "36": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\"> immutable collections</a>.\n",
        "58": "   * <p>The {@link Table#cellSet()} iteration order of the provided table determines the iteration\n",
        "59": "   * ordering of all views in the returned table. Note that some views of the original table and the\n",
        "60": "   * copied table may have different iteration orders. For more control over the ordering, create a\n",
        "61": "   * {@link Builder} and call {@link Builder#orderRowsBy}, {@link Builder#orderColumnsBy}, and\n",
        "62": "   * {@link Builder#putAll}\n",
        "64": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "65": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "66": "   * undocumented and subject to change.\n",
        "97": "   * Verifies that {@code rowKey}, {@code columnKey} and {@code value} are non-null, and returns a\n",
        "98": "   * new entry with those values.\n",
        "105": "   * A builder for creating immutable table instances, especially {@code public static final} tables\n",
        "106": "   * (\"constant tables\"). Example:\n",
        "108": "   * <pre>{@code\n",
        "109": "   * static final ImmutableTable<Integer, Character, String> SPREADSHEET =\n",
        "110": "   *     new ImmutableTable.Builder<Integer, Character, String>()\n",
        "111": "   *         .put(1, 'A', \"foo\")\n",
        "112": "   *         .put(1, 'B', \"bar\")\n",
        "113": "   *         .put(2, 'A', \"baz\")\n",
        "114": "   *         .build();\n",
        "115": "   * }</pre>\n",
        "117": "   * <p>By default, the order in which cells are added to the builder determines the iteration\n",
        "118": "   * ordering of all views in the returned table, with {@link #putAll} following the {@link\n",
        "119": "   * Table#cellSet()} iteration order. However, if {@link #orderRowsBy} or {@link #orderColumnsBy}\n",
        "120": "   * is called, the views are sorted by the supplied comparators.\n",
        "122": "   * <p>For empty or single-cell immutable tables, {@link #of()} and {@link #of(Object, Object,\n",
        "123": "   * Object)} are even more convenient.\n",
        "125": "   * <p>Builder instances can be reused - it is safe to call {@link #build} multiple times to build\n",
        "126": "   * multiple tables in series. Each table is a superset of the tables created before it.\n",
        "136": "     * Creates a new builder. The returned builder is equivalent to the builder generated by {@link\n",
        "137": "     * ImmutableTable#builder}.\n",
        "141": "    /** Specifies the ordering of the generated table's rows. */\n",
        "148": "    /** Specifies the ordering of the generated table's columns. */\n",
        "156": "     * Associates the ({@code rowKey}, {@code columnKey}) pair with {@code value} in the built\n",
        "157": "     * table. Duplicate key pairs are not allowed and will cause {@link #build} to fail.\n",
        "166": "     * Adds the given {@code cell} to the table, making it immutable if necessary. Duplicate key\n",
        "167": "     * pairs are not allowed and will cause {@link #build} to fail.\n",
        "185": "     * Associates all of the given table's keys and values in the built table. Duplicate row key\n",
        "186": "     * column key pairs are not allowed, and will cause {@link #build} to fail.\n",
        "264": "   * <p>The value {@code Map<R, V>} instances in the returned map are {@link ImmutableMap} instances\n",
        "265": "   * as well.\n",
        "290": "   * <p>The value {@code Map<C, V>} instances in the returned map are {@link ImmutableMap} instances\n",
        "291": "   * as well.\n"
    },
    "removed": {
        "32": " * A {@link Table} whose contents will never change, with many other important\n",
        "33": " * properties detailed at {@link ImmutableCollection}.\n",
        "36": " * \"https://github.com/google/guava/wiki/ImmutableCollectionsExplained\">\n",
        "37": " * immutable collections</a>.\n",
        "59": "   * <p>The {@link Table#cellSet()} iteration order of the provided table\n",
        "60": "   * determines the iteration ordering of all views in the returned table. Note\n",
        "61": "   * that some views of the original table and the copied table may have\n",
        "62": "   * different iteration orders. For more control over the ordering, create a\n",
        "63": "   * {@link Builder} and call {@link Builder#orderRowsBy},\n",
        "64": "   * {@link Builder#orderColumnsBy}, and {@link Builder#putAll}\n",
        "66": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "67": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "68": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "99": "   * Verifies that {@code rowKey}, {@code columnKey} and {@code value} are\n",
        "100": "   * non-null, and returns a new entry with those values.\n",
        "107": "   * A builder for creating immutable table instances, especially {@code public\n",
        "108": "   * static final} tables (\"constant tables\"). Example: <pre>   {@code\n",
        "110": "   *   static final ImmutableTable<Integer, Character, String> SPREADSHEET =\n",
        "111": "   *       new ImmutableTable.Builder<Integer, Character, String>()\n",
        "112": "   *           .put(1, 'A', \"foo\")\n",
        "113": "   *           .put(1, 'B', \"bar\")\n",
        "114": "   *           .put(2, 'A', \"baz\")\n",
        "115": "   *           .build();}</pre>\n",
        "117": "   * <p>By default, the order in which cells are added to the builder determines\n",
        "118": "   * the iteration ordering of all views in the returned table, with {@link\n",
        "119": "   * #putAll} following the {@link Table#cellSet()} iteration order. However, if\n",
        "120": "   * {@link #orderRowsBy} or {@link #orderColumnsBy} is called, the views are\n",
        "121": "   * sorted by the supplied comparators.\n",
        "123": "   * For empty or single-cell immutable tables, {@link #of()} and\n",
        "124": "   * {@link #of(Object, Object, Object)} are even more convenient.\n",
        "126": "   * <p>Builder instances can be reused - it is safe to call {@link #build}\n",
        "127": "   * multiple times to build multiple tables in series. Each table is a superset\n",
        "128": "   * of the tables created before it.\n",
        "138": "     * Creates a new builder. The returned builder is equivalent to the builder\n",
        "139": "     * generated by {@link ImmutableTable#builder}.\n",
        "143": "    /**\n",
        "144": "     * Specifies the ordering of the generated table's rows.\n",
        "145": "     */\n",
        "152": "    /**\n",
        "153": "     * Specifies the ordering of the generated table's columns.\n",
        "154": "     */\n",
        "162": "     * Associates the ({@code rowKey}, {@code columnKey}) pair with {@code\n",
        "163": "     * value} in the built table. Duplicate key pairs are not allowed and will\n",
        "164": "     * cause {@link #build} to fail.\n",
        "173": "     * Adds the given {@code cell} to the table, making it immutable if\n",
        "174": "     * necessary. Duplicate key pairs are not allowed and will cause {@link\n",
        "175": "     * #build} to fail.\n",
        "193": "     * Associates all of the given table's keys and values in the built table.\n",
        "194": "     * Duplicate row key column key pairs are not allowed, and will cause\n",
        "195": "     * {@link #build} to fail.\n",
        "273": "   * <p>The value {@code Map<R, V>} instances in the returned map are\n",
        "274": "   * {@link ImmutableMap} instances as well.\n",
        "299": "   * <p>The value {@code Map<C, V>} instances in the returned map are\n",
        "300": "   * {@link ImmutableMap} instances as well.\n"
    }
}