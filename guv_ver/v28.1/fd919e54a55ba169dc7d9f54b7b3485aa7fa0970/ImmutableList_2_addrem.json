{
    "addition": {
        "64": "    return new RegularImmutableList<E>(ImmutableList.<E>nullCheckedList(e1, e2));\n",
        "68": "    return new RegularImmutableList<E>(ImmutableList.<E>nullCheckedList(e1, e2, e3));\n",
        "72": "    return new RegularImmutableList<E>(ImmutableList.<E>nullCheckedList(e1, e2, e3, e4));\n",
        "76": "    return new RegularImmutableList<E>(ImmutableList.<E>nullCheckedList(e1, e2, e3, e4, e5));\n",
        "80": "    return new RegularImmutableList<E>(ImmutableList.<E>nullCheckedList(e1, e2, e3, e4, e5, e6));\n",
        "83": "  public static <E> ImmutableList<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7) {\n",
        "85": "        ImmutableList.<E>nullCheckedList(e1, e2, e3, e4, e5, e6, e7));\n",
        "88": "  public static <E> ImmutableList<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8) {\n",
        "90": "        ImmutableList.<E>nullCheckedList(e1, e2, e3, e4, e5, e6, e7, e8));\n",
        "93": "  public static <E> ImmutableList<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9) {\n",
        "95": "        ImmutableList.<E>nullCheckedList(e1, e2, e3, e4, e5, e6, e7, e8, e9));\n",
        "100": "    return new RegularImmutableList<E>(\n",
        "101": "        ImmutableList.<E>nullCheckedList(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10));\n",
        "106": "    return new RegularImmutableList<E>(\n",
        "107": "        ImmutableList.<E>nullCheckedList(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11));\n",
        "111": "      E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10, E e11, E e12, E... others) {\n",
        "152": "  private static <E> ImmutableList<E> copyFromCollection(Collection<? extends E> collection) {\n",
        "180": "   * Views the array as an immutable list. The array must have only {@code E} elements.\n",
        "244": "  @Override\n",
        "245": "  public UnmodifiableIterator<E> iterator() {\n",
        "249": "  @Override\n",
        "250": "  public ImmutableList<E> subList(int fromIndex, int toIndex) {\n",
        "254": "  @Override\n",
        "255": "  public UnmodifiableListIterator<E> listIterator() {\n",
        "259": "  @Override\n",
        "260": "  public UnmodifiableListIterator<E> listIterator(int index) {\n",
        "269": "  @Override\n",
        "270": "  public ImmutableList<E> asList() {\n",
        "310": "    @Override\n",
        "311": "    public Builder<E> add(E element) {\n",
        "317": "    @Override\n",
        "318": "    public Builder<E> addAll(Iterable<? extends E> elements) {\n",
        "324": "    @Override\n",
        "325": "    public Builder<E> add(E... elements) {\n",
        "326": "      checkNotNull(elements); // for GWT\n",
        "332": "    @Override\n",
        "333": "    public Builder<E> addAll(Iterator<? extends E> elements) {\n",
        "345": "    @Override\n",
        "346": "    public ImmutableList<E> build() {\n"
    },
    "removed": {
        "64": "    return new RegularImmutableList<E>(\n",
        "65": "        ImmutableList.<E>nullCheckedList(e1, e2));\n",
        "69": "    return new RegularImmutableList<E>(\n",
        "70": "        ImmutableList.<E>nullCheckedList(e1, e2, e3));\n",
        "74": "    return new RegularImmutableList<E>(\n",
        "75": "        ImmutableList.<E>nullCheckedList(e1, e2, e3, e4));\n",
        "79": "    return new RegularImmutableList<E>(\n",
        "80": "        ImmutableList.<E>nullCheckedList(e1, e2, e3, e4, e5));\n",
        "84": "    return new RegularImmutableList<E>(\n",
        "85": "        ImmutableList.<E>nullCheckedList(e1, e2, e3, e4, e5, e6));\n",
        "88": "  public static <E> ImmutableList<E> of(\n",
        "89": "      E e1, E e2, E e3, E e4, E e5, E e6, E e7) {\n",
        "91": "         ImmutableList.<E>nullCheckedList(e1, e2, e3, e4, e5, e6, e7));\n",
        "94": "  public static <E> ImmutableList<E> of(\n",
        "95": "      E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8) {\n",
        "97": "         ImmutableList.<E>nullCheckedList(e1, e2, e3, e4, e5, e6, e7, e8));\n",
        "100": "  public static <E> ImmutableList<E> of(\n",
        "101": "      E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9) {\n",
        "103": "         ImmutableList.<E>nullCheckedList(e1, e2, e3, e4, e5, e6, e7, e8, e9));\n",
        "108": "    return new RegularImmutableList<E>(ImmutableList.<E>nullCheckedList(\n",
        "109": "        e1, e2, e3, e4, e5, e6, e7, e8, e9, e10));\n",
        "114": "    return new RegularImmutableList<E>(ImmutableList.<E>nullCheckedList(\n",
        "115": "        e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11));\n",
        "119": "      E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10, E e11,\n",
        "120": "      E e12, E... others) {\n",
        "161": "  private static <E> ImmutableList<E> copyFromCollection(\n",
        "162": "      Collection<? extends E> collection) {\n",
        "190": "   * Views the array as an immutable list.  The array must have only {@code E} elements.\n",
        "254": "  @Override public UnmodifiableIterator<E> iterator() {\n",
        "258": "  @Override public ImmutableList<E> subList(int fromIndex, int toIndex) {\n",
        "262": "  @Override public UnmodifiableListIterator<E> listIterator() {\n",
        "266": "  @Override public UnmodifiableListIterator<E> listIterator(int index) {\n",
        "275": "  @Override public ImmutableList<E> asList() {\n",
        "315": "    @Override public Builder<E> add(E element) {\n",
        "321": "    @Override public Builder<E> addAll(Iterable<? extends E> elements) {\n",
        "327": "    @Override public Builder<E> add(E... elements) {\n",
        "328": "      checkNotNull(elements);  // for GWT\n",
        "334": "    @Override public Builder<E> addAll(Iterator<? extends E> elements) {\n",
        "346": "    @Override public ImmutableList<E> build() {\n"
    }
}