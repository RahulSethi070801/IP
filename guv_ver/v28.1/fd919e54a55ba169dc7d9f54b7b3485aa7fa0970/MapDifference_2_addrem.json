{
    "addition": {
        "32": "   * Returns {@code true} if there are no differences between the two maps; that is, if the maps are\n",
        "33": "   * equal.\n",
        "38": "   * Returns an unmodifiable map containing the entries from the left map whose keys are not present\n",
        "39": "   * in the right map.\n",
        "44": "   * Returns an unmodifiable map containing the entries from the right map whose keys are not\n",
        "45": "   * present in the left map.\n",
        "50": "   * Returns an unmodifiable map containing the entries that appear in both maps; that is, the\n",
        "51": "   * intersection of the two maps.\n",
        "56": "   * Returns an unmodifiable map describing keys that appear in both maps, but with different\n",
        "57": "   * values.\n",
        "62": "   * Compares the specified object with this instance for equality. Returns {@code true} if the\n",
        "63": "   * given object is also a {@code MapDifference} and the values returned by the {@link\n",
        "64": "   * #entriesOnlyOnLeft()}, {@link #entriesOnlyOnRight()}, {@link #entriesInCommon()} and {@link\n",
        "71": "   * Returns the hash code for this instance. This is defined as the hash code of\n",
        "73": "   * <pre>{@code\n",
        "74": "   * Arrays.asList(entriesOnlyOnLeft(), entriesOnlyOnRight(),\n",
        "75": "   *     entriesInCommon(), entriesDiffering())\n",
        "76": "   * }</pre>\n",
        "82": "   * A difference between the mappings from two maps with the same key. The {@link #leftValue} and\n",
        "83": "   * {@link #rightValue} are not equal, and one but not both of them may be null.\n",
        "88": "    /** Returns the value from the left map (possibly null). */\n",
        "91": "    /** Returns the value from the right map (possibly null). */\n",
        "95": "     * Two instances are considered equal if their {@link #leftValue()} values are equal and their\n",
        "96": "     * {@link #rightValue()} values are also equal.\n",
        "102": "     * The hash code equals the value {@code Arrays.asList(leftValue(), rightValue()).hashCode()}.\n"
    },
    "removed": {
        "32": "   * Returns {@code true} if there are no differences between the two maps;\n",
        "33": "   * that is, if the maps are equal.\n",
        "38": "   * Returns an unmodifiable map containing the entries from the left map whose\n",
        "39": "   * keys are not present in the right map.\n",
        "44": "   * Returns an unmodifiable map containing the entries from the right map whose\n",
        "45": "   * keys are not present in the left map.\n",
        "50": "   * Returns an unmodifiable map containing the entries that appear in both\n",
        "51": "   * maps; that is, the intersection of the two maps.\n",
        "56": "   * Returns an unmodifiable map describing keys that appear in both maps, but\n",
        "57": "   * with different values.\n",
        "62": "   * Compares the specified object with this instance for equality. Returns\n",
        "63": "   * {@code true} if the given object is also a {@code MapDifference} and the\n",
        "64": "   * values returned by the {@link #entriesOnlyOnLeft()}, {@link\n",
        "65": "   * #entriesOnlyOnRight()}, {@link #entriesInCommon()} and {@link\n",
        "72": "   * Returns the hash code for this instance. This is defined as the hash code\n",
        "73": "   * of <pre>   {@code\n",
        "75": "   *   Arrays.asList(entriesOnlyOnLeft(), entriesOnlyOnRight(),\n",
        "76": "   *       entriesInCommon(), entriesDiffering())}</pre>\n",
        "82": "   * A difference between the mappings from two maps with the same key. The\n",
        "83": "   * {@link #leftValue} and {@link #rightValue} are not equal, and one but not\n",
        "84": "   * both of them may be null.\n",
        "89": "    /**\n",
        "90": "     * Returns the value from the left map (possibly null).\n",
        "91": "     */\n",
        "94": "    /**\n",
        "95": "     * Returns the value from the right map (possibly null).\n",
        "96": "     */\n",
        "100": "     * Two instances are considered equal if their {@link #leftValue()}\n",
        "101": "     * values are equal and their {@link #rightValue()} values are also equal.\n",
        "107": "     * The hash code equals the value\n",
        "108": "     * {@code Arrays.asList(leftValue(), rightValue()).hashCode()}.\n"
    }
}