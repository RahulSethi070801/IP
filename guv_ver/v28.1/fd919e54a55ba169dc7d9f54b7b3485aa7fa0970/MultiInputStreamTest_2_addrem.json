{
    "addition": {
        "50": "    ByteSource checker =\n",
        "51": "        new ByteSource() {\n",
        "52": "          @Override\n",
        "53": "          public InputStream openStream() throws IOException {\n",
        "54": "            if (counter[0]++ != 0) {\n",
        "55": "              throw new IllegalStateException(\"More than one source open\");\n",
        "56": "            }\n",
        "57": "            return new FilterInputStream(source.openStream()) {\n",
        "58": "              @Override\n",
        "59": "              public void close() throws IOException {\n",
        "60": "                super.close();\n",
        "61": "                counter[0]--;\n",
        "62": "              }\n",
        "63": "            };\n",
        "98": "    MultiInputStream multi =\n",
        "99": "        new MultiInputStream(\n",
        "100": "            Collections.singleton(\n",
        "101": "                    new ByteSource() {\n",
        "102": "                      @Override\n",
        "103": "                      public InputStream openStream() {\n",
        "104": "                        return new ByteArrayInputStream(newPreFilledByteArray(0, 50)) {\n",
        "105": "                          @Override\n",
        "106": "                          public long skip(long n) {\n",
        "107": "                            return 0;\n",
        "108": "                          }\n",
        "109": "                        };\n",
        "110": "                      }\n",
        "111": "                    })\n",
        "112": "                .iterator());\n"
    },
    "removed": {
        "50": "    ByteSource checker = new ByteSource() {\n",
        "51": "      @Override\n",
        "52": "      public InputStream openStream() throws IOException {\n",
        "53": "        if (counter[0]++ != 0) {\n",
        "54": "          throw new IllegalStateException(\"More than one source open\");\n",
        "55": "        }\n",
        "56": "        return new FilterInputStream(source.openStream()) {\n",
        "57": "          @Override public void close() throws IOException {\n",
        "58": "            super.close();\n",
        "59": "            counter[0]--;\n",
        "62": "      }\n",
        "63": "    };\n",
        "96": "    MultiInputStream multi = new MultiInputStream(\n",
        "97": "        Collections.singleton(new ByteSource() {\n",
        "98": "          @Override\n",
        "99": "          public InputStream openStream() {\n",
        "100": "            return new ByteArrayInputStream(newPreFilledByteArray(0, 50)) {\n",
        "101": "              @Override public long skip(long n) {\n",
        "102": "                return 0;\n",
        "103": "              }\n",
        "104": "            };\n",
        "105": "          }\n",
        "106": "        }).iterator());\n"
    }
}