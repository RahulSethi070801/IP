{
    "addition": {
        "88": "    MultisetTestSuiteBuilder.NoRecurse.NO_ENTRY_SET, // Cannot create entries with count > 1\n",
        "99": "  static void populateMultimapForGet(Multimap<Integer, String> multimap, String[] elements) {\n",
        "106": "  static void populateMultimapForKeySet(Multimap<String, Integer> multimap, String[] elements) {\n",
        "113": "  static void populateMultimapForValues(Multimap<Integer, String> multimap, String[] elements) {\n",
        "119": "  static void populateMultimapForKeys(Multimap<String, Integer> multimap, String[] elements) {\n",
        "126": "   * Implements {@code Multimap.put()} -- and no other methods -- for a {@code Map} by ignoring all\n",
        "127": "   * but the latest value for each key. This class exists only so that we can use {@link\n",
        "128": "   * MultimapsCollectionTest#populateMultimapForGet(Multimap, String[])} and similar methods to\n",
        "129": "   * populate a map to be passed to {@link Multimaps#forMap(Map)}. All tests should run against the\n",
        "130": "   * result of {@link #build()}.\n",
        "132": "  private static final class PopulatableMapAsMultimap<K, V> extends ForwardingMultimap<K, V> {\n",
        "140": "    @SuppressWarnings(\"unchecked\") // all methods throw immediately\n",
        "143": "      this.unusableDelegate =\n",
        "144": "          (SetMultimap<K, V>)\n",
        "145": "              newProxyInstance(\n",
        "146": "                  SetMultimap.class.getClassLoader(),\n",
        "147": "                  new Class<?>[] {SetMultimap.class},\n",
        "148": "                  new InvocationHandler() {\n",
        "149": "                    @Override\n",
        "150": "                    public Object invoke(Object proxy, Method method, Object[] args)\n",
        "151": "                        throws Throwable {\n",
        "152": "                      throw new UnsupportedOperationException();\n",
        "153": "                    }\n",
        "154": "                  });\n",
        "155": "    }\n",
        "156": "\n",
        "157": "    @Override\n",
        "158": "    protected Multimap<K, V> delegate() {\n",
        "162": "    @Override\n",
        "163": "    public boolean put(K key, V value) {\n",
        "205": "    public List<Entry<String, Integer>> order(List<Entry<String, Integer>> insertionOrder) {\n",
        "210": "  public abstract static class TestEntriesListGenerator extends TestEntriesGenerator\n",
        "212": "    @Override\n",
        "213": "    public List<Entry<String, Integer>> create(Object... elements) {\n",
        "218": "  private static final Predicate<Entry<Integer, String>> FILTER_GET_PREDICATE =\n",
        "219": "      new Predicate<Entry<Integer, String>>() {\n",
        "220": "        @Override\n",
        "221": "        public boolean apply(Entry<Integer, String> entry) {\n",
        "224": "      };\n",
        "226": "  private static final Predicate<Entry<String, Integer>> FILTER_KEYSET_PREDICATE =\n",
        "227": "      new Predicate<Entry<String, Integer>>() {\n",
        "228": "        @Override\n",
        "229": "        public boolean apply(Entry<String, Integer> entry) {\n",
        "230": "          return !\"badkey\".equals(entry.getKey()) && 55556 != entry.getValue();\n",
        "231": "        }\n",
        "232": "      };\n",
        "240": "    suite.addTest(\n",
        "241": "        ListMultimapTestSuiteBuilder.using(\n",
        "242": "                new TestStringListMultimapGenerator() {\n",
        "243": "                  @Override\n",
        "244": "                  protected ListMultimap<String, String> create(Entry<String, String>[] entries) {\n",
        "245": "                    ListMultimap<String, String> multimap =\n",
        "246": "                        Multimaps.synchronizedListMultimap(\n",
        "247": "                            ArrayListMultimap.<String, String>create());\n",
        "248": "                    for (Entry<String, String> entry : entries) {\n",
        "249": "                      multimap.put(entry.getKey(), entry.getValue());\n",
        "250": "                    }\n",
        "251": "                    return multimap;\n",
        "252": "                  }\n",
        "253": "                })\n",
        "254": "            .named(\"synchronized ArrayListMultimap\")\n",
        "255": "            .withFeatures(\n",
        "256": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "257": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "258": "                MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "259": "                MapFeature.GENERAL_PURPOSE,\n",
        "260": "                MapFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,\n",
        "261": "                CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "262": "                CollectionSize.ANY)\n",
        "263": "            .createTestSuite());\n",
        "264": "\n",
        "265": "    suite.addTest(\n",
        "266": "        SetTestSuiteBuilder.using(\n",
        "267": "                new TestStringSetGenerator() {\n",
        "268": "                  @Override\n",
        "269": "                  protected Set<String> create(String[] elements) {\n",
        "270": "                    PopulatableMapAsMultimap<Integer, String> multimap =\n",
        "271": "                        PopulatableMapAsMultimap.create();\n",
        "272": "                    populateMultimapForGet(multimap, elements);\n",
        "273": "                    return multimap.build().get(3);\n",
        "274": "                  }\n",
        "275": "                })\n",
        "276": "            .named(\"Multimaps.forMap.get\")\n",
        "277": "            .withFeatures(FOR_MAP_FEATURES_ONE)\n",
        "278": "            .createTestSuite());\n",
        "279": "\n",
        "280": "    suite.addTest(\n",
        "281": "        SetTestSuiteBuilder.using(\n",
        "282": "                new TestStringSetGenerator() {\n",
        "283": "                  @Override\n",
        "284": "                  protected Set<String> create(String[] elements) {\n",
        "285": "                    PopulatableMapAsMultimap<String, Integer> multimap =\n",
        "286": "                        PopulatableMapAsMultimap.create();\n",
        "287": "                    populateMultimapForKeySet(multimap, elements);\n",
        "288": "                    return multimap.build().keySet();\n",
        "289": "                  }\n",
        "290": "                })\n",
        "291": "            .named(\"Multimaps.forMap.keySet\")\n",
        "292": "            .withFeatures(FOR_MAP_FEATURES_ANY)\n",
        "293": "            .createTestSuite());\n",
        "297": "    suite.addTest(\n",
        "298": "        MultisetTestSuiteBuilder.using(\n",
        "299": "                new TestStringMultisetGenerator() {\n",
        "300": "                  @Override\n",
        "301": "                  protected Multiset<String> create(String[] elements) {\n",
        "302": "                    PopulatableMapAsMultimap<String, Integer> multimap =\n",
        "303": "                        PopulatableMapAsMultimap.create();\n",
        "304": "                    populateMultimapForKeys(multimap, elements);\n",
        "305": "                    return multimap.build().keys();\n",
        "306": "                  }\n",
        "307": "                })\n",
        "308": "            .named(\"Multimaps.forMap.keys\")\n",
        "309": "            .withFeatures(FOR_MAP_FEATURES_ANY)\n",
        "310": "            .suppressing(getCountDuplicateInitializingMethods())\n",
        "311": "            .suppressing(getSetCountDuplicateInitializingMethods())\n",
        "312": "            .suppressing(getIteratorDuplicateInitializingMethods())\n",
        "313": "            .suppressing(getRemoveDuplicateInitializingMethods())\n",
        "314": "            .suppressing(getForEachEntryDuplicateInitializingMethods())\n",
        "315": "            .createTestSuite());\n",
        "322": "  abstract static class TransformedMultimapGenerator<M extends Multimap<String, String>>\n",
        "384": "    static final Function<String, String> FUNCTION =\n",
        "385": "        new Function<String, String>() {\n",
        "386": "          @Override\n",
        "387": "          public String apply(String value) {\n",
        "388": "            return Ascii.toLowerCase(value);\n",
        "389": "          }\n",
        "390": "        };\n",
        "394": "          @Override\n",
        "395": "          public String transformEntry(String key, String value) {\n",
        "396": "            return Ascii.toLowerCase(value);\n",
        "397": "          }\n",
        "398": "        };\n",
        "401": "  abstract static class TransformedListMultimapGenerator\n",
        "403": "      implements TestListMultimapGenerator<String, String> {}\n",
        "407": "    suite.addTest(\n",
        "408": "        MultimapTestSuiteBuilder.using(\n",
        "409": "                new TransformedMultimapGenerator<Multimap<String, String>>() {\n",
        "410": "                  @Override\n",
        "411": "                  Multimap<String, String> transform(Multimap<String, String> multimap) {\n",
        "412": "                    return Multimaps.transformValues(multimap, FUNCTION);\n",
        "413": "                  }\n",
        "414": "                })\n",
        "415": "            .named(\"Multimaps.transformValues[Multimap]\")\n",
        "416": "            .withFeatures(\n",
        "417": "                CollectionSize.ANY,\n",
        "418": "                MapFeature.SUPPORTS_REMOVE,\n",
        "419": "                CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "420": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "421": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "422": "            .createTestSuite());\n",
        "423": "    suite.addTest(\n",
        "424": "        MultimapTestSuiteBuilder.using(\n",
        "425": "                new TransformedMultimapGenerator<Multimap<String, String>>() {\n",
        "426": "                  @Override\n",
        "427": "                  Multimap<String, String> transform(Multimap<String, String> multimap) {\n",
        "428": "                    return Multimaps.transformEntries(multimap, ENTRY_TRANSFORMER);\n",
        "429": "                  }\n",
        "430": "                })\n",
        "431": "            .named(\"Multimaps.transformEntries[Multimap]\")\n",
        "432": "            .withFeatures(\n",
        "433": "                CollectionSize.ANY,\n",
        "434": "                MapFeature.SUPPORTS_REMOVE,\n",
        "435": "                CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "436": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "437": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "438": "            .createTestSuite());\n",
        "439": "    suite.addTest(\n",
        "440": "        ListMultimapTestSuiteBuilder.using(\n",
        "441": "                new TransformedListMultimapGenerator() {\n",
        "442": "                  @Override\n",
        "443": "                  ListMultimap<String, String> transform(Multimap<String, String> multimap) {\n",
        "444": "                    return Multimaps.transformValues(\n",
        "445": "                        (ListMultimap<String, String>) multimap, FUNCTION);\n",
        "446": "                  }\n",
        "447": "                })\n",
        "448": "            .named(\"Multimaps.transformValues[ListMultimap]\")\n",
        "449": "            .withFeatures(\n",
        "450": "                CollectionSize.ANY,\n",
        "451": "                MapFeature.SUPPORTS_REMOVE,\n",
        "452": "                CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "453": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "454": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "455": "            .createTestSuite());\n",
        "456": "    suite.addTest(\n",
        "457": "        ListMultimapTestSuiteBuilder.using(\n",
        "458": "                new TransformedListMultimapGenerator() {\n",
        "459": "                  @Override\n",
        "460": "                  ListMultimap<String, String> transform(Multimap<String, String> multimap) {\n",
        "461": "                    return Multimaps.transformEntries(\n",
        "462": "                        (ListMultimap<String, String>) multimap, ENTRY_TRANSFORMER);\n",
        "463": "                  }\n",
        "464": "                })\n",
        "465": "            .named(\"Multimaps.transformEntries[ListMultimap]\")\n",
        "466": "            .withFeatures(\n",
        "467": "                CollectionSize.ANY,\n",
        "468": "                MapFeature.SUPPORTS_REMOVE,\n",
        "469": "                CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "470": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "471": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "472": "            .createTestSuite());\n",
        "479": "  abstract static class TestFilteredMultimapGenerator<M extends Multimap<String, Integer>>\n",
        "524": "  abstract static class FilteredSetMultimapGenerator\n",
        "547": "  abstract static class FilteredListMultimapGenerator\n",
        "572": "    suite.addTest(\n",
        "573": "        SetMultimapTestSuiteBuilder.using(\n",
        "574": "                new FilteredSetMultimapGenerator() {\n",
        "575": "                  @Override\n",
        "576": "                  SetMultimap<String, Integer> filter(SetMultimap<String, Integer> multimap) {\n",
        "577": "                    multimap.put(\"foo\", 17);\n",
        "578": "                    multimap.put(\"bar\", 32);\n",
        "579": "                    multimap.put(\"foo\", 16);\n",
        "580": "                    return Multimaps.filterKeys(\n",
        "581": "                        multimap, Predicates.not(Predicates.in(ImmutableSet.of(\"foo\", \"bar\"))));\n",
        "582": "                  }\n",
        "583": "                })\n",
        "584": "            .named(\"Multimaps.filterKeys[SetMultimap, Predicate]\")\n",
        "585": "            .withFeatures(\n",
        "586": "                CollectionSize.ANY,\n",
        "587": "                MultimapFeature.VALUE_COLLECTIONS_SUPPORT_ITERATOR_REMOVE,\n",
        "588": "                MapFeature.GENERAL_PURPOSE,\n",
        "589": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "590": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "591": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "592": "            .createTestSuite());\n",
        "593": "\n",
        "594": "    suite.addTest(\n",
        "595": "        ListMultimapTestSuiteBuilder.using(\n",
        "596": "                new FilteredListMultimapGenerator() {\n",
        "597": "                  @Override\n",
        "598": "                  ListMultimap<String, Integer> filter(ListMultimap<String, Integer> multimap) {\n",
        "599": "                    multimap.put(\"foo\", 17);\n",
        "600": "                    multimap.put(\"bar\", 32);\n",
        "601": "                    multimap.put(\"foo\", 16);\n",
        "602": "                    return Multimaps.filterKeys(\n",
        "603": "                        multimap, Predicates.not(Predicates.in(ImmutableSet.of(\"foo\", \"bar\"))));\n",
        "604": "                  }\n",
        "605": "                })\n",
        "606": "            .named(\"Multimaps.filterKeys[ListMultimap, Predicate]\")\n",
        "607": "            .withFeatures(\n",
        "608": "                CollectionSize.ANY,\n",
        "609": "                MultimapFeature.VALUE_COLLECTIONS_SUPPORT_ITERATOR_REMOVE,\n",
        "610": "                MapFeature.GENERAL_PURPOSE,\n",
        "611": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "612": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "613": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "614": "            .createTestSuite());\n",
        "615": "    suite.addTest(\n",
        "616": "        ListMultimapTestSuiteBuilder.using(\n",
        "617": "                new FilteredListMultimapGenerator() {\n",
        "618": "                  @Override\n",
        "619": "                  ListMultimap<String, Integer> filter(ListMultimap<String, Integer> multimap) {\n",
        "620": "                    multimap.put(\"foo\", 17);\n",
        "621": "                    multimap.put(\"bar\", 32);\n",
        "622": "                    multimap.put(\"foo\", 16);\n",
        "623": "                    multimap =\n",
        "624": "                        Multimaps.filterKeys(multimap, Predicates.not(Predicates.equalTo(\"foo\")));\n",
        "625": "                    return Multimaps.filterKeys(\n",
        "626": "                        multimap, Predicates.not(Predicates.equalTo(\"bar\")));\n",
        "627": "                  }\n",
        "628": "                })\n",
        "629": "            .named(\"Multimaps.filterKeys[Multimaps.filterKeys[ListMultimap], Predicate]\")\n",
        "630": "            .withFeatures(\n",
        "631": "                CollectionSize.ANY,\n",
        "632": "                MultimapFeature.VALUE_COLLECTIONS_SUPPORT_ITERATOR_REMOVE,\n",
        "633": "                MapFeature.GENERAL_PURPOSE,\n",
        "634": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "635": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "636": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "637": "            .createTestSuite());\n",
        "638": "    suite.addTest(\n",
        "639": "        SetMultimapTestSuiteBuilder.using(\n",
        "640": "                new FilteredSetMultimapGenerator() {\n",
        "641": "                  @Override\n",
        "642": "                  SetMultimap<String, Integer> filter(SetMultimap<String, Integer> multimap) {\n",
        "643": "                    multimap.put(\"one\", 314);\n",
        "644": "                    multimap.put(\"two\", 159);\n",
        "645": "                    multimap.put(\"one\", 265);\n",
        "646": "                    return Multimaps.filterValues(\n",
        "647": "                        multimap, Predicates.not(Predicates.in(ImmutableSet.of(314, 159, 265))));\n",
        "648": "                  }\n",
        "649": "                })\n",
        "650": "            .named(\"Multimaps.filterValues[SetMultimap, Predicate]\")\n",
        "651": "            .withFeatures(\n",
        "652": "                CollectionSize.ANY,\n",
        "653": "                MapFeature.GENERAL_PURPOSE,\n",
        "654": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "655": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "656": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "657": "            .createTestSuite());\n",
        "658": "    suite.addTest(\n",
        "659": "        SetMultimapTestSuiteBuilder.using(\n",
        "660": "                new FilteredSetMultimapGenerator() {\n",
        "661": "                  @Override\n",
        "662": "                  SetMultimap<String, Integer> filter(SetMultimap<String, Integer> multimap) {\n",
        "663": "                    ImmutableSetMultimap<String, Integer> badEntries =\n",
        "664": "                        ImmutableSetMultimap.of(\"foo\", 314, \"one\", 159, \"two\", 265, \"bar\", 358);\n",
        "665": "                    multimap.putAll(badEntries);\n",
        "666": "                    return Multimaps.filterEntries(\n",
        "667": "                        multimap, Predicates.not(Predicates.in(badEntries.entries())));\n",
        "668": "                  }\n",
        "669": "                })\n",
        "670": "            .named(\"Multimaps.filterEntries[SetMultimap, Predicate]\")\n",
        "671": "            .withFeatures(\n",
        "672": "                CollectionSize.ANY,\n",
        "673": "                MapFeature.GENERAL_PURPOSE,\n",
        "674": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "675": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "676": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "677": "            .createTestSuite());\n",
        "678": "    suite.addTest(\n",
        "679": "        SetMultimapTestSuiteBuilder.using(\n",
        "680": "                new FilteredSetMultimapGenerator() {\n",
        "681": "                  @Override\n",
        "682": "                  SetMultimap<String, Integer> filter(SetMultimap<String, Integer> multimap) {\n",
        "683": "                    ImmutableSetMultimap<String, Integer> badEntries =\n",
        "684": "                        ImmutableSetMultimap.of(\"foo\", 314, \"one\", 159, \"two\", 265, \"bar\", 358);\n",
        "685": "                    multimap.putAll(badEntries);\n",
        "686": "                    multimap =\n",
        "687": "                        Multimaps.filterKeys(\n",
        "688": "                            multimap, Predicates.not(Predicates.in(ImmutableSet.of(\"foo\", \"bar\"))));\n",
        "689": "                    return Multimaps.filterEntries(\n",
        "690": "                        multimap, Predicates.not(Predicates.in(badEntries.entries())));\n",
        "691": "                  }\n",
        "692": "                })\n",
        "693": "            .named(\"Multimaps.filterEntries[Multimaps.filterKeys[SetMultimap]]\")\n",
        "694": "            .withFeatures(\n",
        "695": "                CollectionSize.ANY,\n",
        "696": "                MapFeature.GENERAL_PURPOSE,\n",
        "697": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "698": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "699": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "700": "            .createTestSuite());\n",
        "701": "    suite.addTest(\n",
        "702": "        SetMultimapTestSuiteBuilder.using(\n",
        "703": "                new FilteredSetMultimapGenerator() {\n",
        "704": "                  @Override\n",
        "705": "                  SetMultimap<String, Integer> filter(SetMultimap<String, Integer> multimap) {\n",
        "706": "                    ImmutableSetMultimap<String, Integer> badEntries =\n",
        "707": "                        ImmutableSetMultimap.of(\"foo\", 314, \"one\", 159, \"two\", 265, \"bar\", 358);\n",
        "708": "                    multimap.putAll(badEntries);\n",
        "709": "                    multimap =\n",
        "710": "                        Multimaps.filterEntries(\n",
        "711": "                            multimap,\n",
        "712": "                            Predicates.not(\n",
        "713": "                                Predicates.in(ImmutableMap.of(\"one\", 159, \"two\", 265).entrySet())));\n",
        "714": "                    return Multimaps.filterKeys(\n",
        "715": "                        multimap, Predicates.not(Predicates.in(ImmutableSet.of(\"foo\", \"bar\"))));\n",
        "716": "                  }\n",
        "717": "                })\n",
        "718": "            .named(\"Multimaps.filterKeys[Multimaps.filterEntries[SetMultimap]]\")\n",
        "719": "            .withFeatures(\n",
        "720": "                CollectionSize.ANY,\n",
        "721": "                MapFeature.GENERAL_PURPOSE,\n",
        "722": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "723": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "724": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "725": "            .createTestSuite());\n",
        "726": "    suite.addTest(\n",
        "727": "        SetMultimapTestSuiteBuilder.using(\n",
        "728": "                new FilteredSetMultimapGenerator() {\n",
        "729": "                  @Override\n",
        "730": "                  SetMultimap<String, Integer> filter(SetMultimap<String, Integer> multimap) {\n",
        "731": "                    ImmutableSetMultimap<String, Integer> badEntries =\n",
        "732": "                        ImmutableSetMultimap.of(\"foo\", 314, \"bar\", 358);\n",
        "733": "                    multimap.putAll(badEntries);\n",
        "734": "                    multimap =\n",
        "735": "                        Multimaps.filterKeys(multimap, Predicates.not(Predicates.equalTo(\"foo\")));\n",
        "736": "                    multimap =\n",
        "737": "                        Multimaps.filterKeys(multimap, Predicates.not(Predicates.equalTo(\"bar\")));\n",
        "738": "                    return multimap;\n",
        "739": "                  }\n",
        "740": "                })\n",
        "741": "            .named(\"Multimaps.filterKeys[Multimaps.filterKeys[SetMultimap]]\")\n",
        "742": "            .withFeatures(\n",
        "743": "                CollectionSize.ANY,\n",
        "744": "                MultimapFeature.VALUE_COLLECTIONS_SUPPORT_ITERATOR_REMOVE,\n",
        "745": "                MapFeature.GENERAL_PURPOSE,\n",
        "746": "                MapFeature.ALLOWS_NULL_KEYS,\n",
        "747": "                MapFeature.ALLOWS_NULL_VALUES,\n",
        "748": "                MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "749": "            .createTestSuite());\n"
    },
    "removed": {
        "88": "    MultisetTestSuiteBuilder.NoRecurse.NO_ENTRY_SET,  // Cannot create entries with count > 1\n",
        "99": "  static void populateMultimapForGet(\n",
        "100": "      Multimap<Integer, String> multimap, String[] elements) {\n",
        "107": "  static void populateMultimapForKeySet(\n",
        "108": "      Multimap<String, Integer> multimap, String[] elements) {\n",
        "115": "  static void populateMultimapForValues(\n",
        "116": "      Multimap<Integer, String> multimap, String[] elements) {\n",
        "122": "  static void populateMultimapForKeys(\n",
        "123": "      Multimap<String, Integer> multimap, String[] elements) {\n",
        "130": "   * Implements {@code Multimap.put()} -- and no other methods -- for a {@code\n",
        "131": "   * Map} by ignoring all but the latest value for each key. This class exists\n",
        "132": "   * only so that we can use\n",
        "133": "   * {@link MultimapsCollectionTest#populateMultimapForGet(Multimap, String[])}\n",
        "134": "   * and similar methods to populate a map to be passed to\n",
        "135": "   * {@link Multimaps#forMap(Map)}. All tests should run against the result of\n",
        "136": "   * {@link #build()}.\n",
        "138": "  private static final class PopulatableMapAsMultimap<K, V>\n",
        "139": "      extends ForwardingMultimap<K, V> {\n",
        "147": "    @SuppressWarnings(\"unchecked\")  // all methods throw immediately\n",
        "150": "      this.unusableDelegate = (SetMultimap<K, V>) newProxyInstance(\n",
        "151": "          SetMultimap.class.getClassLoader(),\n",
        "152": "          new Class<?>[] {SetMultimap.class},\n",
        "153": "          new InvocationHandler() {\n",
        "154": "            @Override\n",
        "155": "            public Object invoke(Object proxy, Method method, Object[] args)\n",
        "156": "                throws Throwable {\n",
        "157": "              throw new UnsupportedOperationException();\n",
        "158": "            }\n",
        "159": "          });\n",
        "160": "    }\n",
        "161": "\n",
        "162": "    @Override protected Multimap<K, V> delegate() {\n",
        "166": "    @Override public boolean put(K key, V value) {\n",
        "208": "    public List<Entry<String, Integer>> order(\n",
        "209": "        List<Entry<String, Integer>> insertionOrder) {\n",
        "214": "  public abstract static class TestEntriesListGenerator\n",
        "215": "      extends TestEntriesGenerator\n",
        "217": "    @Override public List<Entry<String, Integer>> create(Object... elements) {\n",
        "222": "  private static final Predicate<Entry<Integer, String>> FILTER_GET_PREDICATE\n",
        "223": "      = new Predicate<Entry<Integer, String>>() {\n",
        "224": "        @Override public boolean apply(Entry<Integer, String> entry) {\n",
        "227": "    };\n",
        "229": "  private static final Predicate<Entry<String, Integer>> FILTER_KEYSET_PREDICATE\n",
        "230": "    = new Predicate<Entry<String, Integer>>() {\n",
        "231": "      @Override public boolean apply(Entry<String, Integer> entry) {\n",
        "232": "        return !\"badkey\".equals(entry.getKey()) && 55556 != entry.getValue();\n",
        "233": "      }\n",
        "234": "  };\n",
        "242": "    suite.addTest(ListMultimapTestSuiteBuilder.using(new TestStringListMultimapGenerator() {\n",
        "243": "        @Override\n",
        "244": "        protected ListMultimap<String, String> create(Entry<String, String>[] entries) {\n",
        "245": "          ListMultimap<String, String> multimap = Multimaps.synchronizedListMultimap(\n",
        "246": "              ArrayListMultimap.<String, String> create());\n",
        "247": "          for (Entry<String, String> entry : entries) {\n",
        "248": "            multimap.put(entry.getKey(), entry.getValue());\n",
        "249": "          }\n",
        "250": "          return multimap;\n",
        "251": "        }\n",
        "252": "      })\n",
        "253": "      .named(\"synchronized ArrayListMultimap\")\n",
        "254": "      .withFeatures(\n",
        "255": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "256": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "257": "          MapFeature.ALLOWS_ANY_NULL_QUERIES,\n",
        "258": "          MapFeature.GENERAL_PURPOSE,\n",
        "259": "          MapFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,\n",
        "260": "          CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "261": "          CollectionSize.ANY)\n",
        "262": "      .createTestSuite());\n",
        "263": "\n",
        "264": "    suite.addTest(SetTestSuiteBuilder.using(\n",
        "265": "        new TestStringSetGenerator() {\n",
        "266": "          @Override protected Set<String> create(String[] elements) {\n",
        "267": "            PopulatableMapAsMultimap<Integer, String> multimap\n",
        "268": "                = PopulatableMapAsMultimap.create();\n",
        "269": "            populateMultimapForGet(multimap, elements);\n",
        "270": "            return multimap.build().get(3);\n",
        "271": "          }\n",
        "272": "        })\n",
        "273": "        .named(\"Multimaps.forMap.get\")\n",
        "274": "        .withFeatures(FOR_MAP_FEATURES_ONE)\n",
        "275": "        .createTestSuite());\n",
        "276": "\n",
        "277": "    suite.addTest(SetTestSuiteBuilder.using(\n",
        "278": "        new TestStringSetGenerator() {\n",
        "279": "          @Override protected Set<String> create(String[] elements) {\n",
        "280": "            PopulatableMapAsMultimap<String, Integer> multimap\n",
        "281": "                = PopulatableMapAsMultimap.create();\n",
        "282": "            populateMultimapForKeySet(multimap, elements);\n",
        "283": "            return multimap.build().keySet();\n",
        "284": "          }\n",
        "285": "        })\n",
        "286": "        .named(\"Multimaps.forMap.keySet\")\n",
        "287": "        .withFeatures(FOR_MAP_FEATURES_ANY)\n",
        "288": "        .createTestSuite());\n",
        "292": "    suite.addTest(MultisetTestSuiteBuilder.using(\n",
        "293": "        new TestStringMultisetGenerator() {\n",
        "294": "          @Override protected Multiset<String> create(String[] elements) {\n",
        "295": "            PopulatableMapAsMultimap<String, Integer> multimap\n",
        "296": "                = PopulatableMapAsMultimap.create();\n",
        "297": "            populateMultimapForKeys(multimap, elements);\n",
        "298": "            return multimap.build().keys();\n",
        "299": "          }\n",
        "300": "        })\n",
        "301": "        .named(\"Multimaps.forMap.keys\")\n",
        "302": "        .withFeatures(FOR_MAP_FEATURES_ANY)\n",
        "303": "        .suppressing(getCountDuplicateInitializingMethods())\n",
        "304": "        .suppressing(getSetCountDuplicateInitializingMethods())\n",
        "305": "        .suppressing(getIteratorDuplicateInitializingMethods())\n",
        "306": "        .suppressing(getRemoveDuplicateInitializingMethods())\n",
        "307": "        .suppressing(getForEachEntryDuplicateInitializingMethods())\n",
        "308": "        .createTestSuite());\n",
        "315": "  static abstract class TransformedMultimapGenerator<M extends Multimap<String, String>>\n",
        "377": "    static final Function<String, String> FUNCTION = new Function<String, String>() {\n",
        "378": "      @Override\n",
        "379": "      public String apply(String value) {\n",
        "380": "        return Ascii.toLowerCase(value);\n",
        "381": "      }\n",
        "382": "    };\n",
        "386": "      @Override\n",
        "387": "      public String transformEntry(String key, String value) {\n",
        "388": "        return Ascii.toLowerCase(value);\n",
        "389": "      }\n",
        "390": "    };\n",
        "393": "  static abstract class TransformedListMultimapGenerator\n",
        "395": "      implements TestListMultimapGenerator<String, String> {\n",
        "396": "  }\n",
        "400": "    suite.addTest(MultimapTestSuiteBuilder.using(\n",
        "401": "        new TransformedMultimapGenerator<Multimap<String,String>>() {\n",
        "402": "          @Override\n",
        "403": "          Multimap<String, String> transform(Multimap<String, String> multimap) {\n",
        "404": "            return Multimaps.transformValues(multimap, FUNCTION);\n",
        "405": "          }\n",
        "406": "        })\n",
        "407": "        .named(\"Multimaps.transformValues[Multimap]\")\n",
        "408": "        .withFeatures(\n",
        "409": "            CollectionSize.ANY,\n",
        "410": "            MapFeature.SUPPORTS_REMOVE,\n",
        "411": "            CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "412": "            MapFeature.ALLOWS_NULL_KEYS,\n",
        "413": "            MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "414": "        .createTestSuite());\n",
        "415": "    suite.addTest(MultimapTestSuiteBuilder.using(\n",
        "416": "        new TransformedMultimapGenerator<Multimap<String,String>>() {\n",
        "417": "          @Override\n",
        "418": "          Multimap<String, String> transform(Multimap<String, String> multimap) {\n",
        "419": "            return Multimaps.transformEntries(multimap, ENTRY_TRANSFORMER);\n",
        "420": "          }\n",
        "421": "        })\n",
        "422": "        .named(\"Multimaps.transformEntries[Multimap]\")\n",
        "423": "        .withFeatures(\n",
        "424": "            CollectionSize.ANY,\n",
        "425": "            MapFeature.SUPPORTS_REMOVE,\n",
        "426": "            CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "427": "            MapFeature.ALLOWS_NULL_KEYS,\n",
        "428": "            MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "429": "        .createTestSuite());\n",
        "430": "    suite.addTest(ListMultimapTestSuiteBuilder.using(new TransformedListMultimapGenerator() {\n",
        "431": "          @Override\n",
        "432": "          ListMultimap<String, String> transform(Multimap<String, String> multimap) {\n",
        "433": "            return Multimaps.transformValues((ListMultimap<String, String>) multimap, FUNCTION);\n",
        "434": "          }\n",
        "435": "        })\n",
        "436": "        .named(\"Multimaps.transformValues[ListMultimap]\")\n",
        "437": "        .withFeatures(\n",
        "438": "            CollectionSize.ANY,\n",
        "439": "            MapFeature.SUPPORTS_REMOVE,\n",
        "440": "            CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "441": "            MapFeature.ALLOWS_NULL_KEYS,\n",
        "442": "            MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "443": "        .createTestSuite());\n",
        "444": "    suite.addTest(ListMultimapTestSuiteBuilder.using(new TransformedListMultimapGenerator() {\n",
        "445": "          @Override\n",
        "446": "          ListMultimap<String, String> transform(Multimap<String, String> multimap) {\n",
        "447": "            return Multimaps.transformEntries(\n",
        "448": "                (ListMultimap<String, String>) multimap, ENTRY_TRANSFORMER);\n",
        "449": "          }\n",
        "450": "        })\n",
        "451": "        .named(\"Multimaps.transformEntries[ListMultimap]\")\n",
        "452": "        .withFeatures(\n",
        "453": "            CollectionSize.ANY,\n",
        "454": "            MapFeature.SUPPORTS_REMOVE,\n",
        "455": "            CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "456": "            MapFeature.ALLOWS_NULL_KEYS,\n",
        "457": "            MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "458": "        .createTestSuite());\n",
        "465": "  static abstract class TestFilteredMultimapGenerator<M extends Multimap<String, Integer>>\n",
        "510": "  static abstract class FilteredSetMultimapGenerator\n",
        "533": "  static abstract class FilteredListMultimapGenerator\n",
        "558": "    suite.addTest(SetMultimapTestSuiteBuilder.using(new FilteredSetMultimapGenerator() {\n",
        "559": "        @Override\n",
        "560": "        SetMultimap<String, Integer> filter(SetMultimap<String, Integer> multimap) {\n",
        "561": "          multimap.put(\"foo\", 17);\n",
        "562": "          multimap.put(\"bar\", 32);\n",
        "563": "          multimap.put(\"foo\", 16);\n",
        "564": "          return Multimaps.filterKeys(multimap,\n",
        "565": "              Predicates.not(Predicates.in(ImmutableSet.of(\"foo\", \"bar\"))));\n",
        "566": "        }\n",
        "567": "      })\n",
        "568": "      .named(\"Multimaps.filterKeys[SetMultimap, Predicate]\")\n",
        "569": "      .withFeatures(\n",
        "570": "          CollectionSize.ANY,\n",
        "571": "          MultimapFeature.VALUE_COLLECTIONS_SUPPORT_ITERATOR_REMOVE,\n",
        "572": "          MapFeature.GENERAL_PURPOSE,\n",
        "573": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "574": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "575": "          MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "576": "      .createTestSuite());\n",
        "577": "\n",
        "578": "    suite.addTest(ListMultimapTestSuiteBuilder.using(new FilteredListMultimapGenerator() {\n",
        "579": "        @Override\n",
        "580": "        ListMultimap<String, Integer> filter(ListMultimap<String, Integer> multimap) {\n",
        "581": "          multimap.put(\"foo\", 17);\n",
        "582": "          multimap.put(\"bar\", 32);\n",
        "583": "          multimap.put(\"foo\", 16);\n",
        "584": "          return Multimaps.filterKeys(multimap,\n",
        "585": "              Predicates.not(Predicates.in(ImmutableSet.of(\"foo\", \"bar\"))));\n",
        "586": "        }\n",
        "587": "      })\n",
        "588": "      .named(\"Multimaps.filterKeys[ListMultimap, Predicate]\")\n",
        "589": "      .withFeatures(\n",
        "590": "          CollectionSize.ANY,\n",
        "591": "          MultimapFeature.VALUE_COLLECTIONS_SUPPORT_ITERATOR_REMOVE,\n",
        "592": "          MapFeature.GENERAL_PURPOSE,\n",
        "593": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "594": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "595": "          MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "596": "      .createTestSuite());\n",
        "597": "    suite.addTest(ListMultimapTestSuiteBuilder.using(new FilteredListMultimapGenerator() {\n",
        "598": "        @Override\n",
        "599": "        ListMultimap<String, Integer> filter(ListMultimap<String, Integer> multimap) {\n",
        "600": "          multimap.put(\"foo\", 17);\n",
        "601": "          multimap.put(\"bar\", 32);\n",
        "602": "          multimap.put(\"foo\", 16);\n",
        "603": "          multimap = Multimaps.filterKeys(multimap, Predicates.not(Predicates.equalTo(\"foo\")));\n",
        "604": "          return Multimaps.filterKeys(multimap, Predicates.not(Predicates.equalTo(\"bar\")));\n",
        "605": "        }\n",
        "606": "      })\n",
        "607": "      .named(\"Multimaps.filterKeys[Multimaps.filterKeys[ListMultimap], Predicate]\")\n",
        "608": "      .withFeatures(\n",
        "609": "          CollectionSize.ANY,\n",
        "610": "          MultimapFeature.VALUE_COLLECTIONS_SUPPORT_ITERATOR_REMOVE,\n",
        "611": "          MapFeature.GENERAL_PURPOSE,\n",
        "612": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "613": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "614": "          MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "615": "      .createTestSuite());\n",
        "616": "    suite.addTest(SetMultimapTestSuiteBuilder.using(new FilteredSetMultimapGenerator() {\n",
        "617": "        @Override\n",
        "618": "        SetMultimap<String, Integer> filter(SetMultimap<String, Integer> multimap) {\n",
        "619": "          multimap.put(\"one\", 314);\n",
        "620": "          multimap.put(\"two\", 159);\n",
        "621": "          multimap.put(\"one\", 265);\n",
        "622": "          return Multimaps.filterValues(multimap,\n",
        "623": "              Predicates.not(Predicates.in(ImmutableSet.of(314, 159, 265))));\n",
        "624": "        }\n",
        "625": "      })\n",
        "626": "      .named(\"Multimaps.filterValues[SetMultimap, Predicate]\")\n",
        "627": "      .withFeatures(\n",
        "628": "          CollectionSize.ANY,\n",
        "629": "          MapFeature.GENERAL_PURPOSE,\n",
        "630": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "631": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "632": "          MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "633": "      .createTestSuite());\n",
        "634": "    suite.addTest(SetMultimapTestSuiteBuilder.using(new FilteredSetMultimapGenerator() {\n",
        "635": "        @Override\n",
        "636": "        SetMultimap<String, Integer> filter(SetMultimap<String, Integer> multimap) {\n",
        "637": "          ImmutableSetMultimap<String, Integer> badEntries =\n",
        "638": "              ImmutableSetMultimap.of(\"foo\", 314, \"one\", 159, \"two\", 265, \"bar\", 358);\n",
        "639": "          multimap.putAll(badEntries);\n",
        "640": "          return Multimaps.filterEntries(multimap,\n",
        "641": "              Predicates.not(Predicates.in(badEntries.entries())));\n",
        "642": "        }\n",
        "643": "      })\n",
        "644": "      .named(\"Multimaps.filterEntries[SetMultimap, Predicate]\")\n",
        "645": "      .withFeatures(\n",
        "646": "          CollectionSize.ANY,\n",
        "647": "          MapFeature.GENERAL_PURPOSE,\n",
        "648": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "649": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "650": "          MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "651": "      .createTestSuite());\n",
        "652": "    suite.addTest(SetMultimapTestSuiteBuilder.using(new FilteredSetMultimapGenerator() {\n",
        "653": "        @Override\n",
        "654": "        SetMultimap<String, Integer> filter(SetMultimap<String, Integer> multimap) {\n",
        "655": "          ImmutableSetMultimap<String, Integer> badEntries =\n",
        "656": "              ImmutableSetMultimap.of(\"foo\", 314, \"one\", 159, \"two\", 265, \"bar\", 358);\n",
        "657": "          multimap.putAll(badEntries);\n",
        "658": "          multimap = Multimaps.filterKeys(multimap,\n",
        "659": "              Predicates.not(Predicates.in(ImmutableSet.of(\"foo\", \"bar\"))));\n",
        "660": "          return Multimaps.filterEntries(multimap,\n",
        "661": "              Predicates.not(Predicates.in(badEntries.entries())));\n",
        "662": "        }\n",
        "663": "      })\n",
        "664": "      .named(\"Multimaps.filterEntries[Multimaps.filterKeys[SetMultimap]]\")\n",
        "665": "      .withFeatures(\n",
        "666": "          CollectionSize.ANY,\n",
        "667": "          MapFeature.GENERAL_PURPOSE,\n",
        "668": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "669": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "670": "          MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "671": "      .createTestSuite());\n",
        "672": "    suite.addTest(SetMultimapTestSuiteBuilder.using(new FilteredSetMultimapGenerator() {\n",
        "673": "        @Override\n",
        "674": "        SetMultimap<String, Integer> filter(SetMultimap<String, Integer> multimap) {\n",
        "675": "          ImmutableSetMultimap<String, Integer> badEntries =\n",
        "676": "              ImmutableSetMultimap.of(\"foo\", 314, \"one\", 159, \"two\", 265, \"bar\", 358);\n",
        "677": "          multimap.putAll(badEntries);\n",
        "678": "          multimap = Multimaps.filterEntries(multimap,\n",
        "679": "              Predicates.not(Predicates.in(ImmutableMap.of(\"one\", 159, \"two\", 265).entrySet())));\n",
        "680": "          return Multimaps.filterKeys(multimap,\n",
        "681": "              Predicates.not(Predicates.in(ImmutableSet.of(\"foo\", \"bar\"))));\n",
        "682": "        }\n",
        "683": "      })\n",
        "684": "      .named(\"Multimaps.filterKeys[Multimaps.filterEntries[SetMultimap]]\")\n",
        "685": "      .withFeatures(\n",
        "686": "          CollectionSize.ANY,\n",
        "687": "          MapFeature.GENERAL_PURPOSE,\n",
        "688": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "689": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "690": "          MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "691": "      .createTestSuite());\n",
        "692": "    suite.addTest(SetMultimapTestSuiteBuilder.using(new FilteredSetMultimapGenerator() {\n",
        "693": "        @Override\n",
        "694": "        SetMultimap<String, Integer> filter(SetMultimap<String, Integer> multimap) {\n",
        "695": "          ImmutableSetMultimap<String, Integer> badEntries =\n",
        "696": "              ImmutableSetMultimap.of(\"foo\", 314, \"bar\", 358);\n",
        "697": "          multimap.putAll(badEntries);\n",
        "698": "          multimap = Multimaps.filterKeys(multimap, Predicates.not(Predicates.equalTo(\"foo\")));\n",
        "699": "          multimap = Multimaps.filterKeys(multimap, Predicates.not(Predicates.equalTo(\"bar\")));\n",
        "700": "          return multimap;\n",
        "701": "        }\n",
        "702": "      })\n",
        "703": "      .named(\"Multimaps.filterKeys[Multimaps.filterKeys[SetMultimap]]\")\n",
        "704": "      .withFeatures(\n",
        "705": "          CollectionSize.ANY,\n",
        "706": "          MultimapFeature.VALUE_COLLECTIONS_SUPPORT_ITERATOR_REMOVE,\n",
        "707": "          MapFeature.GENERAL_PURPOSE,\n",
        "708": "          MapFeature.ALLOWS_NULL_KEYS,\n",
        "709": "          MapFeature.ALLOWS_NULL_VALUES,\n",
        "710": "          MapFeature.ALLOWS_ANY_NULL_QUERIES)\n",
        "711": "      .createTestSuite());\n"
    }
}