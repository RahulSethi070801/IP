{
    "addition": {
        "45": "        } catch (IllegalArgumentException expected) {\n",
        "46": "        }\n",
        "56": "      } catch (IllegalArgumentException expected) {\n",
        "57": "      }\n",
        "99": "        assertEquals(\n",
        "100": "            ORDERING.compare(i, 3) > 0 || (ORDERING.compare(i, 3) == 0 && lBoundType == CLOSED),\n",
        "101": "            range.contains(i));\n",
        "102": "        assertEquals(\n",
        "103": "            ORDERING.compare(i, 3) < 0 || (ORDERING.compare(i, 3) == 0 && lBoundType == OPEN),\n",
        "104": "            range.tooLow(i));\n",
        "114": "        assertEquals(\n",
        "115": "            ORDERING.compare(i, 3) < 0 || (ORDERING.compare(i, 3) == 0 && lBoundType == CLOSED),\n",
        "116": "            range.contains(i));\n",
        "117": "        assertEquals(\n",
        "118": "            ORDERING.compare(i, 3) > 0 || (ORDERING.compare(i, 3) == 0 && lBoundType == OPEN),\n",
        "119": "            range.tooHigh(i));\n",
        "139": "    assertEquals(\n",
        "140": "        GeneralRange.range(ORDERING, 2, OPEN, 4, OPEN),\n",
        "147": "    assertEquals(\n",
        "148": "        GeneralRange.range(ORDERING, 2, CLOSED, 4, OPEN),\n",
        "151": "    assertEquals(\n",
        "152": "        GeneralRange.range(ORDERING, 2, OPEN, 4, OPEN),\n",
        "155": "    assertEquals(\n",
        "156": "        GeneralRange.range(ORDERING, 2, CLOSED, 4, OPEN),\n",
        "162": "    assertEquals(\n",
        "163": "        GeneralRange.range(ORDERING, 3, CLOSED, 4, OPEN),\n",
        "169": "    assertEquals(\n",
        "170": "        GeneralRange.range(ORDERING, 3, CLOSED, 4, CLOSED),\n",
        "172": "    assertEquals(\n",
        "173": "        GeneralRange.range(ORDERING, 2, OPEN, 3, OPEN),\n",
        "189": "      assertEquals(\n",
        "190": "          GeneralRange.upTo(Ordering.natural(), 3, endpointType),\n",
        "193": "      assertEquals(\n",
        "194": "          GeneralRange.downTo(Ordering.natural(), 3, endpointType),\n",
        "202": "        assertEquals(\n",
        "203": "            GeneralRange.range(Ordering.natural(), 3, lowerType, 4, upperType),\n",
        "211": "    assertEquals(\n",
        "212": "        GeneralRange.downTo(ORDERING.reverse(), 3, CLOSED),\n",
        "214": "    assertEquals(\n",
        "215": "        GeneralRange.upTo(ORDERING.reverse(), 3, OPEN),\n",
        "217": "    assertEquals(\n",
        "218": "        GeneralRange.range(ORDERING.reverse(), 5, OPEN, 3, CLOSED),\n"
    },
    "removed": {
        "45": "        } catch (IllegalArgumentException expected) {}\n",
        "55": "      } catch (IllegalArgumentException expected) {}\n",
        "97": "        assertEquals(ORDERING.compare(i, 3) > 0\n",
        "98": "            || (ORDERING.compare(i, 3) == 0 && lBoundType == CLOSED), range.contains(i));\n",
        "99": "        assertEquals(ORDERING.compare(i, 3) < 0\n",
        "100": "            || (ORDERING.compare(i, 3) == 0 && lBoundType == OPEN), range.tooLow(i));\n",
        "110": "        assertEquals(ORDERING.compare(i, 3) < 0\n",
        "111": "            || (ORDERING.compare(i, 3) == 0 && lBoundType == CLOSED), range.contains(i));\n",
        "112": "        assertEquals(ORDERING.compare(i, 3) > 0\n",
        "113": "            || (ORDERING.compare(i, 3) == 0 && lBoundType == OPEN), range.tooHigh(i));\n",
        "133": "    assertEquals(GeneralRange.range(ORDERING, 2, OPEN, 4, OPEN),\n",
        "140": "    assertEquals(GeneralRange.range(ORDERING, 2, CLOSED, 4, OPEN),\n",
        "143": "    assertEquals(GeneralRange.range(ORDERING, 2, OPEN, 4, OPEN),\n",
        "146": "    assertEquals(GeneralRange.range(ORDERING, 2, CLOSED, 4, OPEN),\n",
        "152": "    assertEquals(GeneralRange.range(ORDERING, 3, CLOSED, 4, OPEN),\n",
        "158": "    assertEquals(GeneralRange.range(ORDERING, 3, CLOSED, 4, CLOSED),\n",
        "160": "    assertEquals(GeneralRange.range(ORDERING, 2, OPEN, 3, OPEN),\n",
        "176": "      assertEquals(GeneralRange.upTo(Ordering.natural(), 3, endpointType),\n",
        "179": "      assertEquals(GeneralRange.downTo(Ordering.natural(), 3, endpointType),\n",
        "187": "        assertEquals(GeneralRange.range(Ordering.natural(), 3, lowerType, 4, upperType),\n",
        "195": "    assertEquals(GeneralRange.downTo(ORDERING.reverse(), 3, CLOSED),\n",
        "197": "    assertEquals(GeneralRange.upTo(ORDERING.reverse(), 3, OPEN),\n",
        "199": "    assertEquals(GeneralRange.range(ORDERING.reverse(), 5, OPEN, 3, CLOSED),\n"
    }
}