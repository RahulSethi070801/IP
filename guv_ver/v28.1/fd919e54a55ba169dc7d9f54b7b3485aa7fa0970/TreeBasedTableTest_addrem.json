{
    "addition": {
        "52": "    suite.addTest(\n",
        "53": "        SortedMapTestSuiteBuilder.using(\n",
        "54": "                new TestStringSortedMapGenerator() {\n",
        "55": "                  @Override\n",
        "56": "                  protected SortedMap<String, String> create(Entry<String, String>[] entries) {\n",
        "57": "                    TreeBasedTable<String, String, String> table = TreeBasedTable.create();\n",
        "58": "                    table.put(\"a\", \"b\", \"c\");\n",
        "59": "                    table.put(\"c\", \"b\", \"a\");\n",
        "60": "                    table.put(\"a\", \"a\", \"d\");\n",
        "61": "                    for (Entry<String, String> entry : entries) {\n",
        "62": "                      table.put(\"b\", entry.getKey(), entry.getValue());\n",
        "63": "                    }\n",
        "64": "                    return table.row(\"b\");\n",
        "65": "                  }\n",
        "66": "                })\n",
        "67": "            .withFeatures(\n",
        "68": "                MapFeature.GENERAL_PURPOSE,\n",
        "69": "                CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "70": "                CollectionSize.ANY)\n",
        "71": "            .named(\"RowMapTestSuite\")\n",
        "72": "            .createTestSuite());\n",
        "76": "  public static class TreeRowTest extends SortedMapInterfaceTest<String, String> {\n",
        "81": "    @Override\n",
        "82": "    protected SortedMap<String, String> makeEmptyMap() {\n",
        "90": "    @Override\n",
        "91": "    protected SortedMap<String, String> makePopulatedMap() {\n",
        "102": "    @Override\n",
        "103": "    protected String getKeyNotInPopulatedMap() {\n",
        "107": "    @Override\n",
        "108": "    protected String getValueNotInPopulatedMap() {\n",
        "131": "      Comparator<? super String> rowComparator,\n",
        "132": "      Comparator<? super Integer> columnComparator,\n",
        "133": "      Object... data) {\n",
        "143": "  @Override\n",
        "144": "  protected TreeBasedTable<String, Integer, Character> create(Object... data) {\n",
        "154": "    table = TreeBasedTable.create(Collections.reverseOrder(), Ordering.usingToString());\n",
        "164": "    TreeBasedTable<String, Integer, Character> original =\n",
        "165": "        TreeBasedTable.create(Collections.reverseOrder(), Ordering.usingToString());\n",
        "190": "    assertEquals(\"[(bar,1)=b, (foo,1)=a, (foo,3)=c]\", table.cellSet().toString());\n",
        "207": "    sortedTable = TreeBasedTable.create(Collections.reverseOrder(), Ordering.usingToString());\n",
        "220": "    sortedTable = TreeBasedTable.create(Collections.reverseOrder(), Ordering.usingToString());\n",
        "231": "    assertSame(Ordering.natural(), sortedTable.rowKeySet().comparator());\n",
        "233": "    sortedTable = TreeBasedTable.create(Collections.reverseOrder(), Ordering.usingToString());\n",
        "234": "    assertSame(Collections.reverseOrder(), sortedTable.rowKeySet().comparator());\n",
        "266": "    sortedTable = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c', \"dog\", 2, 'd');\n",
        "278": "    sortedTable = TreeBasedTable.create(Collections.reverseOrder(), Ordering.usingToString());\n",
        "294": "    Map<String, Map<Integer, Character>> map = sortedTable.rowMap().headMap(\"cat\");\n",
        "304": "    Map<String, Map<Integer, Character>> map = sortedTable.rowMap().tailMap(\"cat\");\n",
        "313": "    sortedTable = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c', \"dog\", 2, 'd');\n",
        "314": "    Map<String, Map<Integer, Character>> map = sortedTable.rowMap().subMap(\"cat\", \"egg\");\n",
        "322": "    sortedTable = create(\"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c', \"dog\", 2, 'd');\n",
        "327": "    table =\n",
        "328": "        create(\n",
        "329": "            \"a\", 2, 'X', \"a\", 2, 'X', \"b\", 3, 'X', \"b\", 2, 'X', \"c\", 10, 'X', \"c\", 10, 'X', \"c\", 20,\n",
        "330": "            'X', \"d\", 15, 'X', \"d\", 20, 'X', \"d\", 1, 'X', \"e\", 5, 'X');\n",
        "335": "    table =\n",
        "336": "        create(\n",
        "337": "            String.CASE_INSENSITIVE_ORDER,\n",
        "338": "            Ordering.natural().reverse(),\n",
        "339": "            \"a\",\n",
        "340": "            2,\n",
        "341": "            'X',\n",
        "342": "            \"a\",\n",
        "343": "            2,\n",
        "344": "            'X',\n",
        "345": "            \"b\",\n",
        "346": "            3,\n",
        "347": "            'X',\n",
        "348": "            \"b\",\n",
        "349": "            2,\n",
        "350": "            'X',\n",
        "351": "            \"c\",\n",
        "352": "            10,\n",
        "353": "            'X',\n",
        "354": "            \"c\",\n",
        "355": "            10,\n",
        "356": "            'X',\n",
        "357": "            \"c\",\n",
        "358": "            20,\n",
        "359": "            'X',\n",
        "360": "            \"d\",\n",
        "361": "            15,\n",
        "362": "            'X',\n",
        "363": "            \"d\",\n",
        "364": "            20,\n",
        "365": "            'X',\n",
        "366": "            \"d\",\n",
        "367": "            1,\n",
        "368": "            'X',\n",
        "369": "            \"e\",\n",
        "370": "            5,\n",
        "371": "            'X');\n",
        "381": "    table = create(\"a\", 2, 'X', \"a\", 1, 'X');\n",
        "386": "    table = create(\"a\", 1, 'X', \"b\", 1, 'X');\n",
        "391": "    table = create(\"a\", 1, 'X');\n",
        "398": "            create(\n",
        "399": "                \"a\", 2, 'X', \"a\", 2, 'X', \"b\", 3, 'X', \"b\", 2, 'X', \"c\", 10, 'X', \"c\", 10, 'X', \"c\",\n",
        "400": "                20, 'X', \"d\", 15, 'X', \"d\", 20, 'X', \"d\", 1, 'X', \"e\", 5, 'X');\n",
        "415": "            create(\n",
        "416": "                \"a\", 2, 'X', \"a\", 2, 'X', \"b\", 3, 'X', \"b\", 2, 'X', \"c\", 10, 'X', \"c\", 10, 'X', \"c\",\n",
        "417": "                20, 'X', \"d\", 15, 'X', \"d\", 20, 'X', \"d\", 1, 'X', \"e\", 5, 'X');\n",
        "432": "            create(\n",
        "433": "                \"a\", 2, 'X', \"a\", 2, 'X', \"b\", 3, 'X', \"b\", 2, 'X', \"c\", 10, 'X', \"c\", 10, 'X', \"c\",\n",
        "434": "                20, 'X', \"d\", 15, 'X', \"d\", 20, 'X', \"d\", 1, 'X', \"e\", 5, 'X');\n"
    },
    "removed": {
        "52": "    suite.addTest(SortedMapTestSuiteBuilder\n",
        "53": "        .using(new TestStringSortedMapGenerator() {\n",
        "54": "          @Override protected SortedMap<String, String> create(\n",
        "55": "              Entry<String, String>[] entries) {\n",
        "56": "            TreeBasedTable<String, String, String> table =\n",
        "57": "                TreeBasedTable.create();\n",
        "58": "            table.put(\"a\", \"b\", \"c\");\n",
        "59": "            table.put(\"c\", \"b\", \"a\");\n",
        "60": "            table.put(\"a\", \"a\", \"d\");\n",
        "61": "            for (Entry<String, String> entry : entries) {\n",
        "62": "              table.put(\"b\", entry.getKey(), entry.getValue());\n",
        "63": "            }\n",
        "64": "            return table.row(\"b\");\n",
        "65": "          }\n",
        "66": "        }).withFeatures(\n",
        "67": "            MapFeature.GENERAL_PURPOSE,\n",
        "68": "            CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "69": "            CollectionSize.ANY)\n",
        "70": "        .named(\"RowMapTestSuite\").createTestSuite());\n",
        "74": "  public static class TreeRowTest extends\n",
        "75": "      SortedMapInterfaceTest<String, String> {\n",
        "80": "    @Override protected SortedMap<String, String> makeEmptyMap() {\n",
        "88": "    @Override protected SortedMap<String, String> makePopulatedMap() {\n",
        "99": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "103": "    @Override protected String getValueNotInPopulatedMap() {\n",
        "126": "    Comparator<? super String> rowComparator,\n",
        "127": "    Comparator<? super Integer> columnComparator,\n",
        "128": "    Object... data) {\n",
        "138": "  @Override protected TreeBasedTable<String, Integer, Character> create(\n",
        "139": "      Object... data) {\n",
        "149": "    table = TreeBasedTable.create(\n",
        "150": "        Collections.reverseOrder(), Ordering.usingToString());\n",
        "160": "    TreeBasedTable<String, Integer, Character> original = TreeBasedTable.create(\n",
        "161": "        Collections.reverseOrder(), Ordering.usingToString());\n",
        "186": "    assertEquals(\"[(bar,1)=b, (foo,1)=a, (foo,3)=c]\",\n",
        "187": "        table.cellSet().toString());\n",
        "204": "    sortedTable = TreeBasedTable.create(\n",
        "205": "        Collections.reverseOrder(), Ordering.usingToString());\n",
        "218": "    sortedTable = TreeBasedTable.create(\n",
        "219": "        Collections.reverseOrder(), Ordering.usingToString());\n",
        "230": "    assertSame(Ordering.natural(),\n",
        "231": "        sortedTable.rowKeySet().comparator());\n",
        "233": "    sortedTable = TreeBasedTable.create(\n",
        "234": "        Collections.reverseOrder(), Ordering.usingToString());\n",
        "235": "    assertSame(Collections.reverseOrder(),\n",
        "236": "        sortedTable.rowKeySet().comparator());\n",
        "268": "    sortedTable = create(\n",
        "269": "        \"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c', \"dog\", 2, 'd');\n",
        "281": "    sortedTable = TreeBasedTable.create(\n",
        "282": "        Collections.reverseOrder(), Ordering.usingToString());\n",
        "298": "    Map<String, Map<Integer, Character>> map\n",
        "299": "        = sortedTable.rowMap().headMap(\"cat\");\n",
        "309": "    Map<String, Map<Integer, Character>> map\n",
        "310": "        = sortedTable.rowMap().tailMap(\"cat\");\n",
        "319": "    sortedTable = create(\n",
        "320": "        \"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c', \"dog\", 2, 'd');\n",
        "321": "    Map<String, Map<Integer, Character>> map\n",
        "322": "        = sortedTable.rowMap().subMap(\"cat\", \"egg\");\n",
        "330": "    sortedTable = create(\n",
        "331": "        \"foo\", 1, 'a', \"bar\", 1, 'b', \"foo\", 3, 'c', \"dog\", 2, 'd');\n",
        "336": "    table = create(\"a\", 2,  'X',\n",
        "337": "                   \"a\", 2,  'X',\n",
        "338": "                   \"b\", 3,  'X',\n",
        "339": "                   \"b\", 2,  'X',\n",
        "340": "                   \"c\", 10, 'X',\n",
        "341": "                   \"c\", 10, 'X',\n",
        "342": "                   \"c\", 20, 'X',\n",
        "343": "                   \"d\", 15, 'X',\n",
        "344": "                   \"d\", 20, 'X',\n",
        "345": "                   \"d\", 1,  'X',\n",
        "346": "                   \"e\", 5,  'X'\n",
        "347": "                  );\n",
        "352": "    table = create(String.CASE_INSENSITIVE_ORDER,\n",
        "353": "                   Ordering.natural().reverse(),\n",
        "354": "                   \"a\", 2,  'X',\n",
        "355": "                   \"a\", 2,  'X',\n",
        "356": "                   \"b\", 3,  'X',\n",
        "357": "                   \"b\", 2,  'X',\n",
        "358": "                   \"c\", 10, 'X',\n",
        "359": "                   \"c\", 10, 'X',\n",
        "360": "                   \"c\", 20, 'X',\n",
        "361": "                   \"d\", 15, 'X',\n",
        "362": "                   \"d\", 20, 'X',\n",
        "363": "                   \"d\", 1,  'X',\n",
        "364": "                   \"e\", 5,  'X'\n",
        "365": "                  );\n",
        "375": "    table = create(\"a\", 2,  'X',\n",
        "376": "                   \"a\", 1,  'X'\n",
        "377": "                  );\n",
        "382": "    table = create(\"a\", 1,  'X',\n",
        "383": "                   \"b\", 1,  'X'\n",
        "384": "                  );\n",
        "389": "    table = create(\"a\", 1,  'X');\n",
        "396": "            create(\"a\", 2, 'X', \"a\", 2, 'X', \"b\", 3, 'X', \"b\", 2, 'X', \"c\", 10,\n",
        "397": "                'X', \"c\", 10, 'X', \"c\", 20, 'X', \"d\", 15, 'X', \"d\", 20, 'X',\n",
        "398": "                \"d\", 1, 'X', \"e\", 5, 'X');\n",
        "413": "            create(\"a\", 2, 'X', \"a\", 2, 'X', \"b\", 3, 'X', \"b\", 2, 'X', \"c\", 10,\n",
        "414": "                'X', \"c\", 10, 'X', \"c\", 20, 'X', \"d\", 15, 'X', \"d\", 20, 'X',\n",
        "415": "                \"d\", 1, 'X', \"e\", 5, 'X');\n",
        "430": "            create(\"a\", 2, 'X', \"a\", 2, 'X', \"b\", 3, 'X', \"b\", 2, 'X', \"c\", 10,\n",
        "431": "                'X', \"c\", 10, 'X', \"c\", 20, 'X', \"d\", 15, 'X', \"d\", 20, 'X',\n",
        "432": "                \"d\", 1, 'X', \"e\", 5, 'X');\n"
    }
}