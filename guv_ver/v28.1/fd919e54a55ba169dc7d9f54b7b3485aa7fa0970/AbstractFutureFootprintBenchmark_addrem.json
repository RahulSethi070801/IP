{
    "addition": {
        "31": "/** Measures the size of AbstractFuture implementations. */\n",
        "34": "  enum State {\n",
        "35": "    NOT_DONE,\n",
        "36": "    FINISHED,\n",
        "37": "    CANCELLED,\n",
        "38": "    FAILED\n",
        "39": "  }\n",
        "43": "\n",
        "44": "  @Param({\"0\", \"1\", \"5\", \"10\"})\n",
        "45": "  int numListeners;\n",
        "46": "\n",
        "47": "  @Param({\"0\", \"1\", \"5\", \"10\"})\n",
        "48": "  int numThreads;\n",
        "52": "  @BeforeExperiment\n",
        "53": "  void setUp() throws Exception {\n",
        "69": "      Thread thread =\n",
        "70": "          new Thread() {\n",
        "71": "            @Override\n",
        "72": "            public void run() {\n",
        "73": "              try {\n",
        "74": "                f.get();\n",
        "75": "              } catch (Throwable expected) {\n",
        "76": "              }\n",
        "77": "            }\n",
        "78": "          };\n"
    },
    "removed": {
        "31": "/**\n",
        "32": " * Measures the size of AbstractFuture implementations.\n",
        "33": " */\n",
        "36": "  enum State { NOT_DONE, FINISHED, CANCELLED, FAILED}\n",
        "40": "  @Param({\"0\", \"1\", \"5\", \"10\"}) int numListeners;\n",
        "41": "  @Param({\"0\", \"1\", \"5\", \"10\"}) int numThreads;\n",
        "45": "  @BeforeExperiment void setUp() throws Exception {\n",
        "61": "      Thread thread = new Thread() {\n",
        "62": "        @Override public void run() {\n",
        "63": "          try {\n",
        "64": "            f.get();\n",
        "65": "          } catch (Throwable expected) {}\n",
        "66": "        }\n",
        "67": "      };\n"
    }
}