{
    "addition": {
        "223": "        LinkedList.class,\n",
        "224": "        Deque.class,\n",
        "225": "        Queue.class,\n",
        "226": "        PriorityQueue.class,\n",
        "227": "        BitSet.class,\n",
        "228": "        TreeSet.class,\n",
        "229": "        TreeMap.class);\n",
        "242": "    assertEquals(\n",
        "243": "        ArbitraryInstances.get(Random.class).nextInt(),\n",
        "258": "        BlockingQueue.class,\n",
        "259": "        BlockingDeque.class,\n",
        "260": "        PriorityBlockingQueue.class,\n",
        "261": "        DelayQueue.class,\n",
        "262": "        SynchronousQueue.class,\n",
        "263": "        ConcurrentMap.class,\n",
        "264": "        ConcurrentNavigableMap.class,\n",
        "265": "        AtomicReference.class,\n",
        "266": "        AtomicBoolean.class,\n",
        "267": "        AtomicInteger.class,\n",
        "268": "        AtomicLong.class,\n",
        "269": "        AtomicDouble.class);\n",
        "289": "    } catch (NullPointerException expected) {\n",
        "290": "    }\n",
        "314": "    assertSame(\n",
        "315": "        WithPrivateConstructor.INSTANCE, ArbitraryInstances.get(WithPrivateConstructor.class));\n",
        "317": "    assertSame(\n",
        "318": "        WithExceptionalConstructor.INSTANCE,\n",
        "373": "    assertEquals(Pattern.compile(\"\").pattern(), ArbitraryInstances.get(Pattern.class).pattern());\n",
        "378": "    assertSame(WithPublicConstant.INSTANCE, ArbitraryInstances.get(WithPublicConstant.class));\n",
        "382": "    assertSame(WithPublicConstants.FIRST, ArbitraryInstances.get(WithPublicConstants.class));\n",
        "386": "    assertSame(FirstConstantIsNull.SECOND, ArbitraryInstances.get(FirstConstantIsNull.class));\n",
        "411": "    assertTrue(\n",
        "412": "        ArbitraryInstances.get(WithPublicConstructorAndConstant.class)\n",
        "413": "            != ArbitraryInstances.get(WithPublicConstructorAndConstant.class));\n",
        "424": "      assertNotSame(\n",
        "425": "          \"Expected to return fresh instance for: \" + mutableClass,\n",
        "426": "          instance,\n",
        "427": "          ArbitraryInstances.get(mutableClass));\n",
        "434": "    UP,\n",
        "435": "    DOWN\n",
        "440": "  public abstract static class SomeAbstractClass {\n",
        "442": "\n",
        "473": "  private static class ParentClassHasConstant extends WithPublicConstant {}\n",
        "511": "    public static NonFinalFieldIgnored instance = new NonFinalFieldIgnored();\n",
        "517": "    static final NonPublicConstantIgnored INSTANCE = new NonPublicConstantIgnored();\n",
        "524": "    public final NonStaticFieldIgnored instance = new NonStaticFieldIgnored();\n"
    },
    "removed": {
        "223": "        LinkedList.class, Deque.class, Queue.class, PriorityQueue.class, BitSet.class,\n",
        "224": "        TreeSet.class, TreeMap.class);\n",
        "237": "    assertEquals(ArbitraryInstances.get(Random.class).nextInt(),\n",
        "252": "        BlockingQueue.class, BlockingDeque.class, PriorityBlockingQueue.class,\n",
        "253": "        DelayQueue.class, SynchronousQueue.class,\n",
        "254": "        ConcurrentMap.class, ConcurrentNavigableMap.class,\n",
        "255": "        AtomicReference.class, AtomicBoolean.class,\n",
        "256": "        AtomicInteger.class, AtomicLong.class, AtomicDouble.class);\n",
        "276": "    } catch (NullPointerException expected) {}\n",
        "300": "    assertSame(WithPrivateConstructor.INSTANCE,\n",
        "301": "        ArbitraryInstances.get(WithPrivateConstructor.class));\n",
        "303": "    assertSame(WithExceptionalConstructor.INSTANCE,\n",
        "358": "    assertEquals(Pattern.compile(\"\").pattern(),\n",
        "359": "        ArbitraryInstances.get(Pattern.class).pattern());\n",
        "364": "    assertSame(WithPublicConstant.INSTANCE,\n",
        "365": "        ArbitraryInstances.get(WithPublicConstant.class));\n",
        "369": "    assertSame(WithPublicConstants.FIRST,\n",
        "370": "        ArbitraryInstances.get(WithPublicConstants.class));\n",
        "374": "    assertSame(FirstConstantIsNull.SECOND,\n",
        "375": "        ArbitraryInstances.get(FirstConstantIsNull.class));\n",
        "400": "    assertTrue(ArbitraryInstances.get(WithPublicConstructorAndConstant.class)\n",
        "401": "        != ArbitraryInstances.get(WithPublicConstructorAndConstant.class));\n",
        "412": "      assertNotSame(\"Expected to return fresh instance for: \" + mutableClass,\n",
        "413": "          instance, ArbitraryInstances.get(mutableClass));\n",
        "420": "    UP, DOWN\n",
        "425": "  public static abstract class SomeAbstractClass {\n",
        "456": "  private static class ParentClassHasConstant\n",
        "457": "      extends WithPublicConstant {}\n",
        "494": "    public static NonFinalFieldIgnored instance =\n",
        "495": "        new NonFinalFieldIgnored();\n",
        "501": "    static final NonPublicConstantIgnored INSTANCE =\n",
        "502": "        new NonPublicConstantIgnored();\n",
        "509": "    public final NonStaticFieldIgnored instance =\n",
        "510": "        new NonStaticFieldIgnored();\n"
    }
}