{
    "addition": {
        "29": " * the reference is \"absent\"); it is never said to \"contain {@code null}\".\n",
        "32": " * reference. It allows you to represent \"a {@code T} that must be present\" and a \"a {@code T} that\n",
        "33": " * might be absent\" as two distinct types in your program, which can aid clarity.\n",
        "38": " *   <li>As a method return type, as an alternative to returning {@code null} to indicate that no\n",
        "39": " *       value was available\n",
        "40": " *   <li>To distinguish between \"unknown\" (for example, not present in a map) and \"known to have no\n",
        "41": " *       value\" (present in the map, with value {@code Optional.absent()})\n",
        "42": " *   <li>To wrap nullable references for storage in a collection that does not support {@code null}\n",
        "43": " *       (though there are <a\n",
        "44": " *       href=\"https://github.com/google/guava/wiki/LivingWithNullHostileCollections\">several other\n",
        "45": " *       approaches to this</a> that should be considered first)\n",
        "48": " * <p>A common alternative to using this class is to find or create a suitable <a\n",
        "49": " * href=\"http://en.wikipedia.org/wiki/Null_Object_pattern\">null object</a> for the type in question.\n",
        "60": " *   <li>This class is serializable; {@code java.util.Optional} is not.\n",
        "61": " *   <li>{@code java.util.Optional} has the additional methods {@code ifPresent}, {@code filter},\n",
        "62": " *       {@code flatMap}, and {@code orElseThrow}.\n",
        "63": " *   <li>{@code java.util} offers the primitive-specialized versions {@code OptionalInt}, {@code\n",
        "64": " *       OptionalLong} and {@code OptionalDouble}, the use of which is recommended; Guava does not\n",
        "65": " *       have these.\n",
        "71": " * <p>See the Guava User Guide article on <a\n",
        "72": " * href=\"https://github.com/google/guava/wiki/UsingAndAvoidingNullExplained#optional\">using {@code\n",
        "73": " * Optional}</a>.\n",
        "76": " *     this type, so it is safe to cast an {@code Optional<T>} to {@code Optional<S>} for any\n",
        "77": " *     supertype {@code S} of {@code T}.\n",
        "114": "    return (nullableReference == null) ? Optional.<T>absent() : new Present<T>(nullableReference);\n",
        "131": "   * throws {@link IllegalStateException}, whereas the Java 8 counterpart throws {@link\n",
        "132": "   * java.util.NoSuchElementException NoSuchElementException}.\n",
        "134": "   * @throws IllegalStateException if the instance is absent ({@link #isPresent} returns {@code\n",
        "135": "   *     false}); depending on this <i>specific</i> exception type (over the more general {@link\n",
        "136": "   *     RuntimeException}) is discouraged\n",
        "149": "   * <pre>{@code\n",
        "150": "   * Optional<Integer> optionalInt = getSomeOptionalInt();\n",
        "151": "   * Number value = optionalInt.or(0.5); // error\n",
        "153": "   * FluentIterable<? extends Number> numbers = getSomeNumbers();\n",
        "154": "   * Optional<? extends Number> first = numbers.first();\n",
        "155": "   * Number value = first.or(0.5); // error\n",
        "156": "   * }</pre>\n",
        "162": "   * <pre>{@code\n",
        "163": "   * Optional<Number> optionalInt = (Optional) getSomeOptionalInt();\n",
        "164": "   * Number value = optionalInt.or(0.5); // fine\n",
        "166": "   * FluentIterable<? extends Number> numbers = getSomeNumbers();\n",
        "167": "   * Optional<Number> first = (Optional) numbers.first();\n",
        "168": "   * Number value = first.or(0.5); // fine\n",
        "169": "   * }</pre>\n",
        "171": "   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is similar to Java 8's {@code\n",
        "172": "   * Optional.orElse}, but will not accept {@code null} as a {@code defaultValue} ({@link #orNull}\n",
        "173": "   * must be used instead). As a result, the value returned by this method is guaranteed non-null,\n",
        "174": "   * which is not the case for the {@code java.util} equivalent.\n",
        "190": "   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is similar to Java 8's {@code\n",
        "191": "   * Optional.orElseGet}, except when {@code supplier} returns {@code null}. In this case this\n",
        "192": "   * method throws an exception, whereas the Java 8 method returns the {@code null} to the caller.\n",
        "194": "   * @throws NullPointerException if this optional's value is absent and the supplier returns {@code\n",
        "195": "   *     null}\n",
        "215": "   * {@code Optional} class. However, this common usage:\n",
        "217": "   * <pre>{@code\n",
        "218": "   * for (Foo foo : possibleFoo.asSet()) {\n",
        "219": "   *   doSomethingWith(foo);\n",
        "220": "   * }\n",
        "221": "   * }</pre>\n",
        "223": "   * ... can be replaced with:\n",
        "225": "   * <pre>{@code\n",
        "226": "   * possibleFoo.ifPresent(foo -> doSomethingWith(foo));\n",
        "227": "   * }</pre>\n",
        "237": "   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is similar to Java 8's {@code\n",
        "238": "   * Optional.map}, except when {@code function} returns {@code null}. In this case this method\n",
        "239": "   * throws an exception, whereas the Java 8 method returns {@code Optional.absent()}.\n",
        "280": "   * {@code Optional} class; use {@code\n",
        "281": "   * optionals.stream().filter(Optional::isPresent).map(Optional::get)} instead.\n"
    },
    "removed": {
        "29": " * the reference is \"absent\"); it is never said to \"contain {@code\n",
        "30": " * null}\".\n",
        "33": " * reference. It allows you to represent \"a {@code T} that must be present\" and a\n",
        "34": " * \"a {@code T} that might be absent\" as two distinct types in your program, which can aid clarity.\n",
        "39": " * <li>As a method return type, as an alternative to returning {@code null} to indicate that no\n",
        "40": " *     value was available\n",
        "41": " * <li>To distinguish between \"unknown\" (for example, not present in a map) and \"known to have no\n",
        "42": " *     value\" (present in the map, with value {@code Optional.absent()})\n",
        "43": " * <li>To wrap nullable references for storage in a collection that does not support {@code null}\n",
        "44": " *     (though there are\n",
        "45": " *     <a href=\"https://github.com/google/guava/wiki/LivingWithNullHostileCollections\">several other\n",
        "46": " *     approaches to this</a> that should be considered first)\n",
        "49": " * <p>A common alternative to using this class is to find or create a suitable\n",
        "50": " * <a href=\"http://en.wikipedia.org/wiki/Null_Object_pattern\">null object</a> for the type in\n",
        "51": " * question.\n",
        "62": " * <li>This class is serializable; {@code java.util.Optional} is not.\n",
        "63": " * <li>{@code java.util.Optional} has the additional methods {@code ifPresent}, {@code filter},\n",
        "64": " *     {@code flatMap}, and {@code orElseThrow}.\n",
        "65": " * <li>{@code java.util} offers the primitive-specialized versions {@code OptionalInt}, {@code\n",
        "66": " *     OptionalLong} and {@code OptionalDouble}, the use of which is recommended; Guava does not\n",
        "67": " *     have these.\n",
        "73": " * <p>See the Guava User Guide article on\n",
        "74": " * <a href=\"https://github.com/google/guava/wiki/UsingAndAvoidingNullExplained#optional\">using\n",
        "75": " * {@code Optional}</a>.\n",
        "78": " *     this type, so it is safe to cast an {@code Optional<T>} to {@code\n",
        "79": " *     Optional<S>} for any supertype {@code S} of {@code T}.\n",
        "116": "    return (nullableReference == null)\n",
        "117": "        ? Optional.<T>absent()\n",
        "118": "        : new Present<T>(nullableReference);\n",
        "135": "   * throws {@link IllegalStateException}, whereas the Java 8 counterpart throws\n",
        "136": "   * {@link java.util.NoSuchElementException NoSuchElementException}.\n",
        "138": "   * @throws IllegalStateException if the instance is absent ({@link #isPresent} returns\n",
        "139": "   *     {@code false}); depending on this <i>specific</i> exception type (over the more general\n",
        "140": "   *     {@link RuntimeException}) is discouraged\n",
        "152": "   * <pre>   {@code\n",
        "154": "   *   Optional<Integer> optionalInt = getSomeOptionalInt();\n",
        "155": "   *   Number value = optionalInt.or(0.5); // error\n",
        "157": "   *   FluentIterable<? extends Number> numbers = getSomeNumbers();\n",
        "158": "   *   Optional<? extends Number> first = numbers.first();\n",
        "159": "   *   Number value = first.or(0.5); // error}</pre>\n",
        "164": "   * <pre>   {@code\n",
        "166": "   *   Optional<Number> optionalInt = (Optional) getSomeOptionalInt();\n",
        "167": "   *   Number value = optionalInt.or(0.5); // fine\n",
        "169": "   *   FluentIterable<? extends Number> numbers = getSomeNumbers();\n",
        "170": "   *   Optional<Number> first = (Optional) numbers.first();\n",
        "171": "   *   Number value = first.or(0.5); // fine}</pre>\n",
        "173": "   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is similar to Java 8's\n",
        "174": "   * {@code Optional.orElse}, but will not accept {@code null} as a {@code defaultValue}\n",
        "175": "   * ({@link #orNull} must be used instead). As a result, the value returned by this method is\n",
        "176": "   * guaranteed non-null, which is not the case for the {@code java.util} equivalent.\n",
        "192": "   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is similar to Java 8's\n",
        "193": "   * {@code Optional.orElseGet}, except when {@code supplier} returns {@code null}. In this case\n",
        "194": "   * this method throws an exception, whereas the Java 8 method returns the {@code null} to the\n",
        "195": "   * caller.\n",
        "197": "   * @throws NullPointerException if this optional's value is absent and the supplier returns\n",
        "198": "   *     {@code null}\n",
        "218": "   * {@code Optional} class. However, this common usage: <pre>   {@code\n",
        "220": "   *   for (Foo foo : possibleFoo.asSet()) {\n",
        "221": "   *     doSomethingWith(foo);\n",
        "222": "   *   }}</pre>\n",
        "224": "   * ... can be replaced with: <pre>   {@code\n",
        "226": "   *   possibleFoo.ifPresent(foo -> doSomethingWith(foo));}</pre>\n",
        "236": "   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is similar to Java 8's\n",
        "237": "   * {@code Optional.map}, except when {@code function} returns {@code null}. In this case this\n",
        "238": "   * method throws an exception, whereas the Java 8 method returns {@code Optional.absent()}.\n",
        "279": "   * {@code Optional} class; use\n",
        "280": "   * {@code optionals.stream().filter(Optional::isPresent).map(Optional::get)} instead.\n"
    }
}