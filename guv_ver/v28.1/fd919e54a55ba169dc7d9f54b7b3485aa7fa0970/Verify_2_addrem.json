{
    "addition": {
        "24": " * Static convenience methods that serve the same purpose as Java language <a\n",
        "25": " * href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html\">assertions</a>,\n",
        "26": " * except that they are always enabled. These methods should be used instead of Java assertions\n",
        "27": " * whenever there is a chance the check may fail \"in real life\". Example:\n",
        "29": " * <pre>{@code\n",
        "30": " * Bill bill = remoteService.getLastUnpaidBill();\n",
        "32": " * // In case bug 12345 happens again we'd rather just die\n",
        "33": " * Verify.verify(bill.status() == Status.UNPAID,\n",
        "34": " *     \"Unexpected bill status: %s\", bill.status());\n",
        "35": " * }</pre>\n",
        "44": " *   <li>If checking whether the <i>caller</i> has violated your method or constructor's contract\n",
        "45": " *       (such as by passing an invalid argument), use the utilities of the {@link Preconditions}\n",
        "46": " *       class instead.\n",
        "47": " *   <li>If checking an <i>impossible</i> condition (which <i>cannot</i> happen unless your own\n",
        "48": " *       class or its <i>trusted</i> dependencies is badly broken), this is what ordinary Java\n",
        "49": " *       assertions are for. Note that assertions are not enabled by default; they are essentially\n",
        "50": " *       considered \"compiled comments.\"\n",
        "51": " *   <li>An explicit {@code if/throw} (as illustrated below) is always acceptable; we still\n",
        "52": " *       recommend using our {@link VerifyException} exception type. Throwing a plain {@link\n",
        "53": " *       RuntimeException} is frowned upon.\n",
        "54": " *   <li>Use of {@link java.util.Objects#requireNonNull(Object)} is generally discouraged, since\n",
        "55": " *       {@link #verifyNotNull(Object)} and {@link Preconditions#checkNotNull(Object)} perform the\n",
        "56": " *       same function with more clarity.\n",
        "64": " * usual form:\n",
        "66": " * <pre>{@code\n",
        "67": " * Bill bill = remoteService.getLastUnpaidBill();\n",
        "68": " * if (bill.status() != Status.UNPAID) {\n",
        "69": " *   throw new VerifyException(\"Unexpected bill status: \" + bill.status());\n",
        "70": " * }\n",
        "71": " * }</pre>\n",
        "110": "   *     argument. These are matched by position - the first {@code %s} gets {@code\n",
        "111": "   *     errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message in\n",
        "112": "   *     square braces. Unmatched placeholders will be left as-is.\n",
        "485": "   *     argument. These are matched by position - the first {@code %s} gets {@code\n",
        "486": "   *     errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message in\n",
        "487": "   *     square braces. Unmatched placeholders will be left as-is.\n"
    },
    "removed": {
        "24": " * Static convenience methods that serve the same purpose as Java language\n",
        "25": " * <a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html\">\n",
        "26": " * assertions</a>, except that they are always enabled. These methods should be used instead of Java\n",
        "27": " * assertions whenever there is a chance the check may fail \"in real life\". Example: <pre>   {@code\n",
        "29": " *   Bill bill = remoteService.getLastUnpaidBill();\n",
        "31": " *   // In case bug 12345 happens again we'd rather just die\n",
        "32": " *   Verify.verify(bill.status() == Status.UNPAID,\n",
        "33": " *       \"Unexpected bill status: %s\", bill.status());}</pre>\n",
        "42": " * <li>If checking whether the <i>caller</i> has violated your method or constructor's contract\n",
        "43": " *     (such as by passing an invalid argument), use the utilities of the {@link Preconditions}\n",
        "44": " *     class instead.\n",
        "45": " *\n",
        "46": " * <li>If checking an <i>impossible</i> condition (which <i>cannot</i> happen unless your own class\n",
        "47": " *     or its <i>trusted</i> dependencies is badly broken), this is what ordinary Java assertions\n",
        "48": " *     are for. Note that assertions are not enabled by default; they are essentially considered\n",
        "49": " *     \"compiled comments.\"\n",
        "50": " *\n",
        "51": " * <li>An explicit {@code if/throw} (as illustrated below) is always acceptable; we still recommend\n",
        "52": " *     using our {@link VerifyException} exception type. Throwing a plain {@link RuntimeException}\n",
        "53": " *     is frowned upon.\n",
        "54": " *\n",
        "55": " * <li>Use of {@link java.util.Objects#requireNonNull(Object)} is generally discouraged, since\n",
        "56": " *     {@link #verifyNotNull(Object)} and {@link Preconditions#checkNotNull(Object)} perform the\n",
        "57": " *     same function with more clarity.\n",
        "65": " * usual form: <pre>   {@code\n",
        "67": " *   Bill bill = remoteService.getLastUnpaidBill();\n",
        "68": " *   if (bill.status() != Status.UNPAID) {\n",
        "69": " *     throw new VerifyException(\"Unexpected bill status: \" + bill.status());\n",
        "70": " *   }}</pre>\n",
        "109": "   *     argument. These are matched by position - the first {@code %s} gets\n",
        "110": "   *     {@code errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted\n",
        "111": "   *     message in square braces. Unmatched placeholders will be left as-is.\n",
        "484": "   *     argument. These are matched by position - the first {@code %s} gets\n",
        "485": "   *     {@code errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted\n",
        "486": "   *     message in square braces. Unmatched placeholders will be left as-is.\n"
    }
}