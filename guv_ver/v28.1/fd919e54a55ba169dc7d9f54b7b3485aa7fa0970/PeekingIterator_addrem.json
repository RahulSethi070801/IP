{
    "addition": {
        "28": " * \"https://github.com/google/guava/wiki/CollectionHelpersExplained#peekingiterator\"> {@code\n",
        "29": " * PeekingIterator}</a>.\n",
        "39": "   * <p>Calls to {@code peek()} should not change the state of the iteration, except that it\n",
        "40": "   * <i>may</i> prevent removal of the most recent element via {@link #remove()}.\n",
        "42": "   * @throws NoSuchElementException if the iteration has no more elements according to {@link\n",
        "43": "   *     #hasNext()}\n",
        "50": "   * <p>The objects returned by consecutive calls to {@link #peek()} then {@link #next()} are\n",
        "51": "   * guaranteed to be equal to each other.\n",
        "60": "   * <p>Implementations may or may not support removal when a call to {@link #peek()} has occurred\n",
        "61": "   * since the most recent call to {@link #next()}.\n",
        "63": "   * @throws IllegalStateException if there has been a call to {@link #peek()} since the most recent\n",
        "64": "   *     call to {@link #next()} and this implementation does not support this sequence of calls\n",
        "65": "   *     (optional)\n"
    },
    "removed": {
        "28": " * \"https://github.com/google/guava/wiki/CollectionHelpersExplained#peekingiterator\">\n",
        "29": " * {@code PeekingIterator}</a>.\n",
        "39": "   * <p>Calls to {@code peek()} should not change the state of the iteration,\n",
        "40": "   * except that it <i>may</i> prevent removal of the most recent element via\n",
        "41": "   * {@link #remove()}.\n",
        "43": "   * @throws NoSuchElementException if the iteration has no more elements\n",
        "44": "   *     according to {@link #hasNext()}\n",
        "51": "   * <p>The objects returned by consecutive calls to {@link #peek()} then {@link\n",
        "52": "   * #next()} are guaranteed to be equal to each other.\n",
        "61": "   * <p>Implementations may or may not support removal when a call to {@link\n",
        "62": "   * #peek()} has occurred since the most recent call to {@link #next()}.\n",
        "64": "   * @throws IllegalStateException if there has been a call to {@link #peek()}\n",
        "65": "   *     since the most recent call to {@link #next()} and this implementation\n",
        "66": "   *     does not support this sequence of calls (optional)\n"
    }
}