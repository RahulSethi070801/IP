{
    "addition": {
        "79": "    suite.addTest(\n",
        "80": "        MapTestSuiteBuilder.using(new ImmutableMapGenerator())\n",
        "81": "            .withFeatures(\n",
        "82": "                CollectionSize.ANY,\n",
        "83": "                CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "84": "                CollectionFeature.KNOWN_ORDER,\n",
        "85": "                MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "86": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "87": "            .named(\"ImmutableMap\")\n",
        "88": "            .createTestSuite());\n",
        "89": "\n",
        "90": "    suite.addTest(\n",
        "91": "        MapTestSuiteBuilder.using(new ImmutableMapCopyOfGenerator())\n",
        "92": "            .withFeatures(\n",
        "93": "                CollectionSize.ANY,\n",
        "94": "                CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "95": "                CollectionFeature.KNOWN_ORDER,\n",
        "96": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "97": "            .named(\"ImmutableMap.copyOf[Map]\")\n",
        "98": "            .createTestSuite());\n",
        "99": "\n",
        "100": "    suite.addTest(\n",
        "101": "        MapTestSuiteBuilder.using(new ImmutableMapCopyOfEntriesGenerator())\n",
        "102": "            .withFeatures(\n",
        "103": "                CollectionSize.ANY,\n",
        "104": "                MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "105": "                CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "106": "                CollectionFeature.KNOWN_ORDER,\n",
        "107": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "108": "            .named(\"ImmutableMap.copyOf[Iterable<Entry>]\")\n",
        "109": "            .createTestSuite());\n",
        "110": "\n",
        "111": "    suite.addTest(\n",
        "112": "        MapTestSuiteBuilder.using(new ImmutableMapCopyOfEnumMapGenerator())\n",
        "113": "            .withFeatures(\n",
        "114": "                CollectionSize.ANY,\n",
        "115": "                CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "116": "                CollectionFeature.KNOWN_ORDER,\n",
        "117": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "118": "            .named(\"ImmutableMap.copyOf[EnumMap]\")\n",
        "119": "            .createTestSuite());\n",
        "120": "\n",
        "121": "    suite.addTest(\n",
        "122": "        MapTestSuiteBuilder.using(new ImmutableMapValuesAsSingletonSetGenerator())\n",
        "123": "            .withFeatures(\n",
        "124": "                CollectionSize.ANY,\n",
        "125": "                MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "126": "                CollectionFeature.KNOWN_ORDER,\n",
        "127": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "128": "            .named(\"ImmutableMap.asMultimap.asMap\")\n",
        "129": "            .createTestSuite());\n",
        "130": "\n",
        "131": "    suite.addTest(\n",
        "132": "        CollectionTestSuiteBuilder.using(new ImmutableMapUnhashableValuesGenerator())\n",
        "133": "            .withFeatures(\n",
        "134": "                CollectionSize.ANY,\n",
        "135": "                CollectionFeature.KNOWN_ORDER,\n",
        "136": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "137": "            .named(\"ImmutableMap.values, unhashable\")\n",
        "138": "            .createTestSuite());\n",
        "139": "\n",
        "140": "    suite.addTest(\n",
        "141": "        ListTestSuiteBuilder.using(new ImmutableMapKeyListGenerator())\n",
        "142": "            .named(\"ImmutableMap.keySet.asList\")\n",
        "143": "            .withFeatures(\n",
        "144": "                CollectionSize.ANY,\n",
        "145": "                CollectionFeature.SERIALIZABLE,\n",
        "146": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "147": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "148": "            .createTestSuite());\n",
        "149": "\n",
        "150": "    suite.addTest(\n",
        "151": "        ListTestSuiteBuilder.using(new ImmutableMapEntryListGenerator())\n",
        "152": "            .named(\"ImmutableMap.entrySet.asList\")\n",
        "153": "            .withFeatures(\n",
        "154": "                CollectionSize.ANY,\n",
        "155": "                CollectionFeature.SERIALIZABLE,\n",
        "156": "                CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "157": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "158": "            .createTestSuite());\n",
        "159": "\n",
        "160": "    suite.addTest(\n",
        "161": "        ListTestSuiteBuilder.using(new ImmutableMapValueListGenerator())\n",
        "162": "            .named(\"ImmutableMap.values.asList\")\n",
        "163": "            .withFeatures(\n",
        "164": "                CollectionSize.ANY,\n",
        "165": "                CollectionFeature.SERIALIZABLE,\n",
        "166": "                CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "167": "            .createTestSuite());\n",
        "172": "  public abstract static class AbstractMapTests<K, V> extends MapInterfaceTest<K, V> {\n",
        "177": "    @Override\n",
        "178": "    protected Map<K, V> makeEmptyMap() {\n",
        "184": "    @Override\n",
        "185": "    protected void assertMoreInvariants(Map<K, V> map) {\n",
        "188": "        assertEquals(entry.getKey() + \"=\" + entry.getValue(), entry.toString());\n",
        "191": "      assertEquals(\"{\" + joiner.join(map.entrySet()) + \"}\", map.toString());\n",
        "192": "      assertEquals(\"[\" + joiner.join(map.entrySet()) + \"]\", map.entrySet().toString());\n",
        "193": "      assertEquals(\"[\" + joiner.join(map.keySet()) + \"]\", map.keySet().toString());\n",
        "194": "      assertEquals(\"[\" + joiner.join(map.values()) + \"]\", map.values().toString());\n",
        "202": "    @Override\n",
        "203": "    protected Map<String, Integer> makeEmptyMap() {\n",
        "207": "    @Override\n",
        "208": "    protected Map<String, Integer> makePopulatedMap() {\n",
        "212": "    @Override\n",
        "213": "    protected String getKeyNotInPopulatedMap() {\n",
        "217": "    @Override\n",
        "218": "    protected Integer getValueNotInPopulatedMap() {\n",
        "223": "  public static class SingletonMapTests extends AbstractMapTests<String, Integer> {\n",
        "224": "    @Override\n",
        "225": "    protected Map<String, Integer> makePopulatedMap() {\n",
        "229": "    @Override\n",
        "230": "    protected String getKeyNotInPopulatedMap() {\n",
        "234": "    @Override\n",
        "235": "    protected Integer getValueNotInPopulatedMap() {\n",
        "242": "    @Override\n",
        "243": "    protected Map<String, Integer> makePopulatedMap() {\n",
        "244": "      return SerializableTester.reserialize(ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3));\n",
        "247": "    @Override\n",
        "248": "    protected String getKeyNotInPopulatedMap() {\n",
        "252": "    @Override\n",
        "253": "    protected Integer getValueNotInPopulatedMap() {\n",
        "258": "  public static class MapTestsWithBadHashes extends AbstractMapTests<Object, Integer> {\n",
        "260": "    @Override\n",
        "261": "    protected Map<Object, Integer> makeEmptyMap() {\n",
        "265": "    @Override\n",
        "266": "    protected Map<Object, Integer> makePopulatedMap() {\n",
        "275": "    @Override\n",
        "276": "    protected Object getKeyNotInPopulatedMap() {\n",
        "280": "    @Override\n",
        "281": "    protected Integer getValueNotInPopulatedMap() {\n",
        "289": "    @Override\n",
        "290": "    protected Map<Integer, UnhashableObject> makeEmptyMap() {\n",
        "294": "    @Override\n",
        "295": "    protected Map<Integer, UnhashableObject> makePopulatedMap() {\n",
        "297": "      return ImmutableMap.of(0, unhashables.e0(), 1, unhashables.e1(), 2, unhashables.e2());\n",
        "300": "    @Override\n",
        "301": "    protected Integer getKeyNotInPopulatedMap() {\n",
        "305": "    @Override\n",
        "306": "    protected UnhashableObject getValueNotInPopulatedMap() {\n",
        "313": "    @Override\n",
        "314": "    protected Map<Integer, UnhashableObject> makePopulatedMap() {\n",
        "322": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>().build();\n",
        "327": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>().put(\"one\", 1).build();\n",
        "332": "      ImmutableMap<String, Integer> map =\n",
        "333": "          new Builder<String, Integer>()\n",
        "334": "              .put(\"one\", 1)\n",
        "335": "              .put(\"two\", 2)\n",
        "336": "              .put(\"three\", 3)\n",
        "337": "              .put(\"four\", 4)\n",
        "338": "              .put(\"five\", 5)\n",
        "339": "              .build();\n",
        "340": "      assertMapEquals(map, \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "359": "      ImmutableMap<String, Integer> map =\n",
        "360": "          new Builder<String, Integer>()\n",
        "361": "              .orderEntriesByValue(Ordering.natural())\n",
        "362": "              .put(\"three\", 3)\n",
        "363": "              .put(\"one\", 1)\n",
        "364": "              .put(\"five\", 5)\n",
        "365": "              .put(\"four\", 4)\n",
        "366": "              .put(\"two\", 2)\n",
        "367": "              .build();\n",
        "368": "      assertMapEquals(map, \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "372": "      Builder<String, Integer> builder =\n",
        "373": "          new Builder<String, Integer>(2).put(\"four\", 4).put(\"one\", 1);\n",
        "382": "      ImmutableMap.Builder<String, Integer> builder =\n",
        "383": "          new Builder<String, Integer>().orderEntriesByValue(Ordering.natural());\n",
        "387": "      } catch (IllegalStateException expected) {\n",
        "388": "      }\n",
        "392": "      ImmutableMap<String, Integer> map =\n",
        "393": "          new Builder<String, Integer>().put(Maps.immutableEntry(\"one\", 1)).build();\n",
        "419": "      Entry<String, Integer> entry =\n",
        "420": "          new AbstractMapEntry<String, Integer>() {\n",
        "421": "            @Override\n",
        "422": "            public String getKey() {\n",
        "423": "              return holder.string;\n",
        "424": "            }\n",
        "425": "\n",
        "426": "            @Override\n",
        "427": "            public Integer getValue() {\n",
        "428": "              return 1;\n",
        "429": "            }\n",
        "430": "          };\n",
        "438": "      ImmutableMap<String, Integer> map =\n",
        "439": "          new Builder<String, Integer>().putAll(Collections.<String, Integer>emptyMap()).build();\n",
        "452": "      ImmutableMap<String, Integer> map =\n",
        "453": "          new Builder<String, Integer>().putAll(toPut).putAll(moreToPut).build();\n",
        "454": "      assertMapEquals(map, \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "459": "      ImmutableMap<String, Integer> mapOne = builder.put(\"one\", 1).put(\"two\", 2).build();\n",
        "460": "      ImmutableMap<String, Integer> mapTwo = builder.put(\"three\", 3).put(\"four\", 4).build();\n",
        "471": "      } catch (NullPointerException expected) {\n",
        "472": "      }\n",
        "482": "      } catch (NullPointerException expected) {\n",
        "483": "      }\n",
        "514": "      } catch (NullPointerException expected) {\n",
        "515": "      }\n",
        "557": "      Builder<String, Integer> builder =\n",
        "558": "          new Builder<String, Integer>()\n",
        "559": "              .put(\"one\", 1)\n",
        "560": "              .put(\"one\", 1); // throwing on this line would be even better\n",
        "570": "      assertMapEquals(ImmutableMap.of(\"one\", 1), \"one\", 1);\n",
        "571": "      assertMapEquals(ImmutableMap.of(\"one\", 1, \"two\", 2), \"one\", 1, \"two\", 2);\n",
        "573": "          ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3), \"one\", 1, \"two\", 2, \"three\", 3);\n",
        "576": "          \"one\",\n",
        "577": "          1,\n",
        "578": "          \"two\",\n",
        "579": "          2,\n",
        "580": "          \"three\",\n",
        "581": "          3,\n",
        "582": "          \"four\",\n",
        "583": "          4);\n",
        "586": "          \"one\",\n",
        "587": "          1,\n",
        "588": "          \"two\",\n",
        "589": "          2,\n",
        "590": "          \"three\",\n",
        "591": "          3,\n",
        "592": "          \"four\",\n",
        "593": "          4,\n",
        "594": "          \"five\",\n",
        "595": "          5);\n",
        "635": "      ImmutableMap<String, Integer> copy =\n",
        "636": "          ImmutableMap.copyOf(Collections.<String, Integer>emptyMap());\n",
        "642": "      ImmutableMap<String, Integer> copy = ImmutableMap.copyOf(Collections.singletonMap(\"one\", 1));\n",
        "706": "    ImmutableMap<String, Integer> map =\n",
        "707": "        ImmutableMap.of(\"one\", 1, \"won\", 1, \"two\", 2, \"too\", 2, \"three\", 3);\n",
        "708": "    ImmutableSetMultimap<String, Integer> expected =\n",
        "709": "        ImmutableSetMultimap.of(\"one\", 1, \"won\", 1, \"two\", 2, \"too\", 2, \"three\", 3);\n",
        "731": "    tester.testAllPublicInstanceMethods(new ImmutableMap.Builder<Object, Object>());\n",
        "734": "    tester.testAllPublicInstanceMethods(ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3));\n",
        "737": "  private static <K, V> void assertMapEquals(Map<K, V> map, Object... alternatingKeysAndValues) {\n",
        "753": "    @Override\n",
        "754": "    public boolean equals(Object o) {\n",
        "758": "    @Override\n",
        "759": "    public int hashCode() {\n",
        "771": "    assertTrue(map.entrySet().contains(Maps.immutableEntry(\"a\", new IntHolder(3))));\n",
        "791": "    assertEquals(Lists.newArrayList(map.values()), Lists.newArrayList(reserializedValues));\n",
        "797": "    ImmutableMap<Integer, Integer> map =\n",
        "798": "        ImmutableMap.<Integer, Integer>builder()\n",
        "799": "            .put(1, 1)\n",
        "800": "            .put(2, 2)\n",
        "801": "            .put(3, 3)\n",
        "802": "            .put(4, 4)\n",
        "803": "            .put(5, 5)\n",
        "804": "            .put(6, 6)\n",
        "805": "            .build();\n"
    },
    "removed": {
        "79": "    suite.addTest(MapTestSuiteBuilder.using(new ImmutableMapGenerator())\n",
        "80": "        .withFeatures(\n",
        "81": "            CollectionSize.ANY,\n",
        "82": "            CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "83": "            CollectionFeature.KNOWN_ORDER,\n",
        "84": "            MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "85": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "86": "        .named(\"ImmutableMap\")\n",
        "87": "        .createTestSuite());\n",
        "88": "\n",
        "89": "    suite.addTest(MapTestSuiteBuilder.using(new ImmutableMapCopyOfGenerator())\n",
        "90": "        .withFeatures(\n",
        "91": "            CollectionSize.ANY,\n",
        "92": "            CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "93": "            CollectionFeature.KNOWN_ORDER,\n",
        "94": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "95": "        .named(\"ImmutableMap.copyOf[Map]\")\n",
        "96": "        .createTestSuite());\n",
        "97": "\n",
        "98": "    suite.addTest(MapTestSuiteBuilder.using(new ImmutableMapCopyOfEntriesGenerator())\n",
        "99": "        .withFeatures(\n",
        "100": "            CollectionSize.ANY,\n",
        "101": "            MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "102": "            CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "103": "            CollectionFeature.KNOWN_ORDER,\n",
        "104": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "105": "        .named(\"ImmutableMap.copyOf[Iterable<Entry>]\")\n",
        "106": "        .createTestSuite());\n",
        "107": "\n",
        "108": "    suite.addTest(MapTestSuiteBuilder.using(new ImmutableMapCopyOfEnumMapGenerator())\n",
        "109": "        .withFeatures(\n",
        "110": "            CollectionSize.ANY,\n",
        "111": "            CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,\n",
        "112": "            CollectionFeature.KNOWN_ORDER,\n",
        "113": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "114": "        .named(\"ImmutableMap.copyOf[EnumMap]\")\n",
        "115": "        .createTestSuite());\n",
        "116": "\n",
        "117": "    suite.addTest(MapTestSuiteBuilder.using(new ImmutableMapValuesAsSingletonSetGenerator())\n",
        "118": "        .withFeatures(\n",
        "119": "            CollectionSize.ANY,\n",
        "120": "            MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "121": "            CollectionFeature.KNOWN_ORDER,\n",
        "122": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "123": "        .named(\"ImmutableMap.asMultimap.asMap\")\n",
        "124": "        .createTestSuite());\n",
        "125": "\n",
        "126": "   suite.addTest(CollectionTestSuiteBuilder.using(\n",
        "127": "            new ImmutableMapUnhashableValuesGenerator())\n",
        "128": "        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER,\n",
        "129": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "130": "        .named(\"ImmutableMap.values, unhashable\")\n",
        "131": "        .createTestSuite());\n",
        "132": "\n",
        "133": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "134": "        new ImmutableMapKeyListGenerator())\n",
        "135": "        .named(\"ImmutableMap.keySet.asList\")\n",
        "136": "        .withFeatures(CollectionSize.ANY,\n",
        "137": "            CollectionFeature.SERIALIZABLE,\n",
        "138": "            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "139": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "140": "        .createTestSuite());\n",
        "141": "\n",
        "142": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "143": "        new ImmutableMapEntryListGenerator())\n",
        "144": "        .named(\"ImmutableMap.entrySet.asList\")\n",
        "145": "        .withFeatures(CollectionSize.ANY,\n",
        "146": "            CollectionFeature.SERIALIZABLE,\n",
        "147": "            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,\n",
        "148": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "149": "        .createTestSuite());\n",
        "150": "\n",
        "151": "    suite.addTest(ListTestSuiteBuilder.using(\n",
        "152": "        new ImmutableMapValueListGenerator())\n",
        "153": "        .named(\"ImmutableMap.values.asList\")\n",
        "154": "        .withFeatures(CollectionSize.ANY,\n",
        "155": "            CollectionFeature.SERIALIZABLE,\n",
        "156": "            CollectionFeature.ALLOWS_NULL_QUERIES)\n",
        "157": "        .createTestSuite());\n",
        "162": "  public abstract static class AbstractMapTests<K, V>\n",
        "163": "      extends MapInterfaceTest<K, V> {\n",
        "168": "    @Override protected Map<K, V> makeEmptyMap() {\n",
        "174": "    @Override protected void assertMoreInvariants(Map<K, V> map) {\n",
        "177": "        assertEquals(entry.getKey() + \"=\" + entry.getValue(),\n",
        "178": "            entry.toString());\n",
        "181": "      assertEquals(\"{\" + joiner.join(map.entrySet()) + \"}\",\n",
        "182": "          map.toString());\n",
        "183": "      assertEquals(\"[\" + joiner.join(map.entrySet()) + \"]\",\n",
        "184": "          map.entrySet().toString());\n",
        "185": "      assertEquals(\"[\" + joiner.join(map.keySet()) + \"]\",\n",
        "186": "          map.keySet().toString());\n",
        "187": "      assertEquals(\"[\" + joiner.join(map.values()) + \"]\",\n",
        "188": "          map.values().toString());\n",
        "196": "    @Override protected Map<String, Integer> makeEmptyMap() {\n",
        "200": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "204": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "208": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "213": "  public static class SingletonMapTests\n",
        "214": "      extends AbstractMapTests<String, Integer> {\n",
        "215": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "219": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "223": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "230": "    @Override protected Map<String, Integer> makePopulatedMap() {\n",
        "231": "      return SerializableTester.reserialize(\n",
        "232": "          ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3));\n",
        "235": "    @Override protected String getKeyNotInPopulatedMap() {\n",
        "239": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "244": "  public static class MapTestsWithBadHashes\n",
        "245": "      extends AbstractMapTests<Object, Integer> {\n",
        "247": "    @Override protected Map<Object, Integer> makeEmptyMap() {\n",
        "251": "    @Override protected Map<Object, Integer> makePopulatedMap() {\n",
        "260": "    @Override protected Object getKeyNotInPopulatedMap() {\n",
        "264": "    @Override protected Integer getValueNotInPopulatedMap() {\n",
        "272": "    @Override protected Map<Integer, UnhashableObject> makeEmptyMap() {\n",
        "276": "    @Override protected Map<Integer, UnhashableObject> makePopulatedMap() {\n",
        "278": "      return ImmutableMap.of(\n",
        "279": "          0, unhashables.e0(), 1, unhashables.e1(), 2, unhashables.e2());\n",
        "282": "    @Override protected Integer getKeyNotInPopulatedMap() {\n",
        "286": "    @Override protected UnhashableObject getValueNotInPopulatedMap() {\n",
        "293": "    @Override protected Map<Integer, UnhashableObject> makePopulatedMap() {\n",
        "301": "      ImmutableMap<String, Integer> map\n",
        "302": "          = new Builder<String, Integer>().build();\n",
        "307": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>()\n",
        "308": "          .put(\"one\", 1)\n",
        "309": "          .build();\n",
        "314": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>()\n",
        "315": "          .put(\"one\", 1)\n",
        "316": "          .put(\"two\", 2)\n",
        "317": "          .put(\"three\", 3)\n",
        "318": "          .put(\"four\", 4)\n",
        "319": "          .put(\"five\", 5)\n",
        "320": "          .build();\n",
        "321": "      assertMapEquals(map,\n",
        "322": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "341": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>()\n",
        "342": "          .orderEntriesByValue(Ordering.natural())\n",
        "343": "          .put(\"three\", 3)\n",
        "344": "          .put(\"one\", 1)\n",
        "345": "          .put(\"five\", 5)\n",
        "346": "          .put(\"four\", 4)\n",
        "347": "          .put(\"two\", 2)\n",
        "348": "          .build();\n",
        "349": "      assertMapEquals(map,\n",
        "350": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "354": "      Builder<String, Integer> builder = new Builder<String, Integer>(2)\n",
        "355": "          .put(\"four\", 4)\n",
        "356": "          .put(\"one\", 1);\n",
        "365": "      ImmutableMap.Builder<String, Integer> builder = new Builder<String, Integer>()\n",
        "366": "          .orderEntriesByValue(Ordering.natural());\n",
        "370": "      } catch (IllegalStateException expected) {}\n",
        "374": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>()\n",
        "375": "          .put(Maps.immutableEntry(\"one\", 1))\n",
        "376": "          .build();\n",
        "402": "      Entry<String, Integer> entry = new AbstractMapEntry<String, Integer>() {\n",
        "403": "        @Override public String getKey() {\n",
        "404": "          return holder.string;\n",
        "405": "        }\n",
        "406": "        @Override public Integer getValue() {\n",
        "407": "          return 1;\n",
        "408": "        }\n",
        "409": "      };\n",
        "417": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>()\n",
        "418": "          .putAll(Collections.<String, Integer>emptyMap())\n",
        "419": "          .build();\n",
        "432": "      ImmutableMap<String, Integer> map = new Builder<String, Integer>()\n",
        "433": "          .putAll(toPut)\n",
        "434": "          .putAll(moreToPut)\n",
        "435": "          .build();\n",
        "436": "      assertMapEquals(map,\n",
        "437": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "442": "      ImmutableMap<String, Integer> mapOne = builder\n",
        "443": "          .put(\"one\", 1)\n",
        "444": "          .put(\"two\", 2)\n",
        "445": "          .build();\n",
        "446": "      ImmutableMap<String, Integer> mapTwo = builder\n",
        "447": "          .put(\"three\", 3)\n",
        "448": "          .put(\"four\", 4)\n",
        "449": "          .build();\n",
        "460": "      } catch (NullPointerException expected) {}\n",
        "470": "      } catch (NullPointerException expected) {}\n",
        "501": "      } catch (NullPointerException expected) {}\n",
        "543": "      Builder<String, Integer> builder = new Builder<String, Integer>()\n",
        "544": "          .put(\"one\", 1)\n",
        "545": "          .put(\"one\", 1); // throwing on this line would be even better\n",
        "556": "          ImmutableMap.of(\"one\", 1),\n",
        "557": "          \"one\", 1);\n",
        "558": "      assertMapEquals(\n",
        "559": "          ImmutableMap.of(\"one\", 1, \"two\", 2),\n",
        "560": "          \"one\", 1, \"two\", 2);\n",
        "561": "      assertMapEquals(\n",
        "562": "          ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3),\n",
        "563": "          \"one\", 1, \"two\", 2, \"three\", 3);\n",
        "566": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4);\n",
        "569": "          \"one\", 1, \"two\", 2, \"three\", 3, \"four\", 4, \"five\", 5);\n",
        "609": "      ImmutableMap<String, Integer> copy\n",
        "610": "          = ImmutableMap.copyOf(Collections.<String, Integer>emptyMap());\n",
        "616": "      ImmutableMap<String, Integer> copy\n",
        "617": "          = ImmutableMap.copyOf(Collections.singletonMap(\"one\", 1));\n",
        "681": "    ImmutableMap<String, Integer> map = ImmutableMap.of(\n",
        "682": "        \"one\", 1, \"won\", 1, \"two\", 2, \"too\", 2, \"three\", 3);\n",
        "683": "    ImmutableSetMultimap<String, Integer> expected = ImmutableSetMultimap.of(\n",
        "684": "        \"one\", 1, \"won\", 1, \"two\", 2, \"too\", 2, \"three\", 3);\n",
        "706": "    tester.testAllPublicInstanceMethods(\n",
        "707": "        new ImmutableMap.Builder<Object, Object>());\n",
        "710": "    tester.testAllPublicInstanceMethods(\n",
        "711": "        ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3));\n",
        "714": "  private static <K, V> void assertMapEquals(Map<K, V> map,\n",
        "715": "      Object... alternatingKeysAndValues) {\n",
        "731": "    @Override public boolean equals(Object o) {\n",
        "735": "    @Override public int hashCode() {\n",
        "747": "    assertTrue(map.entrySet().contains(\n",
        "748": "        Maps.immutableEntry(\"a\", new IntHolder(3))));\n",
        "768": "    assertEquals(Lists.newArrayList(map.values()),\n",
        "769": "        Lists.newArrayList(reserializedValues));\n",
        "775": "    ImmutableMap<Integer, Integer> map = ImmutableMap.<Integer, Integer>builder()\n",
        "776": "        .put(1, 1)\n",
        "777": "        .put(2, 2)\n",
        "778": "        .put(3, 3)\n",
        "779": "        .put(4, 4)\n",
        "780": "        .put(5, 5)\n",
        "781": "        .put(6, 6)\n",
        "782": "        .build();\n"
    }
}