{
    "addition": {
        "38": " * Base class for {@link ImmutableSet} and {@link ImmutableSortedSet} tests.\n",
        "127": "    String[] array = new String[] {\"a\"};\n",
        "141": "    String[] array = new String[] {null};\n",
        "186": "  enum TestEnum {\n",
        "187": "    A,\n",
        "188": "    B,\n",
        "189": "    C,\n",
        "190": "    D\n",
        "191": "  }\n",
        "284": "    new IteratorTester<String>(\n",
        "285": "        5, UNMODIFIABLE, Collections.singleton(\"a\"), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "286": "      @Override\n",
        "287": "      protected Iterator<String> newTargetIterator() {\n",
        "295": "    new IteratorTester<String>(\n",
        "296": "        5, UNMODIFIABLE, asList(\"a\", \"b\", \"c\"), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "297": "      @Override\n",
        "298": "      protected Iterator<String> newTargetIterator() {\n",
        "321": "    ImmutableSet<String> set =\n",
        "322": "        this.<String>builder()\n",
        "323": "            .add(\"a\")\n",
        "324": "            .add(\"b\", \"c\")\n",
        "325": "            .add(\"d\", \"e\", \"f\")\n",
        "326": "            .add(\"g\", \"h\", \"i\", \"j\")\n",
        "327": "            .build();\n",
        "328": "    assertThat(set).containsExactly(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\").inOrder();\n",
        "332": "    ImmutableSet.Builder<String> builder = this.<String>builder().add(\"a\").add(\"b\");\n",
        "339": "    ImmutableSet<String> set =\n",
        "340": "        this.<String>builder()\n",
        "341": "            .add(\"a\")\n",
        "342": "            .add(\"a\", \"a\")\n",
        "343": "            .add(\"a\", \"a\", \"a\")\n",
        "344": "            .add(\"a\", \"a\", \"a\", \"a\")\n",
        "345": "            .build();\n",
        "352": "    ImmutableSet.Builder<String> builder = this.<String>builder().add(\"a\").add(\"a\", \"a\").add(\"b\");\n",
        "361": "    ImmutableSet<String> set = this.<String>builder().addAll(a).addAll(b).build();\n",
        "370": "    ImmutableSet.Builder<Integer> webSafeColorsBuilder = this.<Integer>builder();\n",
        "380": "    Integer[] webSafeColorArray = webSafeColors.toArray(new Integer[webSafeColors.size()]);\n",
        "386": "    ImmutableSet<Integer> addedColor = webSafeColorsBuilder.add(LAST_COLOR_ADDED).build();\n",
        "389": "        216,\n",
        "390": "        webSafeColors.size());\n",
        "391": "    assertEquals(\"the new array should be one bigger than webSafeColors\", 217, addedColor.size());\n",
        "392": "    Integer[] appendColorArray = addedColor.toArray(new Integer[addedColor.size()]);\n",
        "393": "    assertEquals(getComplexBuilderSetLastElement(), (int) appendColorArray[216]);\n",
        "402": "      fail(\"expected NullPointerException\"); // COV_NF_LINE\n",
        "409": "      fail(\"expected NullPointerException\"); // COV_NF_LINE\n",
        "416": "      fail(\"expected NullPointerException\"); // COV_NF_LINE\n",
        "423": "      fail(\"expected NullPointerException\"); // COV_NF_LINE\n",
        "430": "      fail(\"expected NullPointerException\"); // COV_NF_LINE\n",
        "437": "      fail(\"expected NullPointerException\"); // COV_NF_LINE\n",
        "446": "      fail(\"expected NullPointerException\"); // COV_NF_LINE\n",
        "452": "      fail(\"expected NullPointerException\"); // COV_NF_LINE\n",
        "460": "      fail(\"expected NullPointerException\"); // COV_NF_LINE\n",
        "467": "      fail(\"expected NullPointerException\"); // COV_NF_LINE\n",
        "473": "   * Verify thread safety by using a collection whose size() may be inconsistent with the actual\n",
        "474": "   * number of elements. Tests using this method might fail in GWT because the GWT emulations might\n",
        "475": "   * count on size() during copy. It is safe to do so in GWT because javascript is single-threaded.\n",
        "487": "        assertEquals(\n",
        "488": "            \"delta: \" + delta + \" sample size: \" + i,\n",
        "489": "            Sets.newHashSet(expected),\n",
        "490": "            copyOf(misleading));\n"
    },
    "removed": {
        "38": " * Base class for {@link ImmutableSet} and  {@link ImmutableSortedSet} tests.\n",
        "117": "    String[] array = new String[] { \"a\" };\n",
        "131": "    String[] array = new String[] { null };\n",
        "176": "  enum TestEnum { A, B, C, D }\n",
        "268": "    new IteratorTester<String>(5, UNMODIFIABLE, Collections.singleton(\"a\"),\n",
        "269": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "270": "      @Override protected Iterator<String> newTargetIterator() {\n",
        "278": "    new IteratorTester<String>(5, UNMODIFIABLE, asList(\"a\", \"b\", \"c\"),\n",
        "279": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "280": "      @Override protected Iterator<String> newTargetIterator() {\n",
        "303": "    ImmutableSet<String> set = this.<String>builder()\n",
        "304": "        .add(\"a\")\n",
        "305": "        .add(\"b\", \"c\")\n",
        "306": "        .add(\"d\", \"e\", \"f\")\n",
        "307": "        .add(\"g\", \"h\", \"i\", \"j\")\n",
        "308": "        .build();\n",
        "309": "    assertThat(set).containsExactly(\n",
        "310": "        \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\").inOrder();\n",
        "314": "    ImmutableSet.Builder<String> builder = this.<String>builder()\n",
        "315": "        .add(\"a\")\n",
        "316": "        .add(\"b\");\n",
        "323": "    ImmutableSet<String> set = this.<String>builder()\n",
        "324": "        .add(\"a\")\n",
        "325": "        .add(\"a\", \"a\")\n",
        "326": "        .add(\"a\", \"a\", \"a\")\n",
        "327": "        .add(\"a\", \"a\", \"a\", \"a\")\n",
        "328": "        .build();\n",
        "335": "    ImmutableSet.Builder<String> builder = this.<String>builder()\n",
        "336": "        .add(\"a\")\n",
        "337": "        .add(\"a\", \"a\")\n",
        "338": "        .add(\"b\");\n",
        "347": "    ImmutableSet<String> set = this.<String>builder()\n",
        "348": "        .addAll(a)\n",
        "349": "        .addAll(b)\n",
        "350": "        .build();\n",
        "359": "    ImmutableSet.Builder<Integer> webSafeColorsBuilder\n",
        "360": "        = this.<Integer>builder();\n",
        "370": "    Integer[] webSafeColorArray =\n",
        "371": "        webSafeColors.toArray(new Integer[webSafeColors.size()]);\n",
        "377": "    ImmutableSet<Integer> addedColor\n",
        "378": "        = webSafeColorsBuilder.add(LAST_COLOR_ADDED).build();\n",
        "381": "        216, webSafeColors.size());\n",
        "382": "    assertEquals(\"the new array should be one bigger than webSafeColors\",\n",
        "383": "        217, addedColor.size());\n",
        "384": "    Integer[] appendColorArray =\n",
        "385": "        addedColor.toArray(new Integer[addedColor.size()]);\n",
        "386": "    assertEquals(\n",
        "387": "        getComplexBuilderSetLastElement(), (int) appendColorArray[216]);\n",
        "396": "      fail(\"expected NullPointerException\");  // COV_NF_LINE\n",
        "403": "      fail(\"expected NullPointerException\");  // COV_NF_LINE\n",
        "410": "      fail(\"expected NullPointerException\");  // COV_NF_LINE\n",
        "417": "      fail(\"expected NullPointerException\");  // COV_NF_LINE\n",
        "424": "      fail(\"expected NullPointerException\");  // COV_NF_LINE\n",
        "431": "      fail(\"expected NullPointerException\");  // COV_NF_LINE\n",
        "440": "      fail(\"expected NullPointerException\");  // COV_NF_LINE\n",
        "446": "      fail(\"expected NullPointerException\");  // COV_NF_LINE\n",
        "454": "      fail(\"expected NullPointerException\");  // COV_NF_LINE\n",
        "461": "      fail(\"expected NullPointerException\");  // COV_NF_LINE\n",
        "467": "   * Verify thread safety by using a collection whose size() may be inconsistent\n",
        "468": "   * with the actual number of elements.  Tests using this method might fail in\n",
        "469": "   * GWT because the GWT emulations might count on size() during copy.  It is\n",
        "470": "   * safe to do so in GWT because javascript is single-threaded.\n",
        "482": "        assertEquals(\"delta: \" + delta + \" sample size: \" + i,\n",
        "483": "            Sets.newHashSet(expected), copyOf(misleading));\n"
    }
}