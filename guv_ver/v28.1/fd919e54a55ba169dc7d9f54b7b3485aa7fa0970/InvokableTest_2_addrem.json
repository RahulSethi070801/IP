{
    "addition": {
        "44": "    assertEquals(Prepender.class, Prepender.constructor().getReturnType().getType());\n",
        "63": "    assertEquals(\n",
        "64": "        ImmutableList.copyOf(type.getTypeParameters()),\n",
        "69": "    assertEquals(\n",
        "70": "        ImmutableList.of(TypeToken.of(NullPointerException.class)),\n",
        "102": "    Invokable<?, Prepender> delegate =\n",
        "103": "        Prepender.constructor(String.class, int.class).returning(Prepender.class);\n",
        "114": "    } catch (IllegalArgumentException expected) {\n",
        "115": "    }\n",
        "152": "    Iterable<String> result =\n",
        "153": "        (Iterable<String>) delegate.invoke(null, \"a\", ImmutableList.of(\"b\", \"c\"));\n",
        "158": "    Invokable<?, Iterable<String>> delegate =\n",
        "159": "        Prepender.method(\"prepend\", String.class, Iterable.class)\n",
        "160": "            .returning(new TypeToken<Iterable<String>>() {});\n",
        "168": "    Invokable<?, Iterable> delegate =\n",
        "169": "        Prepender.method(\"prepend\", String.class, Iterable.class).returning(Iterable.class);\n",
        "181": "    } catch (IllegalArgumentException expected) {\n",
        "182": "    }\n",
        "194": "            TypeToken.of(IllegalArgumentException.class), TypeToken.of(NullPointerException.class)),\n",
        "215": "    Iterable<String> result =\n",
        "216": "        (Iterable<String>) delegate.invoke(new Prepender(\"a\", 2), ImmutableList.of(\"b\", \"c\"));\n",
        "221": "    Invokable<Prepender, Iterable<String>> delegate =\n",
        "222": "        Prepender.method(\"prepend\", Iterable.class).returning(new TypeToken<Iterable<String>>() {});\n",
        "230": "    Invokable<Prepender, Iterable> delegate =\n",
        "231": "        Prepender.method(\"prepend\", Iterable.class).returning(Iterable.class);\n",
        "234": "    Iterable<String> result = delegate.invoke(new Prepender(\"a\", 2), ImmutableList.of(\"b\", \"c\"));\n",
        "243": "    } catch (IllegalArgumentException expected) {\n",
        "244": "    }\n",
        "311": "    Invokable<?, ?> delegate = Invokable.from(FinalClass.class.getDeclaredMethod(\"notFinalMethod\"));\n",
        "321": "    Constructor<?> constructor = InnerWithDefaultConstructor.class.getDeclaredConstructors()[0];\n",
        "327": "        InnerWithDefaultConstructor.NestedInner.class.getDeclaredConstructors()[0];\n",
        "351": "        InnerWithAnnotatedConstructorParameter.class.getDeclaredConstructors()[0];\n",
        "364": "        InnerWithGenericConstructorParameter.class.getDeclaredConstructors()[0];\n",
        "367": "    assertEquals(new TypeToken<Iterable<String>>() {}, invokable.getParameters().get(0).getType());\n",
        "368": "    assertEquals(TypeToken.of(String.class), invokable.getParameters().get(1).getType());\n",
        "374": "    Class<?> anonymous =\n",
        "375": "        new Runnable() {\n",
        "376": "          @Override\n",
        "377": "          public void run() {\n",
        "378": "            System.out.println(s + i);\n",
        "379": "          }\n",
        "380": "        }.getClass();\n",
        "381": "    Constructor<?> constructor = anonymous.getDeclaredConstructors()[0];\n",
        "391": "    Constructor<?> constructor = anonymous.getDeclaredConstructors()[0];\n",
        "399": "      @Override\n",
        "400": "      public void run() {\n",
        "404": "    Constructor<?> constructor = LocalWithDefaultConstructor.class.getDeclaredConstructors()[0];\n",
        "415": "    Class<?> anonymous =\n",
        "416": "        new Runnable() {\n",
        "417": "          @Override\n",
        "418": "          public void run() {\n",
        "419": "            System.out.println(s + i);\n",
        "420": "          }\n",
        "421": "        }.getClass();\n",
        "422": "    Constructor<?> constructor = anonymous.getDeclaredConstructors()[0];\n",
        "434": "      Class<?> anonymous =\n",
        "435": "          new Runnable() {\n",
        "436": "            @Override\n",
        "437": "            public void run() {\n",
        "438": "              System.out.println(s + i);\n",
        "439": "            }\n",
        "440": "          }.getClass();\n",
        "441": "      Constructor<?> constructor = anonymous.getDeclaredConstructors()[0];\n",
        "453": "      Constructor<?> constructor = Local.class.getDeclaredConstructors()[0];\n",
        "465": "      Constructor<?> constructor = Local.class.getDeclaredConstructors()[0];\n",
        "484": "      Constructor<?> constructor = Local.class.getDeclaredConstructors()[0];\n",
        "512": "        LocalWithAnnotatedConstructorParameter.class.getDeclaredConstructors()[0];\n",
        "524": "        LocalWithGenericConstructorParameter.class.getDeclaredConstructors()[0];\n",
        "527": "    assertEquals(new TypeToken<Iterable<String>>() {}, invokable.getParameters().get(0).getType());\n",
        "528": "    assertEquals(TypeToken.of(String.class), invokable.getParameters().get(1).getType());\n",
        "587": "        Invokable<Prepender, Object> invokable =\n",
        "588": "            (Invokable<Prepender, Object>) Invokable.from(method);\n"
    },
    "removed": {
        "44": "    assertEquals(Prepender.class,\n",
        "45": "        Prepender.constructor().getReturnType().getType());\n",
        "64": "    assertEquals(ImmutableList.copyOf(type.getTypeParameters()),\n",
        "69": "    assertEquals(ImmutableList.of(TypeToken.of(NullPointerException.class)),\n",
        "101": "    Invokable<?, Prepender> delegate = Prepender.constructor(String.class, int.class)\n",
        "102": "        .returning(Prepender.class);\n",
        "113": "    } catch (IllegalArgumentException expected) {}\n",
        "150": "    Iterable<String> result = (Iterable<String>)\n",
        "151": "        delegate.invoke(null, \"a\", ImmutableList.of(\"b\", \"c\"));\n",
        "156": "    Invokable<?, Iterable<String>> delegate = Prepender.method(\n",
        "157": "            \"prepend\", String.class, Iterable.class)\n",
        "158": "        .returning(new TypeToken<Iterable<String>>() {});\n",
        "166": "    Invokable<?, Iterable> delegate = Prepender.method(\n",
        "167": "            \"prepend\", String.class, Iterable.class)\n",
        "168": "        .returning(Iterable.class);\n",
        "180": "    } catch (IllegalArgumentException expected) {}\n",
        "192": "            TypeToken.of(IllegalArgumentException.class),\n",
        "193": "            TypeToken.of(NullPointerException.class)),\n",
        "214": "    Iterable<String> result = (Iterable<String>)\n",
        "215": "        delegate.invoke(new Prepender(\"a\", 2), ImmutableList.of(\"b\", \"c\"));\n",
        "220": "    Invokable<Prepender, Iterable<String>> delegate = Prepender.method(\n",
        "221": "            \"prepend\", Iterable.class)\n",
        "222": "        .returning(new TypeToken<Iterable<String>>() {});\n",
        "230": "    Invokable<Prepender, Iterable> delegate = Prepender.method(\"prepend\", Iterable.class)\n",
        "231": "        .returning(Iterable.class);\n",
        "234": "    Iterable<String> result = delegate.invoke(\n",
        "235": "        new Prepender(\"a\", 2), ImmutableList.of(\"b\", \"c\"));\n",
        "244": "    } catch (IllegalArgumentException expected) {}\n",
        "311": "    Invokable<?, ?> delegate = Invokable.from(\n",
        "312": "        FinalClass.class.getDeclaredMethod(\"notFinalMethod\"));\n",
        "322": "    Constructor<?> constructor =\n",
        "323": "        InnerWithDefaultConstructor.class.getDeclaredConstructors() [0];\n",
        "329": "        InnerWithDefaultConstructor.NestedInner.class.getDeclaredConstructors() [0];\n",
        "353": "        InnerWithAnnotatedConstructorParameter.class.getDeclaredConstructors() [0];\n",
        "366": "        InnerWithGenericConstructorParameter.class.getDeclaredConstructors() [0];\n",
        "369": "    assertEquals(new TypeToken<Iterable<String>>() {},\n",
        "370": "        invokable.getParameters().get(0).getType());\n",
        "371": "    assertEquals(TypeToken.of(String.class),\n",
        "372": "        invokable.getParameters().get(1).getType());\n",
        "378": "    Class<?> anonymous = new Runnable() {\n",
        "379": "      @Override public void run() {\n",
        "380": "        System.out.println(s + i);\n",
        "381": "      }\n",
        "382": "    }.getClass();\n",
        "383": "    Constructor<?> constructor = anonymous.getDeclaredConstructors() [0];\n",
        "393": "    Constructor<?> constructor = anonymous.getDeclaredConstructors() [0];\n",
        "401": "      @Override public void run() {\n",
        "405": "    Constructor<?> constructor = LocalWithDefaultConstructor.class.getDeclaredConstructors() [0];\n",
        "416": "    Class<?> anonymous = new Runnable() {\n",
        "417": "      @Override public void run() {\n",
        "418": "        System.out.println(s + i);\n",
        "419": "      }\n",
        "420": "    }.getClass();\n",
        "421": "    Constructor<?> constructor = anonymous.getDeclaredConstructors() [0];\n",
        "433": "      Class<?> anonymous = new Runnable() {\n",
        "434": "        @Override public void run() {\n",
        "435": "          System.out.println(s + i);\n",
        "436": "        }\n",
        "437": "      }.getClass();\n",
        "438": "      Constructor<?> constructor = anonymous.getDeclaredConstructors() [0];\n",
        "450": "      Constructor<?> constructor = Local.class.getDeclaredConstructors() [0];\n",
        "462": "      Constructor<?> constructor = Local.class.getDeclaredConstructors() [0];\n",
        "481": "      Constructor<?> constructor = Local.class.getDeclaredConstructors() [0];\n",
        "509": "        LocalWithAnnotatedConstructorParameter.class.getDeclaredConstructors() [0];\n",
        "521": "        LocalWithGenericConstructorParameter.class.getDeclaredConstructors() [0];\n",
        "524": "    assertEquals(new TypeToken<Iterable<String>>() {},\n",
        "525": "        invokable.getParameters().get(0).getType());\n",
        "526": "    assertEquals(TypeToken.of(String.class),\n",
        "527": "        invokable.getParameters().get(1).getType());\n",
        "586": "        Invokable<Prepender, Object> invokable = (Invokable<Prepender, Object>)\n",
        "587": "            Invokable.from(method);\n"
    }
}