{
    "addition": {
        "59": "    assertEquals(\n",
        "60": "        \"I'm a string\",\n",
        "61": "        Functions.toStringFunction()\n",
        "62": "            .apply(\n",
        "63": "                new Object() {\n",
        "64": "                  @Override\n",
        "65": "                  public String toString() {\n",
        "66": "                    return \"I'm a string\";\n",
        "67": "                  }\n",
        "68": "                }));\n",
        "148": "            function, Functions.forMap(map, 42), SerializableTester.reserialize(function))\n",
        "206": "    Function<String, Integer> japaneseToInteger = Functions.forMap(mJapaneseToInteger);\n",
        "212": "    Function<Integer, String> integerToSpanish = Functions.forMap(mIntegerToSpanish);\n",
        "231": "        .addEqualityGroup(japaneseToSpanish, Functions.compose(integerToSpanish, japaneseToInteger))\n",
        "234": "        .addEqualityGroup(Functions.compose(japaneseToInteger, integerToSpanish))\n",
        "244": "    Function<String, Integer> japaneseToInteger = Functions.forMap(mJapaneseToInteger);\n",
        "250": "    Function<Integer, String> integerToSpanish = Functions.forMap(mIntegerToSpanish);\n",
        "262": "        .addEqualityGroup(Functions.compose(japaneseToInteger, integerToSpanish))\n",
        "268": "    Function<String, Integer> japaneseToInteger = Functions.forMap(mapJapaneseToInteger);\n",
        "284": "    Map<Float, String> m = ImmutableMap.of(4.0f, \"A\", 3.0f, \"B\", 2.0f, \"C\", 1.0f, \"D\");\n",
        "303": "    Map<Float, String> m = ImmutableMap.of(4.0f, \"A\", 3.0f, \"B\", 2.0f, \"C\", 1.0f, \"D\");\n",
        "322": "    Function<Object, Boolean> alwaysTrue = Functions.forPredicate(Predicates.alwaysTrue());\n",
        "323": "    Function<Object, Boolean> alwaysFalse = Functions.forPredicate(Predicates.alwaysFalse());\n",
        "329": "        .addEqualityGroup(alwaysTrue, Functions.forPredicate(Predicates.alwaysTrue()))\n",
        "369": "  private static class CountingSupplier implements Supplier<Integer>, Serializable {\n"
    },
    "removed": {
        "59": "    assertEquals(\"I'm a string\",\n",
        "60": "        Functions.toStringFunction().apply(\n",
        "61": "            new Object() {\n",
        "62": "              @Override public String toString() {\n",
        "63": "                return \"I'm a string\";\n",
        "64": "              }\n",
        "65": "            }));\n",
        "145": "            function,\n",
        "146": "            Functions.forMap(map, 42),\n",
        "147": "            SerializableTester.reserialize(function))\n",
        "205": "    Function<String, Integer> japaneseToInteger =\n",
        "206": "        Functions.forMap(mJapaneseToInteger);\n",
        "212": "    Function<Integer, String> integerToSpanish =\n",
        "213": "        Functions.forMap(mIntegerToSpanish);\n",
        "232": "        .addEqualityGroup(\n",
        "233": "            japaneseToSpanish,\n",
        "234": "            Functions.compose(integerToSpanish, japaneseToInteger))\n",
        "237": "        .addEqualityGroup(\n",
        "238": "            Functions.compose(japaneseToInteger, integerToSpanish))\n",
        "248": "    Function<String, Integer> japaneseToInteger =\n",
        "249": "        Functions.forMap(mJapaneseToInteger);\n",
        "255": "    Function<Integer, String> integerToSpanish =\n",
        "256": "        Functions.forMap(mIntegerToSpanish);\n",
        "268": "        .addEqualityGroup(\n",
        "269": "            Functions.compose(japaneseToInteger, integerToSpanish))\n",
        "275": "    Function<String, Integer> japaneseToInteger =\n",
        "276": "        Functions.forMap(mapJapaneseToInteger);\n",
        "292": "    Map<Float, String> m = ImmutableMap.of(\n",
        "293": "        4.0f, \"A\", 3.0f, \"B\", 2.0f, \"C\", 1.0f, \"D\");\n",
        "312": "    Map<Float, String> m = ImmutableMap.of(\n",
        "313": "        4.0f, \"A\", 3.0f, \"B\", 2.0f, \"C\", 1.0f, \"D\");\n",
        "332": "    Function<Object, Boolean> alwaysTrue =\n",
        "333": "        Functions.forPredicate(Predicates.alwaysTrue());\n",
        "334": "    Function<Object, Boolean> alwaysFalse =\n",
        "335": "        Functions.forPredicate(Predicates.alwaysFalse());\n",
        "341": "        .addEqualityGroup(\n",
        "342": "            alwaysTrue, Functions.forPredicate(Predicates.alwaysTrue()))\n",
        "382": "  private static class CountingSupplier\n",
        "383": "      implements Supplier<Integer>, Serializable {\n"
    }
}