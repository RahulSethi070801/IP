{
    "addition": {
        "66": "/** Functional tests of {@link ClassPath}. */\n",
        "77": "        .addEqualityGroup(new ResourceInfo(\"x.txt\", getClass().getClassLoader()))\n",
        "181": "    assertThat(ClassPath.toFile(new URL(\"file:///C:\\\\\\u20320 \\u22909\"))) // Chinese Ni Hao\n",
        "284": "    assertEquals(\n",
        "285": "        new File(\"/usr/test/dep.jar\").toURI(),\n",
        "287": "                new File(\"/home/build/outer.jar\"), \"file:/usr/test/dep.jar\")\n",
        "288": "            .toURI());\n",
        "289": "    assertEquals(\n",
        "290": "        new File(\"/home/build/a.jar\").toURI(),\n",
        "292": "    assertEquals(\n",
        "293": "        new File(\"/home/build/x/y/z\").toURI(),\n",
        "295": "    assertEquals(\n",
        "296": "        new File(\"/home/build/x/y/z.jar\").toURI(),\n",
        "299": "    assertEquals(\n",
        "300": "        \"/home/build/x y.jar\",\n",
        "311": "    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifest(\"\"))).isEmpty();\n",
        "323": "    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifest)).isEmpty();\n",
        "408": "    assertEquals(\"Foo\", new ClassInfo(\"Foo.class\", classLoader).getSimpleName());\n",
        "409": "    assertEquals(\"Foo\", new ClassInfo(\"a/b/Foo.class\", classLoader).getSimpleName());\n",
        "410": "    assertEquals(\"Foo\", new ClassInfo(\"a/b/Bar$Foo.class\", classLoader).getSimpleName());\n",
        "411": "    assertEquals(\"\", new ClassInfo(\"a/b/Bar$1.class\", classLoader).getSimpleName());\n",
        "412": "    assertEquals(\"Foo\", new ClassInfo(\"a/b/Bar$Foo.class\", classLoader).getSimpleName());\n",
        "413": "    assertEquals(\"\", new ClassInfo(\"a/b/Bar$1.class\", classLoader).getSimpleName());\n",
        "414": "    assertEquals(\"Local\", new ClassInfo(\"a/b/Bar$1Local.class\", classLoader).getSimpleName());\n",
        "418": "    assertEquals(\"\", new ClassInfo(\"Foo.class\", getClass().getClassLoader()).getPackageName());\n",
        "419": "    assertEquals(\n",
        "420": "        \"a.b\", new ClassInfo(\"a/b/Foo.class\", getClass().getClassLoader()).getPackageName());\n",
        "586": "    @Override\n",
        "587": "    protected void scanDirectory(ClassLoader loader, File root) throws IOException {\n",
        "595": "    @Override\n",
        "596": "    protected void scanJarFile(ClassLoader loader, JarFile file) throws IOException {\n",
        "625": "    @Override\n",
        "626": "    protected void scanJarFile(ClassLoader loader, JarFile file) throws IOException {\n",
        "631": "    @Override\n",
        "632": "    protected void scanDirectory(ClassLoader loader, File root) {}\n"
    },
    "removed": {
        "66": "/**\n",
        "67": " * Functional tests of {@link ClassPath}.\n",
        "68": " */\n",
        "79": "        .addEqualityGroup(\n",
        "80": "            new ResourceInfo(\"x.txt\", getClass().getClassLoader()))\n",
        "184": "    assertThat(ClassPath.toFile(new URL(\"file:///C:\\\\\\u20320 \\u22909\")))  // Chinese Ni Hao\n",
        "287": "    assertEquals(new File(\"/usr/test/dep.jar\").toURI(),\n",
        "289": "            new File(\"/home/build/outer.jar\"), \"file:/usr/test/dep.jar\").toURI());\n",
        "290": "    assertEquals(new File(\"/home/build/a.jar\").toURI(),\n",
        "292": "    assertEquals(new File(\"/home/build/x/y/z\").toURI(),\n",
        "294": "    assertEquals(new File(\"/home/build/x/y/z.jar\").toURI(),\n",
        "297": "    assertEquals(\"/home/build/x y.jar\",\n",
        "308": "    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifest(\"\")))\n",
        "309": "        .isEmpty();\n",
        "321": "    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifest))\n",
        "322": "        .isEmpty();\n",
        "407": "    assertEquals(\"Foo\",\n",
        "408": "        new ClassInfo(\"Foo.class\", classLoader).getSimpleName());\n",
        "409": "    assertEquals(\"Foo\",\n",
        "410": "        new ClassInfo(\"a/b/Foo.class\", classLoader).getSimpleName());\n",
        "411": "    assertEquals(\"Foo\",\n",
        "412": "        new ClassInfo(\"a/b/Bar$Foo.class\", classLoader).getSimpleName());\n",
        "413": "    assertEquals(\"\",\n",
        "414": "        new ClassInfo(\"a/b/Bar$1.class\", classLoader).getSimpleName());\n",
        "415": "    assertEquals(\"Foo\",\n",
        "416": "        new ClassInfo(\"a/b/Bar$Foo.class\", classLoader).getSimpleName());\n",
        "417": "    assertEquals(\"\",\n",
        "418": "        new ClassInfo(\"a/b/Bar$1.class\", classLoader).getSimpleName());\n",
        "419": "    assertEquals(\"Local\",\n",
        "420": "        new ClassInfo(\"a/b/Bar$1Local.class\", classLoader).getSimpleName());\n",
        "424": "    assertEquals(\"\",\n",
        "425": "        new ClassInfo(\"Foo.class\", getClass().getClassLoader()).getPackageName());\n",
        "426": "    assertEquals(\"a.b\",\n",
        "427": "        new ClassInfo(\"a/b/Foo.class\", getClass().getClassLoader()).getPackageName());\n",
        "593": "    @Override protected void scanDirectory(ClassLoader loader, File root) throws IOException {\n",
        "601": "    @Override protected void scanJarFile(ClassLoader loader, JarFile file) throws IOException {\n",
        "630": "    @Override protected void scanJarFile(ClassLoader loader, JarFile file) throws IOException {\n",
        "635": "    @Override protected void scanDirectory(ClassLoader loader, File root) {}\n"
    }
}