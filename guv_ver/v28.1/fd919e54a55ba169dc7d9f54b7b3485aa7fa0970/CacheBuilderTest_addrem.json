{
    "addition": {
        "49": "/** Unit tests for CacheBuilder. */\n",
        "56": "    LoadingCache<String, Integer> cache =\n",
        "57": "        CacheBuilder.newBuilder().removalListener(countingRemovalListener()).build(loader);\n",
        "68": "    } catch (IllegalArgumentException expected) {\n",
        "69": "    }\n",
        "78": "    } catch (IllegalStateException expected) {\n",
        "79": "    }\n",
        "84": "    LoadingCache<?, ?> cache = CacheBuilder.newBuilder().initialCapacity(5).build(identityLoader());\n",
        "96": "    LoadingCache<?, ?> cache = CacheBuilder.newBuilder().initialCapacity(0).build(identityLoader());\n",
        "118": "    } catch (IllegalArgumentException expected) {\n",
        "119": "    }\n",
        "128": "    } catch (IllegalStateException expected) {\n",
        "129": "    }\n",
        "134": "    LoadingCache<?, ?> cache =\n",
        "135": "        CacheBuilder.newBuilder().concurrencyLevel(1).build(identityLoader());\n",
        "150": "    } catch (IllegalArgumentException expected) {\n",
        "151": "    }\n",
        "160": "    } catch (IllegalStateException expected) {\n",
        "161": "    }\n",
        "170": "    } catch (IllegalStateException expected) {\n",
        "171": "    }\n",
        "180": "    } catch (IllegalArgumentException expected) {\n",
        "181": "    }\n",
        "191": "    } catch (IllegalStateException expected) {\n",
        "192": "    }\n",
        "196": "    } catch (IllegalStateException expected) {\n",
        "197": "    }\n",
        "202": "    CacheBuilder<Object, Object> builder = CacheBuilder.newBuilder().maximumWeight(1);\n",
        "206": "    } catch (IllegalStateException expected) {\n",
        "207": "    }\n",
        "212": "    CacheBuilder<Object, Object> builder = CacheBuilder.newBuilder().weigher(constantWeigher(42));\n",
        "216": "    } catch (IllegalStateException expected) {\n",
        "217": "    }\n",
        "225": "    } catch (IllegalStateException expected) {\n",
        "226": "    }\n",
        "230": "    } catch (IllegalStateException expected) {\n",
        "231": "    }\n",
        "240": "    } catch (IllegalStateException expected) {\n",
        "241": "    }\n",
        "250": "    } catch (IllegalStateException expected) {\n",
        "251": "    }\n",
        "255": "    } catch (IllegalStateException expected) {\n",
        "256": "    }\n",
        "262": "    } catch (IllegalStateException expected) {\n",
        "263": "    }\n",
        "267": "    } catch (IllegalStateException expected) {\n",
        "268": "    }\n",
        "276": "    } catch (IllegalArgumentException expected) {\n",
        "277": "    }\n",
        "281": "    CacheBuilder.newBuilder().expireAfterWrite(1, NANOSECONDS).build(identityLoader());\n",
        "287": "        CacheBuilder.newBuilder().expireAfterWrite(3600, SECONDS);\n",
        "292": "    } catch (IllegalStateException expected) {\n",
        "293": "    }\n",
        "301": "    } catch (IllegalArgumentException expected) {\n",
        "302": "    }\n",
        "306": "    CacheBuilder.newBuilder().expireAfterAccess(1, NANOSECONDS).build(identityLoader());\n",
        "312": "        CacheBuilder.newBuilder().expireAfterAccess(3600, SECONDS);\n",
        "317": "    } catch (IllegalStateException expected) {\n",
        "318": "    }\n",
        "335": "    } catch (IllegalArgumentException expected) {\n",
        "336": "    }\n",
        "342": "        CacheBuilder.newBuilder().refreshAfterWrite(3600, SECONDS);\n",
        "347": "    } catch (IllegalStateException expected) {\n",
        "348": "    }\n",
        "353": "    CacheBuilder<Object, Object> builder = CacheBuilder.newBuilder().ticker(testTicker);\n",
        "358": "    } catch (IllegalStateException expected) {\n",
        "359": "    }\n",
        "364": "    CacheBuilder<Object, Object> builder = CacheBuilder.newBuilder().removalListener(testListener);\n",
        "369": "    } catch (IllegalStateException expected) {\n",
        "370": "    }\n",
        "380": "    LoadingCache<Object, Object> nullCache =\n",
        "381": "        CacheBuilder.newBuilder().maximumSize(0).removalListener(listener).build(identityLoader());\n",
        "398": "    CacheLoader<String, String> computingFunction =\n",
        "399": "        new CacheLoader<String, String>() {\n",
        "400": "          @Override\n",
        "401": "          public String load(String key) throws InterruptedException {\n",
        "402": "            if (shouldWait.get()) {\n",
        "403": "              computingLatch.await();\n",
        "404": "            }\n",
        "405": "            return key;\n",
        "406": "          }\n",
        "407": "        };\n",
        "410": "    final LoadingCache<String, String> cache =\n",
        "411": "        CacheBuilder.newBuilder()\n",
        "412": "            .concurrencyLevel(1)\n",
        "413": "            .removalListener(listener)\n",
        "414": "            .build(computingFunction);\n",
        "422": "    new Thread(\n",
        "423": "            new Runnable() {\n",
        "424": "              @Override\n",
        "425": "              public void run() {\n",
        "426": "                computationStarted.countDown();\n",
        "427": "                cache.getUnchecked(\"b\");\n",
        "428": "                computationComplete.countDown();\n",
        "429": "              }\n",
        "430": "            })\n",
        "431": "        .start();\n",
        "471": "    final LoadingCache<String, String> cache =\n",
        "472": "        CacheBuilder.newBuilder()\n",
        "473": "            .removalListener(listener)\n",
        "474": "            .concurrencyLevel(20)\n",
        "475": "            .build(new DelayingIdentityLoader<String>(computationShouldWait, computationLatch));\n",
        "523": "      assertEquals(\n",
        "524": "          \"Unexpected key/value pair passed to removalListener\",\n",
        "525": "          notification.getKey(),\n",
        "526": "          notification.getValue());\n",
        "560": "          @Override\n",
        "561": "          public String load(String key) throws InterruptedException {\n",
        "579": "    final LoadingCache<String, String> cache =\n",
        "580": "        CacheBuilder.newBuilder()\n",
        "581": "            .recordStats()\n",
        "582": "            .concurrencyLevel(2)\n",
        "583": "            .expireAfterWrite(100, TimeUnit.MILLISECONDS)\n",
        "584": "            .removalListener(removalListener)\n",
        "585": "            .maximumSize(5000)\n",
        "586": "            .build(countingIdentityLoader);\n",
        "650": "    @Override\n",
        "651": "    public T load(T key) throws InterruptedException {\n"
    },
    "removed": {
        "49": "/**\n",
        "50": " * Unit tests for CacheBuilder.\n",
        "51": " */\n",
        "58": "    LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n",
        "59": "        .removalListener(countingRemovalListener())\n",
        "60": "        .build(loader);\n",
        "71": "    } catch (IllegalArgumentException expected) {}\n",
        "80": "    } catch (IllegalStateException expected) {}\n",
        "85": "    LoadingCache<?, ?> cache = CacheBuilder.newBuilder()\n",
        "86": "        .initialCapacity(5)\n",
        "87": "        .build(identityLoader());\n",
        "99": "    LoadingCache<?, ?> cache = CacheBuilder.newBuilder()\n",
        "100": "        .initialCapacity(0)\n",
        "101": "        .build(identityLoader());\n",
        "123": "    } catch (IllegalArgumentException expected) {}\n",
        "132": "    } catch (IllegalStateException expected) {}\n",
        "137": "    LoadingCache<?, ?> cache = CacheBuilder.newBuilder()\n",
        "138": "        .concurrencyLevel(1)\n",
        "139": "        .build(identityLoader());\n",
        "154": "    } catch (IllegalArgumentException expected) {}\n",
        "163": "    } catch (IllegalStateException expected) {}\n",
        "172": "    } catch (IllegalStateException expected) {}\n",
        "181": "    } catch (IllegalArgumentException expected) {}\n",
        "191": "    } catch (IllegalStateException expected) {}\n",
        "195": "    } catch (IllegalStateException expected) {}\n",
        "200": "    CacheBuilder<Object, Object> builder = CacheBuilder.newBuilder()\n",
        "201": "        .maximumWeight(1);\n",
        "205": "    } catch (IllegalStateException expected) {}\n",
        "210": "    CacheBuilder<Object, Object> builder = CacheBuilder.newBuilder()\n",
        "211": "        .weigher(constantWeigher(42));\n",
        "215": "    } catch (IllegalStateException expected) {}\n",
        "223": "    } catch (IllegalStateException expected) {}\n",
        "227": "    } catch (IllegalStateException expected) {}\n",
        "236": "    } catch (IllegalStateException expected) {}\n",
        "245": "    } catch (IllegalStateException expected) {}\n",
        "249": "    } catch (IllegalStateException expected) {}\n",
        "255": "    } catch (IllegalStateException expected) {}\n",
        "259": "    } catch (IllegalStateException expected) {}\n",
        "267": "    } catch (IllegalArgumentException expected) {}\n",
        "271": "    CacheBuilder.newBuilder()\n",
        "272": "        .expireAfterWrite(1, NANOSECONDS)\n",
        "273": "        .build(identityLoader());\n",
        "279": "            CacheBuilder.newBuilder().expireAfterWrite(3600, SECONDS);\n",
        "284": "    } catch (IllegalStateException expected) {}\n",
        "292": "    } catch (IllegalArgumentException expected) {}\n",
        "296": "    CacheBuilder.newBuilder()\n",
        "297": "        .expireAfterAccess(1, NANOSECONDS)\n",
        "298": "        .build(identityLoader());\n",
        "304": "            CacheBuilder.newBuilder().expireAfterAccess(3600, SECONDS);\n",
        "309": "    } catch (IllegalStateException expected) {}\n",
        "326": "    } catch (IllegalArgumentException expected) {}\n",
        "332": "            CacheBuilder.newBuilder().refreshAfterWrite(3600, SECONDS);\n",
        "337": "    } catch (IllegalStateException expected) {}\n",
        "342": "    CacheBuilder<Object, Object> builder =\n",
        "343": "            CacheBuilder.newBuilder().ticker(testTicker);\n",
        "348": "    } catch (IllegalStateException expected) {}\n",
        "353": "    CacheBuilder<Object, Object> builder =\n",
        "354": "            CacheBuilder.newBuilder().removalListener(testListener);\n",
        "359": "    } catch (IllegalStateException expected) {}\n",
        "369": "    LoadingCache<Object, Object> nullCache = CacheBuilder.newBuilder()\n",
        "370": "        .maximumSize(0)\n",
        "371": "        .removalListener(listener)\n",
        "372": "        .build(identityLoader());\n",
        "389": "    CacheLoader<String, String> computingFunction = new CacheLoader<String, String>() {\n",
        "390": "      @Override public String load(String key) throws InterruptedException {\n",
        "391": "        if (shouldWait.get()) {\n",
        "392": "          computingLatch.await();\n",
        "393": "        }\n",
        "394": "        return key;\n",
        "395": "      }\n",
        "396": "    };\n",
        "399": "    final LoadingCache<String, String> cache = CacheBuilder.newBuilder()\n",
        "400": "        .concurrencyLevel(1)\n",
        "401": "        .removalListener(listener)\n",
        "402": "        .build(computingFunction);\n",
        "410": "    new Thread(new Runnable() {\n",
        "411": "      @Override public void run() {\n",
        "412": "        computationStarted.countDown();\n",
        "413": "        cache.getUnchecked(\"b\");\n",
        "414": "        computationComplete.countDown();\n",
        "415": "      }\n",
        "416": "    }).start();\n",
        "456": "    final LoadingCache <String, String> cache = CacheBuilder.newBuilder()\n",
        "457": "        .removalListener(listener)\n",
        "458": "        .concurrencyLevel(20)\n",
        "459": "        .build(\n",
        "460": "            new DelayingIdentityLoader<String>(computationShouldWait, computationLatch));\n",
        "508": "      assertEquals(\"Unexpected key/value pair passed to removalListener\",\n",
        "509": "          notification.getKey(), notification.getValue());\n",
        "543": "          @Override public String load(String key) throws InterruptedException {\n",
        "561": "    final LoadingCache<String, String> cache = CacheBuilder.newBuilder()\n",
        "562": "        .recordStats()\n",
        "563": "        .concurrencyLevel(2)\n",
        "564": "        .expireAfterWrite(100, TimeUnit.MILLISECONDS)\n",
        "565": "        .removalListener(removalListener)\n",
        "566": "        .maximumSize(5000)\n",
        "567": "        .build(countingIdentityLoader);\n",
        "631": "    @Override public T load(T key) throws InterruptedException {\n"
    }
}