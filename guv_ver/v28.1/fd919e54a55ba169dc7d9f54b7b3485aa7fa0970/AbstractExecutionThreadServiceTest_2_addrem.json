{
    "addition": {
        "47": "  private final Executor exceptionCatchingExecutor =\n",
        "48": "      new Executor() {\n",
        "50": "        public void execute(Runnable command) {\n",
        "51": "          executionThread = new Thread(command);\n",
        "52": "          executionThread.setUncaughtExceptionHandler(\n",
        "53": "              new UncaughtExceptionHandler() {\n",
        "54": "                @Override\n",
        "55": "                public void uncaughtException(Thread thread, Throwable e) {\n",
        "56": "                  thrownByExecutionThread = e;\n",
        "57": "                }\n",
        "58": "              });\n",
        "59": "          executionThread.start();\n",
        "61": "      };\n",
        "63": "  @Override\n",
        "64": "  protected final void tearDown() {\n",
        "66": "    assertNull(\n",
        "67": "        \"exceptions should not be propagated to uncaught exception handlers\",\n",
        "128": "    @Override\n",
        "129": "    protected void startUp() {\n",
        "137": "    @Override\n",
        "138": "    protected void run() {\n",
        "153": "    @Override\n",
        "154": "    protected void shutDown() {\n",
        "162": "    @Override\n",
        "163": "    protected void triggerShutdown() {\n",
        "167": "    @Override\n",
        "168": "    protected Executor executor() {\n",
        "194": "    @Override\n",
        "195": "    protected void startUp() {\n",
        "200": "    @Override\n",
        "201": "    protected void run() {\n",
        "205": "    @Override\n",
        "206": "    protected Executor executor() {\n",
        "249": "    @Override\n",
        "250": "    protected void run() {\n",
        "254": "    @Override\n",
        "255": "    protected void shutDown() {\n",
        "262": "    @Override\n",
        "263": "    protected Executor executor() {\n",
        "283": "    @Override\n",
        "284": "    protected void run() {\n",
        "292": "    @Override\n",
        "293": "    protected void shutDown() {\n",
        "297": "    @Override\n",
        "298": "    protected Executor executor() {\n",
        "315": "    @Override\n",
        "316": "    protected Executor executor() {\n",
        "318": "        @Override\n",
        "319": "        public void execute(Runnable command) {}\n",
        "324": "    protected void run() throws Exception {}\n",
        "329": "    FakeService service =\n",
        "330": "        new FakeService() {\n",
        "331": "          @Override\n",
        "332": "          protected void startUp() throws Exception {\n",
        "333": "            super.startUp();\n",
        "334": "            started.await();\n",
        "335": "          }\n",
        "336": "        };\n",
        "365": "    Service service =\n",
        "366": "        new AbstractExecutionThreadService() {\n",
        "367": "          @Override\n",
        "368": "          protected void run() throws Exception {}\n",
        "369": "\n",
        "370": "          @Override\n",
        "371": "          protected ScheduledExecutorService executor() {\n",
        "372": "            return TestingExecutors.noOpScheduledExecutor();\n",
        "373": "          }\n",
        "374": "\n",
        "375": "          @Override\n",
        "376": "          protected String serviceName() {\n",
        "377": "            return \"Foo\";\n",
        "378": "          }\n",
        "379": "        };\n",
        "400": "    @Override\n",
        "401": "    protected void startUp() throws Exception {\n",
        "408": "    @Override\n",
        "409": "    protected void run() throws Exception {\n",
        "416": "    @Override\n",
        "417": "    protected void shutDown() throws Exception {\n",
        "424": "    @Override\n",
        "425": "    protected Executor executor() {\n",
        "429": "    @Override\n",
        "430": "    public void tearDown() throws Exception {\n"
    },
    "removed": {
        "47": "  private final Executor exceptionCatchingExecutor = new Executor() {\n",
        "48": "    @Override\n",
        "49": "    public void execute(Runnable command) {\n",
        "50": "      executionThread = new Thread(command);\n",
        "51": "      executionThread.setUncaughtExceptionHandler(new UncaughtExceptionHandler() {\n",
        "53": "        public void uncaughtException(Thread thread, Throwable e) {\n",
        "54": "          thrownByExecutionThread = e;\n",
        "56": "      });\n",
        "57": "      executionThread.start();\n",
        "58": "    }\n",
        "59": "  };\n",
        "61": "  @Override protected final void tearDown() {\n",
        "63": "    assertNull(\"exceptions should not be propagated to uncaught exception handlers\",\n",
        "124": "    @Override protected void startUp() {\n",
        "132": "    @Override protected void run() {\n",
        "147": "    @Override protected void shutDown() {\n",
        "155": "    @Override protected void triggerShutdown() {\n",
        "159": "    @Override protected Executor executor() {\n",
        "185": "    @Override protected void startUp() {\n",
        "190": "    @Override protected void run() {\n",
        "194": "    @Override protected Executor executor() {\n",
        "237": "    @Override protected void run() {\n",
        "241": "    @Override protected void shutDown() {\n",
        "248": "    @Override protected Executor executor() {\n",
        "268": "    @Override protected void run() {\n",
        "276": "    @Override protected void shutDown() {\n",
        "280": "    @Override protected Executor executor() {\n",
        "297": "    @Override protected Executor executor() {\n",
        "299": "        @Override public void execute(Runnable command) {\n",
        "300": "        }\n",
        "305": "    protected void run() throws Exception {\n",
        "306": "    }\n",
        "311": "    FakeService service = new FakeService() {\n",
        "312": "      @Override protected void startUp() throws Exception {\n",
        "313": "        super.startUp();\n",
        "314": "        started.await();\n",
        "315": "      }\n",
        "316": "    };\n",
        "345": "    Service service = new AbstractExecutionThreadService() {\n",
        "346": "      @Override protected void run() throws Exception {}\n",
        "347": "\n",
        "348": "      @Override protected ScheduledExecutorService executor() {\n",
        "349": "        return TestingExecutors.noOpScheduledExecutor();\n",
        "350": "      }\n",
        "351": "\n",
        "352": "      @Override protected String serviceName() {\n",
        "353": "        return \"Foo\";\n",
        "354": "      }\n",
        "355": "    };\n",
        "376": "    @Override protected void startUp() throws Exception {\n",
        "383": "    @Override protected void run() throws Exception {\n",
        "390": "    @Override protected void shutDown() throws Exception {\n",
        "397": "    @Override protected Executor executor() {\n",
        "401": "    @Override public void tearDown() throws Exception {\n"
    }
}