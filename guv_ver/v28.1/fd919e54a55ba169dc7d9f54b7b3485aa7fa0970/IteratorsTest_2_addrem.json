{
    "addition": {
        "202": "    Iterator<String> iterator = asList(\"one\", \"two\", \"three\", \"four\", \"five\").iterator();\n",
        "213": "    Iterator<String> iterator = asList(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\").iterator();\n",
        "259": "    assertTrue(Arrays.equals(new String[] {\"a\"}, array));\n",
        "272": "    Iterator<String> filtered = Iterators.filter(unfiltered, Predicates.equalTo(\"foo\"));\n",
        "280": "    Iterator<String> filtered = Iterators.filter(unfiltered, Predicates.alwaysFalse());\n",
        "288": "    Iterator<String> filtered = Iterators.filter(unfiltered, Predicates.alwaysTrue());\n",
        "296": "    Iterator<String> filtered =\n",
        "297": "        Iterators.filter(\n",
        "298": "            unfiltered,\n",
        "299": "            new Predicate<String>() {\n",
        "300": "              @Override\n",
        "301": "              public boolean apply(String s) {\n",
        "302": "                throw new AssertionFailedError(\"Should never be evaluated\");\n",
        "303": "              }\n",
        "304": "            });\n",
        "314": "    final Predicate<Integer> isEven =\n",
        "315": "        new Predicate<Integer>() {\n",
        "316": "          @Override\n",
        "317": "          public boolean apply(Integer integer) {\n",
        "318": "            return integer % 2 == 0;\n",
        "319": "          }\n",
        "320": "        };\n",
        "321": "    new IteratorTester<Integer>(\n",
        "322": "        5, UNMODIFIABLE, asList(2, 4), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "324": "      protected Iterator<Integer> newTargetIterator() {\n",
        "362": "    assertEquals(\"pants\", Iterators.find(iterator, Predicates.equalTo(\"pants\")));\n",
        "386": "    assertEquals(\"cool\", Iterators.find(iterator, Predicates.equalTo(\"cool\"), \"woot\"));\n",
        "393": "    assertEquals(\"pants\", Iterators.find(iterator, Predicates.equalTo(\"pants\"), \"woot\"));\n",
        "400": "    assertEquals(\"woot\", Iterators.find(iterator, Predicates.alwaysFalse(), \"woot\"));\n",
        "407": "    assertNull(Iterators.find(iterator, Predicates.alwaysFalse(), null));\n",
        "414": "    assertEquals(\"cool\", Iterators.find(iterator, Predicates.alwaysTrue(), \"woot\"));\n",
        "439": "    assertEquals(\"woot\", Iterators.tryFind(iterator, Predicates.alwaysFalse()).or(\"woot\"));\n",
        "452": "    Iterator<Integer> result =\n",
        "453": "        Iterators.transform(\n",
        "454": "            input,\n",
        "455": "            new Function<String, Integer>() {\n",
        "456": "              @Override\n",
        "457": "              public Integer apply(String from) {\n",
        "458": "                return Integer.valueOf(from);\n",
        "459": "              }\n",
        "460": "            });\n",
        "470": "    Iterator<Integer> iterator =\n",
        "471": "        Iterators.transform(\n",
        "472": "            input,\n",
        "473": "            new Function<String, Integer>() {\n",
        "474": "              @Override\n",
        "475": "              public Integer apply(String from) {\n",
        "476": "                return Integer.valueOf(from);\n",
        "477": "              }\n",
        "478": "            });\n",
        "488": "    Iterator<Integer> result =\n",
        "489": "        Iterators.transform(\n",
        "490": "            input,\n",
        "491": "            new Function<String, Integer>() {\n",
        "492": "              @Override\n",
        "493": "              public Integer apply(String from) {\n",
        "494": "                return Integer.valueOf(from);\n",
        "495": "              }\n",
        "496": "            });\n",
        "508": "    Iterator<String> result =\n",
        "509": "        Iterators.transform(\n",
        "510": "            input,\n",
        "511": "            new Function<Integer, String>() {\n",
        "512": "              @Override\n",
        "513": "              public String apply(Integer from) {\n",
        "514": "                return String.valueOf(from);\n",
        "515": "              }\n",
        "516": "            });\n",
        "693": "    } catch (NoSuchElementException expected) {\n",
        "694": "    }\n",
        "699": "    new IteratorTester<Integer>(\n",
        "700": "        5,\n",
        "701": "        UNMODIFIABLE,\n",
        "702": "        asList(1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2),\n",
        "703": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "704": "      @Override\n",
        "705": "      protected Iterator<Integer> newTargetIterator() {\n",
        "715": "      @Override\n",
        "716": "      protected Iterator<Integer> newTargetIterator() {\n",
        "726": "      @Override\n",
        "727": "      protected Iterator<Integer> newTargetIterator() {\n",
        "736": "      @Override\n",
        "737": "      protected Iterator<Integer> newTargetIterator() {\n",
        "747": "      @Override\n",
        "748": "      protected Iterator<Integer> newTargetIterator() {\n",
        "757": "      @Override\n",
        "758": "      protected Iterator<Integer> newTargetIterator() {\n",
        "767": "      @Override\n",
        "768": "      protected Iterator<Integer> newTargetIterator() {\n",
        "777": "      @Override\n",
        "778": "      protected Iterator<Integer> newTargetIterator() {\n",
        "779": "        return Iterators.concat(iterateOver(1), iterateOver(), iterateOver(), iterateOver(2));\n",
        "786": "    new IteratorTester<Integer>(\n",
        "787": "        5, UNMODIFIABLE, asList(1, 2), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "788": "      @Override\n",
        "789": "      protected Iterator<Integer> newTargetIterator() {\n",
        "790": "        return Iterators.concat(\n",
        "791": "            asList(1).iterator(), Arrays.<Integer>asList().iterator(), asList(2).iterator());\n",
        "816": "  /** Illustrates the somewhat bizarre behavior when a null is passed in. */\n",
        "819": "    Iterator<Iterator<Integer>> input = asList(iterateOver(1, 2), null, iterateOver(3)).iterator();\n",
        "839": "      Iterators.concat(iterateOver(1, 2), null, iterateOver(3), iterateOver(4), iterateOver(5));\n",
        "866": "    boolean changed = Iterators.addAll(alreadyThere, Iterators.<String>emptyIterator());\n",
        "882": "    Set<String> alreadyThere = Sets.newLinkedHashSet(asList(\"already\", \"there\"));\n",
        "897": "  private abstract static class EmptyIteratorTester extends IteratorTester<Integer> {\n",
        "899": "      super(3, MODIFIABLE, Collections.<Integer>emptySet(), IteratorTester.KnownOrder.KNOWN_ORDER);\n",
        "904": "  private abstract static class SingletonIteratorTester extends IteratorTester<Integer> {\n",
        "911": "  private abstract static class DoubletonIteratorTester extends IteratorTester<Integer> {\n",
        "913": "      super(5, MODIFIABLE, newArrayList(1, 2), IteratorTester.KnownOrder.KNOWN_ORDER);\n",
        "1004": "    new IteratorTester<List<Integer>>(\n",
        "1005": "        5,\n",
        "1007": "        ImmutableList.of(asList(1, 2, 3), asList(4, 5, 6), asList(7)),\n",
        "1009": "      @Override\n",
        "1010": "      protected Iterator<List<Integer>> newTargetIterator() {\n",
        "1019": "    Iterator<List<Integer>> partitions = Iterators.partition(list.iterator(), 1);\n",
        "1075": "    new IteratorTester<List<Integer>>(\n",
        "1076": "        5,\n",
        "1078": "        ImmutableList.of(asList(1, 2, 3), asList(4, 5, 6), asList(7, null, null)),\n",
        "1080": "      @Override\n",
        "1081": "      protected Iterator<List<Integer>> newTargetIterator() {\n",
        "1090": "    Iterator<List<Integer>> partitions = Iterators.paddedPartition(list.iterator(), 1);\n",
        "1116": "    } catch (NoSuchElementException expected) {\n",
        "1117": "    }\n",
        "1129": "    } catch (UnsupportedOperationException expected) {\n",
        "1130": "    }\n",
        "1136": "    } catch (NoSuchElementException expected) {\n",
        "1137": "    }\n",
        "1151": "    } catch (IndexOutOfBoundsException expected) {\n",
        "1152": "    }\n",
        "1163": "    } catch (IndexOutOfBoundsException expected) {\n",
        "1164": "    }\n",
        "1168": "    } catch (IndexOutOfBoundsException expected) {\n",
        "1169": "    }\n",
        "1174": "    new IteratorTester<Integer>(\n",
        "1175": "        6, UNMODIFIABLE, asList(1, 2, 3), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "1176": "      @Override\n",
        "1177": "      protected Iterator<Integer> newTargetIterator() {\n",
        "1185": "    new IteratorTester<Integer>(\n",
        "1186": "        6, UNMODIFIABLE, asList(1, 2, 3), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "1187": "      @Override\n",
        "1188": "      protected Iterator<Integer> newTargetIterator() {\n",
        "1189": "        return Iterators.forArray(new Integer[] {0, 1, 2, 3, 4}, 1, 3, 0);\n",
        "1318": "    assertEquals(ImmutableList.of(\"cool\"), newArrayList(Iterators.limit(list.iterator(), 1)));\n",
        "1338": "    new IteratorTester<Integer>(\n",
        "1339": "        5, MODIFIABLE, newArrayList(1, 2, 3), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "1340": "      @Override\n",
        "1341": "      protected Iterator<Integer> newTargetIterator() {\n",
        "1420": "    } catch (IndexOutOfBoundsException expected) {\n",
        "1421": "    }\n",
        "1433": "    } catch (IndexOutOfBoundsException expected) {\n",
        "1434": "    }\n",
        "1444": "    } catch (IndexOutOfBoundsException expected) {\n",
        "1445": "    }\n",
        "1455": "    } catch (IndexOutOfBoundsException expected) {\n",
        "1456": "    }\n",
        "1524": "    } catch (IllegalArgumentException expected) {\n",
        "1525": "    }\n",
        "1541": "      @Override\n",
        "1542": "      protected Iterator<Integer> newTargetIterator() {\n",
        "1550": "    assertTrue(Iterators.removeAll(list.iterator(), newArrayList(\"b\", \"d\", \"f\")));\n",
        "1552": "    assertFalse(Iterators.removeAll(list.iterator(), newArrayList(\"x\", \"y\", \"z\")));\n",
        "1558": "    assertTrue(\n",
        "1559": "        Iterators.removeIf(\n",
        "1560": "            list.iterator(),\n",
        "1561": "            new Predicate<String>() {\n",
        "1562": "              @Override\n",
        "1563": "              public boolean apply(String s) {\n",
        "1564": "                return s.equals(\"b\") || s.equals(\"d\") || s.equals(\"f\");\n",
        "1565": "              }\n",
        "1566": "            }));\n",
        "1568": "    assertFalse(\n",
        "1569": "        Iterators.removeIf(\n",
        "1570": "            list.iterator(),\n",
        "1571": "            new Predicate<String>() {\n",
        "1572": "              @Override\n",
        "1573": "              public boolean apply(String s) {\n",
        "1574": "                return s.equals(\"x\") || s.equals(\"y\") || s.equals(\"z\");\n",
        "1575": "              }\n",
        "1576": "            }));\n",
        "1582": "    assertTrue(Iterators.retainAll(list.iterator(), newArrayList(\"b\", \"d\", \"f\")));\n",
        "1584": "    assertFalse(Iterators.retainAll(list.iterator(), newArrayList(\"b\", \"e\", \"d\")));\n",
        "1590": "    return ListTestSuiteBuilder.using(\n",
        "1591": "            new TestStringListGenerator() {\n",
        "1592": "              @Override\n",
        "1593": "              public List<String> create(final String[] elements) {\n",
        "1594": "                final List<String> delegate = newArrayList(elements);\n",
        "1595": "                return new ForwardingList<String>() {\n",
        "1596": "                  @Override\n",
        "1597": "                  protected List<String> delegate() {\n",
        "1598": "                    return delegate;\n",
        "1599": "                  }\n",
        "1600": "\n",
        "1601": "                  @Override\n",
        "1602": "                  public boolean removeAll(Collection<?> c) {\n",
        "1603": "                    return Iterators.removeAll(iterator(), c);\n",
        "1604": "                  }\n",
        "1605": "\n",
        "1606": "                  @Override\n",
        "1607": "                  public boolean retainAll(Collection<?> c) {\n",
        "1608": "                    return Iterators.retainAll(iterator(), c);\n",
        "1609": "                  }\n",
        "1610": "                };\n",
        "1612": "            })\n",
        "1615": "            ListFeature.GENERAL_PURPOSE, CollectionFeature.ALLOWS_NULL_VALUES, CollectionSize.ANY)\n",
        "1624": "    Iterator<String> consumingIterator = Iterators.consumingIterator(list.iterator());\n",
        "1662": "    Iterator<String> iterator = Lists.newArrayList(\"manny\", \"mo\", \"jack\").iterator();\n",
        "1669": "    Iterator<String> iterator = Lists.newArrayList(\"manny\", \"mo\", \"mo\", \"jack\").iterator();\n",
        "1677": "    Iterator<String> iterator = Lists.newArrayList(\"manny\", \"mo\", \"mo\", \"jack\").iterator();\n"
    },
    "removed": {
        "202": "    Iterator<String> iterator =\n",
        "203": "        asList(\"one\", \"two\", \"three\", \"four\", \"five\").iterator();\n",
        "214": "    Iterator<String> iterator =\n",
        "215": "        asList(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\").iterator();\n",
        "261": "    assertTrue(Arrays.equals(new String[] { \"a\" }, array));\n",
        "274": "    Iterator<String> filtered = Iterators.filter(unfiltered,\n",
        "275": "                                                 Predicates.equalTo(\"foo\"));\n",
        "283": "    Iterator<String> filtered = Iterators.filter(unfiltered,\n",
        "284": "                                                 Predicates.alwaysFalse());\n",
        "292": "    Iterator<String> filtered = Iterators.filter(unfiltered,\n",
        "293": "                                                 Predicates.alwaysTrue());\n",
        "301": "    Iterator<String> filtered = Iterators.filter(unfiltered,\n",
        "302": "        new Predicate<String>() {\n",
        "303": "          @Override\n",
        "304": "          public boolean apply(String s) {\n",
        "305": "            throw new AssertionFailedError(\"Should never be evaluated\");\n",
        "306": "          }\n",
        "307": "        });\n",
        "317": "    final Predicate<Integer> isEven = new Predicate<Integer>() {\n",
        "319": "      public boolean apply(Integer integer) {\n",
        "320": "        return integer % 2 == 0;\n",
        "321": "      }\n",
        "322": "    };\n",
        "323": "    new IteratorTester<Integer>(5, UNMODIFIABLE, asList(2, 4),\n",
        "324": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "325": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "363": "    assertEquals(\"pants\", Iterators.find(iterator,\n",
        "364": "        Predicates.equalTo(\"pants\")));\n",
        "388": "    assertEquals(\"cool\",\n",
        "389": "        Iterators.find(iterator, Predicates.equalTo(\"cool\"), \"woot\"));\n",
        "396": "    assertEquals(\"pants\",\n",
        "397": "        Iterators.find(iterator, Predicates.equalTo(\"pants\"), \"woot\"));\n",
        "404": "    assertEquals(\"woot\",\n",
        "405": "        Iterators.find(iterator, Predicates.alwaysFalse(), \"woot\"));\n",
        "412": "    assertNull(\n",
        "413": "        Iterators.find(iterator, Predicates.alwaysFalse(), null));\n",
        "420": "    assertEquals(\"cool\",\n",
        "421": "        Iterators.find(iterator, Predicates.alwaysTrue(), \"woot\"));\n",
        "446": "    assertEquals(\"woot\",\n",
        "447": "        Iterators.tryFind(iterator, Predicates.alwaysFalse()).or(\"woot\"));\n",
        "460": "    Iterator<Integer> result = Iterators.transform(input,\n",
        "461": "        new Function<String, Integer>() {\n",
        "462": "          @Override\n",
        "463": "          public Integer apply(String from) {\n",
        "464": "            return Integer.valueOf(from);\n",
        "465": "          }\n",
        "466": "        });\n",
        "476": "    Iterator<Integer> iterator = Iterators.transform(input,\n",
        "477": "        new Function<String, Integer>() {\n",
        "478": "          @Override\n",
        "479": "          public Integer apply(String from) {\n",
        "480": "            return Integer.valueOf(from);\n",
        "481": "          }\n",
        "482": "        });\n",
        "492": "    Iterator<Integer> result = Iterators.transform(input,\n",
        "493": "        new Function<String, Integer>() {\n",
        "494": "          @Override\n",
        "495": "          public Integer apply(String from) {\n",
        "496": "            return Integer.valueOf(from);\n",
        "497": "          }\n",
        "498": "        });\n",
        "510": "    Iterator<String> result = Iterators.transform(input,\n",
        "511": "        new Function<Integer, String>() {\n",
        "512": "          @Override\n",
        "513": "          public String apply(Integer from) {\n",
        "514": "            return String.valueOf(from);\n",
        "515": "          }\n",
        "516": "        });\n",
        "693": "    } catch (NoSuchElementException expected) {}\n",
        "698": "    new IteratorTester<Integer>(5, UNMODIFIABLE, asList(1, 2, 1, 2, 1,\n",
        "699": "        2, 1, 2, 1, 2, 1, 2), IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "700": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "710": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "720": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "729": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "739": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "748": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "757": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "766": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "767": "        return Iterators.concat(\n",
        "768": "            iterateOver(1), iterateOver(), iterateOver(), iterateOver(2));\n",
        "775": "    new IteratorTester<Integer>(5, UNMODIFIABLE, asList(1, 2),\n",
        "776": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "777": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "778": "        return Iterators.concat(asList(1).iterator(),\n",
        "779": "            Arrays.<Integer>asList().iterator(), asList(2).iterator());\n",
        "804": "  /**\n",
        "805": "   * Illustrates the somewhat bizarre behavior when a null is passed in.\n",
        "806": "   */\n",
        "809": "    Iterator<Iterator<Integer>> input\n",
        "810": "        = asList(iterateOver(1, 2), null, iterateOver(3)).iterator();\n",
        "830": "      Iterators.concat(iterateOver(1, 2), null, iterateOver(3), iterateOver(4),\n",
        "831": "          iterateOver(5));\n",
        "858": "    boolean changed = Iterators.addAll(alreadyThere,\n",
        "859": "                                       Iterators.<String>emptyIterator());\n",
        "875": "    Set<String> alreadyThere\n",
        "876": "        = Sets.newLinkedHashSet(asList(\"already\", \"there\"));\n",
        "891": "  private static abstract class EmptyIteratorTester extends IteratorTester<Integer> {\n",
        "893": "      super(3, MODIFIABLE, Collections.<Integer>emptySet(),\n",
        "894": "          IteratorTester.KnownOrder.KNOWN_ORDER);\n",
        "899": "  private static abstract class SingletonIteratorTester extends IteratorTester<Integer> {\n",
        "906": "  private static abstract class DoubletonIteratorTester extends IteratorTester<Integer> {\n",
        "908": "      super(5, MODIFIABLE, newArrayList(1, 2),\n",
        "909": "          IteratorTester.KnownOrder.KNOWN_ORDER);\n",
        "1000": "    new IteratorTester<List<Integer>>(5,\n",
        "1002": "        ImmutableList.of(\n",
        "1003": "            asList(1, 2, 3),\n",
        "1004": "            asList(4, 5, 6),\n",
        "1005": "            asList(7)),\n",
        "1007": "      @Override protected Iterator<List<Integer>> newTargetIterator() {\n",
        "1016": "    Iterator<List<Integer>> partitions\n",
        "1017": "        = Iterators.partition(list.iterator(), 1);\n",
        "1073": "    new IteratorTester<List<Integer>>(5,\n",
        "1075": "        ImmutableList.of(\n",
        "1076": "            asList(1, 2, 3),\n",
        "1077": "            asList(4, 5, 6),\n",
        "1078": "            asList(7, null, null)),\n",
        "1080": "      @Override protected Iterator<List<Integer>> newTargetIterator() {\n",
        "1089": "    Iterator<List<Integer>> partitions\n",
        "1090": "        = Iterators.paddedPartition(list.iterator(), 1);\n",
        "1116": "    } catch (NoSuchElementException expected) {}\n",
        "1128": "    } catch (UnsupportedOperationException expected) {}\n",
        "1134": "    } catch (NoSuchElementException expected) {}\n",
        "1148": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "1159": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "1163": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "1168": "    new IteratorTester<Integer>(6, UNMODIFIABLE, asList(1, 2, 3),\n",
        "1169": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "1170": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "1178": "    new IteratorTester<Integer>(6, UNMODIFIABLE, asList(1, 2, 3),\n",
        "1179": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "1180": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "1181": "        return Iterators.forArray(new Integer[] { 0, 1, 2, 3, 4 }, 1, 3, 0);\n",
        "1310": "    assertEquals(ImmutableList.of(\"cool\"),\n",
        "1311": "        newArrayList(Iterators.limit(list.iterator(), 1)));\n",
        "1331": "    new IteratorTester<Integer>(5, MODIFIABLE, newArrayList(1, 2, 3),\n",
        "1332": "        IteratorTester.KnownOrder.KNOWN_ORDER) {\n",
        "1333": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "1412": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "1424": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "1434": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "1444": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "1512": "    } catch (IllegalArgumentException expected) {}\n",
        "1528": "      @Override protected Iterator<Integer> newTargetIterator() {\n",
        "1536": "    assertTrue(Iterators.removeAll(\n",
        "1537": "        list.iterator(), newArrayList(\"b\", \"d\", \"f\")));\n",
        "1539": "    assertFalse(Iterators.removeAll(\n",
        "1540": "        list.iterator(), newArrayList(\"x\", \"y\", \"z\")));\n",
        "1546": "    assertTrue(Iterators.removeIf(\n",
        "1547": "        list.iterator(),\n",
        "1548": "        new Predicate<String>() {\n",
        "1549": "          @Override\n",
        "1550": "          public boolean apply(String s) {\n",
        "1551": "            return s.equals(\"b\") || s.equals(\"d\") || s.equals(\"f\");\n",
        "1552": "          }\n",
        "1553": "        }));\n",
        "1555": "    assertFalse(Iterators.removeIf(\n",
        "1556": "        list.iterator(),\n",
        "1557": "        new Predicate<String>() {\n",
        "1558": "          @Override\n",
        "1559": "          public boolean apply(String s) {\n",
        "1560": "            return s.equals(\"x\") || s.equals(\"y\") || s.equals(\"z\");\n",
        "1561": "          }\n",
        "1562": "        }));\n",
        "1568": "    assertTrue(Iterators.retainAll(\n",
        "1569": "        list.iterator(), newArrayList(\"b\", \"d\", \"f\")));\n",
        "1571": "    assertFalse(Iterators.retainAll(\n",
        "1572": "        list.iterator(), newArrayList(\"b\", \"e\", \"d\")));\n",
        "1578": "    return ListTestSuiteBuilder.using(new TestStringListGenerator() {\n",
        "1579": "          @Override public List<String> create(final String[] elements) {\n",
        "1580": "            final List<String> delegate = newArrayList(elements);\n",
        "1581": "            return new ForwardingList<String>() {\n",
        "1582": "              @Override protected List<String> delegate() {\n",
        "1583": "                return delegate;\n",
        "1585": "\n",
        "1586": "              @Override public boolean removeAll(Collection<?> c) {\n",
        "1587": "                return Iterators.removeAll(iterator(), c);\n",
        "1588": "              }\n",
        "1589": "\n",
        "1590": "              @Override public boolean retainAll(Collection<?> c) {\n",
        "1591": "                return Iterators.retainAll(iterator(), c);\n",
        "1592": "              }\n",
        "1593": "            };\n",
        "1594": "          }\n",
        "1595": "        })\n",
        "1598": "            ListFeature.GENERAL_PURPOSE,\n",
        "1599": "            CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "1600": "            CollectionSize.ANY)\n",
        "1609": "    Iterator<String> consumingIterator =\n",
        "1610": "        Iterators.consumingIterator(list.iterator());\n",
        "1648": "    Iterator<String> iterator =\n",
        "1649": "        Lists.newArrayList(\"manny\", \"mo\", \"jack\").iterator();\n",
        "1656": "    Iterator<String> iterator =\n",
        "1657": "        Lists.newArrayList(\"manny\", \"mo\", \"mo\", \"jack\").iterator();\n",
        "1665": "    Iterator<String> iterator =\n",
        "1666": "        Lists.newArrayList(\"manny\", \"mo\", \"mo\", \"jack\").iterator();\n"
    }
}