{
    "addition": {
        "46": "    assertEquals(\n",
        "47": "        String.class, new TypeResolver().where(t1, t2).where(t2, String.class).resolveType(t1));\n",
        "70": "    assertEquals(\n",
        "71": "        String.class, resolver.where(String.class, String.class).resolveType(String.class));\n",
        "86": "    } catch (IllegalArgumentException expected) {\n",
        "87": "    }\n",
        "98": "    assertEquals(\n",
        "99": "        String.class,\n",
        "100": "        new TypeResolver()\n",
        "101": "            .where(new TypeCapture<T[]>() {}.capture(), String[].class)\n",
        "102": "            .resolveType(t));\n",
        "107": "    assertEquals(\n",
        "108": "        int.class,\n",
        "114": "    assertEquals(\n",
        "115": "        String.class,\n",
        "116": "        new TypeResolver()\n",
        "117": "            .where(\n",
        "118": "                new TypeCapture<List<T>>() {}.capture(),\n",
        "119": "                new TypeCapture<List<String>>() {}.capture())\n",
        "120": "            .resolveType(t));\n",
        "121": "    assertEquals(\n",
        "122": "        Types.subtypeOf(String.class),\n",
        "123": "        new TypeResolver()\n",
        "124": "            .where(\n",
        "125": "                new TypeCapture<List<T>>() {}.capture(),\n",
        "126": "                new TypeCapture<List<? extends String>>() {}.capture())\n",
        "127": "            .resolveType(t));\n",
        "128": "    assertEquals(\n",
        "129": "        Types.supertypeOf(String.class),\n",
        "130": "        new TypeResolver()\n",
        "131": "            .where(\n",
        "132": "                new TypeCapture<List<T>>() {}.capture(),\n",
        "133": "                new TypeCapture<List<? super String>>() {}.capture())\n",
        "134": "            .resolveType(t));\n",
        "139": "    assertEquals(\n",
        "140": "        String.class,\n",
        "141": "        new TypeResolver()\n",
        "142": "            .where(\n",
        "143": "                new TypeCapture<List<? extends T>>() {}.capture(),\n",
        "144": "                new TypeCapture<List<? extends String>>() {}.capture())\n",
        "145": "            .resolveType(t));\n",
        "146": "    assertEquals(\n",
        "147": "        String.class,\n",
        "148": "        new TypeResolver()\n",
        "149": "            .where(\n",
        "150": "                new TypeCapture<List<? super T>>() {}.capture(),\n",
        "151": "                new TypeCapture<List<? super String>>() {}.capture())\n",
        "152": "            .resolveType(t));\n",
        "159": "    } catch (IllegalArgumentException expected) {\n",
        "160": "    }\n",
        "167": "    } catch (IllegalArgumentException expected) {\n",
        "168": "    }\n",
        "173": "      new TypeResolver()\n",
        "174": "          .where(\n",
        "175": "              new TypeCapture<List<T>>() {}.capture(),\n",
        "176": "              new TypeCapture<Map<String, Integer>>() {}.capture());\n",
        "178": "    } catch (IllegalArgumentException expected) {\n",
        "179": "    }\n",
        "184": "      new TypeResolver()\n",
        "185": "          .where(\n",
        "186": "              new TypeCapture<List<? extends String>>() {}.capture(),\n",
        "187": "              new TypeCapture<List<? extends Integer>>() {}.capture());\n",
        "189": "    } catch (IllegalArgumentException expected) {\n",
        "190": "    }\n",
        "195": "      new TypeResolver()\n",
        "196": "          .where(\n",
        "197": "              new TypeCapture<List<? super String>>() {}.capture(),\n",
        "198": "              new TypeCapture<List<? super Integer>>() {}.capture());\n",
        "200": "    } catch (IllegalArgumentException expected) {\n",
        "201": "    }\n",
        "206": "      new TypeResolver()\n",
        "207": "          .where(\n",
        "208": "              new TypeCapture<List<? extends T>>() {}.capture(),\n",
        "209": "              new TypeCapture<List<? super String>>() {}.capture());\n",
        "211": "    } catch (IllegalArgumentException expected) {\n",
        "212": "    }\n",
        "219": "    } catch (IllegalArgumentException expected) {\n",
        "220": "    }\n",
        "227": "    } catch (IllegalArgumentException expected) {\n",
        "228": "    }\n",
        "235": "    } catch (IllegalArgumentException expected) {\n",
        "236": "    }\n",
        "240": "    TypeResolver resolver =\n",
        "241": "        new TypeResolver()\n",
        "242": "            .where(\n",
        "243": "                new TypeCapture<Iterable<Map<?, V>>>() {}.capture(),\n",
        "244": "                new TypeCapture<Iterable<Map<String, Integer>>>() {}.capture());\n",
        "247": "    assertEquals(Integer.class, resolver.resolveType(new TypeCapture<V>() {}.capture()));\n",
        "252": "    assertEquals(\n",
        "253": "        new TypeCapture<TypedKeyMap<String>>() {}.capture(),\n",
        "258": "            .resolveType(subtype));\n",
        "263": "    assertEquals(\n",
        "264": "        new TypeCapture<TypedListKeyMap<String>>() {}.capture(),\n",
        "269": "            .resolveType(subtype));\n",
        "292": "    ParameterizedType parameterizedType =\n",
        "293": "        (ParameterizedType) new TypeCapture<List<? extends T>>() {}.capture();\n"
    },
    "removed": {
        "46": "    assertEquals(String.class,\n",
        "47": "        new TypeResolver().where(t1, t2).where(t2, String.class).resolveType(t1));\n",
        "70": "    assertEquals(String.class,\n",
        "71": "        resolver.where(String.class, String.class).resolveType(String.class));\n",
        "86": "    } catch (IllegalArgumentException expected) {}\n",
        "97": "    assertEquals(String.class, new TypeResolver()\n",
        "98": "        .where(new TypeCapture<T[]>() {}.capture(), String[].class)\n",
        "99": "        .resolveType(t));\n",
        "104": "    assertEquals(int.class,\n",
        "110": "    assertEquals(String.class, new TypeResolver()\n",
        "111": "        .where(new TypeCapture<List<T>>() {}.capture(),\n",
        "112": "            new TypeCapture<List<String>>() {}.capture())\n",
        "113": "        .resolveType(t));\n",
        "114": "    assertEquals(Types.subtypeOf(String.class), new TypeResolver()\n",
        "115": "        .where(new TypeCapture<List<T>>() {}.capture(),\n",
        "116": "            new TypeCapture<List<? extends String>>() {}.capture())\n",
        "117": "        .resolveType(t));\n",
        "118": "    assertEquals(Types.supertypeOf(String.class), new TypeResolver()\n",
        "119": "        .where(new TypeCapture<List<T>>() {}.capture(),\n",
        "120": "            new TypeCapture<List<? super String>>() {}.capture())\n",
        "121": "        .resolveType(t));\n",
        "126": "    assertEquals(String.class, new TypeResolver()\n",
        "127": "        .where(new TypeCapture<List<? extends T>>() {}.capture(),\n",
        "128": "            new TypeCapture<List<? extends String>>() {}.capture())\n",
        "129": "        .resolveType(t));\n",
        "130": "    assertEquals(String.class, new TypeResolver()\n",
        "131": "        .where(new TypeCapture<List<? super T>>() {}.capture(),\n",
        "132": "            new TypeCapture<List<? super String>>() {}.capture())\n",
        "133": "        .resolveType(t));\n",
        "140": "    } catch (IllegalArgumentException expected) {}\n",
        "147": "    } catch (IllegalArgumentException expected) {}\n",
        "152": "      new TypeResolver().where(\n",
        "153": "          new TypeCapture<List<T>>() {}.capture(),\n",
        "154": "          new TypeCapture<Map<String, Integer>>() {}.capture());\n",
        "156": "    } catch (IllegalArgumentException expected) {}\n",
        "161": "      new TypeResolver().where(\n",
        "162": "          new TypeCapture<List<? extends String>>() {}.capture(),\n",
        "163": "          new TypeCapture<List<? extends Integer>>() {}.capture());\n",
        "165": "    } catch (IllegalArgumentException expected) {}\n",
        "170": "      new TypeResolver().where(\n",
        "171": "          new TypeCapture<List<? super String>>() {}.capture(),\n",
        "172": "          new TypeCapture<List<? super Integer>>() {}.capture());\n",
        "174": "    } catch (IllegalArgumentException expected) {}\n",
        "179": "      new TypeResolver().where(\n",
        "180": "          new TypeCapture<List<? extends T>>() {}.capture(),\n",
        "181": "          new TypeCapture<List<? super String>>() {}.capture());\n",
        "183": "    } catch (IllegalArgumentException expected) {}\n",
        "190": "    } catch (IllegalArgumentException expected) {}\n",
        "197": "    } catch (IllegalArgumentException expected) {}\n",
        "204": "    } catch (IllegalArgumentException expected) {}\n",
        "208": "    TypeResolver resolver = new TypeResolver().where(\n",
        "209": "        new TypeCapture<Iterable<Map<?, V>>>() {}.capture(),\n",
        "210": "        new TypeCapture<Iterable<Map<String, Integer>>>() {}.capture());\n",
        "213": "    assertEquals(\n",
        "214": "        Integer.class, resolver.resolveType(new TypeCapture<V>() {}.capture()));\n",
        "219": "    assertEquals(new TypeCapture<TypedKeyMap<String>>() {}.capture(),\n",
        "224": "        .resolveType(subtype));\n",
        "229": "    assertEquals(new TypeCapture<TypedListKeyMap<String>>() {}.capture(),\n",
        "234": "        .resolveType(subtype));\n",
        "256": "    ParameterizedType parameterizedType = (ParameterizedType)\n",
        "257": "        new TypeCapture<List<? extends T>>() {}.capture();\n"
    }
}