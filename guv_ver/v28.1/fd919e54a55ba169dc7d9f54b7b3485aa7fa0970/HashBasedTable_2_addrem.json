{
    "addition": {
        "33": " * <p>The views returned by {@link #column}, {@link #columnKeySet()}, and {@link #columnMap()} have\n",
        "34": " * iterators that don't support {@code remove()}. Otherwise, all optional operations are supported.\n",
        "35": " * Null row keys, columns keys, and values are not supported.\n",
        "37": " * <p>Lookups by row key are often faster than lookups by column key, because the data is stored in\n",
        "38": " * a {@code Map<R, Map<C, V>>}. A method call like {@code column(columnKey).get(rowKey)} still runs\n",
        "39": " * quickly, since the row key is provided. However, {@code column(columnKey).size()} takes longer,\n",
        "40": " * since an iteration across all row keys occurs.\n",
        "42": " * <p>Note that this implementation is not synchronized. If multiple threads access this table\n",
        "43": " * concurrently and one of the threads modifies the table, it must be synchronized externally.\n",
        "46": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#table\"> {@code Table}</a>.\n",
        "68": "  /** Creates an empty {@code HashBasedTable}. */\n",
        "77": "   * @param expectedCellsPerRow the expected number of column key / value mappings in each row\n",
        "78": "   * @throws IllegalArgumentException if {@code expectedRows} or {@code expectedCellsPerRow} is\n",
        "79": "   *     negative\n",
        "89": "   * Creates a {@code HashBasedTable} with the same mappings as the specified table.\n",
        "92": "   * @throws NullPointerException if any of the row keys, column keys, or values in {@code table} is\n",
        "93": "   *     null\n"
    },
    "removed": {
        "33": " * <p>The views returned by {@link #column}, {@link #columnKeySet()}, and {@link\n",
        "34": " * #columnMap()} have iterators that don't support {@code remove()}. Otherwise,\n",
        "35": " * all optional operations are supported. Null row keys, columns keys, and\n",
        "36": " * values are not supported.\n",
        "38": " * <p>Lookups by row key are often faster than lookups by column key, because\n",
        "39": " * the data is stored in a {@code Map<R, Map<C, V>>}. A method call like {@code\n",
        "40": " * column(columnKey).get(rowKey)} still runs quickly, since the row key is\n",
        "41": " * provided. However, {@code column(columnKey).size()} takes longer, since an\n",
        "42": " * iteration across all row keys occurs.\n",
        "44": " * <p>Note that this implementation is not synchronized. If multiple threads\n",
        "45": " * access this table concurrently and one of the threads modifies the table, it\n",
        "46": " * must be synchronized externally.\n",
        "49": " * \"https://github.com/google/guava/wiki/NewCollectionTypesExplained#table\">\n",
        "50": " * {@code Table}</a>.\n",
        "72": "  /**\n",
        "73": "   * Creates an empty {@code HashBasedTable}.\n",
        "74": "   */\n",
        "83": "   * @param expectedCellsPerRow the expected number of column key / value\n",
        "84": "   *     mappings in each row\n",
        "85": "   * @throws IllegalArgumentException if {@code expectedRows} or {@code\n",
        "86": "   *     expectedCellsPerRow} is negative\n",
        "96": "   * Creates a {@code HashBasedTable} with the same mappings as the specified\n",
        "97": "   * table.\n",
        "100": "   * @throws NullPointerException if any of the row keys, column keys, or values\n",
        "101": "   *     in {@code table} is null\n"
    }
}