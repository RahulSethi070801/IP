{
    "addition": {
        "24": " * href=\"http://en.wikipedia.org/wiki/Decorator_pattern\">decorator pattern</a>. The {@link\n",
        "25": " * #delegate()} method must be overridden to return the instance being decorated.\n",
        "27": " * <p>This class does <i>not</i> forward the {@code hashCode} and {@code equals} methods through to\n",
        "28": " * the backing object, but relies on {@code Object}'s implementation. This is necessary to preserve\n",
        "29": " * the symmetry of {@code equals}. Custom definitions of equality are usually based on an interface,\n",
        "30": " * such as {@code Set} or {@code List}, so that the implementation of {@code equals} can cast the\n",
        "31": " * object being tested for equality to the custom interface. {@code ForwardingObject} implements no\n",
        "32": " * such custom interfaces directly; they are implemented only in subclasses. Therefore, forwarding\n",
        "33": " * {@code equals} would break symmetry, as the forwarding object might consider itself equal to the\n",
        "34": " * object being tested, but the reverse could not be true. This behavior is consistent with the\n",
        "35": " * JDK's collection wrappers, such as {@link java.util.Collections#unmodifiableCollection}. Use an\n",
        "36": " * interface-specific subclass of {@code ForwardingObject}, such as {@link ForwardingList}, to\n",
        "37": " * preserve equality behavior, or override {@code equals} directly.\n",
        "39": " * <p>The {@code toString} method is forwarded to the delegate. Although this class does not\n",
        "40": " * implement {@link Serializable}, a serializable subclass may be created since this class has a\n",
        "41": " * parameter-less constructor.\n",
        "53": "   * Returns the backing delegate instance that methods are forwarded to. Abstract subclasses\n",
        "54": "   * generally override this method with an abstract method that has a more specific return type,\n",
        "55": "   * such as {@link ForwardingSet#delegate}. Concrete subclasses override this method to supply the\n",
        "56": "   * instance being decorated.\n",
        "60": "  /** Returns the string representation generated by the delegate's {@code toString} method. */\n"
    },
    "removed": {
        "24": " * href=\"http://en.wikipedia.org/wiki/Decorator_pattern\">decorator pattern</a>.\n",
        "25": " * The {@link #delegate()} method must be overridden to return the instance\n",
        "26": " * being decorated.\n",
        "28": " * <p>This class does <i>not</i> forward the {@code hashCode} and {@code equals}\n",
        "29": " * methods through to the backing object, but relies on {@code Object}'s\n",
        "30": " * implementation. This is necessary to preserve the symmetry of {@code equals}.\n",
        "31": " * Custom definitions of equality are usually based on an interface, such as\n",
        "32": " * {@code Set} or {@code List}, so that the implementation of {@code equals} can\n",
        "33": " * cast the object being tested for equality to the custom interface. {@code\n",
        "34": " * ForwardingObject} implements no such custom interfaces directly; they\n",
        "35": " * are implemented only in subclasses. Therefore, forwarding {@code equals}\n",
        "36": " * would break symmetry, as the forwarding object might consider itself equal to\n",
        "37": " * the object being tested, but the reverse could not be true. This behavior is\n",
        "38": " * consistent with the JDK's collection wrappers, such as\n",
        "39": " * {@link java.util.Collections#unmodifiableCollection}. Use an\n",
        "40": " * interface-specific subclass of {@code ForwardingObject}, such as {@link\n",
        "41": " * ForwardingList}, to preserve equality behavior, or override {@code equals}\n",
        "42": " * directly.\n",
        "44": " * <p>The {@code toString} method is forwarded to the delegate. Although this\n",
        "45": " * class does not implement {@link Serializable}, a serializable subclass may be\n",
        "46": " * created since this class has a parameter-less constructor.\n",
        "58": "   * Returns the backing delegate instance that methods are forwarded to.\n",
        "59": "   * Abstract subclasses generally override this method with an abstract method\n",
        "60": "   * that has a more specific return type, such as {@link\n",
        "61": "   * ForwardingSet#delegate}. Concrete subclasses override this method to supply\n",
        "62": "   * the instance being decorated.\n",
        "66": "  /**\n",
        "67": "   * Returns the string representation generated by the delegate's\n",
        "68": "   * {@code toString} method.\n",
        "69": "   */\n"
    }
}