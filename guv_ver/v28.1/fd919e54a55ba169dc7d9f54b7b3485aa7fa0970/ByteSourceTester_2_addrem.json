{
    "addition": {
        "41": " * expected to contain as well as as sub-suites for testing the {@code CharSource} view and {@code\n",
        "42": " * slice()} views in the same way.\n",
        "49": "  private static final ImmutableList<Method> testMethods = getTestMethods(ByteSourceTester.class);\n",
        "57": "        suite.addTest(\n",
        "58": "            suiteForBytes(\n",
        "59": "                factory, entry.getValue().getBytes(Charsets.UTF_8), name, entry.getKey(), true));\n",
        "65": "  static TestSuite suiteForString(\n",
        "66": "      ByteSourceFactory factory, String string, String name, String desc) {\n",
        "67": "    TestSuite suite = suiteForBytes(factory, string.getBytes(Charsets.UTF_8), name, desc, true);\n",
        "69": "    suite.addTest(\n",
        "70": "        CharSourceTester.suiteForString(\n",
        "71": "            charSourceFactory, string, name + \".asCharSource[Charset]\", desc));\n",
        "75": "  static TestSuite suiteForBytes(\n",
        "76": "      ByteSourceFactory factory, byte[] bytes, String name, String desc, boolean slice) {\n",
        "91": "      suite.addTest(suiteForBytes(sliced, bytes, name + \".slice[long, long]\", desc, false));\n",
        "95": "      ByteSourceFactory slicedLongMaxValue =\n",
        "96": "          SourceSinkFactories.asSlicedByteSourceFactory(factory, off, Long.MAX_VALUE);\n",
        "97": "      suite.addTest(\n",
        "98": "          suiteForBytes(\n",
        "99": "              slicedLongMaxValue, bytes, name + \".slice[long, Long.MAX_VALUE]\", desc, false));\n",
        "102": "      ByteSourceFactory slicedOffsetPastEnd =\n",
        "103": "          SourceSinkFactories.asSlicedByteSourceFactory(\n",
        "104": "              factory, expected.length + 2, expected.length + 10);\n",
        "105": "      suite.addTest(\n",
        "106": "          suiteForBytes(slicedOffsetPastEnd, bytes, name + \".slice[size + 2, long]\", desc, false));\n",
        "114": "  public ByteSourceTester(\n",
        "115": "      ByteSourceFactory factory, byte[] bytes, String suiteName, String caseDesc, Method method) {\n",
        "158": "    source.copyTo(\n",
        "159": "        new ByteSink() {\n",
        "160": "          @Override\n",
        "161": "          public OutputStream openStream() throws IOException {\n",
        "162": "            return out;\n",
        "163": "          }\n",
        "164": "        });\n",
        "184": "    assertTrue(\n",
        "185": "        source.contentEquals(\n",
        "186": "            new ByteSource() {\n",
        "187": "              @Override\n",
        "188": "              public InputStream openStream() throws IOException {\n",
        "189": "                return new RandomAmountInputStream(\n",
        "190": "                    new ByteArrayInputStream(expected), new Random());\n",
        "191": "              }\n",
        "192": "            }));\n",
        "196": "    byte[] readBytes =\n",
        "197": "        source.read(\n",
        "198": "            new ByteProcessor<byte[]>() {\n",
        "199": "              final ByteArrayOutputStream out = new ByteArrayOutputStream();\n",
        "200": "\n",
        "201": "              @Override\n",
        "202": "              public boolean processBytes(byte[] buf, int off, int len) throws IOException {\n",
        "203": "                out.write(buf, off, len);\n",
        "204": "                return true;\n",
        "205": "              }\n",
        "206": "\n",
        "207": "              @Override\n",
        "208": "              public byte[] getResult() {\n",
        "209": "                return out.toByteArray();\n",
        "210": "              }\n",
        "211": "            });\n"
    },
    "removed": {
        "41": " * expected to contain as well as as sub-suites for testing the {@code CharSource} view and\n",
        "42": " * {@code slice()} views in the same way.\n",
        "49": "  private static final ImmutableList<Method> testMethods\n",
        "50": "      = getTestMethods(ByteSourceTester.class);\n",
        "58": "        suite.addTest(suiteForBytes(factory,\n",
        "59": "            entry.getValue().getBytes(Charsets.UTF_8), name, entry.getKey(), true));\n",
        "65": "  static TestSuite suiteForString(ByteSourceFactory factory, String string,\n",
        "66": "      String name, String desc) {\n",
        "67": "    TestSuite suite = suiteForBytes(\n",
        "68": "        factory, string.getBytes(Charsets.UTF_8), name, desc, true);\n",
        "70": "    suite.addTest(CharSourceTester.suiteForString(charSourceFactory, string,\n",
        "71": "        name + \".asCharSource[Charset]\", desc));\n",
        "75": "  static TestSuite suiteForBytes(ByteSourceFactory factory, byte[] bytes,\n",
        "76": "      String name, String desc, boolean slice) {\n",
        "91": "      suite.addTest(suiteForBytes(sliced, bytes, name + \".slice[long, long]\",\n",
        "92": "          desc, false));\n",
        "96": "      ByteSourceFactory slicedLongMaxValue = SourceSinkFactories.asSlicedByteSourceFactory(\n",
        "97": "          factory, off, Long.MAX_VALUE);\n",
        "98": "      suite.addTest(suiteForBytes(slicedLongMaxValue, bytes, name + \".slice[long, Long.MAX_VALUE]\",\n",
        "99": "          desc, false));\n",
        "102": "      ByteSourceFactory slicedOffsetPastEnd = SourceSinkFactories.asSlicedByteSourceFactory(\n",
        "103": "          factory, expected.length + 2, expected.length + 10);\n",
        "104": "      suite.addTest(suiteForBytes(slicedOffsetPastEnd, bytes, name + \".slice[size + 2, long]\",\n",
        "105": "          desc, false));\n",
        "113": "  public ByteSourceTester(ByteSourceFactory factory, byte[] bytes,\n",
        "114": "      String suiteName, String caseDesc, Method method) {\n",
        "157": "    source.copyTo(new ByteSink() {\n",
        "158": "      @Override\n",
        "159": "      public OutputStream openStream() throws IOException {\n",
        "160": "        return out;\n",
        "161": "      }\n",
        "162": "    });\n",
        "182": "    assertTrue(source.contentEquals(new ByteSource() {\n",
        "183": "      @Override\n",
        "184": "      public InputStream openStream() throws IOException {\n",
        "185": "        return new RandomAmountInputStream(\n",
        "186": "            new ByteArrayInputStream(expected), new Random());\n",
        "187": "      }\n",
        "188": "    }));\n",
        "192": "    byte[] readBytes = source.read(new ByteProcessor<byte[]>() {\n",
        "193": "      final ByteArrayOutputStream out = new ByteArrayOutputStream();\n",
        "194": "\n",
        "195": "      @Override\n",
        "196": "      public boolean processBytes(byte[] buf, int off, int len) throws IOException {\n",
        "197": "        out.write(buf, off, len);\n",
        "198": "        return true;\n",
        "199": "      }\n",
        "200": "\n",
        "201": "      @Override\n",
        "202": "      public byte[] getResult() {\n",
        "203": "        return out.toByteArray();\n",
        "204": "      }\n",
        "205": "    });\n"
    }
}