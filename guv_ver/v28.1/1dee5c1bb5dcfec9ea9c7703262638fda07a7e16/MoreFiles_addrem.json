{
    "addition": {
        "294": "      if (Files.isDirectory(dir, NOFOLLOW_LINKS)) {\n",
        "295": "        try {\n",
        "296": "          return listFiles(dir);\n",
        "297": "        } catch (IOException e) {\n",
        "298": "          // the exception thrown when iterating a DirectoryStream if an I/O exception occurs\n",
        "299": "          throw new DirectoryIteratorException(e);\n",
        "302": "      return ImmutableList.of();\n"
    },
    "removed": {
        "28": "import com.google.common.graph.SuccessorsFunction;\n",
        "29": "import com.google.common.graph.Traverser;\n",
        "296": "      return fileTreeChildren(dir);\n",
        "297": "    }\n",
        "298": "  }\n",
        "299": "\n",
        "300": "  /**\n",
        "301": "   * Returns a {@link Traverser} instance for the file and directory tree. The returned traverser\n",
        "302": "   * starts from a {@link Path} and will return all files and directories it encounters.\n",
        "303": "   *\n",
        "304": "   * <p>The returned traverser attempts to avoid following symbolic links to directories. However,\n",
        "305": "   * the traverser cannot guarantee that it will not follow symbolic links to directories as it is\n",
        "306": "   * possible for a directory to be replaced with a symbolic link between checking if the file is a\n",
        "307": "   * directory and actually reading the contents of that directory.\n",
        "308": "   *\n",
        "309": "   * <p>If the {@link Path} passed to one of the traversal methods does not exist or is not a\n",
        "310": "   * directory, no exception will be thrown and the returned {@link Iterable} will contain a single\n",
        "311": "   * element: that path.\n",
        "312": "   *\n",
        "313": "   * <p>{@link DirectoryIteratorException} may be thrown when iterating {@link Iterable} instances\n",
        "314": "   * created by this traverser if an {@link IOException} is thrown by a call to {@link\n",
        "315": "   * #listFiles(Path)}.\n",
        "316": "   *\n",
        "317": "   * <p>Example: {@code MoreFiles.fileTraverser().breadhFirst(\"/\")} may return files with the\n",
        "318": "   * following paths: {@code [\"/\", \"/etc\", \"/home\", \"/usr\", \"/etc/config.txt\", \"/etc/fonts\", ...]}\n",
        "319": "   */\n",
        "320": "  public static Traverser<Path> fileTraverser() {\n",
        "321": "    return Traverser.forTree(FILE_TREE);\n",
        "322": "  }\n",
        "323": "\n",
        "324": "  private static final SuccessorsFunction<Path> FILE_TREE =\n",
        "325": "      new SuccessorsFunction<Path>() {\n",
        "326": "        @Override\n",
        "327": "        public Iterable<Path> successors(Path path) {\n",
        "328": "          return fileTreeChildren(path);\n",
        "330": "      };\n",
        "331": "\n",
        "332": "  private static Iterable<Path> fileTreeChildren(Path dir) {\n",
        "333": "    if (Files.isDirectory(dir, NOFOLLOW_LINKS)) {\n",
        "334": "      try {\n",
        "335": "        return listFiles(dir);\n",
        "336": "      } catch (IOException e) {\n",
        "337": "        // the exception thrown when iterating a DirectoryStream if an I/O exception occurs\n",
        "338": "        throw new DirectoryIteratorException(e);\n",
        "341": "    return ImmutableList.of();\n"
    }
}