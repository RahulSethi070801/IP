{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2017 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.io;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "21": "import com.google.common.collect.Iterables;\n",
        "22": "import com.google.errorprone.annotations.CanIgnoreReturnValue;\n",
        "23": "import java.io.IOException;\n",
        "24": "import java.nio.file.Path;\n",
        "25": "import junit.framework.TestCase;\n",
        "26": "\n",
        "27": "/**\n",
        "28": " * Tests for {@link MoreFiles#fileTraverser()}.\n",
        "29": " *\n",
        "30": " * @author Jens Nyman\n",
        "31": " */\n",
        "32": "\n",
        "33": "public class MoreFilesFileTraverserTest extends TestCase {\n",
        "34": "\n",
        "35": "  private Path rootDir;\n",
        "36": "\n",
        "37": "  @Override\n",
        "38": "  public void setUp() throws IOException {\n",
        "39": "    rootDir = Files.createTempDir().toPath();\n",
        "40": "  }\n",
        "41": "\n",
        "42": "  @Override\n",
        "43": "  public void tearDown() throws IOException {\n",
        "44": "    MoreFiles.deleteRecursively(rootDir);\n",
        "45": "  }\n",
        "46": "\n",
        "47": "  public void testFileTraverser_emptyDirectory() throws Exception {\n",
        "48": "    assertThat(MoreFiles.fileTraverser().breadthFirst(rootDir)).containsExactly(rootDir);\n",
        "49": "  }\n",
        "50": "\n",
        "51": "  public void testFileTraverser_nonExistingFile() throws Exception {\n",
        "52": "    Path file = rootDir.resolve(\"file-that-doesnt-exist\");\n",
        "53": "\n",
        "54": "    assertThat(MoreFiles.fileTraverser().breadthFirst(file)).containsExactly(file);\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  public void testFileTraverser_file() throws Exception {\n",
        "58": "    Path file = newFile(\"some-file\");\n",
        "59": "\n",
        "60": "    assertThat(MoreFiles.fileTraverser().breadthFirst(file)).containsExactly(file);\n",
        "61": "  }\n",
        "62": "\n",
        "63": "  public void testFileTraverser_singleFile() throws Exception {\n",
        "64": "    Path file = newFile(\"some-file\");\n",
        "65": "\n",
        "66": "    assertThat(MoreFiles.fileTraverser().breadthFirst(rootDir)).containsExactly(rootDir, file);\n",
        "67": "  }\n",
        "68": "\n",
        "69": "  public void testFileTraverser_singleDirectory() throws Exception {\n",
        "70": "    Path file = newDir(\"some-dir\");\n",
        "71": "\n",
        "72": "    assertThat(MoreFiles.fileTraverser().breadthFirst(rootDir)).containsExactly(rootDir, file);\n",
        "73": "  }\n",
        "74": "\n",
        "75": "  public void testFileTraverser_multipleFilesAndDirectories() throws Exception {\n",
        "76": "    Path fileA = newFile(\"file-a\");\n",
        "77": "    Path fileB = newFile(\"file-b\");\n",
        "78": "    Path dir1 = newDir(\"dir-1\");\n",
        "79": "    Path dir2 = newDir(\"dir-2\");\n",
        "80": "\n",
        "81": "    assertThat(MoreFiles.fileTraverser().breadthFirst(rootDir))\n",
        "82": "        .containsExactly(rootDir, fileA, fileB, dir1, dir2);\n",
        "83": "  }\n",
        "84": "\n",
        "85": "  public void testFileTraverser_multipleDirectoryLayers_breadthFirstStartsWithTopLayer()\n",
        "86": "      throws Exception {\n",
        "87": "    Path fileA = newFile(\"file-a\");\n",
        "88": "    Path dir1 = newDir(\"dir-1\");\n",
        "89": "    newFile(\"dir-1/file-b\");\n",
        "90": "    newFile(\"dir-1/dir-2\");\n",
        "91": "\n",
        "92": "    assertThat(Iterables.limit(MoreFiles.fileTraverser().breadthFirst(rootDir), 3))\n",
        "93": "        .containsExactly(rootDir, fileA, dir1);\n",
        "94": "  }\n",
        "95": "\n",
        "96": "  public void testFileTraverser_multipleDirectoryLayers_traversalReturnsAll() throws Exception {\n",
        "97": "    Path fileA = newFile(\"file-a\");\n",
        "98": "    Path dir1 = newDir(\"dir-1\");\n",
        "99": "    Path fileB = newFile(\"dir-1/file-b\");\n",
        "100": "    Path dir2 = newFile(\"dir-1/dir-2\");\n",
        "101": "\n",
        "102": "    assertThat(MoreFiles.fileTraverser().breadthFirst(rootDir))\n",
        "103": "        .containsExactly(rootDir, fileA, fileB, dir1, dir2);\n",
        "104": "  }\n",
        "105": "\n",
        "106": "  @CanIgnoreReturnValue\n",
        "107": "  private Path newDir(String name) {\n",
        "108": "    Path dir = rootDir.resolve(name);\n",
        "109": "    dir.toFile().mkdir();\n",
        "110": "    return dir;\n",
        "111": "  }\n",
        "112": "\n",
        "113": "  @CanIgnoreReturnValue\n",
        "114": "  private Path newFile(String name) throws IOException {\n",
        "115": "    Path file = rootDir.resolve(name);\n",
        "116": "    file.toFile().createNewFile();\n",
        "117": "    return file;\n",
        "118": "  }\n",
        "119": "}\n"
    }
}