{
    "addition": {
        "159": "        assertThat(graph.incidentEdges(node)).contains(EndpointPair.of(graph, predecessor, node));\n",
        "166": "        assertThat(graph.incidentEdges(node)).contains(EndpointPair.of(graph, node, successor));\n",
        "167": "      }\n",
        "168": "\n",
        "169": "      for (EndpointPair<N> endpoints : sanityCheckSet(graph.incidentEdges(node))) {\n",
        "170": "        if (graph.isDirected()) {\n",
        "171": "          assertThat(graph.hasEdgeConnecting(endpoints.source(), endpoints.target())).isTrue();\n",
        "172": "        } else {\n",
        "173": "          assertThat(graph.hasEdgeConnecting(endpoints.nodeU(), endpoints.nodeV())).isTrue();\n",
        "174": "        }\n",
        "211": "  /**\n",
        "212": "   * Verifies that the {@code Set} returned by {@code incidentEdges} has the expected mutability\n",
        "213": "   * property (see the {@code Graph} documentation for more information).\n",
        "214": "   */\n",
        "215": "  @Test\n",
        "216": "  public abstract void incidentEdges_checkReturnedSetMutability();\n",
        "217": "\n",
        "284": "  @Test\n",
        "285": "  public void incidentEdges_noIncidentEdges() {\n",
        "286": "    addNode(N1);\n",
        "287": "    assertThat(graph.incidentEdges(N1)).isEmpty();\n",
        "288": "  }\n",
        "289": "\n",
        "290": "  @Test\n",
        "291": "  public void incidentEdges_nodeNotInGraph() {\n",
        "292": "    try {\n",
        "293": "      graph.incidentEdges(NODE_NOT_IN_GRAPH);\n",
        "294": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "295": "    } catch (IllegalArgumentException e) {\n",
        "296": "      assertNodeNotInGraphErrorMessage(e);\n",
        "297": "    }\n",
        "298": "  }\n",
        "299": "\n"
    },
    "removed": {}
}