[{"func":{"oldfunccode":"","newfunccode":"d788bc15f0721b94f6f79f0a9063247083745a27/Codes/Match_newfunccode_d788bc15f0721b94f6f79f0a9063247083745a27_1.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/d788bc15f0721b94f6f79f0a9063247083745a27/AbstractBaseGraph_2","pathinproj":"guava/src/com/google/common/graph/AbstractBaseGraph.java","addlines":[224,225,226,227,181,182,183,184,185,186],"dellines":[],"addcode":["      @Override\n","      public int size() {\n","        return graph.inDegree(node)\n","            + graph.outDegree(node)\n","            - (graph.successors(node).contains(node) ? 1 : 0);\n","      }\n","      @Override\n","      public int size() {\n","        return graph.adjacentNodes(node).size();\n","      }\n","      @Override\n","      public int size() {\n","        return graph.inDegree(node)\n","            + graph.outDegree(node)\n","            - (graph.successors(node).contains(node) ? 1 : 0);\n","      }\n","      @Override\n","      public int size() {\n","        return graph.adjacentNodes(node).size();\n","      }\n"],"delcode":[],"methodSig":"public int size()"},"doc":{"oldfunccode":"d788bc15f0721b94f6f79f0a9063247083745a27/Codes/Match_olddocfunccode_d788bc15f0721b94f6f79f0a9063247083745a27_1.txt","newfunccode":"d788bc15f0721b94f6f79f0a9063247083745a27/Codes/Match_newdocfunccode_d788bc15f0721b94f6f79f0a9063247083745a27_1.txt","newdoc":"","newJdoc":"d788bc15f0721b94f6f79f0a9063247083745a27/Codes/Match_newdocnewJdoc_d788bc15f0721b94f6f79f0a9063247083745a27_1.txt","olddoc":"","oldJdoc":"d788bc15f0721b94f6f79f0a9063247083745a27/Codes/Match_olddocJdoc_d788bc15f0721b94f6f79f0a9063247083745a27_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/d788bc15f0721b94f6f79f0a9063247083745a27/BaseGraph","pathinproj":"android/guava/src/com/google/common/graph/BaseGraph.java","addlines":[108,109],"dellines":[101,102],"addcode":["   * <p>For undirected graphs, this is equal to {@code incidentEdges(node).size()} + (number of\n","   * self-loops incident to {@code node}).\n","   * <p>For undirected graphs, this is equal to {@code incidentEdges(node).size()} + (number of\n","   * self-loops incident to {@code node}).\n"],"delcode":["   * <p>For undirected graphs, this is equal to {@code adjacentNodes(node).size()} + (1 if {@code\n","   * node} has an incident self-loop, 0 otherwise).\n","   * <p>For undirected graphs, this is equal to {@code adjacentNodes(node).size()} + (1 if {@code\n","   * node} has an incident self-loop, 0 otherwise).\n"],"methodSig":" int degree(N node)"},"id":5,"flag":1,"commit":"d788bc15f0721b94f6f79f0a9063247083745a27"},{"func":{"oldfunccode":"","newfunccode":"d788bc15f0721b94f6f79f0a9063247083745a27/Codes/Match_newfunccode_d788bc15f0721b94f6f79f0a9063247083745a27_2.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/d788bc15f0721b94f6f79f0a9063247083745a27/AbstractBaseGraph_2","pathinproj":"guava/src/com/google/common/graph/AbstractBaseGraph.java","addlines":[192,193,194,195,196,197,198,199,200,201,202,203,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,188,189,190,191],"dellines":[],"addcode":["      @Override\n","      public boolean contains(@NullableDecl Object obj) {\n","        if (!(obj instanceof EndpointPair)) {\n","          return false;\n","        }\n","\n","        EndpointPair<?> endpointPair = (EndpointPair<?>) obj;\n","        if (!endpointPair.isOrdered()) {\n","          return false;\n","        }\n","\n","        Object source = endpointPair.source();\n","        Object target = endpointPair.target();\n","        return (node.equals(source) && graph.successors(node).contains(target))\n","            || (node.equals(target) && graph.predecessors(node).contains(source));\n","      }\n","      @Override\n","      public boolean contains(@NullableDecl Object obj) {\n","        if (!(obj instanceof EndpointPair)) {\n","          return false;\n","        }\n","\n","        EndpointPair<?> endpointPair = (EndpointPair<?>) obj;\n","        if (endpointPair.isOrdered()) {\n","          return false;\n","        }\n","        Set<N> adjacent = graph.adjacentNodes(node);\n","        Object nodeU = endpointPair.nodeU();\n","        Object nodeV = endpointPair.nodeV();\n","\n","        return (node.equals(nodeV) && adjacent.contains(nodeU))\n","            || (node.equals(nodeU) && adjacent.contains(nodeV));\n","      }\n","      @Override\n","      public boolean contains(@NullableDecl Object obj) {\n","        if (!(obj instanceof EndpointPair)) {\n","          return false;\n","        }\n","\n","        EndpointPair<?> endpointPair = (EndpointPair<?>) obj;\n","        if (!endpointPair.isOrdered()) {\n","          return false;\n","        }\n","\n","        Object source = endpointPair.source();\n","        Object target = endpointPair.target();\n","        return (node.equals(source) && graph.successors(node).contains(target))\n","            || (node.equals(target) && graph.predecessors(node).contains(source));\n","      }\n","      @Override\n","      public boolean contains(@NullableDecl Object obj) {\n","        if (!(obj instanceof EndpointPair)) {\n","          return false;\n","        }\n","\n","        EndpointPair<?> endpointPair = (EndpointPair<?>) obj;\n","        if (endpointPair.isOrdered()) {\n","          return false;\n","        }\n","        Set<N> adjacent = graph.adjacentNodes(node);\n","        Object nodeU = endpointPair.nodeU();\n","        Object nodeV = endpointPair.nodeV();\n","\n","        return (node.equals(nodeV) && adjacent.contains(nodeU))\n","            || (node.equals(nodeU) && adjacent.contains(nodeV));\n","      }\n"],"delcode":[],"methodSig":"public boolean contains(@NullableDecl Object obj)"},"doc":{"oldfunccode":"d788bc15f0721b94f6f79f0a9063247083745a27/Codes/Match_olddocfunccode_d788bc15f0721b94f6f79f0a9063247083745a27_2.txt","newfunccode":"d788bc15f0721b94f6f79f0a9063247083745a27/Codes/Match_newdocfunccode_d788bc15f0721b94f6f79f0a9063247083745a27_2.txt","newdoc":"","newJdoc":"d788bc15f0721b94f6f79f0a9063247083745a27/Codes/Match_newdocnewJdoc_d788bc15f0721b94f6f79f0a9063247083745a27_2.txt","olddoc":"","oldJdoc":"d788bc15f0721b94f6f79f0a9063247083745a27/Codes/Match_olddocJdoc_d788bc15f0721b94f6f79f0a9063247083745a27_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/d788bc15f0721b94f6f79f0a9063247083745a27/BaseGraph","pathinproj":"android/guava/src/com/google/common/graph/BaseGraph.java","addlines":[108,109],"dellines":[101,102],"addcode":["   * <p>For undirected graphs, this is equal to {@code incidentEdges(node).size()} + (number of\n","   * self-loops incident to {@code node}).\n","   * <p>For undirected graphs, this is equal to {@code incidentEdges(node).size()} + (number of\n","   * self-loops incident to {@code node}).\n"],"delcode":["   * <p>For undirected graphs, this is equal to {@code adjacentNodes(node).size()} + (1 if {@code\n","   * node} has an incident self-loop, 0 otherwise).\n","   * <p>For undirected graphs, this is equal to {@code adjacentNodes(node).size()} + (1 if {@code\n","   * node} has an incident self-loop, 0 otherwise).\n"],"methodSig":" int degree(N node)"},"id":5,"flag":1,"commit":"d788bc15f0721b94f6f79f0a9063247083745a27"},{"func":{"oldfunccode":"","newfunccode":"d788bc15f0721b94f6f79f0a9063247083745a27/Codes/Match_newfunccode_d788bc15f0721b94f6f79f0a9063247083745a27_3.txt","newdoc":" filter out 'node' from successors (already covered by predecessors, above)\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/d788bc15f0721b94f6f79f0a9063247083745a27/AbstractBaseGraph_2","pathinproj":"guava/src/com/google/common/graph/AbstractBaseGraph.java","addlines":[211,212,213,214,215,216,217,218,219,220,221,158,222,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179],"dellines":[],"addcode":["      @Override\n","      public UnmodifiableIterator<EndpointPair<N>> iterator() {\n","        return Iterators.unmodifiableIterator(\n","            Iterators.concat(\n","                Iterators.transform(\n","                    graph.predecessors(node).iterator(),\n","                    new Function<N, EndpointPair<N>>() {\n","                      @Override\n","                      public EndpointPair<N> apply(N predecessor) {\n","                        return EndpointPair.ordered(predecessor, node);\n","                      }\n","                    }),\n","                Iterators.transform(\n","                    Sets.difference(graph.successors(node), ImmutableSet.of(node)).iterator(),\n","                    new Function<N, EndpointPair<N>>() {\n","                      @Override\n","                      public EndpointPair<N> apply(N successor) {\n","                        return EndpointPair.ordered(node, successor);\n","                      }\n","                    })));\n","      }\n","      @Override\n","      public UnmodifiableIterator<EndpointPair<N>> iterator() {\n","        return Iterators.unmodifiableIterator(\n","            Iterators.transform(\n","                graph.adjacentNodes(node).iterator(),\n","                new Function<N, EndpointPair<N>>() {\n","                  @Override\n","                  public EndpointPair<N> apply(N adjacentNode) {\n","                    return EndpointPair.unordered(node, adjacentNode);\n","                  }\n","                }));\n","      }\n","      @Override\n","      public UnmodifiableIterator<EndpointPair<N>> iterator() {\n","        return Iterators.unmodifiableIterator(\n","            Iterators.concat(\n","                Iterators.transform(\n","                    graph.predecessors(node).iterator(),\n","                    new Function<N, EndpointPair<N>>() {\n","                      @Override\n","                      public EndpointPair<N> apply(N predecessor) {\n","                        return EndpointPair.ordered(predecessor, node);\n","                      }\n","                    }),\n","                Iterators.transform(\n","                    Sets.difference(graph.successors(node), ImmutableSet.of(node)).iterator(),\n","                    new Function<N, EndpointPair<N>>() {\n","                      @Override\n","                      public EndpointPair<N> apply(N successor) {\n","                        return EndpointPair.ordered(node, successor);\n","                      }\n","                    })));\n","      }\n","      @Override\n","      public UnmodifiableIterator<EndpointPair<N>> iterator() {\n","        return Iterators.unmodifiableIterator(\n","            Iterators.transform(\n","                graph.adjacentNodes(node).iterator(),\n","                new Function<N, EndpointPair<N>>() {\n","                  @Override\n","                  public EndpointPair<N> apply(N adjacentNode) {\n","                    return EndpointPair.unordered(node, adjacentNode);\n","                  }\n","                }));\n","      }\n"],"delcode":[],"methodSig":"public UnmodifiableIterator<EndpointPair<N>> iterator()"},"doc":{"oldfunccode":"d788bc15f0721b94f6f79f0a9063247083745a27/Codes/Match_olddocfunccode_d788bc15f0721b94f6f79f0a9063247083745a27_3.txt","newfunccode":"d788bc15f0721b94f6f79f0a9063247083745a27/Codes/Match_newdocfunccode_d788bc15f0721b94f6f79f0a9063247083745a27_3.txt","newdoc":"","newJdoc":"d788bc15f0721b94f6f79f0a9063247083745a27/Codes/Match_newdocnewJdoc_d788bc15f0721b94f6f79f0a9063247083745a27_3.txt","olddoc":"","oldJdoc":"d788bc15f0721b94f6f79f0a9063247083745a27/Codes/Match_olddocJdoc_d788bc15f0721b94f6f79f0a9063247083745a27_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/d788bc15f0721b94f6f79f0a9063247083745a27/BaseGraph","pathinproj":"android/guava/src/com/google/common/graph/BaseGraph.java","addlines":[108,109],"dellines":[101,102],"addcode":["   * <p>For undirected graphs, this is equal to {@code incidentEdges(node).size()} + (number of\n","   * self-loops incident to {@code node}).\n","   * <p>For undirected graphs, this is equal to {@code incidentEdges(node).size()} + (number of\n","   * self-loops incident to {@code node}).\n"],"delcode":["   * <p>For undirected graphs, this is equal to {@code adjacentNodes(node).size()} + (1 if {@code\n","   * node} has an incident self-loop, 0 otherwise).\n","   * <p>For undirected graphs, this is equal to {@code adjacentNodes(node).size()} + (1 if {@code\n","   * node} has an incident self-loop, 0 otherwise).\n"],"methodSig":" int degree(N node)"},"id":5,"flag":1,"commit":"d788bc15f0721b94f6f79f0a9063247083745a27"}]