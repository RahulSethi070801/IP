{"id": "cd8fb02a9c762707e5b7bbc22507dc8569efe430", "code": [{"0": "android/guava-tests/test/com/google/common/collect/BenchmarkHelpers.java", "added": {"1": ["  public interface InternerImplEnum {\n", "    <E> Interner<E> create(Collection<E> contents);\n", "    String name();\n", "  }\n", "\n"], "2": ["  public enum InternerImpl implements InternerImplEnum {\n", "    WeakInternerImpl {\n", "      @Override\n", "      public <E> Interner<E> create(Collection<E> contents) {\n", "        Interner<E> interner = Interners.newWeakInterner();\n", "        for (E e : contents) {\n", "          interner.intern(e);\n", "        }\n", "        return interner;\n", "      }\n", "    },\n", "    StrongInternerImpl {\n", "      @Override\n", "      public <E> Interner<E> create(Collection<E> contents) {\n", "        Interner<E> interner = Interners.newStrongInterner();\n", "        for (E e : contents) {\n", "          interner.intern(e);\n", "        }\n", "        return interner;\n", "      }\n", "    };\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [53, 54, 55, 56, 57], "2": [412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434]}, "removed_lines": {}}, {"1": "android/guava-tests/test/com/google/common/collect/InternersTest.java", "added": {"1": ["import com.google.common.collect.Interners.InternerImpl;\n", "import com.google.common.collect.MapMakerInternalMap.Strength;\n"], "2": ["    InternerImpl<Object> internerImpl = (InternerImpl<Object>) interner;\n", "    assertEquals(Strength.STRONG, internerImpl.map.keyStrength());\n"], "3": ["    InternerImpl<Object> internerImpl = (InternerImpl<Object>) interner;\n", "    assertEquals(Strength.WEAK, internerImpl.map.keyStrength());\n", "    assertEquals(concurrencyLevel, internerImpl.map.concurrencyLevel);\n"]}, "removed": {"1": ["import static com.google.common.truth.Truth.assertThat;\n", "\n", "import com.google.common.collect.Interners.StrongInterner;\n", "import com.google.common.collect.Interners.WeakInterner;\n"], "2": ["    assertThat(interner).isInstanceOf(StrongInterner.class);\n"], "3": ["    assertThat(interner).isInstanceOf(WeakInterner.class);\n", "    WeakInterner<Object> weakInterner = (WeakInterner<Object>) interner;\n", "    assertEquals(concurrencyLevel, weakInterner.map.concurrencyLevel);\n"]}, "added_lines": {"1": [20, 21], "2": [57, 58], "3": [84, 85, 86]}, "removed_lines": {"1": [19, 20, 22, 23], "2": [59], "3": [85, 86, 87]}}, {"2": "android/guava/src/com/google/common/collect/Interners.java", "added": {"1": ["import com.google.common.collect.MapMaker.Dummy;\n"], "2": ["      if (!strong) {\n", "        mapMaker.weakKeys();\n", "      }\n", "      return new InternerImpl<E>(mapMaker);\n"], "3": ["  static final class InternerImpl<E> implements Interner<E> {\n", "    private InternerImpl(MapMaker mapMaker) {\n", "      this.map = MapMakerInternalMap.createWithDummyValues(\n", "          mapMaker.keyEquivalence(Equivalence.equals()));\n"]}, "removed": {"1": ["import java.util.concurrent.ConcurrentMap;\n"], "2": ["      return strong ? new StrongInterner<E>(mapMaker) : new WeakInterner<E>(mapMaker);\n"], "3": ["  static final class StrongInterner<E> implements Interner<E> {\n", "    @VisibleForTesting\n", "    final ConcurrentMap<E, E> map;\n", "\n", "    private StrongInterner(MapMaker mapMaker) {\n", "      this.map = mapMaker.makeMap();\n", "    }\n", "\n", "    @Override\n", "    public E intern(E sample) {\n", "      E canonical = map.putIfAbsent(checkNotNull(sample), sample);\n", "      return (canonical == null) ? sample : canonical;\n", "    }\n", "  }\n", "\n", "  @VisibleForTesting\n", "  static final class WeakInterner<E> implements Interner<E> {\n", "    private WeakInterner(MapMaker mapMaker) {\n", "      this.map = mapMaker.weakKeys().keyEquivalence(Equivalence.equals()).makeCustomMap();\n"], "4": ["\n", "    private enum Dummy {\n", "      VALUE\n", "    }\n"]}, "added_lines": {"1": [24], "2": [82, 83, 84, 85], "3": [115, 120, 121, 122]}, "removed_lines": {"1": [25], "2": [82], "3": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 133, 134], "4": [163, 164, 165, 166]}}, {"3": "android/guava/src/com/google/common/collect/MapMaker.java", "added": {"1": ["  /**\n", "   * A dummy singleton value type used by {@link Interners}.\n", "   *\n", "   * <p>{@link MapMakerInternalMap} can optimize for memory usage in this case; see\n", "   * {@link MapMakerInternalMap#createWithDummyValues}.\n", "   */\n", "  enum Dummy {\n", "    VALUE\n", "  }\n", "\n"]}, "removed": {"2": ["  /**\n", "   * Returns a MapMakerInternalMap for the benefit of internal callers that use features of that\n", "   * class not exposed through ConcurrentMap.\n", "   */\n", "  @GwtIncompatible // MapMakerInternalMap\n", "  <K, V> MapMakerInternalMap<K, V, ?, ?> makeCustomMap() {\n", "    return MapMakerInternalMap.create(this);\n", "  }\n", "\n"]}, "added_lines": {"1": [242, 243, 244, 245, 246, 247, 248, 249, 250, 251]}, "removed_lines": {"2": [274, 275, 276, 277, 278, 279, 280, 281, 282]}}, {"4": "android/guava/src/com/google/common/collect/MapMakerInternalMap.java", "added": {"1": ["import com.google.common.collect.MapMaker.Dummy;\n"], "2": ["  /** Returns a fresh {@link MapMakerInternalMap} as specified by the given {@code builder}. */\n"], "3": ["  /**\n", "   * Returns a fresh {@link MapMakerInternalMap} with {@link MapMaker.Dummy} values but otherwise as\n", "   * specified by the given {@code builder}. The returned {@link MapMakerInternalMap} will be\n", "   * optimized to saved memory. Since {@link MapMaker.Dummy} is a singleton, we don't need to store\n", "   * any values at all. Because of this optimization, {@code build.getValueStrength()} must\n", "   * be {@link Strength#STRONG}.\n", "   *\n", "   * <p>This method is intended to only be used by the internal implementation of {@link Interners},\n", "   * since a map of dummy values is the exact use case there.\n", "   */\n", "  static <K>\n", "      MapMakerInternalMap<K, Dummy, ? extends InternalEntry<K, Dummy, ?>, ?> createWithDummyValues(\n", "          MapMaker builder) {\n", "    if (builder.getKeyStrength() == Strength.STRONG\n", "        && builder.getValueStrength() == Strength.STRONG) {\n", "      return new MapMakerInternalMap<\n", "          K, Dummy, StrongKeyDummyValueEntry<K>, StrongKeyDummyValueSegment<K>>(\n", "          builder, StrongKeyDummyValueEntry.Helper.<K>instance());\n", "    }\n", "    if (builder.getKeyStrength() == Strength.WEAK\n", "        && builder.getValueStrength() == Strength.STRONG) {\n", "      return new MapMakerInternalMap<\n", "          K, Dummy, WeakKeyDummyValueEntry<K>, WeakKeyDummyValueSegment<K>>(\n", "          builder, WeakKeyDummyValueEntry.Helper.<K>instance());\n", "    }\n", "    if (builder.getValueStrength() == Strength.WEAK) {\n", "      throw new IllegalArgumentException(\"Map cannot have both weak and dummy values\");\n", "    }\n", "    throw new AssertionError();\n", "  }\n", "\n"], "4": ["  /** Concrete implementation of {@link InternalEntry} for strong keys and {@link Dummy} values. */\n", "  static final class StrongKeyDummyValueEntry<K>\n", "      extends AbstractStrongKeyEntry<K, Dummy, StrongKeyDummyValueEntry<K>>\n", "      implements StrongValueEntry<K, Dummy, StrongKeyDummyValueEntry<K>> {\n", "    StrongKeyDummyValueEntry(K key, int hash, @Nullable StrongKeyDummyValueEntry<K> next) {\n", "      super(key, hash, next);\n", "    }\n", "\n", "    @Override\n", "    public Dummy getValue() {\n", "      return Dummy.VALUE;\n", "    }\n", "\n", "    void setValue(Dummy value) {}\n", "\n", "    StrongKeyDummyValueEntry<K> copy(StrongKeyDummyValueEntry<K> newNext) {\n", "      return new StrongKeyDummyValueEntry<K>(this.key, this.hash, newNext);\n", "    }\n", "\n", "    /**\n", "     * Concrete implementation of {@link InternalEntryHelper} for strong keys and {@link Dummy}\n", "     * values.\n", "     */\n", "    static final class Helper<K>\n", "        implements InternalEntryHelper<\n", "            K, Dummy, StrongKeyDummyValueEntry<K>, StrongKeyDummyValueSegment<K>> {\n", "      private static final Helper<?> INSTANCE = new Helper<Object>();\n", "\n", "      @SuppressWarnings(\"unchecked\")\n", "      static <K> Helper<K> instance() {\n", "        return (Helper<K>) INSTANCE;\n", "      }\n", "\n", "      @Override\n", "      public Strength keyStrength() {\n", "        return Strength.STRONG;\n", "      }\n", "\n", "      @Override\n", "      public Strength valueStrength() {\n", "        return Strength.STRONG;\n", "      }\n", "\n", "      @Override\n", "      public StrongKeyDummyValueSegment<K> newSegment(\n", "          MapMakerInternalMap<K, Dummy, StrongKeyDummyValueEntry<K>, StrongKeyDummyValueSegment<K>>\n", "              map,\n", "          int initialCapacity,\n", "          int maxSegmentSize) {\n", "        return new StrongKeyDummyValueSegment<K>(map, initialCapacity, maxSegmentSize);\n", "      }\n", "\n", "      @Override\n", "      public StrongKeyDummyValueEntry<K> copy(\n", "          StrongKeyDummyValueSegment<K> segment,\n", "          StrongKeyDummyValueEntry<K> entry,\n", "          @Nullable StrongKeyDummyValueEntry<K> newNext) {\n", "        return entry.copy(newNext);\n", "      }\n", "\n", "      @Override\n", "      public void setValue(\n", "          StrongKeyDummyValueSegment<K> segment, StrongKeyDummyValueEntry<K> entry, Dummy value) {}\n", "\n", "      @Override\n", "      public StrongKeyDummyValueEntry<K> newEntry(\n", "          StrongKeyDummyValueSegment<K> segment,\n", "          K key,\n", "          int hash,\n", "          @Nullable StrongKeyDummyValueEntry<K> next) {\n", "        return new StrongKeyDummyValueEntry<K>(key, hash, next);\n", "      }\n", "    }\n", "  }\n", "\n"], "5": ["  /** Concrete implementation of {@link InternalEntry} for weak keys and {@link Dummy} values. */\n", "  static final class WeakKeyDummyValueEntry<K>\n", "      extends AbstractWeakKeyEntry<K, Dummy, WeakKeyDummyValueEntry<K>>\n", "      implements StrongValueEntry<K, Dummy, WeakKeyDummyValueEntry<K>> {\n", "    WeakKeyDummyValueEntry(\n", "        ReferenceQueue<K> queue, K key, int hash, @Nullable WeakKeyDummyValueEntry<K> next) {\n", "      super(queue, key, hash, next);\n", "    }\n", "\n", "    @Override\n", "    public Dummy getValue() {\n", "      return Dummy.VALUE;\n", "    }\n", "\n", "    void setValue(Dummy value) {}\n", "\n", "    WeakKeyDummyValueEntry<K> copy(\n", "        ReferenceQueue<K> queueForKeys, WeakKeyDummyValueEntry<K> newNext) {\n", "      return new WeakKeyDummyValueEntry<K>(queueForKeys, getKey(), this.hash, newNext);\n", "    }\n", "\n", "    /**\n", "     * Concrete implementation of {@link InternalEntryHelper} for weak keys and {@link Dummy}\n", "     * values.\n", "     */\n", "    static final class Helper<K>\n", "        implements InternalEntryHelper<\n", "            K, Dummy, WeakKeyDummyValueEntry<K>, WeakKeyDummyValueSegment<K>> {\n", "      private static final Helper<?> INSTANCE = new Helper<Object>();\n", "\n", "      @SuppressWarnings(\"unchecked\")\n", "      static <K> Helper<K> instance() {\n", "        return (Helper<K>) INSTANCE;\n", "      }\n", "\n", "      @Override\n", "      public Strength keyStrength() {\n", "        return Strength.WEAK;\n", "      }\n", "\n", "      @Override\n", "      public Strength valueStrength() {\n", "        return Strength.STRONG;\n", "      }\n", "\n", "      @Override\n", "      public WeakKeyDummyValueSegment<K> newSegment(\n", "          MapMakerInternalMap<K, Dummy, WeakKeyDummyValueEntry<K>, WeakKeyDummyValueSegment<K>> map,\n", "          int initialCapacity,\n", "          int maxSegmentSize) {\n", "        return new WeakKeyDummyValueSegment<K>(map, initialCapacity, maxSegmentSize);\n", "      }\n", "\n", "      @Override\n", "      public WeakKeyDummyValueEntry<K> copy(\n", "          WeakKeyDummyValueSegment<K> segment,\n", "          WeakKeyDummyValueEntry<K> entry,\n", "          @Nullable WeakKeyDummyValueEntry<K> newNext) {\n", "        if (entry.getKey() == null) {\n", "          // key collected\n", "          return null;\n", "        }\n", "        return entry.copy(segment.queueForKeys, newNext);\n", "      }\n", "\n", "      @Override\n", "      public void setValue(\n", "          WeakKeyDummyValueSegment<K> segment, WeakKeyDummyValueEntry<K> entry, Dummy value) {}\n", "\n", "      @Override\n", "      public WeakKeyDummyValueEntry<K> newEntry(\n", "          WeakKeyDummyValueSegment<K> segment,\n", "          K key,\n", "          int hash,\n", "          @Nullable WeakKeyDummyValueEntry<K> next) {\n", "        return new WeakKeyDummyValueEntry<K>(segment.queueForKeys, key, hash, next);\n", "      }\n", "    }\n", "  }\n", "\n"], "6": ["  /** Concrete implementation of {@link Segment} for strong keys and {@link Dummy} values. */\n", "  static final class StrongKeyDummyValueSegment<K>\n", "      extends Segment<K, Dummy, StrongKeyDummyValueEntry<K>, StrongKeyDummyValueSegment<K>> {\n", "    StrongKeyDummyValueSegment(\n", "        MapMakerInternalMap<K, Dummy, StrongKeyDummyValueEntry<K>, StrongKeyDummyValueSegment<K>>\n", "            map,\n", "        int initialCapacity,\n", "        int maxSegmentSize) {\n", "      super(map, initialCapacity, maxSegmentSize);\n", "    }\n", "\n", "    @Override\n", "    StrongKeyDummyValueSegment<K> self() {\n", "      return this;\n", "    }\n", "\n", "    @SuppressWarnings(\"unchecked\")\n", "    @Override\n", "    public StrongKeyDummyValueEntry<K> castForTesting(InternalEntry<K, Dummy, ?> entry) {\n", "      return (StrongKeyDummyValueEntry<K>) entry;\n", "    }\n", "  }\n", "\n"], "7": ["  /** Concrete implementation of {@link Segment} for weak keys and {@link Dummy} values. */\n", "  static final class WeakKeyDummyValueSegment<K>\n", "      extends Segment<K, Dummy, WeakKeyDummyValueEntry<K>, WeakKeyDummyValueSegment<K>> {\n", "    private final ReferenceQueue<K> queueForKeys = new ReferenceQueue<K>();\n", "\n", "    WeakKeyDummyValueSegment(\n", "        MapMakerInternalMap<K, Dummy, WeakKeyDummyValueEntry<K>, WeakKeyDummyValueSegment<K>> map,\n", "        int initialCapacity,\n", "        int maxSegmentSize) {\n", "      super(map, initialCapacity, maxSegmentSize);\n", "    }\n", "\n", "    @Override\n", "    WeakKeyDummyValueSegment<K> self() {\n", "      return this;\n", "    }\n", "\n", "    @Override\n", "    ReferenceQueue<K> getKeyReferenceQueueForTesting() {\n", "      return queueForKeys;\n", "    }\n", "\n", "    @SuppressWarnings(\"unchecked\")\n", "    @Override\n", "    public WeakKeyDummyValueEntry<K> castForTesting(InternalEntry<K, Dummy, ?> entry) {\n", "      return (WeakKeyDummyValueEntry<K>) entry;\n", "    }\n", "\n", "    @Override\n", "    void maybeDrainReferenceQueues() {\n", "      drainKeyReferenceQueue(queueForKeys);\n", "    }\n", "\n", "    @Override\n", "    void maybeClearReferenceQueues() {\n", "      clearReferenceQueue(queueForKeys);\n", "    }\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [23], "2": [196], "3": [225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "4": [589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663], "5": [692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771], "6": [2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138], "7": [2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289]}, "removed_lines": {}}, {"5": "guava-tests/test/com/google/common/collect/BenchmarkHelpers.java", "added": {"1": ["  public interface InternerImplEnum {\n", "    <E> Interner<E> create(Collection<E> contents);\n", "\n", "    String name();\n", "  }\n", "\n"], "2": ["  public enum InternerImpl implements InternerImplEnum {\n", "    WeakInternerImpl {\n", "      @Override\n", "      public <E> Interner<E> create(Collection<E> contents) {\n", "        Interner<E> interner = Interners.newWeakInterner();\n", "        for (E e : contents) {\n", "          interner.intern(e);\n", "        }\n", "        return interner;\n", "      }\n", "    },\n", "    StrongInternerImpl {\n", "      @Override\n", "      public <E> Interner<E> create(Collection<E> contents) {\n", "        Interner<E> interner = Interners.newStrongInterner();\n", "        for (E e : contents) {\n", "          interner.intern(e);\n", "        }\n", "        return interner;\n", "      }\n", "    };\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [53, 54, 55, 56, 57, 58], "2": [381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403]}, "removed_lines": {}}, {"6": "guava-tests/test/com/google/common/collect/InternersTest.java", "added": {"1": ["import com.google.common.collect.Interners.InternerImpl;\n", "import com.google.common.collect.MapMakerInternalMap.Strength;\n"], "2": ["    InternerImpl<Object> internerImpl = (InternerImpl<Object>) interner;\n", "    assertEquals(Strength.STRONG, internerImpl.map.keyStrength());\n"], "3": ["    InternerImpl<Object> internerImpl = (InternerImpl<Object>) interner;\n", "    assertEquals(Strength.WEAK, internerImpl.map.keyStrength());\n", "    assertEquals(concurrencyLevel, internerImpl.map.concurrencyLevel);\n"]}, "removed": {"1": ["import static com.google.common.truth.Truth.assertThat;\n", "\n", "import com.google.common.collect.Interners.StrongInterner;\n", "import com.google.common.collect.Interners.WeakInterner;\n"], "2": ["    assertThat(interner).isInstanceOf(StrongInterner.class);\n"], "3": ["    assertThat(interner).isInstanceOf(WeakInterner.class);\n", "    WeakInterner<Object> weakInterner = (WeakInterner<Object>) interner;\n", "    assertEquals(concurrencyLevel, weakInterner.map.concurrencyLevel);\n"]}, "added_lines": {"1": [20, 21], "2": [57, 58], "3": [84, 85, 86]}, "removed_lines": {"1": [19, 20, 22, 23], "2": [59], "3": [85, 86, 87]}}, {"7": "guava/src/com/google/common/collect/Interners.java", "added": {"1": ["import com.google.common.collect.MapMaker.Dummy;\n"], "2": ["      if (!strong) {\n", "        mapMaker.weakKeys();\n", "      }\n", "      return new InternerImpl<E>(mapMaker);\n"], "3": ["  static final class InternerImpl<E> implements Interner<E> {\n", "    private InternerImpl(MapMaker mapMaker) {\n", "      this.map = MapMakerInternalMap.createWithDummyValues(\n", "          mapMaker.keyEquivalence(Equivalence.equals()));\n"]}, "removed": {"1": ["import java.util.concurrent.ConcurrentMap;\n"], "2": ["      return strong ? new StrongInterner<E>(mapMaker) : new WeakInterner<E>(mapMaker);\n"], "3": ["  static final class StrongInterner<E> implements Interner<E> {\n", "    @VisibleForTesting\n", "    final ConcurrentMap<E, E> map;\n", "\n", "    private StrongInterner(MapMaker mapMaker) {\n", "      this.map = mapMaker.makeMap();\n", "    }\n", "\n", "    @Override\n", "    public E intern(E sample) {\n", "      E canonical = map.putIfAbsent(checkNotNull(sample), sample);\n", "      return (canonical == null) ? sample : canonical;\n", "    }\n", "  }\n", "\n", "  @VisibleForTesting\n", "  static final class WeakInterner<E> implements Interner<E> {\n", "    private WeakInterner(MapMaker mapMaker) {\n", "      this.map = mapMaker.weakKeys().keyEquivalence(Equivalence.equals()).makeCustomMap();\n"], "4": ["\n", "    private enum Dummy {\n", "      VALUE\n", "    }\n"]}, "added_lines": {"1": [24], "2": [82, 83, 84, 85], "3": [115, 120, 121, 122]}, "removed_lines": {"1": [25], "2": [82], "3": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 133, 134], "4": [163, 164, 165, 166]}}, {"8": "guava/src/com/google/common/collect/MapMaker.java", "added": {"1": ["  /**\n", "   * A dummy singleton value type used by {@link Interners}.\n", "   *\n", "   * <p>{@link MapMakerInternalMap} can optimize for memory usage in this case; see\n", "   * {@link MapMakerInternalMap#createWithDummyValues}.\n", "   */\n", "  enum Dummy {\n", "    VALUE\n", "  }\n", "\n"]}, "removed": {"2": ["  /**\n", "   * Returns a MapMakerInternalMap for the benefit of internal callers that use features of that\n", "   * class not exposed through ConcurrentMap.\n", "   */\n", "  @GwtIncompatible // MapMakerInternalMap\n", "  <K, V> MapMakerInternalMap<K, V, ?, ?> makeCustomMap() {\n", "    return MapMakerInternalMap.create(this);\n", "  }\n", "\n"]}, "added_lines": {"1": [242, 243, 244, 245, 246, 247, 248, 249, 250, 251]}, "removed_lines": {"2": [274, 275, 276, 277, 278, 279, 280, 281, 282]}}, {"9": "guava/src/com/google/common/collect/MapMakerInternalMap.java", "added": {"1": ["import com.google.common.collect.MapMaker.Dummy;\n"], "2": ["  /** Returns a fresh {@link MapMakerInternalMap} as specified by the given {@code builder}. */\n"], "3": ["  /**\n", "   * Returns a fresh {@link MapMakerInternalMap} with {@link MapMaker.Dummy} values but otherwise as\n", "   * specified by the given {@code builder}. The returned {@link MapMakerInternalMap} will be\n", "   * optimized to saved memory. Since {@link MapMaker.Dummy} is a singleton, we don't need to store\n", "   * any values at all. Because of this optimization, {@code build.getValueStrength()} must\n", "   * be {@link Strength#STRONG}.\n", "   *\n", "   * <p>This method is intended to only be used by the internal implementation of {@link Interners},\n", "   * since a map of dummy values is the exact use case there.\n", "   */\n", "  static <K>\n", "      MapMakerInternalMap<K, Dummy, ? extends InternalEntry<K, Dummy, ?>, ?> createWithDummyValues(\n", "          MapMaker builder) {\n", "    if (builder.getKeyStrength() == Strength.STRONG\n", "        && builder.getValueStrength() == Strength.STRONG) {\n", "      return new MapMakerInternalMap<\n", "          K, Dummy, StrongKeyDummyValueEntry<K>, StrongKeyDummyValueSegment<K>>(\n", "          builder, StrongKeyDummyValueEntry.Helper.<K>instance());\n", "    }\n", "    if (builder.getKeyStrength() == Strength.WEAK\n", "        && builder.getValueStrength() == Strength.STRONG) {\n", "      return new MapMakerInternalMap<\n", "          K, Dummy, WeakKeyDummyValueEntry<K>, WeakKeyDummyValueSegment<K>>(\n", "          builder, WeakKeyDummyValueEntry.Helper.<K>instance());\n", "    }\n", "    if (builder.getValueStrength() == Strength.WEAK) {\n", "      throw new IllegalArgumentException(\"Map cannot have both weak and dummy values\");\n", "    }\n", "    throw new AssertionError();\n", "  }\n", "\n"], "4": ["  /** Concrete implementation of {@link InternalEntry} for strong keys and {@link Dummy} values. */\n", "  static final class StrongKeyDummyValueEntry<K>\n", "      extends AbstractStrongKeyEntry<K, Dummy, StrongKeyDummyValueEntry<K>>\n", "      implements StrongValueEntry<K, Dummy, StrongKeyDummyValueEntry<K>> {\n", "    StrongKeyDummyValueEntry(K key, int hash, @Nullable StrongKeyDummyValueEntry<K> next) {\n", "      super(key, hash, next);\n", "    }\n", "\n", "    @Override\n", "    public Dummy getValue() {\n", "      return Dummy.VALUE;\n", "    }\n", "\n", "    void setValue(Dummy value) {}\n", "\n", "    StrongKeyDummyValueEntry<K> copy(StrongKeyDummyValueEntry<K> newNext) {\n", "      return new StrongKeyDummyValueEntry<K>(this.key, this.hash, newNext);\n", "    }\n", "\n", "    /**\n", "     * Concrete implementation of {@link InternalEntryHelper} for strong keys and {@link Dummy}\n", "     * values.\n", "     */\n", "    static final class Helper<K>\n", "        implements InternalEntryHelper<\n", "            K, Dummy, StrongKeyDummyValueEntry<K>, StrongKeyDummyValueSegment<K>> {\n", "      private static final Helper<?> INSTANCE = new Helper<Object>();\n", "\n", "      @SuppressWarnings(\"unchecked\")\n", "      static <K> Helper<K> instance() {\n", "        return (Helper<K>) INSTANCE;\n", "      }\n", "\n", "      @Override\n", "      public Strength keyStrength() {\n", "        return Strength.STRONG;\n", "      }\n", "\n", "      @Override\n", "      public Strength valueStrength() {\n", "        return Strength.STRONG;\n", "      }\n", "\n", "      @Override\n", "      public StrongKeyDummyValueSegment<K> newSegment(\n", "          MapMakerInternalMap<K, Dummy, StrongKeyDummyValueEntry<K>, StrongKeyDummyValueSegment<K>>\n", "              map,\n", "          int initialCapacity,\n", "          int maxSegmentSize) {\n", "        return new StrongKeyDummyValueSegment<K>(map, initialCapacity, maxSegmentSize);\n", "      }\n", "\n", "      @Override\n", "      public StrongKeyDummyValueEntry<K> copy(\n", "          StrongKeyDummyValueSegment<K> segment,\n", "          StrongKeyDummyValueEntry<K> entry,\n", "          @Nullable StrongKeyDummyValueEntry<K> newNext) {\n", "        return entry.copy(newNext);\n", "      }\n", "\n", "      @Override\n", "      public void setValue(\n", "          StrongKeyDummyValueSegment<K> segment, StrongKeyDummyValueEntry<K> entry, Dummy value) {}\n", "\n", "      @Override\n", "      public StrongKeyDummyValueEntry<K> newEntry(\n", "          StrongKeyDummyValueSegment<K> segment,\n", "          K key,\n", "          int hash,\n", "          @Nullable StrongKeyDummyValueEntry<K> next) {\n", "        return new StrongKeyDummyValueEntry<K>(key, hash, next);\n", "      }\n", "    }\n", "  }\n", "\n"], "5": ["  /** Concrete implementation of {@link InternalEntry} for weak keys and {@link Dummy} values. */\n", "  static final class WeakKeyDummyValueEntry<K>\n", "      extends AbstractWeakKeyEntry<K, Dummy, WeakKeyDummyValueEntry<K>>\n", "      implements StrongValueEntry<K, Dummy, WeakKeyDummyValueEntry<K>> {\n", "    WeakKeyDummyValueEntry(\n", "        ReferenceQueue<K> queue, K key, int hash, @Nullable WeakKeyDummyValueEntry<K> next) {\n", "      super(queue, key, hash, next);\n", "    }\n", "\n", "    @Override\n", "    public Dummy getValue() {\n", "      return Dummy.VALUE;\n", "    }\n", "\n", "    void setValue(Dummy value) {}\n", "\n", "    WeakKeyDummyValueEntry<K> copy(\n", "        ReferenceQueue<K> queueForKeys, WeakKeyDummyValueEntry<K> newNext) {\n", "      return new WeakKeyDummyValueEntry<K>(queueForKeys, getKey(), this.hash, newNext);\n", "    }\n", "\n", "    /**\n", "     * Concrete implementation of {@link InternalEntryHelper} for weak keys and {@link Dummy}\n", "     * values.\n", "     */\n", "    static final class Helper<K>\n", "        implements InternalEntryHelper<\n", "            K, Dummy, WeakKeyDummyValueEntry<K>, WeakKeyDummyValueSegment<K>> {\n", "      private static final Helper<?> INSTANCE = new Helper<Object>();\n", "\n", "      @SuppressWarnings(\"unchecked\")\n", "      static <K> Helper<K> instance() {\n", "        return (Helper<K>) INSTANCE;\n", "      }\n", "\n", "      @Override\n", "      public Strength keyStrength() {\n", "        return Strength.WEAK;\n", "      }\n", "\n", "      @Override\n", "      public Strength valueStrength() {\n", "        return Strength.STRONG;\n", "      }\n", "\n", "      @Override\n", "      public WeakKeyDummyValueSegment<K> newSegment(\n", "          MapMakerInternalMap<K, Dummy, WeakKeyDummyValueEntry<K>, WeakKeyDummyValueSegment<K>> map,\n", "          int initialCapacity,\n", "          int maxSegmentSize) {\n", "        return new WeakKeyDummyValueSegment<K>(map, initialCapacity, maxSegmentSize);\n", "      }\n", "\n", "      @Override\n", "      public WeakKeyDummyValueEntry<K> copy(\n", "          WeakKeyDummyValueSegment<K> segment,\n", "          WeakKeyDummyValueEntry<K> entry,\n", "          @Nullable WeakKeyDummyValueEntry<K> newNext) {\n", "        if (entry.getKey() == null) {\n", "          // key collected\n", "          return null;\n", "        }\n", "        return entry.copy(segment.queueForKeys, newNext);\n", "      }\n", "\n", "      @Override\n", "      public void setValue(\n", "          WeakKeyDummyValueSegment<K> segment, WeakKeyDummyValueEntry<K> entry, Dummy value) {}\n", "\n", "      @Override\n", "      public WeakKeyDummyValueEntry<K> newEntry(\n", "          WeakKeyDummyValueSegment<K> segment,\n", "          K key,\n", "          int hash,\n", "          @Nullable WeakKeyDummyValueEntry<K> next) {\n", "        return new WeakKeyDummyValueEntry<K>(segment.queueForKeys, key, hash, next);\n", "      }\n", "    }\n", "  }\n", "\n"], "6": ["  /** Concrete implementation of {@link Segment} for strong keys and {@link Dummy} values. */\n", "  static final class StrongKeyDummyValueSegment<K>\n", "      extends Segment<K, Dummy, StrongKeyDummyValueEntry<K>, StrongKeyDummyValueSegment<K>> {\n", "    StrongKeyDummyValueSegment(\n", "        MapMakerInternalMap<K, Dummy, StrongKeyDummyValueEntry<K>, StrongKeyDummyValueSegment<K>>\n", "            map,\n", "        int initialCapacity,\n", "        int maxSegmentSize) {\n", "      super(map, initialCapacity, maxSegmentSize);\n", "    }\n", "\n", "    @Override\n", "    StrongKeyDummyValueSegment<K> self() {\n", "      return this;\n", "    }\n", "\n", "    @SuppressWarnings(\"unchecked\")\n", "    @Override\n", "    public StrongKeyDummyValueEntry<K> castForTesting(InternalEntry<K, Dummy, ?> entry) {\n", "      return (StrongKeyDummyValueEntry<K>) entry;\n", "    }\n", "  }\n", "\n"], "7": ["  /** Concrete implementation of {@link Segment} for weak keys and {@link Dummy} values. */\n", "  static final class WeakKeyDummyValueSegment<K>\n", "      extends Segment<K, Dummy, WeakKeyDummyValueEntry<K>, WeakKeyDummyValueSegment<K>> {\n", "    private final ReferenceQueue<K> queueForKeys = new ReferenceQueue<K>();\n", "\n", "    WeakKeyDummyValueSegment(\n", "        MapMakerInternalMap<K, Dummy, WeakKeyDummyValueEntry<K>, WeakKeyDummyValueSegment<K>> map,\n", "        int initialCapacity,\n", "        int maxSegmentSize) {\n", "      super(map, initialCapacity, maxSegmentSize);\n", "    }\n", "\n", "    @Override\n", "    WeakKeyDummyValueSegment<K> self() {\n", "      return this;\n", "    }\n", "\n", "    @Override\n", "    ReferenceQueue<K> getKeyReferenceQueueForTesting() {\n", "      return queueForKeys;\n", "    }\n", "\n", "    @SuppressWarnings(\"unchecked\")\n", "    @Override\n", "    public WeakKeyDummyValueEntry<K> castForTesting(InternalEntry<K, Dummy, ?> entry) {\n", "      return (WeakKeyDummyValueEntry<K>) entry;\n", "    }\n", "\n", "    @Override\n", "    void maybeDrainReferenceQueues() {\n", "      drainKeyReferenceQueue(queueForKeys);\n", "    }\n", "\n", "    @Override\n", "    void maybeClearReferenceQueues() {\n", "      clearReferenceQueue(queueForKeys);\n", "    }\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [23], "2": [196], "3": [225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "4": [589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663], "5": [692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771], "6": [2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138], "7": [2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289]}, "removed_lines": {}}]}
