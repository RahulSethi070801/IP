{"id": "0f6096df9105ecbbb2d32017eae8fd63562ab298", "code": [{"0": "android/guava-tests/test/com/google/common/graph/GraphsTest.java", "added": {"1": ["    assertThat(transpose.edgeValueOrNull(N1, N2)).isNull();\n", "    assertThat(transpose.edgeValueOrNull(N1, N2)).isEqualTo(E21);\n"]}, "removed": {"1": ["    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();\n", "    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);\n"]}, "added_lines": {"1": [271, 274]}, "removed_lines": {"1": [271, 274]}}, {"1": "android/guava-tests/test/com/google/common/graph/ValueGraphTest.java", "added": {"2": ["        assertThat(graph.edgeValueOrNull(node, otherNode) != null).isEqualTo(hasEdge);\n"], "3": ["    assertThat(graph.edgeValueOrNull(1, 2)).isEqualTo(\"valueA\");\n", "    assertThat(graph.edgeValueOrNull(2, 1)).isEqualTo(\"valueB\");\n", "    assertThat(graph.edgeValueOrNull(2, 3)).isEqualTo(\"valueC\");\n", "    assertThat(graph.edgeValueOrNull(4, 4)).isEqualTo(\"valueD\");\n"], "4": ["    assertThat(graph.edgeValueOrNull(1, 2)).isEqualTo(\"valueB\");\n", "    assertThat(graph.edgeValueOrNull(2, 1)).isEqualTo(\"valueB\");\n", "    assertThat(graph.edgeValueOrNull(2, 3)).isEqualTo(\"valueC\");\n", "    assertThat(graph.edgeValueOrNull(4, 4)).isEqualTo(\"valueD\");\n"], "5": ["  public void edgeValue_missing() {\n", "    assertThat(graph.edgeValueOrNull(1, 2)).isNull();\n", "    assertThat(graph.edgeValueOrNull(2, 1)).isNull();\n", "    assertThat(graph.edgeValueOrNull(1, 2)).isEqualTo(\"valueA\");\n", "    assertThat(graph.edgeValueOrNull(2, 1)).isEqualTo(\"valueB\");\n", "    assertThat(graph.edgeValueOrNull(1, 2)).isNull();\n", "    assertThat(graph.edgeValueOrNull(2, 1)).isEqualTo(\"valueC\");\n"]}, "removed": {"1": ["import static org.junit.Assert.fail;\n"], "2": ["        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n"], "3": ["    assertThat(graph.edgeValue(1, 2)).isEqualTo(\"valueA\");\n", "    assertThat(graph.edgeValue(2, 1)).isEqualTo(\"valueB\");\n", "    assertThat(graph.edgeValue(2, 3)).isEqualTo(\"valueC\");\n", "    assertThat(graph.edgeValue(4, 4)).isEqualTo(\"valueD\");\n"], "4": ["    assertThat(graph.edgeValue(1, 2)).isEqualTo(\"valueB\");\n", "    assertThat(graph.edgeValue(2, 1)).isEqualTo(\"valueB\");\n", "    assertThat(graph.edgeValue(2, 3)).isEqualTo(\"valueC\");\n", "    assertThat(graph.edgeValue(4, 4)).isEqualTo(\"valueD\");\n"], "5": ["  public void edgeValue_edgeNotPresent() {\n", "    graph = ValueGraphBuilder.directed().build();\n", "    graph.addNode(1);\n", "    graph.addNode(2);\n", "\n", "    try {\n", "      graph.edgeValue(2, 1);\n", "      fail(\"Should have rejected edgeValue() if edge not present in graph.\");\n", "    } catch (IllegalArgumentException e) {\n", "      assertThat(e).hasMessage(\"Edge connecting 2 to 1 is not present in this graph.\");\n", "    }\n", "  }\n", "\n", "  @Test\n", "  public void edgeValue_nodeNotPresent() {\n", "    graph = ValueGraphBuilder.undirected().build();\n", "    graph.putEdgeValue(1, 2, \"value\");\n", "\n", "    try {\n", "      graph.edgeValue(2, 3);\n", "      fail(\"Should have rejected edgeValue() if node not present in graph.\");\n", "    } catch (IllegalArgumentException e) {\n", "      assertThat(e).hasMessage(\"Node 3 is not an element of this graph.\");\n", "    }\n", "  }\n", "\n", "  @Test\n", "  public void edgeValueOrDefault() {\n", "    assertThat(graph.edgeValueOrDefault(1, 2, \"default\")).isEqualTo(\"default\");\n", "    assertThat(graph.edgeValueOrDefault(2, 1, \"default\")).isEqualTo(\"default\");\n", "    assertThat(graph.edgeValueOrDefault(1, 2, \"default\")).isEqualTo(\"valueA\");\n", "    assertThat(graph.edgeValueOrDefault(2, 1, \"default\")).isEqualTo(\"valueB\");\n", "    assertThat(graph.edgeValueOrDefault(1, 2, \"default\")).isEqualTo(\"default\");\n", "    assertThat(graph.edgeValueOrDefault(2, 1, \"default\")).isEqualTo(\"valueC\");\n"]}, "added_lines": {"2": [57], "3": [70, 71, 72, 73], "4": [90, 91, 92, 93], "5": [152, 155, 156, 160, 161, 165, 166]}, "removed_lines": {"1": [21], "2": [58], "3": [71, 72, 73, 74], "4": [91, 92, 93, 94], "5": [153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 188, 189, 193, 194]}}, {"2": "android/guava/src/com/google/common/graph/AbstractValueGraph.java", "added": {"3": ["            return graph.edgeValueOrNull(edge.nodeU(), edge.nodeV());\n"]}, "removed": {"1": ["import static com.google.common.base.Preconditions.checkArgument;\n", "import static com.google.common.graph.GraphConstants.NODE_NOT_IN_GRAPH;\n", "\n"], "2": ["  @Override\n", "  public V edgeValue(N nodeU, N nodeV) {\n", "    V value = edgeValueOrDefault(nodeU, nodeV, null);\n", "    if (value == null) {\n", "      checkArgument(nodes().contains(nodeU), NODE_NOT_IN_GRAPH, nodeU);\n", "      checkArgument(nodes().contains(nodeV), NODE_NOT_IN_GRAPH, nodeV);\n", "      throw new IllegalArgumentException(\n", "          \"Edge connecting \" + nodeU + \" to \" + nodeV + \" is not present in this graph.\");\n", "    }\n", "    return value;\n", "  }\n", "\n"], "3": ["            return graph.edgeValue(edge.nodeU(), edge.nodeV());\n"]}, "added_lines": {"3": [140]}, "removed_lines": {"1": [19, 20, 21], "2": [105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116], "3": [155]}}, {"3": "android/guava/src/com/google/common/graph/ConfigurableValueGraph.java", "added": {"1": ["  @Nullable\n", "  public V edgeValueOrNull(N nodeU, N nodeV) {\n", "    checkNotNull(nodeU);\n", "    checkNotNull(nodeV);\n", "    return connectionsU == null\n", "        ? null\n", "        : connectionsU.value(nodeV);\n"]}, "removed": {"1": ["  public V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue) {\n", "    if (connectionsU == null) {\n", "      return defaultValue;\n", "    }\n", "    V value = connectionsU.value(nodeV);\n", "    if (value == null) {\n", "      return defaultValue;\n", "    }\n", "    return value;\n"]}, "added_lines": {"1": [126, 127, 128, 129, 131, 132, 133]}, "removed_lines": {"1": [126, 128, 129, 130, 131, 132, 133, 134, 135]}}, {"4": "android/guava/src/com/google/common/graph/GraphBuilder.java", "added": {"1": ["    return new GraphBuilder<N>(graph.isDirected())\n"]}, "removed": {"1": ["    return new GraphBuilder<Object>(graph.isDirected())\n"]}, "added_lines": {"1": [74]}, "removed_lines": {"1": [74]}}, {"5": "android/guava/src/com/google/common/graph/Graphs.java", "added": {"1": ["import java.util.Collection;\n"], "2": ["    @Nullable\n", "    public V edgeValueOrNull(N nodeU, N nodeV) {\n", "      return graph.edgeValueOrNull(nodeV, nodeU); // transpose\n"], "3": ["    MutableGraph<N> subgraph = (nodes instanceof Collection)\n", "        ? GraphBuilder.from(graph).expectedNodeCount(((Collection) nodes).size()).build()\n", "        : GraphBuilder.from(graph).build();\n"], "4": ["    MutableValueGraph<N, V> subgraph = (nodes instanceof Collection)\n", "        ? ValueGraphBuilder.from(graph).expectedNodeCount(((Collection) nodes).size()).build()\n", "        : ValueGraphBuilder.from(graph).build();\n", "          subgraph.putEdgeValue(node, successorNode, graph.edgeValueOrNull(node, successorNode));\n"], "5": ["    MutableNetwork<N, E> subgraph = (nodes instanceof Collection)\n", "        ? NetworkBuilder.from(network).expectedNodeCount(((Collection) nodes).size()).build()\n", "        : NetworkBuilder.from(network).build();\n"], "6": ["      copy.putEdgeValue(\n", "          edge.nodeU(), edge.nodeV(), graph.edgeValueOrNull(edge.nodeU(), edge.nodeV()));\n"]}, "removed": {"2": ["    public V edgeValue(N nodeU, N nodeV) {\n", "      return graph.edgeValue(nodeV, nodeU); // transpose\n", "    }\n", "\n", "    @Override\n", "    public V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue) {\n", "      return graph.edgeValueOrDefault(nodeV, nodeU, defaultValue); // transpose\n"], "3": ["    MutableGraph<N> subgraph = GraphBuilder.from(graph).build();\n"], "4": ["    MutableValueGraph<N, V> subgraph = ValueGraphBuilder.from(graph).build();\n", "          subgraph.putEdgeValue(node, successorNode, graph.edgeValue(node, successorNode));\n"], "5": ["    MutableNetwork<N, E> subgraph = NetworkBuilder.from(network).build();\n"], "6": ["      copy.putEdgeValue(edge.nodeU(), edge.nodeV(), graph.edgeValue(edge.nodeU(), edge.nodeV()));\n"]}, "added_lines": {"1": [29], "2": [391, 392, 393], "3": [524, 525, 526], "4": [550, 551, 552, 559], "5": [577, 578, 579], "6": [614, 615]}, "removed_lines": {"2": [390, 391, 392, 393, 394, 395, 396], "3": [527], "4": [551, 558], "5": [576], "6": [611]}}, {"6": "android/guava/src/com/google/common/graph/ImmutableValueGraph.java", "added": {"1": ["            return graph.edgeValueOrNull(node, successorNode);\n"]}, "removed": {"1": ["            return graph.edgeValue(node, successorNode);\n"]}, "added_lines": {"1": [90]}, "removed_lines": {"1": [90]}}, {"7": "android/guava/src/com/google/common/graph/NetworkBuilder.java", "added": {"1": ["    return new NetworkBuilder<N, E>(network.isDirected())\n"]}, "removed": {"1": ["    return new NetworkBuilder<Object, Object>(network.isDirected())\n"]}, "added_lines": {"1": [83]}, "removed_lines": {"1": [83]}}, {"8": "android/guava/src/com/google/common/graph/ValueGraph.java", "added": {"1": ["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n", "   * otherwise, returns null.\n", "   * <p>In an undirected graph, this is equal to {@code edgeValueOrNull(nodeV, nodeU)}.\n", "   * @throws IllegalArgumentException if {@code nodeU} or {@code nodeV} is not an element of this\n", "   *     graph\n", "  @Nullable\n", "  V edgeValueOrNull(N nodeU, N nodeV);\n"]}, "removed": {"1": ["   * If there is an edge connecting {@code nodeU} to {@code nodeV}, returns the non-null value\n", "   * associated with that edge.\n", "   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n", "   * @throws IllegalArgumentException if there is no edge connecting {@code nodeU} to {@code nodeV}.\n", "  V edgeValue(N nodeU, N nodeV);\n", "\n", "  /**\n", "   * If there is an edge connecting {@code nodeU} to {@code nodeV}, returns the non-null value\n", "   * associated with that edge; otherwise, returns {@code defaultValue}.\n", "   *\n", "   * <p>In an undirected graph, this is equal to {@code edgeValueOrDefault(nodeV, nodeU,\n", "   * defaultValue)}.\n", "   */\n", "  V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue);\n"]}, "added_lines": {"1": [178, 179, 181, 183, 184, 186, 187]}, "removed_lines": {"1": [178, 179, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194]}}, {"9": "android/guava/src/com/google/common/graph/ValueGraphBuilder.java", "added": {"1": ["  public static <N, V> ValueGraphBuilder<N, V> from(ValueGraph<N, V> graph) {\n", "    return new ValueGraphBuilder<N, V>(graph.isDirected())\n"]}, "removed": {"1": ["  public static <N> ValueGraphBuilder<N, Object> from(ValueGraph<N, ?> graph) {\n", "    return new ValueGraphBuilder<N, Object>(graph.isDirected())\n"]}, "added_lines": {"1": [75, 76]}, "removed_lines": {"1": [75, 76]}}, {"10": "guava-tests/test/com/google/common/graph/GraphsTest.java", "added": {"1": ["    assertThat(transpose.edgeValueOrNull(N1, N2)).isNull();\n", "    assertThat(transpose.edgeValueOrNull(N1, N2)).isEqualTo(E21);\n"]}, "removed": {"1": ["    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();\n", "    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);\n"]}, "added_lines": {"1": [271, 274]}, "removed_lines": {"1": [271, 274]}}, {"11": "guava-tests/test/com/google/common/graph/ValueGraphTest.java", "added": {"2": ["  private static final String DEFAULT = \"default\";\n", "\n"], "3": ["        assertThat(graph.edgeValueOrNull(node, otherNode) != null).isEqualTo(hasEdge);\n"], "4": ["    assertThat(graph.edgeValueOrNull(1, 2)).isEqualTo(\"valueA\");\n", "    assertThat(graph.edgeValueOrNull(2, 1)).isEqualTo(\"valueB\");\n", "    assertThat(graph.edgeValueOrNull(2, 3)).isEqualTo(\"valueC\");\n", "    assertThat(graph.edgeValueOrNull(4, 4)).isEqualTo(\"valueD\");\n"], "5": ["    assertThat(graph.edgeValueOrNull(1, 2)).isEqualTo(\"valueB\");\n", "    assertThat(graph.edgeValueOrNull(2, 1)).isEqualTo(\"valueB\");\n", "    assertThat(graph.edgeValueOrNull(2, 3)).isEqualTo(\"valueC\");\n", "    assertThat(graph.edgeValueOrNull(4, 4)).isEqualTo(\"valueD\");\n"], "6": ["  public void edgeValue_missing() {\n", "    assertThat(graph.edgeValueOrNull(1, 2)).isNull();\n", "    assertThat(graph.edgeValueOrNull(2, 1)).isNull();\n", "    assertThat(graph.edgeValue(1, 2).orElse(DEFAULT)).isEqualTo(DEFAULT);\n", "    assertThat(graph.edgeValue(2, 1).orElse(DEFAULT)).isEqualTo(DEFAULT);\n", "    assertThat(graph.edgeValueOrNull(1, 2)).isEqualTo(\"valueA\");\n", "    assertThat(graph.edgeValueOrNull(2, 1)).isEqualTo(\"valueB\");\n", "    assertThat(graph.edgeValue(1, 2).get()).isEqualTo(\"valueA\");\n", "    assertThat(graph.edgeValue(2, 1).get()).isEqualTo(\"valueB\");\n", "    assertThat(graph.edgeValueOrNull(1, 2)).isNull();\n", "    assertThat(graph.edgeValueOrNull(2, 1)).isEqualTo(\"valueC\");\n", "    assertThat(graph.edgeValue(1, 2).orElse(DEFAULT)).isEqualTo(DEFAULT);\n", "    assertThat(graph.edgeValue(2, 1).get()).isEqualTo(\"valueC\");\n"]}, "removed": {"1": ["import static org.junit.Assert.fail;\n"], "3": ["        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);\n"], "4": ["    assertThat(graph.edgeValue(1, 2)).isEqualTo(\"valueA\");\n", "    assertThat(graph.edgeValue(2, 1)).isEqualTo(\"valueB\");\n", "    assertThat(graph.edgeValue(2, 3)).isEqualTo(\"valueC\");\n", "    assertThat(graph.edgeValue(4, 4)).isEqualTo(\"valueD\");\n"], "5": ["    assertThat(graph.edgeValue(1, 2)).isEqualTo(\"valueB\");\n", "    assertThat(graph.edgeValue(2, 1)).isEqualTo(\"valueB\");\n", "    assertThat(graph.edgeValue(2, 3)).isEqualTo(\"valueC\");\n", "    assertThat(graph.edgeValue(4, 4)).isEqualTo(\"valueD\");\n"], "6": ["  public void edgeValue_edgeNotPresent() {\n", "    graph = ValueGraphBuilder.directed().build();\n", "    graph.addNode(1);\n", "    graph.addNode(2);\n", "\n", "    try {\n", "      graph.edgeValue(2, 1);\n", "      fail(\"Should have rejected edgeValue() if edge not present in graph.\");\n", "    } catch (IllegalArgumentException e) {\n", "      assertThat(e).hasMessage(\"Edge connecting 2 to 1 is not present in this graph.\");\n", "    }\n", "  }\n", "\n", "  @Test\n", "  public void edgeValue_nodeNotPresent() {\n", "    graph = ValueGraphBuilder.undirected().build();\n", "    graph.putEdgeValue(1, 2, \"value\");\n", "\n", "    try {\n", "      graph.edgeValue(2, 3);\n", "      fail(\"Should have rejected edgeValue() if node not present in graph.\");\n", "    } catch (IllegalArgumentException e) {\n", "      assertThat(e).hasMessage(\"Node 3 is not an element of this graph.\");\n", "    }\n", "  }\n", "\n", "  @Test\n", "  public void edgeValueOrDefault() {\n", "    assertThat(graph.edgeValueOrDefault(1, 2, \"default\")).isEqualTo(\"default\");\n", "    assertThat(graph.edgeValueOrDefault(2, 1, \"default\")).isEqualTo(\"default\");\n", "    assertThat(graph.edgeValueOrDefault(1, 2, \"default\")).isEqualTo(\"valueA\");\n", "    assertThat(graph.edgeValueOrDefault(2, 1, \"default\")).isEqualTo(\"valueB\");\n", "    assertThat(graph.edgeValueOrDefault(1, 2, \"default\")).isEqualTo(\"default\");\n", "    assertThat(graph.edgeValueOrDefault(2, 1, \"default\")).isEqualTo(\"valueC\");\n"]}, "added_lines": {"2": [31, 32], "3": [59], "4": [72, 73, 74, 75], "5": [92, 93, 94, 95], "6": [154, 157, 158, 159, 160, 164, 165, 166, 167, 171, 172, 173, 174]}, "removed_lines": {"1": [21], "3": [58], "4": [71, 72, 73, 74], "5": [91, 92, 93, 94], "6": [153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 188, 189, 193, 194]}}, {"12": "guava/src/com/google/common/graph/AbstractValueGraph.java", "added": {"1": ["import java.util.Optional;\n"], "2": ["  public Optional<V> edgeValue(N nodeU, N nodeV) {\n", "    return Optional.ofNullable(edgeValueOrNull(nodeU, nodeV));\n"], "3": ["            return graph.edgeValueOrNull(edge.nodeU(), edge.nodeV());\n"]}, "removed": {"1": ["import static com.google.common.base.Preconditions.checkArgument;\n", "import static com.google.common.graph.GraphConstants.NODE_NOT_IN_GRAPH;\n", "\n"], "2": ["  public V edgeValue(N nodeU, N nodeV) {\n", "    V value = edgeValueOrDefault(nodeU, nodeV, null);\n", "    if (value == null) {\n", "      checkArgument(nodes().contains(nodeU), NODE_NOT_IN_GRAPH, nodeU);\n", "      checkArgument(nodes().contains(nodeV), NODE_NOT_IN_GRAPH, nodeV);\n", "      throw new IllegalArgumentException(\n", "          \"Edge connecting \" + nodeU + \" to \" + nodeV + \" is not present in this graph.\");\n", "    }\n", "    return value;\n"], "3": ["            return graph.edgeValue(edge.nodeU(), edge.nodeV());\n"]}, "added_lines": {"1": [23], "2": [104, 105], "3": [146]}, "removed_lines": {"1": [19, 20, 21], "2": [106, 107, 108, 109, 110, 111, 112, 113, 114], "3": [155]}}, {"13": "guava/src/com/google/common/graph/ConfigurableValueGraph.java", "added": {"1": ["  @Nullable\n", "  public V edgeValueOrNull(N nodeU, N nodeV) {\n", "    checkNotNull(nodeU);\n", "    checkNotNull(nodeV);\n", "    return connectionsU == null\n", "        ? null\n", "        : connectionsU.value(nodeV);\n"]}, "removed": {"1": ["  public V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue) {\n", "    if (connectionsU == null) {\n", "      return defaultValue;\n", "    }\n", "    V value = connectionsU.value(nodeV);\n", "    if (value == null) {\n", "      return defaultValue;\n", "    }\n", "    return value;\n"]}, "added_lines": {"1": [126, 127, 128, 129, 131, 132, 133]}, "removed_lines": {"1": [126, 128, 129, 130, 131, 132, 133, 134, 135]}}, {"14": "guava/src/com/google/common/graph/GraphBuilder.java", "added": {"1": ["    return new GraphBuilder<N>(graph.isDirected())\n"]}, "removed": {"1": ["    return new GraphBuilder<Object>(graph.isDirected())\n"]}, "added_lines": {"1": [74]}, "removed_lines": {"1": [74]}}, {"15": "guava/src/com/google/common/graph/Graphs.java", "added": {"1": ["import java.util.Collection;\n"], "2": ["    public Optional<V> edgeValue(N nodeU, N nodeV) {\n", "    @Nullable\n", "    public V edgeValueOrNull(N nodeU, N nodeV) {\n", "      return graph.edgeValueOrNull(nodeV, nodeU); // transpose\n"], "3": ["    MutableGraph<N> subgraph = (nodes instanceof Collection)\n", "        ? GraphBuilder.from(graph).expectedNodeCount(((Collection) nodes).size()).build()\n", "        : GraphBuilder.from(graph).build();\n"], "4": ["    MutableValueGraph<N, V> subgraph = (nodes instanceof Collection)\n", "        ? ValueGraphBuilder.from(graph).expectedNodeCount(((Collection) nodes).size()).build()\n", "        : ValueGraphBuilder.from(graph).build();\n", "          subgraph.putEdgeValue(node, successorNode, graph.edgeValueOrNull(node, successorNode));\n"], "5": ["    MutableNetwork<N, E> subgraph = (nodes instanceof Collection)\n", "        ? NetworkBuilder.from(network).expectedNodeCount(((Collection) nodes).size()).build()\n", "        : NetworkBuilder.from(network).build();\n"], "6": ["      copy.putEdgeValue(\n", "          edge.nodeU(), edge.nodeV(), graph.edgeValueOrNull(edge.nodeU(), edge.nodeV()));\n"]}, "removed": {"2": ["    public V edgeValue(N nodeU, N nodeV) {\n", "    public V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue) {\n", "      return graph.edgeValueOrDefault(nodeV, nodeU, defaultValue); // transpose\n"], "3": ["    MutableGraph<N> subgraph = GraphBuilder.from(graph).build();\n"], "4": ["    MutableValueGraph<N, V> subgraph = ValueGraphBuilder.from(graph).build();\n", "          subgraph.putEdgeValue(node, successorNode, graph.edgeValue(node, successorNode));\n"], "5": ["    MutableNetwork<N, E> subgraph = NetworkBuilder.from(network).build();\n"], "6": ["      copy.putEdgeValue(edge.nodeU(), edge.nodeV(), graph.edgeValue(edge.nodeU(), edge.nodeV()));\n"]}, "added_lines": {"1": [29], "2": [392, 397, 398, 399], "3": [535, 536, 537], "4": [561, 562, 563, 570], "5": [588, 589, 590], "6": [625, 626]}, "removed_lines": {"2": [391, 396, 397], "3": [533], "4": [557, 564], "5": [582], "6": [617]}}, {"16": "guava/src/com/google/common/graph/ImmutableValueGraph.java", "added": {"1": ["            return graph.edgeValueOrNull(node, successorNode);\n"]}, "removed": {"1": ["            return graph.edgeValue(node, successorNode);\n"]}, "added_lines": {"1": [90]}, "removed_lines": {"1": [90]}}, {"17": "guava/src/com/google/common/graph/Network.java", "added": {"1": ["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n", "   * or {@code Optional.empty()} if no such edge exists.\n"]}, "removed": {"1": ["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present.\n"]}, "added_lines": {"1": [290, 291]}, "removed_lines": {"1": [290]}}, {"18": "guava/src/com/google/common/graph/NetworkBuilder.java", "added": {"1": ["    return new NetworkBuilder<N, E>(network.isDirected())\n"]}, "removed": {"1": ["    return new NetworkBuilder<Object, Object>(network.isDirected())\n"]}, "added_lines": {"1": [83]}, "removed_lines": {"1": [83]}}, {"19": "guava/src/com/google/common/graph/ValueGraph.java", "added": {"1": ["import java.util.Optional;\n"], "2": ["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n", "   * otherwise, returns {@code Optional.empty()}.\n", "   * @throws IllegalArgumentException if {@code nodeU} or {@code nodeV} is not an element of this\n", "   *     graph\n", "  Optional<V> edgeValue(N nodeU, N nodeV);\n", "   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n", "   * otherwise, returns null.\n", "   * <p>In an undirected graph, this is equal to {@code edgeValueOrNull(nodeV, nodeU)}.\n", "   *\n", "   * @throws IllegalArgumentException if {@code nodeU} or {@code nodeV} is not an element of this\n", "   *     graph\n", "  @Nullable\n", "  V edgeValueOrNull(N nodeU, N nodeV);\n"]}, "removed": {"2": ["   * If there is an edge connecting {@code nodeU} to {@code nodeV}, returns the non-null value\n", "   * associated with that edge.\n", "   * @throws IllegalArgumentException if there is no edge connecting {@code nodeU} to {@code nodeV}.\n", "  V edgeValue(N nodeU, N nodeV);\n", "   * If there is an edge connecting {@code nodeU} to {@code nodeV}, returns the non-null value\n", "   * associated with that edge; otherwise, returns {@code defaultValue}.\n", "   * <p>In an undirected graph, this is equal to {@code edgeValueOrDefault(nodeV, nodeU,\n", "   * defaultValue)}.\n", "  V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue);\n"]}, "added_lines": {"1": [20], "2": [179, 180, 184, 185, 187, 190, 191, 193, 194, 195, 196, 198, 199]}, "removed_lines": {"2": [178, 179, 183, 185, 188, 189, 191, 192, 194]}}, {"20": "guava/src/com/google/common/graph/ValueGraphBuilder.java", "added": {"1": ["  public static <N, V> ValueGraphBuilder<N, V> from(ValueGraph<N, V> graph) {\n", "    return new ValueGraphBuilder<N, V>(graph.isDirected())\n"]}, "removed": {"1": ["  public static <N> ValueGraphBuilder<N, Object> from(ValueGraph<N, ?> graph) {\n", "    return new ValueGraphBuilder<N, Object>(graph.isDirected())\n"]}, "added_lines": {"1": [75, 76]}, "removed_lines": {"1": [75, 76]}}]}
