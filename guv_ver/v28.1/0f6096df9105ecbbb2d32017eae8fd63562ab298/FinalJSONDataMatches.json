[{"func":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_1.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_1.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newfuncnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_1.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfuncoldJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/Graphs","pathinproj":"android/guava/src/com/google/common/graph/Graphs.java","addlines":[625,626,614,615],"dellines":[611,617],"addcode":["      copy.putEdgeValue(\n","          edge.nodeU(), edge.nodeV(), graph.edgeValueOrNull(edge.nodeU(), edge.nodeV()));\n","      copy.putEdgeValue(\n","          edge.nodeU(), edge.nodeV(), graph.edgeValueOrNull(edge.nodeU(), edge.nodeV()));\n"],"delcode":["      copy.putEdgeValue(edge.nodeU(), edge.nodeV(), graph.edgeValue(edge.nodeU(), edge.nodeV()));\n","      copy.putEdgeValue(edge.nodeU(), edge.nodeV(), graph.edgeValue(edge.nodeU(), edge.nodeV()));\n"],"methodSig":"public static MutableValueGraph<N, V> copyOf(ValueGraph<N, V> graph)"},"doc":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_1.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_1.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_1.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[290,291],"dellines":[290],"addcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":5,"flag":1,"commit":"0f6096df9105ecbbb2d32017eae8fd63562ab298"},{"func":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_2.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfuncoldJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/ValueGraphBuilder_2","pathinproj":"guava/src/com/google/common/graph/ValueGraphBuilder.java","addlines":[],"dellines":[75,76],"addcode":[],"delcode":["  public static <N> ValueGraphBuilder<N, Object> from(ValueGraph<N, ?> graph) {\n","    return new ValueGraphBuilder<N, Object>(graph.isDirected())\n","  public static <N> ValueGraphBuilder<N, Object> from(ValueGraph<N, ?> graph) {\n","    return new ValueGraphBuilder<N, Object>(graph.isDirected())\n"],"methodSig":"public static ValueGraphBuilder<N, Object> from(ValueGraph<N, ?> graph)"},"doc":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_2.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_2.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_2.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[290,291],"dellines":[290],"addcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"0f6096df9105ecbbb2d32017eae8fd63562ab298"},{"func":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_3.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_3.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newfuncnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_3.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfuncoldJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/GraphBuilder_2","pathinproj":"guava/src/com/google/common/graph/GraphBuilder.java","addlines":[74],"dellines":[74],"addcode":["    return new GraphBuilder<N>(graph.isDirected())\n","    return new GraphBuilder<N>(graph.isDirected())\n"],"delcode":["    return new GraphBuilder<Object>(graph.isDirected())\n","    return new GraphBuilder<Object>(graph.isDirected())\n"],"methodSig":"public static GraphBuilder<N> from(Graph<N> graph)"},"doc":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_3.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_3.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_3.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[290,291],"dellines":[290],"addcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"0f6096df9105ecbbb2d32017eae8fd63562ab298"},{"func":{"oldfunccode":"","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_4.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newfuncnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_4.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[187],"dellines":[],"addcode":["  Optional<V> edgeValue(N nodeU, N nodeV);\n"],"delcode":[],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"doc":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_4.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_4.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_4.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_4.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[290,291],"dellines":[290],"addcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"0f6096df9105ecbbb2d32017eae8fd63562ab298"},{"func":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_5.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_5.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newfuncnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_5.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfuncoldJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_5.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/Graphs","pathinproj":"android/guava/src/com/google/common/graph/Graphs.java","addlines":[577,578,579,588,589,590],"dellines":[576,582],"addcode":["    MutableNetwork<N, E> subgraph = (nodes instanceof Collection)\n","        ? NetworkBuilder.from(network).expectedNodeCount(((Collection) nodes).size()).build()\n","        : NetworkBuilder.from(network).build();\n","    MutableNetwork<N, E> subgraph = (nodes instanceof Collection)\n","        ? NetworkBuilder.from(network).expectedNodeCount(((Collection) nodes).size()).build()\n","        : NetworkBuilder.from(network).build();\n"],"delcode":["    MutableNetwork<N, E> subgraph = NetworkBuilder.from(network).build();\n","    MutableNetwork<N, E> subgraph = NetworkBuilder.from(network).build();\n"],"methodSig":"public static MutableNetwork<N, E> inducedSubgraph(Network<N, E> network, Iterable<? extends N> nodes)"},"doc":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_5.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_5.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_5.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_5.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[290,291],"dellines":[290],"addcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"0f6096df9105ecbbb2d32017eae8fd63562ab298"},{"func":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_6.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_6.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newfuncnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_6.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfuncoldJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_6.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/Graphs","pathinproj":"android/guava/src/com/google/common/graph/Graphs.java","addlines":[535,536,537,524,525,526],"dellines":[533,527],"addcode":["    MutableGraph<N> subgraph = (nodes instanceof Collection)\n","        ? GraphBuilder.from(graph).expectedNodeCount(((Collection) nodes).size()).build()\n","        : GraphBuilder.from(graph).build();\n","    MutableGraph<N> subgraph = (nodes instanceof Collection)\n","        ? GraphBuilder.from(graph).expectedNodeCount(((Collection) nodes).size()).build()\n","        : GraphBuilder.from(graph).build();\n"],"delcode":["    MutableGraph<N> subgraph = GraphBuilder.from(graph).build();\n","    MutableGraph<N> subgraph = GraphBuilder.from(graph).build();\n"],"methodSig":"public static MutableGraph<N> inducedSubgraph(Graph<N> graph, Iterable<? extends N> nodes)"},"doc":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_6.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_6.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_6.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_6.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[290,291],"dellines":[290],"addcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"0f6096df9105ecbbb2d32017eae8fd63562ab298"},{"func":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_7.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_7.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/ImmutableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ImmutableValueGraph.java","addlines":[90],"dellines":[90],"addcode":["            return graph.edgeValueOrNull(node, successorNode);\n","            return graph.edgeValueOrNull(node, successorNode);\n"],"delcode":["            return graph.edgeValue(node, successorNode);\n","            return graph.edgeValue(node, successorNode);\n"],"methodSig":"private static GraphConnections<N, V> connectionsOf(final ValueGraph<N, V> graph, final N node)"},"doc":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_7.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_7.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_7.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_7.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[290,291],"dellines":[290],"addcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"0f6096df9105ecbbb2d32017eae8fd63562ab298"},{"func":{"oldfunccode":"","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_8.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/AbstractValueGraph_2","pathinproj":"guava/src/com/google/common/graph/AbstractValueGraph.java","addlines":[104,392,105],"dellines":[],"addcode":["  public Optional<V> edgeValue(N nodeU, N nodeV) {\n","    return Optional.ofNullable(edgeValueOrNull(nodeU, nodeV));\n","    public Optional<V> edgeValue(N nodeU, N nodeV) {\n"],"delcode":[],"methodSig":"public Optional<V> edgeValue(N nodeU, N nodeV)"},"doc":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_8.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_8.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_8.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_8.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[290,291],"dellines":[290],"addcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"0f6096df9105ecbbb2d32017eae8fd63562ab298"},{"func":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_9.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_9.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newfuncnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_9.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfuncoldJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_9.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/Graphs","pathinproj":"android/guava/src/com/google/common/graph/Graphs.java","addlines":[625,626,614,615],"dellines":[611,617],"addcode":["      copy.putEdgeValue(\n","          edge.nodeU(), edge.nodeV(), graph.edgeValueOrNull(edge.nodeU(), edge.nodeV()));\n","      copy.putEdgeValue(\n","          edge.nodeU(), edge.nodeV(), graph.edgeValueOrNull(edge.nodeU(), edge.nodeV()));\n"],"delcode":["      copy.putEdgeValue(edge.nodeU(), edge.nodeV(), graph.edgeValue(edge.nodeU(), edge.nodeV()));\n","      copy.putEdgeValue(edge.nodeU(), edge.nodeV(), graph.edgeValue(edge.nodeU(), edge.nodeV()));\n"],"methodSig":"public static MutableValueGraph<N, V> copyOf(ValueGraph<N, V> graph)"},"doc":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_9.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_9.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_9.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_9.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[290,291],"dellines":[290],"addcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"0f6096df9105ecbbb2d32017eae8fd63562ab298"},{"func":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_10.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfuncoldJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_10.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/ValueGraph","pathinproj":"android/guava/src/com/google/common/graph/ValueGraph.java","addlines":[],"dellines":[194],"addcode":[],"delcode":["  V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue);\n","  V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue);\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"doc":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_10.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_10.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_10.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_10.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[290,291],"dellines":[290],"addcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"0f6096df9105ecbbb2d32017eae8fd63562ab298"},{"func":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_11.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_11.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newfuncnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_11.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfuncoldJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_11.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/NetworkBuilder_2","pathinproj":"guava/src/com/google/common/graph/NetworkBuilder.java","addlines":[83],"dellines":[83],"addcode":["    return new NetworkBuilder<N, E>(network.isDirected())\n","    return new NetworkBuilder<N, E>(network.isDirected())\n"],"delcode":["    return new NetworkBuilder<Object, Object>(network.isDirected())\n","    return new NetworkBuilder<Object, Object>(network.isDirected())\n"],"methodSig":"public static NetworkBuilder<N, E> from(Network<N, E> network)"},"doc":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_11.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_11.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_11.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_11.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[290,291],"dellines":[290],"addcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"0f6096df9105ecbbb2d32017eae8fd63562ab298"},{"func":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_12.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfuncoldJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_12.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/ValueGraph","pathinproj":"android/guava/src/com/google/common/graph/ValueGraph.java","addlines":[],"dellines":[185],"addcode":[],"delcode":["  V edgeValue(N nodeU, N nodeV);\n","  V edgeValue(N nodeU, N nodeV);\n"],"methodSig":" V edgeValue(N nodeU, N nodeV)"},"doc":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_12.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_12.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_12.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_12.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[290,291],"dellines":[290],"addcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"0f6096df9105ecbbb2d32017eae8fd63562ab298"},{"func":{"oldfunccode":"","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_13.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newfuncnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_13.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/ValueGraphBuilder_2","pathinproj":"guava/src/com/google/common/graph/ValueGraphBuilder.java","addlines":[75,76],"dellines":[],"addcode":["  public static <N, V> ValueGraphBuilder<N, V> from(ValueGraph<N, V> graph) {\n","    return new ValueGraphBuilder<N, V>(graph.isDirected())\n","  public static <N, V> ValueGraphBuilder<N, V> from(ValueGraph<N, V> graph) {\n","    return new ValueGraphBuilder<N, V>(graph.isDirected())\n"],"delcode":[],"methodSig":"public static ValueGraphBuilder<N, V> from(ValueGraph<N, V> graph)"},"doc":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_13.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_13.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_13.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_13.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[290,291],"dellines":[290],"addcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"0f6096df9105ecbbb2d32017eae8fd63562ab298"},{"func":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_14.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/ConfigurableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableValueGraph.java","addlines":[],"dellines":[128,129,130,131,132,133,134,135,394,395,396,126],"addcode":[],"delcode":["  public V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue) {\n","    if (connectionsU == null) {\n","      return defaultValue;\n","    }\n","    V value = connectionsU.value(nodeV);\n","    if (value == null) {\n","      return defaultValue;\n","    }\n","    return value;\n","  public V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue) {\n","    if (connectionsU == null) {\n","      return defaultValue;\n","    }\n","    V value = connectionsU.value(nodeV);\n","    if (value == null) {\n","      return defaultValue;\n","    }\n","    return value;\n","    @Override\n","    public V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue) {\n","    public V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue) {\n"],"methodSig":"public V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"doc":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_14.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_14.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_14.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_14.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[290,291],"dellines":[290],"addcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"0f6096df9105ecbbb2d32017eae8fd63562ab298"},{"func":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_15.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/AbstractValueGraph_2","pathinproj":"guava/src/com/google/common/graph/AbstractValueGraph.java","addlines":[],"dellines":[390,391,392,105,106,107,108,109,110,111,112,113,114,115],"addcode":[],"delcode":["  public V edgeValue(N nodeU, N nodeV) {\n","    V value = edgeValueOrDefault(nodeU, nodeV, null);\n","    if (value == null) {\n","      checkArgument(nodes().contains(nodeU), NODE_NOT_IN_GRAPH, nodeU);\n","      checkArgument(nodes().contains(nodeV), NODE_NOT_IN_GRAPH, nodeV);\n","      throw new IllegalArgumentException(\n","          \"Edge connecting \" + nodeU + \" to \" + nodeV + \" is not present in this graph.\");\n","    }\n","    return value;\n","    public V edgeValue(N nodeU, N nodeV) {\n","    }\n","  @Override\n","  public V edgeValue(N nodeU, N nodeV) {\n","    V value = edgeValueOrDefault(nodeU, nodeV, null);\n","    if (value == null) {\n","      checkArgument(nodes().contains(nodeU), NODE_NOT_IN_GRAPH, nodeU);\n","      checkArgument(nodes().contains(nodeV), NODE_NOT_IN_GRAPH, nodeV);\n","      throw new IllegalArgumentException(\n","          \"Edge connecting \" + nodeU + \" to \" + nodeV + \" is not present in this graph.\");\n","    }\n","    return value;\n","  }\n","    public V edgeValue(N nodeU, N nodeV) {\n"],"methodSig":"public V edgeValue(N nodeU, N nodeV)"},"doc":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_15.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_15.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_15.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_15.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[290,291],"dellines":[290],"addcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"0f6096df9105ecbbb2d32017eae8fd63562ab298"},{"func":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_16.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_16.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newfuncnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_16.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_oldfuncoldJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_16.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/Graphs","pathinproj":"android/guava/src/com/google/common/graph/Graphs.java","addlines":[561,562,563,550,551,552,570,559],"dellines":[564,551,557,558],"addcode":["    MutableValueGraph<N, V> subgraph = (nodes instanceof Collection)\n","        ? ValueGraphBuilder.from(graph).expectedNodeCount(((Collection) nodes).size()).build()\n","        : ValueGraphBuilder.from(graph).build();\n","          subgraph.putEdgeValue(node, successorNode, graph.edgeValueOrNull(node, successorNode));\n","    MutableValueGraph<N, V> subgraph = (nodes instanceof Collection)\n","        ? ValueGraphBuilder.from(graph).expectedNodeCount(((Collection) nodes).size()).build()\n","        : ValueGraphBuilder.from(graph).build();\n","          subgraph.putEdgeValue(node, successorNode, graph.edgeValueOrNull(node, successorNode));\n"],"delcode":["    MutableValueGraph<N, V> subgraph = ValueGraphBuilder.from(graph).build();\n","          subgraph.putEdgeValue(node, successorNode, graph.edgeValue(node, successorNode));\n","    MutableValueGraph<N, V> subgraph = ValueGraphBuilder.from(graph).build();\n","          subgraph.putEdgeValue(node, successorNode, graph.edgeValue(node, successorNode));\n"],"methodSig":"public static MutableValueGraph<N, V> inducedSubgraph(ValueGraph<N, V> graph, Iterable<? extends N> nodes)"},"doc":{"oldfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_16.txt","newfunccode":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocfunccode_0f6096df9105ecbbb2d32017eae8fd63562ab298_16.txt","newdoc":"","newJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_newdocnewJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_16.txt","olddoc":"","oldJdoc":"0f6096df9105ecbbb2d32017eae8fd63562ab298/Codes/Match_olddocJdoc_0f6096df9105ecbbb2d32017eae8fd63562ab298_16.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f6096df9105ecbbb2d32017eae8fd63562ab298/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[290,291],"dellines":[290],"addcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"0f6096df9105ecbbb2d32017eae8fd63562ab298"}]