{
    "addition": {
        "34": "import java.util.concurrent.atomic.AtomicInteger;\n",
        "268": "  public void testForEachPair() {\n",
        "269": "    List<String> list = new ArrayList<>();\n",
        "270": "    Streams.forEachPair(\n",
        "271": "        Stream.of(\"a\", \"b\", \"c\"), Stream.of(1, 2, 3), (a, b) -> list.add(a + \":\" + b));\n",
        "272": "    Truth.assertThat(list).containsExactly(\"a:1\", \"b:2\", \"c:3\");\n",
        "273": "  }\n",
        "274": "\n",
        "275": "  public void testForEachPair_differingLengths1() {\n",
        "276": "    List<String> list = new ArrayList<>();\n",
        "277": "    Streams.forEachPair(\n",
        "278": "        Stream.of(\"a\", \"b\", \"c\", \"d\"), Stream.of(1, 2, 3), (a, b) -> list.add(a + \":\" + b));\n",
        "279": "    Truth.assertThat(list).containsExactly(\"a:1\", \"b:2\", \"c:3\");\n",
        "280": "  }\n",
        "281": "\n",
        "282": "  public void testForEachPair_differingLengths2() {\n",
        "283": "    List<String> list = new ArrayList<>();\n",
        "284": "    Streams.forEachPair(\n",
        "285": "        Stream.of(\"a\", \"b\", \"c\"), Stream.of(1, 2, 3, 4), (a, b) -> list.add(a + \":\" + b));\n",
        "286": "    Truth.assertThat(list).containsExactly(\"a:1\", \"b:2\", \"c:3\");\n",
        "287": "  }\n",
        "288": "\n",
        "289": "  public void testForEachPair_oneEmpty() {\n",
        "290": "    Streams.forEachPair(Stream.of(\"a\"), Stream.empty(), (a, b) -> fail());\n",
        "291": "  }\n",
        "292": "\n",
        "293": "  public void testForEachPair_finiteWithInfinite() {\n",
        "294": "    List<String> list = new ArrayList<>();\n",
        "295": "    Streams.forEachPair(\n",
        "296": "        Stream.of(\"a\", \"b\", \"c\"), Stream.iterate(1, i -> i + 1), (a, b) -> list.add(a + \":\" + b));\n",
        "297": "    Truth.assertThat(list).containsExactly(\"a:1\", \"b:2\", \"c:3\");\n",
        "298": "  }\n",
        "299": "\n",
        "300": "  public void testForEachPair_parallel() {\n",
        "301": "    Stream<String> streamA = IntStream.range(0, 100000).mapToObj(String::valueOf).parallel();\n",
        "302": "    Stream<Integer> streamB = IntStream.range(0, 100000).mapToObj(i -> i).parallel();\n",
        "303": "\n",
        "304": "    AtomicInteger count = new AtomicInteger(0);\n",
        "305": "    Streams.forEachPair(\n",
        "306": "        streamA,\n",
        "307": "        streamB,\n",
        "308": "        (a, b) -> {\n",
        "309": "          count.incrementAndGet();\n",
        "310": "          Truth.assertThat(a.equals(String.valueOf(b))).isTrue();\n",
        "311": "        });\n",
        "312": "    Truth.assertThat(count.get()).isEqualTo(100000);\n",
        "313": "    // of course, this test doesn't prove that anything actually happened in parallel...\n",
        "314": "  }\n",
        "315": "\n"
    },
    "removed": {}
}