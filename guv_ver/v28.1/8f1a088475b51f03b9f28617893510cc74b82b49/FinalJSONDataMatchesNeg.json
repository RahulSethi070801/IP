[{"func":{"oldfunccode":"","newfunccode":"8f1a088475b51f03b9f28617893510cc74b82b49/Codes_neg/Match_newfunccode_8f1a088475b51f03b9f28617893510cc74b82b49_1.txt","newdoc":"","newJdoc":"8f1a088475b51f03b9f28617893510cc74b82b49/Codes_neg/Match_newfuncnewJdoc_8f1a088475b51f03b9f28617893510cc74b82b49_1.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/8f1a088475b51f03b9f28617893510cc74b82b49/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[290,291,292,293,294,295,296,297,298,299,300,301,302,303],"dellines":[],"addcode":["  public static <A, B> void forEachPair(\n","      Stream<A> streamA, Stream<B> streamB, BiConsumer<? super A, ? super B> consumer) {\n","    checkNotNull(consumer);\n","\n","    if (streamA.isParallel() || streamB.isParallel()) {\n","      zip(streamA, streamB, TemporaryPair::new).forEach(pair -> consumer.accept(pair.a, pair.b));\n","    } else {\n","      Iterator<A> iterA = streamA.iterator();\n","      Iterator<B> iterB = streamB.iterator();\n","      while (iterA.hasNext() && iterB.hasNext()) {\n","        consumer.accept(iterA.next(), iterB.next());\n","      }\n","    }\n","  }\n"],"delcode":[],"methodSig":"public static void forEachPair(Stream<A> streamA, Stream<B> streamB, BiConsumer<? super A, ? super B> consumer)"},"doc":{"oldfunccode":"8f1a088475b51f03b9f28617893510cc74b82b49/Codes_neg/Match_olddocfunccode_8f1a088475b51f03b9f28617893510cc74b82b49_1.txt","newfunccode":"8f1a088475b51f03b9f28617893510cc74b82b49/Codes_neg/Match_newdocfunccode_8f1a088475b51f03b9f28617893510cc74b82b49_1.txt","newdoc":" same as Stream.concat\n","newJdoc":"8f1a088475b51f03b9f28617893510cc74b82b49/Codes_neg/Match_newdocnewJdoc_8f1a088475b51f03b9f28617893510cc74b82b49_1.txt","olddoc":" same as Stream.concat\n","oldJdoc":"8f1a088475b51f03b9f28617893510cc74b82b49/Codes_neg/Match_olddocJdoc_8f1a088475b51f03b9f28617893510cc74b82b49_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/8f1a088475b51f03b9f28617893510cc74b82b49/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[209,226,227,228,229],"dellines":[208,225],"addcode":["   * Returns a stream in which each element is the result of passing the corresponding elementY of\n","   * <p>Note that if you are calling {@link Stream#forEach} on the resulting stream, you might want\n","   * to consider using {@link #forEachPair} instead of this method.\n","   *\n","   * <p><b>Performance note:</b> The resulting stream is not <a\n"],"delcode":["   * Returns a stream in which each element is the result of passing the corresponding element of\n","   * <p>The resulting stream is not <a\n"],"methodSig":"public static Stream<R> zip(Stream<A> streamA, Stream<B> streamB, BiFunction<? super A, ? super B, R> function)"},"id":1,"flag":1,"commit":"8f1a088475b51f03b9f28617893510cc74b82b49"}]