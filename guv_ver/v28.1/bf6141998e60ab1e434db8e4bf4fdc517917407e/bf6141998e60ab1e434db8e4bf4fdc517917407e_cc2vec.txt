{"id": "bf6141998e60ab1e434db8e4bf4fdc517917407e", "code": [{"0": "android/guava-tests/test/com/google/common/base/PreconditionsTest.java", "added": {"1": ["  public void testCheckArgument_nullMessageWithArgs_failure() {\n", "    try {\n", "      Preconditions.checkArgument(false, null, \"b\", \"d\");\n", "      fail(\"no exception thrown\");\n", "    } catch (IllegalArgumentException e) {\n", "      assertThat(e).hasMessageThat().isEqualTo(\"null [b, d]\");\n", "    }\n", "  }\n", "\n", "  public void testCheckArgument_nullArgs_failure() {\n", "    try {\n", "      Preconditions.checkArgument(false, \"A %s C %s E\", null, null);\n", "      fail(\"no exception thrown\");\n", "    } catch (IllegalArgumentException e) {\n", "      assertThat(e).hasMessageThat().isEqualTo(\"A null C null E\");\n", "    }\n", "  }\n", "\n", "  public void testCheckArgument_notEnoughArgs_failure() {\n", "    try {\n", "      Preconditions.checkArgument(false, \"A %s C %s E\", \"b\");\n", "      fail(\"no exception thrown\");\n", "    } catch (IllegalArgumentException e) {\n", "      assertThat(e).hasMessageThat().isEqualTo(\"A b C %s E\");\n", "    }\n", "  }\n", "\n", "  public void testCheckArgument_tooManyArgs_failure() {\n", "    try {\n", "      Preconditions.checkArgument(false, \"A %s C %s E\", \"b\", \"d\", \"f\");\n", "      fail(\"no exception thrown\");\n", "    } catch (IllegalArgumentException e) {\n", "      assertThat(e).hasMessageThat().isEqualTo(\"A b C d E [f]\");\n", "    }\n", "  }\n", "\n", "  public void testCheckArgument_singleNullArg_failure() {\n", "    try {\n", "      Preconditions.checkArgument(false, \"A %s C\", (Object) null);\n", "      fail(\"no exception thrown\");\n", "    } catch (IllegalArgumentException e) {\n", "      assertThat(e).hasMessageThat().isEqualTo(\"A null C\");\n", "    }\n", "  }\n", "\n", "  public void testCheckArgument_singleNullArray_failure() {\n", "    try {\n", "      Preconditions.checkArgument(false, \"A %s C\", (Object[]) null);\n", "      fail(\"no exception thrown\");\n", "    } catch (IllegalArgumentException e) {\n", "      assertThat(e).hasMessageThat().isEqualTo(\"A (Object[])null C\");\n", "    }\n", "  }\n", "\n"], "2": ["    assertEquals(\"null\", Preconditions.format(\"%s\", (Object) null));\n", "    assertEquals(\"(Object[])null\", Preconditions.format(\"%s\", (Object[]) null));\n"]}, "removed": {}, "added_lines": {"1": [79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132], "2": [399, 400]}, "removed_lines": {}}, {"1": "android/guava/src/com/google/common/base/Preconditions.java", "added": {"4": ["   * @param template a string containing 0 or more {@code %s} placeholders. null is treated as\n", "   *     \"null\".\n", "  static String format(@Nullable String template, @Nullable Object... args) {\n", "    args = args == null ? new Object[]{\"(Object[])null\"} : args;\n", "\n"]}, "removed": {"1": ["   * @throws NullPointerException if the check fails and either {@code errorMessageTemplate} or\n", "   *     {@code errorMessageArgs} is null (don't let this happen)\n"], "2": ["   * @throws NullPointerException if the check fails and either {@code errorMessageTemplate} or\n", "   *     {@code errorMessageArgs} is null (don't let this happen)\n"], "3": ["      // If either of these parameters is null, the right thing happens anyway\n"], "4": ["   * @param template a non-null string containing 0 or more {@code %s} placeholders.\n", "  static String format(String template, @Nullable Object... args) {\n"]}, "added_lines": {"4": [1287, 1288, 1293, 1296, 1297]}, "removed_lines": {"1": [151, 152], "2": [476, 477], "3": [829], "4": [1292, 1297]}}, {"2": "guava-gwt/test/com/google/common/base/PreconditionsTest_gwt.java", "added": {"1": ["public void testCheckArgument_notEnoughArgs_failure() throws Exception {\n", "  com.google.common.base.PreconditionsTest testCase = new com.google.common.base.PreconditionsTest();\n", "  testCase.testCheckArgument_notEnoughArgs_failure();\n", "}\n", "\n", "public void testCheckArgument_nullArgs_failure() throws Exception {\n", "  com.google.common.base.PreconditionsTest testCase = new com.google.common.base.PreconditionsTest();\n", "  testCase.testCheckArgument_nullArgs_failure();\n", "}\n", "\n", "public void testCheckArgument_nullMessageWithArgs_failure() throws Exception {\n", "  com.google.common.base.PreconditionsTest testCase = new com.google.common.base.PreconditionsTest();\n", "  testCase.testCheckArgument_nullMessageWithArgs_failure();\n", "}\n", "\n"], "2": ["public void testCheckArgument_singleNullArg_failure() throws Exception {\n", "  com.google.common.base.PreconditionsTest testCase = new com.google.common.base.PreconditionsTest();\n", "  testCase.testCheckArgument_singleNullArg_failure();\n", "}\n", "\n", "public void testCheckArgument_singleNullArray_failure() throws Exception {\n", "  com.google.common.base.PreconditionsTest testCase = new com.google.common.base.PreconditionsTest();\n", "  testCase.testCheckArgument_singleNullArray_failure();\n", "}\n", "\n", "public void testCheckArgument_tooManyArgs_failure() throws Exception {\n", "  com.google.common.base.PreconditionsTest testCase = new com.google.common.base.PreconditionsTest();\n", "  testCase.testCheckArgument_tooManyArgs_failure();\n", "}\n", "\n"]}, "removed": {}, "added_lines": {"1": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "2": [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85]}, "removed_lines": {}}, {"3": "guava-tests/test/com/google/common/base/PreconditionsTest.java", "added": {"1": ["  public void testCheckArgument_nullMessageWithArgs_failure() {\n", "    try {\n", "      Preconditions.checkArgument(false, null, \"b\", \"d\");\n", "      fail(\"no exception thrown\");\n", "    } catch (IllegalArgumentException e) {\n", "      assertThat(e).hasMessageThat().isEqualTo(\"null [b, d]\");\n", "    }\n", "  }\n", "\n", "  public void testCheckArgument_nullArgs_failure() {\n", "    try {\n", "      Preconditions.checkArgument(false, \"A %s C %s E\", null, null);\n", "      fail(\"no exception thrown\");\n", "    } catch (IllegalArgumentException e) {\n", "      assertThat(e).hasMessageThat().isEqualTo(\"A null C null E\");\n", "    }\n", "  }\n", "\n", "  public void testCheckArgument_notEnoughArgs_failure() {\n", "    try {\n", "      Preconditions.checkArgument(false, \"A %s C %s E\", \"b\");\n", "      fail(\"no exception thrown\");\n", "    } catch (IllegalArgumentException e) {\n", "      assertThat(e).hasMessageThat().isEqualTo(\"A b C %s E\");\n", "    }\n", "  }\n", "\n", "  public void testCheckArgument_tooManyArgs_failure() {\n", "    try {\n", "      Preconditions.checkArgument(false, \"A %s C %s E\", \"b\", \"d\", \"f\");\n", "      fail(\"no exception thrown\");\n", "    } catch (IllegalArgumentException e) {\n", "      assertThat(e).hasMessageThat().isEqualTo(\"A b C d E [f]\");\n", "    }\n", "  }\n", "\n", "  public void testCheckArgument_singleNullArg_failure() {\n", "    try {\n", "      Preconditions.checkArgument(false, \"A %s C\", (Object) null);\n", "      fail(\"no exception thrown\");\n", "    } catch (IllegalArgumentException e) {\n", "      assertThat(e).hasMessageThat().isEqualTo(\"A null C\");\n", "    }\n", "  }\n", "\n", "  public void testCheckArgument_singleNullArray_failure() {\n", "    try {\n", "      Preconditions.checkArgument(false, \"A %s C\", (Object[]) null);\n", "      fail(\"no exception thrown\");\n", "    } catch (IllegalArgumentException e) {\n", "      assertThat(e).hasMessageThat().isEqualTo(\"A (Object[])null C\");\n", "    }\n", "  }\n", "\n"], "2": ["    assertEquals(\"null\", Preconditions.format(\"%s\", (Object) null));\n", "    assertEquals(\"(Object[])null\", Preconditions.format(\"%s\", (Object[]) null));\n"]}, "removed": {}, "added_lines": {"1": [79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132], "2": [399, 400]}, "removed_lines": {}}, {"4": "guava/src/com/google/common/base/Preconditions.java", "added": {"4": ["   * @param template a string containing 0 or more {@code %s} placeholders. null is treated as\n", "   *     \"null\".\n", "  static String format(@Nullable String template, @Nullable Object... args) {\n", "    args = args == null ? new Object[]{\"(Object[])null\"} : args;\n", "\n"]}, "removed": {"1": ["   * @throws NullPointerException if the check fails and either {@code errorMessageTemplate} or\n", "   *     {@code errorMessageArgs} is null (don't let this happen)\n"], "2": ["   * @throws NullPointerException if the check fails and either {@code errorMessageTemplate} or\n", "   *     {@code errorMessageArgs} is null (don't let this happen)\n"], "3": ["      // If either of these parameters is null, the right thing happens anyway\n"], "4": ["   * @param template a non-null string containing 0 or more {@code %s} placeholders.\n", "  static String format(String template, @Nullable Object... args) {\n"]}, "added_lines": {"4": [1287, 1288, 1293, 1296, 1297]}, "removed_lines": {"1": [151, 152], "2": [476, 477], "3": [829], "4": [1292, 1297]}}]}
