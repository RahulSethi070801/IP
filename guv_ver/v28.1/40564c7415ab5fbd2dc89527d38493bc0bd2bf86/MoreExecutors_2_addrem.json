{
    "addition": {
        "238": "    /** Lock used whenever accessing the state variables (runningTasks, shutdown) of the executor */\n",
        "327": "   /**\n",
        "407": "   * Returns an {@link Executor} that runs each task executed sequentially, such that no two tasks\n",
        "408": "   * are running concurrently.\n",
        "413": "   * <p>After execution begins on a thread from the {@code delegate} {@link Executor}, tasks are\n",
        "414": "   * polled and executed from a task queue until there are no more tasks. The thread will not be\n",
        "415": "   * released until there are no more tasks to run.\n",
        "416": "   *\n",
        "417": "   * <p>If a task is submitted while a thread is executing tasks from the task queue, the thread\n",
        "418": "   * will not be released until that submitted task is also complete.\n",
        "419": "   *\n",
        "420": "   * <p>Tasks are always started with the Thread in an uninterrupted state.\n",
        "421": "   *\n",
        "422": "   * <p>If the thread is {@linkplain Thread#interrupt interrupted} while a task is running or before\n",
        "423": "   * the thread is taken by the Executor:\n",
        "424": "   *\n",
        "425": "   * <ol>\n",
        "426": "   *   <li>execution will not stop until the task queue is empty.\n",
        "427": "   *   <li>the interrupt will be restored to the thread after it completes so that its {@code\n",
        "428": "   *       delegate} Executor may process the interrupt.\n",
        "429": "   * </ol>\n",
        "430": "   *\n",
        "431": "   * <p>{@code RuntimeException}s thrown by tasks are simply logged and the executor keeps trucking.\n",
        "432": "   * If an {@code Error} is thrown, the error will propagate and execution will stop until the next\n",
        "433": "   * time a task is submitted.\n",
        "435": "   * <p>When an {@code Error} is thrown by an executed task, previously submitted tasks may never\n",
        "436": "   * run. An attempt will be made to restart execution on the next call to {@code execute}. If the\n",
        "437": "   * {@code delegate} has begun to reject execution, the previously submitted tasks may never run,\n",
        "438": "   * despite not throwing a RejectedExecutionException synchronously with the call to {@code\n",
        "439": "   * execute}. If this behaviour is problematic, use an Executor with a single thread (e.g. {@link\n",
        "440": "   * Executors#newSingleThreadExecutor}).\n",
        "460": "   * <p>After execution begins on a thread from the {@code delegate} {@link Executor}, tasks are\n",
        "461": "   * polled and executed from a task queue until there are no more tasks. The thread will not be\n",
        "462": "   * released until there are no more tasks to run.\n",
        "463": "   *\n",
        "464": "   * <p>If a task is submitted while a thread is executing tasks from the task queue, the thread\n",
        "465": "   * will not be released until that submitted task is also complete.\n",
        "466": "   *\n",
        "467": "   * <p>If a task is {@linkplain Thread#interrupt interrupted} while a task is running:\n",
        "468": "   *\n",
        "469": "   * <ol>\n",
        "470": "   *   <li>execution will not stop until the task queue is empty.\n",
        "471": "   *   <li>tasks will begin execution with the thread marked as not interrupted - any interruption\n",
        "472": "   *       applies only to the task that was running at the point of interruption.\n",
        "473": "   *   <li>if the thread was interrupted before the SequentialExecutor's worker begins execution,\n",
        "474": "   *       the interrupt will be restored to the thread after it completes so that its {@code\n",
        "475": "   *       delegate} Executor may process the interrupt.\n",
        "476": "   *   <li>subtasks are run with the thread uninterrupted and interrupts received during execution\n",
        "477": "   *       of a task are ignored.\n",
        "478": "   * </ol>\n",
        "479": "   *\n",
        "480": "   * <p>{@code RuntimeException}s thrown by tasks are simply logged and the executor keeps trucking.\n",
        "481": "   * If an {@code Error} is thrown, the error will propagate and execution will stop until the next\n",
        "482": "   * time a task is submitted.\n",
        "484": "   * <p>When an {@code Error} is thrown by an executed task, previously submitted tasks may never\n",
        "485": "   * run. An attempt will be made to restart execution on the next call to {@code execute}. If the\n",
        "486": "   * {@code delegate} has begun to reject execution, the previously submitted tasks may never run,\n",
        "487": "   * despite not throwing a RejectedExecutionException synchronously with the call to {@code\n",
        "488": "   * execute}. If this behaviour is problematic, use an Executor with a single thread (e.g. {@link\n",
        "489": "   * Executors#newSingleThreadExecutor}).\n"
    },
    "removed": {
        "238": "    /**\n",
        "239": "     * Lock used whenever accessing the state variables (runningTasks, shutdown) of the executor\n",
        "240": "     */\n",
        "329": "    /**\n",
        "409": "   * Returns an {@link Executor} that runs each task executed sequentially, such that no\n",
        "410": "   * two tasks are running concurrently.\n",
        "415": "   * <p>After execution starts on the {@code delegate} {@link Executor}, tasks are polled and\n",
        "416": "   * executed from the queue until there are no more tasks. The thread will not be released until\n",
        "417": "   * there are no more tasks to run.\n",
        "419": "   * <p>If a task is {@linkplain Thread#interrupt interrupted}, execution of subsequent tasks\n",
        "420": "   * continues. {@code RuntimeException}s thrown by tasks are simply logged and the executor keeps\n",
        "421": "   * trucking. If an {@code Error} is thrown, the error will propagate and execution will stop until\n",
        "422": "   * the next time a task is submitted.\n",
        "442": "   * <p>After execution starts on the {@code delegate} {@link Executor}, tasks are polled and\n",
        "443": "   * executed from the queue until there are no more tasks. The thread will not be released until\n",
        "444": "   * there are no more tasks to run.\n",
        "446": "   * <p>If a task is {@linkplain Thread#interrupt interrupted}, execution of subsequent tasks\n",
        "447": "   * continues. {@code RuntimeException}s thrown by tasks are simply logged and the executor keeps\n",
        "448": "   * trucking. If an {@code Error} is thrown, the error will propagate and execution will stop until\n",
        "449": "   * the next time a task is submitted.\n"
    }
}