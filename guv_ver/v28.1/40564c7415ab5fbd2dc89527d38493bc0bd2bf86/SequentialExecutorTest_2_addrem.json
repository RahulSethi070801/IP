{
    "addition": {
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "42": "\n",
        "45": "\n",
        "46": "    @Override\n",
        "47": "    public void execute(Runnable command) {\n",
        "86": "    Runnable intCounter =\n",
        "87": "        new Runnable() {\n",
        "88": "          @Override\n",
        "89": "          public void run() {\n",
        "90": "            totalCalls.incrementAndGet();\n",
        "91": "            // Make sure that no other tasks are scheduled to run while this is running.\n",
        "92": "            assertFalse(fakePool.hasNext());\n",
        "93": "          }\n",
        "94": "        };\n",
        "147": "    Runnable runMe =\n",
        "148": "        new Runnable() {\n",
        "149": "          @Override\n",
        "150": "          public void run() {\n",
        "151": "            numCalls.incrementAndGet();\n",
        "152": "            throw new RuntimeException(\"FAKE EXCEPTION!\");\n",
        "153": "          }\n",
        "154": "        };\n",
        "163": "  public void testInterrupt_beforeRunRestoresInterruption() throws Exception {\n",
        "164": "    // Run a task on the composed Executor that interrupts its thread (i.e. this thread).\n",
        "165": "    fakePool.execute(\n",
        "166": "        new Runnable() {\n",
        "167": "          @Override\n",
        "168": "          public void run() {\n",
        "169": "            Thread.currentThread().interrupt();\n",
        "170": "          }\n",
        "171": "        });\n",
        "172": "    // Run a task that expects that it is not interrupted while it is running.\n",
        "173": "    e.execute(\n",
        "174": "        new Runnable() {\n",
        "175": "          @Override\n",
        "176": "          public void run() {\n",
        "177": "            assertThat(Thread.currentThread().isInterrupted()).isFalse();\n",
        "178": "          }\n",
        "179": "        });\n",
        "180": "\n",
        "181": "    // Run these together.\n",
        "182": "    fakePool.runAll();\n",
        "183": "\n",
        "184": "    // Check that this thread has been marked as interrupted again now that the thread has been\n",
        "185": "    // returned by SequentialExecutor. Clear the bit while checking so that the test doesn't hose\n",
        "186": "    // JUnit or some other test case.\n",
        "187": "    assertThat(Thread.currentThread().interrupted()).isTrue();\n",
        "188": "  }\n",
        "189": "\n",
        "190": "  public void testInterrupt_doesNotInterruptSubsequentTask() throws Exception {\n",
        "191": "    // Run a task that interrupts its thread (i.e. this thread).\n",
        "192": "    e.execute(\n",
        "193": "        new Runnable() {\n",
        "194": "          @Override\n",
        "195": "          public void run() {\n",
        "196": "            Thread.currentThread().interrupt();\n",
        "197": "          }\n",
        "198": "        });\n",
        "199": "    // Run a task that expects that it is not interrupted while it is running.\n",
        "200": "    e.execute(\n",
        "201": "        new Runnable() {\n",
        "202": "          @Override\n",
        "203": "          public void run() {\n",
        "204": "            assertThat(Thread.currentThread().isInterrupted()).isFalse();\n",
        "205": "          }\n",
        "206": "        });\n",
        "207": "\n",
        "208": "    // Run those tasks together.\n",
        "209": "    fakePool.runAll();\n",
        "210": "\n",
        "211": "    // Check that the interruption of a SequentialExecutor's task is restored to the thread once\n",
        "212": "    // it is yielded.\n",
        "213": "    assertThat(Thread.currentThread().isInterrupted()).isTrue();\n",
        "214": "  }\n",
        "215": "\n",
        "220": "    Runnable runMe =\n",
        "221": "        new Runnable() {\n",
        "222": "          @Override\n",
        "223": "          public void run() {\n",
        "224": "            numCalls.incrementAndGet();\n",
        "225": "          }\n",
        "226": "        };\n",
        "242": "    final SequentialExecutor executor =\n",
        "243": "        new SequentialExecutor(\n",
        "244": "            new Executor() {\n",
        "245": "              @Override\n",
        "246": "              public void execute(Runnable r) {\n",
        "247": "                if (reject.get()) {\n",
        "248": "                  throw new RejectedExecutionException();\n",
        "249": "                }\n",
        "250": "                r.run();\n",
        "251": "              }\n",
        "252": "            });\n",
        "253": "    Runnable task =\n",
        "254": "        new Runnable() {\n",
        "255": "          @Override\n",
        "256": "          public void run() {\n",
        "257": "            numCalls.incrementAndGet();\n",
        "259": "        };\n",
        "263": "    } catch (RejectedExecutionException expected) {\n",
        "264": "    }\n",
        "278": "      Runnable errorTask =\n",
        "279": "          new Runnable() {\n",
        "280": "            @Override\n",
        "281": "            public void run() {\n",
        "282": "              throw new MyError();\n",
        "283": "            }\n",
        "284": "          };\n",
        "285": "      Runnable barrierTask =\n",
        "286": "          new Runnable() {\n",
        "287": "            @Override\n",
        "288": "            public void run() {\n",
        "289": "              try {\n",
        "290": "                barrier.await();\n",
        "291": "              } catch (Exception e) {\n",
        "292": "                throw new RuntimeException(e);\n",
        "293": "              }\n",
        "294": "            }\n",
        "295": "          };\n",
        "297": "      service.execute(barrierTask); // submit directly to the service\n",
        "300": "      barrier.await(1, TimeUnit.SECONDS);\n",
        "303": "      barrier.await(1, TimeUnit.SECONDS);\n"
    },
    "removed": {
        "42": "    @Override public void execute(Runnable command) {\n",
        "80": "    Runnable intCounter = new Runnable() {\n",
        "81": "      @Override\n",
        "82": "      public void run() {\n",
        "83": "        totalCalls.incrementAndGet();\n",
        "84": "        // Make sure that no other tasks are scheduled to run while this is running.\n",
        "85": "        assertFalse(fakePool.hasNext());\n",
        "86": "      }\n",
        "87": "    };\n",
        "140": "    Runnable runMe = new Runnable() {\n",
        "141": "      @Override\n",
        "142": "      public void run() {\n",
        "143": "        numCalls.incrementAndGet();\n",
        "144": "        throw new RuntimeException(\"FAKE EXCEPTION!\");\n",
        "145": "      }\n",
        "146": "    };\n",
        "159": "    Runnable runMe = new Runnable() {\n",
        "160": "      @Override\n",
        "161": "      public void run() {\n",
        "162": "        numCalls.incrementAndGet();\n",
        "163": "      }\n",
        "164": "    };\n",
        "179": "    final SequentialExecutor executor = new SequentialExecutor(\n",
        "180": "        new Executor() {\n",
        "181": "          @Override public void execute(Runnable r) {\n",
        "182": "            if (reject.get()) {\n",
        "183": "              throw new RejectedExecutionException();\n",
        "184": "            }\n",
        "185": "            r.run();\n",
        "187": "        });\n",
        "188": "    Runnable task = new Runnable() {\n",
        "189": "      @Override\n",
        "190": "      public void run() {\n",
        "191": "        numCalls.incrementAndGet();\n",
        "192": "      }\n",
        "193": "    };\n",
        "197": "    } catch (RejectedExecutionException expected) {}\n",
        "211": "      Runnable errorTask = new Runnable() {\n",
        "212": "        @Override\n",
        "213": "        public void run() {\n",
        "214": "          throw new MyError();\n",
        "215": "        }\n",
        "216": "      };\n",
        "217": "      Runnable barrierTask = new Runnable() {\n",
        "218": "        @Override\n",
        "219": "        public void run() {\n",
        "220": "          try {\n",
        "221": "            barrier.await();\n",
        "222": "          } catch (Exception e) {\n",
        "223": "            throw new RuntimeException(e);\n",
        "224": "          }\n",
        "225": "        }\n",
        "226": "      };\n",
        "228": "      service.execute(barrierTask);  // submit directly to the service\n",
        "231": "      barrier.await(10, TimeUnit.SECONDS);\n",
        "234": "      barrier.await(10, TimeUnit.SECONDS);\n"
    }
}