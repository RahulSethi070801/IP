{
    "addition": {
        "35": " * continues. See {@link QueueWorker#workOnQueue} for details.\n",
        "36": " *\n",
        "37": " * <p>{@code RuntimeException}s thrown by tasks are simply logged and the executor keeps trucking.\n",
        "38": " * If an {@code Error} is thrown, the error will propagate and execution will stop until it is\n",
        "39": " * restarted by a call to {@link #execute}.\n",
        "105": "  /** Worker that runs tasks from {@link #queue} until it is empty. */\n",
        "123": "    /**\n",
        "124": "     * Continues executing tasks from {@link #queue} until it is empty.\n",
        "125": "     *\n",
        "126": "     * <p>The thread's interrupt bit is cleared before execution of each task.\n",
        "127": "     *\n",
        "128": "     * <p>If the Thread in use is interrupted before or during execution of the tasks in\n",
        "129": "     * {@link #queue}, the Executor will complete its tasks, and then restore the interruption.\n",
        "130": "     * This means that once the Thread returns to the Executor that this Executor composes, the\n",
        "131": "     * interruption will still be present. If the composed Executor is an ExecutorService, it can\n",
        "132": "     * respond to shutdown() by returning tasks queued on that Thread after {@link #worker} drains\n",
        "133": "     * the queue.\n",
        "134": "     */\n",
        "136": "      boolean interruptedDuringTask = false;\n",
        "137": "\n",
        "138": "      try {\n",
        "139": "        while (true) {\n",
        "140": "          // Remove the interrupt bit before each task. The interrupt is for the \"current task\" when\n",
        "141": "          // it is sent, so subsequent tasks in the queue should not be caused to be interrupted\n",
        "142": "          // by a previous one in the queue being interrupted.\n",
        "143": "          interruptedDuringTask |= Thread.interrupted();\n",
        "144": "          Runnable task;\n",
        "145": "          synchronized (queue) {\n",
        "146": "            task = queue.poll();\n",
        "147": "            if (task == null) {\n",
        "148": "              isWorkerRunning = false;\n",
        "149": "              return;\n",
        "150": "            }\n",
        "151": "          }\n",
        "152": "          try {\n",
        "153": "            task.run();\n",
        "154": "          } catch (RuntimeException e) {\n",
        "155": "            log.log(Level.SEVERE, \"Exception while executing runnable \" + task, e);\n",
        "158": "      } finally {\n",
        "159": "        // Ensure that if the thread was interrupted at all while processing the task queue, it\n",
        "160": "        // is returned to the delegate Executor interrupted so that it may handle the\n",
        "161": "        // interruption if it likes.\n",
        "162": "        if (interruptedDuringTask) {\n",
        "163": "          Thread.currentThread().interrupt();\n"
    },
    "removed": {
        "35": " * continues. {@code RuntimeException}s thrown by tasks are simply logged and the executor keeps\n",
        "36": " * trucking. If an {@code Error} is thrown, the error will propagate and execution will stop until\n",
        "37": " * it is restarted by a call to {@link #execute}.\n",
        "103": "  /**\n",
        "104": "   * Worker that runs tasks from {@link #queue} until it is empty.\n",
        "105": "   */\n",
        "124": "      while (true) {\n",
        "125": "        Runnable task = null;\n",
        "126": "        synchronized (queue) {\n",
        "127": "          // TODO(user): How should we handle interrupts and shutdowns?\n",
        "128": "          task = queue.poll();\n",
        "129": "          if (task == null) {\n",
        "130": "            isWorkerRunning = false;\n",
        "131": "            return;\n",
        "134": "        try {\n",
        "135": "          task.run();\n",
        "136": "        } catch (RuntimeException e) {\n",
        "137": "          log.log(Level.SEVERE, \"Exception while executing runnable \" + task, e);\n"
    }
}