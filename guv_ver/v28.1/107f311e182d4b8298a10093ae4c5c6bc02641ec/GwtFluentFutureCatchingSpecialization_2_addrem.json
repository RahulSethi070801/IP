{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2006 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "6": " *\n",
        "7": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "8": " *\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "13": " */\n",
        "14": "\n",
        "15": "package com.google.common.util.concurrent;\n",
        "16": "\n",
        "17": "import com.google.common.base.Function;\n",
        "18": "import java.util.concurrent.Executor;\n",
        "19": "\n",
        "20": "/**\n",
        "21": " * Hidden superclass of {@link FluentFuture} that provides us a place to declare special GWT\n",
        "22": " * versions of the {@link FluentFuture#catching(Class, com.google.common.base.Function)\n",
        "23": " * FluentFuture.catching} family of methods. Those versions have slightly different signatures.\n",
        "24": " */\n",
        "25": "abstract class GwtFluentFutureCatchingSpecialization<V> implements ListenableFuture<V> {\n",
        "26": "  /*\n",
        "27": "   * In the GWT versions of the methods (below), every exceptionType parameter is required to be\n",
        "28": "   * Class<Throwable>. To handle only certain kinds of exceptions under GWT, you'll need to write\n",
        "29": "   * your own instanceof tests.\n",
        "30": "   */\n",
        "31": "\n",
        "32": "  public final FluentFuture<V> catching(\n",
        "33": "      Class<Throwable> exceptionType,\n",
        "34": "      Function<? super Throwable, ? extends V> fallback,\n",
        "35": "      Executor executor) {\n",
        "36": "    return (FluentFuture<V>) Futures.catching(this, exceptionType, fallback, executor);\n",
        "37": "  }\n",
        "38": "\n",
        "39": "  public final FluentFuture<V> catchingAsync(\n",
        "40": "      Class<Throwable> exceptionType,\n",
        "41": "      AsyncFunction<? super Throwable, ? extends V> fallback,\n",
        "42": "      Executor executor) {\n",
        "43": "    return (FluentFuture<V>) Futures.catchingAsync(this, exceptionType, fallback, executor);\n",
        "44": "  }\n",
        "45": "}\n"
    },
    "removed": {}
}