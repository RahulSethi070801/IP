
   * Returns a new {@code Future} whose result is derived from the result of the given {@code
   * Future}. If {@code input} fails, the returned {@code Future} fails with the same exception (and
   * the function is not invoked). Example usage:
   *
   * <pre>{@code
   * ListenableFuture<QueryResult> queryFuture = ...;
   * Function<QueryResult, List<Row>> rowsFunction =
   *     new Function<QueryResult, List<Row>>() {
   *       public List<Row> apply(QueryResult queryResult) {
   *         return queryResult.getRows();
   *       }
   *     };
   * ListenableFuture<List<Row>> rowsFuture =
   *     transform(queryFuture, rowsFunction);
   * }</pre>
   *
   * <p>This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous
   * choice in some cases. See the discussion in the {@link ListenableFuture#addListener
   * ListenableFuture.addListener} documentation. The documentation's warnings about "lightweight
   * listeners" refer here to the work done during {@code Function.apply}.
   *
   * <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the
   * input future. That is, if the returned {@code Future} is cancelled, it will attempt to cancel
   * the input, and if the input is cancelled, the returned {@code Future} will receive a callback
   * in which it will attempt to cancel itself.
   *
   * <p>An example use of this method is to convert a serializable object returned from an RPC into
   * a POJO.
   *
   * @param input The future to transform
   * @param function A Function to transform the results of the provided future to the results of
   *     the returned future. This will be run in the thread that notifies input it is complete.
   * @return A future that holds result of the transformation.
   * @since 9.0 (in 1.0 as {@code compose})
   * @deprecated Use {@linkplain #transform(ListenableFuture, Function, Executor) the overload that
   *     requires an executor}. For identical behavior, pass {@link MoreExecutors#directExecutor},
   *     but consider whether another executor would be safer, as discussed in the {@link
   *     ListenableFuture#addListener ListenableFuture.addListener} documentation. This method is
   *     scheduled to be removed in April 2018.
   