[{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_1.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[43,44,45,46],"dellines":[],"addcode":["  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n","  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n"],"delcode":[],"methodSig":"public void addListener(Runnable listener, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_1.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_1.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_1.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[1126,1127],"dellines":[1151],"addcode":["   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight callbacks passed to this method.\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight callbacks passed to this method.\n"],"delcode":["   * ListenableFuture.addListener} documentation.\n","   * ListenableFuture.addListener} documentation.\n"],"methodSig":"public static void addCallback(ListenableFuture<V> future, FutureCallback<? super V> callback)"},"id":5,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_2.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[43,44,45,46],"dellines":[],"addcode":["  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n","  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n"],"delcode":[],"methodSig":"public void addListener(Runnable listener, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_2.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_2.txt","newdoc":" TODO(kak): @CheckReturnValue\n","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_2.txt","olddoc":" TODO(kak): @CheckReturnValue\n","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[368,369,370,371,356,373,379,380,381,382,367,383],"dellines":[384,353,385,354,355,356,357,358,369,370,371,372,373,374,375,376,383],"addcode":["   *     fetchCounterFuture, FetchException.class, x -> immediateFuture(0));\n","   *     fetchCounterFuture,\n","   *     FetchException.class,\n","   *     e -> {\n","   *       if (omitDataOnFetchFailure) {\n","   *         return immediateFuture(0);\n","   *       throw e;\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n","   *     fetchCounterFuture, FetchException.class, x -> immediateFuture(0));\n","   *     fetchCounterFuture,\n","   *     FetchException.class,\n","   *     e -> {\n","   *       if (omitDataOnFetchFailure) {\n","   *         return immediateFuture(0);\n","   *       throw e;\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n"],"delcode":["   *     fetchCounterFuture, FetchException.class,\n","   *     new AsyncFunction<FetchException, Integer>() {\n","   *       public ListenableFuture<Integer> apply(FetchException e) {\n","   *         return immediateFuture(0);\n","   *       }\n","   *     });\n","   *     fetchCounterFuture, FetchException.class,\n","   *     new AsyncFunction<FetchException, Integer>() {\n","   *       public ListenableFuture<Integer> apply(FetchException e)\n","   *           throws FetchException {\n","   *         if (omitDataOnFetchFailure) {\n","   *           return immediateFuture(0);\n","   *         }\n","   *         throw e;\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n","   *     fetchCounterFuture, FetchException.class,\n","   *     new AsyncFunction<FetchException, Integer>() {\n","   *       public ListenableFuture<Integer> apply(FetchException e) {\n","   *         return immediateFuture(0);\n","   *       }\n","   *     });\n","   *     fetchCounterFuture, FetchException.class,\n","   *     new AsyncFunction<FetchException, Integer>() {\n","   *       public ListenableFuture<Integer> apply(FetchException e)\n","   *           throws FetchException {\n","   *         if (omitDataOnFetchFailure) {\n","   *           return immediateFuture(0);\n","   *         }\n","   *         throw e;\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n"],"methodSig":"public static ListenableFuture<V> catchingAsync(ListenableFuture<? extends V> input, Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback)"},"id":5,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_3.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[43,44,45,46],"dellines":[],"addcode":["  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n","  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n"],"delcode":[],"methodSig":"public void addListener(Runnable listener, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_3.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_3.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_3.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[560,561,562,563,567,568,569,570,559],"dellines":[576,577,578,582,583,584,569,570,571,572,573,574,575],"addcode":["   * <pre>{@code\n","   * ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   * ListenableFuture<QueryResult> queryFuture =\n","   *     transformAsync(rowKeyFuture, dataService::readFuture, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n","   * <pre>{@code\n","   * ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   * ListenableFuture<QueryResult> queryFuture =\n","   *     transformAsync(rowKeyFuture, dataService::readFuture, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   *   AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *       new AsyncFunction<RowKey, QueryResult>() {\n","   *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *           return dataService.read(rowKey);\n","   *         }\n","   *       };\n","   *   ListenableFuture<QueryResult> queryFuture =\n","   *       transformAsync(rowKeyFuture, queryFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n","   * <pre>   {@code\n","   *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   *   AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *       new AsyncFunction<RowKey, QueryResult>() {\n","   *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *           return dataService.read(rowKey);\n","   *         }\n","   *       };\n","   *   ListenableFuture<QueryResult> queryFuture =\n","   *       transformAsync(rowKeyFuture, queryFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n"],"methodSig":"public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)"},"id":5,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_4.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[43,44,45,46],"dellines":[],"addcode":["  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n","  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n"],"delcode":[],"methodSig":"public void addListener(Runnable listener, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_4.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_4.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_4.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_4.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[1152,1169,1170,1156,1157,1158,1174,1175],"dellines":[1191,1176,1195,1180],"addcode":["   * <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of\n","   * <p>Example:\n","   *\n","   * <pre>{@code\n","   *     }, e);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * callbacks passed to this method.\n","   * <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of\n","   * <p>Example:\n","   *\n","   * <pre>{@code\n","   *     }, e);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * callbacks passed to this method.\n"],"delcode":["   * <p>The callback is run in {@code executor}. There is no guaranteed ordering of execution of\n","   * Example: <pre> {@code\n","   *     }, e);}</pre>\n","   * documentation.\n","   * <p>The callback is run in {@code executor}. There is no guaranteed ordering of execution of\n","   * Example: <pre> {@code\n","   *     }, e);}</pre>\n","   * documentation.\n"],"methodSig":"public static void addCallback(final ListenableFuture<V> future, final FutureCallback<? super V> callback, Executor executor)"},"id":5,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_5.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[43,44,45,46],"dellines":[],"addcode":["  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n","  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n"],"delcode":[],"methodSig":"public void addListener(Runnable listener, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_5.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_5.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_5.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_5.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[601,606,607],"dellines":[626,627,614,615,616,617,618,619,621],"addcode":["   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n","   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n"],"delcode":["   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n","   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)"},"id":5,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_6.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[43,44,45,46],"dellines":[],"addcode":["  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n","  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n"],"delcode":[],"methodSig":"public void addListener(Runnable listener, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_6.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_6.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_6.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_6.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[515,520,521,522,523,524],"dellines":[532,533,534,520,521,522,523,524,525,527],"addcode":["   *     transformAsync(rowKeyFuture, dataService::readFuture);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n","   *     transformAsync(rowKeyFuture, dataService::readFuture);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n"],"delcode":["   * AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *     new AsyncFunction<RowKey, QueryResult>() {\n","   *       public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *         return dataService.read(rowKey);\n","   *       }\n","   *     };\n","   *     transformAsync(rowKeyFuture, queryFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n","   * AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *     new AsyncFunction<RowKey, QueryResult>() {\n","   *       public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *         return dataService.read(rowKey);\n","   *       }\n","   *     };\n","   *     transformAsync(rowKeyFuture, queryFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n"],"methodSig":"public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)"},"id":5,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_7.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[43,44,45,46],"dellines":[],"addcode":["  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n","  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n"],"delcode":[],"methodSig":"public void addListener(Runnable listener, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_7.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_7.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_7.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_7.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[640,641,642,643,647,648,639],"dellines":[672,673,659,660,661,662,663,664,665,666,667,668],"addcode":["   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n","   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n","   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)"},"id":5,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_8.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[43,44,45,46],"dellines":[],"addcode":["  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n","  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n"],"delcode":[],"methodSig":"public void addListener(Runnable listener, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_8.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_8.txt","newdoc":" TODO(kak): @CheckReturnValue\n","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_8.txt","olddoc":" TODO(kak): @CheckReturnValue\n","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_8.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[448,449,453,454,455,456,423,424,425,426,427,428,429,430,434,435,436,437,438,439,440,441,442,443,444,445,446,447],"dellines":[448,449,450,451,452,453,454,455,459,460,461,425,426,427,428,429,430,431,432,433,434,435,436,440,441,442,443,444,445,446,447],"addcode":["   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter in case an exception happens when\n","   * // processing the RPC to fetch counters.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *     fetchCounterFuture, FetchException.class, x -> immediateFuture(0), directExecutor());\n","   * }</pre>\n","   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter only in case the exception was a\n","   * // TimeoutException.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *     fetchCounterFuture,\n","   *     FetchException.class,\n","   *     e -> {\n","   *       if (omitDataOnFetchFailure) {\n","   *         return immediateFuture(0);\n","   *       }\n","   *       throw e;\n","   *     },\n","   *     directExecutor());\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n","   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter in case an exception happens when\n","   * // processing the RPC to fetch counters.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *     fetchCounterFuture, FetchException.class, x -> immediateFuture(0), directExecutor());\n","   * }</pre>\n","   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter only in case the exception was a\n","   * // TimeoutException.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *     fetchCounterFuture,\n","   *     FetchException.class,\n","   *     e -> {\n","   *       if (omitDataOnFetchFailure) {\n","   *         return immediateFuture(0);\n","   *       }\n","   *       throw e;\n","   *     },\n","   *     directExecutor());\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter in case an exception happens when\n","   *   // processing the RPC to fetch counters.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new AsyncFunction<FetchException, Integer>() {\n","   *         public ListenableFuture<Integer> apply(FetchException e) {\n","   *           return immediateFuture(0);\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter only in case the exception was a\n","   *   // TimeoutException.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new AsyncFunction<FetchException, Integer>() {\n","   *         public ListenableFuture<Integer> apply(FetchException e)\n","   *             throws FetchException {\n","   *           if (omitDataOnFetchFailure) {\n","   *             return immediateFuture(0);\n","   *           }\n","   *           throw e;\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n","   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter in case an exception happens when\n","   *   // processing the RPC to fetch counters.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new AsyncFunction<FetchException, Integer>() {\n","   *         public ListenableFuture<Integer> apply(FetchException e) {\n","   *           return immediateFuture(0);\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter only in case the exception was a\n","   *   // TimeoutException.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new AsyncFunction<FetchException, Integer>() {\n","   *         public ListenableFuture<Integer> apply(FetchException e)\n","   *             throws FetchException {\n","   *           if (omitDataOnFetchFailure) {\n","   *             return immediateFuture(0);\n","   *           }\n","   *           throw e;\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n"],"methodSig":"public static ListenableFuture<V> catchingAsync(ListenableFuture<? extends V> input, Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)"},"id":5,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_9.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[43,44,45,46],"dellines":[],"addcode":["  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n","  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n"],"delcode":[],"methodSig":"public void addListener(Runnable listener, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_9.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_9.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_9.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_9.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[304,305,306,307,308,309,310,314,315,303],"dellines":[296,297,298,299,300,301,302,303,304,305,306,307,311,312],"addcode":["   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter in case an exception happens when\n","   * // processing the RPC to fetch counters.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n","   *     fetchCounterFuture, FetchException.class, x -> 0, directExecutor());\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n","   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter in case an exception happens when\n","   * // processing the RPC to fetch counters.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n","   *     fetchCounterFuture, FetchException.class, x -> 0, directExecutor());\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter in case an exception happens when\n","   *   // processing the RPC to fetch counters.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new Function<FetchException, Integer>() {\n","   *         public Integer apply(FetchException e) {\n","   *           return 0;\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n","   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter in case an exception happens when\n","   *   // processing the RPC to fetch counters.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new Function<FetchException, Integer>() {\n","   *         public Integer apply(FetchException e) {\n","   *           return 0;\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)"},"id":5,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_10.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_10.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[82,83,84,85,86],"dellines":[],"addcode":["  public static <V> FluentFuture<V> from(ListenableFuture<V> future) {\n","    return future instanceof FluentFuture\n","        ? (FluentFuture<V>) future\n","        : new ForwardingFluentFuture<V>(future);\n","  }\n","  public static <V> FluentFuture<V> from(ListenableFuture<V> future) {\n","    return future instanceof FluentFuture\n","        ? (FluentFuture<V>) future\n","        : new ForwardingFluentFuture<V>(future);\n","  }\n"],"delcode":[],"methodSig":"public static FluentFuture<V> from(ListenableFuture<V> future)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_10.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_10.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_10.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_10.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[601,606,607],"dellines":[626,627,614,615,616,617,618,619,621],"addcode":["   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n","   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n"],"delcode":["   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n","   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_11.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_11.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[82,83,84,85,86],"dellines":[],"addcode":["  public static <V> FluentFuture<V> from(ListenableFuture<V> future) {\n","    return future instanceof FluentFuture\n","        ? (FluentFuture<V>) future\n","        : new ForwardingFluentFuture<V>(future);\n","  }\n","  public static <V> FluentFuture<V> from(ListenableFuture<V> future) {\n","    return future instanceof FluentFuture\n","        ? (FluentFuture<V>) future\n","        : new ForwardingFluentFuture<V>(future);\n","  }\n"],"delcode":[],"methodSig":"public static FluentFuture<V> from(ListenableFuture<V> future)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_11.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_11.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_11.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_11.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[640,641,642,643,647,648,639],"dellines":[672,673,659,660,661,662,663,664,665,666,667,668],"addcode":["   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n","   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n","   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_12.txt","newdoc":" ScheduledExecutorService\n","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_12.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[208,209,210,207],"dellines":[],"addcode":["  public final FluentFuture<V> withTimeout(\n","      long timeout, TimeUnit unit, ScheduledExecutorService scheduledExecutor) {\n","    return (FluentFuture<V>) Futures.withTimeout(this, timeout, unit, scheduledExecutor);\n","  }\n","  public final FluentFuture<V> withTimeout(\n","      long timeout, TimeUnit unit, ScheduledExecutorService scheduledExecutor) {\n","    return (FluentFuture<V>) Futures.withTimeout(this, timeout, unit, scheduledExecutor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<V> withTimeout(long timeout, TimeUnit unit, ScheduledExecutorService scheduledExecutor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_12.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_12.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_12.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_12.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[601,606,607],"dellines":[626,627,614,615,616,617,618,619,621],"addcode":["   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n","   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n"],"delcode":["   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n","   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_13.txt","newdoc":" ScheduledExecutorService\n ScheduledExecutorService\n","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_13.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[208,209,210,207],"dellines":[],"addcode":["  public final FluentFuture<V> withTimeout(\n","      long timeout, TimeUnit unit, ScheduledExecutorService scheduledExecutor) {\n","    return (FluentFuture<V>) Futures.withTimeout(this, timeout, unit, scheduledExecutor);\n","  }\n","  public final FluentFuture<V> withTimeout(\n","      long timeout, TimeUnit unit, ScheduledExecutorService scheduledExecutor) {\n","    return (FluentFuture<V>) Futures.withTimeout(this, timeout, unit, scheduledExecutor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<V> withTimeout(long timeout, TimeUnit unit, ScheduledExecutorService scheduledExecutor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_13.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_13.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_13.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_13.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[640,641,642,643,647,648,639],"dellines":[672,673,659,660,661,662,663,664,665,666,667,668],"addcode":["   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n","   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n","   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_14.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[58,59,60,61],"dellines":[],"addcode":["  @Override\n","  public boolean isDone() {\n","    return delegate.isDone();\n","  }\n","  @Override\n","  public boolean isDone() {\n","    return delegate.isDone();\n","  }\n"],"delcode":[],"methodSig":"public boolean isDone()"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_14.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_14.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_14.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_14.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[601,606,607],"dellines":[626,627,614,615,616,617,618,619,621],"addcode":["   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n","   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n"],"delcode":["   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n","   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_15.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[58,59,60,61],"dellines":[],"addcode":["  @Override\n","  public boolean isDone() {\n","    return delegate.isDone();\n","  }\n","  @Override\n","  public boolean isDone() {\n","    return delegate.isDone();\n","  }\n"],"delcode":[],"methodSig":"public boolean isDone()"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_15.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_15.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_15.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_15.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[640,641,642,643,647,648,639],"dellines":[672,673,659,660,661,662,663,664,665,666,667,668],"addcode":["   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n","   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n","   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_16.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_16.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[251,252,253,254],"dellines":[],"addcode":["  public final <T> FluentFuture<T> transformAsync(\n","      AsyncFunction<? super V, T> function, Executor executor) {\n","    return (FluentFuture<T>) Futures.transformAsync(this, function, executor);\n","  }\n","  public final <T> FluentFuture<T> transformAsync(\n","      AsyncFunction<? super V, T> function, Executor executor) {\n","    return (FluentFuture<T>) Futures.transformAsync(this, function, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<T> transformAsync(AsyncFunction<? super V, T> function, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_16.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_16.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_16.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_16.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[601,606,607],"dellines":[626,627,614,615,616,617,618,619,621],"addcode":["   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n","   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n"],"delcode":["   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n","   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_17.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_17.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[251,252,253,254],"dellines":[],"addcode":["  public final <T> FluentFuture<T> transformAsync(\n","      AsyncFunction<? super V, T> function, Executor executor) {\n","    return (FluentFuture<T>) Futures.transformAsync(this, function, executor);\n","  }\n","  public final <T> FluentFuture<T> transformAsync(\n","      AsyncFunction<? super V, T> function, Executor executor) {\n","    return (FluentFuture<T>) Futures.transformAsync(this, function, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<T> transformAsync(AsyncFunction<? super V, T> function, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_17.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_17.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_17.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_17.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[640,641,642,643,647,648,639],"dellines":[672,673,659,660,661,662,663,664,665,666,667,668],"addcode":["   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n","   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n","   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_18.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_18.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[251,252,253,254],"dellines":[],"addcode":["  public final <T> FluentFuture<T> transformAsync(\n","      AsyncFunction<? super V, T> function, Executor executor) {\n","    return (FluentFuture<T>) Futures.transformAsync(this, function, executor);\n","  }\n","  public final <T> FluentFuture<T> transformAsync(\n","      AsyncFunction<? super V, T> function, Executor executor) {\n","    return (FluentFuture<T>) Futures.transformAsync(this, function, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<T> transformAsync(AsyncFunction<? super V, T> function, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_18.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_18.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_18.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_18.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[560,561,562,563,567,568,569,570,559],"dellines":[576,577,578,582,583,584,569,570,571,572,573,574,575],"addcode":["   * <pre>{@code\n","   * ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   * ListenableFuture<QueryResult> queryFuture =\n","   *     transformAsync(rowKeyFuture, dataService::readFuture, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n","   * <pre>{@code\n","   * ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   * ListenableFuture<QueryResult> queryFuture =\n","   *     transformAsync(rowKeyFuture, dataService::readFuture, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   *   AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *       new AsyncFunction<RowKey, QueryResult>() {\n","   *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *           return dataService.read(rowKey);\n","   *         }\n","   *       };\n","   *   ListenableFuture<QueryResult> queryFuture =\n","   *       transformAsync(rowKeyFuture, queryFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n","   * <pre>   {@code\n","   *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   *   AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *       new AsyncFunction<RowKey, QueryResult>() {\n","   *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *           return dataService.read(rowKey);\n","   *         }\n","   *       };\n","   *   ListenableFuture<QueryResult> queryFuture =\n","   *       transformAsync(rowKeyFuture, queryFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n"],"methodSig":"public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_19.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_19.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[251,252,253,254],"dellines":[],"addcode":["  public final <T> FluentFuture<T> transformAsync(\n","      AsyncFunction<? super V, T> function, Executor executor) {\n","    return (FluentFuture<T>) Futures.transformAsync(this, function, executor);\n","  }\n","  public final <T> FluentFuture<T> transformAsync(\n","      AsyncFunction<? super V, T> function, Executor executor) {\n","    return (FluentFuture<T>) Futures.transformAsync(this, function, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<T> transformAsync(AsyncFunction<? super V, T> function, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_19.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_19.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_19.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_19.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[515,520,521,522,523,524],"dellines":[532,533,534,520,521,522,523,524,525,527],"addcode":["   *     transformAsync(rowKeyFuture, dataService::readFuture);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n","   *     transformAsync(rowKeyFuture, dataService::readFuture);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n"],"delcode":["   * AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *     new AsyncFunction<RowKey, QueryResult>() {\n","   *       public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *         return dataService.read(rowKey);\n","   *       }\n","   *     };\n","   *     transformAsync(rowKeyFuture, queryFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n","   * AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *     new AsyncFunction<RowKey, QueryResult>() {\n","   *       public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *         return dataService.read(rowKey);\n","   *       }\n","   *     };\n","   *     transformAsync(rowKeyFuture, queryFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n"],"methodSig":"public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_20.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[43,44,45,46],"dellines":[],"addcode":["  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n","  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n"],"delcode":[],"methodSig":"public void addListener(Runnable listener, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_20.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_20.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_20.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_20.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[601,606,607],"dellines":[626,627,614,615,616,617,618,619,621],"addcode":["   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n","   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n"],"delcode":["   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n","   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_21.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[43,44,45,46],"dellines":[],"addcode":["  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n","  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n"],"delcode":[],"methodSig":"public void addListener(Runnable listener, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_21.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_21.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_21.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_21.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[640,641,642,643,647,648,639],"dellines":[672,673,659,660,661,662,663,664,665,666,667,668],"addcode":["   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n","   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n","   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_22.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[43,44,45,46],"dellines":[],"addcode":["  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n","  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n"],"delcode":[],"methodSig":"public void addListener(Runnable listener, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_22.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_22.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_22.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_22.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[560,561,562,563,567,568,569,570,559],"dellines":[576,577,578,582,583,584,569,570,571,572,573,574,575],"addcode":["   * <pre>{@code\n","   * ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   * ListenableFuture<QueryResult> queryFuture =\n","   *     transformAsync(rowKeyFuture, dataService::readFuture, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n","   * <pre>{@code\n","   * ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   * ListenableFuture<QueryResult> queryFuture =\n","   *     transformAsync(rowKeyFuture, dataService::readFuture, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   *   AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *       new AsyncFunction<RowKey, QueryResult>() {\n","   *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *           return dataService.read(rowKey);\n","   *         }\n","   *       };\n","   *   ListenableFuture<QueryResult> queryFuture =\n","   *       transformAsync(rowKeyFuture, queryFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n","   * <pre>   {@code\n","   *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   *   AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *       new AsyncFunction<RowKey, QueryResult>() {\n","   *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *           return dataService.read(rowKey);\n","   *         }\n","   *       };\n","   *   ListenableFuture<QueryResult> queryFuture =\n","   *       transformAsync(rowKeyFuture, queryFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n"],"methodSig":"public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_23.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[43,44,45,46],"dellines":[],"addcode":["  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n","  @Override\n","  public void addListener(Runnable listener, Executor executor) {\n","    delegate.addListener(listener, executor);\n","  }\n"],"delcode":[],"methodSig":"public void addListener(Runnable listener, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_23.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_23.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_23.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_23.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[515,520,521,522,523,524],"dellines":[532,533,534,520,521,522,523,524,525,527],"addcode":["   *     transformAsync(rowKeyFuture, dataService::readFuture);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n","   *     transformAsync(rowKeyFuture, dataService::readFuture);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n"],"delcode":["   * AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *     new AsyncFunction<RowKey, QueryResult>() {\n","   *       public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *         return dataService.read(rowKey);\n","   *       }\n","   *     };\n","   *     transformAsync(rowKeyFuture, queryFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n","   * AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *     new AsyncFunction<RowKey, QueryResult>() {\n","   *       public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *         return dataService.read(rowKey);\n","   *       }\n","   *     };\n","   *     transformAsync(rowKeyFuture, queryFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n"],"methodSig":"public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_24.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[48,49,50,51],"dellines":[],"addcode":["  @Override\n","  public boolean cancel(boolean mayInterruptIfRunning) {\n","    return delegate.cancel(mayInterruptIfRunning);\n","  }\n","  @Override\n","  public boolean cancel(boolean mayInterruptIfRunning) {\n","    return delegate.cancel(mayInterruptIfRunning);\n","  }\n"],"delcode":[],"methodSig":"public boolean cancel(boolean mayInterruptIfRunning)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_24.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_24.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_24.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_24.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[601,606,607],"dellines":[626,627,614,615,616,617,618,619,621],"addcode":["   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n","   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n"],"delcode":["   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n","   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_25.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[48,49,50,51],"dellines":[],"addcode":["  @Override\n","  public boolean cancel(boolean mayInterruptIfRunning) {\n","    return delegate.cancel(mayInterruptIfRunning);\n","  }\n","  @Override\n","  public boolean cancel(boolean mayInterruptIfRunning) {\n","    return delegate.cancel(mayInterruptIfRunning);\n","  }\n"],"delcode":[],"methodSig":"public boolean cancel(boolean mayInterruptIfRunning)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_25.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_25.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_25.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_25.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[640,641,642,643,647,648,639],"dellines":[672,673,659,660,661,662,663,664,665,666,667,668],"addcode":["   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n","   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n","   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_26.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[48,49,50,51],"dellines":[],"addcode":["  @Override\n","  public boolean cancel(boolean mayInterruptIfRunning) {\n","    return delegate.cancel(mayInterruptIfRunning);\n","  }\n","  @Override\n","  public boolean cancel(boolean mayInterruptIfRunning) {\n","    return delegate.cancel(mayInterruptIfRunning);\n","  }\n"],"delcode":[],"methodSig":"public boolean cancel(boolean mayInterruptIfRunning)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_26.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_26.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_26.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_26.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[560,561,562,563,567,568,569,570,559],"dellines":[576,577,578,582,583,584,569,570,571,572,573,574,575],"addcode":["   * <pre>{@code\n","   * ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   * ListenableFuture<QueryResult> queryFuture =\n","   *     transformAsync(rowKeyFuture, dataService::readFuture, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n","   * <pre>{@code\n","   * ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   * ListenableFuture<QueryResult> queryFuture =\n","   *     transformAsync(rowKeyFuture, dataService::readFuture, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   *   AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *       new AsyncFunction<RowKey, QueryResult>() {\n","   *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *           return dataService.read(rowKey);\n","   *         }\n","   *       };\n","   *   ListenableFuture<QueryResult> queryFuture =\n","   *       transformAsync(rowKeyFuture, queryFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n","   * <pre>   {@code\n","   *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   *   AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *       new AsyncFunction<RowKey, QueryResult>() {\n","   *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *           return dataService.read(rowKey);\n","   *         }\n","   *       };\n","   *   ListenableFuture<QueryResult> queryFuture =\n","   *       transformAsync(rowKeyFuture, queryFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n"],"methodSig":"public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_27.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[48,49,50,51],"dellines":[],"addcode":["  @Override\n","  public boolean cancel(boolean mayInterruptIfRunning) {\n","    return delegate.cancel(mayInterruptIfRunning);\n","  }\n","  @Override\n","  public boolean cancel(boolean mayInterruptIfRunning) {\n","    return delegate.cancel(mayInterruptIfRunning);\n","  }\n"],"delcode":[],"methodSig":"public boolean cancel(boolean mayInterruptIfRunning)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_27.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_27.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_27.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_27.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[515,520,521,522,523,524],"dellines":[532,533,534,520,521,522,523,524,525,527],"addcode":["   *     transformAsync(rowKeyFuture, dataService::readFuture);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n","   *     transformAsync(rowKeyFuture, dataService::readFuture);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n"],"delcode":["   * AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *     new AsyncFunction<RowKey, QueryResult>() {\n","   *       public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *         return dataService.read(rowKey);\n","   *       }\n","   *     };\n","   *     transformAsync(rowKeyFuture, queryFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n","   * AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *     new AsyncFunction<RowKey, QueryResult>() {\n","   *       public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *         return dataService.read(rowKey);\n","   *       }\n","   *     };\n","   *     transformAsync(rowKeyFuture, queryFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n"],"methodSig":"public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_28.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[53,54,55,56],"dellines":[],"addcode":["  @Override\n","  public boolean isCancelled() {\n","    return delegate.isCancelled();\n","  }\n","  @Override\n","  public boolean isCancelled() {\n","    return delegate.isCancelled();\n","  }\n"],"delcode":[],"methodSig":"public boolean isCancelled()"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_28.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_28.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_28.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_28.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[601,606,607],"dellines":[626,627,614,615,616,617,618,619,621],"addcode":["   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n","   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n"],"delcode":["   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n","   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_29.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[53,54,55,56],"dellines":[],"addcode":["  @Override\n","  public boolean isCancelled() {\n","    return delegate.isCancelled();\n","  }\n","  @Override\n","  public boolean isCancelled() {\n","    return delegate.isCancelled();\n","  }\n"],"delcode":[],"methodSig":"public boolean isCancelled()"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_29.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_29.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_29.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_29.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[640,641,642,643,647,648,639],"dellines":[672,673,659,660,661,662,663,664,665,666,667,668],"addcode":["   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n","   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n","   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_30.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[53,54,55,56],"dellines":[],"addcode":["  @Override\n","  public boolean isCancelled() {\n","    return delegate.isCancelled();\n","  }\n","  @Override\n","  public boolean isCancelled() {\n","    return delegate.isCancelled();\n","  }\n"],"delcode":[],"methodSig":"public boolean isCancelled()"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_30.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_30.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_30.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_30.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[560,561,562,563,567,568,569,570,559],"dellines":[576,577,578,582,583,584,569,570,571,572,573,574,575],"addcode":["   * <pre>{@code\n","   * ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   * ListenableFuture<QueryResult> queryFuture =\n","   *     transformAsync(rowKeyFuture, dataService::readFuture, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n","   * <pre>{@code\n","   * ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   * ListenableFuture<QueryResult> queryFuture =\n","   *     transformAsync(rowKeyFuture, dataService::readFuture, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   *   AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *       new AsyncFunction<RowKey, QueryResult>() {\n","   *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *           return dataService.read(rowKey);\n","   *         }\n","   *       };\n","   *   ListenableFuture<QueryResult> queryFuture =\n","   *       transformAsync(rowKeyFuture, queryFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n","   * <pre>   {@code\n","   *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   *   AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *       new AsyncFunction<RowKey, QueryResult>() {\n","   *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *           return dataService.read(rowKey);\n","   *         }\n","   *       };\n","   *   ListenableFuture<QueryResult> queryFuture =\n","   *       transformAsync(rowKeyFuture, queryFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n"],"methodSig":"public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_31.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/ForwardingFluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java","addlines":[53,54,55,56],"dellines":[],"addcode":["  @Override\n","  public boolean isCancelled() {\n","    return delegate.isCancelled();\n","  }\n","  @Override\n","  public boolean isCancelled() {\n","    return delegate.isCancelled();\n","  }\n"],"delcode":[],"methodSig":"public boolean isCancelled()"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_31.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_31.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_31.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_31.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[515,520,521,522,523,524],"dellines":[532,533,534,520,521,522,523,524,525,527],"addcode":["   *     transformAsync(rowKeyFuture, dataService::readFuture);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n","   *     transformAsync(rowKeyFuture, dataService::readFuture);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n"],"delcode":["   * AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *     new AsyncFunction<RowKey, QueryResult>() {\n","   *       public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *         return dataService.read(rowKey);\n","   *       }\n","   *     };\n","   *     transformAsync(rowKeyFuture, queryFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n","   * AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *     new AsyncFunction<RowKey, QueryResult>() {\n","   *       public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *         return dataService.read(rowKey);\n","   *       }\n","   *     };\n","   *     transformAsync(rowKeyFuture, queryFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n"],"methodSig":"public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_32.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_32.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[128,129,125,126,127],"dellines":[],"addcode":["  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catching(\n","      Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catching(this, exceptionType, fallback, executor);\n","  }\n","  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catching(\n","      Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catching(this, exceptionType, fallback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<V> catching(Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_32.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_32.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_32.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_32.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[601,606,607],"dellines":[626,627,614,615,616,617,618,619,621],"addcode":["   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n","   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n"],"delcode":["   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n","   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_33.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_33.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[128,129,125,126,127],"dellines":[],"addcode":["  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catching(\n","      Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catching(this, exceptionType, fallback, executor);\n","  }\n","  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catching(\n","      Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catching(this, exceptionType, fallback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<V> catching(Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_33.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_33.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_33.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_33.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[640,641,642,643,647,648,639],"dellines":[672,673,659,660,661,662,663,664,665,666,667,668],"addcode":["   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n","   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n","   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_34.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_34.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[128,129,125,126,127],"dellines":[],"addcode":["  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catching(\n","      Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catching(this, exceptionType, fallback, executor);\n","  }\n","  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catching(\n","      Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catching(this, exceptionType, fallback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<V> catching(Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_34.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_34.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_34.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_34.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[560,561,562,563,567,568,569,570,559],"dellines":[576,577,578,582,583,584,569,570,571,572,573,574,575],"addcode":["   * <pre>{@code\n","   * ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   * ListenableFuture<QueryResult> queryFuture =\n","   *     transformAsync(rowKeyFuture, dataService::readFuture, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n","   * <pre>{@code\n","   * ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   * ListenableFuture<QueryResult> queryFuture =\n","   *     transformAsync(rowKeyFuture, dataService::readFuture, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   *   AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *       new AsyncFunction<RowKey, QueryResult>() {\n","   *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *           return dataService.read(rowKey);\n","   *         }\n","   *       };\n","   *   ListenableFuture<QueryResult> queryFuture =\n","   *       transformAsync(rowKeyFuture, queryFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n","   * <pre>   {@code\n","   *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   *   AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *       new AsyncFunction<RowKey, QueryResult>() {\n","   *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *           return dataService.read(rowKey);\n","   *         }\n","   *       };\n","   *   ListenableFuture<QueryResult> queryFuture =\n","   *       transformAsync(rowKeyFuture, queryFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n"],"methodSig":"public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_35.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_35.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[128,129,125,126,127],"dellines":[],"addcode":["  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catching(\n","      Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catching(this, exceptionType, fallback, executor);\n","  }\n","  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catching(\n","      Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catching(this, exceptionType, fallback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<V> catching(Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_35.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_35.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_35.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_35.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[515,520,521,522,523,524],"dellines":[532,533,534,520,521,522,523,524,525,527],"addcode":["   *     transformAsync(rowKeyFuture, dataService::readFuture);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n","   *     transformAsync(rowKeyFuture, dataService::readFuture);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n"],"delcode":["   * AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *     new AsyncFunction<RowKey, QueryResult>() {\n","   *       public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *         return dataService.read(rowKey);\n","   *       }\n","   *     };\n","   *     transformAsync(rowKeyFuture, queryFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n","   * AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *     new AsyncFunction<RowKey, QueryResult>() {\n","   *       public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *         return dataService.read(rowKey);\n","   *       }\n","   *     };\n","   *     transformAsync(rowKeyFuture, queryFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n"],"methodSig":"public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_36.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_36.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[128,129,125,126,127],"dellines":[],"addcode":["  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catching(\n","      Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catching(this, exceptionType, fallback, executor);\n","  }\n","  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catching(\n","      Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catching(this, exceptionType, fallback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<V> catching(Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_36.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_36.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_36.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_36.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[258,263,264],"dellines":[256,257,246,247,248,249,250,251],"addcode":["   *     fetchCounterFuture, FetchException.class, x -> 0);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n","   *     fetchCounterFuture, FetchException.class, x -> 0);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n"],"delcode":["   *     fetchCounterFuture, FetchException.class,\n","   *     new Function<FetchException, Integer>() {\n","   *       public Integer apply(FetchException e) {\n","   *         return 0;\n","   *       }\n","   *     });\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n","   *     fetchCounterFuture, FetchException.class,\n","   *     new Function<FetchException, Integer>() {\n","   *       public Integer apply(FetchException e) {\n","   *         return 0;\n","   *       }\n","   *     });\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_37.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_37.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[128,129,125,126,127],"dellines":[],"addcode":["  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catching(\n","      Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catching(this, exceptionType, fallback, executor);\n","  }\n","  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catching(\n","      Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catching(this, exceptionType, fallback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<V> catching(Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_37.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_37.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_37.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_37.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[304,305,306,307,308,309,310,314,315,303],"dellines":[296,297,298,299,300,301,302,303,304,305,306,307,311,312],"addcode":["   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter in case an exception happens when\n","   * // processing the RPC to fetch counters.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n","   *     fetchCounterFuture, FetchException.class, x -> 0, directExecutor());\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n","   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter in case an exception happens when\n","   * // processing the RPC to fetch counters.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n","   *     fetchCounterFuture, FetchException.class, x -> 0, directExecutor());\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter in case an exception happens when\n","   *   // processing the RPC to fetch counters.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new Function<FetchException, Integer>() {\n","   *         public Integer apply(FetchException e) {\n","   *           return 0;\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n","   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter in case an exception happens when\n","   *   // processing the RPC to fetch counters.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new Function<FetchException, Integer>() {\n","   *         public Integer apply(FetchException e) {\n","   *           return 0;\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_38.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_38.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[288,289,290],"dellines":[],"addcode":["  public final <T> FluentFuture<T> transform(Function<? super V, T> function, Executor executor) {\n","    return (FluentFuture<T>) Futures.transform(this, function, executor);\n","  }\n","  public final <T> FluentFuture<T> transform(Function<? super V, T> function, Executor executor) {\n","    return (FluentFuture<T>) Futures.transform(this, function, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<T> transform(Function<? super V, T> function, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_38.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_38.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_38.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_38.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[601,606,607],"dellines":[626,627,614,615,616,617,618,619,621],"addcode":["   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n","   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n"],"delcode":["   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n","   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_39.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_39.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[288,289,290],"dellines":[],"addcode":["  public final <T> FluentFuture<T> transform(Function<? super V, T> function, Executor executor) {\n","    return (FluentFuture<T>) Futures.transform(this, function, executor);\n","  }\n","  public final <T> FluentFuture<T> transform(Function<? super V, T> function, Executor executor) {\n","    return (FluentFuture<T>) Futures.transform(this, function, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<T> transform(Function<? super V, T> function, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_39.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_39.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_39.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_39.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[640,641,642,643,647,648,639],"dellines":[672,673,659,660,661,662,663,664,665,666,667,668],"addcode":["   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n","   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n","   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_40.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_40.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[288,289,290],"dellines":[],"addcode":["  public final <T> FluentFuture<T> transform(Function<? super V, T> function, Executor executor) {\n","    return (FluentFuture<T>) Futures.transform(this, function, executor);\n","  }\n","  public final <T> FluentFuture<T> transform(Function<? super V, T> function, Executor executor) {\n","    return (FluentFuture<T>) Futures.transform(this, function, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<T> transform(Function<? super V, T> function, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_40.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_40.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_40.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_40.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[560,561,562,563,567,568,569,570,559],"dellines":[576,577,578,582,583,584,569,570,571,572,573,574,575],"addcode":["   * <pre>{@code\n","   * ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   * ListenableFuture<QueryResult> queryFuture =\n","   *     transformAsync(rowKeyFuture, dataService::readFuture, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n","   * <pre>{@code\n","   * ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   * ListenableFuture<QueryResult> queryFuture =\n","   *     transformAsync(rowKeyFuture, dataService::readFuture, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   *   AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *       new AsyncFunction<RowKey, QueryResult>() {\n","   *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *           return dataService.read(rowKey);\n","   *         }\n","   *       };\n","   *   ListenableFuture<QueryResult> queryFuture =\n","   *       transformAsync(rowKeyFuture, queryFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n","   * <pre>   {@code\n","   *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   *   AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *       new AsyncFunction<RowKey, QueryResult>() {\n","   *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *           return dataService.read(rowKey);\n","   *         }\n","   *       };\n","   *   ListenableFuture<QueryResult> queryFuture =\n","   *       transformAsync(rowKeyFuture, queryFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n"],"methodSig":"public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_41.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_41.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[288,289,290],"dellines":[],"addcode":["  public final <T> FluentFuture<T> transform(Function<? super V, T> function, Executor executor) {\n","    return (FluentFuture<T>) Futures.transform(this, function, executor);\n","  }\n","  public final <T> FluentFuture<T> transform(Function<? super V, T> function, Executor executor) {\n","    return (FluentFuture<T>) Futures.transform(this, function, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<T> transform(Function<? super V, T> function, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_41.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_41.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_41.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_41.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[515,520,521,522,523,524],"dellines":[532,533,534,520,521,522,523,524,525,527],"addcode":["   *     transformAsync(rowKeyFuture, dataService::readFuture);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n","   *     transformAsync(rowKeyFuture, dataService::readFuture);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n"],"delcode":["   * AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *     new AsyncFunction<RowKey, QueryResult>() {\n","   *       public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *         return dataService.read(rowKey);\n","   *       }\n","   *     };\n","   *     transformAsync(rowKeyFuture, queryFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n","   * AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *     new AsyncFunction<RowKey, QueryResult>() {\n","   *       public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *         return dataService.read(rowKey);\n","   *       }\n","   *     };\n","   *     transformAsync(rowKeyFuture, queryFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n"],"methodSig":"public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_42.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_42.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[288,289,290],"dellines":[],"addcode":["  public final <T> FluentFuture<T> transform(Function<? super V, T> function, Executor executor) {\n","    return (FluentFuture<T>) Futures.transform(this, function, executor);\n","  }\n","  public final <T> FluentFuture<T> transform(Function<? super V, T> function, Executor executor) {\n","    return (FluentFuture<T>) Futures.transform(this, function, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<T> transform(Function<? super V, T> function, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_42.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_42.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_42.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_42.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[258,263,264],"dellines":[256,257,246,247,248,249,250,251],"addcode":["   *     fetchCounterFuture, FetchException.class, x -> 0);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n","   *     fetchCounterFuture, FetchException.class, x -> 0);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n"],"delcode":["   *     fetchCounterFuture, FetchException.class,\n","   *     new Function<FetchException, Integer>() {\n","   *       public Integer apply(FetchException e) {\n","   *         return 0;\n","   *       }\n","   *     });\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n","   *     fetchCounterFuture, FetchException.class,\n","   *     new Function<FetchException, Integer>() {\n","   *       public Integer apply(FetchException e) {\n","   *         return 0;\n","   *       }\n","   *     });\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_43.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_43.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[288,289,290],"dellines":[],"addcode":["  public final <T> FluentFuture<T> transform(Function<? super V, T> function, Executor executor) {\n","    return (FluentFuture<T>) Futures.transform(this, function, executor);\n","  }\n","  public final <T> FluentFuture<T> transform(Function<? super V, T> function, Executor executor) {\n","    return (FluentFuture<T>) Futures.transform(this, function, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<T> transform(Function<? super V, T> function, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_43.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_43.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_43.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_43.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[304,305,306,307,308,309,310,314,315,303],"dellines":[296,297,298,299,300,301,302,303,304,305,306,307,311,312],"addcode":["   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter in case an exception happens when\n","   * // processing the RPC to fetch counters.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n","   *     fetchCounterFuture, FetchException.class, x -> 0, directExecutor());\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n","   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter in case an exception happens when\n","   * // processing the RPC to fetch counters.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n","   *     fetchCounterFuture, FetchException.class, x -> 0, directExecutor());\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter in case an exception happens when\n","   *   // processing the RPC to fetch counters.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new Function<FetchException, Integer>() {\n","   *         public Integer apply(FetchException e) {\n","   *           return 0;\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n","   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter in case an exception happens when\n","   *   // processing the RPC to fetch counters.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new Function<FetchException, Integer>() {\n","   *         public Integer apply(FetchException e) {\n","   *           return 0;\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_44.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_44.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[192,193,194,190,191],"dellines":[],"addcode":["  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catchingAsync(\n","      Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catchingAsync(this, exceptionType, fallback, executor);\n","  }\n","  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catchingAsync(\n","      Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catchingAsync(this, exceptionType, fallback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_44.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_44.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_44.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_44.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[601,606,607],"dellines":[626,627,614,615,616,617,618,619,621],"addcode":["   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n","   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n"],"delcode":["   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n","   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_45.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_45.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[192,193,194,190,191],"dellines":[],"addcode":["  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catchingAsync(\n","      Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catchingAsync(this, exceptionType, fallback, executor);\n","  }\n","  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catchingAsync(\n","      Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catchingAsync(this, exceptionType, fallback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_45.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_45.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_45.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_45.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[640,641,642,643,647,648,639],"dellines":[672,673,659,660,661,662,663,664,665,666,667,668],"addcode":["   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n","   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n","   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_46.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_46.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[192,193,194,190,191],"dellines":[],"addcode":["  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catchingAsync(\n","      Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catchingAsync(this, exceptionType, fallback, executor);\n","  }\n","  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catchingAsync(\n","      Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catchingAsync(this, exceptionType, fallback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_46.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_46.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_46.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_46.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[560,561,562,563,567,568,569,570,559],"dellines":[576,577,578,582,583,584,569,570,571,572,573,574,575],"addcode":["   * <pre>{@code\n","   * ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   * ListenableFuture<QueryResult> queryFuture =\n","   *     transformAsync(rowKeyFuture, dataService::readFuture, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n","   * <pre>{@code\n","   * ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   * ListenableFuture<QueryResult> queryFuture =\n","   *     transformAsync(rowKeyFuture, dataService::readFuture, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   *   AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *       new AsyncFunction<RowKey, QueryResult>() {\n","   *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *           return dataService.read(rowKey);\n","   *         }\n","   *       };\n","   *   ListenableFuture<QueryResult> queryFuture =\n","   *       transformAsync(rowKeyFuture, queryFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n","   * <pre>   {@code\n","   *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   *   AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *       new AsyncFunction<RowKey, QueryResult>() {\n","   *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *           return dataService.read(rowKey);\n","   *         }\n","   *       };\n","   *   ListenableFuture<QueryResult> queryFuture =\n","   *       transformAsync(rowKeyFuture, queryFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n"],"methodSig":"public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_47.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_47.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[192,193,194,190,191],"dellines":[],"addcode":["  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catchingAsync(\n","      Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catchingAsync(this, exceptionType, fallback, executor);\n","  }\n","  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catchingAsync(\n","      Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catchingAsync(this, exceptionType, fallback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_47.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_47.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_47.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_47.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[515,520,521,522,523,524],"dellines":[532,533,534,520,521,522,523,524,525,527],"addcode":["   *     transformAsync(rowKeyFuture, dataService::readFuture);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n","   *     transformAsync(rowKeyFuture, dataService::readFuture);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n"],"delcode":["   * AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *     new AsyncFunction<RowKey, QueryResult>() {\n","   *       public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *         return dataService.read(rowKey);\n","   *       }\n","   *     };\n","   *     transformAsync(rowKeyFuture, queryFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n","   * AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *     new AsyncFunction<RowKey, QueryResult>() {\n","   *       public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *         return dataService.read(rowKey);\n","   *       }\n","   *     };\n","   *     transformAsync(rowKeyFuture, queryFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n"],"methodSig":"public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_48.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_48.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[192,193,194,190,191],"dellines":[],"addcode":["  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catchingAsync(\n","      Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catchingAsync(this, exceptionType, fallback, executor);\n","  }\n","  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catchingAsync(\n","      Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catchingAsync(this, exceptionType, fallback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_48.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_48.txt","newdoc":" TODO(kak): @CheckReturnValue\n TODO(kak): @CheckReturnValue\n","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_48.txt","olddoc":" TODO(kak): @CheckReturnValue\n TODO(kak): @CheckReturnValue\n","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_48.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[368,369,370,371,356,373,379,380,381,382,367,383],"dellines":[384,353,385,354,355,356,357,358,369,370,371,372,373,374,375,376,383],"addcode":["   *     fetchCounterFuture, FetchException.class, x -> immediateFuture(0));\n","   *     fetchCounterFuture,\n","   *     FetchException.class,\n","   *     e -> {\n","   *       if (omitDataOnFetchFailure) {\n","   *         return immediateFuture(0);\n","   *       throw e;\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n","   *     fetchCounterFuture, FetchException.class, x -> immediateFuture(0));\n","   *     fetchCounterFuture,\n","   *     FetchException.class,\n","   *     e -> {\n","   *       if (omitDataOnFetchFailure) {\n","   *         return immediateFuture(0);\n","   *       throw e;\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n"],"delcode":["   *     fetchCounterFuture, FetchException.class,\n","   *     new AsyncFunction<FetchException, Integer>() {\n","   *       public ListenableFuture<Integer> apply(FetchException e) {\n","   *         return immediateFuture(0);\n","   *       }\n","   *     });\n","   *     fetchCounterFuture, FetchException.class,\n","   *     new AsyncFunction<FetchException, Integer>() {\n","   *       public ListenableFuture<Integer> apply(FetchException e)\n","   *           throws FetchException {\n","   *         if (omitDataOnFetchFailure) {\n","   *           return immediateFuture(0);\n","   *         }\n","   *         throw e;\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n","   *     fetchCounterFuture, FetchException.class,\n","   *     new AsyncFunction<FetchException, Integer>() {\n","   *       public ListenableFuture<Integer> apply(FetchException e) {\n","   *         return immediateFuture(0);\n","   *       }\n","   *     });\n","   *     fetchCounterFuture, FetchException.class,\n","   *     new AsyncFunction<FetchException, Integer>() {\n","   *       public ListenableFuture<Integer> apply(FetchException e)\n","   *           throws FetchException {\n","   *         if (omitDataOnFetchFailure) {\n","   *           return immediateFuture(0);\n","   *         }\n","   *         throw e;\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n"],"methodSig":"public static ListenableFuture<V> catchingAsync(ListenableFuture<? extends V> input, Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_49.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_49.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[192,193,194,190,191],"dellines":[],"addcode":["  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catchingAsync(\n","      Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catchingAsync(this, exceptionType, fallback, executor);\n","  }\n","  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catchingAsync(\n","      Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catchingAsync(this, exceptionType, fallback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_49.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_49.txt","newdoc":" TODO(kak): @CheckReturnValue\n TODO(kak): @CheckReturnValue\n","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_49.txt","olddoc":" TODO(kak): @CheckReturnValue\n TODO(kak): @CheckReturnValue\n","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_49.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[448,449,453,454,455,456,423,424,425,426,427,428,429,430,434,435,436,437,438,439,440,441,442,443,444,445,446,447],"dellines":[448,449,450,451,452,453,454,455,459,460,461,425,426,427,428,429,430,431,432,433,434,435,436,440,441,442,443,444,445,446,447],"addcode":["   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter in case an exception happens when\n","   * // processing the RPC to fetch counters.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *     fetchCounterFuture, FetchException.class, x -> immediateFuture(0), directExecutor());\n","   * }</pre>\n","   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter only in case the exception was a\n","   * // TimeoutException.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *     fetchCounterFuture,\n","   *     FetchException.class,\n","   *     e -> {\n","   *       if (omitDataOnFetchFailure) {\n","   *         return immediateFuture(0);\n","   *       }\n","   *       throw e;\n","   *     },\n","   *     directExecutor());\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n","   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter in case an exception happens when\n","   * // processing the RPC to fetch counters.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *     fetchCounterFuture, FetchException.class, x -> immediateFuture(0), directExecutor());\n","   * }</pre>\n","   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter only in case the exception was a\n","   * // TimeoutException.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *     fetchCounterFuture,\n","   *     FetchException.class,\n","   *     e -> {\n","   *       if (omitDataOnFetchFailure) {\n","   *         return immediateFuture(0);\n","   *       }\n","   *       throw e;\n","   *     },\n","   *     directExecutor());\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter in case an exception happens when\n","   *   // processing the RPC to fetch counters.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new AsyncFunction<FetchException, Integer>() {\n","   *         public ListenableFuture<Integer> apply(FetchException e) {\n","   *           return immediateFuture(0);\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter only in case the exception was a\n","   *   // TimeoutException.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new AsyncFunction<FetchException, Integer>() {\n","   *         public ListenableFuture<Integer> apply(FetchException e)\n","   *             throws FetchException {\n","   *           if (omitDataOnFetchFailure) {\n","   *             return immediateFuture(0);\n","   *           }\n","   *           throw e;\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n","   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter in case an exception happens when\n","   *   // processing the RPC to fetch counters.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new AsyncFunction<FetchException, Integer>() {\n","   *         public ListenableFuture<Integer> apply(FetchException e) {\n","   *           return immediateFuture(0);\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter only in case the exception was a\n","   *   // TimeoutException.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new AsyncFunction<FetchException, Integer>() {\n","   *         public ListenableFuture<Integer> apply(FetchException e)\n","   *             throws FetchException {\n","   *           if (omitDataOnFetchFailure) {\n","   *             return immediateFuture(0);\n","   *           }\n","   *           throw e;\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n"],"methodSig":"public static ListenableFuture<V> catchingAsync(ListenableFuture<? extends V> input, Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_50.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_50.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[192,193,194,190,191],"dellines":[],"addcode":["  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catchingAsync(\n","      Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catchingAsync(this, exceptionType, fallback, executor);\n","  }\n","  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catchingAsync(\n","      Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catchingAsync(this, exceptionType, fallback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_50.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_50.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_50.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_50.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[258,263,264],"dellines":[256,257,246,247,248,249,250,251],"addcode":["   *     fetchCounterFuture, FetchException.class, x -> 0);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n","   *     fetchCounterFuture, FetchException.class, x -> 0);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n"],"delcode":["   *     fetchCounterFuture, FetchException.class,\n","   *     new Function<FetchException, Integer>() {\n","   *       public Integer apply(FetchException e) {\n","   *         return 0;\n","   *       }\n","   *     });\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n","   *     fetchCounterFuture, FetchException.class,\n","   *     new Function<FetchException, Integer>() {\n","   *       public Integer apply(FetchException e) {\n","   *         return 0;\n","   *       }\n","   *     });\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_51.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_51.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[192,193,194,190,191],"dellines":[],"addcode":["  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catchingAsync(\n","      Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catchingAsync(this, exceptionType, fallback, executor);\n","  }\n","  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n","  public final <X extends Throwable> FluentFuture<V> catchingAsync(\n","      Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor) {\n","    return (FluentFuture<V>) Futures.catchingAsync(this, exceptionType, fallback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_51.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_51.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_51.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_51.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[304,305,306,307,308,309,310,314,315,303],"dellines":[296,297,298,299,300,301,302,303,304,305,306,307,311,312],"addcode":["   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter in case an exception happens when\n","   * // processing the RPC to fetch counters.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n","   *     fetchCounterFuture, FetchException.class, x -> 0, directExecutor());\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n","   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter in case an exception happens when\n","   * // processing the RPC to fetch counters.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n","   *     fetchCounterFuture, FetchException.class, x -> 0, directExecutor());\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter in case an exception happens when\n","   *   // processing the RPC to fetch counters.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new Function<FetchException, Integer>() {\n","   *         public Integer apply(FetchException e) {\n","   *           return 0;\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n","   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter in case an exception happens when\n","   *   // processing the RPC to fetch counters.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new Function<FetchException, Integer>() {\n","   *         public Integer apply(FetchException e) {\n","   *           return 0;\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_52.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_52.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[329,330,331],"dellines":[],"addcode":["  public final void addCallback(FutureCallback<? super V> callback, Executor executor) {\n","    Futures.addCallback(this, callback, executor);\n","  }\n","  public final void addCallback(FutureCallback<? super V> callback, Executor executor) {\n","    Futures.addCallback(this, callback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final void addCallback(FutureCallback<? super V> callback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_52.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_52.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_52.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_52.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[601,606,607],"dellines":[626,627,614,615,616,617,618,619,621],"addcode":["   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n","   *     transform(queryFuture, QueryResult::getRows);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n"],"delcode":["   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n","   * Function<QueryResult, List<Row>> rowsFunction =\n","   *     new Function<QueryResult, List<Row>>() {\n","   *       public List<Row> apply(QueryResult queryResult) {\n","   *         return queryResult.getRows();\n","   *       }\n","   *     };\n","   *     transform(queryFuture, rowsFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_53.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_53.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[329,330,331],"dellines":[],"addcode":["  public final void addCallback(FutureCallback<? super V> callback, Executor executor) {\n","    Futures.addCallback(this, callback, executor);\n","  }\n","  public final void addCallback(FutureCallback<? super V> callback, Executor executor) {\n","    Futures.addCallback(this, callback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final void addCallback(FutureCallback<? super V> callback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_53.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_53.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_53.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_53.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[640,641,642,643,647,648,639],"dellines":[672,673,659,660,661,662,663,664,665,666,667,668],"addcode":["   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n","   * <pre>{@code\n","   * ListenableFuture<QueryResult> queryFuture = ...;\n","   * ListenableFuture<List<Row>> rowsFuture =\n","   *     transform(queryFuture, QueryResult::getRows, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n","   * <pre>   {@code\n","   *   ListenableFuture<QueryResult> queryFuture = ...;\n","   *   Function<QueryResult, List<Row>> rowsFunction =\n","   *       new Function<QueryResult, List<Row>>() {\n","   *         public List<Row> apply(QueryResult queryResult) {\n","   *           return queryResult.getRows();\n","   *         }\n","   *       };\n","   *   ListenableFuture<List<Row>> rowsFuture =\n","   *       transform(queryFuture, rowsFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_54.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_54.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[329,330,331],"dellines":[],"addcode":["  public final void addCallback(FutureCallback<? super V> callback, Executor executor) {\n","    Futures.addCallback(this, callback, executor);\n","  }\n","  public final void addCallback(FutureCallback<? super V> callback, Executor executor) {\n","    Futures.addCallback(this, callback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final void addCallback(FutureCallback<? super V> callback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_54.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_54.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_54.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_54.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[560,561,562,563,567,568,569,570,559],"dellines":[576,577,578,582,583,584,569,570,571,572,573,574,575],"addcode":["   * <pre>{@code\n","   * ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   * ListenableFuture<QueryResult> queryFuture =\n","   *     transformAsync(rowKeyFuture, dataService::readFuture, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n","   * <pre>{@code\n","   * ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   * ListenableFuture<QueryResult> queryFuture =\n","   *     transformAsync(rowKeyFuture, dataService::readFuture, executor);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   *   AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *       new AsyncFunction<RowKey, QueryResult>() {\n","   *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *           return dataService.read(rowKey);\n","   *         }\n","   *       };\n","   *   ListenableFuture<QueryResult> queryFuture =\n","   *       transformAsync(rowKeyFuture, queryFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n","   * <pre>   {@code\n","   *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n","   *   AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *       new AsyncFunction<RowKey, QueryResult>() {\n","   *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *           return dataService.read(rowKey);\n","   *         }\n","   *       };\n","   *   ListenableFuture<QueryResult> queryFuture =\n","   *       transformAsync(rowKeyFuture, queryFunction, executor);}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n"],"methodSig":"public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_55.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_55.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[329,330,331],"dellines":[],"addcode":["  public final void addCallback(FutureCallback<? super V> callback, Executor executor) {\n","    Futures.addCallback(this, callback, executor);\n","  }\n","  public final void addCallback(FutureCallback<? super V> callback, Executor executor) {\n","    Futures.addCallback(this, callback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final void addCallback(FutureCallback<? super V> callback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_55.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_55.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_55.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_55.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[515,520,521,522,523,524],"dellines":[532,533,534,520,521,522,523,524,525,527],"addcode":["   *     transformAsync(rowKeyFuture, dataService::readFuture);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n","   *     transformAsync(rowKeyFuture, dataService::readFuture);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n"],"delcode":["   * AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *     new AsyncFunction<RowKey, QueryResult>() {\n","   *       public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *         return dataService.read(rowKey);\n","   *       }\n","   *     };\n","   *     transformAsync(rowKeyFuture, queryFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n","   * AsyncFunction<RowKey, QueryResult> queryFunction =\n","   *     new AsyncFunction<RowKey, QueryResult>() {\n","   *       public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n","   *         return dataService.read(rowKey);\n","   *       }\n","   *     };\n","   *     transformAsync(rowKeyFuture, queryFunction);\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n"],"methodSig":"public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_56.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_56.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[329,330,331],"dellines":[],"addcode":["  public final void addCallback(FutureCallback<? super V> callback, Executor executor) {\n","    Futures.addCallback(this, callback, executor);\n","  }\n","  public final void addCallback(FutureCallback<? super V> callback, Executor executor) {\n","    Futures.addCallback(this, callback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final void addCallback(FutureCallback<? super V> callback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_56.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_56.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_56.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_56.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[1126,1127],"dellines":[1151],"addcode":["   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight callbacks passed to this method.\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight callbacks passed to this method.\n"],"delcode":["   * ListenableFuture.addListener} documentation.\n","   * ListenableFuture.addListener} documentation.\n"],"methodSig":"public static void addCallback(ListenableFuture<V> future, FutureCallback<? super V> callback)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_57.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_57.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[329,330,331],"dellines":[],"addcode":["  public final void addCallback(FutureCallback<? super V> callback, Executor executor) {\n","    Futures.addCallback(this, callback, executor);\n","  }\n","  public final void addCallback(FutureCallback<? super V> callback, Executor executor) {\n","    Futures.addCallback(this, callback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final void addCallback(FutureCallback<? super V> callback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_57.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_57.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_57.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_57.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[1152,1169,1170,1156,1157,1158,1174,1175],"dellines":[1191,1176,1195,1180],"addcode":["   * <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of\n","   * <p>Example:\n","   *\n","   * <pre>{@code\n","   *     }, e);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * callbacks passed to this method.\n","   * <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of\n","   * <p>Example:\n","   *\n","   * <pre>{@code\n","   *     }, e);\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * callbacks passed to this method.\n"],"delcode":["   * <p>The callback is run in {@code executor}. There is no guaranteed ordering of execution of\n","   * Example: <pre> {@code\n","   *     }, e);}</pre>\n","   * documentation.\n","   * <p>The callback is run in {@code executor}. There is no guaranteed ordering of execution of\n","   * Example: <pre> {@code\n","   *     }, e);}</pre>\n","   * documentation.\n"],"methodSig":"public static void addCallback(final ListenableFuture<V> future, final FutureCallback<? super V> callback, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_58.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_58.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[329,330,331],"dellines":[],"addcode":["  public final void addCallback(FutureCallback<? super V> callback, Executor executor) {\n","    Futures.addCallback(this, callback, executor);\n","  }\n","  public final void addCallback(FutureCallback<? super V> callback, Executor executor) {\n","    Futures.addCallback(this, callback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final void addCallback(FutureCallback<? super V> callback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_58.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_58.txt","newdoc":" TODO(kak): @CheckReturnValue\n TODO(kak): @CheckReturnValue\n TODO(kak): @CheckReturnValue\n","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_58.txt","olddoc":" TODO(kak): @CheckReturnValue\n TODO(kak): @CheckReturnValue\n TODO(kak): @CheckReturnValue\n","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_58.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[368,369,370,371,356,373,379,380,381,382,367,383],"dellines":[384,353,385,354,355,356,357,358,369,370,371,372,373,374,375,376,383],"addcode":["   *     fetchCounterFuture, FetchException.class, x -> immediateFuture(0));\n","   *     fetchCounterFuture,\n","   *     FetchException.class,\n","   *     e -> {\n","   *       if (omitDataOnFetchFailure) {\n","   *         return immediateFuture(0);\n","   *       throw e;\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n","   *     fetchCounterFuture, FetchException.class, x -> immediateFuture(0));\n","   *     fetchCounterFuture,\n","   *     FetchException.class,\n","   *     e -> {\n","   *       if (omitDataOnFetchFailure) {\n","   *         return immediateFuture(0);\n","   *       throw e;\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n","   * directExecutor} functions should avoid heavyweight operations inside {@code\n","   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n","   * completing the returned {@code Future}.)\n"],"delcode":["   *     fetchCounterFuture, FetchException.class,\n","   *     new AsyncFunction<FetchException, Integer>() {\n","   *       public ListenableFuture<Integer> apply(FetchException e) {\n","   *         return immediateFuture(0);\n","   *       }\n","   *     });\n","   *     fetchCounterFuture, FetchException.class,\n","   *     new AsyncFunction<FetchException, Integer>() {\n","   *       public ListenableFuture<Integer> apply(FetchException e)\n","   *           throws FetchException {\n","   *         if (omitDataOnFetchFailure) {\n","   *           return immediateFuture(0);\n","   *         }\n","   *         throw e;\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n","   *     fetchCounterFuture, FetchException.class,\n","   *     new AsyncFunction<FetchException, Integer>() {\n","   *       public ListenableFuture<Integer> apply(FetchException e) {\n","   *         return immediateFuture(0);\n","   *       }\n","   *     });\n","   *     fetchCounterFuture, FetchException.class,\n","   *     new AsyncFunction<FetchException, Integer>() {\n","   *       public ListenableFuture<Integer> apply(FetchException e)\n","   *           throws FetchException {\n","   *         if (omitDataOnFetchFailure) {\n","   *           return immediateFuture(0);\n","   *         }\n","   *         throw e;\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n","   * to complete the returned {@code Future}.\n"],"methodSig":"public static ListenableFuture<V> catchingAsync(ListenableFuture<? extends V> input, Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_59.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_59.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[329,330,331],"dellines":[],"addcode":["  public final void addCallback(FutureCallback<? super V> callback, Executor executor) {\n","    Futures.addCallback(this, callback, executor);\n","  }\n","  public final void addCallback(FutureCallback<? super V> callback, Executor executor) {\n","    Futures.addCallback(this, callback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final void addCallback(FutureCallback<? super V> callback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_59.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_59.txt","newdoc":" TODO(kak): @CheckReturnValue\n TODO(kak): @CheckReturnValue\n TODO(kak): @CheckReturnValue\n","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_59.txt","olddoc":" TODO(kak): @CheckReturnValue\n TODO(kak): @CheckReturnValue\n TODO(kak): @CheckReturnValue\n","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_59.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[448,449,453,454,455,456,423,424,425,426,427,428,429,430,434,435,436,437,438,439,440,441,442,443,444,445,446,447],"dellines":[448,449,450,451,452,453,454,455,459,460,461,425,426,427,428,429,430,431,432,433,434,435,436,440,441,442,443,444,445,446,447],"addcode":["   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter in case an exception happens when\n","   * // processing the RPC to fetch counters.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *     fetchCounterFuture, FetchException.class, x -> immediateFuture(0), directExecutor());\n","   * }</pre>\n","   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter only in case the exception was a\n","   * // TimeoutException.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *     fetchCounterFuture,\n","   *     FetchException.class,\n","   *     e -> {\n","   *       if (omitDataOnFetchFailure) {\n","   *         return immediateFuture(0);\n","   *       }\n","   *       throw e;\n","   *     },\n","   *     directExecutor());\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n","   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter in case an exception happens when\n","   * // processing the RPC to fetch counters.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *     fetchCounterFuture, FetchException.class, x -> immediateFuture(0), directExecutor());\n","   * }</pre>\n","   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter only in case the exception was a\n","   * // TimeoutException.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *     fetchCounterFuture,\n","   *     FetchException.class,\n","   *     e -> {\n","   *       if (omitDataOnFetchFailure) {\n","   *         return immediateFuture(0);\n","   *       }\n","   *       throw e;\n","   *     },\n","   *     directExecutor());\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n","   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n","   * occur in other threads responsible for completing the returned {@code Future}.)\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter in case an exception happens when\n","   *   // processing the RPC to fetch counters.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new AsyncFunction<FetchException, Integer>() {\n","   *         public ListenableFuture<Integer> apply(FetchException e) {\n","   *           return immediateFuture(0);\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter only in case the exception was a\n","   *   // TimeoutException.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new AsyncFunction<FetchException, Integer>() {\n","   *         public ListenableFuture<Integer> apply(FetchException e)\n","   *             throws FetchException {\n","   *           if (omitDataOnFetchFailure) {\n","   *             return immediateFuture(0);\n","   *           }\n","   *           throw e;\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n","   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter in case an exception happens when\n","   *   // processing the RPC to fetch counters.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new AsyncFunction<FetchException, Integer>() {\n","   *         public ListenableFuture<Integer> apply(FetchException e) {\n","   *           return immediateFuture(0);\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter only in case the exception was a\n","   *   // TimeoutException.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new AsyncFunction<FetchException, Integer>() {\n","   *         public ListenableFuture<Integer> apply(FetchException e)\n","   *             throws FetchException {\n","   *           if (omitDataOnFetchFailure) {\n","   *             return immediateFuture(0);\n","   *           }\n","   *           throw e;\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n","   * {@code Future}.\n"],"methodSig":"public static ListenableFuture<V> catchingAsync(ListenableFuture<? extends V> input, Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_60.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_60.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[329,330,331],"dellines":[],"addcode":["  public final void addCallback(FutureCallback<? super V> callback, Executor executor) {\n","    Futures.addCallback(this, callback, executor);\n","  }\n","  public final void addCallback(FutureCallback<? super V> callback, Executor executor) {\n","    Futures.addCallback(this, callback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final void addCallback(FutureCallback<? super V> callback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_60.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_60.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_60.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_60.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[258,263,264],"dellines":[256,257,246,247,248,249,250,251],"addcode":["   *     fetchCounterFuture, FetchException.class, x -> 0);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n","   *     fetchCounterFuture, FetchException.class, x -> 0);\n","   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n","   * also applicable to heavyweight functions passed to this method.\n"],"delcode":["   *     fetchCounterFuture, FetchException.class,\n","   *     new Function<FetchException, Integer>() {\n","   *       public Integer apply(FetchException e) {\n","   *         return 0;\n","   *       }\n","   *     });\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n","   *     fetchCounterFuture, FetchException.class,\n","   *     new Function<FetchException, Integer>() {\n","   *       public Integer apply(FetchException e) {\n","   *         return 0;\n","   *       }\n","   *     });\n","   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n","   * listeners\" refer here to the work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"},{"func":{"oldfunccode":"","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_61.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newfuncnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_61.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[329,330,331],"dellines":[],"addcode":["  public final void addCallback(FutureCallback<? super V> callback, Executor executor) {\n","    Futures.addCallback(this, callback, executor);\n","  }\n","  public final void addCallback(FutureCallback<? super V> callback, Executor executor) {\n","    Futures.addCallback(this, callback, executor);\n","  }\n"],"delcode":[],"methodSig":"public final void addCallback(FutureCallback<? super V> callback, Executor executor)"},"doc":{"oldfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_61.txt","newfunccode":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocfunccode_107f311e182d4b8298a10093ae4c5c6bc02641ec_61.txt","newdoc":"","newJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_newdocnewJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_61.txt","olddoc":"","oldJdoc":"107f311e182d4b8298a10093ae4c5c6bc02641ec/Codes/Match_olddocJdoc_107f311e182d4b8298a10093ae4c5c6bc02641ec_61.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/107f311e182d4b8298a10093ae4c5c6bc02641ec/Futures","pathinproj":"android/guava/src/com/google/common/util/concurrent/Futures.java","addlines":[304,305,306,307,308,309,310,314,315,303],"dellines":[296,297,298,299,300,301,302,303,304,305,306,307,311,312],"addcode":["   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter in case an exception happens when\n","   * // processing the RPC to fetch counters.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n","   *     fetchCounterFuture, FetchException.class, x -> 0, directExecutor());\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n","   * <pre>{@code\n","   * ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   * // Falling back to a zero counter in case an exception happens when\n","   * // processing the RPC to fetch counters.\n","   * ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n","   *     fetchCounterFuture, FetchException.class, x -> 0, directExecutor());\n","   * }</pre>\n","   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n","   * functions passed to this method.\n"],"delcode":["   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter in case an exception happens when\n","   *   // processing the RPC to fetch counters.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new Function<FetchException, Integer>() {\n","   *         public Integer apply(FetchException e) {\n","   *           return 0;\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n","   * <pre>   {@code\n","   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n","   *\n","   *   // Falling back to a zero counter in case an exception happens when\n","   *   // processing the RPC to fetch counters.\n","   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n","   *       fetchCounterFuture, FetchException.class,\n","   *       new Function<FetchException, Integer>() {\n","   *         public Integer apply(FetchException e) {\n","   *           return 0;\n","   *         }\n","   *       }, directExecutor());}</pre>\n","   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n","   * work done during {@code Function.apply}.\n"],"methodSig":"public static ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)"},"id":3,"flag":1,"commit":"107f311e182d4b8298a10093ae4c5c6bc02641ec"}]