{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2006 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "6": " *\n",
        "7": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "8": " *\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "13": " */\n",
        "14": "\n",
        "15": "package com.google.common.util.concurrent;\n",
        "16": "\n",
        "17": "import com.google.common.annotations.Beta;\n",
        "18": "import com.google.common.annotations.GwtCompatible;\n",
        "19": "import com.google.common.annotations.GwtIncompatible;\n",
        "20": "import com.google.common.base.Function;\n",
        "21": "import com.google.errorprone.annotations.DoNotMock;\n",
        "22": "import java.util.concurrent.ExecutionException;\n",
        "23": "import java.util.concurrent.Executor;\n",
        "24": "import java.util.concurrent.ScheduledExecutorService;\n",
        "25": "import java.util.concurrent.TimeUnit;\n",
        "26": "import java.util.concurrent.TimeoutException;\n",
        "27": "\n",
        "28": "/**\n",
        "29": " * A {@link ListenableFuture} that supports fluent chains of operations. For example:\n",
        "30": " *\n",
        "31": " * <pre>{@code\n",
        "32": " * ListenableFuture<Boolean> adminIsLoggedIn =\n",
        "33": " *     FluentFuture.from(usersDatabase.getAdminUser())\n",
        "34": " *         .transform(User::getId, directExecutor())\n",
        "35": " *         .transform(ActivityService::isLoggedIn, threadPool)\n",
        "36": " *         .catching(RpcException.class, e -> false, directExecutor());\n",
        "37": " * }</pre>\n",
        "38": " *\n",
        "39": " * <h3>Alternatives</h3>\n",
        "40": " *\n",
        "41": " * <h4>Frameworks</h4>\n",
        "42": " *\n",
        "43": " * <p>When chaining together a graph of asynchronous operations, you will often find it easier to\n",
        "44": " * use a framework. Frameworks automate the process, often adding features like monitoring,\n",
        "45": " * debugging, and cancellation. Examples of frameworks include:\n",
        "46": " *\n",
        "47": " * <ul>\n",
        "48": " *   <li><a href=\"http://google.github.io/dagger/producers.html\">Dagger Producers</a>\n",
        "49": " * </ul>\n",
        "50": " *\n",
        "51": " * <h4>{@link java.util.concurrent.CompletableFuture} / {@link java.util.concurrent.CompletionStage}\n",
        "52": " * </h4>\n",
        "53": " *\n",
        "54": " * <p>Users of {@code CompletableFuture} will likely want to continue using {@code\n",
        "55": " * CompletableFuture}. {@code FluentFuture} is targeted at people who use {@code ListenableFuture},\n",
        "56": " * who can't use Java 8, or who want an API more focused than {@code CompletableFuture}. (If you\n",
        "57": " * need to adapt between {@code CompletableFuture} and {@code ListenableFuture}, consider <a\n",
        "58": " * href=\"https://github.com/lukas-krecan/future-converter\">Future Converter</a>.)\n",
        "59": " *\n",
        "60": " * <h3>Extension</h3>\n",
        "61": " *\n",
        "62": " * If you want a class like {@code FluentFuture} but with extra methods, we recommend declaring your\n",
        "63": " * own subclass of {@link ListenableFuture}, complete with a method like {@link #from} to adapt an\n",
        "64": " * existing {@code ListenableFuture}, implemented atop a {@link ForwardingListenableFuture} that\n",
        "65": " * forwards to that future and adds the desired methods.\n",
        "66": " *\n",
        "67": " * @since 22.0\n",
        "68": " */\n",
        "69": "@Beta\n",
        "70": "@DoNotMock(\"Use FluentFuture.from(Futures.immediate*Future) or SettableFuture\")\n",
        "71": "@GwtCompatible(emulated = true)\n",
        "72": "public abstract class FluentFuture<V> extends GwtFluentFutureCatchingSpecialization<V> {\n",
        "73": "  FluentFuture() {}\n",
        "74": "\n",
        "75": "  /**\n",
        "76": "   * Converts the given {@code ListenableFuture} to an equivalent {@code FluentFuture}.\n",
        "77": "   *\n",
        "78": "   * <p>If the given {@code ListenableFuture} is already a {@code FluentFuture}, it is returned\n",
        "79": "   * directly. If not, it is wrapped in a {@code FluentFuture} that delegates all calls to the\n",
        "80": "   * original {@code ListenableFuture}.\n",
        "81": "   */\n",
        "82": "  public static <V> FluentFuture<V> from(ListenableFuture<V> future) {\n",
        "83": "    return future instanceof FluentFuture\n",
        "84": "        ? (FluentFuture<V>) future\n",
        "85": "        : new ForwardingFluentFuture<V>(future);\n",
        "86": "  }\n",
        "87": "\n",
        "88": "  /**\n",
        "89": "   * Returns a {@code Future} whose result is taken from this {@code Future} or, if this {@code\n",
        "90": "   * Future} fails with the given {@code exceptionType}, from the result provided by the {@code\n",
        "91": "   * fallback}. {@link Function#apply} is not invoked until the primary input has failed, so if the\n",
        "92": "   * primary input succeeds, it is never invoked. If, during the invocation of {@code fallback}, an\n",
        "93": "   * exception is thrown, this exception is used as the result of the output {@code Future}.\n",
        "94": "   *\n",
        "95": "   * <p>Usage example:\n",
        "96": "   *\n",
        "97": "   * <pre>{@code\n",
        "98": "   * // Falling back to a zero counter in case an exception happens when processing the RPC to fetch\n",
        "99": "   * // counters.\n",
        "100": "   * ListenableFuture<Integer> faultTolerantFuture =\n",
        "101": "   *     fetchCounters().catching(FetchException.class, x -> 0, directExecutor());\n",
        "102": "   * }</pre>\n",
        "103": "   *\n",
        "104": "   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n",
        "105": "   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight\n",
        "106": "   * listeners are also applicable to heavyweight functions passed to this method.\n",
        "107": "   *\n",
        "108": "   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#exceptionally}. It\n",
        "109": "   * can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle}\n",
        "110": "   * and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link\n",
        "111": "   * #transform}.\n",
        "112": "   *\n",
        "113": "   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception\n",
        "114": "   *     type is matched against the input's exception. \"The input's exception\" means the cause of\n",
        "115": "   *     the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a\n",
        "116": "   *     different kind of exception, that exception itself. To avoid hiding bugs and other\n",
        "117": "   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code\n",
        "118": "   *     Throwable.class} in particular.\n",
        "119": "   * @param fallback the {@link Function} to be called if the input fails with the expected\n",
        "120": "   *     exception type. The function's argument is the input's exception. \"The input's exception\"\n",
        "121": "   *     means the cause of the {@link ExecutionException} thrown by {@code this.get()} or, if\n",
        "122": "   *     {@code get()} throws a different kind of exception, that exception itself.\n",
        "123": "   * @param executor the executor that runs {@code fallback} if the input fails\n",
        "124": "   */\n",
        "125": "  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n",
        "126": "  public final <X extends Throwable> FluentFuture<V> catching(\n",
        "127": "      Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor) {\n",
        "128": "    return (FluentFuture<V>) Futures.catching(this, exceptionType, fallback, executor);\n",
        "129": "  }\n",
        "130": "\n",
        "131": "  /**\n",
        "132": "   * Returns a {@code Future} whose result is taken from this {@code Future} or, if the this {@code\n",
        "133": "   * Future} fails with the given {@code exceptionType}, from the result provided by the {@code\n",
        "134": "   * fallback}. {@link AsyncFunction#apply} is not invoked until the primary input has failed, so if\n",
        "135": "   * the primary input succeeds, it is never invoked. If, during the invocation of {@code fallback},\n",
        "136": "   * an exception is thrown, this exception is used as the result of the output {@code Future}.\n",
        "137": "   *\n",
        "138": "   * <p>Usage examples:\n",
        "139": "   *\n",
        "140": "   * <pre>{@code\n",
        "141": "   * // Falling back to a zero counter in case an exception happens when processing the RPC to fetch\n",
        "142": "   * // counters.\n",
        "143": "   * ListenableFuture<Integer> faultTolerantFuture =\n",
        "144": "   *     fetchCounters().catchingAsync(\n",
        "145": "   *         FetchException.class, x -> immediateFuture(0), directExecutor());\n",
        "146": "   * }</pre>\n",
        "147": "   *\n",
        "148": "   * <p>The fallback can also choose to propagate the original exception when desired:\n",
        "149": "   *\n",
        "150": "   * <pre>{@code\n",
        "151": "   * // Falling back to a zero counter only in case the exception was a\n",
        "152": "   * // TimeoutException.\n",
        "153": "   * ListenableFuture<Integer> faultTolerantFuture =\n",
        "154": "   *     fetchCounters().catchingAsync(\n",
        "155": "   *         fetchCounterFuture,\n",
        "156": "   *         FetchException.class,\n",
        "157": "   *         e -> {\n",
        "158": "   *           if (omitDataOnFetchFailure) {\n",
        "159": "   *             return immediateFuture(0);\n",
        "160": "   *           }\n",
        "161": "   *           throw e;\n",
        "162": "   *         },\n",
        "163": "   *         directExecutor());\n",
        "164": "   * }</pre>\n",
        "165": "   *\n",
        "166": "   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n",
        "167": "   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight\n",
        "168": "   * listeners are also applicable to heavyweight functions passed to this method. (Specifically,\n",
        "169": "   * {@code directExecutor} functions should avoid heavyweight operations inside {@code\n",
        "170": "   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n",
        "171": "   * completing the returned {@code Future}.)\n",
        "172": "   *\n",
        "173": "   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#exceptionally}. It\n",
        "174": "   * can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle}\n",
        "175": "   * and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link\n",
        "176": "   * #transform}.\n",
        "177": "   *\n",
        "178": "   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception\n",
        "179": "   *     type is matched against the input's exception. \"The input's exception\" means the cause of\n",
        "180": "   *     the {@link ExecutionException} thrown by {@code this.get()} or, if {@code get()} throws a\n",
        "181": "   *     different kind of exception, that exception itself. To avoid hiding bugs and other\n",
        "182": "   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code\n",
        "183": "   *     Throwable.class} in particular.\n",
        "184": "   * @param fallback the {@link AsyncFunction} to be called if the input fails with the expected\n",
        "185": "   *     exception type. The function's argument is the input's exception. \"The input's exception\"\n",
        "186": "   *     means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if\n",
        "187": "   *     {@code get()} throws a different kind of exception, that exception itself.\n",
        "188": "   * @param executor the executor that runs {@code fallback} if the input fails\n",
        "189": "   */\n",
        "190": "  @Partially.GwtIncompatible(\"AVAILABLE but requires exceptionType to be Throwable.class\")\n",
        "191": "  public final <X extends Throwable> FluentFuture<V> catchingAsync(\n",
        "192": "      Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor) {\n",
        "193": "    return (FluentFuture<V>) Futures.catchingAsync(this, exceptionType, fallback, executor);\n",
        "194": "  }\n",
        "195": "\n",
        "196": "  /**\n",
        "197": "   * Returns a future that delegates to this future but will finish early (via a {@link\n",
        "198": "   * TimeoutException} wrapped in an {@link ExecutionException}) if the specified timeout expires.\n",
        "199": "   * If the timeout expires, not only will the output future finish, but also the input future\n",
        "200": "   * ({@code this}) will be cancelled and interrupted.\n",
        "201": "   *\n",
        "202": "   * @param timeout when to time out the future\n",
        "203": "   * @param unit the time unit of the time parameter\n",
        "204": "   * @param scheduledExecutor The executor service to enforce the timeout.\n",
        "205": "   */\n",
        "206": "  @GwtIncompatible // ScheduledExecutorService\n",
        "207": "  public final FluentFuture<V> withTimeout(\n",
        "208": "      long timeout, TimeUnit unit, ScheduledExecutorService scheduledExecutor) {\n",
        "209": "    return (FluentFuture<V>) Futures.withTimeout(this, timeout, unit, scheduledExecutor);\n",
        "210": "  }\n",
        "211": "\n",
        "212": "  /**\n",
        "213": "   * Returns a new {@code Future} whose result is asynchronously derived from the result of this\n",
        "214": "   * {@code Future}. If the input {@code Future} fails, the returned {@code Future} fails with the\n",
        "215": "   * same exception (and the function is not invoked).\n",
        "216": "   *\n",
        "217": "   * <p>More precisely, the returned {@code Future} takes its result from a {@code Future} produced\n",
        "218": "   * by applying the given {@code AsyncFunction} to the result of the original {@code Future}.\n",
        "219": "   * Example usage:\n",
        "220": "   *\n",
        "221": "   * <pre>{@code\n",
        "222": "   * FluentFuture<RowKey> rowKeyFuture = FluentFuture.from(indexService.lookUp(query));\n",
        "223": "   * ListenableFuture<QueryResult> queryFuture =\n",
        "224": "   *     rowKeyFuture.transformAsync(dataService::readFuture, executor);\n",
        "225": "   * }</pre>\n",
        "226": "   *\n",
        "227": "   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n",
        "228": "   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight\n",
        "229": "   * listeners are also applicable to heavyweight functions passed to this method. (Specifically,\n",
        "230": "   * {@code directExecutor} functions should avoid heavyweight operations inside {@code\n",
        "231": "   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n",
        "232": "   * completing the returned {@code Future}.)\n",
        "233": "   *\n",
        "234": "   * <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the\n",
        "235": "   * input future and that of the future returned by the chain function. That is, if the returned\n",
        "236": "   * {@code Future} is cancelled, it will attempt to cancel the other two, and if either of the\n",
        "237": "   * other two is cancelled, the returned {@code Future} will receive a callback in which it will\n",
        "238": "   * attempt to cancel itself.\n",
        "239": "   *\n",
        "240": "   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#thenCompose} and\n",
        "241": "   * {@link java.util.concurrent.CompletableFuture#thenComposeAsync}. It can also serve some of the\n",
        "242": "   * use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link\n",
        "243": "   * java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #catching}.\n",
        "244": "   *\n",
        "245": "   * @param function A function to transform the result of this future to the result of the output\n",
        "246": "   *     future\n",
        "247": "   * @param executor Executor to run the function in.\n",
        "248": "   * @return A future that holds result of the function (if the input succeeded) or the original\n",
        "249": "   *     input's failure (if not)\n",
        "250": "   */\n",
        "251": "  public final <T> FluentFuture<T> transformAsync(\n",
        "252": "      AsyncFunction<? super V, T> function, Executor executor) {\n",
        "253": "    return (FluentFuture<T>) Futures.transformAsync(this, function, executor);\n",
        "254": "  }\n",
        "255": "\n",
        "256": "  /**\n",
        "257": "   * Returns a new {@code Future} whose result is derived from the result of this {@code Future}. If\n",
        "258": "   * this input {@code Future} fails, the returned {@code Future} fails with the same exception (and\n",
        "259": "   * the function is not invoked). Example usage:\n",
        "260": "   *\n",
        "261": "   * <pre>{@code\n",
        "262": "   * ListenableFuture<List<Row>> rowsFuture =\n",
        "263": "   *     queryFuture.transform(QueryResult::getRows, executor);\n",
        "264": "   * }</pre>\n",
        "265": "   *\n",
        "266": "   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n",
        "267": "   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight\n",
        "268": "   * listeners are also applicable to heavyweight functions passed to this method.\n",
        "269": "   *\n",
        "270": "   * <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the\n",
        "271": "   * input future. That is, if the returned {@code Future} is cancelled, it will attempt to cancel\n",
        "272": "   * the input, and if the input is cancelled, the returned {@code Future} will receive a callback\n",
        "273": "   * in which it will attempt to cancel itself.\n",
        "274": "   *\n",
        "275": "   * <p>An example use of this method is to convert a serializable object returned from an RPC into\n",
        "276": "   * a POJO.\n",
        "277": "   *\n",
        "278": "   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#thenApply} and\n",
        "279": "   * {@link java.util.concurrent.CompletableFuture#thenApplyAsync}. It can also serve some of the\n",
        "280": "   * use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link\n",
        "281": "   * java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #catching}.\n",
        "282": "   *\n",
        "283": "   * @param function A Function to transform the results of this future to the results of the\n",
        "284": "   *     returned future.\n",
        "285": "   * @param executor Executor to run the function in.\n",
        "286": "   * @return A future that holds result of the transformation.\n",
        "287": "   */\n",
        "288": "  public final <T> FluentFuture<T> transform(Function<? super V, T> function, Executor executor) {\n",
        "289": "    return (FluentFuture<T>) Futures.transform(this, function, executor);\n",
        "290": "  }\n",
        "291": "\n",
        "292": "  /**\n",
        "293": "   * Registers separate success and failure callbacks to be run when this {@code Future}'s\n",
        "294": "   * computation is {@linkplain java.util.concurrent.Future#isDone() complete} or, if the\n",
        "295": "   * computation is already complete, immediately.\n",
        "296": "   *\n",
        "297": "   * <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of\n",
        "298": "   * callbacks, but any callback added through this method is guaranteed to be called once the\n",
        "299": "   * computation is complete.\n",
        "300": "   *\n",
        "301": "   * <p>Example:\n",
        "302": "   *\n",
        "303": "   * <pre>{@code\n",
        "304": "   * future.addCallback(\n",
        "305": "   *     new FutureCallback<QueryResult>() {\n",
        "306": "   *       public void onSuccess(QueryResult result) {\n",
        "307": "   *         storeInCache(result);\n",
        "308": "   *       }\n",
        "309": "   *       public void onFailure(Throwable t) {\n",
        "310": "   *         reportError(t);\n",
        "311": "   *       }\n",
        "312": "   *     }, executor);\n",
        "313": "   * }</pre>\n",
        "314": "   *\n",
        "315": "   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See\n",
        "316": "   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight\n",
        "317": "   * listeners are also applicable to heavyweight callbacks passed to this method.\n",
        "318": "   *\n",
        "319": "   * <p>For a more general interface to attach a completion listener, see {@link #addListener}.\n",
        "320": "   *\n",
        "321": "   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#whenComplete} and\n",
        "322": "   * {@link java.util.concurrent.CompletableFuture#whenCompleteAsync}. It also serves the use case\n",
        "323": "   * of {@link java.util.concurrent.CompletableFuture#thenAccept} and {@link\n",
        "324": "   * java.util.concurrent.CompletableFuture#thenAcceptAsync}.\n",
        "325": "   *\n",
        "326": "   * @param callback The callback to invoke when this {@code Future} is completed.\n",
        "327": "   * @param executor The executor to run {@code callback} when the future completes.\n",
        "328": "   */\n",
        "329": "  public final void addCallback(FutureCallback<? super V> callback, Executor executor) {\n",
        "330": "    Futures.addCallback(this, callback, executor);\n",
        "331": "  }\n",
        "332": "}\n"
    },
    "removed": {}
}