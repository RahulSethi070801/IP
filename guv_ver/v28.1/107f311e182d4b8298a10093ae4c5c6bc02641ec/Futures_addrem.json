{
    "addition": {
        "54": " * article on <a href=\"https://github.com/google/guava/wiki/ListenableFutureExplained\">{@code\n",
        "55": " * ListenableFuture}</a>.\n",
        "56": " *\n",
        "57": " * <p>The main purpose of {@code ListenableFuture} is to help you chain together a graph of\n",
        "58": " * asynchronous operations. You can chain them together manually with calls to methods like {@link\n",
        "59": " * Futures#transform(ListenableFuture, Function, Executor) Futures.transform}, but you will often\n",
        "60": " * find it easier to use a framework. Frameworks automate the process, often adding features like\n",
        "61": " * monitoring, debugging, and cancellation. Examples of frameworks include:\n",
        "62": " *\n",
        "63": " * <ul>\n",
        "64": " *   <li><a href=\"http://google.github.io/dagger/producers.html\">Dagger Producers</a>\n",
        "65": " * </ul>\n",
        "66": " *\n",
        "67": " * <p>If you do chain your operations manually, you may want to use {@link FluentFuture}.\n",
        "258": "   *     fetchCounterFuture, FetchException.class, x -> 0);\n",
        "263": "   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n",
        "264": "   * also applicable to heavyweight functions passed to this method.\n",
        "303": "   * <pre>{@code\n",
        "304": "   * ListenableFuture<Integer> fetchCounterFuture = ...;\n",
        "305": "   *\n",
        "306": "   * // Falling back to a zero counter in case an exception happens when\n",
        "307": "   * // processing the RPC to fetch counters.\n",
        "308": "   * ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n",
        "309": "   *     fetchCounterFuture, FetchException.class, x -> 0, directExecutor());\n",
        "310": "   * }</pre>\n",
        "314": "   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n",
        "315": "   * functions passed to this method.\n",
        "356": "   *     fetchCounterFuture, FetchException.class, x -> immediateFuture(0));\n",
        "367": "   *     fetchCounterFuture,\n",
        "368": "   *     FetchException.class,\n",
        "369": "   *     e -> {\n",
        "370": "   *       if (omitDataOnFetchFailure) {\n",
        "371": "   *         return immediateFuture(0);\n",
        "373": "   *       throw e;\n",
        "379": "   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n",
        "380": "   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n",
        "381": "   * directExecutor} functions should avoid heavyweight operations inside {@code\n",
        "382": "   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n",
        "383": "   * completing the returned {@code Future}.)\n",
        "423": "   * <pre>{@code\n",
        "424": "   * ListenableFuture<Integer> fetchCounterFuture = ...;\n",
        "425": "   *\n",
        "426": "   * // Falling back to a zero counter in case an exception happens when\n",
        "427": "   * // processing the RPC to fetch counters.\n",
        "428": "   * ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n",
        "429": "   *     fetchCounterFuture, FetchException.class, x -> immediateFuture(0), directExecutor());\n",
        "430": "   * }</pre>\n",
        "434": "   * <pre>{@code\n",
        "435": "   * ListenableFuture<Integer> fetchCounterFuture = ...;\n",
        "436": "   *\n",
        "437": "   * // Falling back to a zero counter only in case the exception was a\n",
        "438": "   * // TimeoutException.\n",
        "439": "   * ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n",
        "440": "   *     fetchCounterFuture,\n",
        "441": "   *     FetchException.class,\n",
        "442": "   *     e -> {\n",
        "443": "   *       if (omitDataOnFetchFailure) {\n",
        "444": "   *         return immediateFuture(0);\n",
        "445": "   *       }\n",
        "446": "   *       throw e;\n",
        "447": "   *     },\n",
        "448": "   *     directExecutor());\n",
        "449": "   * }</pre>\n",
        "453": "   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n",
        "454": "   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n",
        "455": "   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n",
        "456": "   * occur in other threads responsible for completing the returned {@code Future}.)\n",
        "515": "   *     transformAsync(rowKeyFuture, dataService::readFuture);\n",
        "520": "   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n",
        "521": "   * also applicable to heavyweight functions passed to this method. (Specifically, {@code\n",
        "522": "   * directExecutor} functions should avoid heavyweight operations inside {@code\n",
        "523": "   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for\n",
        "524": "   * completing the returned {@code Future}.)\n",
        "559": "   * <pre>{@code\n",
        "560": "   * ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n",
        "561": "   * ListenableFuture<QueryResult> queryFuture =\n",
        "562": "   *     transformAsync(rowKeyFuture, dataService::readFuture, executor);\n",
        "563": "   * }</pre>\n",
        "567": "   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n",
        "568": "   * functions passed to this method. (Specifically, {@code directExecutor} functions should avoid\n",
        "569": "   * heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should\n",
        "570": "   * occur in other threads responsible for completing the returned {@code Future}.)\n",
        "601": "   *     transform(queryFuture, QueryResult::getRows);\n",
        "606": "   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n",
        "607": "   * also applicable to heavyweight functions passed to this method.\n",
        "639": "   * <pre>{@code\n",
        "640": "   * ListenableFuture<QueryResult> queryFuture = ...;\n",
        "641": "   * ListenableFuture<List<Row>> rowsFuture =\n",
        "642": "   *     transform(queryFuture, QueryResult::getRows, executor);\n",
        "643": "   * }</pre>\n",
        "647": "   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n",
        "648": "   * functions passed to this method.\n",
        "1126": "   * ListenableFuture.addListener} documentation. All its warnings about heavyweight listeners are\n",
        "1127": "   * also applicable to heavyweight callbacks passed to this method.\n",
        "1152": "   * <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of\n",
        "1156": "   * <p>Example:\n",
        "1157": "   *\n",
        "1158": "   * <pre>{@code\n",
        "1169": "   *     }, e);\n",
        "1170": "   * }</pre>\n",
        "1174": "   * documentation. All its warnings about heavyweight listeners are also applicable to heavyweight\n",
        "1175": "   * callbacks passed to this method.\n"
    },
    "removed": {
        "54": " * article on <a href=\"https://github.com/google/guava/wiki/ListenableFutureExplained\">\n",
        "55": " * {@code ListenableFuture}</a>.\n",
        "246": "   *     fetchCounterFuture, FetchException.class,\n",
        "247": "   *     new Function<FetchException, Integer>() {\n",
        "248": "   *       public Integer apply(FetchException e) {\n",
        "249": "   *         return 0;\n",
        "250": "   *       }\n",
        "251": "   *     });\n",
        "256": "   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n",
        "257": "   * listeners\" refer here to the work done during {@code Function.apply}.\n",
        "296": "   * <pre>   {@code\n",
        "297": "   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n",
        "298": "   *\n",
        "299": "   *   // Falling back to a zero counter in case an exception happens when\n",
        "300": "   *   // processing the RPC to fetch counters.\n",
        "301": "   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catching(\n",
        "302": "   *       fetchCounterFuture, FetchException.class,\n",
        "303": "   *       new Function<FetchException, Integer>() {\n",
        "304": "   *         public Integer apply(FetchException e) {\n",
        "305": "   *           return 0;\n",
        "306": "   *         }\n",
        "307": "   *       }, directExecutor());}</pre>\n",
        "311": "   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n",
        "312": "   * work done during {@code Function.apply}.\n",
        "353": "   *     fetchCounterFuture, FetchException.class,\n",
        "354": "   *     new AsyncFunction<FetchException, Integer>() {\n",
        "355": "   *       public ListenableFuture<Integer> apply(FetchException e) {\n",
        "356": "   *         return immediateFuture(0);\n",
        "357": "   *       }\n",
        "358": "   *     });\n",
        "369": "   *     fetchCounterFuture, FetchException.class,\n",
        "370": "   *     new AsyncFunction<FetchException, Integer>() {\n",
        "371": "   *       public ListenableFuture<Integer> apply(FetchException e)\n",
        "372": "   *           throws FetchException {\n",
        "373": "   *         if (omitDataOnFetchFailure) {\n",
        "374": "   *           return immediateFuture(0);\n",
        "375": "   *         }\n",
        "376": "   *         throw e;\n",
        "383": "   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n",
        "384": "   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n",
        "385": "   * to complete the returned {@code Future}.\n",
        "425": "   * <pre>   {@code\n",
        "426": "   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n",
        "427": "   *\n",
        "428": "   *   // Falling back to a zero counter in case an exception happens when\n",
        "429": "   *   // processing the RPC to fetch counters.\n",
        "430": "   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n",
        "431": "   *       fetchCounterFuture, FetchException.class,\n",
        "432": "   *       new AsyncFunction<FetchException, Integer>() {\n",
        "433": "   *         public ListenableFuture<Integer> apply(FetchException e) {\n",
        "434": "   *           return immediateFuture(0);\n",
        "435": "   *         }\n",
        "436": "   *       }, directExecutor());}</pre>\n",
        "440": "   * <pre>   {@code\n",
        "441": "   *   ListenableFuture<Integer> fetchCounterFuture = ...;\n",
        "442": "   *\n",
        "443": "   *   // Falling back to a zero counter only in case the exception was a\n",
        "444": "   *   // TimeoutException.\n",
        "445": "   *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(\n",
        "446": "   *       fetchCounterFuture, FetchException.class,\n",
        "447": "   *       new AsyncFunction<FetchException, Integer>() {\n",
        "448": "   *         public ListenableFuture<Integer> apply(FetchException e)\n",
        "449": "   *             throws FetchException {\n",
        "450": "   *           if (omitDataOnFetchFailure) {\n",
        "451": "   *             return immediateFuture(0);\n",
        "452": "   *           }\n",
        "453": "   *           throw e;\n",
        "454": "   *         }\n",
        "455": "   *       }, directExecutor());}</pre>\n",
        "459": "   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n",
        "460": "   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n",
        "461": "   * {@code Future}.\n",
        "497": "   *\n",
        "520": "   * AsyncFunction<RowKey, QueryResult> queryFunction =\n",
        "521": "   *     new AsyncFunction<RowKey, QueryResult>() {\n",
        "522": "   *       public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n",
        "523": "   *         return dataService.read(rowKey);\n",
        "524": "   *       }\n",
        "525": "   *     };\n",
        "527": "   *     transformAsync(rowKeyFuture, queryFunction);\n",
        "532": "   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n",
        "533": "   * listeners\" refer here to the work done during {@code AsyncFunction.apply}, not to any work done\n",
        "534": "   * to complete the returned {@code Future}.\n",
        "569": "   * <pre>   {@code\n",
        "570": "   *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);\n",
        "571": "   *   AsyncFunction<RowKey, QueryResult> queryFunction =\n",
        "572": "   *       new AsyncFunction<RowKey, QueryResult>() {\n",
        "573": "   *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {\n",
        "574": "   *           return dataService.read(rowKey);\n",
        "575": "   *         }\n",
        "576": "   *       };\n",
        "577": "   *   ListenableFuture<QueryResult> queryFuture =\n",
        "578": "   *       transformAsync(rowKeyFuture, queryFunction, executor);}</pre>\n",
        "582": "   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n",
        "583": "   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned\n",
        "584": "   * {@code Future}.\n",
        "614": "   * Function<QueryResult, List<Row>> rowsFunction =\n",
        "615": "   *     new Function<QueryResult, List<Row>>() {\n",
        "616": "   *       public List<Row> apply(QueryResult queryResult) {\n",
        "617": "   *         return queryResult.getRows();\n",
        "618": "   *       }\n",
        "619": "   *     };\n",
        "621": "   *     transform(queryFuture, rowsFunction);\n",
        "626": "   * ListenableFuture.addListener} documentation. The documentation's warnings about \"lightweight\n",
        "627": "   * listeners\" refer here to the work done during {@code Function.apply}.\n",
        "659": "   * <pre>   {@code\n",
        "660": "   *   ListenableFuture<QueryResult> queryFuture = ...;\n",
        "661": "   *   Function<QueryResult, List<Row>> rowsFunction =\n",
        "662": "   *       new Function<QueryResult, List<Row>>() {\n",
        "663": "   *         public List<Row> apply(QueryResult queryResult) {\n",
        "664": "   *           return queryResult.getRows();\n",
        "665": "   *         }\n",
        "666": "   *       };\n",
        "667": "   *   ListenableFuture<List<Row>> rowsFuture =\n",
        "668": "   *       transform(queryFuture, rowsFunction, executor);}</pre>\n",
        "672": "   * documentation. The documentation's warnings about \"lightweight listeners\" refer here to the\n",
        "673": "   * work done during {@code Function.apply}.\n",
        "1151": "   * ListenableFuture.addListener} documentation.\n",
        "1176": "   * <p>The callback is run in {@code executor}. There is no guaranteed ordering of execution of\n",
        "1180": "   * Example: <pre> {@code\n",
        "1191": "   *     }, e);}</pre>\n",
        "1195": "   * documentation.\n"
    }
}