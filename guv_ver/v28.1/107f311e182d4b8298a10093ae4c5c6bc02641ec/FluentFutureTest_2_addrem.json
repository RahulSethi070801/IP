{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.util.concurrent;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Verify.verify;\n",
        "20": "import static com.google.common.truth.Truth.assertThat;\n",
        "21": "import static com.google.common.util.concurrent.Futures.immediateFailedFuture;\n",
        "22": "import static com.google.common.util.concurrent.Futures.immediateFuture;\n",
        "23": "import static com.google.common.util.concurrent.MoreExecutors.directExecutor;\n",
        "24": "import static java.util.concurrent.Executors.newScheduledThreadPool;\n",
        "25": "import static java.util.concurrent.TimeUnit.SECONDS;\n",
        "26": "\n",
        "27": "import com.google.common.annotations.GwtCompatible;\n",
        "28": "import com.google.common.annotations.GwtIncompatible;\n",
        "29": "import com.google.common.base.Function;\n",
        "30": "import com.google.common.util.concurrent.ForwardingListenableFuture.SimpleForwardingListenableFuture;\n",
        "31": "import java.util.concurrent.ExecutionException;\n",
        "32": "import java.util.concurrent.ScheduledExecutorService;\n",
        "33": "import java.util.concurrent.TimeoutException;\n",
        "34": "import junit.framework.TestCase;\n",
        "35": "\n",
        "36": "/**\n",
        "37": " * Tests for {@link FluentFuture}. The tests cover only the basics for the API. The actual logic is\n",
        "38": " * tested in {@link FuturesTest}.\n",
        "39": " */\n",
        "40": "@GwtCompatible(emulated = true)\n",
        "41": "public class FluentFutureTest extends TestCase {\n",
        "42": "  public void testFromFluentFuture() {\n",
        "43": "    FluentFuture<String> f = SettableFuture.create();\n",
        "44": "    assertThat(FluentFuture.from(f)).isSameAs(f);\n",
        "45": "  }\n",
        "46": "\n",
        "47": "  public void testFromNonFluentFuture() throws Exception {\n",
        "48": "    ListenableFuture<String> f =\n",
        "49": "        new SimpleForwardingListenableFuture<String>(immediateFuture(\"a\")) {};\n",
        "50": "    verify(!(f instanceof FluentFuture));\n",
        "51": "    assertThat(FluentFuture.from(f).get()).isEqualTo(\"a\");\n",
        "52": "    // TODO(cpovirk): Test forwarding more extensively.\n",
        "53": "  }\n",
        "54": "\n",
        "55": "  public void testAddCallback() {\n",
        "56": "    FluentFuture<String> f = FluentFuture.from(immediateFuture(\"a\"));\n",
        "57": "    final boolean[] called = new boolean[1];\n",
        "58": "    f.addCallback(\n",
        "59": "        new FutureCallback<String>() {\n",
        "60": "          @Override\n",
        "61": "          public void onSuccess(String result) {\n",
        "62": "            called[0] = true;\n",
        "63": "          }\n",
        "64": "\n",
        "65": "          @Override\n",
        "66": "          public void onFailure(Throwable t) {}\n",
        "67": "        },\n",
        "68": "        directExecutor());\n",
        "69": "    assertThat(called[0]).isTrue();\n",
        "70": "  }\n",
        "71": "\n",
        "72": "  public void testCatching() throws Exception {\n",
        "73": "    FluentFuture<?> f =\n",
        "74": "        FluentFuture.from(immediateFailedFuture(new RuntimeException()))\n",
        "75": "            .catching(\n",
        "76": "                Throwable.class,\n",
        "77": "                new Function<Throwable, Class<?>>() {\n",
        "78": "                  @Override\n",
        "79": "                  public Class<?> apply(Throwable input) {\n",
        "80": "                    return input.getClass();\n",
        "81": "                  }\n",
        "82": "                },\n",
        "83": "                directExecutor());\n",
        "84": "    assertThat(f.get()).isEqualTo(RuntimeException.class);\n",
        "85": "  }\n",
        "86": "\n",
        "87": "  public void testCatchingAsync() throws Exception {\n",
        "88": "    FluentFuture<?> f =\n",
        "89": "        FluentFuture.from(immediateFailedFuture(new RuntimeException()))\n",
        "90": "            .catchingAsync(\n",
        "91": "                Throwable.class,\n",
        "92": "                new AsyncFunction<Throwable, Class<?>>() {\n",
        "93": "                  @Override\n",
        "94": "                  public ListenableFuture<Class<?>> apply(Throwable input) {\n",
        "95": "                    return Futures.<Class<?>>immediateFuture(input.getClass());\n",
        "96": "                  }\n",
        "97": "                },\n",
        "98": "                directExecutor());\n",
        "99": "    assertThat(f.get()).isEqualTo(RuntimeException.class);\n",
        "100": "  }\n",
        "101": "\n",
        "102": "  public void testTransform() throws Exception {\n",
        "103": "    FluentFuture<Integer> f =\n",
        "104": "        FluentFuture.from(immediateFuture(1))\n",
        "105": "            .transform(\n",
        "106": "                new Function<Integer, Integer>() {\n",
        "107": "                  @Override\n",
        "108": "                  public Integer apply(Integer input) {\n",
        "109": "                    return input + 1;\n",
        "110": "                  }\n",
        "111": "                },\n",
        "112": "                directExecutor());\n",
        "113": "    assertThat(f.get()).isEqualTo(2);\n",
        "114": "  }\n",
        "115": "\n",
        "116": "  public void testTransformAsync() throws Exception {\n",
        "117": "    FluentFuture<Integer> f =\n",
        "118": "        FluentFuture.from(immediateFuture(1))\n",
        "119": "            .transformAsync(\n",
        "120": "                new AsyncFunction<Integer, Integer>() {\n",
        "121": "                  @Override\n",
        "122": "                  public ListenableFuture<Integer> apply(Integer input) {\n",
        "123": "                    return immediateFuture(input + 1);\n",
        "124": "                  }\n",
        "125": "                },\n",
        "126": "                directExecutor());\n",
        "127": "    assertThat(f.get()).isEqualTo(2);\n",
        "128": "  }\n",
        "129": "\n",
        "130": "  @GwtIncompatible // withTimeout\n",
        "131": "  public void testWithTimeout() throws Exception {\n",
        "132": "    ScheduledExecutorService executor = newScheduledThreadPool(1);\n",
        "133": "    try {\n",
        "134": "      FluentFuture<?> f = SettableFuture.create().withTimeout(0, SECONDS, executor);\n",
        "135": "      try {\n",
        "136": "        f.get();\n",
        "137": "        fail();\n",
        "138": "      } catch (ExecutionException e) {\n",
        "139": "        assertThat(e.getCause()).isInstanceOf(TimeoutException.class);\n",
        "140": "      }\n",
        "141": "    } finally {\n",
        "142": "      executor.shutdown();\n",
        "143": "    }\n",
        "144": "  }\n",
        "145": "}\n"
    },
    "removed": {}
}