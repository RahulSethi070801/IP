{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2009 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "6": " *\n",
        "7": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "8": " *\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "13": " */\n",
        "14": "\n",
        "15": "package com.google.common.util.concurrent;\n",
        "16": "\n",
        "17": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import java.util.concurrent.ExecutionException;\n",
        "21": "import java.util.concurrent.Executor;\n",
        "22": "import java.util.concurrent.TimeUnit;\n",
        "23": "import java.util.concurrent.TimeoutException;\n",
        "24": "\n",
        "25": "/**\n",
        "26": " * {@link FluentFuture} that forwards all calls to a delegate.\n",
        "27": " *\n",
        "28": " * <h3>Extension</h3>\n",
        "29": " *\n",
        "30": " * If you want a class like {@code FluentFuture} but with extra methods, we recommend declaring your\n",
        "31": " * own subclass of {@link ListenableFuture}, complete with a method like {@link #from} to adapt an\n",
        "32": " * existing {@code ListenableFuture}, implemented atop a {@link ForwardingListenableFuture} that\n",
        "33": " * forwards to that future and adds the desired methods.\n",
        "34": " */\n",
        "35": "@GwtCompatible\n",
        "36": "final class ForwardingFluentFuture<V> extends FluentFuture<V> {\n",
        "37": "  private final ListenableFuture<V> delegate;\n",
        "38": "\n",
        "39": "  ForwardingFluentFuture(ListenableFuture<V> delegate) {\n",
        "40": "    this.delegate = checkNotNull(delegate);\n",
        "41": "  }\n",
        "42": "\n",
        "43": "  @Override\n",
        "44": "  public void addListener(Runnable listener, Executor executor) {\n",
        "45": "    delegate.addListener(listener, executor);\n",
        "46": "  }\n",
        "47": "\n",
        "48": "  @Override\n",
        "49": "  public boolean cancel(boolean mayInterruptIfRunning) {\n",
        "50": "    return delegate.cancel(mayInterruptIfRunning);\n",
        "51": "  }\n",
        "52": "\n",
        "53": "  @Override\n",
        "54": "  public boolean isCancelled() {\n",
        "55": "    return delegate.isCancelled();\n",
        "56": "  }\n",
        "57": "\n",
        "58": "  @Override\n",
        "59": "  public boolean isDone() {\n",
        "60": "    return delegate.isDone();\n",
        "61": "  }\n",
        "62": "\n",
        "63": "  @Override\n",
        "64": "  public V get() throws InterruptedException, ExecutionException {\n",
        "65": "    return delegate.get();\n",
        "66": "  }\n",
        "67": "\n",
        "68": "  @Override\n",
        "69": "  public V get(long timeout, TimeUnit unit)\n",
        "70": "      throws InterruptedException, ExecutionException, TimeoutException {\n",
        "71": "    return delegate.get(timeout, unit);\n",
        "72": "  }\n",
        "73": "}\n"
    },
    "removed": {}
}