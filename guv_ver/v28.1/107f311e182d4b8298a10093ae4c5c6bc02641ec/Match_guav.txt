public static FluentFuture<V> from(ListenableFuture<V> future)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public static FluentFuture<V> from(ListenableFuture<V> future)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public static FluentFuture<V> from(ListenableFuture<V> future)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public static FluentFuture<V> from(ListenableFuture<V> future)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public V get() throws InterruptedException, ExecutionException
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public V get() throws InterruptedException, ExecutionException
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public V get() throws InterruptedException, ExecutionException
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public V get() throws InterruptedException, ExecutionException
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public final FluentFuture<V> withTimeout(long timeout, TimeUnit unit, ScheduledExecutorService scheduledExecutor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public final FluentFuture<V> withTimeout(long timeout, TimeUnit unit, ScheduledExecutorService scheduledExecutor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public final FluentFuture<V> withTimeout(long timeout, TimeUnit unit, ScheduledExecutorService scheduledExecutor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public final FluentFuture<V> withTimeout(long timeout, TimeUnit unit, ScheduledExecutorService scheduledExecutor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public boolean isDone()
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public boolean isDone()
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public boolean isDone()
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public boolean isDone()
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public final FluentFuture<T> transformAsync(AsyncFunction<? super V, T> function, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public final FluentFuture<T> transformAsync(AsyncFunction<? super V, T> function, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public final FluentFuture<T> transformAsync(AsyncFunction<? super V, T> function, Executor executor)
public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)

public final FluentFuture<T> transformAsync(AsyncFunction<? super V, T> function, Executor executor)
public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)

public final FluentFuture<T> transformAsync(AsyncFunction<? super V, T> function, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public final FluentFuture<T> transformAsync(AsyncFunction<? super V, T> function, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public void addListener(Runnable listener, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public void addListener(Runnable listener, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public void addListener(Runnable listener, Executor executor)
public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)

public void addListener(Runnable listener, Executor executor)
public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)

public void addListener(Runnable listener, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public void addListener(Runnable listener, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public boolean cancel(boolean mayInterruptIfRunning)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public boolean cancel(boolean mayInterruptIfRunning)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public boolean cancel(boolean mayInterruptIfRunning)
public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)

public boolean cancel(boolean mayInterruptIfRunning)
public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)

public boolean cancel(boolean mayInterruptIfRunning)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public boolean cancel(boolean mayInterruptIfRunning)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public boolean isCancelled()
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public boolean isCancelled()
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public boolean isCancelled()
public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)

public boolean isCancelled()
public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)

public boolean isCancelled()
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public boolean isCancelled()
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public final FluentFuture<V> catching(Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public final FluentFuture<V> catching(Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public final FluentFuture<V> catching(Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)
public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)

public final FluentFuture<V> catching(Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)
public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)

public final FluentFuture<V> catching(Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public final FluentFuture<V> catching(Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public final FluentFuture<V> catching(Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)
public static ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback)

public final FluentFuture<V> catching(Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)
public static ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)

public final FluentFuture<T> transform(Function<? super V, T> function, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public final FluentFuture<T> transform(Function<? super V, T> function, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public final FluentFuture<T> transform(Function<? super V, T> function, Executor executor)
public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)

public final FluentFuture<T> transform(Function<? super V, T> function, Executor executor)
public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)

public final FluentFuture<T> transform(Function<? super V, T> function, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public final FluentFuture<T> transform(Function<? super V, T> function, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public final FluentFuture<T> transform(Function<? super V, T> function, Executor executor)
public static ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback)

public final FluentFuture<T> transform(Function<? super V, T> function, Executor executor)
public static ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)

public final FluentFuture<T> transform(Function<? super V, T> function, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public final FluentFuture<T> transform(Function<? super V, T> function, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public final FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public final FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public final FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)
public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)

public final FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)
public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)

public final FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public final FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public final FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)
public static ListenableFuture<V> catchingAsync(ListenableFuture<? extends V> input, Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback)

public final FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)
public static ListenableFuture<V> catchingAsync(ListenableFuture<? extends V> input, Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)

public final FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)
public static ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback)

public final FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)
public static ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)

public final FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public final FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public final void addCallback(FutureCallback<? super V> callback, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public final void addCallback(FutureCallback<? super V> callback, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public final void addCallback(FutureCallback<? super V> callback, Executor executor)
public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)

public final void addCallback(FutureCallback<? super V> callback, Executor executor)
public static ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)

public final void addCallback(FutureCallback<? super V> callback, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public final void addCallback(FutureCallback<? super V> callback, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

public final void addCallback(FutureCallback<? super V> callback, Executor executor)
public static void addCallback(ListenableFuture<V> future, FutureCallback<? super V> callback)

public final void addCallback(FutureCallback<? super V> callback, Executor executor)
public static void addCallback(final ListenableFuture<V> future, final FutureCallback<? super V> callback, Executor executor)

public final void addCallback(FutureCallback<? super V> callback, Executor executor)
public static ListenableFuture<V> catchingAsync(ListenableFuture<? extends V> input, Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback)

public final void addCallback(FutureCallback<? super V> callback, Executor executor)
public static ListenableFuture<V> catchingAsync(ListenableFuture<? extends V> input, Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)

public final void addCallback(FutureCallback<? super V> callback, Executor executor)
public static ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback)

public final void addCallback(FutureCallback<? super V> callback, Executor executor)
public static ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)

public final void addCallback(FutureCallback<? super V> callback, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function)

public final void addCallback(FutureCallback<? super V> callback, Executor executor)
public static ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)

