{"id": "50752554b24b5d7f8ee4535435d2330a09de7c5c", "code": [{"0": "android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java", "added": {}, "removed": {"1": ["  public void testPrependContinuation() {\n", "    final List<Integer> callOrder = Lists.newArrayList();\n", "\n", "    class FakeOp implements Runnable {\n", "      final int op;\n", "\n", "      FakeOp(int op) {\n", "        this.op = op;\n", "      }\n", "\n", "      @Override\n", "      public void run() {\n", "        callOrder.add(op);\n", "      }\n", "    }\n", "\n", "    e.execute(new FakeOp(1));\n", "    e.execute(new FakeOp(2));\n", "    e.executeFirst(new FakeOp(0));\n", "    fakePool.runAll();\n", "\n", "    assertEquals(ImmutableList.of(0, 1, 2), callOrder);\n", "  }\n", "\n"]}, "added_lines": {}, "removed_lines": {"1": [182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205]}}, {"1": "android/guava/src/com/google/common/util/concurrent/SequentialExecutor.java", "added": {"1": ["import java.util.Queue;\n"], "2": ["  private final Queue<Runnable> queue = new ArrayDeque<>();\n"], "3": ["      queue.add(task);\n"], "4": ["   * execution of tasks will stop until a call to this method or to {@link #execute(Runnable)} is\n", "   * made.\n"], "5": ["            task = queue.poll();\n"]}, "removed": {"1": ["import java.util.Deque;\n"], "2": ["  private final Deque<Runnable> queue = new ArrayDeque<>();\n"], "3": ["      queue.addLast(task);\n", "      if (isWorkerRunning || suspensions > 0) {\n", "        return;\n", "      }\n", "      isWorkerRunning = true;\n", "    }\n", "    startQueueWorker();\n", "  }\n", "\n", "  /**\n", "   * Prepends a task to the front of the queue and makes sure a worker thread is running, unless the\n", "   * queue has been suspended.\n", "   */\n", "  public void executeFirst(Runnable task) {\n", "    synchronized (queue) {\n", "      queue.addFirst(task);\n"], "4": ["   * execution of tasks will stop until a call to this method or to {@link #execute(Runnable)} or\n", "   * {@link #executeFirst(Runnable)} is made.\n"], "5": ["            task = queue.pollFirst();\n"]}, "added_lines": {"1": [22], "2": [56], "3": [81], "4": [110, 111], "5": [179]}, "removed_lines": {"1": [22], "2": [56], "3": [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], "4": [125, 126], "5": [194]}}, {"2": "guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java", "added": {}, "removed": {"1": ["  public void testPrependContinuation() {\n", "    final List<Integer> callOrder = Lists.newArrayList();\n", "\n", "    class FakeOp implements Runnable {\n", "      final int op;\n", "\n", "      FakeOp(int op) {\n", "        this.op = op;\n", "      }\n", "\n", "      @Override\n", "      public void run() {\n", "        callOrder.add(op);\n", "      }\n", "    }\n", "\n", "    e.execute(new FakeOp(1));\n", "    e.execute(new FakeOp(2));\n", "    e.executeFirst(new FakeOp(0));\n", "    fakePool.runAll();\n", "\n", "    assertEquals(ImmutableList.of(0, 1, 2), callOrder);\n", "  }\n", "\n"]}, "added_lines": {}, "removed_lines": {"1": [182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205]}}, {"3": "guava/src/com/google/common/util/concurrent/SequentialExecutor.java", "added": {"1": ["import java.util.Queue;\n"], "2": ["  private final Queue<Runnable> queue = new ArrayDeque<>();\n"], "3": ["      queue.add(task);\n"], "4": ["   * execution of tasks will stop until a call to this method or to {@link #execute(Runnable)} is\n", "   * made.\n"], "5": ["            task = queue.poll();\n"]}, "removed": {"1": ["import java.util.Deque;\n"], "2": ["  private final Deque<Runnable> queue = new ArrayDeque<>();\n"], "3": ["      queue.addLast(task);\n", "      if (isWorkerRunning || suspensions > 0) {\n", "        return;\n", "      }\n", "      isWorkerRunning = true;\n", "    }\n", "    startQueueWorker();\n", "  }\n", "\n", "  /**\n", "   * Prepends a task to the front of the queue and makes sure a worker thread is running, unless the\n", "   * queue has been suspended.\n", "   */\n", "  public void executeFirst(Runnable task) {\n", "    synchronized (queue) {\n", "      queue.addFirst(task);\n"], "4": ["   * execution of tasks will stop until a call to this method or to {@link #execute(Runnable)} or\n", "   * {@link #executeFirst(Runnable)} is made.\n"], "5": ["            task = queue.pollFirst();\n"]}, "added_lines": {"1": [22], "2": [56], "3": [81], "4": [110, 111], "5": [179]}, "removed_lines": {"1": [22], "2": [56], "3": [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], "4": [125, 126], "5": [194]}}]}
