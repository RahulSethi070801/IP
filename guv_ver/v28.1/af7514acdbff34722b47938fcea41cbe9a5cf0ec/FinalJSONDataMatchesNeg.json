[{"func":{"oldfunccode":"","newfunccode":"af7514acdbff34722b47938fcea41cbe9a5cf0ec/Codes_neg/Match_newfunccode_af7514acdbff34722b47938fcea41cbe9a5cf0ec_1.txt","newdoc":" the exception thrown when iterating a DirectoryStream if an I/O exception occurs\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af7514acdbff34722b47938fcea41cbe9a5cf0ec/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[336,338,341,332,333,334,335],"dellines":[],"addcode":["  private static Iterable<Path> fileTreeChildren(Path dir) {\n","    if (Files.isDirectory(dir, NOFOLLOW_LINKS)) {\n","      try {\n","        return listFiles(dir);\n","      } catch (IOException e) {\n","        throw new DirectoryIteratorException(e);\n","    return ImmutableList.of();\n"],"delcode":[],"methodSig":"private static Iterable<Path> fileTreeChildren(Path dir)"},"doc":{"oldfunccode":"af7514acdbff34722b47938fcea41cbe9a5cf0ec/Codes_neg/Match_olddocfunccode_af7514acdbff34722b47938fcea41cbe9a5cf0ec_1.txt","newfunccode":"af7514acdbff34722b47938fcea41cbe9a5cf0ec/Codes_neg/Match_newdocfunccode_af7514acdbff34722b47938fcea41cbe9a5cf0ec_1.txt","newdoc":"","newJdoc":"af7514acdbff34722b47938fcea41cbe9a5cf0ec/Codes_neg/Match_newdocnewJdoc_af7514acdbff34722b47938fcea41cbe9a5cf0ec_1.txt","olddoc":"","oldJdoc":"af7514acdbff34722b47938fcea41cbe9a5cf0ec/Codes_neg/Match_olddocJdoc_af7514acdbff34722b47938fcea41cbe9a5cf0ec_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af7514acdbff34722b47938fcea41cbe9a5cf0ec/Files","pathinproj":"android/guava/src/com/google/common/io/Files.java","addlines":[855,856,857],"dellines":[],"addcode":["   * <p>If available, consider using {@link MoreFiles#fileTraverser()} instead. It behaves the same\n","   * except that it doesn't follow symbolic links and returns {@code Path} instances.\n","   *\n","   * <p>If available, consider using {@link MoreFiles#fileTraverser()} instead. It behaves the same\n","   * except that it doesn't follow symbolic links and returns {@code Path} instances.\n","   *\n"],"delcode":[],"methodSig":"public static Traverser<File> fileTraverser()"},"id":1,"flag":1,"commit":"af7514acdbff34722b47938fcea41cbe9a5cf0ec"},{"func":{"oldfunccode":"af7514acdbff34722b47938fcea41cbe9a5cf0ec/Codes_neg/Match_oldfunccode_af7514acdbff34722b47938fcea41cbe9a5cf0ec_2.txt","newfunccode":"af7514acdbff34722b47938fcea41cbe9a5cf0ec/Codes_neg/Match_newfunccode_af7514acdbff34722b47938fcea41cbe9a5cf0ec_2.txt","newdoc":"","newJdoc":"","olddoc":" the exception thrown when iterating a DirectoryStream if an I/O exception occurs\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af7514acdbff34722b47938fcea41cbe9a5cf0ec/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[296,297],"dellines":[294,295,296,297,299,302],"addcode":["      return fileTreeChildren(dir);\n","    }\n"],"delcode":["      if (Files.isDirectory(dir, NOFOLLOW_LINKS)) {\n","        try {\n","          return listFiles(dir);\n","        } catch (IOException e) {\n","          throw new DirectoryIteratorException(e);\n","      return ImmutableList.of();\n"],"methodSig":"public Iterable<Path> children(Path dir)"},"doc":{"oldfunccode":"af7514acdbff34722b47938fcea41cbe9a5cf0ec/Codes_neg/Match_olddocfunccode_af7514acdbff34722b47938fcea41cbe9a5cf0ec_2.txt","newfunccode":"af7514acdbff34722b47938fcea41cbe9a5cf0ec/Codes_neg/Match_newdocfunccode_af7514acdbff34722b47938fcea41cbe9a5cf0ec_2.txt","newdoc":"","newJdoc":"af7514acdbff34722b47938fcea41cbe9a5cf0ec/Codes_neg/Match_newdocnewJdoc_af7514acdbff34722b47938fcea41cbe9a5cf0ec_2.txt","olddoc":"","oldJdoc":"af7514acdbff34722b47938fcea41cbe9a5cf0ec/Codes_neg/Match_olddocJdoc_af7514acdbff34722b47938fcea41cbe9a5cf0ec_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af7514acdbff34722b47938fcea41cbe9a5cf0ec/Files","pathinproj":"android/guava/src/com/google/common/io/Files.java","addlines":[855,856,857],"dellines":[],"addcode":["   * <p>If available, consider using {@link MoreFiles#fileTraverser()} instead. It behaves the same\n","   * except that it doesn't follow symbolic links and returns {@code Path} instances.\n","   *\n","   * <p>If available, consider using {@link MoreFiles#fileTraverser()} instead. It behaves the same\n","   * except that it doesn't follow symbolic links and returns {@code Path} instances.\n","   *\n"],"delcode":[],"methodSig":"public static Traverser<File> fileTraverser()"},"id":1,"flag":1,"commit":"af7514acdbff34722b47938fcea41cbe9a5cf0ec"}]