{"id": "dc53de741f94c3e6a92bc9680c5cdfb49b6c94a8", "code": [{"0": "android/guava-tests/test/com/google/common/primitives/DoublesTest.java", "added": {"1": ["import java.util.regex.Pattern;\n"], "2": ["    assertThat(input)\n", "        .matches(\n", "            Pattern.compile(\n", "                Doubles.FLOATING_POINT_PATTERN.pattern(), Doubles.FLOATING_POINT_PATTERN.flags()));\n"], "3": ["      assertThat(badInput)\n", "          .doesNotMatch(\n", "              Pattern.compile(\n", "                  Doubles.FLOATING_POINT_PATTERN.pattern(),\n", "                  Doubles.FLOATING_POINT_PATTERN.flags()));\n"]}, "removed": {"2": ["    assertThat(input).matches(Doubles.FLOATING_POINT_PATTERN);\n"], "3": ["      assertThat(badInput).doesNotMatch(Doubles.FLOATING_POINT_PATTERN);\n"]}, "added_lines": {"1": [34], "2": [543, 544, 545, 546], "3": [628, 629, 630, 631, 632]}, "removed_lines": {"2": [542], "3": [624]}}, {"1": "android/guava/src/com/google/common/base/CommonMatcher.java", "added": {"1": ["  public abstract boolean matches();\n", "  public abstract boolean find();\n", "  public abstract boolean find(int index);\n", "  public abstract String replaceAll(String replacement);\n", "  public abstract int end();\n", "  public abstract int start();\n"]}, "removed": {"1": ["  abstract boolean matches();\n", "  abstract boolean find();\n", "  abstract boolean find(int index);\n", "  abstract String replaceAll(String replacement);\n", "  abstract int end();\n", "  abstract int start();\n"]}, "added_lines": {"1": [26, 28, 30, 32, 34, 36]}, "removed_lines": {"1": [26, 28, 30, 32, 34, 36]}}, {"2": "android/guava/src/com/google/common/base/CommonPattern.java", "added": {"1": ["  public abstract CommonMatcher matcher(CharSequence t);\n", "  public abstract String pattern();\n", "  public abstract int flags();\n", "  // Re-declare this as abstract to force subclasses to override.\n", "  static CommonPattern compile(String pattern) {\n", "    return Platform.compilePattern(pattern);\n", "  }\n"]}, "removed": {"1": ["  abstract CommonMatcher matcher(CharSequence t);\n", "  abstract String pattern();\n", "  abstract int flags();\n", "  // Re-declare these as abstract to force subclasses to override.\n", "  @Override\n", "  public abstract int hashCode();\n", "\n", "  @Override\n", "  public abstract boolean equals(Object o);\n"]}, "added_lines": {"1": [26, 28, 30, 32, 36, 37, 38]}, "removed_lines": {"1": [26, 28, 30, 32, 36, 37, 38, 39, 40]}}, {"3": "android/guava/src/com/google/common/base/JdkPattern.java", "added": {"1": ["  public CommonMatcher matcher(CharSequence t) {\n", "  public String pattern() {\n", "  public int flags() {\n"], "3": ["    public boolean matches() {\n", "    public boolean find() {\n", "    public boolean find(int index) {\n", "    public String replaceAll(String replacement) {\n", "    public int end() {\n", "    public int start() {\n"]}, "removed": {"1": ["  CommonMatcher matcher(CharSequence t) {\n", "  String pattern() {\n", "  int flags() {\n"], "2": ["  @Override\n", "  public int hashCode() {\n", "    return pattern.hashCode();\n", "  }\n", "\n", "  @Override\n", "  public boolean equals(Object o) {\n", "    if (!(o instanceof JdkPattern)) {\n", "      return false;\n", "    }\n", "    return pattern.equals(((JdkPattern) o).pattern);\n", "  }\n", "\n"], "3": ["    boolean matches() {\n", "    boolean find() {\n", "    boolean find(int index) {\n", "    String replaceAll(String replacement) {\n", "    int end() {\n", "    int start() {\n"]}, "added_lines": {"1": [32, 37, 42], "3": [59, 64, 69, 74, 79, 84]}, "removed_lines": {"1": [32, 37, 42], "2": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "3": [72, 77, 82, 87, 92, 97]}}, {"4": "android/guava/src/com/google/common/primitives/Doubles.java", "added": {"2": ["  static final\n", "  java.util.regex.Pattern\n", "      FLOATING_POINT_PATTERN = fpPattern();\n", "  private static\n", "  java.util.regex.Pattern\n", "      fpPattern() {\n", "    return\n", "    java.util.regex.Pattern\n", "        .compile(fpPattern);\n"]}, "removed": {"1": ["import java.util.regex.Pattern;\n"], "2": ["  static final Pattern FLOATING_POINT_PATTERN = fpPattern();\n", "  private static Pattern fpPattern() {\n", "    return Pattern.compile(fpPattern);\n"]}, "added_lines": {"2": [648, 649, 650, 653, 654, 655, 661, 662, 663]}, "removed_lines": {"1": [36], "2": [649, 652, 658]}}, {"5": "guava-tests/test/com/google/common/primitives/DoublesTest.java", "added": {"1": ["import java.util.regex.Pattern;\n"], "2": ["    assertThat(input)\n", "        .matches(\n", "            Pattern.compile(\n", "                Doubles.FLOATING_POINT_PATTERN.pattern(), Doubles.FLOATING_POINT_PATTERN.flags()));\n"], "3": ["      assertThat(badInput)\n", "          .doesNotMatch(\n", "              Pattern.compile(\n", "                  Doubles.FLOATING_POINT_PATTERN.pattern(),\n", "                  Doubles.FLOATING_POINT_PATTERN.flags()));\n"]}, "removed": {"2": ["    assertThat(input).matches(Doubles.FLOATING_POINT_PATTERN);\n"], "3": ["      assertThat(badInput).doesNotMatch(Doubles.FLOATING_POINT_PATTERN);\n"]}, "added_lines": {"1": [34], "2": [543, 544, 545, 546], "3": [628, 629, 630, 631, 632]}, "removed_lines": {"2": [542], "3": [624]}}, {"6": "guava/src/com/google/common/base/CommonMatcher.java", "added": {"1": ["  public abstract boolean matches();\n", "  public abstract boolean find();\n", "  public abstract boolean find(int index);\n", "  public abstract String replaceAll(String replacement);\n", "  public abstract int end();\n", "  public abstract int start();\n"]}, "removed": {"1": ["  abstract boolean matches();\n", "  abstract boolean find();\n", "  abstract boolean find(int index);\n", "  abstract String replaceAll(String replacement);\n", "  abstract int end();\n", "  abstract int start();\n"]}, "added_lines": {"1": [26, 28, 30, 32, 34, 36]}, "removed_lines": {"1": [26, 28, 30, 32, 34, 36]}}, {"7": "guava/src/com/google/common/base/CommonPattern.java", "added": {"1": ["  public abstract CommonMatcher matcher(CharSequence t);\n", "  public abstract String pattern();\n", "  public abstract int flags();\n", "  // Re-declare this as abstract to force subclasses to override.\n", "  static CommonPattern compile(String pattern) {\n", "    return Platform.compilePattern(pattern);\n", "  }\n"]}, "removed": {"1": ["  abstract CommonMatcher matcher(CharSequence t);\n", "  abstract String pattern();\n", "  abstract int flags();\n", "  // Re-declare these as abstract to force subclasses to override.\n", "  @Override\n", "  public abstract int hashCode();\n", "\n", "  @Override\n", "  public abstract boolean equals(Object o);\n"]}, "added_lines": {"1": [26, 28, 30, 32, 36, 37, 38]}, "removed_lines": {"1": [26, 28, 30, 32, 36, 37, 38, 39, 40]}}, {"8": "guava/src/com/google/common/base/JdkPattern.java", "added": {"1": ["  public CommonMatcher matcher(CharSequence t) {\n", "  public String pattern() {\n", "  public int flags() {\n"], "3": ["    public boolean matches() {\n", "    public boolean find() {\n", "    public boolean find(int index) {\n", "    public String replaceAll(String replacement) {\n", "    public int end() {\n", "    public int start() {\n"]}, "removed": {"1": ["  CommonMatcher matcher(CharSequence t) {\n", "  String pattern() {\n", "  int flags() {\n"], "2": ["  @Override\n", "  public int hashCode() {\n", "    return pattern.hashCode();\n", "  }\n", "\n", "  @Override\n", "  public boolean equals(Object o) {\n", "    if (!(o instanceof JdkPattern)) {\n", "      return false;\n", "    }\n", "    return pattern.equals(((JdkPattern) o).pattern);\n", "  }\n", "\n"], "3": ["    boolean matches() {\n", "    boolean find() {\n", "    boolean find(int index) {\n", "    String replaceAll(String replacement) {\n", "    int end() {\n", "    int start() {\n"]}, "added_lines": {"1": [32, 37, 42], "3": [59, 64, 69, 74, 79, 84]}, "removed_lines": {"1": [32, 37, 42], "2": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "3": [72, 77, 82, 87, 92, 97]}}, {"9": "guava/src/com/google/common/primitives/Doubles.java", "added": {"2": ["  static final\n", "  java.util.regex.Pattern\n", "      FLOATING_POINT_PATTERN = fpPattern();\n", "  private static\n", "  java.util.regex.Pattern\n", "      fpPattern() {\n", "    return\n", "    java.util.regex.Pattern\n", "        .compile(fpPattern);\n"]}, "removed": {"1": ["import java.util.regex.Pattern;\n"], "2": ["  static final Pattern FLOATING_POINT_PATTERN = fpPattern();\n", "  private static Pattern fpPattern() {\n", "    return Pattern.compile(fpPattern);\n"]}, "added_lines": {"2": [655, 656, 657, 660, 661, 662, 668, 669, 670]}, "removed_lines": {"1": [38], "2": [656, 659, 665]}}]}
