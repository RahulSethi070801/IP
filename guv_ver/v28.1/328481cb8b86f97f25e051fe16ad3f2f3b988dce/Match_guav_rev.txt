static boolean containsEntryImpl(Collection<Entry<K, V>> c, Object o)
public void putAll(Map<? extends K, ? extends V> m)

static boolean containsEntryImpl(Collection<Entry<K, V>> c, Object o)
public boolean putAll(Multimap<? extends K, ? extends V> multimap)

static boolean containsEntryImpl(Collection<Entry<K, V>> c, Object o)
public void putAll(RangeMap<K, V> rangeMap)

static boolean containsEntryImpl(Collection<Entry<K, V>> c, Object o)
public Builder<K, V> put(Entry<? extends K, ? extends V> entry)

static boolean containsEntryImpl(Collection<Entry<K, V>> c, Object o)
public Builder<K, V> put(Map.Entry<? extends K, ? extends V> entry)

static boolean containsEntryImpl(Collection<Entry<K, V>> c, Object o)
public Builder<K, V> put(Entry<? extends K, ? extends V> entry)

static boolean containsEntryImpl(Collection<Entry<K, V>> c, Object o)
public Builder<K, V> put(Map.Entry<? extends K, ? extends V> entry)

static boolean removeEntryImpl(Collection<Entry<K, V>> c, Object o)
public void putAll(Map<? extends K, ? extends V> m)

static boolean removeEntryImpl(Collection<Entry<K, V>> c, Object o)
public boolean putAll(Multimap<? extends K, ? extends V> multimap)

static boolean removeEntryImpl(Collection<Entry<K, V>> c, Object o)
public void putAll(RangeMap<K, V> rangeMap)

static boolean removeEntryImpl(Collection<Entry<K, V>> c, Object o)
public Builder<K, V> put(Entry<? extends K, ? extends V> entry)

static boolean removeEntryImpl(Collection<Entry<K, V>> c, Object o)
public Builder<K, V> put(Map.Entry<? extends K, ? extends V> entry)

static boolean removeEntryImpl(Collection<Entry<K, V>> c, Object o)
public Builder<K, V> put(Entry<? extends K, ? extends V> entry)

static boolean removeEntryImpl(Collection<Entry<K, V>> c, Object o)
public Builder<K, V> put(Map.Entry<? extends K, ? extends V> entry)

Map<K, Collection<V>> asMap()
public void putAll(Map<? extends K, ? extends V> m)

Map<K, Collection<V>> asMap()
public boolean putAll(Multimap<? extends K, ? extends V> multimap)

Map<K, Collection<V>> asMap()
public void putAll(RangeMap<K, V> rangeMap)

Map<K, Collection<V>> asMap()
public Builder<K, V> put(Entry<? extends K, ? extends V> entry)

Map<K, Collection<V>> asMap()
public Builder<K, V> put(Map.Entry<? extends K, ? extends V> entry)

Map<K, Collection<V>> asMap()
public Builder<K, V> put(Entry<? extends K, ? extends V> entry)

Map<K, Collection<V>> asMap()
public Builder<K, V> put(Map.Entry<? extends K, ? extends V> entry)

static Entry<K, V> entryOf(K key, V value)
public void putAll(Map<? extends K, ? extends V> m)

static Entry<K, V> entryOf(K key, V value)
public boolean putAll(Multimap<? extends K, ? extends V> multimap)

static Entry<K, V> entryOf(K key, V value)
public void putAll(RangeMap<K, V> rangeMap)

static Entry<K, V> entryOf(K key, V value)
public Builder<K, V> put(Entry<? extends K, ? extends V> entry)

static Entry<K, V> entryOf(K key, V value)
public Builder<K, V> put(Map.Entry<? extends K, ? extends V> entry)

static Entry<K, V> entryOf(K key, V value)
public Builder<K, V> put(Entry<? extends K, ? extends V> entry)

static Entry<K, V> entryOf(K key, V value)
public Builder<K, V> put(Map.Entry<? extends K, ? extends V> entry)

