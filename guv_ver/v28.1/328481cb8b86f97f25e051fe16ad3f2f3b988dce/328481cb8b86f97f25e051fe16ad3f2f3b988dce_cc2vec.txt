{"id": "328481cb8b86f97f25e051fe16ad3f2f3b988dce", "code": [{"0": "android/guava-testlib/src/com/google/common/collect/testing/AbstractMapTester.java", "added": {"1": ["    extends AbstractContainerTester<Map<K, V>, Entry<K, V>> {\n", "  protected Collection<Entry<K, V>> actualContents() {\n"], "2": ["  protected Entry<K, V>[] createArrayWithNullKey() {\n", "    Entry<K, V>[] array = createSamplesArray();\n", "    final Entry<K, V> oldEntry = array[nullKeyLocation];\n"], "3": ["  protected Entry<K, V>[] createArrayWithNullValue() {\n", "    Entry<K, V>[] array = createSamplesArray();\n", "    final Entry<K, V> oldEntry = array[nullValueLocation];\n"], "4": ["  protected MinimalCollection<Entry<K, V>> createDisjointCollection() {\n"], "5": ["  protected Collection<Entry<K, V>> getSampleEntries(int howMany) {\n", "  protected Collection<Entry<K, V>> getSampleEntries() {\n"]}, "removed": {"1": ["    extends AbstractContainerTester<Map<K, V>, Map.Entry<K, V>> {\n", "  protected Collection<Map.Entry<K, V>> actualContents() {\n"], "2": ["  protected Map.Entry<K, V>[] createArrayWithNullKey() {\n", "    Map.Entry<K, V>[] array = createSamplesArray();\n", "    final Map.Entry<K, V> oldEntry = array[nullKeyLocation];\n"], "3": ["  protected Map.Entry<K, V>[] createArrayWithNullValue() {\n", "    Map.Entry<K, V>[] array = createSamplesArray();\n", "    final Map.Entry<K, V> oldEntry = array[nullValueLocation];\n"], "4": ["  protected MinimalCollection<Map.Entry<K, V>> createDisjointCollection() {\n"], "5": ["  protected Collection<Map.Entry<K, V>> getSampleEntries(int howMany) {\n", "  protected Collection<Map.Entry<K, V>> getSampleEntries() {\n"]}, "added_lines": {"1": [40, 46], "2": [71, 72, 74], "3": [99, 100, 102], "4": [147], "5": [155, 159]}, "removed_lines": {"1": [40, 46], "2": [71, 72, 74], "3": [99, 100, 102], "4": [147], "5": [155, 159]}}, {"1": "android/guava-testlib/src/com/google/common/collect/testing/DerivedCollectionGenerators.java", "added": {"1": ["      implements TestSetGenerator<Entry<K, V>>, DerivedGenerator {\n", "    private final OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> mapGenerator;\n", "        OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> mapGenerator) {\n", "    public SampleElements<Entry<K, V>> samples() {\n", "    public Set<Entry<K, V>> create(Object... elements) {\n", "    public Entry<K, V>[] createArray(int length) {\n", "    public Iterable<Entry<K, V>> order(List<Entry<K, V>> insertionOrder) {\n", "    public OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> getInnerGenerator() {\n"], "2": ["      OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> mapGenerator) {\n"], "3": ["    private final OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> mapGenerator;\n", "        OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> mapGenerator) {\n", "      final SampleElements<Entry<K, V>> mapSamples = this.mapGenerator.samples();\n"], "4": ["      Collection<Entry<K, V>> originalEntries = mapGenerator.getSampleElements(elements.length);\n", "      Collection<Entry<K, V>> entries = new ArrayList<>(elements.length);\n", "      for (Entry<K, V> entry : originalEntries) {\n"], "5": ["    public OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> getInnerGenerator() {\n"], "6": ["    private final OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> mapGenerator;\n", "        OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> mapGenerator) {\n", "      final SampleElements<Entry<K, V>> mapSamples = this.mapGenerator.samples();\n"], "7": ["      Collection<Entry<K, V>> originalEntries = mapGenerator.getSampleElements(elements.length);\n", "      Collection<Entry<K, V>> entries = new ArrayList<>(elements.length);\n", "      for (Entry<K, V> entry : originalEntries) {\n"], "8": ["    public OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> getInnerGenerator() {\n"]}, "removed": {"1": ["      implements TestSetGenerator<Map.Entry<K, V>>, DerivedGenerator {\n", "    private final OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> mapGenerator;\n", "        OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> mapGenerator) {\n", "    public SampleElements<Map.Entry<K, V>> samples() {\n", "    public Set<Map.Entry<K, V>> create(Object... elements) {\n", "    public Map.Entry<K, V>[] createArray(int length) {\n", "    public Iterable<Map.Entry<K, V>> order(List<Map.Entry<K, V>> insertionOrder) {\n", "    public OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> getInnerGenerator() {\n"], "2": ["      OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> mapGenerator) {\n"], "3": ["    private final OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> mapGenerator;\n", "        OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> mapGenerator) {\n", "      final SampleElements<Map.Entry<K, V>> mapSamples = this.mapGenerator.samples();\n"], "4": ["      Collection<Map.Entry<K, V>> originalEntries = mapGenerator.getSampleElements(elements.length);\n", "      Collection<Map.Entry<K, V>> entries = new ArrayList<>(elements.length);\n", "      for (Map.Entry<K, V> entry : originalEntries) {\n"], "5": ["    public OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> getInnerGenerator() {\n"], "6": ["    private final OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> mapGenerator;\n", "        OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> mapGenerator) {\n", "      final SampleElements<Map.Entry<K, V>> mapSamples = this.mapGenerator.samples();\n"], "7": ["      Collection<Map.Entry<K, V>> originalEntries = mapGenerator.getSampleElements(elements.length);\n", "      Collection<Map.Entry<K, V>> entries = new ArrayList<>(elements.length);\n", "      for (Map.Entry<K, V> entry : originalEntries) {\n"], "8": ["    public OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> getInnerGenerator() {\n"]}, "added_lines": {"1": [45, 46, 49, 54, 59, 64, 69, 74], "2": [83], "3": [94, 98, 100], "4": [121, 124, 126], "5": [158], "6": [201, 205, 207], "7": [228, 231, 233], "8": [275]}, "removed_lines": {"1": [45, 46, 49, 54, 59, 64, 69, 74], "2": [83], "3": [94, 98, 100], "4": [121, 124, 126], "5": [158], "6": [201, 205, 207], "7": [228, 231, 233], "8": [275]}}, {"2": "android/guava-testlib/src/com/google/common/collect/testing/Helpers.java", "added": {"1": ["  public static <K, V> Entry<K, V> nefariousMapEntry(final K key, final V value) {\n", "    return new Entry<K, V>() {\n"], "2": ["        if (o instanceof Entry) {\n", "          Entry<K, V> e = (Entry<K, V>) o;\n"]}, "removed": {"1": ["  public static <K, V> Map.Entry<K, V> nefariousMapEntry(final K key, final V value) {\n", "    return new Map.Entry<K, V>() {\n"], "2": ["        if (o instanceof Map.Entry) {\n", "          Map.Entry<K, V> e = (Map.Entry<K, V>) o;\n"]}, "added_lines": {"1": [370, 371], "2": [390, 391]}, "removed_lines": {"1": [370, 371], "2": [390, 391]}}, {"3": "android/guava-testlib/src/com/google/common/collect/testing/MapTestSuiteBuilder.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["        MapTestSuiteBuilder<K, V>, TestMapGenerator<K, V>, Map<K, V>, Entry<K, V>> {\n"], "3": ["              ?, ? extends OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>>>\n"], "4": ["  protected SetTestSuiteBuilder<Entry<K, V>> createDerivedEntrySetSuite(\n", "      TestSetGenerator<Entry<K, V>> entrySetGenerator) {\n"], "5": ["    private final OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> mapGenerator;\n", "        OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> mapGenerator) {\n", "    public SampleElements<Entry<K, V>> samples() {\n", "    public Entry<K, V>[] createArray(int length) {\n", "    public Iterable<Entry<K, V>> order(List<Entry<K, V>> insertionOrder) {\n"]}, "removed": {"2": ["        MapTestSuiteBuilder<K, V>, TestMapGenerator<K, V>, Map<K, V>, Map.Entry<K, V>> {\n"], "3": ["              ?, ? extends OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>>>\n"], "4": ["  protected SetTestSuiteBuilder<Map.Entry<K, V>> createDerivedEntrySetSuite(\n", "      TestSetGenerator<Map.Entry<K, V>> entrySetGenerator) {\n"], "5": ["    private final OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> mapGenerator;\n", "        OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> mapGenerator) {\n", "    public SampleElements<Map.Entry<K, V>> samples() {\n", "    public Map.Entry<K, V>[] createArray(int length) {\n", "    public Iterable<Map.Entry<K, V>> order(List<Map.Entry<K, V>> insertionOrder) {\n"]}, "added_lines": {"1": [48], "2": [61], "3": [90], "4": [134, 135], "5": [223, 226, 231, 236, 241]}, "removed_lines": {"2": [60], "3": [89], "4": [133, 134], "5": [222, 225, 230, 235, 240]}}, {"4": "android/guava-testlib/src/com/google/common/collect/testing/SampleElements.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["  public static <K, V> SampleElements<Entry<K, V>> mapEntries(\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["  public static <K, V> SampleElements<Map.Entry<K, V>> mapEntries(\n"]}, "added_lines": {"1": [23], "2": [91]}, "removed_lines": {"1": [23], "2": [91]}}, {"5": "android/guava-testlib/src/com/google/common/collect/testing/TestMapEntrySetGenerator.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["  public SampleElements<Entry<K, V>> samples() {\n", "  public Set<Entry<K, V>> create(Object... elements) {\n", "    Entry<K, V>[] entries = createArray(elements.length);\n", "  public abstract Set<Entry<K, V>> createFromEntries(Entry<K, V>[] entries);\n", "  public Entry<K, V>[] createArray(int length) {\n", "    return new Entry[length];\n", "  public List<Entry<K, V>> order(List<Entry<K, V>> insertionOrder) {\n"]}, "removed": {"2": ["  public SampleElements<Map.Entry<K, V>> samples() {\n", "  public Set<Map.Entry<K, V>> create(Object... elements) {\n", "    Map.Entry<K, V>[] entries = createArray(elements.length);\n", "  public abstract Set<Map.Entry<K, V>> createFromEntries(Map.Entry<K, V>[] entries);\n", "  public Map.Entry<K, V>[] createArray(int length) {\n", "    return new Map.Entry[length];\n", "  public List<Map.Entry<K, V>> order(List<Map.Entry<K, V>> insertionOrder) {\n"]}, "added_lines": {"1": [22], "2": [41, 46, 47, 52, 56, 57, 62]}, "removed_lines": {"2": [40, 45, 46, 51, 55, 56, 61]}}, {"6": "android/guava-testlib/src/com/google/common/collect/testing/TestSortedMapGenerator.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["  Entry<K, V> belowSamplesLesser();\n", "  Entry<K, V> belowSamplesGreater();\n", "  Entry<K, V> aboveSamplesLesser();\n", "  Entry<K, V> aboveSamplesGreater();\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["  Map.Entry<K, V> belowSamplesLesser();\n", "  Map.Entry<K, V> belowSamplesGreater();\n", "  Map.Entry<K, V> aboveSamplesLesser();\n", "  Map.Entry<K, V> aboveSamplesGreater();\n"]}, "added_lines": {"1": [20], "2": [37, 43, 49, 55]}, "removed_lines": {"1": [20], "2": [37, 43, 49, 55]}}, {"7": "android/guava-testlib/src/com/google/common/collect/testing/TestStringMapGenerator.java", "added": {"1": ["  public SampleElements<Entry<String, String>> samples() {\n"]}, "removed": {"1": ["  public SampleElements<Map.Entry<String, String>> samples() {\n"]}, "added_lines": {"1": [36]}, "removed_lines": {"1": [36]}}, {"8": "android/guava-testlib/src/com/google/common/collect/testing/google/AbstractMultimapTester.java", "added": {"2": ["    extends AbstractContainerTester<M, Entry<K, V>> {\n"], "3": ["  protected Entry<K, V>[] createArrayWithNullKey() {\n", "    Entry<K, V>[] array = createSamplesArray();\n", "    final Entry<K, V> oldEntry = array[nullKeyLocation];\n"], "4": ["  protected Entry<K, V>[] createArrayWithNullValue() {\n", "    Entry<K, V>[] array = createSamplesArray();\n", "    final Entry<K, V> oldEntry = array[nullValueLocation];\n"], "5": ["  protected Entry<K, V>[] createArrayWithNullKeyAndValue() {\n", "    Entry<K, V>[] array = createSamplesArray();\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    extends AbstractContainerTester<M, Map.Entry<K, V>> {\n"], "3": ["  protected Map.Entry<K, V>[] createArrayWithNullKey() {\n", "    Map.Entry<K, V>[] array = createSamplesArray();\n", "    final Map.Entry<K, V> oldEntry = array[nullKeyLocation];\n"], "4": ["  protected Map.Entry<K, V>[] createArrayWithNullValue() {\n", "    Map.Entry<K, V>[] array = createSamplesArray();\n", "    final Map.Entry<K, V> oldEntry = array[nullValueLocation];\n"], "5": ["  protected Map.Entry<K, V>[] createArrayWithNullKeyAndValue() {\n", "    Map.Entry<K, V>[] array = createSamplesArray();\n"]}, "added_lines": {"2": [38], "3": [50, 51, 53], "4": [62, 63, 65], "5": [74, 75]}, "removed_lines": {"1": [29], "2": [39], "3": [51, 52, 54], "4": [63, 64, 66], "5": [75, 76]}}, {"9": "android/guava-testlib/src/com/google/common/collect/testing/google/BiMapTestSuiteBuilder.java", "added": {"2": ["        BiMapTestSuiteBuilder<K, V>, TestBiMapGenerator<K, V>, BiMap<K, V>, Entry<K, V>> {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["        BiMapTestSuiteBuilder<K, V>, TestBiMapGenerator<K, V>, BiMap<K, V>, Map.Entry<K, V>> {\n"]}, "added_lines": {"2": [51]}, "removed_lines": {"1": [38], "2": [52]}}, {"10": "android/guava-testlib/src/com/google/common/collect/testing/google/DerivedGoogleCollectionGenerators.java", "added": {"1": ["    public SampleElements<Entry<K, V>> samples() {\n"], "2": ["    public Entry<K, V>[] createArray(int length) {\n", "    public Iterable<Entry<K, V>> order(List<Entry<K, V>> insertionOrder) {\n"], "3": ["    public SampleElements<Entry<V, K>> samples() {\n"], "4": ["    private Entry<V, K> reverse(Entry<K, V> entry) {\n"], "5": ["    public Entry<V, K>[] createArray(int length) {\n"], "6": ["    private final OneSizeTestContainerGenerator<BiMap<K, V>, Entry<K, V>> mapGenerator;\n", "      final SampleElements<Entry<K, V>> mapSamples = this.mapGenerator.samples();\n"], "7": ["      Collection<Entry<K, V>> originalEntries = mapGenerator.getSampleElements(elements.length);\n", "      Collection<Entry<K, V>> entries = new ArrayList<>(elements.length);\n", "      for (Entry<K, V> entry : originalEntries) {\n"]}, "removed": {"1": ["    public SampleElements<Map.Entry<K, V>> samples() {\n"], "2": ["    public Map.Entry<K, V>[] createArray(int length) {\n", "    public Iterable<Map.Entry<K, V>> order(List<Map.Entry<K, V>> insertionOrder) {\n"], "3": ["    public SampleElements<Map.Entry<V, K>> samples() {\n"], "4": ["    private Map.Entry<V, K> reverse(Map.Entry<K, V> entry) {\n"], "5": ["    public Map.Entry<V, K>[] createArray(int length) {\n"], "6": ["    private final OneSizeTestContainerGenerator<BiMap<K, V>, Map.Entry<K, V>> mapGenerator;\n", "      final SampleElements<Map.Entry<K, V>> mapSamples = this.mapGenerator.samples();\n"], "7": ["      Collection<Map.Entry<K, V>> originalEntries = mapGenerator.getSampleElements(elements.length);\n", "      Collection<Map.Entry<K, V>> entries = new ArrayList<>(elements.length);\n", "      for (Map.Entry<K, V> entry : originalEntries) {\n"]}, "added_lines": {"1": [53], "2": [63, 68], "3": [100], "4": [110], "5": [126], "6": [154, 160], "7": [181, 184, 186]}, "removed_lines": {"1": [53], "2": [63, 68], "3": [100], "4": [110], "5": [126], "6": [154, 160], "7": [181, 184, 186]}}, {"11": "android/guava-testlib/src/com/google/common/collect/testing/google/ListMultimapRemoveTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["      Entry<K, Collection<V>> asMapEntry = multimap().asMap().entrySet().iterator().next();\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["      Map.Entry<K, Collection<V>> asMapEntry = multimap().asMap().entrySet().iterator().next();\n"]}, "added_lines": {"1": [30], "2": [95]}, "removed_lines": {"1": [30], "2": [95]}}, {"12": "android/guava-testlib/src/com/google/common/collect/testing/google/MultimapKeySetTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<K, V> entry : getSampleElements()) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    for (Map.Entry<K, V> entry : getSampleElements()) {\n"]}, "added_lines": {"1": [29], "2": [39]}, "removed_lines": {"1": [29], "2": [39]}}, {"13": "android/guava-testlib/src/com/google/common/collect/testing/google/MultimapTestSuiteBuilder.java", "added": {"1": ["        MultimapTestSuiteBuilder<K, V, M>, TestMultimapGenerator<K, V, M>, M, Entry<K, V>> {\n"], "2": ["              ?, ? extends OneSizeTestContainerGenerator<M, Entry<K, V>>>\n"], "3": ["              ?, ? extends OneSizeTestContainerGenerator<M, Entry<K, V>>>\n"], "4": ["              ?, ? extends OneSizeTestContainerGenerator<M, Entry<K, V>>>\n"], "5": ["              ?, ? extends OneSizeTestContainerGenerator<M, Entry<K, V>>>\n"], "6": ["              ?, ? extends OneSizeTestContainerGenerator<M, Entry<K, V>>>\n"], "7": ["              ?, ? extends OneSizeTestContainerGenerator<M, Entry<K, V>>>\n"], "8": ["    for (Entry<Feature<?>, Feature<?>> entry : GET_FEATURE_MAP.entries()) {\n"], "9": ["    private final OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator;\n"], "10": ["      List<Entry<K, V>> builder = new ArrayList<>();\n", "        Entry<K, Collection<V>> entry = (Entry<K, Collection<V>>) o;\n"], "11": ["      List<Entry<K, V>> builder = new ArrayList<>();\n", "      Iterable<Entry<K, V>> ordered = multimapGenerator.order(builder);\n", "      for (Entry<K, V> entry : ordered) {\n"], "12": ["    private final OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator;\n"], "13": ["    private final OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator;\n"], "14": ["    private final OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator;\n"], "15": ["      Entry[] entries = new Entry[elements.length];\n"], "16": ["    final OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator;\n", "        OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator) {\n"], "17": ["        OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator) {\n"], "18": ["    private final OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator;\n", "        OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator) {\n", "    public SampleElements<Entry<K, V>> samples() {\n", "    public Entry<K, V>[] createArray(int length) {\n", "    public Iterable<Entry<K, V>> order(List<Entry<K, V>> insertionOrder) {\n"]}, "removed": {"1": ["        MultimapTestSuiteBuilder<K, V, M>, TestMultimapGenerator<K, V, M>, M, Map.Entry<K, V>> {\n"], "2": ["              ?, ? extends OneSizeTestContainerGenerator<M, Map.Entry<K, V>>>\n"], "3": ["              ?, ? extends OneSizeTestContainerGenerator<M, Map.Entry<K, V>>>\n"], "4": ["              ?, ? extends OneSizeTestContainerGenerator<M, Map.Entry<K, V>>>\n"], "5": ["              ?, ? extends OneSizeTestContainerGenerator<M, Map.Entry<K, V>>>\n"], "6": ["              ?, ? extends OneSizeTestContainerGenerator<M, Map.Entry<K, V>>>\n"], "7": ["              ?, ? extends OneSizeTestContainerGenerator<M, Map.Entry<K, V>>>\n"], "8": ["    for (Map.Entry<Feature<?>, Feature<?>> entry : GET_FEATURE_MAP.entries()) {\n"], "9": ["    private final OneSizeTestContainerGenerator<M, Map.Entry<K, V>> multimapGenerator;\n"], "10": ["      List<Map.Entry<K, V>> builder = new ArrayList<>();\n", "        Map.Entry<K, Collection<V>> entry = (Entry<K, Collection<V>>) o;\n"], "11": ["      List<Map.Entry<K, V>> builder = new ArrayList<>();\n", "      Iterable<Map.Entry<K, V>> ordered = multimapGenerator.order(builder);\n", "      for (Map.Entry<K, V> entry : ordered) {\n"], "12": ["    private final OneSizeTestContainerGenerator<M, Map.Entry<K, V>> multimapGenerator;\n"], "13": ["    private final OneSizeTestContainerGenerator<M, Map.Entry<K, V>> multimapGenerator;\n"], "14": ["    private final OneSizeTestContainerGenerator<M, Map.Entry<K, V>> multimapGenerator;\n"], "15": ["      Map.Entry[] entries = new Map.Entry[elements.length];\n"], "16": ["    final OneSizeTestContainerGenerator<M, Map.Entry<K, V>> multimapGenerator;\n", "        OneSizeTestContainerGenerator<M, Map.Entry<K, V>> multimapGenerator) {\n"], "17": ["        OneSizeTestContainerGenerator<M, Map.Entry<K, V>> multimapGenerator) {\n"], "18": ["    private final OneSizeTestContainerGenerator<M, Map.Entry<K, V>> multimapGenerator;\n", "        OneSizeTestContainerGenerator<M, Map.Entry<K, V>> multimapGenerator) {\n", "    public SampleElements<Map.Entry<K, V>> samples() {\n", "    public Map.Entry<K, V>[] createArray(int length) {\n", "    public Iterable<Map.Entry<K, V>> order(List<Map.Entry<K, V>> insertionOrder) {\n"]}, "added_lines": {"1": [68], "2": [104], "3": [140], "4": [152], "5": [164], "6": [176], "7": [193], "8": [281], "9": [308], "10": [341, 343], "11": [362, 369, 371], "12": [392], "13": [427], "14": [480], "15": [502], "16": [548, 551], "17": [603], "18": [623, 626, 631, 636, 641]}, "removed_lines": {"1": [68], "2": [104], "3": [140], "4": [152], "5": [164], "6": [176], "7": [193], "8": [281], "9": [308], "10": [341, 343], "11": [362, 369, 371], "12": [392], "13": [427], "14": [480], "15": [502], "16": [548, 551], "17": [603], "18": [623, 626, 631, 636, 641]}}, {"14": "android/guava-testlib/src/com/google/common/collect/testing/google/MultimapValuesTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<K, V> entry : getSampleElements()) {\n"], "3": ["    for (Entry<K, V> entry : getOrderedElements()) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    for (Map.Entry<K, V> entry : getSampleElements()) {\n"], "3": ["    for (Map.Entry<K, V> entry : getOrderedElements()) {\n"]}, "added_lines": {"1": [30], "2": [41], "3": [50]}, "removed_lines": {"1": [30], "2": [41], "3": [50]}}, {"15": "android/guava-testlib/src/com/google/common/collect/testing/google/SetMultimapTestSuiteBuilder.java", "added": {"2": ["              ?, ? extends OneSizeTestContainerGenerator<SetMultimap<K, V>, Entry<K, V>>>\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["              ?, ? extends OneSizeTestContainerGenerator<SetMultimap<K, V>, Map.Entry<K, V>>>\n"]}, "added_lines": {"2": [98]}, "removed_lines": {"1": [32], "2": [99]}}, {"16": "android/guava-testlib/src/com/google/common/collect/testing/google/TestBiMapGenerator.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    extends TestContainerGenerator<BiMap<K, V>, Entry<K, V>> {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    extends TestContainerGenerator<BiMap<K, V>, Map.Entry<K, V>> {\n"]}, "added_lines": {"1": [22], "2": [31]}, "removed_lines": {"1": [22], "2": [31]}}, {"17": "android/guava-testlib/src/com/google/common/collect/testing/google/TestMultimapGenerator.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    extends TestContainerGenerator<M, Entry<K, V>> {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    extends TestContainerGenerator<M, Map.Entry<K, V>> {\n"]}, "added_lines": {"1": [24], "2": [33]}, "removed_lines": {"1": [24], "2": [33]}}, {"18": "android/guava-testlib/src/com/google/common/collect/testing/google/TestStringBiMapGenerator.java", "added": {"2": ["  public SampleElements<Entry<String, String>> samples() {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["  public SampleElements<Map.Entry<String, String>> samples() {\n"]}, "added_lines": {"2": [39]}, "removed_lines": {"1": [24], "2": [40]}}, {"19": "android/guava-testlib/src/com/google/common/collect/testing/google/TestStringListMultimapGenerator.java", "added": {"2": ["  public SampleElements<Entry<String, String>> samples() {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["  public SampleElements<Map.Entry<String, String>> samples() {\n"]}, "added_lines": {"2": [37]}, "removed_lines": {"1": [25], "2": [38]}}, {"20": "android/guava-testlib/src/com/google/common/collect/testing/google/TestStringSetMultimapGenerator.java", "added": {"2": ["  public SampleElements<Entry<String, String>> samples() {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["  public SampleElements<Map.Entry<String, String>> samples() {\n"]}, "added_lines": {"2": [36]}, "removed_lines": {"1": [24], "2": [37]}}, {"21": "android/guava-testlib/src/com/google/common/collect/testing/testers/ConcurrentMapPutIfAbsentTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["  private V putIfAbsent(Entry<K, V> entry) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["  private V putIfAbsent(Map.Entry<K, V> entry) {\n"]}, "added_lines": {"1": [28], "2": [131]}, "removed_lines": {"1": [28], "2": [131]}}, {"22": "android/guava-testlib/src/com/google/common/collect/testing/testers/MapEqualsTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    Collection<Entry<K, V>> entries = getSampleEntries(getNumEntries() - 1);\n"], "3": ["    Collection<Entry<K, V>> entries = getSampleEntries(getNumEntries() - 1);\n"], "4": ["    Collection<Entry<K, V>> entries = getSampleEntries(getNumEntries() - 1);\n"], "5": ["    Collection<Entry<K, V>> entries = getSampleEntries(getNumEntries() - 1);\n"], "6": ["    Collection<Entry<K, V>> fewerEntries = getSampleEntries(getNumEntries() - 1);\n", "    Collection<Entry<K, V>> moreEntries = getSampleEntries(getNumEntries() + 1);\n"], "7": ["      Collection<? extends Entry<? extends K, ? extends V>> entries) {\n", "    for (Entry<? extends K, ? extends V> entry : entries) {\n"]}, "removed": {"2": ["    Collection<Map.Entry<K, V>> entries = getSampleEntries(getNumEntries() - 1);\n"], "3": ["    Collection<Map.Entry<K, V>> entries = getSampleEntries(getNumEntries() - 1);\n"], "4": ["    Collection<Map.Entry<K, V>> entries = getSampleEntries(getNumEntries() - 1);\n"], "5": ["    Collection<Map.Entry<K, V>> entries = getSampleEntries(getNumEntries() - 1);\n"], "6": ["    Collection<Map.Entry<K, V>> fewerEntries = getSampleEntries(getNumEntries() - 1);\n", "    Collection<Map.Entry<K, V>> moreEntries = getSampleEntries(getNumEntries() + 1);\n"], "7": ["      Collection<? extends Map.Entry<? extends K, ? extends V>> entries) {\n", "    for (Map.Entry<? extends K, ? extends V> entry : entries) {\n"]}, "added_lines": {"1": [30], "2": [57], "3": [69], "4": [81], "5": [93], "6": [104, 110], "7": [122, 124]}, "removed_lines": {"2": [56], "3": [68], "4": [80], "5": [92], "6": [103, 109], "7": [121, 123]}}, {"23": "android/guava-testlib/src/com/google/common/collect/testing/testers/MapHashCodeTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<K, V> entry : getSampleEntries()) {\n"], "3": ["    Entry<K, V> entryWithNull = entry(null, v3());\n", "    Entry<K, V> entryWithNull = entry(k3(), null);\n", "  private void runEntryWithNullTest(Entry<K, V> entryWithNull) {\n", "    Collection<Entry<K, V>> entries = getSampleEntries(getNumEntries() - 1);\n", "    for (Entry<K, V> entry : entries) {\n"], "4": ["  private static int hash(Entry<?, ?> e) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    for (Map.Entry<K, V> entry : getSampleEntries()) {\n"], "3": ["    Map.Entry<K, V> entryWithNull = entry(null, v3());\n", "    Map.Entry<K, V> entryWithNull = entry(k3(), null);\n", "  private void runEntryWithNullTest(Map.Entry<K, V> entryWithNull) {\n", "    Collection<Map.Entry<K, V>> entries = getSampleEntries(getNumEntries() - 1);\n", "    for (Map.Entry<K, V> entry : entries) {\n"], "4": ["  private static int hash(Map.Entry<?, ?> e) {\n"]}, "added_lines": {"1": [27], "2": [39], "3": [51, 58, 62, 63, 68], "4": [80]}, "removed_lines": {"1": [27], "2": [39], "3": [51, 58, 62, 63, 68], "4": [80]}}, {"24": "android/guava-testlib/src/com/google/common/collect/testing/testers/MapPutTester.java", "added": {"2": ["  private V put(Entry<K, V> entry) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["  private V put(Map.Entry<K, V> entry) {\n"]}, "added_lines": {"2": [247]}, "removed_lines": {"1": [34], "2": [248]}}, {"25": "android/guava-testlib/src/com/google/common/collect/testing/testers/MapToStringTester.java", "added": {"1": ["    for (Entry<K, V> entry : entries) {\n"]}, "removed": {"1": ["    for (Map.Entry<K, V> entry : entries) {\n"]}, "added_lines": {"1": [82]}, "removed_lines": {"1": [82]}}, {"26": "android/guava-testlib/src/com/google/common/testing/ClassSanityTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<Class<?>, Collection<Object>> entry : distinctValues.asMap().entrySet()) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    for (Map.Entry<Class<?>, Collection<Object>> entry : distinctValues.asMap().entrySet()) {\n"]}, "added_lines": {"1": [50], "2": [630]}, "removed_lines": {"1": [50], "2": [630]}}, {"27": "android/guava-testlib/test/com/google/common/collect/testing/MapTestSuiteBuilderTests.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["        Entry<String, String>[] entries) {\n", "      for (Entry<String, String> entry : entries) {\n"], "3": ["          @Override public Set<Entry<String, String>> entrySet() {\n"], "4": ["          @Override public Set<Entry<String, String>> entrySet() {\n"]}, "removed": {"2": ["        Map.Entry<String, String>[] entries) {\n", "      for (Map.Entry<String, String> entry : entries) {\n"], "3": ["          @Override public Set<Map.Entry<String, String>> entrySet() {\n"], "4": ["          @Override public Set<Map.Entry<String, String>> entrySet() {\n"]}, "added_lines": {"1": [34], "2": [60, 62], "3": [93], "4": [112]}, "removed_lines": {"2": [59, 61], "3": [92], "4": [111]}}, {"28": "android/guava-testlib/test/com/google/common/testing/FreshValueGeneratorTest.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["        List.class, Entry.class,\n"]}, "removed": {"2": ["        List.class, Map.Entry.class,\n"]}, "added_lines": {"1": [96], "2": [134]}, "removed_lines": {"2": [133]}}, {"29": "android/guava-tests/benchmark/com/google/common/collect/MapBenchmark.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["      for (Entry<Element, Element> entry : map.entrySet()) {\n"]}, "removed": {"2": ["      for (Map.Entry<Element, Element> entry : map.entrySet()) {\n"]}, "added_lines": {"1": [29], "2": [222]}, "removed_lines": {"2": [221]}}, {"30": "android/guava-tests/test/com/google/common/base/JoinerTest.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    Set<Entry<String, String>> entriesWithNulls = mapWithNulls.entrySet();\n"]}, "removed": {"2": ["    Set<Map.Entry<String, String>> entriesWithNulls = mapWithNulls.entrySet();\n"]}, "added_lines": {"1": [32], "2": [273]}, "removed_lines": {"2": [272]}}, {"31": "android/guava-tests/test/com/google/common/cache/CacheLoadingTest.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<Object, Object> entry : result.entrySet()) {\n"], "3": ["    for (Entry<Object, Object> entry : result.entrySet()) {\n"]}, "removed": {"2": ["    for (Map.Entry<Object, Object> entry : result.entrySet()) {\n"], "3": ["    for (Map.Entry<Object, Object> entry : result.entrySet()) {\n"]}, "added_lines": {"1": [47], "2": [444], "3": [482]}, "removed_lines": {"2": [443], "3": [481]}}, {"32": "android/guava-tests/test/com/google/common/cache/LocalLoadingCacheTest.java", "added": {"1": ["    //Set<Entry<Object, Object>> entries = map.entrySet();\n"]}, "removed": {"1": ["    //Set<Map.Entry<Object, Object>> entries = map.entrySet();\n"]}, "added_lines": {"1": [165]}, "removed_lines": {"1": [165]}}, {"33": "android/guava-tests/test/com/google/common/cache/PopulatedCachesTest.java", "added": {"1": ["  private List<Entry<Object, Object>> warmUp(LoadingCache<Object, Object> cache) {\n"], "2": ["  private List<Entry<Object, Object>> warmUp(\n", "    List<Entry<Object, Object>> entries = Lists.newArrayList();\n"]}, "removed": {"1": ["  private List<Map.Entry<Object, Object>> warmUp(LoadingCache<Object, Object> cache) {\n"], "2": ["  private List<Map.Entry<Object, Object>> warmUp(\n", "    List<Map.Entry<Object, Object>> entries = Lists.newArrayList();\n"]}, "added_lines": {"1": [339], "2": [347, 350]}, "removed_lines": {"1": [339], "2": [347, 350]}}, {"34": "android/guava-tests/test/com/google/common/collect/FilteredMultimapTest.java", "added": {"2": ["  private static final Predicate<Entry<String, Integer>> ENTRY_PREDICATE\n", "      = new Predicate<Entry<String, Integer>>() {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["  private static final Predicate<Map.Entry<String, Integer>> ENTRY_PREDICATE\n", "      = new Predicate<Map.Entry<String, Integer>>() {\n"]}, "added_lines": {"2": [33, 34]}, "removed_lines": {"1": [22], "2": [34, 35]}}, {"35": "android/guava-tests/test/com/google/common/collect/HashBiMapTest.java", "added": {"1": ["    Set<Entry<Integer, String>> entries = map.entrySet();\n", "    Iterator<Entry<Integer, String>> iterator = entries.iterator();\n", "    Entry<Integer, String> entry = iterator.next();\n"]}, "removed": {"1": ["    Set<Map.Entry<Integer, String>> entries = map.entrySet();\n", "    Iterator<Map.Entry<Integer, String>> iterator = entries.iterator();\n", "    Map.Entry<Integer, String> entry = iterator.next();\n"]}, "added_lines": {"1": [121, 122, 123]}, "removed_lines": {"1": [121, 122, 123]}}, {"36": "android/guava-tests/test/com/google/common/collect/ImmutableRangeMapTest.java", "added": {"2": ["            for (Entry<Range<Integer>, Integer> entry : rangeMap.asMapOfRanges().entrySet()) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["            for (Map.Entry<Range<Integer>, Integer> entry : rangeMap.asMapOfRanges().entrySet()) {\n"]}, "added_lines": {"2": [219]}, "removed_lines": {"1": [21], "2": [220]}}, {"37": "android/guava-tests/test/com/google/common/collect/LinkedHashMultimapTest.java", "added": {"2": ["    Iterator<Entry<String, Integer>> entryIterator =\n"], "3": ["    Iterator<Entry<String, Collection<Integer>>> collectionIterator =\n", "    Entry<String, Collection<Integer>> entry = collectionIterator.next();\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    Iterator<Map.Entry<String, Integer>> entryIterator =\n"], "3": ["    Iterator<Map.Entry<String, Collection<Integer>>> collectionIterator =\n", "    Map.Entry<String, Collection<Integer>> entry = collectionIterator.next();\n"]}, "added_lines": {"2": [167], "3": [175, 177]}, "removed_lines": {"1": [41], "2": [168], "3": [176, 178]}}, {"38": "android/guava-tests/test/com/google/common/collect/LinkedListMultimapTest.java", "added": {"2": ["    Iterator<Entry<String, Integer>> entries = map.entries().iterator();\n", "    Entry<String, Integer> entry = entries.next();\n"], "3": ["    Iterator<Entry<String, Collection<Integer>>> entries\n", "    Entry<String, Collection<Integer>> entry = entries.next();\n"], "4": ["    Collection<Entry<String, Integer>> entries = multimap.entries();\n", "    Iterator<Entry<String, Integer>> iterator = entries.iterator();\n", "    Entry<String, Integer> entrya = iterator.next();\n", "    Entry<String, Integer> entryb = iterator.next();\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    Iterator<Map.Entry<String, Integer>> entries = map.entries().iterator();\n", "    Map.Entry<String, Integer> entry = entries.next();\n"], "3": ["    Iterator<Map.Entry<String, Collection<Integer>>> entries\n", "    Map.Entry<String, Collection<Integer>> entry = entries.next();\n"], "4": ["    Collection<Map.Entry<String, Integer>> entries = multimap.entries();\n", "    Iterator<Map.Entry<String, Integer>> iterator = entries.iterator();\n", "    Map.Entry<String, Integer> entrya = iterator.next();\n", "    Map.Entry<String, Integer> entryb = iterator.next();\n"]}, "added_lines": {"2": [278, 279], "3": [299, 301], "4": [320, 321, 322, 323]}, "removed_lines": {"1": [44], "2": [279, 280], "3": [300, 302], "4": [321, 322, 323, 324]}}, {"39": "android/guava-tests/test/com/google/common/collect/MapsCollectionTest.java", "added": {"1": ["                      Entry<?, ?> entry = (Entry<?, ?>) e;\n"]}, "removed": {"1": ["                      Map.Entry<?, ?> entry = (Entry<?, ?>) e;\n"]}, "added_lines": {"1": [253]}, "removed_lines": {"1": [253]}}, {"40": "android/guava-tests/test/com/google/common/collect/MapsTest.java", "added": {"1": ["    Set<Entry<Number, String>> entries = unmod.entrySet();\n", "    Entry<Number, String> entry = entries.iterator().next();\n", "    Entry<Integer, String> entry2\n", "        = (Entry<Integer, String>) entries.toArray()[0];\n"], "2": ["    Entry<String, Integer> e = Maps.immutableEntry(\"foo\", 1);\n"], "3": ["    Entry<String, Integer> e\n"], "4": ["    Set<Entry<Integer, String>> entries = unmod.entrySet();\n", "      Iterator<Entry<Integer, String>> iterator = entries.iterator();\n", "    Entry<Integer, String> entry = entries.iterator().next();\n"], "5": ["    Entry<Integer, String> entry2 =\n", "        (Entry<Integer, String>) entries.toArray()[0];\n"]}, "removed": {"1": ["    Set<Map.Entry<Number, String>> entries = unmod.entrySet();\n", "    Map.Entry<Number, String> entry = entries.iterator().next();\n", "    Map.Entry<Integer, String> entry2\n", "        = (Map.Entry<Integer, String>) entries.toArray()[0];\n"], "2": ["    Map.Entry<String, Integer> e = Maps.immutableEntry(\"foo\", 1);\n"], "3": ["    Map.Entry<String, Integer> e\n"], "4": ["    Set<Map.Entry<Integer, String>> entries = unmod.entrySet();\n", "      Iterator<Map.Entry<Integer, String>> iterator = entries.iterator();\n", "    Map.Entry<Integer, String> entry = entries.iterator().next();\n"], "5": ["    Map.Entry<Integer, String> entry2 =\n", "        (Map.Entry<Integer, String>) entries.toArray()[0];\n"]}, "added_lines": {"1": [1274, 1275, 1281, 1282], "2": [1290], "3": [1302], "4": [1789, 1791, 1797], "5": [1842, 1843]}, "removed_lines": {"1": [1274, 1275, 1281, 1282], "2": [1290], "3": [1302], "4": [1789, 1791, 1797], "5": [1842, 1843]}}, {"41": "android/guava-tests/test/com/google/common/collect/MapsTransformValuesTest.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    Set<Entry<String, String>> entries = map.entrySet();\n", "    Entry<String, String> firstEntry = entries.iterator().next();\n", "    Iterator<Entry<String, String>> entryIterator = entries.iterator();\n"], "3": ["    Set<Entry<String, Boolean>> entries = map.entrySet();\n"]}, "removed": {"2": ["    Set<Map.Entry<String, String>> entries = map.entrySet();\n", "    Map.Entry<String, String> firstEntry = entries.iterator().next();\n", "    Iterator<Map.Entry<String, String>> entryIterator = entries.iterator();\n"], "3": ["    Set<Map.Entry<String, Boolean>> entries = map.entrySet();\n"]}, "added_lines": {"1": [26], "2": [224, 225, 229], "3": [280]}, "removed_lines": {"2": [223, 224, 228], "3": [279]}}, {"42": "android/guava-tests/test/com/google/common/collect/MapsTransformValuesUnmodifiableIteratorTest.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    Set<Entry<String, String>> entries = map.entrySet();\n", "    Entry<String, String> firstEntry = entries.iterator().next();\n", "    Iterator<Entry<String, String>> entryIterator = entries.iterator();\n"], "3": ["    Set<Entry<String, Boolean>> entries = map.entrySet();\n"]}, "removed": {"2": ["    Set<Map.Entry<String, String>> entries = map.entrySet();\n", "    Map.Entry<String, String> firstEntry = entries.iterator().next();\n", "    Iterator<Map.Entry<String, String>> entryIterator = entries.iterator();\n"], "3": ["    Set<Map.Entry<String, Boolean>> entries = map.entrySet();\n"]}, "added_lines": {"1": [26], "2": [277, 278, 282], "3": [333]}, "removed_lines": {"2": [276, 277, 281], "3": [332]}}, {"43": "android/guava-tests/test/com/google/common/collect/MultimapsCollectionTest.java", "added": {"1": ["  private static final Predicate<Entry<Integer, String>> FILTER_GET_PREDICATE\n", "      = new Predicate<Entry<Integer, String>>() {\n", "  private static final Predicate<Entry<String, Integer>> FILTER_KEYSET_PREDICATE\n", "    = new Predicate<Entry<String, Integer>>() {\n"]}, "removed": {"1": ["  private static final Predicate<Map.Entry<Integer, String>> FILTER_GET_PREDICATE\n", "      = new Predicate<Map.Entry<Integer, String>>() {\n", "  private static final Predicate<Map.Entry<String, Integer>> FILTER_KEYSET_PREDICATE\n", "    = new Predicate<Map.Entry<String, Integer>>() {\n"]}, "added_lines": {"1": [221, 222, 228, 229]}, "removed_lines": {"1": [221, 222, 228, 229]}}, {"44": "android/guava-tests/test/com/google/common/collect/MultimapsFilterEntriesAsMapTest.java", "added": {"1": ["  private static final Predicate<Entry<String, Integer>> PREDICATE\n", "      = new Predicate<Entry<String, Integer>>() {\n"]}, "removed": {"1": ["  private static final Predicate<Map.Entry<String, Integer>> PREDICATE\n", "      = new Predicate<Map.Entry<String, Integer>>() {\n"]}, "added_lines": {"1": [33, 34]}, "removed_lines": {"1": [33, 34]}}, {"45": "android/guava-tests/test/com/google/common/collect/SynchronizedMapTest.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    Set<Entry<String, Integer>> entrySet = map.entrySet();\n"]}, "removed": {"2": ["    Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\n"]}, "added_lines": {"1": [28], "2": [197]}, "removed_lines": {"2": [196]}}, {"46": "android/guava-tests/test/com/google/common/collect/SynchronizedMultimapTest.java", "added": {"1": ["    @Override public Set<Entry<K, V>> entries() {\n"]}, "removed": {"1": ["    @Override public Set<Map.Entry<K, V>> entries() {\n"]}, "added_lines": {"1": [187]}, "removed_lines": {"1": [187]}}, {"47": "android/guava-tests/test/com/google/common/collect/TreeBasedTableTest.java", "added": {"1": ["    Set<Entry<Integer, Character>> entrySet = row.entrySet();\n"], "2": ["    Set<Entry<Integer, Character>> entrySet = row.tailMap(15).entrySet();\n"]}, "removed": {"1": ["    Set<Map.Entry<Integer, Character>> entrySet = row.entrySet();\n"], "2": ["    Set<Map.Entry<Integer, Character>> entrySet = row.tailMap(15).entrySet();\n"]}, "added_lines": {"1": [400], "2": [417]}, "removed_lines": {"1": [400], "2": [417]}}, {"48": "android/guava-tests/test/com/google/common/collect/TreeMultimapExplicitTest.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    Iterator<Entry<String, Collection<Integer>>> iterator =\n", "    Entry<String, Collection<Integer>> entry = iterator.next();\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    Iterator<Map.Entry<String, Collection<Integer>>> iterator =\n", "    Map.Entry<String, Collection<Integer>> entry = iterator.next();\n"]}, "added_lines": {"1": [28], "2": [143, 145]}, "removed_lines": {"1": [28], "2": [143, 145]}}, {"49": "android/guava-tests/test/com/google/common/collect/TreeMultimapNaturalTest.java", "added": {"2": ["    Iterator<Entry<String, Collection<Integer>>> iterator =\n", "    Entry<String, Collection<Integer>> entry = iterator.next();\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    Iterator<Map.Entry<String, Collection<Integer>>> iterator =\n", "    Map.Entry<String, Collection<Integer>> entry = iterator.next();\n"]}, "added_lines": {"2": [305, 307]}, "removed_lines": {"1": [44], "2": [306, 308]}}, {"50": "android/guava-tests/test/com/google/common/collect/TreeRangeMapTest.java", "added": {"1": ["          for (Entry<Range<Integer>, Integer> entry : rangeMap.asMapOfRanges().entrySet()) {\n"], "2": ["      Entry<Range<Integer>, Integer> entry = test.getEntry(i);\n"]}, "removed": {"1": ["          for (Map.Entry<Range<Integer>, Integer> entry : rangeMap.asMapOfRanges().entrySet()) {\n"], "2": ["      Map.Entry<Range<Integer>, Integer> entry = test.getEntry(i);\n"]}, "added_lines": {"1": [536], "2": [689]}, "removed_lines": {"1": [536], "2": [689]}}, {"51": "android/guava-tests/test/com/google/common/collect/WellBehavedMapTest.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<Foo, Integer> entry : map.entrySet()) {\n"], "3": ["    Entry<Foo, Integer> entry1 = Iterables.getOnlyElement(map.entrySet());\n", "    Entry<Foo, Integer> entry2 = Iterables.getOnlyElement(map.entrySet());\n", "    Set<Entry<Foo, Integer>> entrySet = map.entrySet();\n"], "4": ["    Set<Entry<Foo, Integer>> entrySet = map.entrySet();\n", "    Entry<Foo, Integer> entry = Maps.immutableEntry(Foo.Y, 2);\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    for (Map.Entry<Foo, Integer> entry : map.entrySet()) {\n"], "3": ["    Map.Entry<Foo, Integer> entry1 = Iterables.getOnlyElement(map.entrySet());\n", "    Map.Entry<Foo, Integer> entry2 = Iterables.getOnlyElement(map.entrySet());\n", "    Set<Map.Entry<Foo, Integer>> entrySet = map.entrySet();\n"], "4": ["    Set<Map.Entry<Foo, Integer>> entrySet = map.entrySet();\n", "    Map.Entry<Foo, Integer> entry = Maps.immutableEntry(Foo.Y, 2);\n"]}, "added_lines": {"1": [21], "2": [52], "3": [64, 65, 70], "4": [90, 93]}, "removed_lines": {"1": [21], "2": [52], "3": [64, 65, 70], "4": [90, 93]}}, {"52": "android/guava-tests/test/com/google/common/io/ByteSinkTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<String, String> entry : TEST_STRINGS.entrySet()) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    for (Map.Entry<String, String> entry : TEST_STRINGS.entrySet()) {\n"]}, "added_lines": {"1": [29], "2": [47]}, "removed_lines": {"1": [29], "2": [47]}}, {"53": "android/guava-tests/test/com/google/common/io/ByteSourceTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<String, String> entry : TEST_STRINGS.entrySet()) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    for (Map.Entry<String, String> entry : TEST_STRINGS.entrySet()) {\n"]}, "added_lines": {"1": [34], "2": [54]}, "removed_lines": {"1": [34], "2": [54]}}, {"54": "android/guava-tests/test/com/google/common/io/CharSinkTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<String, String> entry : TEST_STRINGS.entrySet()) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    for (Map.Entry<String, String> entry : TEST_STRINGS.entrySet()) {\n"]}, "added_lines": {"1": [26], "2": [43]}, "removed_lines": {"1": [26], "2": [43]}}, {"55": "android/guava-tests/test/com/google/common/io/CharSourceTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<String, String> entry : TEST_STRINGS.entrySet()) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    for (Map.Entry<String, String> entry : TEST_STRINGS.entrySet()) {\n"]}, "added_lines": {"1": [31], "2": [49]}, "removed_lines": {"1": [31], "2": [49]}}, {"56": "android/guava-tests/test/com/google/common/reflect/TypesTest.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["        new TypeCapture<Entry<String, Integer>>() {}.capture();\n", "        Entry.class, String.class, Integer.class);\n"], "3": ["        new TypeCapture<Entry<String, int[][]>>() {}.capture();\n", "        Map.class, Entry.class, String.class, int[][].class);\n", "        .addEqualityGroup(new TypeCapture<Entry<String, String>>() {}.capture())\n", "    assertEquals(Entry.class, ourType.getRawType());\n"], "4": ["        Entry.class, String.class, Integer.class));\n"], "5": ["        Types.newParameterizedType(Entry.class, String.class, Integer.class),\n", "            null, Entry.class, String.class, Integer.class));\n", "          Map.class, Entry.class, String.class);\n"], "6": ["          Map.class, Entry.class, int.class, int.class);\n"]}, "removed": {"2": ["        new TypeCapture<Map.Entry<String, Integer>>() {}.capture();\n", "        Map.Entry.class, String.class, Integer.class);\n"], "3": ["        new TypeCapture<Map.Entry<String, int[][]>>() {}.capture();\n", "        Map.class, Map.Entry.class, String.class, int[][].class);\n", "        .addEqualityGroup(new TypeCapture<Map.Entry<String, String>>() {}.capture())\n", "    assertEquals(Map.Entry.class, ourType.getRawType());\n"], "4": ["        Map.Entry.class, String.class, Integer.class));\n"], "5": ["        Types.newParameterizedType(Map.Entry.class, String.class, Integer.class),\n", "            null, Map.Entry.class, String.class, Integer.class));\n", "          Map.class, Map.Entry.class, String.class);\n"], "6": ["          Map.class, Map.Entry.class, int.class, int.class);\n"]}, "added_lines": {"1": [37], "2": [49, 51], "3": [97, 99, 103, 108], "4": [117], "5": [130, 132, 138], "6": [146]}, "removed_lines": {"2": [48, 50], "3": [96, 98, 102, 107], "4": [116], "5": [129, 131, 137], "6": [145]}}, {"57": "android/guava-tests/test/com/google/common/util/concurrent/ListenerCallQueueTest.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<T, Integer> entry : counts.entrySet()) {\n"]}, "removed": {"2": ["    for (Map.Entry<T, Integer> entry : counts.entrySet()) {\n"]}, "added_lines": {"1": [27], "2": [200]}, "removed_lines": {"2": [199]}}, {"58": "android/guava/src/com/google/common/cache/AbstractCache.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<? extends K, ? extends V> entry : m.entrySet()) {\n"]}, "removed": {"2": ["    for (Map.Entry<? extends K, ? extends V> entry : m.entrySet()) {\n"]}, "added_lines": {"1": [21], "2": [92]}, "removed_lines": {"2": [91]}}, {"59": "android/guava/src/com/google/common/cache/LocalCache.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<K, V> entry : result.entrySet()) {\n"]}, "removed": {"2": ["    for (Map.Entry<K, V> entry : result.entrySet()) {\n"]}, "added_lines": {"1": [69], "2": [4171]}, "removed_lines": {"2": [4170]}}, {"60": "android/guava/src/com/google/common/cache/RemovalNotification.java", "added": {"1": [" * <p>Like other {@code Entry} instances associated with {@code CacheBuilder}, this class holds\n"]}, "removed": {"1": [" * <p>Like other {@code Map.Entry} instances associated with {@code CacheBuilder}, this class holds\n"]}, "added_lines": {"1": [27]}, "removed_lines": {"1": [27]}}, {"61": "android/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java", "added": {"1": ["      final Iterator<Entry<K, Collection<V>>> entryIterator = map().entrySet().iterator();\n", "        Entry<K, Collection<V>> entry;\n"], "2": ["    final Iterator<Entry<K, Collection<V>>> keyIterator;\n"], "3": ["        Entry<K, Collection<V>> mapEntry = keyIterator.next();\n"], "4": ["  public Collection<Entry<K, V>> entries() {\n"], "5": ["  Iterator<Entry<K, V>> entryIterator() {\n", "    return new Itr<Entry<K, V>>() {\n"], "6": ["      public Iterator<Entry<K, Collection<V>>> iterator() {\n"], "7": ["        Entry<?, ?> entry = (Entry<?, ?>) o;\n", "    class AsMapIterator implements Iterator<Entry<K, Collection<V>>> {\n", "      final Iterator<Entry<K, Collection<V>>> delegateIterator = submap.entrySet().iterator();\n"], "8": ["      public Entry<K, Collection<V>> next() {\n", "        Entry<K, Collection<V>> entry = delegateIterator.next();\n"], "9": ["    Entry<K, Collection<V>> pollAsMapEntry(Iterator<Entry<K, Collection<V>>> entryIterator) {\n"]}, "removed": {"1": ["      final Iterator<Map.Entry<K, Collection<V>>> entryIterator = map().entrySet().iterator();\n", "        Map.Entry<K, Collection<V>> entry;\n"], "2": ["    final Iterator<Map.Entry<K, Collection<V>>> keyIterator;\n"], "3": ["        Map.Entry<K, Collection<V>> mapEntry = keyIterator.next();\n"], "4": ["  public Collection<Map.Entry<K, V>> entries() {\n"], "5": ["  Iterator<Map.Entry<K, V>> entryIterator() {\n", "    return new Itr<Map.Entry<K, V>>() {\n"], "6": ["      public Iterator<Map.Entry<K, Collection<V>>> iterator() {\n"], "7": ["        Map.Entry<?, ?> entry = (Map.Entry<?, ?>) o;\n", "    class AsMapIterator implements Iterator<Map.Entry<K, Collection<V>>> {\n", "      final Iterator<Map.Entry<K, Collection<V>>> delegateIterator = submap.entrySet().iterator();\n"], "8": ["      public Map.Entry<K, Collection<V>> next() {\n", "        Map.Entry<K, Collection<V>> entry = delegateIterator.next();\n"], "9": ["    Map.Entry<K, Collection<V>> pollAsMapEntry(Iterator<Entry<K, Collection<V>>> entryIterator) {\n"]}, "added_lines": {"1": [941, 943], "2": [1142], "3": [1164], "4": [1220], "5": [1233, 1234], "6": [1349], "7": [1365, 1372, 1373], "8": [1382, 1383], "9": [1530]}, "removed_lines": {"1": [941, 943], "2": [1142], "3": [1164], "4": [1220], "5": [1233, 1234], "6": [1349], "7": [1365, 1372, 1373], "8": [1382, 1383], "9": [1530]}}, {"62": "android/guava/src/com/google/common/collect/AbstractMultimap.java", "added": {"1": ["    for (Entry<? extends K, ? extends V> entry : multimap.entries()) {\n"]}, "removed": {"1": ["    for (Map.Entry<? extends K, ? extends V> entry : multimap.entries()) {\n"]}, "added_lines": {"1": [93]}, "removed_lines": {"1": [93]}}, {"63": "android/guava/src/com/google/common/collect/AbstractSetMultimap.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["  public Set<Entry<K, V>> entries() {\n", "    return (Set<Entry<K, V>>) super.entries();\n"]}, "removed": {"2": ["  public Set<Map.Entry<K, V>> entries() {\n", "    return (Set<Map.Entry<K, V>>) super.entries();\n"]}, "added_lines": {"1": [23], "2": [77, 78]}, "removed_lines": {"2": [76, 77]}}, {"64": "android/guava/src/com/google/common/collect/FilteredMultimapValues.java", "added": {"2": ["      Entry<K, V> entry = unfilteredItr.next();\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["      Map.Entry<K, V> entry = unfilteredItr.next();\n"]}, "added_lines": {"2": [64]}, "removed_lines": {"1": [27], "2": [65]}}, {"65": "android/guava/src/com/google/common/collect/ForwardingMapEntry.java", "added": {"1": ["  protected abstract Entry<K, V> delegate();\n"]}, "removed": {"1": ["  protected abstract Map.Entry<K, V> delegate();\n"]}, "added_lines": {"1": [60]}, "removed_lines": {"1": [60]}}, {"66": "android/guava/src/com/google/common/collect/ImmutableMap.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["   * <p>A call to {@link Entry#setValue} on the returned entry will always\n"]}, "removed": {"2": ["   * <p>A call to {@link Map.Entry#setValue} on the returned entry will always\n"]}, "added_lines": {"1": [37], "2": [132]}, "removed_lines": {"2": [131]}}, {"67": "android/guava/src/com/google/common/collect/ImmutableRangeMap.java", "added": {"1": ["    private final List<Entry<Range<K>, V>> entries;\n"], "2": ["  public Entry<Range<K>, V> getEntry(K key) {\n"]}, "removed": {"1": ["    private final List<Map.Entry<Range<K>, V>> entries;\n"], "2": ["  public Map.Entry<Range<K>, V> getEntry(K key) {\n"]}, "added_lines": {"1": [92], "2": [177]}, "removed_lines": {"1": [92], "2": [177]}}, {"68": "android/guava/src/com/google/common/collect/ImmutableSetMultimap.java", "added": {"2": ["        List<Entry<K, Collection<V>>> entries =\n", "        for (Entry<K, Collection<V>> entry : entries) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["        List<Map.Entry<K, Collection<V>>> entries =\n", "        for (Map.Entry<K, Collection<V>> entry : entries) {\n"]}, "added_lines": {"2": [264, 268]}, "removed_lines": {"1": [37], "2": [265, 269]}}, {"69": "android/guava/src/com/google/common/collect/LinkedHashMultimap.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["  public Set<Entry<K, V>> entries() {\n"], "3": ["  Iterator<Entry<K, V>> entryIterator() {\n", "    return new Iterator<Entry<K, V>>() {\n"], "4": ["      public Entry<K, V> next() {\n"], "5": ["    for (Entry<K, V> entry : entries()) {\n"]}, "removed": {"2": ["  public Set<Map.Entry<K, V>> entries() {\n"], "3": ["  Iterator<Map.Entry<K, V>> entryIterator() {\n", "    return new Iterator<Map.Entry<K, V>>() {\n"], "4": ["      public Map.Entry<K, V> next() {\n"], "5": ["    for (Map.Entry<K, V> entry : entries()) {\n"]}, "added_lines": {"1": [38], "2": [292], "3": [520, 521], "4": [531], "5": [573]}, "removed_lines": {"2": [291], "3": [519, 520], "4": [530], "5": [572]}}, {"70": "android/guava/src/com/google/common/collect/MapMaker.java", "added": {"1": [" * to the user. Any {@link java.util.Entry} instance retrieved from the map's\n", " * such entries do, however, support {@link java.util.Entry#setValue}, which simply calls\n"]}, "removed": {"1": [" * to the user. Any {@link java.util.Map.Entry} instance retrieved from the map's\n", " * such entries do, however, support {@link java.util.Map.Entry#setValue}, which simply calls\n"]}, "added_lines": {"1": [67, 69]}, "removed_lines": {"1": [67, 69]}}, {"71": "android/guava/src/com/google/common/collect/Maps.java", "added": {"1": ["    Iterator<? extends Entry<K, ? extends V>> entryItr = map.entrySet().iterator();\n", "    Entry<K, ? extends V> entry1 = entryItr.next();\n"], "2": ["   * map entries. If {@code o} is an instance of {@code Entry}, it is\n"], "3": ["   * map entries. If {@code o} is an instance of {@code Entry}, it is\n"], "4": ["    for (Entry<?, ?> entry : map.entrySet()) {\n"], "5": ["    for (Entry<? extends K, ? extends V> entry : map.entrySet()) {\n"]}, "removed": {"1": ["    Iterator<? extends Map.Entry<K, ? extends V>> entryItr = map.entrySet().iterator();\n", "    Map.Entry<K, ? extends V> entry1 = entryItr.next();\n"], "2": ["   * map entries. If {@code o} is an instance of {@code Map.Entry}, it is\n"], "3": ["   * map entries. If {@code o} is an instance of {@code Map.Entry}, it is\n"], "4": ["    for (Map.Entry<?, ?> entry : map.entrySet()) {\n"], "5": ["    for (Map.Entry<? extends K, ? extends V> entry : map.entrySet()) {\n"]}, "added_lines": {"1": [140, 144], "2": [3570], "3": [3590], "4": [3627], "5": [3641]}, "removed_lines": {"1": [140, 144], "2": [3570], "3": [3590], "4": [3627], "5": [3641]}}, {"72": "android/guava/src/com/google/common/collect/Multimap.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["   * multimap, as {@link Entry} instances.\n", "  Collection<Entry<K, V>> entries();\n"], "3": ["   * Entry#setValue setValue}.\n"]}, "removed": {"2": ["   * multimap, as {@link Map.Entry} instances.\n", "  Collection<Map.Entry<K, V>> entries();\n"], "3": ["   * Map.Entry#setValue setValue}.\n"]}, "added_lines": {"1": [25], "2": [343, 349], "3": [361]}, "removed_lines": {"2": [342, 348], "3": [360]}}, {"73": "android/guava/src/com/google/common/collect/Ordering.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["  <T2 extends T> Ordering<Entry<T2, ?>> onKeys() {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["  <T2 extends T> Ordering<Map.Entry<T2, ?>> onKeys() {\n"]}, "added_lines": {"1": [33], "2": [449]}, "removed_lines": {"1": [33], "2": [449]}}, {"74": "android/guava/src/com/google/common/collect/RangeMap.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["  Entry<Range<K>, V> getEntry(K key);\n"]}, "removed": {"2": ["  Map.Entry<Range<K>, V> getEntry(K key);\n"]}, "added_lines": {"1": [23], "2": [55]}, "removed_lines": {"2": [54]}}, {"75": "android/guava/src/com/google/common/collect/RegularImmutableMap.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["      if (object instanceof Entry) {\n", "        Entry<?, ?> entry = (Entry<?, ?>) object;\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["      if (object instanceof Map.Entry) {\n", "        Map.Entry<?, ?> entry = (Map.Entry<?, ?>) object;\n"]}, "added_lines": {"1": [27], "2": [215, 216]}, "removed_lines": {"1": [27], "2": [215, 216]}}, {"76": "android/guava/src/com/google/common/collect/SetMultimap.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["  Set<Entry<K, V>> entries();\n"]}, "removed": {"2": ["  Set<Map.Entry<K, V>> entries();\n"]}, "added_lines": {"1": [23], "2": [98]}, "removed_lines": {"2": [97]}}, {"77": "android/guava/src/com/google/common/collect/SparseImmutableTable.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<R, Map<C, V>> row : rows.entrySet()) {\n", "    for (Entry<C, Map<R, V>> col : columns.entrySet()) {\n"], "3": ["    Entry<R, Map<C, V>> rowEntry = rowMap.entrySet().asList().get(rowIndex);\n", "    Entry<C, V> colEntry = row.entrySet().asList().get(columnIndex);\n"]}, "removed": {"2": ["    for (Map.Entry<R, Map<C, V>> row : rows.entrySet()) {\n", "    for (Map.Entry<C, Map<R, V>> col : columns.entrySet()) {\n"], "3": ["    Map.Entry<R, Map<C, V>> rowEntry = rowMap.entrySet().asList().get(rowIndex);\n", "    Map.Entry<C, V> colEntry = row.entrySet().asList().get(columnIndex);\n"]}, "added_lines": {"1": [20], "2": [82, 88], "3": [112, 115]}, "removed_lines": {"2": [81, 87], "3": [111, 114]}}, {"78": "android/guava/src/com/google/common/collect/Synchronized.java", "added": {"1": ["    transient Collection<Entry<K, V>> entries;\n"], "2": ["    public Collection<Entry<K, V>> entries() {\n"], "3": ["    transient Set<Entry<K, V>> entrySet;\n"], "4": ["    public Set<Entry<K, V>> entries() {\n"], "5": ["      extends SynchronizedSet<Entry<K, Collection<V>>> {\n", "    SynchronizedAsMapEntries(Set<Entry<K, Collection<V>>> delegate, @Nullable Object mutex) {\n", "    public Iterator<Entry<K, Collection<V>>> iterator() {\n", "      return new TransformedIterator<Entry<K, Collection<V>>, Entry<K, Collection<V>>>(\n", "        Entry<K, Collection<V>> transform(final Entry<K, Collection<V>> entry) {\n", "            protected Entry<K, Collection<V>> delegate() {\n"], "6": ["    transient Set<Entry<K, V>> entrySet;\n"], "7": ["    public Set<Entry<K, V>> entrySet() {\n"], "8": ["    transient Set<Entry<K, Collection<V>>> asMapEntrySet;\n"], "9": ["    public Set<Entry<K, Collection<V>>> entrySet() {\n"]}, "removed": {"1": ["    transient Collection<Map.Entry<K, V>> entries;\n"], "2": ["    public Collection<Map.Entry<K, V>> entries() {\n"], "3": ["    transient Set<Map.Entry<K, V>> entrySet;\n"], "4": ["    public Set<Map.Entry<K, V>> entries() {\n"], "5": ["      extends SynchronizedSet<Map.Entry<K, Collection<V>>> {\n", "    SynchronizedAsMapEntries(Set<Map.Entry<K, Collection<V>>> delegate, @Nullable Object mutex) {\n", "    public Iterator<Map.Entry<K, Collection<V>>> iterator() {\n", "      return new TransformedIterator<Map.Entry<K, Collection<V>>, Map.Entry<K, Collection<V>>>(\n", "        Map.Entry<K, Collection<V>> transform(final Map.Entry<K, Collection<V>> entry) {\n", "            protected Map.Entry<K, Collection<V>> delegate() {\n"], "6": ["    transient Set<Map.Entry<K, V>> entrySet;\n"], "7": ["    public Set<Map.Entry<K, V>> entrySet() {\n"], "8": ["    transient Set<Map.Entry<K, Collection<V>>> asMapEntrySet;\n"], "9": ["    public Set<Map.Entry<K, Collection<V>>> entrySet() {\n"]}, "added_lines": {"1": [521], "2": [647], "3": [748], "4": [781], "5": [866, 867, 872, 874, 877, 880], "6": [965], "7": [999], "8": [1207], "9": [1223]}, "removed_lines": {"1": [521], "2": [647], "3": [748], "4": [781], "5": [866, 867, 872, 874, 877, 880], "6": [965], "7": [999], "8": [1207], "9": [1223]}}, {"79": "android/guava/src/com/google/common/collect/Tables.java", "added": {"1": ["   *   Iterator<Entry<C, V>> i = row.entrySet().iterator(); // Must be in synchronized block\n"]}, "removed": {"1": ["   *   Iterator<Map.Entry<C, V>> i = row.entrySet().iterator(); // Must be in synchronized block\n"]}, "added_lines": {"1": [621]}, "removed_lines": {"1": [621]}}, {"80": "android/guava/src/com/google/common/collect/TreeRangeMap.java", "added": {"1": ["    Entry<Cut<K>, RangeMapEntry<K, V>> mapEntry =\n"], "2": ["    Entry<Cut<K>, RangeMapEntry<K, V>> lowerEntry =\n", "    Entry<Cut<K>, RangeMapEntry<K, V>> higherEntry =\n"], "3": ["      Range<K> range, V value, @Nullable Entry<Cut<K>, RangeMapEntry<K, V>> entry) {\n"], "4": ["    for (Entry<Range<K>, V> entry : rangeMap.asMapOfRanges().entrySet()) {\n"], "5": ["    Entry<Cut<K>, RangeMapEntry<K, V>> mapEntryBelowToTruncate =\n"], "6": ["    Entry<Cut<K>, RangeMapEntry<K, V>> mapEntryAboveToTruncate =\n"]}, "removed": {"1": ["    Map.Entry<Cut<K>, RangeMapEntry<K, V>> mapEntry =\n"], "2": ["    Map.Entry<Cut<K>, RangeMapEntry<K, V>> lowerEntry =\n", "    Map.Entry<Cut<K>, RangeMapEntry<K, V>> higherEntry =\n"], "3": ["      Range<K> range, V value, @Nullable Map.Entry<Cut<K>, RangeMapEntry<K, V>> entry) {\n"], "4": ["    for (Map.Entry<Range<K>, V> entry : rangeMap.asMapOfRanges().entrySet()) {\n"], "5": ["    Map.Entry<Cut<K>, RangeMapEntry<K, V>> mapEntryBelowToTruncate =\n"], "6": ["    Map.Entry<Cut<K>, RangeMapEntry<K, V>> mapEntryAboveToTruncate =\n"]}, "added_lines": {"1": [113], "2": [146, 150], "3": [159], "4": [170], "5": [205], "6": [228]}, "removed_lines": {"1": [113], "2": [146, 150], "3": [159], "4": [170], "5": [205], "6": [228]}}, {"81": "android/guava/src/com/google/common/escape/CharEscaperBuilder.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<Character, String> entry : map.entrySet()) {\n"]}, "removed": {"2": ["    for (Map.Entry<Character, String> entry : map.entrySet()) {\n"]}, "added_lines": {"1": [24], "2": [119]}, "removed_lines": {"2": [118]}}, {"82": "android/guava/src/com/google/common/eventbus/SubscriberRegistry.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<Class<?>, Collection<Subscriber>> entry : listenerMethods.asMap().entrySet()) {\n"], "3": ["    for (Entry<Class<?>, Collection<Subscriber>> entry : listenerMethods.asMap().entrySet()) {\n"]}, "removed": {"2": ["    for (Map.Entry<Class<?>, Collection<Subscriber>> entry : listenerMethods.asMap().entrySet()) {\n"], "3": ["    for (Map.Entry<Class<?>, Collection<Subscriber>> entry : listenerMethods.asMap().entrySet()) {\n"]}, "added_lines": {"1": [43], "2": [80], "3": [102]}, "removed_lines": {"2": [79], "3": [101]}}, {"83": "android/guava/src/com/google/common/reflect/ClassPath.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["      for (Entry<File, ClassLoader> entry : getClassPathEntries(classloader).entrySet()) {\n"], "3": ["      for (Entry<ClassLoader, String> entry : resources.entries()) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["      for (Map.Entry<File, ClassLoader> entry : getClassPathEntries(classloader).entrySet()) {\n"], "3": ["      for (Map.Entry<ClassLoader, String> entry : resources.entries()) {\n"]}, "added_lines": {"1": [49], "2": [353], "3": [511]}, "removed_lines": {"1": [49], "2": [353], "3": [511]}}, {"84": "android/guava/src/com/google/common/reflect/TypeResolver.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["      for (Entry<TypeVariableKey, ? extends Type> mapping : mappings.entrySet()) {\n"]}, "removed": {"2": ["      for (Map.Entry<TypeVariableKey, ? extends Type> mapping : mappings.entrySet()) {\n"]}, "added_lines": {"1": [35], "2": [262]}, "removed_lines": {"2": [261]}}, {"85": "android/guava/src/com/google/common/reflect/Types.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["        if (new TypeCapture<Entry<String, int[][]>>() {}.capture()\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["        if (new TypeCapture<Map.Entry<String, int[][]>>() {}.capture()\n"]}, "added_lines": {"1": [45], "2": [630]}, "removed_lines": {"1": [45], "2": [630]}}, {"86": "android/guava/src/com/google/common/util/concurrent/AtomicLongMap.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<? extends K, ? extends Long> entry : m.entrySet()) {\n"], "3": ["    Iterator<Entry<K, AtomicLong>> entryIterator = map.entrySet().iterator();\n", "      Entry<K, AtomicLong> entry = entryIterator.next();\n"]}, "removed": {"2": ["    for (Map.Entry<? extends K, ? extends Long> entry : m.entrySet()) {\n"], "3": ["    Iterator<Map.Entry<K, AtomicLong>> entryIterator = map.entrySet().iterator();\n", "      Map.Entry<K, AtomicLong> entry = entryIterator.next();\n"]}, "added_lines": {"1": [28], "2": [237], "3": [282, 284]}, "removed_lines": {"2": [236], "3": [281, 283]}}, {"87": "android/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["      for (Entry<LockGraphNode, ExampleStackTrace> entry : allowedPriorLocks.entrySet()) {\n"]}, "removed": {"2": ["      for (Map.Entry<LockGraphNode, ExampleStackTrace> entry : allowedPriorLocks.entrySet()) {\n"]}, "added_lines": {"1": [37], "2": [698]}, "removed_lines": {"2": [697]}}, {"88": "android/guava/src/com/google/common/util/concurrent/ServiceManager.java", "added": {"1": ["                    public Long apply(Entry<Service, Long> input) {\n"]}, "removed": {"1": ["                    public Long apply(Map.Entry<Service, Long> input) {\n"]}, "added_lines": {"1": [629]}, "removed_lines": {"1": [629]}}, {"89": "guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/LocalCache.java", "added": {"1": ["    for (Entry<? extends K, ? extends V> entry : m.entrySet()) {\n"], "2": ["      for (Entry<K, Timestamped<V>> entry : cachingHashMap.entrySet()) {\n"], "3": ["    protected boolean removeEldestEntry(Entry<K, Timestamped<V>> ignored) {\n"]}, "removed": {"1": ["    for (Map.Entry<? extends K, ? extends V> entry : m.entrySet()) {\n"], "2": ["      for (Map.Entry<K, Timestamped<V>> entry : cachingHashMap.entrySet()) {\n"], "3": ["    protected boolean removeEldestEntry(Map.Entry<K, Timestamped<V>> ignored) {\n"]}, "added_lines": {"1": [144], "2": [152], "3": [486]}, "removed_lines": {"1": [144], "2": [152], "3": [486]}}, {"90": "guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableBiMap.java", "added": {"1": ["    @Override public Builder<K, V> put(Entry<? extends K, ? extends V> entry) {\n"]}, "removed": {"1": ["    @Override public Builder<K, V> put(Map.Entry<? extends K, ? extends V> entry) {\n"]}, "added_lines": {"1": [92]}, "removed_lines": {"1": [92]}}, {"91": "guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableEnumMap.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<K, V> entry : checkNotNull(map).entrySet()) {\n"]}, "removed": {"2": ["    for (Map.Entry<K, V> entry : checkNotNull(map).entrySet()) {\n"]}, "added_lines": {"1": [22], "2": [32]}, "removed_lines": {"2": [31]}}, {"92": "guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java", "added": {"1": ["      for (Entry<?, ?> entry : enumMap.entrySet()) {\n"]}, "removed": {"1": ["      for (Map.Entry<?, ?> entry : enumMap.entrySet()) {\n"]}, "added_lines": {"1": [229]}, "removed_lines": {"1": [231]}}, {"93": "guava-gwt/src/com/google/common/collect/LinkedHashMultimap_CustomFieldSerializer.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<?, ?> entry : multimap.entries()) {\n"]}, "removed": {"2": ["    for (Map.Entry<?, ?> entry : multimap.entries()) {\n"]}, "added_lines": {"1": [25], "2": [64]}, "removed_lines": {"2": [63]}}, {"94": "guava-gwt/src/com/google/common/collect/LinkedListMultimap_CustomFieldSerializer.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<?, ?> entry : multimap.entries()) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    for (Map.Entry<?, ?> entry : multimap.entries()) {\n"]}, "added_lines": {"1": [22], "2": [48]}, "removed_lines": {"1": [22], "2": [48]}}, {"95": "guava-gwt/src/com/google/common/collect/Multimap_CustomFieldSerializerBase.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<?, ? extends Collection<?>> entry : instance.asMap().entrySet()) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    for (Map.Entry<?, ? extends Collection<?>> entry : instance.asMap().entrySet()) {\n"]}, "added_lines": {"1": [24], "2": [71]}, "removed_lines": {"1": [24], "2": [71]}}, {"96": "guava-testlib/src/com/google/common/collect/testing/AbstractMapTester.java", "added": {"1": ["    extends AbstractContainerTester<Map<K, V>, Entry<K, V>> {\n", "  protected Collection<Entry<K, V>> actualContents() {\n"], "2": ["  protected Entry<K, V>[] createArrayWithNullKey() {\n", "    Entry<K, V>[] array = createSamplesArray();\n", "    final Entry<K, V> oldEntry = array[nullKeyLocation];\n"], "3": ["  protected Entry<K, V>[] createArrayWithNullValue() {\n", "    Entry<K, V>[] array = createSamplesArray();\n", "    final Entry<K, V> oldEntry = array[nullValueLocation];\n"], "4": ["  protected MinimalCollection<Entry<K, V>> createDisjointCollection() {\n"], "5": ["  protected Collection<Entry<K, V>> getSampleEntries(int howMany) {\n", "  protected Collection<Entry<K, V>> getSampleEntries() {\n"]}, "removed": {"1": ["    extends AbstractContainerTester<Map<K, V>, Map.Entry<K, V>> {\n", "  protected Collection<Map.Entry<K, V>> actualContents() {\n"], "2": ["  protected Map.Entry<K, V>[] createArrayWithNullKey() {\n", "    Map.Entry<K, V>[] array = createSamplesArray();\n", "    final Map.Entry<K, V> oldEntry = array[nullKeyLocation];\n"], "3": ["  protected Map.Entry<K, V>[] createArrayWithNullValue() {\n", "    Map.Entry<K, V>[] array = createSamplesArray();\n", "    final Map.Entry<K, V> oldEntry = array[nullValueLocation];\n"], "4": ["  protected MinimalCollection<Map.Entry<K, V>> createDisjointCollection() {\n"], "5": ["  protected Collection<Map.Entry<K, V>> getSampleEntries(int howMany) {\n", "  protected Collection<Map.Entry<K, V>> getSampleEntries() {\n"]}, "added_lines": {"1": [40, 46], "2": [71, 72, 74], "3": [99, 100, 102], "4": [147], "5": [155, 159]}, "removed_lines": {"1": [40, 46], "2": [71, 72, 74], "3": [99, 100, 102], "4": [147], "5": [155, 159]}}, {"97": "guava-testlib/src/com/google/common/collect/testing/DerivedCollectionGenerators.java", "added": {"1": ["      implements TestSetGenerator<Entry<K, V>>, DerivedGenerator {\n", "    private final OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> mapGenerator;\n", "        OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> mapGenerator) {\n", "    public SampleElements<Entry<K, V>> samples() {\n", "    public Set<Entry<K, V>> create(Object... elements) {\n", "    public Entry<K, V>[] createArray(int length) {\n", "    public Iterable<Entry<K, V>> order(List<Entry<K, V>> insertionOrder) {\n", "    public OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> getInnerGenerator() {\n"], "2": ["      OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> mapGenerator) {\n"], "3": ["    private final OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> mapGenerator;\n", "        OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> mapGenerator) {\n", "      final SampleElements<Entry<K, V>> mapSamples = this.mapGenerator.samples();\n"], "4": ["      Collection<Entry<K, V>> originalEntries = mapGenerator.getSampleElements(elements.length);\n", "      Collection<Entry<K, V>> entries = new ArrayList<>(elements.length);\n", "      for (Entry<K, V> entry : originalEntries) {\n"], "5": ["    public OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> getInnerGenerator() {\n"], "6": ["    private final OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> mapGenerator;\n", "        OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> mapGenerator) {\n", "      final SampleElements<Entry<K, V>> mapSamples = this.mapGenerator.samples();\n"], "7": ["      Collection<Entry<K, V>> originalEntries = mapGenerator.getSampleElements(elements.length);\n", "      Collection<Entry<K, V>> entries = new ArrayList<>(elements.length);\n", "      for (Entry<K, V> entry : originalEntries) {\n"], "8": ["    public OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> getInnerGenerator() {\n"]}, "removed": {"1": ["      implements TestSetGenerator<Map.Entry<K, V>>, DerivedGenerator {\n", "    private final OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> mapGenerator;\n", "        OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> mapGenerator) {\n", "    public SampleElements<Map.Entry<K, V>> samples() {\n", "    public Set<Map.Entry<K, V>> create(Object... elements) {\n", "    public Map.Entry<K, V>[] createArray(int length) {\n", "    public Iterable<Map.Entry<K, V>> order(List<Map.Entry<K, V>> insertionOrder) {\n", "    public OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> getInnerGenerator() {\n"], "2": ["      OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> mapGenerator) {\n"], "3": ["    private final OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> mapGenerator;\n", "        OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> mapGenerator) {\n", "      final SampleElements<Map.Entry<K, V>> mapSamples = this.mapGenerator.samples();\n"], "4": ["      Collection<Map.Entry<K, V>> originalEntries = mapGenerator.getSampleElements(elements.length);\n", "      Collection<Map.Entry<K, V>> entries = new ArrayList<>(elements.length);\n", "      for (Map.Entry<K, V> entry : originalEntries) {\n"], "5": ["    public OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> getInnerGenerator() {\n"], "6": ["    private final OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> mapGenerator;\n", "        OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> mapGenerator) {\n", "      final SampleElements<Map.Entry<K, V>> mapSamples = this.mapGenerator.samples();\n"], "7": ["      Collection<Map.Entry<K, V>> originalEntries = mapGenerator.getSampleElements(elements.length);\n", "      Collection<Map.Entry<K, V>> entries = new ArrayList<>(elements.length);\n", "      for (Map.Entry<K, V> entry : originalEntries) {\n"], "8": ["    public OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> getInnerGenerator() {\n"]}, "added_lines": {"1": [45, 46, 49, 54, 59, 64, 69, 74], "2": [83], "3": [94, 98, 100], "4": [121, 124, 126], "5": [158], "6": [201, 205, 207], "7": [228, 231, 233], "8": [275]}, "removed_lines": {"1": [45, 46, 49, 54, 59, 64, 69, 74], "2": [83], "3": [94, 98, 100], "4": [121, 124, 126], "5": [158], "6": [201, 205, 207], "7": [228, 231, 233], "8": [275]}}, {"98": "guava-testlib/src/com/google/common/collect/testing/Helpers.java", "added": {"1": ["  public static <K, V> Entry<K, V> nefariousMapEntry(final K key, final V value) {\n", "    return new Entry<K, V>() {\n"], "2": ["        if (o instanceof Entry) {\n", "          Entry<K, V> e = (Entry<K, V>) o;\n"]}, "removed": {"1": ["  public static <K, V> Map.Entry<K, V> nefariousMapEntry(final K key, final V value) {\n", "    return new Map.Entry<K, V>() {\n"], "2": ["        if (o instanceof Map.Entry) {\n", "          Map.Entry<K, V> e = (Map.Entry<K, V>) o;\n"]}, "added_lines": {"1": [370, 371], "2": [390, 391]}, "removed_lines": {"1": [370, 371], "2": [390, 391]}}, {"99": "guava-testlib/src/com/google/common/collect/testing/MapTestSuiteBuilder.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["        MapTestSuiteBuilder<K, V>, TestMapGenerator<K, V>, Map<K, V>, Entry<K, V>> {\n"], "3": ["              ?, ? extends OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>>>\n"], "4": ["  protected SetTestSuiteBuilder<Entry<K, V>> createDerivedEntrySetSuite(\n", "      TestSetGenerator<Entry<K, V>> entrySetGenerator) {\n"], "5": ["    private final OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> mapGenerator;\n", "        OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>> mapGenerator) {\n", "    public SampleElements<Entry<K, V>> samples() {\n", "    public Entry<K, V>[] createArray(int length) {\n", "    public Iterable<Entry<K, V>> order(List<Entry<K, V>> insertionOrder) {\n"]}, "removed": {"2": ["        MapTestSuiteBuilder<K, V>, TestMapGenerator<K, V>, Map<K, V>, Map.Entry<K, V>> {\n"], "3": ["              ?, ? extends OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>>>\n"], "4": ["  protected SetTestSuiteBuilder<Map.Entry<K, V>> createDerivedEntrySetSuite(\n", "      TestSetGenerator<Map.Entry<K, V>> entrySetGenerator) {\n"], "5": ["    private final OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> mapGenerator;\n", "        OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> mapGenerator) {\n", "    public SampleElements<Map.Entry<K, V>> samples() {\n", "    public Map.Entry<K, V>[] createArray(int length) {\n", "    public Iterable<Map.Entry<K, V>> order(List<Map.Entry<K, V>> insertionOrder) {\n"]}, "added_lines": {"1": [59], "2": [72], "3": [112], "4": [156, 157], "5": [245, 248, 253, 258, 263]}, "removed_lines": {"2": [71], "3": [111], "4": [155, 156], "5": [244, 247, 252, 257, 262]}}, {"100": "guava-testlib/src/com/google/common/collect/testing/SampleElements.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["  public static <K, V> SampleElements<Entry<K, V>> mapEntries(\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["  public static <K, V> SampleElements<Map.Entry<K, V>> mapEntries(\n"]}, "added_lines": {"1": [23], "2": [91]}, "removed_lines": {"1": [23], "2": [91]}}, {"101": "guava-testlib/src/com/google/common/collect/testing/TestMapEntrySetGenerator.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["  public SampleElements<Entry<K, V>> samples() {\n", "  public Set<Entry<K, V>> create(Object... elements) {\n", "    Entry<K, V>[] entries = createArray(elements.length);\n", "  public abstract Set<Entry<K, V>> createFromEntries(Entry<K, V>[] entries);\n", "  public Entry<K, V>[] createArray(int length) {\n", "    return new Entry[length];\n", "  public List<Entry<K, V>> order(List<Entry<K, V>> insertionOrder) {\n"]}, "removed": {"2": ["  public SampleElements<Map.Entry<K, V>> samples() {\n", "  public Set<Map.Entry<K, V>> create(Object... elements) {\n", "    Map.Entry<K, V>[] entries = createArray(elements.length);\n", "  public abstract Set<Map.Entry<K, V>> createFromEntries(Map.Entry<K, V>[] entries);\n", "  public Map.Entry<K, V>[] createArray(int length) {\n", "    return new Map.Entry[length];\n", "  public List<Map.Entry<K, V>> order(List<Map.Entry<K, V>> insertionOrder) {\n"]}, "added_lines": {"1": [22], "2": [41, 46, 47, 52, 56, 57, 62]}, "removed_lines": {"2": [40, 45, 46, 51, 55, 56, 61]}}, {"102": "guava-testlib/src/com/google/common/collect/testing/TestSortedMapGenerator.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["  Entry<K, V> belowSamplesLesser();\n", "  Entry<K, V> belowSamplesGreater();\n", "  Entry<K, V> aboveSamplesLesser();\n", "  Entry<K, V> aboveSamplesGreater();\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["  Map.Entry<K, V> belowSamplesLesser();\n", "  Map.Entry<K, V> belowSamplesGreater();\n", "  Map.Entry<K, V> aboveSamplesLesser();\n", "  Map.Entry<K, V> aboveSamplesGreater();\n"]}, "added_lines": {"1": [20], "2": [37, 43, 49, 55]}, "removed_lines": {"1": [20], "2": [37, 43, 49, 55]}}, {"103": "guava-testlib/src/com/google/common/collect/testing/TestStringMapGenerator.java", "added": {"1": ["  public SampleElements<Entry<String, String>> samples() {\n"]}, "removed": {"1": ["  public SampleElements<Map.Entry<String, String>> samples() {\n"]}, "added_lines": {"1": [36]}, "removed_lines": {"1": [36]}}, {"104": "guava-testlib/src/com/google/common/collect/testing/google/AbstractMultimapTester.java", "added": {"2": ["    extends AbstractContainerTester<M, Entry<K, V>> {\n"], "3": ["  protected Entry<K, V>[] createArrayWithNullKey() {\n", "    Entry<K, V>[] array = createSamplesArray();\n", "    final Entry<K, V> oldEntry = array[nullKeyLocation];\n"], "4": ["  protected Entry<K, V>[] createArrayWithNullValue() {\n", "    Entry<K, V>[] array = createSamplesArray();\n", "    final Entry<K, V> oldEntry = array[nullValueLocation];\n"], "5": ["  protected Entry<K, V>[] createArrayWithNullKeyAndValue() {\n", "    Entry<K, V>[] array = createSamplesArray();\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    extends AbstractContainerTester<M, Map.Entry<K, V>> {\n"], "3": ["  protected Map.Entry<K, V>[] createArrayWithNullKey() {\n", "    Map.Entry<K, V>[] array = createSamplesArray();\n", "    final Map.Entry<K, V> oldEntry = array[nullKeyLocation];\n"], "4": ["  protected Map.Entry<K, V>[] createArrayWithNullValue() {\n", "    Map.Entry<K, V>[] array = createSamplesArray();\n", "    final Map.Entry<K, V> oldEntry = array[nullValueLocation];\n"], "5": ["  protected Map.Entry<K, V>[] createArrayWithNullKeyAndValue() {\n", "    Map.Entry<K, V>[] array = createSamplesArray();\n"]}, "added_lines": {"2": [38], "3": [50, 51, 53], "4": [62, 63, 65], "5": [74, 75]}, "removed_lines": {"1": [29], "2": [39], "3": [51, 52, 54], "4": [63, 64, 66], "5": [75, 76]}}, {"105": "guava-testlib/src/com/google/common/collect/testing/google/BiMapTestSuiteBuilder.java", "added": {"2": ["        BiMapTestSuiteBuilder<K, V>, TestBiMapGenerator<K, V>, BiMap<K, V>, Entry<K, V>> {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["        BiMapTestSuiteBuilder<K, V>, TestBiMapGenerator<K, V>, BiMap<K, V>, Map.Entry<K, V>> {\n"]}, "added_lines": {"2": [51]}, "removed_lines": {"1": [38], "2": [52]}}, {"106": "guava-testlib/src/com/google/common/collect/testing/google/DerivedGoogleCollectionGenerators.java", "added": {"1": ["    public SampleElements<Entry<K, V>> samples() {\n"], "2": ["    public Entry<K, V>[] createArray(int length) {\n", "    public Iterable<Entry<K, V>> order(List<Entry<K, V>> insertionOrder) {\n"], "3": ["    public SampleElements<Entry<V, K>> samples() {\n"], "4": ["    private Entry<V, K> reverse(Entry<K, V> entry) {\n"], "5": ["    public Entry<V, K>[] createArray(int length) {\n"], "6": ["    private final OneSizeTestContainerGenerator<BiMap<K, V>, Entry<K, V>> mapGenerator;\n", "      final SampleElements<Entry<K, V>> mapSamples = this.mapGenerator.samples();\n"], "7": ["      Collection<Entry<K, V>> originalEntries = mapGenerator.getSampleElements(elements.length);\n", "      Collection<Entry<K, V>> entries = new ArrayList<>(elements.length);\n", "      for (Entry<K, V> entry : originalEntries) {\n"]}, "removed": {"1": ["    public SampleElements<Map.Entry<K, V>> samples() {\n"], "2": ["    public Map.Entry<K, V>[] createArray(int length) {\n", "    public Iterable<Map.Entry<K, V>> order(List<Map.Entry<K, V>> insertionOrder) {\n"], "3": ["    public SampleElements<Map.Entry<V, K>> samples() {\n"], "4": ["    private Map.Entry<V, K> reverse(Map.Entry<K, V> entry) {\n"], "5": ["    public Map.Entry<V, K>[] createArray(int length) {\n"], "6": ["    private final OneSizeTestContainerGenerator<BiMap<K, V>, Map.Entry<K, V>> mapGenerator;\n", "      final SampleElements<Map.Entry<K, V>> mapSamples = this.mapGenerator.samples();\n"], "7": ["      Collection<Map.Entry<K, V>> originalEntries = mapGenerator.getSampleElements(elements.length);\n", "      Collection<Map.Entry<K, V>> entries = new ArrayList<>(elements.length);\n", "      for (Map.Entry<K, V> entry : originalEntries) {\n"]}, "added_lines": {"1": [53], "2": [63, 68], "3": [100], "4": [110], "5": [126], "6": [154, 160], "7": [181, 184, 186]}, "removed_lines": {"1": [53], "2": [63, 68], "3": [100], "4": [110], "5": [126], "6": [154, 160], "7": [181, 184, 186]}}, {"107": "guava-testlib/src/com/google/common/collect/testing/google/ListMultimapRemoveTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["      Entry<K, Collection<V>> asMapEntry = multimap().asMap().entrySet().iterator().next();\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["      Map.Entry<K, Collection<V>> asMapEntry = multimap().asMap().entrySet().iterator().next();\n"]}, "added_lines": {"1": [30], "2": [95]}, "removed_lines": {"1": [30], "2": [95]}}, {"108": "guava-testlib/src/com/google/common/collect/testing/google/MultimapKeySetTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<K, V> entry : getSampleElements()) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    for (Map.Entry<K, V> entry : getSampleElements()) {\n"]}, "added_lines": {"1": [29], "2": [39]}, "removed_lines": {"1": [29], "2": [39]}}, {"109": "guava-testlib/src/com/google/common/collect/testing/google/MultimapTestSuiteBuilder.java", "added": {"1": ["        MultimapTestSuiteBuilder<K, V, M>, TestMultimapGenerator<K, V, M>, M, Entry<K, V>> {\n"], "2": ["              ?, ? extends OneSizeTestContainerGenerator<M, Entry<K, V>>>\n"], "3": ["              ?, ? extends OneSizeTestContainerGenerator<M, Entry<K, V>>>\n"], "4": ["              ?, ? extends OneSizeTestContainerGenerator<M, Entry<K, V>>>\n"], "5": ["              ?, ? extends OneSizeTestContainerGenerator<M, Entry<K, V>>>\n"], "6": ["              ?, ? extends OneSizeTestContainerGenerator<M, Entry<K, V>>>\n"], "7": ["              ?, ? extends OneSizeTestContainerGenerator<M, Entry<K, V>>>\n"], "8": ["    for (Entry<Feature<?>, Feature<?>> entry : GET_FEATURE_MAP.entries()) {\n"], "9": ["    private final OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator;\n"], "10": ["      List<Entry<K, V>> builder = new ArrayList<>();\n", "        Entry<K, Collection<V>> entry = (Entry<K, Collection<V>>) o;\n"], "11": ["      List<Entry<K, V>> builder = new ArrayList<>();\n", "      Iterable<Entry<K, V>> ordered = multimapGenerator.order(builder);\n", "      for (Entry<K, V> entry : ordered) {\n"], "12": ["    private final OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator;\n"], "13": ["    private final OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator;\n"], "14": ["    private final OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator;\n"], "15": ["      Entry[] entries = new Entry[elements.length];\n"], "16": ["    final OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator;\n", "        OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator) {\n"], "17": ["        OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator) {\n"], "18": ["    private final OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator;\n", "        OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator) {\n", "    public SampleElements<Entry<K, V>> samples() {\n", "    public Entry<K, V>[] createArray(int length) {\n", "    public Iterable<Entry<K, V>> order(List<Entry<K, V>> insertionOrder) {\n"]}, "removed": {"1": ["        MultimapTestSuiteBuilder<K, V, M>, TestMultimapGenerator<K, V, M>, M, Map.Entry<K, V>> {\n"], "2": ["              ?, ? extends OneSizeTestContainerGenerator<M, Map.Entry<K, V>>>\n"], "3": ["              ?, ? extends OneSizeTestContainerGenerator<M, Map.Entry<K, V>>>\n"], "4": ["              ?, ? extends OneSizeTestContainerGenerator<M, Map.Entry<K, V>>>\n"], "5": ["              ?, ? extends OneSizeTestContainerGenerator<M, Map.Entry<K, V>>>\n"], "6": ["              ?, ? extends OneSizeTestContainerGenerator<M, Map.Entry<K, V>>>\n"], "7": ["              ?, ? extends OneSizeTestContainerGenerator<M, Map.Entry<K, V>>>\n"], "8": ["    for (Map.Entry<Feature<?>, Feature<?>> entry : GET_FEATURE_MAP.entries()) {\n"], "9": ["    private final OneSizeTestContainerGenerator<M, Map.Entry<K, V>> multimapGenerator;\n"], "10": ["      List<Map.Entry<K, V>> builder = new ArrayList<>();\n", "        Map.Entry<K, Collection<V>> entry = (Entry<K, Collection<V>>) o;\n"], "11": ["      List<Map.Entry<K, V>> builder = new ArrayList<>();\n", "      Iterable<Map.Entry<K, V>> ordered = multimapGenerator.order(builder);\n", "      for (Map.Entry<K, V> entry : ordered) {\n"], "12": ["    private final OneSizeTestContainerGenerator<M, Map.Entry<K, V>> multimapGenerator;\n"], "13": ["    private final OneSizeTestContainerGenerator<M, Map.Entry<K, V>> multimapGenerator;\n"], "14": ["    private final OneSizeTestContainerGenerator<M, Map.Entry<K, V>> multimapGenerator;\n"], "15": ["      Map.Entry[] entries = new Map.Entry[elements.length];\n"], "16": ["    final OneSizeTestContainerGenerator<M, Map.Entry<K, V>> multimapGenerator;\n", "        OneSizeTestContainerGenerator<M, Map.Entry<K, V>> multimapGenerator) {\n"], "17": ["        OneSizeTestContainerGenerator<M, Map.Entry<K, V>> multimapGenerator) {\n"], "18": ["    private final OneSizeTestContainerGenerator<M, Map.Entry<K, V>> multimapGenerator;\n", "        OneSizeTestContainerGenerator<M, Map.Entry<K, V>> multimapGenerator) {\n", "    public SampleElements<Map.Entry<K, V>> samples() {\n", "    public Map.Entry<K, V>[] createArray(int length) {\n", "    public Iterable<Map.Entry<K, V>> order(List<Map.Entry<K, V>> insertionOrder) {\n"]}, "added_lines": {"1": [68], "2": [105], "3": [141], "4": [153], "5": [165], "6": [177], "7": [194], "8": [282], "9": [309], "10": [342, 344], "11": [363, 370, 372], "12": [393], "13": [428], "14": [481], "15": [503], "16": [549, 552], "17": [604], "18": [624, 627, 632, 637, 642]}, "removed_lines": {"1": [68], "2": [105], "3": [141], "4": [153], "5": [165], "6": [177], "7": [194], "8": [282], "9": [309], "10": [342, 344], "11": [363, 370, 372], "12": [393], "13": [428], "14": [481], "15": [503], "16": [549, 552], "17": [604], "18": [624, 627, 632, 637, 642]}}, {"110": "guava-testlib/src/com/google/common/collect/testing/google/MultimapValuesTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<K, V> entry : getSampleElements()) {\n"], "3": ["    for (Entry<K, V> entry : getOrderedElements()) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    for (Map.Entry<K, V> entry : getSampleElements()) {\n"], "3": ["    for (Map.Entry<K, V> entry : getOrderedElements()) {\n"]}, "added_lines": {"1": [30], "2": [41], "3": [50]}, "removed_lines": {"1": [30], "2": [41], "3": [50]}}, {"111": "guava-testlib/src/com/google/common/collect/testing/google/SetMultimapTestSuiteBuilder.java", "added": {"2": ["              ?, ? extends OneSizeTestContainerGenerator<SetMultimap<K, V>, Entry<K, V>>>\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["              ?, ? extends OneSizeTestContainerGenerator<SetMultimap<K, V>, Map.Entry<K, V>>>\n"]}, "added_lines": {"2": [98]}, "removed_lines": {"1": [32], "2": [99]}}, {"112": "guava-testlib/src/com/google/common/collect/testing/google/TestBiMapGenerator.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    extends TestContainerGenerator<BiMap<K, V>, Entry<K, V>> {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    extends TestContainerGenerator<BiMap<K, V>, Map.Entry<K, V>> {\n"]}, "added_lines": {"1": [22], "2": [31]}, "removed_lines": {"1": [22], "2": [31]}}, {"113": "guava-testlib/src/com/google/common/collect/testing/google/TestMultimapGenerator.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    extends TestContainerGenerator<M, Entry<K, V>> {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    extends TestContainerGenerator<M, Map.Entry<K, V>> {\n"]}, "added_lines": {"1": [24], "2": [33]}, "removed_lines": {"1": [24], "2": [33]}}, {"114": "guava-testlib/src/com/google/common/collect/testing/google/TestStringBiMapGenerator.java", "added": {"2": ["  public SampleElements<Entry<String, String>> samples() {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["  public SampleElements<Map.Entry<String, String>> samples() {\n"]}, "added_lines": {"2": [39]}, "removed_lines": {"1": [24], "2": [40]}}, {"115": "guava-testlib/src/com/google/common/collect/testing/google/TestStringListMultimapGenerator.java", "added": {"2": ["  public SampleElements<Entry<String, String>> samples() {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["  public SampleElements<Map.Entry<String, String>> samples() {\n"]}, "added_lines": {"2": [37]}, "removed_lines": {"1": [25], "2": [38]}}, {"116": "guava-testlib/src/com/google/common/collect/testing/google/TestStringSetMultimapGenerator.java", "added": {"2": ["  public SampleElements<Entry<String, String>> samples() {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["  public SampleElements<Map.Entry<String, String>> samples() {\n"]}, "added_lines": {"2": [36]}, "removed_lines": {"1": [24], "2": [37]}}, {"117": "guava-testlib/src/com/google/common/collect/testing/testers/ConcurrentMapPutIfAbsentTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["  private V putIfAbsent(Entry<K, V> entry) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["  private V putIfAbsent(Map.Entry<K, V> entry) {\n"]}, "added_lines": {"1": [28], "2": [131]}, "removed_lines": {"1": [28], "2": [131]}}, {"118": "guava-testlib/src/com/google/common/collect/testing/testers/MapEqualsTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    Collection<Entry<K, V>> entries = getSampleEntries(getNumEntries() - 1);\n"], "3": ["    Collection<Entry<K, V>> entries = getSampleEntries(getNumEntries() - 1);\n"], "4": ["    Collection<Entry<K, V>> entries = getSampleEntries(getNumEntries() - 1);\n"], "5": ["    Collection<Entry<K, V>> entries = getSampleEntries(getNumEntries() - 1);\n"], "6": ["    Collection<Entry<K, V>> fewerEntries = getSampleEntries(getNumEntries() - 1);\n", "    Collection<Entry<K, V>> moreEntries = getSampleEntries(getNumEntries() + 1);\n"], "7": ["      Collection<? extends Entry<? extends K, ? extends V>> entries) {\n", "    for (Entry<? extends K, ? extends V> entry : entries) {\n"]}, "removed": {"2": ["    Collection<Map.Entry<K, V>> entries = getSampleEntries(getNumEntries() - 1);\n"], "3": ["    Collection<Map.Entry<K, V>> entries = getSampleEntries(getNumEntries() - 1);\n"], "4": ["    Collection<Map.Entry<K, V>> entries = getSampleEntries(getNumEntries() - 1);\n"], "5": ["    Collection<Map.Entry<K, V>> entries = getSampleEntries(getNumEntries() - 1);\n"], "6": ["    Collection<Map.Entry<K, V>> fewerEntries = getSampleEntries(getNumEntries() - 1);\n", "    Collection<Map.Entry<K, V>> moreEntries = getSampleEntries(getNumEntries() + 1);\n"], "7": ["      Collection<? extends Map.Entry<? extends K, ? extends V>> entries) {\n", "    for (Map.Entry<? extends K, ? extends V> entry : entries) {\n"]}, "added_lines": {"1": [30], "2": [57], "3": [69], "4": [81], "5": [93], "6": [104, 110], "7": [122, 124]}, "removed_lines": {"2": [56], "3": [68], "4": [80], "5": [92], "6": [103, 109], "7": [121, 123]}}, {"119": "guava-testlib/src/com/google/common/collect/testing/testers/MapHashCodeTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<K, V> entry : getSampleEntries()) {\n"], "3": ["    Entry<K, V> entryWithNull = entry(null, v3());\n", "    Entry<K, V> entryWithNull = entry(k3(), null);\n", "  private void runEntryWithNullTest(Entry<K, V> entryWithNull) {\n", "    Collection<Entry<K, V>> entries = getSampleEntries(getNumEntries() - 1);\n", "    for (Entry<K, V> entry : entries) {\n"], "4": ["  private static int hash(Entry<?, ?> e) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    for (Map.Entry<K, V> entry : getSampleEntries()) {\n"], "3": ["    Map.Entry<K, V> entryWithNull = entry(null, v3());\n", "    Map.Entry<K, V> entryWithNull = entry(k3(), null);\n", "  private void runEntryWithNullTest(Map.Entry<K, V> entryWithNull) {\n", "    Collection<Map.Entry<K, V>> entries = getSampleEntries(getNumEntries() - 1);\n", "    for (Map.Entry<K, V> entry : entries) {\n"], "4": ["  private static int hash(Map.Entry<?, ?> e) {\n"]}, "added_lines": {"1": [27], "2": [39], "3": [51, 58, 62, 63, 68], "4": [80]}, "removed_lines": {"1": [27], "2": [39], "3": [51, 58, 62, 63, 68], "4": [80]}}, {"120": "guava-testlib/src/com/google/common/collect/testing/testers/MapPutTester.java", "added": {"2": ["  private V put(Entry<K, V> entry) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["  private V put(Map.Entry<K, V> entry) {\n"]}, "added_lines": {"2": [247]}, "removed_lines": {"1": [34], "2": [248]}}, {"121": "guava-testlib/src/com/google/common/collect/testing/testers/MapToStringTester.java", "added": {"1": ["    for (Entry<K, V> entry : entries) {\n"]}, "removed": {"1": ["    for (Map.Entry<K, V> entry : entries) {\n"]}, "added_lines": {"1": [82]}, "removed_lines": {"1": [82]}}, {"122": "guava-testlib/src/com/google/common/testing/ClassSanityTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<Class<?>, Collection<Object>> entry : distinctValues.asMap().entrySet()) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    for (Map.Entry<Class<?>, Collection<Object>> entry : distinctValues.asMap().entrySet()) {\n"]}, "added_lines": {"1": [50], "2": [630]}, "removed_lines": {"1": [50], "2": [630]}}, {"123": "guava-testlib/test/com/google/common/collect/testing/MapTestSuiteBuilderTests.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["        Entry<String, String>[] entries) {\n", "      for (Entry<String, String> entry : entries) {\n"], "3": ["          @Override public Set<Entry<String, String>> entrySet() {\n"], "4": ["          @Override public Set<Entry<String, String>> entrySet() {\n"]}, "removed": {"2": ["        Map.Entry<String, String>[] entries) {\n", "      for (Map.Entry<String, String> entry : entries) {\n"], "3": ["          @Override public Set<Map.Entry<String, String>> entrySet() {\n"], "4": ["          @Override public Set<Map.Entry<String, String>> entrySet() {\n"]}, "added_lines": {"1": [34], "2": [60, 62], "3": [93], "4": [112]}, "removed_lines": {"2": [59, 61], "3": [92], "4": [111]}}, {"124": "guava-testlib/test/com/google/common/testing/FreshValueGeneratorTest.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["        List.class, Entry.class,\n"]}, "removed": {"2": ["        List.class, Map.Entry.class,\n"]}, "added_lines": {"1": [96], "2": [138]}, "removed_lines": {"2": [137]}}, {"125": "guava-tests/benchmark/com/google/common/collect/MapBenchmark.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["      for (Entry<Element, Element> entry : map.entrySet()) {\n"]}, "removed": {"2": ["      for (Map.Entry<Element, Element> entry : map.entrySet()) {\n"]}, "added_lines": {"1": [29], "2": [222]}, "removed_lines": {"2": [221]}}, {"126": "guava-tests/test/com/google/common/base/JoinerTest.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    Set<Entry<String, String>> entriesWithNulls = mapWithNulls.entrySet();\n"]}, "removed": {"2": ["    Set<Map.Entry<String, String>> entriesWithNulls = mapWithNulls.entrySet();\n"]}, "added_lines": {"1": [32], "2": [273]}, "removed_lines": {"2": [272]}}, {"127": "guava-tests/test/com/google/common/cache/CacheLoadingTest.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<Object, Object> entry : result.entrySet()) {\n"], "3": ["    for (Entry<Object, Object> entry : result.entrySet()) {\n"]}, "removed": {"2": ["    for (Map.Entry<Object, Object> entry : result.entrySet()) {\n"], "3": ["    for (Map.Entry<Object, Object> entry : result.entrySet()) {\n"]}, "added_lines": {"1": [47], "2": [444], "3": [482]}, "removed_lines": {"2": [443], "3": [481]}}, {"128": "guava-tests/test/com/google/common/cache/LocalLoadingCacheTest.java", "added": {"1": ["    //Set<Entry<Object, Object>> entries = map.entrySet();\n"]}, "removed": {"1": ["    //Set<Map.Entry<Object, Object>> entries = map.entrySet();\n"]}, "added_lines": {"1": [165]}, "removed_lines": {"1": [165]}}, {"129": "guava-tests/test/com/google/common/cache/PopulatedCachesTest.java", "added": {"1": ["  private List<Entry<Object, Object>> warmUp(LoadingCache<Object, Object> cache) {\n"], "2": ["  private List<Entry<Object, Object>> warmUp(\n", "    List<Entry<Object, Object>> entries = Lists.newArrayList();\n"]}, "removed": {"1": ["  private List<Map.Entry<Object, Object>> warmUp(LoadingCache<Object, Object> cache) {\n"], "2": ["  private List<Map.Entry<Object, Object>> warmUp(\n", "    List<Map.Entry<Object, Object>> entries = Lists.newArrayList();\n"]}, "added_lines": {"1": [339], "2": [347, 350]}, "removed_lines": {"1": [339], "2": [347, 350]}}, {"130": "guava-tests/test/com/google/common/collect/FilteredMultimapTest.java", "added": {"2": ["  private static final Predicate<Entry<String, Integer>> ENTRY_PREDICATE\n", "      = new Predicate<Entry<String, Integer>>() {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["  private static final Predicate<Map.Entry<String, Integer>> ENTRY_PREDICATE\n", "      = new Predicate<Map.Entry<String, Integer>>() {\n"]}, "added_lines": {"2": [33, 34]}, "removed_lines": {"1": [22], "2": [34, 35]}}, {"131": "guava-tests/test/com/google/common/collect/HashBiMapTest.java", "added": {"1": ["    Set<Entry<Integer, String>> entries = map.entrySet();\n", "    Iterator<Entry<Integer, String>> iterator = entries.iterator();\n", "    Entry<Integer, String> entry = iterator.next();\n"]}, "removed": {"1": ["    Set<Map.Entry<Integer, String>> entries = map.entrySet();\n", "    Iterator<Map.Entry<Integer, String>> iterator = entries.iterator();\n", "    Map.Entry<Integer, String> entry = iterator.next();\n"]}, "added_lines": {"1": [121, 122, 123]}, "removed_lines": {"1": [121, 122, 123]}}, {"132": "guava-tests/test/com/google/common/collect/ImmutableBiMapTest.java", "added": {"1": ["      Entry<Integer, Integer>[] builderArray = builder.entries;\n", "      Entry<Integer, Integer>[] builderArrayAfterPuts = builder.entries;\n", "      Entry<Integer, Integer>[] mapInternalArray = map.entries;\n"]}, "removed": {"1": ["      Map.Entry<Integer, Integer>[] builderArray = builder.entries;\n", "      Map.Entry<Integer, Integer>[] builderArrayAfterPuts = builder.entries;\n", "      Map.Entry<Integer, Integer>[] mapInternalArray = map.entries;\n"]}, "added_lines": {"1": [213, 217, 220]}, "removed_lines": {"1": [213, 217, 220]}}, {"133": "guava-tests/test/com/google/common/collect/ImmutableMapTest.java", "added": {"1": ["      Entry<Integer, Integer>[] builderArray = builder.entries;\n", "      Entry<Integer, Integer>[] builderArrayAfterPuts = builder.entries;\n", "      Entry<Integer, Integer>[] mapInternalArray = map.entries;\n"]}, "removed": {"1": ["      Map.Entry<Integer, Integer>[] builderArray = builder.entries;\n", "      Map.Entry<Integer, Integer>[] builderArrayAfterPuts = builder.entries;\n", "      Map.Entry<Integer, Integer>[] mapInternalArray = map.entries;\n"]}, "added_lines": {"1": [328, 332, 335]}, "removed_lines": {"1": [328, 332, 335]}}, {"134": "guava-tests/test/com/google/common/collect/ImmutableRangeMapTest.java", "added": {"2": ["            for (Entry<Range<Integer>, Integer> entry : rangeMap.asMapOfRanges().entrySet()) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["            for (Map.Entry<Range<Integer>, Integer> entry : rangeMap.asMapOfRanges().entrySet()) {\n"]}, "added_lines": {"2": [220]}, "removed_lines": {"1": [22], "2": [221]}}, {"135": "guava-tests/test/com/google/common/collect/LinkedHashMultimapTest.java", "added": {"2": ["    Iterator<Entry<String, Integer>> entryIterator =\n"], "3": ["    Iterator<Entry<String, Collection<Integer>>> collectionIterator =\n", "    Entry<String, Collection<Integer>> entry = collectionIterator.next();\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    Iterator<Map.Entry<String, Integer>> entryIterator =\n"], "3": ["    Iterator<Map.Entry<String, Collection<Integer>>> collectionIterator =\n", "    Map.Entry<String, Collection<Integer>> entry = collectionIterator.next();\n"]}, "added_lines": {"2": [168], "3": [176, 178]}, "removed_lines": {"1": [42], "2": [169], "3": [177, 179]}}, {"136": "guava-tests/test/com/google/common/collect/LinkedListMultimapTest.java", "added": {"2": ["    Iterator<Entry<String, Integer>> entries = map.entries().iterator();\n", "    Entry<String, Integer> entry = entries.next();\n"], "3": ["    Iterator<Entry<String, Collection<Integer>>> entries\n", "    Entry<String, Collection<Integer>> entry = entries.next();\n"], "4": ["    Collection<Entry<String, Integer>> entries = multimap.entries();\n", "    Iterator<Entry<String, Integer>> iterator = entries.iterator();\n", "    Entry<String, Integer> entrya = iterator.next();\n", "    Entry<String, Integer> entryb = iterator.next();\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    Iterator<Map.Entry<String, Integer>> entries = map.entries().iterator();\n", "    Map.Entry<String, Integer> entry = entries.next();\n"], "3": ["    Iterator<Map.Entry<String, Collection<Integer>>> entries\n", "    Map.Entry<String, Collection<Integer>> entry = entries.next();\n"], "4": ["    Collection<Map.Entry<String, Integer>> entries = multimap.entries();\n", "    Iterator<Map.Entry<String, Integer>> iterator = entries.iterator();\n", "    Map.Entry<String, Integer> entrya = iterator.next();\n", "    Map.Entry<String, Integer> entryb = iterator.next();\n"]}, "added_lines": {"2": [278, 279], "3": [299, 301], "4": [320, 321, 322, 323]}, "removed_lines": {"1": [44], "2": [279, 280], "3": [300, 302], "4": [321, 322, 323, 324]}}, {"137": "guava-tests/test/com/google/common/collect/MapsCollectionTest.java", "added": {"1": ["                      Entry<?, ?> entry = (Entry<?, ?>) e;\n"]}, "removed": {"1": ["                      Map.Entry<?, ?> entry = (Entry<?, ?>) e;\n"]}, "added_lines": {"1": [253]}, "removed_lines": {"1": [253]}}, {"138": "guava-tests/test/com/google/common/collect/MapsTest.java", "added": {"1": ["    Set<Entry<Number, String>> entries = unmod.entrySet();\n", "    Entry<Number, String> entry = entries.iterator().next();\n", "    Entry<Integer, String> entry2\n", "        = (Entry<Integer, String>) entries.toArray()[0];\n"], "2": ["    Entry<String, Integer> e = Maps.immutableEntry(\"foo\", 1);\n"], "3": ["    Entry<String, Integer> e\n"], "4": ["    Set<Entry<Integer, String>> entries = unmod.entrySet();\n", "      Iterator<Entry<Integer, String>> iterator = entries.iterator();\n", "    Entry<Integer, String> entry = entries.iterator().next();\n"], "5": ["    Entry<Integer, String> entry2 =\n", "        (Entry<Integer, String>) entries.toArray()[0];\n"]}, "removed": {"1": ["    Set<Map.Entry<Number, String>> entries = unmod.entrySet();\n", "    Map.Entry<Number, String> entry = entries.iterator().next();\n", "    Map.Entry<Integer, String> entry2\n", "        = (Map.Entry<Integer, String>) entries.toArray()[0];\n"], "2": ["    Map.Entry<String, Integer> e = Maps.immutableEntry(\"foo\", 1);\n"], "3": ["    Map.Entry<String, Integer> e\n"], "4": ["    Set<Map.Entry<Integer, String>> entries = unmod.entrySet();\n", "      Iterator<Map.Entry<Integer, String>> iterator = entries.iterator();\n", "    Map.Entry<Integer, String> entry = entries.iterator().next();\n"], "5": ["    Map.Entry<Integer, String> entry2 =\n", "        (Map.Entry<Integer, String>) entries.toArray()[0];\n"]}, "added_lines": {"1": [1274, 1275, 1281, 1282], "2": [1290], "3": [1302], "4": [1789, 1791, 1797], "5": [1842, 1843]}, "removed_lines": {"1": [1274, 1275, 1281, 1282], "2": [1290], "3": [1302], "4": [1789, 1791, 1797], "5": [1842, 1843]}}, {"139": "guava-tests/test/com/google/common/collect/MapsTransformValuesTest.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    Set<Entry<String, String>> entries = map.entrySet();\n", "    Entry<String, String> firstEntry = entries.iterator().next();\n", "    Iterator<Entry<String, String>> entryIterator = entries.iterator();\n"], "3": ["    Set<Entry<String, Boolean>> entries = map.entrySet();\n"]}, "removed": {"2": ["    Set<Map.Entry<String, String>> entries = map.entrySet();\n", "    Map.Entry<String, String> firstEntry = entries.iterator().next();\n", "    Iterator<Map.Entry<String, String>> entryIterator = entries.iterator();\n"], "3": ["    Set<Map.Entry<String, Boolean>> entries = map.entrySet();\n"]}, "added_lines": {"1": [26], "2": [224, 225, 229], "3": [280]}, "removed_lines": {"2": [223, 224, 228], "3": [279]}}, {"140": "guava-tests/test/com/google/common/collect/MapsTransformValuesUnmodifiableIteratorTest.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    Set<Entry<String, String>> entries = map.entrySet();\n", "    Entry<String, String> firstEntry = entries.iterator().next();\n", "    Iterator<Entry<String, String>> entryIterator = entries.iterator();\n"], "3": ["    Set<Entry<String, Boolean>> entries = map.entrySet();\n"]}, "removed": {"2": ["    Set<Map.Entry<String, String>> entries = map.entrySet();\n", "    Map.Entry<String, String> firstEntry = entries.iterator().next();\n", "    Iterator<Map.Entry<String, String>> entryIterator = entries.iterator();\n"], "3": ["    Set<Map.Entry<String, Boolean>> entries = map.entrySet();\n"]}, "added_lines": {"1": [26], "2": [277, 278, 282], "3": [333]}, "removed_lines": {"2": [276, 277, 281], "3": [332]}}, {"141": "guava-tests/test/com/google/common/collect/MultimapsCollectionTest.java", "added": {"1": ["  private static final Predicate<Entry<Integer, String>> FILTER_GET_PREDICATE\n", "      = new Predicate<Entry<Integer, String>>() {\n", "  private static final Predicate<Entry<String, Integer>> FILTER_KEYSET_PREDICATE\n", "    = new Predicate<Entry<String, Integer>>() {\n"]}, "removed": {"1": ["  private static final Predicate<Map.Entry<Integer, String>> FILTER_GET_PREDICATE\n", "      = new Predicate<Map.Entry<Integer, String>>() {\n", "  private static final Predicate<Map.Entry<String, Integer>> FILTER_KEYSET_PREDICATE\n", "    = new Predicate<Map.Entry<String, Integer>>() {\n"]}, "added_lines": {"1": [222, 223, 229, 230]}, "removed_lines": {"1": [222, 223, 229, 230]}}, {"142": "guava-tests/test/com/google/common/collect/MultimapsFilterEntriesAsMapTest.java", "added": {"1": ["  private static final Predicate<Entry<String, Integer>> PREDICATE\n", "      = new Predicate<Entry<String, Integer>>() {\n"]}, "removed": {"1": ["  private static final Predicate<Map.Entry<String, Integer>> PREDICATE\n", "      = new Predicate<Map.Entry<String, Integer>>() {\n"]}, "added_lines": {"1": [33, 34]}, "removed_lines": {"1": [33, 34]}}, {"143": "guava-tests/test/com/google/common/collect/SynchronizedMapTest.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    Set<Entry<String, Integer>> entrySet = map.entrySet();\n"]}, "removed": {"2": ["    Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\n"]}, "added_lines": {"1": [28], "2": [197]}, "removed_lines": {"2": [196]}}, {"144": "guava-tests/test/com/google/common/collect/SynchronizedMultimapTest.java", "added": {"1": ["    @Override public Set<Entry<K, V>> entries() {\n"]}, "removed": {"1": ["    @Override public Set<Map.Entry<K, V>> entries() {\n"]}, "added_lines": {"1": [187]}, "removed_lines": {"1": [187]}}, {"145": "guava-tests/test/com/google/common/collect/TreeBasedTableTest.java", "added": {"1": ["    Set<Entry<Integer, Character>> entrySet = row.entrySet();\n"], "2": ["    Set<Entry<Integer, Character>> entrySet = row.tailMap(15).entrySet();\n"]}, "removed": {"1": ["    Set<Map.Entry<Integer, Character>> entrySet = row.entrySet();\n"], "2": ["    Set<Map.Entry<Integer, Character>> entrySet = row.tailMap(15).entrySet();\n"]}, "added_lines": {"1": [400], "2": [417]}, "removed_lines": {"1": [400], "2": [417]}}, {"146": "guava-tests/test/com/google/common/collect/TreeMultimapExplicitTest.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    Iterator<Entry<String, Collection<Integer>>> iterator =\n", "    Entry<String, Collection<Integer>> entry = iterator.next();\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    Iterator<Map.Entry<String, Collection<Integer>>> iterator =\n", "    Map.Entry<String, Collection<Integer>> entry = iterator.next();\n"]}, "added_lines": {"1": [28], "2": [143, 145]}, "removed_lines": {"1": [28], "2": [143, 145]}}, {"147": "guava-tests/test/com/google/common/collect/TreeMultimapNaturalTest.java", "added": {"2": ["    Iterator<Entry<String, Collection<Integer>>> iterator =\n", "    Entry<String, Collection<Integer>> entry = iterator.next();\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    Iterator<Map.Entry<String, Collection<Integer>>> iterator =\n", "    Map.Entry<String, Collection<Integer>> entry = iterator.next();\n"]}, "added_lines": {"2": [305, 307]}, "removed_lines": {"1": [44], "2": [306, 308]}}, {"148": "guava-tests/test/com/google/common/collect/TreeRangeMapTest.java", "added": {"1": ["          for (Entry<Range<Integer>, Integer> entry : rangeMap.asMapOfRanges().entrySet()) {\n"], "2": ["      Entry<Range<Integer>, Integer> entry = test.getEntry(i);\n"]}, "removed": {"1": ["          for (Map.Entry<Range<Integer>, Integer> entry : rangeMap.asMapOfRanges().entrySet()) {\n"], "2": ["      Map.Entry<Range<Integer>, Integer> entry = test.getEntry(i);\n"]}, "added_lines": {"1": [536], "2": [689]}, "removed_lines": {"1": [536], "2": [689]}}, {"149": "guava-tests/test/com/google/common/collect/WellBehavedMapTest.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<Foo, Integer> entry : map.entrySet()) {\n"], "3": ["    Entry<Foo, Integer> entry1 = Iterables.getOnlyElement(map.entrySet());\n", "    Entry<Foo, Integer> entry2 = Iterables.getOnlyElement(map.entrySet());\n", "    Set<Entry<Foo, Integer>> entrySet = map.entrySet();\n"], "4": ["    Set<Entry<Foo, Integer>> entrySet = map.entrySet();\n", "    Entry<Foo, Integer> entry = Maps.immutableEntry(Foo.Y, 2);\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    for (Map.Entry<Foo, Integer> entry : map.entrySet()) {\n"], "3": ["    Map.Entry<Foo, Integer> entry1 = Iterables.getOnlyElement(map.entrySet());\n", "    Map.Entry<Foo, Integer> entry2 = Iterables.getOnlyElement(map.entrySet());\n", "    Set<Map.Entry<Foo, Integer>> entrySet = map.entrySet();\n"], "4": ["    Set<Map.Entry<Foo, Integer>> entrySet = map.entrySet();\n", "    Map.Entry<Foo, Integer> entry = Maps.immutableEntry(Foo.Y, 2);\n"]}, "added_lines": {"1": [21], "2": [52], "3": [64, 65, 70], "4": [90, 93]}, "removed_lines": {"1": [21], "2": [52], "3": [64, 65, 70], "4": [90, 93]}}, {"150": "guava-tests/test/com/google/common/io/ByteSinkTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<String, String> entry : TEST_STRINGS.entrySet()) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    for (Map.Entry<String, String> entry : TEST_STRINGS.entrySet()) {\n"]}, "added_lines": {"1": [29], "2": [47]}, "removed_lines": {"1": [29], "2": [47]}}, {"151": "guava-tests/test/com/google/common/io/ByteSourceTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<String, String> entry : TEST_STRINGS.entrySet()) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    for (Map.Entry<String, String> entry : TEST_STRINGS.entrySet()) {\n"]}, "added_lines": {"1": [34], "2": [54]}, "removed_lines": {"1": [34], "2": [54]}}, {"152": "guava-tests/test/com/google/common/io/CharSinkTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<String, String> entry : TEST_STRINGS.entrySet()) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    for (Map.Entry<String, String> entry : TEST_STRINGS.entrySet()) {\n"]}, "added_lines": {"1": [25], "2": [42]}, "removed_lines": {"1": [25], "2": [42]}}, {"153": "guava-tests/test/com/google/common/io/CharSourceTester.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<String, String> entry : TEST_STRINGS.entrySet()) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["    for (Map.Entry<String, String> entry : TEST_STRINGS.entrySet()) {\n"]}, "added_lines": {"1": [33], "2": [52]}, "removed_lines": {"1": [33], "2": [52]}}, {"154": "guava-tests/test/com/google/common/reflect/TypesTest.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["        new TypeCapture<Entry<String, Integer>>() {}.capture();\n", "        Entry.class, String.class, Integer.class);\n"], "3": ["        new TypeCapture<Entry<String, int[][]>>() {}.capture();\n", "        Map.class, Entry.class, String.class, int[][].class);\n", "        .addEqualityGroup(new TypeCapture<Entry<String, String>>() {}.capture())\n", "    assertEquals(Entry.class, ourType.getRawType());\n"], "4": ["        Entry.class, String.class, Integer.class));\n"], "5": ["        Types.newParameterizedType(Entry.class, String.class, Integer.class),\n", "            null, Entry.class, String.class, Integer.class));\n", "          Map.class, Entry.class, String.class);\n"], "6": ["          Map.class, Entry.class, int.class, int.class);\n"]}, "removed": {"2": ["        new TypeCapture<Map.Entry<String, Integer>>() {}.capture();\n", "        Map.Entry.class, String.class, Integer.class);\n"], "3": ["        new TypeCapture<Map.Entry<String, int[][]>>() {}.capture();\n", "        Map.class, Map.Entry.class, String.class, int[][].class);\n", "        .addEqualityGroup(new TypeCapture<Map.Entry<String, String>>() {}.capture())\n", "    assertEquals(Map.Entry.class, ourType.getRawType());\n"], "4": ["        Map.Entry.class, String.class, Integer.class));\n"], "5": ["        Types.newParameterizedType(Map.Entry.class, String.class, Integer.class),\n", "            null, Map.Entry.class, String.class, Integer.class));\n", "          Map.class, Map.Entry.class, String.class);\n"], "6": ["          Map.class, Map.Entry.class, int.class, int.class);\n"]}, "added_lines": {"1": [37], "2": [49, 51], "3": [97, 99, 103, 108], "4": [117], "5": [130, 132, 138], "6": [146]}, "removed_lines": {"2": [48, 50], "3": [96, 98, 102, 107], "4": [116], "5": [129, 131, 137], "6": [145]}}, {"155": "guava-tests/test/com/google/common/util/concurrent/ListenerCallQueueTest.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<T, Integer> entry : counts.entrySet()) {\n"]}, "removed": {"2": ["    for (Map.Entry<T, Integer> entry : counts.entrySet()) {\n"]}, "added_lines": {"1": [27], "2": [200]}, "removed_lines": {"2": [199]}}, {"156": "guava/src/com/google/common/cache/AbstractCache.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<? extends K, ? extends V> entry : m.entrySet()) {\n"]}, "removed": {"2": ["    for (Map.Entry<? extends K, ? extends V> entry : m.entrySet()) {\n"]}, "added_lines": {"1": [21], "2": [92]}, "removed_lines": {"2": [91]}}, {"157": "guava/src/com/google/common/cache/LocalCache.java", "added": {"1": ["    for (Entry<K, V> entry : result.entrySet()) {\n"]}, "removed": {"1": ["    for (Map.Entry<K, V> entry : result.entrySet()) {\n"]}, "added_lines": {"1": [4264]}, "removed_lines": {"1": [4264]}}, {"158": "guava/src/com/google/common/cache/RemovalNotification.java", "added": {"1": [" * <p>Like other {@code Entry} instances associated with {@code CacheBuilder}, this class holds\n"]}, "removed": {"1": [" * <p>Like other {@code Map.Entry} instances associated with {@code CacheBuilder}, this class holds\n"]}, "added_lines": {"1": [27]}, "removed_lines": {"1": [27]}}, {"159": "guava/src/com/google/common/collect/AbstractMapBasedMultimap.java", "added": {"1": ["      final Iterator<Entry<K, Collection<V>>> entryIterator = map().entrySet().iterator();\n", "        Entry<K, Collection<V>> entry;\n"], "2": ["    final Iterator<Entry<K, Collection<V>>> keyIterator;\n"], "3": ["        Entry<K, Collection<V>> mapEntry = keyIterator.next();\n"], "4": ["  public Collection<Entry<K, V>> entries() {\n"], "5": ["  Iterator<Entry<K, V>> entryIterator() {\n", "    return new Itr<Entry<K, V>>() {\n"], "6": ["      public Iterator<Entry<K, Collection<V>>> iterator() {\n"], "7": ["        Entry<?, ?> entry = (Entry<?, ?>) o;\n", "    class AsMapIterator implements Iterator<Entry<K, Collection<V>>> {\n", "      final Iterator<Entry<K, Collection<V>>> delegateIterator = submap.entrySet().iterator();\n"], "8": ["      public Entry<K, Collection<V>> next() {\n", "        Entry<K, Collection<V>> entry = delegateIterator.next();\n"], "9": ["    Entry<K, Collection<V>> pollAsMapEntry(Iterator<Entry<K, Collection<V>>> entryIterator) {\n"]}, "removed": {"1": ["      final Iterator<Map.Entry<K, Collection<V>>> entryIterator = map().entrySet().iterator();\n", "        Map.Entry<K, Collection<V>> entry;\n"], "2": ["    final Iterator<Map.Entry<K, Collection<V>>> keyIterator;\n"], "3": ["        Map.Entry<K, Collection<V>> mapEntry = keyIterator.next();\n"], "4": ["  public Collection<Map.Entry<K, V>> entries() {\n"], "5": ["  Iterator<Map.Entry<K, V>> entryIterator() {\n", "    return new Itr<Map.Entry<K, V>>() {\n"], "6": ["      public Iterator<Map.Entry<K, Collection<V>>> iterator() {\n"], "7": ["        Map.Entry<?, ?> entry = (Map.Entry<?, ?>) o;\n", "    class AsMapIterator implements Iterator<Map.Entry<K, Collection<V>>> {\n", "      final Iterator<Map.Entry<K, Collection<V>>> delegateIterator = submap.entrySet().iterator();\n"], "8": ["      public Map.Entry<K, Collection<V>> next() {\n", "        Map.Entry<K, Collection<V>> entry = delegateIterator.next();\n"], "9": ["    Map.Entry<K, Collection<V>> pollAsMapEntry(Iterator<Entry<K, Collection<V>>> entryIterator) {\n"]}, "added_lines": {"1": [949, 951], "2": [1155], "3": [1177], "4": [1239], "5": [1252, 1253], "6": [1389], "7": [1410, 1417, 1418], "8": [1427, 1428], "9": [1575]}, "removed_lines": {"1": [949, 951], "2": [1155], "3": [1177], "4": [1239], "5": [1252, 1253], "6": [1389], "7": [1410, 1417, 1418], "8": [1427, 1428], "9": [1575]}}, {"160": "guava/src/com/google/common/collect/AbstractMultimap.java", "added": {"1": ["    for (Entry<? extends K, ? extends V> entry : multimap.entries()) {\n"]}, "removed": {"1": ["    for (Map.Entry<? extends K, ? extends V> entry : multimap.entries()) {\n"]}, "added_lines": {"1": [95]}, "removed_lines": {"1": [95]}}, {"161": "guava/src/com/google/common/collect/AbstractSetMultimap.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["  public Set<Entry<K, V>> entries() {\n", "    return (Set<Entry<K, V>>) super.entries();\n"]}, "removed": {"2": ["  public Set<Map.Entry<K, V>> entries() {\n", "    return (Set<Map.Entry<K, V>>) super.entries();\n"]}, "added_lines": {"1": [23], "2": [77, 78]}, "removed_lines": {"2": [76, 77]}}, {"162": "guava/src/com/google/common/collect/FilteredMultimapValues.java", "added": {"2": ["      Entry<K, V> entry = unfilteredItr.next();\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["      Map.Entry<K, V> entry = unfilteredItr.next();\n"]}, "added_lines": {"2": [64]}, "removed_lines": {"1": [27], "2": [65]}}, {"163": "guava/src/com/google/common/collect/ForwardingMapEntry.java", "added": {"1": ["  protected abstract Entry<K, V> delegate();\n"]}, "removed": {"1": ["  protected abstract Map.Entry<K, V> delegate();\n"]}, "added_lines": {"1": [60]}, "removed_lines": {"1": [60]}}, {"164": "guava/src/com/google/common/collect/ImmutableMap.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["   * <p>A call to {@link Entry#setValue} on the returned entry will always throw {@link\n"], "3": ["    for (Entry<?, ?> entry : copy.entrySet()) {\n"]}, "removed": {"2": ["   * <p>A call to {@link Map.Entry#setValue} on the returned entry will always throw {@link\n"], "3": ["    for (Map.Entry<?, ?> entry : copy.entrySet()) {\n"]}, "added_lines": {"1": [39], "2": [173], "3": [457]}, "removed_lines": {"2": [172], "3": [456]}}, {"165": "guava/src/com/google/common/collect/ImmutableMapEntry.java", "added": {"1": [" * Implementation of {@code Entry} for {@link ImmutableMap} that adds extra methods to traverse\n"]}, "removed": {"1": [" * Implementation of {@code Map.Entry} for {@link ImmutableMap} that adds extra methods to traverse\n"]}, "added_lines": {"1": [25]}, "removed_lines": {"1": [25]}}, {"166": "guava/src/com/google/common/collect/ImmutableRangeMap.java", "added": {"1": ["    private final List<Entry<Range<K>, V>> entries;\n"], "2": ["  public Entry<Range<K>, V> getEntry(K key) {\n"]}, "removed": {"1": ["    private final List<Map.Entry<Range<K>, V>> entries;\n"], "2": ["  public Map.Entry<Range<K>, V> getEntry(K key) {\n"]}, "added_lines": {"1": [108], "2": [199]}, "removed_lines": {"1": [108], "2": [199]}}, {"167": "guava/src/com/google/common/collect/ImmutableSetMultimap.java", "added": {"2": ["        List<Entry<K, Collection<V>>> entries =\n", "        for (Entry<K, Collection<V>> entry : entries) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["        List<Map.Entry<K, Collection<V>>> entries =\n", "        for (Map.Entry<K, Collection<V>> entry : entries) {\n"]}, "added_lines": {"2": [368, 372]}, "removed_lines": {"1": [38], "2": [369, 373]}}, {"168": "guava/src/com/google/common/collect/LinkedHashMultimap.java", "added": {"1": ["  public Set<Entry<K, V>> entries() {\n"], "2": ["  Iterator<Entry<K, V>> entryIterator() {\n", "    return new Iterator<Entry<K, V>>() {\n"], "3": ["      public Entry<K, V> next() {\n"], "4": ["    for (Entry<K, V> entry : entries()) {\n"]}, "removed": {"1": ["  public Set<Map.Entry<K, V>> entries() {\n"], "2": ["  Iterator<Map.Entry<K, V>> entryIterator() {\n", "    return new Iterator<Map.Entry<K, V>>() {\n"], "3": ["      public Map.Entry<K, V> next() {\n"], "4": ["    for (Map.Entry<K, V> entry : entries()) {\n"]}, "added_lines": {"1": [296], "2": [534, 535], "3": [545], "4": [597]}, "removed_lines": {"1": [296], "2": [534, 535], "3": [545], "4": [597]}}, {"169": "guava/src/com/google/common/collect/MapMaker.java", "added": {"1": [" * to the user. Any {@link java.util.Entry} instance retrieved from the map's\n", " * such entries do, however, support {@link java.util.Entry#setValue}, which simply calls\n"]}, "removed": {"1": [" * to the user. Any {@link java.util.Map.Entry} instance retrieved from the map's\n", " * such entries do, however, support {@link java.util.Map.Entry#setValue}, which simply calls\n"]}, "added_lines": {"1": [67, 69]}, "removed_lines": {"1": [67, 69]}}, {"170": "guava/src/com/google/common/collect/Maps.java", "added": {"1": ["    Iterator<? extends Entry<K, ? extends V>> entryItr = map.entrySet().iterator();\n", "    Entry<K, ? extends V> entry1 = entryItr.next();\n"], "2": ["   * map entries. If {@code o} is an instance of {@code Entry}, it is\n"], "3": ["   * map entries. If {@code o} is an instance of {@code Entry}, it is\n"], "4": ["    for (Entry<?, ?> entry : map.entrySet()) {\n"], "5": ["    for (Entry<? extends K, ? extends V> entry : map.entrySet()) {\n"]}, "removed": {"1": ["    Iterator<? extends Map.Entry<K, ? extends V>> entryItr = map.entrySet().iterator();\n", "    Map.Entry<K, ? extends V> entry1 = entryItr.next();\n"], "2": ["   * map entries. If {@code o} is an instance of {@code Map.Entry}, it is\n"], "3": ["   * map entries. If {@code o} is an instance of {@code Map.Entry}, it is\n"], "4": ["    for (Map.Entry<?, ?> entry : map.entrySet()) {\n"], "5": ["    for (Map.Entry<? extends K, ? extends V> entry : map.entrySet()) {\n"]}, "added_lines": {"1": [147, 151], "2": [3753], "3": [3773], "4": [3810], "5": [3824]}, "removed_lines": {"1": [147, 151], "2": [3753], "3": [3773], "4": [3810], "5": [3824]}}, {"171": "guava/src/com/google/common/collect/Multimap.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["   * multimap, as {@link Entry} instances.\n", "  Collection<Entry<K, V>> entries();\n"], "3": ["   * Entry#setValue setValue}.\n"]}, "removed": {"2": ["   * multimap, as {@link Map.Entry} instances.\n", "  Collection<Map.Entry<K, V>> entries();\n"], "3": ["   * Map.Entry#setValue setValue}.\n"]}, "added_lines": {"1": [27], "2": [346, 352], "3": [379]}, "removed_lines": {"2": [345, 351], "3": [378]}}, {"172": "guava/src/com/google/common/collect/Ordering.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["  <T2 extends T> Ordering<Entry<T2, ?>> onKeys() {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["  <T2 extends T> Ordering<Map.Entry<T2, ?>> onKeys() {\n"]}, "added_lines": {"1": [33], "2": [449]}, "removed_lines": {"1": [33], "2": [449]}}, {"173": "guava/src/com/google/common/collect/RangeMap.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["  Entry<Range<K>, V> getEntry(K key);\n"]}, "removed": {"2": ["  Map.Entry<Range<K>, V> getEntry(K key);\n"]}, "added_lines": {"1": [23], "2": [55]}, "removed_lines": {"2": [54]}}, {"174": "guava/src/com/google/common/collect/SetMultimap.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["  Set<Entry<K, V>> entries();\n"]}, "removed": {"2": ["  Set<Map.Entry<K, V>> entries();\n"]}, "added_lines": {"1": [23], "2": [98]}, "removed_lines": {"2": [97]}}, {"175": "guava/src/com/google/common/collect/SparseImmutableTable.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<R, Map<C, V>> row : rows.entrySet()) {\n", "    for (Entry<C, Map<R, V>> col : columns.entrySet()) {\n"], "3": ["    Entry<R, Map<C, V>> rowEntry = rowMap.entrySet().asList().get(rowIndex);\n", "    Entry<C, V> colEntry = row.entrySet().asList().get(columnIndex);\n"]}, "removed": {"2": ["    for (Map.Entry<R, Map<C, V>> row : rows.entrySet()) {\n", "    for (Map.Entry<C, Map<R, V>> col : columns.entrySet()) {\n"], "3": ["    Map.Entry<R, Map<C, V>> rowEntry = rowMap.entrySet().asList().get(rowIndex);\n", "    Map.Entry<C, V> colEntry = row.entrySet().asList().get(columnIndex);\n"]}, "added_lines": {"1": [20], "2": [82, 88], "3": [112, 115]}, "removed_lines": {"2": [81, 87], "3": [111, 114]}}, {"176": "guava/src/com/google/common/collect/StandardTable.java", "added": {"1": ["        (Entry<R, Map<C, V>> rowEntry) ->\n", "                (Entry<C, V> columnEntry) ->\n"]}, "removed": {"1": ["        (Map.Entry<R, Map<C, V>> rowEntry) ->\n", "                (Map.Entry<C, V> columnEntry) ->\n"]}, "added_lines": {"1": [272, 275]}, "removed_lines": {"1": [272, 275]}}, {"177": "guava/src/com/google/common/collect/Synchronized.java", "added": {"1": ["    transient Collection<Entry<K, V>> entries;\n"], "2": ["    public Collection<Entry<K, V>> entries() {\n"], "3": ["    transient Set<Entry<K, V>> entrySet;\n"], "4": ["    public Set<Entry<K, V>> entries() {\n"], "5": ["      extends SynchronizedSet<Entry<K, Collection<V>>> {\n", "    SynchronizedAsMapEntries(Set<Entry<K, Collection<V>>> delegate, @Nullable Object mutex) {\n", "    public Iterator<Entry<K, Collection<V>>> iterator() {\n", "      return new TransformedIterator<Entry<K, Collection<V>>, Entry<K, Collection<V>>>(\n", "        Entry<K, Collection<V>> transform(final Entry<K, Collection<V>> entry) {\n", "            protected Entry<K, Collection<V>> delegate() {\n"], "6": ["    transient Set<Entry<K, V>> entrySet;\n"], "7": ["    public Set<Entry<K, V>> entrySet() {\n"], "8": ["    transient Set<Entry<K, Collection<V>>> asMapEntrySet;\n"], "9": ["    public Set<Entry<K, Collection<V>>> entrySet() {\n"]}, "removed": {"1": ["    transient Collection<Map.Entry<K, V>> entries;\n"], "2": ["    public Collection<Map.Entry<K, V>> entries() {\n"], "3": ["    transient Set<Map.Entry<K, V>> entrySet;\n"], "4": ["    public Set<Map.Entry<K, V>> entries() {\n"], "5": ["      extends SynchronizedSet<Map.Entry<K, Collection<V>>> {\n", "    SynchronizedAsMapEntries(Set<Map.Entry<K, Collection<V>>> delegate, @Nullable Object mutex) {\n", "    public Iterator<Map.Entry<K, Collection<V>>> iterator() {\n", "      return new TransformedIterator<Map.Entry<K, Collection<V>>, Map.Entry<K, Collection<V>>>(\n", "        Map.Entry<K, Collection<V>> transform(final Map.Entry<K, Collection<V>> entry) {\n", "            protected Map.Entry<K, Collection<V>> delegate() {\n"], "6": ["    transient Set<Map.Entry<K, V>> entrySet;\n"], "7": ["    public Set<Map.Entry<K, V>> entrySet() {\n"], "8": ["    transient Set<Map.Entry<K, Collection<V>>> asMapEntrySet;\n"], "9": ["    public Set<Map.Entry<K, Collection<V>>> entrySet() {\n"]}, "added_lines": {"1": [578], "2": [704], "3": [812], "4": [845], "5": [930, 931, 936, 938, 941, 944], "6": [1029], "7": [1063], "8": [1350], "9": [1366]}, "removed_lines": {"1": [578], "2": [704], "3": [812], "4": [845], "5": [930, 931, 936, 938, 941, 944], "6": [1029], "7": [1063], "8": [1350], "9": [1366]}}, {"178": "guava/src/com/google/common/collect/Tables.java", "added": {"1": ["   *   Iterator<Entry<C, V>> i = row.entrySet().iterator(); // Must be in synchronized block\n"]}, "removed": {"1": ["   *   Iterator<Map.Entry<C, V>> i = row.entrySet().iterator(); // Must be in synchronized block\n"]}, "added_lines": {"1": [719]}, "removed_lines": {"1": [719]}}, {"179": "guava/src/com/google/common/collect/TreeRangeMap.java", "added": {"1": ["    Entry<Cut<K>, RangeMapEntry<K, V>> mapEntry =\n"], "2": ["    Entry<Cut<K>, RangeMapEntry<K, V>> lowerEntry =\n", "    Entry<Cut<K>, RangeMapEntry<K, V>> higherEntry =\n"], "3": ["      Range<K> range, V value, @Nullable Entry<Cut<K>, RangeMapEntry<K, V>> entry) {\n"], "4": ["    for (Entry<Range<K>, V> entry : rangeMap.asMapOfRanges().entrySet()) {\n"], "5": ["    Entry<Cut<K>, RangeMapEntry<K, V>> mapEntryBelowToTruncate =\n"], "6": ["    Entry<Cut<K>, RangeMapEntry<K, V>> mapEntryAboveToTruncate =\n"]}, "removed": {"1": ["    Map.Entry<Cut<K>, RangeMapEntry<K, V>> mapEntry =\n"], "2": ["    Map.Entry<Cut<K>, RangeMapEntry<K, V>> lowerEntry =\n", "    Map.Entry<Cut<K>, RangeMapEntry<K, V>> higherEntry =\n"], "3": ["      Range<K> range, V value, @Nullable Map.Entry<Cut<K>, RangeMapEntry<K, V>> entry) {\n"], "4": ["    for (Map.Entry<Range<K>, V> entry : rangeMap.asMapOfRanges().entrySet()) {\n"], "5": ["    Map.Entry<Cut<K>, RangeMapEntry<K, V>> mapEntryBelowToTruncate =\n"], "6": ["    Map.Entry<Cut<K>, RangeMapEntry<K, V>> mapEntryAboveToTruncate =\n"]}, "added_lines": {"1": [113], "2": [146, 150], "3": [159], "4": [170], "5": [205], "6": [228]}, "removed_lines": {"1": [113], "2": [146, 150], "3": [159], "4": [170], "5": [205], "6": [228]}}, {"180": "guava/src/com/google/common/escape/CharEscaperBuilder.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<Character, String> entry : map.entrySet()) {\n"]}, "removed": {"2": ["    for (Map.Entry<Character, String> entry : map.entrySet()) {\n"]}, "added_lines": {"1": [24], "2": [119]}, "removed_lines": {"2": [118]}}, {"181": "guava/src/com/google/common/eventbus/SubscriberRegistry.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["    for (Entry<Class<?>, Collection<Subscriber>> entry : listenerMethods.asMap().entrySet()) {\n"], "3": ["    for (Entry<Class<?>, Collection<Subscriber>> entry : listenerMethods.asMap().entrySet()) {\n"]}, "removed": {"2": ["    for (Map.Entry<Class<?>, Collection<Subscriber>> entry : listenerMethods.asMap().entrySet()) {\n"], "3": ["    for (Map.Entry<Class<?>, Collection<Subscriber>> entry : listenerMethods.asMap().entrySet()) {\n"]}, "added_lines": {"1": [43], "2": [80], "3": [102]}, "removed_lines": {"2": [79], "3": [101]}}, {"182": "guava/src/com/google/common/reflect/ClassPath.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["      for (Entry<File, ClassLoader> entry : getClassPathEntries(classloader).entrySet()) {\n"], "3": ["      for (Entry<ClassLoader, String> entry : resources.entries()) {\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["      for (Map.Entry<File, ClassLoader> entry : getClassPathEntries(classloader).entrySet()) {\n"], "3": ["      for (Map.Entry<ClassLoader, String> entry : resources.entries()) {\n"]}, "added_lines": {"1": [49], "2": [353], "3": [511]}, "removed_lines": {"1": [49], "2": [353], "3": [511]}}, {"183": "guava/src/com/google/common/reflect/TypeResolver.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["      for (Entry<TypeVariableKey, ? extends Type> mapping : mappings.entrySet()) {\n"]}, "removed": {"2": ["      for (Map.Entry<TypeVariableKey, ? extends Type> mapping : mappings.entrySet()) {\n"]}, "added_lines": {"1": [35], "2": [262]}, "removed_lines": {"2": [261]}}, {"184": "guava/src/com/google/common/reflect/Types.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["        if (new TypeCapture<Entry<String, int[][]>>() {}.capture()\n"]}, "removed": {"1": ["import java.util.Map;\n"], "2": ["        if (new TypeCapture<Map.Entry<String, int[][]>>() {}.capture()\n"]}, "added_lines": {"1": [45], "2": [630]}, "removed_lines": {"1": [45], "2": [630]}}, {"185": "guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java", "added": {"1": ["import java.util.Map.Entry;\n"], "2": ["      for (Entry<LockGraphNode, ExampleStackTrace> entry : allowedPriorLocks.entrySet()) {\n"]}, "removed": {"2": ["      for (Map.Entry<LockGraphNode, ExampleStackTrace> entry : allowedPriorLocks.entrySet()) {\n"]}, "added_lines": {"1": [37], "2": [698]}, "removed_lines": {"2": [697]}}, {"186": "guava/src/com/google/common/util/concurrent/ServiceManager.java", "added": {"1": ["                    public Long apply(Entry<Service, Long> input) {\n"]}, "removed": {"1": ["                    public Long apply(Map.Entry<Service, Long> input) {\n"]}, "added_lines": {"1": [629]}, "removed_lines": {"1": [629]}}]}
