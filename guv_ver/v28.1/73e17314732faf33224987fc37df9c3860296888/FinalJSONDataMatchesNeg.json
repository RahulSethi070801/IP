[{"func":{"oldfunccode":"73e17314732faf33224987fc37df9c3860296888/Codes_neg/Match_oldfunccode_73e17314732faf33224987fc37df9c3860296888_1.txt","newfunccode":"73e17314732faf33224987fc37df9c3860296888/Codes_neg/Match_newfunccode_73e17314732faf33224987fc37df9c3860296888_1.txt","newdoc":" don't copy the mayInterruptIfRunning bit, for consistency with the server, to ensure that\n interruptTask() is called if and only if the bit is true and because we cannot infer the\n interrupt status from non AbstractFuture futures.\n\n       * Almost everything in GWT is an AbstractFuture (which is as good as TrustedFuture under\n       * GWT). But ImmediateFuture and UncheckedThrowingFuture aren't, so we still need this case.\n       \n","newJdoc":"","olddoc":"\n       * Almost everything in GWT is an AbstractFuture (which is as good as TrustedFuture under\n       * GWT). But ImmediateFuture and UncheckedThrowingFuture aren't, so we still need this case.\n       \n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/73e17314732faf33224987fc37df9c3860296888/AbstractFuture_2","pathinproj":"guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java","addlines":[],"dellines":[359],"addcode":[],"delcode":["        mayInterruptIfRunning = other.mayInterruptIfRunning;\n"],"methodSig":"public void run()"},"doc":{"oldfunccode":"73e17314732faf33224987fc37df9c3860296888/Codes_neg/Match_olddocfunccode_73e17314732faf33224987fc37df9c3860296888_1.txt","newfunccode":"73e17314732faf33224987fc37df9c3860296888/Codes_neg/Match_newdocfunccode_73e17314732faf33224987fc37df9c3860296888_1.txt","newdoc":" The future has already been set to something. If it is cancellation we should cancel the\n the listener is responsible for calling completeWithFuture, directExecutor is appropriate\n since all we are doing is unpacking a completed future which should be fast.\n addListener has thrown an exception! SetFuture.run can't throw any exceptions so this\n must have been caused by addListener itself. The most likely explanation is a\n misconfigured mock. Try to switch to Failure.\n Note: The only way this CAS could fail is if cancel() has raced with us. That is ok.\n we lost the cas, fall through and maybe cancel\n incoming future.\n we don't care if it fails, this is best-effort.\n","newJdoc":"73e17314732faf33224987fc37df9c3860296888/Codes_neg/Match_newdocnewJdoc_73e17314732faf33224987fc37df9c3860296888_1.txt","olddoc":" The future has already been set to something. If it is cancellation we should cancel the\n the listener is responsible for calling completeWithFuture, directExecutor is appropriate\n since all we are doing is unpacking a completed future which should be fast.\n addListener has thrown an exception! SetFuture.run can't throw any exceptions so this\n must have been caused by addListener itself. The most likely explanation is a\n misconfigured mock. Try to switch to Failure.\n Note: The only way this CAS could fail is if cancel() has raced with us. That is ok.\n we lost the cas, fall through and maybe cancel\n incoming future.\n we don't care if it fails, this is best-effort.\n","oldJdoc":"73e17314732faf33224987fc37df9c3860296888/Codes_neg/Match_olddocJdoc_73e17314732faf33224987fc37df9c3860296888_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/73e17314732faf33224987fc37df9c3860296888/AbstractFuture_3","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[725,726,727,728,729],"dellines":[],"addcode":["   * <p>Note that, even if the supplied future is cancelled and it causes this future to complete,\n","   * it will never trigger interruption behavior. In particular, it will not cause this future to\n","   * invoke the {@link #interruptTask} method, and the {@link #wasInterrupted} method will not\n","   * return {@code true}.\n","   *\n","   * <p>Note that, even if the supplied future is cancelled and it causes this future to complete,\n","   * it will never trigger interruption behavior. In particular, it will not cause this future to\n","   * invoke the {@link #interruptTask} method, and the {@link #wasInterrupted} method will not\n","   * return {@code true}.\n","   *\n"],"delcode":[],"methodSig":"protected boolean setFuture(ListenableFuture<? extends V> future)"},"id":1,"flag":1,"commit":"73e17314732faf33224987fc37df9c3860296888"}]