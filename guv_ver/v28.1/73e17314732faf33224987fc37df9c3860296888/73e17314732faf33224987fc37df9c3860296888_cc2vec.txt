{"id": "73e17314732faf33224987fc37df9c3860296888", "code": [{"0": "android/guava-tests/test/com/google/common/util/concurrent/AbstractAbstractFutureTest.java", "added": {"2": ["    assertCancelled(future, /* expectWasCancelled= */ false);\n", "    assertCancelled(future, /* expectWasCancelled= */ false);\n"]}, "removed": {"1": ["import com.google.common.util.concurrent.AbstractFuture.TrustedFuture;\n"], "2": ["  @GwtIncompatible // All GWT Futures behaves like TrustedFuture.\n", "    /*\n", "     * Interruption of the delegate propagates to us only if the delegate was a TrustedFuture.\n", "     * TODO(cpovirk): Consider whether to stop copying this information from TrustedFuture so that\n", "     * we're consistent.\n", "     */\n", "    assertCancelled(future, delegate instanceof TrustedFuture);\n", "  @GwtIncompatible // All GWT Futures behaves like TrustedFuture.\n", "    // See previous method doc.\n", "    assertCancelled(future, delegate instanceof TrustedFuture);\n"]}, "added_lines": {"2": [126, 132]}, "removed_lines": {"1": [32], "2": [124, 128, 129, 130, 131, 132, 133, 136, 140, 141]}}, {"1": "android/guava/src/com/google/common/util/concurrent/AbstractFuture.java", "added": {"1": ["@SuppressWarnings(\"ShortCircuitBoolean\") // we use non-short circuiting comparisons intentionally\n"], "2": ["    // constants to use when GENERATE_CANCELLATION_CAUSES = false\n", "    static final Cancellation CAUSELESS_INTERRUPTED;\n", "    static final Cancellation CAUSELESS_CANCELLED;\n", "\n", "    static {\n", "      if (GENERATE_CANCELLATION_CAUSES) {\n", "        CAUSELESS_CANCELLED = null;\n", "        CAUSELESS_INTERRUPTED = null;\n", "      } else {\n", "        CAUSELESS_CANCELLED = new Cancellation(false, null);\n", "        CAUSELESS_INTERRUPTED = new Cancellation(true, null);\n", "      }\n", "    }\n", "\n"], "3": ["      Object valueToSet =\n", "              ? new Cancellation(\n", "                  mayInterruptIfRunning, new CancellationException(\"Future.cancel() was called.\"))\n", "              : (mayInterruptIfRunning\n", "                  ? Cancellation.CAUSELESS_INTERRUPTED\n", "                  : Cancellation.CAUSELESS_CANCELLED);\n"], "4": ["   * <p>Note that, even if the supplied future is cancelled and it causes this future to complete,\n", "   * it will never trigger interruption behavior. In particular, it will not cause this future to\n", "   * invoke the {@link #interruptTask} method, and the {@link #wasInterrupted} method will not\n", "   * return {@code true}.\n", "   *\n"], "5": ["   * Returns a value that satisfies the contract of the {@link #value} field based on the state of\n", "   * given future.\n"], "6": ["      Object v = ((AbstractFuture<?>) future).value;\n", "      if (v instanceof Cancellation) {\n", "        // If the other future was interrupted, clear the interrupted bit while preserving the cause\n", "        // this will make it consistent with how non-trustedfutures work which cannot propagate the\n", "        // wasInterrupted bit\n", "        Cancellation c = (Cancellation) v;\n", "        if (c.wasInterrupted) {\n", "          v =\n", "              c.cause != null\n", "                  ? new Cancellation(/* wasInterrupted= */ false, c.cause)\n", "                  : Cancellation.CAUSELESS_CANCELLED;\n", "        }\n", "      }\n", "      return v;\n"]}, "removed": {"3": ["      Throwable cause =\n", "              ? new CancellationException(\"Future.cancel() was called.\")\n", "              : null;\n", "      Object valueToSet = new Cancellation(mayInterruptIfRunning, cause);\n"], "5": ["   * Returns a value, suitable for storing in the {@link #value} field. From the given future,\n", "   * which is assumed to be done.\n"], "6": ["      return ((AbstractFuture<?>) future).value;\n"]}, "added_lines": {"1": [66], "2": [274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "3": [561, 563, 564, 565, 566, 567], "4": [725, 726, 727, 728, 729], "5": [782, 783], "6": [794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807]}, "removed_lines": {"3": [546, 548, 549, 550], "5": [760, 761], "6": [772]}}, {"2": "guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java", "added": {"1": ["        // don't copy the mayInterruptIfRunning bit, for consistency with the server, to ensure that\n", "        // interruptTask() is called if and only if the bit is true and because we cannot infer the\n", "        // interrupt status from non AbstractFuture futures.\n"]}, "removed": {"1": ["        mayInterruptIfRunning = other.mayInterruptIfRunning;\n"]}, "added_lines": {"1": [359, 360, 361]}, "removed_lines": {"1": [359]}}, {"3": "guava-gwt/test/com/google/common/util/concurrent/TrustedInputFutureTest_gwt.java", "added": {"1": ["public void testSetFutureDelegateAlreadyInterrupted() throws Exception {\n", "  com.google.common.util.concurrent.TrustedInputFutureTest testCase = new com.google.common.util.concurrent.TrustedInputFutureTest();\n", "  testCase.setUp();\n", "  testCase.testSetFutureDelegateAlreadyInterrupted();\n", "}\n", "\n"], "2": ["public void testSetFutureDelegateLaterInterrupted() throws Exception {\n", "  com.google.common.util.concurrent.TrustedInputFutureTest testCase = new com.google.common.util.concurrent.TrustedInputFutureTest();\n", "  testCase.setUp();\n", "  testCase.testSetFutureDelegateLaterInterrupted();\n", "}\n", "\n"]}, "removed": {}, "added_lines": {"1": [159, 160, 161, 162, 163, 164], "2": [177, 178, 179, 180, 181, 182]}, "removed_lines": {}}, {"4": "guava-gwt/test/com/google/common/util/concurrent/UntrustedInputFutureTest_gwt.java", "added": {"1": ["public void testSetFutureDelegateAlreadyInterrupted() throws Exception {\n", "  com.google.common.util.concurrent.UntrustedInputFutureTest testCase = new com.google.common.util.concurrent.UntrustedInputFutureTest();\n", "  testCase.setUp();\n", "  testCase.testSetFutureDelegateAlreadyInterrupted();\n", "}\n", "\n"], "2": ["public void testSetFutureDelegateLaterInterrupted() throws Exception {\n", "  com.google.common.util.concurrent.UntrustedInputFutureTest testCase = new com.google.common.util.concurrent.UntrustedInputFutureTest();\n", "  testCase.setUp();\n", "  testCase.testSetFutureDelegateLaterInterrupted();\n", "}\n", "\n"]}, "removed": {}, "added_lines": {"1": [159, 160, 161, 162, 163, 164], "2": [177, 178, 179, 180, 181, 182]}, "removed_lines": {}}, {"5": "guava-tests/test/com/google/common/util/concurrent/AbstractAbstractFutureTest.java", "added": {"2": ["    assertCancelled(future, /* expectWasCancelled= */ false);\n", "    assertCancelled(future, /* expectWasCancelled= */ false);\n"]}, "removed": {"1": ["import com.google.common.util.concurrent.AbstractFuture.TrustedFuture;\n"], "2": ["  @GwtIncompatible // All GWT Futures behaves like TrustedFuture.\n", "    /*\n", "     * Interruption of the delegate propagates to us only if the delegate was a TrustedFuture.\n", "     * TODO(cpovirk): Consider whether to stop copying this information from TrustedFuture so that\n", "     * we're consistent.\n", "     */\n", "    assertCancelled(future, delegate instanceof TrustedFuture);\n", "  @GwtIncompatible // All GWT Futures behaves like TrustedFuture.\n", "    // See previous method doc.\n", "    assertCancelled(future, delegate instanceof TrustedFuture);\n"]}, "added_lines": {"2": [126, 132]}, "removed_lines": {"1": [32], "2": [124, 128, 129, 130, 131, 132, 133, 136, 140, 141]}}, {"6": "guava/src/com/google/common/util/concurrent/AbstractFuture.java", "added": {"1": ["@SuppressWarnings(\"ShortCircuitBoolean\") // we use non-short circuiting comparisons intentionally\n"], "2": ["    // constants to use when GENERATE_CANCELLATION_CAUSES = false\n", "    static final Cancellation CAUSELESS_INTERRUPTED;\n", "    static final Cancellation CAUSELESS_CANCELLED;\n", "\n", "    static {\n", "      if (GENERATE_CANCELLATION_CAUSES) {\n", "        CAUSELESS_CANCELLED = null;\n", "        CAUSELESS_INTERRUPTED = null;\n", "      } else {\n", "        CAUSELESS_CANCELLED = new Cancellation(false, null);\n", "        CAUSELESS_INTERRUPTED = new Cancellation(true, null);\n", "      }\n", "    }\n", "\n"], "3": ["      Object valueToSet =\n", "              ? new Cancellation(\n", "                  mayInterruptIfRunning, new CancellationException(\"Future.cancel() was called.\"))\n", "              : (mayInterruptIfRunning\n", "                  ? Cancellation.CAUSELESS_INTERRUPTED\n", "                  : Cancellation.CAUSELESS_CANCELLED);\n"], "4": ["   * <p>Note that, even if the supplied future is cancelled and it causes this future to complete,\n", "   * it will never trigger interruption behavior. In particular, it will not cause this future to\n", "   * invoke the {@link #interruptTask} method, and the {@link #wasInterrupted} method will not\n", "   * return {@code true}.\n", "   *\n"], "5": ["   * Returns a value that satisfies the contract of the {@link #value} field based on the state of\n", "   * given future.\n"], "6": ["      Object v = ((AbstractFuture<?>) future).value;\n", "      if (v instanceof Cancellation) {\n", "        // If the other future was interrupted, clear the interrupted bit while preserving the cause\n", "        // this will make it consistent with how non-trustedfutures work which cannot propagate the\n", "        // wasInterrupted bit\n", "        Cancellation c = (Cancellation) v;\n", "        if (c.wasInterrupted) {\n", "          v =\n", "              c.cause != null\n", "                  ? new Cancellation(/* wasInterrupted= */ false, c.cause)\n", "                  : Cancellation.CAUSELESS_CANCELLED;\n", "        }\n", "      }\n", "      return v;\n"]}, "removed": {"3": ["      Throwable cause =\n", "              ? new CancellationException(\"Future.cancel() was called.\")\n", "              : null;\n", "      Object valueToSet = new Cancellation(mayInterruptIfRunning, cause);\n"], "5": ["   * Returns a value, suitable for storing in the {@link #value} field. From the given future,\n", "   * which is assumed to be done.\n"], "6": ["      return ((AbstractFuture<?>) future).value;\n"]}, "added_lines": {"1": [66], "2": [274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "3": [561, 563, 564, 565, 566, 567], "4": [725, 726, 727, 728, 729], "5": [782, 783], "6": [794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807]}, "removed_lines": {"3": [546, 548, 549, 550], "5": [760, 761], "6": [772]}}]}
