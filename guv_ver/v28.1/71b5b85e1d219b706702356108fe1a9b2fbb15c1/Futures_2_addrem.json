{
    "addition": {
        "243": "  /**\n",
        "244": "   * Executes {@code callable} on the specified {@code executor}, returning a {@code Future}.\n",
        "245": "   *\n",
        "246": "   * @throws RejectedExecutionException if the task cannot be scheduled for execution\n",
        "247": "   * @since 23.0\n",
        "248": "   */\n",
        "249": "  public static <O> ListenableFuture<O> submitAsync(AsyncCallable<O> callable, Executor executor) {\n",
        "250": "    TrustedListenableFutureTask<O> task = TrustedListenableFutureTask.create(callable);\n",
        "251": "    executor.execute(task);\n",
        "252": "    return task;\n",
        "253": "  }\n",
        "254": "\n",
        "255": "  /**\n",
        "256": "   * Schedules {@code callable} on the specified {@code executor}, returning a {@code Future}.\n",
        "257": "   *\n",
        "258": "   * @throws RejectedExecutionException if the task cannot be scheduled for execution\n",
        "259": "   * @since 23.0\n",
        "260": "   */\n",
        "261": "  @GwtIncompatible // java.util.concurrent.ScheduledExecutorService\n",
        "262": "  public static <O> ListenableFuture<O> scheduleAsync(\n",
        "263": "      AsyncCallable<O> callable,\n",
        "264": "      long delay,\n",
        "265": "      TimeUnit timeUnit,\n",
        "266": "      ScheduledExecutorService executorService) {\n",
        "267": "    TrustedListenableFutureTask<O> task = TrustedListenableFutureTask.create(callable);\n",
        "268": "    final Future<?> scheduled = executorService.schedule(task, delay, timeUnit);\n",
        "269": "    task.addListener(\n",
        "270": "        new Runnable() {\n",
        "271": "          @Override\n",
        "272": "          public void run() {\n",
        "273": "            // Don't want to interrupt twice\n",
        "274": "            scheduled.cancel(false);\n",
        "275": "          }\n",
        "276": "        },\n",
        "277": "        directExecutor());\n",
        "278": "    return task;\n",
        "279": "  }\n",
        "280": "\n"
    },
    "removed": {}
}