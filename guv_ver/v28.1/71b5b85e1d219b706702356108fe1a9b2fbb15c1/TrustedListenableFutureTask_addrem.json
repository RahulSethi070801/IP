{
    "addition": {
        "36": "  static <V> TrustedListenableFutureTask<V> create(AsyncCallable<V> callable) {\n",
        "37": "    return new TrustedListenableFutureTask<V>(callable);\n",
        "38": "  }\n",
        "39": "\n",
        "63": "  private InterruptibleTask task;\n",
        "69": "  TrustedListenableFutureTask(AsyncCallable<V> callable) {\n",
        "70": "    this.task = new TrustedFutureInterruptibleAsyncTask(callable);\n",
        "71": "  }\n",
        "72": "\n",
        "75": "    InterruptibleTask localTask = task;\n",
        "86": "      InterruptibleTask localTask = task;\n",
        "97": "    InterruptibleTask localTask = task;\n",
        "134": "\n",
        "135": "  @WeakOuter\n",
        "136": "  private final class TrustedFutureInterruptibleAsyncTask extends InterruptibleTask {\n",
        "137": "    private final AsyncCallable<V> callable;\n",
        "138": "\n",
        "139": "    TrustedFutureInterruptibleAsyncTask(AsyncCallable<V> callable) {\n",
        "140": "      this.callable = checkNotNull(callable);\n",
        "141": "    }\n",
        "142": "\n",
        "143": "    @Override\n",
        "144": "    void runInterruptibly() {\n",
        "145": "      // Ensure we haven't been cancelled or already run.\n",
        "146": "      if (!isDone()) {\n",
        "147": "        try {\n",
        "148": "          ListenableFuture<V> result = callable.call();\n",
        "149": "          checkNotNull(\n",
        "150": "              result,\n",
        "151": "              \"AsyncCallable.call returned null instead of a Future. \"\n",
        "152": "                  + \"Did you mean to return immediateFuture(null)?\");\n",
        "153": "          setFuture(result);\n",
        "154": "        } catch (Throwable t) {\n",
        "155": "          setException(t);\n",
        "156": "        }\n",
        "157": "      }\n",
        "158": "    }\n",
        "159": "\n",
        "160": "    @Override\n",
        "161": "    boolean wasInterrupted() {\n",
        "162": "      return TrustedListenableFutureTask.this.wasInterrupted();\n",
        "163": "    }\n",
        "164": "\n",
        "165": "    @Override\n",
        "166": "    public String toString() {\n",
        "167": "      return callable.toString();\n",
        "168": "    }\n",
        "169": "  }\n"
    },
    "removed": {
        "36": "  /**\n",
        "37": "   * Creates a {@code ListenableFutureTask} that will upon running, execute the given\n",
        "38": "   * {@code Callable}.\n",
        "39": "   *\n",
        "40": "   * @param callable the callable task\n",
        "41": "   */\n",
        "65": "  private TrustedFutureInterruptibleTask task;\n",
        "73": "    TrustedFutureInterruptibleTask localTask = task;\n",
        "84": "      TrustedFutureInterruptibleTask localTask = task;\n",
        "95": "    TrustedFutureInterruptibleTask localTask = task;\n"
    }
}