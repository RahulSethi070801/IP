{
    "addition": {
        "99": "  private static final ImmutableSet<String> RS =\n",
        "100": "      ImmutableSet.of(\n",
        "101": "          \"com\",\n",
        "102": "          \"co.uk\",\n",
        "103": "          \"foo.bd\",\n",
        "104": "          \"xxxxxx.bd\",\n",
        "105": "          \"org.mK\",\n",
        "106": "          \"us\",\n",
        "107": "          \"co.uk.\", // Trailing dot\n",
        "108": "          \"co\\uFF61uk\", // Alternate dot character\n",
        "109": "          \"\\u7f51\\u7edc.Cn\", // \"\u7f51\u7edc.Cn\"\n",
        "110": "          \"j\\u00f8rpeland.no\", // \"jorpeland.no\" (first o slashed)\n",
        "111": "          \"xn--jrpeland-54a.no\"); // IDNA (punycode) encoding of above\n",
        "112": "\n",
        "113": "  private static final ImmutableSet<String> PS_NOT_RS =\n",
        "114": "      ImmutableSet.of(\"blogspot.com\", \"blogspot.co.uk\", \"uk.com\");\n",
        "115": "\n",
        "116": "  private static final ImmutableSet<String> PS =\n",
        "117": "      ImmutableSet.<String>builder().addAll(RS).addAll(PS_NOT_RS).build();\n",
        "122": "  /**\n",
        "123": "   * Having a public suffix is equivalent to having a registry suffix, because all registry suffixes\n",
        "124": "   * are public suffixes, and all public suffixes have registry suffixes.\n",
        "125": "   */\n",
        "126": "  private static final ImmutableSet<String> NO_RS = NO_PS;\n",
        "128": "  private static final ImmutableSet<String> NON_PS =\n",
        "129": "      ImmutableSet.of(\n",
        "130": "          \"foo.bar.com\",\n",
        "131": "          \"foo.ca\",\n",
        "132": "          \"foo.bar.ca\",\n",
        "133": "          \"foo.blogspot.com\",\n",
        "134": "          \"foo.blogspot.co.uk\",\n",
        "135": "          \"foo.uk.com\",\n",
        "136": "          \"foo.bar.co.il\",\n",
        "137": "          \"state.CA.us\",\n",
        "138": "          \"www.state.pa.us\",\n",
        "139": "          \"pvt.k12.ca.us\",\n",
        "140": "          \"www.google.com\",\n",
        "141": "          \"www4.yahoo.co.uk\",\n",
        "142": "          \"home.netscape.com\",\n",
        "143": "          \"web.MIT.edu\",\n",
        "144": "          \"foo.eDu.au\",\n",
        "145": "          \"utenti.blah.IT\",\n",
        "146": "          \"dominio.com.co\");\n",
        "147": "\n",
        "148": "  private static final ImmutableSet<String> NON_RS =\n",
        "149": "      ImmutableSet.<String>builder().addAll(NON_PS).addAll(PS_NOT_RS).build();\n",
        "150": "\n",
        "151": "  private static final ImmutableSet<String> TOP_UNDER_REGISTRY_SUFFIX =\n",
        "154": "  private static final ImmutableSet<String> TOP_PRIVATE_DOMAIN =\n",
        "155": "      ImmutableSet.of(\"google.com\", \"foo.Co.uk\", \"foo.ca.us.\", \"foo.blogspot.com\");\n",
        "156": "\n",
        "157": "  private static final ImmutableSet<String> UNDER_TOP_UNDER_REGISTRY_SUFFIX =\n",
        "160": "  private static final ImmutableSet<String> UNDER_PRIVATE_DOMAIN =\n",
        "161": "      ImmutableSet.of(\"foo.bar.google.com\", \"a.b.co.uk\", \"x.y.ca.us\", \"a.b.blogspot.com\");\n",
        "162": "\n",
        "231": "  private static final ImmutableSet<String> SOMEWHERE_UNDER_RS =\n",
        "232": "      ImmutableSet.<String>builder().addAll(SOMEWHERE_UNDER_PS).addAll(PS_NOT_RS).build();\n",
        "233": "\n",
        "307": "  public void testRegistrySuffix() {\n",
        "308": "    for (String name : RS) {\n",
        "309": "      final InternetDomainName domain = InternetDomainName.from(name);\n",
        "310": "      assertTrue(name, domain.isRegistrySuffix());\n",
        "311": "      assertTrue(name, domain.hasRegistrySuffix());\n",
        "312": "      assertFalse(name, domain.isUnderRegistrySuffix());\n",
        "313": "      assertFalse(name, domain.isTopDomainUnderRegistrySuffix());\n",
        "314": "      assertEquals(domain, domain.registrySuffix());\n",
        "315": "    }\n",
        "316": "\n",
        "317": "    for (String name : NO_RS) {\n",
        "318": "      final InternetDomainName domain = InternetDomainName.from(name);\n",
        "319": "      assertFalse(name, domain.isRegistrySuffix());\n",
        "320": "      assertFalse(name, domain.hasRegistrySuffix());\n",
        "321": "      assertFalse(name, domain.isUnderRegistrySuffix());\n",
        "322": "      assertFalse(name, domain.isTopDomainUnderRegistrySuffix());\n",
        "323": "      assertNull(domain.registrySuffix());\n",
        "324": "    }\n",
        "325": "\n",
        "326": "    for (String name : NON_RS) {\n",
        "327": "      final InternetDomainName domain = InternetDomainName.from(name);\n",
        "328": "      assertFalse(name, domain.isRegistrySuffix());\n",
        "329": "      assertTrue(name, domain.hasRegistrySuffix());\n",
        "330": "      assertTrue(name, domain.isUnderRegistrySuffix());\n",
        "331": "    }\n",
        "332": "  }\n",
        "333": "\n",
        "334": "  public void testUnderRegistrySuffix() {\n",
        "335": "    for (String name : SOMEWHERE_UNDER_RS) {\n",
        "336": "      final InternetDomainName domain = InternetDomainName.from(name);\n",
        "337": "      assertFalse(name, domain.isRegistrySuffix());\n",
        "338": "      assertTrue(name, domain.hasRegistrySuffix());\n",
        "339": "      assertTrue(name, domain.isUnderRegistrySuffix());\n",
        "340": "    }\n",
        "341": "  }\n",
        "342": "\n",
        "343": "  public void testTopDomainUnderRegistrySuffix() {\n",
        "344": "    for (String name : TOP_UNDER_REGISTRY_SUFFIX) {\n",
        "345": "      final InternetDomainName domain = InternetDomainName.from(name);\n",
        "346": "      assertFalse(name, domain.isRegistrySuffix());\n",
        "347": "      assertTrue(name, domain.hasRegistrySuffix());\n",
        "348": "      assertTrue(name, domain.isUnderRegistrySuffix());\n",
        "349": "      assertTrue(name, domain.isTopDomainUnderRegistrySuffix());\n",
        "350": "      assertEquals(domain.parent(), domain.registrySuffix());\n",
        "351": "    }\n",
        "352": "  }\n",
        "353": "\n",
        "354": "  public void testUnderTopDomainUnderRegistrySuffix() {\n",
        "355": "    for (String name : UNDER_TOP_UNDER_REGISTRY_SUFFIX) {\n",
        "356": "      final InternetDomainName domain = InternetDomainName.from(name);\n",
        "357": "      assertFalse(name, domain.isRegistrySuffix());\n",
        "358": "      assertTrue(name, domain.hasRegistrySuffix());\n",
        "359": "      assertTrue(name, domain.isUnderRegistrySuffix());\n",
        "360": "      assertFalse(name, domain.isTopDomainUnderRegistrySuffix());\n",
        "361": "    }\n",
        "362": "  }\n",
        "363": "\n",
        "462": "  public void testPublicSuffixExclusion() {\n",
        "471": "  public void testPublicSuffixMultipleUnders() {\n",
        "481": "  public void testRegistrySuffixExclusion() {\n",
        "482": "    InternetDomainName domain = InternetDomainName.from(\"foo.city.yokohama.jp\");\n",
        "483": "    assertTrue(domain.hasRegistrySuffix());\n",
        "484": "    assertEquals(\"yokohama.jp\", domain.registrySuffix().toString());\n",
        "485": "\n",
        "486": "    // Behold the weirdness!\n",
        "487": "    assertFalse(domain.registrySuffix().isRegistrySuffix());\n",
        "488": "  }\n",
        "489": "\n",
        "490": "  public void testRegistrySuffixMultipleUnders() {\n",
        "491": "    // PSL has both *.uk and *.sch.uk; the latter should win.\n",
        "492": "    // See http://code.google.com/p/guava-libraries/issues/detail?id=1176\n",
        "493": "\n",
        "494": "    InternetDomainName domain = InternetDomainName.from(\"www.essex.sch.uk\");\n",
        "495": "    assertTrue(domain.hasRegistrySuffix());\n",
        "496": "    assertEquals(\"essex.sch.uk\", domain.registrySuffix().toString());\n",
        "497": "    assertEquals(\"www.essex.sch.uk\", domain.topDomainUnderRegistrySuffix().toString());\n",
        "498": "  }\n",
        "499": "\n"
    },
    "removed": {
        "99": "  private static final ImmutableSet<String> PS = ImmutableSet.of(\n",
        "100": "      \"com\",\n",
        "101": "      \"co.uk\",\n",
        "102": "      \"foo.bd\",\n",
        "103": "      \"xxxxxx.bd\",\n",
        "104": "      \"org.mK\",\n",
        "105": "      \"us\",\n",
        "106": "      \"uk\\uFF61com.\",  // Alternate dot character\n",
        "107": "      \"\\u7f51\\u7edc.Cn\",  // \"\u7f51\u7edc.Cn\"\n",
        "108": "      \"j\\u00f8rpeland.no\",  // \"jorpeland.no\" (first o slashed)\n",
        "109": "      \"xn--jrpeland-54a.no\"  // IDNA (punycode) encoding of above\n",
        "110": "  );\n",
        "115": "  private static final ImmutableSet<String> NON_PS = ImmutableSet.of(\n",
        "116": "      \"foo.bar.com\", \"foo.ca\", \"foo.bar.ca\",\n",
        "117": "      \"foo.bar.co.il\", \"state.CA.us\", \"www.state.pa.us\", \"pvt.k12.ca.us\",\n",
        "118": "      \"www.google.com\", \"www4.yahoo.co.uk\", \"home.netscape.com\",\n",
        "119": "      \"web.MIT.edu\", \"foo.eDu.au\", \"utenti.blah.IT\", \"dominio.com.co\");\n",
        "121": "  private static final ImmutableSet<String> TOP_PRIVATE_DOMAIN =\n",
        "124": "  private static final ImmutableSet<String> UNDER_PRIVATE_DOMAIN =\n",
        "366": "  public void testExclusion() {\n",
        "375": "  public void testMultipleUnders() {\n"
    }
}