{"id": "7356947cb2caf73d6155255bdcc2906e45e973d6", "code": [{"0": "guava/src/com/google/common/io/Files.java", "added": {"1": [" * Provides utility methods for working with {@linkplain File files}.\n", " * <p>{@link java.nio.file.Path} users will find similar utilities in {@link MoreFiles} and the\n", " * JDK's {@link java.nio.file.Files} class.\n"], "2": ["   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link\n", "   * java.nio.file.Files#newBufferedReader(java.nio.file.Path, Charset)}.\n", "   *\n"], "3": ["   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link\n", "   * java.nio.file.Files#newBufferedWriter(java.nio.file.Path, Charset,\n", "   * java.nio.file.OpenOption...)}.\n", "   *\n"], "4": ["   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#readAllBytes}.\n", "   *\n"], "5": ["   * @deprecated Prefer {@code asCharSource(file, charset).read()}. This method is scheduled to be\n", "   *     removed in January 2019.\n", "  @Deprecated\n"], "6": ["   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link\n", "   * java.nio.file.Files#write(java.nio.file.Path, byte[], java.nio.file.OpenOption...)}.\n", "   *\n"], "7": ["   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link\n", "   * java.nio.file.Files#copy(java.nio.file.Path, OutputStream)}.\n", "   *\n"], "8": ["   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link\n", "   * java.nio.file.Files#copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...)}.\n", "   *\n"], "9": ["   * @deprecated Prefer {@code asCharSink(to, charset).write(from)}. This method is scheduled to be\n", "   *     removed in January 2019.\n", "  @Deprecated\n"], "10": ["   * @deprecated Prefer {@code asCharSink(to, charset, FileWriteMode.APPEND).write(from)}. This\n", "   *     method is scheduled to be removed in January 2019.\n", "  @Deprecated\n", "    asCharSink(to, charset, FileWriteMode.APPEND).write(from);\n"], "11": ["   * @deprecated Prefer {@code asCharSource(from, charset).copyTo(to)}. This method is scheduled to\n", "   *     be removed in January 2019.\n", "  @Deprecated\n"], "12": ["   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link\n", "   * java.nio.file.Files#createTempDirectory}.\n", "   *\n"], "13": ["   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#move}.\n", "   *\n"], "14": ["   * @deprecated Prefer {@code asCharSource(file, charset).readFirstLine()}. This method is\n", "   *     scheduled to be removed in January 2019.\n", "  @Deprecated\n"], "15": ["   * <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use {@code\n", "   * Files.asCharSource(file, charset).readLines()}.\n", "   *\n", "   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link\n", "   * java.nio.file.Files#readAllLines(java.nio.file.Path, Charset)}.\n"], "16": ["    return asCharSource(file, charset)\n", "        .readLines(\n", "            new LineProcessor<List<String>>() {\n", "              final List<String> result = Lists.newArrayList();\n", "              @Override\n", "              public boolean processLine(String line) {\n", "                result.add(line);\n", "                return true;\n", "              }\n", "\n", "              @Override\n", "              public List<String> getResult() {\n", "                return result;\n", "              }\n", "            });\n"], "17": ["   * @deprecated Prefer {@code asCharSource(file, charset).readLines(callback)}. This method is\n", "   *     scheduled to be removed in January 2019.\n", "  @Deprecated\n"], "18": ["   * @deprecated Prefer {@code asByteSource(file).read(processor)}. This method is scheduled to be\n", "   *     removed in January 2019.\n", "  @Deprecated\n"], "19": ["   * @deprecated Prefer {@code asByteSource(file).hash(hashFunction)}. This method is scheduled to\n", "   *     be removed in January 2019.\n", "  @Deprecated\n"]}, "removed": {"1": [" * Provides utility methods for working with files.\n", " * <p>All method parameters must be non-null unless documented otherwise.\n"], "10": ["    asCharSink(to, charset, new FileWriteMode[]{ FileWriteMode.APPEND }).write(from);\n"], "15": ["   * <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use\n", "   * {@code Files.asCharSource(file, charset).readLines()}.\n"], "16": ["    return readLines(\n", "        file,\n", "        charset,\n", "        new LineProcessor<List<String>>() {\n", "          final List<String> result = Lists.newArrayList();\n", "\n", "          @Override\n", "          public boolean processLine(String line) {\n", "            result.add(line);\n", "            return true;\n", "          }\n", "          @Override\n", "          public List<String> getResult() {\n", "            return result;\n", "          }\n", "        });\n"]}, "added_lines": {"1": [56, 58, 59], "2": [77, 78, 79], "3": [94, 95, 96, 97], "4": [243, 244], "5": [263, 264, 266], "6": [274, 275, 276], "7": [288, 289, 290], "8": [310, 311, 312], "9": [331, 332, 334], "10": [347, 348, 350, 352], "11": [363, 364, 366], "12": [409, 410, 411], "13": [482, 483], "14": [514, 515, 517], "15": [526, 527, 528, 529, 530], "16": [541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556], "17": [569, 570, 572], "18": [588, 589, 591], "19": [605, 606, 608]}, "removed_lines": {"1": [56, 58], "10": [324], "15": [487, 488], "16": [499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515]}}, {"1": "guava/src/com/google/common/io/MoreFiles.java", "added": {"1": [" * <p>Many methods provided by Guava's {@code Files} class for {@link java.io.File} instances are\n", " * now available via the JDK's {@link java.nio.file.Files} class for {@code Path} - check the JDK's\n", " * class if a sibling method from {@code Files} appears to be missing from this class.\n", " *\n"], "2": ["  private static Path getParentPath(Path path) {\n"]}, "removed": {"2": ["  private static Path getParentPath(Path path) throws IOException {\n"]}, "added_lines": {"1": [59, 60, 61, 62], "2": [680]}, "removed_lines": {"2": [676]}}]}
