{
    "addition": {
        "56": " * Provides utility methods for working with {@linkplain File files}.\n",
        "58": " * <p>{@link java.nio.file.Path} users will find similar utilities in {@link MoreFiles} and the\n",
        "59": " * JDK's {@link java.nio.file.Files} class.\n",
        "77": "   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link\n",
        "78": "   * java.nio.file.Files#newBufferedReader(java.nio.file.Path, Charset)}.\n",
        "79": "   *\n",
        "94": "   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link\n",
        "95": "   * java.nio.file.Files#newBufferedWriter(java.nio.file.Path, Charset,\n",
        "96": "   * java.nio.file.OpenOption...)}.\n",
        "97": "   *\n",
        "243": "   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#readAllBytes}.\n",
        "244": "   *\n",
        "263": "   * @deprecated Prefer {@code asCharSource(file, charset).read()}. This method is scheduled to be\n",
        "264": "   *     removed in January 2019.\n",
        "266": "  @Deprecated\n",
        "274": "   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link\n",
        "275": "   * java.nio.file.Files#write(java.nio.file.Path, byte[], java.nio.file.OpenOption...)}.\n",
        "276": "   *\n",
        "288": "   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link\n",
        "289": "   * java.nio.file.Files#copy(java.nio.file.Path, OutputStream)}.\n",
        "290": "   *\n",
        "310": "   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link\n",
        "311": "   * java.nio.file.Files#copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...)}.\n",
        "312": "   *\n",
        "331": "   * @deprecated Prefer {@code asCharSink(to, charset).write(from)}. This method is scheduled to be\n",
        "332": "   *     removed in January 2019.\n",
        "334": "  @Deprecated\n",
        "347": "   * @deprecated Prefer {@code asCharSink(to, charset, FileWriteMode.APPEND).write(from)}. This\n",
        "348": "   *     method is scheduled to be removed in January 2019.\n",
        "350": "  @Deprecated\n",
        "352": "    asCharSink(to, charset, FileWriteMode.APPEND).write(from);\n",
        "363": "   * @deprecated Prefer {@code asCharSource(from, charset).copyTo(to)}. This method is scheduled to\n",
        "364": "   *     be removed in January 2019.\n",
        "366": "  @Deprecated\n",
        "409": "   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link\n",
        "410": "   * java.nio.file.Files#createTempDirectory}.\n",
        "411": "   *\n",
        "482": "   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#move}.\n",
        "483": "   *\n",
        "514": "   * @deprecated Prefer {@code asCharSource(file, charset).readFirstLine()}. This method is\n",
        "515": "   *     scheduled to be removed in January 2019.\n",
        "517": "  @Deprecated\n",
        "526": "   * <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use {@code\n",
        "527": "   * Files.asCharSource(file, charset).readLines()}.\n",
        "528": "   *\n",
        "529": "   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link\n",
        "530": "   * java.nio.file.Files#readAllLines(java.nio.file.Path, Charset)}.\n",
        "541": "    return asCharSource(file, charset)\n",
        "542": "        .readLines(\n",
        "543": "            new LineProcessor<List<String>>() {\n",
        "544": "              final List<String> result = Lists.newArrayList();\n",
        "546": "              @Override\n",
        "547": "              public boolean processLine(String line) {\n",
        "548": "                result.add(line);\n",
        "549": "                return true;\n",
        "550": "              }\n",
        "551": "\n",
        "552": "              @Override\n",
        "553": "              public List<String> getResult() {\n",
        "554": "                return result;\n",
        "555": "              }\n",
        "556": "            });\n",
        "569": "   * @deprecated Prefer {@code asCharSource(file, charset).readLines(callback)}. This method is\n",
        "570": "   *     scheduled to be removed in January 2019.\n",
        "572": "  @Deprecated\n",
        "588": "   * @deprecated Prefer {@code asByteSource(file).read(processor)}. This method is scheduled to be\n",
        "589": "   *     removed in January 2019.\n",
        "591": "  @Deprecated\n",
        "605": "   * @deprecated Prefer {@code asByteSource(file).hash(hashFunction)}. This method is scheduled to\n",
        "606": "   *     be removed in January 2019.\n",
        "608": "  @Deprecated\n"
    },
    "removed": {
        "56": " * Provides utility methods for working with files.\n",
        "58": " * <p>All method parameters must be non-null unless documented otherwise.\n",
        "324": "    asCharSink(to, charset, new FileWriteMode[]{ FileWriteMode.APPEND }).write(from);\n",
        "487": "   * <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use\n",
        "488": "   * {@code Files.asCharSource(file, charset).readLines()}.\n",
        "499": "    return readLines(\n",
        "500": "        file,\n",
        "501": "        charset,\n",
        "502": "        new LineProcessor<List<String>>() {\n",
        "503": "          final List<String> result = Lists.newArrayList();\n",
        "504": "\n",
        "505": "          @Override\n",
        "506": "          public boolean processLine(String line) {\n",
        "507": "            result.add(line);\n",
        "508": "            return true;\n",
        "509": "          }\n",
        "511": "          @Override\n",
        "512": "          public List<String> getResult() {\n",
        "513": "            return result;\n",
        "514": "          }\n",
        "515": "        });\n"
    }
}