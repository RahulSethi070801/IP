{
    "addition": {
        "38": "public abstract class AbstractFuture<V> implements ListenableFuture<V> {\n",
        "39": "\n",
        "40": "  /**\n",
        "41": "   * Tag interface marking trusted subclasses. This enables some optimizations. The implementation\n",
        "42": "   * of this interface must also be an AbstractFuture and must not override or expose for overriding\n",
        "43": "   * any of the public methods of ListenableFuture.\n",
        "44": "   */\n",
        "45": "  interface Trusted<V> extends ListenableFuture<V> {}\n",
        "46": "\n",
        "47": "  abstract static class TrustedFuture<V> extends AbstractFuture<V> implements Trusted<V> {\n",
        "48": "    @Override\n",
        "49": "    public final V get() throws InterruptedException, ExecutionException {\n",
        "50": "      return super.get();\n",
        "51": "    }\n",
        "52": "\n",
        "53": "    @Override\n",
        "54": "    public final V get(long timeout, TimeUnit unit)\n",
        "55": "        throws InterruptedException, ExecutionException, TimeoutException {\n",
        "56": "      return super.get(timeout, unit);\n",
        "57": "    }\n",
        "58": "\n",
        "59": "    @Override\n",
        "60": "    public final boolean isDone() {\n",
        "61": "      return super.isDone();\n",
        "62": "    }\n",
        "63": "\n",
        "64": "    @Override\n",
        "65": "    public final boolean isCancelled() {\n",
        "66": "      return super.isCancelled();\n",
        "67": "    }\n",
        "68": "\n",
        "69": "    @Override\n",
        "70": "    public final void addListener(Runnable listener, Executor executor) {\n",
        "71": "      super.addListener(listener, executor);\n",
        "72": "    }\n",
        "115": "  public boolean isCancelled() {\n",
        "120": "  public boolean isDone() {\n",
        "125": "   * ForwardingFluentFuture needs to override those methods, so they are not final.\n",
        "128": "  public V get() throws InterruptedException, ExecutionException {\n",
        "134": "  public V get(long timeout, TimeUnit unit)\n",
        "141": "  public void addListener(Runnable runnable, Executor executor) {\n"
    },
    "removed": {
        "38": "public abstract class AbstractFuture<V> extends FluentFuture<V> {\n",
        "40": "  abstract static class TrustedFuture<V> extends AbstractFuture<V> {\n",
        "41": "    /*\n",
        "42": "     * We don't need to override most of methods that we override in the prod version (and in fact\n",
        "43": "     * we can't) because they are already final in AbstractFuture itself under GWT.\n",
        "44": "     */\n",
        "86": "  public final boolean isCancelled() {\n",
        "91": "  public final boolean isDone() {\n",
        "96": "   * We let people override {@code get()} in the server version (though perhaps we shouldn't). Here,\n",
        "97": "   * we don't want that, and anyway, users can't, thanks to the package-private parameter.\n",
        "100": "  public final V get() throws InterruptedException, ExecutionException {\n",
        "106": "  public final V get(long timeout, TimeUnit unit)\n",
        "113": "  public final void addListener(Runnable runnable, Executor executor) {\n"
    }
}