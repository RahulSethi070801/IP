[{"func":{"oldfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_oldfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_1.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f8d3608af401d9090642da2b88f9a8b5999ff1f/AbstractFuture_2","pathinproj":"guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java","addlines":[],"dellines":[113],"addcode":[],"delcode":["  public final void addListener(Runnable runnable, Executor executor) {\n"],"methodSig":"public final void addListener(Runnable runnable, Executor executor)"},"doc":{"oldfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_olddocfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_1.txt","newfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newdocfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_1.txt","newdoc":" The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n","newJdoc":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newdocnewJdoc_0f8d3608af401d9090642da2b88f9a8b5999ff1f_1.txt","olddoc":" The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n","oldJdoc":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_olddocJdoc_0f8d3608af401d9090642da2b88f9a8b5999ff1f_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f8d3608af401d9090642da2b88f9a8b5999ff1f/AbstractFuture_3","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[968],"dellines":[968],"addcode":["  // TODO(user): move parts into a default method on ListenableFuture?\n","  // TODO(user): move parts into a default method on ListenableFuture?\n"],"delcode":["  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n","  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n"],"methodSig":"public String toString()"},"id":5,"flag":1,"commit":"0f8d3608af401d9090642da2b88f9a8b5999ff1f"},{"func":{"oldfunccode":"","newfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_2.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f8d3608af401d9090642da2b88f9a8b5999ff1f/AbstractFuture_2","pathinproj":"guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java","addlines":[141],"dellines":[],"addcode":["  public void addListener(Runnable runnable, Executor executor) {\n"],"delcode":[],"methodSig":"public void addListener(Runnable runnable, Executor executor)"},"doc":{"oldfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_olddocfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_2.txt","newfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newdocfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_2.txt","newdoc":" The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n","newJdoc":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newdocnewJdoc_0f8d3608af401d9090642da2b88f9a8b5999ff1f_2.txt","olddoc":" The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n","oldJdoc":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_olddocJdoc_0f8d3608af401d9090642da2b88f9a8b5999ff1f_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f8d3608af401d9090642da2b88f9a8b5999ff1f/AbstractFuture_3","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[968],"dellines":[968],"addcode":["  // TODO(user): move parts into a default method on ListenableFuture?\n","  // TODO(user): move parts into a default method on ListenableFuture?\n"],"delcode":["  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n","  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n"],"methodSig":"public String toString()"},"id":5,"flag":1,"commit":"0f8d3608af401d9090642da2b88f9a8b5999ff1f"},{"func":{"oldfunccode":"","newfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_3.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f8d3608af401d9090642da2b88f9a8b5999ff1f/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[69,102,70,103,71,104,72,105],"dellines":[],"addcode":["    @Override\n","    public final void addListener(Runnable listener, Executor executor) {\n","      super.addListener(listener, executor);\n","    }\n","    @Override\n","    public final void addListener(Runnable listener, Executor executor) {\n","      super.addListener(listener, executor);\n","    }\n","    @Override\n","    public final void addListener(Runnable listener, Executor executor) {\n","      super.addListener(listener, executor);\n","    }\n"],"delcode":[],"methodSig":"public final void addListener(Runnable listener, Executor executor)"},"doc":{"oldfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_olddocfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_3.txt","newfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newdocfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_3.txt","newdoc":" The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n","newJdoc":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newdocnewJdoc_0f8d3608af401d9090642da2b88f9a8b5999ff1f_3.txt","olddoc":" The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n","oldJdoc":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_olddocJdoc_0f8d3608af401d9090642da2b88f9a8b5999ff1f_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f8d3608af401d9090642da2b88f9a8b5999ff1f/AbstractFuture_3","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[968],"dellines":[968],"addcode":["  // TODO(user): move parts into a default method on ListenableFuture?\n","  // TODO(user): move parts into a default method on ListenableFuture?\n"],"delcode":["  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n","  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n"],"methodSig":"public String toString()"},"id":5,"flag":1,"commit":"0f8d3608af401d9090642da2b88f9a8b5999ff1f"},{"func":{"oldfunccode":"","newfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_4.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f8d3608af401d9090642da2b88f9a8b5999ff1f/AbstractFuture_2","pathinproj":"guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java","addlines":[134],"dellines":[],"addcode":["  public V get(long timeout, TimeUnit unit)\n"],"delcode":[],"methodSig":"public V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException"},"doc":{"oldfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_olddocfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_4.txt","newfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newdocfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_4.txt","newdoc":" The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n","newJdoc":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newdocnewJdoc_0f8d3608af401d9090642da2b88f9a8b5999ff1f_4.txt","olddoc":" The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n","oldJdoc":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_olddocJdoc_0f8d3608af401d9090642da2b88f9a8b5999ff1f_4.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f8d3608af401d9090642da2b88f9a8b5999ff1f/AbstractFuture_3","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[968],"dellines":[968],"addcode":["  // TODO(user): move parts into a default method on ListenableFuture?\n","  // TODO(user): move parts into a default method on ListenableFuture?\n"],"delcode":["  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n","  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n"],"methodSig":"public String toString()"},"id":5,"flag":1,"commit":"0f8d3608af401d9090642da2b88f9a8b5999ff1f"},{"func":{"oldfunccode":"","newfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_5.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f8d3608af401d9090642da2b88f9a8b5999ff1f/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[80,48,81,49,82,50,83,51,79],"dellines":[100],"addcode":["    @CanIgnoreReturnValue\n","    @Override\n","    public final V get() throws InterruptedException, ExecutionException {\n","      return super.get();\n","    }\n","    @Override\n","    public final V get() throws InterruptedException, ExecutionException {\n","      return super.get();\n","    }\n","    @CanIgnoreReturnValue\n","    @Override\n","    public final V get() throws InterruptedException, ExecutionException {\n","      return super.get();\n","    }\n"],"delcode":["  public final V get() throws InterruptedException, ExecutionException {\n"],"methodSig":"public final V get() throws InterruptedException, ExecutionException"},"doc":{"oldfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_olddocfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_5.txt","newfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newdocfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_5.txt","newdoc":" The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n","newJdoc":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newdocnewJdoc_0f8d3608af401d9090642da2b88f9a8b5999ff1f_5.txt","olddoc":" The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n","oldJdoc":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_olddocJdoc_0f8d3608af401d9090642da2b88f9a8b5999ff1f_5.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f8d3608af401d9090642da2b88f9a8b5999ff1f/AbstractFuture_3","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[968],"dellines":[968],"addcode":["  // TODO(user): move parts into a default method on ListenableFuture?\n","  // TODO(user): move parts into a default method on ListenableFuture?\n"],"delcode":["  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n","  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n"],"methodSig":"public String toString()"},"id":5,"flag":1,"commit":"0f8d3608af401d9090642da2b88f9a8b5999ff1f"},{"func":{"oldfunccode":"","newfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_6.txt","newdoc":"","newJdoc":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newfuncnewJdoc_0f8d3608af401d9090642da2b88f9a8b5999ff1f_6.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f8d3608af401d9090642da2b88f9a8b5999ff1f/AbstractFuture_2","pathinproj":"guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java","addlines":[128],"dellines":[],"addcode":["  public V get() throws InterruptedException, ExecutionException {\n"],"delcode":[],"methodSig":"public V get() throws InterruptedException, ExecutionException"},"doc":{"oldfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_olddocfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_6.txt","newfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newdocfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_6.txt","newdoc":" The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n","newJdoc":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newdocnewJdoc_0f8d3608af401d9090642da2b88f9a8b5999ff1f_6.txt","olddoc":" The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n","oldJdoc":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_olddocJdoc_0f8d3608af401d9090642da2b88f9a8b5999ff1f_6.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f8d3608af401d9090642da2b88f9a8b5999ff1f/AbstractFuture_3","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[968],"dellines":[968],"addcode":["  // TODO(user): move parts into a default method on ListenableFuture?\n","  // TODO(user): move parts into a default method on ListenableFuture?\n"],"delcode":["  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n","  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n"],"methodSig":"public String toString()"},"id":5,"flag":1,"commit":"0f8d3608af401d9090642da2b88f9a8b5999ff1f"},{"func":{"oldfunccode":"","newfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_7.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f8d3608af401d9090642da2b88f9a8b5999ff1f/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[85,53,86,54,87,55,88,56,89,57,90],"dellines":[106],"addcode":["    @CanIgnoreReturnValue\n","    @Override\n","    public final V get(long timeout, TimeUnit unit)\n","        throws InterruptedException, ExecutionException, TimeoutException {\n","      return super.get(timeout, unit);\n","    }\n","    @Override\n","    public final V get(long timeout, TimeUnit unit)\n","        throws InterruptedException, ExecutionException, TimeoutException {\n","      return super.get(timeout, unit);\n","    }\n","    @CanIgnoreReturnValue\n","    @Override\n","    public final V get(long timeout, TimeUnit unit)\n","        throws InterruptedException, ExecutionException, TimeoutException {\n","      return super.get(timeout, unit);\n","    }\n"],"delcode":["  public final V get(long timeout, TimeUnit unit)\n"],"methodSig":"public final V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException"},"doc":{"oldfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_olddocfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_7.txt","newfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newdocfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_7.txt","newdoc":" The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n","newJdoc":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newdocnewJdoc_0f8d3608af401d9090642da2b88f9a8b5999ff1f_7.txt","olddoc":" The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n","oldJdoc":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_olddocJdoc_0f8d3608af401d9090642da2b88f9a8b5999ff1f_7.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f8d3608af401d9090642da2b88f9a8b5999ff1f/AbstractFuture_3","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[968],"dellines":[968],"addcode":["  // TODO(user): move parts into a default method on ListenableFuture?\n","  // TODO(user): move parts into a default method on ListenableFuture?\n"],"delcode":["  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n","  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n"],"methodSig":"public String toString()"},"id":5,"flag":1,"commit":"0f8d3608af401d9090642da2b88f9a8b5999ff1f"},{"func":{"oldfunccode":"","newfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_8.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f8d3608af401d9090642da2b88f9a8b5999ff1f/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[59,92,60,93,61,94,62,95],"dellines":[91],"addcode":["    @Override\n","    public final boolean isDone() {\n","      return super.isDone();\n","    }\n","    @Override\n","    public final boolean isDone() {\n","      return super.isDone();\n","    }\n","    @Override\n","    public final boolean isDone() {\n","      return super.isDone();\n","    }\n"],"delcode":["  public final boolean isDone() {\n"],"methodSig":"public final boolean isDone()"},"doc":{"oldfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_olddocfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_8.txt","newfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newdocfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_8.txt","newdoc":" The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n","newJdoc":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newdocnewJdoc_0f8d3608af401d9090642da2b88f9a8b5999ff1f_8.txt","olddoc":" The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n","oldJdoc":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_olddocJdoc_0f8d3608af401d9090642da2b88f9a8b5999ff1f_8.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f8d3608af401d9090642da2b88f9a8b5999ff1f/AbstractFuture_3","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[968],"dellines":[968],"addcode":["  // TODO(user): move parts into a default method on ListenableFuture?\n","  // TODO(user): move parts into a default method on ListenableFuture?\n"],"delcode":["  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n","  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n"],"methodSig":"public String toString()"},"id":6,"flag":1,"commit":"0f8d3608af401d9090642da2b88f9a8b5999ff1f"},{"func":{"oldfunccode":"","newfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_9.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f8d3608af401d9090642da2b88f9a8b5999ff1f/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[64,97,65,98,66,99,67,100],"dellines":[86],"addcode":["    @Override\n","    public final boolean isCancelled() {\n","      return super.isCancelled();\n","    }\n","    @Override\n","    public final boolean isCancelled() {\n","      return super.isCancelled();\n","    }\n","    @Override\n","    public final boolean isCancelled() {\n","      return super.isCancelled();\n","    }\n"],"delcode":["  public final boolean isCancelled() {\n"],"methodSig":"public final boolean isCancelled()"},"doc":{"oldfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_olddocfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_9.txt","newfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newdocfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_9.txt","newdoc":" The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n","newJdoc":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newdocnewJdoc_0f8d3608af401d9090642da2b88f9a8b5999ff1f_9.txt","olddoc":" The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n","oldJdoc":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_olddocJdoc_0f8d3608af401d9090642da2b88f9a8b5999ff1f_9.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f8d3608af401d9090642da2b88f9a8b5999ff1f/AbstractFuture_3","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[968],"dellines":[968],"addcode":["  // TODO(user): move parts into a default method on ListenableFuture?\n","  // TODO(user): move parts into a default method on ListenableFuture?\n"],"delcode":["  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n","  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n"],"methodSig":"public String toString()"},"id":6,"flag":1,"commit":"0f8d3608af401d9090642da2b88f9a8b5999ff1f"},{"func":{"oldfunccode":"","newfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_10.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f8d3608af401d9090642da2b88f9a8b5999ff1f/FluentFuture_2","pathinproj":"guava/src/com/google/common/util/concurrent/FluentFuture.java","addlines":[107,108,109,110,111],"dellines":[],"addcode":["    @CanIgnoreReturnValue\n","    @Override\n","    public final boolean cancel(boolean mayInterruptIfRunning) {\n","      return super.cancel(mayInterruptIfRunning);\n","    }\n","    @CanIgnoreReturnValue\n","    @Override\n","    public final boolean cancel(boolean mayInterruptIfRunning) {\n","      return super.cancel(mayInterruptIfRunning);\n","    }\n"],"delcode":[],"methodSig":"public final boolean cancel(boolean mayInterruptIfRunning)"},"doc":{"oldfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_olddocfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_10.txt","newfunccode":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newdocfunccode_0f8d3608af401d9090642da2b88f9a8b5999ff1f_10.txt","newdoc":" The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n","newJdoc":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_newdocnewJdoc_0f8d3608af401d9090642da2b88f9a8b5999ff1f_10.txt","olddoc":" The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n The future may complete during or before the call to getPendingToString, so we use null\n Don't call getMessage or toString() on the exception, in case the exception thrown by the\n subclass is implemented with bugs similar to the subclass.\n as a signal that we should try checking if the future is done again.\n","oldJdoc":"0f8d3608af401d9090642da2b88f9a8b5999ff1f/Codes/Match_olddocJdoc_0f8d3608af401d9090642da2b88f9a8b5999ff1f_10.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/0f8d3608af401d9090642da2b88f9a8b5999ff1f/AbstractFuture_3","pathinproj":"guava/src/com/google/common/util/concurrent/AbstractFuture.java","addlines":[968],"dellines":[968],"addcode":["  // TODO(user): move parts into a default method on ListenableFuture?\n","  // TODO(user): move parts into a default method on ListenableFuture?\n"],"delcode":["  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n","  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n"],"methodSig":"public String toString()"},"id":6,"flag":1,"commit":"0f8d3608af401d9090642da2b88f9a8b5999ff1f"}]