{"id": "0f8d3608af401d9090642da2b88f9a8b5999ff1f", "code": [{"0": "android/guava-tests/test/com/google/common/util/concurrent/FluentFutureTest.java", "added": {"1": ["    FluentFuture<String> f = FluentFuture.from(SettableFuture.<String>create());\n"], "2": ["      FluentFuture<?> f =\n", "          FluentFuture.from(SettableFuture.create()).withTimeout(0, SECONDS, executor);\n"]}, "removed": {"1": ["    FluentFuture<String> f = SettableFuture.create();\n"], "2": ["      FluentFuture<?> f = SettableFuture.create().withTimeout(0, SECONDS, executor);\n"]}, "added_lines": {"1": [43], "2": [134, 135]}, "removed_lines": {"1": [43], "2": [134]}}, {"1": "android/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java", "added": {"1": ["    extends FluentFuture.TrustedFuture<V> implements Runnable {\n"]}, "removed": {"1": ["    extends AbstractFuture.TrustedFuture<V> implements Runnable {\n"]}, "added_lines": {"1": [32]}, "removed_lines": {"1": [32]}}, {"2": "android/guava/src/com/google/common/util/concurrent/AbstractFuture.java", "added": {"1": ["public abstract class AbstractFuture<V> implements ListenableFuture<V> {\n"], "2": ["   * Tag interface marking trusted subclasses. This enables some optimizations. The implementation\n", "   * of this interface must also be an AbstractFuture and must not override or expose for overriding\n", "   * any of the public methods of ListenableFuture.\n", "   */\n"], "3": ["  // TODO(user): move parts into a default method on ListenableFuture?\n"]}, "removed": {"1": ["public abstract class AbstractFuture<V> extends FluentFuture<V> {\n"], "2": ["   * Tag interface marking trusted subclasses. This enables some optimizations.\n", "   * The implementation of this interface must also be an AbstractureFuture and\n", "   * must not override or expose for overriding all the public methods of ListenableFuture.\n", "   * */\n"], "3": ["  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n"]}, "added_lines": {"1": [66], "2": [74, 75, 76, 77], "3": [968]}, "removed_lines": {"1": [66], "2": [74, 75, 76, 77], "3": [968]}}, {"3": "android/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java", "added": {"1": ["abstract class AbstractTransformFuture<I, O, F, T> extends FluentFuture.TrustedFuture<O>\n"]}, "removed": {"1": ["abstract class AbstractTransformFuture<I, O, F, T> extends AbstractFuture.TrustedFuture<O>\n"]}, "added_lines": {"1": [31]}, "removed_lines": {"1": [31]}}, {"4": "android/guava/src/com/google/common/util/concurrent/FluentFuture.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["\n", "  /**\n", "   * A less abstract subclass of AbstractFuture. This can be used to optimize setFuture by ensuring\n", "   * that {@link #get} calls exactly the implementation of {@link AbstractFuture#get}.\n", "   */\n", "  abstract static class TrustedFuture<V> extends FluentFuture<V>\n", "      implements AbstractFuture.Trusted<V> {\n", "    @CanIgnoreReturnValue\n", "    @Override\n", "    public final V get() throws InterruptedException, ExecutionException {\n", "      return super.get();\n", "    }\n", "\n", "    @CanIgnoreReturnValue\n", "    @Override\n", "    public final V get(long timeout, TimeUnit unit)\n", "        throws InterruptedException, ExecutionException, TimeoutException {\n", "      return super.get(timeout, unit);\n", "    }\n", "\n", "    @Override\n", "    public final boolean isDone() {\n", "      return super.isDone();\n", "    }\n", "\n", "    @Override\n", "    public final boolean isCancelled() {\n", "      return super.isCancelled();\n", "    }\n", "\n", "    @Override\n", "    public final void addListener(Runnable listener, Executor executor) {\n", "      super.addListener(listener, executor);\n", "    }\n", "\n", "    @CanIgnoreReturnValue\n", "    @Override\n", "    public final boolean cancel(boolean mayInterruptIfRunning) {\n", "      return super.cancel(mayInterruptIfRunning);\n", "    }\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [21], "2": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113]}, "removed_lines": {}}, {"5": "android/guava/src/com/google/common/util/concurrent/GwtFluentFutureCatchingSpecialization.java", "added": {"1": ["abstract class GwtFluentFutureCatchingSpecialization<V> extends AbstractFuture<V> {\n"]}, "removed": {"1": ["abstract class GwtFluentFutureCatchingSpecialization<V> implements ListenableFuture<V> {\n"]}, "added_lines": {"1": [25]}, "removed_lines": {"1": [25]}}, {"6": "android/guava/src/com/google/common/util/concurrent/ImmediateFuture.java", "added": {"1": ["abstract class ImmediateFuture<V> implements ListenableFuture<V> {\n"]}, "removed": {"1": ["abstract class ImmediateFuture<V> extends FluentFuture<V> {\n"]}, "added_lines": {"1": [31]}, "removed_lines": {"1": [31]}}, {"7": "android/guava/src/com/google/common/util/concurrent/TimeoutFuture.java", "added": {"1": ["final class TimeoutFuture<V> extends FluentFuture.TrustedFuture<V> {\n"]}, "removed": {"1": ["final class TimeoutFuture<V> extends AbstractFuture.TrustedFuture<V> {\n"]}, "added_lines": {"1": [37]}, "removed_lines": {"1": [37]}}, {"8": "android/guava/src/com/google/common/util/concurrent/TrustedListenableFutureTask.java", "added": {"1": ["class TrustedListenableFutureTask<V> extends FluentFuture.TrustedFuture<V>\n"]}, "removed": {"1": ["class TrustedListenableFutureTask<V> extends AbstractFuture.TrustedFuture<V>\n"]}, "added_lines": {"1": [33]}, "removed_lines": {"1": [33]}}, {"9": "guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java", "added": {"1": ["public abstract class AbstractFuture<V> implements ListenableFuture<V> {\n", "\n", "  /**\n", "   * Tag interface marking trusted subclasses. This enables some optimizations. The implementation\n", "   * of this interface must also be an AbstractFuture and must not override or expose for overriding\n", "   * any of the public methods of ListenableFuture.\n", "   */\n", "  interface Trusted<V> extends ListenableFuture<V> {}\n", "\n", "  abstract static class TrustedFuture<V> extends AbstractFuture<V> implements Trusted<V> {\n", "    @Override\n", "    public final V get() throws InterruptedException, ExecutionException {\n", "      return super.get();\n", "    }\n", "\n", "    @Override\n", "    public final V get(long timeout, TimeUnit unit)\n", "        throws InterruptedException, ExecutionException, TimeoutException {\n", "      return super.get(timeout, unit);\n", "    }\n", "\n", "    @Override\n", "    public final boolean isDone() {\n", "      return super.isDone();\n", "    }\n", "\n", "    @Override\n", "    public final boolean isCancelled() {\n", "      return super.isCancelled();\n", "    }\n", "\n", "    @Override\n", "    public final void addListener(Runnable listener, Executor executor) {\n", "      super.addListener(listener, executor);\n", "    }\n"], "2": ["  public boolean isCancelled() {\n", "  public boolean isDone() {\n", "   * ForwardingFluentFuture needs to override those methods, so they are not final.\n", "  public V get() throws InterruptedException, ExecutionException {\n", "  public V get(long timeout, TimeUnit unit)\n", "  public void addListener(Runnable runnable, Executor executor) {\n"]}, "removed": {"1": ["public abstract class AbstractFuture<V> extends FluentFuture<V> {\n", "  abstract static class TrustedFuture<V> extends AbstractFuture<V> {\n", "    /*\n", "     * We don't need to override most of methods that we override in the prod version (and in fact\n", "     * we can't) because they are already final in AbstractFuture itself under GWT.\n", "     */\n"], "2": ["  public final boolean isCancelled() {\n", "  public final boolean isDone() {\n", "   * We let people override {@code get()} in the server version (though perhaps we shouldn't). Here,\n", "   * we don't want that, and anyway, users can't, thanks to the package-private parameter.\n", "  public final V get() throws InterruptedException, ExecutionException {\n", "  public final V get(long timeout, TimeUnit unit)\n", "  public final void addListener(Runnable runnable, Executor executor) {\n"]}, "added_lines": {"1": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72], "2": [115, 120, 125, 128, 134, 141]}, "removed_lines": {"1": [38, 40, 41, 42, 43, 44], "2": [86, 91, 96, 97, 100, 106, 113]}}, {"10": "guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/GwtFluentFutureCatchingSpecialization.java", "added": {"1": ["abstract class GwtFluentFutureCatchingSpecialization<V> extends AbstractFuture<V> {\n"]}, "removed": {"1": ["abstract class GwtFluentFutureCatchingSpecialization<V> implements ListenableFuture<V> {\n"]}, "added_lines": {"1": [25]}, "removed_lines": {"1": [25]}}, {"11": "guava-tests/test/com/google/common/util/concurrent/FluentFutureTest.java", "added": {"1": ["    FluentFuture<String> f = FluentFuture.from(SettableFuture.<String>create());\n"], "2": ["      FluentFuture<?> f =\n", "          FluentFuture.from(SettableFuture.create()).withTimeout(0, SECONDS, executor);\n"]}, "removed": {"1": ["    FluentFuture<String> f = SettableFuture.create();\n"], "2": ["      FluentFuture<?> f = SettableFuture.create().withTimeout(0, SECONDS, executor);\n"]}, "added_lines": {"1": [43], "2": [134, 135]}, "removed_lines": {"1": [43], "2": [134]}}, {"12": "guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java", "added": {"1": ["    extends FluentFuture.TrustedFuture<V> implements Runnable {\n"]}, "removed": {"1": ["    extends AbstractFuture.TrustedFuture<V> implements Runnable {\n"]}, "added_lines": {"1": [32]}, "removed_lines": {"1": [32]}}, {"13": "guava/src/com/google/common/util/concurrent/AbstractFuture.java", "added": {"1": ["public abstract class AbstractFuture<V> implements ListenableFuture<V> {\n"], "2": ["   * Tag interface marking trusted subclasses. This enables some optimizations. The implementation\n", "   * of this interface must also be an AbstractFuture and must not override or expose for overriding\n", "   * any of the public methods of ListenableFuture.\n", "   */\n"], "3": ["  // TODO(user): move parts into a default method on ListenableFuture?\n"]}, "removed": {"1": ["public abstract class AbstractFuture<V> extends FluentFuture<V> {\n"], "2": ["   * Tag interface marking trusted subclasses. This enables some optimizations.\n", "   * The implementation of this interface must also be an AbstractureFuture and\n", "   * must not override or expose for overriding all the public methods of ListenableFuture.\n", "   * */\n"], "3": ["  // TODO(user) move this up into FluentFuture, or parts as a default method on ListenableFuture?\n"]}, "added_lines": {"1": [66], "2": [74, 75, 76, 77], "3": [968]}, "removed_lines": {"1": [66], "2": [74, 75, 76, 77], "3": [968]}}, {"14": "guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java", "added": {"1": ["abstract class AbstractTransformFuture<I, O, F, T> extends FluentFuture.TrustedFuture<O>\n"]}, "removed": {"1": ["abstract class AbstractTransformFuture<I, O, F, T> extends AbstractFuture.TrustedFuture<O>\n"]}, "added_lines": {"1": [31]}, "removed_lines": {"1": [31]}}, {"15": "guava/src/com/google/common/util/concurrent/FluentFuture.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["\n", "  /**\n", "   * A less abstract subclass of AbstractFuture. This can be used to optimize setFuture by ensuring\n", "   * that {@link #get} calls exactly the implementation of {@link AbstractFuture#get}.\n", "   */\n", "  abstract static class TrustedFuture<V> extends FluentFuture<V>\n", "      implements AbstractFuture.Trusted<V> {\n", "    @CanIgnoreReturnValue\n", "    @Override\n", "    public final V get() throws InterruptedException, ExecutionException {\n", "      return super.get();\n", "    }\n", "\n", "    @CanIgnoreReturnValue\n", "    @Override\n", "    public final V get(long timeout, TimeUnit unit)\n", "        throws InterruptedException, ExecutionException, TimeoutException {\n", "      return super.get(timeout, unit);\n", "    }\n", "\n", "    @Override\n", "    public final boolean isDone() {\n", "      return super.isDone();\n", "    }\n", "\n", "    @Override\n", "    public final boolean isCancelled() {\n", "      return super.isCancelled();\n", "    }\n", "\n", "    @Override\n", "    public final void addListener(Runnable listener, Executor executor) {\n", "      super.addListener(listener, executor);\n", "    }\n", "\n", "    @CanIgnoreReturnValue\n", "    @Override\n", "    public final boolean cancel(boolean mayInterruptIfRunning) {\n", "      return super.cancel(mayInterruptIfRunning);\n", "    }\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [21], "2": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113]}, "removed_lines": {}}, {"16": "guava/src/com/google/common/util/concurrent/GwtFluentFutureCatchingSpecialization.java", "added": {"1": ["abstract class GwtFluentFutureCatchingSpecialization<V> extends AbstractFuture<V> {\n"]}, "removed": {"1": ["abstract class GwtFluentFutureCatchingSpecialization<V> implements ListenableFuture<V> {\n"]}, "added_lines": {"1": [25]}, "removed_lines": {"1": [25]}}, {"17": "guava/src/com/google/common/util/concurrent/ImmediateFuture.java", "added": {"1": ["abstract class ImmediateFuture<V> implements ListenableFuture<V> {\n"]}, "removed": {"1": ["abstract class ImmediateFuture<V> extends FluentFuture<V> {\n"]}, "added_lines": {"1": [31]}, "removed_lines": {"1": [31]}}, {"18": "guava/src/com/google/common/util/concurrent/TimeoutFuture.java", "added": {"1": ["final class TimeoutFuture<V> extends FluentFuture.TrustedFuture<V> {\n"]}, "removed": {"1": ["final class TimeoutFuture<V> extends AbstractFuture.TrustedFuture<V> {\n"]}, "added_lines": {"1": [37]}, "removed_lines": {"1": [37]}}, {"19": "guava/src/com/google/common/util/concurrent/TrustedListenableFutureTask.java", "added": {"1": ["class TrustedListenableFutureTask<V> extends FluentFuture.TrustedFuture<V>\n"]}, "removed": {"1": ["class TrustedListenableFutureTask<V> extends AbstractFuture.TrustedFuture<V>\n"]}, "added_lines": {"1": [33]}, "removed_lines": {"1": [33]}}]}
