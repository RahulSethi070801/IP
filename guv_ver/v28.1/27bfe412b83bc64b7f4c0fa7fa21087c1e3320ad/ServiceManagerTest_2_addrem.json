{
    "addition": {
        "342": "  public void testDoCancelStart() throws TimeoutException {\n",
        "343": "    Service a =\n",
        "344": "        new AbstractService() {\n",
        "345": "          @Override\n",
        "346": "          protected void doStart() {\n",
        "347": "            // Never starts!\n",
        "348": "          }\n",
        "349": "\n",
        "350": "          @Override\n",
        "351": "          protected void doCancelStart() {\n",
        "352": "            assertThat(state()).isEqualTo(Service.State.STOPPING);\n",
        "353": "            notifyStopped();\n",
        "354": "          }\n",
        "355": "\n",
        "356": "          @Override\n",
        "357": "          protected void doStop() {\n",
        "358": "            throw new AssertionError(); // Should not be called.\n",
        "359": "          }\n",
        "360": "        };\n",
        "361": "\n",
        "362": "    final ServiceManager manager = new ServiceManager(asList(a));\n",
        "363": "    manager.startAsync();\n",
        "364": "    manager.stopAsync();\n",
        "365": "    manager.awaitStopped(10, TimeUnit.MILLISECONDS);\n",
        "366": "    assertThat(manager.servicesByState().keySet()).containsExactly(Service.State.TERMINATED);\n",
        "367": "  }\n",
        "368": "\n",
        "369": "  public void testNotifyStoppedAfterFailure() throws TimeoutException {\n",
        "370": "    Service a =\n",
        "371": "        new AbstractService() {\n",
        "372": "          @Override\n",
        "373": "          protected void doStart() {\n",
        "374": "            notifyFailed(new IllegalStateException(\"start failure\"));\n",
        "375": "            notifyStopped(); // This will be a no-op.\n",
        "376": "          }\n",
        "377": "\n",
        "378": "          @Override\n",
        "379": "          protected void doStop() {\n",
        "380": "            notifyStopped();\n",
        "381": "          }\n",
        "382": "        };\n",
        "383": "    final ServiceManager manager = new ServiceManager(asList(a));\n",
        "384": "    manager.startAsync();\n",
        "385": "    manager.awaitStopped(10, TimeUnit.MILLISECONDS);\n",
        "386": "    assertThat(manager.servicesByState().keySet()).containsExactly(Service.State.FAILED);\n",
        "387": "  }\n",
        "388": "\n"
    },
    "removed": {}
}