{
    "addition": {
        "84": "  private static final ListenerCallQueue.Event<Listener> TERMINATED_FROM_STARTING_EVENT =\n",
        "85": "      terminatedEvent(STARTING);\n",
        "216": "   *\n",
        "217": "   * <p>If {@link #stopAsync} is called on a {@link State#STARTING} service, this method is not\n",
        "218": "   * invoked immediately. Instead, it will be deferred until after the service is {@link\n",
        "219": "   * State#RUNNING}. Services that need to cancel startup work can override {#link #doCancelStart}.\n",
        "224": "  /**\n",
        "225": "   * This method is called by {@link #stopAsync} when the service is still starting (i.e. {@link\n",
        "226": "   * #startAsync} has been called but {@link #notifyStarted} has not). Subclasses can override the\n",
        "227": "   * method to cancel pending work and then call {@link #notifyStopped} to stop the service.\n",
        "228": "   *\n",
        "229": "   * <p>This method should return promptly; prefer to do work on a different thread where it is\n",
        "230": "   * convenient. It is invoked exactly once on service shutdown, even when {@link #stopAsync} is\n",
        "231": "   * called multiple times.\n",
        "232": "   *\n",
        "233": "   * <p>When this method is called {@link #state()} will return {@link State#STOPPING}, which\n",
        "234": "   * is the external state observable by the caller of {@link #stopAsync}.\n",
        "235": "   *\n",
        "236": "   * @since NEXT\n",
        "237": "   */\n",
        "238": "  @ForOverride\n",
        "239": "  protected void doCancelStart() {}\n",
        "240": "\n",
        "275": "            doCancelStart();\n",
        "409": "   * the service to transition from {@link State#STARTING} or {@link State#STOPPING} to {@link\n",
        "410": "   * State#TERMINATED}.\n",
        "412": "   * @throws IllegalStateException if the service is not one of {@link State#STOPPING}, {@link\n",
        "413": "   *     State#STARTING}, or {@link State#RUNNING}.\n",
        "418": "      State previous = state();\n",
        "419": "      switch (previous) {\n",
        "420": "        case NEW:\n",
        "421": "        case TERMINATED:\n",
        "422": "        case FAILED:\n",
        "423": "          throw new IllegalStateException(\"Cannot notifyStopped() when the service is \" + previous);\n",
        "424": "        case RUNNING:\n",
        "425": "        case STARTING:\n",
        "426": "        case STOPPING:\n",
        "427": "          snapshot = new StateSnapshot(TERMINATED);\n",
        "428": "          enqueueTerminatedEvent(previous);\n",
        "429": "          break;\n",
        "528": "      case STARTING:\n",
        "529": "        listeners.enqueue(TERMINATED_FROM_STARTING_EVENT);\n",
        "530": "        break;\n"
    },
    "removed": {
        "263": "          default:\n",
        "264": "            throw new AssertionError(\"Unexpected state: \" + previous);\n",
        "387": "   * the service to transition from {@link State#STOPPING} to {@link State#TERMINATED}.\n",
        "389": "   * @throws IllegalStateException if the service is neither {@link State#STOPPING} nor {@link\n",
        "390": "   *     State#RUNNING}.\n",
        "395": "      // We check the internal state of the snapshot instead of state() directly so we don't allow\n",
        "396": "      // notifyStopped() to be called while STARTING, even if stop() has already been called.\n",
        "397": "      State previous = snapshot.state;\n",
        "398": "      if (previous != STOPPING && previous != RUNNING) {\n",
        "399": "        IllegalStateException failure =\n",
        "400": "            new IllegalStateException(\"Cannot notifyStopped() when the service is \" + previous);\n",
        "401": "        notifyFailed(failure);\n",
        "402": "        throw failure;\n",
        "404": "      snapshot = new StateSnapshot(TERMINATED);\n",
        "405": "      enqueueTerminatedEvent(previous);\n",
        "436": "        default:\n",
        "437": "          throw new AssertionError(\"Unexpected state: \" + previous);\n",
        "511": "      case STARTING:\n",
        "514": "      default:\n"
    }
}