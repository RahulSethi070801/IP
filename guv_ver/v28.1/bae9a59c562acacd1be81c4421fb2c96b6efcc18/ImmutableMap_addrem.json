{
    "addition": {
        "155": "   * A builder for creating immutable map instances, especially {@code public\n",
        "156": "   * static final} maps (\"constant maps\"). Example: <pre>   {@code\n",
        "169": "   * <p>By default, a {@code Builder} will generate maps that iterate over entries in the order\n",
        "170": "   * they were inserted into the builder, equivalently to {@code LinkedHashMap}.  For example, in\n",
        "171": "   * the above example, {@code WORD_TO_INT.entrySet()} is guaranteed to iterate over the entries in\n",
        "172": "   * the order {@code \"one\"=1, \"two\"=2, \"three\"=3}, and {@code keySet()} and {@code values()}\n",
        "173": "   * respect the same order.   If you want a different order, consider using {@link ImmutableSortedMap} to sort\n",
        "174": "   * by keys, or call {@link #orderEntriesByValue(Comparator)}, which changes this builder to sort\n",
        "175": "   * entries by value.\n",
        "176": "   *\n",
        "177": "   * <p>Builder instances can be reused - it is safe to call {@link #build}\n",
        "178": "   * multiple times to build multiple maps in series. Each map is a superset of\n",
        "179": "   * the maps created before it.\n",
        "294": "     * Returns a newly-created immutable map.  The iteration order of the returned map is\n",
        "295": "     * the order in which entries were inserted into the builder, unless\n",
        "296": "     * {@link #orderEntriesByValue} was called, in which case entries are sorted by value.\n",
        "336": "   * Returns an immutable map containing the same entries as {@code map}. The returned map iterates\n",
        "337": "   * over entries in the same order as the {@code entrySet} of the original map.  If {@code map}\n",
        "338": "   * somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap}\n",
        "339": "   * whose comparator is not <i>consistent with equals</i>), the results of this method are\n",
        "340": "   * undefined.\n",
        "342": "   * <p>Despite the method name, this method attempts to avoid actually copying\n",
        "343": "   * the data when it is safe to do so. The exact circumstances under which a\n",
        "344": "   * copy will or will not be performed are undocumented and subject to change.\n",
        "486": "   * Returns an immutable set of the mappings in this map.  The iteration order is specified by\n",
        "487": "   * the method used to create this map.  Typically, this is insertion order.\n",
        "500": "   * Returns an immutable set of the keys in this map, in the same order that they appear in\n",
        "501": "   * {@link #entrySet}.\n",
        "534": "   * Returns an immutable collection of the values in this map, in the same order that they appear\n",
        "535": "   * in {@link #entrySet}.\n"
    },
    "removed": {
        "155": "   * A builder for creating immutable map instances, especially {@code public static final} maps\n",
        "156": "   * (\"constant maps\"). Example:\n",
        "158": "   * <pre>{@code\n",
        "170": "   * <p>Builder instances can be reused - it is safe to call {@link #build} multiple times to build\n",
        "171": "   * multiple maps in series. Each map is a superset of the maps created before it.\n",
        "286": "     * Returns a newly-created immutable map.\n",
        "326": "   * Returns an immutable map containing the same entries as {@code map}. If {@code map} somehow\n",
        "327": "   * contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose\n",
        "328": "   * comparator is not <i>consistent with equals</i>), the results of this method are undefined.\n",
        "330": "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n",
        "331": "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n",
        "332": "   * undocumented and subject to change.\n",
        "338": "      // TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n",
        "339": "      // on the ImmutableMap delegate(), rather than the bimap itself\n",
        "340": "\n",
        "477": "   * Returns an immutable set of the mappings in this map. The entries are in the same order as the\n",
        "478": "   * parameters used to build this map.\n",
        "491": "   * Returns an immutable set of the keys in this map. These keys are in the same order as the\n",
        "492": "   * parameters used to build this map.\n",
        "525": "   * Returns an immutable collection of the values in this map. The values are in the same order as\n",
        "526": "   * the parameters used to build this map.\n"
    }
}