{
    "addition": {
        "196": "   * A builder for creating immutable map instances, especially {@code public static final} maps\n",
        "197": "   * (\"constant maps\"). Example: <pre>   {@code\n",
        "206": "   * <p>For <i>small</i> immutable maps, the {@code ImmutableMap.of()} methods are even more\n",
        "207": "   * convenient.\n",
        "208": "   *\n",
        "209": "   * <p>By default, a {@code Builder} will generate maps that iterate over entries in the order\n",
        "210": "   * they were inserted into the builder, equivalently to {@code LinkedHashMap}.  For example, in\n",
        "211": "   * the above example, {@code WORD_TO_INT.entrySet()} is guaranteed to iterate over the entries in\n",
        "212": "   * the order {@code \"one\"=1, \"two\"=2, \"three\"=3}, and {@code keySet()} and {@code values()}\n",
        "213": "   * respect the same order.   If you want a different order, consider using {@link ImmutableSortedMap} to sort\n",
        "214": "   * by keys, or call {@link #orderEntriesByValue(Comparator)}, which changes this builder to sort\n",
        "215": "   * entries by value.\n",
        "342": "     * Returns a newly-created immutable map.  The iteration order of the returned map is\n",
        "343": "     * the order in which entries were inserted into the builder, unless\n",
        "344": "     * {@link #orderEntriesByValue} was called, in which case entries are sorted by value.\n",
        "379": "   * Returns an immutable map containing the same entries as {@code map}. The returned map iterates\n",
        "380": "   * over entries in the same order as the {@code entrySet} of the original map.  If {@code map}\n",
        "381": "   * somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap}\n",
        "382": "   * whose comparator is not <i>consistent with equals</i>), the results of this method are\n",
        "383": "   * undefined.\n",
        "674": "   * Returns an immutable set of the mappings in this map.  The iteration order is specified by\n",
        "675": "   * the method used to create this map.  Typically, this is insertion order.\n",
        "689": "   * Returns an immutable set of the keys in this map, in the same order that they appear in\n",
        "690": "   * {@link #entrySet}.\n",
        "728": "   * Returns an immutable collection of the values in this map, in the same order that they appear\n",
        "729": "   * in {@link #entrySet}.\n"
    },
    "removed": {
        "196": "   * A builder for creating immutable map instances, especially {@code public\n",
        "197": "   * static final} maps (\"constant maps\"). Example: <pre>   {@code\n",
        "206": "   * <p>For <i>small</i> immutable maps, the {@code ImmutableMap.of()} methods are\n",
        "207": "   * even more convenient.\n",
        "334": "     * Returns a newly-created immutable map.\n",
        "369": "   * Returns an immutable map containing the same entries as {@code map}. If\n",
        "370": "   * {@code map} somehow contains entries with duplicate keys (for example, if\n",
        "371": "   * it is a {@code SortedMap} whose comparator is not <i>consistent with\n",
        "372": "   * equals</i>), the results of this method are undefined.\n",
        "382": "      // TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n",
        "383": "      // on the ImmutableMap delegate(), rather than the bimap itself\n",
        "384": "\n",
        "666": "   * Returns an immutable set of the mappings in this map. The entries are in\n",
        "667": "   * the same order as the parameters used to build this map.\n",
        "681": "   * Returns an immutable set of the keys in this map. These keys are in\n",
        "682": "   * the same order as the parameters used to build this map.\n",
        "720": "   * Returns an immutable collection of the values in this map. The values are\n",
        "721": "   * in the same order as the parameters used to build this map.\n"
    }
}