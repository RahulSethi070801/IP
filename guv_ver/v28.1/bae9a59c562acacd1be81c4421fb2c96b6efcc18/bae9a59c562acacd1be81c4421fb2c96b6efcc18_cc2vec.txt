{"id": "bae9a59c562acacd1be81c4421fb2c96b6efcc18", "code": [{"0": "android/guava/src/com/google/common/collect/ImmutableBiMap.java", "added": {"1": ["   * <p>By default, a {@code Builder} will generate bimaps that iterate over entries in the order\n", "   * they were inserted into the builder.  For example, in the above example,\n", "   * {@code WORD_TO_INT.entrySet()} is guaranteed to iterate over the entries in the order\n", "   * {@code \"one\"=1, \"two\"=2, \"three\"=3}, and {@code keySet()} and {@code values()} respect the same\n", "   * order. If you want a different order, consider using\n", "   * {@link #orderEntriesByValue(Comparator)}, which changes this builder to sort\n", "   * entries by value.\n", "   *\n"], "2": ["     * Returns a newly-created immutable bimap.  The iteration order of the returned bimap is\n", "     * the order in which entries were inserted into the builder, unless\n", "     * {@link #orderEntriesByValue} was called, in which case entries are sorted by value.\n"], "3": ["   * <p>The returned {@code BiMap} iterates over entries in the same order as the\n", "   * {@code entrySet} of the original map.\n", "   *\n", "   * @throws IllegalArgumentException if two keys have the same value or two values have the same\n", "   *     key\n"], "4": ["   * Returns an immutable bimap containing the given entries.  The returned bimap iterates over\n", "   * entries in the same order as the original iterable.\n"], "5": ["   * Returns an immutable set of the values in this map, in the same order they appear in {@link\n", "   * #entrySet}.\n"]}, "removed": {"2": ["     * Returns a newly-created immutable bimap.\n"], "3": ["   * @throws IllegalArgumentException if two keys have the same value\n"], "4": ["   * Returns an immutable bimap containing the given entries.\n"], "5": ["   * Returns an immutable set of the values in this map. The values are in the\n", "   * same order as the parameters used to build this map.\n"]}, "added_lines": {"1": [133, 134, 135, 136, 137, 138, 139, 140], "2": [233, 234, 235], "3": [256, 257, 258, 263, 264], "4": [281, 282], "5": [311, 312]}, "removed_lines": {"2": [225], "3": [250], "4": [267], "5": [296, 297]}}, {"1": "android/guava/src/com/google/common/collect/ImmutableCollection.java", "added": {"1": [" *     the collection was created. Typically this is insertion order unless an explicit ordering is\n", " *     otherwise specified (e.g. {@link ImmutableSortedSet#naturalOrder}).  See the appropriate\n", " *     factory method for details. View collections such as {@link ImmutableMultiset#elementSet}\n", " *     iterate in the same order as the parent, except as noted.\n"]}, "removed": {"1": [" *     the collection was created (see the appropriate factory method for details). View collections\n", " *     such as {@link ImmutableMultiset#elementSet} iterate in the same order as the parent, except\n", " *     as noted.\n"]}, "added_lines": {"1": [60, 61, 62, 63]}, "removed_lines": {"1": [60, 61, 62]}}, {"2": "android/guava/src/com/google/common/collect/ImmutableList.java", "added": {"1": ["   * <p>Elements appear in the resulting list in the same order they were added\n", "   * to the builder.\n", "   *\n"]}, "removed": {}, "added_lines": {"1": [652, 653, 654]}, "removed_lines": {}}, {"3": "android/guava/src/com/google/common/collect/ImmutableMap.java", "added": {"1": ["   * A builder for creating immutable map instances, especially {@code public\n", "   * static final} maps (\"constant maps\"). Example: <pre>   {@code\n"], "2": ["   * <p>By default, a {@code Builder} will generate maps that iterate over entries in the order\n", "   * they were inserted into the builder, equivalently to {@code LinkedHashMap}.  For example, in\n", "   * the above example, {@code WORD_TO_INT.entrySet()} is guaranteed to iterate over the entries in\n", "   * the order {@code \"one\"=1, \"two\"=2, \"three\"=3}, and {@code keySet()} and {@code values()}\n", "   * respect the same order.   If you want a different order, consider using {@link ImmutableSortedMap} to sort\n", "   * by keys, or call {@link #orderEntriesByValue(Comparator)}, which changes this builder to sort\n", "   * entries by value.\n", "   *\n", "   * <p>Builder instances can be reused - it is safe to call {@link #build}\n", "   * multiple times to build multiple maps in series. Each map is a superset of\n", "   * the maps created before it.\n"], "3": ["     * Returns a newly-created immutable map.  The iteration order of the returned map is\n", "     * the order in which entries were inserted into the builder, unless\n", "     * {@link #orderEntriesByValue} was called, in which case entries are sorted by value.\n"], "4": ["   * Returns an immutable map containing the same entries as {@code map}. The returned map iterates\n", "   * over entries in the same order as the {@code entrySet} of the original map.  If {@code map}\n", "   * somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap}\n", "   * whose comparator is not <i>consistent with equals</i>), the results of this method are\n", "   * undefined.\n", "   * <p>Despite the method name, this method attempts to avoid actually copying\n", "   * the data when it is safe to do so. The exact circumstances under which a\n", "   * copy will or will not be performed are undocumented and subject to change.\n"], "5": ["   * Returns an immutable set of the mappings in this map.  The iteration order is specified by\n", "   * the method used to create this map.  Typically, this is insertion order.\n"], "6": ["   * Returns an immutable set of the keys in this map, in the same order that they appear in\n", "   * {@link #entrySet}.\n"], "7": ["   * Returns an immutable collection of the values in this map, in the same order that they appear\n", "   * in {@link #entrySet}.\n"]}, "removed": {"1": ["   * A builder for creating immutable map instances, especially {@code public static final} maps\n", "   * (\"constant maps\"). Example:\n", "   * <pre>{@code\n"], "2": ["   * <p>Builder instances can be reused - it is safe to call {@link #build} multiple times to build\n", "   * multiple maps in series. Each map is a superset of the maps created before it.\n"], "3": ["     * Returns a newly-created immutable map.\n"], "4": ["   * Returns an immutable map containing the same entries as {@code map}. If {@code map} somehow\n", "   * contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose\n", "   * comparator is not <i>consistent with equals</i>), the results of this method are undefined.\n", "   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is\n", "   * safe to do so. The exact circumstances under which a copy will or will not be performed are\n", "   * undocumented and subject to change.\n", "      // TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n", "      // on the ImmutableMap delegate(), rather than the bimap itself\n", "\n"], "5": ["   * Returns an immutable set of the mappings in this map. The entries are in the same order as the\n", "   * parameters used to build this map.\n"], "6": ["   * Returns an immutable set of the keys in this map. These keys are in the same order as the\n", "   * parameters used to build this map.\n"], "7": ["   * Returns an immutable collection of the values in this map. The values are in the same order as\n", "   * the parameters used to build this map.\n"]}, "added_lines": {"1": [155, 156], "2": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "3": [294, 295, 296], "4": [336, 337, 338, 339, 340, 342, 343, 344], "5": [486, 487], "6": [500, 501], "7": [534, 535]}, "removed_lines": {"1": [155, 156, 158], "2": [170, 171], "3": [286], "4": [326, 327, 328, 330, 331, 332, 338, 339, 340], "5": [477, 478], "6": [491, 492], "7": [525, 526]}}, {"4": "android/guava/src/com/google/common/collect/ImmutableSet.java", "added": {"1": ["   * <p>Elements appear in the resulting set in the same order they were first added to the builder.\n", "   *\n"]}, "removed": {}, "added_lines": {"1": [416, 417]}, "removed_lines": {}}, {"5": "guava/src/com/google/common/collect/ImmutableBiMap.java", "added": {"1": ["   * <p>By default, a {@code Builder} will generate bimaps that iterate over entries in the order\n", "   * they were inserted into the builder.  For example, in the above example,\n", "   * {@code WORD_TO_INT.entrySet()} is guaranteed to iterate over the entries in the order\n", "   * {@code \"one\"=1, \"two\"=2, \"three\"=3}, and {@code keySet()} and {@code values()} respect the same\n", "   * order. If you want a different order, consider using\n", "   * {@link #orderEntriesByValue(Comparator)}, which changes this builder to sort\n", "   * entries by value.\n", "   *\n"], "2": ["     * Returns a newly-created immutable bimap.  The iteration order of the returned bimap is\n", "     * the order in which entries were inserted into the builder, unless\n", "     * {@link #orderEntriesByValue} was called, in which case entries are sorted by value.\n"], "3": ["   * <p>The returned {@code BiMap} iterates over entries in the same order as the\n", "   * {@code entrySet} of the original map.\n", "   *\n", "   * @throws IllegalArgumentException if two keys have the same value or two values have the same\n", "   *     key\n"], "4": ["   * Returns an immutable bimap containing the given entries.  The returned bimap iterates over\n", "   * entries in the same order as the original iterable.\n"], "5": ["   * Returns an immutable set of the values in this map, in the same order they appear in {@link\n", "   * #entrySet}.\n"]}, "removed": {"2": ["     * Returns a newly-created immutable bimap.\n"], "3": ["   * @throws IllegalArgumentException if two keys have the same value\n"], "4": ["   * Returns an immutable bimap containing the given entries.\n"], "5": ["   * Returns an immutable set of the values in this map. The values are in the\n", "   * same order as the parameters used to build this map.\n"]}, "added_lines": {"1": [139, 140, 141, 142, 143, 144, 145, 146], "2": [245, 246, 247], "3": [288, 289, 290, 295, 296], "4": [313, 314], "5": [353, 354]}, "removed_lines": {"2": [237], "3": [282], "4": [299], "5": [338, 339]}}, {"6": "guava/src/com/google/common/collect/ImmutableCollection.java", "added": {"1": [" *     the collection was created. Typically this is insertion order unless an explicit ordering is\n", " *     otherwise specified (e.g. {@link ImmutableSortedSet#naturalOrder}).  See the appropriate\n", " *     factory method for details. View collections such as {@link ImmutableMultiset#elementSet}\n", " *     iterate in the same order as the parent, except as noted.\n"]}, "removed": {"1": [" *     the collection was created (see the appropriate factory method for details). View collections\n", " *     such as {@link ImmutableMultiset#elementSet} iterate in the same order as the parent, except\n", " *     as noted.\n"]}, "added_lines": {"1": [63, 64, 65, 66]}, "removed_lines": {"1": [63, 64, 65]}}, {"7": "guava/src/com/google/common/collect/ImmutableList.java", "added": {"1": ["   * <p>Elements appear in the resulting list in the same order they were added\n", "   * to the builder.\n", "   *\n"]}, "removed": {}, "added_lines": {"1": [724, 725, 726]}, "removed_lines": {}}, {"8": "guava/src/com/google/common/collect/ImmutableMap.java", "added": {"1": ["   * A builder for creating immutable map instances, especially {@code public static final} maps\n", "   * (\"constant maps\"). Example: <pre>   {@code\n"], "2": ["   * <p>For <i>small</i> immutable maps, the {@code ImmutableMap.of()} methods are even more\n", "   * convenient.\n", "   *\n", "   * <p>By default, a {@code Builder} will generate maps that iterate over entries in the order\n", "   * they were inserted into the builder, equivalently to {@code LinkedHashMap}.  For example, in\n", "   * the above example, {@code WORD_TO_INT.entrySet()} is guaranteed to iterate over the entries in\n", "   * the order {@code \"one\"=1, \"two\"=2, \"three\"=3}, and {@code keySet()} and {@code values()}\n", "   * respect the same order.   If you want a different order, consider using {@link ImmutableSortedMap} to sort\n", "   * by keys, or call {@link #orderEntriesByValue(Comparator)}, which changes this builder to sort\n", "   * entries by value.\n"], "3": ["     * Returns a newly-created immutable map.  The iteration order of the returned map is\n", "     * the order in which entries were inserted into the builder, unless\n", "     * {@link #orderEntriesByValue} was called, in which case entries are sorted by value.\n"], "4": ["   * Returns an immutable map containing the same entries as {@code map}. The returned map iterates\n", "   * over entries in the same order as the {@code entrySet} of the original map.  If {@code map}\n", "   * somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap}\n", "   * whose comparator is not <i>consistent with equals</i>), the results of this method are\n", "   * undefined.\n"], "6": ["   * Returns an immutable set of the mappings in this map.  The iteration order is specified by\n", "   * the method used to create this map.  Typically, this is insertion order.\n"], "7": ["   * Returns an immutable set of the keys in this map, in the same order that they appear in\n", "   * {@link #entrySet}.\n"], "8": ["   * Returns an immutable collection of the values in this map, in the same order that they appear\n", "   * in {@link #entrySet}.\n"]}, "removed": {"1": ["   * A builder for creating immutable map instances, especially {@code public\n", "   * static final} maps (\"constant maps\"). Example: <pre>   {@code\n"], "2": ["   * <p>For <i>small</i> immutable maps, the {@code ImmutableMap.of()} methods are\n", "   * even more convenient.\n"], "3": ["     * Returns a newly-created immutable map.\n"], "4": ["   * Returns an immutable map containing the same entries as {@code map}. If\n", "   * {@code map} somehow contains entries with duplicate keys (for example, if\n", "   * it is a {@code SortedMap} whose comparator is not <i>consistent with\n", "   * equals</i>), the results of this method are undefined.\n"], "5": ["      // TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n", "      // on the ImmutableMap delegate(), rather than the bimap itself\n", "\n"], "6": ["   * Returns an immutable set of the mappings in this map. The entries are in\n", "   * the same order as the parameters used to build this map.\n"], "7": ["   * Returns an immutable set of the keys in this map. These keys are in\n", "   * the same order as the parameters used to build this map.\n"], "8": ["   * Returns an immutable collection of the values in this map. The values are\n", "   * in the same order as the parameters used to build this map.\n"]}, "added_lines": {"1": [196, 197], "2": [206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "3": [342, 343, 344], "4": [379, 380, 381, 382, 383], "6": [674, 675], "7": [689, 690], "8": [728, 729]}, "removed_lines": {"1": [196, 197], "2": [206, 207], "3": [334], "4": [369, 370, 371, 372], "5": [382, 383, 384], "6": [666, 667], "7": [681, 682], "8": [720, 721]}}, {"9": "guava/src/com/google/common/collect/ImmutableSet.java", "added": {"1": ["   * Returns a {@code Collector} that accumulates the input elements into a new {@code\n", "   * ImmutableSet}. Elements appear in the resulting set in the encounter order of the stream; if\n", "   * the stream contains duplicates (according to {@link Object#equals(Object)}), only the first\n", "   * duplicate in encounter order will appear in the result.\n"], "2": ["   * <p>Elements appear in the resulting set in the same order they were first added to the builder.\n", "   *\n"]}, "removed": {"1": ["   * Returns a {@code Collector} that accumulates the input elements into a new\n", "   * {@code ImmutableSet}.  Elements are added in encounter order; if the\n", "   * elements contain duplicates (according to {@link Object#equals(Object)}),\n", "   * only the first duplicate in encounter order will appear in the result.\n"]}, "added_lines": {"1": [56, 57, 58, 59], "2": [457, 458]}, "removed_lines": {"1": [56, 57, 58, 59]}}]}
