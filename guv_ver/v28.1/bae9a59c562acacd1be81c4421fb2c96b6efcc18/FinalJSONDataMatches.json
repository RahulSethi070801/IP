[{"func":{"oldfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_oldfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_1.txt","newfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_1.txt","newdoc":" safe since map is not writable\n","newJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newfuncnewJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_1.txt","olddoc":" TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n","oldJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_oldfuncoldJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/bae9a59c562acacd1be81c4421fb2c96b6efcc18/ImmutableMap","pathinproj":"android/guava/src/com/google/common/collect/ImmutableMap.java","addlines":[],"dellines":[384,340],"addcode":[],"delcode":["\n","\n"],"methodSig":"public static ImmutableMap<K, V> copyOf(Map<? extends K, ? extends V> map)"},"doc":{"oldfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_olddocfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_1.txt","newfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newdocfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_1.txt","newdoc":"","newJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newdocnewJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_1.txt","olddoc":"","oldJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_olddocJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/bae9a59c562acacd1be81c4421fb2c96b6efcc18/ImmutableBiMap","pathinproj":"android/guava/src/com/google/common/collect/ImmutableBiMap.java","addlines":[281,313,282,314],"dellines":[267,299],"addcode":["   * Returns an immutable bimap containing the given entries.  The returned bimap iterates over\n","   * entries in the same order as the original iterable.\n","   * Returns an immutable bimap containing the given entries.  The returned bimap iterates over\n","   * entries in the same order as the original iterable.\n"],"delcode":["   * Returns an immutable bimap containing the given entries.\n","   * Returns an immutable bimap containing the given entries.\n"],"methodSig":"public static ImmutableBiMap<K, V> copyOf(Iterable<? extends Entry<? extends K, ? extends V>> entries)"},"id":5,"flag":1,"commit":"bae9a59c562acacd1be81c4421fb2c96b6efcc18"},{"func":{"oldfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_oldfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_2.txt","newfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_2.txt","newdoc":" safe since map is not writable\n safe since map is not writable\n","newJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newfuncnewJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_2.txt","olddoc":" TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n","oldJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_oldfuncoldJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/bae9a59c562acacd1be81c4421fb2c96b6efcc18/ImmutableMap","pathinproj":"android/guava/src/com/google/common/collect/ImmutableMap.java","addlines":[],"dellines":[384,340],"addcode":[],"delcode":["\n","\n"],"methodSig":"public static ImmutableMap<K, V> copyOf(Map<? extends K, ? extends V> map)"},"doc":{"oldfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_olddocfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_2.txt","newfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newdocfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_2.txt","newdoc":"","newJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newdocnewJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_2.txt","olddoc":"","oldJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_olddocJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/bae9a59c562acacd1be81c4421fb2c96b6efcc18/ImmutableMap","pathinproj":"android/guava/src/com/google/common/collect/ImmutableMap.java","addlines":[534,535,728,729],"dellines":[720,721,525,526],"addcode":["   * Returns an immutable collection of the values in this map, in the same order that they appear\n","   * in {@link #entrySet}.\n","   * Returns an immutable collection of the values in this map, in the same order that they appear\n","   * in {@link #entrySet}.\n"],"delcode":["   * Returns an immutable collection of the values in this map. The values are in the same order as\n","   * the parameters used to build this map.\n","   * Returns an immutable collection of the values in this map. The values are\n","   * in the same order as the parameters used to build this map.\n"],"methodSig":"public ImmutableCollection<V> values()"},"id":5,"flag":1,"commit":"bae9a59c562acacd1be81c4421fb2c96b6efcc18"},{"func":{"oldfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_oldfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_3.txt","newfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_3.txt","newdoc":" safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n","newJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newfuncnewJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_3.txt","olddoc":" TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n","oldJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_oldfuncoldJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/bae9a59c562acacd1be81c4421fb2c96b6efcc18/ImmutableMap","pathinproj":"android/guava/src/com/google/common/collect/ImmutableMap.java","addlines":[],"dellines":[384,340],"addcode":[],"delcode":["\n","\n"],"methodSig":"public static ImmutableMap<K, V> copyOf(Map<? extends K, ? extends V> map)"},"doc":{"oldfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_olddocfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_3.txt","newfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newdocfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_3.txt","newdoc":"","newJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newdocnewJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_3.txt","olddoc":"","oldJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_olddocJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/bae9a59c562acacd1be81c4421fb2c96b6efcc18/ImmutableSet_2","pathinproj":"guava/src/com/google/common/collect/ImmutableSet.java","addlines":[56,57,58,59],"dellines":[56,57,58,59],"addcode":["   * Returns a {@code Collector} that accumulates the input elements into a new {@code\n","   * ImmutableSet}. Elements appear in the resulting set in the encounter order of the stream; if\n","   * the stream contains duplicates (according to {@link Object#equals(Object)}), only the first\n","   * duplicate in encounter order will appear in the result.\n"],"delcode":["   * Returns a {@code Collector} that accumulates the input elements into a new\n","   * {@code ImmutableSet}.  Elements are added in encounter order; if the\n","   * elements contain duplicates (according to {@link Object#equals(Object)}),\n","   * only the first duplicate in encounter order will appear in the result.\n"],"methodSig":"public static Collector<E, ?, ImmutableSet<E>> toImmutableSet()"},"id":5,"flag":1,"commit":"bae9a59c562acacd1be81c4421fb2c96b6efcc18"},{"func":{"oldfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_oldfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_4.txt","newfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_4.txt","newdoc":" safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n","newJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newfuncnewJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_4.txt","olddoc":" TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n","oldJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_oldfuncoldJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_4.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/bae9a59c562acacd1be81c4421fb2c96b6efcc18/ImmutableMap","pathinproj":"android/guava/src/com/google/common/collect/ImmutableMap.java","addlines":[],"dellines":[384,340],"addcode":[],"delcode":["\n","\n"],"methodSig":"public static ImmutableMap<K, V> copyOf(Map<? extends K, ? extends V> map)"},"doc":{"oldfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_olddocfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_4.txt","newfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newdocfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_4.txt","newdoc":"","newJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newdocnewJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_4.txt","olddoc":"","oldJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_olddocJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_4.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/bae9a59c562acacd1be81c4421fb2c96b6efcc18/ImmutableBiMap","pathinproj":"android/guava/src/com/google/common/collect/ImmutableBiMap.java","addlines":[353,354,311,312],"dellines":[338,339,296,297],"addcode":["   * Returns an immutable set of the values in this map, in the same order they appear in {@link\n","   * #entrySet}.\n","   * Returns an immutable set of the values in this map, in the same order they appear in {@link\n","   * #entrySet}.\n"],"delcode":["   * Returns an immutable set of the values in this map. The values are in the\n","   * same order as the parameters used to build this map.\n","   * Returns an immutable set of the values in this map. The values are in the\n","   * same order as the parameters used to build this map.\n"],"methodSig":"public ImmutableSet<V> values()"},"id":5,"flag":1,"commit":"bae9a59c562acacd1be81c4421fb2c96b6efcc18"},{"func":{"oldfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_oldfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_5.txt","newfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_5.txt","newdoc":" safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n","newJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newfuncnewJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_5.txt","olddoc":" TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n","oldJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_oldfuncoldJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_5.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/bae9a59c562acacd1be81c4421fb2c96b6efcc18/ImmutableMap","pathinproj":"android/guava/src/com/google/common/collect/ImmutableMap.java","addlines":[],"dellines":[384,340],"addcode":[],"delcode":["\n","\n"],"methodSig":"public static ImmutableMap<K, V> copyOf(Map<? extends K, ? extends V> map)"},"doc":{"oldfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_olddocfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_5.txt","newfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newdocfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_5.txt","newdoc":"","newJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newdocnewJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_5.txt","olddoc":"","oldJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_olddocJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_5.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/bae9a59c562acacd1be81c4421fb2c96b6efcc18/ImmutableMap","pathinproj":"android/guava/src/com/google/common/collect/ImmutableMap.java","addlines":[689,690,500,501],"dellines":[681,682,491,492],"addcode":["   * Returns an immutable set of the keys in this map, in the same order that they appear in\n","   * {@link #entrySet}.\n","   * Returns an immutable set of the keys in this map, in the same order that they appear in\n","   * {@link #entrySet}.\n"],"delcode":["   * Returns an immutable set of the keys in this map. These keys are in the same order as the\n","   * parameters used to build this map.\n","   * Returns an immutable set of the keys in this map. These keys are in\n","   * the same order as the parameters used to build this map.\n"],"methodSig":"public ImmutableSet<K> keySet()"},"id":5,"flag":1,"commit":"bae9a59c562acacd1be81c4421fb2c96b6efcc18"},{"func":{"oldfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_oldfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_6.txt","newfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_6.txt","newdoc":" safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n","newJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newfuncnewJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_6.txt","olddoc":" TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n","oldJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_oldfuncoldJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_6.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/bae9a59c562acacd1be81c4421fb2c96b6efcc18/ImmutableMap","pathinproj":"android/guava/src/com/google/common/collect/ImmutableMap.java","addlines":[],"dellines":[384,340],"addcode":[],"delcode":["\n","\n"],"methodSig":"public static ImmutableMap<K, V> copyOf(Map<? extends K, ? extends V> map)"},"doc":{"oldfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_olddocfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_6.txt","newfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newdocfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_6.txt","newdoc":" TODO(lowasser): if we need to make a copy of a BiMap because the\n safe since map is not writable\n forward map is a view, don't make a copy of the non-view delegate map\n","newJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newdocnewJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_6.txt","olddoc":" TODO(lowasser): if we need to make a copy of a BiMap because the\n safe since map is not writable\n forward map is a view, don't make a copy of the non-view delegate map\n","oldJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_olddocJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_6.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/bae9a59c562acacd1be81c4421fb2c96b6efcc18/ImmutableBiMap","pathinproj":"android/guava/src/com/google/common/collect/ImmutableBiMap.java","addlines":[256,288,257,289,258,290,263,295,264,296],"dellines":[250,282],"addcode":["   * <p>The returned {@code BiMap} iterates over entries in the same order as the\n","   * {@code entrySet} of the original map.\n","   *\n","   * @throws IllegalArgumentException if two keys have the same value or two values have the same\n","   *     key\n","   * <p>The returned {@code BiMap} iterates over entries in the same order as the\n","   * {@code entrySet} of the original map.\n","   *\n","   * @throws IllegalArgumentException if two keys have the same value or two values have the same\n","   *     key\n"],"delcode":["   * @throws IllegalArgumentException if two keys have the same value\n","   * @throws IllegalArgumentException if two keys have the same value\n"],"methodSig":"public static ImmutableBiMap<K, V> copyOf(Map<? extends K, ? extends V> map)"},"id":5,"flag":1,"commit":"bae9a59c562acacd1be81c4421fb2c96b6efcc18"},{"func":{"oldfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_oldfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_7.txt","newfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_7.txt","newdoc":" safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n","newJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newfuncnewJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_7.txt","olddoc":" TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n","oldJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_oldfuncoldJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_7.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/bae9a59c562acacd1be81c4421fb2c96b6efcc18/ImmutableMap","pathinproj":"android/guava/src/com/google/common/collect/ImmutableMap.java","addlines":[],"dellines":[384,340],"addcode":[],"delcode":["\n","\n"],"methodSig":"public static ImmutableMap<K, V> copyOf(Map<? extends K, ? extends V> map)"},"doc":{"oldfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_olddocfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_7.txt","newfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newdocfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_7.txt","newdoc":"","newJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newdocnewJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_7.txt","olddoc":"","oldJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_olddocJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_7.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/bae9a59c562acacd1be81c4421fb2c96b6efcc18/ImmutableBiMap","pathinproj":"android/guava/src/com/google/common/collect/ImmutableBiMap.java","addlines":[281,313,282,314],"dellines":[267,299],"addcode":["   * Returns an immutable bimap containing the given entries.  The returned bimap iterates over\n","   * entries in the same order as the original iterable.\n","   * Returns an immutable bimap containing the given entries.  The returned bimap iterates over\n","   * entries in the same order as the original iterable.\n"],"delcode":["   * Returns an immutable bimap containing the given entries.\n","   * Returns an immutable bimap containing the given entries.\n"],"methodSig":"public static ImmutableBiMap<K, V> copyOf(Iterable<? extends Entry<? extends K, ? extends V>> entries)"},"id":3,"flag":1,"commit":"bae9a59c562acacd1be81c4421fb2c96b6efcc18"},{"func":{"oldfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_oldfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_8.txt","newfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_8.txt","newdoc":" safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n","newJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newfuncnewJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_8.txt","olddoc":" TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n","oldJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_oldfuncoldJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_8.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/bae9a59c562acacd1be81c4421fb2c96b6efcc18/ImmutableMap","pathinproj":"android/guava/src/com/google/common/collect/ImmutableMap.java","addlines":[],"dellines":[384,340],"addcode":[],"delcode":["\n","\n"],"methodSig":"public static ImmutableMap<K, V> copyOf(Map<? extends K, ? extends V> map)"},"doc":{"oldfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_olddocfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_8.txt","newfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newdocfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_8.txt","newdoc":" TODO(lowasser): if we need to make a copy of a BiMap because the\n safe since map is not writable\n forward map is a view, don't make a copy of the non-view delegate map\n TODO(lowasser): if we need to make a copy of a BiMap because the\n safe since map is not writable\n forward map is a view, don't make a copy of the non-view delegate map\n","newJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newdocnewJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_8.txt","olddoc":" TODO(lowasser): if we need to make a copy of a BiMap because the\n safe since map is not writable\n forward map is a view, don't make a copy of the non-view delegate map\n TODO(lowasser): if we need to make a copy of a BiMap because the\n safe since map is not writable\n forward map is a view, don't make a copy of the non-view delegate map\n","oldJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_olddocJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_8.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/bae9a59c562acacd1be81c4421fb2c96b6efcc18/ImmutableBiMap","pathinproj":"android/guava/src/com/google/common/collect/ImmutableBiMap.java","addlines":[256,288,257,289,258,290,263,295,264,296],"dellines":[250,282],"addcode":["   * <p>The returned {@code BiMap} iterates over entries in the same order as the\n","   * {@code entrySet} of the original map.\n","   *\n","   * @throws IllegalArgumentException if two keys have the same value or two values have the same\n","   *     key\n","   * <p>The returned {@code BiMap} iterates over entries in the same order as the\n","   * {@code entrySet} of the original map.\n","   *\n","   * @throws IllegalArgumentException if two keys have the same value or two values have the same\n","   *     key\n"],"delcode":["   * @throws IllegalArgumentException if two keys have the same value\n","   * @throws IllegalArgumentException if two keys have the same value\n"],"methodSig":"public static ImmutableBiMap<K, V> copyOf(Map<? extends K, ? extends V> map)"},"id":3,"flag":1,"commit":"bae9a59c562acacd1be81c4421fb2c96b6efcc18"},{"func":{"oldfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_oldfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_9.txt","newfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_9.txt","newdoc":" safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n","newJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newfuncnewJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_9.txt","olddoc":" TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n","oldJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_oldfuncoldJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_9.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/bae9a59c562acacd1be81c4421fb2c96b6efcc18/ImmutableMap","pathinproj":"android/guava/src/com/google/common/collect/ImmutableMap.java","addlines":[],"dellines":[384,340],"addcode":[],"delcode":["\n","\n"],"methodSig":"public static ImmutableMap<K, V> copyOf(Map<? extends K, ? extends V> map)"},"doc":{"oldfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_olddocfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_9.txt","newfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newdocfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_9.txt","newdoc":"","newJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newdocnewJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_9.txt","olddoc":"","oldJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_olddocJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_9.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/bae9a59c562acacd1be81c4421fb2c96b6efcc18/ImmutableBiMap","pathinproj":"android/guava/src/com/google/common/collect/ImmutableBiMap.java","addlines":[245,246,247,233,234,235],"dellines":[225,237],"addcode":["     * Returns a newly-created immutable bimap.  The iteration order of the returned bimap is\n","     * the order in which entries were inserted into the builder, unless\n","     * {@link #orderEntriesByValue} was called, in which case entries are sorted by value.\n","     * Returns a newly-created immutable bimap.  The iteration order of the returned bimap is\n","     * the order in which entries were inserted into the builder, unless\n","     * {@link #orderEntriesByValue} was called, in which case entries are sorted by value.\n"],"delcode":["     * Returns a newly-created immutable bimap.\n","     * Returns a newly-created immutable bimap.\n"],"methodSig":"public ImmutableBiMap<K, V> build()"},"id":3,"flag":1,"commit":"bae9a59c562acacd1be81c4421fb2c96b6efcc18"},{"func":{"oldfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_oldfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_10.txt","newfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_10.txt","newdoc":" safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n safe since map is not writable\n","newJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newfuncnewJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_10.txt","olddoc":" TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n TODO(lowasser): Make ImmutableMap.copyOf(immutableBiMap) call copyOf()\n on the ImmutableMap delegate(), rather than the bimap itself\n safe since map is not writable\n","oldJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_oldfuncoldJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_10.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/bae9a59c562acacd1be81c4421fb2c96b6efcc18/ImmutableMap","pathinproj":"android/guava/src/com/google/common/collect/ImmutableMap.java","addlines":[],"dellines":[384,340],"addcode":[],"delcode":["\n","\n"],"methodSig":"public static ImmutableMap<K, V> copyOf(Map<? extends K, ? extends V> map)"},"doc":{"oldfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_olddocfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_10.txt","newfunccode":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newdocfunccode_bae9a59c562acacd1be81c4421fb2c96b6efcc18_10.txt","newdoc":"\n       * If entries is full, then this implementation may end up using the entries array\n       * directly and writing over the entry objects with non-terminal entries, but this is\n       * safe; if this Builder is used further, it will grow the entries array (so it can't\n       * affect the original array), and future build() calls will always copy any entry\n       * objects that cannot be safely reused.\n       \n","newJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_newdocnewJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_10.txt","olddoc":"\n       * If entries is full, then this implementation may end up using the entries array\n       * directly and writing over the entry objects with non-terminal entries, but this is\n       * safe; if this Builder is used further, it will grow the entries array (so it can't\n       * affect the original array), and future build() calls will always copy any entry\n       * objects that cannot be safely reused.\n       \n","oldJdoc":"bae9a59c562acacd1be81c4421fb2c96b6efcc18/Codes/Match_olddocJdoc_bae9a59c562acacd1be81c4421fb2c96b6efcc18_10.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/bae9a59c562acacd1be81c4421fb2c96b6efcc18/ImmutableMap","pathinproj":"android/guava/src/com/google/common/collect/ImmutableMap.java","addlines":[294,342,295,343,296,344],"dellines":[286,334],"addcode":["     * Returns a newly-created immutable map.  The iteration order of the returned map is\n","     * the order in which entries were inserted into the builder, unless\n","     * {@link #orderEntriesByValue} was called, in which case entries are sorted by value.\n","     * Returns a newly-created immutable map.  The iteration order of the returned map is\n","     * the order in which entries were inserted into the builder, unless\n","     * {@link #orderEntriesByValue} was called, in which case entries are sorted by value.\n"],"delcode":["     * Returns a newly-created immutable map.\n","     * Returns a newly-created immutable map.\n"],"methodSig":"public ImmutableMap<K, V> build()"},"id":3,"flag":1,"commit":"bae9a59c562acacd1be81c4421fb2c96b6efcc18"}]