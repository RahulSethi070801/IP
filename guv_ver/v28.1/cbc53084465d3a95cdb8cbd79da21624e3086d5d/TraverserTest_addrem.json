{
    "addition": {
        "22": "import static com.google.common.collect.Lists.charactersOf;\n",
        "179": "  @Test\n",
        "180": "  public void forGraph_breadthFirstIterable_javadocExample_canBeIteratedMultipleTimes() {\n",
        "181": "    Iterable<Character> result = Traverser.forGraph(JAVADOC_GRAPH).breadthFirst(charactersOf(\"bf\"));\n",
        "182": "\n",
        "183": "    assertEqualCharNodes(result, \"bfaecd\");\n",
        "184": "    assertEqualCharNodes(result, \"bfaecd\");\n",
        "185": "  }\n",
        "186": "\n",
        "196": "  @Test\n",
        "197": "  public void forGraph_breadthFirstIterable_diamond() {\n",
        "198": "    Traverser<Character> traverser = Traverser.forGraph(DIAMOND_GRAPH);\n",
        "199": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"\")), \"\");\n",
        "200": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"bc\")), \"bcd\");\n",
        "201": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"a\")), \"abcd\");\n",
        "202": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"acdb\")), \"acdb\");\n",
        "203": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"db\")), \"db\");\n",
        "204": "  }\n",
        "205": "\n",
        "215": "  @Test\n",
        "216": "  public void forGraph_breadthFirstIterable_multiGraph() {\n",
        "217": "    Traverser<Character> traverser = Traverser.forGraph(MULTI_GRAPH);\n",
        "218": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"ac\")), \"acbd\");\n",
        "219": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"cb\")), \"cbad\");\n",
        "220": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"db\")), \"db\");\n",
        "221": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"d\")), \"d\");\n",
        "222": "  }\n",
        "223": "\n",
        "233": "  @Test\n",
        "234": "  public void forGraph_breadthFirstIterable_cycle() {\n",
        "235": "    Traverser<Character> traverser = Traverser.forGraph(CYCLE_GRAPH);\n",
        "236": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"a\")), \"abcd\");\n",
        "237": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"bd\")), \"bdca\");\n",
        "238": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"dc\")), \"dcab\");\n",
        "239": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"bc\")), \"bcda\");\n",
        "240": "  }\n",
        "241": "\n",
        "251": "  @Test\n",
        "252": "  public void forGraph_breadthFirstIterable_twoCycles() {\n",
        "253": "    Traverser<Character> traverser = Traverser.forGraph(TWO_CYCLES_GRAPH);\n",
        "254": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"a\")), \"abcd\");\n",
        "255": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"bd\")), \"bdca\");\n",
        "256": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"dc\")), \"dcab\");\n",
        "257": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"bc\")), \"bcda\");\n",
        "258": "  }\n",
        "259": "\n",
        "269": "  @Test\n",
        "270": "  public void forGraph_breadthFirstIterable_tree() throws Exception {\n",
        "271": "    Traverser<Character> traverser = Traverser.forGraph(TREE);\n",
        "272": "\n",
        "273": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"hg\")), \"hgdefabc\");\n",
        "274": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"gd\")), \"gdfabc\");\n",
        "275": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"bdgh\")), \"bdghacfe\");\n",
        "276": "  }\n",
        "277": "\n",
        "285": "  @Test\n",
        "286": "  public void forGraph_breadthFirstIterable_twoTrees() {\n",
        "287": "    assertEqualCharNodes(Traverser.forGraph(TWO_TREES).breadthFirst(charactersOf(\"a\")), \"ab\");\n",
        "288": "    assertEqualCharNodes(Traverser.forGraph(TWO_TREES).breadthFirst(charactersOf(\"ac\")), \"acbd\");\n",
        "289": "  }\n",
        "290": "\n",
        "298": "  @Test\n",
        "299": "  public void forGraph_breadthFirstIterable_singleRoot() {\n",
        "300": "    Iterable<Character> result = Traverser.forGraph(SINGLE_ROOT).breadthFirst(charactersOf(\"a\"));\n",
        "301": "\n",
        "302": "    assertEqualCharNodes(result, \"a\");\n",
        "303": "  }\n",
        "304": "\n",
        "314": "  /**\n",
        "315": "   * Checks that the elements of the iterable are calculated on the fly. Concretely, that means that\n",
        "316": "   * {@link SuccessorsFunction#successors(Object)} can only be called for a subset of all nodes.\n",
        "317": "   */\n",
        "318": "  @Test\n",
        "319": "  public void forGraph_breadthFirstIterable_emptyGraph() {\n",
        "320": "    assertEqualCharNodes(\n",
        "321": "        Traverser.forGraph(createDirectedGraph()).breadthFirst(charactersOf(\"\")), \"\");\n",
        "322": "    try {\n",
        "323": "      Traverser.forGraph(createDirectedGraph()).breadthFirst(charactersOf(\"a\"));\n",
        "324": "      fail(\"Expected IllegalArgumentException\");\n",
        "325": "    } catch (IllegalArgumentException expected) {\n",
        "326": "    }\n",
        "327": "  }\n",
        "328": "\n",
        "346": "  @Test\n",
        "347": "  public void forGraph_breadthFirstIterable_iterableIsLazy() {\n",
        "348": "    RequestSavingGraph graph = new RequestSavingGraph(DIAMOND_GRAPH);\n",
        "349": "    Iterable<Character> result = Traverser.forGraph(graph).breadthFirst(charactersOf(\"ab\"));\n",
        "350": "\n",
        "351": "    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n",
        "352": "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'b');\n",
        "353": "\n",
        "354": "    // Iterate again to see if calculation is done again\n",
        "355": "    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n",
        "356": "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b', 'b');\n",
        "357": "  }\n",
        "358": "\n",
        "367": "  @Test\n",
        "368": "  public void forGraph_depthFirstPreOrderIterable_javadocExample_canBeIteratedMultipleTimes() {\n",
        "369": "    Iterable<Character> result =\n",
        "370": "        Traverser.forGraph(JAVADOC_GRAPH).depthFirstPreOrder(charactersOf(\"bc\"));\n",
        "371": "\n",
        "372": "    assertEqualCharNodes(result, \"bacefd\");\n",
        "373": "    assertEqualCharNodes(result, \"bacefd\");\n",
        "374": "  }\n",
        "375": "\n",
        "385": "  @Test\n",
        "386": "  public void forGraph_depthFirstPreOrderIterable_diamond() {\n",
        "387": "    Traverser<Character> traverser = Traverser.forGraph(DIAMOND_GRAPH);\n",
        "388": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"\")), \"\");\n",
        "389": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"bc\")), \"bdc\");\n",
        "390": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"a\")), \"abdc\");\n",
        "391": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"acdb\")), \"abdc\");\n",
        "392": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"db\")), \"db\");\n",
        "393": "  }\n",
        "394": "\n",
        "404": "  @Test\n",
        "405": "  public void forGraph_depthFirstPreOrderIterable_multigraph() {\n",
        "406": "    Traverser<Character> traverser = Traverser.forGraph(MULTI_GRAPH);\n",
        "407": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"ac\")), \"abdc\");\n",
        "408": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"cb\")), \"cabd\");\n",
        "409": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"db\")), \"db\");\n",
        "410": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"d\")), \"d\");\n",
        "411": "  }\n",
        "412": "\n",
        "422": "  @Test\n",
        "423": "  public void forGraph_depthFirstPreOrderIterable_cycle() {\n",
        "424": "    Traverser<Character> traverser = Traverser.forGraph(CYCLE_GRAPH);\n",
        "425": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"a\")), \"abcd\");\n",
        "426": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"bd\")), \"bcda\");\n",
        "427": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"dc\")), \"dabc\");\n",
        "428": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"bc\")), \"bcda\");\n",
        "429": "  }\n",
        "430": "\n",
        "440": "  @Test\n",
        "441": "  public void forGraph_depthFirstPreOrderIterable_twoCycles() {\n",
        "442": "    Traverser<Character> traverser = Traverser.forGraph(TWO_CYCLES_GRAPH);\n",
        "443": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"a\")), \"abcd\");\n",
        "444": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"bd\")), \"bcda\");\n",
        "445": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"dc\")), \"dabc\");\n",
        "446": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"bc\")), \"bcda\");\n",
        "447": "  }\n",
        "448": "\n",
        "458": "  @Test\n",
        "459": "  public void forGraph_depthFirstPreOrderIterable_tree() throws Exception {\n",
        "460": "    Traverser<Character> traverser = Traverser.forGraph(TREE);\n",
        "461": "\n",
        "462": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"hg\")), \"hdabcegf\");\n",
        "463": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"gd\")), \"gfdabc\");\n",
        "464": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"bdgh\")), \"bdacgfhe\");\n",
        "465": "  }\n",
        "466": "\n",
        "474": "  @Test\n",
        "475": "  public void forGraph_depthFirstPreOrderIterable_twoTrees() {\n",
        "476": "    assertEqualCharNodes(Traverser.forGraph(TWO_TREES).depthFirstPreOrder(charactersOf(\"a\")), \"ab\");\n",
        "477": "    assertEqualCharNodes(\n",
        "478": "        Traverser.forGraph(TWO_TREES).depthFirstPreOrder(charactersOf(\"ac\")), \"abcd\");\n",
        "479": "  }\n",
        "480": "\n",
        "488": "  @Test\n",
        "489": "  public void forGraph_depthFirstPreOrderIterable_singleRoot() {\n",
        "490": "    Iterable<Character> result =\n",
        "491": "        Traverser.forGraph(SINGLE_ROOT).depthFirstPreOrder(charactersOf(\"a\"));\n",
        "492": "\n",
        "493": "    assertEqualCharNodes(result, \"a\");\n",
        "494": "  }\n",
        "495": "\n",
        "505": "  @Test\n",
        "506": "  public void forGraph_depthFirstPreOrderIterable_emptyGraph() {\n",
        "507": "    assertEqualCharNodes(\n",
        "508": "        Traverser.forGraph(createDirectedGraph()).depthFirstPreOrder(charactersOf(\"\")), \"\");\n",
        "509": "    try {\n",
        "510": "      Traverser.forGraph(createDirectedGraph()).depthFirstPreOrder(charactersOf(\"a\"));\n",
        "511": "      fail(\"Expected IllegalArgumentException\");\n",
        "512": "    } catch (IllegalArgumentException expected) {\n",
        "513": "    }\n",
        "514": "  }\n",
        "515": "\n",
        "529": "  @Test\n",
        "530": "  public void forGraph_depthFirstPreOrderIterable_iterableIsLazy() {\n",
        "531": "    RequestSavingGraph graph = new RequestSavingGraph(DIAMOND_GRAPH);\n",
        "532": "    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPreOrder(charactersOf(\"ac\"));\n",
        "533": "\n",
        "534": "    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n",
        "535": "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'c', 'd');\n",
        "536": "\n",
        "537": "    // Iterate again to see if calculation is done again\n",
        "538": "    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n",
        "539": "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b', 'c', 'd', 'd');\n",
        "540": "  }\n",
        "541": "\n",
        "549": "  @Test\n",
        "550": "  public void forGraph_depthFirstPostOrderIterable_javadocExample_canBeIteratedMultipleTimes() {\n",
        "551": "    Iterable<Character> result =\n",
        "552": "        Traverser.forGraph(JAVADOC_GRAPH).depthFirstPostOrder(charactersOf(\"bf\"));\n",
        "553": "    assertEqualCharNodes(result, \"efcdab\");\n",
        "554": "    assertEqualCharNodes(result, \"efcdab\");\n",
        "555": "  }\n",
        "556": "\n",
        "566": "  @Test\n",
        "567": "  public void forGraph_depthFirstPostOrderIterable_diamond() {\n",
        "568": "    Traverser<Character> traverser = Traverser.forGraph(DIAMOND_GRAPH);\n",
        "569": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"\")), \"\");\n",
        "570": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"bc\")), \"dbc\");\n",
        "571": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"a\")), \"dbca\");\n",
        "572": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"acdb\")), \"dbca\");\n",
        "573": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"db\")), \"db\");\n",
        "574": "  }\n",
        "575": "\n",
        "585": "  @Test\n",
        "586": "  public void forGraph_depthFirstPostOrderIterable_multigraph() {\n",
        "587": "    Traverser<Character> traverser = Traverser.forGraph(MULTI_GRAPH);\n",
        "588": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"ac\")), \"dbca\");\n",
        "589": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"cb\")), \"dbac\");\n",
        "590": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"db\")), \"db\");\n",
        "591": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"d\")), \"d\");\n",
        "592": "  }\n",
        "593": "\n",
        "603": "  @Test\n",
        "604": "  public void forGraph_depthFirstPostOrderIterable_cycle() {\n",
        "605": "    Traverser<Character> traverser = Traverser.forGraph(CYCLE_GRAPH);\n",
        "606": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"a\")), \"dcba\");\n",
        "607": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"bd\")), \"adcb\");\n",
        "608": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"dc\")), \"cbad\");\n",
        "609": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"bc\")), \"adcb\");\n",
        "610": "  }\n",
        "611": "\n",
        "621": "  @Test\n",
        "622": "  public void forGraph_depthFirstPostOrderIterable_twoCycles() {\n",
        "623": "    Traverser<Character> traverser = Traverser.forGraph(TWO_CYCLES_GRAPH);\n",
        "624": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"a\")), \"dcba\");\n",
        "625": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"bd\")), \"adcb\");\n",
        "626": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"dc\")), \"cbad\");\n",
        "627": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"bc\")), \"adcb\");\n",
        "628": "  }\n",
        "629": "\n",
        "639": "  @Test\n",
        "640": "  public void forGraph_depthFirstPostOrderIterable_tree() throws Exception {\n",
        "641": "    Traverser<Character> traverser = Traverser.forGraph(TREE);\n",
        "642": "\n",
        "643": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"hg\")), \"abcdefgh\");\n",
        "644": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"gd\")), \"fgabcd\");\n",
        "645": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"bdgh\")), \"bacdfgeh\");\n",
        "646": "  }\n",
        "647": "\n",
        "655": "  @Test\n",
        "656": "  public void forGraph_depthFirstPostOrderIterable_twoTrees() {\n",
        "657": "    assertEqualCharNodes(\n",
        "658": "        Traverser.forGraph(TWO_TREES).depthFirstPostOrder(charactersOf(\"a\")), \"ba\");\n",
        "659": "    assertEqualCharNodes(\n",
        "660": "        Traverser.forGraph(TWO_TREES).depthFirstPostOrder(charactersOf(\"ac\")), \"badc\");\n",
        "661": "  }\n",
        "662": "\n",
        "670": "  @Test\n",
        "671": "  public void forGraph_depthFirstPostOrderIterable_singleRoot() {\n",
        "672": "    Iterable<Character> result =\n",
        "673": "        Traverser.forGraph(SINGLE_ROOT).depthFirstPostOrder(charactersOf(\"a\"));\n",
        "674": "\n",
        "675": "    assertEqualCharNodes(result, \"a\");\n",
        "676": "  }\n",
        "677": "\n",
        "687": "  @Test\n",
        "688": "  public void forGraph_depthFirstPostOrderIterable_emptyGraph() {\n",
        "689": "    assertEqualCharNodes(\n",
        "690": "        Traverser.forGraph(createDirectedGraph()).depthFirstPostOrder(charactersOf(\"\")), \"\");\n",
        "691": "    try {\n",
        "692": "      Traverser.forGraph(createDirectedGraph()).depthFirstPostOrder(charactersOf(\"a\"));\n",
        "693": "      fail(\"Expected IllegalArgumentException\");\n",
        "694": "    } catch (IllegalArgumentException expected) {\n",
        "695": "    }\n",
        "696": "  }\n",
        "697": "\n",
        "711": "  @Test\n",
        "712": "  public void forGraph_depthFirstPostOrderIterable_iterableIsLazy() {\n",
        "713": "    RequestSavingGraph graph = new RequestSavingGraph(DIAMOND_GRAPH);\n",
        "714": "    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPostOrder(charactersOf(\"ac\"));\n",
        "715": "\n",
        "716": "    assertEqualCharNodes(Iterables.limit(result, 2), \"db\");\n",
        "717": "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'c', 'd');\n",
        "718": "\n",
        "719": "    // Iterate again to see if calculation is done again\n",
        "720": "    assertEqualCharNodes(Iterables.limit(result, 2), \"db\");\n",
        "721": "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b', 'c', 'd', 'd');\n",
        "722": "  }\n",
        "723": "\n",
        "796": "  @Test\n",
        "797": "  public void forTree_breadthFirstIterable_tree() throws Exception {\n",
        "798": "    Traverser<Character> traverser = Traverser.forTree(TREE);\n",
        "799": "\n",
        "800": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"\")), \"\");\n",
        "801": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"h\")), \"hdegabcf\");\n",
        "802": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"gd\")), \"gdfabc\");\n",
        "803": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"age\")), \"agef\");\n",
        "804": "  }\n",
        "805": "\n",
        "815": "  @Test\n",
        "816": "  public void forTree_breadthFirstIterable_cyclicGraphContainingTree() throws Exception {\n",
        "817": "    Traverser<Character> traverser = Traverser.forTree(CYCLIC_GRAPH_CONTAINING_TREE);\n",
        "818": "\n",
        "819": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"a\")), \"abcd\");\n",
        "820": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"b\")), \"bcd\");\n",
        "821": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"cd\")), \"cd\");\n",
        "822": "  }\n",
        "823": "\n",
        "833": "  @Test\n",
        "834": "  public void forTree_breadthFirstIterable_graphContainingTreeAndDiamond() throws Exception {\n",
        "835": "    Traverser<Character> traverser = Traverser.forTree(GRAPH_CONTAINING_TREE_AND_DIAMOND);\n",
        "836": "\n",
        "837": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"a\")), \"abcd\");\n",
        "838": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"bg\")), \"bgcdh\");\n",
        "839": "    assertEqualCharNodes(traverser.breadthFirst(charactersOf(\"ga\")), \"gahbcd\");\n",
        "840": "  }\n",
        "841": "\n",
        "849": "  @Test\n",
        "850": "  public void forTree_breadthFirstIterable_twoTrees() {\n",
        "851": "    assertEqualCharNodes(Traverser.forTree(TWO_TREES).breadthFirst(charactersOf(\"a\")), \"ab\");\n",
        "852": "    assertEqualCharNodes(Traverser.forTree(TWO_TREES).breadthFirst(charactersOf(\"ca\")), \"cadb\");\n",
        "853": "  }\n",
        "854": "\n",
        "862": "  @Test\n",
        "863": "  public void forTree_breadthFirstIterable_singleRoot() {\n",
        "864": "    Iterable<Character> result = Traverser.forTree(SINGLE_ROOT).breadthFirst(charactersOf(\"a\"));\n",
        "865": "\n",
        "866": "    assertEqualCharNodes(result, \"a\");\n",
        "867": "  }\n",
        "868": "\n",
        "878": "  @Test\n",
        "879": "  public void forTree_breadthFirstIterable_emptyGraph() {\n",
        "880": "    assertEqualCharNodes(\n",
        "881": "        Traverser.forTree(createDirectedGraph()).breadthFirst(charactersOf(\"\")), \"\");\n",
        "882": "    try {\n",
        "883": "      Traverser.forTree(createDirectedGraph()).breadthFirst(charactersOf(\"a\"));\n",
        "884": "      fail(\"Expected IllegalArgumentException\");\n",
        "885": "    } catch (IllegalArgumentException expected) {\n",
        "886": "    }\n",
        "887": "  }\n",
        "888": "\n",
        "903": "  public void forTree_breadthFirstIterable_iterableIsLazy() {\n",
        "904": "    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n",
        "905": "    Iterable<Character> result = Traverser.forGraph(graph).breadthFirst(charactersOf(\"dg\"));\n",
        "906": "\n",
        "907": "    assertEqualCharNodes(Iterables.limit(result, 3), \"dga\");\n",
        "908": "    assertThat(graph.requestedNodes).containsExactly('a', 'd', 'd', 'g', 'g');\n",
        "909": "\n",
        "910": "    // Iterate again to see if calculation is done again\n",
        "911": "    assertEqualCharNodes(Iterables.limit(result, 3), \"dga\");\n",
        "912": "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'd', 'd', 'd', 'g', 'g', 'g');\n",
        "913": "  }\n",
        "914": "\n",
        "915": "  @Test\n",
        "916": "  public void forTree_depthFirstPreOrderIterable_tree() throws Exception {\n",
        "919": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"h\")), \"hdabcegf\");\n",
        "920": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"d\")), \"dabc\");\n",
        "921": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"a\")), \"a\");\n",
        "922": "  }\n",
        "923": "\n",
        "924": "  @Test\n",
        "925": "  public void forTree_depthFirstPreOrderIterableIterable_tree() throws Exception {\n",
        "926": "    Traverser<Character> traverser = Traverser.forTree(TREE);\n",
        "927": "\n",
        "928": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"\")), \"\");\n",
        "929": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"h\")), \"hdabcegf\");\n",
        "930": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"gd\")), \"gfdabc\");\n",
        "931": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"age\")), \"agfe\");\n",
        "943": "  @Test\n",
        "944": "  public void forTree_depthFirstPreOrderIterable_cyclicGraphContainingTree() throws Exception {\n",
        "945": "    Traverser<Character> traverser = Traverser.forTree(CYCLIC_GRAPH_CONTAINING_TREE);\n",
        "946": "\n",
        "947": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"a\")), \"abcd\");\n",
        "948": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"b\")), \"bcd\");\n",
        "949": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"cd\")), \"cd\");\n",
        "950": "  }\n",
        "951": "\n",
        "961": "  @Test\n",
        "962": "  public void forTree_depthFirstPreOrderIterable_graphContainingTreeAndDiamond() throws Exception {\n",
        "963": "    Traverser<Character> traverser = Traverser.forTree(GRAPH_CONTAINING_TREE_AND_DIAMOND);\n",
        "964": "\n",
        "965": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"a\")), \"abcd\");\n",
        "966": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"bg\")), \"bcdgh\");\n",
        "967": "    assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf(\"ga\")), \"ghabcd\");\n",
        "968": "  }\n",
        "969": "\n",
        "977": "  @Test\n",
        "978": "  public void forTree_depthFirstPreOrderIterable_twoTrees() {\n",
        "979": "    assertEqualCharNodes(Traverser.forTree(TWO_TREES).depthFirstPreOrder(charactersOf(\"a\")), \"ab\");\n",
        "980": "    assertEqualCharNodes(\n",
        "981": "        Traverser.forTree(TWO_TREES).depthFirstPreOrder(charactersOf(\"ca\")), \"cdab\");\n",
        "982": "  }\n",
        "983": "\n",
        "991": "  @Test\n",
        "992": "  public void forTree_depthFirstPreOrderIterable_singleRoot() {\n",
        "993": "    Iterable<Character> result =\n",
        "994": "        Traverser.forTree(SINGLE_ROOT).depthFirstPreOrder(charactersOf(\"a\"));\n",
        "995": "\n",
        "996": "    assertEqualCharNodes(result, \"a\");\n",
        "997": "  }\n",
        "998": "\n",
        "1008": "  @Test\n",
        "1009": "  public void forTree_depthFirstPreOrderIterable_emptyGraph() {\n",
        "1010": "    assertEqualCharNodes(\n",
        "1011": "        Traverser.forTree(createDirectedGraph()).depthFirstPreOrder(charactersOf(\"\")), \"\");\n",
        "1012": "    try {\n",
        "1013": "      Traverser.forTree(createDirectedGraph()).depthFirstPreOrder(charactersOf(\"a\"));\n",
        "1014": "      fail(\"Expected IllegalArgumentException\");\n",
        "1015": "    } catch (IllegalArgumentException expected) {\n",
        "1016": "    }\n",
        "1017": "  }\n",
        "1018": "\n",
        "1032": "  @Test\n",
        "1033": "  public void forTree_depthFirstPreOrderIterable_iterableIsLazy() {\n",
        "1034": "    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n",
        "1035": "    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPreOrder(charactersOf(\"dg\"));\n",
        "1036": "\n",
        "1037": "    assertEqualCharNodes(Iterables.limit(result, 2), \"da\");\n",
        "1038": "    assertThat(graph.requestedNodes).containsExactly('a', 'd', 'd', 'g');\n",
        "1039": "\n",
        "1040": "    // Iterate again to see if calculation is done again\n",
        "1041": "    assertEqualCharNodes(Iterables.limit(result, 2), \"da\");\n",
        "1042": "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'd', 'd', 'd', 'g');\n",
        "1043": "  }\n",
        "1044": "\n",
        "1054": "  @Test\n",
        "1055": "  public void forTree_depthFirstPostOrderIterable_tree() throws Exception {\n",
        "1056": "    Traverser<Character> traverser = Traverser.forTree(TREE);\n",
        "1057": "\n",
        "1058": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"\")), \"\");\n",
        "1059": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"h\")), \"abcdefgh\");\n",
        "1060": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"gd\")), \"fgabcd\");\n",
        "1061": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"age\")), \"afge\");\n",
        "1062": "  }\n",
        "1063": "\n",
        "1073": "  @Test\n",
        "1074": "  public void forTree_depthFirstPostOrderIterable_cyclicGraphContainingTree() throws Exception {\n",
        "1075": "    Traverser<Character> traverser = Traverser.forTree(CYCLIC_GRAPH_CONTAINING_TREE);\n",
        "1076": "\n",
        "1077": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"a\")), \"cdba\");\n",
        "1078": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"b\")), \"cdb\");\n",
        "1079": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"cd\")), \"cd\");\n",
        "1080": "  }\n",
        "1081": "\n",
        "1091": "  @Test\n",
        "1092": "  public void forTree_depthFirstPostOrderIterable_graphContainingTreeAndDiamond() throws Exception {\n",
        "1093": "    Traverser<Character> traverser = Traverser.forTree(GRAPH_CONTAINING_TREE_AND_DIAMOND);\n",
        "1094": "\n",
        "1095": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"a\")), \"cdba\");\n",
        "1096": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"bg\")), \"cdbhg\");\n",
        "1097": "    assertEqualCharNodes(traverser.depthFirstPostOrder(charactersOf(\"ga\")), \"hgcdba\");\n",
        "1098": "  }\n",
        "1099": "\n",
        "1107": "  @Test\n",
        "1108": "  public void forTree_depthFirstPostOrderIterable_twoTrees() {\n",
        "1109": "    assertEqualCharNodes(Traverser.forTree(TWO_TREES).depthFirstPostOrder(charactersOf(\"a\")), \"ba\");\n",
        "1110": "    assertEqualCharNodes(\n",
        "1111": "        Traverser.forTree(TWO_TREES).depthFirstPostOrder(charactersOf(\"ca\")), \"dcba\");\n",
        "1112": "  }\n",
        "1113": "\n",
        "1121": "  @Test\n",
        "1122": "  public void forTree_depthFirstPostOrderIterable_singleRoot() {\n",
        "1123": "    Iterable<Character> result =\n",
        "1124": "        Traverser.forTree(SINGLE_ROOT).depthFirstPostOrder(charactersOf(\"a\"));\n",
        "1125": "\n",
        "1126": "    assertEqualCharNodes(result, \"a\");\n",
        "1127": "  }\n",
        "1128": "\n",
        "1138": "  @Test\n",
        "1139": "  public void forTree_depthFirstPostOrderIterable_emptyGraph() {\n",
        "1140": "    assertEqualCharNodes(\n",
        "1141": "        Traverser.forTree(createDirectedGraph()).depthFirstPostOrder(charactersOf(\"\")), \"\");\n",
        "1142": "    try {\n",
        "1143": "      Traverser.forTree(createDirectedGraph()).depthFirstPostOrder(charactersOf(\"a\"));\n",
        "1144": "      fail(\"Expected IllegalArgumentException\");\n",
        "1145": "    } catch (IllegalArgumentException expected) {\n",
        "1146": "    }\n",
        "1147": "  }\n",
        "1148": "\n",
        "1162": "  @Test\n",
        "1163": "  public void forTree_depthFirstPostOrderIterable_iterableIsLazy() {\n",
        "1164": "    RequestSavingGraph graph = new RequestSavingGraph(TREE);\n",
        "1165": "    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPostOrder(charactersOf(\"dg\"));\n",
        "1166": "\n",
        "1167": "    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n",
        "1168": "    assertThat(graph.requestedNodes).containsExactly('a', 'b', 'd', 'd', 'g');\n",
        "1169": "\n",
        "1170": "    // Iterate again to see if calculation is done again\n",
        "1171": "    assertEqualCharNodes(Iterables.limit(result, 2), \"ab\");\n",
        "1172": "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'b', 'd', 'd', 'd', 'g');\n",
        "1173": "  }\n",
        "1174": "\n"
    },
    "removed": {
        "567": "  public void forTree_depthFirstPreOrder_tree() throws Exception {\n",
        "570": "    assertEqualCharNodes(traverser.depthFirstPreOrder('h'), \"hdabcegf\");\n",
        "571": "    assertEqualCharNodes(traverser.depthFirstPreOrder('d'), \"dabc\");\n",
        "572": "    assertEqualCharNodes(traverser.depthFirstPreOrder('a'), \"a\");\n"
    }
}