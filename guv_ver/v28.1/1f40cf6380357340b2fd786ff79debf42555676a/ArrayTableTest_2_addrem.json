{
    "addition": {
        "201": "  public void testCreateEmptyRowsXColumns() {\n",
        "202": "    ArrayTable<String, String, Character> table =\n",
        "203": "        ArrayTable.create(Arrays.<String>asList(), Arrays.<String>asList());\n",
        "204": "    assertThat(table).isEmpty();\n",
        "205": "    assertThat(table).hasSize(0);\n",
        "206": "    assertThat(table.columnKeyList()).isEmpty();\n",
        "207": "    assertThat(table.rowKeyList()).isEmpty();\n",
        "208": "    assertThat(table.columnKeySet()).isEmpty();\n",
        "209": "    assertThat(table.rowKeySet()).isEmpty();\n",
        "210": "    try {\n",
        "211": "      table.at(0, 0);\n",
        "212": "      fail();\n",
        "213": "    } catch (IndexOutOfBoundsException expected) {}\n",
        "214": "  }\n",
        "215": "\n",
        "216": "  @GwtIncompatible // toArray\n",
        "217": "  public void testEmptyToArry() {\n",
        "218": "    ArrayTable<String, String, Character> table =\n",
        "219": "        ArrayTable.create(Arrays.<String>asList(), Arrays.<String>asList());\n",
        "220": "    assertThat(table.toArray(Character.class)).asList().isEmpty();\n",
        "221": "  }\n",
        "222": "\n",
        "255": "    ArrayTable<String, Integer, Character> copy = ArrayTable.create(original);\n",
        "256": "    assertThat(copy).isEqualTo(original);\n",
        "257": "    assertThat(copy)\n",
        "258": "        .isEqualTo(ArrayTable.create(Arrays.<String>asList(), Arrays.<Integer>asList()));\n",
        "259": "    assertThat(copy).isEmpty();\n",
        "260": "  }\n",
        "261": "\n",
        "262": "  public void testCreateCopyEmptyArrayTable() {\n",
        "263": "    Table<String, Integer, Character> original =\n",
        "264": "        ArrayTable.create(Arrays.<String>asList(), Arrays.<Integer>asList());\n",
        "265": "    ArrayTable<String, Integer, Character> copy = ArrayTable.create(original);\n",
        "266": "    assertThat(copy).isEqualTo(original);\n",
        "267": "    assertThat(copy).isEmpty();\n"
    },
    "removed": {
        "233": "    try {\n",
        "234": "      ArrayTable.create(original);\n",
        "235": "      fail();\n",
        "236": "    } catch (IllegalArgumentException expected) {}\n"
    }
}