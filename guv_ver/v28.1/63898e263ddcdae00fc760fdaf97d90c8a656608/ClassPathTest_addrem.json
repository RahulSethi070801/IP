{
    "addition": {
        "20": "import static com.google.common.base.StandardSystemProperty.JAVA_CLASS_PATH;\n",
        "21": "import static com.google.common.base.StandardSystemProperty.PATH_SEPARATOR;\n",
        "24": "import com.google.common.base.Joiner;\n",
        "45": "import java.security.PermissionCollection;\n",
        "366": "  public void testGetClassPathUrls() throws Exception {\n",
        "367": "    String oldPathSeparator = PATH_SEPARATOR.value();\n",
        "368": "    String oldClassPath = JAVA_CLASS_PATH.value();\n",
        "369": "    System.setProperty(PATH_SEPARATOR.key(), \":\");\n",
        "370": "    System.setProperty(\n",
        "371": "        JAVA_CLASS_PATH.key(),\n",
        "372": "        Joiner.on(\":\")\n",
        "373": "            .join(\n",
        "374": "                \"relative/path/to/some.jar\",\n",
        "375": "                \"/absolute/path/to/some.jar\",\n",
        "376": "                \"relative/path/to/class/root\",\n",
        "377": "                \"/absolute/path/to/class/root\"));\n",
        "378": "    try {\n",
        "379": "      ImmutableList<URL> urls = ClassPath.Scanner.parseJavaClassPath();\n",
        "380": "\n",
        "381": "      assertThat(urls.get(0).getProtocol()).isEqualTo(\"file\");\n",
        "382": "      assertThat(urls.get(0).getAuthority()).isNull();\n",
        "383": "      assertThat(urls.get(0).getPath()).endsWith(\"/relative/path/to/some.jar\");\n",
        "384": "\n",
        "385": "      assertThat(urls.get(1)).isEqualTo(new URL(\"file:///absolute/path/to/some.jar\"));\n",
        "386": "\n",
        "387": "      assertThat(urls.get(2).getProtocol()).isEqualTo(\"file\");\n",
        "388": "      assertThat(urls.get(2).getAuthority()).isNull();\n",
        "389": "      assertThat(urls.get(2).getPath()).endsWith(\"/relative/path/to/class/root\");\n",
        "390": "\n",
        "391": "      assertThat(urls.get(3)).isEqualTo(new URL(\"file:///absolute/path/to/class/root\"));\n",
        "392": "\n",
        "393": "      assertThat(urls).hasSize(4);\n",
        "394": "    } finally {\n",
        "395": "      System.setProperty(PATH_SEPARATOR.key(), oldPathSeparator);\n",
        "396": "      System.setProperty(JAVA_CLASS_PATH.key(), oldClassPath);\n",
        "397": "    }\n",
        "398": "  }\n",
        "399": "\n",
        "428": "    File file = null;\n",
        "429": "    // In Java 9, Logger may read the TZ database. Only disallow reading the class path URLs.\n",
        "430": "    final PermissionCollection readClassPathFiles =\n",
        "431": "        new FilePermission(\"\", \"read\").newPermissionCollection();\n",
        "432": "    for (URL url : ClassPath.Scanner.parseJavaClassPath()) {\n",
        "434": "        file = new File(url.toURI());\n",
        "435": "        readClassPathFiles.add(new FilePermission(file.getAbsolutePath(), \"read\"));\n",
        "438": "    assertThat(file).isNotNull();\n",
        "439": "    SecurityManager disallowFilesSecurityManager =\n",
        "440": "        new SecurityManager() {\n",
        "441": "          @Override\n",
        "442": "          public void checkPermission(Permission p) {\n",
        "443": "            if (readClassPathFiles.implies(p)) {\n",
        "444": "              throw new SecurityException(\"Disallowed: \" + p);\n",
        "445": "            }\n",
        "446": "          }\n",
        "447": "        };\n",
        "450": "      file.exists();\n",
        "454": "    ClassPath classPath = ClassPath.from(getClass().getClassLoader());\n",
        "455": "    // ClassPath may contain resources from the boot class loader; just not from the class path.\n",
        "456": "    for (ResourceInfo resource : classPath.getResources()) {\n",
        "457": "      assertThat(resource.getResourceName()).doesNotContain(\"com/google/common/reflect/\");\n",
        "458": "    }\n"
    },
    "removed": {
        "390": "    URLClassLoader myLoader = (URLClassLoader) getClass().getClassLoader();\n",
        "391": "    URL[] urls = myLoader.getURLs();\n",
        "392": "    ImmutableList.Builder<File> filesBuilder = ImmutableList.builder();\n",
        "393": "    for (URL url : urls) {\n",
        "395": "        filesBuilder.add(new File(url.toURI()));\n",
        "398": "    ImmutableList<File> files = filesBuilder.build();\n",
        "399": "    assertThat(files).isNotEmpty();\n",
        "400": "    SecurityManager disallowFilesSecurityManager = new SecurityManager() {\n",
        "401": "      @Override\n",
        "402": "      public void checkPermission(Permission p) {\n",
        "403": "        if (p instanceof FilePermission) {\n",
        "404": "          throw new SecurityException(\"Disallowed: \" + p);\n",
        "405": "        }\n",
        "406": "      }\n",
        "407": "    };\n",
        "410": "      files.get(0).exists();\n",
        "414": "    ClassPath classPath = ClassPath.from(myLoader);\n",
        "415": "    assertThat(classPath.getResources()).isEmpty();\n"
    }
}