{
    "addition": {
        "20": "import static com.google.common.base.StandardSystemProperty.JAVA_CLASS_PATH;\n",
        "21": "import static com.google.common.base.StandardSystemProperty.PATH_SEPARATOR;\n",
        "30": "import com.google.common.base.Joiner;\n",
        "52": "import java.security.PermissionCollection;\n",
        "432": "  public void testGetClassPathUrls() throws Exception {\n",
        "433": "    String oldPathSeparator = PATH_SEPARATOR.value();\n",
        "434": "    String oldClassPath = JAVA_CLASS_PATH.value();\n",
        "435": "    System.setProperty(PATH_SEPARATOR.key(), \":\");\n",
        "436": "    System.setProperty(\n",
        "437": "        JAVA_CLASS_PATH.key(),\n",
        "438": "        Joiner.on(\":\")\n",
        "439": "            .join(\n",
        "440": "                \"relative/path/to/some.jar\",\n",
        "441": "                \"/absolute/path/to/some.jar\",\n",
        "442": "                \"relative/path/to/class/root\",\n",
        "443": "                \"/absolute/path/to/class/root\"));\n",
        "444": "    try {\n",
        "445": "      ImmutableList<URL> urls = ClassPath.Scanner.parseJavaClassPath();\n",
        "446": "\n",
        "447": "      assertThat(urls.get(0).getProtocol()).isEqualTo(\"file\");\n",
        "448": "      assertThat(urls.get(0).getAuthority()).isNull();\n",
        "449": "      assertThat(urls.get(0).getPath()).endsWith(\"/relative/path/to/some.jar\");\n",
        "450": "\n",
        "451": "      assertThat(urls.get(1)).isEqualTo(new URL(\"file:///absolute/path/to/some.jar\"));\n",
        "452": "\n",
        "453": "      assertThat(urls.get(2).getProtocol()).isEqualTo(\"file\");\n",
        "454": "      assertThat(urls.get(2).getAuthority()).isNull();\n",
        "455": "      assertThat(urls.get(2).getPath()).endsWith(\"/relative/path/to/class/root\");\n",
        "456": "\n",
        "457": "      assertThat(urls.get(3)).isEqualTo(new URL(\"file:///absolute/path/to/class/root\"));\n",
        "458": "\n",
        "459": "      assertThat(urls).hasSize(4);\n",
        "460": "    } finally {\n",
        "461": "      System.setProperty(PATH_SEPARATOR.key(), oldPathSeparator);\n",
        "462": "      System.setProperty(JAVA_CLASS_PATH.key(), oldClassPath);\n",
        "463": "    }\n",
        "464": "  }\n",
        "465": "\n",
        "494": "    File file = null;\n",
        "495": "    // In Java 9, Logger may read the TZ database. Only disallow reading the class path URLs.\n",
        "496": "    final PermissionCollection readClassPathFiles =\n",
        "497": "        new FilePermission(\"\", \"read\").newPermissionCollection();\n",
        "498": "    for (URL url : ClassPath.Scanner.parseJavaClassPath()) {\n",
        "500": "        file = new File(url.toURI());\n",
        "501": "        readClassPathFiles.add(new FilePermission(file.getAbsolutePath(), \"read\"));\n",
        "504": "    assertThat(file).isNotNull();\n",
        "505": "    SecurityManager disallowFilesSecurityManager =\n",
        "506": "        new SecurityManager() {\n",
        "507": "          @Override\n",
        "508": "          public void checkPermission(Permission p) {\n",
        "509": "            if (readClassPathFiles.implies(p)) {\n",
        "510": "              throw new SecurityException(\"Disallowed: \" + p);\n",
        "511": "            }\n",
        "512": "          }\n",
        "513": "        };\n",
        "516": "      file.exists();\n",
        "520": "    ClassPath classPath = ClassPath.from(getClass().getClassLoader());\n",
        "521": "    // ClassPath may contain resources from the boot class loader; just not from the class path.\n",
        "522": "    for (ResourceInfo resource : classPath.getResources()) {\n",
        "523": "      assertThat(resource.getResourceName()).doesNotContain(\"com/google/common/reflect/\");\n",
        "524": "    }\n"
    },
    "removed": {
        "456": "    URLClassLoader myLoader = (URLClassLoader) getClass().getClassLoader();\n",
        "457": "    URL[] urls = myLoader.getURLs();\n",
        "458": "    ImmutableList.Builder<File> filesBuilder = ImmutableList.builder();\n",
        "459": "    for (URL url : urls) {\n",
        "461": "        filesBuilder.add(new File(url.toURI()));\n",
        "464": "    ImmutableList<File> files = filesBuilder.build();\n",
        "465": "    assertThat(files).isNotEmpty();\n",
        "466": "    SecurityManager disallowFilesSecurityManager = new SecurityManager() {\n",
        "467": "      @Override\n",
        "468": "      public void checkPermission(Permission p) {\n",
        "469": "        if (p instanceof FilePermission) {\n",
        "470": "          throw new SecurityException(\"Disallowed: \" + p);\n",
        "471": "        }\n",
        "472": "      }\n",
        "473": "    };\n",
        "476": "      files.get(0).exists();\n",
        "480": "    ClassPath classPath = ClassPath.from(myLoader);\n",
        "481": "    assertThat(classPath.getResources()).isEmpty();\n"
    }
}