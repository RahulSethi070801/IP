{
    "addition": {
        "19": "import static com.google.common.base.StandardSystemProperty.JAVA_CLASS_PATH;\n",
        "20": "import static com.google.common.base.StandardSystemProperty.PATH_SEPARATOR;\n",
        "21": "import static java.util.logging.Level.WARNING;\n",
        "29": "import com.google.common.collect.ImmutableList;\n",
        "62": " * <p><b>Warning:</b> Current limitations:\n",
        "63": " *\n",
        "64": " * <ul>\n",
        "65": " *   <li>Looks only for files and JARs in URLs available from {@link URLClassLoader} instances or\n",
        "66": " *       the {@linkplain ClassLoader#getSystemClassLoader() system class loader}.\n",
        "67": " *   <li>Only understands {@code file:} URLs.\n",
        "68": " * </ul>\n",
        "103": "   * classloader} and its ancestor class loaders.\n",
        "104": "   *\n",
        "105": "   * <p><b>Warning:</b> {@code ClassPath} can find classes and resources only from:\n",
        "107": "   * <ul>\n",
        "108": "   *   <li>{@link URLClassLoader} instances' {@code file:} URLs\n",
        "109": "   *   <li>the {@linkplain ClassLoader#getSystemClassLoader() system class loader}. To search the\n",
        "110": "   *       system class loader even when it is not a {@link URLClassLoader} (as in Java 9), {@code\n",
        "111": "   *       ClassPath} searches the files from the {@code java.class.path} system property.\n",
        "112": "   * </ul>\n",
        "450": "      for (URL url : getClassLoaderUrls(classloader)) {\n",
        "451": "        if (url.getProtocol().equals(\"file\")) {\n",
        "452": "          File file = toFile(url);\n",
        "453": "          if (!entries.containsKey(file)) {\n",
        "454": "            entries.put(file, classloader);\n",
        "461": "    private static ImmutableList<URL> getClassLoaderUrls(ClassLoader classloader) {\n",
        "462": "      if (classloader instanceof URLClassLoader) {\n",
        "463": "        return ImmutableList.copyOf(((URLClassLoader) classloader).getURLs());\n",
        "464": "      }\n",
        "465": "      if (classloader.equals(ClassLoader.getSystemClassLoader())) {\n",
        "466": "        return parseJavaClassPath();\n",
        "467": "      }\n",
        "468": "      return ImmutableList.of();\n",
        "469": "    }\n",
        "470": "\n",
        "471": "    /**\n",
        "472": "     * Returns the URLs in the class path specified by the {@code java.class.path} {@linkplain\n",
        "473": "     * System#getProperty system property}.\n",
        "474": "     */\n",
        "475": "    @VisibleForTesting // TODO(b/65488446): Make this a public API.\n",
        "476": "    static ImmutableList<URL> parseJavaClassPath() {\n",
        "477": "      ImmutableList.Builder<URL> urls = ImmutableList.builder();\n",
        "478": "      for (String entry : Splitter.on(PATH_SEPARATOR.value()).split(JAVA_CLASS_PATH.value())) {\n",
        "479": "        try {\n",
        "480": "          try {\n",
        "481": "            urls.add(new File(entry).toURI().toURL());\n",
        "482": "          } catch (SecurityException e) { // File.toURI checks to see if the file is a directory\n",
        "483": "            urls.add(new URL(\"file\", null, new File(entry).getAbsolutePath()));\n",
        "484": "          }\n",
        "485": "        } catch (MalformedURLException e) {\n",
        "486": "          logger.log(WARNING, \"malformed classpath entry: \" + entry, e);\n",
        "487": "        }\n",
        "488": "      }\n",
        "489": "      return urls.build();\n",
        "490": "    }\n",
        "491": "\n"
    },
    "removed": {
        "58": " * <p><b>Warning:</b> Currently only {@link URLClassLoader} and only {@code file://} urls are\n",
        "59": " * supported.\n",
        "94": "   * classloader} and its parent class loaders.\n",
        "96": "   * <p><b>Warning:</b> Currently only {@link URLClassLoader} and only {@code file://} urls are\n",
        "97": "   * supported.\n",
        "435": "      if (classloader instanceof URLClassLoader) {\n",
        "436": "        URLClassLoader urlClassLoader = (URLClassLoader) classloader;\n",
        "437": "        for (URL entry : urlClassLoader.getURLs()) {\n",
        "438": "          if (entry.getProtocol().equals(\"file\")) {\n",
        "439": "            File file = toFile(entry);\n",
        "440": "            if (!entries.containsKey(file)) {\n",
        "441": "              entries.put(file, classloader);\n",
        "442": "            }\n"
    }
}