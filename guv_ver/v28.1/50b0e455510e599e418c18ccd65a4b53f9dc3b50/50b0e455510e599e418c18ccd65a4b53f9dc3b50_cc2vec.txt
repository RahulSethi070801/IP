{"id": "50b0e455510e599e418c18ccd65a4b53f9dc3b50", "code": [{"0": "android/guava-tests/test/com/google/common/graph/TraverserTest.java", "added": {"1": ["  /**\n", "   * Two disjoint tree-shaped graphs that look as follows (all edges are directed facing downwards):\n", "   *\n", "   * <pre>{@code\n", "   * a   c\n", "   * |   |\n", "   * |   |\n", "   * b   d\n", "   * }</pre>\n", "   */\n", "  private static final SuccessorsFunction<Character> TWO_TREES = createDirectedGraph(\"ab\", \"cd\");\n", "\n"], "2": ["  @Test\n", "  public void forGraph_breadthFirst_twoTrees() {\n", "    Iterable<Character> result = Traverser.forGraph(TWO_TREES).breadthFirst('a');\n", "\n", "    assertEqualCharNodes(result, \"ab\");\n", "  }\n", "\n", "  @Test\n", "  public void forGraph_breadthFirst_emptyGraph() {\n", "    try {\n", "      Traverser.forGraph(createDirectedGraph()).breadthFirst('a');\n", "      fail(\"Expected IllegalArgumentException\");\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "  }\n", "\n"], "3": ["    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b');\n", "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b');\n"], "4": ["  @Test\n", "  public void forGraph_depthFirstPreOrder_twoTrees() {\n", "    Iterable<Character> result = Traverser.forGraph(TWO_TREES).depthFirstPreOrder('a');\n", "\n", "    assertEqualCharNodes(result, \"ab\");\n", "  }\n", "\n", "  @Test\n", "  public void forGraph_depthFirstPreOrder_emptyGraph() {\n", "    try {\n", "      Traverser.forGraph(createDirectedGraph()).depthFirstPreOrder('a');\n", "      fail(\"Expected IllegalArgumentException\");\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "  }\n", "\n", "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'd');\n", "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b', 'd', 'd');\n"], "5": ["  @Test\n", "  public void forGraph_depthFirstPostOrder_twoTrees() {\n", "    Iterable<Character> result = Traverser.forGraph(TWO_TREES).depthFirstPostOrder('a');\n", "\n", "    assertEqualCharNodes(result, \"ba\");\n", "  }\n", "\n", "  @Test\n", "  public void forGraph_depthFirstPostOrder_emptyGraph() {\n", "    try {\n", "      Traverser.forGraph(createDirectedGraph()).depthFirstPostOrder('a');\n", "      fail(\"Expected IllegalArgumentException\");\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "  }\n", "\n", "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'd');\n", "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b', 'd', 'd');\n"], "6": ["  @Test\n", "  public void forTree_breadthFirst_twoTrees() {\n", "    Iterable<Character> result = Traverser.forTree(TWO_TREES).breadthFirst('a');\n", "\n", "    assertEqualCharNodes(result, \"ab\");\n", "  }\n", "\n", "  @Test\n", "  public void forTree_breadthFirst_emptyGraph() {\n", "    try {\n", "      Traverser.forTree(createDirectedGraph()).breadthFirst('a');\n", "      fail(\"Expected IllegalArgumentException\");\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "  }\n", "\n", "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd');\n", "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd');\n"], "7": ["  @Test\n", "  public void forTree_depthFirstPreOrder_twoTrees() {\n", "    Iterable<Character> result = Traverser.forTree(TWO_TREES).depthFirstPreOrder('a');\n", "\n", "    assertEqualCharNodes(result, \"ab\");\n", "  }\n", "\n", "  @Test\n", "  public void forTree_depthFirstPreOrder_emptyGraph() {\n", "    try {\n", "      Traverser.forTree(createDirectedGraph()).depthFirstPreOrder('a');\n", "      fail(\"Expected IllegalArgumentException\");\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "  }\n", "\n", "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'a');\n", "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd', 'a', 'a');\n"], "8": ["  @Test\n", "  public void forTree_depthFirstPostOrder_twoTrees() {\n", "    Iterable<Character> result = Traverser.forTree(TWO_TREES).depthFirstPostOrder('a');\n", "\n", "    assertEqualCharNodes(result, \"ba\");\n", "  }\n", "\n", "  @Test\n", "  public void forTree_depthFirstPostOrder_emptyGraph() {\n", "    try {\n", "      Traverser.forTree(createDirectedGraph()).depthFirstPostOrder('a');\n", "      fail(\"Expected IllegalArgumentException\");\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "  }\n", "\n", "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'a', 'b');\n", "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd', 'a', 'a', 'b', 'b');\n"], "9": ["        checkArgument(\n", "            graphMap.containsKey(node) || graphMap.containsValue(node),\n", "            \"Node %s is not an element of this graph\",\n", "            node);\n"]}, "removed": {"3": ["    assertThat(graph.requestedNodes).containsExactly('a', 'b');\n", "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'b');\n"], "4": ["    assertThat(graph.requestedNodes).containsExactly('a', 'b', 'd');\n", "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'b', 'd', 'd');\n"], "5": ["    assertThat(graph.requestedNodes).containsExactly('a', 'b', 'd');\n", "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'b', 'd', 'd');\n"], "6": ["    assertThat(graph.requestedNodes).containsExactly('h', 'd');\n", "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd');\n"], "7": ["    assertThat(graph.requestedNodes).containsExactly('h', 'd', 'a');\n", "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd', 'a', 'a');\n"], "8": ["    assertThat(graph.requestedNodes).containsExactly('h', 'd', 'a', 'b');\n", "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd', 'a', 'a', 'b', 'b');\n"]}, "added_lines": {"1": [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128], "2": [214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229], "3": [240, 244], "4": [300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 322, 326], "5": [381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 403, 407], "6": [500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 522, 526], "7": [556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 582], "8": [612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 634, 638], "9": [672, 673, 674, 675]}, "removed_lines": {"3": [212, 216], "4": [278, 282], "5": [343, 347], "6": [446, 450], "7": [486, 490], "8": [526, 530]}}, {"1": "android/guava/src/com/google/common/graph/Traverser.java", "added": {"1": ["   *\n", "   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph\n"], "2": ["   *\n", "   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph\n"], "3": ["   *\n", "   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph\n"], "4": ["      checkNotNull(startNode);\n", "      checkThatNodeIsInGraph(startNode);\n"], "5": ["      checkNotNull(startNode);\n", "      checkThatNodeIsInGraph(startNode);\n"], "6": ["      checkNotNull(startNode);\n", "      checkThatNodeIsInGraph(startNode);\n"], "7": ["    @SuppressWarnings(\"CheckReturnValue\")\n", "    private void checkThatNodeIsInGraph(N startNode) {\n", "      // successors() throws an IllegalArgumentException for nodes that are not an element of the\n", "      // graph.\n", "      graph.successors(startNode);\n", "    }\n", "\n"], "8": ["      checkNotNull(startNode);\n", "      checkThatNodeIsInTree(startNode);\n"], "9": ["      checkNotNull(startNode);\n", "      checkThatNodeIsInTree(startNode);\n"], "10": ["      checkNotNull(startNode);\n", "      checkThatNodeIsInTree(startNode);\n"], "11": ["    @SuppressWarnings(\"CheckReturnValue\")\n", "    private void checkThatNodeIsInTree(N startNode) {\n", "      // successors() throws an IllegalArgumentException for nodes that are not an element of the\n", "      // graph.\n", "      tree.successors(startNode);\n", "    }\n", "\n"]}, "removed": {}, "added_lines": {"1": [171, 172], "2": [204, 205], "3": [237, 238], "4": [251, 252], "5": [263, 264], "6": [275, 276], "7": [285, 286, 287, 288, 289, 290, 291], "8": [382, 383], "9": [394, 395], "10": [406, 407], "11": [416, 417, 418, 419, 420, 421, 422]}, "removed_lines": {}}, {"2": "guava-tests/test/com/google/common/graph/TraverserTest.java", "added": {"1": ["  /**\n", "   * Two disjoint tree-shaped graphs that look as follows (all edges are directed facing downwards):\n", "   *\n", "   * <pre>{@code\n", "   * a   c\n", "   * |   |\n", "   * |   |\n", "   * b   d\n", "   * }</pre>\n", "   */\n", "  private static final SuccessorsFunction<Character> TWO_TREES = createDirectedGraph(\"ab\", \"cd\");\n", "\n"], "2": ["  @Test\n", "  public void forGraph_breadthFirst_twoTrees() {\n", "    Iterable<Character> result = Traverser.forGraph(TWO_TREES).breadthFirst('a');\n", "\n", "    assertEqualCharNodes(result, \"ab\");\n", "  }\n", "\n", "  @Test\n", "  public void forGraph_breadthFirst_emptyGraph() {\n", "    try {\n", "      Traverser.forGraph(createDirectedGraph()).breadthFirst('a');\n", "      fail(\"Expected IllegalArgumentException\");\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "  }\n", "\n"], "3": ["    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b');\n", "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b');\n"], "4": ["  @Test\n", "  public void forGraph_depthFirstPreOrder_twoTrees() {\n", "    Iterable<Character> result = Traverser.forGraph(TWO_TREES).depthFirstPreOrder('a');\n", "\n", "    assertEqualCharNodes(result, \"ab\");\n", "  }\n", "\n", "  @Test\n", "  public void forGraph_depthFirstPreOrder_emptyGraph() {\n", "    try {\n", "      Traverser.forGraph(createDirectedGraph()).depthFirstPreOrder('a');\n", "      fail(\"Expected IllegalArgumentException\");\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "  }\n", "\n", "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'd');\n", "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b', 'd', 'd');\n"], "5": ["  @Test\n", "  public void forGraph_depthFirstPostOrder_twoTrees() {\n", "    Iterable<Character> result = Traverser.forGraph(TWO_TREES).depthFirstPostOrder('a');\n", "\n", "    assertEqualCharNodes(result, \"ba\");\n", "  }\n", "\n", "  @Test\n", "  public void forGraph_depthFirstPostOrder_emptyGraph() {\n", "    try {\n", "      Traverser.forGraph(createDirectedGraph()).depthFirstPostOrder('a');\n", "      fail(\"Expected IllegalArgumentException\");\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "  }\n", "\n", "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'd');\n", "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b', 'd', 'd');\n"], "6": ["  @Test\n", "  public void forTree_breadthFirst_twoTrees() {\n", "    Iterable<Character> result = Traverser.forTree(TWO_TREES).breadthFirst('a');\n", "\n", "    assertEqualCharNodes(result, \"ab\");\n", "  }\n", "\n", "  @Test\n", "  public void forTree_breadthFirst_emptyGraph() {\n", "    try {\n", "      Traverser.forTree(createDirectedGraph()).breadthFirst('a');\n", "      fail(\"Expected IllegalArgumentException\");\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "  }\n", "\n", "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd');\n", "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd');\n"], "7": ["  @Test\n", "  public void forTree_depthFirstPreOrder_twoTrees() {\n", "    Iterable<Character> result = Traverser.forTree(TWO_TREES).depthFirstPreOrder('a');\n", "\n", "    assertEqualCharNodes(result, \"ab\");\n", "  }\n", "\n", "  @Test\n", "  public void forTree_depthFirstPreOrder_emptyGraph() {\n", "    try {\n", "      Traverser.forTree(createDirectedGraph()).depthFirstPreOrder('a');\n", "      fail(\"Expected IllegalArgumentException\");\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "  }\n", "\n", "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'a');\n", "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd', 'a', 'a');\n"], "8": ["  @Test\n", "  public void forTree_depthFirstPostOrder_twoTrees() {\n", "    Iterable<Character> result = Traverser.forTree(TWO_TREES).depthFirstPostOrder('a');\n", "\n", "    assertEqualCharNodes(result, \"ba\");\n", "  }\n", "\n", "  @Test\n", "  public void forTree_depthFirstPostOrder_emptyGraph() {\n", "    try {\n", "      Traverser.forTree(createDirectedGraph()).depthFirstPostOrder('a');\n", "      fail(\"Expected IllegalArgumentException\");\n", "    } catch (IllegalArgumentException expected) {\n", "    }\n", "  }\n", "\n", "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'a', 'b');\n", "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd', 'a', 'a', 'b', 'b');\n"], "9": ["        checkArgument(\n", "            graphMap.containsKey(node) || graphMap.containsValue(node),\n", "            \"Node %s is not an element of this graph\",\n", "            node);\n"]}, "removed": {"3": ["    assertThat(graph.requestedNodes).containsExactly('a', 'b');\n", "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'b');\n"], "4": ["    assertThat(graph.requestedNodes).containsExactly('a', 'b', 'd');\n", "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'b', 'd', 'd');\n"], "5": ["    assertThat(graph.requestedNodes).containsExactly('a', 'b', 'd');\n", "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'b', 'd', 'd');\n"], "6": ["    assertThat(graph.requestedNodes).containsExactly('h', 'd');\n", "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd');\n"], "7": ["    assertThat(graph.requestedNodes).containsExactly('h', 'd', 'a');\n", "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd', 'a', 'a');\n"], "8": ["    assertThat(graph.requestedNodes).containsExactly('h', 'd', 'a', 'b');\n", "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd', 'a', 'a', 'b', 'b');\n"]}, "added_lines": {"1": [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128], "2": [214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229], "3": [240, 244], "4": [300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 322, 326], "5": [381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 403, 407], "6": [500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 522, 526], "7": [556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 582], "8": [612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 634, 638], "9": [672, 673, 674, 675]}, "removed_lines": {"3": [212, 216], "4": [278, 282], "5": [343, 347], "6": [446, 450], "7": [486, 490], "8": [526, 530]}}, {"3": "guava/src/com/google/common/graph/Traverser.java", "added": {"1": ["   *\n", "   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph\n"], "2": ["   *\n", "   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph\n"], "3": ["   *\n", "   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph\n"], "4": ["      checkNotNull(startNode);\n", "      checkThatNodeIsInGraph(startNode);\n"], "5": ["      checkNotNull(startNode);\n", "      checkThatNodeIsInGraph(startNode);\n"], "6": ["      checkNotNull(startNode);\n", "      checkThatNodeIsInGraph(startNode);\n"], "7": ["    @SuppressWarnings(\"CheckReturnValue\")\n", "    private void checkThatNodeIsInGraph(N startNode) {\n", "      // successors() throws an IllegalArgumentException for nodes that are not an element of the\n", "      // graph.\n", "      graph.successors(startNode);\n", "    }\n", "\n"], "8": ["      checkNotNull(startNode);\n", "      checkThatNodeIsInTree(startNode);\n"], "9": ["      checkNotNull(startNode);\n", "      checkThatNodeIsInTree(startNode);\n"], "10": ["      checkNotNull(startNode);\n", "      checkThatNodeIsInTree(startNode);\n"], "11": ["    @SuppressWarnings(\"CheckReturnValue\")\n", "    private void checkThatNodeIsInTree(N startNode) {\n", "      // successors() throws an IllegalArgumentException for nodes that are not an element of the\n", "      // graph.\n", "      tree.successors(startNode);\n", "    }\n", "\n"]}, "removed": {}, "added_lines": {"1": [171, 172], "2": [204, 205], "3": [237, 238], "4": [251, 252], "5": [263, 264], "6": [275, 276], "7": [285, 286, 287, 288, 289, 290, 291], "8": [382, 383], "9": [394, 395], "10": [406, 407], "11": [416, 417, 418, 419, 420, 421, 422]}, "removed_lines": {}}]}
