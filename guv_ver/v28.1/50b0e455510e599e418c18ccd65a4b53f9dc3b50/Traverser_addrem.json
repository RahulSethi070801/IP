{
    "addition": {
        "171": "   *\n",
        "172": "   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph\n",
        "204": "   *\n",
        "205": "   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph\n",
        "237": "   *\n",
        "238": "   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph\n",
        "251": "      checkNotNull(startNode);\n",
        "252": "      checkThatNodeIsInGraph(startNode);\n",
        "263": "      checkNotNull(startNode);\n",
        "264": "      checkThatNodeIsInGraph(startNode);\n",
        "275": "      checkNotNull(startNode);\n",
        "276": "      checkThatNodeIsInGraph(startNode);\n",
        "285": "    @SuppressWarnings(\"CheckReturnValue\")\n",
        "286": "    private void checkThatNodeIsInGraph(N startNode) {\n",
        "287": "      // successors() throws an IllegalArgumentException for nodes that are not an element of the\n",
        "288": "      // graph.\n",
        "289": "      graph.successors(startNode);\n",
        "290": "    }\n",
        "291": "\n",
        "382": "      checkNotNull(startNode);\n",
        "383": "      checkThatNodeIsInTree(startNode);\n",
        "394": "      checkNotNull(startNode);\n",
        "395": "      checkThatNodeIsInTree(startNode);\n",
        "406": "      checkNotNull(startNode);\n",
        "407": "      checkThatNodeIsInTree(startNode);\n",
        "416": "    @SuppressWarnings(\"CheckReturnValue\")\n",
        "417": "    private void checkThatNodeIsInTree(N startNode) {\n",
        "418": "      // successors() throws an IllegalArgumentException for nodes that are not an element of the\n",
        "419": "      // graph.\n",
        "420": "      tree.successors(startNode);\n",
        "421": "    }\n",
        "422": "\n"
    },
    "removed": {}
}