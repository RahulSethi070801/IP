{
    "addition": {
        "117": "  /**\n",
        "118": "   * Two disjoint tree-shaped graphs that look as follows (all edges are directed facing downwards):\n",
        "119": "   *\n",
        "120": "   * <pre>{@code\n",
        "121": "   * a   c\n",
        "122": "   * |   |\n",
        "123": "   * |   |\n",
        "124": "   * b   d\n",
        "125": "   * }</pre>\n",
        "126": "   */\n",
        "127": "  private static final SuccessorsFunction<Character> TWO_TREES = createDirectedGraph(\"ab\", \"cd\");\n",
        "128": "\n",
        "214": "  @Test\n",
        "215": "  public void forGraph_breadthFirst_twoTrees() {\n",
        "216": "    Iterable<Character> result = Traverser.forGraph(TWO_TREES).breadthFirst('a');\n",
        "217": "\n",
        "218": "    assertEqualCharNodes(result, \"ab\");\n",
        "219": "  }\n",
        "220": "\n",
        "221": "  @Test\n",
        "222": "  public void forGraph_breadthFirst_emptyGraph() {\n",
        "223": "    try {\n",
        "224": "      Traverser.forGraph(createDirectedGraph()).breadthFirst('a');\n",
        "225": "      fail(\"Expected IllegalArgumentException\");\n",
        "226": "    } catch (IllegalArgumentException expected) {\n",
        "227": "    }\n",
        "228": "  }\n",
        "229": "\n",
        "240": "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b');\n",
        "244": "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b');\n",
        "300": "  @Test\n",
        "301": "  public void forGraph_depthFirstPreOrder_twoTrees() {\n",
        "302": "    Iterable<Character> result = Traverser.forGraph(TWO_TREES).depthFirstPreOrder('a');\n",
        "303": "\n",
        "304": "    assertEqualCharNodes(result, \"ab\");\n",
        "305": "  }\n",
        "306": "\n",
        "307": "  @Test\n",
        "308": "  public void forGraph_depthFirstPreOrder_emptyGraph() {\n",
        "309": "    try {\n",
        "310": "      Traverser.forGraph(createDirectedGraph()).depthFirstPreOrder('a');\n",
        "311": "      fail(\"Expected IllegalArgumentException\");\n",
        "312": "    } catch (IllegalArgumentException expected) {\n",
        "313": "    }\n",
        "314": "  }\n",
        "315": "\n",
        "322": "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'd');\n",
        "326": "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b', 'd', 'd');\n",
        "381": "  @Test\n",
        "382": "  public void forGraph_depthFirstPostOrder_twoTrees() {\n",
        "383": "    Iterable<Character> result = Traverser.forGraph(TWO_TREES).depthFirstPostOrder('a');\n",
        "384": "\n",
        "385": "    assertEqualCharNodes(result, \"ba\");\n",
        "386": "  }\n",
        "387": "\n",
        "388": "  @Test\n",
        "389": "  public void forGraph_depthFirstPostOrder_emptyGraph() {\n",
        "390": "    try {\n",
        "391": "      Traverser.forGraph(createDirectedGraph()).depthFirstPostOrder('a');\n",
        "392": "      fail(\"Expected IllegalArgumentException\");\n",
        "393": "    } catch (IllegalArgumentException expected) {\n",
        "394": "    }\n",
        "395": "  }\n",
        "396": "\n",
        "403": "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'd');\n",
        "407": "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b', 'd', 'd');\n",
        "500": "  @Test\n",
        "501": "  public void forTree_breadthFirst_twoTrees() {\n",
        "502": "    Iterable<Character> result = Traverser.forTree(TWO_TREES).breadthFirst('a');\n",
        "503": "\n",
        "504": "    assertEqualCharNodes(result, \"ab\");\n",
        "505": "  }\n",
        "506": "\n",
        "507": "  @Test\n",
        "508": "  public void forTree_breadthFirst_emptyGraph() {\n",
        "509": "    try {\n",
        "510": "      Traverser.forTree(createDirectedGraph()).breadthFirst('a');\n",
        "511": "      fail(\"Expected IllegalArgumentException\");\n",
        "512": "    } catch (IllegalArgumentException expected) {\n",
        "513": "    }\n",
        "514": "  }\n",
        "515": "\n",
        "522": "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd');\n",
        "526": "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd');\n",
        "556": "  @Test\n",
        "557": "  public void forTree_depthFirstPreOrder_twoTrees() {\n",
        "558": "    Iterable<Character> result = Traverser.forTree(TWO_TREES).depthFirstPreOrder('a');\n",
        "559": "\n",
        "560": "    assertEqualCharNodes(result, \"ab\");\n",
        "561": "  }\n",
        "562": "\n",
        "563": "  @Test\n",
        "564": "  public void forTree_depthFirstPreOrder_emptyGraph() {\n",
        "565": "    try {\n",
        "566": "      Traverser.forTree(createDirectedGraph()).depthFirstPreOrder('a');\n",
        "567": "      fail(\"Expected IllegalArgumentException\");\n",
        "568": "    } catch (IllegalArgumentException expected) {\n",
        "569": "    }\n",
        "570": "  }\n",
        "571": "\n",
        "578": "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'a');\n",
        "582": "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd', 'a', 'a');\n",
        "612": "  @Test\n",
        "613": "  public void forTree_depthFirstPostOrder_twoTrees() {\n",
        "614": "    Iterable<Character> result = Traverser.forTree(TWO_TREES).depthFirstPostOrder('a');\n",
        "615": "\n",
        "616": "    assertEqualCharNodes(result, \"ba\");\n",
        "617": "  }\n",
        "618": "\n",
        "619": "  @Test\n",
        "620": "  public void forTree_depthFirstPostOrder_emptyGraph() {\n",
        "621": "    try {\n",
        "622": "      Traverser.forTree(createDirectedGraph()).depthFirstPostOrder('a');\n",
        "623": "      fail(\"Expected IllegalArgumentException\");\n",
        "624": "    } catch (IllegalArgumentException expected) {\n",
        "625": "    }\n",
        "626": "  }\n",
        "627": "\n",
        "634": "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'a', 'b');\n",
        "638": "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd', 'a', 'a', 'b', 'b');\n",
        "672": "        checkArgument(\n",
        "673": "            graphMap.containsKey(node) || graphMap.containsValue(node),\n",
        "674": "            \"Node %s is not an element of this graph\",\n",
        "675": "            node);\n"
    },
    "removed": {
        "212": "    assertThat(graph.requestedNodes).containsExactly('a', 'b');\n",
        "216": "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'b');\n",
        "278": "    assertThat(graph.requestedNodes).containsExactly('a', 'b', 'd');\n",
        "282": "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'b', 'd', 'd');\n",
        "343": "    assertThat(graph.requestedNodes).containsExactly('a', 'b', 'd');\n",
        "347": "    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'b', 'd', 'd');\n",
        "446": "    assertThat(graph.requestedNodes).containsExactly('h', 'd');\n",
        "450": "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd');\n",
        "486": "    assertThat(graph.requestedNodes).containsExactly('h', 'd', 'a');\n",
        "490": "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd', 'a', 'a');\n",
        "526": "    assertThat(graph.requestedNodes).containsExactly('h', 'd', 'a', 'b');\n",
        "530": "    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd', 'd', 'a', 'a', 'b', 'b');\n"
    }
}