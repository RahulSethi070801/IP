{"id": "3def13f60ae4a72e59a8426aab6e3568613fe9e4", "code": [{"0": "guava-tests/test/com/google/common/graph/AbstractNetworkTest.java", "added": {"1": ["        if (edgesConnecting.size() <= 1) {\n", "          assertThat(network.edgeConnecting(node, otherNode).asSet()).isEqualTo(edgesConnecting);\n", "        } else {\n", "          try {\n", "            network.edgeConnecting(node, otherNode);\n", "            fail();\n", "          } catch (IllegalArgumentException expected) {}\n", "        }\n", "\n"]}, "removed": {}, "added_lines": {"1": [220, 221, 222, 223, 224, 225, 226, 227, 228]}, "removed_lines": {}}, {"1": "guava-tests/test/com/google/common/graph/GraphsTest.java", "added": {"1": ["    assertThat(transpose.edgeConnecting(N1, N2)).isAbsent();\n", "    assertThat(transpose.edgeConnecting(N1, N2)).hasValue(E21);\n"]}, "removed": {}, "added_lines": {"1": [312, 316]}, "removed_lines": {}}, {"2": "guava/src/com/google/common/graph/AbstractNetwork.java", "added": {"1": ["import static com.google.common.graph.GraphConstants.MULTIPLE_EDGES_CONNECTING;\n", "import com.google.common.base.Optional;\n"], "2": ["  @Override\n", "  public Optional<E> edgeConnecting(Object nodeU, Object nodeV) {\n", "    Set<E> edgesConnecting = edgesConnecting(nodeU, nodeV);\n", "    switch (edgesConnecting.size()) {\n", "      case 0:\n", "        return Optional.absent();\n", "      case 1:\n", "        return Optional.of(edgesConnecting.iterator().next());\n", "      default:\n", "        throw new IllegalArgumentException(String.format(MULTIPLE_EDGES_CONNECTING, nodeU, nodeV));\n", "    }\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [20, 24], "2": [155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167]}, "removed_lines": {}}, {"3": "guava/src/com/google/common/graph/GraphConstants.java", "added": {"1": ["  static final String MULTIPLE_EDGES_CONNECTING =\n", "      \"Cannot call edgeConnecting() when parallel edges exist between %s and %s. Consider calling \"\n", "          + \"edgesConnecting() instead.\";\n"]}, "removed": {}, "added_lines": {"1": [41, 42, 43]}, "removed_lines": {}}, {"4": "guava/src/com/google/common/graph/Graphs.java", "added": {"1": ["import com.google.common.base.Optional;\n"], "2": ["\n", "    @Override\n", "    public Optional<E> edgeConnecting(Object nodeU, Object nodeV) {\n", "      return network.edgeConnecting(nodeV, nodeU); // transpose\n", "    }\n"]}, "removed": {}, "added_lines": {"1": [24], "2": [497, 498, 499, 500, 501]}, "removed_lines": {}}, {"5": "guava/src/com/google/common/graph/Network.java", "added": {"1": ["import com.google.common.base.Optional;\n"], "2": ["   * will contain at most one edge (equivalent to {@code edgeConnecting(nodeU, nodeV).asSet()}).\n", "  /**\n", "   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present.\n", "   *\n", "   * <p>In an undirected network, this is equal to {@code edgeConnecting(nodeV, nodeU)}.\n", "   *\n", "   * @throws IllegalArgumentException if there are multiple parallel edges connecting {@code nodeU}\n", "   *     to {@code nodeV}\n", "   * @throws IllegalArgumentException if {@code nodeU} or {@code nodeV} is not an element of this\n", "   *     network\n", "   */\n", "  Optional<E> edgeConnecting(@CompatibleWith(\"N\") Object nodeU, @CompatibleWith(\"N\") Object nodeV);\n", "\n"]}, "removed": {"2": ["   * will contain at most one edge.\n"]}, "added_lines": {"1": [20], "2": [280, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298]}, "removed_lines": {"2": [279]}}]}
