public static <T, R> Stream<R> mapWithIndex(Stream<T> stream, FunctionWithIndex<? super T, ? extends R> function) {
    checkNotNull(stream);
    checkNotNull(function);
    boolean isParallel = stream.isParallel();
    Spliterator<T> fromSpliterator = stream.spliterator();
    if (!fromSpliterator.hasCharacteristics(Spliterator.SUBSIZED)) {
        Iterator<T> fromIterator = Spliterators.iterator(fromSpliterator);
        return StreamSupport.stream(new AbstractSpliterator<R>(fromSpliterator.estimateSize(), fromSpliterator.characteristics() & (Spliterator.ORDERED | Spliterator.SIZED)) {

            long index = 0;

            @Override
            public boolean tryAdvance(Consumer<? super R> action) {
                if (fromIterator.hasNext()) {
                    action.accept(function.apply(fromIterator.next(), index++));
                    return true;
                }
                return false;
            }
        }, isParallel).onClose(stream::close);
    }
    class Splitr extends MapWithIndexSpliterator<Spliterator<T>, R, Splitr> implements Consumer<T> {

        T holder;

        Splitr(Spliterator<T> splitr, long index) {
            super(splitr, index);
        }

        @Override
        public void accept(@NullableDecl T t) {
            this.holder = t;
        }

        @Override
        public boolean tryAdvance(Consumer<? super R> action) {
            if (fromSpliterator.tryAdvance(this)) {
                try {
                    action.accept(function.apply(holder, index++));
                    return true;
                } finally {
                    holder = null;
                }
            }
            return false;
        }

        @Override
        Splitr createSplit(Spliterator<T> from, long i) {
            return new Splitr(from, i);
        }
    }
    return StreamSupport.stream(new Splitr(fromSpliterator, 0), isParallel).onClose(stream::close);
}