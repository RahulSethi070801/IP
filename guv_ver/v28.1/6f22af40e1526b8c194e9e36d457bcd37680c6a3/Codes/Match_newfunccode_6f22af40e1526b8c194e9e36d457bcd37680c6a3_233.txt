@Beta
public static <E> Set<Set<E>> combinations(Set<E> set, final int size) {
    final ImmutableMap<E, Integer> index = Maps.indexMap(set);
    checkNonnegative(size, "size");
    checkArgument(size <= index.size(), "size (%s) must be <= set.size() (%s)", size, index.size());
    if (size == 0) {
        return ImmutableSet.<Set<E>>of(ImmutableSet.<E>of());
    } else if (size == index.size()) {
        return ImmutableSet.<Set<E>>of(index.keySet());
    }
    return new AbstractSet<Set<E>>() {

        @Override
        public boolean contains(@NullableDecl Object o) {
            if (o instanceof Set) {
                Set<?> s = (Set<?>) o;
                return s.size() == size && index.keySet().containsAll(s);
            }
            return false;
        }

        @Override
        public Iterator<Set<E>> iterator() {
            return new AbstractIterator<Set<E>>() {

                final BitSet bits = new BitSet(index.size());

                @Override
                protected Set<E> computeNext() {
                    if (bits.isEmpty()) {
                        bits.set(0, size);
                    } else {
                        int firstSetBit = bits.nextSetBit(0);
                        int bitToFlip = bits.nextClearBit(firstSetBit);
                        if (bitToFlip == index.size()) {
                            return endOfData();
                        }
                        bits.set(0, bitToFlip - firstSetBit - 1);
                        bits.clear(bitToFlip - firstSetBit - 1, bitToFlip);
                        bits.set(bitToFlip);
                    }
                    final BitSet copy = (BitSet) bits.clone();
                    return new AbstractSet<E>() {

                        @Override
                        public boolean contains(@NullableDecl Object o) {
                            Integer i = index.get(o);
                            return i != null && copy.get(i);
                        }

                        @Override
                        public Iterator<E> iterator() {
                            return new AbstractIterator<E>() {

                                int i = -1;

                                @Override
                                protected E computeNext() {
                                    i = copy.nextSetBit(i + 1);
                                    if (i == -1) {
                                        return endOfData();
                                    }
                                    return index.keySet().asList().get(i);
                                }
                            };
                        }

                        @Override
                        public int size() {
                            return size;
                        }
                    };
                }
            };
        }

        @Override
        public int size() {
            return IntMath.binomial(index.size(), size);
        }

        @Override
        public String toString() {
            return "Sets.combinations(" + index.keySet() + ", " + size + ")";
        }
    };
}