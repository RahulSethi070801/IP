{"id": "7928bbe079303c54373453353c9ef2cd7de9365e", "code": [{"0": "android/guava-tests/test/com/google/common/collect/ImmutableListTest.java", "added": {"1": ["    @GwtIncompatible\n", "    public void testBuilderExactlySizedReusesArray() {\n", "      ImmutableList.Builder<Integer> builder = ImmutableList.builderWithExpectedSize(10);\n", "      Object[] builderArray = builder.contents;\n", "      for (int i = 0; i < 10; i++) {\n", "        builder.add(i);\n", "      }\n", "      Object[] builderArrayAfterAdds = builder.contents;\n", "      RegularImmutableList<Integer> list = (RegularImmutableList<Integer>) builder.build();\n", "      Object[] listInternalArray = list.array;\n", "      assertSame(builderArray, builderArrayAfterAdds);\n", "      assertSame(builderArray, listInternalArray);\n", "    }\n", "\n"]}, "removed": {}, "added_lines": {"1": [745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758]}, "removed_lines": {}}, {"1": "android/guava/src/com/google/common/collect/ImmutableList.java", "added": {"1": ["import static com.google.common.collect.CollectPreconditions.checkNonnegative;\n", "import com.google.common.annotations.Beta;\n"], "2": ["  /**\n", "   * Returns a new builder, expecting the specified number of elements to be added.\n", "   *\n", "   * <p>If {@code expectedSize} is exactly the number of elements added to the builder before {@link\n", "   * Builder#build} is called, the builder is likely to perform better than an unsized {@link\n", "   * #builder()} would have.\n", "   *\n", "   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,\n", "   * but not exactly, the number of elements added to the builder.\n", "   *\n", "   * @since 24.0\n", "   */\n", "  @Beta\n", "  public static <E> Builder<E> builderWithExpectedSize(int expectedSize) {\n", "    checkNonnegative(expectedSize, \"expectedSize\");\n", "    return new ImmutableList.Builder<E>(expectedSize);\n", "  }\n", "\n"]}, "removed": {"3": ["    // TODO(lowasser): consider exposing this\n"]}, "added_lines": {"1": [22, 26], "2": [644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661]}, "removed_lines": {"3": [670]}}, {"2": "android/guava/src/com/google/common/collect/RegularImmutableList.java", "added": {"1": ["  @VisibleForTesting\n", "  final transient Object[] array;\n"]}, "removed": {"1": ["  @VisibleForTesting final transient Object[] array;\n"]}, "added_lines": {"1": [34, 35]}, "removed_lines": {"1": [34]}}, {"3": "guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java", "added": {"1": ["  public static <E> Builder<E> builderWithExpectedSize(int expectedSize) {\n", "    return new Builder<E>(expectedSize);\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [299, 300, 301, 302]}, "removed_lines": {}}, {"4": "guava-tests/test/com/google/common/collect/ImmutableListTest.java", "added": {"1": ["    @GwtIncompatible\n", "    public void testBuilderExactlySizedReusesArray() {\n", "      ImmutableList.Builder<Integer> builder = ImmutableList.builderWithExpectedSize(10);\n", "      Object[] builderArray = builder.contents;\n", "      for (int i = 0; i < 10; i++) {\n", "        builder.add(i);\n", "      }\n", "      Object[] builderArrayAfterAdds = builder.contents;\n", "      RegularImmutableList<Integer> list = (RegularImmutableList<Integer>) builder.build();\n", "      Object[] listInternalArray = list.array;\n", "      assertSame(builderArray, builderArrayAfterAdds);\n", "      assertSame(builderArray, listInternalArray);\n", "    }\n", "\n"]}, "removed": {}, "added_lines": {"1": [750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763]}, "removed_lines": {}}, {"5": "guava/src/com/google/common/collect/ImmutableList.java", "added": {"1": ["import static com.google.common.collect.CollectPreconditions.checkNonnegative;\n"], "2": ["  /**\n", "   * Returns a new builder, expecting the specified number of elements to be added.\n", "   *\n", "   * <p>If {@code expectedSize} is exactly the number of elements added to the builder before {@link\n", "   * Builder#build} is called, the builder is likely to perform better than an unsized {@link\n", "   * #builder()} would have.\n", "   *\n", "   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,\n", "   * but not exactly, the number of elements added to the builder.\n", "   *\n", "   * @since 24.0\n", "   */\n", "  @Beta\n", "  public static <E> Builder<E> builderWithExpectedSize(int expectedSize) {\n", "    checkNonnegative(expectedSize, \"expectedSize\");\n", "    return new ImmutableList.Builder<E>(expectedSize);\n", "  }\n", "\n"]}, "removed": {"3": ["    // TODO(lowasser): consider exposing this\n"]}, "added_lines": {"1": [22], "2": [715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732]}, "removed_lines": {"3": [742]}}, {"6": "guava/src/com/google/common/collect/RegularImmutableList.java", "added": {"1": ["import com.google.common.annotations.VisibleForTesting;\n"], "2": ["  @VisibleForTesting\n", "  final transient Object[] array;\n"]}, "removed": {"2": ["  private final transient Object[] array;\n"]}, "added_lines": {"1": [20], "2": [35, 36]}, "removed_lines": {"2": [34]}}]}
