{
    "addition": {
        "35": " * <p><b>Warning:</b> This class deals only with {@code char} values, that is,\n",
        "36": " * <a href=\"http://www.unicode.org/glossary/#BMP_character\">BMP characters</a>.\n",
        "37": " * It does not understand\n",
        "38": " * <a href=\"http://www.unicode.org/glossary/#supplementary_code_point\">supplementary Unicode\n",
        "39": " * code points</a> in the range {@code 0x10000} to {@code 0x10FFFF}\n",
        "40": " * which includes the majority of assigned characters, including important CJK characters and emoji.\n",
        "41": " *\n",
        "42": " * <p>Supplementary characters are\n",
        "43": " * <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#supplementary\">\n",
        "44": " * encoded into a {@code String} using surrogate pairs</a>,\n",
        "45": " * and a {@code CharMatcher} treats these just as two separate characters.\n",
        "46": " * {@link #countIn} counts each supplementary character as 2 {@code char}s.\n",
        "47": " *\n",
        "48": " * <p>For up-to-date Unicode character properties (digit, letter, etc.) and support for\n",
        "49": " * supplementary code points, use ICU4J UCharacter and UnicodeSet (freeze() after building).\n",
        "50": " * For basic text processing based on UnicodeSet use the ICU4J UnicodeSetSpanner.\n",
        "140": "   * <p>All Unicode White_Space characters are on the BMP and thus supported by this API.\n",
        "141": "   *\n",
        "172": "   * Determines whether a character is a BMP digit according to\n",
        "176": "   * @deprecated Many digits are supplementary characters; see the class documentation.\n",
        "179": "  @Deprecated\n",
        "185": "   * Determines whether a character is a BMP digit according to {@linkplain Character#isDigit(char)\n",
        "189": "   * @deprecated Many digits are supplementary characters; see the class documentation.\n",
        "192": "  @Deprecated\n",
        "198": "   * Determines whether a character is a BMP letter according to\n",
        "199": "   * {@linkplain Character#isLetter(char) Java's definition}.\n",
        "200": "   * If you only care to match letters of the Latin alphabet, you can use\n",
        "201": "   * {@code inRange('a', 'z').or(inRange('A', 'Z'))}.\n",
        "203": "   * @deprecated Most letters are supplementary characters; see the class documentation.\n",
        "206": "  @Deprecated\n",
        "212": "   * Determines whether a character is a BMP letter or digit according to\n",
        "215": "   * @deprecated Most letters and digits are supplementary characters; see the class documentation.\n",
        "218": "  @Deprecated\n",
        "224": "   * Determines whether a BMP character is upper case according to\n",
        "227": "   * @deprecated Some uppercase characters are supplementary characters;\n",
        "228": "   *     see the class documentation.\n",
        "231": "  @Deprecated\n",
        "237": "   * Determines whether a BMP character is lower case according to\n",
        "240": "   * @deprecated Some lowercase characters are supplementary characters;\n",
        "241": "   *     see the class documentation.\n",
        "244": "  @Deprecated\n",
        "253": "   * <p>All ISO control codes are on the BMP and thus supported by this API.\n",
        "254": "   *\n",
        "266": "   * <p>See also the Unicode Default_Ignorable_Code_Point property (available via ICU).\n",
        "267": "   *\n",
        "268": "   * @deprecated Most invisible characters are supplementary characters;\n",
        "269": "   *     see the class documentation.\n",
        "272": "  @Deprecated\n",
        "285": "   * <p>See also <a href=\"http://www.unicode.org/reports/tr11/\">UAX #11 East Asian Width</a>.\n",
        "286": "   *\n",
        "287": "   * @deprecated Many such characters are supplementary characters; see the class documentation.\n",
        "290": "  @Deprecated\n",
        "471": "   * Returns a {@code char} matcher that matches only one specified BMP character.\n",
        "478": "   * Returns a {@code char} matcher that matches any character except the BMP character specified.\n",
        "487": "   * Returns a {@code char} matcher that matches any BMP character present in the given character\n",
        "488": "   * sequence. Returns a bogus matcher if the sequence contains supplementary characters.\n",
        "506": "   * Returns a {@code char} matcher that matches any BMP character not present in the given\n",
        "507": "   * character sequence. Returns a bogus matcher if the sequence contains supplementary characters.\n",
        "514": "   * Returns a {@code char} matcher that matches any character in a given BMP range (both endpoints\n",
        "515": "   * are inclusive). For example, to match any lowercase letter of the English alphabet, use {@code\n",
        "664": "   * Returns {@code true} if a character sequence contains at least one matching BMP character.\n",
        "679": "   * Returns {@code true} if a character sequence contains only matching BMP characters.\n",
        "698": "   * Returns {@code true} if a character sequence contains no matching BMP characters. Equivalent to\n",
        "713": "   * Returns the index of the first matching BMP character in a character sequence,\n",
        "714": "   * or {@code -1} if no matching character is present.\n",
        "727": "   * Returns the index of the first matching BMP character in a character sequence, starting from a\n",
        "753": "   * Returns the index of the last matching BMP character in a character sequence,\n",
        "754": "   * or {@code -1} if no matching character is present.\n",
        "772": "   * Returns the number of matching {@code char}s found in a character sequence.\n",
        "773": "   *\n",
        "774": "   * <p>Counts 2 per supplementary character, such as for {@link #whitespace}().{@link #negate}().\n",
        "824": "   * Returns a string containing all matching BMP characters of a character sequence, in order. For\n",
        "836": "   * Returns a string copy of the input character sequence, with each matching BMP character\n",
        "837": "   * replaced by a given replacement character. For example: <pre>   {@code\n",
        "869": "   * Returns a string copy of the input character sequence, with each matching BMP character\n",
        "870": "   * replaced by a given replacement sequence. For example: <pre>   {@code\n",
        "915": "   * Returns a substring of the input character sequence that omits all matching BMP characters\n",
        "916": "   * from the beginning and from the end of the string. For example: <pre>   {@code\n",
        "948": "   * Returns a substring of the input character sequence that omits all matching BMP characters\n",
        "949": "   * from the beginning of the string. For example: <pre> {@code\n",
        "966": "   * Returns a substring of the input character sequence that omits all matching BMP characters\n",
        "967": "   * from the end of the string. For example: <pre> {@code\n",
        "985": "   * matching BMP characters replaced by a single replacement character. For example:\n",
        "1022": "   * groups of matching BMP characters at the start or end of the sequence are removed without\n",
        "1087": "   * Returns the Java Unicode escape sequence for the given {@code char}, in the form \"\\u12AB\"\n",
        "1088": "   * where \"12AB\" is the four hexadecimal digits representing the 16-bit code unit.\n"
    },
    "removed": {
        "35": " * <p><b>Warning:</b> This class deals only with {@code char} values; it does not understand\n",
        "36": " * supplementary Unicode code points in the range {@code 0x10000} to {@code 0x10FFFF}. Such logical\n",
        "37": " * characters are encoded into a {@code String} using surrogate pairs, and a {@code CharMatcher}\n",
        "38": " * treats these just as two separate characters.\n",
        "158": "   * Determines whether a character is a digit according to\n",
        "169": "   * Determines whether a character is a digit according to {@linkplain Character#isDigit(char)\n",
        "180": "   * Determines whether a character is a letter according to {@linkplain Character#isLetter(char)\n",
        "181": "   * Java's definition}. If you only care to match letters of the Latin alphabet, you can use {@code\n",
        "182": "   * inRange('a', 'z').or(inRange('A', 'Z'))}.\n",
        "191": "   * Determines whether a character is a letter or digit according to\n",
        "201": "   * Determines whether a character is upper case according to\n",
        "211": "   * Determines whether a character is lower case according to\n",
        "431": "   * Returns a {@code char} matcher that matches only one specified character.\n",
        "438": "   * Returns a {@code char} matcher that matches any character except the one specified.\n",
        "447": "   * Returns a {@code char} matcher that matches any character present in the given character\n",
        "448": "   * sequence.\n",
        "466": "   * Returns a {@code char} matcher that matches any character not present in the given character\n",
        "467": "   * sequence.\n",
        "474": "   * Returns a {@code char} matcher that matches any character in a given range (both endpoints are\n",
        "475": "   * inclusive). For example, to match any lowercase letter of the English alphabet, use {@code\n",
        "624": "   * Returns {@code true} if a character sequence contains at least one matching character.\n",
        "639": "   * Returns {@code true} if a character sequence contains only matching characters.\n",
        "658": "   * Returns {@code true} if a character sequence contains no matching characters. Equivalent to\n",
        "673": "   * Returns the index of the first matching character in a character sequence, or {@code -1} if no\n",
        "674": "   * matching character is present.\n",
        "687": "   * Returns the index of the first matching character in a character sequence, starting from a\n",
        "713": "   * Returns the index of the last matching character in a character sequence, or {@code -1} if no\n",
        "714": "   * matching character is present.\n",
        "732": "   * Returns the number of matching characters found in a character sequence.\n",
        "782": "   * Returns a string containing all matching characters of a character sequence, in order. For\n",
        "794": "   * Returns a string copy of the input character sequence, with each character that matches this\n",
        "795": "   * matcher replaced by a given replacement character. For example: <pre>   {@code\n",
        "827": "   * Returns a string copy of the input character sequence, with each character that matches this\n",
        "828": "   * matcher replaced by a given replacement sequence. For example: <pre>   {@code\n",
        "873": "   * Returns a substring of the input character sequence that omits all characters this matcher\n",
        "874": "   * matches from the beginning and from the end of the string. For example: <pre>   {@code\n",
        "906": "   * Returns a substring of the input character sequence that omits all characters this matcher\n",
        "907": "   * matches from the beginning of the string. For example: <pre> {@code\n",
        "924": "   * Returns a substring of the input character sequence that omits all characters this matcher\n",
        "925": "   * matches from the end of the string. For example: <pre> {@code\n",
        "943": "   * characters that match this matcher replaced by a single replacement character. For example:\n",
        "980": "   * groups of matching characters at the start or end of the sequence are removed without\n",
        "1045": "   * Returns the Java Unicode escape sequence for the given character, in the form \"\\u12AB\" where\n",
        "1046": "   * \"12AB\" is the four hexadecimal digits representing the 16 bits of the UTF-16 character.\n"
    }
}