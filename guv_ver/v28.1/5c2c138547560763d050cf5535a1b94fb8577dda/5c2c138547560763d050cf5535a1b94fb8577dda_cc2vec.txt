{"id": "5c2c138547560763d050cf5535a1b94fb8577dda", "code": [{"0": "android/guava/src/com/google/common/base/CharMatcher.java", "added": {"1": [" * <p><b>Warning:</b> This class deals only with {@code char} values, that is,\n", " * <a href=\"http://www.unicode.org/glossary/#BMP_character\">BMP characters</a>.\n", " * It does not understand\n", " * <a href=\"http://www.unicode.org/glossary/#supplementary_code_point\">supplementary Unicode\n", " * code points</a> in the range {@code 0x10000} to {@code 0x10FFFF}\n", " * which includes the majority of assigned characters, including important CJK characters and emoji.\n", " *\n", " * <p>Supplementary characters are\n", " * <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#supplementary\">\n", " * encoded into a {@code String} using surrogate pairs</a>,\n", " * and a {@code CharMatcher} treats these just as two separate characters.\n", " * {@link #countIn} counts each supplementary character as 2 {@code char}s.\n", " *\n", " * <p>For up-to-date Unicode character properties (digit, letter, etc.) and support for\n", " * supplementary code points, use ICU4J UCharacter and UnicodeSet (freeze() after building).\n", " * For basic text processing based on UnicodeSet use the ICU4J UnicodeSetSpanner.\n"], "2": ["   * <p>All Unicode White_Space characters are on the BMP and thus supported by this API.\n", "   *\n"], "3": ["   * Determines whether a character is a BMP digit according to\n", "   * @deprecated Many digits are supplementary characters; see the class documentation.\n", "  @Deprecated\n", "   * Determines whether a character is a BMP digit according to {@linkplain Character#isDigit(char)\n", "   * @deprecated Many digits are supplementary characters; see the class documentation.\n", "  @Deprecated\n", "   * Determines whether a character is a BMP letter according to\n", "   * {@linkplain Character#isLetter(char) Java's definition}.\n", "   * If you only care to match letters of the Latin alphabet, you can use\n", "   * {@code inRange('a', 'z').or(inRange('A', 'Z'))}.\n", "   * @deprecated Most letters are supplementary characters; see the class documentation.\n", "  @Deprecated\n", "   * Determines whether a character is a BMP letter or digit according to\n", "   * @deprecated Most letters and digits are supplementary characters; see the class documentation.\n", "  @Deprecated\n", "   * Determines whether a BMP character is upper case according to\n", "   * @deprecated Some uppercase characters are supplementary characters;\n", "   *     see the class documentation.\n", "  @Deprecated\n", "   * Determines whether a BMP character is lower case according to\n", "   * @deprecated Some lowercase characters are supplementary characters;\n", "   *     see the class documentation.\n", "  @Deprecated\n"], "4": ["   * <p>All ISO control codes are on the BMP and thus supported by this API.\n", "   *\n"], "5": ["   * <p>See also the Unicode Default_Ignorable_Code_Point property (available via ICU).\n", "   *\n", "   * @deprecated Most invisible characters are supplementary characters;\n", "   *     see the class documentation.\n", "  @Deprecated\n"], "6": ["   * <p>See also <a href=\"http://www.unicode.org/reports/tr11/\">UAX #11 East Asian Width</a>.\n", "   *\n", "   * @deprecated Many such characters are supplementary characters; see the class documentation.\n", "  @Deprecated\n"], "7": ["   * Returns a {@code char} matcher that matches only one specified BMP character.\n", "   * Returns a {@code char} matcher that matches any character except the BMP character specified.\n"], "8": ["   * Returns a {@code char} matcher that matches any BMP character present in the given character\n", "   * sequence. Returns a bogus matcher if the sequence contains supplementary characters.\n"], "9": ["   * Returns a {@code char} matcher that matches any BMP character not present in the given\n", "   * character sequence. Returns a bogus matcher if the sequence contains supplementary characters.\n", "   * Returns a {@code char} matcher that matches any character in a given BMP range (both endpoints\n", "   * are inclusive). For example, to match any lowercase letter of the English alphabet, use {@code\n"], "10": ["   * Returns {@code true} if a character sequence contains at least one matching BMP character.\n"], "11": ["   * Returns {@code true} if a character sequence contains only matching BMP characters.\n"], "12": ["   * Returns {@code true} if a character sequence contains no matching BMP characters. Equivalent to\n"], "13": ["   * Returns the index of the first matching BMP character in a character sequence,\n", "   * or {@code -1} if no matching character is present.\n"], "14": ["   * Returns the index of the first matching BMP character in a character sequence, starting from a\n"], "15": ["   * Returns the index of the last matching BMP character in a character sequence,\n", "   * or {@code -1} if no matching character is present.\n"], "16": ["   * Returns the number of matching {@code char}s found in a character sequence.\n", "   *\n", "   * <p>Counts 2 per supplementary character, such as for {@link #whitespace}().{@link #negate}().\n"], "17": ["   * Returns a string containing all matching BMP characters of a character sequence, in order. For\n"], "18": ["   * Returns a string copy of the input character sequence, with each matching BMP character\n", "   * replaced by a given replacement character. For example: <pre>   {@code\n"], "19": ["   * Returns a string copy of the input character sequence, with each matching BMP character\n", "   * replaced by a given replacement sequence. For example: <pre>   {@code\n"], "20": ["   * Returns a substring of the input character sequence that omits all matching BMP characters\n", "   * from the beginning and from the end of the string. For example: <pre>   {@code\n"], "21": ["   * Returns a substring of the input character sequence that omits all matching BMP characters\n", "   * from the beginning of the string. For example: <pre> {@code\n"], "22": ["   * Returns a substring of the input character sequence that omits all matching BMP characters\n", "   * from the end of the string. For example: <pre> {@code\n"], "23": ["   * matching BMP characters replaced by a single replacement character. For example:\n"], "24": ["   * groups of matching BMP characters at the start or end of the sequence are removed without\n"], "25": ["   * Returns the Java Unicode escape sequence for the given {@code char}, in the form \"\\u12AB\"\n", "   * where \"12AB\" is the four hexadecimal digits representing the 16-bit code unit.\n"]}, "removed": {"1": [" * <p><b>Warning:</b> This class deals only with {@code char} values; it does not understand\n", " * supplementary Unicode code points in the range {@code 0x10000} to {@code 0x10FFFF}. Such logical\n", " * characters are encoded into a {@code String} using surrogate pairs, and a {@code CharMatcher}\n", " * treats these just as two separate characters.\n"], "3": ["   * Determines whether a character is a digit according to\n", "   * Determines whether a character is a digit according to {@linkplain Character#isDigit(char)\n", "   * Determines whether a character is a letter according to {@linkplain Character#isLetter(char)\n", "   * Java's definition}. If you only care to match letters of the Latin alphabet, you can use {@code\n", "   * inRange('a', 'z').or(inRange('A', 'Z'))}.\n", "   * Determines whether a character is a letter or digit according to\n", "   * Determines whether a character is upper case according to\n", "   * Determines whether a character is lower case according to\n"], "7": ["   * Returns a {@code char} matcher that matches only one specified character.\n", "   * Returns a {@code char} matcher that matches any character except the one specified.\n"], "8": ["   * Returns a {@code char} matcher that matches any character present in the given character\n", "   * sequence.\n"], "9": ["   * Returns a {@code char} matcher that matches any character not present in the given character\n", "   * sequence.\n", "   * Returns a {@code char} matcher that matches any character in a given range (both endpoints are\n", "   * inclusive). For example, to match any lowercase letter of the English alphabet, use {@code\n"], "10": ["   * Returns {@code true} if a character sequence contains at least one matching character.\n"], "11": ["   * Returns {@code true} if a character sequence contains only matching characters.\n"], "12": ["   * Returns {@code true} if a character sequence contains no matching characters. Equivalent to\n"], "13": ["   * Returns the index of the first matching character in a character sequence, or {@code -1} if no\n", "   * matching character is present.\n"], "14": ["   * Returns the index of the first matching character in a character sequence, starting from a\n"], "15": ["   * Returns the index of the last matching character in a character sequence, or {@code -1} if no\n", "   * matching character is present.\n"], "16": ["   * Returns the number of matching characters found in a character sequence.\n"], "17": ["   * Returns a string containing all matching characters of a character sequence, in order. For\n"], "18": ["   * Returns a string copy of the input character sequence, with each character that matches this\n", "   * matcher replaced by a given replacement character. For example: <pre>   {@code\n"], "19": ["   * Returns a string copy of the input character sequence, with each character that matches this\n", "   * matcher replaced by a given replacement sequence. For example: <pre>   {@code\n"], "20": ["   * Returns a substring of the input character sequence that omits all characters this matcher\n", "   * matches from the beginning and from the end of the string. For example: <pre>   {@code\n"], "21": ["   * Returns a substring of the input character sequence that omits all characters this matcher\n", "   * matches from the beginning of the string. For example: <pre> {@code\n"], "22": ["   * Returns a substring of the input character sequence that omits all characters this matcher\n", "   * matches from the end of the string. For example: <pre> {@code\n"], "23": ["   * characters that match this matcher replaced by a single replacement character. For example:\n"], "24": ["   * groups of matching characters at the start or end of the sequence are removed without\n"], "25": ["   * Returns the Java Unicode escape sequence for the given character, in the form \"\\u12AB\" where\n", "   * \"12AB\" is the four hexadecimal digits representing the 16 bits of the UTF-16 character.\n"]}, "added_lines": {"1": [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], "2": [140, 141], "3": [172, 176, 179, 185, 189, 192, 198, 199, 200, 201, 203, 206, 212, 215, 218, 224, 227, 228, 231, 237, 240, 241, 244], "4": [253, 254], "5": [266, 267, 268, 269, 272], "6": [285, 286, 287, 290], "7": [471, 478], "8": [487, 488], "9": [506, 507, 514, 515], "10": [664], "11": [679], "12": [698], "13": [713, 714], "14": [727], "15": [753, 754], "16": [772, 773, 774], "17": [824], "18": [836, 837], "19": [869, 870], "20": [915, 916], "21": [948, 949], "22": [966, 967], "23": [985], "24": [1022], "25": [1087, 1088]}, "removed_lines": {"1": [35, 36, 37, 38], "3": [158, 169, 180, 181, 182, 191, 201, 211], "7": [431, 438], "8": [447, 448], "9": [466, 467, 474, 475], "10": [624], "11": [639], "12": [658], "13": [673, 674], "14": [687], "15": [713, 714], "16": [732], "17": [782], "18": [794, 795], "19": [827, 828], "20": [873, 874], "21": [906, 907], "22": [924, 925], "23": [943], "24": [980], "25": [1045, 1046]}}, {"1": "guava/src/com/google/common/base/CharMatcher.java", "added": {"1": [" * <p><b>Warning:</b> This class deals only with {@code char} values, that is,\n", " * <a href=\"http://www.unicode.org/glossary/#BMP_character\">BMP characters</a>.\n", " * It does not understand\n", " * <a href=\"http://www.unicode.org/glossary/#supplementary_code_point\">supplementary Unicode\n", " * code points</a> in the range {@code 0x10000} to {@code 0x10FFFF}\n", " * which includes the majority of assigned characters, including important CJK characters and emoji.\n", " *\n", " * <p>Supplementary characters are\n", " * <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#supplementary\">\n", " * encoded into a {@code String} using surrogate pairs</a>,\n", " * and a {@code CharMatcher} treats these just as two separate characters.\n", " * {@link #countIn} counts each supplementary character as 2 {@code char}s.\n", " *\n", " * <p>For up-to-date Unicode character properties (digit, letter, etc.) and support for\n", " * supplementary code points, use ICU4J UCharacter and UnicodeSet (freeze() after building).\n", " * For basic text processing based on UnicodeSet use the ICU4J UnicodeSetSpanner.\n"], "2": ["   * <p>All Unicode White_Space characters are on the BMP and thus supported by this API.\n", "   *\n"], "3": ["   * Determines whether a character is a BMP digit according to\n", "   * @deprecated Many digits are supplementary characters; see the class documentation.\n", "  @Deprecated\n", "   * Determines whether a character is a BMP digit according to {@linkplain Character#isDigit(char)\n", "   * @deprecated Many digits are supplementary characters; see the class documentation.\n", "  @Deprecated\n", "   * Determines whether a character is a BMP letter according to\n", "   * {@linkplain Character#isLetter(char) Java's definition}.\n", "   * If you only care to match letters of the Latin alphabet, you can use\n", "   * {@code inRange('a', 'z').or(inRange('A', 'Z'))}.\n", "   * @deprecated Most letters are supplementary characters; see the class documentation.\n", "  @Deprecated\n", "   * Determines whether a character is a BMP letter or digit according to\n", "   * @deprecated Most letters and digits are supplementary characters; see the class documentation.\n", "  @Deprecated\n", "   * Determines whether a BMP character is upper case according to\n", "   * @deprecated Some uppercase characters are supplementary characters;\n", "   *     see the class documentation.\n", "  @Deprecated\n", "   * Determines whether a BMP character is lower case according to\n", "   * @deprecated Some lowercase characters are supplementary characters;\n", "   *     see the class documentation.\n", "  @Deprecated\n"], "4": ["   * <p>All ISO control codes are on the BMP and thus supported by this API.\n", "   *\n"], "5": ["   * <p>See also the Unicode Default_Ignorable_Code_Point property (available via ICU).\n", "   *\n", "   * @deprecated Most invisible characters are supplementary characters;\n", "   *     see the class documentation.\n", "  @Deprecated\n"], "6": ["   * <p>See also <a href=\"http://www.unicode.org/reports/tr11/\">UAX #11 East Asian Width</a>.\n", "   *\n", "   * @deprecated Many such characters are supplementary characters; see the class documentation.\n", "  @Deprecated\n"], "7": ["   * Returns a {@code char} matcher that matches only one specified BMP character.\n", "   * Returns a {@code char} matcher that matches any character except the BMP character specified.\n"], "8": ["   * Returns a {@code char} matcher that matches any BMP character present in the given character\n", "   * sequence. Returns a bogus matcher if the sequence contains supplementary characters.\n"], "9": ["   * Returns a {@code char} matcher that matches any BMP character not present in the given\n", "   * character sequence. Returns a bogus matcher if the sequence contains supplementary characters.\n", "   * Returns a {@code char} matcher that matches any character in a given BMP range (both endpoints\n", "   * are inclusive). For example, to match any lowercase letter of the English alphabet, use {@code\n"], "10": ["   * Returns {@code true} if a character sequence contains at least one matching BMP character.\n"], "11": ["   * Returns {@code true} if a character sequence contains only matching BMP characters.\n"], "12": ["   * Returns {@code true} if a character sequence contains no matching BMP characters. Equivalent to\n"], "13": ["   * Returns the index of the first matching BMP character in a character sequence,\n", "   * or {@code -1} if no matching character is present.\n"], "14": ["   * Returns the index of the first matching BMP character in a character sequence, starting from a\n"], "15": ["   * Returns the index of the last matching BMP character in a character sequence,\n", "   * or {@code -1} if no matching character is present.\n"], "16": ["   * Returns the number of matching {@code char}s found in a character sequence.\n", "   *\n", "   * <p>Counts 2 per supplementary character, such as for {@link #whitespace}().{@link #negate}().\n"], "17": ["   * Returns a string containing all matching BMP characters of a character sequence, in order. For\n"], "18": ["   * Returns a string copy of the input character sequence, with each matching BMP character\n", "   * replaced by a given replacement character. For example: <pre>   {@code\n"], "19": ["   * Returns a string copy of the input character sequence, with each matching BMP character\n", "   * replaced by a given replacement sequence. For example: <pre>   {@code\n"], "20": ["   * Returns a substring of the input character sequence that omits all matching BMP characters\n", "   * from the beginning and from the end of the string. For example: <pre>   {@code\n"], "21": ["   * Returns a substring of the input character sequence that omits all matching BMP characters\n", "   * from the beginning of the string. For example: <pre> {@code\n"], "22": ["   * Returns a substring of the input character sequence that omits all matching BMP characters\n", "   * from the end of the string. For example: <pre> {@code\n"], "23": ["   * matching BMP characters replaced by a single replacement character. For example:\n"], "24": ["   * groups of matching BMP characters at the start or end of the sequence are removed without\n"], "25": ["   * Returns the Java Unicode escape sequence for the given {@code char}, in the form \"\\u12AB\"\n", "   * where \"12AB\" is the four hexadecimal digits representing the 16-bit code unit.\n"]}, "removed": {"1": [" * <p><b>Warning:</b> This class deals only with {@code char} values; it does not understand\n", " * supplementary Unicode code points in the range {@code 0x10000} to {@code 0x10FFFF}. Such logical\n", " * characters are encoded into a {@code String} using surrogate pairs, and a {@code CharMatcher}\n", " * treats these just as two separate characters.\n"], "3": ["   * Determines whether a character is a digit according to\n", "   * Determines whether a character is a digit according to {@linkplain Character#isDigit(char)\n", "   * Determines whether a character is a letter according to {@linkplain Character#isLetter(char)\n", "   * Java's definition}. If you only care to match letters of the Latin alphabet, you can use {@code\n", "   * inRange('a', 'z').or(inRange('A', 'Z'))}.\n", "   * Determines whether a character is a letter or digit according to\n", "   * Determines whether a character is upper case according to\n", "   * Determines whether a character is lower case according to\n"], "7": ["   * Returns a {@code char} matcher that matches only one specified character.\n", "   * Returns a {@code char} matcher that matches any character except the one specified.\n"], "8": ["   * Returns a {@code char} matcher that matches any character present in the given character\n", "   * sequence.\n"], "9": ["   * Returns a {@code char} matcher that matches any character not present in the given character\n", "   * sequence.\n", "   * Returns a {@code char} matcher that matches any character in a given range (both endpoints are\n", "   * inclusive). For example, to match any lowercase letter of the English alphabet, use {@code\n"], "10": ["   * Returns {@code true} if a character sequence contains at least one matching character.\n"], "11": ["   * Returns {@code true} if a character sequence contains only matching characters.\n"], "12": ["   * Returns {@code true} if a character sequence contains no matching characters. Equivalent to\n"], "13": ["   * Returns the index of the first matching character in a character sequence, or {@code -1} if no\n", "   * matching character is present.\n"], "14": ["   * Returns the index of the first matching character in a character sequence, starting from a\n"], "15": ["   * Returns the index of the last matching character in a character sequence, or {@code -1} if no\n", "   * matching character is present.\n"], "16": ["   * Returns the number of matching characters found in a character sequence.\n"], "17": ["   * Returns a string containing all matching characters of a character sequence, in order. For\n"], "18": ["   * Returns a string copy of the input character sequence, with each character that matches this\n", "   * matcher replaced by a given replacement character. For example: <pre>   {@code\n"], "19": ["   * Returns a string copy of the input character sequence, with each character that matches this\n", "   * matcher replaced by a given replacement sequence. For example: <pre>   {@code\n"], "20": ["   * Returns a substring of the input character sequence that omits all characters this matcher\n", "   * matches from the beginning and from the end of the string. For example: <pre>   {@code\n"], "21": ["   * Returns a substring of the input character sequence that omits all characters this matcher\n", "   * matches from the beginning of the string. For example: <pre> {@code\n"], "22": ["   * Returns a substring of the input character sequence that omits all characters this matcher\n", "   * matches from the end of the string. For example: <pre> {@code\n"], "23": ["   * characters that match this matcher replaced by a single replacement character. For example:\n"], "24": ["   * groups of matching characters at the start or end of the sequence are removed without\n"], "25": ["   * Returns the Java Unicode escape sequence for the given character, in the form \"\\u12AB\" where\n", "   * \"12AB\" is the four hexadecimal digits representing the 16 bits of the UTF-16 character.\n"]}, "added_lines": {"1": [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], "2": [140, 141], "3": [172, 176, 179, 185, 189, 192, 198, 199, 200, 201, 203, 206, 212, 215, 218, 224, 227, 228, 231, 237, 240, 241, 244], "4": [253, 254], "5": [266, 267, 268, 269, 272], "6": [285, 286, 287, 290], "7": [471, 478], "8": [487, 488], "9": [506, 507, 514, 515], "10": [664], "11": [679], "12": [698], "13": [713, 714], "14": [727], "15": [753, 754], "16": [772, 773, 774], "17": [824], "18": [836, 837], "19": [869, 870], "20": [915, 916], "21": [948, 949], "22": [966, 967], "23": [985], "24": [1022], "25": [1087, 1088]}, "removed_lines": {"1": [35, 36, 37, 38], "3": [158, 169, 180, 181, 182, 191, 201, 211], "7": [431, 438], "8": [447, 448], "9": [466, 467, 474, 475], "10": [624], "11": [639], "12": [658], "13": [673, 674], "14": [687], "15": [713, 714], "16": [732], "17": [782], "18": [794, 795], "19": [827, 828], "20": [873, 874], "21": [906, 907], "22": [924, 925], "23": [943], "24": [980], "25": [1045, 1046]}}]}
