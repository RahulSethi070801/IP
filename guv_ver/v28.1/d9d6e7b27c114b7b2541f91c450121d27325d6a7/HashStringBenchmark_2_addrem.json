{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2017 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.hash;\n",
        "18": "\n",
        "19": "import com.google.caliper.BeforeExperiment;\n",
        "20": "import com.google.caliper.Benchmark;\n",
        "21": "import com.google.caliper.Param;\n",
        "22": "import java.nio.charset.StandardCharsets;\n",
        "23": "import java.util.Random;\n",
        "24": "\n",
        "25": "/**\n",
        "26": " * Benchmarks for the hashing of UTF-8 strings.\n",
        "27": " */\n",
        "28": "public class HashStringBenchmark {\n",
        "29": "  static class MaxCodePoint {\n",
        "30": "    final int value;\n",
        "31": "\n",
        "32": "    /**\n",
        "33": "     * Convert the input string to a code point. Accepts regular decimal numerals, hex strings, and\n",
        "34": "     * some symbolic names meaningful to humans.\n",
        "35": "     */\n",
        "36": "    private static int decode(String userFriendly) {\n",
        "37": "      try {\n",
        "38": "        return Integer.decode(userFriendly);\n",
        "39": "      } catch (NumberFormatException ignored) {\n",
        "40": "        if (userFriendly.matches(\"(?i)(?:American|English|ASCII)\")) {\n",
        "41": "          // 1-byte UTF-8 sequences - \"American\" ASCII text\n",
        "42": "          return 0x80;\n",
        "43": "        } else if (userFriendly.matches(\"(?i)(?:French|Latin|Western.*European)\")) {\n",
        "44": "          // Mostly 1-byte UTF-8 sequences, mixed with occasional 2-byte\n",
        "45": "          // sequences - \"Western European\" text\n",
        "46": "          return 0x90;\n",
        "47": "        } else if (userFriendly.matches(\"(?i)(?:Branch.*Prediction.*Hostile)\")) {\n",
        "48": "          // Defeat branch predictor for: c < 0x80 ; branch taken 50% of the time.\n",
        "49": "          return 0x100;\n",
        "50": "        } else if (userFriendly.matches(\"(?i)(?:Greek|Cyrillic|European|ISO.?8859)\")) {\n",
        "51": "          // Mostly 2-byte UTF-8 sequences - \"European\" text\n",
        "52": "          return 0x800;\n",
        "53": "        } else if (userFriendly.matches(\"(?i)(?:Chinese|Han|Asian|BMP)\")) {\n",
        "54": "          // Mostly 3-byte UTF-8 sequences - \"Asian\" text\n",
        "55": "          return Character.MIN_SUPPLEMENTARY_CODE_POINT;\n",
        "56": "        } else if (userFriendly.matches(\"(?i)(?:Cuneiform|rare|exotic|supplementary.*)\")) {\n",
        "57": "          // Mostly 4-byte UTF-8 sequences - \"rare exotic\" text\n",
        "58": "          return Character.MAX_CODE_POINT;\n",
        "59": "        } else {\n",
        "60": "          throw new IllegalArgumentException(\"Can't decode codepoint \" + userFriendly);\n",
        "61": "        }\n",
        "62": "      }\n",
        "63": "    }\n",
        "64": "\n",
        "65": "    public static MaxCodePoint valueOf(String userFriendly) {\n",
        "66": "      return new MaxCodePoint(userFriendly);\n",
        "67": "    }\n",
        "68": "\n",
        "69": "    public MaxCodePoint(String userFriendly) {\n",
        "70": "      value = decode(userFriendly);\n",
        "71": "    }\n",
        "72": "  }\n",
        "73": "\n",
        "74": "  /**\n",
        "75": "   * The default values of maxCodePoint below provide pretty good performance models of different\n",
        "76": "   * kinds of common human text.\n",
        "77": "   *\n",
        "78": "   * @see MaxCodePoint#decode\n",
        "79": "   */\n",
        "80": "  @Param({\"0x80\", \"0x90\", \"0x100\", \"0x800\", \"0x10000\", \"0x10ffff\"})\n",
        "81": "  MaxCodePoint maxCodePoint;\n",
        "82": "\n",
        "83": "  @Param({\"16384\"})\n",
        "84": "  int charCount;\n",
        "85": "\n",
        "86": "  @Param({\"MURMUR3_32\", \"MURMUR3_128\", \"SHA1\"})\n",
        "87": "  HashFunctionEnum hashFunctionEnum;\n",
        "88": "\n",
        "89": "  private String[] strings;\n",
        "90": "\n",
        "91": "  static final int SAMPLES = 0x100;\n",
        "92": "  static final int SAMPLE_MASK = 0xFF;\n",
        "93": "\n",
        "94": "  /**\n",
        "95": "   * Compute arrays of valid unicode text, and store it in 3 forms: byte arrays, Strings, and\n",
        "96": "   * StringBuilders (in a CharSequence[] to make it a little harder for the JVM).\n",
        "97": "   */\n",
        "98": "  @BeforeExperiment\n",
        "99": "  void setUp() {\n",
        "100": "    final long seed = 99;\n",
        "101": "    final Random rnd = new Random(seed);\n",
        "102": "    strings = new String[SAMPLES];\n",
        "103": "    for (int i = 0; i < SAMPLES; i++) {\n",
        "104": "      StringBuilder sb = new StringBuilder();\n",
        "105": "      for (int j = 0; j < charCount; j++) {\n",
        "106": "        int codePoint;\n",
        "107": "        // discard illegal surrogate \"codepoints\"\n",
        "108": "        do {\n",
        "109": "          codePoint = rnd.nextInt(maxCodePoint.value);\n",
        "110": "        } while (Character.isSurrogate((char) codePoint));\n",
        "111": "        sb.appendCodePoint(codePoint);\n",
        "112": "      }\n",
        "113": "      strings[i] = sb.toString();\n",
        "114": "    }\n",
        "115": "  }\n",
        "116": "\n",
        "117": "  @Benchmark\n",
        "118": "  int hashUtf8(int reps) {\n",
        "119": "    int res = 0;\n",
        "120": "    for (int i = 0; i < reps; i++) {\n",
        "121": "      res +=\n",
        "122": "          System.identityHashCode(\n",
        "123": "              hashFunctionEnum\n",
        "124": "                  .getHashFunction()\n",
        "125": "                  .hashString(strings[i & SAMPLE_MASK], StandardCharsets.UTF_8));\n",
        "126": "    }\n",
        "127": "    return res;\n",
        "128": "  }\n",
        "129": "\n",
        "130": "  @Benchmark\n",
        "131": "  int hashUtf8Hasher(int reps) {\n",
        "132": "    int res = 0;\n",
        "133": "    for (int i = 0; i < reps; i++) {\n",
        "134": "      res +=\n",
        "135": "          System.identityHashCode(\n",
        "136": "              hashFunctionEnum\n",
        "137": "                  .getHashFunction()\n",
        "138": "                  .newHasher()\n",
        "139": "                  .putString(strings[i & SAMPLE_MASK], StandardCharsets.UTF_8)\n",
        "140": "                  .hash());\n",
        "141": "    }\n",
        "142": "    return res;\n",
        "143": "  }\n",
        "144": "\n",
        "145": "  @Benchmark\n",
        "146": "  int hashUtf8GetBytes(int reps) {\n",
        "147": "    int res = 0;\n",
        "148": "    for (int i = 0; i < reps; i++) {\n",
        "149": "      res +=\n",
        "150": "          System.identityHashCode(\n",
        "151": "              hashFunctionEnum\n",
        "152": "                  .getHashFunction()\n",
        "153": "                  .hashBytes(strings[i & SAMPLE_MASK].getBytes(StandardCharsets.UTF_8)));\n",
        "154": "    }\n",
        "155": "    return res;\n",
        "156": "  }\n",
        "157": "\n",
        "158": "  @Benchmark\n",
        "159": "  int hashUtf8GetBytesHasher(int reps) {\n",
        "160": "    int res = 0;\n",
        "161": "    for (int i = 0; i < reps; i++) {\n",
        "162": "      res +=\n",
        "163": "          System.identityHashCode(\n",
        "164": "              hashFunctionEnum\n",
        "165": "                  .getHashFunction()\n",
        "166": "                  .newHasher()\n",
        "167": "                  .putBytes(strings[i & SAMPLE_MASK].getBytes(StandardCharsets.UTF_8))\n",
        "168": "                  .hash());\n",
        "169": "    }\n",
        "170": "    return res;\n",
        "171": "  }\n",
        "172": "}\n"
    },
    "removed": {}
}