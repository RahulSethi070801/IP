{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2012 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.Beta;\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import com.google.common.base.Optional;\n",
        "24": "import java.util.ArrayDeque;\n",
        "25": "import java.util.BitSet;\n",
        "26": "import java.util.Deque;\n",
        "27": "import java.util.Iterator;\n",
        "28": "import java.util.function.Consumer;\n",
        "29": "\n",
        "30": "/**\n",
        "31": " * A variant of {@link TreeTraverser} for binary trees, providing additional traversals specific to\n",
        "32": " * binary trees.\n",
        "33": " *\n",
        "34": " * @author Louis Wasserman\n",
        "35": " * @since 15.0\n",
        "36": " * @deprecated Use {@link com.google.common.graph.Traverser} instead. All instance methods except\n",
        "37": " *     for {@link #inOrderTraversal} have their equivalent on the result of {@code\n",
        "38": " *     Traverser.forTree(tree)} where {@code tree} implements {@code SuccessorsFunction}, which has\n",
        "39": " *     a similar API as {@link #children}.\n",
        "40": " *     <p>This class is scheduled to be removed in January 2018.\n",
        "41": " */\n",
        "42": "@Deprecated\n",
        "43": "@Beta\n",
        "44": "@GwtCompatible\n",
        "45": "public abstract class BinaryTreeTraverser<T> extends TreeTraverser<T> {\n",
        "46": "\n",
        "47": "  /**\n",
        "48": "   * Returns the left child of the specified node, or {@link Optional#absent()} if the specified\n",
        "49": "   * node has no left child.\n",
        "50": "   */\n",
        "51": "  public abstract Optional<T> leftChild(T root);\n",
        "52": "\n",
        "53": "  /**\n",
        "54": "   * Returns the right child of the specified node, or {@link Optional#absent()} if the specified\n",
        "55": "   * node has no right child.\n",
        "56": "   */\n",
        "57": "  public abstract Optional<T> rightChild(T root);\n",
        "58": "\n",
        "59": "  /** Returns the children of this node, in left-to-right order. */\n",
        "60": "  @Override\n",
        "61": "  public final Iterable<T> children(final T root) {\n",
        "62": "    checkNotNull(root);\n",
        "63": "    return new FluentIterable<T>() {\n",
        "64": "      @Override\n",
        "65": "      public Iterator<T> iterator() {\n",
        "66": "        return new AbstractIterator<T>() {\n",
        "67": "          boolean doneLeft;\n",
        "68": "          boolean doneRight;\n",
        "69": "\n",
        "70": "          @Override\n",
        "71": "          protected T computeNext() {\n",
        "72": "            if (!doneLeft) {\n",
        "73": "              doneLeft = true;\n",
        "74": "              Optional<T> left = leftChild(root);\n",
        "75": "              if (left.isPresent()) {\n",
        "76": "                return left.get();\n",
        "77": "              }\n",
        "78": "            }\n",
        "79": "            if (!doneRight) {\n",
        "80": "              doneRight = true;\n",
        "81": "              Optional<T> right = rightChild(root);\n",
        "82": "              if (right.isPresent()) {\n",
        "83": "                return right.get();\n",
        "84": "              }\n",
        "85": "            }\n",
        "86": "            return endOfData();\n",
        "87": "          }\n",
        "88": "        };\n",
        "89": "      }\n",
        "90": "\n",
        "91": "      @Override\n",
        "92": "      public void forEach(Consumer<? super T> action) {\n",
        "93": "        acceptIfPresent(action, leftChild(root));\n",
        "94": "        acceptIfPresent(action, rightChild(root));\n",
        "95": "      }\n",
        "96": "    };\n",
        "97": "  }\n",
        "98": "\n",
        "99": "  @Override\n",
        "100": "  UnmodifiableIterator<T> preOrderIterator(T root) {\n",
        "101": "    return new PreOrderIterator(root);\n",
        "102": "  }\n",
        "103": "\n",
        "104": "  /*\n",
        "105": "   * Optimized implementation of preOrderIterator for binary trees.\n",
        "106": "   */\n",
        "107": "  private final class PreOrderIterator extends UnmodifiableIterator<T>\n",
        "108": "      implements PeekingIterator<T> {\n",
        "109": "    private final Deque<T> stack;\n",
        "110": "\n",
        "111": "    PreOrderIterator(T root) {\n",
        "112": "      this.stack = new ArrayDeque<T>(8);\n",
        "113": "      stack.addLast(root);\n",
        "114": "    }\n",
        "115": "\n",
        "116": "    @Override\n",
        "117": "    public boolean hasNext() {\n",
        "118": "      return !stack.isEmpty();\n",
        "119": "    }\n",
        "120": "\n",
        "121": "    @Override\n",
        "122": "    public T next() {\n",
        "123": "      T result = stack.removeLast();\n",
        "124": "      pushIfPresent(stack, rightChild(result));\n",
        "125": "      pushIfPresent(stack, leftChild(result));\n",
        "126": "      return result;\n",
        "127": "    }\n",
        "128": "\n",
        "129": "    @Override\n",
        "130": "    public T peek() {\n",
        "131": "      return stack.getLast();\n",
        "132": "    }\n",
        "133": "  }\n",
        "134": "\n",
        "135": "  @Override\n",
        "136": "  UnmodifiableIterator<T> postOrderIterator(T root) {\n",
        "137": "    return new PostOrderIterator(root);\n",
        "138": "  }\n",
        "139": "\n",
        "140": "  /*\n",
        "141": "   * Optimized implementation of postOrderIterator for binary trees.\n",
        "142": "   */\n",
        "143": "  private final class PostOrderIterator extends UnmodifiableIterator<T> {\n",
        "144": "    private final Deque<T> stack;\n",
        "145": "    private final BitSet hasExpanded;\n",
        "146": "\n",
        "147": "    PostOrderIterator(T root) {\n",
        "148": "      this.stack = new ArrayDeque<T>(8);\n",
        "149": "      stack.addLast(root);\n",
        "150": "      this.hasExpanded = new BitSet();\n",
        "151": "    }\n",
        "152": "\n",
        "153": "    @Override\n",
        "154": "    public boolean hasNext() {\n",
        "155": "      return !stack.isEmpty();\n",
        "156": "    }\n",
        "157": "\n",
        "158": "    @Override\n",
        "159": "    public T next() {\n",
        "160": "      while (true) {\n",
        "161": "        T node = stack.getLast();\n",
        "162": "        boolean expandedNode = hasExpanded.get(stack.size() - 1);\n",
        "163": "        if (expandedNode) {\n",
        "164": "          stack.removeLast();\n",
        "165": "          hasExpanded.clear(stack.size());\n",
        "166": "          return node;\n",
        "167": "        } else {\n",
        "168": "          hasExpanded.set(stack.size() - 1);\n",
        "169": "          pushIfPresent(stack, rightChild(node));\n",
        "170": "          pushIfPresent(stack, leftChild(node));\n",
        "171": "        }\n",
        "172": "      }\n",
        "173": "    }\n",
        "174": "  }\n",
        "175": "\n",
        "176": "  // TODO(lowasser): see if any significant optimizations are possible for breadthFirstIterator\n",
        "177": "\n",
        "178": "  public final FluentIterable<T> inOrderTraversal(final T root) {\n",
        "179": "    checkNotNull(root);\n",
        "180": "    return new FluentIterable<T>() {\n",
        "181": "      @Override\n",
        "182": "      public UnmodifiableIterator<T> iterator() {\n",
        "183": "        return new InOrderIterator(root);\n",
        "184": "      }\n",
        "185": "\n",
        "186": "      @Override\n",
        "187": "      public void forEach(Consumer<? super T> action) {\n",
        "188": "        checkNotNull(action);\n",
        "189": "        new Consumer<T>() {\n",
        "190": "          @Override\n",
        "191": "          public void accept(T t) {\n",
        "192": "            acceptIfPresent(this, leftChild(t));\n",
        "193": "            action.accept(t);\n",
        "194": "            acceptIfPresent(this, rightChild(t));\n",
        "195": "          }\n",
        "196": "        }.accept(root);\n",
        "197": "      }\n",
        "198": "    };\n",
        "199": "  }\n",
        "200": "\n",
        "201": "  private final class InOrderIterator extends AbstractIterator<T> {\n",
        "202": "    private final Deque<T> stack;\n",
        "203": "    private final BitSet hasExpandedLeft;\n",
        "204": "\n",
        "205": "    InOrderIterator(T root) {\n",
        "206": "      this.stack = new ArrayDeque<T>(8);\n",
        "207": "      this.hasExpandedLeft = new BitSet();\n",
        "208": "      stack.addLast(root);\n",
        "209": "    }\n",
        "210": "\n",
        "211": "    @Override\n",
        "212": "    protected T computeNext() {\n",
        "213": "      while (!stack.isEmpty()) {\n",
        "214": "        T node = stack.getLast();\n",
        "215": "        if (hasExpandedLeft.get(stack.size() - 1)) {\n",
        "216": "          stack.removeLast();\n",
        "217": "          hasExpandedLeft.clear(stack.size());\n",
        "218": "          pushIfPresent(stack, rightChild(node));\n",
        "219": "          return node;\n",
        "220": "        } else {\n",
        "221": "          hasExpandedLeft.set(stack.size() - 1);\n",
        "222": "          pushIfPresent(stack, leftChild(node));\n",
        "223": "        }\n",
        "224": "      }\n",
        "225": "      return endOfData();\n",
        "226": "    }\n",
        "227": "  }\n",
        "228": "\n",
        "229": "  private static <T> void pushIfPresent(Deque<T> stack, Optional<T> node) {\n",
        "230": "    if (node.isPresent()) {\n",
        "231": "      stack.addLast(node.get());\n",
        "232": "    }\n",
        "233": "  }\n",
        "234": "\n",
        "235": "  private static <T> void acceptIfPresent(Consumer<? super T> action, Optional<T> node) {\n",
        "236": "    if (node.isPresent()) {\n",
        "237": "      action.accept(node.get());\n",
        "238": "    }\n",
        "239": "  }\n",
        "240": "}\n"
    }
}