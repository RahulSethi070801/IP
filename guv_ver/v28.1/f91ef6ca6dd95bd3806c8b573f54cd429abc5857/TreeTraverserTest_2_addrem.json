{
    "addition": {},
    "removed": {
        "22": "import com.google.common.base.Optional;\n",
        "27": "import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n",
        "53": "  private static final class BinaryTree extends Node {\n",
        "54": "    @NullableDecl final BinaryTree left;\n",
        "55": "    @NullableDecl final BinaryTree right;\n",
        "56": "\n",
        "57": "    private BinaryTree(char value, BinaryTree left, BinaryTree right) {\n",
        "58": "      super(value);\n",
        "59": "      this.left = left;\n",
        "60": "      this.right = right;\n",
        "61": "    }\n",
        "62": "  }\n",
        "63": "\n",
        "81": "  private static final BinaryTreeTraverser<BinaryTree> BIN_ADAPTER =\n",
        "82": "      new BinaryTreeTraverser<BinaryTree>() {\n",
        "83": "\n",
        "84": "        @Override\n",
        "85": "        public Optional<BinaryTree> leftChild(BinaryTree node) {\n",
        "86": "          return Optional.fromNullable(node.left);\n",
        "87": "        }\n",
        "88": "\n",
        "89": "        @Override\n",
        "90": "        public Optional<BinaryTree> rightChild(BinaryTree node) {\n",
        "91": "          return Optional.fromNullable(node.right);\n",
        "92": "        }\n",
        "93": "      };\n",
        "94": "\n",
        "111": "  //      d\n",
        "112": "  //     / \\\n",
        "113": "  //    b   e\n",
        "114": "  //   / \\   \\\n",
        "115": "  //  a   c   f\n",
        "116": "  //         /\n",
        "117": "  //        g\n",
        "118": "  static final BinaryTree ba = new BinaryTree('a', null, null);\n",
        "119": "  static final BinaryTree bc = new BinaryTree('c', null, null);\n",
        "120": "  static final BinaryTree bb = new BinaryTree('b', ba, bc);\n",
        "121": "  static final BinaryTree bg = new BinaryTree('g', null, null);\n",
        "122": "  static final BinaryTree bf = new BinaryTree('f', bg, null);\n",
        "123": "  static final BinaryTree be = new BinaryTree('e', null, bf);\n",
        "124": "  static final BinaryTree bd = new BinaryTree('d', bb, be);\n",
        "125": "\n",
        "141": "    assertThat(iterationOrder(BIN_ADAPTER.preOrderTraversal(bd))).isEqualTo(\"dbacefg\");\n",
        "146": "    assertThat(iterationOrder(BIN_ADAPTER.postOrderTraversal(bd))).isEqualTo(\"acbgfed\");\n",
        "151": "    assertThat(iterationOrder(BIN_ADAPTER.breadthFirstTraversal(bd))).isEqualTo(\"dbeacfg\");\n",
        "152": "  }\n",
        "153": "\n",
        "154": "  public void testInOrder() {\n",
        "155": "    assertThat(iterationOrder(BIN_ADAPTER.inOrderTraversal(bd))).isEqualTo(\"abcdegf\");\n",
        "166": "    tester.testAllPublicInstanceMethods(BIN_ADAPTER);\n"
    }
}