{
    "addition": {},
    "removed": {
        "407": "  /**\n",
        "408": "   * Returns an {@link Executor} that runs each task executed sequentially, such that no two tasks\n",
        "409": "   * are running concurrently. Submitted tasks have a happens-before order as defined in the Java\n",
        "410": "   * Language Specification.\n",
        "411": "   *\n",
        "412": "   * <p>The executor uses {@code delegate} in order to {@link Executor#execute execute} each task in\n",
        "413": "   * turn, and does not create any threads of its own.\n",
        "414": "   *\n",
        "415": "   * <p>After execution begins on a thread from the {@code delegate} {@link Executor}, tasks are\n",
        "416": "   * polled and executed from a task queue until there are no more tasks. The thread will not be\n",
        "417": "   * released until there are no more tasks to run.\n",
        "418": "   *\n",
        "419": "   * <p>If a task is submitted while a thread is executing tasks from the task queue, the thread\n",
        "420": "   * will not be released until that submitted task is also complete.\n",
        "421": "   *\n",
        "422": "   * <p>Tasks are always started with the Thread in an uninterrupted state.\n",
        "423": "   *\n",
        "424": "   * <p>If the thread is {@linkplain Thread#interrupt interrupted} while a task is running or before\n",
        "425": "   * the thread is taken by the Executor:\n",
        "426": "   *\n",
        "427": "   * <ol>\n",
        "428": "   *   <li>execution will not stop until the task queue is empty.\n",
        "429": "   *   <li>the interrupt will be restored to the thread after it completes so that its {@code\n",
        "430": "   *       delegate} Executor may process the interrupt.\n",
        "431": "   * </ol>\n",
        "432": "   *\n",
        "433": "   * <p>{@code RuntimeException}s thrown by tasks are simply logged and the executor keeps trucking.\n",
        "434": "   * If an {@code Error} is thrown, the error will propagate and execution will stop until the next\n",
        "435": "   * time a task is submitted.\n",
        "436": "   *\n",
        "437": "   * <p>When an {@code Error} is thrown by an executed task, previously submitted tasks may never\n",
        "438": "   * run. An attempt will be made to restart execution on the next call to {@code execute}. If the\n",
        "439": "   * {@code delegate} has begun to reject execution, the previously submitted tasks may never run,\n",
        "440": "   * despite not throwing a RejectedExecutionException synchronously with the call to {@code\n",
        "441": "   * execute}. If this behaviour is problematic, use an Executor with a single thread (e.g. {@link\n",
        "442": "   * Executors#newSingleThreadExecutor}).\n",
        "443": "   *\n",
        "444": "   * @deprecated Use {@link #newSequentialExecutor}. This method is scheduled for removal in January\n",
        "445": "   *     2018.\n",
        "446": "   * @since 23.1\n",
        "447": "   */\n",
        "448": "  @Beta\n",
        "449": "  @Deprecated\n",
        "450": "  @GwtIncompatible\n",
        "451": "  public static Executor sequentialExecutor(Executor delegate) {\n",
        "452": "    return new SequentialExecutor(delegate);\n",
        "453": "  }\n",
        "454": "\n"
    }
}