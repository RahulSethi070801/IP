[{"func":{"oldfunccode":"","newfunccode":"d7f2dddae1f04e5040faca34819cb5d1c700d48f/Codes_neg/Match_newfunccode_d7f2dddae1f04e5040faca34819cb5d1c700d48f_1.txt","newdoc":"\n     * Each insertion is expected to reduce the # of clear bits by a factor of\n     * `numHashFunctions/bitSize`. So, after n insertions, expected bitCount is `bitSize * (1 - (1 -\n     * numHashFunctions/bitSize)^n)`. Solving that for n, and approximating `ln x` as `x - 1` when x\n     * is close to 1 (why?), gives the following formula.\n     \n","newJdoc":"d7f2dddae1f04e5040faca34819cb5d1c700d48f/Codes_neg/Match_newfuncnewJdoc_d7f2dddae1f04e5040faca34819cb5d1c700d48f_1.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/d7f2dddae1f04e5040faca34819cb5d1c700d48f/BloomFilter","pathinproj":"guava/src/com/google/common/hash/BloomFilter.java","addlines":[192,193,200,201,202,203,190,191],"dellines":[],"addcode":["  public long approximateCount() {\n","    long bitSize = bits.bitSize();\n","    long bitCount = bits.bitCount();\n","\n","    double fractionOfBitsSet = (double) bitCount / bitSize;\n","    return DoubleMath.roundToLong(\n","        -Math.log1p(-fractionOfBitsSet) * bitSize / numHashFunctions, RoundingMode.HALF_UP);\n","  }\n"],"delcode":[],"methodSig":"public long approximateCount()"},"doc":{"oldfunccode":"d7f2dddae1f04e5040faca34819cb5d1c700d48f/Codes_neg/Match_olddocfunccode_d7f2dddae1f04e5040faca34819cb5d1c700d48f_1.txt","newfunccode":"d7f2dddae1f04e5040faca34819cb5d1c700d48f/Codes_neg/Match_newdocfunccode_d7f2dddae1f04e5040faca34819cb5d1c700d48f_1.txt","newdoc":"","newJdoc":"d7f2dddae1f04e5040faca34819cb5d1c700d48f/Codes_neg/Match_newdocnewJdoc_d7f2dddae1f04e5040faca34819cb5d1c700d48f_1.txt","olddoc":"","oldJdoc":"d7f2dddae1f04e5040faca34819cb5d1c700d48f/Codes_neg/Match_olddocJdoc_d7f2dddae1f04e5040faca34819cb5d1c700d48f_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/d7f2dddae1f04e5040faca34819cb5d1c700d48f/BloomFilter","pathinproj":"guava/src/com/google/common/hash/BloomFilter.java","addlines":[224,225,214,218,219,220,221,222,223],"dellines":[194,195,196,197,198,199,200,201,190],"addcode":["   * Determines whether a given Bloom filter is compatible with this Bloom filter. For two Bloom\n","   *   <li>not be the same instance\n","   *   <li>have the same number of hash functions\n","   *   <li>have the same bit size\n","   *   <li>have the same strategy\n","   *   <li>have equal funnels\n","   *       <ul>\n","   *\n","   * @param that The Bloom filter to check for compatibility.\n"],"delcode":["   * Determines whether a given bloom filter is compatible with this bloom filter. For two bloom\n","   * <li>not be the same instance\n","   * <li>have the same number of hash functions\n","   * <li>have the same bit size\n","   * <li>have the same strategy\n","   * <li>have equal funnels\n","   * <ul>\n","   *\n","   * @param that The bloom filter to check for compatibility.\n"],"methodSig":"public boolean isCompatible(BloomFilter<T> that)"},"id":1,"flag":1,"commit":"d7f2dddae1f04e5040faca34819cb5d1c700d48f"}]