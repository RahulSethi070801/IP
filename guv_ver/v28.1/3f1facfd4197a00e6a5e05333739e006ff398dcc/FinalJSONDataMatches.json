[{"func":{"oldfunccode":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_oldfunccode_3f1facfd4197a00e6a5e05333739e006ff398dcc_1.txt","newfunccode":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_newfunccode_3f1facfd4197a00e6a5e05333739e006ff398dcc_1.txt","newdoc":"","newJdoc":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_newfuncnewJdoc_3f1facfd4197a00e6a5e05333739e006ff398dcc_1.txt","olddoc":"","oldJdoc":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_oldfuncoldJdoc_3f1facfd4197a00e6a5e05333739e006ff398dcc_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/3f1facfd4197a00e6a5e05333739e006ff398dcc/Preconditions","pathinproj":"guava/src/com/google/common/base/Preconditions.java","addlines":[529],"dellines":[529],"addcode":["      @Nullable Object @Nullable ... errorMessageArgs) {\n"],"delcode":["      @Nullable Object @Nullable... errorMessageArgs) {\n"],"methodSig":"public static void checkState(boolean expression, @Nullable String errorMessageTemplate, @Nullable Object@Nullable ... errorMessageArgs)"},"doc":{"oldfunccode":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_olddocfunccode_3f1facfd4197a00e6a5e05333739e006ff398dcc_1.txt","newfunccode":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_newdocfunccode_3f1facfd4197a00e6a5e05333739e006ff398dcc_1.txt","newdoc":"","newJdoc":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_newdocnewJdoc_3f1facfd4197a00e6a5e05333739e006ff398dcc_1.txt","olddoc":"","oldJdoc":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_olddocJdoc_3f1facfd4197a00e6a5e05333739e006ff398dcc_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/3f1facfd4197a00e6a5e05333739e006ff398dcc/TypeToken","pathinproj":"android/guava/src/com/google/common/reflect/TypeToken.java","addlines":[993,994,995,996,997,998,999,1000,1001,1002,1003,1004,991],"dellines":[992,993,994,995,996,997,998,999,1000,1001,1002,1003],"addcode":["   *\n","   *   <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For\n","   *       example both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to {@code\n","   *       Enum<? extends Enum<E>}.\n","   *   <li>{@code canonicalize(t)} produces a \"literal\" supertype of t. For example: {@code Enum<?\n","   *       extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is a supertype (if we disregard\n","   *       the upper bound is implicitly an Enum too).\n","   *   <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)}\n","   *       and vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}.\n","   *   <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}.\n","   *\n","   *   <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For\n","   *       example both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to {@code\n","   *       Enum<? extends Enum<E>}.\n","   *   <li>{@code canonicalize(t)} produces a \"literal\" supertype of t. For example: {@code Enum<?\n","   *       extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is a supertype (if we disregard\n","   *       the upper bound is implicitly an Enum too).\n","   *   <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)}\n","   *       and vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}.\n","   *   <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}.\n"],"delcode":["   * <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For example\n","   *     both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to\n","   *     {@code Enum<? extends Enum<E>}.\n","   * <li>{@code canonicalize(t)} produces a \"literal\" supertype of t.\n","   *     For example: {@code Enum<? extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is\n","   *     a supertype (if we disregard the upper bound is implicitly an Enum too).\n","   * <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)} and\n","   *     vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}.\n","   * <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}.\n","   * <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For example\n","   *     both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to\n","   *     {@code Enum<? extends Enum<E>}.\n","   * <li>{@code canonicalize(t)} produces a \"literal\" supertype of t.\n","   *     For example: {@code Enum<? extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is\n","   *     a supertype (if we disregard the upper bound is implicitly an Enum too).\n","   * <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)} and\n","   *     vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}.\n","   * <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}.\n"],"methodSig":"private static Type canonicalizeTypeArg(TypeVariable<?> declaration, Type typeArg)"},"id":5,"flag":1,"commit":"3f1facfd4197a00e6a5e05333739e006ff398dcc"},{"func":{"oldfunccode":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_oldfunccode_3f1facfd4197a00e6a5e05333739e006ff398dcc_2.txt","newfunccode":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_newfunccode_3f1facfd4197a00e6a5e05333739e006ff398dcc_2.txt","newdoc":"","newJdoc":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_newfuncnewJdoc_3f1facfd4197a00e6a5e05333739e006ff398dcc_2.txt","olddoc":"","oldJdoc":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_oldfuncoldJdoc_3f1facfd4197a00e6a5e05333739e006ff398dcc_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/3f1facfd4197a00e6a5e05333739e006ff398dcc/Preconditions","pathinproj":"guava/src/com/google/common/base/Preconditions.java","addlines":[917],"dellines":[917],"addcode":["      T reference, @Nullable String errorMessageTemplate, Object @Nullable ... errorMessageArgs) {\n"],"delcode":["      T reference, @Nullable String errorMessageTemplate, Object @Nullable... errorMessageArgs) {\n"],"methodSig":"public static T checkNotNull(T reference, @Nullable String errorMessageTemplate, Object@Nullable ... errorMessageArgs)"},"doc":{"oldfunccode":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_olddocfunccode_3f1facfd4197a00e6a5e05333739e006ff398dcc_2.txt","newfunccode":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_newdocfunccode_3f1facfd4197a00e6a5e05333739e006ff398dcc_2.txt","newdoc":"","newJdoc":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_newdocnewJdoc_3f1facfd4197a00e6a5e05333739e006ff398dcc_2.txt","olddoc":"","oldJdoc":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_olddocJdoc_3f1facfd4197a00e6a5e05333739e006ff398dcc_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/3f1facfd4197a00e6a5e05333739e006ff398dcc/TypeToken","pathinproj":"android/guava/src/com/google/common/reflect/TypeToken.java","addlines":[993,994,995,996,997,998,999,1000,1001,1002,1003,1004,991],"dellines":[992,993,994,995,996,997,998,999,1000,1001,1002,1003],"addcode":["   *\n","   *   <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For\n","   *       example both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to {@code\n","   *       Enum<? extends Enum<E>}.\n","   *   <li>{@code canonicalize(t)} produces a \"literal\" supertype of t. For example: {@code Enum<?\n","   *       extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is a supertype (if we disregard\n","   *       the upper bound is implicitly an Enum too).\n","   *   <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)}\n","   *       and vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}.\n","   *   <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}.\n","   *\n","   *   <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For\n","   *       example both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to {@code\n","   *       Enum<? extends Enum<E>}.\n","   *   <li>{@code canonicalize(t)} produces a \"literal\" supertype of t. For example: {@code Enum<?\n","   *       extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is a supertype (if we disregard\n","   *       the upper bound is implicitly an Enum too).\n","   *   <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)}\n","   *       and vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}.\n","   *   <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}.\n"],"delcode":["   * <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For example\n","   *     both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to\n","   *     {@code Enum<? extends Enum<E>}.\n","   * <li>{@code canonicalize(t)} produces a \"literal\" supertype of t.\n","   *     For example: {@code Enum<? extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is\n","   *     a supertype (if we disregard the upper bound is implicitly an Enum too).\n","   * <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)} and\n","   *     vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}.\n","   * <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}.\n","   * <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For example\n","   *     both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to\n","   *     {@code Enum<? extends Enum<E>}.\n","   * <li>{@code canonicalize(t)} produces a \"literal\" supertype of t.\n","   *     For example: {@code Enum<? extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is\n","   *     a supertype (if we disregard the upper bound is implicitly an Enum too).\n","   * <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)} and\n","   *     vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}.\n","   * <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}.\n"],"methodSig":"private static Type canonicalizeTypeArg(TypeVariable<?> declaration, Type typeArg)"},"id":5,"flag":1,"commit":"3f1facfd4197a00e6a5e05333739e006ff398dcc"},{"func":{"oldfunccode":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_oldfunccode_3f1facfd4197a00e6a5e05333739e006ff398dcc_3.txt","newfunccode":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_newfunccode_3f1facfd4197a00e6a5e05333739e006ff398dcc_3.txt","newdoc":" null -> \"null\"\n start substituting the arguments into the '%s' placeholders\n if we run out of placeholders, append the extra args in square braces\n","newJdoc":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_newfuncnewJdoc_3f1facfd4197a00e6a5e05333739e006ff398dcc_3.txt","olddoc":" null -> \"null\"\n start substituting the arguments into the '%s' placeholders\n if we run out of placeholders, append the extra args in square braces\n","oldJdoc":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_oldfuncoldJdoc_3f1facfd4197a00e6a5e05333739e006ff398dcc_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/3f1facfd4197a00e6a5e05333739e006ff398dcc/Strings","pathinproj":"guava/src/com/google/common/base/Strings.java","addlines":[260],"dellines":[260],"addcode":["      @Nullable String template, @Nullable Object @Nullable ... args) {\n"],"delcode":["      @Nullable String template, @Nullable Object @Nullable... args) {\n"],"methodSig":"public static String lenientFormat(@Nullable String template, @Nullable Object@Nullable ... args)"},"doc":{"oldfunccode":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_olddocfunccode_3f1facfd4197a00e6a5e05333739e006ff398dcc_3.txt","newfunccode":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_newdocfunccode_3f1facfd4197a00e6a5e05333739e006ff398dcc_3.txt","newdoc":"","newJdoc":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_newdocnewJdoc_3f1facfd4197a00e6a5e05333739e006ff398dcc_3.txt","olddoc":"","oldJdoc":"3f1facfd4197a00e6a5e05333739e006ff398dcc/Codes/Match_olddocJdoc_3f1facfd4197a00e6a5e05333739e006ff398dcc_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/3f1facfd4197a00e6a5e05333739e006ff398dcc/TypeToken","pathinproj":"android/guava/src/com/google/common/reflect/TypeToken.java","addlines":[993,994,995,996,997,998,999,1000,1001,1002,1003,1004,991],"dellines":[992,993,994,995,996,997,998,999,1000,1001,1002,1003],"addcode":["   *\n","   *   <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For\n","   *       example both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to {@code\n","   *       Enum<? extends Enum<E>}.\n","   *   <li>{@code canonicalize(t)} produces a \"literal\" supertype of t. For example: {@code Enum<?\n","   *       extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is a supertype (if we disregard\n","   *       the upper bound is implicitly an Enum too).\n","   *   <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)}\n","   *       and vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}.\n","   *   <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}.\n","   *\n","   *   <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For\n","   *       example both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to {@code\n","   *       Enum<? extends Enum<E>}.\n","   *   <li>{@code canonicalize(t)} produces a \"literal\" supertype of t. For example: {@code Enum<?\n","   *       extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is a supertype (if we disregard\n","   *       the upper bound is implicitly an Enum too).\n","   *   <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)}\n","   *       and vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}.\n","   *   <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}.\n"],"delcode":["   * <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For example\n","   *     both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to\n","   *     {@code Enum<? extends Enum<E>}.\n","   * <li>{@code canonicalize(t)} produces a \"literal\" supertype of t.\n","   *     For example: {@code Enum<? extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is\n","   *     a supertype (if we disregard the upper bound is implicitly an Enum too).\n","   * <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)} and\n","   *     vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}.\n","   * <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}.\n","   * <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For example\n","   *     both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to\n","   *     {@code Enum<? extends Enum<E>}.\n","   * <li>{@code canonicalize(t)} produces a \"literal\" supertype of t.\n","   *     For example: {@code Enum<? extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is\n","   *     a supertype (if we disregard the upper bound is implicitly an Enum too).\n","   * <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)} and\n","   *     vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}.\n","   * <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}.\n"],"methodSig":"private static Type canonicalizeTypeArg(TypeVariable<?> declaration, Type typeArg)"},"id":5,"flag":1,"commit":"3f1facfd4197a00e6a5e05333739e006ff398dcc"}]