{"id": "3f1facfd4197a00e6a5e05333739e006ff398dcc", "code": [{"0": "android/guava-testlib/src/com/google/common/collect/testing/google/AbstractMultisetSetCountTester.java", "added": {"1": ["      value = {SUPPORTS_ADD, ALLOWS_NULL_VALUES},\n", "      absent = RESTRICTS_ELEMENTS)\n"]}, "removed": {"1": ["    value = {SUPPORTS_ADD, ALLOWS_NULL_VALUES},\n", "    absent = RESTRICTS_ELEMENTS\n", "  )\n"]}, "added_lines": {"1": [318, 319]}, "removed_lines": {"1": [318, 319, 320]}}, {"1": "android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionAddAllTester.java", "added": {"1": ["      value = {SUPPORTS_ADD, ALLOWS_NULL_VALUES},\n", "      absent = RESTRICTS_ELEMENTS)\n"]}, "removed": {"1": ["    value = {SUPPORTS_ADD, ALLOWS_NULL_VALUES},\n", "    absent = RESTRICTS_ELEMENTS\n", "  )\n"]}, "added_lines": {"1": [131, 132]}, "removed_lines": {"1": [131, 132, 133]}}, {"2": "android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionAddTester.java", "added": {"1": ["      value = {SUPPORTS_ADD, ALLOWS_NULL_VALUES},\n", "      absent = RESTRICTS_ELEMENTS)\n"]}, "removed": {"1": ["    value = {SUPPORTS_ADD, ALLOWS_NULL_VALUES},\n", "    absent = RESTRICTS_ELEMENTS\n", "  )\n"]}, "added_lines": {"1": [75, 76]}, "removed_lines": {"1": [75, 76, 77]}}, {"3": "android/guava/src/com/google/common/base/Splitter.java", "added": {"1": ["   *\n"]}, "removed": {}, "added_lines": {"1": [455]}, "removed_lines": {}}, {"4": "android/guava/src/com/google/common/collect/BaseImmutableMultimap.java", "added": {"1": [" * A dummy superclass of {@link ImmutableMultimap} that can be instanceof'd without ProGuard\n", " * retaining additional implementation details of {@link ImmutableMultimap}.\n"]}, "removed": {"1": [" * A dummy superclass of {@link ImmutableMultimap} that can be instanceof'd without ProGuard retaining\n", " * additional implementation details of {@link ImmutableMultimap}.\n"]}, "added_lines": {"1": [21, 22]}, "removed_lines": {"1": [21, 22]}}, {"5": "android/guava/src/com/google/common/collect/CompactHashMap.java", "added": {"1": [" * moderately increased constant factors of CPU. Only use this class when there is a specific reason\n", " * to prioritize memory over CPU.\n"]}, "removed": {"1": [" * moderately increased constant factors of CPU.  Only use this class when there is a specific\n", " * reason to prioritize memory over CPU.\n"]}, "added_lines": {"1": [64, 65]}, "removed_lines": {"1": [64, 65]}}, {"6": "android/guava/src/com/google/common/collect/CompactHashSet.java", "added": {"1": [" * moderately increased constant factors of CPU. Only use this class when there is a specific reason\n", " * to prioritize memory over CPU.\n"]}, "removed": {"1": [" * moderately increased constant factors of CPU.  Only use this class when there is a specific\n", " * reason to prioritize memory over CPU.\n"]}, "added_lines": {"1": [61, 62]}, "removed_lines": {"1": [61, 62]}}, {"7": "android/guava/src/com/google/common/collect/CompactLinkedHashMap.java", "added": {"1": ["  /** Creates an empty {@code CompactLinkedHashMap} instance. */\n", "   * Creates a {@code CompactLinkedHashMap} instance, with a high enough \"initial capacity\" that it\n", "   * <i>should</i> hold {@code expectedSize} elements without growth.\n", "   *     expectedSize} elements without resizing\n"], "2": ["  /** Pointer to the last node in the linked list, or {@code ENDPOINT} if there are no entries. */\n"]}, "removed": {"1": ["  /**\n", "   * Creates an empty {@code CompactLinkedHashMap} instance.\n", "   */\n", "   * Creates a {@code CompactLinkedHashMap} instance, with a high enough \"initial capacity\"\n", "   * that it <i>should</i> hold {@code expectedSize} elements without growth.\n", "   *         expectedSize} elements without resizing\n"], "2": ["  /**\n", "   * Pointer to the last node in the linked list, or {@code ENDPOINT} if there are no entries.\n", "   */\n"]}, "added_lines": {"1": [47, 53, 54, 58], "2": [81]}, "removed_lines": {"1": [47, 48, 49, 55, 56, 60], "2": [83, 84, 85]}}, {"8": "android/guava/src/com/google/common/collect/CompactLinkedHashSet.java", "added": {"1": ["  /** Creates an empty {@code CompactLinkedHashSet} instance. */\n", "   * Creates a <i>mutable</i> {@code CompactLinkedHashSet} instance containing the elements of the\n", "   * given collection in the order returned by the collection's iterator.\n"], "2": ["   * Creates a {@code CompactLinkedHashSet} instance containing the given elements in unspecified\n", "   * order.\n"], "3": ["   * Creates a {@code CompactLinkedHashSet} instance, with a high enough \"initial capacity\" that it\n", "   * <i>should</i> hold {@code expectedSize} elements without rebuilding internal data structures.\n", "   *     expectedSize} elements without resizing\n"]}, "removed": {"1": ["  /**\n", "   * Creates an empty {@code CompactLinkedHashSet} instance.\n", "   */\n", "   * Creates a <i>mutable</i> {@code CompactLinkedHashSet} instance containing the elements\n", "   * of the given collection in the order returned by the collection's iterator.\n"], "2": ["   * Creates a {@code CompactLinkedHashSet} instance containing the given elements in\n", "   * unspecified order.\n"], "3": ["   * Creates a {@code CompactLinkedHashSet} instance, with a high enough \"initial capacity\"\n", "   * that it <i>should</i> hold {@code expectedSize} elements without rebuilding internal\n", "   * data structures.\n", "   *         expectedSize} elements without resizing\n"]}, "added_lines": {"1": [49, 55, 56], "2": [68, 69], "3": [81, 82, 86]}, "removed_lines": {"1": [49, 50, 51, 57, 58], "2": [70, 71], "3": [83, 84, 85, 89]}}, {"9": "android/guava/src/com/google/common/collect/HashMultiset.java", "added": {}, "removed": {"1": ["import static com.google.common.base.Preconditions.checkArgument;\n", "import static com.google.common.collect.CollectPreconditions.checkNonnegative;\n", "\n", "import com.google.common.primitives.Ints;\n", "import com.google.errorprone.annotations.CanIgnoreReturnValue;\n", "import java.io.IOException;\n", "import java.io.ObjectInputStream;\n", "import java.io.ObjectOutputStream;\n", "import java.io.Serializable;\n", "import java.util.ConcurrentModificationException;\n", "import java.util.Iterator;\n", "import java.util.NoSuchElementException;\n", "import org.checkerframework.checker.nullness.compatqual.NullableDecl;\n"]}, "added_lines": {}, "removed_lines": {"1": [19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]}}, {"10": "android/guava/src/com/google/common/collect/ImmutableList.java", "added": {"1": ["        others.length <= Integer.MAX_VALUE - 12, \"the total number of elements must fit in an int\");\n"]}, "removed": {"1": ["        others.length <= Integer.MAX_VALUE - 12,\n", "        \"the total number of elements must fit in an int\");\n"]}, "added_lines": {"1": [188]}, "removed_lines": {"1": [188, 189]}}, {"11": "android/guava/src/com/google/common/collect/ImmutableSet.java", "added": {"1": ["        others.length <= Integer.MAX_VALUE - 6, \"the total number of elements must fit in an int\");\n"]}, "removed": {"1": ["        others.length <= Integer.MAX_VALUE - 6,\n", "        \"the total number of elements must fit in an int\");\n"]}, "added_lines": {"1": [115]}, "removed_lines": {"1": [115, 116]}}, {"12": "android/guava/src/com/google/common/collect/MultimapBuilder.java", "added": {"1": ["   * Uses a hash table to map keys to value collections, initialized to expect the specified number\n", "   * of keys.\n"], "2": ["   * Uses an hash table to map keys to value collections, initialized to expect the specified number\n", "   * of keys.\n"], "3": ["     * Uses a hash-based {@code Set} to store value collections, initialized to expect the specified\n", "     * number of values per key.\n"], "4": ["     * Uses an insertion-ordered hash-based {@code Set} to store value collections, initialized to\n", "     * expect the specified number of values per key.\n"]}, "removed": {"1": ["   * Uses a hash table to map keys to value collections, initialized to expect the specified\n", "   * number of keys.\n"], "2": ["   * Uses an hash table to map keys to value collections, initialized to expect the\n", "   * specified number of keys.\n"], "3": ["     * Uses a hash-based {@code Set} to store value collections, initialized to expect the specified number\n", "     * of values per key.\n"], "4": ["     * Uses an insertion-ordered hash-based {@code Set} to store value collections, initialized to expect the specified\n", "     * number of values per key.\n"]}, "added_lines": {"1": [82, 83], "2": [110, 111], "3": [322, 323], "4": [345, 346]}, "removed_lines": {"1": [82, 83], "2": [110, 111], "3": [322, 323], "4": [345, 346]}}, {"13": "android/guava/src/com/google/common/graph/AbstractNetwork.java", "added": {"1": ["   * Throws an IllegalArgumentException if the ordering of {@code endpoints} is not compatible with\n", "   * the directionality of this graph.\n"]}, "removed": {"1": ["   * Throws an IllegalArgumentException if the ordering of {@code endpoints} is not compatible\n", "   * with the directionality of this graph.\n"]}, "added_lines": {"1": [225, 226]}, "removed_lines": {"1": [225, 226]}}, {"14": "android/guava/src/com/google/common/graph/MutableValueGraph.java", "added": {"1": ["   * Adds an edge connecting {@code nodeU} to {@code nodeV} if one is not already present, and sets\n", "   * a value for that edge to {@code value} (overwriting the existing value, if any).\n"]}, "removed": {"1": ["   * Adds an edge connecting {@code nodeU} to {@code nodeV} if one is not already present, and\n", "   * sets a value for that edge to {@code value} (overwriting the existing value, if any).\n"]}, "added_lines": {"1": [45, 46]}, "removed_lines": {"1": [45, 46]}}, {"15": "android/guava/src/com/google/common/graph/Traverser.java", "added": {"1": [" *   <li>Is there only one path to any node that's reachable from any start node? (If so, the graph\n", " *       to be traversed is a tree or forest even if it is a subgraph of a graph which is neither.)\n"]}, "removed": {"1": [" *   <li>Is there only one path to any node that's reachable from any start node? (If so, the\n", " *       graph to be traversed is a tree or forest even if it is a subgraph of a graph which is\n", " *       neither.)\n"]}, "added_lines": {"1": [44, 45]}, "removed_lines": {"1": [44, 45, 46]}}, {"16": "android/guava/src/com/google/common/io/ByteStreams.java", "added": {"1": ["        totalLen < MAX_ARRAY_LEN;\n", "        bufSize = IntMath.saturatedMultiply(bufSize, 2)) {\n"], "2": ["    bufs.add(new byte[] {(byte) b});\n"]}, "removed": {"1": ["         totalLen < MAX_ARRAY_LEN;\n", "         bufSize = IntMath.saturatedMultiply(bufSize, 2)) {\n"], "2": ["    bufs.add(new byte[] { (byte) b });\n"]}, "added_lines": {"1": [174, 175], "2": [258]}, "removed_lines": {"1": [174, 175], "2": [258]}}, {"17": "android/guava/src/com/google/common/math/PairedStats.java", "added": {"1": ["        && doubleToLongBits(sumOfProductsOfDeltas) == doubleToLongBits(other.sumOfProductsOfDeltas);\n"]}, "removed": {"1": ["        && doubleToLongBits(sumOfProductsOfDeltas)\n", "            == doubleToLongBits(other.sumOfProductsOfDeltas);\n"]}, "added_lines": {"1": [226]}, "removed_lines": {"1": [226, 227]}}, {"18": "android/guava/src/com/google/common/net/HttpHeaders.java", "added": {"1": ["  @Beta public static final String X_DOWNLOAD_OPTIONS = \"X-Download-Options\";\n"]}, "removed": {"1": ["  @Beta\n", "  public static final String X_DOWNLOAD_OPTIONS = \"X-Download-Options\";\n"]}, "added_lines": {"1": [377]}, "removed_lines": {"1": [377, 378]}}, {"19": "android/guava/src/com/google/common/net/InetAddresses.java", "added": {"1": ["      if (Iterables.getLast(parts).length() == 0 && --partsLo != 0) {\n"]}, "removed": {"1": ["       if (Iterables.getLast(parts).length() == 0 && --partsLo != 0) {\n"]}, "added_lines": {"1": [238]}, "removed_lines": {"1": [238]}}, {"20": "android/guava/src/com/google/common/primitives/ImmutableDoubleArray.java", "added": {"1": ["        rest.length <= Integer.MAX_VALUE - 1, \"the total number of elements must fit in an int\");\n"]}, "removed": {"1": ["        rest.length <= Integer.MAX_VALUE - 1,\n", "        \"the total number of elements must fit in an int\");\n"]}, "added_lines": {"1": [133]}, "removed_lines": {"1": [133, 134]}}, {"21": "android/guava/src/com/google/common/primitives/ImmutableIntArray.java", "added": {"1": ["        rest.length <= Integer.MAX_VALUE - 1, \"the total number of elements must fit in an int\");\n"]}, "removed": {"1": ["        rest.length <= Integer.MAX_VALUE - 1,\n", "        \"the total number of elements must fit in an int\");\n"]}, "added_lines": {"1": [132]}, "removed_lines": {"1": [132, 133]}}, {"22": "android/guava/src/com/google/common/primitives/ImmutableLongArray.java", "added": {"1": ["        rest.length <= Integer.MAX_VALUE - 1, \"the total number of elements must fit in an int\");\n"]}, "removed": {"1": ["        rest.length <= Integer.MAX_VALUE - 1,\n", "        \"the total number of elements must fit in an int\");\n"]}, "added_lines": {"1": [132]}, "removed_lines": {"1": [132, 133]}}, {"23": "android/guava/src/com/google/common/reflect/TypeResolver.java", "added": {"1": ["   * <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>}, {@code\n", "   * <T>} is covariantly resolved to {@code <?>} such that return type of {@code List::get} is\n", "   * {@code <?>}.\n"], "2": ["   * <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>}, {@code\n", "   * <T>} cannot be invariantly resolved to {@code <?>} because otherwise the parameter type of\n", "   * {@code List::set} will be {@code <?>} and it'll falsely say any object can be passed into\n", "   * <p>Instead, {@code <?>} will be resolved to a capture in the form of a type variable {@code\n", "   * <capture-of-? extends Object>}, effectively preventing {@code set} from accepting any type.\n"]}, "removed": {"1": ["   * <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>},\n", "   * {@code <T>} is covariantly resolved to {@code <?>} such that return type of {@code List::get}\n", "   * is {@code <?>}.\n"], "2": ["   * <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>},\n", "   * {@code <T>} cannot be invariantly resolved to {@code <?>} because otherwise the parameter type\n", "   * of {@code List::set} will be {@code <?>} and it'll falsely say any object can be passed into\n", "   * <p>Instead, {@code <?>} will be resolved to a capture in the form of a type variable\n", "   * {@code <capture-of-? extends Object>}, effectively preventing {@code set} from accepting any\n", "   * type.\n"]}, "added_lines": {"1": [70, 71, 72], "2": [81, 82, 83, 86, 87]}, "removed_lines": {"1": [69, 70, 71], "2": [81, 82, 83, 86, 87, 88]}}, {"24": "android/guava/src/com/google/common/reflect/TypeToken.java", "added": {"1": ["   *\n", "   *\n", "   * Note that condition 2 isn't technically accurate under the context of a recursively bounded\n", "   * type variables. For example, {@code Enum<? extends Enum<E>>} canonicalizes to {@code Enum<?>}\n", "   * where {@code E} is the type variable declared on the {@code Enum} class declaration. It's\n", "   * technically <em>not</em> true that {@code Foo<Enum<? extends Enum<E>>>} is a subtype of {@code\n", "   * Foo<Enum<?>>} according to JLS. See testRecursiveWildcardSubtypeBug() for a real example.\n", "   * @param declaration The type variable in the context of a parameterized type. Used to infer type\n", "   *     bound when {@code formalType} is a wildcard with implicit upper bound.\n"], "2": ["    return canonicalizeWildcardsInType(runtimeType).equals(canonicalizeWildcardsInType(formalType));\n"], "3": ["   *\n", "   *   <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For\n", "   *       example both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to {@code\n", "   *       Enum<? extends Enum<E>}.\n", "   *   <li>{@code canonicalize(t)} produces a \"literal\" supertype of t. For example: {@code Enum<?\n", "   *       extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is a supertype (if we disregard\n", "   *       the upper bound is implicitly an Enum too).\n", "   *   <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)}\n", "   *       and vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}.\n", "   *   <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}.\n"]}, "removed": {"1": ["   * Note that condition 2 isn't technically accurate under the context of a recursively\n", "   * bounded type variables. For example, {@code Enum<? extends Enum<E>>} canonicalizes to\n", "   * {@code Enum<?>} where {@code E} is the type variable declared on the {@code Enum} class\n", "   * declaration. It's technically <em>not</em> true that {@code Foo<Enum<? extends Enum<E>>>} is a\n", "   * subtype of {@code Foo<Enum<?>>} according to JLS. See testRecursiveWildcardSubtypeBug() for\n", "   * a real example.\n", "   * @param declaration The type variable in the context of a parameterized type. Used to infer\n", "   *        type bound when {@code formalType} is a wildcard with implicit upper bound.\n"], "2": ["    return canonicalizeWildcardsInType(runtimeType)\n", "        .equals(canonicalizeWildcardsInType(formalType));\n"], "3": ["   * <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For example\n", "   *     both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to\n", "   *     {@code Enum<? extends Enum<E>}.\n", "   * <li>{@code canonicalize(t)} produces a \"literal\" supertype of t.\n", "   *     For example: {@code Enum<? extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is\n", "   *     a supertype (if we disregard the upper bound is implicitly an Enum too).\n", "   * <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)} and\n", "   *     vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}.\n", "   * <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}.\n"]}, "added_lines": {"1": [950, 957, 958, 959, 960, 961, 962, 969, 970], "2": [986], "3": [994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004]}, "removed_lines": {"1": [956, 957, 958, 959, 960, 961, 968, 969], "2": [985, 986], "3": [995, 996, 997, 998, 999, 1000, 1001, 1002, 1003]}}, {"25": "android/guava/src/com/google/common/util/concurrent/AbstractService.java", "added": {"1": ["   * <p>When this method is called {@link #state()} will return {@link State#STOPPING}, which is the\n", "   * external state observable by the caller of {@link #stopAsync}.\n"]}, "removed": {"1": ["   * <p>When this method is called {@link #state()} will return {@link State#STOPPING}, which\n", "   * is the external state observable by the caller of {@link #stopAsync}.\n"]}, "added_lines": {"1": [233, 234]}, "removed_lines": {"1": [233, 234]}}, {"26": "android/guava/src/com/google/common/util/concurrent/ExecutionList.java", "added": {"1": ["  @NullableDecl\n", "  private RunnableExecutorPair runnables;\n"]}, "removed": {"1": ["  @NullableDecl private RunnableExecutorPair runnables;\n"]}, "added_lines": {"1": [52, 53]}, "removed_lines": {"1": [52]}}, {"27": "android/guava/src/com/google/common/util/concurrent/InterruptibleTask.java", "added": {"1": ["   * Interrupts the running task. Because this internally calls {@link Thread#interrupt()} which can\n", "   * in turn invoke arbitrary code it is not safe to call while holding a lock.\n"]}, "removed": {"1": ["   * Interrupts the running task. Because this internally calls {@link Thread#interrupt()} which can in turn\n", "   * invoke arbitrary code it is not safe to call while holding a lock.\n"]}, "added_lines": {"1": [157, 158]}, "removed_lines": {"1": [157, 158]}}, {"28": "android/guava/src/com/google/common/util/concurrent/Monitor.java", "added": {"1": ["    @NullableDecl\n", "    Guard next;\n"]}, "removed": {"1": ["    @NullableDecl Guard next;\n"]}, "added_lines": {"1": [313, 314]}, "removed_lines": {"1": [313]}}, {"29": "android/guava/src/com/google/common/util/concurrent/Striped.java", "added": {"1": ["   * Creates a {@code Striped<L>} with eagerly initialized, strongly referenced locks. Every lock is\n", "   * obtained from the passed supplier.\n"], "2": ["    return custom(\n", "        stripes,\n", "        new Supplier<Lock>() {\n", "          @Override\n", "          public Lock get() {\n", "            return new PaddedLock();\n", "          }\n", "        });\n"]}, "removed": {"1": ["   * Creates a {@code Striped<L>} with eagerly initialized, strongly referenced locks. Every lock\n", "   * is obtained from the passed supplier.\n"], "2": ["    return custom(stripes, new Supplier<Lock>() {\n", "      @Override\n", "      public Lock get() {\n", "        return new PaddedLock();\n", "      }\n", "    });\n"]}, "added_lines": {"1": [187, 188], "2": [206, 207, 208, 209, 210, 211, 212, 213]}, "removed_lines": {"1": [187, 188], "2": [206, 207, 208, 209, 210, 211]}}, {"30": "guava-gwt/src-super/java/lang/super/java/lang/InterruptedException.java", "added": {"1": [" * Minimal emulation of {@link java.lang.InterruptedException}, that should only be used in method\n", " * signatures. New GWT code should not reference this class at all. It is here only to ease the\n", " * GWTification of common code.\n"]}, "removed": {"1": [" * Minimal emulation of {@link java.lang.InterruptedException}, that should\n", " * only be used in method signatures.  New GWT code should not reference this\n", " * class at all.  It is here only to ease the GWTification of common code.\n"]}, "added_lines": {"1": [20, 21, 22]}, "removed_lines": {"1": [20, 21, 22]}}, {"31": "guava-gwt/src-super/java/util/super/java/util/concurrent/CancellationException.java", "added": {"1": ["/** Emulation of CancellationException. */\n"]}, "removed": {"1": ["/**\n", " * Emulation of CancellationException.\n", " */\n"]}, "added_lines": {"1": [19]}, "removed_lines": {"1": [19, 20, 21]}}, {"32": "guava-gwt/src-super/java/util/super/java/util/concurrent/ConcurrentHashMap.java", "added": {"1": [" * Minimal emulation of {@link java.util.concurrent.ConcurrentHashMap}. Note that the javascript\n", " * interpreter is <a\n", " * single-threaded</a>, it is essentially a {@link java.util.HashMap}, implementing the new methods\n", " * introduced by {@link ConcurrentMap}.\n", "public class ConcurrentHashMap<K, V> extends AbstractMap<K, V> implements ConcurrentMap<K, V> {\n"], "2": ["  @Override\n", "  public boolean containsKey(Object key) {\n", "  @Override\n", "  public V get(Object key) {\n", "  @Override\n", "  public V put(K key, V value) {\n", "  @Override\n", "  public boolean containsValue(Object value) {\n", "  @Override\n", "  public V remove(Object key) {\n", "  @Override\n", "  public Set<Entry<K, V>> entrySet() {\n"]}, "removed": {"1": [" * Minimal emulation of {@link java.util.concurrent.ConcurrentHashMap}.\n", " * Note that the javascript interpreter is <a\n", " * single-threaded</a>, it is essentially a {@link java.util.HashMap},\n", " * implementing the new methods introduced by {@link ConcurrentMap}.\n", "public class ConcurrentHashMap<K, V>\n", "    extends AbstractMap<K, V> implements ConcurrentMap<K, V> {\n"], "2": ["  @Override public boolean containsKey(Object key) {\n", "  @Override public V get(Object key) {\n", "  @Override public V put(K key, V value) {\n", "  @Override public boolean containsValue(Object value) {\n", "  @Override public V remove(Object key) {\n", "  @Override public Set<Entry<K, V>> entrySet() {\n"]}, "added_lines": {"1": [27, 28, 30, 31, 35], "2": [93, 94, 101, 102, 109, 110, 117, 118, 125, 126, 133, 134]}, "removed_lines": {"1": [27, 28, 30, 31, 35, 36], "2": [94, 101, 108, 115, 122, 129]}}, {"33": "guava-gwt/src-super/java/util/super/java/util/concurrent/Delayed.java", "added": {"1": ["/** Emulation of Delayed. */\n", "  long getDelay(TimeUnit unit);\n"]}, "removed": {"1": ["/**\n", " * Emulation of Delayed.\n", " */\n", " long getDelay(TimeUnit unit);\n"]}, "added_lines": {"1": [13, 15]}, "removed_lines": {"1": [13, 14, 15, 17]}}, {"34": "guava-gwt/src-super/java/util/super/java/util/concurrent/ExecutionException.java", "added": {"1": ["  protected ExecutionException() {}\n"]}, "removed": {"1": ["  protected ExecutionException() { }\n"]}, "added_lines": {"1": [25]}, "removed_lines": {"1": [25]}}, {"35": "guava-gwt/src-super/java/util/super/java/util/concurrent/Executor.java", "added": {"1": ["/** Emulation of Executor. */\n"]}, "removed": {"1": ["/**\n", " * Emulation of Executor.\n", " */\n"]}, "added_lines": {"1": [19]}, "removed_lines": {"1": [19, 20, 21]}}, {"36": "guava-gwt/src-super/java/util/super/java/util/concurrent/Executors.java", "added": {"1": ["/** Emulation of executors. */\n"], "2": ["  private Executors() {}\n"]}, "removed": {"1": ["/**\n", " * Emulation of executors.\n", " */\n"], "2": ["  private Executors() {\n", "  }\n"]}, "added_lines": {"1": [13], "2": [46]}, "removed_lines": {"1": [13, 14, 15], "2": [48, 49]}}, {"37": "guava-gwt/src-super/java/util/super/java/util/concurrent/Future.java", "added": {"1": ["  boolean cancel(boolean mayInterruptIfRunning);\n", "  boolean isCancelled();\n", "  boolean isDone();\n", "  V get() throws InterruptedException, ExecutionException;\n", "  V get(long timeout, TimeUnit unit)\n", "      throws InterruptedException, ExecutionException, TimeoutException;\n"]}, "removed": {"1": ["   boolean cancel(boolean mayInterruptIfRunning);\n", "   boolean isCancelled();\n", "   boolean isDone();\n", "   V get() throws InterruptedException, ExecutionException;\n", "   V get(long timeout, TimeUnit unit)\n", "       throws InterruptedException, ExecutionException, TimeoutException;\n"]}, "added_lines": {"1": [28, 30, 32, 38, 40, 41]}, "removed_lines": {"1": [28, 30, 32, 38, 40, 41]}}, {"38": "guava-gwt/src-super/java/util/super/java/util/concurrent/RejectedExecutionException.java", "added": {"1": ["/** GWT emulation of RejectedExecutionException. */\n", "  public RejectedExecutionException() {}\n"]}, "removed": {"1": ["/**\n", " * GWT emulation of RejectedExecutionException.\n", " */\n", "  public RejectedExecutionException() {\n", "  }\n"]}, "added_lines": {"1": [19, 21]}, "removed_lines": {"1": [19, 20, 21, 23, 24]}}, {"39": "guava-gwt/src-super/java/util/super/java/util/concurrent/RunnableFuture.java", "added": {"1": ["/** Emulation of RunnableFuture. */\n", "public interface RunnableFuture<V> extends Runnable, Future<V> {}\n"]}, "removed": {"1": ["/**\n", " * Emulation of RunnableFuture.\n", " */\n", "public interface RunnableFuture<V> extends Runnable, Future<V> {\n", "}\n"]}, "added_lines": {"1": [19, 20]}, "removed_lines": {"1": [19, 20, 21, 22, 23]}}, {"40": "guava-gwt/src-super/java/util/super/java/util/concurrent/ScheduledFuture.java", "added": {"1": ["public interface ScheduledFuture<V> extends Delayed, Future<V> {}\n"]}, "removed": {"1": ["public interface ScheduledFuture<V> extends Delayed, Future<V> {\n", "}\n"]}, "added_lines": {"1": [18]}, "removed_lines": {"1": [18, 19]}}, {"41": "guava-gwt/src-super/java/util/super/java/util/concurrent/TimeUnit.java", "added": {"1": [" * GWT emulation of TimeUnit, created by removing unsupported operations from Doug Lea's public\n", " * domain version.\n", "    public long toNanos(long d) {\n", "      return d;\n", "    }\n", "\n", "    public long toMicros(long d) {\n", "      return d / C1_C0;\n", "    }\n", "\n", "    public long toMillis(long d) {\n", "      return d / C2_C0;\n", "    }\n", "\n", "    public long toSeconds(long d) {\n", "      return d / C3_C0;\n", "    }\n", "\n", "    public long toMinutes(long d) {\n", "      return d / C4_C0;\n", "    }\n", "\n", "    public long toHours(long d) {\n", "      return d / C5_C0;\n", "    }\n", "\n", "    public long toDays(long d) {\n", "      return d / C6_C0;\n", "    }\n", "\n", "    public long convert(long d, TimeUnit u) {\n", "      return u.toNanos(d);\n", "    }\n", "    public long toNanos(long d) {\n", "      return x(d, C1_C0, MAX_C1_C0);\n", "    }\n", "\n", "    public long toMicros(long d) {\n", "      return d;\n", "    }\n", "\n", "    public long toMillis(long d) {\n", "      return d / C2_C1;\n", "    }\n", "\n", "    public long toSeconds(long d) {\n", "      return d / C3_C1;\n", "    }\n", "\n", "    public long toMinutes(long d) {\n", "      return d / C4_C1;\n", "    }\n", "\n", "    public long toHours(long d) {\n", "      return d / C5_C1;\n", "    }\n", "\n", "    public long toDays(long d) {\n", "      return d / C6_C1;\n", "    }\n", "\n", "    public long convert(long d, TimeUnit u) {\n", "      return u.toMicros(d);\n", "    }\n", "    public long toNanos(long d) {\n", "      return x(d, C2_C0, MAX_C2_C0);\n", "    }\n", "\n", "    public long toMicros(long d) {\n", "      return x(d, C2_C1, MAX_C2_C1);\n", "    }\n", "\n", "    public long toMillis(long d) {\n", "      return d;\n", "    }\n", "\n", "    public long toSeconds(long d) {\n", "      return d / C3_C2;\n", "    }\n", "\n", "    public long toMinutes(long d) {\n", "      return d / C4_C2;\n", "    }\n", "\n", "    public long toHours(long d) {\n", "      return d / C5_C2;\n", "    }\n", "\n", "    public long toDays(long d) {\n", "      return d / C6_C2;\n", "    }\n", "\n", "    public long convert(long d, TimeUnit u) {\n", "      return u.toMillis(d);\n", "    }\n", "    public long toNanos(long d) {\n", "      return x(d, C3_C0, MAX_C3_C0);\n", "    }\n", "\n", "    public long toMicros(long d) {\n", "      return x(d, C3_C1, MAX_C3_C1);\n", "    }\n", "\n", "    public long toMillis(long d) {\n", "      return x(d, C3_C2, MAX_C3_C2);\n", "    }\n", "\n", "    public long toSeconds(long d) {\n", "      return d;\n", "    }\n", "\n", "    public long toMinutes(long d) {\n", "      return d / C4_C3;\n", "    }\n", "\n", "    public long toHours(long d) {\n", "      return d / C5_C3;\n", "    }\n", "\n", "    public long toDays(long d) {\n", "      return d / C6_C3;\n", "    }\n", "\n", "    public long convert(long d, TimeUnit u) {\n", "      return u.toSeconds(d);\n", "    }\n", "    public long toNanos(long d) {\n", "      return x(d, C4_C0, MAX_C4_C0);\n", "    }\n", "\n", "    public long toMicros(long d) {\n", "      return x(d, C4_C1, MAX_C4_C1);\n", "    }\n", "\n", "    public long toMillis(long d) {\n", "      return x(d, C4_C2, MAX_C4_C2);\n", "    }\n", "\n", "    public long toSeconds(long d) {\n", "      return x(d, C4_C3, MAX_C4_C3);\n", "    }\n", "\n", "    public long toMinutes(long d) {\n", "      return d;\n", "    }\n", "\n", "    public long toHours(long d) {\n", "      return d / C5_C4;\n", "    }\n", "\n", "    public long toDays(long d) {\n", "      return d / C6_C4;\n", "    }\n", "\n", "    public long convert(long d, TimeUnit u) {\n", "      return u.toMinutes(d);\n", "    }\n", "    public long toNanos(long d) {\n", "      return x(d, C5_C0, MAX_C5_C0);\n", "    }\n", "\n", "    public long toMicros(long d) {\n", "      return x(d, C5_C1, MAX_C5_C1);\n", "    }\n", "\n", "    public long toMillis(long d) {\n", "      return x(d, C5_C2, MAX_C5_C2);\n", "    }\n", "\n", "    public long toSeconds(long d) {\n", "      return x(d, C5_C3, MAX_C5_C3);\n", "    }\n", "\n", "    public long toMinutes(long d) {\n", "      return x(d, C5_C4, MAX_C5_C4);\n", "    }\n", "\n", "    public long toHours(long d) {\n", "      return d;\n", "    }\n", "\n", "    public long toDays(long d) {\n", "      return d / C6_C5;\n", "    }\n", "\n", "    public long convert(long d, TimeUnit u) {\n", "      return u.toHours(d);\n", "    }\n", "    public long toNanos(long d) {\n", "      return x(d, C6_C0, MAX_C6_C0);\n", "    }\n", "\n", "    public long toMicros(long d) {\n", "      return x(d, C6_C1, MAX_C6_C1);\n", "    }\n", "\n", "    public long toMillis(long d) {\n", "      return x(d, C6_C2, MAX_C6_C2);\n", "    }\n", "\n", "    public long toSeconds(long d) {\n", "      return x(d, C6_C3, MAX_C6_C3);\n", "    }\n", "\n", "    public long toMinutes(long d) {\n", "      return x(d, C6_C4, MAX_C6_C4);\n", "    }\n", "\n", "    public long toHours(long d) {\n", "      return x(d, C6_C5, MAX_C6_C5);\n", "    }\n", "\n", "    public long toDays(long d) {\n", "      return d;\n", "    }\n", "\n", "    public long convert(long d, TimeUnit u) {\n", "      return u.toDays(d);\n", "    }\n"], "2": ["    if (d > over) return Long.MAX_VALUE;\n"]}, "removed": {"1": [" * GWT emulation of TimeUnit, created by removing unsupported operations from\n", " * Doug Lea's public domain version.\n", "    public long toNanos(long d)   { return d; }\n", "    public long toMicros(long d)  { return d / C1_C0; }\n", "    public long toMillis(long d)  { return d / C2_C0; }\n", "    public long toSeconds(long d) { return d / C3_C0; }\n", "    public long toMinutes(long d) { return d / C4_C0; }\n", "    public long toHours(long d)   { return d / C5_C0; }\n", "    public long toDays(long d)    { return d / C6_C0; }\n", "    public long convert(long d, TimeUnit u) { return u.toNanos(d); }\n", "    public long toNanos(long d)   { return x(d, C1_C0, MAX_C1_C0); }\n", "    public long toMicros(long d)  { return d; }\n", "    public long toMillis(long d)  { return d / C2_C1; }\n", "    public long toSeconds(long d) { return d / C3_C1; }\n", "    public long toMinutes(long d) { return d / C4_C1; }\n", "    public long toHours(long d)   { return d / C5_C1; }\n", "    public long toDays(long d)    { return d / C6_C1; }\n", "    public long convert(long d, TimeUnit u) { return u.toMicros(d); }\n", "    public long toNanos(long d)   { return x(d, C2_C0, MAX_C2_C0); }\n", "    public long toMicros(long d)  { return x(d, C2_C1, MAX_C2_C1); }\n", "    public long toMillis(long d)  { return d; }\n", "    public long toSeconds(long d) { return d / C3_C2; }\n", "    public long toMinutes(long d) { return d / C4_C2; }\n", "    public long toHours(long d)   { return d / C5_C2; }\n", "    public long toDays(long d)    { return d / C6_C2; }\n", "    public long convert(long d, TimeUnit u) { return u.toMillis(d); }\n", "    public long toNanos(long d)   { return x(d, C3_C0, MAX_C3_C0); }\n", "    public long toMicros(long d)  { return x(d, C3_C1, MAX_C3_C1); }\n", "    public long toMillis(long d)  { return x(d, C3_C2, MAX_C3_C2); }\n", "    public long toSeconds(long d) { return d; }\n", "    public long toMinutes(long d) { return d / C4_C3; }\n", "    public long toHours(long d)   { return d / C5_C3; }\n", "    public long toDays(long d)    { return d / C6_C3; }\n", "    public long convert(long d, TimeUnit u) { return u.toSeconds(d); }\n", "    public long toNanos(long d)   { return x(d, C4_C0, MAX_C4_C0); }\n", "    public long toMicros(long d)  { return x(d, C4_C1, MAX_C4_C1); }\n", "    public long toMillis(long d)  { return x(d, C4_C2, MAX_C4_C2); }\n", "    public long toSeconds(long d) { return x(d, C4_C3, MAX_C4_C3); }\n", "    public long toMinutes(long d) { return d; }\n", "    public long toHours(long d)   { return d / C5_C4; }\n", "    public long toDays(long d)    { return d / C6_C4; }\n", "    public long convert(long d, TimeUnit u) { return u.toMinutes(d); }\n", "    public long toNanos(long d)   { return x(d, C5_C0, MAX_C5_C0); }\n", "    public long toMicros(long d)  { return x(d, C5_C1, MAX_C5_C1); }\n", "    public long toMillis(long d)  { return x(d, C5_C2, MAX_C5_C2); }\n", "    public long toSeconds(long d) { return x(d, C5_C3, MAX_C5_C3); }\n", "    public long toMinutes(long d) { return x(d, C5_C4, MAX_C5_C4); }\n", "    public long toHours(long d)   { return d; }\n", "    public long toDays(long d)    { return d / C6_C5; }\n", "    public long convert(long d, TimeUnit u) { return u.toHours(d); }\n", "    public long toNanos(long d)   { return x(d, C6_C0, MAX_C6_C0); }\n", "    public long toMicros(long d)  { return x(d, C6_C1, MAX_C6_C1); }\n", "    public long toMillis(long d)  { return x(d, C6_C2, MAX_C6_C2); }\n", "    public long toSeconds(long d) { return x(d, C6_C3, MAX_C6_C3); }\n", "    public long toMinutes(long d) { return x(d, C6_C4, MAX_C6_C4); }\n", "    public long toHours(long d)   { return x(d, C6_C5, MAX_C6_C5); }\n", "    public long toDays(long d)    { return d; }\n", "    public long convert(long d, TimeUnit u) { return u.toDays(d); }\n"], "2": ["    if (d >  over) return Long.MAX_VALUE;\n"]}, "added_lines": {"1": [14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247], "2": [316]}, "removed_lines": {"1": [14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86], "2": [155]}}, {"42": "guava-gwt/src-super/java/util/super/java/util/concurrent/TimeoutException.java", "added": {"1": ["/** Emulation of TimeoutException. */\n"]}, "removed": {"1": ["/**\n", " * Emulation of TimeoutException.\n", " */\n"]}, "added_lines": {"1": [19]}, "removed_lines": {"1": [19, 20, 21]}}, {"43": "guava-gwt/src-super/java/util/super/java/util/concurrent/atomic/AtomicBoolean.java", "added": {"1": [" */\n", "/**\n", " * Atomically sets the value to the given updated value if the current value {@code ==} the expected\n", " * value.\n", " * <p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a> and does not provide ordering\n", " * guarantees, so is only rarely an appropriate alternative to {@code compareAndSet}.\n", "/** GWT emulation of AtomicBoolean. */\n"], "2": ["  public AtomicBoolean() {}\n"]}, "removed": {"1": [" */  /**\n", " * Atomically sets the value to the given updated value\n", " * if the current value {@code ==} the expected value.\n", " * <p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>\n", " * and does not provide ordering guarantees, so is only rarely an\n", " * appropriate alternative to {@code compareAndSet}.\n", "\n", "/**\n", " * GWT emulation of AtomicBoolean.\n", " */\n"], "2": ["  public AtomicBoolean() {\n", "  }\n"]}, "added_lines": {"1": [15, 16, 17, 18, 20, 21, 29], "2": [37]}, "removed_lines": {"1": [15, 16, 17, 19, 20, 21, 27, 30, 31, 32], "2": [40, 41]}}, {"44": "guava-gwt/src-super/java/util/super/java/util/concurrent/atomic/AtomicInteger.java", "added": {"1": [" * GWT emulated version of {@link AtomicInteger}. It's a thin wrapper around the primitive {@code\n", " * int}.\n"], "2": ["  public AtomicInteger() {}\n"], "3": ["  @Override\n", "  public String toString() {\n"]}, "removed": {"1": [" * GWT emulated version of {@link AtomicInteger}.  It's a thin wrapper\n", " * around the primitive {@code int}.\n"], "2": ["  public AtomicInteger() {\n", "  }\n"], "3": ["  @Override public String toString() {\n"]}, "added_lines": {"1": [20, 21], "2": [33], "3": [89, 90]}, "removed_lines": {"1": [20, 21], "2": [33, 34], "3": [90]}}, {"45": "guava-gwt/src-super/java/util/super/java/util/concurrent/atomic/AtomicLong.java", "added": {"1": [" * GWT emulated version of {@link AtomicLong}. It's a thin wrapper around the primitive {@code\n", " * long}.\n"], "2": ["  public AtomicLong() {}\n"], "3": ["  @Override\n", "  public String toString() {\n"]}, "removed": {"1": [" * GWT emulated version of {@link AtomicLong}.  It's a thin wrapper\n", " * around the primitive {@code long}.\n"], "2": ["  public AtomicLong() {\n", "  }\n"], "3": ["  @Override public String toString() {\n"]}, "added_lines": {"1": [20, 21], "2": [33], "3": [89, 90]}, "removed_lines": {"1": [20, 21], "2": [33, 34], "3": [90]}}, {"46": "guava-testlib/src/com/google/common/collect/testing/google/AbstractMultisetSetCountTester.java", "added": {"1": ["      value = {SUPPORTS_ADD, ALLOWS_NULL_VALUES},\n", "      absent = RESTRICTS_ELEMENTS)\n"]}, "removed": {"1": ["    value = {SUPPORTS_ADD, ALLOWS_NULL_VALUES},\n", "    absent = RESTRICTS_ELEMENTS\n", "  )\n"]}, "added_lines": {"1": [318, 319]}, "removed_lines": {"1": [318, 319, 320]}}, {"47": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionAddAllTester.java", "added": {"1": ["      value = {SUPPORTS_ADD, ALLOWS_NULL_VALUES},\n", "      absent = RESTRICTS_ELEMENTS)\n"]}, "removed": {"1": ["    value = {SUPPORTS_ADD, ALLOWS_NULL_VALUES},\n", "    absent = RESTRICTS_ELEMENTS\n", "  )\n"]}, "added_lines": {"1": [131, 132]}, "removed_lines": {"1": [131, 132, 133]}}, {"48": "guava-testlib/src/com/google/common/collect/testing/testers/CollectionAddTester.java", "added": {"1": ["      value = {SUPPORTS_ADD, ALLOWS_NULL_VALUES},\n", "      absent = RESTRICTS_ELEMENTS)\n"]}, "removed": {"1": ["    value = {SUPPORTS_ADD, ALLOWS_NULL_VALUES},\n", "    absent = RESTRICTS_ELEMENTS\n", "  )\n"]}, "added_lines": {"1": [75, 76]}, "removed_lines": {"1": [75, 76, 77]}}, {"49": "guava/src/com/google/common/base/Objects.java", "added": {"1": ["  public static int hashCode(Object @Nullable ... objects) {\n"]}, "removed": {"1": ["  public static int hashCode(Object @Nullable... objects) {\n"]}, "added_lines": {"1": [76]}, "removed_lines": {"1": [76]}}, {"50": "guava/src/com/google/common/base/Preconditions.java", "added": {"1": ["      Object @Nullable ... errorMessageArgs) {\n"], "2": ["      @Nullable Object @Nullable ... errorMessageArgs) {\n"], "3": ["      T reference, @Nullable String errorMessageTemplate, Object @Nullable ... errorMessageArgs) {\n"]}, "removed": {"1": ["      Object @Nullable... errorMessageArgs) {\n"], "2": ["      @Nullable Object @Nullable... errorMessageArgs) {\n"], "3": ["      T reference, @Nullable String errorMessageTemplate, Object @Nullable... errorMessageArgs) {\n"]}, "added_lines": {"1": [161], "2": [529], "3": [917]}, "removed_lines": {"1": [161], "2": [529], "3": [917]}}, {"51": "guava/src/com/google/common/base/Strings.java", "added": {"1": ["      @Nullable String template, @Nullable Object @Nullable ... args) {\n"]}, "removed": {"1": ["      @Nullable String template, @Nullable Object @Nullable... args) {\n"]}, "added_lines": {"1": [260]}, "removed_lines": {"1": [260]}}, {"52": "guava/src/com/google/common/base/Verify.java", "added": {"1": ["      @Nullable Object @Nullable ... errorMessageArgs) {\n"], "2": ["      @Nullable Object @Nullable ... errorMessageArgs) {\n"]}, "removed": {"1": ["      @Nullable Object @Nullable... errorMessageArgs) {\n"], "2": ["      @Nullable Object @Nullable... errorMessageArgs) {\n"]}, "added_lines": {"1": [122], "2": [499]}, "removed_lines": {"1": [122], "2": [499]}}, {"53": "guava/src/com/google/common/cache/LocalCache.java", "added": {"1": ["        newValue = function.apply(key, previousValue);\n", "        this.setException(th);\n", "        throw th;\n"]}, "removed": {"1": ["         newValue = function.apply(key, previousValue);\n", "         this.setException(th);\n", "         throw th;\n"]}, "added_lines": {"1": [3567, 3569, 3570]}, "removed_lines": {"1": [3567, 3569, 3570]}}, {"54": "guava/src/com/google/common/collect/BaseImmutableMultimap.java", "added": {"1": [" * A dummy superclass of {@link ImmutableMultimap} that can be instanceof'd without ProGuard\n", " * retaining additional implementation details of {@link ImmutableMultimap}.\n"]}, "removed": {"1": [" * A dummy superclass of {@link ImmutableMultimap} that can be instanceof'd without ProGuard retaining\n", " * additional implementation details of {@link ImmutableMultimap}.\n"]}, "added_lines": {"1": [21, 22]}, "removed_lines": {"1": [21, 22]}}, {"55": "guava/src/com/google/common/collect/CompactHashMap.java", "added": {"1": [" * moderately increased constant factors of CPU. Only use this class when there is a specific reason\n", " * to prioritize memory over CPU.\n"], "2": ["  @VisibleForTesting transient Object @MonotonicNonNull [] keys;\n", "  @VisibleForTesting transient Object @MonotonicNonNull [] values;\n"]}, "removed": {"1": [" * moderately increased constant factors of CPU.  Only use this class when there is a specific\n", " * reason to prioritize memory over CPU.\n"], "2": ["  @VisibleForTesting transient Object @MonotonicNonNull[] keys;\n", "  @VisibleForTesting transient Object @MonotonicNonNull[] values;\n"]}, "added_lines": {"1": [69, 70], "2": [142, 148]}, "removed_lines": {"1": [69, 70], "2": [142, 148]}}, {"56": "guava/src/com/google/common/collect/CompactHashSet.java", "added": {"1": [" * moderately increased constant factors of CPU. Only use this class when there is a specific reason\n", " * to prioritize memory over CPU.\n"]}, "removed": {"1": [" * moderately increased constant factors of CPU.  Only use this class when there is a specific\n", " * reason to prioritize memory over CPU.\n"]}, "added_lines": {"1": [65, 66]}, "removed_lines": {"1": [65, 66]}}, {"57": "guava/src/com/google/common/collect/CompactLinkedHashMap.java", "added": {"1": ["  /** Creates an empty {@code CompactLinkedHashMap} instance. */\n", "   * Creates a {@code CompactLinkedHashMap} instance, with a high enough \"initial capacity\" that it\n", "   * <i>should</i> hold {@code expectedSize} elements without growth.\n", "   *     expectedSize} elements without resizing\n"], "2": ["  /** Pointer to the first node in the linked list, or {@code ENDPOINT} if there are no entries. */\n", "  /** Pointer to the last node in the linked list, or {@code ENDPOINT} if there are no entries. */\n"]}, "removed": {"1": ["  /**\n", "   * Creates an empty {@code CompactLinkedHashMap} instance.\n", "   */\n", "   * Creates a {@code CompactLinkedHashMap} instance, with a high enough \"initial capacity\"\n", "   * that it <i>should</i> hold {@code expectedSize} elements without growth.\n", "   *         expectedSize} elements without resizing\n"], "2": ["  /**\n", "   * Pointer to the first node in the linked list, or {@code ENDPOINT} if there are no entries.\n", "   */\n", "  /**\n", "   * Pointer to the last node in the linked list, or {@code ENDPOINT} if there are no entries.\n", "   */\n"]}, "added_lines": {"1": [56, 62, 63, 67], "2": [87, 90]}, "removed_lines": {"1": [56, 57, 58, 64, 65, 69], "2": [89, 90, 91, 94, 95, 96]}}, {"58": "guava/src/com/google/common/collect/CompactLinkedHashSet.java", "added": {"1": ["  /** Creates an empty {@code CompactLinkedHashSet} instance. */\n", "   * Creates a <i>mutable</i> {@code CompactLinkedHashSet} instance containing the elements of the\n", "   * given collection in the order returned by the collection's iterator.\n"], "2": ["   * Creates a {@code CompactLinkedHashSet} instance containing the given elements in unspecified\n", "   * order.\n"], "3": ["   * Creates a {@code CompactLinkedHashSet} instance, with a high enough \"initial capacity\" that it\n", "   * <i>should</i> hold {@code expectedSize} elements without rebuilding internal data structures.\n", "   *     expectedSize} elements without resizing\n"], "4": ["  @Override\n", "  public Spliterator<E> spliterator() {\n", "  @Override\n", "  public void forEach(Consumer<? super E> action) {\n"]}, "removed": {"1": ["  /**\n", "   * Creates an empty {@code CompactLinkedHashSet} instance.\n", "   */\n", "   * Creates a <i>mutable</i> {@code CompactLinkedHashSet} instance containing the elements\n", "   * of the given collection in the order returned by the collection's iterator.\n"], "2": ["   * Creates a {@code CompactLinkedHashSet} instance containing the given elements in\n", "   * unspecified order.\n"], "3": ["   * Creates a {@code CompactLinkedHashSet} instance, with a high enough \"initial capacity\"\n", "   * that it <i>should</i> hold {@code expectedSize} elements without rebuilding internal\n", "   * data structures.\n", "   *         expectedSize} elements without resizing\n"], "4": ["  @Override public Spliterator<E> spliterator() {\n", "  @Override public void forEach(Consumer<? super E> action) {\n"]}, "added_lines": {"1": [54, 60, 61], "2": [73, 74], "3": [86, 87, 91], "4": [221, 222, 226, 227]}, "removed_lines": {"1": [54, 55, 56, 62, 63], "2": [75, 76], "3": [88, 89, 90, 94], "4": [224, 228]}}, {"59": "guava/src/com/google/common/collect/ImmutableList.java", "added": {"1": ["        others.length <= Integer.MAX_VALUE - 12, \"the total number of elements must fit in an int\");\n"]}, "removed": {"1": ["        others.length <= Integer.MAX_VALUE - 12,\n", "        \"the total number of elements must fit in an int\");\n"]}, "added_lines": {"1": [204]}, "removed_lines": {"1": [204, 205]}}, {"60": "guava/src/com/google/common/collect/ImmutableSet.java", "added": {"1": ["        others.length <= Integer.MAX_VALUE - 6, \"the total number of elements must fit in an int\");\n"]}, "removed": {"1": ["        others.length <= Integer.MAX_VALUE - 6,\n", "        \"the total number of elements must fit in an int\");\n"]}, "added_lines": {"1": [136]}, "removed_lines": {"1": [136, 137]}}, {"61": "guava/src/com/google/common/collect/MultimapBuilder.java", "added": {"1": ["   * Uses a hash table to map keys to value collections, initialized to expect the specified number\n", "   * of keys.\n"], "2": ["   * Uses an hash table to map keys to value collections, initialized to expect the specified number\n", "   * of keys.\n"], "3": ["     * Uses a hash-based {@code Set} to store value collections, initialized to expect the specified\n", "     * number of values per key.\n"], "4": ["     * Uses an insertion-ordered hash-based {@code Set} to store value collections, initialized to\n", "     * expect the specified number of values per key.\n"]}, "removed": {"1": ["   * Uses a hash table to map keys to value collections, initialized to expect the specified\n", "   * number of keys.\n"], "2": ["   * Uses an hash table to map keys to value collections, initialized to expect the\n", "   * specified number of keys.\n"], "3": ["     * Uses a hash-based {@code Set} to store value collections, initialized to expect the specified number\n", "     * of values per key.\n"], "4": ["     * Uses an insertion-ordered hash-based {@code Set} to store value collections, initialized to expect the specified\n", "     * number of values per key.\n"]}, "added_lines": {"1": [82, 83], "2": [110, 111], "3": [322, 323], "4": [345, 346]}, "removed_lines": {"1": [82, 83], "2": [110, 111], "3": [322, 323], "4": [345, 346]}}, {"62": "guava/src/com/google/common/graph/AbstractNetwork.java", "added": {"1": ["   * Throws an IllegalArgumentException if the ordering of {@code endpoints} is not compatible with\n", "   * the directionality of this graph.\n"]}, "removed": {"1": ["   * Throws an IllegalArgumentException if the ordering of {@code endpoints} is not compatible\n", "   * with the directionality of this graph.\n"]}, "added_lines": {"1": [235, 236]}, "removed_lines": {"1": [235, 236]}}, {"63": "guava/src/com/google/common/graph/MutableValueGraph.java", "added": {"1": ["   * Adds an edge connecting {@code nodeU} to {@code nodeV} if one is not already present, and sets\n", "   * a value for that edge to {@code value} (overwriting the existing value, if any).\n"]}, "removed": {"1": ["   * Adds an edge connecting {@code nodeU} to {@code nodeV} if one is not already present, and\n", "   * sets a value for that edge to {@code value} (overwriting the existing value, if any).\n"]}, "added_lines": {"1": [45, 46]}, "removed_lines": {"1": [45, 46]}}, {"64": "guava/src/com/google/common/graph/Traverser.java", "added": {"1": [" *   <li>Is there only one path to any node that's reachable from any start node? (If so, the graph\n", " *       to be traversed is a tree or forest even if it is a subgraph of a graph which is neither.)\n"]}, "removed": {"1": [" *   <li>Is there only one path to any node that's reachable from any start node? (If so, the\n", " *       graph to be traversed is a tree or forest even if it is a subgraph of a graph which is\n", " *       neither.)\n"]}, "added_lines": {"1": [44, 45]}, "removed_lines": {"1": [44, 45, 46]}}, {"65": "guava/src/com/google/common/graph/ValueGraph.java", "added": {"1": ["   * any, specified by {@code endpoints}), if one is present; otherwise, returns {@code\n", "   * Optional.empty()}.\n"]}, "removed": {"1": ["   * any, specified by {@code endpoints}), if one is present;\n", "   * otherwise, returns {@code Optional.empty()}.\n"]}, "added_lines": {"1": [266, 267]}, "removed_lines": {"1": [266, 267]}}, {"66": "guava/src/com/google/common/io/ByteStreams.java", "added": {"1": ["        totalLen < MAX_ARRAY_LEN;\n", "        bufSize = IntMath.saturatedMultiply(bufSize, 2)) {\n"], "2": ["    bufs.add(new byte[] {(byte) b});\n"]}, "removed": {"1": ["         totalLen < MAX_ARRAY_LEN;\n", "         bufSize = IntMath.saturatedMultiply(bufSize, 2)) {\n"], "2": ["    bufs.add(new byte[] { (byte) b });\n"]}, "added_lines": {"1": [174, 175], "2": [258]}, "removed_lines": {"1": [174, 175], "2": [258]}}, {"67": "guava/src/com/google/common/math/PairedStats.java", "added": {"1": ["        && doubleToLongBits(sumOfProductsOfDeltas) == doubleToLongBits(other.sumOfProductsOfDeltas);\n"]}, "removed": {"1": ["        && doubleToLongBits(sumOfProductsOfDeltas)\n", "            == doubleToLongBits(other.sumOfProductsOfDeltas);\n"]}, "added_lines": {"1": [226]}, "removed_lines": {"1": [226, 227]}}, {"68": "guava/src/com/google/common/net/HttpHeaders.java", "added": {"1": ["  @Beta public static final String X_DOWNLOAD_OPTIONS = \"X-Download-Options\";\n"]}, "removed": {"1": ["  @Beta\n", "  public static final String X_DOWNLOAD_OPTIONS = \"X-Download-Options\";\n"]}, "added_lines": {"1": [377]}, "removed_lines": {"1": [377, 378]}}, {"69": "guava/src/com/google/common/net/InetAddresses.java", "added": {"1": ["      if (Iterables.getLast(parts).length() == 0 && --partsLo != 0) {\n"]}, "removed": {"1": ["       if (Iterables.getLast(parts).length() == 0 && --partsLo != 0) {\n"]}, "added_lines": {"1": [235]}, "removed_lines": {"1": [235]}}, {"70": "guava/src/com/google/common/primitives/ImmutableDoubleArray.java", "added": {"1": ["        rest.length <= Integer.MAX_VALUE - 1, \"the total number of elements must fit in an int\");\n"]}, "removed": {"1": ["        rest.length <= Integer.MAX_VALUE - 1,\n", "        \"the total number of elements must fit in an int\");\n"]}, "added_lines": {"1": [141]}, "removed_lines": {"1": [141, 142]}}, {"71": "guava/src/com/google/common/primitives/ImmutableIntArray.java", "added": {"1": ["        rest.length <= Integer.MAX_VALUE - 1, \"the total number of elements must fit in an int\");\n"]}, "removed": {"1": ["        rest.length <= Integer.MAX_VALUE - 1,\n", "        \"the total number of elements must fit in an int\");\n"]}, "added_lines": {"1": [140]}, "removed_lines": {"1": [140, 141]}}, {"72": "guava/src/com/google/common/primitives/ImmutableLongArray.java", "added": {"1": ["        rest.length <= Integer.MAX_VALUE - 1, \"the total number of elements must fit in an int\");\n"]}, "removed": {"1": ["        rest.length <= Integer.MAX_VALUE - 1,\n", "        \"the total number of elements must fit in an int\");\n"]}, "added_lines": {"1": [140]}, "removed_lines": {"1": [140, 141]}}, {"73": "guava/src/com/google/common/reflect/TypeResolver.java", "added": {"1": ["   * <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>}, {@code\n", "   * <T>} is covariantly resolved to {@code <?>} such that return type of {@code List::get} is\n", "   * {@code <?>}.\n"], "2": ["   * <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>}, {@code\n", "   * <T>} cannot be invariantly resolved to {@code <?>} because otherwise the parameter type of\n", "   * {@code List::set} will be {@code <?>} and it'll falsely say any object can be passed into\n", "   * <p>Instead, {@code <?>} will be resolved to a capture in the form of a type variable {@code\n", "   * <capture-of-? extends Object>}, effectively preventing {@code set} from accepting any type.\n"]}, "removed": {"1": ["   * <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>},\n", "   * {@code <T>} is covariantly resolved to {@code <?>} such that return type of {@code List::get}\n", "   * is {@code <?>}.\n"], "2": ["   * <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>},\n", "   * {@code <T>} cannot be invariantly resolved to {@code <?>} because otherwise the parameter type\n", "   * of {@code List::set} will be {@code <?>} and it'll falsely say any object can be passed into\n", "   * <p>Instead, {@code <?>} will be resolved to a capture in the form of a type variable\n", "   * {@code <capture-of-? extends Object>}, effectively preventing {@code set} from accepting any\n", "   * type.\n"]}, "added_lines": {"1": [70, 71, 72], "2": [81, 82, 83, 86, 87]}, "removed_lines": {"1": [69, 70, 71], "2": [81, 82, 83, 86, 87, 88]}}, {"74": "guava/src/com/google/common/reflect/TypeToken.java", "added": {"1": ["   *\n", "   *\n", "   * Note that condition 2 isn't technically accurate under the context of a recursively bounded\n", "   * type variables. For example, {@code Enum<? extends Enum<E>>} canonicalizes to {@code Enum<?>}\n", "   * where {@code E} is the type variable declared on the {@code Enum} class declaration. It's\n", "   * technically <em>not</em> true that {@code Foo<Enum<? extends Enum<E>>>} is a subtype of {@code\n", "   * Foo<Enum<?>>} according to JLS. See testRecursiveWildcardSubtypeBug() for a real example.\n", "   * @param declaration The type variable in the context of a parameterized type. Used to infer type\n", "   *     bound when {@code formalType} is a wildcard with implicit upper bound.\n"], "2": ["    return canonicalizeWildcardsInType(runtimeType).equals(canonicalizeWildcardsInType(formalType));\n"], "3": ["   *\n", "   *   <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For\n", "   *       example both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to {@code\n", "   *       Enum<? extends Enum<E>}.\n", "   *   <li>{@code canonicalize(t)} produces a \"literal\" supertype of t. For example: {@code Enum<?\n", "   *       extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is a supertype (if we disregard\n", "   *       the upper bound is implicitly an Enum too).\n", "   *   <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)}\n", "   *       and vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}.\n", "   *   <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}.\n"]}, "removed": {"1": ["   * Note that condition 2 isn't technically accurate under the context of a recursively\n", "   * bounded type variables. For example, {@code Enum<? extends Enum<E>>} canonicalizes to\n", "   * {@code Enum<?>} where {@code E} is the type variable declared on the {@code Enum} class\n", "   * declaration. It's technically <em>not</em> true that {@code Foo<Enum<? extends Enum<E>>>} is a\n", "   * subtype of {@code Foo<Enum<?>>} according to JLS. See testRecursiveWildcardSubtypeBug() for\n", "   * a real example.\n", "   * @param declaration The type variable in the context of a parameterized type. Used to infer\n", "   *        type bound when {@code formalType} is a wildcard with implicit upper bound.\n"], "2": ["    return canonicalizeWildcardsInType(runtimeType)\n", "        .equals(canonicalizeWildcardsInType(formalType));\n"], "3": ["   * <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For example\n", "   *     both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to\n", "   *     {@code Enum<? extends Enum<E>}.\n", "   * <li>{@code canonicalize(t)} produces a \"literal\" supertype of t.\n", "   *     For example: {@code Enum<? extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is\n", "   *     a supertype (if we disregard the upper bound is implicitly an Enum too).\n", "   * <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)} and\n", "   *     vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}.\n", "   * <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}.\n"]}, "added_lines": {"1": [947, 954, 955, 956, 957, 958, 959, 966, 967], "2": [983], "3": [991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001]}, "removed_lines": {"1": [953, 954, 955, 956, 957, 958, 965, 966], "2": [982, 983], "3": [992, 993, 994, 995, 996, 997, 998, 999, 1000]}}, {"75": "guava/src/com/google/common/util/concurrent/AbstractService.java", "added": {"1": ["   * <p>When this method is called {@link #state()} will return {@link State#STOPPING}, which is the\n", "   * external state observable by the caller of {@link #stopAsync}.\n"]}, "removed": {"1": ["   * <p>When this method is called {@link #state()} will return {@link State#STOPPING}, which\n", "   * is the external state observable by the caller of {@link #stopAsync}.\n"]}, "added_lines": {"1": [233, 234]}, "removed_lines": {"1": [233, 234]}}, {"76": "guava/src/com/google/common/util/concurrent/InterruptibleTask.java", "added": {"1": ["   * Interrupts the running task. Because this internally calls {@link Thread#interrupt()} which can\n", "   * in turn invoke arbitrary code it is not safe to call while holding a lock.\n"]}, "removed": {"1": ["   * Interrupts the running task. Because this internally calls {@link Thread#interrupt()} which can in turn\n", "   * invoke arbitrary code it is not safe to call while holding a lock.\n"]}, "added_lines": {"1": [157, 158]}, "removed_lines": {"1": [157, 158]}}, {"77": "guava/src/com/google/common/util/concurrent/Striped.java", "added": {"1": ["   * Creates a {@code Striped<L>} with eagerly initialized, strongly referenced locks. Every lock is\n", "   * obtained from the passed supplier.\n"], "2": ["    return custom(\n", "        stripes,\n", "        new Supplier<Lock>() {\n", "          @Override\n", "          public Lock get() {\n", "            return new PaddedLock();\n", "          }\n", "        });\n"]}, "removed": {"1": ["   * Creates a {@code Striped<L>} with eagerly initialized, strongly referenced locks. Every lock\n", "   * is obtained from the passed supplier.\n"], "2": ["    return custom(stripes, new Supplier<Lock>() {\n", "      @Override\n", "      public Lock get() {\n", "        return new PaddedLock();\n", "      }\n", "    });\n"]}, "added_lines": {"1": [187, 188], "2": [206, 207, 208, 209, 210, 211, 212, 213]}, "removed_lines": {"1": [187, 188], "2": [206, 207, 208, 209, 210, 211]}}]}
