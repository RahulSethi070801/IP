@Override
public Graph<N> asGraph() {
    return new AbstractGraph<N>() {

        @Override
        public Set<N> nodes() {
            return AbstractNetwork.this.nodes();
        }

        @Override
        public Set<EndpointPair<N>> edges() {
            if (allowsParallelEdges()) {
                return super.edges();
            }
            return new AbstractSet<EndpointPair<N>>() {

                @Override
                public Iterator<EndpointPair<N>> iterator() {
                    return Iterators.transform(AbstractNetwork.this.edges().iterator(), new Function<E, EndpointPair<N>>() {

                        @Override
                        public EndpointPair<N> apply(E edge) {
                            return incidentNodes(edge);
                        }
                    });
                }

                @Override
                public int size() {
                    return AbstractNetwork.this.edges().size();
                }

                @SuppressWarnings("unchecked")
                @Override
                public boolean contains(@NullableDecl Object obj) {
                    if (!(obj instanceof EndpointPair)) {
                        return false;
                    }
                    EndpointPair<?> endpointPair = (EndpointPair<?>) obj;
                    return isDirected() == endpointPair.isOrdered() && nodes().contains(endpointPair.nodeU()) && successors((N) endpointPair.nodeU()).contains(endpointPair.nodeV());
                }
            };
        }

        @Override
        public ElementOrder<N> nodeOrder() {
            return AbstractNetwork.this.nodeOrder();
        }

        @Override
        public boolean isDirected() {
            return AbstractNetwork.this.isDirected();
        }

        @Override
        public boolean allowsSelfLoops() {
            return AbstractNetwork.this.allowsSelfLoops();
        }

        @Override
        public Set<N> adjacentNodes(N node) {
            return AbstractNetwork.this.adjacentNodes(node);
        }

        @Override
        public Set<N> predecessors(N node) {
            return AbstractNetwork.this.predecessors(node);
        }

        @Override
        public Set<N> successors(N node) {
            return AbstractNetwork.this.successors(node);
        }
    };
}