{
    "addition": {
        "19": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "20": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "21": "import static com.google.common.graph.GraphConstants.ENDPOINTS_MISMATCH;\n",
        "97": "            return isOrderingCompatible(endpointPair)\n",
        "174": "  @Override\n",
        "175": "  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n",
        "176": "    validateEndpoints(endpoints);\n",
        "177": "    return edgesConnecting(endpoints.nodeU(), endpoints.nodeV());\n",
        "178": "  }\n",
        "179": "\n",
        "203": "  @Override\n",
        "204": "  @NullableDecl\n",
        "205": "  public E edgeConnectingOrNull(EndpointPair<N> endpoints) {\n",
        "206": "    validateEndpoints(endpoints);\n",
        "207": "    return edgeConnectingOrNull(endpoints.nodeU(), endpoints.nodeV());\n",
        "208": "  }\n",
        "209": "\n",
        "215": "  @Override\n",
        "216": "  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n",
        "217": "    checkNotNull(endpoints);\n",
        "218": "    if (!isOrderingCompatible(endpoints)) {\n",
        "219": "      return false;\n",
        "220": "    }\n",
        "221": "    return !edgesConnecting(endpoints.nodeU(), endpoints.nodeV()).isEmpty();\n",
        "222": "  }\n",
        "223": "\n",
        "224": "  /**\n",
        "225": "   * Throws an IllegalArgumentException if the ordering of {@code endpoints} is not compatible\n",
        "226": "   * with the directionality of this graph.\n",
        "227": "   */\n",
        "228": "  protected final void validateEndpoints(EndpointPair<?> endpoints) {\n",
        "229": "    checkNotNull(endpoints);\n",
        "230": "    checkArgument(isOrderingCompatible(endpoints), ENDPOINTS_MISMATCH);\n",
        "231": "  }\n",
        "232": "\n",
        "233": "  protected final boolean isOrderingCompatible(EndpointPair<?> endpoints) {\n",
        "234": "    return endpoints.isOrdered() || !this.isDirected();\n",
        "235": "  }\n",
        "236": "\n"
    },
    "removed": {
        "94": "            return isDirected() == endpointPair.isOrdered()\n"
    }
}