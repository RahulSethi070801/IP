{
    "addition": {
        "19": "import static com.google.common.graph.GraphConstants.ENDPOINTS_MISMATCH;\n",
        "21": "import static org.junit.Assert.fail;\n",
        "73": "  @Test\n",
        "74": "  public void hasEdgeConnecting_correct() {\n",
        "75": "    putEdge(N1, N2);\n",
        "76": "    assertThat(graph.hasEdgeConnecting(EndpointPair.ordered(N1, N2))).isTrue();\n",
        "77": "  }\n",
        "78": "\n",
        "79": "  @Test\n",
        "80": "  public void hasEdgeConnecting_backwards() {\n",
        "81": "    putEdge(N1, N2);\n",
        "82": "    assertThat(graph.hasEdgeConnecting(EndpointPair.ordered(N2, N1))).isFalse();\n",
        "83": "  }\n",
        "84": "\n",
        "85": "  @Test\n",
        "86": "  public void hasEdgeConnecting_mismatch() {\n",
        "87": "    putEdge(N1, N2);\n",
        "88": "    assertThat(graph.hasEdgeConnecting(EndpointPair.unordered(N1, N2))).isFalse();\n",
        "89": "    assertThat(graph.hasEdgeConnecting(EndpointPair.unordered(N2, N1))).isFalse();\n",
        "90": "  }\n",
        "91": "\n",
        "95": "  public void putEdge_existingNodes() {\n",
        "104": "  public void putEdge_existingEdgeBetweenSameNodes() {\n",
        "105": "    assertThat(putEdge(N1, N2)).isTrue();\n",
        "109": "  @Test\n",
        "110": "  public void putEdge_orderMismatch() {\n",
        "111": "    EndpointPair<Integer> endpoints = EndpointPair.unordered(N1, N2);\n",
        "112": "    try {\n",
        "113": "      putEdge(endpoints);\n",
        "114": "      fail(\"Expected IllegalArgumentException: \" + ENDPOINTS_MISMATCH);\n",
        "115": "    } catch (IllegalArgumentException e) {\n",
        "116": "      assertThat(e).hasMessageThat().contains(ENDPOINTS_MISMATCH);\n",
        "117": "    }\n",
        "118": "  }\n",
        "119": "\n",
        "134": "\n",
        "135": "  @Test\n",
        "136": "  public void removeEdge_orderMismatch() {\n",
        "137": "    putEdge(N1, N2);\n",
        "138": "    EndpointPair<Integer> endpoints = EndpointPair.unordered(N1, N2);\n",
        "139": "    try {\n",
        "140": "      graph.removeEdge(endpoints);\n",
        "141": "      fail(\"Expected IllegalArgumentException: \" + ENDPOINTS_MISMATCH);\n",
        "142": "    } catch (IllegalArgumentException e) {\n",
        "143": "      assertThat(e).hasMessageThat().contains(ENDPOINTS_MISMATCH);\n",
        "144": "    }\n",
        "145": "  }\n"
    },
    "removed": {
        "74": "  public void addEdge_existingNodes() {\n",
        "83": "  public void addEdge_existingEdgeBetweenSameNodes() {\n",
        "84": "    putEdge(N1, N2);\n"
    }
}