{
    "addition": {
        "46": "   * Adds {@code edge} connecting {@code nodeU} to {@code nodeV}.\n",
        "48": "   * <p>If the graph is directed, {@code edge} will be directed in this graph; otherwise, it will be\n",
        "49": "   * undirected.\n",
        "50": "   *\n",
        "51": "   * <p><b>{@code edge} must be unique to this graph</b>, just as a {@code Map} key must be. It must\n",
        "52": "   * also be non-null.\n",
        "61": "   * @throws IllegalArgumentException if {@code edge} already exists in the graph and does not\n",
        "62": "   *     connect {@code nodeU} to {@code nodeV}\n",
        "63": "   * @throws IllegalArgumentException if the introduction of the edge would violate {@link\n",
        "69": "  /**\n",
        "70": "   * Adds {@code edge} connecting {@code endpoints}. In an undirected network, {@code edge} will\n",
        "71": "   * also connect {@code nodeV} to {@code nodeU}.\n",
        "72": "   *\n",
        "73": "   * <p>If this graph is directed, {@code edge} will be directed in this graph; if it is undirected,\n",
        "74": "   * {@code edge} will be undirected in this graph.\n",
        "75": "   *\n",
        "76": "   * <p>If this graph is directed, {@code endpoints} must be ordered.\n",
        "77": "   *\n",
        "78": "   * <p><b>{@code edge} must be unique to this graph</b>, just as a {@code Map} key must be. It must\n",
        "79": "   * also be non-null.\n",
        "80": "   *\n",
        "81": "   * <p>If either or both endpoints are not already present in this graph, this method will silently\n",
        "82": "   * {@link #addNode(Object) add} each missing endpoint to the graph.\n",
        "83": "   *\n",
        "84": "   * <p>If {@code edge} already connects an endpoint pair equal to {@code endpoints}, then this\n",
        "85": "   * method will have no effect.\n",
        "86": "   *\n",
        "87": "   * @return {@code true} if the network was modified as a result of this call\n",
        "88": "   * @throws IllegalArgumentException if {@code edge} already exists in the graph and connects some\n",
        "89": "   *     other endpoint pair that is not equal to {@code endpoints}\n",
        "90": "   * @throws IllegalArgumentException if the introduction of the edge would violate {@link\n",
        "91": "   *     #allowsParallelEdges()} or {@link #allowsSelfLoops()}\n",
        "92": "   * @throws IllegalArgumentException if the endpoints are unordered and the graph is directed\n",
        "93": "   */\n",
        "94": "  @CanIgnoreReturnValue\n",
        "95": "  boolean addEdge(EndpointPair<N> endpoints, E edge);\n",
        "96": "\n"
    },
    "removed": {
        "46": "   * Adds {@code edge} connecting {@code nodeU} to {@code nodeV}. In an undirected network, the edge\n",
        "47": "   * will also connect {@code nodeV} to {@code nodeU}.\n",
        "49": "   * <p><b>Edges must be unique</b>, just as {@code Map} keys must be. They must also be non-null.\n",
        "58": "   * @throws IllegalArgumentException if {@code edge} already exists and does not connect {@code\n",
        "59": "   *     nodeU} to {@code nodeV}, or if the introduction of the edge would violate {@link\n"
    }
}