{
    "addition": {
        "19": "import static com.google.common.graph.GraphConstants.ENDPOINTS_MISMATCH;\n",
        "22": "import static com.google.common.truth.Truth8.assertThat;\n",
        "23": "import static org.junit.Assert.fail;\n",
        "25": "import java.util.Optional;\n",
        "118": "  @Test\n",
        "119": "  public void hasEdgeConnecting_directed_correct() {\n",
        "120": "    graph = ValueGraphBuilder.directed().build();\n",
        "121": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "122": "    assertThat(graph.hasEdgeConnecting(EndpointPair.ordered(1, 2))).isTrue();\n",
        "123": "  }\n",
        "124": "\n",
        "125": "  @Test\n",
        "126": "  public void hasEdgeConnecting_directed_backwards() {\n",
        "127": "    graph = ValueGraphBuilder.directed().build();\n",
        "128": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "129": "    assertThat(graph.hasEdgeConnecting(EndpointPair.ordered(2, 1))).isFalse();\n",
        "130": "  }\n",
        "131": "\n",
        "132": "  @Test\n",
        "133": "  public void hasEdgeConnecting_directed_mismatch() {\n",
        "134": "    graph = ValueGraphBuilder.directed().build();\n",
        "135": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "136": "    assertThat(graph.hasEdgeConnecting(EndpointPair.unordered(1, 2))).isFalse();\n",
        "137": "    assertThat(graph.hasEdgeConnecting(EndpointPair.unordered(2, 1))).isFalse();\n",
        "138": "  }\n",
        "139": "\n",
        "140": "  @Test\n",
        "141": "  public void hasEdgeConnecting_undirected_correct() {\n",
        "142": "    graph = ValueGraphBuilder.undirected().build();\n",
        "143": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "144": "    assertThat(graph.hasEdgeConnecting(EndpointPair.unordered(1, 2))).isTrue();\n",
        "145": "  }\n",
        "146": "\n",
        "147": "  @Test\n",
        "148": "  public void hasEdgeConnecting_undirected_backwards() {\n",
        "149": "    graph = ValueGraphBuilder.undirected().build();\n",
        "150": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "151": "    assertThat(graph.hasEdgeConnecting(EndpointPair.unordered(2, 1))).isTrue();\n",
        "152": "  }\n",
        "153": "\n",
        "154": "  @Test\n",
        "155": "  public void hasEdgeConnecting_undirected_mismatch() {\n",
        "156": "    graph = ValueGraphBuilder.undirected().build();\n",
        "157": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "158": "    assertThat(graph.hasEdgeConnecting(EndpointPair.ordered(1, 2))).isTrue();\n",
        "159": "    assertThat(graph.hasEdgeConnecting(EndpointPair.ordered(2, 1))).isTrue();\n",
        "160": "  }\n",
        "161": "\n",
        "162": "  @Test\n",
        "163": "  public void edgeValue_directed_correct() {\n",
        "164": "    graph = ValueGraphBuilder.directed().build();\n",
        "165": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "166": "    assertThat(graph.edgeValue(EndpointPair.ordered(1, 2))).hasValue(\"A\");\n",
        "167": "  }\n",
        "168": "\n",
        "169": "  @Test\n",
        "170": "  public void edgeValue_directed_backwards() {\n",
        "171": "    graph = ValueGraphBuilder.directed().build();\n",
        "172": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "173": "    assertThat(graph.edgeValue(EndpointPair.ordered(2, 1))).isEmpty();\n",
        "174": "  }\n",
        "175": "\n",
        "176": "  @Test\n",
        "177": "  public void edgeValue_directed_mismatch() {\n",
        "178": "    graph = ValueGraphBuilder.directed().build();\n",
        "179": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "180": "    try {\n",
        "181": "      Optional<String> unused = graph.edgeValue(EndpointPair.unordered(1, 2));\n",
        "182": "      unused = graph.edgeValue(EndpointPair.unordered(2, 1));\n",
        "183": "      fail(\"Expected IllegalArgumentException: \" + ENDPOINTS_MISMATCH);\n",
        "184": "    } catch (IllegalArgumentException e) {\n",
        "185": "      assertThat(e).hasMessageThat().contains(ENDPOINTS_MISMATCH);\n",
        "186": "    }\n",
        "187": "  }\n",
        "188": "\n",
        "189": "  @Test\n",
        "190": "  public void edgeValue_undirected_correct() {\n",
        "191": "    graph = ValueGraphBuilder.undirected().build();\n",
        "192": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "193": "    assertThat(graph.edgeValue(EndpointPair.unordered(1, 2))).hasValue(\"A\");\n",
        "194": "  }\n",
        "195": "\n",
        "196": "  @Test\n",
        "197": "  public void edgeValue_undirected_backwards() {\n",
        "198": "    graph = ValueGraphBuilder.undirected().build();\n",
        "199": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "200": "    assertThat(graph.edgeValue(EndpointPair.unordered(2, 1))).hasValue(\"A\");\n",
        "201": "  }\n",
        "202": "\n",
        "203": "  @Test\n",
        "204": "  public void edgeValue_undirected_mismatch() {\n",
        "205": "    graph = ValueGraphBuilder.undirected().build();\n",
        "206": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "207": "    assertThat(graph.edgeValue(EndpointPair.ordered(1, 2))).hasValue(\"A\");\n",
        "208": "    assertThat(graph.edgeValue(EndpointPair.ordered(2, 1))).hasValue(\"A\");\n",
        "209": "  }\n",
        "210": "\n",
        "211": "  @Test\n",
        "212": "  public void edgeValueOrDefault_directed_correct() {\n",
        "213": "    graph = ValueGraphBuilder.directed().build();\n",
        "214": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "215": "    assertThat(graph.edgeValueOrDefault(EndpointPair.ordered(1, 2), \"default\")).isEqualTo(\"A\");\n",
        "216": "  }\n",
        "217": "\n",
        "218": "  @Test\n",
        "219": "  public void edgeValueOrDefault_directed_backwards() {\n",
        "220": "    graph = ValueGraphBuilder.directed().build();\n",
        "221": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "222": "    assertThat(graph.edgeValueOrDefault(EndpointPair.ordered(2, 1), \"default\"))\n",
        "223": "        .isEqualTo(\"default\");\n",
        "224": "  }\n",
        "225": "\n",
        "226": "  @Test\n",
        "227": "  public void edgeValueOrDefault_directed_mismatch() {\n",
        "228": "    graph = ValueGraphBuilder.directed().build();\n",
        "229": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "230": "    try {\n",
        "231": "      String unused = graph.edgeValueOrDefault(EndpointPair.unordered(1, 2), \"default\");\n",
        "232": "      unused = graph.edgeValueOrDefault(EndpointPair.unordered(2, 1), \"default\");\n",
        "233": "      fail(\"Expected IllegalArgumentException: \" + ENDPOINTS_MISMATCH);\n",
        "234": "    } catch (IllegalArgumentException e) {\n",
        "235": "      assertThat(e).hasMessageThat().contains(ENDPOINTS_MISMATCH);\n",
        "236": "    }\n",
        "237": "  }\n",
        "238": "\n",
        "239": "  @Test\n",
        "240": "  public void edgeValueOrDefault_undirected_correct() {\n",
        "241": "    graph = ValueGraphBuilder.undirected().build();\n",
        "242": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "243": "    assertThat(graph.edgeValueOrDefault(EndpointPair.unordered(1, 2), \"default\")).isEqualTo(\"A\");\n",
        "244": "  }\n",
        "245": "\n",
        "246": "  @Test\n",
        "247": "  public void edgeValueOrDefault_undirected_backwards() {\n",
        "248": "    graph = ValueGraphBuilder.undirected().build();\n",
        "249": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "250": "    assertThat(graph.edgeValueOrDefault(EndpointPair.unordered(2, 1), \"default\")).isEqualTo(\"A\");\n",
        "251": "  }\n",
        "252": "\n",
        "253": "  @Test\n",
        "254": "  public void edgeValueOrDefault_undirected_mismatch() {\n",
        "255": "    graph = ValueGraphBuilder.undirected().build();\n",
        "256": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "257": "    assertThat(graph.edgeValueOrDefault(EndpointPair.ordered(2, 1), \"default\")).isEqualTo(\"A\");\n",
        "258": "    assertThat(graph.edgeValueOrDefault(EndpointPair.ordered(2, 1), \"default\")).isEqualTo(\"A\");\n",
        "259": "  }\n",
        "260": "\n",
        "271": "  @Test\n",
        "272": "  public void putEdgeValue_directed_orderMismatch() {\n",
        "273": "    graph = ValueGraphBuilder.directed().build();\n",
        "274": "    try {\n",
        "275": "      graph.putEdgeValue(EndpointPair.unordered(1, 2), \"irrelevant\");\n",
        "276": "      fail(\"Expected IllegalArgumentException: \" + ENDPOINTS_MISMATCH);\n",
        "277": "    } catch (IllegalArgumentException e) {\n",
        "278": "      assertThat(e).hasMessageThat().contains(ENDPOINTS_MISMATCH);\n",
        "279": "    }\n",
        "280": "  }\n",
        "281": "\n",
        "282": "  @Test\n",
        "283": "  public void putEdgeValue_undirected_orderMismatch() {\n",
        "284": "    graph = ValueGraphBuilder.undirected().build();\n",
        "285": "    assertThat(graph.putEdgeValue(EndpointPair.ordered(1, 2), \"irrelevant\")).isNull();\n",
        "286": "  }\n",
        "287": "\n",
        "327": "  @Test\n",
        "328": "  public void removeEdge_directed_orderMismatch() {\n",
        "329": "    graph = ValueGraphBuilder.directed().build();\n",
        "330": "    graph.putEdgeValue(1, 2, \"1->2\");\n",
        "331": "    graph.putEdgeValue(2, 1, \"2->1\");\n",
        "332": "    try {\n",
        "333": "      graph.removeEdge(EndpointPair.unordered(1, 2));\n",
        "334": "      graph.removeEdge(EndpointPair.unordered(2, 1));\n",
        "335": "      fail(\"Expected IllegalArgumentException: \" + ENDPOINTS_MISMATCH);\n",
        "336": "    } catch (IllegalArgumentException e) {\n",
        "337": "      assertThat(e).hasMessageThat().contains(ENDPOINTS_MISMATCH);\n",
        "338": "    }\n",
        "339": "  }\n",
        "340": "\n",
        "341": "  @Test\n",
        "342": "  public void removeEdge_undirected_orderMismatch() {\n",
        "343": "    graph = ValueGraphBuilder.undirected().build();\n",
        "344": "    graph.putEdgeValue(1, 2, \"1-2\");\n",
        "345": "    assertThat(graph.removeEdge(EndpointPair.ordered(1, 2))).isEqualTo(\"1-2\");\n",
        "346": "  }\n",
        "347": "\n"
    },
    "removed": {}
}