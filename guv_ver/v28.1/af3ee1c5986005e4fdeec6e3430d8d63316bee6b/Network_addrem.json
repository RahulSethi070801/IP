{
    "addition": {
        "274": "   * Returns the set of edges that each directly connect {@code nodeU} to {@code nodeV}.\n",
        "288": "   * Returns the set of edges that each directly connect {@code endpoints} (in the order, if any,\n",
        "289": "   * specified by {@code endpoints}).\n",
        "290": "   *\n",
        "291": "   * <p>The resulting set of edges will be parallel (i.e. have equal {@link #incidentNodes(Object)}.\n",
        "292": "   * If this network does not {@link #allowsParallelEdges() allow parallel edges}, the resulting set\n",
        "293": "   * will contain at most one edge (equivalent to {@code edgeConnecting(endpoints).asSet()}).\n",
        "294": "   *\n",
        "295": "   * <p>If this network is directed, {@code endpoints} must be ordered.\n",
        "296": "   *\n",
        "297": "   * @throws IllegalArgumentException if either endpoint is not an element of this network\n",
        "298": "   * @throws IllegalArgumentException if the endpoints are unordered and the graph is directed\n",
        "299": "   * @since NEXT\n",
        "300": "   */\n",
        "301": "  Set<E> edgesConnecting(EndpointPair<N> endpoints);\n",
        "302": "\n",
        "303": "  /**\n",
        "304": "   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n",
        "305": "   * present, or {@code null} if no such edge exists.\n",
        "319": "   * Returns the single edge that directly connects {@code endpoints} (in the order, if any,\n",
        "320": "   * specified by {@code endpoints}), if one is present, or {@code null} if no such edge exists.\n",
        "321": "   *\n",
        "322": "   * <p>If this graph is directed, the endpoints must be ordered.\n",
        "323": "   *\n",
        "324": "   * @throws IllegalArgumentException if there are multiple parallel edges connecting {@code nodeU}\n",
        "325": "   *     to {@code nodeV}\n",
        "326": "   * @throws IllegalArgumentException if either endpoint is not an element of this network\n",
        "327": "   * @throws IllegalArgumentException if the endpoints are unordered and the graph is directed\n",
        "328": "   * @since NEXT\n",
        "329": "   */\n",
        "330": "  @NullableDecl\n",
        "331": "  E edgeConnectingOrNull(EndpointPair<N> endpoints);\n",
        "332": "\n",
        "333": "  /**\n",
        "334": "   * Returns true if there is an edge that directly connects {@code nodeU} to {@code nodeV}. This is\n",
        "344": "  /**\n",
        "345": "   * Returns true if there is an edge that directly connects {@code endpoints} (in the order, if\n",
        "346": "   * any, specified by {@code endpoints}).\n",
        "347": "   *\n",
        "348": "   * <p>Unlike the other {@code EndpointPair}-accepting methods, this method does not throw if the\n",
        "349": "   * endpoints are unordered and the graph is directed; it simply returns {@code false}. This is for\n",
        "350": "   * consistency with {@link Graph#hasEdgeConnecting(EndpointPair)} and {@link\n",
        "351": "   * ValueGraph#hasEdgeConnecting(EndpointPair)}.\n",
        "352": "   *\n",
        "353": "   * @since NEXT\n",
        "354": "   */\n",
        "355": "  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n",
        "356": "\n"
    },
    "removed": {
        "274": "   * Returns the set of edges directly connecting {@code nodeU} to {@code nodeV}.\n",
        "288": "   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n",
        "289": "   * or {@code null} if no such edge exists.\n",
        "303": "   * Returns true if there is an edge directly connecting {@code nodeU} to {@code nodeV}. This is\n"
    }
}