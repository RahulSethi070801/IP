{
    "addition": {
        "20": "import static com.google.common.truth.Truth8.assertThat;\n",
        "36": "  private static final EndpointPair<Integer> ENDPOINTS_N1N2 = EndpointPair.ordered(N1, N2);\n",
        "37": "  private static final EndpointPair<Integer> ENDPOINTS_N2N1 = EndpointPair.ordered(N2, N1);\n",
        "58": "  @Test\n",
        "59": "  public void edges_containsOrderMismatch() {\n",
        "60": "    addEdge(N1, N2, E12);\n",
        "61": "    assertThat(network.asGraph().edges()).contains(ENDPOINTS_N2N1);\n",
        "62": "    assertThat(network.asGraph().edges()).contains(ENDPOINTS_N1N2);\n",
        "63": "  }\n",
        "64": "\n",
        "65": "  @Test\n",
        "66": "  public void edgesConnecting_orderMismatch() {\n",
        "67": "    addEdge(N1, N2, E12);\n",
        "68": "    assertThat(network.edgesConnecting(ENDPOINTS_N2N1)).containsExactly(E12);\n",
        "69": "    assertThat(network.edgesConnecting(ENDPOINTS_N1N2)).containsExactly(E12);\n",
        "70": "  }\n",
        "71": "\n",
        "72": "  @Test\n",
        "73": "  public void edgeConnecting_orderMismatch() {\n",
        "74": "    addEdge(N1, N2, E12);\n",
        "75": "    assertThat(network.edgeConnecting(ENDPOINTS_N2N1)).hasValue(E12);\n",
        "76": "    assertThat(network.edgeConnecting(ENDPOINTS_N1N2)).hasValue(E12);\n",
        "77": "  }\n",
        "78": "\n",
        "79": "  @Test\n",
        "80": "  public void edgeConnectingOrNull_orderMismatch() {\n",
        "81": "    addEdge(N1, N2, E12);\n",
        "82": "    assertThat(network.edgeConnectingOrNull(ENDPOINTS_N2N1)).isEqualTo(E12);\n",
        "83": "    assertThat(network.edgeConnectingOrNull(ENDPOINTS_N1N2)).isEqualTo(E12);\n",
        "84": "  }\n",
        "85": "\n",
        "151": "    assertThat(addEdge(N1, N2, E12)).isTrue();\n",
        "187": "\n",
        "188": "  @Test\n",
        "189": "  public void addEdge_orderMismatch() {\n",
        "190": "    EndpointPair<Integer> endpoints = EndpointPair.ordered(N1, N2);\n",
        "191": "    assertThat(addEdge(endpoints, E12)).isTrue();\n",
        "192": "  }\n"
    },
    "removed": {
        "120": "    addEdge(N1, N2, E12);\n"
    }
}