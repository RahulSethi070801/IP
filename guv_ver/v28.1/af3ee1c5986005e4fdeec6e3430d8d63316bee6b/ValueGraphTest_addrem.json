{
    "addition": {
        "19": "import static com.google.common.graph.GraphConstants.ENDPOINTS_MISMATCH;\n",
        "22": "import static org.junit.Assert.fail;\n",
        "116": "  @Test\n",
        "117": "  public void hasEdgeConnecting_directed_correct() {\n",
        "118": "    graph = ValueGraphBuilder.directed().build();\n",
        "119": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "120": "    assertThat(graph.hasEdgeConnecting(EndpointPair.ordered(1, 2))).isTrue();\n",
        "121": "  }\n",
        "122": "\n",
        "123": "  @Test\n",
        "124": "  public void hasEdgeConnecting_directed_backwards() {\n",
        "125": "    graph = ValueGraphBuilder.directed().build();\n",
        "126": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "127": "    assertThat(graph.hasEdgeConnecting(EndpointPair.ordered(2, 1))).isFalse();\n",
        "128": "  }\n",
        "129": "\n",
        "130": "  @Test\n",
        "131": "  public void hasEdgeConnecting_directed_mismatch() {\n",
        "132": "    graph = ValueGraphBuilder.directed().build();\n",
        "133": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "134": "    assertThat(graph.hasEdgeConnecting(EndpointPair.unordered(1, 2))).isFalse();\n",
        "135": "    assertThat(graph.hasEdgeConnecting(EndpointPair.unordered(2, 1))).isFalse();\n",
        "136": "  }\n",
        "137": "\n",
        "138": "  @Test\n",
        "139": "  public void hasEdgeConnecting_undirected_correct() {\n",
        "140": "    graph = ValueGraphBuilder.undirected().build();\n",
        "141": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "142": "    assertThat(graph.hasEdgeConnecting(EndpointPair.unordered(1, 2))).isTrue();\n",
        "143": "  }\n",
        "144": "\n",
        "145": "  @Test\n",
        "146": "  public void hasEdgeConnecting_undirected_backwards() {\n",
        "147": "    graph = ValueGraphBuilder.undirected().build();\n",
        "148": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "149": "    assertThat(graph.hasEdgeConnecting(EndpointPair.unordered(2, 1))).isTrue();\n",
        "150": "  }\n",
        "151": "\n",
        "152": "  @Test\n",
        "153": "  public void hasEdgeConnecting_undirected_mismatch() {\n",
        "154": "    graph = ValueGraphBuilder.undirected().build();\n",
        "155": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "156": "    assertThat(graph.hasEdgeConnecting(EndpointPair.ordered(1, 2))).isTrue();\n",
        "157": "    assertThat(graph.hasEdgeConnecting(EndpointPair.ordered(2, 1))).isTrue();\n",
        "158": "  }\n",
        "159": "\n",
        "160": "  @Test\n",
        "161": "  public void edgeValueOrDefault_directed_correct() {\n",
        "162": "    graph = ValueGraphBuilder.directed().build();\n",
        "163": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "164": "    assertThat(graph.edgeValueOrDefault(EndpointPair.ordered(1, 2), \"default\")).isEqualTo(\"A\");\n",
        "165": "  }\n",
        "166": "\n",
        "167": "  @Test\n",
        "168": "  public void edgeValueOrDefault_directed_backwards() {\n",
        "169": "    graph = ValueGraphBuilder.directed().build();\n",
        "170": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "171": "    assertThat(graph.edgeValueOrDefault(EndpointPair.ordered(2, 1), \"default\"))\n",
        "172": "        .isEqualTo(\"default\");\n",
        "173": "  }\n",
        "174": "\n",
        "175": "  @Test\n",
        "176": "  public void edgeValueOrDefault_directed_mismatch() {\n",
        "177": "    graph = ValueGraphBuilder.directed().build();\n",
        "178": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "179": "    try {\n",
        "180": "      String unused = graph.edgeValueOrDefault(EndpointPair.unordered(1, 2), \"default\");\n",
        "181": "      unused = graph.edgeValueOrDefault(EndpointPair.unordered(2, 1), \"default\");\n",
        "182": "      fail(\"Expected IllegalArgumentException: \" + ENDPOINTS_MISMATCH);\n",
        "183": "    } catch (IllegalArgumentException e) {\n",
        "184": "      assertThat(e).hasMessageThat().contains(ENDPOINTS_MISMATCH);\n",
        "185": "    }\n",
        "186": "  }\n",
        "187": "\n",
        "188": "  @Test\n",
        "189": "  public void edgeValueOrDefault_undirected_correct() {\n",
        "190": "    graph = ValueGraphBuilder.undirected().build();\n",
        "191": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "192": "    assertThat(graph.edgeValueOrDefault(EndpointPair.unordered(1, 2), \"default\")).isEqualTo(\"A\");\n",
        "193": "  }\n",
        "194": "\n",
        "195": "  @Test\n",
        "196": "  public void edgeValueOrDefault_undirected_backwards() {\n",
        "197": "    graph = ValueGraphBuilder.undirected().build();\n",
        "198": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "199": "    assertThat(graph.edgeValueOrDefault(EndpointPair.unordered(2, 1), \"default\")).isEqualTo(\"A\");\n",
        "200": "  }\n",
        "201": "\n",
        "202": "  @Test\n",
        "203": "  public void edgeValueOrDefault_undirected_mismatch() {\n",
        "204": "    graph = ValueGraphBuilder.undirected().build();\n",
        "205": "    graph.putEdgeValue(1, 2, \"A\");\n",
        "206": "    assertThat(graph.edgeValueOrDefault(EndpointPair.ordered(2, 1), \"default\")).isEqualTo(\"A\");\n",
        "207": "    assertThat(graph.edgeValueOrDefault(EndpointPair.ordered(2, 1), \"default\")).isEqualTo(\"A\");\n",
        "208": "  }\n",
        "209": "\n",
        "220": "  @Test\n",
        "221": "  public void putEdgeValue_directed_orderMismatch() {\n",
        "222": "    graph = ValueGraphBuilder.directed().build();\n",
        "223": "    try {\n",
        "224": "      graph.putEdgeValue(EndpointPair.unordered(1, 2), \"irrelevant\");\n",
        "225": "      fail(\"Expected IllegalArgumentException: \" + ENDPOINTS_MISMATCH);\n",
        "226": "    } catch (IllegalArgumentException e) {\n",
        "227": "      assertThat(e).hasMessageThat().contains(ENDPOINTS_MISMATCH);\n",
        "228": "    }\n",
        "229": "  }\n",
        "230": "\n",
        "231": "  @Test\n",
        "232": "  public void putEdgeValue_undirected_orderMismatch() {\n",
        "233": "    graph = ValueGraphBuilder.undirected().build();\n",
        "234": "    assertThat(graph.putEdgeValue(EndpointPair.ordered(1, 2), \"irrelevant\")).isNull();\n",
        "235": "  }\n",
        "236": "\n",
        "276": "  @Test\n",
        "277": "  public void removeEdge_directed_orderMismatch() {\n",
        "278": "    graph = ValueGraphBuilder.directed().build();\n",
        "279": "    graph.putEdgeValue(1, 2, \"1->2\");\n",
        "280": "    graph.putEdgeValue(2, 1, \"2->1\");\n",
        "281": "    try {\n",
        "282": "      graph.removeEdge(EndpointPair.unordered(1, 2));\n",
        "283": "      graph.removeEdge(EndpointPair.unordered(2, 1));\n",
        "284": "      fail(\"Expected IllegalArgumentException: \" + ENDPOINTS_MISMATCH);\n",
        "285": "    } catch (IllegalArgumentException e) {\n",
        "286": "      assertThat(e).hasMessageThat().contains(ENDPOINTS_MISMATCH);\n",
        "287": "    }\n",
        "288": "  }\n",
        "289": "\n",
        "290": "  @Test\n",
        "291": "  public void removeEdge_undirected_orderMismatch() {\n",
        "292": "    graph = ValueGraphBuilder.undirected().build();\n",
        "293": "    graph.putEdgeValue(1, 2, \"1-2\");\n",
        "294": "    assertThat(graph.removeEdge(EndpointPair.ordered(1, 2))).isEqualTo(\"1-2\");\n",
        "295": "  }\n",
        "296": "\n"
    },
    "removed": {}
}