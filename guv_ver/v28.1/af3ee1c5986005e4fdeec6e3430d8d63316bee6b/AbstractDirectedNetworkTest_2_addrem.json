{
    "addition": {
        "19": "import static com.google.common.graph.GraphConstants.ENDPOINTS_MISMATCH;\n",
        "26": "import java.util.Optional;\n",
        "64": "  @Test\n",
        "65": "  public void edges_containsOrderMismatch() {\n",
        "66": "    addEdge(N1, N2, E12);\n",
        "67": "    EndpointPair<Integer> endpointsN1N2 = EndpointPair.unordered(N1, N2);\n",
        "68": "    EndpointPair<Integer> endpointsN2N1 = EndpointPair.unordered(N2, N1);\n",
        "69": "    assertThat(network.asGraph().edges()).doesNotContain(endpointsN1N2);\n",
        "70": "    assertThat(network.asGraph().edges()).doesNotContain(endpointsN2N1);\n",
        "71": "  }\n",
        "72": "\n",
        "73": "  @Test\n",
        "74": "  public void edgesConnecting_orderMismatch() {\n",
        "75": "    addEdge(N1, N2, E12);\n",
        "76": "    try {\n",
        "77": "      Set<String> unused = network.edgesConnecting(EndpointPair.unordered(N1, N2));\n",
        "78": "      fail(\"Expected IllegalArgumentException: \" + ENDPOINTS_MISMATCH);\n",
        "79": "    } catch (IllegalArgumentException e) {\n",
        "80": "      assertThat(e).hasMessageThat().contains(ENDPOINTS_MISMATCH);\n",
        "81": "    }\n",
        "82": "  }\n",
        "83": "\n",
        "84": "  @Test\n",
        "85": "  public void edgeConnecting_orderMismatch() {\n",
        "86": "    addEdge(N1, N2, E12);\n",
        "87": "    try {\n",
        "88": "      Optional<String> unused = network.edgeConnecting(EndpointPair.unordered(N1, N2));\n",
        "89": "      fail(\"Expected IllegalArgumentException: \" + ENDPOINTS_MISMATCH);\n",
        "90": "    } catch (IllegalArgumentException e) {\n",
        "91": "      assertThat(e).hasMessageThat().contains(ENDPOINTS_MISMATCH);\n",
        "92": "    }\n",
        "93": "  }\n",
        "94": "\n",
        "95": "  @Test\n",
        "96": "  public void edgeConnectingOrNull_orderMismatch() {\n",
        "97": "    addEdge(N1, N2, E12);\n",
        "98": "    try {\n",
        "99": "      String unused = network.edgeConnectingOrNull(EndpointPair.unordered(N1, N2));\n",
        "100": "      fail(\"Expected IllegalArgumentException: \" + ENDPOINTS_MISMATCH);\n",
        "101": "    } catch (IllegalArgumentException e) {\n",
        "102": "      assertThat(e).hasMessageThat().contains(ENDPOINTS_MISMATCH);\n",
        "103": "    }\n",
        "104": "  }\n",
        "105": "\n",
        "234": "      assertThat(e).hasMessageThat().contains(ERROR_REUSE_EDGE);\n",
        "241": "      assertThat(e).hasMessageThat().contains(ERROR_REUSE_EDGE);\n",
        "252": "      assertThat(e).hasMessageThat().contains(ERROR_PARALLEL_EDGE);\n",
        "253": "    }\n",
        "254": "  }\n",
        "255": "\n",
        "256": "  @Test\n",
        "257": "  public void addEdge_orderMismatch() {\n",
        "258": "    EndpointPair<Integer> endpoints = EndpointPair.unordered(N1, N2);\n",
        "259": "    try {\n",
        "260": "      addEdge(endpoints, E12);\n",
        "261": "      fail(\"Expected IllegalArgumentException: \" + ENDPOINTS_MISMATCH);\n",
        "262": "    } catch (IllegalArgumentException e) {\n",
        "263": "      assertThat(e).hasMessageThat().contains(ENDPOINTS_MISMATCH);\n"
    },
    "removed": {
        "190": "      assertThat(e.getMessage()).contains(ERROR_REUSE_EDGE);\n",
        "197": "      assertThat(e.getMessage()).contains(ERROR_REUSE_EDGE);\n",
        "208": "      assertThat(e.getMessage()).contains(ERROR_PARALLEL_EDGE);\n"
    }
}