{
    "addition": {
        "206": "  public void endpointPair_undirected_contains() {\n",
        "217": "    // ordered endpoints OK for undirected graph (because ordering is irrelevant)\n",
        "218": "    assertThat(edges).contains(EndpointPair.ordered(N1, N2));\n",
        "219": "\n",
        "220": "    assertThat(edges).doesNotContain(EndpointPair.unordered(N2, N2)); // edge not present\n",
        "224": "  @Test\n",
        "225": "  public void endpointPair_directed_contains() {\n",
        "226": "    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "227": "    directedGraph.putEdge(N1, N1);\n",
        "228": "    directedGraph.putEdge(N1, N2);\n",
        "229": "    Set<EndpointPair<Integer>> edges = directedGraph.edges();\n",
        "230": "\n",
        "231": "    assertThat(edges).hasSize(2);\n",
        "232": "    assertThat(edges).contains(EndpointPair.ordered(N1, N1));\n",
        "233": "    assertThat(edges).contains(EndpointPair.ordered(N1, N2));\n",
        "234": "\n",
        "235": "    // unordered endpoints not OK for directed graph (undefined behavior)\n",
        "236": "    assertThat(edges).doesNotContain(EndpointPair.unordered(N1, N2));\n",
        "237": "\n",
        "238": "    assertThat(edges).doesNotContain(EndpointPair.ordered(N2, N1)); // wrong order\n",
        "239": "    assertThat(edges).doesNotContain(EndpointPair.ordered(N2, N2)); // edge not present\n",
        "240": "    assertThat(edges).doesNotContain(EndpointPair.ordered(N3, N4)); // nodes not in graph\n",
        "241": "  }\n",
        "242": "\n"
    },
    "removed": {
        "206": "  public void endpointPair_containment() {\n",
        "217": "    assertThat(edges).doesNotContain(EndpointPair.unordered(N2, N2));\n",
        "218": "    assertThat(edges).doesNotContain(EndpointPair.ordered(N1, N2)); // graph not directed\n"
    }
}