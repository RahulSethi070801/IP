{
    "addition": {
        "35": "  private static final EndpointPair<Integer> ENDPOINTS_N1N2 = EndpointPair.ordered(N1, N2);\n",
        "36": "  private static final EndpointPair<Integer> ENDPOINTS_N2N1 = EndpointPair.ordered(N2, N1);\n",
        "57": "  @Test\n",
        "58": "  public void edges_containsOrderMismatch() {\n",
        "59": "    addEdge(N1, N2, E12);\n",
        "60": "    assertThat(network.asGraph().edges()).contains(ENDPOINTS_N2N1);\n",
        "61": "    assertThat(network.asGraph().edges()).contains(ENDPOINTS_N1N2);\n",
        "62": "  }\n",
        "63": "\n",
        "64": "  @Test\n",
        "65": "  public void edgesConnecting_orderMismatch() {\n",
        "66": "    addEdge(N1, N2, E12);\n",
        "67": "    assertThat(network.edgesConnecting(ENDPOINTS_N2N1)).containsExactly(E12);\n",
        "68": "    assertThat(network.edgesConnecting(ENDPOINTS_N1N2)).containsExactly(E12);\n",
        "69": "  }\n",
        "70": "\n",
        "71": "  @Test\n",
        "72": "  public void edgeConnectingOrNull_orderMismatch() {\n",
        "73": "    addEdge(N1, N2, E12);\n",
        "74": "    assertThat(network.edgeConnectingOrNull(ENDPOINTS_N2N1)).isEqualTo(E12);\n",
        "75": "    assertThat(network.edgeConnectingOrNull(ENDPOINTS_N1N2)).isEqualTo(E12);\n",
        "76": "  }\n",
        "77": "\n",
        "143": "    assertThat(addEdge(N1, N2, E12)).isTrue();\n",
        "179": "\n",
        "180": "  @Test\n",
        "181": "  public void addEdge_orderMismatch() {\n",
        "182": "    EndpointPair<Integer> endpoints = EndpointPair.ordered(N1, N2);\n",
        "183": "    assertThat(addEdge(endpoints, E12)).isTrue();\n",
        "184": "  }\n"
    },
    "removed": {
        "120": "    addEdge(N1, N2, E12);\n"
    }
}