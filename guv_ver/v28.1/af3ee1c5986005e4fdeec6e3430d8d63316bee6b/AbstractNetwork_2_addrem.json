{
    "addition": {
        "19": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "20": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "21": "import static com.google.common.graph.GraphConstants.ENDPOINTS_MISMATCH;\n",
        "98": "            return isOrderingCompatible(endpointPair)\n",
        "175": "  @Override\n",
        "176": "  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n",
        "177": "    validateEndpoints(endpoints);\n",
        "178": "    return edgesConnecting(endpoints.nodeU(), endpoints.nodeV());\n",
        "179": "  }\n",
        "180": "\n",
        "192": "    return Optional.ofNullable(edgeConnectingOrNull(nodeU, nodeV));\n",
        "193": "  }\n",
        "194": "\n",
        "195": "  @Override\n",
        "196": "  public Optional<E> edgeConnecting(EndpointPair<N> endpoints) {\n",
        "197": "    validateEndpoints(endpoints);\n",
        "198": "    return edgeConnecting(endpoints.nodeU(), endpoints.nodeV());\n",
        "199": "  }\n",
        "200": "\n",
        "201": "  @Override\n",
        "202": "  public @Nullable E edgeConnectingOrNull(N nodeU, N nodeV) {\n",
        "206": "        return null;\n",
        "208": "        return edgesConnecting.iterator().next();\n",
        "215": "  public @Nullable E edgeConnectingOrNull(EndpointPair<N> endpoints) {\n",
        "216": "    validateEndpoints(endpoints);\n",
        "217": "    return edgeConnectingOrNull(endpoints.nodeU(), endpoints.nodeV());\n",
        "225": "  @Override\n",
        "226": "  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n",
        "227": "    checkNotNull(endpoints);\n",
        "228": "    if (!isOrderingCompatible(endpoints)) {\n",
        "229": "      return false;\n",
        "230": "    }\n",
        "231": "    return !edgesConnecting(endpoints.nodeU(), endpoints.nodeV()).isEmpty();\n",
        "232": "  }\n",
        "233": "\n",
        "234": "  /**\n",
        "235": "   * Throws an IllegalArgumentException if the ordering of {@code endpoints} is not compatible\n",
        "236": "   * with the directionality of this graph.\n",
        "237": "   */\n",
        "238": "  protected final void validateEndpoints(EndpointPair<?> endpoints) {\n",
        "239": "    checkNotNull(endpoints);\n",
        "240": "    checkArgument(isOrderingCompatible(endpoints), ENDPOINTS_MISMATCH);\n",
        "241": "  }\n",
        "242": "\n",
        "243": "  protected final boolean isOrderingCompatible(EndpointPair<?> endpoints) {\n",
        "244": "    return endpoints.isOrdered() || !this.isDirected();\n",
        "245": "  }\n",
        "246": "\n"
    },
    "removed": {
        "95": "            return isDirected() == endpointPair.isOrdered()\n",
        "186": "        return Optional.empty();\n",
        "188": "        return Optional.of(edgesConnecting.iterator().next());\n",
        "195": "  public @Nullable E edgeConnectingOrNull(N nodeU, N nodeV) {\n",
        "196": "    return edgeConnecting(nodeU, nodeV).orElse(null);\n"
    }
}