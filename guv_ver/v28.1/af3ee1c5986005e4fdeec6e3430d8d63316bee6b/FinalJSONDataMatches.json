[{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_1.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableValueGraph.java","addlines":[135,136,137,138,139,140,141,142,143,144,147,148,149,150,158,159,160,161,446,447,448,449,462,463,464,465,215,216,217,218,219,220,221,222,95,96,97,225,98,226,99,227,100,228,101,229,230,231,232,122,123,124,125,126],"dellines":[],"addcode":["  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    checkNotNull(endpoints);\n","    return isOrderingCompatible(endpoints)\n","        && hasEdgeConnecting_internal(endpoints.nodeU(), endpoints.nodeV());\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    return delegate().hasEdgeConnecting(endpoints);\n","  }\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    return delegate().hasEdgeConnecting(endpoints);\n","  }\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    return delegate().hasEdgeConnecting(endpoints);\n","  }\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    checkNotNull(endpoints);\n","    if (!isOrderingCompatible(endpoints)) {\n","      return false;\n","    }\n","    N nodeU = endpoints.nodeU();\n","    N nodeV = endpoints.nodeV();\n","    return nodes().contains(nodeU) && successors(nodeU).contains(nodeV);\n","  }\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    return delegate().hasEdgeConnecting(endpoints);\n","  }\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    checkNotNull(endpoints);\n","    if (!isOrderingCompatible(endpoints)) {\n","      return false;\n","    }\n","    return !edgesConnecting(endpoints.nodeU(), endpoints.nodeV()).isEmpty();\n","  }\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    return delegate().hasEdgeConnecting(endpoints);\n","  }\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    checkNotNull(endpoints);\n","    if (!isOrderingCompatible(endpoints)) {\n","      return false;\n","    }\n","    N nodeU = endpoints.nodeU();\n","    N nodeV = endpoints.nodeV();\n","    return nodes().contains(nodeU) && successors(nodeU).contains(nodeV);\n","  }\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    checkNotNull(endpoints);\n","    return isOrderingCompatible(endpoints)\n","        && hasEdgeConnecting_internal(endpoints.nodeU(), endpoints.nodeV());\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    return delegate().hasEdgeConnecting(endpoints);\n","  }\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    checkNotNull(endpoints);\n","    if (!isOrderingCompatible(endpoints)) {\n","      return false;\n","    }\n","    return !edgesConnecting(endpoints.nodeU(), endpoints.nodeV()).isEmpty();\n","  }\n","    @Override\n","    public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","      return delegate().hasEdgeConnecting(transpose(endpoints));\n","    }\n","    @Override\n","    public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","      return delegate().hasEdgeConnecting(transpose(endpoints));\n","    }\n"],"delcode":[],"methodSig":"public boolean hasEdgeConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_1.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_1.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_1.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_2.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableValueGraph.java","addlines":[135,136,137,138,139,140,141,142,143,144,147,148,149,150,158,159,160,161,446,447,448,449,462,463,464,465,215,216,217,218,219,220,221,222,95,96,97,225,98,226,99,227,100,228,101,229,230,231,232,122,123,124,125,126],"dellines":[],"addcode":["  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    checkNotNull(endpoints);\n","    return isOrderingCompatible(endpoints)\n","        && hasEdgeConnecting_internal(endpoints.nodeU(), endpoints.nodeV());\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    return delegate().hasEdgeConnecting(endpoints);\n","  }\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    return delegate().hasEdgeConnecting(endpoints);\n","  }\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    return delegate().hasEdgeConnecting(endpoints);\n","  }\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    checkNotNull(endpoints);\n","    if (!isOrderingCompatible(endpoints)) {\n","      return false;\n","    }\n","    N nodeU = endpoints.nodeU();\n","    N nodeV = endpoints.nodeV();\n","    return nodes().contains(nodeU) && successors(nodeU).contains(nodeV);\n","  }\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    return delegate().hasEdgeConnecting(endpoints);\n","  }\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    checkNotNull(endpoints);\n","    if (!isOrderingCompatible(endpoints)) {\n","      return false;\n","    }\n","    return !edgesConnecting(endpoints.nodeU(), endpoints.nodeV()).isEmpty();\n","  }\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    return delegate().hasEdgeConnecting(endpoints);\n","  }\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    checkNotNull(endpoints);\n","    if (!isOrderingCompatible(endpoints)) {\n","      return false;\n","    }\n","    N nodeU = endpoints.nodeU();\n","    N nodeV = endpoints.nodeV();\n","    return nodes().contains(nodeU) && successors(nodeU).contains(nodeV);\n","  }\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    checkNotNull(endpoints);\n","    return isOrderingCompatible(endpoints)\n","        && hasEdgeConnecting_internal(endpoints.nodeU(), endpoints.nodeV());\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    return delegate().hasEdgeConnecting(endpoints);\n","  }\n","  @Override\n","  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","    checkNotNull(endpoints);\n","    if (!isOrderingCompatible(endpoints)) {\n","      return false;\n","    }\n","    return !edgesConnecting(endpoints.nodeU(), endpoints.nodeV()).isEmpty();\n","  }\n","    @Override\n","    public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","      return delegate().hasEdgeConnecting(transpose(endpoints));\n","    }\n","    @Override\n","    public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {\n","      return delegate().hasEdgeConnecting(transpose(endpoints));\n","    }\n"],"delcode":[],"methodSig":"public boolean hasEdgeConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_2.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_2.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_2.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_3.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableMutableGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableMutableGraph.java","addlines":[70,71,72,73,74],"dellines":[],"addcode":["  @Override\n","  public boolean removeEdge(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return removeEdge(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","  @Override\n","  public boolean removeEdge(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return removeEdge(endpoints.nodeU(), endpoints.nodeV());\n","  }\n"],"delcode":[],"methodSig":"public boolean removeEdge(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_3.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_3.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_3.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_4.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableMutableGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableMutableGraph.java","addlines":[70,71,72,73,74],"dellines":[],"addcode":["  @Override\n","  public boolean removeEdge(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return removeEdge(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","  @Override\n","  public boolean removeEdge(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return removeEdge(endpoints.nodeU(), endpoints.nodeV());\n","  }\n"],"delcode":[],"methodSig":"public boolean removeEdge(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_4.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_4.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_4.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_4.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_5.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/AbstractBaseGraph_2","pathinproj":"guava/src/com/google/common/graph/AbstractBaseGraph.java","addlines":[243,244,245,233,234,155,235,156,157],"dellines":[],"addcode":["  protected final boolean isOrderingCompatible(EndpointPair<?> endpoints) {\n","    return endpoints.isOrdered() || !this.isDirected();\n","  }\n","  protected final boolean isOrderingCompatible(EndpointPair<?> endpoints) {\n","    return endpoints.isOrdered() || !this.isDirected();\n","  }\n","  protected final boolean isOrderingCompatible(EndpointPair<?> endpoints) {\n","    return endpoints.isOrdered() || !this.isDirected();\n","  }\n","  protected final boolean isOrderingCompatible(EndpointPair<?> endpoints) {\n","    return endpoints.isOrdered() || !this.isDirected();\n","  }\n"],"delcode":[],"methodSig":"protected final boolean isOrderingCompatible(EndpointPair<?> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_5.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_5.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_5.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_5.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_6.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/AbstractBaseGraph_2","pathinproj":"guava/src/com/google/common/graph/AbstractBaseGraph.java","addlines":[243,244,245,233,234,155,235,156,157],"dellines":[],"addcode":["  protected final boolean isOrderingCompatible(EndpointPair<?> endpoints) {\n","    return endpoints.isOrdered() || !this.isDirected();\n","  }\n","  protected final boolean isOrderingCompatible(EndpointPair<?> endpoints) {\n","    return endpoints.isOrdered() || !this.isDirected();\n","  }\n","  protected final boolean isOrderingCompatible(EndpointPair<?> endpoints) {\n","    return endpoints.isOrdered() || !this.isDirected();\n","  }\n","  protected final boolean isOrderingCompatible(EndpointPair<?> endpoints) {\n","    return endpoints.isOrdered() || !this.isDirected();\n","  }\n"],"delcode":[],"methodSig":"protected final boolean isOrderingCompatible(EndpointPair<?> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_6.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_6.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_6.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_6.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_7.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_7.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/MutableNetwork_2","pathinproj":"guava/src/com/google/common/graph/MutableNetwork.java","addlines":[94,95],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  boolean addEdge(EndpointPair<N> endpoints, E edge);\n","  @CanIgnoreReturnValue\n","  boolean addEdge(EndpointPair<N> endpoints, E edge);\n"],"delcode":[],"methodSig":" boolean addEdge(EndpointPair<N> endpoints, E edge)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_7.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_7.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_7.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_7.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_8.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_8.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/MutableNetwork_2","pathinproj":"guava/src/com/google/common/graph/MutableNetwork.java","addlines":[94,95],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  boolean addEdge(EndpointPair<N> endpoints, E edge);\n","  @CanIgnoreReturnValue\n","  boolean addEdge(EndpointPair<N> endpoints, E edge);\n"],"delcode":[],"methodSig":" boolean addEdge(EndpointPair<N> endpoints, E edge)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_8.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_8.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_8.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_8.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_9.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableMutableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableMutableValueGraph.java","addlines":[101,102,103,104,105,106],"dellines":[],"addcode":["  @Override\n","  @CanIgnoreReturnValue\n","  public V putEdgeValue(EndpointPair<N> endpoints, V value) {\n","    validateEndpoints(endpoints);\n","    return putEdgeValue(endpoints.nodeU(), endpoints.nodeV(), value);\n","  }\n","  @Override\n","  @CanIgnoreReturnValue\n","  public V putEdgeValue(EndpointPair<N> endpoints, V value) {\n","    validateEndpoints(endpoints);\n","    return putEdgeValue(endpoints.nodeU(), endpoints.nodeV(), value);\n","  }\n"],"delcode":[],"methodSig":"public V putEdgeValue(EndpointPair<N> endpoints, V value)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_9.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_9.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_9.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_9.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_10.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableMutableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableMutableValueGraph.java","addlines":[101,102,103,104,105,106],"dellines":[],"addcode":["  @Override\n","  @CanIgnoreReturnValue\n","  public V putEdgeValue(EndpointPair<N> endpoints, V value) {\n","    validateEndpoints(endpoints);\n","    return putEdgeValue(endpoints.nodeU(), endpoints.nodeV(), value);\n","  }\n","  @Override\n","  @CanIgnoreReturnValue\n","  public V putEdgeValue(EndpointPair<N> endpoints, V value) {\n","    validateEndpoints(endpoints);\n","    return putEdgeValue(endpoints.nodeU(), endpoints.nodeV(), value);\n","  }\n"],"delcode":[],"methodSig":"public V putEdgeValue(EndpointPair<N> endpoints, V value)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_10.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_10.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_10.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_10.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_oldfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_11.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_11.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableValueGraph.java","addlines":[119,120],"dellines":[119,120,121,122],"addcode":["    return hasEdgeConnecting_internal(checkNotNull(nodeU), checkNotNull(nodeV));\n","  }\n","    return hasEdgeConnecting_internal(checkNotNull(nodeU), checkNotNull(nodeV));\n","  }\n"],"delcode":["    checkNotNull(nodeU);\n","    checkNotNull(nodeV);\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    return (connectionsU != null) && connectionsU.successors().contains(nodeV);\n","    checkNotNull(nodeU);\n","    checkNotNull(nodeV);\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    return (connectionsU != null) && connectionsU.successors().contains(nodeV);\n"],"methodSig":"public boolean hasEdgeConnecting(N nodeU, N nodeV)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_11.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_11.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_11.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_11.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_oldfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_12.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_12.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableValueGraph.java","addlines":[119,120],"dellines":[119,120,121,122],"addcode":["    return hasEdgeConnecting_internal(checkNotNull(nodeU), checkNotNull(nodeV));\n","  }\n","    return hasEdgeConnecting_internal(checkNotNull(nodeU), checkNotNull(nodeV));\n","  }\n"],"delcode":["    checkNotNull(nodeU);\n","    checkNotNull(nodeV);\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    return (connectionsU != null) && connectionsU.successors().contains(nodeV);\n","    checkNotNull(nodeU);\n","    checkNotNull(nodeV);\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    return (connectionsU != null) && connectionsU.successors().contains(nodeV);\n"],"methodSig":"public boolean hasEdgeConnecting(N nodeU, N nodeV)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_12.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_12.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_12.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_12.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_13.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_13.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/MutableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/MutableValueGraph.java","addlines":[112,113],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  V removeEdge(EndpointPair<N> endpoints);\n","  @CanIgnoreReturnValue\n","  V removeEdge(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" V removeEdge(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_13.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_13.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_13.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_13.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_14.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_14.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/MutableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/MutableValueGraph.java","addlines":[112,113],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  V removeEdge(EndpointPair<N> endpoints);\n","  @CanIgnoreReturnValue\n","  V removeEdge(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" V removeEdge(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_14.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_14.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_14.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_14.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_15.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableMutableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableMutableValueGraph.java","addlines":[161,162,163,164,165,166],"dellines":[],"addcode":["  @Override\n","  @CanIgnoreReturnValue\n","  public V removeEdge(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return removeEdge(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","  @Override\n","  @CanIgnoreReturnValue\n","  public V removeEdge(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return removeEdge(endpoints.nodeU(), endpoints.nodeV());\n","  }\n"],"delcode":[],"methodSig":"public V removeEdge(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_15.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_15.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_15.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_15.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_16.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableMutableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableMutableValueGraph.java","addlines":[161,162,163,164,165,166],"dellines":[],"addcode":["  @Override\n","  @CanIgnoreReturnValue\n","  public V removeEdge(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return removeEdge(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","  @Override\n","  @CanIgnoreReturnValue\n","  public V removeEdge(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return removeEdge(endpoints.nodeU(), endpoints.nodeV());\n","  }\n"],"delcode":[],"methodSig":"public V removeEdge(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_16.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_16.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_16.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_16.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_17.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ForwardingValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ForwardingValueGraph.java","addlines":[363,108,364,109,365,110,366,111],"dellines":[],"addcode":["  @Override\n","  public Optional<V> edgeValue(EndpointPair<N> endpoints) {\n","    return delegate().edgeValue(endpoints);\n","  }\n","  @Override\n","  public Optional<V> edgeValue(EndpointPair<N> endpoints) {\n","    return Optional.ofNullable(edgeValueOrDefault(endpoints, null));\n","  }\n","    @Override\n","    public Optional<V> edgeValue(EndpointPair<N> endpoints) {\n","      return delegate().edgeValue(transpose(endpoints));\n","    }\n"],"delcode":[],"methodSig":"public Optional<V> edgeValue(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_17.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_17.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_17.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_17.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_18.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ForwardingValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ForwardingValueGraph.java","addlines":[363,108,364,109,365,110,366,111],"dellines":[],"addcode":["  @Override\n","  public Optional<V> edgeValue(EndpointPair<N> endpoints) {\n","    return delegate().edgeValue(endpoints);\n","  }\n","  @Override\n","  public Optional<V> edgeValue(EndpointPair<N> endpoints) {\n","    return Optional.ofNullable(edgeValueOrDefault(endpoints, null));\n","  }\n","    @Override\n","    public Optional<V> edgeValue(EndpointPair<N> endpoints) {\n","      return delegate().edgeValue(transpose(endpoints));\n","    }\n"],"delcode":[],"methodSig":"public Optional<V> edgeValue(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_18.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_18.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_18.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_18.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_19.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ForwardingValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ForwardingValueGraph.java","addlines":[363,108,364,109,365,110,366,111],"dellines":[],"addcode":["  @Override\n","  public Optional<V> edgeValue(EndpointPair<N> endpoints) {\n","    return delegate().edgeValue(endpoints);\n","  }\n","  @Override\n","  public Optional<V> edgeValue(EndpointPair<N> endpoints) {\n","    return Optional.ofNullable(edgeValueOrDefault(endpoints, null));\n","  }\n","    @Override\n","    public Optional<V> edgeValue(EndpointPair<N> endpoints) {\n","      return delegate().edgeValue(transpose(endpoints));\n","    }\n"],"delcode":[],"methodSig":"public Optional<V> edgeValue(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_19.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_19.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_19.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_19.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_20.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_20.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[360,361,330,331],"dellines":[],"addcode":["  @NullableDecl\n","  E edgeConnectingOrNull(EndpointPair<N> endpoints);\n","  @Nullable\n","  E edgeConnectingOrNull(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" E edgeConnectingOrNull(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_20.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_20.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_20.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_20.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_21.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_21.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[360,361,330,331],"dellines":[],"addcode":["  @NullableDecl\n","  E edgeConnectingOrNull(EndpointPair<N> endpoints);\n","  @Nullable\n","  E edgeConnectingOrNull(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" E edgeConnectingOrNull(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_21.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_21.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_21.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_21.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_22.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_22.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[360,361,330,331],"dellines":[],"addcode":["  @NullableDecl\n","  E edgeConnectingOrNull(EndpointPair<N> endpoints);\n","  @Nullable\n","  E edgeConnectingOrNull(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" E edgeConnectingOrNull(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_22.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_22.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_22.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_22.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_23.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_23.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[285],"dellines":[],"addcode":["  Optional<V> edgeValue(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" Optional<V> edgeValue(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_23.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_23.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_23.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_23.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_24.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_24.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[285],"dellines":[],"addcode":["  Optional<V> edgeValue(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" Optional<V> edgeValue(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_24.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_24.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_24.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_24.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_25.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_25.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[285],"dellines":[],"addcode":["  Optional<V> edgeValue(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" Optional<V> edgeValue(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_25.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_25.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_25.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_25.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_26.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_26.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/MutableGraph","pathinproj":"android/guava/src/com/google/common/graph/MutableGraph.java","addlines":[104,105],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  boolean removeEdge(EndpointPair<N> endpoints);\n","  @CanIgnoreReturnValue\n","  boolean removeEdge(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" boolean removeEdge(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_26.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_26.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_26.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_26.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_27.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_27.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/MutableGraph","pathinproj":"android/guava/src/com/google/common/graph/MutableGraph.java","addlines":[104,105],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  boolean removeEdge(EndpointPair<N> endpoints);\n","  @CanIgnoreReturnValue\n","  boolean removeEdge(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" boolean removeEdge(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_27.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_27.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_27.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_27.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_28.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_28.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/MutableGraph","pathinproj":"android/guava/src/com/google/common/graph/MutableGraph.java","addlines":[104,105],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  boolean removeEdge(EndpointPair<N> endpoints);\n","  @CanIgnoreReturnValue\n","  boolean removeEdge(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" boolean removeEdge(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_28.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_28.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_28.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_28.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_29.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_29.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/MutableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/MutableValueGraph.java","addlines":[84,85],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  V putEdgeValue(EndpointPair<N> endpoints, V value);\n","  @CanIgnoreReturnValue\n","  V putEdgeValue(EndpointPair<N> endpoints, V value);\n"],"delcode":[],"methodSig":" V putEdgeValue(EndpointPair<N> endpoints, V value)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_29.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_29.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_29.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_29.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_30.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_30.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/MutableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/MutableValueGraph.java","addlines":[84,85],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  V putEdgeValue(EndpointPair<N> endpoints, V value);\n","  @CanIgnoreReturnValue\n","  V putEdgeValue(EndpointPair<N> endpoints, V value);\n"],"delcode":[],"methodSig":" V putEdgeValue(EndpointPair<N> endpoints, V value)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_30.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_30.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_30.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_30.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_31.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_31.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/MutableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/MutableValueGraph.java","addlines":[84,85],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  V putEdgeValue(EndpointPair<N> endpoints, V value);\n","  @CanIgnoreReturnValue\n","  V putEdgeValue(EndpointPair<N> endpoints, V value);\n"],"delcode":[],"methodSig":" V putEdgeValue(EndpointPair<N> endpoints, V value)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_31.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_31.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_31.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_31.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_32.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_32.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[301,302],"dellines":[],"addcode":["  Set<E> edgesConnecting(EndpointPair<N> endpoints);\n","  Set<E> edgesConnecting(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" Set<E> edgesConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_32.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_32.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_32.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_32.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_33.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_33.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[301,302],"dellines":[],"addcode":["  Set<E> edgesConnecting(EndpointPair<N> endpoints);\n","  Set<E> edgesConnecting(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" Set<E> edgesConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_33.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_33.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_33.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_33.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_34.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_34.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[301,302],"dellines":[],"addcode":["  Set<E> edgesConnecting(EndpointPair<N> endpoints);\n","  Set<E> edgesConnecting(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" Set<E> edgesConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_34.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_34.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_34.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_34.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_35.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ForwardingNetwork_2","pathinproj":"guava/src/com/google/common/graph/ForwardingNetwork.java","addlines":[452,453,454,455,137,138,139,203,140,204,205,206,207,208,148,149,150,151,215,216,217,436,437,438,439],"dellines":[],"addcode":["  @Override\n","  public E edgeConnectingOrNull(EndpointPair<N> endpoints) {\n","    return delegate().edgeConnectingOrNull(endpoints);\n","  }\n","  @Override\n","  public E edgeConnectingOrNull(EndpointPair<N> endpoints) {\n","    return delegate().edgeConnectingOrNull(endpoints);\n","  }\n","  @Override\n","  @NullableDecl\n","  public E edgeConnectingOrNull(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return edgeConnectingOrNull(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","  public @Nullable E edgeConnectingOrNull(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return edgeConnectingOrNull(endpoints.nodeU(), endpoints.nodeV());\n","    @Override\n","    public E edgeConnectingOrNull(EndpointPair<N> endpoints) {\n","      return delegate().edgeConnectingOrNull(transpose(endpoints));\n","    }\n","    @Override\n","    public E edgeConnectingOrNull(EndpointPair<N> endpoints) {\n","      return delegate().edgeConnectingOrNull(transpose(endpoints));\n","    }\n"],"delcode":[],"methodSig":"public E edgeConnectingOrNull(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_35.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_35.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_35.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_35.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_36.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ForwardingNetwork_2","pathinproj":"guava/src/com/google/common/graph/ForwardingNetwork.java","addlines":[452,453,454,455,137,138,139,203,140,204,205,206,207,208,148,149,150,151,215,216,217,436,437,438,439],"dellines":[],"addcode":["  @Override\n","  public E edgeConnectingOrNull(EndpointPair<N> endpoints) {\n","    return delegate().edgeConnectingOrNull(endpoints);\n","  }\n","  @Override\n","  public E edgeConnectingOrNull(EndpointPair<N> endpoints) {\n","    return delegate().edgeConnectingOrNull(endpoints);\n","  }\n","  @Override\n","  @NullableDecl\n","  public E edgeConnectingOrNull(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return edgeConnectingOrNull(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","  public @Nullable E edgeConnectingOrNull(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return edgeConnectingOrNull(endpoints.nodeU(), endpoints.nodeV());\n","    @Override\n","    public E edgeConnectingOrNull(EndpointPair<N> endpoints) {\n","      return delegate().edgeConnectingOrNull(transpose(endpoints));\n","    }\n","    @Override\n","    public E edgeConnectingOrNull(EndpointPair<N> endpoints) {\n","      return delegate().edgeConnectingOrNull(transpose(endpoints));\n","    }\n"],"delcode":[],"methodSig":"public E edgeConnectingOrNull(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_36.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_36.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_36.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_36.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_37.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ForwardingNetwork_2","pathinproj":"guava/src/com/google/common/graph/ForwardingNetwork.java","addlines":[452,453,454,455,137,138,139,203,140,204,205,206,207,208,148,149,150,151,215,216,217,436,437,438,439],"dellines":[],"addcode":["  @Override\n","  public E edgeConnectingOrNull(EndpointPair<N> endpoints) {\n","    return delegate().edgeConnectingOrNull(endpoints);\n","  }\n","  @Override\n","  public E edgeConnectingOrNull(EndpointPair<N> endpoints) {\n","    return delegate().edgeConnectingOrNull(endpoints);\n","  }\n","  @Override\n","  @NullableDecl\n","  public E edgeConnectingOrNull(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return edgeConnectingOrNull(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","  public @Nullable E edgeConnectingOrNull(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return edgeConnectingOrNull(endpoints.nodeU(), endpoints.nodeV());\n","    @Override\n","    public E edgeConnectingOrNull(EndpointPair<N> endpoints) {\n","      return delegate().edgeConnectingOrNull(transpose(endpoints));\n","    }\n","    @Override\n","    public E edgeConnectingOrNull(EndpointPair<N> endpoints) {\n","      return delegate().edgeConnectingOrNull(transpose(endpoints));\n","    }\n"],"delcode":[],"methodSig":"public E edgeConnectingOrNull(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_37.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_37.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_37.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_37.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_38.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableMutableNetwork","pathinproj":"android/guava/src/com/google/common/graph/ConfigurableMutableNetwork.java","addlines":[119,120,121,122,123,124],"dellines":[],"addcode":["  @Override\n","  @CanIgnoreReturnValue\n","  public boolean addEdge(EndpointPair<N> endpoints, E edge) {\n","    validateEndpoints(endpoints);\n","    return addEdge(endpoints.nodeU(), endpoints.nodeV(), edge);\n","  }\n","  @Override\n","  @CanIgnoreReturnValue\n","  public boolean addEdge(EndpointPair<N> endpoints, E edge) {\n","    validateEndpoints(endpoints);\n","    return addEdge(endpoints.nodeU(), endpoints.nodeV(), edge);\n","  }\n"],"delcode":[],"methodSig":"public boolean addEdge(EndpointPair<N> endpoints, E edge)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_38.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_38.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_38.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_38.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_39.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableMutableNetwork","pathinproj":"android/guava/src/com/google/common/graph/ConfigurableMutableNetwork.java","addlines":[119,120,121,122,123,124],"dellines":[],"addcode":["  @Override\n","  @CanIgnoreReturnValue\n","  public boolean addEdge(EndpointPair<N> endpoints, E edge) {\n","    validateEndpoints(endpoints);\n","    return addEdge(endpoints.nodeU(), endpoints.nodeV(), edge);\n","  }\n","  @Override\n","  @CanIgnoreReturnValue\n","  public boolean addEdge(EndpointPair<N> endpoints, E edge) {\n","    validateEndpoints(endpoints);\n","    return addEdge(endpoints.nodeU(), endpoints.nodeV(), edge);\n","  }\n"],"delcode":[],"methodSig":"public boolean addEdge(EndpointPair<N> endpoints, E edge)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_39.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_39.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_39.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_39.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_40.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableMutableNetwork","pathinproj":"android/guava/src/com/google/common/graph/ConfigurableMutableNetwork.java","addlines":[119,120,121,122,123,124],"dellines":[],"addcode":["  @Override\n","  @CanIgnoreReturnValue\n","  public boolean addEdge(EndpointPair<N> endpoints, E edge) {\n","    validateEndpoints(endpoints);\n","    return addEdge(endpoints.nodeU(), endpoints.nodeV(), edge);\n","  }\n","  @Override\n","  @CanIgnoreReturnValue\n","  public boolean addEdge(EndpointPair<N> endpoints, E edge) {\n","    validateEndpoints(endpoints);\n","    return addEdge(endpoints.nodeU(), endpoints.nodeV(), edge);\n","  }\n"],"delcode":[],"methodSig":"public boolean addEdge(EndpointPair<N> endpoints, E edge)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_40.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_40.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_40.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_40.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_41.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableValueGraph.java","addlines":[373,134,118,374,135,119,375,136,120,376,137,121],"dellines":[],"addcode":["  @Override\n","  public @Nullable V edgeValueOrDefault(EndpointPair<N> endpoints, @Nullable V defaultValue) {\n","    validateEndpoints(endpoints);\n","    return edgeValueOrDefault_internal(endpoints.nodeU(), endpoints.nodeV(), defaultValue);\n","  @Override\n","  public @Nullable V edgeValueOrDefault(EndpointPair<N> endpoints, @Nullable V defaultValue) {\n","    return delegate().edgeValueOrDefault(endpoints, defaultValue);\n","  }\n","    @Override\n","    public @Nullable V edgeValueOrDefault(EndpointPair<N> endpoints, @Nullable V defaultValue) {\n","      return delegate().edgeValueOrDefault(transpose(endpoints), defaultValue);\n","    }\n"],"delcode":[],"methodSig":"public V edgeValueOrDefault(EndpointPair<N> endpoints, @Nullable V defaultValue)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_41.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_41.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_41.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_41.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_42.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableValueGraph.java","addlines":[373,134,118,374,135,119,375,136,120,376,137,121],"dellines":[],"addcode":["  @Override\n","  public @Nullable V edgeValueOrDefault(EndpointPair<N> endpoints, @Nullable V defaultValue) {\n","    validateEndpoints(endpoints);\n","    return edgeValueOrDefault_internal(endpoints.nodeU(), endpoints.nodeV(), defaultValue);\n","  @Override\n","  public @Nullable V edgeValueOrDefault(EndpointPair<N> endpoints, @Nullable V defaultValue) {\n","    return delegate().edgeValueOrDefault(endpoints, defaultValue);\n","  }\n","    @Override\n","    public @Nullable V edgeValueOrDefault(EndpointPair<N> endpoints, @Nullable V defaultValue) {\n","      return delegate().edgeValueOrDefault(transpose(endpoints), defaultValue);\n","    }\n"],"delcode":[],"methodSig":"public V edgeValueOrDefault(EndpointPair<N> endpoints, @Nullable V defaultValue)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_42.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_42.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_42.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_42.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_43.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableValueGraph.java","addlines":[373,134,118,374,135,119,375,136,120,376,137,121],"dellines":[],"addcode":["  @Override\n","  public @Nullable V edgeValueOrDefault(EndpointPair<N> endpoints, @Nullable V defaultValue) {\n","    validateEndpoints(endpoints);\n","    return edgeValueOrDefault_internal(endpoints.nodeU(), endpoints.nodeV(), defaultValue);\n","  @Override\n","  public @Nullable V edgeValueOrDefault(EndpointPair<N> endpoints, @Nullable V defaultValue) {\n","    return delegate().edgeValueOrDefault(endpoints, defaultValue);\n","  }\n","    @Override\n","    public @Nullable V edgeValueOrDefault(EndpointPair<N> endpoints, @Nullable V defaultValue) {\n","      return delegate().edgeValueOrDefault(transpose(endpoints), defaultValue);\n","    }\n"],"delcode":[],"methodSig":"public V edgeValueOrDefault(EndpointPair<N> endpoints, @Nullable V defaultValue)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_43.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_43.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_43.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_43.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_44.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_44.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[310,311],"dellines":[],"addcode":["  @Nullable\n","  V edgeValueOrDefault(EndpointPair<N> endpoints, @Nullable V defaultValue);\n"],"delcode":[],"methodSig":" V edgeValueOrDefault(EndpointPair<N> endpoints, @Nullable V defaultValue)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_44.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_44.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_44.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_44.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_45.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_45.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[310,311],"dellines":[],"addcode":["  @Nullable\n","  V edgeValueOrDefault(EndpointPair<N> endpoints, @Nullable V defaultValue);\n"],"delcode":[],"methodSig":" V edgeValueOrDefault(EndpointPair<N> endpoints, @Nullable V defaultValue)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_45.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_45.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_45.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_45.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_46.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_46.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[310,311],"dellines":[],"addcode":["  @Nullable\n","  V edgeValueOrDefault(EndpointPair<N> endpoints, @Nullable V defaultValue);\n"],"delcode":[],"methodSig":" V edgeValueOrDefault(EndpointPair<N> endpoints, @Nullable V defaultValue)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_46.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_46.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_46.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_46.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_47.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ForwardingNetwork_2","pathinproj":"guava/src/com/google/common/graph/ForwardingNetwork.java","addlines":[195,196,197,198,199,138,139,140,141,442,443,444,445],"dellines":[],"addcode":["  @Override\n","  public Optional<E> edgeConnecting(EndpointPair<N> endpoints) {\n","    return delegate().edgeConnecting(endpoints);\n","  }\n","  @Override\n","  public Optional<E> edgeConnecting(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return edgeConnecting(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","    @Override\n","    public Optional<E> edgeConnecting(EndpointPair<N> endpoints) {\n","      return delegate().edgeConnecting(transpose(endpoints));\n","    }\n"],"delcode":[],"methodSig":"public Optional<E> edgeConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_47.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_47.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_47.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_47.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network_2","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[304,305,306],"dellines":[289,290],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_48.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ForwardingNetwork_2","pathinproj":"guava/src/com/google/common/graph/ForwardingNetwork.java","addlines":[195,196,197,198,199,138,139,140,141,442,443,444,445],"dellines":[],"addcode":["  @Override\n","  public Optional<E> edgeConnecting(EndpointPair<N> endpoints) {\n","    return delegate().edgeConnecting(endpoints);\n","  }\n","  @Override\n","  public Optional<E> edgeConnecting(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return edgeConnecting(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","    @Override\n","    public Optional<E> edgeConnecting(EndpointPair<N> endpoints) {\n","      return delegate().edgeConnecting(transpose(endpoints));\n","    }\n"],"delcode":[],"methodSig":"public Optional<E> edgeConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_48.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_48.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_48.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_48.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_49.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ForwardingNetwork_2","pathinproj":"guava/src/com/google/common/graph/ForwardingNetwork.java","addlines":[195,196,197,198,199,138,139,140,141,442,443,444,445],"dellines":[],"addcode":["  @Override\n","  public Optional<E> edgeConnecting(EndpointPair<N> endpoints) {\n","    return delegate().edgeConnecting(endpoints);\n","  }\n","  @Override\n","  public Optional<E> edgeConnecting(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return edgeConnecting(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","    @Override\n","    public Optional<E> edgeConnecting(EndpointPair<N> endpoints) {\n","      return delegate().edgeConnecting(transpose(endpoints));\n","    }\n"],"delcode":[],"methodSig":"public Optional<E> edgeConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_49.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_49.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_49.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_49.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_50.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ForwardingNetwork_2","pathinproj":"guava/src/com/google/common/graph/ForwardingNetwork.java","addlines":[195,196,197,198,199,138,139,140,141,442,443,444,445],"dellines":[],"addcode":["  @Override\n","  public Optional<E> edgeConnecting(EndpointPair<N> endpoints) {\n","    return delegate().edgeConnecting(endpoints);\n","  }\n","  @Override\n","  public Optional<E> edgeConnecting(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return edgeConnecting(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","    @Override\n","    public Optional<E> edgeConnecting(EndpointPair<N> endpoints) {\n","      return delegate().edgeConnecting(transpose(endpoints));\n","    }\n"],"delcode":[],"methodSig":"public Optional<E> edgeConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_50.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_50.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_50.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_50.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_51.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_51.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network_2","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[331],"dellines":[],"addcode":["  Optional<E> edgeConnecting(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" Optional<E> edgeConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_51.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_51.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_51.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_51.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network_2","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[304,305,306],"dellines":[289,290],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_52.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_52.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network_2","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[331],"dellines":[],"addcode":["  Optional<E> edgeConnecting(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" Optional<E> edgeConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_52.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_52.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_52.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_52.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_53.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_53.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network_2","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[331],"dellines":[],"addcode":["  Optional<E> edgeConnecting(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" Optional<E> edgeConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_53.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_53.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_53.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_53.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_54.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_54.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network_2","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[331],"dellines":[],"addcode":["  Optional<E> edgeConnecting(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" Optional<E> edgeConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_54.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_54.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_54.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_54.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_55.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Graphs","pathinproj":"android/guava/src/com/google/common/graph/Graphs.java","addlines":[262,263,264,265,266,267,268,269],"dellines":[],"addcode":["  static <N> EndpointPair<N> transpose(EndpointPair<N> endpoints) {\n","    if (endpoints.isOrdered()) {\n","      return EndpointPair.ordered(endpoints.target(), endpoints.source());\n","    }\n","    return endpoints;\n","  }\n","  static <N> EndpointPair<N> transpose(EndpointPair<N> endpoints) {\n","    if (endpoints.isOrdered()) {\n","      return EndpointPair.ordered(endpoints.target(), endpoints.source());\n","    }\n","    return endpoints;\n","  }\n"],"delcode":[],"methodSig":" static EndpointPair<N> transpose(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_55.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_55.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_55.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_55.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network_2","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[304,305,306],"dellines":[289,290],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_56.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Graphs","pathinproj":"android/guava/src/com/google/common/graph/Graphs.java","addlines":[262,263,264,265,266,267,268,269],"dellines":[],"addcode":["  static <N> EndpointPair<N> transpose(EndpointPair<N> endpoints) {\n","    if (endpoints.isOrdered()) {\n","      return EndpointPair.ordered(endpoints.target(), endpoints.source());\n","    }\n","    return endpoints;\n","  }\n","  static <N> EndpointPair<N> transpose(EndpointPair<N> endpoints) {\n","    if (endpoints.isOrdered()) {\n","      return EndpointPair.ordered(endpoints.target(), endpoints.source());\n","    }\n","    return endpoints;\n","  }\n"],"delcode":[],"methodSig":" static EndpointPair<N> transpose(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_56.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_56.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_56.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_56.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_57.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Graphs","pathinproj":"android/guava/src/com/google/common/graph/Graphs.java","addlines":[262,263,264,265,266,267,268,269],"dellines":[],"addcode":["  static <N> EndpointPair<N> transpose(EndpointPair<N> endpoints) {\n","    if (endpoints.isOrdered()) {\n","      return EndpointPair.ordered(endpoints.target(), endpoints.source());\n","    }\n","    return endpoints;\n","  }\n","  static <N> EndpointPair<N> transpose(EndpointPair<N> endpoints) {\n","    if (endpoints.isOrdered()) {\n","      return EndpointPair.ordered(endpoints.target(), endpoints.source());\n","    }\n","    return endpoints;\n","  }\n"],"delcode":[],"methodSig":" static EndpointPair<N> transpose(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_57.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_57.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_57.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_57.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_58.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Graphs","pathinproj":"android/guava/src/com/google/common/graph/Graphs.java","addlines":[262,263,264,265,266,267,268,269],"dellines":[],"addcode":["  static <N> EndpointPair<N> transpose(EndpointPair<N> endpoints) {\n","    if (endpoints.isOrdered()) {\n","      return EndpointPair.ordered(endpoints.target(), endpoints.source());\n","    }\n","    return endpoints;\n","  }\n","  static <N> EndpointPair<N> transpose(EndpointPair<N> endpoints) {\n","    if (endpoints.isOrdered()) {\n","      return EndpointPair.ordered(endpoints.target(), endpoints.source());\n","    }\n","    return endpoints;\n","  }\n"],"delcode":[],"methodSig":" static EndpointPair<N> transpose(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_58.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_58.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_58.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_58.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_59.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_59.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/MutableGraph","pathinproj":"android/guava/src/com/google/common/graph/MutableGraph.java","addlines":[77,78],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  boolean putEdge(EndpointPair<N> endpoints);\n","  @CanIgnoreReturnValue\n","  boolean putEdge(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" boolean putEdge(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_59.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_59.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_59.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_59.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network_2","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[304,305,306],"dellines":[289,290],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_60.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_60.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/MutableGraph","pathinproj":"android/guava/src/com/google/common/graph/MutableGraph.java","addlines":[77,78],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  boolean putEdge(EndpointPair<N> endpoints);\n","  @CanIgnoreReturnValue\n","  boolean putEdge(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" boolean putEdge(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_60.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_60.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_60.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_60.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_61.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_61.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/MutableGraph","pathinproj":"android/guava/src/com/google/common/graph/MutableGraph.java","addlines":[77,78],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  boolean putEdge(EndpointPair<N> endpoints);\n","  @CanIgnoreReturnValue\n","  boolean putEdge(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" boolean putEdge(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_61.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_61.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_61.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_61.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_62.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_62.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/MutableGraph","pathinproj":"android/guava/src/com/google/common/graph/MutableGraph.java","addlines":[77,78],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  boolean putEdge(EndpointPair<N> endpoints);\n","  @CanIgnoreReturnValue\n","  boolean putEdge(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" boolean putEdge(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_62.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_62.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_62.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_62.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_63.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableValueGraph.java","addlines":[163,164,165,166,167,168,169],"dellines":[],"addcode":["  protected final V edgeValueOrDefault_internal(N nodeU, N nodeV, V defaultValue) {\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    V value = (connectionsU == null) ? null : connectionsU.value(nodeV);\n","    return value == null ? defaultValue : value;\n","  }\n","  protected final V edgeValueOrDefault_internal(N nodeU, N nodeV, V defaultValue) {\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    V value = (connectionsU == null) ? null : connectionsU.value(nodeV);\n","    return value == null ? defaultValue : value;\n","  }\n"],"delcode":[],"methodSig":"protected final V edgeValueOrDefault_internal(N nodeU, N nodeV, V defaultValue)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_63.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_63.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_63.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_63.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network_2","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[304,305,306],"dellines":[289,290],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_64.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableValueGraph.java","addlines":[163,164,165,166,167,168,169],"dellines":[],"addcode":["  protected final V edgeValueOrDefault_internal(N nodeU, N nodeV, V defaultValue) {\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    V value = (connectionsU == null) ? null : connectionsU.value(nodeV);\n","    return value == null ? defaultValue : value;\n","  }\n","  protected final V edgeValueOrDefault_internal(N nodeU, N nodeV, V defaultValue) {\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    V value = (connectionsU == null) ? null : connectionsU.value(nodeV);\n","    return value == null ? defaultValue : value;\n","  }\n"],"delcode":[],"methodSig":"protected final V edgeValueOrDefault_internal(N nodeU, N nodeV, V defaultValue)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_64.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_64.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_64.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_64.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_65.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableValueGraph.java","addlines":[163,164,165,166,167,168,169],"dellines":[],"addcode":["  protected final V edgeValueOrDefault_internal(N nodeU, N nodeV, V defaultValue) {\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    V value = (connectionsU == null) ? null : connectionsU.value(nodeV);\n","    return value == null ? defaultValue : value;\n","  }\n","  protected final V edgeValueOrDefault_internal(N nodeU, N nodeV, V defaultValue) {\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    V value = (connectionsU == null) ? null : connectionsU.value(nodeV);\n","    return value == null ? defaultValue : value;\n","  }\n"],"delcode":[],"methodSig":"protected final V edgeValueOrDefault_internal(N nodeU, N nodeV, V defaultValue)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_65.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_65.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_65.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_65.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_66.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableValueGraph.java","addlines":[163,164,165,166,167,168,169],"dellines":[],"addcode":["  protected final V edgeValueOrDefault_internal(N nodeU, N nodeV, V defaultValue) {\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    V value = (connectionsU == null) ? null : connectionsU.value(nodeV);\n","    return value == null ? defaultValue : value;\n","  }\n","  protected final V edgeValueOrDefault_internal(N nodeU, N nodeV, V defaultValue) {\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    V value = (connectionsU == null) ? null : connectionsU.value(nodeV);\n","    return value == null ? defaultValue : value;\n","  }\n"],"delcode":[],"methodSig":"protected final V edgeValueOrDefault_internal(N nodeU, N nodeV, V defaultValue)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_66.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_66.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_66.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_66.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_oldfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_67.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_67.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/AbstractNetwork_2","pathinproj":"guava/src/com/google/common/graph/AbstractNetwork.java","addlines":[208,201,202,206],"dellines":[195,196],"addcode":["  @Override\n","  public @Nullable E edgeConnectingOrNull(N nodeU, N nodeV) {\n","        return null;\n","        return edgesConnecting.iterator().next();\n"],"delcode":["  public @Nullable E edgeConnectingOrNull(N nodeU, N nodeV) {\n","    return edgeConnecting(nodeU, nodeV).orElse(null);\n"],"methodSig":"public E edgeConnectingOrNull(N nodeU, N nodeV)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_67.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_67.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_67.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_67.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network_2","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[304,305,306],"dellines":[289,290],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_oldfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_68.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_68.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/AbstractNetwork_2","pathinproj":"guava/src/com/google/common/graph/AbstractNetwork.java","addlines":[208,201,202,206],"dellines":[195,196],"addcode":["  @Override\n","  public @Nullable E edgeConnectingOrNull(N nodeU, N nodeV) {\n","        return null;\n","        return edgesConnecting.iterator().next();\n"],"delcode":["  public @Nullable E edgeConnectingOrNull(N nodeU, N nodeV) {\n","    return edgeConnecting(nodeU, nodeV).orElse(null);\n"],"methodSig":"public E edgeConnectingOrNull(N nodeU, N nodeV)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_68.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_68.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_68.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_68.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_oldfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_69.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_69.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/AbstractNetwork_2","pathinproj":"guava/src/com/google/common/graph/AbstractNetwork.java","addlines":[208,201,202,206],"dellines":[195,196],"addcode":["  @Override\n","  public @Nullable E edgeConnectingOrNull(N nodeU, N nodeV) {\n","        return null;\n","        return edgesConnecting.iterator().next();\n"],"delcode":["  public @Nullable E edgeConnectingOrNull(N nodeU, N nodeV) {\n","    return edgeConnecting(nodeU, nodeV).orElse(null);\n"],"methodSig":"public E edgeConnectingOrNull(N nodeU, N nodeV)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_69.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_69.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_69.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_69.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_oldfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_70.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_70.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/AbstractNetwork_2","pathinproj":"guava/src/com/google/common/graph/AbstractNetwork.java","addlines":[208,201,202,206],"dellines":[195,196],"addcode":["  @Override\n","  public @Nullable E edgeConnectingOrNull(N nodeU, N nodeV) {\n","        return null;\n","        return edgesConnecting.iterator().next();\n"],"delcode":["  public @Nullable E edgeConnectingOrNull(N nodeU, N nodeV) {\n","    return edgeConnecting(nodeU, nodeV).orElse(null);\n"],"methodSig":"public E edgeConnectingOrNull(N nodeU, N nodeV)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_70.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_70.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_70.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_70.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_71.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableMutableGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableMutableGraph.java","addlines":[54,55,56,57,58],"dellines":[],"addcode":["  @Override\n","  public boolean putEdge(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return putEdge(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","  @Override\n","  public boolean putEdge(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return putEdge(endpoints.nodeU(), endpoints.nodeV());\n","  }\n"],"delcode":[],"methodSig":"public boolean putEdge(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_71.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_71.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_71.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_71.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network_2","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[304,305,306],"dellines":[289,290],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_72.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableMutableGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableMutableGraph.java","addlines":[54,55,56,57,58],"dellines":[],"addcode":["  @Override\n","  public boolean putEdge(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return putEdge(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","  @Override\n","  public boolean putEdge(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return putEdge(endpoints.nodeU(), endpoints.nodeV());\n","  }\n"],"delcode":[],"methodSig":"public boolean putEdge(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_72.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_72.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_72.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_72.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_73.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableMutableGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableMutableGraph.java","addlines":[54,55,56,57,58],"dellines":[],"addcode":["  @Override\n","  public boolean putEdge(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return putEdge(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","  @Override\n","  public boolean putEdge(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return putEdge(endpoints.nodeU(), endpoints.nodeV());\n","  }\n"],"delcode":[],"methodSig":"public boolean putEdge(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_73.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_73.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_73.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_73.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_74.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableMutableGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableMutableGraph.java","addlines":[54,55,56,57,58],"dellines":[],"addcode":["  @Override\n","  public boolean putEdge(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return putEdge(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","  @Override\n","  public boolean putEdge(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return putEdge(endpoints.nodeU(), endpoints.nodeV());\n","  }\n"],"delcode":[],"methodSig":"public boolean putEdge(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_74.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_74.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_74.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_74.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_75.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableValueGraph.java","addlines":[160,161,162,163,158,159],"dellines":[],"addcode":["  protected final boolean hasEdgeConnecting_internal(N nodeU, N nodeV) {\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    return (connectionsU != null) && connectionsU.successors().contains(nodeV);\n","  }\n","  protected final boolean hasEdgeConnecting_internal(N nodeU, N nodeV) {\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    return (connectionsU != null) && connectionsU.successors().contains(nodeV);\n","  }\n"],"delcode":[],"methodSig":"protected final boolean hasEdgeConnecting_internal(N nodeU, N nodeV)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_75.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_75.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_75.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_75.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network_2","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[304,305,306],"dellines":[289,290],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_76.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableValueGraph.java","addlines":[160,161,162,163,158,159],"dellines":[],"addcode":["  protected final boolean hasEdgeConnecting_internal(N nodeU, N nodeV) {\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    return (connectionsU != null) && connectionsU.successors().contains(nodeV);\n","  }\n","  protected final boolean hasEdgeConnecting_internal(N nodeU, N nodeV) {\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    return (connectionsU != null) && connectionsU.successors().contains(nodeV);\n","  }\n"],"delcode":[],"methodSig":"protected final boolean hasEdgeConnecting_internal(N nodeU, N nodeV)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_76.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_76.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_76.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_76.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_77.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableValueGraph.java","addlines":[160,161,162,163,158,159],"dellines":[],"addcode":["  protected final boolean hasEdgeConnecting_internal(N nodeU, N nodeV) {\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    return (connectionsU != null) && connectionsU.successors().contains(nodeV);\n","  }\n","  protected final boolean hasEdgeConnecting_internal(N nodeU, N nodeV) {\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    return (connectionsU != null) && connectionsU.successors().contains(nodeV);\n","  }\n"],"delcode":[],"methodSig":"protected final boolean hasEdgeConnecting_internal(N nodeU, N nodeV)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_77.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_77.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_77.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_77.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_78.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableValueGraph.java","addlines":[160,161,162,163,158,159],"dellines":[],"addcode":["  protected final boolean hasEdgeConnecting_internal(N nodeU, N nodeV) {\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    return (connectionsU != null) && connectionsU.successors().contains(nodeV);\n","  }\n","  protected final boolean hasEdgeConnecting_internal(N nodeU, N nodeV) {\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    return (connectionsU != null) && connectionsU.successors().contains(nodeV);\n","  }\n"],"delcode":[],"methodSig":"protected final boolean hasEdgeConnecting_internal(N nodeU, N nodeV)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_78.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_78.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_78.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_78.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_oldfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_79.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_79.txt","newdoc":" DO NOT override the AbstractGraph *degree() implementations.\n Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to EndpointPair mapping).\n Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n Network<LinkedList>.\n","newJdoc":"","olddoc":" DO NOT override the AbstractGraph *degree() implementations.\n Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to EndpointPair mapping).\n Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n Network<LinkedList>.\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/AbstractNetwork","pathinproj":"android/guava/src/com/google/common/graph/AbstractNetwork.java","addlines":[97,98],"dellines":[94,95],"addcode":["            return isOrderingCompatible(endpointPair)\n","            return isOrderingCompatible(endpointPair)\n"],"delcode":["            return isDirected() == endpointPair.isOrdered()\n","            return isDirected() == endpointPair.isOrdered()\n"],"methodSig":"public Graph<N> asGraph()"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_79.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_79.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_79.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_79.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network_2","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[304,305,306],"dellines":[289,290],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_oldfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_80.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_80.txt","newdoc":" DO NOT override the AbstractGraph *degree() implementations.\n Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to EndpointPair mapping).\n Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n Network<LinkedList>.\n DO NOT override the AbstractGraph *degree() implementations.\n Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to EndpointPair mapping).\n Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n Network<LinkedList>.\n","newJdoc":"","olddoc":" DO NOT override the AbstractGraph *degree() implementations.\n Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to EndpointPair mapping).\n Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n Network<LinkedList>.\n DO NOT override the AbstractGraph *degree() implementations.\n Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to EndpointPair mapping).\n Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n Network<LinkedList>.\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/AbstractNetwork","pathinproj":"android/guava/src/com/google/common/graph/AbstractNetwork.java","addlines":[97,98],"dellines":[94,95],"addcode":["            return isOrderingCompatible(endpointPair)\n","            return isOrderingCompatible(endpointPair)\n"],"delcode":["            return isDirected() == endpointPair.isOrdered()\n","            return isDirected() == endpointPair.isOrdered()\n"],"methodSig":"public Graph<N> asGraph()"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_80.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_80.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_80.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_80.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_oldfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_81.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_81.txt","newdoc":" DO NOT override the AbstractGraph *degree() implementations.\n Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to EndpointPair mapping).\n Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n Network<LinkedList>.\n DO NOT override the AbstractGraph *degree() implementations.\n Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to EndpointPair mapping).\n Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n Network<LinkedList>.\n DO NOT override the AbstractGraph *degree() implementations.\n Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to EndpointPair mapping).\n Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n Network<LinkedList>.\n","newJdoc":"","olddoc":" DO NOT override the AbstractGraph *degree() implementations.\n Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to EndpointPair mapping).\n Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n Network<LinkedList>.\n DO NOT override the AbstractGraph *degree() implementations.\n Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to EndpointPair mapping).\n Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n Network<LinkedList>.\n DO NOT override the AbstractGraph *degree() implementations.\n Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to EndpointPair mapping).\n Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n Network<LinkedList>.\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/AbstractNetwork","pathinproj":"android/guava/src/com/google/common/graph/AbstractNetwork.java","addlines":[97,98],"dellines":[94,95],"addcode":["            return isOrderingCompatible(endpointPair)\n","            return isOrderingCompatible(endpointPair)\n"],"delcode":["            return isDirected() == endpointPair.isOrdered()\n","            return isDirected() == endpointPair.isOrdered()\n"],"methodSig":"public Graph<N> asGraph()"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_81.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_81.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_81.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_81.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_oldfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_82.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_82.txt","newdoc":" DO NOT override the AbstractGraph *degree() implementations.\n Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to EndpointPair mapping).\n Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n Network<LinkedList>.\n DO NOT override the AbstractGraph *degree() implementations.\n Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to EndpointPair mapping).\n Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n Network<LinkedList>.\n DO NOT override the AbstractGraph *degree() implementations.\n Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to EndpointPair mapping).\n Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n Network<LinkedList>.\n DO NOT override the AbstractGraph *degree() implementations.\n Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to EndpointPair mapping).\n Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n Network<LinkedList>.\n","newJdoc":"","olddoc":" DO NOT override the AbstractGraph *degree() implementations.\n Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to EndpointPair mapping).\n Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n Network<LinkedList>.\n DO NOT override the AbstractGraph *degree() implementations.\n Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to EndpointPair mapping).\n Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n Network<LinkedList>.\n DO NOT override the AbstractGraph *degree() implementations.\n Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to EndpointPair mapping).\n Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n Network<LinkedList>.\n DO NOT override the AbstractGraph *degree() implementations.\n Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to EndpointPair mapping).\n Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n Network<LinkedList>.\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/AbstractNetwork","pathinproj":"android/guava/src/com/google/common/graph/AbstractNetwork.java","addlines":[97,98],"dellines":[94,95],"addcode":["            return isOrderingCompatible(endpointPair)\n","            return isOrderingCompatible(endpointPair)\n"],"delcode":["            return isDirected() == endpointPair.isOrdered()\n","            return isDirected() == endpointPair.isOrdered()\n"],"methodSig":"public Graph<N> asGraph()"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_82.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_82.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_82.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_82.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_83.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_83.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[161,385,355,260,261,262,248,249],"dellines":[],"addcode":["  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  @Override\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  @Override\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  @Override\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  @Override\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" boolean hasEdgeConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_83.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_83.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_83.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_83.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network_2","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[304,305,306],"dellines":[289,290],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_84.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_84.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[161,385,355,260,261,262,248,249],"dellines":[],"addcode":["  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  @Override\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  @Override\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  @Override\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  @Override\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" boolean hasEdgeConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_84.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_84.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_84.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_84.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_85.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_85.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[161,385,355,260,261,262,248,249],"dellines":[],"addcode":["  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  @Override\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  @Override\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  @Override\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  @Override\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" boolean hasEdgeConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_85.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_85.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_85.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_85.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_86.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_86.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[161,385,355,260,261,262,248,249],"dellines":[],"addcode":["  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  @Override\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  @Override\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  @Override\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n","  @Override\n","  boolean hasEdgeConnecting(EndpointPair<N> endpoints);\n"],"delcode":[],"methodSig":" boolean hasEdgeConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_86.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_86.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_86.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_86.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_87.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_87.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/AbstractBaseGraph_2","pathinproj":"guava/src/com/google/common/graph/AbstractBaseGraph.java","addlines":[240,241,228,229,150,230,151,231,152,153,238,239],"dellines":[],"addcode":["  protected final void validateEndpoints(EndpointPair<?> endpoints) {\n","    checkNotNull(endpoints);\n","    checkArgument(isOrderingCompatible(endpoints), ENDPOINTS_MISMATCH);\n","  }\n","  protected final void validateEndpoints(EndpointPair<?> endpoints) {\n","    checkNotNull(endpoints);\n","    checkArgument(isOrderingCompatible(endpoints), ENDPOINTS_MISMATCH);\n","  }\n","  protected final void validateEndpoints(EndpointPair<?> endpoints) {\n","    checkNotNull(endpoints);\n","    checkArgument(isOrderingCompatible(endpoints), ENDPOINTS_MISMATCH);\n","  }\n","  protected final void validateEndpoints(EndpointPair<?> endpoints) {\n","    checkNotNull(endpoints);\n","    checkArgument(isOrderingCompatible(endpoints), ENDPOINTS_MISMATCH);\n","  }\n"],"delcode":[],"methodSig":"protected final void validateEndpoints(EndpointPair<?> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_87.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_87.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_87.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_87.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network_2","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[304,305,306],"dellines":[289,290],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_88.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_88.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/AbstractBaseGraph_2","pathinproj":"guava/src/com/google/common/graph/AbstractBaseGraph.java","addlines":[240,241,228,229,150,230,151,231,152,153,238,239],"dellines":[],"addcode":["  protected final void validateEndpoints(EndpointPair<?> endpoints) {\n","    checkNotNull(endpoints);\n","    checkArgument(isOrderingCompatible(endpoints), ENDPOINTS_MISMATCH);\n","  }\n","  protected final void validateEndpoints(EndpointPair<?> endpoints) {\n","    checkNotNull(endpoints);\n","    checkArgument(isOrderingCompatible(endpoints), ENDPOINTS_MISMATCH);\n","  }\n","  protected final void validateEndpoints(EndpointPair<?> endpoints) {\n","    checkNotNull(endpoints);\n","    checkArgument(isOrderingCompatible(endpoints), ENDPOINTS_MISMATCH);\n","  }\n","  protected final void validateEndpoints(EndpointPair<?> endpoints) {\n","    checkNotNull(endpoints);\n","    checkArgument(isOrderingCompatible(endpoints), ENDPOINTS_MISMATCH);\n","  }\n"],"delcode":[],"methodSig":"protected final void validateEndpoints(EndpointPair<?> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_88.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_88.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_88.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_88.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_89.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_89.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/AbstractBaseGraph_2","pathinproj":"guava/src/com/google/common/graph/AbstractBaseGraph.java","addlines":[240,241,228,229,150,230,151,231,152,153,238,239],"dellines":[],"addcode":["  protected final void validateEndpoints(EndpointPair<?> endpoints) {\n","    checkNotNull(endpoints);\n","    checkArgument(isOrderingCompatible(endpoints), ENDPOINTS_MISMATCH);\n","  }\n","  protected final void validateEndpoints(EndpointPair<?> endpoints) {\n","    checkNotNull(endpoints);\n","    checkArgument(isOrderingCompatible(endpoints), ENDPOINTS_MISMATCH);\n","  }\n","  protected final void validateEndpoints(EndpointPair<?> endpoints) {\n","    checkNotNull(endpoints);\n","    checkArgument(isOrderingCompatible(endpoints), ENDPOINTS_MISMATCH);\n","  }\n","  protected final void validateEndpoints(EndpointPair<?> endpoints) {\n","    checkNotNull(endpoints);\n","    checkArgument(isOrderingCompatible(endpoints), ENDPOINTS_MISMATCH);\n","  }\n"],"delcode":[],"methodSig":"protected final void validateEndpoints(EndpointPair<?> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_89.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_89.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_89.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_89.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_90.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfuncnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_90.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/AbstractBaseGraph_2","pathinproj":"guava/src/com/google/common/graph/AbstractBaseGraph.java","addlines":[240,241,228,229,150,230,151,231,152,153,238,239],"dellines":[],"addcode":["  protected final void validateEndpoints(EndpointPair<?> endpoints) {\n","    checkNotNull(endpoints);\n","    checkArgument(isOrderingCompatible(endpoints), ENDPOINTS_MISMATCH);\n","  }\n","  protected final void validateEndpoints(EndpointPair<?> endpoints) {\n","    checkNotNull(endpoints);\n","    checkArgument(isOrderingCompatible(endpoints), ENDPOINTS_MISMATCH);\n","  }\n","  protected final void validateEndpoints(EndpointPair<?> endpoints) {\n","    checkNotNull(endpoints);\n","    checkArgument(isOrderingCompatible(endpoints), ENDPOINTS_MISMATCH);\n","  }\n","  protected final void validateEndpoints(EndpointPair<?> endpoints) {\n","    checkNotNull(endpoints);\n","    checkArgument(isOrderingCompatible(endpoints), ENDPOINTS_MISMATCH);\n","  }\n"],"delcode":[],"methodSig":"protected final void validateEndpoints(EndpointPair<?> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_90.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_90.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_90.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_90.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_oldfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_91.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_91.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableValueGraph.java","addlines":[131,132],"dellines":[128,129,130,131,127],"addcode":["    return edgeValueOrDefault_internal(checkNotNull(nodeU), checkNotNull(nodeV), defaultValue);\n","  }\n"],"delcode":["    checkNotNull(nodeU);\n","    checkNotNull(nodeV);\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    V value = (connectionsU == null) ? null : connectionsU.value(nodeV);\n","    return value == null ? defaultValue : value;\n"],"methodSig":"public V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_91.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_91.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_91.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_91.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network_2","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[304,305,306],"dellines":[289,290],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_oldfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_92.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_92.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableValueGraph.java","addlines":[131,132],"dellines":[128,129,130,131,127],"addcode":["    return edgeValueOrDefault_internal(checkNotNull(nodeU), checkNotNull(nodeV), defaultValue);\n","  }\n"],"delcode":["    checkNotNull(nodeU);\n","    checkNotNull(nodeV);\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    V value = (connectionsU == null) ? null : connectionsU.value(nodeV);\n","    return value == null ? defaultValue : value;\n"],"methodSig":"public V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_92.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_92.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_92.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_92.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_oldfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_93.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_93.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableValueGraph.java","addlines":[131,132],"dellines":[128,129,130,131,127],"addcode":["    return edgeValueOrDefault_internal(checkNotNull(nodeU), checkNotNull(nodeV), defaultValue);\n","  }\n"],"delcode":["    checkNotNull(nodeU);\n","    checkNotNull(nodeV);\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    V value = (connectionsU == null) ? null : connectionsU.value(nodeV);\n","    return value == null ? defaultValue : value;\n"],"methodSig":"public V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_93.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_93.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_93.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_93.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_oldfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_94.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_94.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ConfigurableValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ConfigurableValueGraph.java","addlines":[131,132],"dellines":[128,129,130,131,127],"addcode":["    return edgeValueOrDefault_internal(checkNotNull(nodeU), checkNotNull(nodeV), defaultValue);\n","  }\n"],"delcode":["    checkNotNull(nodeU);\n","    checkNotNull(nodeV);\n","    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n","    V value = (connectionsU == null) ? null : connectionsU.value(nodeV);\n","    return value == null ? defaultValue : value;\n"],"methodSig":"public V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_94.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_94.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_94.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_94.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_95.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ForwardingNetwork_2","pathinproj":"guava/src/com/google/common/graph/ForwardingNetwork.java","addlines":[128,129,130,131,426,427,428,429,174,175,176,432,177,433,178,434,179,435,127],"dellines":[],"addcode":["  @Override\n","  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","    return delegate().edgesConnecting(endpoints);\n","  }\n","  @Override\n","  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","    return delegate().edgesConnecting(endpoints);\n","  }\n","  @Override\n","  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return edgesConnecting(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","  @Override\n","  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return edgesConnecting(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","    @Override\n","    public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","      return delegate().edgesConnecting(transpose(endpoints));\n","    }\n","    @Override\n","    public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","      return delegate().edgesConnecting(transpose(endpoints));\n","    }\n"],"delcode":[],"methodSig":"public Set<E> edgesConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_95.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_95.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_95.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_95.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network_2","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[304,305,306],"dellines":[289,290],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_96.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ForwardingNetwork_2","pathinproj":"guava/src/com/google/common/graph/ForwardingNetwork.java","addlines":[128,129,130,131,426,427,428,429,174,175,176,432,177,433,178,434,179,435,127],"dellines":[],"addcode":["  @Override\n","  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","    return delegate().edgesConnecting(endpoints);\n","  }\n","  @Override\n","  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","    return delegate().edgesConnecting(endpoints);\n","  }\n","  @Override\n","  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return edgesConnecting(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","  @Override\n","  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return edgesConnecting(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","    @Override\n","    public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","      return delegate().edgesConnecting(transpose(endpoints));\n","    }\n","    @Override\n","    public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","      return delegate().edgesConnecting(transpose(endpoints));\n","    }\n"],"delcode":[],"methodSig":"public Set<E> edgesConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_96.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_96.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_96.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_96.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_97.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ForwardingNetwork_2","pathinproj":"guava/src/com/google/common/graph/ForwardingNetwork.java","addlines":[128,129,130,131,426,427,428,429,174,175,176,432,177,433,178,434,179,435,127],"dellines":[],"addcode":["  @Override\n","  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","    return delegate().edgesConnecting(endpoints);\n","  }\n","  @Override\n","  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","    return delegate().edgesConnecting(endpoints);\n","  }\n","  @Override\n","  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return edgesConnecting(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","  @Override\n","  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return edgesConnecting(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","    @Override\n","    public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","      return delegate().edgesConnecting(transpose(endpoints));\n","    }\n","    @Override\n","    public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","      return delegate().edgesConnecting(transpose(endpoints));\n","    }\n"],"delcode":[],"methodSig":"public Set<E> edgesConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_97.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_97.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_97.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_97.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_98.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ForwardingNetwork_2","pathinproj":"guava/src/com/google/common/graph/ForwardingNetwork.java","addlines":[128,129,130,131,426,427,428,429,174,175,176,432,177,433,178,434,179,435,127],"dellines":[],"addcode":["  @Override\n","  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","    return delegate().edgesConnecting(endpoints);\n","  }\n","  @Override\n","  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","    return delegate().edgesConnecting(endpoints);\n","  }\n","  @Override\n","  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return edgesConnecting(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","  @Override\n","  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return edgesConnecting(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","    @Override\n","    public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","      return delegate().edgesConnecting(transpose(endpoints));\n","    }\n","    @Override\n","    public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","      return delegate().edgesConnecting(transpose(endpoints));\n","    }\n"],"delcode":[],"methodSig":"public Set<E> edgesConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_98.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_98.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_98.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_98.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[274,275],"dellines":[274,275],"addcode":["   * Returns the set of edges that each directly connect {@code nodeU} to {@code nodeV}.\n","   * Returns the set of edges that each directly connect {@code nodeU} to {@code nodeV}.\n"],"delcode":["   * Returns the set of edges directly connecting {@code nodeU} to {@code nodeV}.\n","   * Returns the set of edges directly connecting {@code nodeU} to {@code nodeV}.\n"],"methodSig":" Set<E> edgesConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_99.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ForwardingNetwork_2","pathinproj":"guava/src/com/google/common/graph/ForwardingNetwork.java","addlines":[128,129,130,131,426,427,428,429,174,175,176,432,177,433,178,434,179,435,127],"dellines":[],"addcode":["  @Override\n","  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","    return delegate().edgesConnecting(endpoints);\n","  }\n","  @Override\n","  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","    return delegate().edgesConnecting(endpoints);\n","  }\n","  @Override\n","  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return edgesConnecting(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","  @Override\n","  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","    validateEndpoints(endpoints);\n","    return edgesConnecting(endpoints.nodeU(), endpoints.nodeV());\n","  }\n","    @Override\n","    public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","      return delegate().edgesConnecting(transpose(endpoints));\n","    }\n","    @Override\n","    public Set<E> edgesConnecting(EndpointPair<N> endpoints) {\n","      return delegate().edgesConnecting(transpose(endpoints));\n","    }\n"],"delcode":[],"methodSig":"public Set<E> edgesConnecting(EndpointPair<N> endpoints)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_99.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_99.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_99.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_99.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_oldfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_100.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_100.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/AbstractNetwork_2","pathinproj":"guava/src/com/google/common/graph/AbstractNetwork.java","addlines":[192,193],"dellines":[186,188],"addcode":["    return Optional.ofNullable(edgeConnectingOrNull(nodeU, nodeV));\n","  }\n"],"delcode":["        return Optional.empty();\n","        return Optional.of(edgesConnecting.iterator().next());\n"],"methodSig":"public Optional<E> edgeConnecting(N nodeU, N nodeV)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_100.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_100.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_100.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_100.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network_2","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[304,305,306],"dellines":[289,290],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code Optional.empty()} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code Optional.empty()} if no such edge exists.\n"],"methodSig":" Optional<E> edgeConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_oldfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_101.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_101.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/AbstractNetwork_2","pathinproj":"guava/src/com/google/common/graph/AbstractNetwork.java","addlines":[192,193],"dellines":[186,188],"addcode":["    return Optional.ofNullable(edgeConnectingOrNull(nodeU, nodeV));\n","  }\n"],"delcode":["        return Optional.empty();\n","        return Optional.of(edgesConnecting.iterator().next());\n"],"methodSig":"public Optional<E> edgeConnecting(N nodeU, N nodeV)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_101.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_101.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_101.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_101.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[264,265,266,267],"dellines":[249,250,252],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV} (in the order, if\n","   * any, specified by {@code endpoints}), if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n","   * otherwise, returns {@code Optional.empty()}.\n","   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n"],"methodSig":" Optional<V> edgeValue(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_oldfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_102.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_102.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/AbstractNetwork_2","pathinproj":"guava/src/com/google/common/graph/AbstractNetwork.java","addlines":[192,193],"dellines":[186,188],"addcode":["    return Optional.ofNullable(edgeConnectingOrNull(nodeU, nodeV));\n","  }\n"],"delcode":["        return Optional.empty();\n","        return Optional.of(edgesConnecting.iterator().next());\n"],"methodSig":"public Optional<E> edgeConnecting(N nodeU, N nodeV)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_102.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_102.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_102.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_102.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[304,305,333,334,303,335],"dellines":[288,304,289,303],"addcode":["  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n","  /**\n","   * Returns the single edge that directly connects {@code nodeU} to {@code nodeV}, if one is\n","   * present, or {@code null} if no such edge exists.\n"],"delcode":["   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n","   * Returns the single edge directly connecting {@code nodeU} to {@code nodeV}, if one is present,\n","   * or {@code null} if no such edge exists.\n"],"methodSig":" E edgeConnectingOrNull(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_oldfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_103.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_103.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/AbstractNetwork_2","pathinproj":"guava/src/com/google/common/graph/AbstractNetwork.java","addlines":[192,193],"dellines":[186,188],"addcode":["    return Optional.ofNullable(edgeConnectingOrNull(nodeU, nodeV));\n","  }\n"],"delcode":["        return Optional.empty();\n","        return Optional.of(edgesConnecting.iterator().next());\n"],"methodSig":"public Optional<E> edgeConnecting(N nodeU, N nodeV)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_103.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_103.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_103.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_103.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Network","pathinproj":"android/guava/src/com/google/common/graph/Network.java","addlines":[274,275],"dellines":[274,275],"addcode":["   * Returns the set of edges that each directly connect {@code nodeU} to {@code nodeV}.\n","   * Returns the set of edges that each directly connect {@code nodeU} to {@code nodeV}.\n"],"delcode":["   * Returns the set of edges directly connecting {@code nodeU} to {@code nodeV}.\n","   * Returns the set of edges directly connecting {@code nodeU} to {@code nodeV}.\n"],"methodSig":" Set<E> edgesConnecting(N nodeU, N nodeV)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"},{"func":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_oldfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_104.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_104.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/AbstractNetwork_2","pathinproj":"guava/src/com/google/common/graph/AbstractNetwork.java","addlines":[192,193],"dellines":[186,188],"addcode":["    return Optional.ofNullable(edgeConnectingOrNull(nodeU, nodeV));\n","  }\n"],"delcode":["        return Optional.empty();\n","        return Optional.of(edgesConnecting.iterator().next());\n"],"methodSig":"public Optional<E> edgeConnecting(N nodeU, N nodeV)"},"doc":{"oldfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_104.txt","newfunccode":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocfunccode_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_104.txt","newdoc":"","newJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_newdocnewJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_104.txt","olddoc":"","oldJdoc":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b/Codes/Match_olddocJdoc_af3ee1c5986005e4fdeec6e3430d8d63316bee6b_104.txt","path":"/home/pritish/Documents/IP work/guv_ver/v28.1/af3ee1c5986005e4fdeec6e3430d8d63316bee6b/ValueGraph_2","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[288,287],"dellines":[261],"addcode":["  /**\n","   * Returns the value of the edge that connects {@code nodeU} to {@code nodeV}, if one is present;\n"],"delcode":["   * Returns the value of the edge connecting {@code nodeU} to {@code nodeV}, if one is present;\n"],"methodSig":" V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)"},"id":3,"flag":1,"commit":"af3ee1c5986005e4fdeec6e3430d8d63316bee6b"}]