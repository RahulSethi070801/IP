{
    "addition": {
        "45": "   * Adds an edge connecting {@code nodeU} to {@code nodeV} if one is not already present, and\n",
        "46": "   * sets a value for that edge to {@code value} (overwriting the existing value, if any).\n",
        "47": "   *\n",
        "48": "   * <p>If the graph is directed, the resultant edge will be directed; otherwise, it will be\n",
        "49": "   * undirected.\n",
        "64": "  /**\n",
        "65": "   * Adds an edge connecting {@code endpoints} if one is not already present, and sets a value for\n",
        "66": "   * that edge to {@code value} (overwriting the existing value, if any).\n",
        "67": "   *\n",
        "68": "   * <p>If the graph is directed, the resultant edge will be directed; otherwise, it will be\n",
        "69": "   * undirected.\n",
        "70": "   *\n",
        "71": "   * <p>If this graph is directed, {@code endpoints} must be ordered.\n",
        "72": "   *\n",
        "73": "   * <p>Values do not have to be unique. However, values must be non-null.\n",
        "74": "   *\n",
        "75": "   * <p>If either or both endpoints are not already present in this graph, this method will silently\n",
        "76": "   * {@link #addNode(Object) add} each missing endpoint to the graph.\n",
        "77": "   *\n",
        "78": "   * @return the value previously associated with the edge connecting {@code nodeU} to {@code\n",
        "79": "   *     nodeV}, or null if there was no such edge.\n",
        "80": "   * @throws IllegalArgumentException if the introduction of the edge would violate {@link\n",
        "81": "   *     #allowsSelfLoops()}\n",
        "82": "   * @throws IllegalArgumentException if the endpoints are unordered and the graph is directed\n",
        "83": "   */\n",
        "84": "  @CanIgnoreReturnValue\n",
        "85": "  V putEdgeValue(EndpointPair<N> endpoints, V value);\n",
        "86": "\n",
        "103": "\n",
        "104": "  /**\n",
        "105": "   * Removes the edge connecting {@code endpoints}, if it is present.\n",
        "106": "   *\n",
        "107": "   * <p>If this graph is directed, {@code endpoints} must be ordered.\n",
        "108": "   *\n",
        "109": "   * @return the value previously associated with the edge connecting {@code endpoints}, or null if\n",
        "110": "   *     there was no such edge.\n",
        "111": "   */\n",
        "112": "  @CanIgnoreReturnValue\n",
        "113": "  V removeEdge(EndpointPair<N> endpoints);\n"
    },
    "removed": {
        "45": "   * Adds an edge connecting {@code nodeU} to {@code nodeV} if one is not already present; associate\n",
        "46": "   * that edge with {@code value}. In an undirected graph, the edge will also connect {@code nodeV}\n",
        "47": "   * to {@code nodeU}.\n"
    }
}