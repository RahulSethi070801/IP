{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.Beta;\n",
        "20": "import com.google.errorprone.annotations.CanIgnoreReturnValue;\n",
        "21": "\n",
        "22": "/**\n",
        "23": " * A subtype of {@link Network} which permits mutations.\n",
        "24": " * Users should generally use the {@link Network} interface where possible.\n",
        "25": " *\n",
        "26": " * @author Joshua O'Madadhain\n",
        "27": " * @param <N> Node parameter type\n",
        "28": " * @param <E> Edge parameter type\n",
        "29": " * @since 20.0\n",
        "30": " */\n",
        "31": "@Beta\n",
        "32": "public interface MutableNetwork<N, E> extends Network<N, E> {\n",
        "33": "\n",
        "34": "  /**\n",
        "35": "   * Adds {@code node} to this graph (optional operation).\n",
        "36": "   *\n",
        "37": "   * <p><b>Nodes must be unique</b>, just as {@code Map} keys must be; they must also be non-null.\n",
        "38": "   *\n",
        "39": "   * @return {@code true} iff the graph was modified as a result of this call\n",
        "40": "   * @throws UnsupportedOperationException if the add operation is not supported by this graph\n",
        "41": "   */\n",
        "42": "  @CanIgnoreReturnValue\n",
        "43": "  boolean addNode(N node);\n",
        "44": "\n",
        "45": "  /**\n",
        "46": "   * Adds {@code edge} to this graph, connecting {@code node1} to {@code node2}\n",
        "47": "   * (optional operation).\n",
        "48": "   *\n",
        "49": "   * <p><b>Edges must be unique</b>, just as {@code Map} keys must be; they must also be non-null.\n",
        "50": "   *\n",
        "51": "   * <p>If {@code edge} already connects {@code node1} to {@code node2} in this graph\n",
        "52": "   * (in the specified order if order is significant, as for directed graphs, else in any order),\n",
        "53": "   * then this method will have no effect and will return {@code false}.\n",
        "54": "   *\n",
        "55": "   * <p>Behavior if {@code node1} and {@code node2} are not already elements of the graph is\n",
        "56": "   * unspecified. Suggested behaviors include (a) silently adding {@code node1} and {@code node2}\n",
        "57": "   * to the graph or (b) throwing {@code IllegalArgumentException}.\n",
        "58": "   *\n",
        "59": "   * @return {@code true} iff the graph was modified as a result of this call\n",
        "60": "   * @throws IllegalArgumentException if {@code edge} already exists and connects nodes other than\n",
        "61": "   *     {@code node1} and {@code node2}, or if the graph is not a multigraph and {@code node1} is\n",
        "62": "   *     already connected to {@code node2}\n",
        "63": "   * @throws UnsupportedOperationException if the add operation is not supported by this graph\n",
        "64": "   */\n",
        "65": "  @CanIgnoreReturnValue\n",
        "66": "  boolean addEdge(E edge, N node1, N node2);\n",
        "67": "\n",
        "68": "  /**\n",
        "69": "   * Removes {@code node} from this graph, if it is present (optional operation).\n",
        "70": "   * In general, all edges incident to {@code node} in this graph will also be removed.\n",
        "71": "   * (This is not true for hyperedges.)\n",
        "72": "   *\n",
        "73": "   * @return {@code true} iff the graph was modified as a result of this call\n",
        "74": "   * @throws UnsupportedOperationException if the remove operation is not supported by this graph\n",
        "75": "   */\n",
        "76": "  @CanIgnoreReturnValue\n",
        "77": "  boolean removeNode(Object node);\n",
        "78": "\n",
        "79": "  /**\n",
        "80": "   * Removes {@code edge} from this graph, if it is present (optional operation).\n",
        "81": "   * In general, nodes incident to {@code edge} are unaffected (although implementations may choose\n",
        "82": "   * to disallow certain configurations, e.g., isolated nodes).\n",
        "83": "   *\n",
        "84": "   * @return {@code true} iff the graph was modified as a result of this call\n",
        "85": "   * @throws UnsupportedOperationException if the remove operation is not supported by this graph\n",
        "86": "   */\n",
        "87": "  @CanIgnoreReturnValue\n",
        "88": "  boolean removeEdge(Object edge);\n",
        "89": "}\n"
    },
    "removed": {}
}