{
    "addition": {
        "44": "  private final MutableGraph<Integer> graph;\n",
        "57": "  private static MutableGraph<Integer> createGraph(GraphType graphType) {\n",
        "83": "    MutableGraph<Integer> g2 = createGraph(graphType);\n",
        "92": "    graph.addEdge(N1, N2);\n",
        "94": "    MutableGraph<Integer> g2 = createGraph(oppositeType(graphType));\n",
        "95": "    g2.addEdge(N1, N2);\n",
        "104": "    graph.addEdge(N1, N1);\n",
        "106": "    MutableGraph<Integer> g2 = createGraph(oppositeType(graphType));\n",
        "107": "    g2.addEdge(N1, N1);\n",
        "116": "    graph.addEdge(N1, N2);\n",
        "118": "    MutableGraph<Integer> g2 = GraphBuilder.from(graph)\n",
        "121": "    g2.addEdge(N1, N2);\n",
        "130": "    GraphBuilder<Integer> builder = GraphBuilder.from(graph);\n",
        "131": "    MutableGraph<Integer> g1 = builder.build();\n",
        "132": "    MutableGraph<Integer> g2 = builder.build();\n",
        "134": "    // for g1, add 1->2 first, then 3->1\n",
        "135": "    g1.addEdge(N1, N2);\n",
        "136": "    g1.addEdge(N3, N1);\n",
        "138": "    // for g2, add 3->1 first, then 1->2\n",
        "139": "    g2.addEdge(N3, N1);\n",
        "140": "    g2.addEdge(N1, N2);\n",
        "147": "    graph.addEdge(N1, N2);\n",
        "149": "    MutableGraph<Integer> g2 = createGraph(graphType);\n",
        "150": "    g2.addEdge(N2, N1);\n"
    },
    "removed": {
        "37": "  private static final String E11 = \"1-1\";\n",
        "38": "  private static final String E12 = \"1-2\";\n",
        "39": "  private static final String E12_A = \"1-2a\";\n",
        "40": "  private static final String E13 = \"1-3\";\n",
        "41": "\n",
        "49": "  private final Graph<Integer, String> graph;\n",
        "62": "  private static Graph<Integer, String> createGraph(GraphType graphType) {\n",
        "88": "    Graph<Integer, String> g2 = createGraph(graphType);\n",
        "94": "  // Node sets are the same, but edge sets differ.\n",
        "95": "  @Test\n",
        "96": "  public void equals_edgeSetsDiffer() {\n",
        "97": "    graph.addEdge(E12, N1, N2);\n",
        "98": "\n",
        "99": "    Graph<Integer, String> g2 = createGraph(graphType);\n",
        "100": "    g2.addEdge(E13, N1, N2);\n",
        "101": "\n",
        "102": "    new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();\n",
        "103": "  }\n",
        "104": "\n",
        "108": "    graph.addEdge(E12, N1, N2);\n",
        "110": "    Graph<Integer, String> g2 = createGraph(oppositeType(graphType));\n",
        "111": "    g2.addEdge(E12, N1, N2);\n",
        "120": "    graph.addEdge(E11, N1, N1);\n",
        "122": "    Graph<Integer, String> g2 = createGraph(oppositeType(graphType));\n",
        "123": "    g2.addEdge(E11, N1, N1);\n",
        "128": "  // Node/edge sets are the same, but node/edge connections differ.\n",
        "129": "  @Test\n",
        "130": "  public void equals_connectionsDiffer() {\n",
        "131": "    graph.addEdge(E12, N1, N2);\n",
        "132": "    graph.addEdge(E13, N1, N3);\n",
        "133": "\n",
        "134": "    Graph<Integer, String> g2 = createGraph(graphType);\n",
        "135": "    // connect E13 to N1 and N2, and E12 to N1 and N3 => not equal\n",
        "136": "    g2.addEdge(E13, N1, N2);\n",
        "137": "    g2.addEdge(E12, N1, N3);\n",
        "138": "\n",
        "139": "    new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();\n",
        "140": "  }\n",
        "141": "\n",
        "146": "    graph.addEdge(E12, N1, N2);\n",
        "148": "    Graph<Integer, String> g2 = GraphBuilder.from(graph)\n",
        "149": "        .allowsParallelEdges(!graph.allowsParallelEdges())\n",
        "152": "    g2.addEdge(E12, N1, N2);\n",
        "161": "    GraphBuilder<Integer, String> builder = GraphBuilder.from(graph).allowsParallelEdges(true);\n",
        "162": "    Graph<Integer, String> g1 = builder.build();\n",
        "163": "    Graph<Integer, String> g2 = builder.build();\n",
        "165": "    // for ug1, add e12 first, then e12_a\n",
        "166": "    g1.addEdge(E12, N1, N2);\n",
        "167": "    g1.addEdge(E12_A, N1, N2);\n",
        "169": "    // for ug2, add e12_a first, then e12\n",
        "170": "    g2.addEdge(E12_A, N1, N2);\n",
        "171": "    g2.addEdge(E12, N1, N2);\n",
        "178": "    graph.addEdge(E12, N1, N2);\n",
        "180": "    Graph<Integer, String> g2 = createGraph(graphType);\n",
        "181": "    g2.addEdge(E12, N2, N1);\n"
    }
}