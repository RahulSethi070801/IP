{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "20": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "21": "import static com.google.common.graph.GraphErrorMessageUtils.ADDING_PARALLEL_EDGE;\n",
        "22": "import static com.google.common.graph.GraphErrorMessageUtils.REUSING_EDGE;\n",
        "23": "import static com.google.common.graph.GraphErrorMessageUtils.SELF_LOOPS_NOT_ALLOWED;\n",
        "24": "\n",
        "25": "import com.google.common.collect.ImmutableList;\n",
        "26": "import com.google.errorprone.annotations.CanIgnoreReturnValue;\n",
        "27": "\n",
        "28": "import java.util.Map;\n",
        "29": "\n",
        "30": "/**\n",
        "31": " * Configurable implementation of {@link Network} that supports both directed and undirected graphs.\n",
        "32": " * Instances of this class should be constructed with {@link NetworkBuilder}.\n",
        "33": " *\n",
        "34": "  * <p>Time complexities for mutation methods:\n",
        "35": " * <ul>\n",
        "36": " * <li>{@code addNode(N node)}: O(1).\n",
        "37": " * <li>{@code addEdge(E edge, N node1, N node2)}: O(1).\n",
        "38": " * <li>{@code removeNode(N node)}: O(d_node).\n",
        "39": " * <li>{@code removeEdge(E edge)}: O(1), unless this graph allows parallel edges;\n",
        "40": " *     in that case this method is O(min(outD_edgeSource, inD_edgeTarget)).\n",
        "41": " * </ul>\n",
        "42": " * where d_node is the degree of node, inD_node is the in-degree of node, and outD_node is the\n",
        "43": " * out-degree of node.\n",
        "44": " *\n",
        "45": " * @author James Sexton\n",
        "46": " * @author Joshua O'Madadhain\n",
        "47": " * @author Omar Darwish\n",
        "48": " * @param <N> Node parameter type\n",
        "49": " * @param <E> Edge parameter type\n",
        "50": " */\n",
        "51": "// TODO(b/24620028): Enable this class to support sorted nodes/edges.\n",
        "52": "class ConfigurableNetwork<N, E>\n",
        "53": "    extends AbstractConfigurableNetwork<N, E>\n",
        "54": "    implements MutableNetwork<N, E> {\n",
        "55": "\n",
        "56": "  /**\n",
        "57": "   * Constructs a mutable graph with the properties specified in {@code builder}.\n",
        "58": "   */\n",
        "59": "  ConfigurableNetwork(NetworkBuilder<? super N, ? super E> builder) {\n",
        "60": "    super(builder);\n",
        "61": "  }\n",
        "62": "\n",
        "63": "  /**\n",
        "64": "   * Constructs a graph with the properties specified in {@code builder}, initialized with\n",
        "65": "   * the given node and edge maps. May be used for either mutable or immutable graphs.\n",
        "66": "   */\n",
        "67": "  ConfigurableNetwork(NetworkBuilder<? super N, ? super E> builder,\n",
        "68": "      Map<N, NodeConnections<N, E>> nodeConnections,\n",
        "69": "      Map<E, IncidentNodes<N>> edgeToIncidentNodes) {\n",
        "70": "    super(builder, nodeConnections, edgeToIncidentNodes);\n",
        "71": "  }\n",
        "72": "\n",
        "73": "  @Override\n",
        "74": "  @CanIgnoreReturnValue\n",
        "75": "  public boolean addNode(N node) {\n",
        "76": "    checkNotNull(node, \"node\");\n",
        "77": "    if (nodes().contains(node)) {\n",
        "78": "      return false;\n",
        "79": "    }\n",
        "80": "    nodeConnections.put(node, newNodeConnections(isDirected()));\n",
        "81": "    return true;\n",
        "82": "  }\n",
        "83": "\n",
        "84": "  /**\n",
        "85": "   * Add nodes that are not elements of the graph, then add {@code edge} between them.\n",
        "86": "   * Return {@code false} if {@code edge} already exists between {@code node1} and {@code node2},\n",
        "87": "   * and in the same direction.\n",
        "88": "   *\n",
        "89": "   * @throws IllegalArgumentException if an edge (other than {@code edge}) already\n",
        "90": "   *         exists from {@code node1} to {@code node2}, and this is not a multigraph.\n",
        "91": "   *         Also, if self-loops are not allowed, and {@code node1} is equal to {@code node2}.\n",
        "92": "   */\n",
        "93": "  @Override\n",
        "94": "  @CanIgnoreReturnValue\n",
        "95": "  public boolean addEdge(E edge, N node1, N node2) {\n",
        "96": "    checkNotNull(edge, \"edge\");\n",
        "97": "    checkNotNull(node1, \"node1\");\n",
        "98": "    checkNotNull(node2, \"node2\");\n",
        "99": "    IncidentNodes<N> incidentNodes = IncidentNodes.of(node1, node2);\n",
        "100": "    checkArgument(allowsSelfLoops() || !incidentNodes.isSelfLoop(), SELF_LOOPS_NOT_ALLOWED, node1);\n",
        "101": "    boolean containsN1 = nodes().contains(node1);\n",
        "102": "    boolean containsN2 = nodes().contains(node2);\n",
        "103": "    if (edges().contains(edge)) {\n",
        "104": "      checkArgument(containsN1 && containsN2 && edgesConnecting(node1, node2).contains(edge),\n",
        "105": "          REUSING_EDGE, edge, incidentNodes(edge), incidentNodes);\n",
        "106": "      return false;\n",
        "107": "    } else if (!allowsParallelEdges()) {\n",
        "108": "      checkArgument(!(containsN1 && containsN2 && successors(node1).contains(node2)),\n",
        "109": "          ADDING_PARALLEL_EDGE, node1, node2);\n",
        "110": "    }\n",
        "111": "    if (!containsN1) {\n",
        "112": "      addNode(node1);\n",
        "113": "    }\n",
        "114": "    NodeConnections<N, E> connectionsN1 = nodeConnections.get(node1);\n",
        "115": "    connectionsN1.addSuccessor(node2, edge);\n",
        "116": "    if (!containsN2) {\n",
        "117": "      addNode(node2);\n",
        "118": "    }\n",
        "119": "    NodeConnections<N, E> connectionsN2 = nodeConnections.get(node2);\n",
        "120": "    connectionsN2.addPredecessor(node1, edge);\n",
        "121": "    edgeToIncidentNodes.put(edge, incidentNodes);\n",
        "122": "    return true;\n",
        "123": "  }\n",
        "124": "\n",
        "125": "  @Override\n",
        "126": "  @CanIgnoreReturnValue\n",
        "127": "  public boolean removeNode(Object node) {\n",
        "128": "    checkNotNull(node, \"node\");\n",
        "129": "    if (!nodes().contains(node)) {\n",
        "130": "      return false;\n",
        "131": "    }\n",
        "132": "    // Since views are returned, we need to copy the edges that will be removed.\n",
        "133": "    // Thus we avoid modifying the underlying view while iterating over it.\n",
        "134": "    for (E edge : ImmutableList.copyOf(incidentEdges(node))) {\n",
        "135": "      // Simply calling removeEdge(edge) would result in O(degree^2) behavior. However, we know that\n",
        "136": "      // after all incident edges are removed, the input node will be disconnected from all others.\n",
        "137": "      removeEdgeAndUpdateConnections(edge, true);\n",
        "138": "    }\n",
        "139": "    nodeConnections.remove(node);\n",
        "140": "    return true;\n",
        "141": "  }\n",
        "142": "\n",
        "143": "  @Override\n",
        "144": "  @CanIgnoreReturnValue\n",
        "145": "  public boolean removeEdge(Object edge) {\n",
        "146": "    checkNotNull(edge, \"edge\");\n",
        "147": "    if (!edges().contains(edge)) {\n",
        "148": "      return false;\n",
        "149": "    }\n",
        "150": "    // If there are no parallel edges, the removal of this edge will disconnect the incident nodes.\n",
        "151": "    removeEdgeAndUpdateConnections(edge, Graphs.parallelEdges(this, edge).isEmpty());\n",
        "152": "    return true;\n",
        "153": "  }\n",
        "154": "\n",
        "155": "  /**\n",
        "156": "   * If {@code disconnectIncidentNodes} is true, disconnects the nodes formerly connected\n",
        "157": "   * by {@code edge}. This should be set when all parallel edges are or will be removed.\n",
        "158": "   *\n",
        "159": "   * <p>Unlike {@link #removeEdge(Object)}, this method is guaranteed to run in O(1) time.\n",
        "160": "   *\n",
        "161": "   * @throws IllegalArgumentException if {@code edge} is not present in the graph.\n",
        "162": "   */\n",
        "163": "  private void removeEdgeAndUpdateConnections(Object edge, boolean disconnectIncidentNodes) {\n",
        "164": "    IncidentNodes<N> incidentNodes = checkedIncidentNodes(edge);\n",
        "165": "    N node1 = incidentNodes.node1();\n",
        "166": "    N node2 = incidentNodes.node2();\n",
        "167": "    NodeConnections<N, E> connectionsN1 = nodeConnections.get(node1);\n",
        "168": "    NodeConnections<N, E> connectionsN2 = nodeConnections.get(node2);\n",
        "169": "    if (disconnectIncidentNodes) {\n",
        "170": "      connectionsN1.removeSuccessor(node2);\n",
        "171": "      connectionsN2.removePredecessor(node1);\n",
        "172": "    }\n",
        "173": "    connectionsN1.removeOutEdge(edge);\n",
        "174": "    connectionsN2.removeInEdge(edge);\n",
        "175": "    edgeToIncidentNodes.remove(edge);\n",
        "176": "  }\n",
        "177": "\n",
        "178": "  private NodeConnections<N, E> newNodeConnections(boolean isDirected) {\n",
        "179": "    return isDirected\n",
        "180": "        ? DirectedNodeConnections.<N, E>of()\n",
        "181": "        : UndirectedNodeConnections.<N, E>of();\n",
        "182": "  }\n",
        "183": "}\n"
    },
    "removed": {}
}