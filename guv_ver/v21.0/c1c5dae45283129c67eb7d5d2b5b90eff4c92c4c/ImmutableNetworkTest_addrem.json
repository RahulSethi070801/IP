{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "21": "import org.junit.Test;\n",
        "22": "import org.junit.runner.RunWith;\n",
        "23": "import org.junit.runners.JUnit4;\n",
        "24": "\n",
        "25": "/**\n",
        "26": " * Tests for {@link ImmutableNetwork}.\n",
        "27": " */\n",
        "28": "@RunWith(JUnit4.class)\n",
        "29": "public class ImmutableNetworkTest {\n",
        "30": "\n",
        "31": "  @Test\n",
        "32": "  public void copyOfImmutableNetwork_optimized() {\n",
        "33": "    Network<String, String> graph1 = ImmutableNetwork.copyOf(\n",
        "34": "        NetworkBuilder.directed().<String, String>build());\n",
        "35": "    Network<String, String> graph2 = ImmutableNetwork.copyOf(graph1);\n",
        "36": "\n",
        "37": "    assertThat(graph2).isSameAs(graph1);\n",
        "38": "  }\n",
        "39": "\n",
        "40": "  @Test\n",
        "41": "  public void edgesConnecting_directed() {\n",
        "42": "    MutableNetwork<String, String> mutableGraph = NetworkBuilder.directed().build();\n",
        "43": "    mutableGraph.addEdge(\"AA\", \"A\", \"A\");\n",
        "44": "    mutableGraph.addEdge(\"AB\", \"A\", \"B\");\n",
        "45": "    Network<String, String> graph = ImmutableNetwork.copyOf(mutableGraph);\n",
        "46": "\n",
        "47": "    assertThat(graph.edgesConnecting(\"A\", \"A\")).containsExactly(\"AA\");\n",
        "48": "    assertThat(graph.edgesConnecting(\"A\", \"B\")).containsExactly(\"AB\");\n",
        "49": "    assertThat(graph.edgesConnecting(\"B\", \"A\")).isEmpty();\n",
        "50": "  }\n",
        "51": "\n",
        "52": "  @Test\n",
        "53": "  public void edgesConnecting_undirected() {\n",
        "54": "    MutableNetwork<String, String> mutableGraph = NetworkBuilder.undirected().build();\n",
        "55": "    mutableGraph.addEdge(\"AA\", \"A\", \"A\");\n",
        "56": "    mutableGraph.addEdge(\"AB\", \"A\", \"B\");\n",
        "57": "    Network<String, String> graph = ImmutableNetwork.copyOf(mutableGraph);\n",
        "58": "\n",
        "59": "    assertThat(graph.edgesConnecting(\"A\", \"A\")).containsExactly(\"AA\");\n",
        "60": "    assertThat(graph.edgesConnecting(\"A\", \"B\")).containsExactly(\"AB\");\n",
        "61": "    assertThat(graph.edgesConnecting(\"B\", \"A\")).containsExactly(\"AB\");\n",
        "62": "  }\n",
        "63": "}\n"
    },
    "removed": {}
}