{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "import static org.junit.Assert.assertEquals;\n",
        "21": "import static org.junit.Assert.assertFalse;\n",
        "22": "import static org.junit.Assert.assertTrue;\n",
        "23": "import static org.junit.Assert.fail;\n",
        "24": "\n",
        "25": "import com.google.common.collect.ImmutableSet;\n",
        "26": "import com.google.common.testing.EqualsTester;\n",
        "27": "\n",
        "28": "import org.junit.After;\n",
        "29": "import org.junit.Test;\n",
        "30": "\n",
        "31": "/**\n",
        "32": " * Abstract base class for testing undirected implementations of the {@link Network} interface.\n",
        "33": " *\n",
        "34": " * <p>This class is responsible for testing that an undirected implementation of {@link Network}\n",
        "35": " * is correctly handling undirected edges.  Implementation-dependent test cases are left to\n",
        "36": " * subclasses. Test cases that do not require the graph to be undirected are found in superclasses.\n",
        "37": " */\n",
        "38": "public abstract class AbstractUndirectedNetworkTest extends AbstractNetworkTest {\n",
        "39": "\n",
        "40": "  @After\n",
        "41": "  public void validateUndirectedEdges() {\n",
        "42": "    for (Integer node : graph.nodes()) {\n",
        "43": "      new EqualsTester()\n",
        "44": "          .addEqualityGroup(graph.inEdges(node), graph.outEdges(node), graph.incidentEdges(node))\n",
        "45": "          .testEquals();\n",
        "46": "      new EqualsTester()\n",
        "47": "          .addEqualityGroup(graph.predecessors(node), graph.successors(node),\n",
        "48": "              graph.adjacentNodes(node))\n",
        "49": "          .testEquals();\n",
        "50": "\n",
        "51": "      for (Integer adjacentNode : graph.adjacentNodes(node)) {\n",
        "52": "        assertThat(graph.edgesConnecting(node, adjacentNode))\n",
        "53": "            .containsExactlyElementsIn(graph.edgesConnecting(adjacentNode, node));\n",
        "54": "      }\n",
        "55": "    }\n",
        "56": "  }\n",
        "57": "\n",
        "58": "  @Test\n",
        "59": "  public void edgesConnecting_oneEdge() {\n",
        "60": "    addEdge(E12, N1, N2);\n",
        "61": "    assertThat(graph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "62": "    assertThat(graph.edgesConnecting(N2, N1)).containsExactly(E12);\n",
        "63": "  }\n",
        "64": "\n",
        "65": "  @Test\n",
        "66": "  public void inEdges_oneEdge() {\n",
        "67": "    addEdge(E12, N1, N2);\n",
        "68": "    assertThat(graph.inEdges(N2)).containsExactly(E12);\n",
        "69": "    assertThat(graph.inEdges(N1)).containsExactly(E12);\n",
        "70": "  }\n",
        "71": "\n",
        "72": "  @Test\n",
        "73": "  public void outEdges_oneEdge() {\n",
        "74": "    addEdge(E12, N1, N2);\n",
        "75": "    assertThat(graph.outEdges(N2)).containsExactly(E12);\n",
        "76": "    assertThat(graph.outEdges(N1)).containsExactly(E12);\n",
        "77": "  }\n",
        "78": "\n",
        "79": "  @Test\n",
        "80": "  public void predecessors_oneEdge() {\n",
        "81": "    addEdge(E12, N1, N2);\n",
        "82": "    assertThat(graph.predecessors(N2)).containsExactly(N1);\n",
        "83": "    assertThat(graph.predecessors(N1)).containsExactly(N2);\n",
        "84": "  }\n",
        "85": "\n",
        "86": "  @Test\n",
        "87": "  public void successors_oneEdge() {\n",
        "88": "    addEdge(E12, N1, N2);\n",
        "89": "    assertThat(graph.successors(N1)).containsExactly(N2);\n",
        "90": "    assertThat(graph.successors(N2)).containsExactly(N1);\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  @Test\n",
        "94": "  public void inDegree_oneEdge() {\n",
        "95": "    addEdge(E12, N1, N2);\n",
        "96": "    assertEquals(1, graph.inDegree(N2));\n",
        "97": "    assertEquals(1, graph.inDegree(N1));\n",
        "98": "  }\n",
        "99": "\n",
        "100": "  @Test\n",
        "101": "  public void outDegree_oneEdge() {\n",
        "102": "    addEdge(E12, N1, N2);\n",
        "103": "    assertEquals(1, graph.outDegree(N1));\n",
        "104": "    assertEquals(1, graph.outDegree(N2));\n",
        "105": "  }\n",
        "106": "\n",
        "107": "  // Element Mutation\n",
        "108": "\n",
        "109": "  @Test\n",
        "110": "  public void addEdge_existingNodes() {\n",
        "111": "    // Adding nodes initially for safety (insulating from possible future\n",
        "112": "    // modifications to proxy methods)\n",
        "113": "    addNode(N1);\n",
        "114": "    addNode(N2);\n",
        "115": "    assertTrue(addEdge(E12, N1, N2));\n",
        "116": "    assertThat(graph.edges()).contains(E12);\n",
        "117": "    assertThat(graph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "118": "    assertThat(graph.edgesConnecting(N2, N1)).containsExactly(E12);\n",
        "119": "  }\n",
        "120": "\n",
        "121": "  @Test\n",
        "122": "  public void addEdge_existingEdgeBetweenSameNodes() {\n",
        "123": "    addEdge(E12, N1, N2);\n",
        "124": "    ImmutableSet<String> edges = ImmutableSet.copyOf(graph.edges());\n",
        "125": "    assertFalse(addEdge(E12, N1, N2));\n",
        "126": "    assertThat(graph.edges()).containsExactlyElementsIn(edges);\n",
        "127": "    assertFalse(addEdge(E12, N2, N1));\n",
        "128": "    assertThat(graph.edges()).containsExactlyElementsIn(edges);\n",
        "129": "  }\n",
        "130": "\n",
        "131": "  @Test\n",
        "132": "  public void addEdge_existingEdgeBetweenDifferentNodes() {\n",
        "133": "    addEdge(E12, N1, N2);\n",
        "134": "    try {\n",
        "135": "      // Edge between totally different nodes\n",
        "136": "      addEdge(E12, N4, N5);\n",
        "137": "      fail(ERROR_ADDED_EXISTING_EDGE);\n",
        "138": "    } catch (IllegalArgumentException e) {\n",
        "139": "      assertThat(e.getMessage()).contains(ERROR_REUSE_EDGE);\n",
        "140": "    }\n",
        "141": "  }\n",
        "142": "\n",
        "143": "  @Test\n",
        "144": "  public void addEdge_parallelEdge() {\n",
        "145": "    addEdge(E12, N1, N2);\n",
        "146": "    try {\n",
        "147": "      addEdge(EDGE_NOT_IN_GRAPH, N1, N2);\n",
        "148": "      fail(ERROR_ADDED_PARALLEL_EDGE);\n",
        "149": "    } catch (IllegalArgumentException e) {\n",
        "150": "      assertThat(e.getMessage()).contains(ERROR_PARALLEL_EDGE);\n",
        "151": "    }\n",
        "152": "    try {\n",
        "153": "      addEdge(EDGE_NOT_IN_GRAPH, N2, N1);\n",
        "154": "      fail(ERROR_ADDED_PARALLEL_EDGE);\n",
        "155": "    } catch (IllegalArgumentException e) {\n",
        "156": "      assertThat(e.getMessage()).contains(ERROR_PARALLEL_EDGE);\n",
        "157": "    }\n",
        "158": "  }\n",
        "159": "\n",
        "160": "  @Test\n",
        "161": "  public void removeEdge_existingEdge() {\n",
        "162": "    addEdge(E12, N1, N2);\n",
        "163": "    assertTrue(graph.removeEdge(E12));\n",
        "164": "    assertThat(graph.edges()).doesNotContain(E12);\n",
        "165": "    assertThat(graph.edgesConnecting(N1, N2)).isEmpty();\n",
        "166": "    assertThat(graph.edgesConnecting(N2, N1)).isEmpty();\n",
        "167": "  }\n",
        "168": "}\n"
    },
    "removed": {}
}