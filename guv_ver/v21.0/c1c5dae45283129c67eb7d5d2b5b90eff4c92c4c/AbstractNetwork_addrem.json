{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import javax.annotation.Nullable;\n",
        "20": "\n",
        "21": "/**\n",
        "22": " * This class provides a skeletal implementation of {@link Graph}. It is recommended to extend this\n",
        "23": " * class rather than implement {@link Graph} directly, to ensure consistent {@link #equals(Object)}\n",
        "24": " * and {@link #hashCode()} results across different graph implementations.\n",
        "25": " *\n",
        "26": " * @author James Sexton\n",
        "27": " * @param <N> Node parameter type\n",
        "28": " * @param <E> Edge parameter type\n",
        "29": " */\n",
        "30": "public abstract class AbstractNetwork<N, E> implements Network<N, E> {\n",
        "31": "\n",
        "32": "  @Override\n",
        "33": "  public int degree(Object node) {\n",
        "34": "    return incidentEdges(node).size();\n",
        "35": "  }\n",
        "36": "\n",
        "37": "  @Override\n",
        "38": "  public int inDegree(Object node) {\n",
        "39": "    return inEdges(node).size();\n",
        "40": "  }\n",
        "41": "\n",
        "42": "  @Override\n",
        "43": "  public int outDegree(Object node) {\n",
        "44": "    return outEdges(node).size();\n",
        "45": "  }\n",
        "46": "\n",
        "47": "  @Override\n",
        "48": "  public boolean equals(@Nullable Object object) {\n",
        "49": "    if (!(object instanceof Network)) {\n",
        "50": "      return false;\n",
        "51": "    }\n",
        "52": "    return Graphs.equal(this, (Network<?, ?>) object);\n",
        "53": "  }\n",
        "54": "\n",
        "55": "  @Override\n",
        "56": "  public int hashCode() {\n",
        "57": "    return Graphs.hashCode(this);\n",
        "58": "  }\n",
        "59": "\n",
        "60": "  @Override\n",
        "61": "  public String toString() {\n",
        "62": "    return Graphs.toString(this);\n",
        "63": "  }\n",
        "64": "}\n"
    },
    "removed": {}
}