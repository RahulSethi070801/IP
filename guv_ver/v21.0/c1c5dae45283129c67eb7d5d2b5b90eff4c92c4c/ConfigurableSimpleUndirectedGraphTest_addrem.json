{
    "addition": {
        "37": "  public MutableGraph<Integer> createGraph() {\n",
        "63": "      addEdge(N1, N2);\n",
        "77": "      addEdge(N1, N2);\n",
        "91": "      addEdge(N1, N2);\n",
        "101": "      addEdge(N1, N1);\n",
        "118": "    assertTrue(graph.addEdge(N1, N5));\n",
        "119": "    assertTrue(graph.addEdge(N4, N1));\n",
        "120": "    assertTrue(graph.addEdge(N2, N3));\n",
        "122": "    assertThat(graph.adjacentNodes(N1)).containsExactly(N4, N5);\n",
        "123": "    assertThat(graph.adjacentNodes(N2)).containsExactly(N3);\n",
        "124": "    assertThat(graph.adjacentNodes(N3)).containsExactly(N2);\n",
        "125": "    assertThat(graph.adjacentNodes(N4)).containsExactly(N1);\n",
        "126": "    assertThat(graph.adjacentNodes(N5)).containsExactly(N1);\n"
    },
    "removed": {
        "37": "  public Graph<Integer, String> createGraph() {\n",
        "54": "  @Override\n",
        "55": "  @Test\n",
        "56": "  public void edges_checkReturnedSetMutability() {\n",
        "57": "    Set<String> edges = graph.edges();\n",
        "58": "    try {\n",
        "59": "      edges.add(E12);\n",
        "60": "      fail(ERROR_MODIFIABLE_SET);\n",
        "61": "    } catch (UnsupportedOperationException e) {\n",
        "62": "      addEdge(E12, N1, N2);\n",
        "63": "      assertThat(graph.edges()).containsExactlyElementsIn(edges);\n",
        "64": "    }\n",
        "65": "  }\n",
        "66": "\n",
        "67": "  @Override\n",
        "68": "  @Test\n",
        "69": "  public void incidentEdges_checkReturnedSetMutability() {\n",
        "70": "    addNode(N1);\n",
        "71": "    Set<String> incidentEdges = graph.incidentEdges(N1);\n",
        "72": "    try {\n",
        "73": "      incidentEdges.add(E12);\n",
        "74": "      fail(ERROR_MODIFIABLE_SET);\n",
        "75": "    } catch (UnsupportedOperationException e) {\n",
        "76": "      addEdge(E12, N1, N2);\n",
        "77": "      assertThat(graph.incidentEdges(N1)).containsExactlyElementsIn(incidentEdges);\n",
        "78": "    }\n",
        "79": "  }\n",
        "80": "\n",
        "81": "  @Override\n",
        "82": "  @Test\n",
        "83": "  public void incidentNodes_checkReturnedSetMutability() {\n",
        "84": "    addEdge(E12, N1, N2);\n",
        "85": "    Set<Integer> incidentNodes = graph.incidentNodes(E12);\n",
        "86": "    try {\n",
        "87": "      incidentNodes.add(N3);\n",
        "88": "      fail(ERROR_MODIFIABLE_SET);\n",
        "89": "    } catch (UnsupportedOperationException expected) {\n",
        "90": "    }\n",
        "91": "  }\n",
        "92": "\n",
        "102": "      addEdge(E12, N1, N2);\n",
        "107": "  @Override\n",
        "108": "  @Test\n",
        "109": "  public void adjacentEdges_checkReturnedSetMutability() {\n",
        "110": "    addEdge(E12, N1, N2);\n",
        "111": "    Set<String> adjacentEdges = graph.adjacentEdges(E12);\n",
        "112": "    try {\n",
        "113": "      adjacentEdges.add(E23);\n",
        "114": "      fail(ERROR_MODIFIABLE_SET);\n",
        "115": "    } catch (UnsupportedOperationException e) {\n",
        "116": "      addEdge(E23, N2, N3);\n",
        "117": "      assertThat(graph.adjacentEdges(E12)).containsExactlyElementsIn(adjacentEdges);\n",
        "118": "    }\n",
        "119": "  }\n",
        "120": "\n",
        "121": "  @Override\n",
        "122": "  @Test\n",
        "123": "  public void edgesConnecting_checkReturnedSetMutability() {\n",
        "124": "    addNode(N1);\n",
        "125": "    addNode(N2);\n",
        "126": "    Set<String> edgesConnecting = graph.edgesConnecting(N1, N2);\n",
        "127": "    try {\n",
        "128": "      edgesConnecting.add(E23);\n",
        "129": "      fail(ERROR_MODIFIABLE_SET);\n",
        "130": "    } catch (UnsupportedOperationException e) {\n",
        "131": "      addEdge(E12, N1, N2);\n",
        "132": "      assertThat(graph.edgesConnecting(N1, N2))\n",
        "133": "          .containsExactlyElementsIn(edgesConnecting);\n",
        "134": "    }\n",
        "135": "  }\n",
        "136": "\n",
        "137": "  @Override\n",
        "138": "  @Test\n",
        "139": "  public void inEdges_checkReturnedSetMutability() {\n",
        "140": "    addNode(N2);\n",
        "141": "    Set<String> inEdges = graph.inEdges(N2);\n",
        "142": "    try {\n",
        "143": "      inEdges.add(E12);\n",
        "144": "      fail(ERROR_MODIFIABLE_SET);\n",
        "145": "    } catch (UnsupportedOperationException e) {\n",
        "146": "      addEdge(E12, N1, N2);\n",
        "147": "      assertThat(graph.inEdges(N2)).containsExactlyElementsIn(inEdges);\n",
        "148": "    }\n",
        "149": "  }\n",
        "150": "\n",
        "151": "  @Override\n",
        "152": "  @Test\n",
        "153": "  public void outEdges_checkReturnedSetMutability() {\n",
        "154": "    addNode(N1);\n",
        "155": "    Set<String> outEdges = graph.outEdges(N1);\n",
        "156": "    try {\n",
        "157": "      outEdges.add(E12);\n",
        "158": "      fail(ERROR_MODIFIABLE_SET);\n",
        "159": "    } catch (UnsupportedOperationException e) {\n",
        "160": "      addEdge(E12, N1, N2);\n",
        "161": "      assertThat(graph.outEdges(N1)).containsExactlyElementsIn(outEdges);\n",
        "162": "    }\n",
        "163": "  }\n",
        "164": "\n",
        "174": "      addEdge(E12, N1, N2);\n",
        "188": "      addEdge(E12, N1, N2);\n",
        "198": "      addEdge(E11, N1, N1);\n",
        "215": "    assertTrue(graph.addEdge(E15, N1, N5));\n",
        "216": "    assertTrue(graph.addEdge(E41, N4, N1));\n",
        "217": "    assertTrue(graph.addEdge(E23, N2, N3));\n",
        "219": "    assertThat(graph.edges()).containsExactly(E15, E41, E23).inOrder();\n",
        "220": "    assertThat(graph.edgesConnecting(N1, N5)).containsExactly(E15);\n",
        "221": "    assertThat(graph.edgesConnecting(N4, N1)).containsExactly(E41);\n",
        "222": "    assertThat(graph.edgesConnecting(N2, N3)).containsExactly(E23);\n",
        "223": "    assertThat(graph.edgesConnecting(N3, N2)).containsExactly(E23);\n"
    }
}