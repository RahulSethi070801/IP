{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.Beta;\n",
        "20": "\n",
        "21": "import java.util.Set;\n",
        "22": "\n",
        "23": "import javax.annotation.Nullable;\n",
        "24": "\n",
        "25": "/**\n",
        "26": " * A network consisting of a set of nodes of type N and a set of edges of type E.\n",
        "27": " * That is, a subtype of {@link Graph} that represents edges as explicit first-class objects.\n",
        "28": " * Users that are not interested in edges as first-class objects should use a {@link Graph}\n",
        "29": " * instead.\n",
        "30": " *\n",
        "31": " * <p>Users that wish to modify a {@code Network} must work with its subinterface,\n",
        "32": " * {@code MutableNetwork}.\n",
        "33": " *\n",
        "34": " * <p>This interface permits, but does not enforce, any of the following variations of graphs:\n",
        "35": " * <ul>\n",
        "36": " * <li>directed and undirected edges\n",
        "37": " * <li>hyperedges (edges which are incident to arbitrary sets of nodes)\n",
        "38": " * <li>nodes and edges with attributes (for example, weighted edges)\n",
        "39": " * <li>nodes and edges of different types (for example, bipartite or multimodal graphs)\n",
        "40": " * <li>parallel edges (multiple edges which connect a single set of nodes)\n",
        "41": " * </ul>\n",
        "42": " *\n",
        "43": " * <p>Extensions or implementations of this interface may enforce or disallow any or all\n",
        "44": " * of these variations.\n",
        "45": " *\n",
        "46": " * <p>Definitions:\n",
        "47": " * <ul>\n",
        "48": " * <li>{@code edge} and {@code node} are <b>incident</b> to each other if the set of\n",
        "49": " *     {@code edge}'s endpoints includes {@code node}.\n",
        "50": " * <li>{@code node1} and {@code node2} are mutually <b>adjacent</b> if both are incident\n",
        "51": " *     to a common {@code edge}.\n",
        "52": " *     <br>Similarly, {@code edge1} and {@code edge2} are mutually adjacent if both are\n",
        "53": " *     incident to a common {@code node}.\n",
        "54": " * <li>Elements are <b>connected</b> if they are either incident or adjacent.\n",
        "55": " * <li>{@code edge} is an <b>incoming edge</b> of a {@code node} if it can be traversed (in\n",
        "56": " *     the direction, if any, of {@code edge}) from a node adjacent to {@code node}.\n",
        "57": " * <li>{@code edge} is an <b>outgoing edge</b> of {@code node} if it can be traversed (in\n",
        "58": " *     the direction, if any, of {@code edge}) from {@code node} to reach a node adjacent to\n",
        "59": " *     {@code node}.\n",
        "60": " *   <ul>\n",
        "61": " *   <li>Note: <b>undirected</b> edges are both incoming and outgoing edges of a {@code node},\n",
        "62": " *       while <b>directed</b> edges are either incoming or outgoing edges of {@code node}\n",
        "63": " *       (and not both, unless the edge is a self-loop).\n",
        "64": " *       <br>Thus, in the following example {@code edge1} is an incoming edge of {@code node2} and\n",
        "65": " *       an outgoing edge of {@code node1}, while {@code edge2} is both an incoming and an outgoing\n",
        "66": " *       edge of both {@code node3} and {@code node4}:\n",
        "67": " *       <br><pre><code>\n",
        "68": " *         directedGraph.addEdge(edge1, node1, node2);\n",
        "69": " *         undirectedGraph.addEdge(edge2, node3, node4);\n",
        "70": " *       </pre></code>\n",
        "71": " *   </ul>\n",
        "72": " * <li>A node {@code pred} is a <b>predecessor</b> of {@code node} if it is incident to an incoming\n",
        "73": " *     {@code edge} of {@code node} (and is not itself {@code node} unless {@code edge} is\n",
        "74": " *     a self-loop).\n",
        "75": " * <li>A node {@code succ} is a <b>successor</b> of {@code node} if it is incident to an outgoing\n",
        "76": " *     {@code edge} of {@code node} (and is not itself {@code node} unless {@code edge} is\n",
        "77": " *     a self-loop).\n",
        "78": " * <li>Directed edges only:\n",
        "79": " *   <ul>\n",
        "80": " *   <li>{@code node} is a <b>source</b> of {@code edge} if {@code edge} is an outgoing edge\n",
        "81": " *       of {@code node}.\n",
        "82": " *   <li>{@code node} is a <b>target</b> of {@code edge} if {@code edge} is an incoming edge\n",
        "83": " *       of {@code node}.\n",
        "84": " *   </ul>\n",
        "85": " * </ul>\n",
        "86": " *\n",
        "87": " * <p>General notes:\n",
        "88": " * <ul>\n",
        "89": " * <li><b>Nodes/edges must be useable as {@code Map} keys</b>:\n",
        "90": " *   <ul>\n",
        "91": " *   <li>They must be unique in a graph: nodes {@code node1} and {@code node2} are considered\n",
        "92": " *       different if and only if {@code node1.equals(node2) == false}, and the same for edges.\n",
        "93": " *   <li>If you would otherwise have duplicate edges (e.g. weighted edges represented by a Double),\n",
        "94": " *       you can instead wrap the edges in a custom class that defers to {@link Object} for its\n",
        "95": " *       {@code equals()} and {@code hashCode()} implementations.\n",
        "96": " *   <li>If graph elements have mutable state:\n",
        "97": " *     <ul>\n",
        "98": " *     <li>the mutable state must not be reflected in the {@code equals/hashCode} methods\n",
        "99": " *         (this is discussed in the {@code Map} documentation in detail)\n",
        "100": " *     <li>don't construct multiple elements that are equal to each other and expect them to be\n",
        "101": " *         interchangeable.  In particular, when adding such elements to a graph, you should create\n",
        "102": " *         them once and store the reference if you will need to refer to those elements more than\n",
        "103": " *         once during creation (rather than passing {@code new MyMutableNode(id)} to each\n",
        "104": " *         {@code add*()} call).\n",
        "105": " *     </ul>\n",
        "106": " *   </ul>\n",
        "107": " *   <br>Generally speaking, your design may be more robust if you use immutable nodes/edges and\n",
        "108": " * store mutable per-element state in a separate data structure (e.g. an element-to-state map).\n",
        "109": " * <li>There are no Node or Edge classes built in.  So you can have a {@code Graph<Integer, String>}\n",
        "110": " *     or a {@code Graph<Author,Publication>} or a {@code Graph<Webpage,Link>}.\n",
        "111": " * <li>This framework supports multiple mechanisms for storing the topology of a graph, including:\n",
        "112": " *   <ul>\n",
        "113": " *   <li>the Graph implementation stores the topology (for example, by storing a {@code Map<N, E>}\n",
        "114": " *       that maps nodes onto their incident edges); this implies that the nodes and edges\n",
        "115": " *       are just keys, and can be shared among graphs\n",
        "116": " *   <li>the nodes store the topology (for example, by storing a {@code List<E>} of incident edges);\n",
        "117": " *       this (usually) implies that nodes are graph-specific\n",
        "118": " *   <li>a separate data repository (for example, a database) stores the topology\n",
        "119": " *   </ul>\n",
        "120": " * </ul>\n",
        "121": " *\n",
        "122": " * <p>Notes on accessors:\n",
        "123": " * <ul>\n",
        "124": " * <li>Accessors which return collections may return views of the Graph. Modifications to the graph\n",
        "125": " *     which affect a view (e.g. calling {@code addNode(n)} or {@code removeNode(n)} while iterating\n",
        "126": " *     through {@code nodes()}) are not supported and may result in ConcurrentModificationException.\n",
        "127": " * <li>Accessors which return collections will return empty collections if their inputs are valid\n",
        "128": " *     but no elements satisfy the request (for example: {@code adjacentNodes(node)} will return an\n",
        "129": " *     empty collection if {@code node} has no adjacent nodes).\n",
        "130": " * <li>Accessors will throw {@code IllegalArgumentException} if passed a node/edge\n",
        "131": " *     that is not in the graph.\n",
        "132": " * <li>Accessors take Object parameters rather than N/E generic type specifiers to match the pattern\n",
        "133": " *     set by the Java Collections Framework.\n",
        "134": " * </ul>\n",
        "135": " *\n",
        "136": " * <p>Notes for implementors:\n",
        "137": " * <ul>\n",
        "138": " * <li>Implementations have numerous options for internal representations: matrices, adjacency\n",
        "139": " *     lists, adjacency maps, etc.\n",
        "140": " * <li>For accessors that return a {@code Set}, there are several options for the set behavior,\n",
        "141": " *     including:\n",
        "142": " *     <ol>\n",
        "143": " *     <li>Set is an immutable copy (e.g. {@code ImmutableSet}): attempts to modify the set in any\n",
        "144": " *         way will throw an exception, and modifications to the graph will <b>not</b> be reflected\n",
        "145": " *         in the set.\n",
        "146": " *     <li>Set is an unmodifiable view (e.g. {@code Collections.unmodifiableSet()}): attempts to\n",
        "147": " *         modify the set in any way will throw an exception, and modifications to the graph will be\n",
        "148": " *         reflected in the set.\n",
        "149": " *     <li>Set is a mutable copy: it may be modified, but modifications to the graph will <b>not</b>\n",
        "150": " *         be reflected in the set, and vice versa.\n",
        "151": " *     <li>Set is a modifiable view: it may be modified, and modifications to the graph will be\n",
        "152": " *         reflected in the set (but modifications to the set will <b>not</b> be reflected in the\n",
        "153": " *         graph).\n",
        "154": " *     <li>Set exposes the internal data directly: it may be modified, and modifications to the\n",
        "155": " *         graph will be reflected in the set, and vice versa.\n",
        "156": " *     </ol>\n",
        "157": " *     Note that (1) and (2) are generally preferred. (5) is generally a hazardous design choice\n",
        "158": " *     and should be avoided, because keeping the internal data structures consistent can be tricky.\n",
        "159": " * <li>Prefer extending {@link AbstractGraph} over implementing {@link Graph} directly. This will\n",
        "160": " *     ensure consistent {@link #equals(Object)} and {@link #hashCode()} across implementations.\n",
        "161": " * <li>{@code Multimap}s are not sufficient internal data structures for Graph implementations\n",
        "162": " *     that support isolated nodes (nodes that have no incident edges), due to their restriction\n",
        "163": " *     that a key either maps to at least one value, or is not present in the {@code Multimap}.\n",
        "164": " * </ul>\n",
        "165": " *\n",
        "166": " * <p>Examples of use:\n",
        "167": " * <ul>\n",
        "168": " * <li>Is {@code node} in the graph?\n",
        "169": " * <pre><code>\n",
        "170": " *   graph.nodes().contains(node)\n",
        "171": " * </code></pre>\n",
        "172": " * <li>Traversing an undirected graph node-wise:\n",
        "173": " * <pre><code>\n",
        "174": " *   // Visit nodes reachable from {@code node}.\n",
        "175": " *   void depthFirstTraverse(N node) {\n",
        "176": " *     for (N neighbor : graph.adjacentNodes(node)) {\n",
        "177": " *       if (!isVisited(neighbor)) {\n",
        "178": " *         visit(neighbor);\n",
        "179": " *         depthFirstTraverse(neighbor);\n",
        "180": " *       }\n",
        "181": " *     }\n",
        "182": " *   }\n",
        "183": " * </code></pre>\n",
        "184": " * <li>Traversing a directed graph edge-wise:\n",
        "185": " * <pre><code>\n",
        "186": " *   // Update the shortest-path distances of the successors to {@code node}\n",
        "187": " *   // in a directed graph (inner loop of Dijkstra's algorithm):\n",
        "188": " *   void updateDistances(N node) {\n",
        "189": " *     nodeDistance = distances.get(node);\n",
        "190": " *     for (E outEdge : graph.outEdges(node)) {\n",
        "191": " *       N target = graph.target(outEdge);\n",
        "192": " *       double targetDistance = nodeDistance + outEdge.getWeight();\n",
        "193": " *       if (targetDistance < distances.get(target)) {\n",
        "194": " *         distances.put(target, targetDistance);\n",
        "195": " *       }\n",
        "196": " *     }\n",
        "197": " *   }\n",
        "198": " * </code></pre>\n",
        "199": " * </ul>\n",
        "200": " *\n",
        "201": " * @author Joshua O'Madadhain\n",
        "202": " * @param <N> Node parameter type\n",
        "203": " * @param <E> Edge parameter type\n",
        "204": " * @since 20.0\n",
        "205": " */\n",
        "206": "@Beta\n",
        "207": "public interface Network<N, E> extends Graph<N> {\n",
        "208": "  /** Returns all edges in this network. */\n",
        "209": "  Set<E> edges();\n",
        "210": "\n",
        "211": "  //\n",
        "212": "  // Graph properties\n",
        "213": "  //\n",
        "214": "\n",
        "215": "  /**\n",
        "216": "   * Returns true if each edge in this graph is directed.\n",
        "217": "   *\n",
        "218": "   * <p>A directed edge is an {@linkplain #outEdges(Object) outgoing edge} of its\n",
        "219": "   * {@linkplain #source(Object) source}, and an {@linkplain #inEdges(Object) incoming edge} of its\n",
        "220": "   * {@linkplain #target(Object) target}. An undirected edge connects its\n",
        "221": "   * {@linkplain #incidentNodes(Object) incident nodes} to each other, and is both an\n",
        "222": "   * {@linkplain #outEdges(Object) outgoing edge} and {@linkplain #inEdges(Object) incoming edge}\n",
        "223": "   * of each incident node.\n",
        "224": "   */\n",
        "225": "  @Override\n",
        "226": "  boolean isDirected();\n",
        "227": "\n",
        "228": "  /**\n",
        "229": "   * Returns true if this graph allows parallel edges. Attempting to add a parallel edge to a graph\n",
        "230": "   * that does not allow them will throw an {@link UnsupportedOperationException}.\n",
        "231": "   */\n",
        "232": "  boolean allowsParallelEdges();\n",
        "233": "\n",
        "234": "  //\n",
        "235": "  // Element-level accessors\n",
        "236": "  //\n",
        "237": "\n",
        "238": "  /**\n",
        "239": "   * Returns the edges whose endpoints in this graph include {@code node}.\n",
        "240": "   *\n",
        "241": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "242": "   */\n",
        "243": "  Set<E> incidentEdges(Object node);\n",
        "244": "\n",
        "245": "  /**\n",
        "246": "   * Returns the nodes which are the endpoints of {@code edge} in this graph.\n",
        "247": "   *\n",
        "248": "   * <p>For self-loop edges, the returned set's size will be 1. If the graph is\n",
        "249": "   * {@linkplain #isDirected() directed} and {@code edge} is not a self-loop, the\n",
        "250": "   * iteration order will be {@code [source(edge), target(edge)]}.\n",
        "251": "   *\n",
        "252": "   * @throws IllegalArgumentException if {@code edge} is not an element of this graph\n",
        "253": "   */\n",
        "254": "  Set<N> incidentNodes(Object edge);\n",
        "255": "\n",
        "256": "  /**\n",
        "257": "   * Returns the nodes which have an {@linkplain #incidentEdges(Object) incident edge}\n",
        "258": "   * in common with {@code node} in this graph.\n",
        "259": "   *\n",
        "260": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "261": "   */\n",
        "262": "  @Override\n",
        "263": "  Set<N> adjacentNodes(Object node);\n",
        "264": "\n",
        "265": "  /**\n",
        "266": "   * Returns the edges which have an {@linkplain #incidentNodes(Object) incident node}\n",
        "267": "   * in common with {@code edge} in this graph.\n",
        "268": "   *\n",
        "269": "   * <p>Whether an edge is considered adjacent to itself is not defined by this interface, but\n",
        "270": "   * generally for non-hypergraphs, edges are not considered to be self-adjacent.\n",
        "271": "   *\n",
        "272": "   * @throws IllegalArgumentException if {@code edge} is not an element of this graph\n",
        "273": "   */\n",
        "274": "  Set<E> adjacentEdges(Object edge);\n",
        "275": "\n",
        "276": "  /**\n",
        "277": "   * Returns the set of edges that connect {@code node1} to {@code node2}.\n",
        "278": "   *\n",
        "279": "   * <p>This set is the intersection of {@code outEdges(node1)} and {@code inEdges(node2)}. If\n",
        "280": "   * {@code node1} is equal to {@code node2}, then it is the set of self-loop edges for that node.\n",
        "281": "   *\n",
        "282": "   * @throws IllegalArgumentException if {@code node1} or {@code node2} is not an element\n",
        "283": "   *     of this graph\n",
        "284": "   */\n",
        "285": "  Set<E> edgesConnecting(Object node1, Object node2);\n",
        "286": "\n",
        "287": "  /**\n",
        "288": "   * Returns all edges in this graph which can be traversed in the direction (if any) of the edge\n",
        "289": "   * to end at {@code node}.\n",
        "290": "   *\n",
        "291": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "292": "   */\n",
        "293": "  Set<E> inEdges(Object node);\n",
        "294": "\n",
        "295": "  /**\n",
        "296": "   * Returns all edges in this graph which can be traversed in the direction (if any) of the edge\n",
        "297": "   * starting from {@code node}.\n",
        "298": "   *\n",
        "299": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "300": "   */\n",
        "301": "  Set<E> outEdges(Object node);\n",
        "302": "\n",
        "303": "  /**\n",
        "304": "   * Returns all nodes in this graph adjacent to {@code node} which can be reached by traversing\n",
        "305": "   * {@code node}'s {@linkplain #inEdges(Object) incoming edges} <i>against</i> the direction\n",
        "306": "   * (if any) of the edge.\n",
        "307": "   *\n",
        "308": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "309": "   */\n",
        "310": "  @Override\n",
        "311": "  Set<N> predecessors(Object node);\n",
        "312": "\n",
        "313": "  /**\n",
        "314": "   * Returns all nodes in this graph adjacent to {@code node} which can be reached by traversing\n",
        "315": "   * {@code node}'s {@linkplain #outEdges(Object) outgoing edges} in the direction (if any) of the\n",
        "316": "   * edge.\n",
        "317": "   *\n",
        "318": "   * <p>This is <i>not</i> the same as \"all nodes reachable from {@code node} by following outgoing\n",
        "319": "   * edges\" (also known as {@code node}'s transitive closure).\n",
        "320": "   *\n",
        "321": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "322": "   */\n",
        "323": "  @Override\n",
        "324": "  Set<N> successors(Object node);\n",
        "325": "\n",
        "326": "  //\n",
        "327": "  // Element-level queries\n",
        "328": "  //\n",
        "329": "\n",
        "330": "  /**\n",
        "331": "   * For a directed graph, returns the node for which {@code edge} is an outgoing edge.\n",
        "332": "   * For an undirected graph, throws an {@link UnsupportedOperationException}.\n",
        "333": "   */\n",
        "334": "  N source(Object edge);\n",
        "335": "\n",
        "336": "  /**\n",
        "337": "   * For a directed graph, returns the node for which {@code edge} is an incoming edge.\n",
        "338": "   * For an undirected graph, throws an {@link UnsupportedOperationException}.\n",
        "339": "   */\n",
        "340": "  N target(Object edge);\n",
        "341": "\n",
        "342": "  /**\n",
        "343": "   * Returns the number of edges {@linkplain #incidentEdges(Object) incident} in this graph\n",
        "344": "   * to {@code node}.  If this node has more than {@code Integer.MAX_VALUE} incident edges\n",
        "345": "   * in this graph, returns {@code Integer.MAX_VALUE}.\n",
        "346": "   *\n",
        "347": "   * <p>Equivalent to {@code incidentEdges(node).size()}.\n",
        "348": "   *\n",
        "349": "   * <p>Note that self-loops only count once towards a node's degree.\n",
        "350": "   * This is consistent with the definition of {@link #incidentEdges(Object)}.\n",
        "351": "   *\n",
        "352": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "353": "   */\n",
        "354": "  @Override\n",
        "355": "  int degree(Object node);\n",
        "356": "\n",
        "357": "  /**\n",
        "358": "   * Returns the number of {@linkplain #inEdges(Object) incoming edges} in this graph\n",
        "359": "   * of {@code node}.  If this node has more than {@code Integer.MAX_VALUE} incoming edges\n",
        "360": "   * in this graph, returns {@code Integer.MAX_VALUE}.\n",
        "361": "   *\n",
        "362": "   * <p>Equivalent to {@code inEdges(node).size()}.\n",
        "363": "   *\n",
        "364": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "365": "   */\n",
        "366": "  @Override\n",
        "367": "  int inDegree(Object node);\n",
        "368": "\n",
        "369": "  /**\n",
        "370": "   * Returns the number of {@linkplain #outEdges(Object) outgoing edges} in this graph\n",
        "371": "   * of {@code node}.  If this node has more than {@code Integer.MAX_VALUE} outgoing edges\n",
        "372": "   * in this graph, returns {@code Integer.MAX_VALUE}.\n",
        "373": "   *\n",
        "374": "   * <p>Equivalent to {@code outEdges(node).size()}.\n",
        "375": "   *\n",
        "376": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "377": "   */\n",
        "378": "  @Override\n",
        "379": "  int outDegree(Object node);\n",
        "380": "\n",
        "381": "  /**\n",
        "382": "   * Returns {@code true} iff {@code object} is a graph that has the same node/edge relationships\n",
        "383": "   * as those in this graph.\n",
        "384": "   *\n",
        "385": "   * <p>Thus, two graphs A and B are equal if <b>all</b> of the following are true:\n",
        "386": "   * <ul>\n",
        "387": "   * <li>A and B have the same node set\n",
        "388": "   * <li>A and B have the same edge set\n",
        "389": "   * <li>A and B have the same incidence relationships, e.g., for each node/edge in A and in B\n",
        "390": "   *     its incident edge/node set in A is the same as its incident edge/node set in B.\n",
        "391": "   *     <br>Thus, every edge in A and B connect the same nodes in the same direction (if any).\n",
        "392": "   * </ul>\n",
        "393": "   *\n",
        "394": "   * <p>Graph properties are <b>not</b> respected by this method. For example, two graphs may be\n",
        "395": "   * considered equal even if one allows parallel edges and the other doesn't. Additionally, the\n",
        "396": "   * order in which edges or nodes are added to the graph, and the order in which they are iterated\n",
        "397": "   * over, are irrelevant.\n",
        "398": "   *\n",
        "399": "   * <p>A reference implementation of this is provided by {@link Graphs#equal(Graph, Graph)}.\n",
        "400": "   */\n",
        "401": "  @Override\n",
        "402": "  boolean equals(@Nullable Object object);\n",
        "403": "\n",
        "404": "  /**\n",
        "405": "   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n",
        "406": "   * of a map from each of the graph's nodes to their incident edges.\n",
        "407": "   *\n",
        "408": "   * <p>A reference implementation of this is provided by {@link Graphs#hashCode(Graph)}.\n",
        "409": "   *\n",
        "410": "   * <p>Note that by this definition, two graphs that are equal in every aspect except edge\n",
        "411": "   * direction will have the same hash code (but can still be differentiated by {@link #equals}.\n",
        "412": "   */\n",
        "413": "  @Override\n",
        "414": "  int hashCode();\n",
        "415": "}\n"
    },
    "removed": {}
}