{
    "addition": {
        "26": " * A graph consisting of a set of nodes of type N and a set of (implicit) edges.\n",
        "27": " * Users that want edges to be first-class objects should use the subtype {@link Network} instead.\n",
        "28": " *\n",
        "29": " * <p>For convenience, we may use the term 'graph' to refer to any subtype of {@link Graph},\n",
        "30": " * including {@link Network} and {@link Hypergraph}.\n",
        "31": " *\n",
        "32": " * <p>Users that wish to modify a {@code Graph} must work with its subinterface,\n",
        "33": " * {@link MutableNetwork}.\n",
        "49": " * <li>{@code node1} and {@code node2} are mutually <b>adjacent</b> (or <b>connected</b> in\n",
        "50": " *     {@code graph} if an edge has been added between them:\n",
        "51": " *     <br><pre><code>\n",
        "52": " *       graph.addEdge(node1, node2);  // after this returns, node1 and node2 are adjacent\n",
        "53": " *     </pre></code>\n",
        "54": " *   In this example, if {@code graph} is <b>directed</b>, then:\n",
        "56": " *   <li>{@code node1} is a <b>predecessor</b> of {code node2} in {@code graph}\n",
        "57": " *   <li>{@code node2} is a <b>successor</b> of {@code node1} in {@code graph}\n",
        "58": " *   <li>{@code node1} has an (implicit) outgoing edge to {@code node2} in {@code graph}\n",
        "59": " *   <li>{@code node2} has an (implicit) incoming edge from {@code node1} in {@code graph}\n",
        "61": " *   If {@code graph} is <b>undirected</b>, then:\n",
        "63": " *   <li>{@code node1} and {@code node2} are mutually predecessors and successors\n",
        "64": " *       in {@code graph}\n",
        "65": " *   <li>{@code node1} has an (implicit) edge in {@code graph} that is both outgoing to\n",
        "66": " *       to {@code node2} and incoming from {@code node2}, and vice versa.\n",
        "68": " * <li>A self-loop is an edge that connects a node to itself.\n",
        "73": " * <li><b>Nodes must be useable as {@code Map} keys</b>:\n",
        "76": " *       different if and only if {@code node1.equals(node2) == false}.\n",
        "77": " *   <li>If graph elements have mutable state:\n",
        "82": " *         interchangeable.  In particular, when adding such elements to a graph, you should\n",
        "83": " *         create them once and store the reference if you will need to refer to those elements\n",
        "84": " *         more than once during creation (rather than passing {@code new MyMutableNode(id)}\n",
        "85": " *         to each {@code add*()} call).\n",
        "88": " *   <br>Generally speaking, your design may be more robust if you use immutable nodes and\n",
        "90": " * <li>There are no Node classes built in.  So you can have a {@code Graph<Integer>}\n",
        "91": " *     or a {@code Graph<Author>} or a {@code Graph<Webpage>}.\n",
        "92": " * <li>This framework supports multiple mechanisms for storing the topology of a graph,\n",
        "93": " *      including:\n",
        "95": " *   <li>the Graph implementation stores the topology (for example, by storing a\n",
        "96": " *       {@code Map<N, N>} that maps nodes onto their adjacent nodes); this implies that the nodes\n",
        "98": " *   <li>the nodes store the topology (for example, by storing a {@code List<E>} of adjacent nodes);\n",
        "112": " * <li>Accessors will throw {@code IllegalArgumentException} if passed an element\n",
        "114": " * <li>Accessors take Object parameters rather than generic type specifiers to match the pattern\n",
        "171": "public interface Graph<N> {\n",
        "203": "   * Returns the nodes which have an incident edge in common with {@code node} in this graph.\n",
        "211": "   * {@code node}'s incoming edges <i>against</i> the direction (if any) of the edge.\n",
        "219": "   * {@code node}'s outgoing edges in the direction (if any) of the edge.\n",
        "233": "   * Returns the number of edges incident in this graph to {@code node}.  If this node has more than\n",
        "234": "   * {@code Integer.MAX_VALUE} incident edges in this graph, returns {@code Integer.MAX_VALUE}.\n",
        "244": "   * Returns the number of incoming edges in this graph of {@code node}.  If this node has more than\n",
        "245": "   * {@code Integer.MAX_VALUE} incoming edges in this graph, returns {@code Integer.MAX_VALUE}.\n",
        "252": "   * Returns the number of outgoing edges in this graph of {@code node}.  If this node has more than\n",
        "253": "   * {@code Integer.MAX_VALUE} outgoing edges in this graph, returns {@code Integer.MAX_VALUE}.\n",
        "260": "   * Returns {@code true} iff {@code object} is a graph that has the same node relationships\n",
        "266": "   * <li>A and B have the same adjacency relationships, e.g., for each {@code node} the sets of\n",
        "267": "   *     successor and predecessor nodes are the same in both graphs.\n",
        "268": "   *     <br>This implies that every edge in A and B connects the same nodes in the same\n",
        "269": "   *     direction (if any).\n",
        "272": "   * <p>Graph properties are <b>not</b> respected by this method. For example, two relations may\n",
        "273": "   * be considered equal even if one allows self-loops and the other doesn't. Additionally, the\n",
        "274": "   * order in which edges or nodes are added to the graph, and the order in which they are\n",
        "275": "   * iterated over, are irrelevant.\n",
        "284": "   * of a map from each of the graph's nodes to their adjacent nodes.\n"
    },
    "removed": {
        "20": "import com.google.errorprone.annotations.CanIgnoreReturnValue;\n",
        "27": " * A graph consisting of a set of nodes of type N and a set of edges of type E.\n",
        "35": " * <li>parallel edges (multiple edges which connect a single set of vertices)\n",
        "44": " * <li>{@code edge} and {@code node} are <b>incident</b> to each other if the set of\n",
        "45": " *     {@code edge}'s endpoints includes {@code node}.\n",
        "46": " * <li>{@code node1} and {@code node2} are mutually <b>adjacent</b> if both are incident\n",
        "47": " *     to a common {@code edge}.\n",
        "48": " *     <br>Similarly, {@code edge1} and {@code edge2} are mutually adjacent if both are\n",
        "49": " *     incident to a common {@code node}.\n",
        "50": " * <li>Elements are <b>connected</b> if they are either incident or adjacent.\n",
        "51": " * <li>{@code edge} is an <b>incoming edge</b> of a {@code node} if it can be traversed (in\n",
        "52": " *     the direction, if any, of {@code edge}) from a node adjacent to {@code node}.\n",
        "53": " * <li>{@code edge} is an <b>outgoing edge</b> of {@code node} if it can be traversed (in\n",
        "54": " *     the direction, if any, of {@code edge}) from {@code node} to reach a node adjacent to\n",
        "55": " *     {@code node}.\n",
        "57": " *   <li>Note: <b>undirected</b> edges are both incoming and outgoing edges of a {@code node},\n",
        "58": " *       while <b>directed</b> edges are either incoming or outgoing edges of {@code node}\n",
        "59": " *       (and not both, unless the edge is a self-loop).\n",
        "60": " *       <br>Thus, in the following example {@code edge1} is an incoming edge of {@code node2} and\n",
        "61": " *       an outgoing edge of {@code node1}, while {@code edge2} is both an incoming and an outgoing\n",
        "62": " *       edge of both {@code node3} and {@code node4}:\n",
        "63": " *       <br><pre><code>\n",
        "64": " *         directedGraph.addEdge(edge1, node1, node2);\n",
        "65": " *         undirectedGraph.addEdge(edge2, node3, node4);\n",
        "66": " *       </pre></code>\n",
        "68": " * <li>A node {@code pred} is a <b>predecessor</b> of {@code node} if it is incident to an incoming\n",
        "69": " *     {@code edge} of {@code node} (and is not itself {@code node} unless {@code edge} is\n",
        "70": " *     a self-loop).\n",
        "71": " * <li>A node {@code succ} is a <b>successor</b> of {@code node} if it is incident to an outgoing\n",
        "72": " *     {@code edge} of {@code node} (and is not itself {@code node} unless {@code edge} is\n",
        "73": " *     a self-loop).\n",
        "74": " * <li>Directed edges only:\n",
        "76": " *   <li>{@code node} is a <b>source</b> of {@code edge} if {@code edge} is an outgoing edge\n",
        "77": " *       of {@code node}.\n",
        "78": " *   <li>{@code node} is a <b>target</b> of {@code edge} if {@code edge} is an incoming edge\n",
        "79": " *       of {@code node}.\n",
        "85": " * <li><b>Nodes/edges must be useable as {@code Map} keys</b>:\n",
        "88": " *       different if and only if {@code node1.equals(node2) == false}, and the same for edges.\n",
        "89": " *   <li>If you would otherwise have duplicate edges (e.g. weighted edges represented by a Double),\n",
        "90": " *       you can instead wrap the edges in a custom class that defers to {@link Object} for its\n",
        "91": " *       {@code equals()} and {@code hashCode()} implementations.\n",
        "92": " *   <li>If graph elements have mutable state, both of the following must be true:\n",
        "97": " *         interchangeable.  In particular, when adding such elements to a graph, you should create\n",
        "98": " *         them once and store the reference if you will need to refer to those elements more than\n",
        "99": " *         once during creation (rather than passing {@code new MyMutableNode(id)} to each\n",
        "100": " *         {@code add*()} call).\n",
        "103": " *   <br>Generally speaking, your design may be more robust if you use immutable nodes/edges and\n",
        "105": " * <li>There are no Node or Edge classes built in.  So you can have a {@code Graph<Integer, String>}\n",
        "106": " *     or a {@code Graph<Author,Publication>} or a {@code Graph<Webpage,Link>}.\n",
        "107": " * <li>This framework supports multiple mechanisms for storing the topology of a graph, including:\n",
        "109": " *   <li>the Graph implementation stores the topology (for example, by storing a {@code Map<N, E>}\n",
        "110": " *       that maps nodes onto their incident edges); this implies that the nodes and edges\n",
        "112": " *   <li>the nodes store the topology (for example, by storing a {@code List<E>} of incident edges);\n",
        "116": " * <li>Users that are not interested in edges as first-class objects have a couple of options:\n",
        "117": " *   <ul>\n",
        "118": " *   <li>pass in arbitrary Objects as edges: {@code addEdge(new Object(), n1, n2)}\n",
        "119": " *   <li>create an implementation of (or subinterface of, or class delegating to) Graph\n",
        "120": " *       that only exposes node-related methods.\n",
        "121": " *   </ul>\n",
        "132": " * <li>Accessors will throw {@code IllegalArgumentException} if passed a node/edge\n",
        "134": " * <li>Accessors take Object parameters rather than N/E generic type specifiers to match the pattern\n",
        "184": " * <li>Traversing a directed graph edge-wise:\n",
        "185": " * <pre><code>\n",
        "186": " *   // Update the shortest-path distances of the successors to {@code node}\n",
        "187": " *   // in a directed graph (inner loop of Dijkstra's algorithm):\n",
        "188": " *   void updateDistances(N node) {\n",
        "189": " *     nodeDistance = distances.get(node);\n",
        "190": " *     for (E outEdge : graph.outEdges(node)) {\n",
        "191": " *       N target = graph.target(outEdge);\n",
        "192": " *       double targetDistance = nodeDistance + outEdge.getWeight();\n",
        "193": " *       if (targetDistance < distances.get(target)) {\n",
        "194": " *         distances.put(target, targetDistance);\n",
        "195": " *       }\n",
        "196": " *     }\n",
        "197": " *   }\n",
        "198": " * </code></pre>\n",
        "203": " * @param <E> Edge parameter type\n",
        "207": "public interface Graph<N, E> {\n",
        "211": "  /** Returns all edges in this graph. */\n",
        "212": "  Set<E> edges();\n",
        "213": "\n",
        "230": "  /**\n",
        "231": "   * Returns true if this graph allows parallel edges. Attempting to add a parallel edge to a graph\n",
        "232": "   * that does not allow them will throw an {@link UnsupportedOperationException}.\n",
        "233": "   */\n",
        "234": "  boolean allowsParallelEdges();\n",
        "235": "\n",
        "248": "   * Returns the edges whose endpoints in this graph include {@code node}.\n",
        "249": "   *\n",
        "250": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "251": "   */\n",
        "252": "  Set<E> incidentEdges(Object node);\n",
        "253": "\n",
        "254": "  /**\n",
        "255": "   * Returns the nodes which are the endpoints of {@code edge} in this graph.\n",
        "256": "   *\n",
        "257": "   * <p>For self-loop edges, the returned set's size will be 1. If the graph is\n",
        "258": "   * {@linkplain #isDirected() directed} and {@code edge} is not a self-loop, the\n",
        "259": "   * iteration order will be {@code [source(edge), target(edge)]}.\n",
        "260": "   *\n",
        "261": "   * @throws IllegalArgumentException if {@code edge} is not an element of this graph\n",
        "262": "   */\n",
        "263": "  Set<N> incidentNodes(Object edge);\n",
        "264": "\n",
        "265": "  /**\n",
        "266": "   * Returns the nodes which have an {@linkplain #incidentEdges(Object) incident edge}\n",
        "267": "   * in common with {@code node} in this graph.\n",
        "273": "  /**\n",
        "274": "   * Returns the edges which have an {@linkplain #incidentNodes(Object) incident node}\n",
        "275": "   * in common with {@code edge} in this graph.\n",
        "276": "   *\n",
        "277": "   * <p>Whether an edge is considered adjacent to itself is not defined by this interface, but\n",
        "278": "   * generally for non-hypergraphs, edges are not considered to be self-adjacent.\n",
        "279": "   *\n",
        "280": "   * @throws IllegalArgumentException if {@code edge} is not an element of this graph\n",
        "281": "   */\n",
        "282": "  Set<E> adjacentEdges(Object edge);\n",
        "283": "\n",
        "284": "  /**\n",
        "285": "   * Returns the set of edges that connect {@code node1} to {@code node2}.\n",
        "286": "   *\n",
        "287": "   * <p>This set is the intersection of {@code outEdges(node1)} and {@code inEdges(node2)}. If\n",
        "288": "   * {@code node1} is equal to {@code node2}, then it is the set of self-loop edges for that node.\n",
        "289": "   *\n",
        "290": "   * @throws IllegalArgumentException if {@code node1} or {@code node2} is not an element\n",
        "291": "   *     of this graph\n",
        "292": "   */\n",
        "293": "  Set<E> edgesConnecting(Object node1, Object node2);\n",
        "294": "\n",
        "295": "  /**\n",
        "296": "   * Returns all edges in this graph which can be traversed in the direction (if any) of the edge\n",
        "297": "   * to end at {@code node}.\n",
        "298": "   *\n",
        "299": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "300": "   */\n",
        "301": "  Set<E> inEdges(Object node);\n",
        "302": "\n",
        "303": "  /**\n",
        "304": "   * Returns all edges in this graph which can be traversed in the direction (if any) of the edge\n",
        "305": "   * starting from {@code node}.\n",
        "306": "   *\n",
        "307": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "308": "   */\n",
        "309": "  Set<E> outEdges(Object node);\n",
        "310": "\n",
        "313": "   * {@code node}'s {@linkplain #inEdges(Object) incoming edges} <i>against</i> the direction\n",
        "314": "   * (if any) of the edge.\n",
        "322": "   * {@code node}'s {@linkplain #outEdges(Object) outgoing edges} in the direction (if any) of the\n",
        "323": "   * edge.\n",
        "337": "   * For a directed graph, returns the node for which {@code edge} is an outgoing edge.\n",
        "338": "   * For an undirected graph, throws an {@link UnsupportedOperationException}.\n",
        "339": "   */\n",
        "340": "  N source(Object edge);\n",
        "341": "\n",
        "342": "  /**\n",
        "343": "   * For a directed graph, returns the node for which {@code edge} is an incoming edge.\n",
        "344": "   * For an undirected graph, throws an {@link UnsupportedOperationException}.\n",
        "345": "   */\n",
        "346": "  N target(Object edge);\n",
        "347": "\n",
        "348": "  /**\n",
        "349": "   * Returns the number of edges {@linkplain #incidentEdges(Object) incident} in this graph\n",
        "350": "   * to {@code node}.  If this node has more than {@code Integer.MAX_VALUE} incident edges\n",
        "351": "   * in this graph, returns {@code Integer.MAX_VALUE}.\n",
        "352": "   *\n",
        "353": "   * <p>Equivalent to {@code incidentEdges(node).size()}.\n",
        "363": "   * Returns the number of {@linkplain #inEdges(Object) incoming edges} in this graph\n",
        "364": "   * of {@code node}.  If this node has more than {@code Integer.MAX_VALUE} incoming edges\n",
        "365": "   * in this graph, returns {@code Integer.MAX_VALUE}.\n",
        "366": "   *\n",
        "367": "   * <p>Equivalent to {@code inEdges(node).size()}.\n",
        "374": "   * Returns the number of {@linkplain #outEdges(Object) outgoing edges} in this graph\n",
        "375": "   * of {@code node}.  If this node has more than {@code Integer.MAX_VALUE} outgoing edges\n",
        "376": "   * in this graph, returns {@code Integer.MAX_VALUE}.\n",
        "377": "   *\n",
        "378": "   * <p>Equivalent to {@code outEdges(node).size()}.\n",
        "384": "  //\n",
        "385": "  // Element mutations\n",
        "386": "  //\n",
        "387": "\n",
        "388": "  /**\n",
        "389": "   * Adds {@code node} to this graph (optional operation).\n",
        "390": "   *\n",
        "391": "   * <p><b>Nodes must be unique</b>, just as {@code Map} keys must be; they must also be non-null.\n",
        "392": "   *\n",
        "393": "   * @return {@code true} iff the graph was modified as a result of this call\n",
        "394": "   * @throws UnsupportedOperationException if the add operation is not supported by this graph\n",
        "395": "   */\n",
        "396": "  @CanIgnoreReturnValue\n",
        "397": "  boolean addNode(N node);\n",
        "398": "\n",
        "399": "  /**\n",
        "400": "   * Adds {@code edge} to this graph, connecting {@code node1} to {@code node2}\n",
        "401": "   * (optional operation).\n",
        "402": "   *\n",
        "403": "   * <p><b>Edges must be unique</b>, just as {@code Map} keys must be; they must also be non-null.\n",
        "404": "   *\n",
        "405": "   * <p>If {@code edge} already connects {@code node1} to {@code node2} in this graph\n",
        "406": "   * (in the specified order if order is significant, as for directed graphs, else in any order),\n",
        "407": "   * then this method will have no effect and will return {@code false}.\n",
        "408": "   *\n",
        "409": "   * <p>Behavior if {@code node1} and {@code node2} are not already elements of the graph is\n",
        "410": "   * unspecified. Suggested behaviors include (a) silently adding {@code node1} and {@code node2}\n",
        "411": "   * to the graph or (b) throwing {@code IllegalArgumentException}.\n",
        "412": "   *\n",
        "413": "   * @return {@code true} iff the graph was modified as a result of this call\n",
        "414": "   * @throws IllegalArgumentException if {@code edge} already exists and connects nodes other than\n",
        "415": "   *     {@code node1} and {@code node2}, or if the graph is not a multigraph and {@code node1} is\n",
        "416": "   *     already connected to {@code node2}\n",
        "417": "   * @throws UnsupportedOperationException if the add operation is not supported by this graph\n",
        "418": "   */\n",
        "419": "  @CanIgnoreReturnValue\n",
        "420": "  boolean addEdge(E edge, N node1, N node2);\n",
        "421": "\n",
        "422": "  /**\n",
        "423": "   * Removes {@code node} from this graph, if it is present (optional operation).\n",
        "424": "   * In general, all edges incident to {@code node} in this graph will also be removed.\n",
        "425": "   * (This is not true for hyperedges.)\n",
        "426": "   *\n",
        "427": "   * @return {@code true} iff the graph was modified as a result of this call\n",
        "428": "   * @throws UnsupportedOperationException if the remove operation is not supported by this graph\n",
        "429": "   */\n",
        "430": "  @CanIgnoreReturnValue\n",
        "431": "  boolean removeNode(Object node);\n",
        "432": "\n",
        "433": "  /**\n",
        "434": "   * Removes {@code edge} from this graph, if it is present (optional operation).\n",
        "435": "   * In general, nodes incident to {@code edge} are unaffected (although implementations may choose\n",
        "436": "   * to disallow certain configurations, e.g., isolated nodes).\n",
        "437": "   *\n",
        "438": "   * @return {@code true} iff the graph was modified as a result of this call\n",
        "439": "   * @throws UnsupportedOperationException if the remove operation is not supported by this graph\n",
        "440": "   */\n",
        "441": "  @CanIgnoreReturnValue\n",
        "442": "  boolean removeEdge(Object edge);\n",
        "443": "\n",
        "445": "   * Returns {@code true} iff {@code object} is a graph that has the same node/edge relationships\n",
        "451": "   * <li>A and B have the same edge set\n",
        "452": "   * <li>A and B have the same incidence relationships, e.g., for each node/edge in A and in B\n",
        "453": "   *     its incident edge/node set in A is the same as its incident edge/node set in B.\n",
        "454": "   *     <br>Thus, every edge in A and B connect the same nodes in the same direction (if any).\n",
        "457": "   * <p>Graph properties are <b>not</b> respected by this method. For example, two graphs may be\n",
        "458": "   * considered equal even if one allows parallel edges and the other doesn't. Additionally, the\n",
        "459": "   * order in which edges or nodes are added to the graph, and the order in which they are iterated\n",
        "460": "   * over, are irrelevant.\n",
        "469": "   * of a map from each of the graph's nodes to their incident edges.\n"
    }
}