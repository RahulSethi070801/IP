{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.Beta;\n",
        "20": "import com.google.errorprone.annotations.CanIgnoreReturnValue;\n",
        "21": "\n",
        "22": "/**\n",
        "23": " * A subtype of {@link Graph} which permits mutations.\n",
        "24": " * Users should generally use the {@link Graph} interface where possible.\n",
        "25": " *\n",
        "26": " * @author Joshua O'Madadhain\n",
        "27": " * @param <N> Node parameter type\n",
        "28": " * @since 20.0\n",
        "29": " */\n",
        "30": "@Beta\n",
        "31": "public interface MutableGraph<N> extends Graph<N> {\n",
        "32": "\n",
        "33": "  /**\n",
        "34": "   * Adds {@code node} to this graph (optional operation).\n",
        "35": "   *\n",
        "36": "   * <p><b>Nodes must be unique</b>, just as {@code Map} keys must be; they must also be non-null.\n",
        "37": "   *\n",
        "38": "   * @return {@code true} iff the graph was modified as a result of this call\n",
        "39": "   * @throws UnsupportedOperationException if the add operation is not supported by this graph\n",
        "40": "   */\n",
        "41": "  @CanIgnoreReturnValue\n",
        "42": "  boolean addNode(N node);\n",
        "43": "\n",
        "44": "  /**\n",
        "45": "   * Adds an (implicit) edge to this graph connecting {@code node1} to {@code node2}\n",
        "46": "   * (optional operation).\n",
        "47": "   *\n",
        "48": "   * <p>Behavior if {@code node1} and {@code node2} are not already elements of the graph is\n",
        "49": "   * unspecified. Suggested behaviors include (a) silently adding {@code node1} and {@code node2}\n",
        "50": "   * to the graph or (b) throwing {@code IllegalArgumentException}.\n",
        "51": "   *\n",
        "52": "   * <p>Currently, this type does not support parallel edges.  {@code addEdge(node1, node2)} will\n",
        "53": "   * simply return false on any future calls with the same arguments (analogous to the behavior of\n",
        "54": "   * {@code Network.addEdge(e, node1, node2)}).  A hypothetical instance that supported parallel\n",
        "55": "   * edges would add a new edge between {@code node1} and {@code node2} for every call to\n",
        "56": "   * {@code addEdge(node1, node2)}, and return {@code true} every time.\n",
        "57": "   *\n",
        "58": "   * @return {@code true} iff the graph was modified as a result of this call\n",
        "59": "   * @throws UnsupportedOperationException if the add operation is not supported by this graph\n",
        "60": "   */\n",
        "61": "  @CanIgnoreReturnValue\n",
        "62": "  boolean addEdge(N node1, N node2);\n",
        "63": "\n",
        "64": "  /**\n",
        "65": "   * Removes {@code node} from this graph, if it is present (optional operation).\n",
        "66": "   * In general, all edges incident to {@code node} in this graph will also be removed.\n",
        "67": "   * (This is not true for hyperedges.)\n",
        "68": "   *\n",
        "69": "   * @return {@code true} iff the graph was modified as a result of this call\n",
        "70": "   * @throws UnsupportedOperationException if the remove operation is not supported by this graph\n",
        "71": "   */\n",
        "72": "  @CanIgnoreReturnValue\n",
        "73": "  boolean removeNode(Object node);\n",
        "74": "\n",
        "75": "  /**\n",
        "76": "   * Removes an edge connecting {@code node1} to {@code node2} from this graph, if one is present\n",
        "77": "   * (optional operation).\n",
        "78": "   *\n",
        "79": "   * <p>In general, the input nodes are unaffected (although implementations may choose\n",
        "80": "   * to disallow certain configurations, e.g., isolated nodes).\n",
        "81": "   *\n",
        "82": "   * @return {@code true} iff the graph was modified as a result of this call\n",
        "83": "   * @throws UnsupportedOperationException if the remove operation is not supported by this graph\n",
        "84": "   */\n",
        "85": "  @CanIgnoreReturnValue\n",
        "86": "  boolean removeEdge(Object node1, Object node2);\n",
        "87": "}\n"
    },
    "removed": {}
}