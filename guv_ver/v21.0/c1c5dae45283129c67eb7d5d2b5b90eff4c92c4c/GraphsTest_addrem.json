{
    "addition": {
        "61": "  // TODO(user): Consider adding both error messages from here and {@link AbstractNetworkTest}\n",
        "76": "    List<MutableNetwork<Integer, String>> testNetworks = ImmutableList.of(\n",
        "77": "        NetworkBuilder.directed().<Integer, String>build(),\n",
        "78": "        NetworkBuilder.undirected().<Integer, String>build());\n",
        "79": "    for (MutableNetwork<Integer, String> graph : testNetworks) {\n",
        "88": "    List<MutableNetwork<Integer, String>> testNetworks = ImmutableList.of(\n",
        "89": "        NetworkBuilder.directed().allowsParallelEdges(true).<Integer, String>build(),\n",
        "90": "        NetworkBuilder.undirected().allowsParallelEdges(true).<Integer, String>build());\n",
        "91": "    for (MutableNetwork<Integer, String> graph : testNetworks) {\n",
        "103": "    List<MutableNetwork<Integer, String>> testNetworks = ImmutableList.of(\n",
        "104": "        NetworkBuilder.directed().<Integer, String>build(),\n",
        "105": "        NetworkBuilder.undirected().<Integer, String>build());\n",
        "106": "    for (MutableNetwork<Integer, String> graph : testNetworks) {\n",
        "114": "    List<MutableNetwork<Integer, String>> testNetworks = ImmutableList.of(\n",
        "115": "        NetworkBuilder.directed().<Integer, String>build(),\n",
        "116": "        NetworkBuilder.undirected().<Integer, String>build());\n",
        "117": "    for (MutableNetwork<Integer, String> graph : testNetworks) {\n",
        "130": "    MutableNetwork<Integer, String> directedGraph =\n",
        "131": "        NetworkBuilder.directed().allowsParallelEdges(true).build();\n",
        "142": "    MutableNetwork<Integer, String> directedGraph =\n",
        "143": "        NetworkBuilder.directed().allowsParallelEdges(true).build();\n",
        "152": "    MutableNetwork<Integer, String> undirectedGraph =\n",
        "153": "        NetworkBuilder.undirected().allowsParallelEdges(true).build();\n",
        "164": "    MutableNetwork<Integer, String> undirectedGraph =\n",
        "165": "        NetworkBuilder.undirected().allowsParallelEdges(true).build();\n",
        "174": "    MutableNetwork<Integer, String> undirectedGraph =\n",
        "175": "        NetworkBuilder.undirected().allowsParallelEdges(true).build();\n",
        "191": "    MutableNetwork<Integer, String> directedGraph = NetworkBuilder.directed().build();\n",
        "210": "    MutableNetwork<Integer, String> undirectedGraph = NetworkBuilder.undirected().build();\n",
        "235": "    MutableNetwork<Integer, String> directedMultigraph =\n",
        "236": "        NetworkBuilder.directed().allowsParallelEdges(true).build();\n",
        "245": "    MutableNetwork<Integer, String> undirectedMultigraph =\n",
        "246": "        NetworkBuilder.undirected().allowsParallelEdges(true).build();\n",
        "256": "    MutableNetwork<Integer, String> directedGraph = NetworkBuilder.directed()\n",
        "266": "    MutableNetwork<Integer, String> undirectedGraph = NetworkBuilder.undirected()\n",
        "277": "      NetworkBuilder.directed().expectedNodeCount(-1);\n",
        "286": "    MutableNetwork<Integer, String> directedGraph = NetworkBuilder.directed()\n",
        "296": "    MutableNetwork<Integer, String> undirectedGraph = NetworkBuilder.undirected()\n",
        "307": "      NetworkBuilder.directed().expectedEdgeCount(-1);\n",
        "316": "    MutableNetwork<Integer, String> directedGraph\n",
        "317": "        = NetworkBuilder.directed().allowsSelfLoops(false).build();\n",
        "328": "    MutableNetwork<Integer, String> undirectedGraph =\n",
        "329": "        NetworkBuilder.undirected().allowsSelfLoops(false).build();\n",
        "350": "      addEdge(NetworkBuilder.directed().build(), E11, null);\n",
        "359": "      addEdge(NetworkBuilder.directed().<Integer, String>build(), E11, ImmutableSet.of(N1, N2, N3));\n",
        "368": "      addEdge(NetworkBuilder.directed().build(), E11, ImmutableSet.of());\n",
        "376": "    MutableNetwork<Integer, String> directedGraph = NetworkBuilder.directed().build();\n",
        "385": "    MutableNetwork<Integer, String> directedGraph = NetworkBuilder.directed().build();\n",
        "403": "    Graph<Integer> directedGraph = buildDirectedTestGraph();\n",
        "405": "    Graph<Integer> copy = copyOf(directedGraph);\n",
        "411": "    Graph<Integer> undirectedGraph = buildUndirectedTestGraph();\n",
        "413": "    Graph<Integer> copy = copyOf(undirectedGraph);\n",
        "417": "  @Test\n",
        "418": "  public void copyOf_filtered_undirectedGraph() {\n",
        "419": "    MutableGraph<Integer> undirectedGraph = buildUndirectedTestGraph();\n",
        "420": "    undirectedGraph.addEdge(N3, N1);\n",
        "421": "    Predicate<Integer> nodePredicate = Predicates.in(ImmutableSet.of(N1, N2));\n",
        "422": "\n",
        "423": "    Graph<Integer> filteredCopy = copyOf(undirectedGraph, nodePredicate);\n",
        "424": "\n",
        "425": "    MutableGraph<Integer> expectedGraph = GraphBuilder.undirected().build();\n",
        "426": "    expectedGraph.addEdge(N1, N1);\n",
        "427": "    expectedGraph.addEdge(N1, N2);\n",
        "428": "    expectedGraph.addEdge(N2, N1);\n",
        "429": "\n",
        "430": "    assertThat(filteredCopy).isEqualTo(expectedGraph);\n",
        "431": "  }\n",
        "432": "\n",
        "433": "  @Test\n",
        "434": "  public void copyOf_filtered_directedGraph() {\n",
        "435": "    MutableGraph<Integer> directedGraph = buildDirectedTestGraph();\n",
        "436": "    directedGraph.addEdge(N3, N1);\n",
        "437": "    Predicate<Integer> nodePredicate = Predicates.in(ImmutableSet.of(N1, N2));\n",
        "438": "\n",
        "439": "    Graph<Integer> filteredCopy = copyOf(directedGraph, nodePredicate);\n",
        "440": "\n",
        "441": "    MutableGraph<Integer> expectedGraph = GraphBuilder.directed().build();\n",
        "442": "    expectedGraph.addEdge(N1, N1);\n",
        "443": "    expectedGraph.addEdge(N1, N2);\n",
        "444": "    expectedGraph.addEdge(N2, N1);\n",
        "445": "\n",
        "446": "    assertThat(filteredCopy).isEqualTo(expectedGraph);\n",
        "447": "  }\n",
        "448": "\n",
        "449": "  @Test\n",
        "450": "  public void mergeNodesFrom_directedGraph() {\n",
        "451": "    MutableGraph<Integer> directedGraph = buildDirectedTestGraph();\n",
        "452": "    directedGraph.addNode(N3);\n",
        "453": "\n",
        "454": "    MutableGraph<Integer> actualGraph = GraphBuilder.directed().build();\n",
        "455": "    // prepopulate actualGraph to make sure that existing elements don't interfere with the merging\n",
        "456": "    actualGraph.addNode(N4);\n",
        "457": "    actualGraph.addNode(N2);\n",
        "458": "\n",
        "459": "    mergeNodesFrom(directedGraph, actualGraph);\n",
        "460": "\n",
        "461": "    MutableGraph<Integer> expectedGraph = GraphBuilder.directed().build();\n",
        "462": "    expectedGraph.addNode(N1);\n",
        "463": "    expectedGraph.addNode(N2);\n",
        "464": "    expectedGraph.addNode(N3);\n",
        "465": "    expectedGraph.addNode(N4);\n",
        "466": "\n",
        "467": "    assertThat(actualGraph).isEqualTo(expectedGraph);\n",
        "468": "  }\n",
        "469": "\n",
        "470": "  @Test\n",
        "471": "  public void mergeNodesFrom_filtered_directedGraph() {\n",
        "472": "    MutableGraph<Integer> directedGraph = buildDirectedTestGraph();\n",
        "473": "    directedGraph.addEdge(N3, N1);\n",
        "474": "    Predicate<Integer> nodePredicate = Predicates.in(ImmutableSet.of(N1, N2));\n",
        "475": "\n",
        "476": "    MutableGraph<Integer> actualGraph = GraphBuilder.directed().build();\n",
        "477": "    // prepopulate actualGraph to make sure that existing elements don't interfere with the merging\n",
        "478": "    actualGraph.addNode(N4); // ensure that we don't remove nodes that don't pass the predicate\n",
        "479": "    actualGraph.addNode(N2); // ensure that a pre-existing node is not affected by the merging\n",
        "480": "\n",
        "481": "    mergeNodesFrom(directedGraph, actualGraph, nodePredicate);\n",
        "482": "\n",
        "483": "    MutableGraph<Integer> expectedGraph = GraphBuilder.directed().build();\n",
        "484": "    expectedGraph.addNode(N1);\n",
        "485": "    expectedGraph.addNode(N2);\n",
        "486": "    // N3 is not expected because it's not in {N1, N2}\n",
        "487": "    expectedGraph.addNode(N4);\n",
        "488": "\n",
        "489": "    assertThat(actualGraph).isEqualTo(expectedGraph);\n",
        "490": "  }\n",
        "493": "  public void mergeNodesFrom_undirectedGraph() {\n",
        "494": "    MutableGraph<Integer> undirectedGraph = buildUndirectedTestGraph();\n",
        "496": "\n",
        "497": "    MutableGraph<Integer> actualGraph = GraphBuilder.undirected().build();\n",
        "498": "    // prepopulate actualGraph to make sure that existing elements don't interfere with the merging\n",
        "499": "    actualGraph.addNode(N4);\n",
        "500": "    actualGraph.addNode(N2);\n",
        "501": "\n",
        "502": "    mergeNodesFrom(undirectedGraph, actualGraph);\n",
        "503": "\n",
        "504": "    MutableGraph<Integer> expectedGraph = GraphBuilder.undirected().build();\n",
        "505": "    expectedGraph.addNode(N1);\n",
        "506": "    expectedGraph.addNode(N2);\n",
        "507": "    expectedGraph.addNode(N3);\n",
        "508": "    expectedGraph.addNode(N4);\n",
        "509": "\n",
        "510": "    assertThat(actualGraph).isEqualTo(expectedGraph);\n",
        "511": "  }\n",
        "512": "\n",
        "513": "  @Test\n",
        "514": "  public void mergeNodesFrom_filtered_undirectedGraph() {\n",
        "515": "    MutableGraph<Integer> undirectedGraph = buildUndirectedTestGraph();\n",
        "516": "    undirectedGraph.addEdge(N3, N1);\n",
        "517": "    Predicate<Integer> nodePredicate = Predicates.in(ImmutableSet.of(N1, N2));\n",
        "518": "\n",
        "519": "    MutableGraph<Integer> actualGraph = GraphBuilder.undirected().build();\n",
        "520": "    // prepopulate actualGraph to make sure that existing elements don't interfere with the merging\n",
        "521": "    actualGraph.addNode(N4); // ensure that we don't remove nodes that don't pass the predicate\n",
        "522": "    actualGraph.addNode(N2); // ensure that a pre-existing node is not affected by the merging\n",
        "523": "\n",
        "524": "    mergeNodesFrom(undirectedGraph, actualGraph, nodePredicate);\n",
        "525": "\n",
        "526": "    MutableGraph<Integer> expectedGraph = GraphBuilder.undirected().build();\n",
        "527": "    expectedGraph.addNode(N1);\n",
        "528": "    expectedGraph.addNode(N2);\n",
        "529": "    // N3 is not expected because it's not in {N1, N2}\n",
        "530": "    expectedGraph.addNode(N4);\n",
        "531": "\n",
        "532": "    assertThat(actualGraph).isEqualTo(expectedGraph);\n",
        "533": "  }\n",
        "534": "\n",
        "535": "  @Test\n",
        "536": "  public void copyOf_directedNetwork() {\n",
        "537": "    Network<Integer, String> directedGraph = buildDirectedTestNetwork();\n",
        "538": "\n",
        "539": "    Network<Integer, String> copy = copyOf(directedGraph);\n",
        "540": "    assertThat(copy).isEqualTo(directedGraph);\n",
        "541": "  }\n",
        "542": "\n",
        "543": "  @Test\n",
        "544": "  public void copyOf_undirectedNetwork() {\n",
        "545": "    Network<Integer, String> undirectedGraph = buildUndirectedTestNetwork();\n",
        "546": "\n",
        "547": "    Network<Integer, String> copy = copyOf(undirectedGraph);\n",
        "548": "    assertThat(copy).isEqualTo(undirectedGraph);\n",
        "549": "  }\n",
        "550": "\n",
        "551": "  // TODO: add a test for copyOf_hypergraph() once we have a Hypergraph implementation\n",
        "552": "\n",
        "553": "  @Test\n",
        "554": "  public void copyOf_filtered_undirectedNetwork() {\n",
        "555": "    MutableNetwork<Integer, String> undirectedGraph = buildUndirectedTestNetwork();\n",
        "556": "    undirectedGraph.addEdge(E13, N1, N3);\n",
        "557": "    Predicate<Integer> nodePredicate = Predicates.in(ImmutableSet.of(N1, N2));\n",
        "560": "    Network<Integer, String> filteredCopy =\n",
        "563": "    MutableNetwork<Integer, String> expectedGraph =\n",
        "564": "        NetworkBuilder.undirected().allowsParallelEdges(true).build();\n",
        "573": "  public void copyOf_filtered_directedNetwork() {\n",
        "574": "    MutableNetwork<Integer, String> directedGraph = buildDirectedTestNetwork();\n",
        "575": "    directedGraph.addEdge(E13, N1, N3);\n",
        "576": "    Predicate<Integer> nodePredicate = Predicates.in(ImmutableSet.of(N1, N2));\n",
        "579": "    Network<Integer, String> filteredCopy =\n",
        "582": "    MutableNetwork<Integer, String> expectedGraph =\n",
        "583": "        NetworkBuilder.directed().allowsParallelEdges(true).build();\n",
        "592": "  public void mergeNodesFrom_directedNetwork() {\n",
        "593": "    MutableNetwork<Integer, String> directedGraph = buildDirectedTestNetwork();\n",
        "596": "    MutableNetwork<Integer, String> actualGraph = NetworkBuilder.directed().build();\n",
        "603": "    MutableNetwork<Integer, String> expectedGraph = NetworkBuilder.directed().build();\n",
        "613": "  public void mergeNodesFrom_filtered_directedNetwork() {\n",
        "614": "    MutableNetwork<Integer, String> directedGraph = buildDirectedTestNetwork();\n",
        "615": "    directedGraph.addEdge(E13, N1, N3);\n",
        "616": "    Predicate<Integer> nodePredicate = Predicates.in(ImmutableSet.of(N1, N2));\n",
        "618": "    MutableNetwork<Integer, String> actualGraph = NetworkBuilder.directed().build();\n",
        "625": "    MutableNetwork<Integer, String> expectedGraph = NetworkBuilder.directed().build();\n",
        "628": "    // N3 is not expected because it's not in {N1, N2}\n",
        "635": "  public void mergeEdgesFrom_directedNetwork() {\n",
        "636": "    Network<Integer, String> directedGraph = buildDirectedTestNetwork();\n",
        "638": "    MutableNetwork<Integer, String> actualGraph\n",
        "639": "        = NetworkBuilder.directed().allowsParallelEdges(true).build();\n",
        "646": "    MutableNetwork<Integer, String> expectedGraph = buildDirectedTestNetwork();\n",
        "653": "  public void mergeEdgesFrom_filtered_directedNetwork() {\n",
        "654": "    MutableNetwork<Integer, String> directedGraph = buildDirectedTestNetwork();\n",
        "658": "    MutableNetwork<Integer, String> actualGraph\n",
        "659": "        = NetworkBuilder.directed().allowsParallelEdges(true).build();\n",
        "668": "    MutableNetwork<Integer, String> expectedGraph =\n",
        "669": "        NetworkBuilder.directed().allowsParallelEdges(true).build();\n",
        "683": "  public void mergeNodesFrom_undirectedNetwork() {\n",
        "684": "    MutableNetwork<Integer, String> undirectedGraph = buildUndirectedTestNetwork();\n",
        "687": "    MutableNetwork<Integer, String> actualGraph = NetworkBuilder.undirected().build();\n",
        "694": "    MutableNetwork<Integer, String> expectedGraph = NetworkBuilder.undirected().build();\n",
        "704": "  public void mergeNodesFrom_filtered_undirectedNetwork() {\n",
        "705": "    MutableNetwork<Integer, String> undirectedGraph = buildUndirectedTestNetwork();\n",
        "706": "    undirectedGraph.addEdge(E13, N1, N3);\n",
        "707": "    Predicate<Integer> nodePredicate = Predicates.in(ImmutableSet.of(N1, N2));\n",
        "709": "    MutableNetwork<Integer, String> actualGraph = NetworkBuilder.undirected().build();\n",
        "716": "    MutableNetwork<Integer, String> expectedGraph = NetworkBuilder.undirected().build();\n",
        "719": "    // N3 is not expected because it's not in {N1, N2}\n",
        "726": "  public void mergeEdgesFrom_undirectedNetwork() {\n",
        "727": "    Network<Integer, String> undirectedGraph = buildUndirectedTestNetwork();\n",
        "729": "    MutableNetwork<Integer, String> actualGraph =\n",
        "730": "        NetworkBuilder.undirected().allowsParallelEdges(true).build();\n",
        "737": "    MutableNetwork<Integer, String> expectedGraph = buildUndirectedTestNetwork();\n",
        "744": "  public void mergeEdgesFrom_filtered_undirectedNetwork() {\n",
        "745": "    MutableNetwork<Integer, String> undirectedGraph = buildUndirectedTestNetwork();\n",
        "749": "    MutableNetwork<Integer, String> actualGraph =\n",
        "750": "        NetworkBuilder.undirected().allowsParallelEdges(true).build();\n",
        "759": "    MutableNetwork<Integer, String> expectedGraph =\n",
        "760": "        NetworkBuilder.undirected().allowsParallelEdges(true).build();\n",
        "773": "  private static MutableGraph<Integer> buildDirectedTestGraph() {\n",
        "774": "    MutableGraph<Integer> directedGraph = GraphBuilder.directed().build();\n",
        "775": "    directedGraph.addEdge(N1, N1);\n",
        "776": "    directedGraph.addEdge(N1, N2);\n",
        "777": "    // TODO(b/28087289): add parallel edges to test\n",
        "778": "    directedGraph.addEdge(N2, N1);\n",
        "779": "\n",
        "780": "    return directedGraph;\n",
        "781": "  }\n",
        "782": "\n",
        "783": "  private static MutableGraph<Integer> buildUndirectedTestGraph() {\n",
        "784": "    MutableGraph<Integer> undirectedGraph = GraphBuilder.undirected().build();\n",
        "785": "    undirectedGraph.addEdge(N1, N1);\n",
        "786": "    undirectedGraph.addEdge(N1, N2);\n",
        "787": "    // TODO(b/28087289): add parallel edges to test\n",
        "788": "    undirectedGraph.addEdge(N2, N1);\n",
        "789": "\n",
        "790": "    return undirectedGraph;\n",
        "791": "  }\n",
        "792": "\n",
        "793": "  private static MutableNetwork<Integer, String> buildDirectedTestNetwork() {\n",
        "794": "    MutableNetwork<Integer, String> directedGraph =\n",
        "795": "        NetworkBuilder.directed().allowsParallelEdges(true).build();\n",
        "805": "  private static MutableNetwork<Integer, String> buildUndirectedTestNetwork() {\n",
        "806": "    MutableNetwork<Integer, String> undirectedGraph =\n",
        "807": "        NetworkBuilder.undirected().allowsParallelEdges(true).build();\n"
    },
    "removed": {
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "62": "  // TODO(user): Consider adding both error messages from here and {@link AbstractGraphTest}\n",
        "77": "    List<Graph<Integer, String>> testGraphs = ImmutableList.of(\n",
        "78": "        GraphBuilder.directed().<Integer, String>build(),\n",
        "79": "        GraphBuilder.undirected().<Integer, String>build());\n",
        "80": "    for (Graph<Integer, String> graph : testGraphs) {\n",
        "89": "    List<Graph<Integer, String>> testGraphs = ImmutableList.of(\n",
        "90": "        GraphBuilder.directed().allowsParallelEdges(true).<Integer, String>build(),\n",
        "91": "        GraphBuilder.undirected().allowsParallelEdges(true).<Integer, String>build());\n",
        "92": "    for (Graph<Integer, String> graph : testGraphs) {\n",
        "104": "    List<Graph<Integer, String>> testGraphs = ImmutableList.of(\n",
        "105": "        GraphBuilder.directed().<Integer, String>build(),\n",
        "106": "        GraphBuilder.undirected().<Integer, String>build());\n",
        "107": "    for (Graph<Integer, String> graph : testGraphs) {\n",
        "115": "    List<Graph<Integer, String>> testGraphs = ImmutableList.of(\n",
        "116": "        GraphBuilder.directed().<Integer, String>build(),\n",
        "117": "        GraphBuilder.undirected().<Integer, String>build());\n",
        "118": "    for (Graph<Integer, String> graph : testGraphs) {\n",
        "131": "    Graph<Integer, String> directedGraph =\n",
        "132": "        GraphBuilder.directed().allowsParallelEdges(true).build();\n",
        "143": "    Graph<Integer, String> directedGraph =\n",
        "144": "        GraphBuilder.directed().allowsParallelEdges(true).build();\n",
        "153": "    Graph<Integer, String> undirectedGraph =\n",
        "154": "        GraphBuilder.undirected().allowsParallelEdges(true).build();\n",
        "165": "    Graph<Integer, String> undirectedGraph =\n",
        "166": "        GraphBuilder.undirected().allowsParallelEdges(true).build();\n",
        "175": "    Graph<Integer, String> undirectedGraph =\n",
        "176": "        GraphBuilder.undirected().allowsParallelEdges(true).build();\n",
        "192": "    Graph<Integer, String> directedGraph = GraphBuilder.directed().build();\n",
        "211": "    Graph<Integer, String> undirectedGraph = GraphBuilder.undirected().build();\n",
        "236": "    Graph<Integer, String> directedMultigraph =\n",
        "237": "        GraphBuilder.directed().allowsParallelEdges(true).build();\n",
        "246": "    Graph<Integer, String> undirectedMultigraph =\n",
        "247": "        GraphBuilder.undirected().allowsParallelEdges(true).build();\n",
        "257": "    Graph<Integer, String> directedGraph = GraphBuilder.directed()\n",
        "267": "    Graph<Integer, String> undirectedGraph = GraphBuilder.undirected()\n",
        "278": "      GraphBuilder.directed().expectedNodeCount(-1);\n",
        "287": "    Graph<Integer, String> directedGraph = GraphBuilder.directed()\n",
        "297": "    Graph<Integer, String> undirectedGraph = GraphBuilder.undirected()\n",
        "308": "      GraphBuilder.directed().expectedEdgeCount(-1);\n",
        "317": "    Graph<Integer, String> directedGraph = GraphBuilder.directed().allowsSelfLoops(false).build();\n",
        "328": "    Graph<Integer, String> undirectedGraph =\n",
        "329": "        GraphBuilder.undirected().allowsSelfLoops(false).build();\n",
        "350": "      addEdge(GraphBuilder.directed().build(), E11, null);\n",
        "359": "      addEdge(GraphBuilder.directed().<Integer, String>build(), E11, ImmutableSet.of(N1, N2, N3));\n",
        "368": "      addEdge(GraphBuilder.directed().build(), E11, ImmutableSet.of());\n",
        "376": "    Graph<Integer, String> directedGraph = GraphBuilder.directed().build();\n",
        "385": "    Graph<Integer, String> directedGraph = GraphBuilder.directed().build();\n",
        "403": "    Graph<Integer, String> directedGraph = buildDirectedTestGraph();\n",
        "405": "    Graph<Integer, String> copy = copyOf(directedGraph);\n",
        "411": "    Graph<Integer, String> undirectedGraph = buildUndirectedTestGraph();\n",
        "413": "    Graph<Integer, String> copy = copyOf(undirectedGraph);\n",
        "417": "  // TODO: add a test for copyOf_hypergraph() once we have a Hypergraph implementation\n",
        "420": "  public void copyOf_filtered_undirected() {\n",
        "421": "    Graph<Integer, String> undirectedGraph = buildUndirectedTestGraph();\n",
        "423": "    Predicate<Integer> nodePredicate = connectedNodePredicate(undirectedGraph);\n",
        "426": "    Graph<Integer, String> filteredCopy =\n",
        "429": "    Graph<Integer, String> expectedGraph =\n",
        "430": "        GraphBuilder.undirected().allowsParallelEdges(true).build();\n",
        "439": "  public void copyOf_filtered_directed() {\n",
        "440": "    Graph<Integer, String> directedGraph = buildDirectedTestGraph();\n",
        "441": "    directedGraph.addNode(N3);\n",
        "442": "    Predicate<Integer> nodePredicate = connectedNodePredicate(directedGraph);\n",
        "445": "    Graph<Integer, String> filteredCopy =\n",
        "448": "    Graph<Integer, String> expectedGraph =\n",
        "449": "        GraphBuilder.directed().allowsParallelEdges(true).build();\n",
        "458": "  public void mergeNodesFrom_directed() {\n",
        "459": "    Graph<Integer, String> directedGraph = buildDirectedTestGraph();\n",
        "462": "    Graph<Integer, String> actualGraph = GraphBuilder.directed().build();\n",
        "469": "    Graph<Integer, String> expectedGraph = GraphBuilder.directed().build();\n",
        "479": "  public void mergeNodesFrom_filtered_directed() {\n",
        "480": "    Graph<Integer, String> directedGraph = buildDirectedTestGraph();\n",
        "481": "    directedGraph.addNode(N3);\n",
        "482": "    Predicate<Integer> nodePredicate = connectedNodePredicate(directedGraph);\n",
        "484": "    Graph<Integer, String> actualGraph = GraphBuilder.directed().build();\n",
        "491": "    Graph<Integer, String> expectedGraph = GraphBuilder.directed().build();\n",
        "494": "    // N3 is not expected because it's not connected\n",
        "501": "  public void mergeEdgesFrom_directed() {\n",
        "502": "    Graph<Integer, String> directedGraph = buildDirectedTestGraph();\n",
        "504": "    Graph<Integer, String> actualGraph = GraphBuilder.directed().allowsParallelEdges(true).build();\n",
        "511": "    Graph<Integer, String> expectedGraph = buildDirectedTestGraph();\n",
        "518": "  public void mergeEdgesFrom_filtered_directed() {\n",
        "519": "    Graph<Integer, String> directedGraph = buildDirectedTestGraph();\n",
        "523": "    Graph<Integer, String> actualGraph = GraphBuilder.directed().allowsParallelEdges(true).build();\n",
        "532": "    Graph<Integer, String> expectedGraph =\n",
        "533": "        GraphBuilder.directed().allowsParallelEdges(true).build();\n",
        "547": "  public void mergeNodesFrom_undirected() {\n",
        "548": "    Graph<Integer, String> undirectedGraph = buildUndirectedTestGraph();\n",
        "551": "    Graph<Integer, String> actualGraph = GraphBuilder.undirected().build();\n",
        "558": "    Graph<Integer, String> expectedGraph = GraphBuilder.undirected().build();\n",
        "568": "  public void mergeNodesFrom_filtered_undirected() {\n",
        "569": "    Graph<Integer, String> undirectedGraph = buildUndirectedTestGraph();\n",
        "570": "    undirectedGraph.addNode(N3);\n",
        "571": "    Predicate<Integer> nodePredicate = connectedNodePredicate(undirectedGraph);\n",
        "573": "    Graph<Integer, String> actualGraph = GraphBuilder.undirected().build();\n",
        "580": "    Graph<Integer, String> expectedGraph = GraphBuilder.undirected().build();\n",
        "583": "    // N3 is not expected because it's not connected\n",
        "590": "  public void mergeEdgesFrom_undirected() {\n",
        "591": "    Graph<Integer, String> undirectedGraph = buildUndirectedTestGraph();\n",
        "593": "    Graph<Integer, String> actualGraph =\n",
        "594": "        GraphBuilder.undirected().allowsParallelEdges(true).build();\n",
        "601": "    Graph<Integer, String> expectedGraph = buildUndirectedTestGraph();\n",
        "608": "  public void mergeEdgesFrom_filtered_undirected() {\n",
        "609": "    Graph<Integer, String> undirectedGraph = buildUndirectedTestGraph();\n",
        "613": "    Graph<Integer, String> actualGraph =\n",
        "614": "        GraphBuilder.undirected().allowsParallelEdges(true).build();\n",
        "623": "    Graph<Integer, String> expectedGraph =\n",
        "624": "        GraphBuilder.undirected().allowsParallelEdges(true).build();\n",
        "637": "  private static Graph<Integer, String> buildDirectedTestGraph() {\n",
        "638": "    Graph<Integer, String> directedGraph =\n",
        "639": "        GraphBuilder.directed().allowsParallelEdges(true).build();\n",
        "649": "  private static Graph<Integer, String> buildUndirectedTestGraph() {\n",
        "650": "    Graph<Integer, String> undirectedGraph =\n",
        "651": "        GraphBuilder.undirected().allowsParallelEdges(true).build();\n",
        "660": "\n",
        "661": "  private static <N> Predicate<N> connectedNodePredicate(final Graph<N, ?> graph) {\n",
        "662": "    checkNotNull(graph, \"graph\");\n",
        "663": "    return new Predicate<N>() {\n",
        "664": "      @Override\n",
        "665": "      public boolean apply(N node) {\n",
        "666": "        return graph.degree(node) > 0;\n",
        "667": "      }\n",
        "668": "    };\n",
        "669": "  }\n"
    }
}