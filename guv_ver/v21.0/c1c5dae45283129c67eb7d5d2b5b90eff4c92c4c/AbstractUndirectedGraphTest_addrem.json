{
    "addition": {
        "50": "    addEdge(N1, N2);\n",
        "57": "    addEdge(N1, N2);\n",
        "64": "    addEdge(N1, N2);\n",
        "71": "    addEdge(N1, N2);\n",
        "84": "    assertTrue(addEdge(N1, N2));\n",
        "89": "    addEdge(N1, N2);\n",
        "90": "    assertFalse(addEdge(N2, N1));\n",
        "95": "    addEdge(N1, N2);\n",
        "96": "    assertThat(graph.successors(N1)).containsExactly(N2);\n",
        "97": "    assertThat(graph.predecessors(N2)).containsExactly(N1);\n",
        "98": "    assertTrue(graph.removeEdge(N1, N2));\n",
        "99": "    assertThat(graph.successors(N1)).isEmpty();\n",
        "100": "    assertThat(graph.predecessors(N2)).isEmpty();\n"
    },
    "removed": {
        "23": "import static org.junit.Assert.fail;\n",
        "25": "import com.google.common.collect.ImmutableSet;\n",
        "43": "      new EqualsTester()\n",
        "44": "          .addEqualityGroup(graph.inEdges(node), graph.outEdges(node), graph.incidentEdges(node))\n",
        "45": "          .testEquals();\n",
        "50": "\n",
        "51": "      for (Integer adjacentNode : graph.adjacentNodes(node)) {\n",
        "52": "        assertThat(graph.edgesConnecting(node, adjacentNode))\n",
        "53": "            .containsExactlyElementsIn(graph.edgesConnecting(adjacentNode, node));\n",
        "54": "      }\n",
        "58": "  @Test\n",
        "59": "  public void edgesConnecting_oneEdge() {\n",
        "60": "    addEdge(E12, N1, N2);\n",
        "61": "    assertThat(graph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "62": "    assertThat(graph.edgesConnecting(N2, N1)).containsExactly(E12);\n",
        "63": "  }\n",
        "64": "\n",
        "65": "  @Test\n",
        "66": "  public void inEdges_oneEdge() {\n",
        "67": "    addEdge(E12, N1, N2);\n",
        "68": "    assertThat(graph.inEdges(N2)).containsExactly(E12);\n",
        "69": "    assertThat(graph.inEdges(N1)).containsExactly(E12);\n",
        "70": "  }\n",
        "71": "\n",
        "72": "  @Test\n",
        "73": "  public void outEdges_oneEdge() {\n",
        "74": "    addEdge(E12, N1, N2);\n",
        "75": "    assertThat(graph.outEdges(N2)).containsExactly(E12);\n",
        "76": "    assertThat(graph.outEdges(N1)).containsExactly(E12);\n",
        "77": "  }\n",
        "78": "\n",
        "81": "    addEdge(E12, N1, N2);\n",
        "88": "    addEdge(E12, N1, N2);\n",
        "95": "    addEdge(E12, N1, N2);\n",
        "102": "    addEdge(E12, N1, N2);\n",
        "115": "    assertTrue(addEdge(E12, N1, N2));\n",
        "116": "    assertThat(graph.edges()).contains(E12);\n",
        "117": "    assertThat(graph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "118": "    assertThat(graph.edgesConnecting(N2, N1)).containsExactly(E12);\n",
        "123": "    addEdge(E12, N1, N2);\n",
        "124": "    ImmutableSet<String> edges = ImmutableSet.copyOf(graph.edges());\n",
        "125": "    assertFalse(addEdge(E12, N1, N2));\n",
        "126": "    assertThat(graph.edges()).containsExactlyElementsIn(edges);\n",
        "127": "    assertFalse(addEdge(E12, N2, N1));\n",
        "128": "    assertThat(graph.edges()).containsExactlyElementsIn(edges);\n",
        "129": "  }\n",
        "130": "\n",
        "131": "  @Test\n",
        "132": "  public void addEdge_existingEdgeBetweenDifferentNodes() {\n",
        "133": "    addEdge(E12, N1, N2);\n",
        "134": "    try {\n",
        "135": "      // Edge between totally different nodes\n",
        "136": "      addEdge(E12, N4, N5);\n",
        "137": "      fail(ERROR_ADDED_EXISTING_EDGE);\n",
        "138": "    } catch (IllegalArgumentException e) {\n",
        "139": "      assertThat(e.getMessage()).contains(ERROR_REUSE_EDGE);\n",
        "140": "    }\n",
        "141": "  }\n",
        "142": "\n",
        "143": "  @Test\n",
        "144": "  public void addEdge_parallelEdge() {\n",
        "145": "    addEdge(E12, N1, N2);\n",
        "146": "    try {\n",
        "147": "      addEdge(EDGE_NOT_IN_GRAPH, N1, N2);\n",
        "148": "      fail(ERROR_ADDED_PARALLEL_EDGE);\n",
        "149": "    } catch (IllegalArgumentException e) {\n",
        "150": "      assertThat(e.getMessage()).contains(ERROR_PARALLEL_EDGE);\n",
        "151": "    }\n",
        "152": "    try {\n",
        "153": "      addEdge(EDGE_NOT_IN_GRAPH, N2, N1);\n",
        "154": "      fail(ERROR_ADDED_PARALLEL_EDGE);\n",
        "155": "    } catch (IllegalArgumentException e) {\n",
        "156": "      assertThat(e.getMessage()).contains(ERROR_PARALLEL_EDGE);\n",
        "157": "    }\n",
        "162": "    addEdge(E12, N1, N2);\n",
        "163": "    assertTrue(graph.removeEdge(E12));\n",
        "164": "    assertThat(graph.edges()).doesNotContain(E12);\n",
        "165": "    assertThat(graph.edgesConnecting(N1, N2)).isEmpty();\n",
        "166": "    assertThat(graph.edgesConnecting(N2, N1)).isEmpty();\n"
    }
}