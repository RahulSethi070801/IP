{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "20": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "21": "import static com.google.common.graph.GraphErrorMessageUtils.EDGE_NOT_IN_GRAPH;\n",
        "22": "import static com.google.common.graph.GraphErrorMessageUtils.NODE_NOT_IN_GRAPH;\n",
        "23": "import static com.google.common.graph.GraphErrorMessageUtils.NOT_AVAILABLE_ON_UNDIRECTED;\n",
        "24": "\n",
        "25": "import com.google.common.collect.ImmutableSet;\n",
        "26": "import com.google.common.collect.Maps;\n",
        "27": "import com.google.common.collect.Sets;\n",
        "28": "\n",
        "29": "import java.util.Collections;\n",
        "30": "import java.util.Iterator;\n",
        "31": "import java.util.Map;\n",
        "32": "import java.util.Set;\n",
        "33": "\n",
        "34": "/**\n",
        "35": " * Abstract configurable implementation of {@link Network} that supports the options supplied\n",
        "36": " * by {@link NetworkBuilder}.\n",
        "37": " *\n",
        "38": " * <p>This class maintains a map of {@link NodeConnections} for every node\n",
        "39": " * and {@link IncidentNodes} for every edge.\n",
        "40": " *\n",
        "41": " * <p>{@code Set}-returning accessors return unmodifiable views: the view returned will reflect\n",
        "42": " * changes to the graph (if the graph is mutable) but may not be modified by the user.\n",
        "43": " * The behavior of the returned view is undefined in the following cases:\n",
        "44": " * <ul>\n",
        "45": " * <li>Removing the element on which the accessor is called (e.g.:\n",
        "46": " *     <pre>{@code\n",
        "47": " *     Set<N> adjacentNodes = adjacentNodes(node);\n",
        "48": " *     graph.removeNode(node);}</pre>\n",
        "49": " *     At this point, the contents of {@code adjacentNodes} are undefined.\n",
        "50": " * </ul>\n",
        "51": " *\n",
        "52": " * <p>The time complexity of all {@code Set}-returning accessors is O(1), since views are returned.\n",
        "53": " *\n",
        "54": " * @author James Sexton\n",
        "55": " * @author Joshua O'Madadhain\n",
        "56": " * @author Omar Darwish\n",
        "57": " * @param <N> Node parameter type\n",
        "58": " * @param <E> Edge parameter type\n",
        "59": " */\n",
        "60": "// TODO(b/24620028): Enable this class to support sorted nodes/edges.\n",
        "61": "class AbstractConfigurableNetwork<N, E> extends AbstractNetwork<N, E> {\n",
        "62": "  // The default of 11 is rather arbitrary, but roughly matches the sizing of just new HashMap()\n",
        "63": "  private static final int DEFAULT_MAP_SIZE = 11;\n",
        "64": "\n",
        "65": "  private final boolean isDirected;\n",
        "66": "  private final boolean allowsParallelEdges;\n",
        "67": "  private final boolean allowsSelfLoops;\n",
        "68": "\n",
        "69": "  protected final Map<N, NodeConnections<N, E>> nodeConnections;\n",
        "70": "  protected final Map<E, IncidentNodes<N>> edgeToIncidentNodes;\n",
        "71": "\n",
        "72": "  /**\n",
        "73": "   * Constructs a mutable graph with the properties specified in {@code builder}.\n",
        "74": "   */\n",
        "75": "  AbstractConfigurableNetwork(NetworkBuilder<? super N, ? super E> builder) {\n",
        "76": "    this(\n",
        "77": "        builder,\n",
        "78": "        Maps.<N, NodeConnections<N, E>>newLinkedHashMapWithExpectedSize(\n",
        "79": "            builder.expectedNodeCount.or(DEFAULT_MAP_SIZE)),\n",
        "80": "        Maps.<E, IncidentNodes<N>>newLinkedHashMapWithExpectedSize(\n",
        "81": "            builder.expectedEdgeCount.or(DEFAULT_MAP_SIZE)));\n",
        "82": "  }\n",
        "83": "\n",
        "84": "  /**\n",
        "85": "   * Constructs a graph with the properties specified in {@code builder}, initialized with\n",
        "86": "   * the given node and edge maps. May be used for either mutable or immutable graphs.\n",
        "87": "   */\n",
        "88": "  AbstractConfigurableNetwork(NetworkBuilder<? super N, ? super E> builder,\n",
        "89": "      Map<N, NodeConnections<N, E>> nodeConnections,\n",
        "90": "      Map<E, IncidentNodes<N>> edgeToIncidentNodes) {\n",
        "91": "    this.isDirected = builder.directed;\n",
        "92": "    this.allowsParallelEdges = builder.allowsParallelEdges;\n",
        "93": "    this.allowsSelfLoops = builder.allowsSelfLoops;\n",
        "94": "    this.nodeConnections = checkNotNull(nodeConnections);\n",
        "95": "    this.edgeToIncidentNodes = checkNotNull(edgeToIncidentNodes);\n",
        "96": "  }\n",
        "97": "\n",
        "98": "  @Override\n",
        "99": "  public Set<N> nodes() {\n",
        "100": "    return Collections.unmodifiableSet(nodeConnections.keySet());\n",
        "101": "  }\n",
        "102": "\n",
        "103": "  @Override\n",
        "104": "  public Set<E> edges() {\n",
        "105": "    return Collections.unmodifiableSet(edgeToIncidentNodes.keySet());\n",
        "106": "  }\n",
        "107": "\n",
        "108": "  @Override\n",
        "109": "  public boolean isDirected() {\n",
        "110": "    return isDirected;\n",
        "111": "  }\n",
        "112": "\n",
        "113": "  @Override\n",
        "114": "  public boolean allowsParallelEdges() {\n",
        "115": "    return allowsParallelEdges;\n",
        "116": "  }\n",
        "117": "\n",
        "118": "  @Override\n",
        "119": "  public boolean allowsSelfLoops() {\n",
        "120": "    return allowsSelfLoops;\n",
        "121": "  }\n",
        "122": "\n",
        "123": "  @Override\n",
        "124": "  public Set<E> incidentEdges(Object node) {\n",
        "125": "    return checkedConnections(node).incidentEdges();\n",
        "126": "  }\n",
        "127": "\n",
        "128": "  @Override\n",
        "129": "  public Set<N> incidentNodes(Object edge) {\n",
        "130": "    return checkedIncidentNodes(edge);\n",
        "131": "  }\n",
        "132": "\n",
        "133": "  @Override\n",
        "134": "  public Set<N> adjacentNodes(Object node) {\n",
        "135": "    return checkedConnections(node).adjacentNodes();\n",
        "136": "  }\n",
        "137": "\n",
        "138": "  @Override\n",
        "139": "  public Set<E> adjacentEdges(Object edge) {\n",
        "140": "    Iterator<N> incidentNodesIterator = incidentNodes(edge).iterator();\n",
        "141": "    Set<E> endpointsIncidentEdges = incidentEdges(incidentNodesIterator.next());\n",
        "142": "    while (incidentNodesIterator.hasNext()) {\n",
        "143": "      endpointsIncidentEdges =\n",
        "144": "          Sets.union(incidentEdges(incidentNodesIterator.next()), endpointsIncidentEdges);\n",
        "145": "    }\n",
        "146": "    return Sets.difference(endpointsIncidentEdges, ImmutableSet.of(edge));\n",
        "147": "  }\n",
        "148": "\n",
        "149": "  /**\n",
        "150": "   * If {@code node1} is equal to {@code node2}, the set of self-loop edges is returned.\n",
        "151": "   * Otherwise, returns the intersection of these two sets, using {@link Sets#intersection}:\n",
        "152": "   * <ol>\n",
        "153": "   * <li>Outgoing edges of {@code node1}.\n",
        "154": "   * <li>Incoming edges of {@code node2}.\n",
        "155": "   * </ol>\n",
        "156": "   */\n",
        "157": "  @Override\n",
        "158": "  public Set<E> edgesConnecting(Object node1, Object node2) {\n",
        "159": "    Set<E> outEdgesN1 = outEdges(node1); // Verifies that node1 is in graph\n",
        "160": "    if (node1.equals(node2)) {\n",
        "161": "      if (!allowsSelfLoops) {\n",
        "162": "        return ImmutableSet.of();\n",
        "163": "      }\n",
        "164": "      Set<E> selfLoopEdges = Sets.filter(outEdgesN1, Graphs.selfLoopPredicate(this));\n",
        "165": "      return Collections.unmodifiableSet(selfLoopEdges);\n",
        "166": "    }\n",
        "167": "    Set<E> inEdgesN2 = inEdges(node2);\n",
        "168": "    return (outEdgesN1.size() <= inEdgesN2.size())\n",
        "169": "        ? Sets.intersection(outEdgesN1, inEdgesN2)\n",
        "170": "        : Sets.intersection(inEdgesN2, outEdgesN1);\n",
        "171": "  }\n",
        "172": "\n",
        "173": "  @Override\n",
        "174": "  public Set<E> inEdges(Object node) {\n",
        "175": "    return checkedConnections(node).inEdges();\n",
        "176": "  }\n",
        "177": "\n",
        "178": "  @Override\n",
        "179": "  public Set<E> outEdges(Object node) {\n",
        "180": "    return checkedConnections(node).outEdges();\n",
        "181": "  }\n",
        "182": "\n",
        "183": "  @Override\n",
        "184": "  public Set<N> predecessors(Object node) {\n",
        "185": "    return checkedConnections(node).predecessors();\n",
        "186": "  }\n",
        "187": "\n",
        "188": "  @Override\n",
        "189": "  public Set<N> successors(Object node) {\n",
        "190": "    return checkedConnections(node).successors();\n",
        "191": "  }\n",
        "192": "\n",
        "193": "  @Override\n",
        "194": "  public N source(Object edge) {\n",
        "195": "    if (!isDirected) {\n",
        "196": "      throw new UnsupportedOperationException(NOT_AVAILABLE_ON_UNDIRECTED);\n",
        "197": "    }\n",
        "198": "    return checkedIncidentNodes(edge).node1();\n",
        "199": "  }\n",
        "200": "\n",
        "201": "  @Override\n",
        "202": "  public N target(Object edge) {\n",
        "203": "    if (!isDirected) {\n",
        "204": "      throw new UnsupportedOperationException(NOT_AVAILABLE_ON_UNDIRECTED);\n",
        "205": "    }\n",
        "206": "    return checkedIncidentNodes(edge).node2();\n",
        "207": "  }\n",
        "208": "\n",
        "209": "  protected NodeConnections<N, E> checkedConnections(Object node) {\n",
        "210": "    checkNotNull(node, \"node\");\n",
        "211": "    NodeConnections<N, E> connections = nodeConnections.get(node);\n",
        "212": "    checkArgument(connections != null, NODE_NOT_IN_GRAPH, node);\n",
        "213": "    return connections;\n",
        "214": "  }\n",
        "215": "\n",
        "216": "  protected IncidentNodes<N> checkedIncidentNodes(Object edge) {\n",
        "217": "    checkNotNull(edge, \"edge\");\n",
        "218": "    IncidentNodes<N> incidentNodes = edgeToIncidentNodes.get(edge);\n",
        "219": "    checkArgument(incidentNodes != null, EDGE_NOT_IN_GRAPH, edge);\n",
        "220": "    return incidentNodes;\n",
        "221": "  }\n",
        "222": "}\n"
    },
    "removed": {}
}