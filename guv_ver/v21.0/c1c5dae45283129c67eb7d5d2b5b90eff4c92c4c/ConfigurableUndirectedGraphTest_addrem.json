{
    "addition": {
        "37": "  public MutableGraph<Integer> createGraph() {\n",
        "43": "    addEdge(N1, N1);\n",
        "44": "    addEdge(N1, N2);\n",
        "50": "    addEdge(N1, N1);\n",
        "52": "    addEdge(N1, N2);\n",
        "58": "    addEdge(N1, N1);\n",
        "60": "    addEdge(N2, N1);\n",
        "66": "    addEdge(N1, N1);\n",
        "68": "    addEdge(N1, N2);\n",
        "74": "    addEdge(N1, N1);\n",
        "76": "    addEdge(N1, N2);\n",
        "82": "    addEdge(N1, N1);\n",
        "84": "    addEdge(N2, N1);\n",
        "91": "    assertTrue(addEdge(N1, N1));\n",
        "92": "    assertThat(graph.adjacentNodes(N1)).containsExactly(N1);\n",
        "97": "    addEdge(N1, N1);\n",
        "98": "    assertFalse(addEdge(N1, N1));\n",
        "104": "    addEdge(N1, N1);\n",
        "111": "    addEdge(N1, N1);\n",
        "112": "    assertTrue(graph.removeEdge(N1, N1));\n",
        "113": "    assertThat(graph.nodes()).containsExactly(N1);\n",
        "114": "    assertThat(graph.adjacentNodes(N1)).isEmpty();\n",
        "120": "    MutableGraph<Integer> graphA = createGraph();\n",
        "122": "    MutableGraph<Integer> graphB = createGraph();\n"
    },
    "removed": {
        "23": "import static org.junit.Assert.fail;\n",
        "25": "import com.google.common.collect.ImmutableSet;\n",
        "39": "  public Graph<Integer, String> createGraph() {\n",
        "43": "  @Test\n",
        "44": "  public void edges_selfLoop() {\n",
        "45": "    addEdge(E11, N1, N1);\n",
        "46": "    assertThat(graph.edges()).containsExactly(E11);\n",
        "47": "  }\n",
        "48": "\n",
        "49": "  @Test\n",
        "50": "  public void incidentEdges_selfLoop() {\n",
        "51": "    addEdge(E11, N1, N1);\n",
        "52": "    assertThat(graph.incidentEdges(N1)).containsExactly(E11);\n",
        "53": "  }\n",
        "54": "\n",
        "55": "  @Test\n",
        "56": "  public void incidentNodes_selfLoop() {\n",
        "57": "    addEdge(E11, N1, N1);\n",
        "58": "    assertThat(graph.incidentNodes(E11)).containsExactly(N1);\n",
        "59": "  }\n",
        "60": "\n",
        "63": "    addEdge(E11, N1, N1);\n",
        "64": "    addEdge(E12, N1, N2);\n",
        "68": "  @Test\n",
        "69": "  public void adjacentEdges_selfLoop() {\n",
        "70": "    // An edge is never adjacent to itself\n",
        "71": "    addEdge(E11, N1, N1);\n",
        "72": "    assertThat(graph.adjacentEdges(E11)).isEmpty();\n",
        "73": "    addEdge(E12, N1, N2);\n",
        "74": "    assertThat(graph.adjacentEdges(E11)).containsExactly(E12);\n",
        "75": "  }\n",
        "76": "\n",
        "77": "  @Test\n",
        "78": "  public void edgesConnecting_selfLoop() {\n",
        "79": "    addEdge(E11, N1, N1);\n",
        "80": "    assertThat(graph.edgesConnecting(N1, N1)).containsExactly(E11);\n",
        "81": "    addEdge(E12, N1, N2);\n",
        "82": "    assertThat(graph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "83": "    assertThat(graph.edgesConnecting(N2, N1)).containsExactly(E12);\n",
        "84": "    assertThat(graph.edgesConnecting(N1, N1)).containsExactly(E11);\n",
        "85": "  }\n",
        "86": "\n",
        "87": "  @Test\n",
        "88": "  public void inEdges_selfLoop() {\n",
        "89": "    addEdge(E11, N1, N1);\n",
        "90": "    assertThat(graph.inEdges(N1)).containsExactly(E11);\n",
        "91": "    addEdge(E12, N1, N2);\n",
        "92": "    assertThat(graph.inEdges(N1)).containsExactly(E11, E12);\n",
        "93": "  }\n",
        "94": "\n",
        "95": "  @Test\n",
        "96": "  public void outEdges_selfLoop() {\n",
        "97": "    addEdge(E11, N1, N1);\n",
        "98": "    assertThat(graph.outEdges(N1)).containsExactly(E11);\n",
        "99": "    addEdge(E12, N2, N1);\n",
        "100": "    assertThat(graph.outEdges(N1)).containsExactly(E11, E12);\n",
        "101": "  }\n",
        "102": "\n",
        "105": "    addEdge(E11, N1, N1);\n",
        "107": "    addEdge(E12, N1, N2);\n",
        "113": "    addEdge(E11, N1, N1);\n",
        "115": "    addEdge(E12, N2, N1);\n",
        "121": "    addEdge(E11, N1, N1);\n",
        "123": "    addEdge(E12, N1, N2);\n",
        "129": "    addEdge(E11, N1, N1);\n",
        "131": "    addEdge(E12, N1, N2);\n",
        "137": "    addEdge(E11, N1, N1);\n",
        "139": "    addEdge(E12, N2, N1);\n",
        "146": "    assertTrue(addEdge(E11, N1, N1));\n",
        "147": "    assertThat(graph.edges()).contains(E11);\n",
        "148": "    assertThat(graph.edgesConnecting(N1, N1)).containsExactly(E11);\n",
        "153": "    addEdge(E11, N1, N1);\n",
        "154": "    ImmutableSet<String> edges = ImmutableSet.copyOf(graph.edges());\n",
        "155": "    assertFalse(addEdge(E11, N1, N1));\n",
        "156": "    assertThat(graph.edges()).containsExactlyElementsIn(edges);\n",
        "157": "  }\n",
        "158": "\n",
        "159": "  @Test\n",
        "160": "  public void addEdge_existingEdgeBetweenDifferentNodes_selfLoops() {\n",
        "161": "    addEdge(E11, N1, N1);\n",
        "162": "    try {\n",
        "163": "      addEdge(E11, N1, N2);\n",
        "164": "      fail(\"Reusing an existing self-loop edge to connect different nodes succeeded\");\n",
        "165": "    } catch (IllegalArgumentException e) {\n",
        "166": "      assertThat(e.getMessage()).contains(ERROR_REUSE_EDGE);\n",
        "167": "    }\n",
        "168": "    try {\n",
        "169": "      addEdge(E11, N2, N2);\n",
        "170": "      fail(\"Reusing an existing self-loop edge to make a different self-loop edge succeeded\");\n",
        "171": "    } catch (IllegalArgumentException e) {\n",
        "172": "      assertThat(e.getMessage()).contains(ERROR_REUSE_EDGE);\n",
        "173": "    }\n",
        "174": "    addEdge(E12, N1, N2);\n",
        "175": "    try {\n",
        "176": "      addEdge(E12, N1, N1);\n",
        "177": "      fail(\"Reusing an existing edge to add a self-loop edge between different nodes succeeded\");\n",
        "178": "    } catch (IllegalArgumentException e) {\n",
        "179": "      assertThat(e.getMessage()).contains(ERROR_REUSE_EDGE);\n",
        "180": "    }\n",
        "181": "  }\n",
        "182": "\n",
        "183": "  @Test\n",
        "184": "  public void addEdge_parallelSelfLoopEdge() {\n",
        "185": "    addEdge(E11, N1, N1);\n",
        "186": "    try {\n",
        "187": "      addEdge(EDGE_NOT_IN_GRAPH, N1, N1);\n",
        "188": "      fail(\"Adding a parallel self-loop edge succeeded\");\n",
        "189": "    } catch (IllegalArgumentException e) {\n",
        "190": "      assertThat(e.getMessage()).contains(ERROR_PARALLEL_EDGE);\n",
        "191": "    }\n",
        "197": "    addEdge(E11, N1, N1);\n",
        "200": "    assertThat(graph.edges()).doesNotContain(E11);\n",
        "205": "    addEdge(E11, N1, N1);\n",
        "206": "    assertTrue(graph.removeEdge(E11));\n",
        "207": "    assertThat(graph.edges()).doesNotContain(E11);\n",
        "208": "    assertThat(graph.edgesConnecting(N1, N1)).isEmpty();\n",
        "214": "    Graph<Integer, String> graphA = createGraph();\n",
        "216": "    Graph<Integer, String> graphB = createGraph();\n"
    }
}