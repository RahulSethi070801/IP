{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "20": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "21": "import static com.google.common.graph.GraphErrorMessageUtils.NODE_NOT_IN_GRAPH;\n",
        "22": "\n",
        "23": "import com.google.common.collect.Maps;\n",
        "24": "\n",
        "25": "import java.util.Collections;\n",
        "26": "import java.util.Map;\n",
        "27": "import java.util.Set;\n",
        "28": "\n",
        "29": "/**\n",
        "30": " * Abstract configurable implementation of {@link Graph} that supports the options supplied\n",
        "31": " * by {@link GraphBuilder}.\n",
        "32": " *\n",
        "33": " * <p>This class maintains a map of {@link NodeAdjacencies} for every node.\n",
        "34": " *\n",
        "35": " * <p>{@code Set}-returning accessors return unmodifiable views: the view returned will reflect\n",
        "36": " * changes to the graph (if the graph is mutable) but may not be modified by the user.\n",
        "37": " * The behavior of the returned view is undefined in the following cases:\n",
        "38": " * <ul>\n",
        "39": " * <li>Removing the element on which the accessor is called (e.g.:\n",
        "40": " *     <pre>{@code\n",
        "41": " *     Set<N> adjacentNodes = adjacentNodes(node);\n",
        "42": " *     graph.removeNode(node);}</pre>\n",
        "43": " *     At this point, the contents of {@code adjacentNodes} are undefined.\n",
        "44": " * </ul>\n",
        "45": " *\n",
        "46": " * <p>The time complexity of all {@code Set}-returning accessors is O(1), since views are returned.\n",
        "47": " *\n",
        "48": " * @author James Sexton\n",
        "49": " * @author Joshua O'Madadhain\n",
        "50": " * @author Omar Darwish\n",
        "51": " * @param <N> Node parameter type\n",
        "52": " */\n",
        "53": "// TODO(b/24620028): Enable this class to support sorted nodes/edges.\n",
        "54": "class AbstractConfigurableGraph<N> extends AbstractGraph<N> {\n",
        "55": "  // The default of 11 is rather arbitrary, but roughly matches the sizing of just new HashMap()\n",
        "56": "  private static final int DEFAULT_MAP_SIZE = 11;\n",
        "57": "\n",
        "58": "  private final boolean isDirected;\n",
        "59": "  private final boolean allowsSelfLoops;\n",
        "60": "\n",
        "61": "  protected final Map<N, NodeAdjacencies<N>> nodeConnections;\n",
        "62": "\n",
        "63": "  /**\n",
        "64": "   * Constructs a mutable graph with the properties specified in {@code builder}.\n",
        "65": "   */\n",
        "66": "  AbstractConfigurableGraph(GraphBuilder<? super N> builder) {\n",
        "67": "    this(\n",
        "68": "        builder,\n",
        "69": "        Maps.<N, NodeAdjacencies<N>>newLinkedHashMapWithExpectedSize(\n",
        "70": "            builder.expectedNodeCount.or(DEFAULT_MAP_SIZE)));\n",
        "71": "  }\n",
        "72": "\n",
        "73": "  /**\n",
        "74": "   * Constructs a graph with the properties specified in {@code builder}, initialized with\n",
        "75": "   * the given node and edge maps. May be used for either mutable or immutable graphs.\n",
        "76": "   */\n",
        "77": "  AbstractConfigurableGraph(GraphBuilder<? super N> builder,\n",
        "78": "      Map<N, NodeAdjacencies<N>> nodeConnections) {\n",
        "79": "    this.isDirected = builder.directed;\n",
        "80": "    this.allowsSelfLoops = builder.allowsSelfLoops;\n",
        "81": "    this.nodeConnections = checkNotNull(nodeConnections);\n",
        "82": "  }\n",
        "83": "\n",
        "84": "  @Override\n",
        "85": "  public Set<N> nodes() {\n",
        "86": "    return Collections.unmodifiableSet(nodeConnections.keySet());\n",
        "87": "  }\n",
        "88": "\n",
        "89": "  @Override\n",
        "90": "  public boolean isDirected() {\n",
        "91": "    return isDirected;\n",
        "92": "  }\n",
        "93": "\n",
        "94": "  @Override\n",
        "95": "  public boolean allowsSelfLoops() {\n",
        "96": "    return allowsSelfLoops;\n",
        "97": "  }\n",
        "98": "\n",
        "99": "  @Override\n",
        "100": "  public Set<N> adjacentNodes(Object node) {\n",
        "101": "    return checkedConnections(node).adjacentNodes();\n",
        "102": "  }\n",
        "103": "\n",
        "104": "  @Override\n",
        "105": "  public Set<N> predecessors(Object node) {\n",
        "106": "    return checkedConnections(node).predecessors();\n",
        "107": "  }\n",
        "108": "\n",
        "109": "  @Override\n",
        "110": "  public Set<N> successors(Object node) {\n",
        "111": "    return checkedConnections(node).successors();\n",
        "112": "  }\n",
        "113": "\n",
        "114": "  protected NodeAdjacencies<N> checkedConnections(Object node) {\n",
        "115": "    checkNotNull(node, \"node\");\n",
        "116": "    NodeAdjacencies<N> connections = nodeConnections.get(node);\n",
        "117": "    checkArgument(connections != null, NODE_NOT_IN_GRAPH, node);\n",
        "118": "    return connections;\n",
        "119": "  }\n",
        "120": "}\n"
    },
    "removed": {}
}