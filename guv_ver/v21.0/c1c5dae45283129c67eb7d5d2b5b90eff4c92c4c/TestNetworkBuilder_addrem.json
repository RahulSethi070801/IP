{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph.testing;\n",
        "18": "\n",
        "19": "import com.google.common.graph.ImmutableNetwork;\n",
        "20": "import com.google.common.graph.MutableNetwork;\n",
        "21": "import com.google.common.graph.NetworkBuilder;\n",
        "22": "\n",
        "23": "/**\n",
        "24": " * This class is useful for fluently building an immutable graph in tests. Example usage:\n",
        "25": " * <pre><code>\n",
        "26": " * // Constructs the following graph: (A)    (B)--->(C)\n",
        "27": " * private static final ImmutableNetwork<String, String> GRAPH =\n",
        "28": " *     TestNetworkBuilder.<String, String>init(NetworkBuilder.directed())\n",
        "29": " *         .addNode(\"A\")\n",
        "30": " *         .addNode(\"B\")\n",
        "31": " *         .addNode(\"C\")\n",
        "32": " *         .addEdge(\"B->C\", \"B\", \"C\")\n",
        "33": " *         .toImmutableNetwork();\n",
        "34": " * </code></pre>\n",
        "35": " */\n",
        "36": "public final class TestNetworkBuilder<N, E> {\n",
        "37": "  private final MutableNetwork<N, E> graph;\n",
        "38": "\n",
        "39": "  private TestNetworkBuilder(MutableNetwork<N, E> graph) {\n",
        "40": "    this.graph = graph;\n",
        "41": "  }\n",
        "42": "\n",
        "43": "  public static <N, E> TestNetworkBuilder<N, E> init(NetworkBuilder<? super N, ? super E> builder) {\n",
        "44": "    return new TestNetworkBuilder<N, E>(builder.<N, E>build());\n",
        "45": "  }\n",
        "46": "\n",
        "47": "  public TestNetworkBuilder<N, E> addNode(N node) {\n",
        "48": "    graph.addNode(node);\n",
        "49": "    return this;\n",
        "50": "  }\n",
        "51": "\n",
        "52": "  public TestNetworkBuilder<N, E> addEdge(E edge, N node1, N node2) {\n",
        "53": "    graph.addEdge(edge, node1, node2);\n",
        "54": "    return this;\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  public ImmutableNetwork<N, E> toImmutableNetwork() {\n",
        "58": "    return ImmutableNetwork.copyOf(graph);\n",
        "59": "  }\n",
        "60": "}\n"
    },
    "removed": {}
}