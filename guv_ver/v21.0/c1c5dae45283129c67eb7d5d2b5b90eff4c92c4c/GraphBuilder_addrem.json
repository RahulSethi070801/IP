{
    "addition": {
        "39": "// to narrow the generic type when Comparators are provided.\n",
        "40": "public final class GraphBuilder<N> {\n",
        "41": "  final boolean directed;\n",
        "46": "  /**\n",
        "47": "   * Creates a new instance with the specified edge directionality.\n",
        "48": "   *\n",
        "49": "   * @param directed if true, creates an instance for graphs whose edges are each directed;\n",
        "50": "   *      if false, creates an instance for graphs whose edges are each undirected.\n",
        "51": "   */\n",
        "52": "  private GraphBuilder(boolean directed) {\n",
        "53": "    this.directed = directed;\n",
        "54": "  }\n",
        "59": "  public static GraphBuilder<Object> directed() {\n",
        "60": "    return new GraphBuilder<Object>(true);\n",
        "66": "  public static GraphBuilder<Object> undirected() {\n",
        "67": "    return new GraphBuilder<Object>(false);\n",
        "77": "  public static <N> GraphBuilder<N> from(Graph<N> graph) {\n",
        "78": "    // TODO(b/28087289): add allowsParallelEdges() once we support them\n",
        "79": "    return new GraphBuilder<N>(graph.isDirected())\n",
        "88": "  public GraphBuilder<N> allowsSelfLoops(boolean allowsSelfLoops) {\n",
        "98": "  public GraphBuilder<N> expectedNodeCount(int expectedNodeCount) {\n",
        "108": "  public <N1 extends N> MutableGraph<N1> build() {\n",
        "109": "    return new ConfigurableGraph<N1>(this);\n"
    },
    "removed": {
        "39": "// to narrow the generic <N, E> type when Comparators are provided.\n",
        "40": "public final class GraphBuilder<N, E> {\n",
        "41": "  Boolean directed = null; // No default value to enforce that this is set before building\n",
        "42": "  boolean allowsParallelEdges = false;\n",
        "45": "  Comparator<E> edgeComparator = null;\n",
        "47": "  Optional<Integer> expectedEdgeCount = Optional.absent();\n",
        "49": "  private GraphBuilder() {}\n",
        "54": "  public static GraphBuilder<Object, Object> directed() {\n",
        "55": "    return new GraphBuilder<Object, Object>().directed(true);\n",
        "61": "  public static GraphBuilder<Object, Object> undirected() {\n",
        "62": "    return new GraphBuilder<Object, Object>().directed(false);\n",
        "72": "  public static <N, E> GraphBuilder<N, E> from(Graph<N, E> graph) {\n",
        "73": "    return new GraphBuilder<N, E>()\n",
        "74": "        .directed(graph.isDirected())\n",
        "75": "        .allowsParallelEdges(graph.allowsParallelEdges())\n",
        "79": "  /**\n",
        "80": "   * This value should be set by {@link #directed()}, {@link #undirected()},\n",
        "81": "   * or {@link #from(Graph)}.\n",
        "82": "   */\n",
        "83": "  private GraphBuilder<N, E> directed(boolean directed) {\n",
        "84": "    this.directed = directed;\n",
        "85": "    return this;\n",
        "86": "  }\n",
        "87": "\n",
        "88": "  /**\n",
        "89": "   * Specifies whether the graph will allow parallel edges. Attempting to add a parallel edge to\n",
        "90": "   * a graph that does not allow them will throw an {@link UnsupportedOperationException}.\n",
        "91": "   */\n",
        "92": "  public GraphBuilder<N, E> allowsParallelEdges(boolean allowsParallelEdges) {\n",
        "93": "    this.allowsParallelEdges = allowsParallelEdges;\n",
        "94": "    return this;\n",
        "95": "  }\n",
        "96": "\n",
        "102": "  public GraphBuilder<N, E> allowsSelfLoops(boolean allowsSelfLoops) {\n",
        "112": "  public GraphBuilder<N, E> expectedNodeCount(int expectedNodeCount) {\n",
        "119": "  /**\n",
        "120": "   * Specifies the expected number of edges in the graph.\n",
        "121": "   *\n",
        "122": "   * @throws IllegalArgumentException if {@code expectedEdgeCount} is negative\n",
        "123": "   */\n",
        "124": "  public GraphBuilder<N, E> expectedEdgeCount(int expectedEdgeCount) {\n",
        "125": "    checkArgument(expectedEdgeCount >= 0, \"The expected number of edges can't be negative: %s\",\n",
        "126": "        expectedEdgeCount);\n",
        "127": "    this.expectedEdgeCount = Optional.of(expectedEdgeCount);\n",
        "128": "    return this;\n",
        "129": "  }\n",
        "130": "\n",
        "134": "  public <N1 extends N, E1 extends E> Graph<N1, E1> build() {\n",
        "135": "    return new ConfigurableGraph<N1, E1>(this);\n"
    }
}