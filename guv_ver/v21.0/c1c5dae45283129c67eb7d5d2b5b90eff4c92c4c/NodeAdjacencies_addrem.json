{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import com.google.errorprone.annotations.CanIgnoreReturnValue;\n",
        "20": "\n",
        "21": "import java.util.Set;\n",
        "22": "/**\n",
        "23": " * An interface for representing an origin node's adjacent nodes in a network.\n",
        "24": " *\n",
        "25": " * @author James Sexton\n",
        "26": " * @param <N> Node parameter type\n",
        "27": " */\n",
        "28": "interface NodeAdjacencies<N> {\n",
        "29": "\n",
        "30": "  Set<N> adjacentNodes();\n",
        "31": "\n",
        "32": "  Set<N> predecessors();\n",
        "33": "\n",
        "34": "  Set<N> successors();\n",
        "35": "\n",
        "36": "  /**\n",
        "37": "   * Remove {@code node} from the set of predecessors.\n",
        "38": "   *\n",
        "39": "   * @return true iff the adjacency relationships changed\n",
        "40": "   */\n",
        "41": "  @CanIgnoreReturnValue\n",
        "42": "  boolean removePredecessor(Object node);\n",
        "43": "\n",
        "44": "  /**\n",
        "45": "   * Remove {@code node} from the set of successors.\n",
        "46": "   *\n",
        "47": "   * @return true iff the adjacency relationships changed\n",
        "48": "   */\n",
        "49": "  @CanIgnoreReturnValue\n",
        "50": "  boolean removeSuccessor(Object node);\n",
        "51": "\n",
        "52": "  /**\n",
        "53": "   * Add {@code node} as a predecessor to the origin node.\n",
        "54": "   * In the case of an undirected graph, it also becomes a successor.\n",
        "55": "   *\n",
        "56": "   * @return true iff the adjacency relationships changed\n",
        "57": "   */\n",
        "58": "  @CanIgnoreReturnValue\n",
        "59": "  boolean addPredecessor(N node);\n",
        "60": "\n",
        "61": "  /**\n",
        "62": "   * Add {@code node} as a successor to the origin node.\n",
        "63": "   * In the case of an undirected graph, it also becomes a predecessor.\n",
        "64": "   *\n",
        "65": "   * @return true iff the adjacency relationships changed\n",
        "66": "   */\n",
        "67": "  @CanIgnoreReturnValue\n",
        "68": "  boolean addSuccessor(N node);\n",
        "69": "}\n"
    },
    "removed": {}
}