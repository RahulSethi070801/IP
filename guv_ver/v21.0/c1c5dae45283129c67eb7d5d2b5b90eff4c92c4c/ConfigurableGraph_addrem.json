{
    "addition": {
        "31": " * <p>Time complexities for mutation methods are all O(1) except for {@code removeNode(N node)},\n",
        "32": " * which is in O(d_node) where d_node is the degree of {@code node}.\n",
        "40": "class ConfigurableGraph<N> extends AbstractConfigurableGraph<N> implements MutableGraph<N> {\n",
        "44": "  ConfigurableGraph(GraphBuilder<? super N> builder) {\n",
        "45": "    super(builder);\n",
        "50": "   * the given node maps. May be used for either mutable or immutable graphs.\n",
        "52": "  ConfigurableGraph(GraphBuilder<? super N> builder,\n",
        "53": "      Map<N, NodeAdjacencies<N>> nodeConnections) {\n",
        "54": "    super(builder, nodeConnections);\n",
        "69": "   * Add an edge between {@code node1} and {@code node2}; if these nodes are not already\n",
        "70": "   * present in this graph, then add them.\n",
        "71": "   * Return {@code false} if an edge already exists between {@code node1} and {@code node2},\n",
        "74": "   * @throws IllegalArgumentException if self-loops are not allowed, and {@code node1} is equal to\n",
        "75": "   *     {@code node2}.\n",
        "79": "  public boolean addEdge(N node1, N node2) {\n",
        "82": "    checkArgument(allowsSelfLoops() || !node1.equals(node2), SELF_LOOPS_NOT_ALLOWED, node1);\n",
        "85": "    // TODO(user): does not support parallel edges\n",
        "86": "    if (containsN1 && containsN2 && nodeConnections.get(node1).successors().contains(node2)) {\n",
        "92": "    NodeAdjacencies<N> connectionsN1 = nodeConnections.get(node1);\n",
        "93": "    connectionsN1.addSuccessor(node2);\n",
        "97": "    NodeAdjacencies<N> connectionsN2 = nodeConnections.get(node2);\n",
        "98": "    connectionsN2.addPredecessor(node1);\n",
        "109": "    for (N successor : nodeConnections.get(node).successors()) {\n",
        "110": "      if (!node.equals(successor)) {\n",
        "111": "        // don't remove the successor if it's the input node (=> CME); will be removed below\n",
        "112": "        nodeConnections.get(successor).removePredecessor(node);\n",
        "113": "      }\n",
        "114": "    }\n",
        "115": "    for (N predecessor : nodeConnections.get(node).predecessors()) {\n",
        "116": "      nodeConnections.get(predecessor).removeSuccessor(node);\n",
        "124": "  public boolean removeEdge(Object node1, Object node2) {\n",
        "125": "    checkNotNull(node1, \"node1\");\n",
        "126": "    checkNotNull(node2, \"node2\");\n",
        "127": "    NodeAdjacencies<N> connectionsN1 = nodeConnections.get(node1);\n",
        "128": "    NodeAdjacencies<N> connectionsN2 = nodeConnections.get(node2);\n",
        "129": "    if (connectionsN1 == null || connectionsN2 == null) {\n",
        "132": "    boolean result = connectionsN1.removeSuccessor(node2);\n",
        "133": "    connectionsN2.removePredecessor(node1);\n",
        "134": "    return result;\n",
        "137": "  private NodeAdjacencies<N> newNodeConnections() {\n",
        "138": "    return isDirected()\n",
        "139": "        ? DirectedNodeAdjacencies.<N>of()\n",
        "140": "        : UndirectedNodeAdjacencies.<N>of();\n"
    },
    "removed": {
        "21": "import static com.google.common.graph.GraphErrorMessageUtils.ADDING_PARALLEL_EDGE;\n",
        "22": "import static com.google.common.graph.GraphErrorMessageUtils.EDGE_NOT_IN_GRAPH;\n",
        "23": "import static com.google.common.graph.GraphErrorMessageUtils.NODE_NOT_IN_GRAPH;\n",
        "24": "import static com.google.common.graph.GraphErrorMessageUtils.NOT_AVAILABLE_ON_UNDIRECTED;\n",
        "25": "import static com.google.common.graph.GraphErrorMessageUtils.REUSING_EDGE;\n",
        "28": "import com.google.common.collect.ImmutableList;\n",
        "29": "import com.google.common.collect.ImmutableSet;\n",
        "30": "import com.google.common.collect.Maps;\n",
        "31": "import com.google.common.collect.Sets;\n",
        "34": "import java.util.Collections;\n",
        "35": "import java.util.Iterator;\n",
        "37": "import java.util.Set;\n",
        "43": " * <p>This class maintains a map of {@link NodeConnections} for every node\n",
        "44": " * and {@link IncidentNodes} for every edge.\n",
        "45": " *\n",
        "46": " * <p>{@code Set}-returning accessors return unmodifiable views: the view returned will reflect\n",
        "47": " * changes to the graph (if the graph is mutable) but may not be modified by the user.\n",
        "48": " * The behavior of the returned view is undefined in the following cases:\n",
        "49": " * <ul>\n",
        "50": " * <li>Removing the element on which the accessor is called (e.g.:\n",
        "51": " *     <pre>{@code\n",
        "52": " *     Set<N> adjacentNodes = adjacentNodes(node);\n",
        "53": " *     graph.removeNode(node);}</pre>\n",
        "54": " *     At this point, the contents of {@code adjacentNodes} are undefined.\n",
        "55": " * </ul>\n",
        "56": " *\n",
        "57": " * <p>The time complexity of all {@code Set}-returning accessors is O(1), since views are returned.\n",
        "58": " *\n",
        "59": " * <p>Time complexities for mutation methods:\n",
        "60": " * <ul>\n",
        "61": " * <li>{@code addNode(N node)}: O(1).\n",
        "62": " * <li>{@code addEdge(E edge, N node1, N node2)}: O(1).\n",
        "63": " * <li>{@code removeNode(N node)}: O(d_node).\n",
        "64": " * <li>{@code removeEdge(E edge)}: O(1), unless this graph allows parallel edges;\n",
        "65": " *     in that case this method is O(min(outD_edgeSource, inD_edgeTarget)).\n",
        "66": " * </ul>\n",
        "67": " * where d_node is the degree of node, inD_node is the in-degree of node, and outD_node is the\n",
        "68": " * out-degree of node.\n",
        "74": " * @param <E> Edge parameter type\n",
        "77": "class ConfigurableGraph<N, E> extends AbstractGraph<N, E> {\n",
        "78": "  // The default of 11 is rather arbitrary, but roughly matches the sizing of just new HashMap()\n",
        "79": "  private static final int DEFAULT_MAP_SIZE = 11;\n",
        "80": "\n",
        "81": "  private final boolean isDirected;\n",
        "82": "  private final boolean allowsParallelEdges;\n",
        "83": "  private final boolean allowsSelfLoops;\n",
        "84": "\n",
        "85": "  private final Map<N, NodeConnections<N, E>> nodeConnections;\n",
        "86": "  private final Map<E, IncidentNodes<N>> edgeToIncidentNodes;\n",
        "87": "\n",
        "91": "  ConfigurableGraph(GraphBuilder<? super N, ? super E> builder) {\n",
        "92": "    this(\n",
        "93": "        builder,\n",
        "94": "        Maps.<N, NodeConnections<N, E>>newLinkedHashMapWithExpectedSize(\n",
        "95": "            builder.expectedNodeCount.or(DEFAULT_MAP_SIZE)),\n",
        "96": "        Maps.<E, IncidentNodes<N>>newLinkedHashMapWithExpectedSize(\n",
        "97": "            builder.expectedEdgeCount.or(DEFAULT_MAP_SIZE)));\n",
        "102": "   * the given node and edge maps. May be used for either mutable or immutable graphs.\n",
        "104": "  ConfigurableGraph(GraphBuilder<? super N, ? super E> builder,\n",
        "105": "      Map<N, NodeConnections<N, E>> nodeConnections,\n",
        "106": "      Map<E, IncidentNodes<N>> edgeToIncidentNodes) {\n",
        "107": "    this.isDirected = builder.directed;\n",
        "108": "    this.allowsParallelEdges = builder.allowsParallelEdges;\n",
        "109": "    this.allowsSelfLoops = builder.allowsSelfLoops;\n",
        "110": "    this.nodeConnections = checkNotNull(nodeConnections);\n",
        "111": "    this.edgeToIncidentNodes = checkNotNull(edgeToIncidentNodes);\n",
        "112": "  }\n",
        "113": "\n",
        "114": "  @Override\n",
        "115": "  public Set<N> nodes() {\n",
        "116": "    return Collections.unmodifiableSet(nodeConnections.keySet());\n",
        "117": "  }\n",
        "118": "\n",
        "119": "  @Override\n",
        "120": "  public Set<E> edges() {\n",
        "121": "    return Collections.unmodifiableSet(edgeToIncidentNodes.keySet());\n",
        "122": "  }\n",
        "123": "\n",
        "124": "  @Override\n",
        "125": "  public boolean isDirected() {\n",
        "126": "    return isDirected;\n",
        "127": "  }\n",
        "128": "\n",
        "129": "  @Override\n",
        "130": "  public boolean allowsParallelEdges() {\n",
        "131": "    return allowsParallelEdges;\n",
        "132": "  }\n",
        "133": "\n",
        "134": "  @Override\n",
        "135": "  public boolean allowsSelfLoops() {\n",
        "136": "    return allowsSelfLoops;\n",
        "137": "  }\n",
        "138": "\n",
        "139": "  @Override\n",
        "140": "  public Set<E> incidentEdges(Object node) {\n",
        "141": "    return checkedConnections(node).incidentEdges();\n",
        "142": "  }\n",
        "143": "\n",
        "144": "  @Override\n",
        "145": "  public Set<N> incidentNodes(Object edge) {\n",
        "146": "    return checkedIncidentNodes(edge);\n",
        "147": "  }\n",
        "148": "\n",
        "149": "  @Override\n",
        "150": "  public Set<N> adjacentNodes(Object node) {\n",
        "151": "    return checkedConnections(node).adjacentNodes();\n",
        "154": "  @Override\n",
        "155": "  public Set<E> adjacentEdges(Object edge) {\n",
        "156": "    Iterator<N> incidentNodesIterator = incidentNodes(edge).iterator();\n",
        "157": "    Set<E> endpointsIncidentEdges = incidentEdges(incidentNodesIterator.next());\n",
        "158": "    while (incidentNodesIterator.hasNext()) {\n",
        "159": "      endpointsIncidentEdges =\n",
        "160": "          Sets.union(incidentEdges(incidentNodesIterator.next()), endpointsIncidentEdges);\n",
        "161": "    }\n",
        "162": "    return Sets.difference(endpointsIncidentEdges, ImmutableSet.of(edge));\n",
        "163": "  }\n",
        "164": "\n",
        "165": "  /**\n",
        "166": "   * If {@code node1} is equal to {@code node2}, the set of self-loop edges is returned.\n",
        "167": "   * Otherwise, returns the intersection of these two sets, using {@link Sets#intersection}:\n",
        "168": "   * <ol>\n",
        "169": "   * <li>Outgoing edges of {@code node1}.\n",
        "170": "   * <li>Incoming edges of {@code node2}.\n",
        "171": "   * </ol>\n",
        "172": "   */\n",
        "173": "  @Override\n",
        "174": "  public Set<E> edgesConnecting(Object node1, Object node2) {\n",
        "175": "    Set<E> outEdgesN1 = outEdges(node1); // Verifies that node1 is in graph\n",
        "176": "    if (node1.equals(node2)) {\n",
        "177": "      if (!allowsSelfLoops) {\n",
        "178": "        return ImmutableSet.of();\n",
        "179": "      }\n",
        "180": "      Set<E> selfLoopEdges = Sets.filter(outEdgesN1, Graphs.selfLoopPredicate(this));\n",
        "181": "      return Collections.unmodifiableSet(selfLoopEdges);\n",
        "182": "    }\n",
        "183": "    Set<E> inEdgesN2 = inEdges(node2);\n",
        "184": "    return (outEdgesN1.size() <= inEdgesN2.size())\n",
        "185": "        ? Sets.intersection(outEdgesN1, inEdgesN2)\n",
        "186": "        : Sets.intersection(inEdgesN2, outEdgesN1);\n",
        "187": "  }\n",
        "188": "\n",
        "189": "  @Override\n",
        "190": "  public Set<E> inEdges(Object node) {\n",
        "191": "    return checkedConnections(node).inEdges();\n",
        "192": "  }\n",
        "193": "\n",
        "194": "  @Override\n",
        "195": "  public Set<E> outEdges(Object node) {\n",
        "196": "    return checkedConnections(node).outEdges();\n",
        "197": "  }\n",
        "198": "\n",
        "199": "  @Override\n",
        "200": "  public Set<N> predecessors(Object node) {\n",
        "201": "    return checkedConnections(node).predecessors();\n",
        "202": "  }\n",
        "203": "\n",
        "204": "  @Override\n",
        "205": "  public Set<N> successors(Object node) {\n",
        "206": "    return checkedConnections(node).successors();\n",
        "207": "  }\n",
        "208": "\n",
        "209": "  @Override\n",
        "210": "  public N source(Object edge) {\n",
        "211": "    if (!isDirected) {\n",
        "212": "      throw new UnsupportedOperationException(NOT_AVAILABLE_ON_UNDIRECTED);\n",
        "213": "    }\n",
        "214": "    return checkedIncidentNodes(edge).node1();\n",
        "215": "  }\n",
        "216": "\n",
        "217": "  @Override\n",
        "218": "  public N target(Object edge) {\n",
        "219": "    if (!isDirected) {\n",
        "220": "      throw new UnsupportedOperationException(NOT_AVAILABLE_ON_UNDIRECTED);\n",
        "221": "    }\n",
        "222": "    return checkedIncidentNodes(edge).node2();\n",
        "223": "  }\n",
        "224": "\n",
        "225": "  // Element Mutation\n",
        "226": "\n",
        "239": "   * Add nodes that are not elements of the graph, then add {@code edge} between them.\n",
        "240": "   * Return {@code false} if {@code edge} already exists between {@code node1} and {@code node2},\n",
        "243": "   * @throws IllegalArgumentException if an edge (other than {@code edge}) already\n",
        "244": "   *         exists from {@code node1} to {@code node2}, and this is not a multigraph.\n",
        "245": "   *         Also, if self-loops are not allowed, and {@code node1} is equal to {@code node2}.\n",
        "249": "  public boolean addEdge(E edge, N node1, N node2) {\n",
        "250": "    checkNotNull(edge, \"edge\");\n",
        "253": "    IncidentNodes<N> incidentNodes = IncidentNodes.of(node1, node2);\n",
        "254": "    checkArgument(allowsSelfLoops || !incidentNodes.isSelfLoop(), SELF_LOOPS_NOT_ALLOWED, node1);\n",
        "257": "    if (edges().contains(edge)) {\n",
        "258": "      checkArgument(containsN1 && containsN2 && edgesConnecting(node1, node2).contains(edge),\n",
        "259": "          REUSING_EDGE, edge, incidentNodes(edge), incidentNodes);\n",
        "261": "    } else if (!allowsParallelEdges) {\n",
        "262": "      checkArgument(!(containsN1 && containsN2 && successors(node1).contains(node2)),\n",
        "263": "          ADDING_PARALLEL_EDGE, node1, node2);\n",
        "268": "    NodeConnections<N, E> connectionsN1 = nodeConnections.get(node1);\n",
        "269": "    connectionsN1.addSuccessor(node2, edge);\n",
        "273": "    NodeConnections<N, E> connectionsN2 = nodeConnections.get(node2);\n",
        "274": "    connectionsN2.addPredecessor(node1, edge);\n",
        "275": "    edgeToIncidentNodes.put(edge, incidentNodes);\n",
        "286": "    // Since views are returned, we need to copy the edges that will be removed.\n",
        "287": "    // Thus we avoid modifying the underlying view while iterating over it.\n",
        "288": "    for (E edge : ImmutableList.copyOf(incidentEdges(node))) {\n",
        "289": "      // Simply calling removeEdge(edge) would result in O(degree^2) behavior. However, we know that\n",
        "290": "      // after all incident edges are removed, the input node will be disconnected from all others.\n",
        "291": "      removeEdgeAndUpdateConnections(edge, true);\n",
        "299": "  public boolean removeEdge(Object edge) {\n",
        "300": "    checkNotNull(edge, \"edge\");\n",
        "301": "    if (!edges().contains(edge)) {\n",
        "304": "    // If there are no parallel edges, the removal of this edge will disconnect the incident nodes.\n",
        "305": "    removeEdgeAndUpdateConnections(edge, Graphs.parallelEdges(this, edge).isEmpty());\n",
        "306": "    return true;\n",
        "307": "  }\n",
        "308": "\n",
        "309": "  /**\n",
        "310": "   * If {@code disconnectIncidentNodes} is true, disconnects the nodes formerly connected\n",
        "311": "   * by {@code edge}. This should be set when all parallel edges are or will be removed.\n",
        "312": "   *\n",
        "313": "   * <p>Unlike {@link #removeEdge(Object)}, this method is guaranteed to run in O(1) time.\n",
        "314": "   *\n",
        "315": "   * @throws IllegalArgumentException if {@code edge} is not present in the graph.\n",
        "316": "   */\n",
        "317": "  private void removeEdgeAndUpdateConnections(Object edge, boolean disconnectIncidentNodes) {\n",
        "318": "    IncidentNodes<N> incidentNodes = checkedIncidentNodes(edge);\n",
        "319": "    N node1 = incidentNodes.node1();\n",
        "320": "    N node2 = incidentNodes.node2();\n",
        "321": "    NodeConnections<N, E> connectionsN1 = nodeConnections.get(node1);\n",
        "322": "    NodeConnections<N, E> connectionsN2 = nodeConnections.get(node2);\n",
        "323": "    if (disconnectIncidentNodes) {\n",
        "324": "      connectionsN1.removeSuccessor(node2);\n",
        "325": "      connectionsN2.removePredecessor(node1);\n",
        "326": "    }\n",
        "327": "    connectionsN1.removeOutEdge(edge);\n",
        "328": "    connectionsN2.removeInEdge(edge);\n",
        "329": "    edgeToIncidentNodes.remove(edge);\n",
        "330": "  }\n",
        "331": "\n",
        "332": "  private NodeConnections<N, E> newNodeConnections() {\n",
        "333": "    return isDirected\n",
        "334": "        ? DirectedNodeConnections.<N, E>of()\n",
        "335": "        : UndirectedNodeConnections.<N, E>of();\n",
        "336": "  }\n",
        "337": "\n",
        "338": "  private NodeConnections<N, E> checkedConnections(Object node) {\n",
        "339": "    checkNotNull(node, \"node\");\n",
        "340": "    NodeConnections<N, E> connections = nodeConnections.get(node);\n",
        "341": "    checkArgument(connections != null, NODE_NOT_IN_GRAPH, node);\n",
        "342": "    return connections;\n",
        "345": "  private IncidentNodes<N> checkedIncidentNodes(Object edge) {\n",
        "346": "    checkNotNull(edge, \"edge\");\n",
        "347": "    IncidentNodes<N> incidentNodes = edgeToIncidentNodes.get(edge);\n",
        "348": "    checkArgument(incidentNodes != null, EDGE_NOT_IN_GRAPH, edge);\n",
        "349": "    return incidentNodes;\n"
    }
}