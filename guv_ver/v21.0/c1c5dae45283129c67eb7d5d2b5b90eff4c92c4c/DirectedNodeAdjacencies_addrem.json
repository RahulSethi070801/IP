{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.base.MoreObjects;\n",
        "22": "import com.google.common.base.Objects;\n",
        "23": "import com.google.common.collect.ImmutableSet;\n",
        "24": "import com.google.common.collect.Sets;\n",
        "25": "\n",
        "26": "import java.util.Collections;\n",
        "27": "import java.util.Set;\n",
        "28": "\n",
        "29": "import javax.annotation.Nullable;\n",
        "30": "\n",
        "31": "/**\n",
        "32": " * A class representing an origin node's adjacent nodes in a directed graph.\n",
        "33": " *\n",
        "34": " * @author James Sexton\n",
        "35": " * @param <N> Node parameter type\n",
        "36": " */\n",
        "37": "final class DirectedNodeAdjacencies<N> implements NodeAdjacencies<N> {\n",
        "38": "  private final Set<N> predecessors;\n",
        "39": "  private final Set<N> successors;\n",
        "40": "\n",
        "41": "  private DirectedNodeAdjacencies(Set<N> predecessors, Set<N> successors) {\n",
        "42": "    this.predecessors = checkNotNull(predecessors, \"predecessors\");\n",
        "43": "    this.successors = checkNotNull(successors, \"successors\");\n",
        "44": "  }\n",
        "45": "\n",
        "46": "  static <N> DirectedNodeAdjacencies<N> of() {\n",
        "47": "    // TODO(user): Enable users to specify the expected number of neighbors of a new node.\n",
        "48": "    return new DirectedNodeAdjacencies<N>(Sets.<N>newHashSet(), Sets.<N>newHashSet());\n",
        "49": "  }\n",
        "50": "\n",
        "51": "  static <N> DirectedNodeAdjacencies<N> ofImmutable(Set<N> predecessors, Set<N> successors) {\n",
        "52": "    return new DirectedNodeAdjacencies<N>(\n",
        "53": "        ImmutableSet.copyOf(predecessors), ImmutableSet.copyOf(successors));\n",
        "54": "  }\n",
        "55": "\n",
        "56": "  @Override\n",
        "57": "  public Set<N> adjacentNodes() {\n",
        "58": "    return Sets.union(predecessors(), successors());\n",
        "59": "  }\n",
        "60": "\n",
        "61": "  @Override\n",
        "62": "  public Set<N> predecessors() {\n",
        "63": "    return Collections.unmodifiableSet(predecessors);\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  @Override\n",
        "67": "  public Set<N> successors() {\n",
        "68": "    return Collections.unmodifiableSet(successors);\n",
        "69": "  }\n",
        "70": "\n",
        "71": "  @Override\n",
        "72": "  public boolean removePredecessor(Object node) {\n",
        "73": "    checkNotNull(node, \"node\");\n",
        "74": "    return predecessors.remove(node);\n",
        "75": "  }\n",
        "76": "\n",
        "77": "  @Override\n",
        "78": "  public boolean removeSuccessor(Object node) {\n",
        "79": "    checkNotNull(node, \"node\");\n",
        "80": "    return successors.remove(node);\n",
        "81": "  }\n",
        "82": "\n",
        "83": "  @Override\n",
        "84": "  public boolean addPredecessor(N node) {\n",
        "85": "    checkNotNull(node, \"node\");\n",
        "86": "    return predecessors.add(node);\n",
        "87": "  }\n",
        "88": "\n",
        "89": "  @Override\n",
        "90": "  public boolean addSuccessor(N node) {\n",
        "91": "    checkNotNull(node, \"node\");\n",
        "92": "    return successors.add(node);\n",
        "93": "  }\n",
        "94": "\n",
        "95": "  // For now, hashCode() and equals() are unused by any graph implementation.\n",
        "96": "  @Override\n",
        "97": "  public int hashCode() {\n",
        "98": "    return Objects.hashCode(predecessors, successors);\n",
        "99": "  }\n",
        "100": "\n",
        "101": "  @Override\n",
        "102": "  public boolean equals(@Nullable Object object) {\n",
        "103": "    if (object instanceof DirectedNodeAdjacencies) {\n",
        "104": "      DirectedNodeAdjacencies<?> that = (DirectedNodeAdjacencies<?>) object;\n",
        "105": "      return this.predecessors.equals(that.predecessors)\n",
        "106": "          && this.successors.equals(that.successors);\n",
        "107": "    }\n",
        "108": "    return false;\n",
        "109": "  }\n",
        "110": "\n",
        "111": "  @Override\n",
        "112": "  public String toString() {\n",
        "113": "    return MoreObjects.toStringHelper(this)\n",
        "114": "        .add(\"predecessors\", predecessors)\n",
        "115": "        .add(\"successors\", successors)\n",
        "116": "        .toString();\n",
        "117": "  }\n",
        "118": "}\n"
    },
    "removed": {}
}