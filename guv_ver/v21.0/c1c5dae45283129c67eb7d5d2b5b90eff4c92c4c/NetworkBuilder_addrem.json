{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "20": "\n",
        "21": "import com.google.common.base.Optional;\n",
        "22": "\n",
        "23": "import java.util.Comparator;\n",
        "24": "\n",
        "25": "/**\n",
        "26": " * A builder for constructing instances of {@link Network} with user-defined properties.\n",
        "27": " *\n",
        "28": " * <p>A graph built by this class will have the following properties by default:\n",
        "29": " * <ul>\n",
        "30": " * <li>does not allow parallel edges\n",
        "31": " * <li>allows self-loops\n",
        "32": " * </ul>\n",
        "33": " *\n",
        "34": " * @author James Sexton\n",
        "35": " * @author Joshua O'Madadhain\n",
        "36": " * @since 20.0\n",
        "37": " */\n",
        "38": "// TODO(b/24620028): Add support for sorted nodes/edges. Use the same pattern as CacheBuilder\n",
        "39": "// to narrow the generic <N, E> type when Comparators are provided.\n",
        "40": "// TODO(user): try creating an abstract superclass that this and GraphBuilder could derive from.\n",
        "41": "public final class NetworkBuilder<N, E> {\n",
        "42": "  final boolean directed;\n",
        "43": "  boolean allowsParallelEdges = false;\n",
        "44": "  boolean allowsSelfLoops = true;\n",
        "45": "  Comparator<N> nodeComparator = null;\n",
        "46": "  Comparator<E> edgeComparator = null;\n",
        "47": "  Optional<Integer> expectedNodeCount = Optional.absent();\n",
        "48": "  Optional<Integer> expectedEdgeCount = Optional.absent();\n",
        "49": "\n",
        "50": "  /**\n",
        "51": "   * Creates a new instance with the specified edge directionality.\n",
        "52": "   *\n",
        "53": "   * @param directed if true, creates an instance for graphs whose edges are each directed;\n",
        "54": "   *      if false, creates an instance for graphs whose edges are each undirected.\n",
        "55": "   */\n",
        "56": "  private NetworkBuilder(boolean directed) {\n",
        "57": "    this.directed = directed;\n",
        "58": "  }\n",
        "59": "\n",
        "60": "  /**\n",
        "61": "   * Returns a {@link NetworkBuilder} for building directed graphs.\n",
        "62": "   */\n",
        "63": "  public static NetworkBuilder<Object, Object> directed() {\n",
        "64": "    return new NetworkBuilder<Object, Object>(true);\n",
        "65": "  }\n",
        "66": "\n",
        "67": "  /**\n",
        "68": "   * Returns a {@link NetworkBuilder} for building undirected graphs.\n",
        "69": "   */\n",
        "70": "  public static NetworkBuilder<Object, Object> undirected() {\n",
        "71": "    return new NetworkBuilder<Object, Object>(false);\n",
        "72": "  }\n",
        "73": "\n",
        "74": "  /**\n",
        "75": "   * Returns a {@link NetworkBuilder} initialized with all properties queryable from {@code graph}.\n",
        "76": "   *\n",
        "77": "   * <p>The \"queryable\" properties are those that are exposed through the {@link Network} interface,\n",
        "78": "   * such as {@link Network#isDirected()}. Other properties, such as\n",
        "79": "   * {@link #expectedNodeCount(int)}, are not set in the new builder.\n",
        "80": "   */\n",
        "81": "  public static <N, E> NetworkBuilder<N, E> from(Network<N, E> graph) {\n",
        "82": "    return new NetworkBuilder<N, E>(graph.isDirected())\n",
        "83": "        .allowsParallelEdges(graph.allowsParallelEdges())\n",
        "84": "        .allowsSelfLoops(graph.allowsSelfLoops());\n",
        "85": "  }\n",
        "86": "\n",
        "87": "  /**\n",
        "88": "   * Specifies whether the graph will allow parallel edges. Attempting to add a parallel edge to\n",
        "89": "   * a graph that does not allow them will throw an {@link UnsupportedOperationException}.\n",
        "90": "   */\n",
        "91": "  public NetworkBuilder<N, E> allowsParallelEdges(boolean allowsParallelEdges) {\n",
        "92": "    this.allowsParallelEdges = allowsParallelEdges;\n",
        "93": "    return this;\n",
        "94": "  }\n",
        "95": "\n",
        "96": "  /**\n",
        "97": "   * Specifies whether the graph will allow self-loops (edges that connect a node to itself).\n",
        "98": "   * Attempting to add a self-loop to a graph that does not allow them will throw an\n",
        "99": "   * {@link UnsupportedOperationException}.\n",
        "100": "   */\n",
        "101": "  public NetworkBuilder<N, E> allowsSelfLoops(boolean allowsSelfLoops) {\n",
        "102": "    this.allowsSelfLoops = allowsSelfLoops;\n",
        "103": "    return this;\n",
        "104": "  }\n",
        "105": "\n",
        "106": "  /**\n",
        "107": "   * Specifies the expected number of nodes in the graph.\n",
        "108": "   *\n",
        "109": "   * @throws IllegalArgumentException if {@code expectedNodeCount} is negative\n",
        "110": "   */\n",
        "111": "  public NetworkBuilder<N, E> expectedNodeCount(int expectedNodeCount) {\n",
        "112": "    checkArgument(expectedNodeCount >= 0, \"The expected number of nodes can't be negative: %s\",\n",
        "113": "        expectedNodeCount);\n",
        "114": "    this.expectedNodeCount = Optional.of(expectedNodeCount);\n",
        "115": "    return this;\n",
        "116": "  }\n",
        "117": "\n",
        "118": "  /**\n",
        "119": "   * Specifies the expected number of edges in the graph.\n",
        "120": "   *\n",
        "121": "   * @throws IllegalArgumentException if {@code expectedEdgeCount} is negative\n",
        "122": "   */\n",
        "123": "  public NetworkBuilder<N, E> expectedEdgeCount(int expectedEdgeCount) {\n",
        "124": "    checkArgument(expectedEdgeCount >= 0, \"The expected number of edges can't be negative: %s\",\n",
        "125": "        expectedEdgeCount);\n",
        "126": "    this.expectedEdgeCount = Optional.of(expectedEdgeCount);\n",
        "127": "    return this;\n",
        "128": "  }\n",
        "129": "\n",
        "130": "  /**\n",
        "131": "   * Returns an empty mutable {@link Network} with the properties of this {@link NetworkBuilder}.\n",
        "132": "   */\n",
        "133": "  public <N1 extends N, E1 extends E> MutableNetwork<N1, E1> build() {\n",
        "134": "    return new ConfigurableNetwork<N1, E1>(this);\n",
        "135": "  }\n",
        "136": "}\n"
    },
    "removed": {}
}