{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "import static org.junit.Assert.assertEquals;\n",
        "21": "import static org.junit.Assert.assertFalse;\n",
        "22": "import static org.junit.Assert.assertTrue;\n",
        "23": "import static org.junit.Assert.fail;\n",
        "24": "\n",
        "25": "import com.google.common.collect.ImmutableSet;\n",
        "26": "\n",
        "27": "import org.junit.After;\n",
        "28": "import org.junit.Test;\n",
        "29": "\n",
        "30": "import java.util.Collections;\n",
        "31": "import java.util.Set;\n",
        "32": "\n",
        "33": "/**\n",
        "34": " * Abstract base class for testing implementations of {@link Network} interface.\n",
        "35": " *\n",
        "36": " * <p>This class is responsible for testing that a directed implementation of {@link Network}\n",
        "37": " * is correctly handling directed edges. Implementation-dependent test cases are left to\n",
        "38": " * subclasses. Test cases that do not require the graph to be directed are found in superclasses.\n",
        "39": " *\n",
        "40": " */\n",
        "41": "public abstract class AbstractDirectedNetworkTest extends AbstractNetworkTest {\n",
        "42": "\n",
        "43": "  @After\n",
        "44": "  public void validateSourceAndTarget() {\n",
        "45": "    for (Integer node : graph.nodes()) {\n",
        "46": "      for (String inEdge : graph.inEdges(node)) {\n",
        "47": "        Integer oppositeNode = Graphs.oppositeNode(graph, inEdge, node);\n",
        "48": "        assertThat(graph.source(inEdge)).isEqualTo(oppositeNode);\n",
        "49": "        assertThat(graph.target(inEdge)).isEqualTo(node);\n",
        "50": "      }\n",
        "51": "\n",
        "52": "      for (String outEdge : graph.outEdges(node)) {\n",
        "53": "        Integer oppositeNode = Graphs.oppositeNode(graph, outEdge, node);\n",
        "54": "        assertThat(graph.source(outEdge)).isEqualTo(node);\n",
        "55": "        assertThat(graph.target(outEdge)).isEqualTo(oppositeNode);\n",
        "56": "      }\n",
        "57": "\n",
        "58": "      for (Integer adjacentNode : graph.adjacentNodes(node)) {\n",
        "59": "        Set<String> edges = graph.edgesConnecting(node, adjacentNode);\n",
        "60": "        Set<String> antiParallelEdges = graph.edgesConnecting(adjacentNode, node);\n",
        "61": "        assertTrue(node.equals(adjacentNode) || Collections.disjoint(edges, antiParallelEdges));\n",
        "62": "      }\n",
        "63": "    }\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  @Override\n",
        "67": "  @Test\n",
        "68": "  public void incidentNodes_oneEdge() {\n",
        "69": "    addEdge(E12, N1, N2);\n",
        "70": "    assertThat(graph.incidentNodes(E12)).containsExactly(N1, N2).inOrder();\n",
        "71": "  }\n",
        "72": "\n",
        "73": "  @Test\n",
        "74": "  public void edgesConnecting_oneEdge() {\n",
        "75": "    addEdge(E12, N1, N2);\n",
        "76": "    assertThat(graph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "77": "    // Passed nodes should be in the correct edge direction, first is the\n",
        "78": "    // source node and the second is the target node\n",
        "79": "    assertThat(graph.edgesConnecting(N2, N1)).isEmpty();\n",
        "80": "  }\n",
        "81": "\n",
        "82": "  @Test\n",
        "83": "  public void inEdges_oneEdge() {\n",
        "84": "    addEdge(E12, N1, N2);\n",
        "85": "    assertThat(graph.inEdges(N2)).containsExactly(E12);\n",
        "86": "    // Edge direction handled correctly\n",
        "87": "    assertThat(graph.inEdges(N1)).isEmpty();\n",
        "88": "  }\n",
        "89": "\n",
        "90": "  @Test\n",
        "91": "  public void outEdges_oneEdge() {\n",
        "92": "    addEdge(E12, N1, N2);\n",
        "93": "    assertThat(graph.outEdges(N1)).containsExactly(E12);\n",
        "94": "    // Edge direction handled correctly\n",
        "95": "    assertThat(graph.outEdges(N2)).isEmpty();\n",
        "96": "  }\n",
        "97": "\n",
        "98": "  @Test\n",
        "99": "  public void predecessors_oneEdge() {\n",
        "100": "    addEdge(E12, N1, N2);\n",
        "101": "    assertThat(graph.predecessors(N2)).containsExactly(N1);\n",
        "102": "    // Edge direction handled correctly\n",
        "103": "    assertThat(graph.predecessors(N1)).isEmpty();\n",
        "104": "  }\n",
        "105": "\n",
        "106": "  @Test\n",
        "107": "  public void successors_oneEdge() {\n",
        "108": "    addEdge(E12, N1, N2);\n",
        "109": "    assertThat(graph.successors(N1)).containsExactly(N2);\n",
        "110": "    // Edge direction handled correctly\n",
        "111": "    assertThat(graph.successors(N2)).isEmpty();\n",
        "112": "  }\n",
        "113": "\n",
        "114": "  @Test\n",
        "115": "  public void inDegree_oneEdge() {\n",
        "116": "    addEdge(E12, N1, N2);\n",
        "117": "    assertEquals(1, graph.inDegree(N2));\n",
        "118": "    // Edge direction handled correctly\n",
        "119": "    assertEquals(0, graph.inDegree(N1));\n",
        "120": "  }\n",
        "121": "\n",
        "122": "  @Test\n",
        "123": "  public void outDegree_oneEdge() {\n",
        "124": "    addEdge(E12, N1, N2);\n",
        "125": "    assertEquals(1, graph.outDegree(N1));\n",
        "126": "    // Edge direction handled correctly\n",
        "127": "    assertEquals(0, graph.outDegree(N2));\n",
        "128": "  }\n",
        "129": "\n",
        "130": "  @Test\n",
        "131": "  public void source_oneEdge() {\n",
        "132": "    addEdge(E12, N1, N2);\n",
        "133": "    assertEquals(N1, graph.source(E12));\n",
        "134": "  }\n",
        "135": "\n",
        "136": "  @Test\n",
        "137": "  public void source_edgeNotInGraph() {\n",
        "138": "    try {\n",
        "139": "      graph.source(EDGE_NOT_IN_GRAPH);\n",
        "140": "      fail(ERROR_EDGE_NOT_IN_GRAPH);\n",
        "141": "    } catch (IllegalArgumentException e) {\n",
        "142": "      assertEdgeNotInGraphErrorMessage(e);\n",
        "143": "    }\n",
        "144": "  }\n",
        "145": "\n",
        "146": "  @Test\n",
        "147": "  public void target_oneEdge() {\n",
        "148": "    addEdge(E12, N1, N2);\n",
        "149": "    assertEquals(N2, graph.target(E12));\n",
        "150": "  }\n",
        "151": "\n",
        "152": "  @Test\n",
        "153": "  public void target_edgeNotInGraph() {\n",
        "154": "    try {\n",
        "155": "      graph.target(EDGE_NOT_IN_GRAPH);\n",
        "156": "      fail(ERROR_EDGE_NOT_IN_GRAPH);\n",
        "157": "    } catch (IllegalArgumentException e) {\n",
        "158": "      assertEdgeNotInGraphErrorMessage(e);\n",
        "159": "    }\n",
        "160": "  }\n",
        "161": "\n",
        "162": "  // Element Mutation\n",
        "163": "\n",
        "164": "  @Test\n",
        "165": "  public void addEdge_existingNodes() {\n",
        "166": "    // Adding nodes initially for safety (insulating from possible future\n",
        "167": "    // modifications to proxy methods)\n",
        "168": "    addNode(N1);\n",
        "169": "    addNode(N2);\n",
        "170": "    assertTrue(addEdge(E12, N1, N2));\n",
        "171": "    assertThat(graph.edges()).contains(E12);\n",
        "172": "    assertThat(graph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "173": "    // Direction of the added edge is correctly handled\n",
        "174": "    assertThat(graph.edgesConnecting(N2, N1)).isEmpty();\n",
        "175": "  }\n",
        "176": "\n",
        "177": "  @Test\n",
        "178": "  public void addEdge_existingEdgeBetweenSameNodes() {\n",
        "179": "    addEdge(E12, N1, N2);\n",
        "180": "    ImmutableSet<String> edges = ImmutableSet.copyOf(graph.edges());\n",
        "181": "    assertFalse(addEdge(E12, N1, N2));\n",
        "182": "    assertThat(graph.edges()).containsExactlyElementsIn(edges);\n",
        "183": "  }\n",
        "184": "\n",
        "185": "  @Test\n",
        "186": "  public void addEdge_existingEdgeBetweenDifferentNodes() {\n",
        "187": "    addEdge(E12, N1, N2);\n",
        "188": "    try {\n",
        "189": "      // Edge between totally different nodes\n",
        "190": "      addEdge(E12, N4, N5);\n",
        "191": "      fail(ERROR_ADDED_EXISTING_EDGE);\n",
        "192": "    } catch (IllegalArgumentException e) {\n",
        "193": "      assertThat(e.getMessage()).contains(ERROR_REUSE_EDGE);\n",
        "194": "    }\n",
        "195": "    try {\n",
        "196": "      // Edge between same nodes but in reverse direction\n",
        "197": "      addEdge(E12, N2, N1);\n",
        "198": "      fail(ERROR_ADDED_EXISTING_EDGE);\n",
        "199": "    } catch (IllegalArgumentException e) {\n",
        "200": "      assertThat(e.getMessage()).contains(ERROR_REUSE_EDGE);\n",
        "201": "    }\n",
        "202": "  }\n",
        "203": "\n",
        "204": "  @Test\n",
        "205": "  public void addEdge_parallelEdge() {\n",
        "206": "    addEdge(E12, N1, N2);\n",
        "207": "    try {\n",
        "208": "      addEdge(EDGE_NOT_IN_GRAPH, N1, N2);\n",
        "209": "      fail(ERROR_ADDED_PARALLEL_EDGE);\n",
        "210": "    } catch (IllegalArgumentException e) {\n",
        "211": "      assertThat(e.getMessage()).contains(ERROR_PARALLEL_EDGE);\n",
        "212": "    }\n",
        "213": "  }\n",
        "214": "\n",
        "215": "  @Test\n",
        "216": "  public void removeEdge_existingEdge() {\n",
        "217": "    addEdge(E12, N1, N2);\n",
        "218": "    assertTrue(graph.removeEdge(E12));\n",
        "219": "    assertThat(graph.edges()).doesNotContain(E12);\n",
        "220": "    assertThat(graph.edgesConnecting(N1, N2)).isEmpty();\n",
        "221": "  }\n",
        "222": "}\n"
    },
    "removed": {}
}