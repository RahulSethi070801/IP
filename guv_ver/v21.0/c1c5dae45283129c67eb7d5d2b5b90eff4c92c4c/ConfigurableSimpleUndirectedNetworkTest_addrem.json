{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "import static org.junit.Assert.assertTrue;\n",
        "21": "import static org.junit.Assert.fail;\n",
        "22": "\n",
        "23": "import org.junit.Test;\n",
        "24": "import org.junit.runner.RunWith;\n",
        "25": "import org.junit.runners.JUnit4;\n",
        "26": "\n",
        "27": "import java.util.Set;\n",
        "28": "\n",
        "29": "/**\n",
        "30": " * Tests for an undirected {@link ConfigurableNetwork}, creating a simple undirected graph (parallel\n",
        "31": " * and self-loop edges are not allowed).\n",
        "32": " */\n",
        "33": "@RunWith(JUnit4.class)\n",
        "34": "public class ConfigurableSimpleUndirectedNetworkTest extends AbstractUndirectedNetworkTest {\n",
        "35": "\n",
        "36": "  @Override\n",
        "37": "  public MutableNetwork<Integer, String> createGraph() {\n",
        "38": "    return NetworkBuilder.undirected().allowsSelfLoops(false).build();\n",
        "39": "  }\n",
        "40": "\n",
        "41": "  @Override\n",
        "42": "  @Test\n",
        "43": "  public void nodes_checkReturnedSetMutability() {\n",
        "44": "    Set<Integer> nodes = graph.nodes();\n",
        "45": "    try {\n",
        "46": "      nodes.add(N2);\n",
        "47": "      fail(ERROR_MODIFIABLE_SET);\n",
        "48": "    } catch (UnsupportedOperationException e) {\n",
        "49": "      addNode(N1);\n",
        "50": "      assertThat(graph.nodes()).containsExactlyElementsIn(nodes);\n",
        "51": "    }\n",
        "52": "  }\n",
        "53": "\n",
        "54": "  @Override\n",
        "55": "  @Test\n",
        "56": "  public void edges_checkReturnedSetMutability() {\n",
        "57": "    Set<String> edges = graph.edges();\n",
        "58": "    try {\n",
        "59": "      edges.add(E12);\n",
        "60": "      fail(ERROR_MODIFIABLE_SET);\n",
        "61": "    } catch (UnsupportedOperationException e) {\n",
        "62": "      addEdge(E12, N1, N2);\n",
        "63": "      assertThat(graph.edges()).containsExactlyElementsIn(edges);\n",
        "64": "    }\n",
        "65": "  }\n",
        "66": "\n",
        "67": "  @Override\n",
        "68": "  @Test\n",
        "69": "  public void incidentEdges_checkReturnedSetMutability() {\n",
        "70": "    addNode(N1);\n",
        "71": "    Set<String> incidentEdges = graph.incidentEdges(N1);\n",
        "72": "    try {\n",
        "73": "      incidentEdges.add(E12);\n",
        "74": "      fail(ERROR_MODIFIABLE_SET);\n",
        "75": "    } catch (UnsupportedOperationException e) {\n",
        "76": "      addEdge(E12, N1, N2);\n",
        "77": "      assertThat(graph.incidentEdges(N1)).containsExactlyElementsIn(incidentEdges);\n",
        "78": "    }\n",
        "79": "  }\n",
        "80": "\n",
        "81": "  @Override\n",
        "82": "  @Test\n",
        "83": "  public void incidentNodes_checkReturnedSetMutability() {\n",
        "84": "    addEdge(E12, N1, N2);\n",
        "85": "    Set<Integer> incidentNodes = graph.incidentNodes(E12);\n",
        "86": "    try {\n",
        "87": "      incidentNodes.add(N3);\n",
        "88": "      fail(ERROR_MODIFIABLE_SET);\n",
        "89": "    } catch (UnsupportedOperationException expected) {\n",
        "90": "    }\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  @Override\n",
        "94": "  @Test\n",
        "95": "  public void adjacentNodes_checkReturnedSetMutability() {\n",
        "96": "    addNode(N1);\n",
        "97": "    Set<Integer> adjacentNodes = graph.adjacentNodes(N1);\n",
        "98": "    try {\n",
        "99": "      adjacentNodes.add(N2);\n",
        "100": "      fail(ERROR_MODIFIABLE_SET);\n",
        "101": "    } catch (UnsupportedOperationException e) {\n",
        "102": "      addEdge(E12, N1, N2);\n",
        "103": "      assertThat(graph.adjacentNodes(N1)).containsExactlyElementsIn(adjacentNodes);\n",
        "104": "    }\n",
        "105": "  }\n",
        "106": "\n",
        "107": "  @Override\n",
        "108": "  @Test\n",
        "109": "  public void adjacentEdges_checkReturnedSetMutability() {\n",
        "110": "    addEdge(E12, N1, N2);\n",
        "111": "    Set<String> adjacentEdges = graph.adjacentEdges(E12);\n",
        "112": "    try {\n",
        "113": "      adjacentEdges.add(E23);\n",
        "114": "      fail(ERROR_MODIFIABLE_SET);\n",
        "115": "    } catch (UnsupportedOperationException e) {\n",
        "116": "      addEdge(E23, N2, N3);\n",
        "117": "      assertThat(graph.adjacentEdges(E12)).containsExactlyElementsIn(adjacentEdges);\n",
        "118": "    }\n",
        "119": "  }\n",
        "120": "\n",
        "121": "  @Override\n",
        "122": "  @Test\n",
        "123": "  public void edgesConnecting_checkReturnedSetMutability() {\n",
        "124": "    addNode(N1);\n",
        "125": "    addNode(N2);\n",
        "126": "    Set<String> edgesConnecting = graph.edgesConnecting(N1, N2);\n",
        "127": "    try {\n",
        "128": "      edgesConnecting.add(E23);\n",
        "129": "      fail(ERROR_MODIFIABLE_SET);\n",
        "130": "    } catch (UnsupportedOperationException e) {\n",
        "131": "      addEdge(E12, N1, N2);\n",
        "132": "      assertThat(graph.edgesConnecting(N1, N2))\n",
        "133": "          .containsExactlyElementsIn(edgesConnecting);\n",
        "134": "    }\n",
        "135": "  }\n",
        "136": "\n",
        "137": "  @Override\n",
        "138": "  @Test\n",
        "139": "  public void inEdges_checkReturnedSetMutability() {\n",
        "140": "    addNode(N2);\n",
        "141": "    Set<String> inEdges = graph.inEdges(N2);\n",
        "142": "    try {\n",
        "143": "      inEdges.add(E12);\n",
        "144": "      fail(ERROR_MODIFIABLE_SET);\n",
        "145": "    } catch (UnsupportedOperationException e) {\n",
        "146": "      addEdge(E12, N1, N2);\n",
        "147": "      assertThat(graph.inEdges(N2)).containsExactlyElementsIn(inEdges);\n",
        "148": "    }\n",
        "149": "  }\n",
        "150": "\n",
        "151": "  @Override\n",
        "152": "  @Test\n",
        "153": "  public void outEdges_checkReturnedSetMutability() {\n",
        "154": "    addNode(N1);\n",
        "155": "    Set<String> outEdges = graph.outEdges(N1);\n",
        "156": "    try {\n",
        "157": "      outEdges.add(E12);\n",
        "158": "      fail(ERROR_MODIFIABLE_SET);\n",
        "159": "    } catch (UnsupportedOperationException e) {\n",
        "160": "      addEdge(E12, N1, N2);\n",
        "161": "      assertThat(graph.outEdges(N1)).containsExactlyElementsIn(outEdges);\n",
        "162": "    }\n",
        "163": "  }\n",
        "164": "\n",
        "165": "  @Override\n",
        "166": "  @Test\n",
        "167": "  public void predecessors_checkReturnedSetMutability() {\n",
        "168": "    addNode(N2);\n",
        "169": "    Set<Integer> predecessors = graph.predecessors(N2);\n",
        "170": "    try {\n",
        "171": "      predecessors.add(N1);\n",
        "172": "      fail(ERROR_MODIFIABLE_SET);\n",
        "173": "    } catch (UnsupportedOperationException e) {\n",
        "174": "      addEdge(E12, N1, N2);\n",
        "175": "      assertThat(graph.predecessors(N2)).containsExactlyElementsIn(predecessors);\n",
        "176": "    }\n",
        "177": "  }\n",
        "178": "\n",
        "179": "  @Override\n",
        "180": "  @Test\n",
        "181": "  public void successors_checkReturnedSetMutability() {\n",
        "182": "    addNode(N1);\n",
        "183": "    Set<Integer> successors = graph.successors(N1);\n",
        "184": "    try {\n",
        "185": "      successors.add(N2);\n",
        "186": "      fail(ERROR_MODIFIABLE_SET);\n",
        "187": "    } catch (UnsupportedOperationException e) {\n",
        "188": "      addEdge(E12, N1, N2);\n",
        "189": "      assertThat(graph.successors(N1)).containsExactlyElementsIn(successors);\n",
        "190": "    }\n",
        "191": "  }\n",
        "192": "\n",
        "193": "  // Element Mutation\n",
        "194": "\n",
        "195": "  @Test\n",
        "196": "  public void addEdge_selfLoop() {\n",
        "197": "    try {\n",
        "198": "      addEdge(E11, N1, N1);\n",
        "199": "      fail(ERROR_ADDED_SELF_LOOP);\n",
        "200": "    } catch (IllegalArgumentException e) {\n",
        "201": "      assertThat(e.getMessage()).contains(ERROR_SELF_LOOP);\n",
        "202": "    }\n",
        "203": "  }\n",
        "204": "\n",
        "205": "  /**\n",
        "206": "   * This test checks an implementation dependent feature. It tests that\n",
        "207": "   * the method {@code addEdge} will silently add the missing nodes to the graph,\n",
        "208": "   * then add the edge connecting them. We are not using the proxy methods here\n",
        "209": "   * as we want to test {@code addEdge} when the end-points are not elements\n",
        "210": "   * of the graph.\n",
        "211": "   */\n",
        "212": "  @Test\n",
        "213": "  public void addEdge_nodesNotInGraph() {\n",
        "214": "    graph.addNode(N1);\n",
        "215": "    assertTrue(graph.addEdge(E15, N1, N5));\n",
        "216": "    assertTrue(graph.addEdge(E41, N4, N1));\n",
        "217": "    assertTrue(graph.addEdge(E23, N2, N3));\n",
        "218": "    assertThat(graph.nodes()).containsExactly(N1, N5, N4, N2, N3).inOrder();\n",
        "219": "    assertThat(graph.edges()).containsExactly(E15, E41, E23).inOrder();\n",
        "220": "    assertThat(graph.edgesConnecting(N1, N5)).containsExactly(E15);\n",
        "221": "    assertThat(graph.edgesConnecting(N4, N1)).containsExactly(E41);\n",
        "222": "    assertThat(graph.edgesConnecting(N2, N3)).containsExactly(E23);\n",
        "223": "    assertThat(graph.edgesConnecting(N3, N2)).containsExactly(E23);\n",
        "224": "  }\n",
        "225": "}\n"
    },
    "removed": {}
}