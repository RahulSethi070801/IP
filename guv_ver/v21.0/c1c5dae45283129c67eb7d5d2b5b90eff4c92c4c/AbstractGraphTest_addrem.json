{
    "addition": {
        "56": "  MutableGraph<Integer> graph;\n",
        "82": "  public abstract MutableGraph<Integer> createGraph();\n",
        "117": "  boolean addEdge(Integer n1, Integer n2) {\n",
        "120": "    return graph.addEdge(n1, n2);\n",
        "130": "    new EqualsTester().addEqualityGroup(\n",
        "131": "        graph,\n",
        "132": "        Graphs.copyOf(graph),\n",
        "133": "        ImmutableGraph.copyOf(graph)).testEquals();\n",
        "137": "    // TODO(b/28087289): add test for allowsParallelEdges when supported\n",
        "203": "    addEdge(N1, N2);\n",
        "258": "    addEdge(N1, N2);\n",
        "327": "    addEdge(N1, N2);\n",
        "328": "    addEdge(N4, N1);\n",
        "331": "    assertThat(graph.adjacentNodes(N2)).isEmpty();\n",
        "332": "    assertThat(graph.adjacentNodes(N4)).isEmpty();\n",
        "344": "    addEdge(N1, N2);\n",
        "345": "    addEdge(N1, N3);\n",
        "346": "    addEdge(N1, N4);\n",
        "347": "    assertTrue(graph.removeEdge(N1, N3));\n",
        "348": "    assertThat(graph.adjacentNodes(N1)).containsExactly(N2, N4);\n"
    },
    "removed": {
        "33": "import java.util.Iterator;\n",
        "34": "\n",
        "58": "  Graph<Integer, String> graph;\n",
        "66": "  static final String E11 = \"1-1\";\n",
        "67": "  static final String E11_A = \"1-1a\";\n",
        "68": "  static final String E12 = \"1-2\";\n",
        "69": "  static final String E12_A = \"1-2a\";\n",
        "70": "  static final String E21 = \"2-1\";\n",
        "71": "  static final String E13 = \"1-3\";\n",
        "72": "  static final String E14 = \"1-4\";\n",
        "73": "  static final String E23 = \"2-3\";\n",
        "74": "  static final String E41 = \"4-1\";\n",
        "75": "  static final String E15 = \"1-5\";\n",
        "76": "  static final String EDGE_NOT_IN_GRAPH = \"edgeNotInGraph\";\n",
        "77": "\n",
        "86": "  static final String ERROR_PARALLEL_EDGE = \"connected by a different edge\";\n",
        "87": "  static final String ERROR_REUSE_EDGE = \"it can't be reused to connect\";\n",
        "92": "  static final String ERROR_EDGE_NOT_IN_GRAPH =\n",
        "93": "      \"Should not be allowed to pass an edge that is not an element of the graph.\";\n",
        "96": "  static final String ERROR_ADDED_EXISTING_EDGE =\n",
        "97": "      \"Reusing an existing edge to connect different nodes succeeded\";\n",
        "102": "  public abstract Graph<Integer, String> createGraph();\n",
        "137": "  boolean addEdge(String e, Integer n1, Integer n2) {\n",
        "140": "    return graph.addEdge(e, n1, n2);\n",
        "150": "    new EqualsTester().addEqualityGroup(graph, ImmutableGraph.copyOf(graph)).testEquals();\n",
        "154": "    assertThat(graphString).contains(\"allowsParallelEdges: \" + graph.allowsParallelEdges());\n",
        "160": "    String edgeString = graphString.substring(edgeStart);\n",
        "161": "\n",
        "162": "    for (String edge : graph.edges()) {\n",
        "163": "      // TODO(b/27817069): Consider verifying the edge's incident nodes in the string.\n",
        "164": "      assertThat(edgeString).contains(edge);\n",
        "165": "\n",
        "166": "      if (!(graph instanceof Hypergraph)) {\n",
        "167": "        Iterator<Integer> incidentNodesIterator = graph.incidentNodes(edge).iterator();\n",
        "168": "        Integer node1 = incidentNodesIterator.next();\n",
        "169": "        Integer node2 = incidentNodesIterator.hasNext() ? incidentNodesIterator.next() : node1;\n",
        "170": "        assertFalse(incidentNodesIterator.hasNext());\n",
        "171": "        assertThat(graph.edgesConnecting(node1, node2)).contains(edge);\n",
        "172": "        assertThat(graph.successors(node1)).contains(node2);\n",
        "173": "        assertThat(graph.adjacentNodes(node1)).contains(node2);\n",
        "174": "        assertThat(graph.outEdges(node1)).contains(edge);\n",
        "175": "        assertThat(graph.incidentEdges(node1)).contains(edge);\n",
        "176": "        assertThat(graph.predecessors(node2)).contains(node1);\n",
        "177": "        assertThat(graph.adjacentNodes(node2)).contains(node1);\n",
        "178": "        assertThat(graph.inEdges(node2)).contains(edge);\n",
        "179": "        assertThat(graph.incidentEdges(node2)).contains(edge);\n",
        "180": "      }\n",
        "181": "\n",
        "182": "      for (Integer incidentNode : graph.incidentNodes(edge)) {\n",
        "183": "        assertThat(graph.nodes()).contains(incidentNode);\n",
        "184": "        for (String adjacentEdge : graph.incidentEdges(incidentNode)) {\n",
        "185": "          assertTrue(edge.equals(adjacentEdge) || graph.adjacentEdges(edge).contains(adjacentEdge));\n",
        "186": "        }\n",
        "187": "      }\n",
        "188": "    }\n",
        "193": "      for (String incidentEdge : graph.incidentEdges(node)) {\n",
        "194": "        assertTrue(graph.inEdges(node).contains(incidentEdge)\n",
        "195": "            || graph.outEdges(node).contains(incidentEdge));\n",
        "196": "        assertThat(graph.edges()).contains(incidentEdge);\n",
        "197": "        assertThat(graph.incidentNodes(incidentEdge)).contains(node);\n",
        "198": "      }\n",
        "199": "\n",
        "200": "      for (String inEdge : graph.inEdges(node)) {\n",
        "201": "        assertThat(graph.incidentEdges(node)).contains(inEdge);\n",
        "202": "        if (!(graph instanceof Hypergraph)) {\n",
        "203": "          assertThat(graph.outEdges(Graphs.oppositeNode(graph, inEdge, node))).contains(inEdge);\n",
        "204": "        }\n",
        "205": "      }\n",
        "206": "\n",
        "207": "      for (String outEdge : graph.outEdges(node)) {\n",
        "208": "        assertThat(graph.incidentEdges(node)).contains(outEdge);\n",
        "209": "        if (!(graph instanceof Hypergraph)) {\n",
        "210": "          assertThat(graph.inEdges(Graphs.oppositeNode(graph, outEdge, node))).contains(outEdge);\n",
        "211": "        }\n",
        "212": "      }\n",
        "213": "\n",
        "217": "        assertTrue(!graph.edgesConnecting(node, adjacentNode).isEmpty()\n",
        "218": "            || !graph.edgesConnecting(adjacentNode, node).isEmpty());\n",
        "219": "        assertThat(graph.incidentEdges(node)).isNotEmpty();\n",
        "220": "        assertThat(graph.incidentEdges(node)).hasSize(graph.degree(node));\n",
        "225": "        assertThat(graph.edgesConnecting(predecessor, node)).isNotEmpty();\n",
        "226": "        assertThat(graph.inEdges(node)).isNotEmpty();\n",
        "227": "        assertThat(graph.inEdges(node)).hasSize(graph.inDegree(node));\n",
        "232": "        assertThat(graph.edgesConnecting(node, successor)).isNotEmpty();\n",
        "233": "        assertThat(graph.outEdges(node)).isNotEmpty();\n",
        "234": "        assertThat(graph.outEdges(node)).hasSize(graph.outDegree(node));\n",
        "246": "  /**\n",
        "247": "   * Verifies that the {@code Set} returned by {@code edges} has the expected mutability property\n",
        "248": "   * (see the {@code Graph} documentation for more information).\n",
        "249": "   */\n",
        "250": "  @Test\n",
        "251": "  public abstract void edges_checkReturnedSetMutability();\n",
        "252": "\n",
        "253": "  /**\n",
        "254": "   * Verifies that the {@code Set} returned by {@code incidentEdges} has the expected\n",
        "255": "   * mutability property (see the {@code Graph} documentation for more information).\n",
        "256": "   */\n",
        "257": "  @Test\n",
        "258": "  public abstract void incidentEdges_checkReturnedSetMutability();\n",
        "259": "\n",
        "260": "  /**\n",
        "261": "   * Verifies that the {@code Set} returned by {@code incidentNodes} has the expected\n",
        "262": "   * mutability property (see the {@code Graph} documentation for more information).\n",
        "263": "   */\n",
        "264": "  @Test\n",
        "265": "  public abstract void incidentNodes_checkReturnedSetMutability();\n",
        "266": "\n",
        "274": "  /**\n",
        "275": "   * Verifies that the {@code Set} returned by {@code adjacentEdges} has the expected\n",
        "276": "   * mutability property (see the {@code Graph} documentation for more information).\n",
        "277": "   */\n",
        "278": "  @Test\n",
        "279": "  public abstract void adjacentEdges_checkReturnedSetMutability();\n",
        "280": "\n",
        "281": "  /**\n",
        "282": "   * Verifies that the {@code Set} returned by {@code edgesConnecting} has the expected\n",
        "283": "   * mutability property (see the {@code Graph} documentation for more information).\n",
        "284": "   */\n",
        "285": "  @Test\n",
        "286": "  public abstract void edgesConnecting_checkReturnedSetMutability();\n",
        "287": "\n",
        "288": "  /**\n",
        "289": "   * Verifies that the {@code Set} returned by {@code inEdges} has the expected\n",
        "290": "   * mutability property (see the {@code Graph} documentation for more information).\n",
        "291": "   */\n",
        "292": "  @Test\n",
        "293": "  public abstract void inEdges_checkReturnedSetMutability();\n",
        "294": "\n",
        "295": "  /**\n",
        "296": "   * Verifies that the {@code Set} returned by {@code outEdges} has the expected\n",
        "297": "   * mutability property (see the {@code Graph} documentation for more information).\n",
        "298": "   */\n",
        "299": "  @Test\n",
        "300": "  public abstract void outEdges_checkReturnedSetMutability();\n",
        "301": "\n",
        "327": "  @Test\n",
        "328": "  public void edges_oneEdge() {\n",
        "329": "    addEdge(E12, N1, N2);\n",
        "330": "    assertThat(graph.edges()).containsExactly(E12);\n",
        "331": "  }\n",
        "332": "\n",
        "333": "  @Test\n",
        "334": "  public void edges_noEdges() {\n",
        "335": "    assertThat(graph.edges()).isEmpty();\n",
        "336": "    // Graph with no edges, given disconnected nodes\n",
        "337": "    addNode(N1);\n",
        "338": "    addNode(N2);\n",
        "339": "    assertThat(graph.edges()).isEmpty();\n",
        "340": "  }\n",
        "341": "\n",
        "342": "  @Test\n",
        "343": "  public void incidentEdges_oneEdge() {\n",
        "344": "    addEdge(E12, N1, N2);\n",
        "345": "    assertThat(graph.incidentEdges(N2)).containsExactly(E12);\n",
        "346": "    assertThat(graph.incidentEdges(N1)).containsExactly(E12);\n",
        "347": "  }\n",
        "348": "\n",
        "349": "  @Test\n",
        "350": "  public void incidentEdges_isolatedNode() {\n",
        "351": "    addNode(N1);\n",
        "352": "    assertThat(graph.incidentEdges(N1)).isEmpty();\n",
        "353": "  }\n",
        "354": "\n",
        "355": "  @Test\n",
        "356": "  public void incidentEdges_nodeNotInGraph() {\n",
        "357": "    try {\n",
        "358": "      graph.incidentEdges(NODE_NOT_IN_GRAPH);\n",
        "359": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "360": "    } catch (IllegalArgumentException e) {\n",
        "361": "      assertNodeNotInGraphErrorMessage(e);\n",
        "362": "    }\n",
        "363": "  }\n",
        "364": "\n",
        "365": "  @Test\n",
        "366": "  public void incidentNodes_oneEdge() {\n",
        "367": "    addEdge(E12, N1, N2);\n",
        "368": "    assertThat(graph.incidentNodes(E12)).containsExactly(N1, N2);\n",
        "369": "  }\n",
        "370": "\n",
        "371": "  @Test\n",
        "372": "  public void incidentNodes_edgeNotInGraph() {\n",
        "373": "    try {\n",
        "374": "      graph.incidentNodes(EDGE_NOT_IN_GRAPH);\n",
        "375": "      fail(ERROR_EDGE_NOT_IN_GRAPH);\n",
        "376": "    } catch (IllegalArgumentException e) {\n",
        "377": "      assertEdgeNotInGraphErrorMessage(e);\n",
        "378": "    }\n",
        "379": "  }\n",
        "380": "\n",
        "383": "    addEdge(E12, N1, N2);\n",
        "404": "  @Test\n",
        "405": "  public void adjacentEdges_addEdges() {\n",
        "406": "    addEdge(E12, N1, N2);\n",
        "407": "    addEdge(E13, N1, N3);\n",
        "408": "    addEdge(E23, N2, N3);\n",
        "409": "    assertThat(graph.adjacentEdges(E12)).containsExactly(E13, E23);\n",
        "410": "  }\n",
        "411": "\n",
        "412": "  @Test\n",
        "413": "  public void adjacentEdges_noAdjacentEdges() {\n",
        "414": "    addEdge(E12, N1, N2);\n",
        "415": "    assertThat(graph.adjacentEdges(E12)).isEmpty();\n",
        "416": "  }\n",
        "417": "\n",
        "418": "  @Test\n",
        "419": "  public void adjacentEdges_nodeNotInGraph() {\n",
        "420": "    try {\n",
        "421": "      graph.adjacentEdges(EDGE_NOT_IN_GRAPH);\n",
        "422": "      fail(ERROR_EDGE_NOT_IN_GRAPH);\n",
        "423": "    } catch (IllegalArgumentException e) {\n",
        "424": "      assertEdgeNotInGraphErrorMessage(e);\n",
        "425": "    }\n",
        "426": "  }\n",
        "427": "\n",
        "428": "  @Test\n",
        "429": "  public void edgesConnecting_disconnectedNodes() {\n",
        "430": "    addNode(N1);\n",
        "431": "    addNode(N2);\n",
        "432": "    assertThat(graph.edgesConnecting(N1, N2)).isEmpty();\n",
        "433": "  }\n",
        "434": "\n",
        "435": "  @Test\n",
        "436": "  public void edgesConnecting_nodesNotInGraph() {\n",
        "437": "    addNode(N1);\n",
        "438": "    addNode(N2);\n",
        "439": "    try {\n",
        "440": "      graph.edgesConnecting(N1, NODE_NOT_IN_GRAPH);\n",
        "441": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "442": "    } catch (IllegalArgumentException e) {\n",
        "443": "      assertNodeNotInGraphErrorMessage(e);\n",
        "444": "    }\n",
        "445": "    try {\n",
        "446": "      graph.edgesConnecting(NODE_NOT_IN_GRAPH, N2);\n",
        "447": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "448": "    } catch (IllegalArgumentException e) {\n",
        "449": "      assertNodeNotInGraphErrorMessage(e);\n",
        "450": "    }\n",
        "451": "    try {\n",
        "452": "      graph.edgesConnecting(NODE_NOT_IN_GRAPH, NODE_NOT_IN_GRAPH);\n",
        "453": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "454": "    } catch (IllegalArgumentException e) {\n",
        "455": "      assertNodeNotInGraphErrorMessage(e);\n",
        "456": "    }\n",
        "457": "  }\n",
        "458": "\n",
        "459": "  @Test\n",
        "460": "  public void inEdges_noInEdges() {\n",
        "461": "    addNode(N1);\n",
        "462": "    assertThat(graph.inEdges(N1)).isEmpty();\n",
        "463": "  }\n",
        "464": "\n",
        "465": "  @Test\n",
        "466": "  public void inEdges_nodeNotInGraph() {\n",
        "467": "    try {\n",
        "468": "      graph.inEdges(NODE_NOT_IN_GRAPH);\n",
        "469": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "470": "    } catch (IllegalArgumentException e) {\n",
        "471": "      assertNodeNotInGraphErrorMessage(e);\n",
        "472": "    }\n",
        "473": "  }\n",
        "474": "\n",
        "475": "  @Test\n",
        "476": "  public void outEdges_noOutEdges() {\n",
        "477": "    addNode(N1);\n",
        "478": "    assertThat(graph.outEdges(N1)).isEmpty();\n",
        "479": "  }\n",
        "480": "\n",
        "481": "  @Test\n",
        "482": "  public void outEdges_nodeNotInGraph() {\n",
        "483": "    try {\n",
        "484": "      graph.outEdges(NODE_NOT_IN_GRAPH);\n",
        "485": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "486": "    } catch (IllegalArgumentException e) {\n",
        "487": "      assertNodeNotInGraphErrorMessage(e);\n",
        "488": "    }\n",
        "489": "  }\n",
        "490": "\n",
        "525": "    addEdge(E12, N1, N2);\n",
        "594": "    addEdge(E12, N1, N2);\n",
        "595": "    addEdge(E41, N4, N1);\n",
        "598": "    assertThat(graph.edges()).doesNotContain(E12);\n",
        "599": "    assertThat(graph.edges()).doesNotContain(E41);\n",
        "611": "    addEdge(E12, N1, N2);\n",
        "612": "    addEdge(E13, N1, N3);\n",
        "613": "    addEdge(E14, N1, N4);\n",
        "614": "    assertThat(graph.edges()).containsExactly(E12, E13, E14);\n",
        "615": "    assertTrue(graph.removeEdge(E13));\n",
        "616": "    assertThat(graph.edges()).containsExactly(E12, E14);\n",
        "617": "  }\n",
        "618": "\n",
        "619": "  @Test\n",
        "620": "  public void removeEdge_invalidArgument() {\n",
        "621": "    ImmutableSet<String> edges = ImmutableSet.copyOf(graph.edges());\n",
        "622": "    assertFalse(graph.removeEdge(EDGE_NOT_IN_GRAPH));\n",
        "623": "    assertThat(graph.edges()).containsExactlyElementsIn(edges);\n"
    }
}