{
    "addition": {
        "22": "import com.google.common.graph.testing.TestNetworkBuilder;\n",
        "35": "  private static final GraphBuilder<?> GRAPH_BUILDER_A =\n",
        "36": "      GraphBuilder.directed().expectedNodeCount(10);\n",
        "37": "  private static final GraphBuilder<?> GRAPH_BUILDER_B =\n",
        "40": "  private static final ImmutableGraph<String> IMMUTABLE_GRAPH_A =\n",
        "41": "      TestGraphBuilder.<String>init(GraphBuilder.directed())\n",
        "44": "  private static final ImmutableGraph<String> IMMUTABLE_GRAPH_B =\n",
        "45": "      TestGraphBuilder.<String>init(GraphBuilder.directed())\n",
        "49": "  private static final NetworkBuilder<?, ?> NETWORK_BUILDER_A =\n",
        "50": "      NetworkBuilder.directed().allowsParallelEdges(true).expectedNodeCount(10);\n",
        "51": "  private static final NetworkBuilder<?, ?> NETWORK_BUILDER_B =\n",
        "52": "      NetworkBuilder.directed().allowsSelfLoops(false).expectedNodeCount(16);\n",
        "53": "\n",
        "54": "  private static final ImmutableNetwork<String, String> IMMUTABLE_NETWORK_A =\n",
        "55": "      TestNetworkBuilder.<String, String>init(NetworkBuilder.directed())\n",
        "56": "          .addNode(\"A\")\n",
        "57": "          .toImmutableNetwork();\n",
        "58": "  private static final ImmutableNetwork<String, String> IMMUTABLE_NETWORK_B =\n",
        "59": "      TestNetworkBuilder.<String, String>init(NetworkBuilder.directed())\n",
        "60": "          .addNode(\"B\")\n",
        "61": "          .toImmutableNetwork();\n",
        "62": "\n",
        "64": "    setDistinctValues(GraphBuilder.class, GRAPH_BUILDER_A, GRAPH_BUILDER_B);\n",
        "66": "    setDistinctValues(NetworkBuilder.class, NETWORK_BUILDER_A, NETWORK_BUILDER_B);\n",
        "67": "    setDistinctValues(Network.class, IMMUTABLE_NETWORK_A, IMMUTABLE_NETWORK_B);\n",
        "69": "    // TODO(b/28091268): the below comment is obsolete now that GraphConfig no longer exists;\n",
        "70": "    // what updating of this test do we need to do?\n",
        "72": "    // testEquals() in ConfigurableUndirectedNetworkTest and ConfigurableDirectedNetworkTest.\n",
        "74": "    // graphs by passing different instances of NetworkBuilder into their constructors. However,\n",
        "75": "    // the NetworkBuilder instances are *not* used to determine equality for mutable graphs.\n",
        "85": "      assertThat(e.getCause().getMessage()).contains(\n",
        "86": "          AbstractNetworkTest.ERROR_ELEMENT_NOT_IN_GRAPH);\n"
    },
    "removed": {
        "34": "  private static final GraphBuilder<?, ?> BUILDER_A =\n",
        "35": "      GraphBuilder.directed().allowsParallelEdges(true).expectedNodeCount(10);\n",
        "36": "  private static final GraphBuilder<?, ?> BUILDER_B =\n",
        "39": "  private static final ImmutableGraph<String, String> IMMUTABLE_GRAPH_A =\n",
        "40": "      TestGraphBuilder.<String, String>init(GraphBuilder.directed())\n",
        "43": "  private static final ImmutableGraph<String, String> IMMUTABLE_GRAPH_B =\n",
        "44": "      TestGraphBuilder.<String, String>init(GraphBuilder.directed())\n",
        "49": "    setDistinctValues(GraphBuilder.class, BUILDER_A, BUILDER_B);\n",
        "53": "    // testEquals() methods in ConfigurableUndirectedGraphTest and ConfigurableDirectedGraphTest.\n",
        "55": "    // graphs by passing different instances of GraphBuilder into their constructors. However,\n",
        "56": "    // the GraphBuilder instances are *not* used to determine equality for mutable graphs.\n",
        "66": "      assertThat(e.getCause().getMessage()).contains(AbstractGraphTest.ERROR_ELEMENT_NOT_IN_GRAPH);\n"
    }
}