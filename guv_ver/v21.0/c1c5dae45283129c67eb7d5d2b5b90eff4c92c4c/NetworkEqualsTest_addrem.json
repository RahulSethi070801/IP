{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import com.google.common.testing.EqualsTester;\n",
        "20": "\n",
        "21": "import org.junit.Test;\n",
        "22": "import org.junit.runner.RunWith;\n",
        "23": "import org.junit.runners.Parameterized;\n",
        "24": "import org.junit.runners.Parameterized.Parameters;\n",
        "25": "\n",
        "26": "import java.util.Arrays;\n",
        "27": "import java.util.Collection;\n",
        "28": "\n",
        "29": "@AndroidIncompatible\n",
        "30": "// TODO(cpovirk): Figure out Android JUnit 4 support. Does it work with Gingerbread? @RunWith?\n",
        "31": "@RunWith(Parameterized.class)\n",
        "32": "public final class NetworkEqualsTest {\n",
        "33": "  private static final Integer N1 = 1;\n",
        "34": "  private static final Integer N2 = 2;\n",
        "35": "  private static final Integer N3 = 3;\n",
        "36": "\n",
        "37": "  private static final String E11 = \"1-1\";\n",
        "38": "  private static final String E12 = \"1-2\";\n",
        "39": "  private static final String E12_A = \"1-2a\";\n",
        "40": "  private static final String E13 = \"1-3\";\n",
        "41": "\n",
        "42": "  enum GraphType {\n",
        "43": "    UNDIRECTED,\n",
        "44": "    DIRECTED,\n",
        "45": "    HYPER // not yet used because we don't yet have a Hypergraph implementation\n",
        "46": "  }\n",
        "47": "\n",
        "48": "  private final GraphType graphType;\n",
        "49": "  private final MutableNetwork<Integer, String> graph;\n",
        "50": "\n",
        "51": "  // add parameters: directed/undirected\n",
        "52": "  @Parameters\n",
        "53": "  public static Collection<Object[]> parameters() {\n",
        "54": "    return Arrays.asList(new Object[][] {{GraphType.UNDIRECTED}, {GraphType.DIRECTED}});\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  public NetworkEqualsTest(GraphType graphType) {\n",
        "58": "    this.graphType = graphType;\n",
        "59": "    this.graph = createGraph(graphType);\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  private static MutableNetwork<Integer, String> createGraph(GraphType graphType) {\n",
        "63": "    switch (graphType) {\n",
        "64": "      case UNDIRECTED:\n",
        "65": "        return NetworkBuilder.undirected().build();\n",
        "66": "      case DIRECTED:\n",
        "67": "        return NetworkBuilder.directed().build();\n",
        "68": "      default:\n",
        "69": "        throw new IllegalStateException(\"Unexpected graph type: \" + graphType);\n",
        "70": "    }\n",
        "71": "  }\n",
        "72": "\n",
        "73": "  private static GraphType oppositeType(GraphType graphType) {\n",
        "74": "    switch (graphType) {\n",
        "75": "      case UNDIRECTED:\n",
        "76": "        return GraphType.DIRECTED;\n",
        "77": "      case DIRECTED:\n",
        "78": "        return GraphType.UNDIRECTED;\n",
        "79": "      default:\n",
        "80": "        throw new IllegalStateException(\"Unexpected graph type: \" + graphType);\n",
        "81": "    }\n",
        "82": "  }\n",
        "83": "\n",
        "84": "  @Test\n",
        "85": "  public void equals_nodeSetsDiffer() {\n",
        "86": "    graph.addNode(N1);\n",
        "87": "\n",
        "88": "    MutableNetwork<Integer, String> g2 = createGraph(graphType);\n",
        "89": "    g2.addNode(N2);\n",
        "90": "\n",
        "91": "    new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();\n",
        "92": "  }\n",
        "93": "\n",
        "94": "  // Node sets are the same, but edge sets differ.\n",
        "95": "  @Test\n",
        "96": "  public void equals_edgeSetsDiffer() {\n",
        "97": "    graph.addEdge(E12, N1, N2);\n",
        "98": "\n",
        "99": "    MutableNetwork<Integer, String> g2 = createGraph(graphType);\n",
        "100": "    g2.addEdge(E13, N1, N2);\n",
        "101": "\n",
        "102": "    new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();\n",
        "103": "  }\n",
        "104": "\n",
        "105": "  // Node/edge sets are the same, but node/edge connections differ due to graph type.\n",
        "106": "  @Test\n",
        "107": "  public void equals_directedVsUndirected() {\n",
        "108": "    graph.addEdge(E12, N1, N2);\n",
        "109": "\n",
        "110": "    MutableNetwork<Integer, String> g2 = createGraph(oppositeType(graphType));\n",
        "111": "    g2.addEdge(E12, N1, N2);\n",
        "112": "\n",
        "113": "    new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();\n",
        "114": "  }\n",
        "115": "\n",
        "116": "  // Node/edge sets and node/edge connections are the same, but types differ.\n",
        "117": "  // (In this case the graphs are considered equal; the type differences are irrelevant.)\n",
        "118": "  @Test\n",
        "119": "  public void equals_selfLoop_directedVsUndirected() {\n",
        "120": "    graph.addEdge(E11, N1, N1);\n",
        "121": "\n",
        "122": "    MutableNetwork<Integer, String> g2 = createGraph(oppositeType(graphType));\n",
        "123": "    g2.addEdge(E11, N1, N1);\n",
        "124": "\n",
        "125": "    new EqualsTester().addEqualityGroup(graph, g2).testEquals();\n",
        "126": "  }\n",
        "127": "\n",
        "128": "  // Node/edge sets are the same, but node/edge connections differ.\n",
        "129": "  @Test\n",
        "130": "  public void equals_connectionsDiffer() {\n",
        "131": "    graph.addEdge(E12, N1, N2);\n",
        "132": "    graph.addEdge(E13, N1, N3);\n",
        "133": "\n",
        "134": "    MutableNetwork<Integer, String> g2 = createGraph(graphType);\n",
        "135": "    // connect E13 to N1 and N2, and E12 to N1 and N3 => not equal\n",
        "136": "    g2.addEdge(E13, N1, N2);\n",
        "137": "    g2.addEdge(E12, N1, N3);\n",
        "138": "\n",
        "139": "    new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();\n",
        "140": "  }\n",
        "141": "\n",
        "142": "  // Node/edge sets and node/edge connections are the same, but graph properties differ.\n",
        "143": "  // (In this case the graphs are considered equal; the property differences are irrelevant.)\n",
        "144": "  @Test\n",
        "145": "  public void equals_propertiesDiffer() {\n",
        "146": "    graph.addEdge(E12, N1, N2);\n",
        "147": "\n",
        "148": "    MutableNetwork<Integer, String> g2 = NetworkBuilder.from(graph)\n",
        "149": "        .allowsParallelEdges(!graph.allowsParallelEdges())\n",
        "150": "        .allowsSelfLoops(!graph.allowsSelfLoops())\n",
        "151": "        .build();\n",
        "152": "    g2.addEdge(E12, N1, N2);\n",
        "153": "\n",
        "154": "    new EqualsTester().addEqualityGroup(graph, g2).testEquals();\n",
        "155": "  }\n",
        "156": "\n",
        "157": "  // Node/edge sets and node/edge connections are the same, but edge order differs.\n",
        "158": "  // (In this case the graphs are considered equal; the edge add orderings are irrelevant.)\n",
        "159": "  @Test\n",
        "160": "  public void equals_edgeAddOrdersDiffer() {\n",
        "161": "    NetworkBuilder<Integer, String> builder = NetworkBuilder.from(graph).allowsParallelEdges(true);\n",
        "162": "    MutableNetwork<Integer, String> g1 = builder.build();\n",
        "163": "    MutableNetwork<Integer, String> g2 = builder.build();\n",
        "164": "\n",
        "165": "    // for ug1, add e12 first, then e12_a\n",
        "166": "    g1.addEdge(E12, N1, N2);\n",
        "167": "    g1.addEdge(E12_A, N1, N2);\n",
        "168": "\n",
        "169": "    // for ug2, add e12_a first, then e12\n",
        "170": "    g2.addEdge(E12_A, N1, N2);\n",
        "171": "    g2.addEdge(E12, N1, N2);\n",
        "172": "\n",
        "173": "    new EqualsTester().addEqualityGroup(g1, g2).testEquals();\n",
        "174": "  }\n",
        "175": "\n",
        "176": "  @Test\n",
        "177": "  public void equals_edgeDirectionsDiffer() {\n",
        "178": "    graph.addEdge(E12, N1, N2);\n",
        "179": "\n",
        "180": "    MutableNetwork<Integer, String> g2 = createGraph(graphType);\n",
        "181": "    g2.addEdge(E12, N2, N1);\n",
        "182": "\n",
        "183": "    switch (graphType) {\n",
        "184": "      case UNDIRECTED:\n",
        "185": "        new EqualsTester().addEqualityGroup(graph, g2).testEquals();\n",
        "186": "        break;\n",
        "187": "      case DIRECTED:\n",
        "188": "        new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();\n",
        "189": "        break;\n",
        "190": "      default:\n",
        "191": "        throw new IllegalStateException(\"Unexpected graph type: \" + graphType);\n",
        "192": "    }\n",
        "193": "  }\n",
        "194": "}\n"
    },
    "removed": {}
}