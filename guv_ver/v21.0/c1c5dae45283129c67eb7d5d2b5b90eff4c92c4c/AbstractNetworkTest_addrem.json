{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "import static org.junit.Assert.assertEquals;\n",
        "21": "import static org.junit.Assert.assertFalse;\n",
        "22": "import static org.junit.Assert.assertTrue;\n",
        "23": "import static org.junit.Assert.fail;\n",
        "24": "\n",
        "25": "import com.google.common.collect.ImmutableSet;\n",
        "26": "import com.google.common.testing.EqualsTester;\n",
        "27": "import com.google.errorprone.annotations.CanIgnoreReturnValue;\n",
        "28": "\n",
        "29": "import org.junit.After;\n",
        "30": "import org.junit.Before;\n",
        "31": "import org.junit.Test;\n",
        "32": "\n",
        "33": "import java.util.Iterator;\n",
        "34": "\n",
        "35": "/**\n",
        "36": " * Abstract base class for testing implementations of {@link Network} interface. Network\n",
        "37": " * instances created for testing should have Integer node and String edge objects.\n",
        "38": " *\n",
        "39": " * <p>Tests assume the following about the graph implementation:\n",
        "40": " * <ul>\n",
        "41": " * <li>Parallel edges are not allowed.\n",
        "42": " * </ul>\n",
        "43": " *\n",
        "44": " * <p>Test cases that should be handled similarly in any graph implementation are\n",
        "45": " * included in this class. For example, testing that {@code nodes()} method returns\n",
        "46": " * the set of the nodes in the graph. The following test cases are left for the subclasses\n",
        "47": " * to handle:\n",
        "48": " * <ul>\n",
        "49": " * <li>Test cases related to whether the graph is directed, undirected, mutable,\n",
        "50": " *     or immutable.\n",
        "51": " * <li>Test cases related to the specific implementation of the {@link Network} interface.\n",
        "52": " * </ul>\n",
        "53": " *\n",
        "54": " * TODO(user): Make this class generic (using <N, E>) for all node and edge types.\n",
        "55": " * TODO(user): Differentiate between directed and undirected edge strings.\n",
        "56": " */\n",
        "57": "public abstract class AbstractNetworkTest {\n",
        "58": "  MutableNetwork<Integer, String> graph;\n",
        "59": "  static final Integer N1 = 1;\n",
        "60": "  static final Integer N2 = 2;\n",
        "61": "  static final Integer N3 = 3;\n",
        "62": "  static final Integer N4 = 4;\n",
        "63": "  static final Integer N5 = 5;\n",
        "64": "  static final Integer NODE_NOT_IN_GRAPH = 1000;\n",
        "65": "\n",
        "66": "  static final String E11 = \"1-1\";\n",
        "67": "  static final String E11_A = \"1-1a\";\n",
        "68": "  static final String E12 = \"1-2\";\n",
        "69": "  static final String E12_A = \"1-2a\";\n",
        "70": "  static final String E21 = \"2-1\";\n",
        "71": "  static final String E13 = \"1-3\";\n",
        "72": "  static final String E14 = \"1-4\";\n",
        "73": "  static final String E23 = \"2-3\";\n",
        "74": "  static final String E41 = \"4-1\";\n",
        "75": "  static final String E15 = \"1-5\";\n",
        "76": "  static final String EDGE_NOT_IN_GRAPH = \"edgeNotInGraph\";\n",
        "77": "\n",
        "78": "  // TODO(user): Consider separating Strings that we've defined here to capture\n",
        "79": "  // identifiable substrings of expected error messages, from Strings that we've defined\n",
        "80": "  // here to provide error messages.\n",
        "81": "  // TODO(user): Some Strings used in the subclasses can be added as static Strings\n",
        "82": "  // here too.\n",
        "83": "  static final String ERROR_ELEMENT_NOT_IN_GRAPH = \"not an element of this graph\";\n",
        "84": "  static final String NODE_STRING = \"Node\";\n",
        "85": "  static final String EDGE_STRING = \"Edge\";\n",
        "86": "  static final String ERROR_PARALLEL_EDGE = \"connected by a different edge\";\n",
        "87": "  static final String ERROR_REUSE_EDGE = \"it can't be reused to connect\";\n",
        "88": "  static final String ERROR_MODIFIABLE_SET = \"Set returned is unexpectedly modifiable\";\n",
        "89": "  static final String ERROR_SELF_LOOP = \"self-loops are not allowed\";\n",
        "90": "  static final String ERROR_NODE_NOT_IN_GRAPH =\n",
        "91": "      \"Should not be allowed to pass a node that is not an element of the graph.\";\n",
        "92": "  static final String ERROR_EDGE_NOT_IN_GRAPH =\n",
        "93": "      \"Should not be allowed to pass an edge that is not an element of the graph.\";\n",
        "94": "  static final String ERROR_ADDED_SELF_LOOP = \"Should not be allowed to add a self-loop edge.\";\n",
        "95": "  static final String ERROR_ADDED_PARALLEL_EDGE = \"Should not be allowed to add a parallel edge.\";\n",
        "96": "  static final String ERROR_ADDED_EXISTING_EDGE =\n",
        "97": "      \"Reusing an existing edge to connect different nodes succeeded\";\n",
        "98": "\n",
        "99": "  /**\n",
        "100": "   * Creates and returns an instance of the graph to be tested.\n",
        "101": "   */\n",
        "102": "  public abstract MutableNetwork<Integer, String> createGraph();\n",
        "103": "\n",
        "104": "  /**\n",
        "105": "   * A proxy method that adds the node {@code n} to the graph being tested.\n",
        "106": "   * In case of Immutable graph implementations, this method should add {@code n} to the graph\n",
        "107": "   * builder and build a new graph with the current builder state.\n",
        "108": "   *\n",
        "109": "   * @return {@code true} iff the graph was modified as a result of this call\n",
        "110": "   * TODO(user): Consider changing access modifier to be protected.\n",
        "111": "   */\n",
        "112": "  @CanIgnoreReturnValue\n",
        "113": "  boolean addNode(Integer n) {\n",
        "114": "    return graph.addNode(n);\n",
        "115": "  }\n",
        "116": "\n",
        "117": "  /**\n",
        "118": "   * A proxy method that adds the edge {@code e} to the graph\n",
        "119": "   * being tested. In case of Immutable graph implementations, this method\n",
        "120": "   * should add {@code e} to the graph builder and build a new graph with the current\n",
        "121": "   * builder state.\n",
        "122": "   *\n",
        "123": "   * <p>This method should be used in tests of specific implementations if you want to\n",
        "124": "   * ensure uniform behavior (including side effects) with how edges are added elsewhere\n",
        "125": "   * in the tests.  For example, the existing implementations of this method explicitly\n",
        "126": "   * add the supplied nodes to the graph, and then call {@code graph.addEdge()} to connect\n",
        "127": "   * the edge to the nodes; this is not part of the contract of {@code graph.addEdge()}\n",
        "128": "   * and is done for convenience.  In cases where you want to avoid such side effects\n",
        "129": "   * (e.g., if you're testing what happens in your implementation if you add an edge\n",
        "130": "   * whose end-points don't already exist in the graph), you should <b>not</b> use this\n",
        "131": "   * method.\n",
        "132": "   *\n",
        "133": "   * @return {@code true} iff the graph was modified as a result of this call\n",
        "134": "   * TODO(user): Consider changing access modifier to be protected.\n",
        "135": "   */\n",
        "136": "  @CanIgnoreReturnValue\n",
        "137": "  boolean addEdge(String e, Integer n1, Integer n2) {\n",
        "138": "    graph.addNode(n1);\n",
        "139": "    graph.addNode(n2);\n",
        "140": "    return graph.addEdge(e, n1, n2);\n",
        "141": "  }\n",
        "142": "\n",
        "143": "  @Before\n",
        "144": "  public void init() {\n",
        "145": "    graph = createGraph();\n",
        "146": "  }\n",
        "147": "\n",
        "148": "  @After\n",
        "149": "  public void validateGraphState() {\n",
        "150": "    new EqualsTester().addEqualityGroup(\n",
        "151": "        graph,\n",
        "152": "        Graphs.copyOf(graph),\n",
        "153": "        ImmutableNetwork.copyOf(graph)).testEquals();\n",
        "154": "\n",
        "155": "    String graphString = graph.toString();\n",
        "156": "    assertThat(graphString).contains(\"isDirected: \" + graph.isDirected());\n",
        "157": "    assertThat(graphString).contains(\"allowsParallelEdges: \" + graph.allowsParallelEdges());\n",
        "158": "    assertThat(graphString).contains(\"allowsSelfLoops: \" + graph.allowsSelfLoops());\n",
        "159": "\n",
        "160": "    int nodeStart = graphString.indexOf(\"nodes:\");\n",
        "161": "    int edgeStart = graphString.indexOf(\"edges:\");\n",
        "162": "    String nodeString = graphString.substring(nodeStart, edgeStart);\n",
        "163": "    String edgeString = graphString.substring(edgeStart);\n",
        "164": "\n",
        "165": "    for (String edge : graph.edges()) {\n",
        "166": "      // TODO(b/27817069): Consider verifying the edge's incident nodes in the string.\n",
        "167": "      assertThat(edgeString).contains(edge);\n",
        "168": "\n",
        "169": "      if (!(graph instanceof Hypergraph)) {\n",
        "170": "        Iterator<Integer> incidentNodesIterator = graph.incidentNodes(edge).iterator();\n",
        "171": "        Integer node1 = incidentNodesIterator.next();\n",
        "172": "        Integer node2 = incidentNodesIterator.hasNext() ? incidentNodesIterator.next() : node1;\n",
        "173": "        assertFalse(incidentNodesIterator.hasNext());\n",
        "174": "        assertThat(graph.edgesConnecting(node1, node2)).contains(edge);\n",
        "175": "        assertThat(graph.successors(node1)).contains(node2);\n",
        "176": "        assertThat(graph.adjacentNodes(node1)).contains(node2);\n",
        "177": "        assertThat(graph.outEdges(node1)).contains(edge);\n",
        "178": "        assertThat(graph.incidentEdges(node1)).contains(edge);\n",
        "179": "        assertThat(graph.predecessors(node2)).contains(node1);\n",
        "180": "        assertThat(graph.adjacentNodes(node2)).contains(node1);\n",
        "181": "        assertThat(graph.inEdges(node2)).contains(edge);\n",
        "182": "        assertThat(graph.incidentEdges(node2)).contains(edge);\n",
        "183": "      }\n",
        "184": "\n",
        "185": "      for (Integer incidentNode : graph.incidentNodes(edge)) {\n",
        "186": "        assertThat(graph.nodes()).contains(incidentNode);\n",
        "187": "        for (String adjacentEdge : graph.incidentEdges(incidentNode)) {\n",
        "188": "          assertTrue(edge.equals(adjacentEdge) || graph.adjacentEdges(edge).contains(adjacentEdge));\n",
        "189": "        }\n",
        "190": "      }\n",
        "191": "    }\n",
        "192": "\n",
        "193": "    for (Integer node : graph.nodes()) {\n",
        "194": "      assertThat(nodeString).contains(node.toString());\n",
        "195": "\n",
        "196": "      for (String incidentEdge : graph.incidentEdges(node)) {\n",
        "197": "        assertTrue(graph.inEdges(node).contains(incidentEdge)\n",
        "198": "            || graph.outEdges(node).contains(incidentEdge));\n",
        "199": "        assertThat(graph.edges()).contains(incidentEdge);\n",
        "200": "        assertThat(graph.incidentNodes(incidentEdge)).contains(node);\n",
        "201": "      }\n",
        "202": "\n",
        "203": "      for (String inEdge : graph.inEdges(node)) {\n",
        "204": "        assertThat(graph.incidentEdges(node)).contains(inEdge);\n",
        "205": "        if (!(graph instanceof Hypergraph)) {\n",
        "206": "          assertThat(graph.outEdges(Graphs.oppositeNode(graph, inEdge, node))).contains(inEdge);\n",
        "207": "        }\n",
        "208": "      }\n",
        "209": "\n",
        "210": "      for (String outEdge : graph.outEdges(node)) {\n",
        "211": "        assertThat(graph.incidentEdges(node)).contains(outEdge);\n",
        "212": "        if (!(graph instanceof Hypergraph)) {\n",
        "213": "          assertThat(graph.inEdges(Graphs.oppositeNode(graph, outEdge, node))).contains(outEdge);\n",
        "214": "        }\n",
        "215": "      }\n",
        "216": "\n",
        "217": "      for (Integer adjacentNode : graph.adjacentNodes(node)) {\n",
        "218": "        assertTrue(graph.predecessors(node).contains(adjacentNode)\n",
        "219": "            || graph.successors(node).contains(adjacentNode));\n",
        "220": "        assertTrue(!graph.edgesConnecting(node, adjacentNode).isEmpty()\n",
        "221": "            || !graph.edgesConnecting(adjacentNode, node).isEmpty());\n",
        "222": "        assertThat(graph.incidentEdges(node)).isNotEmpty();\n",
        "223": "        assertThat(graph.incidentEdges(node)).hasSize(graph.degree(node));\n",
        "224": "      }\n",
        "225": "\n",
        "226": "      for (Integer predecessor : graph.predecessors(node)) {\n",
        "227": "        assertThat(graph.successors(predecessor)).contains(node);\n",
        "228": "        assertThat(graph.edgesConnecting(predecessor, node)).isNotEmpty();\n",
        "229": "        assertThat(graph.inEdges(node)).isNotEmpty();\n",
        "230": "        assertThat(graph.inEdges(node)).hasSize(graph.inDegree(node));\n",
        "231": "      }\n",
        "232": "\n",
        "233": "      for (Integer successor : graph.successors(node)) {\n",
        "234": "        assertThat(graph.predecessors(successor)).contains(node);\n",
        "235": "        assertThat(graph.edgesConnecting(node, successor)).isNotEmpty();\n",
        "236": "        assertThat(graph.outEdges(node)).isNotEmpty();\n",
        "237": "        assertThat(graph.outEdges(node)).hasSize(graph.outDegree(node));\n",
        "238": "      }\n",
        "239": "    }\n",
        "240": "  }\n",
        "241": "\n",
        "242": "  /**\n",
        "243": "   * Verifies that the {@code Set} returned by {@code nodes} has the expected mutability property\n",
        "244": "   * (see the {@code Network} documentation for more information).\n",
        "245": "   */\n",
        "246": "  @Test\n",
        "247": "  public abstract void nodes_checkReturnedSetMutability();\n",
        "248": "\n",
        "249": "  /**\n",
        "250": "   * Verifies that the {@code Set} returned by {@code edges} has the expected mutability property\n",
        "251": "   * (see the {@code Network} documentation for more information).\n",
        "252": "   */\n",
        "253": "  @Test\n",
        "254": "  public abstract void edges_checkReturnedSetMutability();\n",
        "255": "\n",
        "256": "  /**\n",
        "257": "   * Verifies that the {@code Set} returned by {@code incidentEdges} has the expected\n",
        "258": "   * mutability property (see the {@code Network} documentation for more information).\n",
        "259": "   */\n",
        "260": "  @Test\n",
        "261": "  public abstract void incidentEdges_checkReturnedSetMutability();\n",
        "262": "\n",
        "263": "  /**\n",
        "264": "   * Verifies that the {@code Set} returned by {@code incidentNodes} has the expected\n",
        "265": "   * mutability property (see the {@code Network} documentation for more information).\n",
        "266": "   */\n",
        "267": "  @Test\n",
        "268": "  public abstract void incidentNodes_checkReturnedSetMutability();\n",
        "269": "\n",
        "270": "  /**\n",
        "271": "   * Verifies that the {@code Set} returned by {@code adjacentNodes} has the expected\n",
        "272": "   * mutability property (see the {@code Network} documentation for more information).\n",
        "273": "   */\n",
        "274": "  @Test\n",
        "275": "  public abstract void adjacentNodes_checkReturnedSetMutability();\n",
        "276": "\n",
        "277": "  /**\n",
        "278": "   * Verifies that the {@code Set} returned by {@code adjacentEdges} has the expected\n",
        "279": "   * mutability property (see the {@code Network} documentation for more information).\n",
        "280": "   */\n",
        "281": "  @Test\n",
        "282": "  public abstract void adjacentEdges_checkReturnedSetMutability();\n",
        "283": "\n",
        "284": "  /**\n",
        "285": "   * Verifies that the {@code Set} returned by {@code edgesConnecting} has the expected\n",
        "286": "   * mutability property (see the {@code Network} documentation for more information).\n",
        "287": "   */\n",
        "288": "  @Test\n",
        "289": "  public abstract void edgesConnecting_checkReturnedSetMutability();\n",
        "290": "\n",
        "291": "  /**\n",
        "292": "   * Verifies that the {@code Set} returned by {@code inEdges} has the expected\n",
        "293": "   * mutability property (see the {@code Network} documentation for more information).\n",
        "294": "   */\n",
        "295": "  @Test\n",
        "296": "  public abstract void inEdges_checkReturnedSetMutability();\n",
        "297": "\n",
        "298": "  /**\n",
        "299": "   * Verifies that the {@code Set} returned by {@code outEdges} has the expected\n",
        "300": "   * mutability property (see the {@code Network} documentation for more information).\n",
        "301": "   */\n",
        "302": "  @Test\n",
        "303": "  public abstract void outEdges_checkReturnedSetMutability();\n",
        "304": "\n",
        "305": "  /**\n",
        "306": "   * Verifies that the {@code Set} returned by {@code predecessors} has the expected\n",
        "307": "   * mutability property (see the {@code Network} documentation for more information).\n",
        "308": "   */\n",
        "309": "  @Test\n",
        "310": "  public abstract void predecessors_checkReturnedSetMutability();\n",
        "311": "\n",
        "312": "  /**\n",
        "313": "   * Verifies that the {@code Set} returned by {@code successors} has the expected\n",
        "314": "   * mutability property (see the {@code Network} documentation for more information).\n",
        "315": "   */\n",
        "316": "  @Test\n",
        "317": "  public abstract void successors_checkReturnedSetMutability();\n",
        "318": "\n",
        "319": "  @Test\n",
        "320": "  public void nodes_oneNode() {\n",
        "321": "    addNode(N1);\n",
        "322": "    assertThat(graph.nodes()).containsExactly(N1);\n",
        "323": "  }\n",
        "324": "\n",
        "325": "  @Test\n",
        "326": "  public void nodes_noNodes() {\n",
        "327": "    assertThat(graph.nodes()).isEmpty();\n",
        "328": "  }\n",
        "329": "\n",
        "330": "  @Test\n",
        "331": "  public void edges_oneEdge() {\n",
        "332": "    addEdge(E12, N1, N2);\n",
        "333": "    assertThat(graph.edges()).containsExactly(E12);\n",
        "334": "  }\n",
        "335": "\n",
        "336": "  @Test\n",
        "337": "  public void edges_noEdges() {\n",
        "338": "    assertThat(graph.edges()).isEmpty();\n",
        "339": "    // Network with no edges, given disconnected nodes\n",
        "340": "    addNode(N1);\n",
        "341": "    addNode(N2);\n",
        "342": "    assertThat(graph.edges()).isEmpty();\n",
        "343": "  }\n",
        "344": "\n",
        "345": "  @Test\n",
        "346": "  public void incidentEdges_oneEdge() {\n",
        "347": "    addEdge(E12, N1, N2);\n",
        "348": "    assertThat(graph.incidentEdges(N2)).containsExactly(E12);\n",
        "349": "    assertThat(graph.incidentEdges(N1)).containsExactly(E12);\n",
        "350": "  }\n",
        "351": "\n",
        "352": "  @Test\n",
        "353": "  public void incidentEdges_isolatedNode() {\n",
        "354": "    addNode(N1);\n",
        "355": "    assertThat(graph.incidentEdges(N1)).isEmpty();\n",
        "356": "  }\n",
        "357": "\n",
        "358": "  @Test\n",
        "359": "  public void incidentEdges_nodeNotInGraph() {\n",
        "360": "    try {\n",
        "361": "      graph.incidentEdges(NODE_NOT_IN_GRAPH);\n",
        "362": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "363": "    } catch (IllegalArgumentException e) {\n",
        "364": "      assertNodeNotInGraphErrorMessage(e);\n",
        "365": "    }\n",
        "366": "  }\n",
        "367": "\n",
        "368": "  @Test\n",
        "369": "  public void incidentNodes_oneEdge() {\n",
        "370": "    addEdge(E12, N1, N2);\n",
        "371": "    assertThat(graph.incidentNodes(E12)).containsExactly(N1, N2);\n",
        "372": "  }\n",
        "373": "\n",
        "374": "  @Test\n",
        "375": "  public void incidentNodes_edgeNotInGraph() {\n",
        "376": "    try {\n",
        "377": "      graph.incidentNodes(EDGE_NOT_IN_GRAPH);\n",
        "378": "      fail(ERROR_EDGE_NOT_IN_GRAPH);\n",
        "379": "    } catch (IllegalArgumentException e) {\n",
        "380": "      assertEdgeNotInGraphErrorMessage(e);\n",
        "381": "    }\n",
        "382": "  }\n",
        "383": "\n",
        "384": "  @Test\n",
        "385": "  public void adjacentNodes_oneEdge() {\n",
        "386": "    addEdge(E12, N1, N2);\n",
        "387": "    assertThat(graph.adjacentNodes(N1)).containsExactly(N2);\n",
        "388": "    assertThat(graph.adjacentNodes(N2)).containsExactly(N1);\n",
        "389": "  }\n",
        "390": "\n",
        "391": "  @Test\n",
        "392": "  public void adjacentNodes_noAdjacentNodes() {\n",
        "393": "    addNode(N1);\n",
        "394": "    assertThat(graph.adjacentNodes(N1)).isEmpty();\n",
        "395": "  }\n",
        "396": "\n",
        "397": "  @Test\n",
        "398": "  public void adjacentNodes_nodeNotInGraph() {\n",
        "399": "    try {\n",
        "400": "      graph.adjacentNodes(NODE_NOT_IN_GRAPH);\n",
        "401": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "402": "    } catch (IllegalArgumentException e) {\n",
        "403": "      assertNodeNotInGraphErrorMessage(e);\n",
        "404": "    }\n",
        "405": "  }\n",
        "406": "\n",
        "407": "  @Test\n",
        "408": "  public void adjacentEdges_addEdges() {\n",
        "409": "    addEdge(E12, N1, N2);\n",
        "410": "    addEdge(E13, N1, N3);\n",
        "411": "    addEdge(E23, N2, N3);\n",
        "412": "    assertThat(graph.adjacentEdges(E12)).containsExactly(E13, E23);\n",
        "413": "  }\n",
        "414": "\n",
        "415": "  @Test\n",
        "416": "  public void adjacentEdges_noAdjacentEdges() {\n",
        "417": "    addEdge(E12, N1, N2);\n",
        "418": "    assertThat(graph.adjacentEdges(E12)).isEmpty();\n",
        "419": "  }\n",
        "420": "\n",
        "421": "  @Test\n",
        "422": "  public void adjacentEdges_nodeNotInGraph() {\n",
        "423": "    try {\n",
        "424": "      graph.adjacentEdges(EDGE_NOT_IN_GRAPH);\n",
        "425": "      fail(ERROR_EDGE_NOT_IN_GRAPH);\n",
        "426": "    } catch (IllegalArgumentException e) {\n",
        "427": "      assertEdgeNotInGraphErrorMessage(e);\n",
        "428": "    }\n",
        "429": "  }\n",
        "430": "\n",
        "431": "  @Test\n",
        "432": "  public void edgesConnecting_disconnectedNodes() {\n",
        "433": "    addNode(N1);\n",
        "434": "    addNode(N2);\n",
        "435": "    assertThat(graph.edgesConnecting(N1, N2)).isEmpty();\n",
        "436": "  }\n",
        "437": "\n",
        "438": "  @Test\n",
        "439": "  public void edgesConnecting_nodesNotInGraph() {\n",
        "440": "    addNode(N1);\n",
        "441": "    addNode(N2);\n",
        "442": "    try {\n",
        "443": "      graph.edgesConnecting(N1, NODE_NOT_IN_GRAPH);\n",
        "444": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "445": "    } catch (IllegalArgumentException e) {\n",
        "446": "      assertNodeNotInGraphErrorMessage(e);\n",
        "447": "    }\n",
        "448": "    try {\n",
        "449": "      graph.edgesConnecting(NODE_NOT_IN_GRAPH, N2);\n",
        "450": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "451": "    } catch (IllegalArgumentException e) {\n",
        "452": "      assertNodeNotInGraphErrorMessage(e);\n",
        "453": "    }\n",
        "454": "    try {\n",
        "455": "      graph.edgesConnecting(NODE_NOT_IN_GRAPH, NODE_NOT_IN_GRAPH);\n",
        "456": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "457": "    } catch (IllegalArgumentException e) {\n",
        "458": "      assertNodeNotInGraphErrorMessage(e);\n",
        "459": "    }\n",
        "460": "  }\n",
        "461": "\n",
        "462": "  @Test\n",
        "463": "  public void inEdges_noInEdges() {\n",
        "464": "    addNode(N1);\n",
        "465": "    assertThat(graph.inEdges(N1)).isEmpty();\n",
        "466": "  }\n",
        "467": "\n",
        "468": "  @Test\n",
        "469": "  public void inEdges_nodeNotInGraph() {\n",
        "470": "    try {\n",
        "471": "      graph.inEdges(NODE_NOT_IN_GRAPH);\n",
        "472": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "473": "    } catch (IllegalArgumentException e) {\n",
        "474": "      assertNodeNotInGraphErrorMessage(e);\n",
        "475": "    }\n",
        "476": "  }\n",
        "477": "\n",
        "478": "  @Test\n",
        "479": "  public void outEdges_noOutEdges() {\n",
        "480": "    addNode(N1);\n",
        "481": "    assertThat(graph.outEdges(N1)).isEmpty();\n",
        "482": "  }\n",
        "483": "\n",
        "484": "  @Test\n",
        "485": "  public void outEdges_nodeNotInGraph() {\n",
        "486": "    try {\n",
        "487": "      graph.outEdges(NODE_NOT_IN_GRAPH);\n",
        "488": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "489": "    } catch (IllegalArgumentException e) {\n",
        "490": "      assertNodeNotInGraphErrorMessage(e);\n",
        "491": "    }\n",
        "492": "  }\n",
        "493": "\n",
        "494": "  @Test\n",
        "495": "  public void predecessors_noPredecessors() {\n",
        "496": "    addNode(N1);\n",
        "497": "    assertThat(graph.predecessors(N1)).isEmpty();\n",
        "498": "  }\n",
        "499": "\n",
        "500": "  @Test\n",
        "501": "  public void predecessors_nodeNotInGraph() {\n",
        "502": "    try {\n",
        "503": "      graph.predecessors(NODE_NOT_IN_GRAPH);\n",
        "504": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "505": "    } catch (IllegalArgumentException e) {\n",
        "506": "      assertNodeNotInGraphErrorMessage(e);\n",
        "507": "    }\n",
        "508": "  }\n",
        "509": "\n",
        "510": "  @Test\n",
        "511": "  public void successors_noSuccessors() {\n",
        "512": "    addNode(N1);\n",
        "513": "    assertThat(graph.successors(N1)).isEmpty();\n",
        "514": "  }\n",
        "515": "\n",
        "516": "  @Test\n",
        "517": "  public void successors_nodeNotInGraph() {\n",
        "518": "    try {\n",
        "519": "      graph.successors(NODE_NOT_IN_GRAPH);\n",
        "520": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "521": "    } catch (IllegalArgumentException e) {\n",
        "522": "      assertNodeNotInGraphErrorMessage(e);\n",
        "523": "    }\n",
        "524": "  }\n",
        "525": "\n",
        "526": "  @Test\n",
        "527": "  public void degree_oneEdge() {\n",
        "528": "    addEdge(E12, N1, N2);\n",
        "529": "    assertEquals(1, graph.degree(N1));\n",
        "530": "    assertEquals(1, graph.degree(N2));\n",
        "531": "  }\n",
        "532": "\n",
        "533": "  @Test\n",
        "534": "  public void degree_isolatedNode() {\n",
        "535": "    addNode(N1);\n",
        "536": "    assertEquals(0, graph.degree(N1));\n",
        "537": "  }\n",
        "538": "\n",
        "539": "  @Test\n",
        "540": "  public void degree_nodeNotInGraph() {\n",
        "541": "    try {\n",
        "542": "      graph.degree(NODE_NOT_IN_GRAPH);\n",
        "543": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "544": "    } catch (IllegalArgumentException e) {\n",
        "545": "      assertNodeNotInGraphErrorMessage(e);\n",
        "546": "    }\n",
        "547": "  }\n",
        "548": "\n",
        "549": "  @Test\n",
        "550": "  public void inDegree_isolatedNode() {\n",
        "551": "    addNode(N1);\n",
        "552": "    assertEquals(0, graph.inDegree(N1));\n",
        "553": "  }\n",
        "554": "\n",
        "555": "  @Test\n",
        "556": "  public void inDegree_nodeNotInGraph() {\n",
        "557": "    try {\n",
        "558": "      graph.inDegree(NODE_NOT_IN_GRAPH);\n",
        "559": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "560": "    } catch (IllegalArgumentException e) {\n",
        "561": "      assertNodeNotInGraphErrorMessage(e);\n",
        "562": "    }\n",
        "563": "  }\n",
        "564": "\n",
        "565": "  @Test\n",
        "566": "  public void outDegree_isolatedNode() {\n",
        "567": "    addNode(N1);\n",
        "568": "    assertEquals(0, graph.outDegree(N1));\n",
        "569": "  }\n",
        "570": "\n",
        "571": "  @Test\n",
        "572": "  public void outDegree_nodeNotInGraph() {\n",
        "573": "    try {\n",
        "574": "      graph.outDegree(NODE_NOT_IN_GRAPH);\n",
        "575": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "576": "    } catch (IllegalArgumentException e) {\n",
        "577": "      assertNodeNotInGraphErrorMessage(e);\n",
        "578": "    }\n",
        "579": "  }\n",
        "580": "\n",
        "581": "  @Test\n",
        "582": "  public void addNode_newNode() {\n",
        "583": "    assertTrue(addNode(N1));\n",
        "584": "    assertThat(graph.nodes()).contains(N1);\n",
        "585": "  }\n",
        "586": "\n",
        "587": "  @Test\n",
        "588": "  public void addNode_existingNode() {\n",
        "589": "    addNode(N1);\n",
        "590": "    ImmutableSet<Integer> nodes = ImmutableSet.copyOf(graph.nodes());\n",
        "591": "    assertFalse(addNode(N1));\n",
        "592": "    assertThat(graph.nodes()).containsExactlyElementsIn(nodes);\n",
        "593": "  }\n",
        "594": "\n",
        "595": "  @Test\n",
        "596": "  public void removeNode_existingNode() {\n",
        "597": "    addEdge(E12, N1, N2);\n",
        "598": "    addEdge(E41, N4, N1);\n",
        "599": "    assertTrue(graph.removeNode(N1));\n",
        "600": "    assertThat(graph.nodes()).containsExactly(N2, N4);\n",
        "601": "    assertThat(graph.edges()).doesNotContain(E12);\n",
        "602": "    assertThat(graph.edges()).doesNotContain(E41);\n",
        "603": "  }\n",
        "604": "\n",
        "605": "  @Test\n",
        "606": "  public void removeNode_invalidArgument() {\n",
        "607": "    ImmutableSet<Integer> nodes = ImmutableSet.copyOf(graph.nodes());\n",
        "608": "    assertFalse(graph.removeNode(NODE_NOT_IN_GRAPH));\n",
        "609": "    assertThat(graph.nodes()).containsExactlyElementsIn(nodes);\n",
        "610": "  }\n",
        "611": "\n",
        "612": "  @Test\n",
        "613": "  public void removeEdge_oneOfMany() {\n",
        "614": "    addEdge(E12, N1, N2);\n",
        "615": "    addEdge(E13, N1, N3);\n",
        "616": "    addEdge(E14, N1, N4);\n",
        "617": "    assertThat(graph.edges()).containsExactly(E12, E13, E14);\n",
        "618": "    assertTrue(graph.removeEdge(E13));\n",
        "619": "    assertThat(graph.edges()).containsExactly(E12, E14);\n",
        "620": "  }\n",
        "621": "\n",
        "622": "  @Test\n",
        "623": "  public void removeEdge_invalidArgument() {\n",
        "624": "    ImmutableSet<String> edges = ImmutableSet.copyOf(graph.edges());\n",
        "625": "    assertFalse(graph.removeEdge(EDGE_NOT_IN_GRAPH));\n",
        "626": "    assertThat(graph.edges()).containsExactlyElementsIn(edges);\n",
        "627": "  }\n",
        "628": "\n",
        "629": "  static void assertNodeNotInGraphErrorMessage(Throwable throwable) {\n",
        "630": "    assertThat(throwable.getMessage()).startsWith(NODE_STRING);\n",
        "631": "    assertThat(throwable.getMessage()).contains(ERROR_ELEMENT_NOT_IN_GRAPH);\n",
        "632": "  }\n",
        "633": "\n",
        "634": "  static void assertEdgeNotInGraphErrorMessage(Throwable throwable) {\n",
        "635": "    assertThat(throwable.getMessage()).startsWith(EDGE_STRING);\n",
        "636": "    assertThat(throwable.getMessage()).contains(ERROR_ELEMENT_NOT_IN_GRAPH);\n",
        "637": "  }\n",
        "638": "}\n"
    },
    "removed": {}
}