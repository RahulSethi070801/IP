{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.collect.ImmutableMap;\n",
        "22": "import com.google.common.collect.ImmutableSet;\n",
        "23": "\n",
        "24": "import java.util.Map;\n",
        "25": "import java.util.Set;\n",
        "26": "\n",
        "27": "/**\n",
        "28": " * A {@link Network} whose relationships are constant. Instances of this class may be obtained\n",
        "29": " * with {@link #copyOf(Network)}.\n",
        "30": " *\n",
        "31": " * <p>The time complexity of {@code edgesConnecting(node1, node2)} is O(min(outD_node1, inD_node2)).\n",
        "32": " *\n",
        "33": " * @author James Sexton\n",
        "34": " * @author Joshua O'Madadhain\n",
        "35": " * @author Omar Darwish\n",
        "36": " * @param <N> Node parameter type\n",
        "37": " * @param <E> Edge parameter type\n",
        "38": " */\n",
        "39": "public final class ImmutableNetwork<N, E> extends AbstractConfigurableNetwork<N, E> {\n",
        "40": "\n",
        "41": "  private ImmutableNetwork(Network<N, E> graph) {\n",
        "42": "    super(NetworkBuilder.from(graph), getNodeConnections(graph), getEdgeToIncidentNodes(graph));\n",
        "43": "  }\n",
        "44": "\n",
        "45": "  /**\n",
        "46": "   * Returns an immutable copy of {@code graph}.\n",
        "47": "   */\n",
        "48": "  public static <N, E> ImmutableNetwork<N, E> copyOf(Network<N, E> graph) {\n",
        "49": "    return (graph instanceof ImmutableNetwork)\n",
        "50": "        ? (ImmutableNetwork<N, E>) graph\n",
        "51": "        : new ImmutableNetwork<N, E>(graph);\n",
        "52": "  }\n",
        "53": "\n",
        "54": "  /**\n",
        "55": "   * Simply returns its argument.\n",
        "56": "   *\n",
        "57": "   * @deprecated no need to use this\n",
        "58": "   */\n",
        "59": "  @Deprecated\n",
        "60": "  public static <N, E> ImmutableNetwork<N, E> copyOf(ImmutableNetwork<N, E> graph) {\n",
        "61": "    return checkNotNull(graph);\n",
        "62": "  }\n",
        "63": "\n",
        "64": "  @Override\n",
        "65": "  public Set<E> edgesConnecting(Object node1, Object node2) {\n",
        "66": "    // This set is calculated as the intersection of two sets, and is likely to be small.\n",
        "67": "    // As an optimization, copy it to an ImmutableSet so re-iterating is fast.\n",
        "68": "    return ImmutableSet.copyOf(super.edgesConnecting(node1, node2));\n",
        "69": "  }\n",
        "70": "\n",
        "71": "  private static <N, E> Map<N, NodeConnections<N, E>> getNodeConnections(Network<N, E> graph) {\n",
        "72": "    ImmutableMap.Builder<N, NodeConnections<N, E>> nodeConnections = ImmutableMap.builder();\n",
        "73": "    for (N node : graph.nodes()) {\n",
        "74": "      nodeConnections.put(node, nodeConnectionsOf(graph, node));\n",
        "75": "    }\n",
        "76": "    return nodeConnections.build();\n",
        "77": "  }\n",
        "78": "\n",
        "79": "  private static <N, E> Map<E, IncidentNodes<N>> getEdgeToIncidentNodes(Network<N, E> graph) {\n",
        "80": "    ImmutableMap.Builder<E, IncidentNodes<N>> edgeToIncidentNodes = ImmutableMap.builder();\n",
        "81": "    for (E edge : graph.edges()) {\n",
        "82": "      edgeToIncidentNodes.put(edge, IncidentNodes.of(graph.incidentNodes(edge)));\n",
        "83": "    }\n",
        "84": "    return edgeToIncidentNodes.build();\n",
        "85": "  }\n",
        "86": "\n",
        "87": "  private static <N, E> NodeConnections<N, E> nodeConnectionsOf(Network<N, E> graph, N node) {\n",
        "88": "    return graph.isDirected()\n",
        "89": "        ? DirectedNodeConnections.ofImmutable(\n",
        "90": "            graph.predecessors(node), graph.successors(node),\n",
        "91": "            graph.inEdges(node), graph.outEdges(node))\n",
        "92": "        : UndirectedNodeConnections.ofImmutable(\n",
        "93": "            graph.adjacentNodes(node), graph.incidentEdges(node));\n",
        "94": "  }\n",
        "95": "}\n"
    },
    "removed": {}
}