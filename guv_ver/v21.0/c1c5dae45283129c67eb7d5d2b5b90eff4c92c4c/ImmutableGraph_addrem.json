{
    "addition": {
        "19": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "27": " * A {@link Graph} whose relationships are constant. Instances of this class may be obtained\n",
        "37": "public final class ImmutableGraph<N> extends AbstractConfigurableGraph<N> {\n",
        "39": "  private ImmutableGraph(Graph<N> graph) {\n",
        "40": "    super(GraphBuilder.from(graph), getNodeConnections(graph));\n",
        "46": "  public static <N> ImmutableGraph<N> copyOf(Graph<N> graph) {\n",
        "47": "    // TODO(b/28087289): we can remove this restriction when Graph supports parallel edges\n",
        "48": "    checkArgument(!(graph instanceof Network), \"Input must not implement common.graph.Network\");\n",
        "50": "        ? (ImmutableGraph<N>) graph\n",
        "51": "        : new ImmutableGraph<N>(graph);\n",
        "60": "  public static <N> ImmutableGraph<N> copyOf(ImmutableGraph<N> graph) {\n",
        "64": "  private static <N> Map<N, NodeAdjacencies<N>> getNodeConnections(Graph<N> graph) {\n",
        "65": "    ImmutableMap.Builder<N, NodeAdjacencies<N>> nodeConnections = ImmutableMap.builder();\n",
        "72": "  private static <N> NodeAdjacencies<N> nodeConnectionsOf(Graph<N> graph, N node) {\n",
        "74": "        ? DirectedNodeAdjacencies.ofImmutable(graph.predecessors(node), graph.successors(node))\n",
        "75": "        : UndirectedNodeAdjacencies.ofImmutable(graph.adjacentNodes(node));\n"
    },
    "removed": {
        "22": "import com.google.common.collect.ImmutableSet;\n",
        "23": "import com.google.errorprone.annotations.CanIgnoreReturnValue;\n",
        "26": "import java.util.Set;\n",
        "29": " * A {@link Graph} whose contents will never change. Instances of this class should be obtained\n",
        "38": " * @param <E> Edge parameter type\n",
        "40": "public final class ImmutableGraph<N, E> extends ConfigurableGraph<N, E> {\n",
        "42": "  private ImmutableGraph(Graph<N, E> graph) {\n",
        "43": "    super(GraphBuilder.from(graph), getNodeConnections(graph), getEdgeToIncidentNodes(graph));\n",
        "49": "  public static <N, E> ImmutableGraph<N, E> copyOf(Graph<N, E> graph) {\n",
        "51": "        ? (ImmutableGraph<N, E>) graph\n",
        "52": "        : new ImmutableGraph<N, E>(graph);\n",
        "61": "  public static <N, E> ImmutableGraph<N, E> copyOf(ImmutableGraph<N, E> graph) {\n",
        "65": "  /**\n",
        "66": "   * Guaranteed to throw an exception and leave the graph unmodified.\n",
        "67": "   *\n",
        "68": "   * @throws UnsupportedOperationException always\n",
        "69": "   * @deprecated Unsupported operation.\n",
        "70": "   */\n",
        "71": "  @CanIgnoreReturnValue\n",
        "72": "  @Deprecated\n",
        "73": "  @Override\n",
        "74": "  public final boolean addNode(N node) {\n",
        "75": "    throw new UnsupportedOperationException();\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  /**\n",
        "79": "   * Guaranteed to throw an exception and leave the graph unmodified.\n",
        "80": "   *\n",
        "81": "   * @throws UnsupportedOperationException always\n",
        "82": "   * @deprecated Unsupported operation.\n",
        "83": "   */\n",
        "84": "  @CanIgnoreReturnValue\n",
        "85": "  @Deprecated\n",
        "86": "  @Override\n",
        "87": "  public final boolean addEdge(E edge, N node1, N node2) {\n",
        "88": "    throw new UnsupportedOperationException();\n",
        "89": "  }\n",
        "90": "\n",
        "91": "  /**\n",
        "92": "   * Guaranteed to throw an exception and leave the graph unmodified.\n",
        "93": "   *\n",
        "94": "   * @throws UnsupportedOperationException always\n",
        "95": "   * @deprecated Unsupported operation.\n",
        "96": "   */\n",
        "97": "  @CanIgnoreReturnValue\n",
        "98": "  @Deprecated\n",
        "99": "  @Override\n",
        "100": "  public final boolean removeNode(Object node) {\n",
        "101": "    throw new UnsupportedOperationException();\n",
        "102": "  }\n",
        "103": "\n",
        "104": "  /**\n",
        "105": "   * Guaranteed to throw an exception and leave the graph unmodified.\n",
        "106": "   *\n",
        "107": "   * @throws UnsupportedOperationException always\n",
        "108": "   * @deprecated Unsupported operation.\n",
        "109": "   */\n",
        "110": "  @CanIgnoreReturnValue\n",
        "111": "  @Deprecated\n",
        "112": "  @Override\n",
        "113": "  public final boolean removeEdge(Object edge) {\n",
        "114": "    throw new UnsupportedOperationException();\n",
        "115": "  }\n",
        "116": "\n",
        "117": "  @Override\n",
        "118": "  public Set<E> edgesConnecting(Object node1, Object node2) {\n",
        "119": "    // This set is calculated as the intersection of two sets, and is likely to be small.\n",
        "120": "    // As an optimization, copy it to an ImmutableSet so re-iterating is fast.\n",
        "121": "    return ImmutableSet.copyOf(super.edgesConnecting(node1, node2));\n",
        "122": "  }\n",
        "123": "\n",
        "124": "  private static <N, E> Map<N, NodeConnections<N, E>> getNodeConnections(Graph<N, E> graph) {\n",
        "125": "    ImmutableMap.Builder<N, NodeConnections<N, E>> nodeConnections = ImmutableMap.builder();\n",
        "132": "  private static <N, E> Map<E, IncidentNodes<N>> getEdgeToIncidentNodes(Graph<N, E> graph) {\n",
        "133": "    ImmutableMap.Builder<E, IncidentNodes<N>> edgeToIncidentNodes = ImmutableMap.builder();\n",
        "134": "    for (E edge : graph.edges()) {\n",
        "135": "      edgeToIncidentNodes.put(edge, IncidentNodes.of(graph.incidentNodes(edge)));\n",
        "136": "    }\n",
        "137": "    return edgeToIncidentNodes.build();\n",
        "138": "  }\n",
        "139": "\n",
        "140": "  private static <N, E> NodeConnections<N, E> nodeConnectionsOf(Graph<N, E> graph, N node) {\n",
        "142": "        ? DirectedNodeConnections.ofImmutable(\n",
        "143": "            graph.predecessors(node), graph.successors(node),\n",
        "144": "            graph.inEdges(node), graph.outEdges(node))\n",
        "145": "        : UndirectedNodeConnections.ofImmutable(\n",
        "146": "            graph.adjacentNodes(node), graph.incidentEdges(node));\n"
    }
}