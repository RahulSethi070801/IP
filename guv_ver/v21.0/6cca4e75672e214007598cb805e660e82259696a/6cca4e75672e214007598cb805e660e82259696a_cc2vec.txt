{"id": "6cca4e75672e214007598cb805e660e82259696a", "code": [{"0": "guava/src/com/google/common/xml/XmlEscapers.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * {@code Escaper} instances suitable for strings to be included in XML attribute values and\n", " * elements' text contents. When possible, avoid manual escaping by using templating systems and\n", " * high-level APIs that provide autoescaping. For example, consider\n", " * <a href=\"http://www.xom.nu/\">XOM</a> or <a href=\"http://www.jdom.org/\">JDOM</a>.\n", " * <p><b>Note:</b> Currently the escapers provided by this class do not escape any characters\n", " * outside the ASCII character range. Unlike HTML escaping the XML escapers will not escape\n", " * non-ASCII characters to their numeric entity replacements. These XML escapers provide the minimal\n", " * level of escaping to ensure that the output can be safely included in a Unicode XML document.\n", " * <a href=\"http://www.w3.org/TR/2008/REC-xml-20081126/#syntax\">2.4</a> of the XML specification.\n"], "3": ["   * Returns an {@link Escaper} instance that escapes special characters in a string so it can\n", "   * safely be included in an XML document as element content. See section\n", "   * <a href=\"http://www.w3.org/TR/2008/REC-xml-20081126/#syntax\">2.4</a> of the XML specification.\n", "   * <p><b>Note:</b> Double and single quotes are not escaped, so it is <b>not safe</b> to use this\n", "   * escaper to escape attribute values. Use {@link #xmlContentEscaper} if the output can appear in\n", "   * element content or {@link #xmlAttributeEscaper} in attribute values.\n", "   * <p>This escaper substitutes {@code 0xFFFD} for non-whitespace control characters and the\n", "   * character values {@code 0xFFFE} and {@code 0xFFFF} which are not permitted in XML. For more\n", "   * detail see section <a href=\"http://www.w3.org/TR/2008/REC-xml-20081126/#charsets\">2.2</a> of\n", "   * the XML specification.\n", "   * <p>This escaper does not escape non-ASCII characters to their numeric character references\n", "   * (NCR). Any non-ASCII characters appearing in the input will be preserved in the output.\n", "   * Specifically \"\\r\" (carriage return) is preserved in the output, which may result in it being\n", "   * silently converted to \"\\n\" when the XML is parsed.\n", "   * <p>This escaper does not treat surrogate pairs specially and does not perform Unicode\n", "   * validation on its input.\n", "   * Returns an {@link Escaper} instance that escapes special characters in a string so it can\n", "   * safely be included in XML document as an attribute value. See section\n", "   * <a href=\"http://www.w3.org/TR/2008/REC-xml-20081126/#AVNormalize\">3.3.3</a> of the XML\n", "   * specification.\n", "   * <p>This escaper substitutes {@code 0xFFFD} for non-whitespace control characters and the\n", "   * character values {@code 0xFFFE} and {@code 0xFFFF} which are not permitted in XML. For more\n", "   * detail see section <a href=\"http://www.w3.org/TR/2008/REC-xml-20081126/#charsets\">2.2</a> of\n", "   * the XML specification.\n", "   * <p>This escaper does not escape non-ASCII characters to their numeric character references\n", "   * (NCR). However, horizontal tab {@code '\\t'}, line feed {@code '\\n'} and carriage return\n", "   * {@code '\\r'} are escaped to a corresponding NCR {@code \"&#x9;\"}, {@code \"&#xA;\"}, and\n", "   * {@code \"&#xD;\"} respectively. Any other non-ASCII characters appearing in the input will be\n", "   * preserved in the output.\n", "   * <p>This escaper does not treat surrogate pairs specially and does not perform Unicode\n", "   * validation on its input.\n"], "4": ["     * Except for \\n, \\t, and \\r, all ASCII control characters are replaced with the Unicode\n", "     * replacement character.\n", "     * Implementation note: An alternative to the following would be to make a map that simply\n", "     * replaces the allowed ASCII whitespace characters with themselves and to set the minimum safe\n", "     * character to 0x20. However this would slow down the escaping of simple strings that contain\n", "     * \\t, \\n, or \\r.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * {@code Escaper} instances suitable for strings to be included in XML\n", " * attribute values and elements' text contents. When possible, avoid manual\n", " * escaping by using templating systems and high-level APIs that provide\n", " * autoescaping. For example, consider <a href=\"http://www.xom.nu/\">XOM</a> or\n", " * <a href=\"http://www.jdom.org/\">JDOM</a>.\n", " * <p><b>Note:</b> Currently the escapers provided by this class do not escape\n", " * any characters outside the ASCII character range. Unlike HTML escaping the\n", " * XML escapers will not escape non-ASCII characters to their numeric entity\n", " * replacements. These XML escapers provide the minimal level of escaping to\n", " * ensure that the output can be safely included in a Unicode XML document.\n", " * <a href=\"http://www.w3.org/TR/2008/REC-xml-20081126/#syntax\">2.4</a> of the\n", " * XML specification.\n"], "3": ["   * Returns an {@link Escaper} instance that escapes special characters in a\n", "   * string so it can safely be included in an XML document as element content.\n", "   * See section\n", "   * <a href=\"http://www.w3.org/TR/2008/REC-xml-20081126/#syntax\">2.4</a> of the\n", "   * XML specification.\n", "   * <p><b>Note:</b> Double and single quotes are not escaped, so it is <b>not\n", "   * safe</b> to use this escaper to escape attribute values. Use\n", "   * {@link #xmlContentEscaper} if the output can appear in element content or\n", "   * {@link #xmlAttributeEscaper} in attribute values.\n", "   * <p>This escaper substitutes {@code 0xFFFD} for non-whitespace control\n", "   * characters and the character values {@code 0xFFFE} and {@code 0xFFFF} which\n", "   * are not permitted in XML. For more detail see section <a\n", "   * href=\"http://www.w3.org/TR/2008/REC-xml-20081126/#charsets\">2.2</a> of the\n", "   * XML specification.\n", "   * <p>This escaper does not escape non-ASCII characters to their numeric\n", "   * character references (NCR). Any non-ASCII characters appearing in the input\n", "   * will be preserved in the output. Specifically \"\\r\" (carriage return) is\n", "   * preserved in the output, which may result in it being silently converted to\n", "   * \"\\n\" when the XML is parsed.\n", "   * <p>This escaper does not treat surrogate pairs specially and does not\n", "   * perform Unicode validation on its input.\n", "   * Returns an {@link Escaper} instance that escapes special characters in a\n", "   * string so it can safely be included in XML document as an attribute value.\n", "   * See section\n", "   * <a href=\"http://www.w3.org/TR/2008/REC-xml-20081126/#AVNormalize\">3.3.3</a>\n", "   * of the XML specification.\n", "   * <p>This escaper substitutes {@code 0xFFFD} for non-whitespace control\n", "   * characters and the character values {@code 0xFFFE} and {@code 0xFFFF} which\n", "   * are not permitted in XML. For more detail see section <a\n", "   * href=\"http://www.w3.org/TR/2008/REC-xml-20081126/#charsets\">2.2</a> of the\n", "   * XML specification.\n", "   * <p>This escaper does not escape non-ASCII characters to their numeric\n", "   * character references (NCR). However, horizontal tab {@code '\\t'}, line feed\n", "   * {@code '\\n'} and carriage return {@code '\\r'} are escaped to a\n", "   * corresponding NCR {@code \"&#x9;\"}, {@code \"&#xA;\"}, and {@code \"&#xD;\"}\n", "   * respectively. Any other non-ASCII characters appearing in the input will\n", "   * be preserved in the output.\n", "   * <p>This escaper does not treat surrogate pairs specially and does not\n", "   * perform Unicode validation on its input.\n"], "4": ["     * Except for \\n, \\t, and \\r, all ASCII control characters are replaced with\n", "     * the Unicode replacement character.\n", "     * Implementation note: An alternative to the following would be to make a\n", "     * map that simply replaces the allowed ASCII whitespace characters with\n", "     * themselves and to set the minimum safe character to 0x20. However this\n", "     * would slow down the escaping of simple strings that contain \\t, \\n, or\n", "     * \\r.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [23, 24, 25, 26, 28, 29, 30, 31, 36], "3": [54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97], "4": [117, 118, 120, 121, 122, 123]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 40, 41], "3": [59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110], "4": [129, 130, 132, 133, 134, 135, 136]}}, {"1": "guava/src/com/google/common/xml/package-info.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * <p>This package is a part of the open-source <a href=\"http://github.com/google/guava\">Guava</a>\n", " * library.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * <p>This package is a part of the open-source\n", " * <a href=\"http://github.com/google/guava\">Guava</a> library.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [20, 21]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [22, 23]}}, {"2": "guava/src/com/google/thirdparty/publicsuffix/PublicSuffixType.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14]}}, {"3": "guava/src/com/google/thirdparty/publicsuffix/TrieParser.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": ["   * Parses a serialized trie representation of a map of reversed public suffixes into an immutable\n", "   * map of public suffixes.\n", "      idx +=\n", "          doParseTrieToBuilder(\n", "              Lists.<CharSequence>newLinkedList(), encoded.subSequence(idx, encodedLen), builder);\n"], "3": ["   * @param stack The prefixes that preceed the characters represented by this node. Each entry of\n", "   *     the stack is in reverse order.\n"], "4": ["    for (; idx < encodedLen; idx++) {\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": ["   * Parses a serialized trie representation of a map of reversed public\n", "   * suffixes into an immutable map of public suffixes.\n", "      idx += doParseTrieToBuilder(\n", "          Lists.<CharSequence>newLinkedList(),\n", "          encoded.subSequence(idx, encodedLen),\n", "          builder);\n"], "3": ["   * @param stack The prefixes that preceed the characters represented by this\n", "   *     node. Each entry of the stack is in reverse order.\n"], "4": ["    for ( ; idx < encodedLen; idx++) {\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [33, 34, 41, 42, 43], "3": [51, 52], "4": [67]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [35, 36, 43, 44, 45, 46], "3": [54, 55], "4": [70]}}]}
