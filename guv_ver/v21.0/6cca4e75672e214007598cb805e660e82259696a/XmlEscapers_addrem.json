{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "23": " * {@code Escaper} instances suitable for strings to be included in XML attribute values and\n",
        "24": " * elements' text contents. When possible, avoid manual escaping by using templating systems and\n",
        "25": " * high-level APIs that provide autoescaping. For example, consider\n",
        "26": " * <a href=\"http://www.xom.nu/\">XOM</a> or <a href=\"http://www.jdom.org/\">JDOM</a>.\n",
        "28": " * <p><b>Note:</b> Currently the escapers provided by this class do not escape any characters\n",
        "29": " * outside the ASCII character range. Unlike HTML escaping the XML escapers will not escape\n",
        "30": " * non-ASCII characters to their numeric entity replacements. These XML escapers provide the minimal\n",
        "31": " * level of escaping to ensure that the output can be safely included in a Unicode XML document.\n",
        "36": " * <a href=\"http://www.w3.org/TR/2008/REC-xml-20081126/#syntax\">2.4</a> of the XML specification.\n",
        "54": "   * Returns an {@link Escaper} instance that escapes special characters in a string so it can\n",
        "55": "   * safely be included in an XML document as element content. See section\n",
        "56": "   * <a href=\"http://www.w3.org/TR/2008/REC-xml-20081126/#syntax\">2.4</a> of the XML specification.\n",
        "58": "   * <p><b>Note:</b> Double and single quotes are not escaped, so it is <b>not safe</b> to use this\n",
        "59": "   * escaper to escape attribute values. Use {@link #xmlContentEscaper} if the output can appear in\n",
        "60": "   * element content or {@link #xmlAttributeEscaper} in attribute values.\n",
        "62": "   * <p>This escaper substitutes {@code 0xFFFD} for non-whitespace control characters and the\n",
        "63": "   * character values {@code 0xFFFE} and {@code 0xFFFF} which are not permitted in XML. For more\n",
        "64": "   * detail see section <a href=\"http://www.w3.org/TR/2008/REC-xml-20081126/#charsets\">2.2</a> of\n",
        "65": "   * the XML specification.\n",
        "67": "   * <p>This escaper does not escape non-ASCII characters to their numeric character references\n",
        "68": "   * (NCR). Any non-ASCII characters appearing in the input will be preserved in the output.\n",
        "69": "   * Specifically \"\\r\" (carriage return) is preserved in the output, which may result in it being\n",
        "70": "   * silently converted to \"\\n\" when the XML is parsed.\n",
        "72": "   * <p>This escaper does not treat surrogate pairs specially and does not perform Unicode\n",
        "73": "   * validation on its input.\n",
        "80": "   * Returns an {@link Escaper} instance that escapes special characters in a string so it can\n",
        "81": "   * safely be included in XML document as an attribute value. See section\n",
        "82": "   * <a href=\"http://www.w3.org/TR/2008/REC-xml-20081126/#AVNormalize\">3.3.3</a> of the XML\n",
        "83": "   * specification.\n",
        "85": "   * <p>This escaper substitutes {@code 0xFFFD} for non-whitespace control characters and the\n",
        "86": "   * character values {@code 0xFFFE} and {@code 0xFFFF} which are not permitted in XML. For more\n",
        "87": "   * detail see section <a href=\"http://www.w3.org/TR/2008/REC-xml-20081126/#charsets\">2.2</a> of\n",
        "88": "   * the XML specification.\n",
        "90": "   * <p>This escaper does not escape non-ASCII characters to their numeric character references\n",
        "91": "   * (NCR). However, horizontal tab {@code '\\t'}, line feed {@code '\\n'} and carriage return\n",
        "92": "   * {@code '\\r'} are escaped to a corresponding NCR {@code \"&#x9;\"}, {@code \"&#xA;\"}, and\n",
        "93": "   * {@code \"&#xD;\"} respectively. Any other non-ASCII characters appearing in the input will be\n",
        "94": "   * preserved in the output.\n",
        "96": "   * <p>This escaper does not treat surrogate pairs specially and does not perform Unicode\n",
        "97": "   * validation on its input.\n",
        "117": "     * Except for \\n, \\t, and \\r, all ASCII control characters are replaced with the Unicode\n",
        "118": "     * replacement character.\n",
        "120": "     * Implementation note: An alternative to the following would be to make a map that simply\n",
        "121": "     * replaces the allowed ASCII whitespace characters with themselves and to set the minimum safe\n",
        "122": "     * character to 0x20. However this would slow down the escaping of simple strings that contain\n",
        "123": "     * \\t, \\n, or \\r.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "25": " * {@code Escaper} instances suitable for strings to be included in XML\n",
        "26": " * attribute values and elements' text contents. When possible, avoid manual\n",
        "27": " * escaping by using templating systems and high-level APIs that provide\n",
        "28": " * autoescaping. For example, consider <a href=\"http://www.xom.nu/\">XOM</a> or\n",
        "29": " * <a href=\"http://www.jdom.org/\">JDOM</a>.\n",
        "31": " * <p><b>Note:</b> Currently the escapers provided by this class do not escape\n",
        "32": " * any characters outside the ASCII character range. Unlike HTML escaping the\n",
        "33": " * XML escapers will not escape non-ASCII characters to their numeric entity\n",
        "34": " * replacements. These XML escapers provide the minimal level of escaping to\n",
        "35": " * ensure that the output can be safely included in a Unicode XML document.\n",
        "40": " * <a href=\"http://www.w3.org/TR/2008/REC-xml-20081126/#syntax\">2.4</a> of the\n",
        "41": " * XML specification.\n",
        "59": "   * Returns an {@link Escaper} instance that escapes special characters in a\n",
        "60": "   * string so it can safely be included in an XML document as element content.\n",
        "61": "   * See section\n",
        "62": "   * <a href=\"http://www.w3.org/TR/2008/REC-xml-20081126/#syntax\">2.4</a> of the\n",
        "63": "   * XML specification.\n",
        "65": "   * <p><b>Note:</b> Double and single quotes are not escaped, so it is <b>not\n",
        "66": "   * safe</b> to use this escaper to escape attribute values. Use\n",
        "67": "   * {@link #xmlContentEscaper} if the output can appear in element content or\n",
        "68": "   * {@link #xmlAttributeEscaper} in attribute values.\n",
        "70": "   * <p>This escaper substitutes {@code 0xFFFD} for non-whitespace control\n",
        "71": "   * characters and the character values {@code 0xFFFE} and {@code 0xFFFF} which\n",
        "72": "   * are not permitted in XML. For more detail see section <a\n",
        "73": "   * href=\"http://www.w3.org/TR/2008/REC-xml-20081126/#charsets\">2.2</a> of the\n",
        "74": "   * XML specification.\n",
        "76": "   * <p>This escaper does not escape non-ASCII characters to their numeric\n",
        "77": "   * character references (NCR). Any non-ASCII characters appearing in the input\n",
        "78": "   * will be preserved in the output. Specifically \"\\r\" (carriage return) is\n",
        "79": "   * preserved in the output, which may result in it being silently converted to\n",
        "80": "   * \"\\n\" when the XML is parsed.\n",
        "82": "   * <p>This escaper does not treat surrogate pairs specially and does not\n",
        "83": "   * perform Unicode validation on its input.\n",
        "90": "   * Returns an {@link Escaper} instance that escapes special characters in a\n",
        "91": "   * string so it can safely be included in XML document as an attribute value.\n",
        "92": "   * See section\n",
        "93": "   * <a href=\"http://www.w3.org/TR/2008/REC-xml-20081126/#AVNormalize\">3.3.3</a>\n",
        "94": "   * of the XML specification.\n",
        "96": "   * <p>This escaper substitutes {@code 0xFFFD} for non-whitespace control\n",
        "97": "   * characters and the character values {@code 0xFFFE} and {@code 0xFFFF} which\n",
        "98": "   * are not permitted in XML. For more detail see section <a\n",
        "99": "   * href=\"http://www.w3.org/TR/2008/REC-xml-20081126/#charsets\">2.2</a> of the\n",
        "100": "   * XML specification.\n",
        "102": "   * <p>This escaper does not escape non-ASCII characters to their numeric\n",
        "103": "   * character references (NCR). However, horizontal tab {@code '\\t'}, line feed\n",
        "104": "   * {@code '\\n'} and carriage return {@code '\\r'} are escaped to a\n",
        "105": "   * corresponding NCR {@code \"&#x9;\"}, {@code \"&#xA;\"}, and {@code \"&#xD;\"}\n",
        "106": "   * respectively. Any other non-ASCII characters appearing in the input will\n",
        "107": "   * be preserved in the output.\n",
        "109": "   * <p>This escaper does not treat surrogate pairs specially and does not\n",
        "110": "   * perform Unicode validation on its input.\n",
        "129": "     * Except for \\n, \\t, and \\r, all ASCII control characters are replaced with\n",
        "130": "     * the Unicode replacement character.\n",
        "132": "     * Implementation note: An alternative to the following would be to make a\n",
        "133": "     * map that simply replaces the allowed ASCII whitespace characters with\n",
        "134": "     * themselves and to set the minimum safe character to 0x20. However this\n",
        "135": "     * would slow down the escaping of simple strings that contain \\t, \\n, or\n",
        "136": "     * \\r.\n"
    }
}