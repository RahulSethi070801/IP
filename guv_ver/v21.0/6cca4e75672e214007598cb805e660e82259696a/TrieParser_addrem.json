{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "33": "   * Parses a serialized trie representation of a map of reversed public suffixes into an immutable\n",
        "34": "   * map of public suffixes.\n",
        "41": "      idx +=\n",
        "42": "          doParseTrieToBuilder(\n",
        "43": "              Lists.<CharSequence>newLinkedList(), encoded.subSequence(idx, encodedLen), builder);\n",
        "51": "   * @param stack The prefixes that preceed the characters represented by this node. Each entry of\n",
        "52": "   *     the stack is in reverse order.\n",
        "67": "    for (; idx < encodedLen; idx++) {\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "35": "   * Parses a serialized trie representation of a map of reversed public\n",
        "36": "   * suffixes into an immutable map of public suffixes.\n",
        "43": "      idx += doParseTrieToBuilder(\n",
        "44": "          Lists.<CharSequence>newLinkedList(),\n",
        "45": "          encoded.subSequence(idx, encodedLen),\n",
        "46": "          builder);\n",
        "54": "   * @param stack The prefixes that preceed the characters represented by this\n",
        "55": "   *     node. Each entry of the stack is in reverse order.\n",
        "70": "    for ( ; idx < encodedLen; idx++) {\n"
    }
}