{
    "addition": {
        "34": " * <p>The {@link Endpoints} of a directed edge are an ordered pair of nodes (source and target).\n",
        "35": " * The {@link Endpoints} of an undirected edge are an unordered pair of nodes. The nodes can be\n",
        "36": " * accessed through the {@link #iterator()}, and in the directed case, will iterate in the order\n",
        "37": " * {@link #source()}, {@link #target()}.\n",
        "52": "  /**\n",
        "53": "   * Returns {@link Endpoints} representing the endpoints of an edge in {@code graph}.\n",
        "54": "   */\n",
        "55": "  public static <N> Endpoints<N> of(Graph<?> graph, N nodeA, N nodeB) {\n",
        "56": "    return graph.isDirected() ? ofDirected(nodeA, nodeB) : ofUndirected(nodeA, nodeB);\n",
        "60": "   * Returns {@link Endpoints} representing the endpoints of a directed edge.\n",
        "67": "   * Returns {@link Endpoints} representing the endpoints of an undirected edge.\n",
        "74": "   * If these are the {@link Endpoints} of a directed edge, returns the node which is the source of\n",
        "75": "   * that edge.\n",
        "77": "   * @throws UnsupportedOperationException if these are the {@link Endpoints} of a undirected edge\n",
        "82": "   * If these are the {@link Endpoints} of a directed edge, returns the node which is the target of\n",
        "83": "   * that edge.\n",
        "85": "   * @throws UnsupportedOperationException if these are the {@link Endpoints} of a undirected edge\n",
        "90": "   * If these are the {@link Endpoints} of a directed edge, returns the {@link #source()};\n",
        "99": "   * If these are the {@link Endpoints} of a directed edge, it is equal to the {@link #target()}.\n",
        "158": "   * The {@link Endpoints} of two directed edges are equal if their {@link #source()} and\n",
        "159": "   * {@link #target()} are equal. The {@link Endpoints} of two undirected edges are equal if they\n",
        "160": "   * contain the same nodes. The {@link Endpoints} of a directed edge are never equal to the\n",
        "161": "   * {@link Endpoints} of an undirected edge.\n",
        "169": "  /**\n",
        "170": "   * The {@link Endpoints} of a directed edge. It is guaranteed that all {@link Endpoints} of\n",
        "171": "   * directed edges will be an instance of this class.\n",
        "172": "   */\n",
        "173": "  static final class Directed<N> extends Endpoints<N> {\n",
        "212": "  /**\n",
        "213": "   * The {@link Endpoints} of an undirected edge. It is guaranteed that all {@link Endpoints} of\n",
        "214": "   * undirected edges will be an instance of this class.\n",
        "215": "   */\n",
        "216": "  static final class Undirected<N> extends Endpoints<N> {\n"
    },
    "removed": {
        "34": " * <p>If an {@link Endpoints} is directed, it is an ordered pair of nodes (source and target).\n",
        "35": " * Otherwise, it is an unordered pair of nodes that can be accessed through the iterator.\n",
        "50": "  static <N> Endpoints<N> of(N nodeA, N nodeB, boolean isDirected) {\n",
        "51": "    return isDirected ? ofDirected(nodeA, nodeB) : ofUndirected(nodeA, nodeB);\n",
        "55": "   * Returns an {@link Endpoints} representing the endpoints of a directed edge.\n",
        "62": "   * Returns an {@link Endpoints} representing the endpoints of an undirected edge.\n",
        "69": "   * Returns whether the nodes of this {@link Endpoints} are ordered. Generally, this is equal to\n",
        "70": "   * {@link Graph#isDirected()} of the graph that generated this {@link Endpoints}.\n",
        "71": "   */\n",
        "72": "  public abstract boolean isDirected();\n",
        "73": "\n",
        "74": "  /**\n",
        "75": "   * If this {@link Endpoints} is directed, returns the node which is the source of the origin edge.\n",
        "77": "   * @throws UnsupportedOperationException if this Endpoints is not directed\n",
        "82": "   * If this {@link Endpoints} is directed, returns the node which is the target of the origin edge.\n",
        "84": "   * @throws UnsupportedOperationException if this Endpoints is not directed\n",
        "89": "   * If this {@link Endpoints} is directed, returns the {@link #source()};\n",
        "98": "   * If this {@link Endpoints} is directed, this is equal to the {@link #target()}.\n",
        "157": "   * If two {@link Endpoints}s are directed, the source and target must be equal to be considered\n",
        "158": "   * equal. If two {@link Endpoints}s are undirected, the unordered set of nodes must be equal to be\n",
        "159": "   * considered equal. Directed {@link Endpoints} are never equal to undirected {@link Endpoints}.\n",
        "167": "  private static final class Directed<N> extends Endpoints<N> {\n",
        "172": "    @Override\n",
        "173": "    public boolean isDirected() {\n",
        "174": "      return true;\n",
        "175": "    }\n",
        "176": "\n",
        "211": "  private static final class Undirected<N> extends Endpoints<N> {\n",
        "216": "    @Override\n",
        "217": "    public boolean isDirected() {\n",
        "218": "      return false;\n",
        "219": "    }\n",
        "220": "\n"
    }
}