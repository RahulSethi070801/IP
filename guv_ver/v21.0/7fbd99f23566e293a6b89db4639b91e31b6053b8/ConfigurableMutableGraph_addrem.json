{
    "addition": {
        "59": "   * Add an edge between {@code nodeA} and {@code nodeB}; if these nodes are not already\n",
        "61": "   * Return {@code false} if an edge already exists between {@code nodeA} and {@code nodeB},\n",
        "64": "   * @throws IllegalArgumentException if self-loops are not allowed, and {@code nodeA} is equal to\n",
        "65": "   *     {@code nodeB}.\n",
        "69": "  public boolean addEdge(N nodeA, N nodeB) {\n",
        "70": "    checkNotNull(nodeA, \"nodeA\");\n",
        "71": "    checkNotNull(nodeB, \"nodeB\");\n",
        "72": "    checkArgument(allowsSelfLoops() || !nodeA.equals(nodeB), SELF_LOOPS_NOT_ALLOWED, nodeA);\n",
        "73": "    boolean containsN1 = containsNode(nodeA);\n",
        "74": "    boolean containsN2 = containsNode(nodeB);\n",
        "76": "    if (containsN1 && containsN2 && nodeConnections.get(nodeA).successors().contains(nodeB)) {\n",
        "80": "      addNode(nodeA);\n",
        "82": "    NodeAdjacencies<N> connectionsN1 = nodeConnections.get(nodeA);\n",
        "83": "    connectionsN1.addSuccessor(nodeB);\n",
        "85": "      addNode(nodeB);\n",
        "87": "    NodeAdjacencies<N> connectionsN2 = nodeConnections.get(nodeB);\n",
        "88": "    connectionsN2.addPredecessor(nodeA);\n",
        "115": "  public boolean removeEdge(Object nodeA, Object nodeB) {\n",
        "116": "    checkNotNull(nodeA, \"nodeA\");\n",
        "117": "    checkNotNull(nodeB, \"nodeB\");\n",
        "118": "    NodeAdjacencies<N> connectionsN1 = nodeConnections.get(nodeA);\n",
        "119": "    if (connectionsN1 == null || !connectionsN1.successors().contains(nodeB)) {\n",
        "122": "    NodeAdjacencies<N> connectionsN2 = nodeConnections.get(nodeB);\n",
        "123": "    connectionsN1.removeSuccessor(nodeB);\n",
        "124": "    connectionsN2.removePredecessor(nodeA);\n"
    },
    "removed": {
        "59": "   * Add an edge between {@code node1} and {@code node2}; if these nodes are not already\n",
        "61": "   * Return {@code false} if an edge already exists between {@code node1} and {@code node2},\n",
        "64": "   * @throws IllegalArgumentException if self-loops are not allowed, and {@code node1} is equal to\n",
        "65": "   *     {@code node2}.\n",
        "69": "  public boolean addEdge(N node1, N node2) {\n",
        "70": "    checkNotNull(node1, \"node1\");\n",
        "71": "    checkNotNull(node2, \"node2\");\n",
        "72": "    checkArgument(allowsSelfLoops() || !node1.equals(node2), SELF_LOOPS_NOT_ALLOWED, node1);\n",
        "73": "    boolean containsN1 = containsNode(node1);\n",
        "74": "    boolean containsN2 = containsNode(node2);\n",
        "76": "    if (containsN1 && containsN2 && nodeConnections.get(node1).successors().contains(node2)) {\n",
        "80": "      addNode(node1);\n",
        "82": "    NodeAdjacencies<N> connectionsN1 = nodeConnections.get(node1);\n",
        "83": "    connectionsN1.addSuccessor(node2);\n",
        "85": "      addNode(node2);\n",
        "87": "    NodeAdjacencies<N> connectionsN2 = nodeConnections.get(node2);\n",
        "88": "    connectionsN2.addPredecessor(node1);\n",
        "115": "  public boolean removeEdge(Object node1, Object node2) {\n",
        "116": "    checkNotNull(node1, \"node1\");\n",
        "117": "    checkNotNull(node2, \"node2\");\n",
        "118": "    NodeAdjacencies<N> connectionsN1 = nodeConnections.get(node1);\n",
        "119": "    if (connectionsN1 == null || !connectionsN1.successors().contains(node2)) {\n",
        "122": "    NodeAdjacencies<N> connectionsN2 = nodeConnections.get(node2);\n",
        "123": "    connectionsN1.removeSuccessor(node2);\n",
        "124": "    connectionsN2.removePredecessor(node1);\n"
    }
}