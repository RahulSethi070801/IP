[{"func":{"oldfunccode":"7fbd99f23566e293a6b89db4639b91e31b6053b8/Codes/Match_oldfunccode_7fbd99f23566e293a6b89db4639b91e31b6053b8_1.txt","newfunccode":"7fbd99f23566e293a6b89db4639b91e31b6053b8/Codes/Match_newfunccode_7fbd99f23566e293a6b89db4639b91e31b6053b8_1.txt","newdoc":" We can't just call mergeEdgesFrom(graph, copy, edgePredicate) because addEdge() can add\n the edge's incident nodes if they are not present.\n","newJdoc":"7fbd99f23566e293a6b89db4639b91e31b6053b8/Codes/Match_newfuncnewJdoc_7fbd99f23566e293a6b89db4639b91e31b6053b8_1.txt","olddoc":" We can't just call mergeEdgesFrom(graph, copy, edgePredicate) because addEdge() can add\n the edge's incident nodes if they are not present.\n","oldJdoc":"7fbd99f23566e293a6b89db4639b91e31b6053b8/Codes/Match_oldfuncoldJdoc_7fbd99f23566e293a6b89db4639b91e31b6053b8_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/7fbd99f23566e293a6b89db4639b91e31b6053b8/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[172,173,174,175],"dellines":[199,200,201,202,203,204],"addcode":["    for (E edge : Sets.filter(graph.edges(), edgePredicate)) {\n","      Endpoints<N> endpoints = graph.incidentNodes(edge);\n","      if (copy.nodes().containsAll(endpoints)) {\n","        addEdge(copy, edge, endpoints);\n"],"delcode":["    for (E edge : graph.edges()) {\n","      if (edgePredicate.apply(edge)) {\n","        Set<N> incidentNodes = graph.incidentNodes(edge);\n","        if (copy.nodes().containsAll(incidentNodes)) {\n","          addEdge(copy, edge, incidentNodes);\n","        }\n"],"methodSig":"public static MutableNetwork<N, E> copyOf(Network<N, E> graph, Predicate<? super N> nodePredicate, Predicate<? super E> edgePredicate)"},"doc":{"oldfunccode":"7fbd99f23566e293a6b89db4639b91e31b6053b8/Codes/Match_olddocfunccode_7fbd99f23566e293a6b89db4639b91e31b6053b8_1.txt","newfunccode":"7fbd99f23566e293a6b89db4639b91e31b6053b8/Codes/Match_newdocfunccode_7fbd99f23566e293a6b89db4639b91e31b6053b8_1.txt","newdoc":"","newJdoc":"7fbd99f23566e293a6b89db4639b91e31b6053b8/Codes/Match_newdocnewJdoc_7fbd99f23566e293a6b89db4639b91e31b6053b8_1.txt","olddoc":"","oldJdoc":"7fbd99f23566e293a6b89db4639b91e31b6053b8/Codes/Match_olddocJdoc_7fbd99f23566e293a6b89db4639b91e31b6053b8_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/7fbd99f23566e293a6b89db4639b91e31b6053b8/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[224,223],"dellines":[224,223],"addcode":["   * {@linkplain Endpoints#source() source}, and an {@linkplain #inEdges(Object) incoming edge}\n","   * of its {@linkplain Endpoints#target() target}. An undirected edge connects its\n"],"delcode":["   * {@linkplain #source(Object) source}, and an {@linkplain #inEdges(Object) incoming edge} of its\n","   * {@linkplain #target(Object) target}. An undirected edge connects its\n"],"methodSig":" boolean isDirected()"},"id":5,"flag":1,"commit":"7fbd99f23566e293a6b89db4639b91e31b6053b8"},{"func":{"oldfunccode":"7fbd99f23566e293a6b89db4639b91e31b6053b8/Codes/Match_oldfunccode_7fbd99f23566e293a6b89db4639b91e31b6053b8_2.txt","newfunccode":"7fbd99f23566e293a6b89db4639b91e31b6053b8/Codes/Match_newfunccode_7fbd99f23566e293a6b89db4639b91e31b6053b8_2.txt","newdoc":" TODO(b/28087289): update this when parallel edges are permitted to ensure that the correct\n multiplicity is preserved.\n","newJdoc":"7fbd99f23566e293a6b89db4639b91e31b6053b8/Codes/Match_newfuncnewJdoc_7fbd99f23566e293a6b89db4639b91e31b6053b8_2.txt","olddoc":" TODO(b/28087289): update this when parallel edges are permitted to ensure that the correct\n multiplicity is preserved.\n","oldJdoc":"7fbd99f23566e293a6b89db4639b91e31b6053b8/Codes/Match_oldfuncoldJdoc_7fbd99f23566e293a6b89db4639b91e31b6053b8_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/7fbd99f23566e293a6b89db4639b91e31b6053b8/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[116,117,118,119],"dellines":[144,145,146,139,140,141,142,143],"addcode":["    for (N node : Sets.filter(graph.nodes(), nodePredicate)) {\n","      copy.addNode(node);\n","      for (N successor : Sets.filter(graph.successors(node), nodePredicate)) {\n","        copy.addEdge(node, successor);\n"],"delcode":["    for (N node : graph.nodes()) {\n","      if (nodePredicate.apply(node)) {\n","        copy.addNode(node);\n","        for (N successor : graph.successors(node)) {\n","          if (nodePredicate.apply(successor)) {\n","            copy.addEdge(node, successor);\n","          }\n","        }\n"],"methodSig":"public static MutableGraph<N> copyOf(Graph<N> graph, Predicate<? super N> nodePredicate)"},"doc":{"oldfunccode":"7fbd99f23566e293a6b89db4639b91e31b6053b8/Codes/Match_olddocfunccode_7fbd99f23566e293a6b89db4639b91e31b6053b8_2.txt","newfunccode":"7fbd99f23566e293a6b89db4639b91e31b6053b8/Codes/Match_newdocfunccode_7fbd99f23566e293a6b89db4639b91e31b6053b8_2.txt","newdoc":"","newJdoc":"7fbd99f23566e293a6b89db4639b91e31b6053b8/Codes/Match_newdocnewJdoc_7fbd99f23566e293a6b89db4639b91e31b6053b8_2.txt","olddoc":"","oldJdoc":"7fbd99f23566e293a6b89db4639b91e31b6053b8/Codes/Match_olddocJdoc_7fbd99f23566e293a6b89db4639b91e31b6053b8_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/7fbd99f23566e293a6b89db4639b91e31b6053b8/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[224,223],"dellines":[224,223],"addcode":["   * {@linkplain Endpoints#source() source}, and an {@linkplain #inEdges(Object) incoming edge}\n","   * of its {@linkplain Endpoints#target() target}. An undirected edge connects its\n"],"delcode":["   * {@linkplain #source(Object) source}, and an {@linkplain #inEdges(Object) incoming edge} of its\n","   * {@linkplain #target(Object) target}. An undirected edge connects its\n"],"methodSig":" boolean isDirected()"},"id":5,"flag":1,"commit":"7fbd99f23566e293a6b89db4639b91e31b6053b8"},{"func":{"oldfunccode":"","newfunccode":"7fbd99f23566e293a6b89db4639b91e31b6053b8/Codes/Match_newfunccode_7fbd99f23566e293a6b89db4639b91e31b6053b8_3.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/7fbd99f23566e293a6b89db4639b91e31b6053b8/Endpoints","pathinproj":"guava/src/com/google/common/graph/Endpoints.java","addlines":[122,123,124,125],"dellines":[],"addcode":["  @Override\n","  public int size() {\n","    return 2;\n","  }\n"],"delcode":[],"methodSig":"public int size()"},"doc":{"oldfunccode":"7fbd99f23566e293a6b89db4639b91e31b6053b8/Codes/Match_olddocfunccode_7fbd99f23566e293a6b89db4639b91e31b6053b8_3.txt","newfunccode":"7fbd99f23566e293a6b89db4639b91e31b6053b8/Codes/Match_newdocfunccode_7fbd99f23566e293a6b89db4639b91e31b6053b8_3.txt","newdoc":"","newJdoc":"7fbd99f23566e293a6b89db4639b91e31b6053b8/Codes/Match_newdocnewJdoc_7fbd99f23566e293a6b89db4639b91e31b6053b8_3.txt","olddoc":"","oldJdoc":"7fbd99f23566e293a6b89db4639b91e31b6053b8/Codes/Match_olddocJdoc_7fbd99f23566e293a6b89db4639b91e31b6053b8_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/7fbd99f23566e293a6b89db4639b91e31b6053b8/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[224,223],"dellines":[224,223],"addcode":["   * {@linkplain Endpoints#source() source}, and an {@linkplain #inEdges(Object) incoming edge}\n","   * of its {@linkplain Endpoints#target() target}. An undirected edge connects its\n"],"delcode":["   * {@linkplain #source(Object) source}, and an {@linkplain #inEdges(Object) incoming edge} of its\n","   * {@linkplain #target(Object) target}. An undirected edge connects its\n"],"methodSig":" boolean isDirected()"},"id":5,"flag":1,"commit":"7fbd99f23566e293a6b89db4639b91e31b6053b8"}]