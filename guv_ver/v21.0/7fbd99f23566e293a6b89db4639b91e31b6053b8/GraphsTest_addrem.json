{
    "addition": {
        "76": "   * {@code graph}. A self-loop is defined as an edge whose pair of incident nodes are equal.\n",
        "77": "   * The predicate's {@code apply} method will throw an {@link IllegalArgumentException} if\n",
        "85": "        Endpoints<?> endpoints = graph.incidentNodes(edge);\n",
        "86": "        return endpoints.nodeA().equals(endpoints.nodeB());\n",
        "356": "  public void addEdge_mismatchedDirectedness() {\n",
        "358": "      addEdge(NetworkBuilder.undirected().<Integer, String>build(), E12,\n",
        "359": "          Endpoints.ofDirected(N1, N2));\n",
        "360": "      fail(\"Should have rejected adding an edge with directed endpoints to a undirected graph.\");\n",
        "367": "    MutableNetwork<Integer, String> undirectedGraph = NetworkBuilder.undirected().build();\n",
        "368": "    assertThat(addEdge(undirectedGraph, E11, Endpoints.ofUndirected(N1, N1))).isTrue();\n",
        "369": "    assertThat(undirectedGraph.edgesConnecting(N1, N1)).containsExactly(E11);\n",
        "375": "    assertThat(addEdge(directedGraph, E12, Endpoints.ofDirected(N1, N2))).isTrue();\n",
        "376": "    assertThat(directedGraph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "377": "    assertThat(directedGraph.edgesConnecting(N2, N1)).isEmpty();\n"
    },
    "removed": {
        "76": "   * {@code graph}. A self-loop is defined as an edge whose set of incident nodes has exactly one\n",
        "77": "   * element. The predicate's {@code apply} method will throw an {@link IllegalArgumentException} if\n",
        "85": "        return (graph.incidentNodes(edge).size() == 1);\n",
        "355": "  public void addEdge_nullGraph() {\n",
        "357": "      addEdge(null, E11, ImmutableSet.of(N1));\n",
        "358": "      fail(\"Should have rejected null graph\");\n",
        "359": "    } catch (NullPointerException expected) {\n",
        "360": "    }\n",
        "361": "  }\n",
        "362": "\n",
        "363": "  @Test\n",
        "364": "  public void addEdge_nullNodes() {\n",
        "365": "    try {\n",
        "366": "      addEdge(NetworkBuilder.directed().build(), E11, null);\n",
        "367": "      fail(\"Should have rejected null nodes\");\n",
        "368": "    } catch (NullPointerException expected) {\n",
        "369": "    }\n",
        "370": "  }\n",
        "371": "\n",
        "372": "  @Test\n",
        "373": "  public void addEdge_tooManyNodes() {\n",
        "374": "    try {\n",
        "375": "      addEdge(NetworkBuilder.directed().<Integer, String>build(), E11, ImmutableSet.of(N1, N2, N3));\n",
        "376": "      fail(\"Should have rejected adding an edge to a Graph with > 2 nodes\");\n",
        "377": "    } catch (IllegalArgumentException expected) {\n",
        "378": "    }\n",
        "379": "  }\n",
        "380": "\n",
        "381": "  @Test\n",
        "382": "  public void addEdge_notEnoughNodes() {\n",
        "383": "    try {\n",
        "384": "      addEdge(NetworkBuilder.directed().build(), E11, ImmutableSet.of());\n",
        "385": "      fail(\"Should have rejected adding an edge to a Graph with < 1 nodes\");\n",
        "392": "    MutableNetwork<Integer, String> directedGraph = NetworkBuilder.directed().build();\n",
        "393": "    assertThat(addEdge(directedGraph, E11, ImmutableSet.of(N1))).isTrue();\n",
        "394": "    assertThat(directedGraph.edges()).containsExactly(E11);\n",
        "395": "    assertThat(directedGraph.nodes()).containsExactly(N1);\n",
        "396": "    assertThat(directedGraph.incidentNodes(E11)).containsExactly(N1);\n",
        "402": "    assertThat(addEdge(directedGraph, E12, ImmutableSet.of(N1, N2))).isTrue();\n",
        "403": "    assertThat(directedGraph.edges()).containsExactly(E12);\n",
        "404": "    assertThat(directedGraph.nodes()).containsExactly(N1, N2).inOrder();\n",
        "405": "    assertThat(directedGraph.incidentNodes(E12)).containsExactly(N1, N2).inOrder();\n"
    }
}