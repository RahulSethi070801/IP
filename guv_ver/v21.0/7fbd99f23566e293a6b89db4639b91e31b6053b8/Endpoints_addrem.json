{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "import static com.google.common.graph.GraphErrorMessageUtils.NOT_AVAILABLE_ON_UNDIRECTED;\n",
        "21": "\n",
        "22": "import com.google.common.base.Objects;\n",
        "23": "import com.google.common.collect.ImmutableSet;\n",
        "24": "import com.google.common.collect.UnmodifiableIterator;\n",
        "25": "\n",
        "26": "import java.util.AbstractCollection;\n",
        "27": "import java.util.Collection;\n",
        "28": "import java.util.NoSuchElementException;\n",
        "29": "\n",
        "30": "/**\n",
        "31": " * An immutable {@link Collection} to represent the endpoints of an edge in a graph.\n",
        "32": " * <p>\n",
        "33": " * If an {@link Endpoints} is directed, it is an ordered pair of nodes (source and target).\n",
        "34": " * Otherwise, it is an unordered pair of nodes that can be accessed through the iterator.\n",
        "35": " *\n",
        "36": " * @author James Sexton\n",
        "37": " * @since 20.0\n",
        "38": " */\n",
        "39": "public abstract class Endpoints<N> extends AbstractCollection<N> {\n",
        "40": "  private final N nodeA;\n",
        "41": "  private final N nodeB;\n",
        "42": "\n",
        "43": "  private Endpoints(N nodeA, N nodeB) {\n",
        "44": "    this.nodeA = checkNotNull(nodeA);\n",
        "45": "    this.nodeB = checkNotNull(nodeB);\n",
        "46": "  }\n",
        "47": "\n",
        "48": "  /**\n",
        "49": "   * Returns an {@link Endpoints} representing the endpoints of a directed edge.\n",
        "50": "   */\n",
        "51": "  public static <N> Endpoints<N> ofDirected(N source, N target) {\n",
        "52": "    return new Directed<N>(source, target);\n",
        "53": "  }\n",
        "54": "\n",
        "55": "  /**\n",
        "56": "   * Returns an {@link Endpoints} representing the endpoints of an undirected edge.\n",
        "57": "   */\n",
        "58": "  public static <N> Endpoints<N> ofUndirected(N nodeA, N nodeB) {\n",
        "59": "    return new Undirected<N>(nodeA, nodeB);\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  /**\n",
        "63": "   * Returns whether the nodes of this {@link Endpoints} are ordered. Generally, this is equal to\n",
        "64": "   * {@link Graph#isDirected()} of the graph that generated this {@link Endpoints}.\n",
        "65": "   */\n",
        "66": "  public abstract boolean isDirected();\n",
        "67": "\n",
        "68": "  /**\n",
        "69": "   * If this {@link Endpoints} is directed, returns the node which is the source.\n",
        "70": "   *\n",
        "71": "   * @throws UnsupportedOperationException if this Endpoints is not directed\n",
        "72": "   */\n",
        "73": "  public abstract N source();\n",
        "74": "\n",
        "75": "  /**\n",
        "76": "   * If this {@link Endpoints} is directed, returns the node which is the target.\n",
        "77": "   *\n",
        "78": "   * @throws UnsupportedOperationException if this Endpoints is not directed\n",
        "79": "   */\n",
        "80": "  public abstract N target();\n",
        "81": "\n",
        "82": "  /**\n",
        "83": "   * If this {@link Endpoints} is directed, returns the node which is the source.\n",
        "84": "   * Otherwise, returns an arbitrary (but consistent) endpoint of the edge.\n",
        "85": "   */\n",
        "86": "  N nodeA() {\n",
        "87": "    return nodeA;\n",
        "88": "  }\n",
        "89": "\n",
        "90": "  /**\n",
        "91": "   * Returns the node that is opposite {@link #nodeA()}. In the directed case, this is the target.\n",
        "92": "   */\n",
        "93": "  N nodeB() {\n",
        "94": "    return nodeB;\n",
        "95": "  }\n",
        "96": "\n",
        "97": "  @Override\n",
        "98": "  public UnmodifiableIterator<N> iterator() {\n",
        "99": "    return new UnmodifiableIterator<N>() {\n",
        "100": "      private int pos = 0;\n",
        "101": "\n",
        "102": "      @Override\n",
        "103": "      public boolean hasNext() {\n",
        "104": "        return pos < 2;\n",
        "105": "      }\n",
        "106": "\n",
        "107": "      @Override\n",
        "108": "      public N next() {\n",
        "109": "        switch (pos++) {\n",
        "110": "          case 0:\n",
        "111": "            return nodeA;\n",
        "112": "          case 1:\n",
        "113": "            return nodeB;\n",
        "114": "          default:\n",
        "115": "            pos = 2;\n",
        "116": "            throw new NoSuchElementException();\n",
        "117": "        }\n",
        "118": "      }\n",
        "119": "    };\n",
        "120": "  }\n",
        "121": "\n",
        "122": "  @Override\n",
        "123": "  public int size() {\n",
        "124": "    return 2;\n",
        "125": "  }\n",
        "126": "\n",
        "127": "  @Override\n",
        "128": "  public boolean contains(Object obj) {\n",
        "129": "    return nodeA.equals(obj) || nodeB.equals(obj);\n",
        "130": "  }\n",
        "131": "\n",
        "132": "  /**\n",
        "133": "   * If two {@link Endpoints}s are directed, the source and target must be equal to be considered\n",
        "134": "   * equal. If two {@link Endpoints}s are undirected, the unordered set of nodes must be equal to be\n",
        "135": "   * considered equal. Directed {@link Endpoints} are never equal to undirected {@link Endpoints}.\n",
        "136": "   */\n",
        "137": "  @Override\n",
        "138": "  public abstract boolean equals(Object obj);\n",
        "139": "\n",
        "140": "  @Override\n",
        "141": "  public abstract int hashCode();\n",
        "142": "\n",
        "143": "  private static final class Directed<N> extends Endpoints<N> {\n",
        "144": "    private Directed(N source, N target) {\n",
        "145": "      super(source, target);\n",
        "146": "    }\n",
        "147": "\n",
        "148": "    @Override\n",
        "149": "    public boolean isDirected() {\n",
        "150": "      return true;\n",
        "151": "    }\n",
        "152": "\n",
        "153": "    @Override\n",
        "154": "    public N source() {\n",
        "155": "      return nodeA();\n",
        "156": "    }\n",
        "157": "\n",
        "158": "    @Override\n",
        "159": "    public N target() {\n",
        "160": "      return nodeB();\n",
        "161": "    }\n",
        "162": "\n",
        "163": "    @Override\n",
        "164": "    public boolean equals(Object obj) {\n",
        "165": "      if (obj == this) {\n",
        "166": "        return true;\n",
        "167": "      }\n",
        "168": "      if (!(obj instanceof Directed)) {\n",
        "169": "        return false;\n",
        "170": "      }\n",
        "171": "      Directed<?> other = (Directed<?>) obj;\n",
        "172": "      return source().equals(other.source()) && target().equals(other.target());\n",
        "173": "    }\n",
        "174": "\n",
        "175": "    @Override\n",
        "176": "    public int hashCode() {\n",
        "177": "      return Objects.hashCode(source(), target());\n",
        "178": "    }\n",
        "179": "\n",
        "180": "    @Override\n",
        "181": "    public String toString() {\n",
        "182": "      return String.format(\"<%s -> %s>\", source(), target());\n",
        "183": "    }\n",
        "184": "  }\n",
        "185": "\n",
        "186": "  private static final class Undirected<N> extends Endpoints<N> {\n",
        "187": "    private Undirected(N nodeA, N nodeB) {\n",
        "188": "      super(nodeA, nodeB);\n",
        "189": "    }\n",
        "190": "\n",
        "191": "    @Override\n",
        "192": "    public boolean isDirected() {\n",
        "193": "      return false;\n",
        "194": "    }\n",
        "195": "\n",
        "196": "    @Override\n",
        "197": "    public N source() {\n",
        "198": "      throw new UnsupportedOperationException(NOT_AVAILABLE_ON_UNDIRECTED);\n",
        "199": "    }\n",
        "200": "\n",
        "201": "    @Override\n",
        "202": "    public N target() {\n",
        "203": "      throw new UnsupportedOperationException(NOT_AVAILABLE_ON_UNDIRECTED);\n",
        "204": "    }\n",
        "205": "\n",
        "206": "    @Override\n",
        "207": "    public boolean equals(Object obj) {\n",
        "208": "      if (obj == this) {\n",
        "209": "        return true;\n",
        "210": "      }\n",
        "211": "      if (!(obj instanceof Undirected)) {\n",
        "212": "        return false;\n",
        "213": "      }\n",
        "214": "      Undirected<?> other = (Undirected<?>) obj;\n",
        "215": "      return (nodeA().equals(other.nodeA()) && nodeB().equals(other.nodeB()))\n",
        "216": "          || (nodeA().equals(other.nodeB()) && nodeB().equals(other.nodeA()));\n",
        "217": "    }\n",
        "218": "\n",
        "219": "    @Override\n",
        "220": "    public int hashCode() {\n",
        "221": "      return nodeA().hashCode() ^ nodeB().hashCode();\n",
        "222": "    }\n",
        "223": "\n",
        "224": "    @Override\n",
        "225": "    public String toString() {\n",
        "226": "      // TODO(b/29393648): Update tests so we can remove this method (defer to AbstractCollection).\n",
        "227": "      return ImmutableSet.copyOf(this).toString();\n",
        "228": "    }\n",
        "229": "  }\n",
        "230": "}\n"
    },
    "removed": {}
}