{
    "addition": {
        "86": "  static final String ERROR_MODIFIABLE_COLLECTION =\n",
        "87": "      \"Collection returned is unexpectedly modifiable\";\n",
        "168": "      Endpoints<Integer> endpoints = graph.incidentNodes(edge);\n",
        "169": "      Integer nodeA = endpoints.nodeA();\n",
        "170": "      Integer nodeB = endpoints.nodeB();\n",
        "171": "      assertThat(graph.edgesConnecting(nodeA, nodeB)).contains(edge);\n",
        "172": "      assertThat(graph.successors(nodeA)).contains(nodeB);\n",
        "173": "      assertThat(graph.adjacentNodes(nodeA)).contains(nodeB);\n",
        "174": "      assertThat(graph.outEdges(nodeA)).contains(edge);\n",
        "175": "      assertThat(graph.incidentEdges(nodeA)).contains(edge);\n",
        "176": "      assertThat(graph.predecessors(nodeB)).contains(nodeA);\n",
        "177": "      assertThat(graph.adjacentNodes(nodeB)).contains(nodeA);\n",
        "178": "      assertThat(graph.inEdges(nodeB)).contains(edge);\n",
        "179": "      assertThat(graph.incidentEdges(nodeB)).contains(edge);\n",
        "201": "        assertThat(graph.outEdges(Graphs.oppositeNode(graph, inEdge, node))).contains(inEdge);\n",
        "206": "        assertThat(graph.inEdges(Graphs.oppositeNode(graph, outEdge, node))).contains(outEdge);\n"
    },
    "removed": {
        "33": "import java.util.Iterator;\n",
        "34": "\n",
        "88": "  static final String ERROR_MODIFIABLE_SET = \"Set returned is unexpectedly modifiable\";\n",
        "169": "      if (!(graph instanceof Hypergraph)) {\n",
        "170": "        Iterator<Integer> incidentNodesIterator = graph.incidentNodes(edge).iterator();\n",
        "171": "        Integer node1 = incidentNodesIterator.next();\n",
        "172": "        Integer node2 = incidentNodesIterator.hasNext() ? incidentNodesIterator.next() : node1;\n",
        "173": "        assertFalse(incidentNodesIterator.hasNext());\n",
        "174": "        assertThat(graph.edgesConnecting(node1, node2)).contains(edge);\n",
        "175": "        assertThat(graph.successors(node1)).contains(node2);\n",
        "176": "        assertThat(graph.adjacentNodes(node1)).contains(node2);\n",
        "177": "        assertThat(graph.outEdges(node1)).contains(edge);\n",
        "178": "        assertThat(graph.incidentEdges(node1)).contains(edge);\n",
        "179": "        assertThat(graph.predecessors(node2)).contains(node1);\n",
        "180": "        assertThat(graph.adjacentNodes(node2)).contains(node1);\n",
        "181": "        assertThat(graph.inEdges(node2)).contains(edge);\n",
        "182": "        assertThat(graph.incidentEdges(node2)).contains(edge);\n",
        "183": "      }\n",
        "205": "        if (!(graph instanceof Hypergraph)) {\n",
        "206": "          assertThat(graph.outEdges(Graphs.oppositeNode(graph, inEdge, node))).contains(inEdge);\n",
        "207": "        }\n",
        "212": "        if (!(graph instanceof Hypergraph)) {\n",
        "213": "          assertThat(graph.inEdges(Graphs.oppositeNode(graph, outEdge, node))).contains(outEdge);\n",
        "214": "        }\n"
    }
}