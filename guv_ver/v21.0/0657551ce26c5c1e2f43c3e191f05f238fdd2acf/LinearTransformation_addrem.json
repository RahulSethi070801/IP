{
    "addition": {
        "100": "   * (The inverse of this will be a horizontal transformation.)\n",
        "109": "   * (The inverse of this will be a vertical transformation.)\n",
        "119": "   * and {@link #isVertical} methods return {@code false} and the {@link #slope}, and\n",
        "120": "   * {@link #transform} methods all return {@link Double#NaN}. The {@link #inverse} method returns\n",
        "121": "   * the same instance.\n",
        "148": "  public abstract double transform(double x);\n",
        "151": "   * Returns the inverse linear transformation. The inverse of a horizontal transformation is a\n",
        "152": "   * vertical transformation, and vice versa. The inverse of the {@link #forNaN} transformation is\n",
        "153": "   * itself. In all other cases, the inverse is a transformation such that applying both the\n",
        "154": "   * original transformation and its inverse to a value gives you the original value give-or-take\n",
        "155": "   * numerical errors. Calling this method multiple times on the same instance will always return\n",
        "156": "   * the same instance. Calling this method on the result of calling this method on an instance will\n",
        "157": "   * always return that original instance.\n",
        "159": "  public abstract LinearTransformation inverse();\n",
        "166": "    LinearTransformation inverse;\n",
        "167": "\n",
        "171": "      this.inverse = null; // to be lazily initialized\n",
        "172": "    }\n",
        "173": "\n",
        "174": "    RegularLinearTransformation(double slope, double yIntercept, LinearTransformation inverse) {\n",
        "175": "      this.slope = slope;\n",
        "176": "      this.yIntercept = yIntercept;\n",
        "177": "      this.inverse = inverse;\n",
        "196": "    public double transform(double x) {\n",
        "201": "    public LinearTransformation inverse() {\n",
        "202": "      LinearTransformation result = inverse;\n",
        "203": "      return (result == null) ? inverse = createInverse() : result;\n",
        "210": "\n",
        "211": "    private LinearTransformation createInverse() {\n",
        "212": "      if (slope != 0.0) {\n",
        "213": "        return new RegularLinearTransformation(1.0 / slope, -1.0 * yIntercept / slope, this);\n",
        "214": "      } else {\n",
        "215": "        return new VerticalLinearTransformation(yIntercept, this);\n",
        "216": "      }\n",
        "217": "    }\n",
        "224": "    LinearTransformation inverse;\n",
        "225": "\n",
        "228": "      this.inverse = null; // to be lazily initialized\n",
        "229": "    }\n",
        "230": "\n",
        "231": "    VerticalLinearTransformation(double x, LinearTransformation inverse) {\n",
        "232": "      this.x = x;\n",
        "233": "      this.inverse = inverse;\n",
        "252": "    public double transform(double x) {\n",
        "257": "    public LinearTransformation inverse() {\n",
        "258": "      LinearTransformation result = inverse;\n",
        "259": "      return (result == null) ? inverse = createInverse() : result;\n",
        "266": "\n",
        "267": "    private LinearTransformation createInverse() {\n",
        "268": "      return new RegularLinearTransformation(0.0, x, this);\n",
        "269": "    }\n",
        "292": "    public double transform(double x) {\n",
        "297": "    public LinearTransformation inverse() {\n",
        "298": "      return this;\n"
    },
    "removed": {
        "18": "import static com.google.common.base.Preconditions.checkState;\n",
        "118": "   * and {@link #isVertical} methods return {@code false} and the {@link #slope},\n",
        "119": "   * {@link #transformX}, and {@link #transformY} methods all return {@link Double#NaN}.\n",
        "146": "  public abstract double transformX(double x);\n",
        "149": "   * Returns the {@code x} corresponding to the given {@code y}. This must not be called on a\n",
        "150": "   * horizontal transformation (i.e. when {@link #isHorizontal()} is true).\n",
        "152": "  public abstract double transformY(double y);\n",
        "180": "    public double transformX(double x) {\n",
        "185": "    public double transformY(double y) {\n",
        "186": "      checkState(slope != 0.0);\n",
        "187": "      return (y - yIntercept) / slope;\n",
        "220": "    public double transformX(double x) {\n",
        "225": "    public double transformY(double y) {\n",
        "226": "      return x;\n",
        "255": "    public double transformX(double x) {\n",
        "260": "    public double transformY(double y) {\n",
        "261": "      return NaN;\n"
    }
}