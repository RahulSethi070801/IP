{
    "addition": {
        "281": "   * <p><b>Warning:</b> you should only use this method if you are well familiar with the practical\n",
        "282": "   * consequences of soft references.\n",
        "323": "   * evicted immediately. It can be useful in testing, or to disable caching temporarily without\n",
        "376": "   * evicted immediately. It can be useful in testing, or to disable caching temporarily without\n"
    },
    "removed": {
        "118": "  int maximumSize = UNSET_INT;\n",
        "185": "  /**\n",
        "186": "   * Specifies the maximum number of entries the map may contain. Note that the map <b>may evict an\n",
        "187": "   * entry before this limit is exceeded</b>. As the map size grows close to the maximum, the map\n",
        "188": "   * evicts entries that are less likely to be used again. For example, the map may evict an entry\n",
        "189": "   * because it hasn't been used recently or very often.\n",
        "190": "   *\n",
        "191": "   * <p>When {@code size} is zero, elements can be successfully added to the map, but are evicted\n",
        "192": "   * immediately. This has the same effect as invoking {@link #expireAfterWrite expireAfterWrite}\n",
        "193": "   * {@code (0, unit)}. It can be useful in testing, or to disable caching temporarily without\n",
        "194": "   * a code change.\n",
        "195": "   *\n",
        "196": "   * @param size the maximum size of the map\n",
        "197": "   * @throws IllegalArgumentException if {@code size} is negative\n",
        "198": "   * @throws IllegalStateException if a maximum size was already set\n",
        "199": "   */\n",
        "200": "  @CanIgnoreReturnValue\n",
        "201": "  @Override\n",
        "202": "  MapMaker maximumSize(int size) {\n",
        "203": "    checkState(\n",
        "204": "        this.maximumSize == UNSET_INT, \"maximum size was already set to %s\", this.maximumSize);\n",
        "205": "    checkArgument(size >= 0, \"maximum size must not be negative\");\n",
        "206": "    this.maximumSize = size;\n",
        "207": "    this.useCustomMap = true;\n",
        "208": "    if (maximumSize == 0) {\n",
        "209": "      this.evictImmediately = true;\n",
        "210": "    }\n",
        "211": "    return this;\n",
        "212": "  }\n",
        "213": "\n",
        "311": "   * <p><b>Warning:</b> in most circumstances it is better to set a per-cache\n",
        "312": "   * {@linkplain #maximumSize maximum size} instead of using soft references. You should only use\n",
        "313": "   * this method if you are well familiar with the practical consequences of soft references.\n",
        "354": "   * evicted immediately. This has a very similar effect to invoking {@link #maximumSize\n",
        "355": "   * maximumSize}{@code (0)}. It can be useful in testing, or to disable caching temporarily without\n",
        "408": "   * evicted immediately. This has a very similar effect to invoking {@link #maximumSize\n",
        "409": "   * maximumSize}{@code (0)}. It can be useful in testing, or to disable caching temporarily without\n",
        "553": "    if (maximumSize != UNSET_INT) {\n",
        "554": "      s.add(\"maximumSize\", maximumSize);\n",
        "555": "    }\n"
    }
}