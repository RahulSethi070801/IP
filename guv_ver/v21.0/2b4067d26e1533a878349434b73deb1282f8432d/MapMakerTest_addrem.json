{
    "addition": {},
    "removed": {
        "137": "    public void testMaximumSize_setTwice() {\n",
        "138": "      MapMaker maker = new MapMaker().maximumSize(16);\n",
        "139": "      try {\n",
        "140": "        // even to the same value is not allowed\n",
        "141": "        maker.maximumSize(16);\n",
        "142": "        fail();\n",
        "143": "      } catch (IllegalStateException expected) {\n",
        "144": "      }\n",
        "145": "    }\n",
        "146": "\n",
        "155": "  /** Tests of the built map with maximumSize. */\n",
        "156": "  public static class MaximumSizeTest extends TestCase {\n",
        "157": "    public void testPut_sizeIsZero() {\n",
        "158": "      ConcurrentMap<Object, Object> map =\n",
        "159": "          new MapMaker().maximumSize(0).makeMap();\n",
        "160": "      assertEquals(0, map.size());\n",
        "161": "      map.put(new Object(), new Object());\n",
        "162": "      assertEquals(0, map.size());\n",
        "163": "    }\n",
        "164": "\n",
        "165": "    public void testSizeBasedEviction() {\n",
        "166": "      int numKeys = 10;\n",
        "167": "      int mapSize = 5;\n",
        "168": "      ConcurrentMap<Object, Object> map =\n",
        "169": "          new MapMaker().maximumSize(mapSize).makeMap();\n",
        "170": "      for (int i = 0; i < numKeys; i++) {\n",
        "171": "        map.put(i, i);\n",
        "172": "      }\n",
        "173": "      assertEquals(mapSize, map.size());\n",
        "174": "      for (int i = numKeys - mapSize; i < mapSize; i++) {\n",
        "175": "        assertTrue(map.containsKey(i));\n",
        "176": "      }\n",
        "177": "    }\n",
        "178": "  }\n",
        "179": "\n"
    }
}