[{"func":{"oldfunccode":"d1bcf31967d6070df7d65a181af62e5b9e3665e6/Codes_neg/Match_oldfunccode_d1bcf31967d6070df7d65a181af62e5b9e3665e6_1.txt","newfunccode":"d1bcf31967d6070df7d65a181af62e5b9e3665e6/Codes_neg/Match_newfunccode_d1bcf31967d6070df7d65a181af62e5b9e3665e6_1.txt","newdoc":" The only cases in which this Future should already be done are (a) if it was cancelled or\n (b) if an input failed and we propagated that immediately because of allMustSucceed.\n this.cancel propagates the cancellation to children; we use super.cancel to set our\n own state but let the input futures keep running as some of them may be used\n elsewhere.\n We always get the result so that we can have fail-fast, even if we don't collect\n","newJdoc":"d1bcf31967d6070df7d65a181af62e5b9e3665e6/Codes_neg/Match_newfuncnewJdoc_d1bcf31967d6070df7d65a181af62e5b9e3665e6_1.txt","olddoc":" The only cases in which this Future should already be done are (a) if it was cancelled or\n (b) if an input failed and we propagated that immediately because of allMustSucceed.\n this.cancel propagates the cancellation to children; we use super.cancel to set our\n own state but let the input futures keep running as some of them may be used\n elsewhere.\n We always get the result so that we can have fail-fast, even if we don't collect\n","oldJdoc":"d1bcf31967d6070df7d65a181af62e5b9e3665e6/Codes_neg/Match_oldfuncoldJdoc_d1bcf31967d6070df7d65a181af62e5b9e3665e6_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/d1bcf31967d6070df7d65a181af62e5b9e3665e6/AggregateFuture","pathinproj":"guava/src/com/google/common/util/concurrent/AggregateFuture.java","addlines":[226,232],"dellines":[226,232],"addcode":["            InputT result = getDone(future);\n","          collectOneValue(allMustSucceed, index, getDone(future));\n"],"delcode":["            InputT result = getUninterruptibly(future);\n","          collectOneValue(allMustSucceed, index, getUninterruptibly(future));\n"],"methodSig":"private void handleOneInputDone(int index, Future<? extends InputT> future)"},"doc":{"oldfunccode":"d1bcf31967d6070df7d65a181af62e5b9e3665e6/Codes_neg/Match_olddocfunccode_d1bcf31967d6070df7d65a181af62e5b9e3665e6_1.txt","newfunccode":"d1bcf31967d6070df7d65a181af62e5b9e3665e6/Codes_neg/Match_newdocfunccode_d1bcf31967d6070df7d65a181af62e5b9e3665e6_1.txt","newdoc":"","newJdoc":"d1bcf31967d6070df7d65a181af62e5b9e3665e6/Codes_neg/Match_newdocnewJdoc_d1bcf31967d6070df7d65a181af62e5b9e3665e6_1.txt","olddoc":"","oldJdoc":"d1bcf31967d6070df7d65a181af62e5b9e3665e6/Codes_neg/Match_olddocJdoc_d1bcf31967d6070df7d65a181af62e5b9e3665e6_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/d1bcf31967d6070df7d65a181af62e5b9e3665e6/Uninterruptibles","pathinproj":"guava/src/com/google/common/util/concurrent/Uninterruptibles.java","addlines":[128,129,130,131,132,122,124,125,126,127],"dellines":[122,123,125,126],"addcode":["   * Invokes {@code future.}{@link Future#get() get()} uninterruptibly.\n","   * <p>Similar methods:\n","   *\n","   * <ul>\n","   * <li>To retrieve a result from a {@code Future} that is already done, use\n","   *     {@link Futures#getDone Futures.getDone}.\n","   * <li>To treat {@link InterruptedException} uniformly with other exceptions, use\n","   *     {@link Futures#getChecked(Future, Class) Futures.getChecked}.\n","   * <li>To get uninterruptibility and remove checked exceptions, use {@link Futures#getUnchecked}.\n","   * </ul>\n"],"delcode":["   * Invokes {@code future.}{@link Future#get() get()} uninterruptibly. To get uninterruptibility\n","   * and remove checked exceptions, see {@link Futures#getUnchecked}.\n","   * <p>If instead, you wish to treat {@link InterruptedException} uniformly with other exceptions,\n","   * see {@link Futures#getChecked(Future, Class) Futures.getChecked}.\n"],"methodSig":"public static V getUninterruptibly(Future<V> future) throws ExecutionException"},"id":1,"flag":1,"commit":"d1bcf31967d6070df7d65a181af62e5b9e3665e6"}]