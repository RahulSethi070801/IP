{"id": "d1bcf31967d6070df7d65a181af62e5b9e3665e6", "code": [{"0": "guava-tests/test/com/google/common/util/concurrent/FuturesTest.java", "added": {"1": ["  /*\n", "   * Android does not handle this stack overflow gracefully... though somehow some other\n", "   * stack-overflow tests work. It must depend on the exact place the error occurs.\n", "   */\n", "  @AndroidIncompatible\n"], "2": ["   * Android does not handle this stack overflow gracefully... though somehow some other\n"]}, "removed": {"2": ["   * Android does not handle this stack overflow gracefully... though somehow the other two\n"]}, "added_lines": {"1": [293, 294, 295, 296, 297], "2": [535]}, "removed_lines": {"2": [530]}}, {"1": "guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java", "added": {"1": ["import static com.google.common.util.concurrent.Futures.getDone;\n"], "2": ["      sourceResult = getDone(localInputFuture);\n"]}, "removed": {"1": ["import static com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly;\n"], "2": ["      sourceResult = getUninterruptibly(localInputFuture);\n"]}, "added_lines": {"1": [18], "2": [108]}, "removed_lines": {"1": [21], "2": [108]}}, {"2": "guava/src/com/google/common/util/concurrent/AbstractFuture.java", "added": {"1": ["import static com.google.common.util.concurrent.Futures.getDone;\n"], "2": ["        V v = getDone(future);\n"]}, "removed": {"2": ["        V v = Uninterruptibles.getUninterruptibly(future);\n"]}, "added_lines": {"1": [19], "2": [734]}, "removed_lines": {"2": [733]}}, {"3": "guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java", "added": {"1": ["import static com.google.common.util.concurrent.Futures.getDone;\n"], "2": ["      sourceResult = getDone(localInputFuture);\n"]}, "removed": {"1": ["import static com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly;\n"], "2": ["      sourceResult = getUninterruptibly(localInputFuture);\n"]}, "added_lines": {"1": [18], "2": [103]}, "removed_lines": {"1": [20], "2": [103]}}, {"4": "guava/src/com/google/common/util/concurrent/AggregateFuture.java", "added": {"1": ["import static com.google.common.util.concurrent.Futures.getDone;\n"], "2": ["            InputT result = getDone(future);\n", "          collectOneValue(allMustSucceed, index, getDone(future));\n"]}, "removed": {"1": ["import static com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly;\n"], "2": ["            InputT result = getUninterruptibly(future);\n", "          collectOneValue(allMustSucceed, index, getUninterruptibly(future));\n"]}, "added_lines": {"1": [19], "2": [226, 232]}, "removed_lines": {"1": [20], "2": [226, 232]}}, {"5": "guava/src/com/google/common/util/concurrent/Futures.java", "added": {"1": ["              value = getDone(future);\n"], "2": ["    checkState(future.isDone(), \"Future was expected to be done: %s\", future);\n"]}, "removed": {"1": ["              value = getUninterruptibly(future);\n"], "2": ["    checkState(future.isDone());\n"]}, "added_lines": {"1": [1121], "2": [1170]}, "removed_lines": {"1": [1121], "2": [1170]}}, {"6": "guava/src/com/google/common/util/concurrent/Uninterruptibles.java", "added": {"1": ["   * Invokes {@code future.}{@link Future#get() get()} uninterruptibly.\n", "   * <p>Similar methods:\n", "   *\n", "   * <ul>\n", "   * <li>To retrieve a result from a {@code Future} that is already done, use\n", "   *     {@link Futures#getDone Futures.getDone}.\n", "   * <li>To treat {@link InterruptedException} uniformly with other exceptions, use\n", "   *     {@link Futures#getChecked(Future, Class) Futures.getChecked}.\n", "   * <li>To get uninterruptibility and remove checked exceptions, use {@link Futures#getUnchecked}.\n", "   * </ul>\n"], "2": ["   * <p>Similar methods:\n", "   *\n", "   * <ul>\n", "   * <li>To retrieve a result from a {@code Future} that is already done, use\n", "   *     {@link Futures#getDone Futures.getDone}.\n", "   * <li>To treat {@link InterruptedException} uniformly with other exceptions, use\n", "   *     {@link Futures#getChecked(Future, Class, long, TimeUnit) Futures.getChecked}.\n", "   * <li>To get uninterruptibility and remove checked exceptions, use {@link Futures#getUnchecked}.\n", "   * </ul>\n"]}, "removed": {"1": ["   * Invokes {@code future.}{@link Future#get() get()} uninterruptibly. To get uninterruptibility\n", "   * and remove checked exceptions, see {@link Futures#getUnchecked}.\n", "   * <p>If instead, you wish to treat {@link InterruptedException} uniformly with other exceptions,\n", "   * see {@link Futures#getChecked(Future, Class) Futures.getChecked}.\n"], "2": ["   * <p>If instead, you wish to treat {@link InterruptedException} uniformly with other exceptions,\n", "   * see {@link Futures#getChecked(Future, Class) Futures.getChecked}.\n"]}, "added_lines": {"1": [122, 124, 125, 126, 127, 128, 129, 130, 131, 132], "2": [158, 159, 160, 161, 162, 163, 164, 165, 166]}, "removed_lines": {"1": [122, 123, 125, 126], "2": [152, 153]}}]}
