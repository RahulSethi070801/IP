{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "20": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "21": "\n",
        "22": "import com.google.common.collect.ImmutableMap;\n",
        "23": "import com.google.common.collect.ImmutableSet;\n",
        "24": "import com.google.errorprone.annotations.CanIgnoreReturnValue;\n",
        "25": "\n",
        "26": "import java.util.Set;\n",
        "27": "\n",
        "28": "/**\n",
        "29": " * Abstract base class for implementation of immutable graphs.\n",
        "30": " *\n",
        "31": " * <p>All mutation methods throw {@link UnsupportedOperationException} as the graph\n",
        "32": " * can't be modified.\n",
        "33": " *\n",
        "34": " * <p>The time complexity of {@code edgesConnecting(node1, node2)} is O(min(outD_node1, inD_node2)).\n",
        "35": " *\n",
        "36": " * @author James Sexton\n",
        "37": " * @author Joshua O'Madadhain\n",
        "38": " * @author Omar Darwish\n",
        "39": " * @param <N> Node parameter type\n",
        "40": " * @param <E> Edge parameter type\n",
        "41": " */\n",
        "42": "//TODO(user): Add support for sorted nodes/edges and/or hypergraphs.\n",
        "43": "abstract class AbstractImmutableGraph<N, E> extends AbstractConfigurableGraph<N, E> {\n",
        "44": "\n",
        "45": "  AbstractImmutableGraph(Builder<N, E> builder) {\n",
        "46": "    super(builder.graph.config(), builder.getNodeConnections(), builder.getEdgeToIncidentNodes());\n",
        "47": "  }\n",
        "48": "\n",
        "49": "  @Override\n",
        "50": "  final NodeConnections<N, E> newNodeConnections() {\n",
        "51": "    throw new UnsupportedOperationException();\n",
        "52": "  }\n",
        "53": "\n",
        "54": "  @Override\n",
        "55": "  public final boolean addNode(N node) {\n",
        "56": "    throw new UnsupportedOperationException();\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  @Override\n",
        "60": "  public final boolean addEdge(E edge, N node1, N node2) {\n",
        "61": "    throw new UnsupportedOperationException();\n",
        "62": "  }\n",
        "63": "\n",
        "64": "  @Override\n",
        "65": "  public final boolean removeNode(Object node) {\n",
        "66": "    throw new UnsupportedOperationException();\n",
        "67": "  }\n",
        "68": "\n",
        "69": "  @Override\n",
        "70": "  public final boolean removeEdge(Object edge) {\n",
        "71": "    throw new UnsupportedOperationException();\n",
        "72": "  }\n",
        "73": "\n",
        "74": "  @Override\n",
        "75": "  public Set<E> edgesConnecting(Object node1, Object node2) {\n",
        "76": "    // This set is calculated as the intersection of two sets, and is likely to be small.\n",
        "77": "    // As an optimization, copy it to an ImmutableSet so re-iterating is fast.\n",
        "78": "    return ImmutableSet.copyOf(super.edgesConnecting(node1, node2));\n",
        "79": "  }\n",
        "80": "\n",
        "81": "  /**\n",
        "82": "   * An abstract class for builders of immutable graph instances.\n",
        "83": "   *\n",
        "84": "   * @param <N> Node parameter type\n",
        "85": "   * @param <E> Edge parameter type\n",
        "86": "   */\n",
        "87": "  abstract static class Builder<N, E> {\n",
        "88": "\n",
        "89": "    final Graph<N, E> graph;\n",
        "90": "\n",
        "91": "    Builder(Graph<N, E> graph) {\n",
        "92": "      this.graph = checkNotNull(graph, \"graph\");\n",
        "93": "    }\n",
        "94": "\n",
        "95": "    abstract NodeConnections<N, E> nodeConnectionsOf(N node);\n",
        "96": "\n",
        "97": "    /**\n",
        "98": "     * Creates and returns a new instance of {@code AbstractImmutableGraph}\n",
        "99": "     * based on the contents of the {@code Builder}.\n",
        "100": "     */\n",
        "101": "    public abstract AbstractImmutableGraph<N, E> build();\n",
        "102": "\n",
        "103": "    /**\n",
        "104": "     * Adds {@code node} to the graph being built.\n",
        "105": "     *\n",
        "106": "     * @return this {@code Builder} instance\n",
        "107": "     * @throws NullPointerException if {@code node} is null\n",
        "108": "     */\n",
        "109": "    @CanIgnoreReturnValue\n",
        "110": "    public Builder<N, E> addNode(N node) {\n",
        "111": "      graph.addNode(node);\n",
        "112": "      return this;\n",
        "113": "    }\n",
        "114": "\n",
        "115": "    /**\n",
        "116": "     * Adds {@code edge} to the graph being built, connecting {@code node1} and {@code node2};\n",
        "117": "     * adds {@code node1} and {@code node2} if not already present.\n",
        "118": "     *\n",
        "119": "     * @return this {@code Builder} instance\n",
        "120": "     * @throws IllegalArgumentException when {@code Graph.addEdge(edge, node1, node2)} throws\n",
        "121": "     *     on the graph being built\n",
        "122": "     * @throws NullPointerException if {@code edge}, {@code node1}, or {@code node2} is null\n",
        "123": "     * @see Graph#addEdge\n",
        "124": "     */\n",
        "125": "    @CanIgnoreReturnValue\n",
        "126": "    public Builder<N, E> addEdge(E edge, N node1, N node2) {\n",
        "127": "      graph.addEdge(edge, node1, node2);\n",
        "128": "      return this;\n",
        "129": "    }\n",
        "130": "\n",
        "131": "    /**\n",
        "132": "     * Adds all elements of {@code graph} to the graph being built.\n",
        "133": "     *\n",
        "134": "     * @throws IllegalArgumentException under either of two conditions:\n",
        "135": "     *     (1) the {@code GraphConfig} objects held by the graph being built and by {@code graph}\n",
        "136": "     *     are not compatible\n",
        "137": "     *     (2) calling {@link Graphs#addEdge} on the graph being built throws IAE\n",
        "138": "     * @see Graph#addEdge\n",
        "139": "     */\n",
        "140": "    @CanIgnoreReturnValue\n",
        "141": "    public Builder<N, E> addGraph(Graph<N, E> graphToAdd) {\n",
        "142": "      checkArgument(\n",
        "143": "          graph.config().compatibleWith(graphToAdd.config()),\n",
        "144": "          \"GraphConfigs for input and for graph being built are not compatible: input: %s, \"\n",
        "145": "              + \"this graph: %s\",\n",
        "146": "          graphToAdd.config(),\n",
        "147": "          graph.config());\n",
        "148": "\n",
        "149": "      for (N node : graphToAdd.nodes()) {\n",
        "150": "        graph.addNode(node);\n",
        "151": "      }\n",
        "152": "      for (E edge : graphToAdd.edges()) {\n",
        "153": "        Graphs.addEdge(graph, edge, graphToAdd.incidentNodes(edge));\n",
        "154": "      }\n",
        "155": "      return this;\n",
        "156": "    }\n",
        "157": "\n",
        "158": "    private ImmutableMap<N, NodeConnections<N, E>> getNodeConnections() {\n",
        "159": "      ImmutableMap.Builder<N, NodeConnections<N, E>> nodeConnections = ImmutableMap.builder();\n",
        "160": "      for (N node : graph.nodes()) {\n",
        "161": "        nodeConnections.put(node, nodeConnectionsOf(node));\n",
        "162": "      }\n",
        "163": "      return nodeConnections.build();\n",
        "164": "    }\n",
        "165": "\n",
        "166": "    private ImmutableMap<E, IncidentNodes<N>> getEdgeToIncidentNodes() {\n",
        "167": "      ImmutableMap.Builder<E, IncidentNodes<N>> edgeToIncidentNodes = ImmutableMap.builder();\n",
        "168": "      for (E edge : graph.edges()) {\n",
        "169": "        edgeToIncidentNodes.put(edge, IncidentNodes.of(graph.incidentNodes(edge)));\n",
        "170": "      }\n",
        "171": "      return edgeToIncidentNodes.build();\n",
        "172": "    }\n",
        "173": "  }\n",
        "174": "}\n"
    }
}