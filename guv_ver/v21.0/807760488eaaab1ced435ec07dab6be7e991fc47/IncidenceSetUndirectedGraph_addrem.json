{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "/**\n",
        "20": " * Configurable implementation of an undirected graph consisting of nodes of type N\n",
        "21": " * and edges of type E.\n",
        "22": " *\n",
        "23": " * <p>{@link Graphs#createUndirected} should be used to get an instance of this class.\n",
        "24": " *\n",
        "25": " * <p>Some invariants/assumptions are maintained in this implementation:\n",
        "26": " * <ul>\n",
        "27": " * <li>An edge has exactly two end-points, which may or may not be distinct.\n",
        "28": " * <li>By default, this is not a multigraph, that is, parallel edges (multiple\n",
        "29": " *     edges between node1 and node2) are not allowed.  If you want a multigraph,\n",
        "30": " *     create the graph with the 'multigraph' option:\n",
        "31": " *     <pre>Graphs.createUndirected(Graphs.config().multigraph());</pre>\n",
        "32": " * <li>By default, self-loop edges are allowed. If you want to disallow them,\n",
        "33": " *     create the graph without the option of self-loops:\n",
        "34": " *     <pre>Graphs.createUndirected(Graphs.config().noSelfLoops());</pre>\n",
        "35": " * <li>Edges are not adjacent to themselves by definition. In the case of a\n",
        "36": " *     self-loop, a node can be adjacent to itself, but an edge will never be.\n",
        "37": " * </ul>\n",
        "38": " *\n",
        "39": " * <p>Time complexities for mutation methods:\n",
        "40": " * <ul>\n",
        "41": " * <li>{@code addNode}: O(1).\n",
        "42": " * <li>{@code addEdge(E edge, N node1, N node2)}: O(1).\n",
        "43": " * <li>{@code removeNode(node)}: O(d_node).\n",
        "44": " * <li>{@code removeEdge}: O(1), unless this graph is a multigraph (supports parallel edges);\n",
        "45": " *     in that case this method is O(min(d_edgeNode1, d_edgeNode2)).\n",
        "46": " * </ul>\n",
        "47": " * where d_node is the degree of node.\n",
        "48": " *\n",
        "49": " * @author James Sexton\n",
        "50": " * @author Joshua O'Madadhain\n",
        "51": " * @author Omar Darwish\n",
        "52": " * @param <N> Node parameter type\n",
        "53": " * @param <E> Edge parameter type\n",
        "54": " * @see AbstractConfigurableGraph\n",
        "55": " * @see Graphs\n",
        "56": " */\n",
        "57": "final class IncidenceSetUndirectedGraph<N, E> extends AbstractConfigurableGraph<N, E>\n",
        "58": "    implements UndirectedGraph<N, E> {\n",
        "59": "\n",
        "60": "  IncidenceSetUndirectedGraph(GraphConfig config) {\n",
        "61": "    super(config);\n",
        "62": "  }\n",
        "63": "\n",
        "64": "  @Override\n",
        "65": "  NodeConnections<N, E> newNodeConnections() {\n",
        "66": "    return UndirectedNodeConnections.of();\n",
        "67": "  }\n",
        "68": "}\n"
    }
}