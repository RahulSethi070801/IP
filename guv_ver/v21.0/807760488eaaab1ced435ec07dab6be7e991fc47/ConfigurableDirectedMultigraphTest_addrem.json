{
    "addition": {
        "19": "import static com.google.common.graph.Graphs.getPropertiesString;\n",
        "28": " * Tests for a directed {@link ConfigurableGraph} allowing parallel edges.\n",
        "31": "public class ConfigurableDirectedMultigraphTest extends ConfigurableDirectedGraphTest {\n",
        "33": "  public Graph<Integer, String> createGraph() {\n",
        "34": "    return GraphBuilder.directed().allowsParallelEdges(true).build();\n",
        "41": "    assertThat(graph.edgesConnecting(N1, N2)).containsExactly(E12, E12_A);\n",
        "44": "    assertThat(graph.edgesConnecting(N2, N1)).isEmpty();\n",
        "51": "    assertThat(graph.edgesConnecting(N1, N1)).containsExactly(E11, E11_A);\n",
        "59": "    assertThat(graph.edgesConnecting(N1, N2)).containsExactly(E12, E12_A);\n",
        "67": "    assertThat(graph.edgesConnecting(N1, N1)).containsExactly(E11, E11_A);\n",
        "75": "    assertThat(graph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "83": "    assertTrue(graph.removeEdge(E11_A));\n",
        "84": "    assertThat(graph.edgesConnecting(N1, N1)).containsExactly(E11);\n",
        "85": "    assertThat(graph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "86": "    assertTrue(graph.removeEdge(E11));\n",
        "87": "    assertThat(graph.edgesConnecting(N1, N1)).isEmpty();\n",
        "88": "    assertThat(graph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "98": "        \"%s, nodes: %s, edges: {%s=<%s -> %s>, %s=<%s -> %s>, %s=<%s -> %s>, %s=<%s -> %s>}\",\n",
        "99": "        getPropertiesString(graph),\n"
    },
    "removed": {
        "27": " * Tests for {@link IncidenceSetDirectedGraph} allowing parallel edges.\n",
        "30": "public class IncidenceSetDirectedMultigraphTest extends IncidenceSetDirectedGraphTest {\n",
        "32": "  public DirectedGraph<Integer, String> createGraph() {\n",
        "33": "    return Graphs.createDirected(Graphs.MULTIGRAPH);\n",
        "40": "    assertThat(directedGraph.edgesConnecting(N1, N2)).containsExactly(E12, E12_A);\n",
        "43": "    assertThat(directedGraph.edgesConnecting(N2, N1)).isEmpty();\n",
        "50": "    assertThat(directedGraph.edgesConnecting(N1, N1)).containsExactly(E11, E11_A);\n",
        "58": "    assertThat(directedGraph.edgesConnecting(N1, N2)).containsExactly(E12, E12_A);\n",
        "66": "    assertThat(directedGraph.edgesConnecting(N1, N1)).containsExactly(E11, E11_A);\n",
        "74": "    assertThat(directedGraph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "82": "    assertTrue(directedGraph.removeEdge(E11_A));\n",
        "83": "    assertThat(directedGraph.edgesConnecting(N1, N1)).containsExactly(E11);\n",
        "84": "    assertThat(directedGraph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "85": "    assertTrue(directedGraph.removeEdge(E11));\n",
        "86": "    assertThat(directedGraph.edgesConnecting(N1, N1)).isEmpty();\n",
        "87": "    assertThat(directedGraph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "97": "        \"config: %s, nodes: %s, \"\n",
        "98": "            + \"edges: {%s=<%s -> %s>, %s=<%s -> %s>, %s=<%s -> %s>, %s=<%s -> %s>}\",\n",
        "99": "        graph.config(),\n"
    }
}