{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import org.junit.Rule;\n",
        "20": "import org.junit.Test;\n",
        "21": "import org.junit.rules.ExpectedException;\n",
        "22": "\n",
        "23": "/**\n",
        "24": " * Abstract base class for testing immutable implementations of the {@link DirectedGraph}\n",
        "25": " * interface.\n",
        "26": " *\n",
        "27": " * <p>This class is testing that all mutation methods called directly\n",
        "28": " * on the immutable graph will throw {@code UnsupportedOperationException}. Also,\n",
        "29": " * it tests the builder mutation methods {@code addNode} and {@code addEdge}.\n",
        "30": " * Any other test cases should be either included in the superclasses or subclasses.\n",
        "31": " *\n",
        "32": " */\n",
        "33": "public abstract class AbstractImmutableDirectedGraphTest extends AbstractDirectedGraphTest {\n",
        "34": "  @Rule public final ExpectedException expectedException = ExpectedException.none();\n",
        "35": "\n",
        "36": "  @Override\n",
        "37": "  @Test\n",
        "38": "  public final void nodes_checkReturnedSetMutability() {\n",
        "39": "    expectedException.expect(UnsupportedOperationException.class);\n",
        "40": "    graph.nodes().add(N2);\n",
        "41": "  }\n",
        "42": "\n",
        "43": "  @Override\n",
        "44": "  @Test\n",
        "45": "  public final void edges_checkReturnedSetMutability() {\n",
        "46": "    expectedException.expect(UnsupportedOperationException.class);\n",
        "47": "    graph.edges().add(E12);\n",
        "48": "  }\n",
        "49": "\n",
        "50": "  @Override\n",
        "51": "  @Test\n",
        "52": "  public final void incidentEdges_checkReturnedSetMutability() {\n",
        "53": "    addNode(N1);\n",
        "54": "    expectedException.expect(UnsupportedOperationException.class);\n",
        "55": "    graph.incidentEdges(N1).add(E12);\n",
        "56": "  }\n",
        "57": "\n",
        "58": "  @Override\n",
        "59": "  @Test\n",
        "60": "  public final void incidentNodes_checkReturnedSetMutability() {\n",
        "61": "    addEdge(E12, N1, N2);\n",
        "62": "    expectedException.expect(UnsupportedOperationException.class);\n",
        "63": "    graph.incidentNodes(E12).add(N2);\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  @Override\n",
        "67": "  @Test\n",
        "68": "  public final void adjacentNodes_checkReturnedSetMutability() {\n",
        "69": "    addNode(N1);\n",
        "70": "    expectedException.expect(UnsupportedOperationException.class);\n",
        "71": "    graph.adjacentNodes(N1).add(N2);\n",
        "72": "  }\n",
        "73": "\n",
        "74": "  @Override\n",
        "75": "  @Test\n",
        "76": "  public final void adjacentEdges_checkReturnedSetMutability() {\n",
        "77": "    addEdge(E12, N1, N2);\n",
        "78": "    expectedException.expect(UnsupportedOperationException.class);\n",
        "79": "    graph.adjacentEdges(E12).add(E23);\n",
        "80": "  }\n",
        "81": "\n",
        "82": "  @Override\n",
        "83": "  @Test\n",
        "84": "  public final void edgesConnecting_checkReturnedSetMutability() {\n",
        "85": "    addEdge(E12, N1, N2);\n",
        "86": "    expectedException.expect(UnsupportedOperationException.class);\n",
        "87": "    graph.edgesConnecting(N1, N2).add(E23);\n",
        "88": "  }\n",
        "89": "\n",
        "90": "  @Override\n",
        "91": "  @Test\n",
        "92": "  public final void inEdges_checkReturnedSetMutability() {\n",
        "93": "    addEdge(E12, N1, N2);\n",
        "94": "    expectedException.expect(UnsupportedOperationException.class);\n",
        "95": "    graph.inEdges(N2).add(E23);\n",
        "96": "  }\n",
        "97": "\n",
        "98": "  @Override\n",
        "99": "  @Test\n",
        "100": "  public final void outEdges_checkReturnedSetMutability() {\n",
        "101": "    addEdge(E12, N1, N2);\n",
        "102": "    expectedException.expect(UnsupportedOperationException.class);\n",
        "103": "    graph.outEdges(N1).add(E23);\n",
        "104": "  }\n",
        "105": "\n",
        "106": "  @Override\n",
        "107": "  @Test\n",
        "108": "  public final void predecessors_checkReturnedSetMutability() {\n",
        "109": "    addEdge(E12, N1, N2);\n",
        "110": "    expectedException.expect(UnsupportedOperationException.class);\n",
        "111": "    graph.predecessors(N2).add(N1);\n",
        "112": "  }\n",
        "113": "\n",
        "114": "  @Override\n",
        "115": "  @Test\n",
        "116": "  public final void successors_checkReturnedSetMutability() {\n",
        "117": "    addEdge(E12, N1, N2);\n",
        "118": "    expectedException.expect(UnsupportedOperationException.class);\n",
        "119": "    graph.successors(N1).add(N2);\n",
        "120": "  }\n",
        "121": "\n",
        "122": "  // Builder mutation methods only support addition, not removal, so these tests would fail.\n",
        "123": "  @Override\n",
        "124": "  @Test\n",
        "125": "  public void removeNode_existingNode() {\n",
        "126": "    expectedException.expect(UnsupportedOperationException.class);\n",
        "127": "    super.removeNode_existingNode();\n",
        "128": "  }\n",
        "129": "\n",
        "130": "  @Override\n",
        "131": "  public void removeNode_invalidArgument() {\n",
        "132": "    expectedException.expect(UnsupportedOperationException.class);\n",
        "133": "    super.removeNode_invalidArgument();\n",
        "134": "  }\n",
        "135": "\n",
        "136": "  @Override\n",
        "137": "  @Test\n",
        "138": "  public void removeEdge_existingEdge() {\n",
        "139": "    expectedException.expect(UnsupportedOperationException.class);\n",
        "140": "    super.removeEdge_existingEdge();\n",
        "141": "  }\n",
        "142": "\n",
        "143": "  @Override\n",
        "144": "  @Test\n",
        "145": "  public void removeEdge_oneOfMany() {\n",
        "146": "    expectedException.expect(UnsupportedOperationException.class);\n",
        "147": "    super.removeEdge_oneOfMany();\n",
        "148": "  }\n",
        "149": "\n",
        "150": "  @Override\n",
        "151": "  @Test\n",
        "152": "  public void removeEdge_invalidArgument() {\n",
        "153": "    expectedException.expect(UnsupportedOperationException.class);\n",
        "154": "    super.removeEdge_invalidArgument();\n",
        "155": "  }\n",
        "156": "\n",
        "157": "  // Test that adding to the graph directly (as opposed to via the proxy methods) is not supported.\n",
        "158": "  @Test\n",
        "159": "  public void addNode_immutable() {\n",
        "160": "    expectedException.expect(UnsupportedOperationException.class);\n",
        "161": "    graph.addNode(N3);\n",
        "162": "  }\n",
        "163": "\n",
        "164": "  @Test\n",
        "165": "  public void addEdge_immutable() {\n",
        "166": "    expectedException.expect(UnsupportedOperationException.class);\n",
        "167": "    graph.addEdge(E13, N1, N3);\n",
        "168": "  }\n",
        "169": "}\n"
    }
}