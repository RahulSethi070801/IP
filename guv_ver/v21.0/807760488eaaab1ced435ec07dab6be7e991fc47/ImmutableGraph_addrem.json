{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.collect.ImmutableMap;\n",
        "22": "import com.google.common.collect.ImmutableSet;\n",
        "23": "import com.google.errorprone.annotations.CanIgnoreReturnValue;\n",
        "24": "\n",
        "25": "import java.util.Map;\n",
        "26": "import java.util.Set;\n",
        "27": "\n",
        "28": "/**\n",
        "29": " * A {@link Graph} whose contents will never change. Instances of this class should be obtained\n",
        "30": " * with {@link #copyOf(Graph)}.\n",
        "31": " *\n",
        "32": " * <p>The time complexity of {@code edgesConnecting(node1, node2)} is O(min(outD_node1, inD_node2)).\n",
        "33": " *\n",
        "34": " * @author James Sexton\n",
        "35": " * @author Joshua O'Madadhain\n",
        "36": " * @author Omar Darwish\n",
        "37": " * @param <N> Node parameter type\n",
        "38": " * @param <E> Edge parameter type\n",
        "39": " */\n",
        "40": "public final class ImmutableGraph<N, E> extends ConfigurableGraph<N, E> {\n",
        "41": "\n",
        "42": "  private ImmutableGraph(Graph<N, E> graph) {\n",
        "43": "    super(GraphBuilder.from(graph), getNodeConnections(graph), getEdgeToIncidentNodes(graph));\n",
        "44": "  }\n",
        "45": "\n",
        "46": "  /**\n",
        "47": "   * Returns an immutable copy of {@code graph}.\n",
        "48": "   */\n",
        "49": "  public static <N, E> ImmutableGraph<N, E> copyOf(Graph<N, E> graph) {\n",
        "50": "    return (graph instanceof ImmutableGraph)\n",
        "51": "        ? (ImmutableGraph<N, E>) graph\n",
        "52": "        : new ImmutableGraph<N, E>(graph);\n",
        "53": "  }\n",
        "54": "\n",
        "55": "  /**\n",
        "56": "   * Simply returns its argument.\n",
        "57": "   *\n",
        "58": "   * @deprecated no need to use this\n",
        "59": "   */\n",
        "60": "  @Deprecated\n",
        "61": "  public static <N, E> ImmutableGraph<N, E> copyOf(ImmutableGraph<N, E> graph) {\n",
        "62": "    return checkNotNull(graph);\n",
        "63": "  }\n",
        "64": "\n",
        "65": "  /**\n",
        "66": "   * Guaranteed to throw an exception and leave the graph unmodified.\n",
        "67": "   *\n",
        "68": "   * @throws UnsupportedOperationException always\n",
        "69": "   * @deprecated Unsupported operation.\n",
        "70": "   */\n",
        "71": "  @CanIgnoreReturnValue\n",
        "72": "  @Deprecated\n",
        "73": "  @Override\n",
        "74": "  public final boolean addNode(N node) {\n",
        "75": "    throw new UnsupportedOperationException();\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  /**\n",
        "79": "   * Guaranteed to throw an exception and leave the graph unmodified.\n",
        "80": "   *\n",
        "81": "   * @throws UnsupportedOperationException always\n",
        "82": "   * @deprecated Unsupported operation.\n",
        "83": "   */\n",
        "84": "  @CanIgnoreReturnValue\n",
        "85": "  @Deprecated\n",
        "86": "  @Override\n",
        "87": "  public final boolean addEdge(E edge, N node1, N node2) {\n",
        "88": "    throw new UnsupportedOperationException();\n",
        "89": "  }\n",
        "90": "\n",
        "91": "  /**\n",
        "92": "   * Guaranteed to throw an exception and leave the graph unmodified.\n",
        "93": "   *\n",
        "94": "   * @throws UnsupportedOperationException always\n",
        "95": "   * @deprecated Unsupported operation.\n",
        "96": "   */\n",
        "97": "  @CanIgnoreReturnValue\n",
        "98": "  @Deprecated\n",
        "99": "  @Override\n",
        "100": "  public final boolean removeNode(Object node) {\n",
        "101": "    throw new UnsupportedOperationException();\n",
        "102": "  }\n",
        "103": "\n",
        "104": "  /**\n",
        "105": "   * Guaranteed to throw an exception and leave the graph unmodified.\n",
        "106": "   *\n",
        "107": "   * @throws UnsupportedOperationException always\n",
        "108": "   * @deprecated Unsupported operation.\n",
        "109": "   */\n",
        "110": "  @CanIgnoreReturnValue\n",
        "111": "  @Deprecated\n",
        "112": "  @Override\n",
        "113": "  public final boolean removeEdge(Object edge) {\n",
        "114": "    throw new UnsupportedOperationException();\n",
        "115": "  }\n",
        "116": "\n",
        "117": "  @Override\n",
        "118": "  public Set<E> edgesConnecting(Object node1, Object node2) {\n",
        "119": "    // This set is calculated as the intersection of two sets, and is likely to be small.\n",
        "120": "    // As an optimization, copy it to an ImmutableSet so re-iterating is fast.\n",
        "121": "    return ImmutableSet.copyOf(super.edgesConnecting(node1, node2));\n",
        "122": "  }\n",
        "123": "\n",
        "124": "  private static <N, E> Map<N, NodeConnections<N, E>> getNodeConnections(Graph<N, E> graph) {\n",
        "125": "    ImmutableMap.Builder<N, NodeConnections<N, E>> nodeConnections = ImmutableMap.builder();\n",
        "126": "    for (N node : graph.nodes()) {\n",
        "127": "      nodeConnections.put(node, nodeConnectionsOf(graph, node));\n",
        "128": "    }\n",
        "129": "    return nodeConnections.build();\n",
        "130": "  }\n",
        "131": "\n",
        "132": "  private static <N, E> Map<E, IncidentNodes<N>> getEdgeToIncidentNodes(Graph<N, E> graph) {\n",
        "133": "    ImmutableMap.Builder<E, IncidentNodes<N>> edgeToIncidentNodes = ImmutableMap.builder();\n",
        "134": "    for (E edge : graph.edges()) {\n",
        "135": "      edgeToIncidentNodes.put(edge, IncidentNodes.of(graph.incidentNodes(edge)));\n",
        "136": "    }\n",
        "137": "    return edgeToIncidentNodes.build();\n",
        "138": "  }\n",
        "139": "\n",
        "140": "  private static <N, E> NodeConnections<N, E> nodeConnectionsOf(Graph<N, E> graph, N node) {\n",
        "141": "    return graph.isDirected()\n",
        "142": "        ? DirectedNodeConnections.ofImmutable(\n",
        "143": "            graph.predecessors(node), graph.successors(node),\n",
        "144": "            graph.inEdges(node), graph.outEdges(node))\n",
        "145": "        : UndirectedNodeConnections.ofImmutable(\n",
        "146": "            graph.adjacentNodes(node), graph.incidentEdges(node));\n",
        "147": "  }\n",
        "148": "}\n"
    },
    "removed": {}
}