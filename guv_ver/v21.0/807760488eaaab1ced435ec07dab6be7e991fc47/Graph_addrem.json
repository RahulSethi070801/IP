{
    "addition": {
        "214": "  //\n",
        "215": "  // Graph properties\n",
        "216": "  //\n",
        "217": "\n",
        "218": "  /**\n",
        "219": "   * Returns true if the edges in this graph have a direction associated with them.\n",
        "220": "   *\n",
        "221": "   * <p>A directed edge is an {@linkplain #outEdges(Object) outgoing edge} of its\n",
        "222": "   * {@linkplain #source(Object) source}, and an {@linkplain #inEdges(Object) incoming edge} of its\n",
        "223": "   * {@linkplain #target(Object) target}. An undirected edge connects its\n",
        "224": "   * {@linkplain #incidentNodes(Object) incident nodes} to each other, and is both an\n",
        "225": "   * {@linkplain #outEdges(Object) outgoing edge} and {@linkplain #inEdges(Object) incoming edge}\n",
        "226": "   * of each incident node.\n",
        "227": "   */\n",
        "228": "  boolean isDirected();\n",
        "229": "\n",
        "230": "  /**\n",
        "231": "   * Returns true if this graph allows parallel edges. Attempting to add a parallel edge to a graph\n",
        "232": "   * that does not allow them will throw an {@link UnsupportedOperationException}.\n",
        "233": "   */\n",
        "234": "  boolean allowsParallelEdges();\n",
        "235": "\n",
        "236": "  /**\n",
        "237": "   * Returns true if this graph allows self-loops (edges that connect a node to itself).\n",
        "238": "   * Attempting to add a self-loop to a graph that does not allow them will throw an\n",
        "239": "   * {@link UnsupportedOperationException}.\n",
        "240": "   */\n",
        "241": "  boolean allowsSelfLoops();\n",
        "257": "   * <p>For self-loop edges, the returned set's size will be 1. If the graph is\n",
        "258": "   * {@linkplain #isDirected() directed} and {@code edge} is not a self-loop, the\n",
        "259": "   * iteration order will be {@code [source(edge), target(edge)]}.\n",
        "285": "   * Returns the set of edges that connect {@code node1} to {@code node2}.\n",
        "286": "   *\n",
        "287": "   * <p>This set is the intersection of {@code outEdges(node1)} and {@code inEdges(node2)}. If\n",
        "288": "   * {@code node1} is equal to {@code node2}, then it is the set of self-loop edges for that node.\n",
        "336": "  /**\n",
        "337": "   * For a directed graph, returns the node for which {@code edge} is an outgoing edge.\n",
        "338": "   * For an undirected graph, throws an {@link UnsupportedOperationException}.\n",
        "339": "   */\n",
        "340": "  N source(Object edge);\n",
        "341": "\n",
        "342": "  /**\n",
        "343": "   * For a directed graph, returns the node for which {@code edge} is an incoming edge.\n",
        "344": "   * For an undirected graph, throws an {@link UnsupportedOperationException}.\n",
        "345": "   */\n",
        "346": "  N target(Object edge);\n",
        "347": "\n",
        "400": "   * Adds {@code edge} to this graph, connecting {@code node1} to {@code node2}\n",
        "457": "   * <p>Graph properties are <b>not</b> respected by this method. For example, two graphs may be\n",
        "458": "   * considered equal even if one allows parallel edges and the other doesn't. Additionally, the\n",
        "459": "   * order in which edges or nodes are added to the graph, and the order in which they are iterated\n",
        "460": "   * over, are irrelevant.\n"
    },
    "removed": {
        "214": "  /** Returns the {@link GraphConfig} that defines this instance's configuration. */\n",
        "215": "  GraphConfig config();\n",
        "231": "   * <p>For non-hypergraphs, the returned set will always contain either one\n",
        "232": "   * (if {@code edge} is a self-loop) or two nodes.\n",
        "258": "   * Returns the edges that are {@linkplain #incidentEdges(Object) incident} in this graph\n",
        "259": "   * to both nodes {@code node1} and {@code node2}.\n",
        "359": "   * Adds {@code edge} to this graph, connecting {@code node1} and {@code node2}\n",
        "416": "   * <p>Properties that are <b>not</b> respected by this method:\n",
        "417": "   * <ul>\n",
        "418": "   * <li>{@code GraphConfig} configurations.  If two graphs are equal by the above criteria but have\n",
        "419": "   * different configurations, they are still equal.  (For example: two graphs may be considered\n",
        "420": "   * equal even if one allows parallel edges and the other doesn't.)\n",
        "421": "   * <li>Edge/node ordering.  The order in which edges or nodes are added to the graph, and the\n",
        "422": "   * order in which they are iterated over, are irrelevant.\n",
        "423": "   * </ul>\n"
    }
}