{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.Beta;\n",
        "20": "import com.google.errorprone.annotations.CanIgnoreReturnValue;\n",
        "21": "\n",
        "22": "/**\n",
        "23": " * Implementation of an immutable undirected graph consisting of nodes of type N\n",
        "24": " * and edges of type E.\n",
        "25": " *\n",
        "26": " * <p>Some invariants/assumptions are maintained in this implementation:\n",
        "27": " * <ul>\n",
        "28": " * <li>An edge has exactly two end-points, which may or may not be distinct.\n",
        "29": " * <li>By default, this is not a multigraph, that is, parallel edges (multiple\n",
        "30": " *     edges between n1 and n2) are not allowed.  If you want a multigraph,\n",
        "31": " *     build the graph with the 'multigraph' option:\n",
        "32": " *     <pre>ImmutableUndirectedGraph.builder(Graphs.config().multigraph()).build();</pre>\n",
        "33": " * <li>Edges are not adjacent to themselves by definition. In the case of a\n",
        "34": " *     self-loop, a node can be adjacent to itself, but an edge will never be adjacent to itself.\n",
        "35": " * </ul>\n",
        "36": " *\n",
        "37": " * @author James Sexton\n",
        "38": " * @author Joshua O'Madadhain\n",
        "39": " * @author Omar Darwish\n",
        "40": " * @param <N> Node parameter type\n",
        "41": " * @param <E> Edge parameter type\n",
        "42": " * @see AbstractConfigurableGraph\n",
        "43": " * @see AbstractImmutableGraph\n",
        "44": " * @since 20.0\n",
        "45": " */\n",
        "46": "@Beta\n",
        "47": "public final class ImmutableUndirectedGraph<N, E> extends AbstractImmutableGraph<N, E>\n",
        "48": "    implements UndirectedGraph<N, E> {\n",
        "49": "\n",
        "50": "  private ImmutableUndirectedGraph(Builder<N, E> builder) {\n",
        "51": "    super(builder);\n",
        "52": "  }\n",
        "53": "\n",
        "54": "  /**\n",
        "55": "   * Returns a new builder. The generated builder is equivalent to the builder\n",
        "56": "   * created by the {@code Builder} constructor.\n",
        "57": "   */\n",
        "58": "  public static <N, E> Builder<N, E> builder() {\n",
        "59": "    return new Builder<N, E>();\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  /**\n",
        "63": "   * Returns a new builder. The generated builder is equivalent to the builder\n",
        "64": "   * created by the {@code Builder} constructor.\n",
        "65": "   *\n",
        "66": "   * @param config an instance of {@code GraphConfig} with the intended\n",
        "67": "   *        graph configuration.\n",
        "68": "   */\n",
        "69": "  public static <N, E> Builder<N, E> builder(GraphConfig config) {\n",
        "70": "    return new Builder<N, E>(config);\n",
        "71": "  }\n",
        "72": "\n",
        "73": "  /**\n",
        "74": "   * Returns an immutable copy of the input graph.\n",
        "75": "   */\n",
        "76": "  public static <N, E> ImmutableUndirectedGraph<N, E> copyOf(UndirectedGraph<N, E> graph) {\n",
        "77": "    return new Builder<N, E>(graph).build();\n",
        "78": "  }\n",
        "79": "\n",
        "80": "  /**\n",
        "81": "   * A builder for creating immutable undirected graph instances.\n",
        "82": "   *\n",
        "83": "   * @param <N> Node parameter type\n",
        "84": "   * @param <E> edge parameter type\n",
        "85": "   * @see GraphConfig\n",
        "86": "   */\n",
        "87": "  public static final class Builder<N, E> extends AbstractImmutableGraph.Builder<N, E> {\n",
        "88": "\n",
        "89": "    /**\n",
        "90": "     * Creates a new builder with the default graph configuration.\n",
        "91": "     */\n",
        "92": "    public Builder() {\n",
        "93": "      super(Graphs.<N, E>createUndirected());\n",
        "94": "    }\n",
        "95": "\n",
        "96": "    /**\n",
        "97": "     * Creates a new builder with the specified configuration.\n",
        "98": "     */\n",
        "99": "    public Builder(GraphConfig config) {\n",
        "100": "      super(Graphs.<N, E>createUndirected(config));\n",
        "101": "    }\n",
        "102": "\n",
        "103": "    /**\n",
        "104": "     * Creates a new builder whose internal state is that of {@code graph}.\n",
        "105": "     *\n",
        "106": "     * <p>NOTE: This constructor should only be used in the case where it will be immediately\n",
        "107": "     * followed by a call to {@code build}, so that the input graph will not be modified.\n",
        "108": "     * Currently the only such contexts are {@code Immutable*Graph.copyOf()}, which use these\n",
        "109": "     * constructors to avoid making an extra copy of the graph state.\n",
        "110": "     * @see ImmutableUndirectedGraph#copyOf(UndirectedGraph)\n",
        "111": "     */\n",
        "112": "    private Builder(UndirectedGraph<N, E> graph) {\n",
        "113": "      super(graph);\n",
        "114": "    }\n",
        "115": "\n",
        "116": "    @Override\n",
        "117": "    NodeConnections<N, E> nodeConnectionsOf(N node) {\n",
        "118": "      return UndirectedNodeConnections.ofImmutable(\n",
        "119": "          graph.adjacentNodes(node), graph.incidentEdges(node));\n",
        "120": "    }\n",
        "121": "\n",
        "122": "    @Override\n",
        "123": "    public ImmutableUndirectedGraph<N, E> build() {\n",
        "124": "      return new ImmutableUndirectedGraph<N, E>(this);\n",
        "125": "    }\n",
        "126": "\n",
        "127": "    @Override\n",
        "128": "    @CanIgnoreReturnValue\n",
        "129": "    public Builder<N, E> addNode(N node) {\n",
        "130": "      return (Builder<N, E>) super.addNode(node); // Refine the return type\n",
        "131": "    }\n",
        "132": "\n",
        "133": "    @Override\n",
        "134": "    @CanIgnoreReturnValue\n",
        "135": "    public Builder<N, E> addEdge(E edge, N node1, N node2) {\n",
        "136": "      return (Builder<N, E>) super.addEdge(edge, node1, node2); // Refine the return type\n",
        "137": "    }\n",
        "138": "\n",
        "139": "    @Override\n",
        "140": "    @CanIgnoreReturnValue\n",
        "141": "    public Builder<N, E> addGraph(Graph<N, E> graphToAdd) {\n",
        "142": "      return (Builder<N, E>) super.addGraph(graphToAdd); // Refine the return type\n",
        "143": "    }\n",
        "144": "  }\n",
        "145": "}\n"
    }
}