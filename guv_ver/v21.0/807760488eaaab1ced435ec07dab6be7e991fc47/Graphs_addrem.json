{
    "addition": {
        "23": "import com.google.common.annotations.VisibleForTesting;\n",
        "85": "    if (!graph.allowsParallelEdges()) {\n",
        "120": "  public static <N, E> Graph<N, E> copyOf(Graph<N, E> graph) {\n",
        "121": "    return copyOf(graph, Predicates.alwaysTrue(), Predicates.alwaysTrue());\n",
        "128": "  public static <N, E> Graph<N, E> copyOf(\n",
        "129": "      Graph<N, E> graph,\n",
        "135": "    Graph<N, E> copy = GraphBuilder.from(graph)\n",
        "136": "        .expectedNodeCount(graph.nodes().size()).expectedEdgeCount(graph.edges().size()).build();\n",
        "139": "    // We can't just call mergeEdgesFrom(graph, copy, edgePredicate) because addEdge() can add\n",
        "140": "    // the edge's incident nodes if they are not present.\n",
        "143": "        Set<N> incidentNodes = graph.incidentNodes(edge);\n",
        "144": "        if (copy.nodes().containsAll(incidentNodes)) {\n",
        "145": "          addEdge(copy, edge, incidentNodes);\n",
        "157": "    mergeNodesFrom(original, copy, Predicates.alwaysTrue());\n",
        "168": "    for (N node : Sets.filter(original.nodes(), nodePredicate)) {\n",
        "169": "      copy.addNode(node);\n",
        "174": "   * Copies all edges from {@code original} into {@code copy}. Also copies all nodes incident\n",
        "177": "  public static <N, E> void mergeEdgesFrom(Graph<N, E> original, Graph<N, E> copy) {\n",
        "178": "    mergeEdgesFrom(original, copy, Predicates.alwaysTrue());\n",
        "186": "      Graph<N, E> original, Graph<N, E> copy, Predicate<? super E> edgePredicate) {\n",
        "190": "    for (E edge : Sets.filter(original.edges(), edgePredicate)) {\n",
        "221": "      boolean bothUndirected = !graph1.isDirected() && !graph2.isDirected();\n",
        "222": "      if (!bothUndirected && !graph1.outEdges(node).equals(graph2.outEdges(node))) {\n",
        "241": "   * is directed.\n",
        "244": "    return String.format(\"%s, nodes: %s, edges: %s\",\n",
        "245": "        getPropertiesString(graph),\n",
        "286": "    if (graph.isDirected()) {\n",
        "291": "              graph.source(edge), graph.target(edge));\n",
        "302": "\n",
        "303": "  /**\n",
        "304": "   * Returns a string representation of the properties of {@code graph}.\n",
        "305": "   */\n",
        "306": "  @VisibleForTesting\n",
        "307": "  static String getPropertiesString(Graph<?, ?> graph) {\n",
        "308": "    return String.format(\"isDirected: %s , allowsParallelEdges: %s, allowsSelfLoops: %s\",\n",
        "309": "        graph.isDirected(), graph.allowsParallelEdges(), graph.allowsSelfLoops());\n",
        "310": "  }\n"
    },
    "removed": {
        "41": " * @see Graph\n",
        "47": "  public static final GraphConfig MULTIGRAPH = config().multigraph();\n",
        "48": "\n",
        "87": "    if (!graph.config().isMultigraph()) {\n",
        "122": "  public static <N, E> DirectedGraph<N, E> copyOf(DirectedGraph<N, E> graph) {\n",
        "123": "    checkNotNull(graph, \"graph\");\n",
        "124": "    DirectedGraph<N, E> copy = createDirected(graph.config()\n",
        "125": "            .expectedNodeCount(graph.nodes().size())\n",
        "126": "            .expectedEdgeCount(graph.edges().size()));\n",
        "127": "    mergeNodesFrom(graph, copy);\n",
        "128": "    mergeEdgesFrom(graph, copy);\n",
        "129": "    return copy;\n",
        "136": "  public static <N, E> DirectedGraph<N, E> copyOf(\n",
        "137": "      DirectedGraph<N, E> graph,\n",
        "143": "    DirectedGraph<N, E> copy = createDirected(graph.config()\n",
        "144": "            .expectedNodeCount(graph.nodes().size())\n",
        "145": "            .expectedEdgeCount(graph.edges().size()));\n",
        "147": "    // We can't just call mergeEdgesFrom(graph, copy, edgePredicate) because addEdge() can add\n",
        "148": "    // the edge's incident nodes if they are not present; we need to run them past nodePredicate.\n",
        "149": "    if (edgePredicate.equals(Predicates.<E>alwaysFalse())) {\n",
        "150": "      return copy; // no edges to add\n",
        "151": "    }\n",
        "155": "        N source = graph.source(edge);\n",
        "156": "        N target = graph.target(edge);\n",
        "157": "        if (nodePredicate.apply(source) && nodePredicate.apply(target)) {\n",
        "158": "          copy.addEdge(edge, source, target);\n",
        "170": "    checkNotNull(original, \"original\");\n",
        "171": "    checkNotNull(copy, \"copy\");\n",
        "172": "    for (N node : original.nodes()) {\n",
        "173": "      copy.addNode(node);\n",
        "174": "    }\n",
        "185": "    if (nodePredicate.equals(Predicates.<N>alwaysFalse())) {\n",
        "186": "      return; // nothing to do\n",
        "187": "    }\n",
        "188": "\n",
        "189": "    if (nodePredicate.equals(Predicates.<N>alwaysTrue())) {\n",
        "190": "      mergeNodesFrom(original, copy); // optimization\n",
        "191": "    } else {\n",
        "192": "      for (N node : original.nodes()) {\n",
        "193": "        if (nodePredicate.apply(node)) {\n",
        "194": "          copy.addNode(node);\n",
        "195": "        }\n",
        "196": "      }\n",
        "201": "   * Copies all edges from {@code original} into {@code copy}.  Also copies all nodes incident\n",
        "204": "  public static <N, E> void mergeEdgesFrom(DirectedGraph<N, E> original, DirectedGraph<N, E> copy) {\n",
        "205": "    checkNotNull(original, \"original\");\n",
        "206": "    checkNotNull(copy, \"copy\");\n",
        "207": "    for (E edge : original.edges()) {\n",
        "208": "      copy.addEdge(edge, original.source(edge), original.target(edge));\n",
        "209": "    }\n",
        "217": "      DirectedGraph<N, E> original, DirectedGraph<N, E> copy, Predicate<? super E> edgePredicate) {\n",
        "221": "    if (edgePredicate.equals(Predicates.<E>alwaysFalse())) {\n",
        "222": "      return; // nothing to do\n",
        "223": "    }\n",
        "224": "\n",
        "225": "    if (edgePredicate.equals(Predicates.<E>alwaysTrue())) {\n",
        "226": "      mergeEdgesFrom(original, copy); // optimization\n",
        "227": "    } else {\n",
        "228": "      for (E edge : original.edges()) {\n",
        "229": "        if (edgePredicate.apply(edge)) {\n",
        "230": "          copy.addEdge(edge, original.source(edge), original.target(edge));\n",
        "231": "        }\n",
        "232": "      }\n",
        "233": "    }\n",
        "234": "  }\n",
        "235": "\n",
        "236": "  /**\n",
        "237": "   * Creates a mutable copy of {@code graph}, using the same node and edge elements.\n",
        "238": "   */\n",
        "239": "  public static <N, E> UndirectedGraph<N, E> copyOf(UndirectedGraph<N, E> graph) {\n",
        "240": "    checkNotNull(graph, \"graph\");\n",
        "241": "    UndirectedGraph<N, E> copy = createUndirected(graph.config()\n",
        "242": "            .expectedNodeCount(graph.nodes().size())\n",
        "243": "            .expectedEdgeCount(graph.edges().size()));\n",
        "244": "    mergeNodesFrom(graph, copy);\n",
        "245": "    mergeEdgesFrom(graph, copy);\n",
        "246": "    return copy;\n",
        "247": "  }\n",
        "248": "\n",
        "249": "  /**\n",
        "250": "   * Creates a mutable copy of {@code graph}, using all of its elements that satisfy\n",
        "251": "   * {@code nodePredicate} and {@code edgePredicate}.\n",
        "252": "   */\n",
        "253": "  public static <N, E> UndirectedGraph<N, E> copyOf(\n",
        "254": "      UndirectedGraph<N, E> graph,\n",
        "255": "      Predicate<? super N> nodePredicate,\n",
        "256": "      Predicate<? super E> edgePredicate) {\n",
        "257": "    checkNotNull(graph, \"graph\");\n",
        "258": "    checkNotNull(nodePredicate, \"nodePredicate\");\n",
        "259": "    checkNotNull(edgePredicate, \"edgePredicate\");\n",
        "260": "    UndirectedGraph<N, E> copy = createUndirected(graph.config()\n",
        "261": "            .expectedNodeCount(graph.nodes().size())\n",
        "262": "            .expectedEdgeCount(graph.edges().size()));\n",
        "263": "    mergeNodesFrom(graph, copy, nodePredicate);\n",
        "264": "\n",
        "265": "    // We can't just call mergeEdgesFrom(graph, copy, edgePredicate) because addEdge() can add\n",
        "266": "    // the edge's incident nodes if they are not present; we need to run them past nodePredicate.\n",
        "267": "    for (E edge : graph.edges()) {\n",
        "268": "      if (edgePredicate.apply(edge)) {\n",
        "269": "        boolean nodesOk = true;\n",
        "270": "        Set<N> incidentNodes = graph.incidentNodes(edge);\n",
        "271": "        for (N node : incidentNodes) {\n",
        "272": "          nodesOk &= nodePredicate.apply(node);\n",
        "273": "        }\n",
        "274": "        if (nodesOk) {\n",
        "275": "          addEdge(copy, edge, incidentNodes);\n",
        "276": "        }\n",
        "277": "      }\n",
        "278": "    }\n",
        "279": "\n",
        "280": "    return copy;\n",
        "281": "  }\n",
        "282": "\n",
        "283": "  /**\n",
        "284": "   * Copies all edges from {@code original} into {@code copy}.  Also copies all nodes incident\n",
        "285": "   * to these edges.\n",
        "286": "   */\n",
        "287": "  public static <N, E> void mergeEdgesFrom(Graph<N, E> original, Graph<N, E> copy) {\n",
        "288": "    checkNotNull(original, \"original\");\n",
        "289": "    checkNotNull(copy, \"copy\");\n",
        "290": "    for (E edge : original.edges()) {\n",
        "295": "  /**\n",
        "296": "   * Copies all edges from {@code original} into {@code copy} that satisfy {@code edgePredicate}.\n",
        "297": "   * Also copies all nodes incident to these edges.\n",
        "298": "   */\n",
        "299": "  // NOTE: this is identical to mergeEdgesFrom(DirectedGraph) except for the call to addEdge\n",
        "300": "  public static <N, E> void mergeEdgesFrom(Graph<N, E> original, Graph<N, E> copy,\n",
        "301": "      Predicate<? super E> edgePredicate) {\n",
        "302": "    checkNotNull(original, \"original\");\n",
        "303": "    checkNotNull(copy, \"copy\");\n",
        "304": "    checkNotNull(edgePredicate, \"edgePredicate\");\n",
        "305": "    if (edgePredicate.equals(Predicates.<E>alwaysFalse())) {\n",
        "306": "      return; // nothing to do\n",
        "307": "    }\n",
        "308": "\n",
        "309": "    if (edgePredicate.equals(Predicates.<E>alwaysTrue())) {\n",
        "310": "      mergeEdgesFrom(original, copy); // optimization\n",
        "311": "    } else {\n",
        "312": "      for (E edge : original.edges()) {\n",
        "313": "        if (edgePredicate.apply(edge)) {\n",
        "314": "          addEdge(copy, edge, original.incidentNodes(edge));\n",
        "315": "        }\n",
        "316": "      }\n",
        "317": "    }\n",
        "318": "  }\n",
        "319": "\n",
        "320": "  /**\n",
        "321": "   * Copies all nodes and edges from {@code original} to {@code copy} that satisfy\n",
        "322": "   * {@code nodePredicate} and {@code edgePredicate}.\n",
        "323": "   */\n",
        "324": "  public static <N, E> void copyFrom(\n",
        "325": "      Graph<N, E> original,\n",
        "326": "      Graph<N, E> copy,\n",
        "327": "      Predicate<? super N> nodePredicate,\n",
        "328": "      Predicate<? super E> edgePredicate) {\n",
        "329": "    checkNotNull(original, \"original\");\n",
        "330": "    checkNotNull(copy, \"copy\");\n",
        "331": "    checkNotNull(nodePredicate, \"nodePredicate\");\n",
        "332": "    checkNotNull(edgePredicate, \"edgePredicate\");\n",
        "333": "    mergeNodesFrom(original, copy, nodePredicate);\n",
        "334": "    mergeEdgesFrom(original, copy, edgePredicate);\n",
        "335": "  }\n",
        "336": "\n",
        "337": "  /**\n",
        "338": "   * Returns a new default instance of {@code GraphConfig}.\n",
        "339": "   *\n",
        "340": "   * @see GraphConfig\n",
        "341": "   */\n",
        "342": "  public static GraphConfig config() {\n",
        "343": "    return new GraphConfig();\n",
        "344": "  }\n",
        "345": "\n",
        "346": "  /**\n",
        "347": "   * Returns a new instance of {@link DirectedGraph} with the default\n",
        "348": "   * graph configuration.\n",
        "349": "   *\n",
        "350": "   * @see GraphConfig\n",
        "351": "   */\n",
        "352": "  public static <N, E> DirectedGraph<N, E> createDirected() {\n",
        "353": "    return new IncidenceSetDirectedGraph<N, E>(config());\n",
        "354": "  }\n",
        "355": "\n",
        "356": "  /**\n",
        "357": "   * Returns a new instance of {@link DirectedGraph} with the graph\n",
        "358": "   * configuration specified by {@code config}.\n",
        "359": "   */\n",
        "360": "  public static <N, E> DirectedGraph<N, E> createDirected(GraphConfig config) {\n",
        "361": "    return new IncidenceSetDirectedGraph<N, E>(config);\n",
        "362": "  }\n",
        "363": "\n",
        "364": "  /**\n",
        "365": "   * Returns a new instance of {@link UndirectedGraph} with the default\n",
        "366": "   * graph configuration.\n",
        "367": "   *\n",
        "368": "   * @see GraphConfig\n",
        "369": "   */\n",
        "370": "  public static <N, E> UndirectedGraph<N, E> createUndirected() {\n",
        "371": "    return new IncidenceSetUndirectedGraph<N, E>(config());\n",
        "372": "  }\n",
        "373": "\n",
        "374": "  /**\n",
        "375": "   * Returns a new instance of {@link UndirectedGraph} with the graph\n",
        "376": "   * configuration specified by {@code config}.\n",
        "377": "   */\n",
        "378": "  public static <N, E> UndirectedGraph<N, E> createUndirected(GraphConfig config) {\n",
        "379": "    return new IncidenceSetUndirectedGraph<N, E>(config);\n",
        "380": "  }\n",
        "381": "\n",
        "408": "      // TODO(b/27195992): Consider an optimization for the case where both graphs are undirected.\n",
        "409": "      if (!graph1.outEdges(node).equals(graph2.outEdges(node))) {\n",
        "428": "   * is a {@link DirectedGraph}.\n",
        "431": "    return String.format(\"config: %s, nodes: %s, edges: %s\",\n",
        "432": "        graph.config(),\n",
        "473": "    if (graph instanceof DirectedGraph) {\n",
        "474": "      @SuppressWarnings(\"unchecked\")\n",
        "475": "      final DirectedGraph<?, ?> directedGraph = (DirectedGraph<?, ?>) graph;\n",
        "480": "              directedGraph.source(edge), directedGraph.target(edge));\n"
    }
}