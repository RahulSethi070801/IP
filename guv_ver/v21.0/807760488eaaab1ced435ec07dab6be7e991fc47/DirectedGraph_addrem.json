{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.Beta;\n",
        "20": "import com.google.errorprone.annotations.CanIgnoreReturnValue;\n",
        "21": "\n",
        "22": "import java.util.Set;\n",
        "23": "\n",
        "24": "/**\n",
        "25": " * A subinterface of {@code Graph} for graphs whose edges are all directed.\n",
        "26": " *\n",
        "27": " * @author Joshua O'Madadhain\n",
        "28": " * @param <N> Node parameter type\n",
        "29": " * @param <E> Edge parameter type\n",
        "30": " * @since 20.0\n",
        "31": " */\n",
        "32": "@Beta\n",
        "33": "public interface DirectedGraph<N, E> extends Graph<N, E> {\n",
        "34": "  /**\n",
        "35": "   * Returns the node for which {@code edge} is an outgoing edge.\n",
        "36": "   *\n",
        "37": "   * @throws IllegalArgumentException if {@code edge} is not an element of this graph\n",
        "38": "   */\n",
        "39": "  N source(Object edge);\n",
        "40": "\n",
        "41": "  /**\n",
        "42": "   * Returns the node for which {@code edge} is an incoming edge.\n",
        "43": "   *\n",
        "44": "   * @throws IllegalArgumentException if {@code edge} is not an element of this graph\n",
        "45": "   */\n",
        "46": "  N target(Object edge);\n",
        "47": "\n",
        "48": "  /**\n",
        "49": "   * {@inheritDoc}\n",
        "50": "   *\n",
        "51": "   * <p>If {@code edge} is not a self-loop, the iteration order will be\n",
        "52": "   * {@code [source(edge), target(edge)]}.\n",
        "53": "   *\n",
        "54": "   */\n",
        "55": "  @Override\n",
        "56": "  Set<N> incidentNodes(Object edge);\n",
        "57": "\n",
        "58": "  /**\n",
        "59": "   * {@inheritDoc}\n",
        "60": "   *\n",
        "61": "   * <p>The {@linkplain #source(Object) source} and {@linkplain #target(Object) target}\n",
        "62": "   * of the edges returned must be {@code source} and {@code target}, respectively.\n",
        "63": "   *\n",
        "64": "   */\n",
        "65": "  @Override\n",
        "66": "  Set<E> edgesConnecting(Object source, Object target);\n",
        "67": "\n",
        "68": "  /**\n",
        "69": "   * {@inheritDoc}\n",
        "70": "   *\n",
        "71": "   * <p>{@code edge} is an outgoing edge of {@code source} and an incoming edge of {@code target}.\n",
        "72": "   */\n",
        "73": "  @Override\n",
        "74": "  @CanIgnoreReturnValue\n",
        "75": "  boolean addEdge(E edge, N source, N target);\n",
        "76": "}\n"
    }
}