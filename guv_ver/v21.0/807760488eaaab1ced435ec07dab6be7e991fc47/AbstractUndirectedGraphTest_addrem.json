{
    "addition": {
        "19": "import static com.google.common.graph.Graphs.getPropertiesString;\n",
        "33": " * Abstract base class for testing undirected implementations of the {@link Graph} interface.\n",
        "35": " * <p>This class is responsible for testing that an undirected implementation of {@link Graph}\n",
        "36": " * is correctly handling undirected edges.  Implementation-dependent test cases are left to\n",
        "37": " * subclasses. Test cases that do not require the graph to be undirected are found in superclasses.\n",
        "43": "    for (Integer node : graph.nodes()) {\n",
        "45": "          .addEqualityGroup(graph.inEdges(node), graph.outEdges(node), graph.incidentEdges(node))\n",
        "48": "          .addEqualityGroup(graph.predecessors(node), graph.successors(node),\n",
        "49": "              graph.adjacentNodes(node))\n",
        "52": "      for (Integer adjacentNode : graph.adjacentNodes(node)) {\n",
        "53": "        assertThat(graph.edgesConnecting(node, adjacentNode))\n",
        "54": "            .containsExactlyElementsIn(graph.edgesConnecting(adjacentNode, node));\n",
        "62": "    assertThat(graph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "63": "    assertThat(graph.edgesConnecting(N2, N1)).containsExactly(E12);\n",
        "69": "    assertThat(graph.inEdges(N2)).containsExactly(E12);\n",
        "70": "    assertThat(graph.inEdges(N1)).containsExactly(E12);\n",
        "76": "    assertThat(graph.outEdges(N2)).containsExactly(E12);\n",
        "77": "    assertThat(graph.outEdges(N1)).containsExactly(E12);\n",
        "83": "    assertThat(graph.predecessors(N2)).containsExactly(N1);\n",
        "84": "    assertThat(graph.predecessors(N1)).containsExactly(N2);\n",
        "90": "    assertThat(graph.successors(N1)).containsExactly(N2);\n",
        "91": "    assertThat(graph.successors(N2)).containsExactly(N1);\n",
        "97": "    assertEquals(1, graph.inDegree(N2));\n",
        "98": "    assertEquals(1, graph.inDegree(N1));\n",
        "104": "    assertEquals(1, graph.outDegree(N1));\n",
        "105": "    assertEquals(1, graph.outDegree(N2));\n",
        "117": "    assertThat(graph.edges()).contains(E12);\n",
        "118": "    assertThat(graph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "119": "    assertThat(graph.edgesConnecting(N2, N1)).containsExactly(E12);\n",
        "125": "    ImmutableSet<String> edges = ImmutableSet.copyOf(graph.edges());\n",
        "127": "    assertThat(graph.edges()).containsExactlyElementsIn(edges);\n",
        "129": "    assertThat(graph.edges()).containsExactlyElementsIn(edges);\n",
        "164": "    assertTrue(graph.removeEdge(E12));\n",
        "165": "    assertThat(graph.edges()).doesNotContain(E12);\n",
        "166": "    assertThat(graph.edgesConnecting(N1, N2)).isEmpty();\n",
        "167": "    assertThat(graph.edgesConnecting(N2, N1)).isEmpty();\n",
        "172": "    assertThat(graph.toString()).isEqualTo(String.format(\"%s, nodes: %s, edges: {}\",\n",
        "173": "        getPropertiesString(graph), graph.nodes()));\n",
        "179": "    assertThat(graph.toString()).isEqualTo(String.format(\"%s, nodes: %s, edges: {}\",\n",
        "180": "        getPropertiesString(graph), graph.nodes()));\n",
        "187": "        \"%s, nodes: %s, edges: {%s=[%s, %s]}\",\n",
        "188": "        getPropertiesString(graph), graph.nodes(), E12, N1, N2));\n",
        "196": "        \"%s, nodes: %s, edges: {%s=[%s, %s], %s=[%s, %s]}\",\n",
        "197": "        getPropertiesString(graph),\n"
    },
    "removed": {
        "32": " * Abstract base class for testing implementations of {@link UndirectedGraph} interface.\n",
        "33": " *\n",
        "34": " * <p>This class is responsible for testing that an implementation of the interface\n",
        "35": " * {@code UndirectedGraph} is correctly handling undirected edges.\n",
        "36": " * Implementation-dependent test cases are left to subclasses. Test cases that\n",
        "37": " * do not require the graph to be undirected are found in superclasses.\n",
        "41": "  UndirectedGraph<Integer, String> undirectedGraph;\n",
        "42": "\n",
        "43": "  @Override\n",
        "44": "  public abstract UndirectedGraph<Integer, String> createGraph();\n",
        "45": "\n",
        "46": "  @Override\n",
        "47": "  public void init() {\n",
        "48": "    graph = undirectedGraph = createGraph();\n",
        "49": "  }\n",
        "53": "    for (Integer node : undirectedGraph.nodes()) {\n",
        "55": "          .addEqualityGroup(undirectedGraph.inEdges(node), undirectedGraph.outEdges(node),\n",
        "56": "              undirectedGraph.incidentEdges(node))\n",
        "59": "          .addEqualityGroup(undirectedGraph.predecessors(node), undirectedGraph.successors(node),\n",
        "60": "              undirectedGraph.adjacentNodes(node))\n",
        "63": "      for (Integer adjacentNode : undirectedGraph.adjacentNodes(node)) {\n",
        "64": "        assertThat(undirectedGraph.edgesConnecting(node, adjacentNode))\n",
        "65": "            .containsExactlyElementsIn(undirectedGraph.edgesConnecting(adjacentNode, node));\n",
        "73": "    assertThat(undirectedGraph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "74": "    assertThat(undirectedGraph.edgesConnecting(N2, N1)).containsExactly(E12);\n",
        "80": "    assertThat(undirectedGraph.inEdges(N2)).containsExactly(E12);\n",
        "81": "    assertThat(undirectedGraph.inEdges(N1)).containsExactly(E12);\n",
        "87": "    assertThat(undirectedGraph.outEdges(N2)).containsExactly(E12);\n",
        "88": "    assertThat(undirectedGraph.outEdges(N1)).containsExactly(E12);\n",
        "94": "    assertThat(undirectedGraph.predecessors(N2)).containsExactly(N1);\n",
        "95": "    assertThat(undirectedGraph.predecessors(N1)).containsExactly(N2);\n",
        "101": "    assertThat(undirectedGraph.successors(N1)).containsExactly(N2);\n",
        "102": "    assertThat(undirectedGraph.successors(N2)).containsExactly(N1);\n",
        "108": "    assertEquals(1, undirectedGraph.inDegree(N2));\n",
        "109": "    assertEquals(1, undirectedGraph.inDegree(N1));\n",
        "115": "    assertEquals(1, undirectedGraph.outDegree(N1));\n",
        "116": "    assertEquals(1, undirectedGraph.outDegree(N2));\n",
        "128": "    assertThat(undirectedGraph.edges()).contains(E12);\n",
        "129": "    assertThat(undirectedGraph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "130": "    assertThat(undirectedGraph.edgesConnecting(N2, N1)).containsExactly(E12);\n",
        "136": "    ImmutableSet<String> edges = ImmutableSet.copyOf(undirectedGraph.edges());\n",
        "138": "    assertThat(undirectedGraph.edges()).containsExactlyElementsIn(edges);\n",
        "140": "    assertThat(undirectedGraph.edges()).containsExactlyElementsIn(edges);\n",
        "175": "    assertTrue(undirectedGraph.removeEdge(E12));\n",
        "176": "    assertThat(undirectedGraph.edges()).doesNotContain(E12);\n",
        "177": "    assertThat(undirectedGraph.edgesConnecting(N1, N2)).isEmpty();\n",
        "178": "    assertThat(undirectedGraph.edgesConnecting(N2, N1)).isEmpty();\n",
        "183": "    assertThat(graph.toString()).isEqualTo(String.format(\"config: %s, nodes: %s, edges: {}\",\n",
        "184": "        graph.config(), graph.nodes()));\n",
        "190": "    assertThat(graph.toString()).isEqualTo(String.format(\"config: %s, nodes: %s, edges: {}\",\n",
        "191": "        graph.config(), graph.nodes()));\n",
        "198": "        \"config: %s, nodes: %s, edges: {%s=[%s, %s]}\",\n",
        "199": "        graph.config(), graph.nodes(), E12, N1, N2));\n",
        "207": "        \"config: %s, nodes: %s, edges: {%s=[%s, %s], %s=[%s, %s]}\",\n",
        "208": "        graph.config(),\n"
    }
}