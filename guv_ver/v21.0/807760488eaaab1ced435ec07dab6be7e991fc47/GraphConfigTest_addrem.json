{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2015 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "21": "import com.google.common.testing.EqualsTester;\n",
        "22": "\n",
        "23": "import org.junit.Test;\n",
        "24": "import org.junit.runner.RunWith;\n",
        "25": "import org.junit.runners.JUnit4;\n",
        "26": "\n",
        "27": "@RunWith(JUnit4.class)\n",
        "28": "public final class GraphConfigTest {\n",
        "29": "\n",
        "30": "  @Test\n",
        "31": "  public void testEquals() throws Exception {\n",
        "32": "    GraphConfig configA1 = Graphs.config().expectedNodeCount(5);\n",
        "33": "    GraphConfig configA2 = Graphs.config().expectedNodeCount(5);\n",
        "34": "\n",
        "35": "    GraphConfig configB = Graphs.config().expectedNodeCount(10);\n",
        "36": "\n",
        "37": "    new EqualsTester()\n",
        "38": "        .addEqualityGroup(configA1, configA2)\n",
        "39": "        .addEqualityGroup(configB)\n",
        "40": "        .testEquals();\n",
        "41": "  }\n",
        "42": "\n",
        "43": "  @Test\n",
        "44": "  public void toString_selfLoops() {\n",
        "45": "    assertThat(Graphs.config().toString())\n",
        "46": "        .isEqualTo(\"self-loops allowed\");\n",
        "47": "  }\n",
        "48": "\n",
        "49": "  @Test\n",
        "50": "  public void toString_noSelfLoops() {\n",
        "51": "    assertThat(Graphs.config().noSelfLoops().toString())\n",
        "52": "        .isEqualTo(\"self-loops disallowed\");\n",
        "53": "  }\n",
        "54": "\n",
        "55": "  @Test\n",
        "56": "  public void toString_selfLoops_multigraph() {\n",
        "57": "    assertThat(Graphs.config().multigraph().toString())\n",
        "58": "        .isEqualTo(\"multigraph,self-loops allowed\");\n",
        "59": "  }\n",
        "60": "\n",
        "61": "  @Test\n",
        "62": "  public void toString_noSelfLoops_multigraph() {\n",
        "63": "    assertThat(Graphs.config().noSelfLoops().multigraph().toString())\n",
        "64": "        .isEqualTo(\"multigraph,self-loops disallowed\");\n",
        "65": "  }\n",
        "66": "\n",
        "67": "  @Test\n",
        "68": "  public void compatibleWith_default() {\n",
        "69": "    assertThat(Graphs.config().compatibleWith(Graphs.config())).isTrue();\n",
        "70": "  }\n",
        "71": "\n",
        "72": "  @Test\n",
        "73": "  public void compatibleWith_multigraph_compatible() {\n",
        "74": "    assertThat(Graphs.config().multigraph().compatibleWith(\n",
        "75": "        Graphs.config().multigraph())).isTrue();\n",
        "76": "\n",
        "77": "    assertThat(Graphs.config().multigraph().compatibleWith(\n",
        "78": "      Graphs.config())).isTrue();\n",
        "79": "  }\n",
        "80": "\n",
        "81": "  @Test\n",
        "82": "  public void compatibleWith_multigraph_incompatible() {\n",
        "83": "    assertThat(Graphs.config().compatibleWith(\n",
        "84": "        Graphs.config().multigraph())).isFalse();\n",
        "85": "  }\n",
        "86": "\n",
        "87": "  @Test\n",
        "88": "  public void compatibleWith_selfLoops_compatible() {\n",
        "89": "    assertThat(Graphs.config().noSelfLoops().compatibleWith(\n",
        "90": "        Graphs.config().noSelfLoops())).isTrue();\n",
        "91": "\n",
        "92": "    assertThat(Graphs.config().compatibleWith(\n",
        "93": "        Graphs.config().noSelfLoops())).isTrue();\n",
        "94": "  }\n",
        "95": "\n",
        "96": "  @Test\n",
        "97": "  public void compatibleWith_selfLoops_incompatible() {\n",
        "98": "    assertThat(Graphs.config().noSelfLoops().compatibleWith(\n",
        "99": "        Graphs.config())).isFalse();\n",
        "100": "  }\n",
        "101": "}\n"
    }
}