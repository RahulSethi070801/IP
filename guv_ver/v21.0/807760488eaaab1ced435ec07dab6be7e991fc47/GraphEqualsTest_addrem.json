{
    "addition": {
        "59": "    this.graph = createGraph(graphType);\n",
        "62": "  private static Graph<Integer, String> createGraph(GraphType graphType) {\n",
        "63": "    switch (graphType) {\n",
        "64": "      case UNDIRECTED:\n",
        "65": "        return GraphBuilder.undirected().build();\n",
        "66": "      case DIRECTED:\n",
        "67": "        return GraphBuilder.directed().build();\n",
        "68": "      default:\n",
        "69": "        throw new IllegalStateException(\"Unexpected graph type: \" + graphType);\n",
        "70": "    }\n",
        "73": "  private static GraphType oppositeType(GraphType graphType) {\n",
        "76": "        return GraphType.DIRECTED;\n",
        "78": "        return GraphType.UNDIRECTED;\n",
        "88": "    Graph<Integer, String> g2 = createGraph(graphType);\n",
        "99": "    Graph<Integer, String> g2 = createGraph(graphType);\n",
        "110": "    Graph<Integer, String> g2 = createGraph(oppositeType(graphType));\n",
        "122": "    Graph<Integer, String> g2 = createGraph(oppositeType(graphType));\n",
        "134": "    Graph<Integer, String> g2 = createGraph(graphType);\n",
        "142": "  // Node/edge sets and node/edge connections are the same, but graph properties differ.\n",
        "143": "  // (In this case the graphs are considered equal; the property differences are irrelevant.)\n",
        "145": "  public void equals_propertiesDiffer() {\n",
        "148": "    Graph<Integer, String> g2 = GraphBuilder.from(graph)\n",
        "149": "        .allowsParallelEdges(!graph.allowsParallelEdges())\n",
        "150": "        .allowsSelfLoops(!graph.allowsSelfLoops())\n",
        "151": "        .build();\n",
        "161": "    GraphBuilder<Integer, String> builder = GraphBuilder.from(graph).allowsParallelEdges(true);\n",
        "162": "    Graph<Integer, String> g1 = builder.build();\n",
        "163": "    Graph<Integer, String> g2 = builder.build();\n",
        "180": "    Graph<Integer, String> g2 = createGraph(graphType);\n"
    },
    "removed": {
        "19": "import static com.google.common.graph.Graphs.MULTIGRAPH;\n",
        "20": "\n",
        "61": "    this.graph = createGraph();\n",
        "64": "  private Graph<Integer, String> createGraph() {\n",
        "65": "    return createGraph(Graphs.config());\n",
        "68": "  private Graph<Integer, String> createGraph(GraphConfig config) {\n",
        "71": "        return Graphs.createUndirected(config);\n",
        "73": "        return Graphs.createDirected(config);\n",
        "83": "    Graph<Integer, String> g2 = createGraph();\n",
        "94": "    Graph<Integer, String> g2 = createGraph();\n",
        "105": "    Graph<Integer, String> g2;\n",
        "106": "    switch (graphType) {\n",
        "107": "      case UNDIRECTED:\n",
        "108": "        g2 = Graphs.createDirected();\n",
        "109": "        break;\n",
        "110": "      case DIRECTED:\n",
        "111": "        g2 = Graphs.createUndirected();\n",
        "112": "        break;\n",
        "113": "      default:\n",
        "114": "        throw new IllegalStateException(\"Unexpected graph type: \" + graphType);\n",
        "115": "    }\n",
        "116": "\n",
        "128": "    Graph<Integer, String> g2;\n",
        "129": "    switch (graphType) {\n",
        "130": "      case UNDIRECTED:\n",
        "131": "        g2 = Graphs.createDirected();\n",
        "132": "        break;\n",
        "133": "      case DIRECTED:\n",
        "134": "        g2 = Graphs.createUndirected();\n",
        "135": "        break;\n",
        "136": "      default:\n",
        "137": "        throw new IllegalStateException(\"Unexpected graph type: \" + graphType);\n",
        "138": "    }\n",
        "139": "\n",
        "151": "    Graph<Integer, String> g2 = createGraph();\n",
        "159": "  // Node/edge sets and node/edge connections are the same, but GraphConfigs differ.\n",
        "160": "  // (In this case the graphs are considered equal; the config differences are irrelevant.)\n",
        "162": "  public void equals_configsDiffer() {\n",
        "165": "    Graph<Integer, String> g2 = createGraph(MULTIGRAPH.noSelfLoops());\n",
        "175": "    Graph<Integer, String> g1 = createGraph(MULTIGRAPH);\n",
        "176": "    Graph<Integer, String> g2 = createGraph(MULTIGRAPH);\n",
        "193": "    Graph<Integer, String> g2 = createGraph();\n"
    }
}