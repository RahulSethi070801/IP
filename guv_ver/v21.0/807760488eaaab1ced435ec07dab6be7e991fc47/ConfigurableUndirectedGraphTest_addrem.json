{
    "addition": {
        "19": "import static com.google.common.graph.Graphs.getPropertiesString;\n",
        "34": " * Tests for an undirected {@link ConfigurableGraph} with default graph properties.\n",
        "37": "public class ConfigurableUndirectedGraphTest extends ConfigurableSimpleUndirectedGraphTest {\n",
        "38": "\n",
        "40": "  public Graph<Integer, String> createGraph() {\n",
        "41": "    return GraphBuilder.undirected().build();\n",
        "81": "    assertThat(graph.edgesConnecting(N1, N1)).containsExactly(E11);\n",
        "83": "    assertThat(graph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "84": "    assertThat(graph.edgesConnecting(N2, N1)).containsExactly(E12);\n",
        "85": "    assertThat(graph.edgesConnecting(N1, N1)).containsExactly(E11);\n",
        "91": "    assertThat(graph.inEdges(N1)).containsExactly(E11);\n",
        "93": "    assertThat(graph.inEdges(N1)).containsExactly(E11, E12);\n",
        "99": "    assertThat(graph.outEdges(N1)).containsExactly(E11);\n",
        "101": "    assertThat(graph.outEdges(N1)).containsExactly(E11, E12);\n",
        "107": "    assertThat(graph.predecessors(N1)).containsExactly(N1);\n",
        "109": "    assertThat(graph.predecessors(N1)).containsExactly(N1, N2);\n",
        "115": "    assertThat(graph.successors(N1)).containsExactly(N1);\n",
        "117": "    assertThat(graph.successors(N1)).containsExactly(N1, N2);\n",
        "131": "    assertEquals(1, graph.inDegree(N1));\n",
        "133": "    assertEquals(2, graph.inDegree(N1));\n",
        "139": "    assertEquals(1, graph.outDegree(N1));\n",
        "141": "    assertEquals(2, graph.outDegree(N1));\n",
        "215": "    Graph<Integer, String> graphA = createGraph();\n",
        "217": "    Graph<Integer, String> graphB = createGraph();\n",
        "230": "        \"%s, nodes: %s, edges: {%s=[%s]}\",\n",
        "231": "        getPropertiesString(graph), graph.nodes(), E11, N1));\n"
    },
    "removed": {
        "33": " * Tests for {@link IncidenceSetUndirectedGraph} with default graph configuration.\n",
        "34": " *\n",
        "35": " * @see GraphConfig\n",
        "38": "public class IncidenceSetUndirectedGraphTest extends IncidenceSetSimpleUndirectedGraphTest {\n",
        "40": "  public UndirectedGraph<Integer, String> createGraph() {\n",
        "41": "    return Graphs.createUndirected();\n",
        "81": "    assertThat(undirectedGraph.edgesConnecting(N1, N1)).containsExactly(E11);\n",
        "83": "    assertThat(undirectedGraph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "84": "    assertThat(undirectedGraph.edgesConnecting(N2, N1)).containsExactly(E12);\n",
        "85": "    assertThat(undirectedGraph.edgesConnecting(N1, N1)).containsExactly(E11);\n",
        "91": "    assertThat(undirectedGraph.inEdges(N1)).containsExactly(E11);\n",
        "93": "    assertThat(undirectedGraph.inEdges(N1)).containsExactly(E11, E12);\n",
        "99": "    assertThat(undirectedGraph.outEdges(N1)).containsExactly(E11);\n",
        "101": "    assertThat(undirectedGraph.outEdges(N1)).containsExactly(E11, E12);\n",
        "107": "    assertThat(undirectedGraph.predecessors(N1)).containsExactly(N1);\n",
        "109": "    assertThat(undirectedGraph.predecessors(N1)).containsExactly(N1, N2);\n",
        "115": "    assertThat(undirectedGraph.successors(N1)).containsExactly(N1);\n",
        "117": "    assertThat(undirectedGraph.successors(N1)).containsExactly(N1, N2);\n",
        "131": "    assertEquals(1, undirectedGraph.inDegree(N1));\n",
        "133": "    assertEquals(2, undirectedGraph.inDegree(N1));\n",
        "139": "    assertEquals(1, undirectedGraph.outDegree(N1));\n",
        "141": "    assertEquals(2, undirectedGraph.outDegree(N1));\n",
        "215": "    UndirectedGraph<Integer, String> graphA = createGraph();\n",
        "217": "    UndirectedGraph<Integer, String> graphB = createGraph();\n",
        "230": "        \"config: %s, nodes: %s, edges: {%s=[%s]}\",\n",
        "231": "        graph.config(), graph.nodes(), E11, N1));\n"
    }
}