{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "import static org.junit.Assert.assertTrue;\n",
        "21": "import static org.junit.Assert.fail;\n",
        "22": "\n",
        "23": "import com.google.errorprone.annotations.CanIgnoreReturnValue;\n",
        "24": "\n",
        "25": "import org.junit.Test;\n",
        "26": "import org.junit.runner.RunWith;\n",
        "27": "import org.junit.runners.JUnit4;\n",
        "28": "\n",
        "29": "/**\n",
        "30": " * Tests for {@link ImmutableUndirectedGraph}, creating a simple undirected graph (parallel and\n",
        "31": " * self-loop edges are not allowed)\n",
        "32": " */\n",
        "33": "@RunWith(JUnit4.class)\n",
        "34": "public class ImmutableSimpleUndirectedGraphTest extends AbstractImmutableUndirectedGraphTest {\n",
        "35": "  protected ImmutableUndirectedGraph.Builder<Integer, String> builder;\n",
        "36": "\n",
        "37": "  @Override\n",
        "38": "  @CanIgnoreReturnValue\n",
        "39": "  final boolean addNode(Integer n) {\n",
        "40": "    UndirectedGraph<Integer, String> oldGraph = Graphs.copyOf(undirectedGraph);\n",
        "41": "    graph = undirectedGraph = builder.addNode(n).build();\n",
        "42": "    return !graph.equals(oldGraph);\n",
        "43": "  }\n",
        "44": "\n",
        "45": "  @Override\n",
        "46": "  @CanIgnoreReturnValue\n",
        "47": "  final boolean addEdge(String e, Integer n1, Integer n2) {\n",
        "48": "    UndirectedGraph<Integer, String> oldGraph = Graphs.copyOf(undirectedGraph);\n",
        "49": "    graph = undirectedGraph = builder.addEdge(e, n1, n2).build();\n",
        "50": "    return !graph.equals(oldGraph);\n",
        "51": "  }\n",
        "52": "\n",
        "53": "  @Override\n",
        "54": "  public ImmutableUndirectedGraph<Integer, String> createGraph() {\n",
        "55": "    builder = ImmutableUndirectedGraph.builder(Graphs.config().noSelfLoops());\n",
        "56": "    return builder.build();\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  @Test\n",
        "60": "  public void addEdge_selfLoop() {\n",
        "61": "    try {\n",
        "62": "      addEdge(E11, N1, N1);\n",
        "63": "      fail(ERROR_ADDED_SELF_LOOP);\n",
        "64": "    } catch (IllegalArgumentException e) {\n",
        "65": "      assertThat(e.getMessage()).contains(ERROR_SELF_LOOP);\n",
        "66": "    }\n",
        "67": "  }\n",
        "68": "\n",
        "69": "  /**\n",
        "70": "   * This test checks an implementation dependent feature. It tests that\n",
        "71": "   * the method {@code addEdge} will silently add the missing nodes to the builder,\n",
        "72": "   * then add the edge connecting them. We are not using the proxy methods here\n",
        "73": "   * as we want to test {@code addEdge} when the end-points are not elements\n",
        "74": "   * of the graph.\n",
        "75": "   */\n",
        "76": "  @Test\n",
        "77": "  public void addEdge_nodesNotInGraph() {\n",
        "78": "    addNode(N1);\n",
        "79": "    assertTrue(addEdge(E15, N1, N5));\n",
        "80": "    assertTrue(addEdge(E41, N4, N1));\n",
        "81": "    assertTrue(addEdge(E23, N2, N3));\n",
        "82": "    assertThat(undirectedGraph.nodes()).containsExactly(N1, N5, N4, N2, N3).inOrder();\n",
        "83": "    assertThat(undirectedGraph.edges()).containsExactly(E15, E41, E23).inOrder();\n",
        "84": "    assertThat(undirectedGraph.edgesConnecting(N1, N5)).containsExactly(E15);\n",
        "85": "    assertThat(undirectedGraph.edgesConnecting(N4, N1)).containsExactly(E41);\n",
        "86": "    assertThat(undirectedGraph.edgesConnecting(N2, N3)).containsExactly(E23);\n",
        "87": "    assertThat(undirectedGraph.edgesConnecting(N3, N2)).containsExactly(E23);\n",
        "88": "  }\n",
        "89": "\n",
        "90": "  @Test\n",
        "91": "  public void copyOf_nullArgument() {\n",
        "92": "    try {\n",
        "93": "      ImmutableUndirectedGraph.copyOf(null);\n",
        "94": "      fail(\"Should have rejected a null graph\");\n",
        "95": "    } catch (NullPointerException expected) {\n",
        "96": "    }\n",
        "97": "  }\n",
        "98": "\n",
        "99": "  @Test\n",
        "100": "  public void copyOf() {\n",
        "101": "    UndirectedGraph<Integer, String> graph = Graphs.createUndirected(undirectedGraph.config());\n",
        "102": "    populateInputGraph(graph);\n",
        "103": "    assertThat(ImmutableUndirectedGraph.copyOf(graph)).isEqualTo(graph);\n",
        "104": "  }\n",
        "105": "\n",
        "106": "  @Test\n",
        "107": "  public void addGraph() {\n",
        "108": "    UndirectedGraph<Integer, String> graph = Graphs.createUndirected(undirectedGraph.config());\n",
        "109": "    populateInputGraph(graph);\n",
        "110": "    assertThat(builder.addGraph(graph).build()).isEqualTo(graph);\n",
        "111": "  }\n",
        "112": "\n",
        "113": "  @Test\n",
        "114": "  public void addGraph_overlap() {\n",
        "115": "    UndirectedGraph<Integer, String> graph = Graphs.createUndirected(undirectedGraph.config());\n",
        "116": "    populateInputGraph(graph);\n",
        "117": "    // Add an edge that is in 'graph' (overlap)\n",
        "118": "    builder.addEdge(E12, N1, N2);\n",
        "119": "    builder.addGraph(graph);\n",
        "120": "    assertThat(builder.build()).isEqualTo(graph);\n",
        "121": "  }\n",
        "122": "\n",
        "123": "  @Test\n",
        "124": "  public void addGraph_inconsistentEdges() {\n",
        "125": "    UndirectedGraph<Integer, String> graph = Graphs.createUndirected(undirectedGraph.config());\n",
        "126": "    populateInputGraph(graph);\n",
        "127": "    builder.addEdge(E12, N5, N1);\n",
        "128": "    try {\n",
        "129": "      builder.addGraph(graph);\n",
        "130": "      fail(\"Should have rejected a graph whose edge definitions were inconsistent with existing\"\n",
        "131": "          + \"builder state\");\n",
        "132": "    } catch (IllegalArgumentException expected) {\n",
        "133": "    }\n",
        "134": "  }\n",
        "135": "\n",
        "136": "  protected void populateInputGraph(UndirectedGraph<Integer, String> graph) {\n",
        "137": "    graph.addEdge(E12, N1, N2);\n",
        "138": "    graph.addEdge(E23, N2, N3);\n",
        "139": "    graph.addNode(N5);\n",
        "140": "  }\n",
        "141": "}\n"
    }
}