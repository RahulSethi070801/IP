{
    "addition": {
        "30": " * Tests for a directed {@link ConfigurableGraph}, creating a simple directed graph (parallel\n",
        "31": " * and self-loop edges are not allowed).\n",
        "34": "public class ConfigurableSimpleDirectedGraphTest extends AbstractDirectedGraphTest {\n",
        "37": "  public Graph<Integer, String> createGraph() {\n",
        "38": "    return GraphBuilder.directed().allowsSelfLoops(false).build();\n",
        "44": "    Set<Integer> nodes = graph.nodes();\n",
        "50": "      assertThat(graph.nodes()).containsExactlyElementsIn(nodes);\n",
        "57": "    Set<String> edges = graph.edges();\n",
        "63": "      assertThat(graph.edges()).containsExactlyElementsIn(edges);\n",
        "71": "    Set<String> incidentEdges = graph.incidentEdges(N1);\n",
        "77": "      assertThat(graph.incidentEdges(N1)).containsExactlyElementsIn(incidentEdges);\n",
        "85": "    Set<Integer> incidentNodes = graph.incidentNodes(E12);\n",
        "97": "    Set<Integer> adjacentNodes = graph.adjacentNodes(N1);\n",
        "103": "      assertThat(graph.adjacentNodes(N1)).containsExactlyElementsIn(adjacentNodes);\n",
        "111": "    Set<String> adjacentEdges = graph.adjacentEdges(E12);\n",
        "117": "      assertThat(graph.adjacentEdges(E12)).containsExactlyElementsIn(adjacentEdges);\n",
        "126": "    Set<String> edgesConnecting = graph.edgesConnecting(N1, N2);\n",
        "132": "      assertThat(graph.edgesConnecting(N1, N2)).containsExactlyElementsIn(edgesConnecting);\n",
        "140": "    Set<String> inEdges = graph.inEdges(N2);\n",
        "146": "      assertThat(graph.inEdges(N2)).containsExactlyElementsIn(inEdges);\n",
        "154": "    Set<String> outEdges = graph.outEdges(N1);\n",
        "160": "      assertThat(graph.outEdges(N1)).containsExactlyElementsIn(outEdges);\n",
        "168": "    Set<Integer> predecessors = graph.predecessors(N2);\n",
        "174": "      assertThat(graph.predecessors(N2)).containsExactlyElementsIn(predecessors);\n",
        "182": "    Set<Integer> successors = graph.successors(N1);\n",
        "188": "      assertThat(successors).containsExactlyElementsIn(graph.successors(N1));\n",
        "213": "    graph.addNode(N1);\n",
        "214": "    assertTrue(graph.addEdge(E15, N1, N5));\n",
        "215": "    assertTrue(graph.addEdge(E41, N4, N1));\n",
        "216": "    assertTrue(graph.addEdge(E23, N2, N3));\n",
        "217": "    assertThat(graph.nodes()).containsExactly(N1, N5, N4, N2, N3).inOrder();\n",
        "218": "    assertThat(graph.edges()).containsExactly(E15, E41, E23).inOrder();\n",
        "219": "    assertThat(graph.edgesConnecting(N1, N5)).containsExactly(E15);\n",
        "220": "    assertThat(graph.edgesConnecting(N4, N1)).containsExactly(E41);\n",
        "221": "    assertThat(graph.edgesConnecting(N2, N3)).containsExactly(E23);\n",
        "223": "    assertThat(graph.edgesConnecting(N3, N2)).isEmpty();\n"
    },
    "removed": {
        "30": " * Tests for {@link IncidenceSetDirectedGraph}, creating a simple directed graph (parallel and\n",
        "31": " * self-loop edges are not allowed).\n",
        "34": "public class IncidenceSetSimpleDirectedGraphTest extends AbstractDirectedGraphTest {\n",
        "37": "  public DirectedGraph<Integer, String> createGraph() {\n",
        "38": "    return Graphs.createDirected(Graphs.config().noSelfLoops());\n",
        "44": "    Set<Integer> nodes = directedGraph.nodes();\n",
        "50": "      assertThat(directedGraph.nodes()).containsExactlyElementsIn(nodes);\n",
        "57": "    Set<String> edges = directedGraph.edges();\n",
        "63": "      assertThat(directedGraph.edges()).containsExactlyElementsIn(edges);\n",
        "71": "    Set<String> incidentEdges = directedGraph.incidentEdges(N1);\n",
        "77": "      assertThat(directedGraph.incidentEdges(N1)).containsExactlyElementsIn(incidentEdges);\n",
        "85": "    Set<Integer> incidentNodes = directedGraph.incidentNodes(E12);\n",
        "97": "    Set<Integer> adjacentNodes = directedGraph.adjacentNodes(N1);\n",
        "103": "      assertThat(directedGraph.adjacentNodes(N1)).containsExactlyElementsIn(adjacentNodes);\n",
        "111": "    Set<String> adjacentEdges = directedGraph.adjacentEdges(E12);\n",
        "117": "      assertThat(directedGraph.adjacentEdges(E12)).containsExactlyElementsIn(adjacentEdges);\n",
        "126": "    Set<String> edgesConnecting = directedGraph.edgesConnecting(N1, N2);\n",
        "132": "      assertThat(directedGraph.edgesConnecting(N1, N2)).containsExactlyElementsIn(edgesConnecting);\n",
        "140": "    Set<String> inEdges = directedGraph.inEdges(N2);\n",
        "146": "      assertThat(directedGraph.inEdges(N2)).containsExactlyElementsIn(inEdges);\n",
        "154": "    Set<String> outEdges = directedGraph.outEdges(N1);\n",
        "160": "      assertThat(directedGraph.outEdges(N1)).containsExactlyElementsIn(outEdges);\n",
        "168": "    Set<Integer> predecessors = directedGraph.predecessors(N2);\n",
        "174": "      assertThat(directedGraph.predecessors(N2)).containsExactlyElementsIn(predecessors);\n",
        "182": "    Set<Integer> successors = directedGraph.successors(N1);\n",
        "188": "      assertThat(successors).containsExactlyElementsIn(directedGraph.successors(N1));\n",
        "213": "    directedGraph.addNode(N1);\n",
        "214": "    assertTrue(directedGraph.addEdge(E15, N1, N5));\n",
        "215": "    assertTrue(directedGraph.addEdge(E41, N4, N1));\n",
        "216": "    assertTrue(directedGraph.addEdge(E23, N2, N3));\n",
        "217": "    assertThat(directedGraph.nodes()).containsExactly(N1, N5, N4, N2, N3).inOrder();\n",
        "218": "    assertThat(directedGraph.edges()).containsExactly(E15, E41, E23).inOrder();\n",
        "219": "    assertThat(directedGraph.edgesConnecting(N1, N5)).containsExactly(E15);\n",
        "220": "    assertThat(directedGraph.edgesConnecting(N4, N1)).containsExactly(E41);\n",
        "221": "    assertThat(directedGraph.edgesConnecting(N2, N3)).containsExactly(E23);\n",
        "223": "    assertThat(directedGraph.edgesConnecting(N3, N2)).isEmpty();\n"
    }
}