{
    "addition": {
        "24": "import static com.google.common.graph.GraphErrorMessageUtils.NOT_AVAILABLE_ON_UNDIRECTED;\n",
        "41": " * Instances of this class should be constructed with {@link GraphBuilder}.\n",
        "57": " * <p>The time complexity of all {@code Set}-returning accessors is O(1), since views are returned.\n",
        "58": " *\n",
        "59": " * <p>Time complexities for mutation methods:\n",
        "60": " * <ul>\n",
        "61": " * <li>{@code addNode(N node)}: O(1).\n",
        "62": " * <li>{@code addEdge(E edge, N node1, N node2)}: O(1).\n",
        "63": " * <li>{@code removeNode(N node)}: O(d_node).\n",
        "64": " * <li>{@code removeEdge(E edge)}: O(1), unless this graph allows parallel edges;\n",
        "65": " *     in that case this method is O(min(outD_edgeSource, inD_edgeTarget)).\n",
        "66": " * </ul>\n",
        "67": " * where d_node is the degree of node, inD_node is the in-degree of node, and outD_node is the\n",
        "68": " * out-degree of node.\n",
        "77": "class ConfigurableGraph<N, E> extends AbstractGraph<N, E> {\n",
        "81": "  private final boolean isDirected;\n",
        "82": "  private final boolean allowsParallelEdges;\n",
        "83": "  private final boolean allowsSelfLoops;\n",
        "84": "\n",
        "89": "   * Constructs a mutable graph with the properties specified in {@code builder}.\n",
        "91": "  ConfigurableGraph(GraphBuilder<? super N, ? super E> builder) {\n",
        "92": "    this(\n",
        "93": "        builder,\n",
        "94": "        Maps.<N, NodeConnections<N, E>>newLinkedHashMapWithExpectedSize(\n",
        "95": "            builder.expectedNodeCount.or(DEFAULT_MAP_SIZE)),\n",
        "96": "        Maps.<E, IncidentNodes<N>>newLinkedHashMapWithExpectedSize(\n",
        "97": "            builder.expectedEdgeCount.or(DEFAULT_MAP_SIZE)));\n",
        "101": "   * Constructs a graph with the properties specified in {@code builder}, initialized with\n",
        "102": "   * the given node and edge maps. May be used for either mutable or immutable graphs.\n",
        "104": "  ConfigurableGraph(GraphBuilder<? super N, ? super E> builder,\n",
        "105": "      Map<N, NodeConnections<N, E>> nodeConnections,\n",
        "107": "    this.isDirected = builder.directed;\n",
        "108": "    this.allowsParallelEdges = builder.allowsParallelEdges;\n",
        "109": "    this.allowsSelfLoops = builder.allowsSelfLoops;\n",
        "110": "    this.nodeConnections = checkNotNull(nodeConnections);\n",
        "111": "    this.edgeToIncidentNodes = checkNotNull(edgeToIncidentNodes);\n",
        "124": "  @Override\n",
        "125": "  public boolean isDirected() {\n",
        "126": "    return isDirected;\n",
        "127": "  }\n",
        "128": "\n",
        "129": "  @Override\n",
        "130": "  public boolean allowsParallelEdges() {\n",
        "131": "    return allowsParallelEdges;\n",
        "132": "  }\n",
        "133": "\n",
        "134": "  @Override\n",
        "135": "  public boolean allowsSelfLoops() {\n",
        "136": "    return allowsSelfLoops;\n",
        "137": "  }\n",
        "138": "\n",
        "177": "      if (!allowsSelfLoops) {\n",
        "209": "  @Override\n",
        "210": "  public N source(Object edge) {\n",
        "211": "    if (!isDirected) {\n",
        "212": "      throw new UnsupportedOperationException(NOT_AVAILABLE_ON_UNDIRECTED);\n",
        "213": "    }\n",
        "214": "    return checkedIncidentNodes(edge).node1();\n",
        "215": "  }\n",
        "216": "\n",
        "217": "  @Override\n",
        "218": "  public N target(Object edge) {\n",
        "219": "    if (!isDirected) {\n",
        "220": "      throw new UnsupportedOperationException(NOT_AVAILABLE_ON_UNDIRECTED);\n",
        "221": "    }\n",
        "222": "    return checkedIncidentNodes(edge).node2();\n",
        "223": "  }\n",
        "224": "\n",
        "254": "    checkArgument(allowsSelfLoops || !incidentNodes.isSelfLoop(), SELF_LOOPS_NOT_ALLOWED, node1);\n",
        "261": "    } else if (!allowsParallelEdges) {\n",
        "332": "  private NodeConnections<N, E> newNodeConnections() {\n",
        "333": "    return isDirected\n",
        "334": "        ? DirectedNodeConnections.<N, E>of()\n",
        "335": "        : UndirectedNodeConnections.<N, E>of();\n",
        "336": "  }\n",
        "337": "\n",
        "338": "  private NodeConnections<N, E> checkedConnections(Object node) {\n",
        "345": "  private IncidentNodes<N> checkedIncidentNodes(Object edge) {\n"
    },
    "removed": {
        "55": " * <p>The time complexity of all {@code Set}-returning accessors is O(1), since we\n",
        "56": " * are returning views.\n",
        "63": " * @see Graph\n",
        "66": "abstract class AbstractConfigurableGraph<N, E> extends AbstractGraph<N, E> {\n",
        "74": "   * Constructs a mutable graph with the specified configuration.\n",
        "76": "  AbstractConfigurableGraph(GraphConfig config) {\n",
        "77": "    super(config);\n",
        "78": "    this.nodeConnections =\n",
        "79": "        Maps.newLinkedHashMapWithExpectedSize(config.getExpectedNodeCount().or(DEFAULT_MAP_SIZE));\n",
        "80": "    this.edgeToIncidentNodes =\n",
        "81": "        Maps.newLinkedHashMapWithExpectedSize(config.getExpectedEdgeCount().or(DEFAULT_MAP_SIZE));\n",
        "85": "   * Constructs a graph with the specified configuration and node/edge relationships.\n",
        "86": "   * May be used for immutable graphs.\n",
        "88": "  AbstractConfigurableGraph(GraphConfig config, Map<N, NodeConnections<N, E>> nodeConnections,\n",
        "90": "    super(config);\n",
        "91": "    this.nodeConnections = nodeConnections;\n",
        "92": "    this.edgeToIncidentNodes = edgeToIncidentNodes;\n",
        "95": "  abstract NodeConnections<N, E> newNodeConnections();\n",
        "96": "\n",
        "145": "      if (!config.isSelfLoopsAllowed()) {\n",
        "206": "    checkArgument(config.isSelfLoopsAllowed() || !incidentNodes.isSelfLoop(),\n",
        "207": "        SELF_LOOPS_NOT_ALLOWED, node1);\n",
        "214": "    } else if (!config.isMultigraph()) {\n",
        "285": "  NodeConnections<N, E> checkedConnections(Object node) {\n",
        "292": "  IncidentNodes<N> checkedIncidentNodes(Object edge) {\n"
    }
}