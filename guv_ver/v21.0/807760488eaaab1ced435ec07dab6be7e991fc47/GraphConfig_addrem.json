{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "20": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.Beta;\n",
        "23": "import com.google.common.base.Joiner;\n",
        "24": "import com.google.common.base.Objects;\n",
        "25": "import com.google.common.base.Optional;\n",
        "26": "import com.google.common.collect.Lists;\n",
        "27": "\n",
        "28": "import java.util.List;\n",
        "29": "\n",
        "30": "import javax.annotation.Nullable;\n",
        "31": "\n",
        "32": "/**\n",
        "33": " * A class for configuring different types of graphs.\n",
        "34": " *\n",
        "35": " * <p>{@code Graphs.config()} should be used to get an instance of this class.\n",
        "36": " *\n",
        "37": " * <p>Currently, this class supports the following graph configurations (all combinations\n",
        "38": " * of these properties are valid unless stated otherwise):\n",
        "39": " * <ul>\n",
        "40": " * <li>Multigraphs.\n",
        "41": " * <li>Expected number of nodes/edges.\n",
        "42": " * <li>Self-loop edges.\n",
        "43": " * </ul>\n",
        "44": " *\n",
        "45": " * <p>Default graph configuration:\n",
        "46": " * <ul>\n",
        "47": " * <li>Self-loop edges are allowed.\n",
        "48": " * <li>It is not a multigraph: parallel edges (multiple edges directed from n1\n",
        "49": " *     to n2, or between them in case of undirected graphs) are not allowed.\n",
        "50": " * <li>In case of directed graphs, anti-parallel edges (same incident nodes but\n",
        "51": " *     in opposite direction, e.g. (n1, n2) and (n2, n1)) are allowed.\n",
        "52": " * <li>Nodes and edges are not sorted.\n",
        "53": " * </ul>\n",
        "54": " *\n",
        "55": " * <p>{@code GraphConfig} instances are thread-safe immutable, and are therefore safe to\n",
        "56": " * store as {@code static final} constants.\n",
        "57": " *\n",
        "58": " * @author Joshua O'Madadhain\n",
        "59": " * @see Graphs\n",
        "60": " * @since 20.0\n",
        "61": " */\n",
        "62": "// TODO(user): Add support for sorted nodes/edges. Use Object as\n",
        "63": "//     the node and edge types in this case: the same scheme used in CacheBuilder.\n",
        "64": "// TODO(user): Add support for hypergraphs.\n",
        "65": "// TODO(user): Handle sorted nodes/edges and expected number of nodes/edges together,\n",
        "66": "//     in case sorted nodes/edges is supported.\n",
        "67": "@Beta\n",
        "68": "public final class GraphConfig {\n",
        "69": "  private final boolean multigraph;\n",
        "70": "  private final boolean selfLoopsAllowed;\n",
        "71": "  private final Optional<Integer> expectedNodeCount;\n",
        "72": "  private final Optional<Integer> expectedEdgeCount;\n",
        "73": "\n",
        "74": "  // Creates an instance of this class with the default graph configuration.\n",
        "75": "  GraphConfig() {\n",
        "76": "    multigraph = false;\n",
        "77": "    selfLoopsAllowed = true;\n",
        "78": "    expectedNodeCount = Optional.absent();\n",
        "79": "    expectedEdgeCount = Optional.absent();\n",
        "80": "  }\n",
        "81": "\n",
        "82": "  private GraphConfig(\n",
        "83": "      boolean multigraph,\n",
        "84": "      boolean selfLoopsAllowed,\n",
        "85": "      Optional<Integer> expectedNodeCount,\n",
        "86": "      Optional<Integer> expectedEdgeCount) {\n",
        "87": "    this.multigraph = multigraph;\n",
        "88": "    this.selfLoopsAllowed = selfLoopsAllowed;\n",
        "89": "    this.expectedNodeCount = expectedNodeCount;\n",
        "90": "    this.expectedEdgeCount = expectedEdgeCount;\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  public boolean isMultigraph() {\n",
        "94": "    return multigraph;\n",
        "95": "  }\n",
        "96": "\n",
        "97": "  public boolean isSelfLoopsAllowed() {\n",
        "98": "    return selfLoopsAllowed;\n",
        "99": "  }\n",
        "100": "\n",
        "101": "  public Optional<Integer> getExpectedNodeCount() {\n",
        "102": "    return expectedNodeCount;\n",
        "103": "  }\n",
        "104": "\n",
        "105": "  public Optional<Integer> getExpectedEdgeCount() {\n",
        "106": "    return expectedEdgeCount;\n",
        "107": "  }\n",
        "108": "\n",
        "109": "  /**\n",
        "110": "   * Specifies the expected number of nodes in the graph configuration.\n",
        "111": "   *\n",
        "112": "   * @return a new {@code GraphConfig} instance that augments the existing configuration\n",
        "113": "   *         by specifying the expected number of nodes.\n",
        "114": "   * @throws IllegalArgumentException if {@code expectedNodeCount} is negative\n",
        "115": "   */\n",
        "116": "  public GraphConfig expectedNodeCount(int expectedNodeCount) {\n",
        "117": "    checkArgument(expectedNodeCount >= 0, \"The expected number of nodes can't be negative\");\n",
        "118": "    return new GraphConfig(\n",
        "119": "        multigraph, selfLoopsAllowed, Optional.of(expectedNodeCount), expectedEdgeCount);\n",
        "120": "  }\n",
        "121": "\n",
        "122": "  /**\n",
        "123": "   * Specifies the expected number of edges in the graph configuration.\n",
        "124": "   *\n",
        "125": "   * @return a new {@code GraphConfig} instance that augments the existing configuration\n",
        "126": "   *         by specifying the expected number of edges.\n",
        "127": "   * @throws IllegalArgumentException if {@code expectedEdgeCount} is negative\n",
        "128": "   */\n",
        "129": "  public GraphConfig expectedEdgeCount(int expectedEdgeCount) {\n",
        "130": "    checkArgument(expectedEdgeCount >= 0, \"The expected number of edges can't be negative\");\n",
        "131": "    return new GraphConfig(\n",
        "132": "        multigraph, selfLoopsAllowed, expectedNodeCount, Optional.of(expectedEdgeCount));\n",
        "133": "  }\n",
        "134": "\n",
        "135": "  /**\n",
        "136": "   * Specifies that this graph is a multigraph (allows parallel edges).\n",
        "137": "   *\n",
        "138": "   * @return a new {@code GraphConfig} instance that augments the existing configuration\n",
        "139": "   *         by allowing parallel edges (multigraph).\n",
        "140": "   */\n",
        "141": "  public GraphConfig multigraph() {\n",
        "142": "    return new GraphConfig(true, selfLoopsAllowed, expectedNodeCount, expectedEdgeCount);\n",
        "143": "  }\n",
        "144": "\n",
        "145": "  /**\n",
        "146": "   * Specifies that this graph does not allow self-loop edges.\n",
        "147": "   *\n",
        "148": "   * @return a new {@code GraphConfig} instance that augments the existing configuration\n",
        "149": "   *         by disallowing self-loop edges.\n",
        "150": "   */\n",
        "151": "  public GraphConfig noSelfLoops() {\n",
        "152": "    return new GraphConfig(multigraph, false, expectedNodeCount, expectedEdgeCount);\n",
        "153": "  }\n",
        "154": "\n",
        "155": "  /**\n",
        "156": "   * Returns true iff the configuration defined by this object is <i>compatible with</i> the\n",
        "157": "   * configuration defined by {@code that}.  Intuitively, this checks for structural properties\n",
        "158": "   * and ignores non-structural properties.  Specifically, this method checks whether the\n",
        "159": "   * configurations have compatible support for:\n",
        "160": "   * <ul>\n",
        "161": "   * <li>parallel edges\n",
        "162": "   * <li>self-loops\n",
        "163": "   * </ul>\n",
        "164": "   *\n",
        "165": "   * By \"compatible with\", we mean that this instance must be at least as permissive as the input\n",
        "166": "   * config ({@code that}).  Thus, for example, if the input permits parallel edges, this instance\n",
        "167": "   * must also permit parallel edges in order for the configurations to be compatible.\n",
        "168": "   *\n",
        "169": "   * <p>It does not compare expected values for numbers of edges or nodes,\n",
        "170": "   * and it is not equivalent to {@code Object.equals}.\n",
        "171": "   */\n",
        "172": "  public boolean compatibleWith(GraphConfig that) {\n",
        "173": "    checkNotNull(that, \"that\");\n",
        "174": "    if (that.multigraph && !this.multigraph) {\n",
        "175": "      return false;\n",
        "176": "    }\n",
        "177": "    if (that.selfLoopsAllowed && !this.selfLoopsAllowed) {\n",
        "178": "      return false;\n",
        "179": "    }\n",
        "180": "    return true;\n",
        "181": "  }\n",
        "182": "\n",
        "183": "  @Override\n",
        "184": "  public boolean equals(@Nullable Object object) {\n",
        "185": "    if (object instanceof GraphConfig) {\n",
        "186": "      GraphConfig that = (GraphConfig) object;\n",
        "187": "      return this.multigraph == that.multigraph\n",
        "188": "          && this.selfLoopsAllowed == that.selfLoopsAllowed\n",
        "189": "          && this.expectedNodeCount.equals(that.expectedNodeCount)\n",
        "190": "          && this.expectedEdgeCount.equals(that.expectedEdgeCount);\n",
        "191": "    }\n",
        "192": "    return false;\n",
        "193": "  }\n",
        "194": "\n",
        "195": "  @Override\n",
        "196": "  public int hashCode() {\n",
        "197": "    return Objects.hashCode(expectedNodeCount, expectedEdgeCount, multigraph, selfLoopsAllowed);\n",
        "198": "  }\n",
        "199": "\n",
        "200": "  @Override\n",
        "201": "  public String toString() {\n",
        "202": "    List<String> properties = Lists.newArrayList();\n",
        "203": "    if (multigraph) {\n",
        "204": "      properties.add(\"multigraph\");\n",
        "205": "    }\n",
        "206": "\n",
        "207": "    if (selfLoopsAllowed) {\n",
        "208": "      properties.add(\"self-loops allowed\");\n",
        "209": "    } else {\n",
        "210": "      properties.add(\"self-loops disallowed\");\n",
        "211": "    }\n",
        "212": "\n",
        "213": "    return Joiner.on(',').join(properties);\n",
        "214": "  }\n",
        "215": "}\n"
    }
}