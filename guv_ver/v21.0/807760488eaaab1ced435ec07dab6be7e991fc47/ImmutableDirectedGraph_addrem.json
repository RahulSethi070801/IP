{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.Beta;\n",
        "20": "import com.google.errorprone.annotations.CanIgnoreReturnValue;\n",
        "21": "\n",
        "22": "/**\n",
        "23": " * Implementation of an immutable directed graph consisting of nodes of type N\n",
        "24": " * and edges of type E.\n",
        "25": " *\n",
        "26": " * <p>Some invariants/assumptions are maintained in this implementation:\n",
        "27": " * <ul>\n",
        "28": " * <li>An edge has exactly two end-points (source node and target node), which\n",
        "29": " *     may or may not be distinct.\n",
        "30": " * <li>By default, this is not a multigraph, that is, parallel edges (multiple\n",
        "31": " *     edges directed from node1 to node2) are not allowed.  If you want a multigraph,\n",
        "32": " *     build the graph with the 'multigraph' option:\n",
        "33": " *     <pre>ImmutableDirectedGraph.builder(Graphs.config().multigraph()).build();</pre>\n",
        "34": " * <li>Anti-parallel edges (same incident nodes but in opposite direction,\n",
        "35": " *     e.g. (node1, node2) and (node2, node1)) are always allowed.\n",
        "36": " * <li>Edges are not adjacent to themselves by definition. In the case of a\n",
        "37": " *     self-loop, a node can be adjacent to itself, but an edge will never be.\n",
        "38": " * </ul>\n",
        "39": " *\n",
        "40": " * @author James Sexton\n",
        "41": " * @author Joshua O'Madadhain\n",
        "42": " * @author Omar Darwish\n",
        "43": " * @param <N> Node parameter type\n",
        "44": " * @param <E> Edge parameter type\n",
        "45": " * @see AbstractConfigurableGraph\n",
        "46": " * @see AbstractImmutableGraph\n",
        "47": " * @since 20.0\n",
        "48": " */\n",
        "49": "@Beta\n",
        "50": "public final class ImmutableDirectedGraph<N, E> extends AbstractImmutableGraph<N, E>\n",
        "51": "    implements DirectedGraph<N, E> {\n",
        "52": "\n",
        "53": "  private ImmutableDirectedGraph(Builder<N, E> builder) {\n",
        "54": "    super(builder);\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  @Override\n",
        "58": "  public N source(Object edge) {\n",
        "59": "    return checkedIncidentNodes(edge).node1();\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  @Override\n",
        "63": "  public N target(Object edge) {\n",
        "64": "    return checkedIncidentNodes(edge).node2();\n",
        "65": "  }\n",
        "66": "\n",
        "67": "  /**\n",
        "68": "   * Returns a new builder. The generated builder is equivalent to the builder\n",
        "69": "   * created by the {@code Builder} constructor.\n",
        "70": "   */\n",
        "71": "  public static <N, E> Builder<N, E> builder() {\n",
        "72": "    return new Builder<N, E>();\n",
        "73": "  }\n",
        "74": "\n",
        "75": "  /**\n",
        "76": "   * Returns a new builder. The generated builder is equivalent to the builder\n",
        "77": "   * created by the {@code Builder} constructor.\n",
        "78": "   *\n",
        "79": "   * @param config an instance of {@code GraphConfig} with the intended\n",
        "80": "   *        graph configuration.\n",
        "81": "   */\n",
        "82": "  public static <N, E> Builder<N, E> builder(GraphConfig config) {\n",
        "83": "    return new Builder<N, E>(config);\n",
        "84": "  }\n",
        "85": "\n",
        "86": "  /**\n",
        "87": "   * Returns an immutable copy of the input graph.\n",
        "88": "   */\n",
        "89": "  public static <N, E> ImmutableDirectedGraph<N, E> copyOf(DirectedGraph<N, E> graph) {\n",
        "90": "    return new Builder<N, E>(graph).build();\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  /**\n",
        "94": "   * A builder for creating immutable directed graph instances.\n",
        "95": "   *\n",
        "96": "   * @param <N> Node parameter type\n",
        "97": "   * @param <E> edge parameter type\n",
        "98": "   * @see GraphConfig\n",
        "99": "   */\n",
        "100": "  public static final class Builder<N, E> extends AbstractImmutableGraph.Builder<N, E> {\n",
        "101": "\n",
        "102": "    /**\n",
        "103": "     * Creates a new builder with the default graph configuration.\n",
        "104": "     */\n",
        "105": "    public Builder() {\n",
        "106": "      super(Graphs.<N, E>createDirected());\n",
        "107": "    }\n",
        "108": "\n",
        "109": "    /**\n",
        "110": "     * Creates a new builder with the specified graph configuration.\n",
        "111": "     */\n",
        "112": "    public Builder(GraphConfig config) {\n",
        "113": "      super(Graphs.<N, E>createDirected(config));\n",
        "114": "    }\n",
        "115": "\n",
        "116": "    /**\n",
        "117": "     * Creates a new builder whose internal state is that of {@code graph}.\n",
        "118": "     *\n",
        "119": "     * <p>NOTE: This constructor should only be used in the case where it will be immediately\n",
        "120": "     * followed by a call to {@code build}, to ensure that the input graph will not be modified.\n",
        "121": "     * Currently the only such context is {@code Immutable*Graph.copyOf()}, which use these\n",
        "122": "     * constructors to avoid making an extra copy of the graph state.\n",
        "123": "     * @see ImmutableDirectedGraph#copyOf(DirectedGraph)\n",
        "124": "     */\n",
        "125": "    private Builder(DirectedGraph<N, E> graph) {\n",
        "126": "      super(graph);\n",
        "127": "    }\n",
        "128": "\n",
        "129": "    @Override\n",
        "130": "    NodeConnections<N, E> nodeConnectionsOf(N node) {\n",
        "131": "      return DirectedNodeConnections.ofImmutable(\n",
        "132": "          graph.predecessors(node), graph.successors(node),\n",
        "133": "          graph.inEdges(node), graph.outEdges(node));\n",
        "134": "    }\n",
        "135": "\n",
        "136": "    @Override\n",
        "137": "    public ImmutableDirectedGraph<N, E> build() {\n",
        "138": "      return new ImmutableDirectedGraph<N, E>(this);\n",
        "139": "    }\n",
        "140": "\n",
        "141": "    @Override\n",
        "142": "    @CanIgnoreReturnValue\n",
        "143": "    public Builder<N, E> addNode(N node) {\n",
        "144": "      return (Builder<N, E>) super.addNode(node); // Refine the return type\n",
        "145": "    }\n",
        "146": "\n",
        "147": "    @Override\n",
        "148": "    @CanIgnoreReturnValue\n",
        "149": "    public Builder<N, E> addEdge(E edge, N node1, N node2) {\n",
        "150": "      return (Builder<N, E>) super.addEdge(edge, node1, node2); // Refine the return type\n",
        "151": "    }\n",
        "152": "\n",
        "153": "    @Override\n",
        "154": "    @CanIgnoreReturnValue\n",
        "155": "    public Builder<N, E> addGraph(Graph<N, E> graphToAdd) {\n",
        "156": "      return (Builder<N, E>) super.addGraph(graphToAdd); // Refine the return type\n",
        "157": "    }\n",
        "158": "  }\n",
        "159": "}\n"
    }
}