{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "/**\n",
        "20": " * Configurable implementation of a directed graph consisting of nodes of type N\n",
        "21": " * and edges of type E.\n",
        "22": " *\n",
        "23": " * <p>{@link Graphs#createDirected()} should be used to get an instance of this class.\n",
        "24": " *\n",
        "25": " * <p>Some invariants/assumptions are maintained in this implementation:\n",
        "26": " * <ul>\n",
        "27": " * <li>An edge has exactly two end-points (source node and target node), which\n",
        "28": " *     may or may not be distinct.\n",
        "29": " * <li>By default, this is not a multigraph, that is, parallel edges (multiple\n",
        "30": " *     edges directed from n1 to n2) are not allowed.  If you want a multigraph,\n",
        "31": " *     create the graph with the 'multigraph' option:\n",
        "32": " *     <pre>Graphs.createDirected(Graphs.config().multigraph());</pre>\n",
        "33": " * <li>Anti-parallel edges (same incident nodes but in opposite direction,\n",
        "34": " *     e.g. (n1, n2) and (n2, n1)) are always allowed.\n",
        "35": " * <li>By default, self-loop edges are allowed. If you want to disallow them,\n",
        "36": " *     create the graph without the option of self-loops:\n",
        "37": " *     <pre>Graphs.createDirected(Graphs.config().noSelfLoops());</pre>\n",
        "38": " * <li>Edges are not adjacent to themselves by definition. In the case of a\n",
        "39": " *     self-loop, a node can be adjacent to itself, but an edge will never be.\n",
        "40": " * </ul>\n",
        "41": " *\n",
        "42": " * <p>Time complexities for mutation methods:\n",
        "43": " * <ul>\n",
        "44": " * <li>{@code addNode}: O(1).\n",
        "45": " * <li>{@code addEdge(E edge, N node1, N node2)}: O(1).\n",
        "46": " * <li>{@code removeNode(node)}: O(d_node).\n",
        "47": " * <li>{@code removeEdge}: O(1), unless this graph is a multigraph (supports parallel edges);\n",
        "48": " *     in that case this method is O(min(outD_edgeSource, inD_edgeTarget)).\n",
        "49": " * </ul>\n",
        "50": " * where d_node is the degree of node, inD_node is the in-degree of node, and outD_node is the\n",
        "51": " * out-degree of node.\n",
        "52": " *\n",
        "53": " * @author James Sexton\n",
        "54": " * @author Joshua O'Madadhain\n",
        "55": " * @author Omar Darwish\n",
        "56": " * @param <N> Node parameter type\n",
        "57": " * @param <E> Edge parameter type\n",
        "58": " * @see AbstractConfigurableGraph\n",
        "59": " * @see Graphs\n",
        "60": " */\n",
        "61": "final class IncidenceSetDirectedGraph<N, E> extends AbstractConfigurableGraph<N, E>\n",
        "62": "    implements DirectedGraph<N, E> {\n",
        "63": "\n",
        "64": "  IncidenceSetDirectedGraph(GraphConfig config) {\n",
        "65": "    super(config);\n",
        "66": "  }\n",
        "67": "\n",
        "68": "  @Override\n",
        "69": "  NodeConnections<N, E> newNodeConnections() {\n",
        "70": "    return DirectedNodeConnections.of();\n",
        "71": "  }\n",
        "72": "\n",
        "73": "  @Override\n",
        "74": "  public N source(Object edge) {\n",
        "75": "    return checkedIncidentNodes(edge).node1();\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  @Override\n",
        "79": "  public N target(Object edge) {\n",
        "80": "    return checkedIncidentNodes(edge).node2();\n",
        "81": "  }\n",
        "82": "}\n"
    }
}