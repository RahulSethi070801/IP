{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "import static org.junit.Assert.assertTrue;\n",
        "21": "\n",
        "22": "import org.junit.Test;\n",
        "23": "import org.junit.runner.RunWith;\n",
        "24": "import org.junit.runners.JUnit4;\n",
        "25": "\n",
        "26": "/**\n",
        "27": " * Tests for {@link ImmutableDirectedGraph} allowing parallel edges.\n",
        "28": " */\n",
        "29": "@RunWith(JUnit4.class)\n",
        "30": "public class ImmutableDirectedMultigraphTest extends ImmutableDirectedGraphTest {\n",
        "31": "  @Override\n",
        "32": "  public ImmutableDirectedGraph<Integer, String> createGraph() {\n",
        "33": "    builder = ImmutableDirectedGraph.builder(Graphs.MULTIGRAPH);\n",
        "34": "    return builder.build();\n",
        "35": "  }\n",
        "36": "\n",
        "37": "  @Test\n",
        "38": "  public void edgesConnecting_parallelEdges() {\n",
        "39": "    assertTrue(addEdge(E12, N1, N2));\n",
        "40": "    assertTrue(addEdge(E12_A, N1, N2));\n",
        "41": "    assertThat(directedGraph.edgesConnecting(N1, N2)).containsExactly(E12, E12_A);\n",
        "42": "    // Passed nodes should be in the correct edge direction, first is the\n",
        "43": "    // source node and the second is the target node\n",
        "44": "    assertThat(directedGraph.edgesConnecting(N2, N1)).isEmpty();\n",
        "45": "  }\n",
        "46": "\n",
        "47": "  @Test\n",
        "48": "  public void edgesConnecting_parallelSelfLoopEdges() {\n",
        "49": "    assertTrue(addEdge(E11, N1, N1));\n",
        "50": "    assertTrue(addEdge(E11_A, N1, N1));\n",
        "51": "    assertThat(directedGraph.edgesConnecting(N1, N1)).containsExactly(E11, E11_A);\n",
        "52": "  }\n",
        "53": "\n",
        "54": "  @Override\n",
        "55": "  @Test\n",
        "56": "  public void addEdge_parallelEdge() {\n",
        "57": "    assertTrue(addEdge(E12, N1, N2));\n",
        "58": "    assertTrue(addEdge(E12_A, N1, N2));\n",
        "59": "    assertThat(directedGraph.edges()).containsExactly(E12, E12_A).inOrder();\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  @Override\n",
        "63": "  @Test\n",
        "64": "  public void addEdge_parallelSelfLoopEdge() {\n",
        "65": "    assertTrue(addEdge(E11, N1, N1));\n",
        "66": "    assertTrue(addEdge(E11_A, N1, N1));\n",
        "67": "    assertThat(directedGraph.edges()).containsExactly(E11, E11_A).inOrder();\n",
        "68": "  }\n",
        "69": "\n",
        "70": "  @Test\n",
        "71": "  public void toString_parallelEdges() {\n",
        "72": "    addEdge(E12, N1, N2);\n",
        "73": "    addEdge(E12_A, N1, N2);\n",
        "74": "    addEdge(E11, N1, N1);\n",
        "75": "    addEdge(E11_A, N1, N1);\n",
        "76": "    assertThat(graph.toString()).isEqualTo(String.format(\n",
        "77": "        \"config: %s, nodes: %s, \"\n",
        "78": "            + \"edges: {%s=<%s -> %s>, %s=<%s -> %s>, %s=<%s -> %s>, %s=<%s -> %s>}\",\n",
        "79": "        graph.config(),\n",
        "80": "        graph.nodes(),\n",
        "81": "        E12, N1, N2,\n",
        "82": "        E12_A, N1, N2,\n",
        "83": "        E11, N1, N1,\n",
        "84": "        E11_A, N1, N1\n",
        "85": "    ));\n",
        "86": "  }\n",
        "87": "\n",
        "88": "  @Override\n",
        "89": "  protected void populateInputGraph(DirectedGraph<Integer, String> graph) {\n",
        "90": "    super.populateInputGraph(graph);\n",
        "91": "    // Add some parallel edges\n",
        "92": "    graph.addEdge(E11_A, N1, N1);\n",
        "93": "    graph.addEdge(E12_A, N1, N2);\n",
        "94": "  }\n",
        "95": "}\n"
    }
}