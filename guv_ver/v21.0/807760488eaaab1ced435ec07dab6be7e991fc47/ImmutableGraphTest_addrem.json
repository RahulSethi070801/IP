{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "import static org.junit.Assert.fail;\n",
        "21": "\n",
        "22": "import com.google.common.graph.testing.TestGraphBuilder;\n",
        "23": "\n",
        "24": "import org.junit.Test;\n",
        "25": "import org.junit.runner.RunWith;\n",
        "26": "import org.junit.runners.JUnit4;\n",
        "27": "\n",
        "28": "/**\n",
        "29": " * Tests for {@link ImmutableGraph}.\n",
        "30": " */\n",
        "31": "@RunWith(JUnit4.class)\n",
        "32": "public class ImmutableGraphTest {\n",
        "33": "\n",
        "34": "  @Test\n",
        "35": "  public void addNode_immutable() {\n",
        "36": "    Graph<String, String> graph = TestGraphBuilder.<String, String>init(GraphBuilder.directed())\n",
        "37": "        .toImmutableGraph();\n",
        "38": "    try {\n",
        "39": "      graph.addNode(\"node\");\n",
        "40": "      fail(\"Expected UnsupportedOperationException\");\n",
        "41": "    } catch (UnsupportedOperationException expected) {\n",
        "42": "    }\n",
        "43": "    assertThat(graph.nodes()).isEmpty();\n",
        "44": "  }\n",
        "45": "\n",
        "46": "  @Test\n",
        "47": "  public void addEdge_immutable() {\n",
        "48": "    Graph<String, String> graph = TestGraphBuilder.<String, String>init(GraphBuilder.directed())\n",
        "49": "        .toImmutableGraph();\n",
        "50": "    try {\n",
        "51": "      graph.addEdge(\"edge\", \"node1\", \"node2\");\n",
        "52": "      fail(\"Expected UnsupportedOperationException\");\n",
        "53": "    } catch (UnsupportedOperationException expected) {\n",
        "54": "    }\n",
        "55": "    assertThat(graph.edges()).isEmpty();\n",
        "56": "  }\n",
        "57": "\n",
        "58": "  @Test\n",
        "59": "  public void removeNode_immutable() {\n",
        "60": "    Graph<String, String> graph = TestGraphBuilder.<String, String>init(GraphBuilder.directed())\n",
        "61": "        .addNode(\"node\")\n",
        "62": "        .toImmutableGraph();\n",
        "63": "    try {\n",
        "64": "      graph.removeNode(\"node\");\n",
        "65": "      fail(\"Expected UnsupportedOperationException\");\n",
        "66": "    } catch (UnsupportedOperationException expected) {\n",
        "67": "    }\n",
        "68": "    assertThat(graph.nodes()).containsExactly(\"node\");\n",
        "69": "  }\n",
        "70": "\n",
        "71": "  @Test\n",
        "72": "  public void removeEdge_immutable() {\n",
        "73": "    Graph<String, String> graph = TestGraphBuilder.<String, String>init(GraphBuilder.directed())\n",
        "74": "        .addEdge(\"edge\", \"node1\", \"node2\")\n",
        "75": "        .toImmutableGraph();\n",
        "76": "    try {\n",
        "77": "      graph.removeEdge(\"edge\");\n",
        "78": "      fail(\"Expected UnsupportedOperationException\");\n",
        "79": "    } catch (UnsupportedOperationException expected) {\n",
        "80": "    }\n",
        "81": "    assertThat(graph.edges()).containsExactly(\"edge\");\n",
        "82": "  }\n",
        "83": "\n",
        "84": "  @Test\n",
        "85": "  public void copyOfImmutableGraph_optimized() {\n",
        "86": "    Graph<String, String> graph1 = ImmutableGraph.copyOf(\n",
        "87": "        GraphBuilder.directed().<String, String>build());\n",
        "88": "    Graph<String, String> graph2 = ImmutableGraph.copyOf(graph1);\n",
        "89": "\n",
        "90": "    assertThat(graph2).isSameAs(graph1);\n",
        "91": "  }\n",
        "92": "\n",
        "93": "  @Test\n",
        "94": "  public void edgesConnecting_directed() {\n",
        "95": "    Graph<String, String> mutableGraph = GraphBuilder.directed().build();\n",
        "96": "    mutableGraph.addEdge(\"AA\", \"A\", \"A\");\n",
        "97": "    mutableGraph.addEdge(\"AB\", \"A\", \"B\");\n",
        "98": "    Graph<String, String> graph = ImmutableGraph.copyOf(mutableGraph);\n",
        "99": "\n",
        "100": "    assertThat(graph.edgesConnecting(\"A\", \"A\")).containsExactly(\"AA\");\n",
        "101": "    assertThat(graph.edgesConnecting(\"A\", \"B\")).containsExactly(\"AB\");\n",
        "102": "    assertThat(graph.edgesConnecting(\"B\", \"A\")).isEmpty();\n",
        "103": "  }\n",
        "104": "\n",
        "105": "  @Test\n",
        "106": "  public void edgesConnecting_undirected() {\n",
        "107": "    Graph<String, String> mutableGraph = GraphBuilder.undirected().build();\n",
        "108": "    mutableGraph.addEdge(\"AA\", \"A\", \"A\");\n",
        "109": "    mutableGraph.addEdge(\"AB\", \"A\", \"B\");\n",
        "110": "    Graph<String, String> graph = ImmutableGraph.copyOf(mutableGraph);\n",
        "111": "\n",
        "112": "    assertThat(graph.edgesConnecting(\"A\", \"A\")).containsExactly(\"AA\");\n",
        "113": "    assertThat(graph.edgesConnecting(\"A\", \"B\")).containsExactly(\"AB\");\n",
        "114": "    assertThat(graph.edgesConnecting(\"B\", \"A\")).containsExactly(\"AB\");\n",
        "115": "  }\n",
        "116": "}\n"
    },
    "removed": {}
}