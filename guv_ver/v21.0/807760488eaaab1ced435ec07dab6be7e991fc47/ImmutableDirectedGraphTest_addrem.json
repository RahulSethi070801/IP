{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "import static org.junit.Assert.assertEquals;\n",
        "21": "import static org.junit.Assert.assertTrue;\n",
        "22": "import static org.junit.Assert.fail;\n",
        "23": "\n",
        "24": "import org.junit.Test;\n",
        "25": "import org.junit.runner.RunWith;\n",
        "26": "import org.junit.runners.JUnit4;\n",
        "27": "\n",
        "28": "/**\n",
        "29": " * Tests for {@link ImmutableDirectedGraph} with default graph configuration.\n",
        "30": " *\n",
        "31": " * @see GraphConfig\n",
        "32": " */\n",
        "33": "@RunWith(JUnit4.class)\n",
        "34": "public class ImmutableDirectedGraphTest extends ImmutableSimpleDirectedGraphTest {\n",
        "35": "  @Override\n",
        "36": "  public ImmutableDirectedGraph<Integer, String> createGraph() {\n",
        "37": "    builder = ImmutableDirectedGraph.builder();\n",
        "38": "    return builder.build();\n",
        "39": "  }\n",
        "40": "\n",
        "41": "  @Test\n",
        "42": "  public void edges_selfLoop() {\n",
        "43": "    addEdge(E11, N1, N1);\n",
        "44": "    assertThat(graph.edges()).containsExactly(E11);\n",
        "45": "  }\n",
        "46": "\n",
        "47": "  @Test\n",
        "48": "  public void incidentEdges_selfLoop() {\n",
        "49": "    addEdge(E11, N1, N1);\n",
        "50": "    assertThat(graph.incidentEdges(N1)).containsExactly(E11);\n",
        "51": "  }\n",
        "52": "\n",
        "53": "  @Test\n",
        "54": "  public void incidentNodes_selfLoop() {\n",
        "55": "    addEdge(E11, N1, N1);\n",
        "56": "    assertThat(graph.incidentNodes(E11)).containsExactly(N1);\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  @Test\n",
        "60": "  public void adjacentNodes_selfLoop() {\n",
        "61": "    addEdge(E11, N1, N1);\n",
        "62": "    addEdge(E12, N1, N2);\n",
        "63": "    assertThat(graph.adjacentNodes(N1)).containsExactly(N1, N2);\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  @Test\n",
        "67": "  public void adjacentEdges_selfLoop() {\n",
        "68": "    // An edge is never adjacent to itself\n",
        "69": "    addEdge(E11, N1, N1);\n",
        "70": "    assertThat(graph.adjacentEdges(E11)).isEmpty();\n",
        "71": "    addEdge(E12, N1, N2);\n",
        "72": "    assertThat(graph.adjacentEdges(E11)).containsExactly(E12);\n",
        "73": "  }\n",
        "74": "\n",
        "75": "  @Test\n",
        "76": "  public void edgesConnecting_selfLoop() {\n",
        "77": "    addEdge(E11, N1, N1);\n",
        "78": "    assertThat(directedGraph.edgesConnecting(N1, N1)).containsExactly(E11);\n",
        "79": "    addEdge(E12, N1, N2);\n",
        "80": "    assertThat(directedGraph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "81": "  }\n",
        "82": "\n",
        "83": "  @Test\n",
        "84": "  public void inEdges_selfLoop() {\n",
        "85": "    addEdge(E11, N1, N1);\n",
        "86": "    assertThat(directedGraph.inEdges(N1)).containsExactly(E11);\n",
        "87": "    addEdge(E41, N4, N1);\n",
        "88": "    assertThat(directedGraph.inEdges(N1)).containsExactly(E11, E41);\n",
        "89": "  }\n",
        "90": "\n",
        "91": "  @Test\n",
        "92": "  public void outEdges_selfLoop() {\n",
        "93": "    addEdge(E11, N1, N1);\n",
        "94": "    assertThat(directedGraph.outEdges(N1)).containsExactly(E11);\n",
        "95": "    addEdge(E12, N1, N2);\n",
        "96": "    assertThat(directedGraph.outEdges(N1)).containsExactly(E11, E12);\n",
        "97": "  }\n",
        "98": "\n",
        "99": "  @Test\n",
        "100": "  public void predecessors_selfLoop() {\n",
        "101": "    addEdge(E11, N1, N1);\n",
        "102": "    assertThat(directedGraph.predecessors(N1)).containsExactly(N1);\n",
        "103": "    addEdge(E41, N4, N1);\n",
        "104": "    assertThat(directedGraph.predecessors(N1)).containsExactly(N1, N4);\n",
        "105": "  }\n",
        "106": "\n",
        "107": "  @Test\n",
        "108": "  public void successors_selfLoop() {\n",
        "109": "    addEdge(E11, N1, N1);\n",
        "110": "    assertThat(directedGraph.successors(N1)).containsExactly(N1);\n",
        "111": "    addEdge(E12, N1, N2);\n",
        "112": "    assertThat(directedGraph.successors(N1)).containsExactly(N1, N2);\n",
        "113": "  }\n",
        "114": "\n",
        "115": "  @Test\n",
        "116": "  public void degree_selfLoop() {\n",
        "117": "    addEdge(E11, N1, N1);\n",
        "118": "    assertEquals(1, graph.degree(N1));\n",
        "119": "    addEdge(E12, N1, N2);\n",
        "120": "    assertEquals(2, graph.degree(N1));\n",
        "121": "  }\n",
        "122": "\n",
        "123": "  @Test\n",
        "124": "  public void inDegree_selfLoop() {\n",
        "125": "    addEdge(E11, N1, N1);\n",
        "126": "    assertEquals(1, directedGraph.inDegree(N1));\n",
        "127": "    addEdge(E41, N4, N1);\n",
        "128": "    assertEquals(2, directedGraph.inDegree(N1));\n",
        "129": "  }\n",
        "130": "\n",
        "131": "  @Test\n",
        "132": "  public void outDegree_selfLoop() {\n",
        "133": "    addEdge(E11, N1, N1);\n",
        "134": "    assertEquals(1, directedGraph.outDegree(N1));\n",
        "135": "    addEdge(E12, N1, N2);\n",
        "136": "    assertEquals(2, directedGraph.outDegree(N1));\n",
        "137": "  }\n",
        "138": "\n",
        "139": "  @Test\n",
        "140": "  public void source_selfLoop() {\n",
        "141": "    addEdge(E11, N1, N1);\n",
        "142": "    assertEquals(N1, directedGraph.source(E11));\n",
        "143": "  }\n",
        "144": "\n",
        "145": "  @Test\n",
        "146": "  public void target_selfLoop() {\n",
        "147": "    addEdge(E11, N1, N1);\n",
        "148": "    assertEquals(N1, directedGraph.target(E11));\n",
        "149": "  }\n",
        "150": "\n",
        "151": "  // Builder mutation methods\n",
        "152": "\n",
        "153": "  @Override\n",
        "154": "  @Test\n",
        "155": "  public void addEdge_selfLoop() {\n",
        "156": "    assertTrue(addEdge(E11, N1, N1));\n",
        "157": "    assertThat(graph.edges()).contains(E11);\n",
        "158": "    assertThat(graph.edgesConnecting(N1, N1)).containsExactly(E11);\n",
        "159": "  }\n",
        "160": "\n",
        "161": "  @Test\n",
        "162": "  public void addEdge_existingEdgeBetweenDifferentNodes_selfLoops() {\n",
        "163": "    addEdge(E11, N1, N1);\n",
        "164": "    try {\n",
        "165": "      addEdge(E11, N1, N2);\n",
        "166": "      fail(\"Reusing an existing self-loop edge to connect different nodes succeeded\");\n",
        "167": "    } catch (IllegalArgumentException e) {\n",
        "168": "      assertThat(e.getMessage()).contains(ERROR_REUSE_EDGE);\n",
        "169": "    }\n",
        "170": "    try {\n",
        "171": "      addEdge(E11, N2, N2);\n",
        "172": "      fail(\"Reusing an existing self-loop edge to make a different self-loop edge succeeded\");\n",
        "173": "    } catch (IllegalArgumentException e) {\n",
        "174": "      assertThat(e.getMessage()).contains(ERROR_REUSE_EDGE);\n",
        "175": "    }\n",
        "176": "    addEdge(E12, N1, N2);\n",
        "177": "    try {\n",
        "178": "      addEdge(E12, N1, N1);\n",
        "179": "      fail(\"Reusing an existing edge to add a self-loop edge between different nodes succeeded\");\n",
        "180": "    } catch (IllegalArgumentException e) {\n",
        "181": "      assertThat(e.getMessage()).contains(ERROR_REUSE_EDGE);\n",
        "182": "    }\n",
        "183": "  }\n",
        "184": "\n",
        "185": "  @Test\n",
        "186": "  public void addEdge_parallelSelfLoopEdge() {\n",
        "187": "    addEdge(E11, N1, N1);\n",
        "188": "    try {\n",
        "189": "      addEdge(EDGE_NOT_IN_GRAPH, N1, N1);\n",
        "190": "      fail(\"Adding a parallel self-loop edge succeeded\");\n",
        "191": "    } catch (IllegalArgumentException e) {\n",
        "192": "      assertThat(e.getMessage()).contains(ERROR_PARALLEL_EDGE);\n",
        "193": "    }\n",
        "194": "  }\n",
        "195": "\n",
        "196": "  @Test\n",
        "197": "  public void toString_selfLoop() {\n",
        "198": "    addEdge(E11, N1, N1);\n",
        "199": "    assertThat(graph.toString()).isEqualTo(String.format(\n",
        "200": "        \"config: %s, nodes: %s, edges: {%s=<%s -> %s>}\",\n",
        "201": "        graph.config(), graph.nodes(), E11, N1, N1));\n",
        "202": "  }\n",
        "203": "\n",
        "204": "  @Override\n",
        "205": "  protected void populateInputGraph(DirectedGraph<Integer, String> graph) {\n",
        "206": "    super.populateInputGraph(graph);\n",
        "207": "    // add a self-loop\n",
        "208": "    graph.addEdge(E11, N1, N1);\n",
        "209": "  }\n",
        "210": "}\n"
    }
}