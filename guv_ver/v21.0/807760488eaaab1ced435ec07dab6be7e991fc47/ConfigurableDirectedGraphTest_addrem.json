{
    "addition": {
        "19": "import static com.google.common.graph.Graphs.getPropertiesString;\n",
        "34": " * Tests for a directed {@link ConfigurableGraph} with default graph properties.\n",
        "37": "public class ConfigurableDirectedGraphTest extends ConfigurableSimpleDirectedGraphTest {\n",
        "40": "  public Graph<Integer, String> createGraph() {\n",
        "41": "    return GraphBuilder.directed().build();\n",
        "81": "    assertThat(graph.edgesConnecting(N1, N1)).containsExactly(E11);\n",
        "83": "    assertThat(graph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "84": "    assertThat(graph.edgesConnecting(N1, N1)).containsExactly(E11);\n",
        "90": "    assertThat(graph.inEdges(N1)).containsExactly(E11);\n",
        "92": "    assertThat(graph.inEdges(N1)).containsExactly(E11, E41);\n",
        "98": "    assertThat(graph.outEdges(N1)).containsExactly(E11);\n",
        "100": "    assertThat(graph.outEdges(N1)).containsExactly(E11, E12);\n",
        "106": "    assertThat(graph.predecessors(N1)).containsExactly(N1);\n",
        "108": "    assertThat(graph.predecessors(N1)).containsExactly(N1, N4);\n",
        "114": "    assertThat(graph.successors(N1)).containsExactly(N1);\n",
        "116": "    assertThat(graph.successors(N1)).containsExactly(N1, N2);\n",
        "130": "    assertEquals(1, graph.inDegree(N1));\n",
        "132": "    assertEquals(2, graph.inDegree(N1));\n",
        "138": "    assertEquals(1, graph.outDegree(N1));\n",
        "140": "    assertEquals(2, graph.outDegree(N1));\n",
        "146": "    assertEquals(N1, graph.source(E11));\n",
        "152": "    assertEquals(N1, graph.target(E11));\n",
        "226": "    Graph<Integer, String> graphA = createGraph();\n",
        "228": "    Graph<Integer, String> graphB = createGraph();\n",
        "241": "        \"%s, nodes: %s, edges: {%s=<%s -> %s>}\",\n",
        "242": "        getPropertiesString(graph), graph.nodes(), E11, N1, N1));\n"
    },
    "removed": {
        "33": " * Tests for {@link IncidenceSetDirectedGraph} with default graph configuration.\n",
        "34": " *\n",
        "35": " * @see GraphConfig\n",
        "38": "public class IncidenceSetDirectedGraphTest extends IncidenceSetSimpleDirectedGraphTest {\n",
        "41": "  public DirectedGraph<Integer, String> createGraph() {\n",
        "42": "    return Graphs.createDirected();\n",
        "82": "    assertThat(directedGraph.edgesConnecting(N1, N1)).containsExactly(E11);\n",
        "84": "    assertThat(directedGraph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "85": "    assertThat(directedGraph.edgesConnecting(N1, N1)).containsExactly(E11);\n",
        "91": "    assertThat(directedGraph.inEdges(N1)).containsExactly(E11);\n",
        "93": "    assertThat(directedGraph.inEdges(N1)).containsExactly(E11, E41);\n",
        "99": "    assertThat(directedGraph.outEdges(N1)).containsExactly(E11);\n",
        "101": "    assertThat(directedGraph.outEdges(N1)).containsExactly(E11, E12);\n",
        "107": "    assertThat(directedGraph.predecessors(N1)).containsExactly(N1);\n",
        "109": "    assertThat(directedGraph.predecessors(N1)).containsExactly(N1, N4);\n",
        "115": "    assertThat(directedGraph.successors(N1)).containsExactly(N1);\n",
        "117": "    assertThat(directedGraph.successors(N1)).containsExactly(N1, N2);\n",
        "131": "    assertEquals(1, directedGraph.inDegree(N1));\n",
        "133": "    assertEquals(2, directedGraph.inDegree(N1));\n",
        "139": "    assertEquals(1, directedGraph.outDegree(N1));\n",
        "141": "    assertEquals(2, directedGraph.outDegree(N1));\n",
        "147": "    assertEquals(N1, directedGraph.source(E11));\n",
        "153": "    assertEquals(N1, directedGraph.target(E11));\n",
        "227": "    DirectedGraph<Integer, String> graphA = createGraph();\n",
        "229": "    DirectedGraph<Integer, String> graphB = createGraph();\n",
        "242": "        \"config: %s, nodes: %s, edges: {%s=<%s -> %s>}\",\n",
        "243": "        graph.config(), graph.nodes(), E11, N1, N1));\n"
    }
}