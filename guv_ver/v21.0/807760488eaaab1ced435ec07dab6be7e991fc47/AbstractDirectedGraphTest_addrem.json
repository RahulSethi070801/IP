{
    "addition": {
        "19": "import static com.google.common.graph.Graphs.getPropertiesString;\n",
        "35": " * Abstract base class for testing implementations of {@link Graph} interface.\n",
        "37": " * <p>This class is responsible for testing that a directed implementation of {@link Graph}\n",
        "38": " * is correctly handling directed edges. Implementation-dependent test cases are left to\n",
        "39": " * subclasses. Test cases that do not require the graph to be directed are found in superclasses.\n",
        "46": "    for (Integer node : graph.nodes()) {\n",
        "47": "      for (String inEdge : graph.inEdges(node)) {\n",
        "48": "        Integer oppositeNode = Graphs.oppositeNode(graph, inEdge, node);\n",
        "49": "        assertThat(graph.source(inEdge)).isEqualTo(oppositeNode);\n",
        "50": "        assertThat(graph.target(inEdge)).isEqualTo(node);\n",
        "53": "      for (String outEdge : graph.outEdges(node)) {\n",
        "54": "        Integer oppositeNode = Graphs.oppositeNode(graph, outEdge, node);\n",
        "55": "        assertThat(graph.source(outEdge)).isEqualTo(node);\n",
        "56": "        assertThat(graph.target(outEdge)).isEqualTo(oppositeNode);\n",
        "59": "      for (Integer adjacentNode : graph.adjacentNodes(node)) {\n",
        "60": "        Set<String> edges = graph.edgesConnecting(node, adjacentNode);\n",
        "61": "        Set<String> antiParallelEdges = graph.edgesConnecting(adjacentNode, node);\n",
        "77": "    assertThat(graph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "80": "    assertThat(graph.edgesConnecting(N2, N1)).isEmpty();\n",
        "86": "    assertThat(graph.inEdges(N2)).containsExactly(E12);\n",
        "88": "    assertThat(graph.inEdges(N1)).isEmpty();\n",
        "94": "    assertThat(graph.outEdges(N1)).containsExactly(E12);\n",
        "96": "    assertThat(graph.outEdges(N2)).isEmpty();\n",
        "102": "    assertThat(graph.predecessors(N2)).containsExactly(N1);\n",
        "104": "    assertThat(graph.predecessors(N1)).isEmpty();\n",
        "110": "    assertThat(graph.successors(N1)).containsExactly(N2);\n",
        "112": "    assertThat(graph.successors(N2)).isEmpty();\n",
        "118": "    assertEquals(1, graph.inDegree(N2));\n",
        "120": "    assertEquals(0, graph.inDegree(N1));\n",
        "126": "    assertEquals(1, graph.outDegree(N1));\n",
        "128": "    assertEquals(0, graph.outDegree(N2));\n",
        "134": "    assertEquals(N1, graph.source(E12));\n",
        "140": "      graph.source(EDGE_NOT_IN_GRAPH);\n",
        "150": "    assertEquals(N2, graph.target(E12));\n",
        "156": "      graph.target(EDGE_NOT_IN_GRAPH);\n",
        "172": "    assertThat(graph.edges()).contains(E12);\n",
        "173": "    assertThat(graph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "175": "    assertThat(graph.edgesConnecting(N2, N1)).isEmpty();\n",
        "181": "    ImmutableSet<String> edges = ImmutableSet.copyOf(graph.edges());\n",
        "183": "    assertThat(graph.edges()).containsExactlyElementsIn(edges);\n",
        "219": "    assertTrue(graph.removeEdge(E12));\n",
        "220": "    assertThat(graph.edges()).doesNotContain(E12);\n",
        "221": "    assertThat(graph.edgesConnecting(N1, N2)).isEmpty();\n",
        "226": "    assertThat(graph.toString()).isEqualTo(String.format(\"%s, nodes: %s, edges: {}\",\n",
        "227": "        getPropertiesString(graph), graph.nodes()));\n",
        "233": "    assertThat(graph.toString()).isEqualTo(String.format(\"%s, nodes: %s, edges: {}\",\n",
        "234": "        getPropertiesString(graph), graph.nodes()));\n",
        "241": "        \"%s, nodes: %s, edges: {%s=<%s -> %s>}\",\n",
        "242": "        getPropertiesString(graph), graph.nodes(), E12, N1, N2));\n",
        "250": "        \"%s, nodes: %s, edges: {%s=<%s -> %s>, %s=<%s -> %s>}\",\n",
        "251": "        getPropertiesString(graph),\n"
    },
    "removed": {
        "34": " * Abstract base class for testing implementations of {@link DirectedGraph} interface.\n",
        "36": " * <p>This class is responsible for testing that an implementation of the interface\n",
        "37": " * {@code DirectedGraph} is correctly handling directed edges.\n",
        "38": " * Implementation-dependent test cases are left to subclasses. Test cases that\n",
        "39": " * do not require the graph to be directed are found in superclasses.\n",
        "43": "  DirectedGraph<Integer, String> directedGraph;\n",
        "44": "\n",
        "45": "  @Override\n",
        "46": "  public abstract DirectedGraph<Integer, String> createGraph();\n",
        "47": "\n",
        "48": "  @Override\n",
        "49": "  public void init() {\n",
        "50": "    graph = directedGraph = createGraph();\n",
        "51": "  }\n",
        "55": "    for (Integer node : directedGraph.nodes()) {\n",
        "56": "      for (String inEdge : directedGraph.inEdges(node)) {\n",
        "57": "        Integer oppositeNode = Graphs.oppositeNode(directedGraph, inEdge, node);\n",
        "58": "        assertThat(directedGraph.source(inEdge)).isEqualTo(oppositeNode);\n",
        "59": "        assertThat(directedGraph.target(inEdge)).isEqualTo(node);\n",
        "62": "      for (String outEdge : directedGraph.outEdges(node)) {\n",
        "63": "        Integer oppositeNode = Graphs.oppositeNode(directedGraph, outEdge, node);\n",
        "64": "        assertThat(directedGraph.source(outEdge)).isEqualTo(node);\n",
        "65": "        assertThat(directedGraph.target(outEdge)).isEqualTo(oppositeNode);\n",
        "68": "      for (Integer adjacentNode : directedGraph.adjacentNodes(node)) {\n",
        "69": "        Set<String> edges = directedGraph.edgesConnecting(node, adjacentNode);\n",
        "70": "        Set<String> antiParallelEdges = directedGraph.edgesConnecting(adjacentNode, node);\n",
        "86": "    assertThat(directedGraph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "89": "    assertThat(directedGraph.edgesConnecting(N2, N1)).isEmpty();\n",
        "95": "    assertThat(directedGraph.inEdges(N2)).containsExactly(E12);\n",
        "97": "    assertThat(directedGraph.inEdges(N1)).isEmpty();\n",
        "103": "    assertThat(directedGraph.outEdges(N1)).containsExactly(E12);\n",
        "105": "    assertThat(directedGraph.outEdges(N2)).isEmpty();\n",
        "111": "    assertThat(directedGraph.predecessors(N2)).containsExactly(N1);\n",
        "113": "    assertThat(directedGraph.predecessors(N1)).isEmpty();\n",
        "119": "    assertThat(directedGraph.successors(N1)).containsExactly(N2);\n",
        "121": "    assertThat(directedGraph.successors(N2)).isEmpty();\n",
        "127": "    assertEquals(1, directedGraph.inDegree(N2));\n",
        "129": "    assertEquals(0, directedGraph.inDegree(N1));\n",
        "135": "    assertEquals(1, directedGraph.outDegree(N1));\n",
        "137": "    assertEquals(0, directedGraph.outDegree(N2));\n",
        "143": "    assertEquals(N1, directedGraph.source(E12));\n",
        "149": "      directedGraph.source(EDGE_NOT_IN_GRAPH);\n",
        "159": "    assertEquals(N2, directedGraph.target(E12));\n",
        "165": "      directedGraph.target(EDGE_NOT_IN_GRAPH);\n",
        "181": "    assertThat(directedGraph.edges()).contains(E12);\n",
        "182": "    assertThat(directedGraph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "184": "    assertThat(directedGraph.edgesConnecting(N2, N1)).isEmpty();\n",
        "190": "    ImmutableSet<String> edges = ImmutableSet.copyOf(directedGraph.edges());\n",
        "192": "    assertThat(directedGraph.edges()).containsExactlyElementsIn(edges);\n",
        "228": "    assertTrue(directedGraph.removeEdge(E12));\n",
        "229": "    assertThat(directedGraph.edges()).doesNotContain(E12);\n",
        "230": "    assertThat(directedGraph.edgesConnecting(N1, N2)).isEmpty();\n",
        "235": "    assertThat(graph.toString()).isEqualTo(String.format(\"config: %s, nodes: %s, edges: {}\",\n",
        "236": "        graph.config(), graph.nodes()));\n",
        "242": "    assertThat(graph.toString()).isEqualTo(String.format(\"config: %s, nodes: %s, edges: {}\",\n",
        "243": "        graph.config(), graph.nodes()));\n",
        "250": "        \"config: %s, nodes: %s, edges: {%s=<%s -> %s>}\",\n",
        "251": "        graph.config(), graph.nodes(), E12, N1, N2));\n",
        "259": "        \"config: %s, nodes: %s, edges: {%s=<%s -> %s>, %s=<%s -> %s>}\",\n",
        "260": "        graph.config(),\n"
    }
}