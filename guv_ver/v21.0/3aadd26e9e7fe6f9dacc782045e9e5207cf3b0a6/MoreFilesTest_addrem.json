{
    "addition": {
        "23": "import static java.nio.charset.StandardCharsets.UTF_8;\n",
        "183": "  public void testEqual() throws IOException {\n",
        "184": "    try (FileSystem fs = Jimfs.newFileSystem(Configuration.unix())) {\n",
        "185": "      Path fooPath = fs.getPath(\"foo\");\n",
        "186": "      Path barPath = fs.getPath(\"bar\");\n",
        "187": "      MoreFiles.asCharSink(fooPath, UTF_8).write(\"foo\");\n",
        "188": "      MoreFiles.asCharSink(barPath, UTF_8).write(\"barbar\");\n",
        "189": "\n",
        "190": "      assertThat(MoreFiles.equal(fooPath, barPath)).isFalse();\n",
        "191": "      assertThat(MoreFiles.equal(fooPath, fooPath)).isTrue();\n",
        "192": "      assertThat(MoreFiles.asByteSource(fooPath).contentEquals(MoreFiles.asByteSource(fooPath)))\n",
        "193": "          .isTrue();\n",
        "194": "\n",
        "195": "      Path fooCopy = Files.copy(fooPath, fs.getPath(\"fooCopy\"));\n",
        "196": "      assertThat(Files.isSameFile(fooPath, fooCopy)).isFalse();\n",
        "197": "      assertThat(MoreFiles.equal(fooPath, fooCopy)).isTrue();\n",
        "198": "\n",
        "199": "      MoreFiles.asCharSink(fooCopy, UTF_8).write(\"boo\");\n",
        "200": "      assertThat(MoreFiles.asByteSource(fooPath).size())\n",
        "201": "          .isEqualTo(MoreFiles.asByteSource(fooCopy).size());\n",
        "202": "      assertThat(MoreFiles.equal(fooPath, fooCopy)).isFalse();\n",
        "203": "\n",
        "204": "      // should also assert that a Path that erroneously reports a size 0 can still be compared,\n",
        "205": "      // not sure how to do that with the Path API\n",
        "206": "    }\n",
        "207": "  }\n",
        "208": "\n",
        "209": "  public void testEqual_links() throws IOException {\n",
        "210": "    try (FileSystem fs = Jimfs.newFileSystem(Configuration.unix())) {\n",
        "211": "      Path fooPath = fs.getPath(\"foo\");\n",
        "212": "      MoreFiles.asCharSink(fooPath, UTF_8).write(\"foo\");\n",
        "213": "\n",
        "214": "      Path fooSymlink = fs.getPath(\"symlink\");\n",
        "215": "      Files.createSymbolicLink(fooSymlink, fooPath);\n",
        "216": "\n",
        "217": "      Path fooHardlink = fs.getPath(\"hardlink\");\n",
        "218": "      Files.createLink(fooHardlink, fooPath);\n",
        "219": "\n",
        "220": "      assertThat(MoreFiles.equal(fooPath, fooSymlink)).isTrue();\n",
        "221": "      assertThat(MoreFiles.equal(fooPath, fooHardlink)).isTrue();\n",
        "222": "      assertThat(MoreFiles.equal(fooSymlink, fooHardlink)).isTrue();\n",
        "223": "    }\n",
        "224": "  }\n",
        "225": "\n"
    },
    "removed": {}
}