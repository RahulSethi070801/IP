{"id": "3aadd26e9e7fe6f9dacc782045e9e5207cf3b0a6", "code": [{"0": "guava-tests/test/com/google/common/io/MoreFilesTest.java", "added": {"1": ["import static java.nio.charset.StandardCharsets.UTF_8;\n"], "2": ["  public void testEqual() throws IOException {\n", "    try (FileSystem fs = Jimfs.newFileSystem(Configuration.unix())) {\n", "      Path fooPath = fs.getPath(\"foo\");\n", "      Path barPath = fs.getPath(\"bar\");\n", "      MoreFiles.asCharSink(fooPath, UTF_8).write(\"foo\");\n", "      MoreFiles.asCharSink(barPath, UTF_8).write(\"barbar\");\n", "\n", "      assertThat(MoreFiles.equal(fooPath, barPath)).isFalse();\n", "      assertThat(MoreFiles.equal(fooPath, fooPath)).isTrue();\n", "      assertThat(MoreFiles.asByteSource(fooPath).contentEquals(MoreFiles.asByteSource(fooPath)))\n", "          .isTrue();\n", "\n", "      Path fooCopy = Files.copy(fooPath, fs.getPath(\"fooCopy\"));\n", "      assertThat(Files.isSameFile(fooPath, fooCopy)).isFalse();\n", "      assertThat(MoreFiles.equal(fooPath, fooCopy)).isTrue();\n", "\n", "      MoreFiles.asCharSink(fooCopy, UTF_8).write(\"boo\");\n", "      assertThat(MoreFiles.asByteSource(fooPath).size())\n", "          .isEqualTo(MoreFiles.asByteSource(fooCopy).size());\n", "      assertThat(MoreFiles.equal(fooPath, fooCopy)).isFalse();\n", "\n", "      // should also assert that a Path that erroneously reports a size 0 can still be compared,\n", "      // not sure how to do that with the Path API\n", "    }\n", "  }\n", "\n", "  public void testEqual_links() throws IOException {\n", "    try (FileSystem fs = Jimfs.newFileSystem(Configuration.unix())) {\n", "      Path fooPath = fs.getPath(\"foo\");\n", "      MoreFiles.asCharSink(fooPath, UTF_8).write(\"foo\");\n", "\n", "      Path fooSymlink = fs.getPath(\"symlink\");\n", "      Files.createSymbolicLink(fooSymlink, fooPath);\n", "\n", "      Path fooHardlink = fs.getPath(\"hardlink\");\n", "      Files.createLink(fooHardlink, fooPath);\n", "\n", "      assertThat(MoreFiles.equal(fooPath, fooSymlink)).isTrue();\n", "      assertThat(MoreFiles.equal(fooPath, fooHardlink)).isTrue();\n", "      assertThat(MoreFiles.equal(fooSymlink, fooHardlink)).isTrue();\n", "    }\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [23], "2": [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225]}, "removed_lines": {}}, {"1": "guava/src/com/google/common/io/Files.java", "added": {"1": ["   * Returns true if the given files exist, are not directories, and contain the same bytes.\n"]}, "removed": {"1": ["   * Returns true if the files contains the same bytes.\n"]}, "added_lines": {"1": [341]}, "removed_lines": {"1": [341]}}, {"2": "guava/src/com/google/common/io/MoreFiles.java", "added": {"1": ["  /**\n", "   * Returns true if the files located by the given paths exist, are not directories, and contain\n", "   * the same bytes.\n", "   *\n", "   * @throws IOException if an I/O error occurs\n", "   * @since 22.0\n", "   */\n", "  public static boolean equal(Path path1, Path path2) throws IOException {\n", "    checkNotNull(path1);\n", "    checkNotNull(path2);\n", "    if (Files.isSameFile(path1, path2)) {\n", "      return true;\n", "    }\n", "\n", "    /*\n", "     * Some operating systems may return zero as the length for files denoting system-dependent\n", "     * entities such as devices or pipes, in which case we must fall back on comparing the bytes\n", "     * directly.\n", "     */\n", "    ByteSource source1 = asByteSource(path1);\n", "    ByteSource source2 = asByteSource(path2);\n", "    long len1 = source1.sizeIfKnown().or(0L);\n", "    long len2 = source2.sizeIfKnown().or(0L);\n", "    if (len1 != 0 && len2 != 0 && len1 != len2) {\n", "      return false;\n", "    }\n", "    return source1.contentEquals(source2);\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348]}, "removed_lines": {}}]}
