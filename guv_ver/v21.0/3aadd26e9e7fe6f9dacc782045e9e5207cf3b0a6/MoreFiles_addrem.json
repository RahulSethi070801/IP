{
    "addition": {
        "320": "  /**\n",
        "321": "   * Returns true if the files located by the given paths exist, are not directories, and contain\n",
        "322": "   * the same bytes.\n",
        "323": "   *\n",
        "324": "   * @throws IOException if an I/O error occurs\n",
        "325": "   * @since 22.0\n",
        "326": "   */\n",
        "327": "  public static boolean equal(Path path1, Path path2) throws IOException {\n",
        "328": "    checkNotNull(path1);\n",
        "329": "    checkNotNull(path2);\n",
        "330": "    if (Files.isSameFile(path1, path2)) {\n",
        "331": "      return true;\n",
        "332": "    }\n",
        "333": "\n",
        "334": "    /*\n",
        "335": "     * Some operating systems may return zero as the length for files denoting system-dependent\n",
        "336": "     * entities such as devices or pipes, in which case we must fall back on comparing the bytes\n",
        "337": "     * directly.\n",
        "338": "     */\n",
        "339": "    ByteSource source1 = asByteSource(path1);\n",
        "340": "    ByteSource source2 = asByteSource(path2);\n",
        "341": "    long len1 = source1.sizeIfKnown().or(0L);\n",
        "342": "    long len2 = source2.sizeIfKnown().or(0L);\n",
        "343": "    if (len1 != 0 && len2 != 0 && len1 != len2) {\n",
        "344": "      return false;\n",
        "345": "    }\n",
        "346": "    return source1.contentEquals(source2);\n",
        "347": "  }\n",
        "348": "\n"
    },
    "removed": {}
}