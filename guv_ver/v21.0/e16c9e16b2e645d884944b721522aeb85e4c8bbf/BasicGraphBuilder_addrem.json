{
    "addition": {
        "26": " * A builder for constructing instances of {@link MutableBasicGraph} with user-defined properties.\n",
        "29": " *\n",
        "32": " * <li>orders {@link Graph#nodes()} in the order in which the elements were added\n",
        "35": " * <p>Example of use:\n",
        "36": " *\n",
        "37": " * <pre><code>\n",
        "38": " * MutableBasicGraph<String> graph = BasicGraphBuilder.undirected().build();\n",
        "39": " * graph.putEdge(\"chocolate\", \"peanut butter\");\n",
        "40": " * graph.putEdge(\"peanut butter\", \"jelly\");\n",
        "41": " * </code></pre>\n",
        "42": " *\n",
        "50": "  /** Creates a new instance with the specified edge directionality. */\n",
        "55": "  /** Returns a {@link BasicGraphBuilder} for building directed graphs. */\n",
        "60": "  /** Returns a {@link BasicGraphBuilder} for building undirected graphs. */\n",
        "66": "   * Returns a {@link BasicGraphBuilder} initialized with all properties queryable from {@code\n",
        "67": "   * graph}.\n",
        "82": "   * Attempting to add a self-loop to a graph that does not allow them will throw an {@link\n",
        "83": "   * UnsupportedOperationException}.\n",
        "96": "    checkArgument(\n",
        "97": "        expectedNodeCount >= 0,\n",
        "98": "        \"The expected number of nodes can't be negative: %s\",\n",
        "104": "  /** Specifies the order of iteration for the elements of {@link Graph#nodes()}. */\n",
        "113": "   * Returns an empty {@link MutableBasicGraph} with the properties of this {@link\n",
        "114": "   * BasicGraphBuilder}.\n"
    },
    "removed": {
        "26": " * A builder for constructing instances of {@link BasicGraph} with user-defined properties.\n",
        "31": " * <li>orders {@code nodes()} in the order in which the elements were added\n",
        "41": "  /**\n",
        "42": "   * Creates a new instance with the specified edge directionality.\n",
        "43": "   *\n",
        "44": "   * @param directed if true, creates an instance for graphs whose edges are each directed;\n",
        "45": "   *      if false, creates an instance for graphs whose edges are each undirected.\n",
        "46": "   */\n",
        "51": "  /**\n",
        "52": "   * Returns a {@link BasicGraphBuilder} for building directed graphs.\n",
        "53": "   */\n",
        "58": "  /**\n",
        "59": "   * Returns a {@link BasicGraphBuilder} for building undirected graphs.\n",
        "60": "   */\n",
        "66": "   * Returns a {@link BasicGraphBuilder} initialized with all properties queryable from\n",
        "67": "   * {@code graph}.\n",
        "82": "   * Attempting to add a self-loop to a graph that does not allow them will throw an\n",
        "83": "   * {@link UnsupportedOperationException}.\n",
        "96": "    checkArgument(expectedNodeCount >= 0, \"The expected number of nodes can't be negative: %s\",\n",
        "102": "  /**\n",
        "103": "   * Specifies the order of iteration for the elements of {@link Graph#nodes()}.\n",
        "104": "   */\n",
        "113": "   * Returns an empty {@link MutableBasicGraph} with the properties of this\n",
        "114": "   * {@link BasicGraphBuilder}.\n"
    }
}