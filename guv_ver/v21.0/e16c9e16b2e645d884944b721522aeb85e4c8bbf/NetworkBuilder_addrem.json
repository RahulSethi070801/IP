{
    "addition": {
        "26": " * A builder for constructing instances of {@link MutableNetwork} with user-defined properties.\n",
        "27": " *\n",
        "28": " * <p>A network built by this class will have the following properties by default:\n",
        "33": " * <li>orders {@link Network#nodes()} and {@link Network#edges()} in the order in which the elements\n",
        "34": " *     were added\n",
        "37": " * <p>Example of use:\n",
        "38": " *\n",
        "39": " * <pre><code>\n",
        "40": " * MutableNetwork<Integer, String> network =\n",
        "41": " *     NetworkBuilder.directed().allowsParallelEdges(true).build();\n",
        "42": " * network.addEdge(1, 2, \"1->2\");\n",
        "43": " * network.addEdge(1, 2, \"1->2 other\");\n",
        "44": " * </code></pre>\n",
        "45": " *\n",
        "56": "  /** Creates a new instance with the specified edge directionality. */\n",
        "61": "  /** Returns a {@link NetworkBuilder} for building directed networks. */\n",
        "66": "  /** Returns a {@link NetworkBuilder} for building undirected networks. */\n",
        "72": "   * Returns a {@link NetworkBuilder} initialized with all properties queryable from {@code\n",
        "73": "   * network}.\n",
        "76": "   * such as {@link Network#isDirected()}. Other properties, such as {@link\n",
        "77": "   * #expectedNodeCount(int)}, are not set in the new builder.\n",
        "79": "  public static <N, E> NetworkBuilder<N, E> from(Network<N, E> network) {\n",
        "80": "    checkNotNull(network);\n",
        "81": "    return new NetworkBuilder<Object, Object>(network.isDirected())\n",
        "82": "        .allowsParallelEdges(network.allowsParallelEdges())\n",
        "83": "        .allowsSelfLoops(network.allowsSelfLoops())\n",
        "84": "        .nodeOrder(network.nodeOrder())\n",
        "85": "        .edgeOrder(network.edgeOrder());\n",
        "89": "   * Specifies whether the network will allow parallel edges. Attempting to add a parallel edge to a\n",
        "90": "   * network that does not allow them will throw an {@link UnsupportedOperationException}.\n",
        "98": "   * Specifies whether the network will allow self-loops (edges that connect a node to itself).\n",
        "99": "   * Attempting to add a self-loop to a network that does not allow them will throw an {@link\n",
        "100": "   * UnsupportedOperationException}.\n",
        "108": "   * Specifies the expected number of nodes in the network.\n",
        "113": "    checkArgument(\n",
        "114": "        expectedNodeCount >= 0,\n",
        "115": "        \"The expected number of nodes can't be negative: %s\",\n",
        "122": "   * Specifies the expected number of edges in the network.\n",
        "127": "    checkArgument(\n",
        "128": "        expectedEdgeCount >= 0,\n",
        "129": "        \"The expected number of edges can't be negative: %s\",\n",
        "135": "  /** Specifies the order of iteration for the elements of {@link Network#nodes()}. */\n",
        "143": "  /** Specifies the order of iteration for the elements of {@link Network#edges()}. */\n",
        "151": "  /** Returns an empty {@link MutableNetwork} with the properties of this {@link NetworkBuilder}. */\n"
    },
    "removed": {
        "26": " * A builder for constructing instances of {@link Network} with user-defined properties.\n",
        "28": " * <p>A graph built by this class will have the following properties by default:\n",
        "32": " * <li>orders {@code nodes()} and {@code edges()} in the order in which the elements were added\n",
        "45": "  /**\n",
        "46": "   * Creates a new instance with the specified edge directionality.\n",
        "47": "   *\n",
        "48": "   * @param directed if true, creates an instance for graphs whose edges are each directed;\n",
        "49": "   *      if false, creates an instance for graphs whose edges are each undirected.\n",
        "50": "   */\n",
        "55": "  /**\n",
        "56": "   * Returns a {@link NetworkBuilder} for building directed graphs.\n",
        "57": "   */\n",
        "62": "  /**\n",
        "63": "   * Returns a {@link NetworkBuilder} for building undirected graphs.\n",
        "64": "   */\n",
        "70": "   * Returns a {@link NetworkBuilder} initialized with all properties queryable from {@code graph}.\n",
        "73": "   * such as {@link Network#isDirected()}. Other properties, such as\n",
        "74": "   * {@link #expectedNodeCount(int)}, are not set in the new builder.\n",
        "76": "  public static <N, E> NetworkBuilder<N, E> from(Network<N, E> graph) {\n",
        "77": "    checkNotNull(graph);\n",
        "78": "    return new NetworkBuilder<Object, Object>(graph.isDirected())\n",
        "79": "        .allowsParallelEdges(graph.allowsParallelEdges())\n",
        "80": "        .allowsSelfLoops(graph.allowsSelfLoops())\n",
        "81": "        .nodeOrder(graph.nodeOrder())\n",
        "82": "        .edgeOrder(graph.edgeOrder());\n",
        "86": "   * Specifies whether the graph will allow parallel edges. Attempting to add a parallel edge to\n",
        "87": "   * a graph that does not allow them will throw an {@link UnsupportedOperationException}.\n",
        "95": "   * Specifies whether the graph will allow self-loops (edges that connect a node to itself).\n",
        "96": "   * Attempting to add a self-loop to a graph that does not allow them will throw an\n",
        "97": "   * {@link UnsupportedOperationException}.\n",
        "105": "   * Specifies the expected number of nodes in the graph.\n",
        "110": "    checkArgument(expectedNodeCount >= 0, \"The expected number of nodes can't be negative: %s\",\n",
        "117": "   * Specifies the expected number of edges in the graph.\n",
        "122": "    checkArgument(expectedEdgeCount >= 0, \"The expected number of edges can't be negative: %s\",\n",
        "128": "  /**\n",
        "129": "   * Specifies the order of iteration for the elements of {@link Network#nodes()}.\n",
        "130": "   */\n",
        "138": "  /**\n",
        "139": "   * Specifies the order of iteration for the elements of {@link Network#edges()}.\n",
        "140": "   */\n",
        "148": "  /**\n",
        "149": "   * Returns an empty {@link MutableNetwork} with the properties of this {@link NetworkBuilder}.\n",
        "150": "   */\n"
    }
}