{"id": "e16c9e16b2e645d884944b721522aeb85e4c8bbf", "code": [{"0": "guava/src/com/google/common/graph/BasicGraphBuilder.java", "added": {"1": [" * A builder for constructing instances of {@link MutableBasicGraph} with user-defined properties.\n", " *\n", " * <li>orders {@link Graph#nodes()} in the order in which the elements were added\n", " * <p>Example of use:\n", " *\n", " * <pre><code>\n", " * MutableBasicGraph<String> graph = BasicGraphBuilder.undirected().build();\n", " * graph.putEdge(\"chocolate\", \"peanut butter\");\n", " * graph.putEdge(\"peanut butter\", \"jelly\");\n", " * </code></pre>\n", " *\n"], "2": ["  /** Creates a new instance with the specified edge directionality. */\n", "  /** Returns a {@link BasicGraphBuilder} for building directed graphs. */\n", "  /** Returns a {@link BasicGraphBuilder} for building undirected graphs. */\n", "   * Returns a {@link BasicGraphBuilder} initialized with all properties queryable from {@code\n", "   * graph}.\n"], "3": ["   * Attempting to add a self-loop to a graph that does not allow them will throw an {@link\n", "   * UnsupportedOperationException}.\n"], "4": ["    checkArgument(\n", "        expectedNodeCount >= 0,\n", "        \"The expected number of nodes can't be negative: %s\",\n", "  /** Specifies the order of iteration for the elements of {@link Graph#nodes()}. */\n"], "5": ["   * Returns an empty {@link MutableBasicGraph} with the properties of this {@link\n", "   * BasicGraphBuilder}.\n"]}, "removed": {"1": [" * A builder for constructing instances of {@link BasicGraph} with user-defined properties.\n", " * <li>orders {@code nodes()} in the order in which the elements were added\n"], "2": ["  /**\n", "   * Creates a new instance with the specified edge directionality.\n", "   *\n", "   * @param directed if true, creates an instance for graphs whose edges are each directed;\n", "   *      if false, creates an instance for graphs whose edges are each undirected.\n", "   */\n", "  /**\n", "   * Returns a {@link BasicGraphBuilder} for building directed graphs.\n", "   */\n", "  /**\n", "   * Returns a {@link BasicGraphBuilder} for building undirected graphs.\n", "   */\n", "   * Returns a {@link BasicGraphBuilder} initialized with all properties queryable from\n", "   * {@code graph}.\n"], "3": ["   * Attempting to add a self-loop to a graph that does not allow them will throw an\n", "   * {@link UnsupportedOperationException}.\n"], "4": ["    checkArgument(expectedNodeCount >= 0, \"The expected number of nodes can't be negative: %s\",\n", "  /**\n", "   * Specifies the order of iteration for the elements of {@link Graph#nodes()}.\n", "   */\n"], "5": ["   * Returns an empty {@link MutableBasicGraph} with the properties of this\n", "   * {@link BasicGraphBuilder}.\n"]}, "added_lines": {"1": [26, 29, 32, 35, 36, 37, 38, 39, 40, 41, 42], "2": [50, 55, 60, 66, 67], "3": [82, 83], "4": [96, 97, 98, 104], "5": [113, 114]}, "removed_lines": {"1": [26, 31], "2": [41, 42, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 66, 67], "3": [82, 83], "4": [96, 102, 103, 104], "5": [113, 114]}}, {"1": "guava/src/com/google/common/graph/GraphBuilder.java", "added": {"1": [" * A builder for constructing instances of {@link MutableGraph} with user-defined properties.\n", " *\n", " * <li>orders {@link Graph#nodes()} in the order in which the elements were added\n", " * <p>Example of use:\n", " *\n", " * <pre><code>\n", " * MutableGraph<String, Double> graph = GraphBuilder.undirected().build();\n", " * graph.putEdgeValue(\"Miami\", \"Denver\", 5280.0);\n", " * </code></pre>\n", " *\n"], "2": ["  /** Creates a new instance with the specified edge directionality. */\n", "  /** Returns a {@link GraphBuilder} for building directed graphs. */\n", "  /** Returns a {@link GraphBuilder} for building undirected graphs. */\n", "   * Returns a {@link GraphBuilder} initialized with all properties queryable from {@code graph}.\n"], "3": ["   * Attempting to add a self-loop to a graph that does not allow them will throw an {@link\n", "   * UnsupportedOperationException}.\n"], "4": ["    checkArgument(\n", "        expectedNodeCount >= 0,\n", "        \"The expected number of nodes can't be negative: %s\",\n", "  /** Specifies the order of iteration for the elements of {@link Graph#nodes()}. */\n"], "5": ["  /** Returns an empty {@link MutableGraph} with the properties of this {@link GraphBuilder}. */\n"]}, "removed": {"1": [" * A builder for constructing instances of {@link Graph} with user-defined properties.\n", " * <li>orders {@code nodes()} in the order in which the elements were added\n"], "2": ["  /**\n", "   * Creates a new instance with the specified edge directionality.\n", "   *\n", "   * @param directed if true, creates an instance for graphs whose edges are each directed;\n", "   *      if false, creates an instance for graphs whose edges are each undirected.\n", "   */\n", "  /**\n", "   * Returns a {@link GraphBuilder} for building directed graphs.\n", "   */\n", "  /**\n", "   * Returns a {@link GraphBuilder} for building undirected graphs.\n", "   */\n", "   * Returns a {@link GraphBuilder} initialized with all properties queryable from\n", "   * {@code graph}.\n"], "3": ["   * Attempting to add a self-loop to a graph that does not allow them will throw an\n", "   * {@link UnsupportedOperationException}.\n"], "4": ["    checkArgument(expectedNodeCount >= 0, \"The expected number of nodes can't be negative: %s\",\n", "  /**\n", "   * Specifies the order of iteration for the elements of {@link BasicGraph#nodes()}.\n", "   */\n"], "5": ["  /**\n", "   * Returns an empty {@link MutableGraph} with the properties of this {@link GraphBuilder}.\n", "   */\n"]}, "added_lines": {"1": [26, 29, 32, 35, 36, 37, 38, 39, 40, 41], "2": [49, 54, 59, 65], "3": [80, 81], "4": [94, 95, 96, 102], "5": [110]}, "removed_lines": {"1": [26, 31], "2": [41, 42, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 66, 67], "3": [82, 83], "4": [96, 102, 103, 104], "5": [112, 113, 114]}}, {"2": "guava/src/com/google/common/graph/NetworkBuilder.java", "added": {"1": [" * A builder for constructing instances of {@link MutableNetwork} with user-defined properties.\n", " *\n", " * <p>A network built by this class will have the following properties by default:\n", " * <li>orders {@link Network#nodes()} and {@link Network#edges()} in the order in which the elements\n", " *     were added\n", " * <p>Example of use:\n", " *\n", " * <pre><code>\n", " * MutableNetwork<Integer, String> network =\n", " *     NetworkBuilder.directed().allowsParallelEdges(true).build();\n", " * network.addEdge(1, 2, \"1->2\");\n", " * network.addEdge(1, 2, \"1->2 other\");\n", " * </code></pre>\n", " *\n"], "2": ["  /** Creates a new instance with the specified edge directionality. */\n", "  /** Returns a {@link NetworkBuilder} for building directed networks. */\n", "  /** Returns a {@link NetworkBuilder} for building undirected networks. */\n", "   * Returns a {@link NetworkBuilder} initialized with all properties queryable from {@code\n", "   * network}.\n", "   * such as {@link Network#isDirected()}. Other properties, such as {@link\n", "   * #expectedNodeCount(int)}, are not set in the new builder.\n", "  public static <N, E> NetworkBuilder<N, E> from(Network<N, E> network) {\n", "    checkNotNull(network);\n", "    return new NetworkBuilder<Object, Object>(network.isDirected())\n", "        .allowsParallelEdges(network.allowsParallelEdges())\n", "        .allowsSelfLoops(network.allowsSelfLoops())\n", "        .nodeOrder(network.nodeOrder())\n", "        .edgeOrder(network.edgeOrder());\n", "   * Specifies whether the network will allow parallel edges. Attempting to add a parallel edge to a\n", "   * network that does not allow them will throw an {@link UnsupportedOperationException}.\n"], "3": ["   * Specifies whether the network will allow self-loops (edges that connect a node to itself).\n", "   * Attempting to add a self-loop to a network that does not allow them will throw an {@link\n", "   * UnsupportedOperationException}.\n"], "4": ["   * Specifies the expected number of nodes in the network.\n", "    checkArgument(\n", "        expectedNodeCount >= 0,\n", "        \"The expected number of nodes can't be negative: %s\",\n", "   * Specifies the expected number of edges in the network.\n", "    checkArgument(\n", "        expectedEdgeCount >= 0,\n", "        \"The expected number of edges can't be negative: %s\",\n", "  /** Specifies the order of iteration for the elements of {@link Network#nodes()}. */\n"], "5": ["  /** Specifies the order of iteration for the elements of {@link Network#edges()}. */\n"], "6": ["  /** Returns an empty {@link MutableNetwork} with the properties of this {@link NetworkBuilder}. */\n"]}, "removed": {"1": [" * A builder for constructing instances of {@link Network} with user-defined properties.\n", " * <p>A graph built by this class will have the following properties by default:\n", " * <li>orders {@code nodes()} and {@code edges()} in the order in which the elements were added\n"], "2": ["  /**\n", "   * Creates a new instance with the specified edge directionality.\n", "   *\n", "   * @param directed if true, creates an instance for graphs whose edges are each directed;\n", "   *      if false, creates an instance for graphs whose edges are each undirected.\n", "   */\n", "  /**\n", "   * Returns a {@link NetworkBuilder} for building directed graphs.\n", "   */\n", "  /**\n", "   * Returns a {@link NetworkBuilder} for building undirected graphs.\n", "   */\n", "   * Returns a {@link NetworkBuilder} initialized with all properties queryable from {@code graph}.\n", "   * such as {@link Network#isDirected()}. Other properties, such as\n", "   * {@link #expectedNodeCount(int)}, are not set in the new builder.\n", "  public static <N, E> NetworkBuilder<N, E> from(Network<N, E> graph) {\n", "    checkNotNull(graph);\n", "    return new NetworkBuilder<Object, Object>(graph.isDirected())\n", "        .allowsParallelEdges(graph.allowsParallelEdges())\n", "        .allowsSelfLoops(graph.allowsSelfLoops())\n", "        .nodeOrder(graph.nodeOrder())\n", "        .edgeOrder(graph.edgeOrder());\n", "   * Specifies whether the graph will allow parallel edges. Attempting to add a parallel edge to\n", "   * a graph that does not allow them will throw an {@link UnsupportedOperationException}.\n"], "3": ["   * Specifies whether the graph will allow self-loops (edges that connect a node to itself).\n", "   * Attempting to add a self-loop to a graph that does not allow them will throw an\n", "   * {@link UnsupportedOperationException}.\n"], "4": ["   * Specifies the expected number of nodes in the graph.\n", "    checkArgument(expectedNodeCount >= 0, \"The expected number of nodes can't be negative: %s\",\n", "   * Specifies the expected number of edges in the graph.\n", "    checkArgument(expectedEdgeCount >= 0, \"The expected number of edges can't be negative: %s\",\n", "  /**\n", "   * Specifies the order of iteration for the elements of {@link Network#nodes()}.\n", "   */\n"], "5": ["  /**\n", "   * Specifies the order of iteration for the elements of {@link Network#edges()}.\n", "   */\n"], "6": ["  /**\n", "   * Returns an empty {@link MutableNetwork} with the properties of this {@link NetworkBuilder}.\n", "   */\n"]}, "added_lines": {"1": [26, 27, 28, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45], "2": [56, 61, 66, 72, 73, 76, 77, 79, 80, 81, 82, 83, 84, 85, 89, 90], "3": [98, 99, 100], "4": [108, 113, 114, 115, 122, 127, 128, 129, 135], "5": [143], "6": [151]}, "removed_lines": {"1": [26, 28, 32], "2": [45, 46, 47, 48, 49, 50, 55, 56, 57, 62, 63, 64, 70, 73, 74, 76, 77, 78, 79, 80, 81, 82, 86, 87], "3": [95, 96, 97], "4": [105, 110, 117, 122, 128, 129, 130], "5": [138, 139, 140], "6": [148, 149, 150]}}]}
