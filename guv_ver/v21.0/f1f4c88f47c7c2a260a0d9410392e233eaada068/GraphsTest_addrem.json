{
    "addition": {},
    "removed": {
        "23": "import static com.google.common.graph.Graphs.oppositeNode;\n",
        "29": "import com.google.common.collect.ImmutableList;\n",
        "36": "import java.util.List;\n",
        "135": "  @Test\n",
        "136": "  public void oppositeNode_basic() {\n",
        "137": "    List<MutableNetwork<Integer, String>> testNetworks = ImmutableList.of(\n",
        "138": "        NetworkBuilder.directed().<Integer, String>build(),\n",
        "139": "        NetworkBuilder.undirected().<Integer, String>build());\n",
        "140": "    for (MutableNetwork<Integer, String> graph : testNetworks) {\n",
        "141": "      graph.addEdge(E12, N1, N2);\n",
        "142": "      assertThat(oppositeNode(graph, E12, N1)).isEqualTo(N2);\n",
        "143": "      assertThat(oppositeNode(graph, E12, N2)).isEqualTo(N1);\n",
        "144": "    }\n",
        "145": "  }\n",
        "146": "\n",
        "147": "  @Test\n",
        "148": "  public void oppositeNode_parallelEdge() {\n",
        "149": "    List<MutableNetwork<Integer, String>> testNetworks = ImmutableList.of(\n",
        "150": "        NetworkBuilder.directed().allowsParallelEdges(true).<Integer, String>build(),\n",
        "151": "        NetworkBuilder.undirected().allowsParallelEdges(true).<Integer, String>build());\n",
        "152": "    for (MutableNetwork<Integer, String> graph : testNetworks) {\n",
        "153": "      graph.addEdge(E12, N1, N2);\n",
        "154": "      graph.addEdge(E12_A, N1, N2);\n",
        "155": "      assertThat(oppositeNode(graph, E12, N1)).isEqualTo(N2);\n",
        "156": "      assertThat(oppositeNode(graph, E12, N2)).isEqualTo(N1);\n",
        "157": "      assertThat(oppositeNode(graph, E12_A, N1)).isEqualTo(N2);\n",
        "158": "      assertThat(oppositeNode(graph, E12_A, N2)).isEqualTo(N1);\n",
        "159": "    }\n",
        "160": "  }\n",
        "161": "\n",
        "162": "  @Test\n",
        "163": "  public void oppositeNode_selfLoop() {\n",
        "164": "    List<MutableNetwork<Integer, String>> testNetworks = ImmutableList.of(\n",
        "165": "        NetworkBuilder.directed().<Integer, String>build(),\n",
        "166": "        NetworkBuilder.undirected().<Integer, String>build());\n",
        "167": "    for (MutableNetwork<Integer, String> graph : testNetworks) {\n",
        "168": "      graph.addEdge(E11, N1, N1);\n",
        "169": "      assertThat(oppositeNode(graph, E11, N1)).isEqualTo(N1);\n",
        "170": "    }\n",
        "171": "  }\n",
        "172": "\n",
        "173": "  @Test\n",
        "174": "  public void oppositeNode_nodeNotIncident() {\n",
        "175": "    List<MutableNetwork<Integer, String>> testNetworks = ImmutableList.of(\n",
        "176": "        NetworkBuilder.directed().<Integer, String>build(),\n",
        "177": "        NetworkBuilder.undirected().<Integer, String>build());\n",
        "178": "    for (MutableNetwork<Integer, String> graph : testNetworks) {\n",
        "179": "      graph.addEdge(E12, N1, N2);\n",
        "180": "      graph.addEdge(E13, N1, N3);\n",
        "181": "      try {\n",
        "182": "        oppositeNode(graph, E12, N3);\n",
        "183": "        fail(\"Should have rejected oppositeNode() called without a node incident to edge\");\n",
        "184": "      } catch (IllegalArgumentException expected) {\n",
        "185": "      }\n",
        "186": "    }\n",
        "187": "  }\n",
        "188": "\n"
    }
}